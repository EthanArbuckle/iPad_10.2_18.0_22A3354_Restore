uint64_t sirinluexternal::Parser::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::Parser::formatText(sirinluexternal::Parser *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "algorithm");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "parser_id");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::Parser::Parser(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAF268;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAF268;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t sirinluexternal::Parser::Parser(uint64_t this, const sirinluexternal::Parser *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_1E7BAF268;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_1E7BAF268;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t sirinluexternal::Parser::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v10[0] = &off_1E7BAF268;
    v11 = 0;
    v3 = *(_BYTE *)(a2 + 16);
    if ((v3 & 1) != 0)
    {
      v4 = *(_DWORD *)(a2 + 8);
      LOBYTE(v11) = 1;
      v5 = 3;
      if ((v3 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
      {
LABEL_4:
        v6 = *(_DWORD *)(a2 + 12);
        LOBYTE(v11) = v5;
LABEL_7:
        v7 = v11;
        v11 = *(_DWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v6;
        *(_DWORD *)(a1 + 16) = v7;
        v10[1] = v8;
        PB::Base::~Base((PB::Base *)v10);
        return a1;
      }
    }
    v6 = 0;
    goto LABEL_7;
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E7BAF268;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::Parser *a2, sirinluexternal::Parser *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  result = *((double *)a2 + 1);
  v5 = *((_QWORD *)this + 1);
  *((double *)this + 1) = result;
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

double sirinluexternal::Parser::Parser(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BAF268;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BAF268;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

BOOL sirinluexternal::Parser::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t sirinluexternal::Parser::hash_value(sirinluexternal::Parser *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((int *)this + 2);
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t SIRICOMMONBoolValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_BYTE *)(a1 + 8) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSPANMATCHSpanMatchResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALMatchingSpan *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend(a1, "addMatchingSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F3F734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F3F810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F3F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F3F9E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F3FA78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F3FBB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F3FEEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C1F4002C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL CDMCATISwiftBloomFilter::Verify(CDMCATISwiftBloomFilter *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  CDMCATISwiftBloomFilter *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  CDMCATISwiftBloomFilter *v15;
  uint64_t v16;
  CDMCATISwiftBloomFilter *v17;
  CDMCATISwiftBloomFilter *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      v5 = *(int *)this->var0;
      v6 = *(unsigned __int16 *)this[-v5].var0;
      if (v6 < 5)
        goto LABEL_28;
      if (*(_WORD *)this[-v5 + 4].var0)
      {
        result = CDMCATISwiftBitVector::Verify((CDMCATISwiftBitVector *)&this[*(unsigned __int16 *)this[-v5 + 4].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v5 + 4].var0].var0], a2);
        if (!result)
          return result;
        v5 = *(int *)this->var0;
        v7 = -v5;
        v6 = *(unsigned __int16 *)this[-v5].var0;
      }
      else
      {
        v7 = -v5;
      }
      if (v6 < 7)
        goto LABEL_28;
      v8 = &this[v7];
      if (!*(_WORD *)v8[6].var0
        || (result = 0, v9 = *((_QWORD *)a2 + 1), v9 >= 9)
        && v9 - 8 >= (unint64_t)this[*(unsigned __int16 *)v8[6].var0 - *(_QWORD *)a2].var0)
      {
        if (v6 < 9)
          goto LABEL_28;
        if (!*(_WORD *)v8[8].var0
          || (result = 0, v10 = *((_QWORD *)a2 + 1), v10 >= 9)
          && v10 - 8 >= (unint64_t)this[*(unsigned __int16 *)v8[8].var0 - *(_QWORD *)a2].var0)
        {
          if (v6 < 0xB
            || (!*(_WORD *)v8[10].var0
             || (result = 0, v11 = *((_QWORD *)a2 + 1), v11 >= 9)
             && v11 - 8 >= (unint64_t)this[*(unsigned __int16 *)v8[10].var0 - *(_QWORD *)a2].var0)
            && (v6 < 0xD
             || (!*(_WORD *)v8[12].var0
              || (result = 0, v12 = *((_QWORD *)a2 + 1), v12 >= 5)
              && v12 - 4 >= (unint64_t)this[*(unsigned __int16 *)v8[12].var0 - *(_QWORD *)a2].var0)
             && (v6 < 0xF
              || (v13 = *(unsigned __int16 *)v8[14].var0, !*(_WORD *)v8[14].var0)
              || (result = 0, v14 = *((_QWORD *)a2 + 1), v14 >= 9)
              && v14 - 8 >= (unint64_t)this[v13 - *(_QWORD *)a2].var0)))
          {
LABEL_28:
            result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 0x10u);
            if (result)
            {
              v15 = &this[-(int)v5];
              if (*(unsigned __int16 *)v15->var0 >= 0x11u && (v16 = *(unsigned __int16 *)v15[16].var0) != 0)
                v17 = &this[v16 + *(unsigned int *)this[v16].var0];
              else
                v17 = 0;
              result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v17->var0);
              if (result)
              {
                v18 = &this[-*(int *)this->var0];
                v19 = *(unsigned __int16 *)v18->var0;
                if (v19 < 0x13
                  || (!*(_WORD *)v18[18].var0
                   || (result = 0, v20 = *((_QWORD *)a2 + 1), v20 >= 5)
                   && v20 - 4 >= (unint64_t)this[*(unsigned __int16 *)v18[18].var0 - *(_QWORD *)a2].var0)
                  && (v19 < 0x15
                   || (v21 = *(unsigned __int16 *)v18[20].var0) == 0
                   || (result = 0, v22 = *((_QWORD *)a2 + 1), v22 >= 5)
                   && v22 - 4 >= (unint64_t)this[v21 - *(_QWORD *)a2].var0))
                {
                  --*((_DWORD *)a2 + 4);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL CDMCATISwiftBitVector::Verify(CDMCATISwiftBitVector *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  CDMCATISwiftBitVector *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    v5 = &this[-*(int *)this->var0];
    v6 = *(unsigned __int16 *)v5->var0;
    if (v6 < 5)
      goto LABEL_18;
    if (!*(_WORD *)v5[4].var0
      || (result = 0, v7 = *((_QWORD *)a2 + 1), v7 >= 9)
      && v7 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[4].var0 - *(_QWORD *)a2].var0)
    {
      if (v6 < 7
        || (!*(_WORD *)v5[6].var0
         || (result = 0, v8 = *((_QWORD *)a2 + 1), v8 >= 9)
         && v8 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[6].var0 - *(_QWORD *)a2].var0)
        && (v6 < 9
         || (!*(_WORD *)v5[8].var0
          || (result = 0, v9 = *((_QWORD *)a2 + 1), v9 >= 9)
          && v9 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[8].var0 - *(_QWORD *)a2].var0)
         && (v6 < 0xB
          || !*(_WORD *)v5[10].var0
          || (result = 0, v10 = *((_QWORD *)a2 + 1), v10 >= 9)
          && v10 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[10].var0 - *(_QWORD *)a2].var0)))
      {
LABEL_18:
        result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 0xCu);
        if (result
          && (v6 < 0xD
           || !*(_WORD *)v5[12].var0
           || (result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)v5[12].var0+ *(unsigned int *)this[*(unsigned __int16 *)v5[12].var0].var0].var0, 1uLL, 0))))
        {
          --*((_DWORD *)a2 + 4);
          return 1;
        }
      }
    }
  }
  return result;
}

void sirinluinternal::CCQROverrideTemplate::~CCQROverrideTemplate(sirinluinternal::CCQROverrideTemplate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF2B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF2B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF2B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::CCQROverrideTemplate::readFrom(sirinluinternal::CCQROverrideTemplate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = &off_1E7BB19E0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::CCQROverrideTemplate::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternal::CCQROverrideTemplate::formatText(sirinluinternal::CCQROverrideTemplate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "rewrite_message");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(_QWORD *this)
{
  *this = &off_1E7BAF2B8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF2B8;
  this[1] = 0;
  return this;
}

sirinluinternal::CCQROverrideTemplate *sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(sirinluinternal::CCQROverrideTemplate *this, const sirinluexternal::RewriteMessage **a2)
{
  sirinluexternal::RewriteMessage *v4;
  sirinluexternal::RewriteMessage *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAF2B8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluexternal::RewriteMessage *)operator new();
    v5 = sirinluexternal::RewriteMessage::RewriteMessage(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternal::CCQROverrideTemplate::operator=(uint64_t a1, const sirinluexternal::RewriteMessage **a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternal::CCQROverrideTemplate *__hidden);
  uint64_t v6;

  if ((const sirinluexternal::RewriteMessage **)a1 != a2)
  {
    sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate((sirinluinternal::CCQROverrideTemplate *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAF2B8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::CCQROverrideTemplate *a2, sirinluinternal::CCQROverrideTemplate *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF2B8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF2B8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternal::CCQROverrideTemplate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF2B8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::CCQROverrideTemplate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluexternal::RewriteMessage::operator==(v2, v3);
}

unint64_t sirinluinternal::CCQROverrideTemplate::hash_value(sirinluinternal::CCQROverrideTemplate *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 20) & 1) != 0)
    v2 = *(int *)(v1 + 16);
  else
    v2 = 0;
  v4 = *(_QWORD *)(v1 + 8);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v4 ^ v2;
}

_QWORD *sirinluinternal::CCQROverrideTemplate::makeRewriteMessage(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB19E0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this)
{
  sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAF308;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::readFrom(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E7BAE468;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_QWORD *)(v22 + 56) = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::formatText(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "request_id");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF308;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF308;
  return this;
}

sirinluexternalsubword_embedding::SubwordEmbeddingRequest *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this, const sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a2)
{
  sirinluexternal::RequestID **v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  sirinluexternal::RequestID *v10;
  sirinluexternal::RequestID *v11;
  sirinluexternal::RequestID *v12;

  *(_QWORD *)this = &off_1E7BAF308;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::RequestID **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = (sirinluexternal::RequestID *)operator new();
    v11 = sirinluexternal::RequestID::RequestID(v10, *((const sirinluexternal::RequestID **)a2 + 1));
    v12 = *v4;
    *v4 = v11;
    if (v12)
      (*(void (**)(sirinluexternal::RequestID *))(*(_QWORD *)v12 + 8))(v12);
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::operator=(uint64_t a1, const sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest((sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest((sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::swap(uint64_t this, sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a2, sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAF308;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest((sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)&v5);
  }
  return a1;
}

BOOL sirinluexternalsubword_embedding::SubwordEmbeddingRequest::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_21;
    return 0;
  }
  if (!v5)
    return 0;
  v6 = v4[23];
  if ((v6 & 0x80u) == 0)
    v7 = (unsigned __int8 *)v4[23];
  else
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v5[1];
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = *(unsigned __int8 **)(a2 + 16);
  else
    v10 = *v5;
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
      goto LABEL_21;
    return 0;
  }
  if (v4[23])
  {
    while (*v4 == *v10)
    {
      ++v4;
      ++v10;
      if (!--v6)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a2 + 8);
  result = (v12 | v13) == 0;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    return sirinluexternal::RequestID::operator==(*(_QWORD *)(a1 + 8), v13);
  return result;
}

unint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::hash_value(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v4);
  return v4 ^ v3;
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALRRSurroundingTextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUEXTERNALRRBoundingBox *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUEXTERNALRRBoundingBox **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUEXTERNALRRBoundingBox);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRBoundingBoxReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::RRGroupIdentifier::~RRGroupIdentifier(sirinluexternal::RRGroupIdentifier *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF358;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF358;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF358;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RRGroupIdentifier::readFrom(sirinluexternal::RRGroupIdentifier *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v32 = v22 + 1;
            v33 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v22 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v27) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BB0538;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::RRGroupIdentifier::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::RRGroupIdentifier::formatText(sirinluexternal::RRGroupIdentifier *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "group_id");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "seq");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAF358;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAF358;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

sirinluexternal::RRGroupIdentifier *sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(sirinluexternal::RRGroupIdentifier *this, const siricommon::StringValue **a2)
{
  siricommon::StringValue *v4;
  siricommon::StringValue *v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = &off_1E7BAF358;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (siricommon::StringValue *)operator new();
    v5 = siricommon::StringValue::StringValue(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) |= 1u;
    *((_DWORD *)this + 4) = v7;
  }
  return this;
}

uint64_t sirinluexternal::RRGroupIdentifier::operator=(uint64_t a1, const siricommon::StringValue **a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v6)(sirinluexternal::RRGroupIdentifier *__hidden);
  uint64_t v7;
  uint64_t v8;

  if ((const siricommon::StringValue **)a1 != a2)
  {
    sirinluexternal::RRGroupIdentifier::RRGroupIdentifier((sirinluexternal::RRGroupIdentifier *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    v8 = v4;
    v6 = &off_1E7BAF358;
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RRGroupIdentifier *a2, sirinluexternal::RRGroupIdentifier *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E7BAF358;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E7BAF358;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sirinluexternal::RRGroupIdentifier::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    v8[0] = &off_1E7BAF358;
    v8[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

BOOL sirinluexternal::RRGroupIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t sirinluexternal::RRGroupIdentifier::hash_value(sirinluexternal::RRGroupIdentifier *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v3 = std::__string_hash<char>::operator()[abi:ne180100](v3);
  }
  else
  {
    v3 = 0;
  }
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v4 = *((int *)this + 4);
  else
    v4 = 0;
  return v4 ^ v3;
}

_QWORD *sirinluexternal::RRGroupIdentifier::makeGroupId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalcdm::NluRequest::~NluRequest(sirinluexternalcdm::NluRequest *this)
{
  sirinluexternalcdm::NluRequest::~NluRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BAF3A8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalcdm::NluRequest::readFrom(sirinluexternalcdm::NluRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 16);
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<>(v8);
        v21 = *(_QWORD *)(*((_QWORD *)this + 3) - 8);
      }
      else if ((_DWORD)v20 == 2)
      {
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB16E8;
        *(_DWORD *)(v21 + 148) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        *(_OWORD *)(v21 + 104) = 0u;
        *(_QWORD *)(v21 + 128) = 0;
        *(_QWORD *)(v21 + 136) = 0;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v21 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
LABEL_27:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE468;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_QWORD *)(v21 + 56) = 0;
        v22 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *((_QWORD *)this + 5);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternalcdm::NluRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base **v6;
  const PB::Base **v7;
  const PB::Base *v8;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[1];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v7 = (const PB::Base **)v3[2];
  v6 = (const PB::Base **)v3[3];
  while (v7 != v6)
  {
    v8 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluexternalcdm::NluRequest::formatText(sirinluexternalcdm::NluRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "current_turn_input");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "previous_turn_inputs");
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "request_id");
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BB16E8;
  *(_DWORD *)(result + 148) = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F42648(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluexternalcdm::NluRequest::NluRequest(sirinluexternalcdm::NluRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAF3A8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAF3A8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluexternalcdm::NluRequest *sirinluexternalcdm::NluRequest::NluRequest(sirinluexternalcdm::NluRequest *this, const sirinluexternal::RequestID **a2)
{
  sirinluexternal::TurnInput **v4;
  sirinluexternal::RequestID *v5;
  sirinluexternal::RequestID *v6;
  uint64_t v7;
  sirinluexternal::TurnInput *v8;
  sirinluexternal::TurnInput *v9;
  sirinluexternal::TurnInput *v10;
  const sirinluexternal::TurnInput **v11;
  const sirinluexternal::TurnInput **i;

  *(_QWORD *)this = &off_1E7BAF3A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::TurnInput **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (a2[5])
  {
    v5 = (sirinluexternal::RequestID *)operator new();
    v6 = sirinluexternal::RequestID::RequestID(v5, a2[5]);
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = (sirinluexternal::TurnInput *)operator new();
    v9 = sirinluexternal::TurnInput::TurnInput(v8, a2[1]);
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::TurnInput *))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = (const sirinluexternal::TurnInput **)a2[2];
  for (i = (const sirinluexternal::TurnInput **)a2[3]; v11 != i; ++v11)
    PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<sirinluexternal::TurnInput const&>((sirinluexternal::TurnInput ***)this + 2, *v11);
  return this;
}

uint64_t PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<sirinluexternal::TurnInput const&>(sirinluexternal::TurnInput ***a1, const sirinluexternal::TurnInput *a2)
{
  sirinluexternal::TurnInput *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::TurnInput **v7;
  sirinluexternal::TurnInput **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::TurnInput **v14;
  unint64_t v15;
  sirinluexternal::TurnInput **v16;
  sirinluexternal::TurnInput **v17;
  sirinluexternal::TurnInput *v18;
  int64x2_t v19;
  sirinluexternal::TurnInput **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::TurnInput *)operator new();
  result = (uint64_t)sirinluexternal::TurnInput::TurnInput(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::TurnInput **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::TurnInput **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::TurnInput **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F4294C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalcdm::NluRequest::operator=(uint64_t a1, const sirinluexternal::RequestID **a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluexternal::RequestID **)a1 != a2)
  {
    sirinluexternalcdm::NluRequest::NluRequest((sirinluexternalcdm::NluRequest *)&v7, a2);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    sirinluexternalcdm::NluRequest::~NluRequest((sirinluexternalcdm::NluRequest *)&v7);
  }
  return a1;
}

_QWORD *sirinluexternalcdm::swap(_QWORD *this, sirinluexternalcdm::NluRequest *a2, sirinluexternalcdm::NluRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  return this;
}

uint64_t sirinluexternalcdm::NluRequest::NluRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E7BAF3A8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluexternalcdm::NluRequest::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sirinluexternalcdm::NluRequest::NluRequest((uint64_t)&v7, a2);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    sirinluexternalcdm::NluRequest::~NluRequest((sirinluexternalcdm::NluRequest *)&v7);
  }
  return a1;
}

uint64_t sirinluexternalcdm::NluRequest::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[5];
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !sirinluexternal::RequestID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[1];
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v7 && (sirinluexternal::TurnInput::operator==(v6, v7) & 1) != 0)
      return PB::PtrVector<sirinluexternal::TurnInput>::operator==(a1 + 2, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else if (!v7)
  {
    return PB::PtrVector<sirinluexternal::TurnInput>::operator==(a1 + 2, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  return 0;
}

uint64_t PB::PtrVector<sirinluexternal::TurnInput>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::TurnInput::operator==(*(_QWORD *)(v6 - 8), v7);
    if ((_DWORD)result)
      v9 = v6 == v4;
    else
      v9 = 1;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternalcdm::NluRequest::hash_value(sirinluexternalcdm::NluRequest *this)
{
  sirinluexternal::RequestID *v2;
  unint64_t v3;
  sirinluexternal::TurnInput *v4;
  unint64_t v5;
  sirinluexternal::TurnInput **v6;
  sirinluexternal::TurnInput **v7;
  uint64_t v8;
  sirinluexternal::TurnInput *v9;

  v2 = (sirinluexternal::RequestID *)*((_QWORD *)this + 5);
  if (v2)
    v3 = sirinluexternal::RequestID::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluexternal::TurnInput *)*((_QWORD *)this + 1);
  if (v4)
    v5 = sirinluexternal::TurnInput::hash_value(v4);
  else
    v5 = 0;
  v7 = (sirinluexternal::TurnInput **)*((_QWORD *)this + 2);
  v6 = (sirinluexternal::TurnInput **)*((_QWORD *)this + 3);
  if (v7 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v7++;
      v8 ^= sirinluexternal::TurnInput::hash_value(v9);
    }
    while (v7 != v6);
  }
  return v5 ^ v3 ^ v8;
}

_QWORD *sirinluexternalcdm::NluRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternalcdm::NluRequest::makeCurrentTurnInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB16E8;
    *(_DWORD *)(v2 + 148) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sub_1C1F42F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F430BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F431C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F43260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F4339C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F43478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F43584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F4361C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F43758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F43C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24)
{
  void *v24;

  if (__p)
    operator delete(__p);
  if (v24)
    operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_1C1F43E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL SSUCategoryGroup::Verify(SSUCategoryGroup *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUCategoryGroup *v5;
  uint64_t v6;
  SSUCategoryGroup *v7;
  uint64_t v8;
  uint64_t v9;
  SSUCategoryGroup *v10;
  unint64_t v11;
  SSUCategoryGroup *v12;
  SSUExample *v13;
  uint64_t v14;
  uint64_t v15;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (v6 = *(unsigned __int16 *)v5[4].var0) != 0)
        v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      else
        v7 = 0;
      result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
        if (result)
        {
          v8 = *(int *)this->var0;
          if (*(unsigned __int16 *)this[-v8].var0 < 7u)
            goto LABEL_18;
          if (*(_WORD *)this[-v8 + 6].var0)
          {
            result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v8 + 6].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v8 + 6].var0].var0].var0, 4uLL, 0);
            if (!result)
              return result;
            v8 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v8].var0 < 7u)
              goto LABEL_18;
          }
          v9 = *(unsigned __int16 *)this[-v8 + 6].var0;
          if (v9 && (v10 = &this[v9 + *(unsigned int *)this[v9].var0], *(_DWORD *)v10->var0))
          {
            v11 = 0;
            v12 = v10 + 4;
            while (SSUIntent::Verify((SSUIntent *)&v12[*(unsigned int *)v12->var0], a2))
            {
              ++v11;
              v12 += 4;
              if (v11 >= *(unsigned int *)v10->var0)
                goto LABEL_18;
            }
            return 0;
          }
          else
          {
LABEL_18:
            result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 8u);
            if (!result)
              return result;
            v13 = 0;
            v14 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
            {
              if (!*(_WORD *)this[-v14 + 8].var0)
                goto LABEL_23;
              result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v14 + 8].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v14 + 8].var0].var0].var0, 4uLL, 0);
              if (!result)
                return result;
              v13 = 0;
              v14 = *(int *)this->var0;
              if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
              {
LABEL_23:
                v15 = *(unsigned __int16 *)this[-v14 + 8].var0;
                if (v15)
                  v13 = (SSUExample *)&this[v15 + *(unsigned int *)this[v15].var0];
                else
                  v13 = 0;
              }
            }
            result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(a2, v13);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1C1F44248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F44358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F44464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F444FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F44638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F449C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C1F44AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL SSUCategory::Verify(SSUCategory *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  uint64_t v5;
  SSUCategory *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SSUCategory *v12;
  unint64_t v13;
  SSUCategory *v14;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (!result)
    return result;
  v5 = *(int *)this->var0;
  v6 = &this[-v5];
  v7 = *(unsigned __int16 *)this[-v5].var0;
  if (v7 >= 5)
  {
    if (*(_WORD *)v6[4].var0)
    {
      result = 0;
      v8 = *((_QWORD *)a2 + 1);
      if (v8 < 2 || v8 - 1 < (unint64_t)this[*(unsigned __int16 *)v6[4].var0 - *(_QWORD *)a2].var0)
        return result;
    }
  }
  result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
  if (!result)
    return result;
  if (v7 < 7)
    goto LABEL_18;
  if (*(_WORD *)v6[6].var0)
  {
    result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)v6[6].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[6].var0].var0].var0, 4uLL, 0);
    if (!result)
      return result;
    v9 = *(int *)this->var0;
    if (*(unsigned __int16 *)this[-v9].var0 < 7u)
      goto LABEL_18;
    v10 = -v9;
  }
  else
  {
    v10 = -v5;
  }
  v11 = *(unsigned __int16 *)this[v10 + 6].var0;
  if (!v11 || (v12 = &this[v11 + *(unsigned int *)this[v11].var0], !*(_DWORD *)v12->var0))
  {
LABEL_18:
    --*((_DWORD *)a2 + 4);
    return 1;
  }
  v13 = 0;
  v14 = v12 + 4;
  while (SSUCategoryGroup::Verify((SSUCategoryGroup *)&v14[*(unsigned int *)v14->var0], a2))
  {
    ++v13;
    v14 += 4;
    if (v13 >= *(unsigned int *)v12->var0)
      goto LABEL_18;
  }
  return 0;
}

void sirinluexternal::RRBoundingBox::~RRBoundingBox(sirinluexternal::RRBoundingBox *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::RRBoundingBox::readFrom(sirinluexternal::RRBoundingBox *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t sirinluexternal::RRBoundingBox::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t sirinluexternal::RRBoundingBox::formatText(sirinluexternal::RRBoundingBox *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "height", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "x_coordinate", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "width", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "y_coordinate", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::RRBoundingBox::RRBoundingBox(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAF3F8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAF3F8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double sirinluexternal::RRBoundingBox::RRBoundingBox(sirinluexternal::RRBoundingBox *this, const sirinluexternal::RRBoundingBox *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_1E7BAF3F8;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_BYTE *)this + 40) = 4;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sirinluexternal::RRBoundingBox::operator=(uint64_t a1, const sirinluexternal::RRBoundingBox *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const sirinluexternal::RRBoundingBox *)a1 != a2)
  {
    sirinluexternal::RRBoundingBox::RRBoundingBox((sirinluexternal::RRBoundingBox *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::RRBoundingBox *a2, sirinluexternal::RRBoundingBox *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double sirinluexternal::RRBoundingBox::RRBoundingBox(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BAF3F8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BAF3F8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sirinluexternal::RRBoundingBox::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(sirinluexternal::RRBoundingBox *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_1E7BAF3F8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

BOOL sirinluexternal::RRBoundingBox::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 1) == 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return (*(_BYTE *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t sirinluexternal::RRBoundingBox::hash_value(sirinluexternal::RRBoundingBox *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void siricommon::UInt32Value::~UInt32Value(siricommon::UInt32Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siricommon::UInt32Value::readFrom(siricommon::UInt32Value *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::UInt32Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t siricommon::UInt32Value::formatText(siricommon::UInt32Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "value");
  return PB::TextFormatter::endObject(a2);
}

uint64_t siricommon::UInt32Value::UInt32Value(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAF448;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAF448;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t siricommon::UInt32Value::UInt32Value(uint64_t this, const siricommon::UInt32Value *a2)
{
  int v2;

  *(_QWORD *)this = &off_1E7BAF448;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_1E7BAF448;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::UInt32Value::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BAF448;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BAF448;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::UInt32Value *a2, siricommon::UInt32Value *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t siricommon::UInt32Value::UInt32Value(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BAF448;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BAF448;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL siricommon::UInt32Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t siricommon::UInt32Value::hash_value(siricommon::UInt32Value *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned int *)this + 2);
  else
    return 0;
}

BOOL SIRINLUEXTERNALCDM_PLANNERCdmPlannerRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifier *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifier **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifier);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark()
      || !SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifierReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::~ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF498;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF498;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF498;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB1608;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_QWORD *)(v19 + 72) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "tensor");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(_QWORD *this)
{
  *this = &off_1E7BAF498;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF498;
  this[1] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this, const sirinluinternalsnlp_intermediate::LinearizedTensor **a2)
{
  sirinluinternalsnlp_intermediate::LinearizedTensor *v4;
  sirinluinternalsnlp_intermediate::LinearizedTensor *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAF498;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluinternalsnlp_intermediate::LinearizedTensor *)operator new();
    v5 = sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor **a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *__hidden);
  uint64_t v6;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor **)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAF498;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF498;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF498;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF498;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluinternalsnlp_intermediate::LinearizedTensor::operator==((_QWORD *)v2, (_QWORD *)v3);
}

sirinluinternalsnlp_intermediate::LinearizedTensor *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::LinearizedTensor *result;

  result = (sirinluinternalsnlp_intermediate::LinearizedTensor *)*((_QWORD *)this + 1);
  if (result)
    return (sirinluinternalsnlp_intermediate::LinearizedTensor *)sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(result);
  return result;
}

_QWORD *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::makeTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1608;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALTOKENIZERTokenizerRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SIRINLUEXTERNALUUID *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v20 = *(SIRINLUEXTERNALUUID **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(SIRINLUEXTERNALUUID);
    objc_storeStrong((id *)(a1 + 8), v20);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALLanguageVariantResultReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALMultilingualVariant *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALMultilingualVariant);
        objc_msgSend(a1, "addMultilingualVariant:", v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALMultilingualVariantReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALParser);
    objc_storeStrong(a1 + 2, v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALParserReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF4E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF4E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF4E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::readFrom(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAEE20;
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::formatText(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "rules");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(_QWORD *this)
{
  *this = &off_1E7BAF4E8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF4E8;
  this[1] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules **a2)
{
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *v4;
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAF4E8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)operator new();
    v5 = sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules **a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *__hidden);
  uint64_t v6;

  if ((const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules **)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAF4E8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a2, sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF4E8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF4E8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF4E8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator==(v2, v3);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::hash_value(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  if (v2 == v3)
    return 0;
  v4 = 0;
  do
  {
    v4 ^= std::__string_hash<char>::operator()[abi:ne180100](v2);
    v2 += 24;
  }
  while (v2 != v3);
  return v4;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::makeRules(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAEE20;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALNLv4EmbeddingTensorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t result;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      v18 = v10 & 7;
      if (v17 || v18 == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          if (v18 != 2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *(_QWORD *)(a2 + *v4))
              *(_QWORD *)(a2 + v47) = v48 + 4;
            else
              *(_BYTE *)(a2 + v16) = 1;
            PBRepeatedFloatAdd();
            continue;
          }
          result = PBReaderPlaceMark();
          if ((_DWORD)result)
          {
            while (1)
            {
              v21 = (unint64_t *)(a2 + *v3);
              v22 = *v21;
              v23 = *(_QWORD *)(a2 + *v4);
              if (*v21 >= v23)
                break;
              v24 = *v5;
              if (*(_BYTE *)(a2 + v24))
                break;
              if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > v23)
                *(_BYTE *)(a2 + v24) = 1;
              else
                *v21 = v22 + 4;
              PBRepeatedFloatAdd();
            }
            PBReaderRecallMark();
            continue;
          }
          return result;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 64) |= 4u;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0)
              goto LABEL_53;
            v25 += 7;
            v15 = v26++ >= 9;
            if (v15)
            {
              v27 = 0;
              goto LABEL_55;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            v27 = 0;
LABEL_55:
          v46 = 48;
          goto LABEL_64;
        case 3u:
          v32 = 0;
          v33 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 64) |= 2u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v36;
              v27 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v15 = v33++ >= 9;
                if (v15)
                {
                  v27 = 0;
                  goto LABEL_59;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v27 = 0;
LABEL_59:
          v46 = 40;
          goto LABEL_64;
        case 4u:
          v38 = 0;
          v39 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 64) |= 1u;
          break;
        case 5u:
          PBReaderReadString();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v44;

          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        v42 = v41 + 1;
        if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          break;
        v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
        *(_QWORD *)(a2 + v40) = v42;
        v27 |= (unint64_t)(v43 & 0x7F) << v38;
        if ((v43 & 0x80) == 0)
          goto LABEL_61;
        v38 += 7;
        v15 = v39++ >= 9;
        if (v15)
        {
          v27 = 0;
          goto LABEL_63;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_61:
      if (*(_BYTE *)(a2 + *v5))
        v27 = 0;
LABEL_63:
      v46 = 32;
LABEL_64:
      *(_QWORD *)(a1 + v46) = v27;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALRequestIDReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  SIRINLUEXTERNALUUID *v19;
  uint64_t result;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_29;
      case 2u:
        v19 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v19);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v19, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_30:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_29;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_29;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_29;
      case 0xBu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_29:
        v21 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_30;
      case 0xCu:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_42:
        *(_DWORD *)(a1 + 40) = v24;
        goto LABEL_30;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_30;
    }
  }
}

BOOL SIRINLUEXTERNALParserReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__algorithm;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__algorithm;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__algorithm;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__parserId;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__parserId;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__parserId;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BAF5D0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::readFrom(sirinluinternalmention_detector::MentionDetectorResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
        v20 = *(_QWORD **)(*((_QWORD *)this + 2) - 8);
      }
      else
      {
        if ((v12 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BB0CB8;
        v20[3] = 0;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = (_QWORD *)*((_QWORD *)this + 4);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::formatText(sirinluinternalmention_detector::MentionDetectorResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "mentions");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "request_id");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAF5D0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAF5D0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternalmention_detector::MentionDetectorResponse *sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this, const sirinluexternal::UUID **a2)
{
  sirinluinternal::MatchingSpan ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const sirinluinternal::MatchingSpan **v8;
  const sirinluinternal::MatchingSpan **v9;

  *(_QWORD *)this = &off_1E7BAF5D0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::MatchingSpan ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2[4])
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, a2[4]);
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v9 = (const sirinluinternal::MatchingSpan **)a2[1];
  v8 = (const sirinluinternal::MatchingSpan **)a2[2];
  while (v9 != v8)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v4, *v9++);
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)v6);
  }
  return a1;
}

_QWORD *sirinluinternalmention_detector::swap(_QWORD *this, sirinluinternalmention_detector::MentionDetectorResponse *a2, sirinluinternalmention_detector::MentionDetectorResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BAF5D0;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternalmention_detector::MentionDetectorResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5))
      return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else if (!v5)
  {
    return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  return 0;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::hash_value(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sirinluinternal::MatchingSpan **v6;
  sirinluinternal::MatchingSpan **v7;
  uint64_t v8;
  sirinluinternal::MatchingSpan *v9;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 1);
  v7 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluinternal::MatchingSpan::hash_value(v9);
    }
    while (v6 != v7);
  }
  return v8 ^ v5;
}

_QWORD *sirinluinternalmention_detector::MentionDetectorResponse::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::~SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF620;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF620;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF620;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB1608;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_QWORD *)(v19 + 72) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "tensor");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(_QWORD *this)
{
  *this = &off_1E7BAF620;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF620;
  this[1] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this, const sirinluinternalsnlp_intermediate::LinearizedTensor **a2)
{
  sirinluinternalsnlp_intermediate::LinearizedTensor *v4;
  sirinluinternalsnlp_intermediate::LinearizedTensor *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAF620;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluinternalsnlp_intermediate::LinearizedTensor *)operator new();
    v5 = sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor **a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *__hidden);
  uint64_t v6;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor **)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAF620;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF620;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF620;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF620;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluinternalsnlp_intermediate::LinearizedTensor::operator==((_QWORD *)v2, (_QWORD *)v3);
}

sirinluinternalsnlp_intermediate::LinearizedTensor *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::LinearizedTensor *result;

  result = (sirinluinternalsnlp_intermediate::LinearizedTensor *)*((_QWORD *)this + 1);
  if (result)
    return (sirinluinternalsnlp_intermediate::LinearizedTensor *)sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(result);
  return result;
}

_QWORD *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::makeTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1608;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest(sirinluexternalssu_inference::SsuInferenceRequest *this)
{
  sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAF670;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::readFrom(sirinluexternalssu_inference::SsuInferenceRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v22;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100](v23);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BAE468;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_QWORD *)(v19 + 56) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 16))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::formatText(sirinluexternalssu_inference::SsuInferenceRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "request_id");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF670;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF670;
  return this;
}

sirinluexternalssu_inference::SsuInferenceRequest *sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(sirinluexternalssu_inference::SsuInferenceRequest *this, const sirinluexternal::RequestID **a2)
{
  sirinluexternal::RequestID **v4;
  sirinluexternal::RequestID *v5;
  sirinluexternal::RequestID *v6;
  sirinluexternal::RequestID *v7;
  std::string *v8;
  std::string *v9;
  const sirinluexternal::RequestID *v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BAF670;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::RequestID **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[1])
  {
    v5 = (sirinluexternal::RequestID *)operator new();
    v6 = sirinluexternal::RequestID::RequestID(v5, a2[1]);
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(sirinluexternal::RequestID *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[2];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::operator=(uint64_t a1, const sirinluexternal::RequestID **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::RequestID **)a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest((sirinluexternalssu_inference::SsuInferenceRequest *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest((sirinluexternalssu_inference::SsuInferenceRequest *)v5);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::swap(uint64_t this, sirinluexternalssu_inference::SsuInferenceRequest *a2, sirinluexternalssu_inference::SsuInferenceRequest *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BAF670;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest((sirinluexternalssu_inference::SsuInferenceRequest *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !sirinluexternal::RequestID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned __int8 ***)(a2 + 16);
  result = v7 == 0;
  if (!v6)
    return result;
  if (!v7)
    return 0;
  v9 = v6[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v6[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v7[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a2 + 16);
  else
    v13 = *v7;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v6, v13, *((_QWORD *)v6 + 1));
  if (!v6[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v6++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluexternalssu_inference::SsuInferenceRequest::hash_value(sirinluexternalssu_inference::SsuInferenceRequest *this)
{
  sirinluexternal::RequestID *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (sirinluexternal::RequestID *)*((_QWORD *)this + 1);
  if (v2)
    v3 = sirinluexternal::RequestID::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v4 ^ v3;
}

_QWORD *sirinluexternalssu_inference::SsuInferenceRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  SIRINLUEXTERNALTurnInput *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_msgSend((id)a1, "addPreviousTurns:", v24);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_38;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_38:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 8), v24);
      }
      if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v24, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALOVERRIDESOverridesResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserParse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_msgSend(a1, "addParses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRICOMMONUInt32ValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UtteranceSpan::~UtteranceSpan(sirinluexternal::UtteranceSpan *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::UtteranceSpan::readFrom(sirinluexternal::UtteranceSpan *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_120;
            }
            v58 = v20 + 1;
            v59 = *(_BYTE *)(v21 + v20);
            *((_QWORD *)a2 + 1) = v58;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v20 = v58;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_119:
              v3 = v58;
              goto LABEL_120;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_119;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v3 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_120;
          v22 += 7;
          v20 = v3;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_120:
        *((_DWORD *)this + 5) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_125;
            }
            v62 = v26 + 1;
            v63 = *(_BYTE *)(v27 + v26);
            *((_QWORD *)a2 + 1) = v62;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v26 = v62;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_124:
              v3 = v62;
              goto LABEL_125;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_124;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v3 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_125;
          v28 += 7;
          v26 = v3;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_125:
        *((_DWORD *)this + 2) = v30;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 0x20u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v64 = 0;
          v65 = 0;
          v36 = 0;
          if (v2 <= v32)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_130;
            }
            v66 = v32 + 1;
            v67 = *(_BYTE *)(v33 + v32);
            *((_QWORD *)a2 + 1) = v66;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v32 = v66;
            v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_129:
              v3 = v66;
              goto LABEL_130;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_129;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v3 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_130;
          v34 += 7;
          v32 = v3;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_130:
        *((_DWORD *)this + 7) = v36;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 4u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v42 = 0;
          if (v2 <= v38)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_135;
            }
            v70 = v38 + 1;
            v71 = *(_BYTE *)(v39 + v38);
            *((_QWORD *)a2 + 1) = v70;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v38 = v70;
            v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_134:
              v3 = v70;
              goto LABEL_135;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_134;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v3 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_135;
          v40 += 7;
          v38 = v3;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_135:
        *((_DWORD *)this + 4) = v42;
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 0x10u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v72 = 0;
          v73 = 0;
          v48 = 0;
          if (v2 <= v44)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_140;
            }
            v74 = v44 + 1;
            v75 = *(_BYTE *)(v45 + v44);
            *((_QWORD *)a2 + 1) = v74;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0)
              break;
            v72 += 7;
            v44 = v74;
            v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_139:
              v3 = v74;
              goto LABEL_140;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_139;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v3 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_140;
          v46 += 7;
          v44 = v3;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_140:
        *((_DWORD *)this + 6) = v48;
        break;
      case 6u:
        *((_BYTE *)this + 32) |= 2u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v76 = 0;
          v77 = 0;
          v54 = 0;
          if (v2 <= v50)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_145;
            }
            v78 = v50 + 1;
            v79 = *(_BYTE *)(v51 + v50);
            *((_QWORD *)a2 + 1) = v78;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0)
              break;
            v76 += 7;
            v50 = v78;
            v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_144:
              v3 = v78;
              goto LABEL_145;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_144;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v3 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_145;
          v52 += 7;
          v50 = v3;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_145:
        *((_DWORD *)this + 3) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t sirinluexternal::UtteranceSpan::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::formatText(sirinluexternal::UtteranceSpan *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "end_index");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "end_milli_seconds");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "end_unicode_scalar_index");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "start_milli_seconds");
    if ((*((_BYTE *)this + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "start_index");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "start_unicode_scalar_index");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAF6E0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAF6E0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(uint64_t this, const sirinluexternal::UtteranceSpan *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = &off_1E7BAF6E0;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 5);
    v3 = 8;
    *(_BYTE *)(this + 32) = 8;
    *(_DWORD *)(this + 20) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 2);
    v3 |= 1u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x20u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 32) = v3 | 2;
    *(_DWORD *)(this + 12) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_14;
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::operator=(uint64_t a1, const sirinluexternal::UtteranceSpan *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const sirinluexternal::UtteranceSpan *)a1 != a2)
  {
    sirinluexternal::UtteranceSpan::UtteranceSpan((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *sirinluexternal::swap(_DWORD *this, sirinluexternal::UtteranceSpan *a2, sirinluexternal::UtteranceSpan *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v3 = this[8];
  this[8] = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  v6 = this[7];
  this[7] = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = this[6];
  this[6] = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  v9 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v9;
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = &off_1E7BAF6E0;
  *(_DWORD *)(result + 32) = a2[8];
  a2[8] = 0;
  *(_DWORD *)(result + 20) = a2[5];
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 28) = a2[7];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 24) = a2[6];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = &off_1E7BAF6E0;
  *(_DWORD *)(result + 32) = a2[8];
  a2[8] = 0;
  *(_DWORD *)(result + 20) = a2[5];
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 28) = a2[7];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 24) = a2[6];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t sirinluexternal::UtteranceSpan::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(sirinluexternal::UtteranceSpan *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_1E7BAF6E0;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

BOOL sirinluexternal::UtteranceSpan::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x20) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t sirinluexternal::UtteranceSpan::hash_value(sirinluexternal::UtteranceSpan *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
    v1 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 2);
      if ((*((_BYTE *)this + 32) & 0x20) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 0x20) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 7);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_6;
LABEL_12:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_7;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_12;
LABEL_6:
  v5 = *((int *)this + 6);
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_13;
LABEL_7:
  v6 = *((int *)this + 3);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

BOOL SIRINLUEXTERNALSUBWORD_EMBEDDINGSubwordEmbeddingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUEXTERNALRequestID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUEXTERNALRequestID **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUEXTERNALRequestID);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis(sirinluinternalitfm::ITFMHypothesis *this)
{
  sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF730;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalitfm::ITFMHypothesis::readFrom(sirinluinternalitfm::ITFMHypothesis *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v30 = (_QWORD *)operator new();
        v30[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        v31 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v30;
        if (v31)
          std::default_delete<std::string>::operator()[abi:ne180100](v31);
        PB::Reader::read();
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v32 = *((_QWORD *)a2 + 1);
        if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v33 = 0;
          v34 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_54;
            }
            v35 = v20 + 1;
            v36 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v35;
            v25 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v20 = v35;
            v14 = v34++ > 8;
            if (v14)
            {
LABEL_49:
              LODWORD(v25) = 0;
              goto LABEL_54;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_49;
          }
        }
LABEL_54:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if (*(_QWORD *)(v3 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::formatText(sirinluinternalitfm::ITFMHypothesis *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "label");
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "probability", *((float *)this + 5));
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAF730;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAF730;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

sirinluinternalitfm::ITFMHypothesis *sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(sirinluinternalitfm::ITFMHypothesis *this, const sirinluinternalitfm::ITFMHypothesis *a2)
{
  char v4;
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E7BAF730;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 24) = 1;
    *((_DWORD *)this + 4) = v5;
    v4 = 3;
    if ((*((_BYTE *)a2 + 24) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 2;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    v6 = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 24) = v4;
    *((_DWORD *)this + 5) = v6;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
  {
    v7 = (std::string *)operator new();
    v8 = v7;
    v9 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
    }
    v11 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v8;
    if (v11)
      std::default_delete<std::string>::operator()[abi:ne180100](v11);
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::operator=(uint64_t a1, const sirinluinternalitfm::ITFMHypothesis *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  if ((const sirinluinternalitfm::ITFMHypothesis *)a1 != a2)
  {
    sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v4;
    v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v6;
    sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)&v8);
  }
  return a1;
}

float sirinluinternalitfm::swap(sirinluinternalitfm *this, sirinluinternalitfm::ITFMHypothesis *a2, sirinluinternalitfm::ITFMHypothesis *a3)
{
  int v3;
  int v4;
  float result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return result;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7BAF730;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 20);
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 16);
    v9 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 24) = v3;
    v10 = *(_QWORD *)(a1 + 8);
    v15 = v7;
    *(_DWORD *)(a1 + 16) = v4;
    v13 = v8;
    *(_DWORD *)(a1 + 20) = v5;
    v14 = v9;
    *(_QWORD *)(a1 + 8) = v6;
    v12[0] = &off_1E7BAF730;
    v12[1] = v10;
    sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v12);
  }
  return a1;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluinternalitfm::ITFMHypothesis::hash_value(sirinluinternalitfm::ITFMHypothesis *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  unint64_t v4;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  v1 = *((int *)this + 4);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 5);
  if (v2 == 0.0)
    v3 = 0;
  else
    v3 = LODWORD(v2);
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v3 ^ v1 ^ v4;
}

void sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse(sirinluinternalplan_generation::PlanGenerationResponse *this)
{
  sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E7BAF780;
  v7 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::readFrom(sirinluinternalplan_generation::PlanGenerationResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  std::allocator<std::string> *v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t result;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::string *v42;
  unint64_t v43;
  std::string *value;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int64x2_t v48;
  std::string *v49;
  std::string::size_type v50;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (std::vector<std::string> *)((char *)this + 32);
    v9 = (std::allocator<std::string> *)((char *)this + 48);
    v10 = (std::allocator<std::string> *)((char *)this + 24);
    while (1)
    {
      v11 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_26;
      }
LABEL_21:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v14 >> 3) == 2)
      {
        v26 = (_QWORD *)operator new();
        v27 = v26;
        v26[1] = 0;
        v26[2] = 0;
        *v26 = &off_1E7BAF098;
        v29 = (_QWORD *)*((_QWORD *)this + 2);
        v28 = *((_QWORD *)this + 3);
        if ((unint64_t)v29 >= v28)
        {
          v36 = *((_QWORD *)this + 1);
          v37 = ((uint64_t)v29 - v36) >> 3;
          if ((unint64_t)(v37 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v38 = v28 - v36;
          v39 = v38 >> 2;
          if (v38 >> 2 <= (unint64_t)(v37 + 1))
            v39 = v37 + 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          __v.__end_cap_.__value_ = v10;
          if (v40)
            v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v40);
          else
            v41 = 0;
          v43 = v40 + 8 * v37;
          value = (std::string *)(v40 + 8 * v41);
          __v.__end_cap_.__value_ = value;
          *(_QWORD *)v43 = v27;
          end = (std::__split_buffer<std::string>::pointer)(v43 + 8);
          __v.__end_ = (std::__split_buffer<std::string>::pointer)(v43 + 8);
          v46 = (_QWORD *)*((_QWORD *)this + 1);
          v45 = (_QWORD *)*((_QWORD *)this + 2);
          if (v45 == v46)
          {
            v48 = vdupq_n_s64((unint64_t)v45);
          }
          else
          {
            do
            {
              v47 = *--v45;
              *v45 = 0;
              *(_QWORD *)(v43 - 8) = v47;
              v43 -= 8;
            }
            while (v45 != v46);
            v48 = *(int64x2_t *)((char *)this + 8);
            end = __v.__end_;
            value = __v.__end_cap_.__value_;
          }
          *((_QWORD *)this + 1) = v43;
          *((_QWORD *)this + 2) = end;
          *(int64x2_t *)&__v.__begin_ = v48;
          v49 = (std::string *)*((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = value;
          __v.__end_cap_.__value_ = v49;
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v48.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__v);
        }
        else
        {
          *v29 = v26;
          end = (std::__split_buffer<std::string>::pointer)(v29 + 1);
        }
        *((_QWORD *)this + 2) = end;
        v50 = end[-1].__r_.__value_.__r.__words[2];
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(std::string::size_type, PB::Reader *))(*(_QWORD *)v50 + 16))(v50, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v14 >> 3) == 1)
      {
        v23 = (char *)*((_QWORD *)this + 5);
        v22 = *((_QWORD *)this + 6);
        if ((unint64_t)v23 >= v22)
        {
          v31 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v8->__begin_) >> 3);
          v32 = v31 + 1;
          if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v33 > v32)
            v32 = 2 * v33;
          if (v33 >= 0x555555555555555)
            v34 = 0xAAAAAAAAAAAAAAALL;
          else
            v34 = v32;
          __v.__end_cap_.__value_ = v9;
          if (v34)
            v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v34);
          else
            v35 = 0;
          v42 = (std::string *)(v34 + 24 * v31);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v34;
          __v.__begin_ = v42;
          __v.__end_cap_.__value_ = (std::string *)(v34 + 24 * v35);
          v42->__r_.__value_.__r.__words[0] = 0;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v42 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          v24 = (_QWORD *)*((_QWORD *)this + 5);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v23 = 0;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          v24 = v23 + 24;
          *((_QWORD *)this + 5) = v23 + 24;
        }
        *((_QWORD *)this + 5) = v24;
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
      if (v17)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C1F4F8A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const PB::Base **v6;
  const PB::Base **v7;
  const PB::Base *v8;

  v3 = this;
  v4 = *(_QWORD *)(this + 32);
  v5 = *(_QWORD *)(this + 40);
  while (v4 != v5)
  {
    this = PB::Writer::write();
    v4 += 24;
  }
  v7 = *(const PB::Base ***)(v3 + 8);
  v6 = *(const PB::Base ***)(v3 + 16);
  while (v7 != v6)
  {
    v8 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::formatText(sirinluinternalplan_generation::PlanGenerationResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "mappings");
  }
  v8 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); v8 != i; v8 += 24)
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse(sirinluinternalplan_generation::PlanGenerationResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAF780;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAF780;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

sirinluinternalplan_generation::PlanGenerationResponse *sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse(sirinluinternalplan_generation::PlanGenerationResponse *this, const sirinluinternalplan_generation::PlanGenerationResponse *a2)
{
  int64x2_t *v4;
  const sirinluinternalplan_generation::VariableEventIdPair **v5;
  const sirinluinternalplan_generation::VariableEventIdPair **i;
  const sirinluinternalplan_generation::VariableEventIdPair *v7;
  sirinluinternalplan_generation::VariableEventIdPair *v8;
  unint64_t v9;
  sirinluinternalplan_generation::VariableEventIdPair **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  sirinluinternalplan_generation::VariableEventIdPair **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  sirinluinternalplan_generation::VariableEventIdPair *v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  char *v28;

  *(_QWORD *)this = &off_1E7BAF780;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 32), *((std::string **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  v5 = (const sirinluinternalplan_generation::VariableEventIdPair **)*((_QWORD *)a2 + 1);
  for (i = (const sirinluinternalplan_generation::VariableEventIdPair **)*((_QWORD *)a2 + 2); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (sirinluinternalplan_generation::VariableEventIdPair *)operator new();
    sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(v8, v7);
    v10 = (sirinluinternalplan_generation::VariableEventIdPair **)*((_QWORD *)this + 2);
    v9 = *((_QWORD *)this + 3);
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((uint64_t)v10 - v4->i64[0]) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = v9 - v4->i64[0];
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v28 = (char *)this + 24;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v15);
      else
        v16 = 0;
      v17 = (sirinluinternalplan_generation::VariableEventIdPair **)(v15 + 8 * v12);
      v18 = v15 + 8 * v16;
      v27 = v18;
      *v17 = v8;
      v11 = v17 + 1;
      v26.i64[1] = (uint64_t)(v17 + 1);
      v20 = (_QWORD *)*((_QWORD *)this + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 2);
      if (v19 == v20)
      {
        v22 = vdupq_n_s64((unint64_t)v19);
      }
      else
      {
        do
        {
          v21 = (sirinluinternalplan_generation::VariableEventIdPair *)*--v19;
          *v19 = 0;
          *--v17 = v21;
        }
        while (v19 != v20);
        v22 = *v4;
        v11 = (_QWORD *)v26.i64[1];
        v18 = v27;
      }
      *((_QWORD *)this + 1) = v17;
      *((_QWORD *)this + 2) = v11;
      v26 = v22;
      v23 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v18;
      v27 = v23;
      v25 = v22.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v25);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 2) = v11;
  }
  return this;
}

void sub_1C1F4FC54(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::operator=(uint64_t a1, const sirinluinternalplan_generation::PlanGenerationResponse *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((const sirinluinternalplan_generation::PlanGenerationResponse *)a1 != a2)
  {
    sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse((sirinluinternalplan_generation::PlanGenerationResponse *)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    v10 = v3;
    sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse((sirinluinternalplan_generation::PlanGenerationResponse *)v7);
  }
  return a1;
}

_QWORD *sirinluinternalplan_generation::swap(_QWORD *this, sirinluinternalplan_generation::PlanGenerationResponse *a2, sirinluinternalplan_generation::PlanGenerationResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  return this;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E7BAF780;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v5 = (_QWORD *)*v4;
  if (*v4)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = (_QWORD *)*v4;
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    v10 = v3;
    sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse((sirinluinternalplan_generation::PlanGenerationResponse *)v7);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v2 = (unsigned __int8 *)a1[4];
  v3 = (unsigned __int8 *)a1[5];
  v4 = (unsigned __int8 *)a2[4];
  if (v3 - v2 != a2[5] - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v2, v4);
    if (!(_DWORD)result)
      return result;
    v2 += 24;
    v4 += 24;
  }
  v8 = a1[1];
  v9 = a1[2];
  v11 = a2 + 1;
  v10 = (uint64_t *)a2[1];
  if (v9 - v8 != v11[1] - (_QWORD)v10)
    return 0;
  if (v8 == v9)
    return 1;
  v12 = v8 + 8;
  do
  {
    v13 = *v10++;
    result = sirinluinternalplan_generation::VariableEventIdPair::operator==(*(_QWORD *)(v12 - 8), v13);
    if ((_DWORD)result)
      v14 = v12 == v9;
    else
      v14 = 1;
    v12 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::hash_value(sirinluinternalplan_generation::PlanGenerationResponse *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sirinluinternalplan_generation::VariableEventIdPair **v5;
  sirinluinternalplan_generation::VariableEventIdPair **v6;
  uint64_t v7;
  sirinluinternalplan_generation::VariableEventIdPair *v8;

  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v4 ^= std::__string_hash<char>::operator()[abi:ne180100](v2);
      v2 += 24;
    }
    while (v2 != v3);
  }
  v6 = (sirinluinternalplan_generation::VariableEventIdPair **)*((_QWORD *)this + 1);
  v5 = (sirinluinternalplan_generation::VariableEventIdPair **)*((_QWORD *)this + 2);
  if (v6 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v6++;
      v7 ^= sirinluinternalplan_generation::VariableEventIdPair::hash_value(v8);
    }
    while (v6 != v5);
  }
  return v7 ^ v4;
}

void sirinluexternal::SystemReportedFailure::~SystemReportedFailure(sirinluexternal::SystemReportedFailure *this)
{
  sirinluexternal::SystemReportedFailure::~SystemReportedFailure(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAF7D0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemReportedFailure::readFrom(sirinluexternal::SystemReportedFailure *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB2398;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        v23 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 2);
        }
      }
      else if ((_DWORD)v19 == 2)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB2398;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0CB8;
        *(_QWORD *)(v20 + 24) = 0;
        v21 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 3);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::SystemReportedFailure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 16);
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6);
  return this;
}

uint64_t sirinluexternal::SystemReportedFailure::formatText(sirinluexternal::SystemReportedFailure *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "reason");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::SystemReportedFailure::SystemReportedFailure(_QWORD *this)
{
  *this = &off_1E7BAF7D0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAF7D0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternal::SystemReportedFailure *sirinluexternal::SystemReportedFailure::SystemReportedFailure(sirinluexternal::SystemReportedFailure *this, const sirinluexternal::SystemReportedFailure *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;
  sirinluexternal::UsoGraph *v11;
  sirinluexternal::UsoGraph *v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7BAF7D0;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 3));
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v11 = (sirinluexternal::UsoGraph *)operator new();
    v12 = sirinluexternal::UsoGraph::UsoGraph(v11, *((const sirinluexternal::SemVer ***)a2 + 2));
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

uint64_t sirinluexternal::SystemReportedFailure::operator=(uint64_t a1, const sirinluexternal::SystemReportedFailure *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const sirinluexternal::SystemReportedFailure *)a1 != a2)
  {
    sirinluexternal::SystemReportedFailure::SystemReportedFailure((sirinluexternal::SystemReportedFailure *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternal::SystemReportedFailure::~SystemReportedFailure((sirinluexternal::SystemReportedFailure *)&v6);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::SystemReportedFailure *a2, sirinluexternal::SystemReportedFailure *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  return this;
}

_QWORD *sirinluexternal::SystemReportedFailure::SystemReportedFailure(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E7BAF7D0;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[3];
  a2[3] = 0;
  v6 = a1[3];
  a1[3] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[1];
  a2[1] = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[2];
  a2[2] = 0;
  v10 = a1[2];
  a1[2] = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sirinluexternal::SystemReportedFailure::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternal::SystemReportedFailure::SystemReportedFailure(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternal::SystemReportedFailure::~SystemReportedFailure((sirinluexternal::SystemReportedFailure *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::SystemReportedFailure::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v4 = a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (_QWORD *)a1[1];
  v7 = (_QWORD *)a2[1];
  if (!v6)
  {
    if (!v7)
      goto LABEL_9;
    return 0;
  }
  if (!v7 || (sirinluexternal::UsoGraph::operator==(v6, v7) & 1) == 0)
    return 0;
LABEL_9:
  v8 = a1[2];
  v9 = a2[2];
  result = (v8 | v9) == 0;
  if (v8)
  {
    if (v9)
      return sirinluexternal::UsoGraph::operator==((_QWORD *)a1[2], (_QWORD *)v9);
  }
  return result;
}

unint64_t sirinluexternal::SystemReportedFailure::hash_value(sirinluexternal::SystemReportedFailure *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluexternal::UsoGraph *v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluexternal::UsoGraph *)*((_QWORD *)this + 1);
  if (v7)
    v8 = sirinluexternal::UsoGraph::hash_value(v7);
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 2);
  if (v9)
    v9 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v9);
  return v8 ^ v6 ^ v9;
}

_QWORD *sirinluexternal::SystemReportedFailure::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[3])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemReportedFailure::makeReason(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemReportedFailure::makeTask(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::UsoEdge::~UsoEdge(sirinluexternal::UsoEdge *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF820;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF820;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF820;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoEdge::readFrom(sirinluexternal::UsoEdge *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7BAFAE0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_DWORD *)(v30 + 20) = 0;
        *(_DWORD *)(v30 + 24) = 0;
        v31 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v33)
        {
          v44 = 0;
          v45 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_69;
            }
            v46 = v32 + 1;
            v47 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v46;
            v37 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v32 = v46;
            v14 = v45++ > 8;
            if (v14)
            {
LABEL_61:
              LODWORD(v37) = 0;
              goto LABEL_69;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              break;
            v35 += 7;
            v32 = v38;
            v14 = v36++ > 8;
            if (v14)
              goto LABEL_61;
          }
        }
LABEL_69:
        *((_DWORD *)this + 5) = v37;
      }
      else if ((_DWORD)v21 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v40 = 0;
          v41 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v42 = v22 + 1;
            v43 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v42;
            v27 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v22 = v42;
            v14 = v41++ > 8;
            if (v14)
            {
LABEL_54:
              LODWORD(v27) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_54;
          }
        }
LABEL_66:
        *((_DWORD *)this + 4) = v27;
      }
      else
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_25;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UsoEdge::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UsoEdge::formatText(sirinluexternal::UsoEdge *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "from_index");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "label");
  if ((*((_BYTE *)this + 24) & 2) != 0)
    PB::TextFormatter::format(a2, "to_index");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::UsoEdge::UsoEdge(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E7BAF820;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E7BAF820;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

sirinluexternal::UsoEdge *sirinluexternal::UsoEdge::UsoEdge(sirinluexternal::UsoEdge *this, const sirinluexternal::UsoEdge *a2)
{
  sirinluexternal::UsoEdgeLabel **v4;
  char v5;
  int v6;
  int v7;
  sirinluexternal::UsoEdgeLabel *v8;
  sirinluexternal::UsoEdgeLabel *v9;
  sirinluexternal::UsoEdgeLabel *v10;

  *(_QWORD *)this = &off_1E7BAF820;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoEdgeLabel **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) == 0)
  {
    v5 = 2;
    if ((*((_BYTE *)a2 + 24) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *((_DWORD *)a2 + 4);
  *((_BYTE *)this + 24) = 1;
  *((_DWORD *)this + 4) = v6;
  v5 = 3;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 24) = v5;
    *((_DWORD *)this + 5) = v7;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoEdgeLabel *)operator new();
    v9 = sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(v8, *((const sirinluexternal::UsoEdgeLabel **)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoEdgeLabel *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UsoEdge::operator=(uint64_t a1, const sirinluexternal::UsoEdge *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(sirinluexternal::UsoEdge *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const sirinluexternal::UsoEdge *)a1 != a2)
  {
    sirinluexternal::UsoEdge::UsoEdge((sirinluexternal::UsoEdge *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v7 = &off_1E7BAF820;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoEdge *a2, sirinluexternal::UsoEdge *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  v5 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluexternal::UsoEdge::UsoEdge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E7BAF820;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternal::UsoEdge::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    v9[2] = v7;
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_1E7BAF820;
    v9[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t sirinluexternal::UsoEdge::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2)
  {
    if (v3)
      return sirinluexternal::UsoEdgeLabel::operator==(v2, v3);
  }
  return result;
}

unint64_t sirinluexternal::UsoEdge::hash_value(sirinluexternal::UsoEdge *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 5);
      goto LABEL_6;
    }
  }
  v2 = 0;
LABEL_6:
  v3 = *((_QWORD *)this + 1);
  if (v3)
    v3 = sirinluexternal::UsoEdgeLabel::hash_value((sirinluexternal::UsoEdgeLabel *)v3);
  return v2 ^ v1 ^ v3;
}

_QWORD *sirinluexternal::UsoEdge::makeLabel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAFAE0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void siri::ontology::setUtteranceAlignmentMessageIfExists(_QWORD *a1, void *lpsrc, int a3)
{
  siri::ontology::UsoEntityNode *v5;
  siri::ontology::UsoEntityNode *v6;
  int v7;
  siri::ontology::UsoUtteranceAlignment *UtteranceAlignment;
  int **v9;
  int **v10;
  int *v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int64x2_t v31;
  unint64_t v32;
  sirinluexternal::UtteranceAlignment *v33;
  unint64_t v34;
  sirinluexternal::UtteranceAlignment **v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  sirinluexternal::UtteranceAlignment **v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  sirinluexternal::UtteranceAlignment *v47;
  int64x2_t v48;
  unint64_t v49;
  void (**v50)(sirinluexternal::UtteranceSpan *__hidden);
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int **v58;
  int **v59;
  void (**v60)(sirinluexternal::UtteranceAlignment *__hidden);
  int64x2_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int64x2_t *v66;
  int64x2_t v67;
  unint64_t v68;
  unint64_t *v69;

  if (v5)
  {
    v6 = v5;
    if (*((_QWORD *)v5 + 7) != *((_QWORD *)v5 + 8))
    {
      v60 = &off_1E7BAEF58;
      v61 = 0uLL;
      v62 = 0;
      v64 = a3;
      v65 = 2;
      if (*(_DWORD *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v5) != -1)
      {
        v7 = *(_DWORD *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v6);
        LOBYTE(v65) = v65 | 1;
        v63 = v7;
      }
      UtteranceAlignment = (siri::ontology::UsoUtteranceAlignment *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v6);
      siri::ontology::UsoUtteranceAlignment::getSpans(UtteranceAlignment);
      v9 = v58;
      v10 = v59;
      if (v58 != v59)
      {
        do
        {
          v50 = &off_1E7BAF6E0;
          v57 = 0;
          v11 = *v9;
          v12 = **v9;
          LOBYTE(v57) = 8;
          v54 = v12;
          v13 = v11[1];
          v14 = 9;
          LOBYTE(v57) = 9;
          v51 = v13;
          v15 = v11[2];
          if (v15 != -1)
          {
            v14 = 41;
            LOBYTE(v57) = 41;
            v56 = v15;
          }
          v16 = v11[3];
          if (v16 != -1)
          {
            v14 |= 4u;
            LOBYTE(v57) = v14;
            v53 = v16;
          }
          v17 = *((_QWORD *)v11 + 2);
          if ((v17 & 0xFF00000000) != 0)
          {
            v14 |= 0x10u;
            LOBYTE(v57) = v14;
            v55 = v17;
          }
          v18 = *((_QWORD *)v11 + 3);
          if ((v18 & 0xFF00000000) != 0)
          {
            LOBYTE(v57) = v14 | 2;
            v52 = v18;
          }
          v19 = operator new();
          sirinluexternal::UtteranceSpan::UtteranceSpan(v19, (const sirinluexternal::UtteranceSpan *)&v50);
          v20 = v61.i64[1];
          if (v61.i64[1] >= v62)
          {
            v22 = (v61.i64[1] - v61.i64[0]) >> 3;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v23 = (uint64_t)(v62 - v61.i64[0]) >> 2;
            if (v23 <= v22 + 1)
              v23 = v22 + 1;
            if (v62 - v61.i64[0] >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            v69 = &v62;
            if (v24)
              v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v24);
            else
              v25 = 0;
            v26 = (uint64_t *)(v24 + 8 * v22);
            v27 = v24 + 8 * v25;
            v68 = v27;
            *v26 = v19;
            v21 = v26 + 1;
            v67.i64[1] = (uint64_t)(v26 + 1);
            v28 = (_QWORD *)v61.i64[1];
            v29 = (_QWORD *)v61.i64[0];
            if (v61.i64[1] == v61.i64[0])
            {
              v31 = vdupq_n_s64(v61.u64[1]);
            }
            else
            {
              do
              {
                v30 = *--v28;
                *v28 = 0;
                *--v26 = v30;
              }
              while (v28 != v29);
              v31 = v61;
              v21 = (_QWORD *)v67.i64[1];
              v27 = v68;
            }
            v61.i64[0] = (uint64_t)v26;
            v61.i64[1] = (uint64_t)v21;
            v67 = v31;
            v32 = v62;
            v62 = v27;
            v68 = v32;
            v66 = (int64x2_t *)v31.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v66);
          }
          else
          {
            *(_QWORD *)v61.i64[1] = v19;
            v21 = (_QWORD *)(v20 + 8);
          }
          v61.i64[1] = (uint64_t)v21;
          PB::Base::~Base((PB::Base *)&v50);
          ++v9;
        }
        while (v9 != v10);
        v9 = v58;
      }
      if (v9)
      {
        v59 = v9;
        operator delete(v9);
      }
      v33 = (sirinluexternal::UtteranceAlignment *)operator new();
      sirinluexternal::UtteranceAlignment::UtteranceAlignment(v33, (const sirinluexternal::UtteranceAlignment *)&v60);
      v34 = a1[3];
      v35 = (sirinluexternal::UtteranceAlignment **)a1[2];
      if ((unint64_t)v35 >= v34)
      {
        v37 = a1[1];
        v38 = ((uint64_t)v35 - v37) >> 3;
        if ((unint64_t)(v38 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v39 = v34 - v37;
        v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        v69 = a1 + 3;
        if (v41)
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v41);
        else
          v42 = 0;
        v43 = (sirinluexternal::UtteranceAlignment **)(v41 + 8 * v38);
        v44 = v41 + 8 * v42;
        v68 = v44;
        *v43 = v33;
        v36 = v43 + 1;
        v67.i64[1] = (uint64_t)(v43 + 1);
        v46 = (_QWORD *)a1[1];
        v45 = (_QWORD *)a1[2];
        if (v45 == v46)
        {
          v48 = vdupq_n_s64((unint64_t)v45);
        }
        else
        {
          do
          {
            v47 = (sirinluexternal::UtteranceAlignment *)*--v45;
            *v45 = 0;
            *--v43 = v47;
          }
          while (v45 != v46);
          v48 = *(int64x2_t *)(a1 + 1);
          v36 = (_QWORD *)v67.i64[1];
          v44 = v68;
        }
        a1[1] = v43;
        a1[2] = v36;
        v67 = v48;
        v49 = a1[3];
        a1[3] = v44;
        v68 = v49;
        v66 = (int64x2_t *)v48.i64[0];
        std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v66);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      a1[2] = v36;
      v60 = &off_1E7BAEF58;
      v66 = &v61;
      std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      PB::Base::~Base((PB::Base *)&v60);
    }
  }
}

void sub_1C1F51704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sirinluexternal::UtteranceAlignment::~UtteranceAlignment((sirinluexternal::UtteranceAlignment *)&a17);
  _Unwind_Resume(a1);
}

void siri::ontology::setIdentifierMessage(_QWORD *a1, void *lpsrc, int a3)
{
  siri::ontology::UsoEntityNode *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  sirinluexternal::UsoEntityIdentifier *v19;
  unint64_t v20;
  sirinluexternal::UsoEntityIdentifier **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  sirinluexternal::UsoEntityIdentifier **v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  sirinluexternal::UsoEntityIdentifier *v33;
  int64x2_t v34;
  unint64_t v35;
  void (**v36)(sirinluexternal::UsoEntityIdentifier *__hidden);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string __str;
  unint64_t v44;
  _QWORD *v45;

  if (v5)
  {
    siri::ontology::UsoEntityNode::getIdentifiers(v5);
    v6 = v41;
    v7 = v42;
    if (v41 != v42)
    {
      while (1)
      {
        v8 = *v6;
        v36 = &off_1E7BB00A0;
        v40 = 4;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        DWORD2(v39) = a3;
        if ((*(char *)(v8 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
        v9 = *((_QWORD *)&v38 + 1);
        if (!*((_QWORD *)&v38 + 1))
          goto LABEL_5;
LABEL_8:
        if (*(char *)(v9 + 23) < 0)
          operator delete(*(void **)v9);
        *(std::string *)v9 = __str;
        if (*(char *)(v8 + 47) < 0)
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
        else
          __str = *(std::string *)(v8 + 24);
        v11 = v37;
        if (!(_QWORD)v37)
        {
          v11 = operator new();
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          v12 = v37;
          *(_QWORD *)&v37 = v11;
          if (v12)
          {
            std::default_delete<std::string>::operator()[abi:ne180100](v12);
            v11 = v37;
          }
        }
        if (*(char *)(v11 + 23) < 0)
          operator delete(*(void **)v11);
        *(std::string *)v11 = __str;
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (__int128 *)(v8 + 48));
        if ((_BYTE)v44)
        {
          sirinluexternal::UsoEntityIdentifier::makeNamespaceA(&v36);
          if (!(_BYTE)v44)
            std::__throw_bad_optional_access[abi:ne180100]();
          v13 = *((_QWORD *)&v37 + 1);
          siricommon::StringValue::makeValue(*((siricommon::StringValue **)&v37 + 1));
          std::string::operator=(*(std::string **)(v13 + 8), &__str);
          if ((_BYTE)v44 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(v8 + 88))
        {
          v14 = *(_QWORD *)(v8 + 80);
          sirinluexternal::UsoEntityIdentifier::makeProbability(&v36);
          v15 = v38;
          *(_BYTE *)(v38 + 16) |= 1u;
          *(_QWORD *)(v15 + 8) = v14;
        }
        v16 = *(_QWORD *)(v8 + 96);
        if ((v16 & 0xFF00000000) != 0)
        {
          LOBYTE(v40) = v40 | 8;
          HIDWORD(v39) = v16;
        }
        v17 = *(_QWORD *)(v8 + 104);
        if ((v17 & 0xFF00000000) != 0)
        {
          LOBYTE(v40) = v40 | 1;
          LODWORD(v39) = v17;
        }
        v18 = *(_QWORD *)(v8 + 112);
        if ((v18 & 0xFF00000000) != 0)
        {
          LOBYTE(v40) = v40 | 2;
          DWORD1(v39) = v18;
        }
        v19 = (sirinluexternal::UsoEntityIdentifier *)operator new();
        sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(v19, (const sirinluexternal::UsoEntityIdentifier *)&v36);
        v21 = (sirinluexternal::UsoEntityIdentifier **)a1[8];
        v20 = a1[9];
        if ((unint64_t)v21 >= v20)
        {
          v23 = a1[7];
          v24 = ((uint64_t)v21 - v23) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v25 = v20 - v23;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          v45 = a1 + 9;
          if (v27)
            v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v27);
          else
            v28 = 0;
          v29 = (sirinluexternal::UsoEntityIdentifier **)(v27 + 8 * v24);
          v30 = v27 + 8 * v28;
          v44 = v30;
          *v29 = v19;
          v22 = v29 + 1;
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 1);
          v32 = (_QWORD *)a1[7];
          v31 = (_QWORD *)a1[8];
          if (v31 == v32)
          {
            v34 = vdupq_n_s64((unint64_t)v31);
          }
          else
          {
            do
            {
              v33 = (sirinluexternal::UsoEntityIdentifier *)*--v31;
              *v31 = 0;
              *--v29 = v33;
            }
            while (v31 != v32);
            v34 = *(int64x2_t *)(a1 + 7);
            v22 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
            v30 = v44;
          }
          a1[7] = v29;
          a1[8] = v22;
          *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v34;
          v35 = a1[9];
          a1[9] = v30;
          v44 = v35;
          __str.__r_.__value_.__r.__words[0] = v34.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          *v21 = v19;
          v22 = v21 + 1;
        }
        a1[8] = v22;
        sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&v36);
        if (++v6 == v7)
        {
          v6 = v41;
          goto LABEL_49;
        }
      }
      __str = *(std::string *)v8;
LABEL_5:
      v9 = operator new();
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      v10 = *((_QWORD *)&v38 + 1);
      *((_QWORD *)&v38 + 1) = v9;
      if (v10)
      {
        std::default_delete<std::string>::operator()[abi:ne180100](v10);
        v9 = *((_QWORD *)&v38 + 1);
      }
      goto LABEL_8;
    }
LABEL_49:
    if (v6)
    {
      v42 = v6;
      operator delete(v6);
    }
  }
}

void sub_1C1F51B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&a10);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1C1F51C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

void siricommon::StringValue::makeValue(siricommon::StringValue *this)
{
  _QWORD *v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 1))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v3)
      std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
}

void siri::ontology::setEntitySpanMessage(_QWORD *a1, void *lpsrc, int a3)
{
  siri::ontology::UsoEntityNode *v3;
  __int128 **v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  void (**v50)(sirinluexternal::SpanProperty *__hidden);
  void (**v51)(sirinluexternal::SpanProperty *__hidden);
  void (*v52)(sirinluexternal::SpanProperty *__hidden);
  std::string *v53;
  std::string *v54;
  int v55;
  uint64_t v56;
  sirinluexternal::AsrAlternative *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  sirinluexternal::AsrAlternative **v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  sirinluexternal::AsrAlternative *v68;
  int64x2_t v69;
  unint64_t v70;
  std::string *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  sirinluexternal::SpanProperty *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  sirinluexternal::SpanProperty **v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  sirinluexternal::SpanProperty *v92;
  int64x2_t v93;
  unint64_t v94;
  sirinluexternal::UsoEntitySpan *v95;
  _QWORD *v96;
  unint64_t v97;
  sirinluexternal::UsoEntitySpan **v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  sirinluexternal::UsoEntitySpan **v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  sirinluexternal::UsoEntitySpan *v110;
  int64x2_t v111;
  unint64_t v112;
  __int128 **v113;
  void (**v116)(sirinluexternal::SpanProperty *__hidden);
  __int128 v117;
  __int128 v118;
  std::string *v119;
  std::string *v120;
  uint64_t v121;
  void (**v122)(sirinluexternal::UsoEntitySpan *__hidden);
  int64x2_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  _QWORD v127[4];
  __int128 v128;
  int v129;
  __int128 **v130;
  __int128 **v131;
  std::string __str;
  unint64_t v133;
  __int128 *v134;

  if (v3)
  {
    siri::ontology::UsoEntityNode::getEntitySpans(v3);
    v4 = v130;
    v113 = v131;
    if (v130 != v131)
    {
      do
      {
        v122 = &off_1E7BAEDD0;
        v129 = 1;
        v128 = 0u;
        v123 = 0u;
        v124 = 0u;
        v125 = 0u;
        v126 = 0u;
        memset(v127, 0, sizeof(v127));
        DWORD2(v128) = a3;
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, *v4);
        if ((_BYTE)v133)
        {
          sirinluexternal::UsoEntitySpan::makeOriginAppId(&v122);
          if (!(_BYTE)v133)
            std::__throw_bad_optional_access[abi:ne180100]();
          v5 = v126;
          siricommon::StringValue::makeValue((siricommon::StringValue *)v126);
          std::string::operator=(*(std::string **)(v5 + 8), &__str);
          if ((_BYTE)v133 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        v6 = *v4;
        v7 = *((_QWORD *)*v4 + 4);
        if ((v7 & 0xFF00000000) != 0)
        {
          LOBYTE(v129) = v129 | 2;
          HIDWORD(v128) = v7;
          v6 = *v4;
        }
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (__int128 *)((char *)v6 + 40));
        if ((_BYTE)v133)
        {
          sirinluexternal::UsoEntitySpan::makeLabel(&v122);
          if (!(_BYTE)v133)
            std::__throw_bad_optional_access[abi:ne180100]();
          v8 = v125;
          siricommon::StringValue::makeValue((siricommon::StringValue *)v125);
          std::string::operator=(*(std::string **)(v8 + 8), &__str);
          if ((_BYTE)v133 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (__int128 *)((char *)*v4 + 152));
        if ((_BYTE)v133)
        {
          sirinluexternal::UsoEntitySpan::makeOriginEntityId(&v122);
          if (!(_BYTE)v133)
            std::__throw_bad_optional_access[abi:ne180100]();
          v9 = *((_QWORD *)&v126 + 1);
          siricommon::StringValue::makeValue(*((siricommon::StringValue **)&v126 + 1));
          std::string::operator=(*(std::string **)(v9 + 8), &__str);
          if ((_BYTE)v133 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        v10 = *v4;
        v11 = *((_QWORD *)*v4 + 14);
        if ((v11 & 0xFF00000000) != 0)
        {
          sirinluexternal::UsoEntitySpan::makeStartIndex(&v122);
          v12 = v128;
          *(_BYTE *)(v128 + 12) |= 1u;
          *(_DWORD *)(v12 + 8) = v11;
          v10 = *v4;
        }
        v13 = *((_QWORD *)v10 + 15);
        if ((v13 & 0xFF00000000) != 0)
        {
          sirinluexternal::UsoEntitySpan::makeEndIndex(&v122);
          v14 = *((_QWORD *)&v124 + 1);
          *(_BYTE *)(*((_QWORD *)&v124 + 1) + 12) |= 1u;
          *(_DWORD *)(v14 + 8) = v13;
          v10 = *v4;
        }
        if (*((_BYTE *)v10 + 80))
        {
          v15 = (int *)*((_QWORD *)v10 + 9);
          sirinluexternal::UsoEntitySpan::makeMatchInfo(&v122);
          v16 = *v15;
          if (*v15)
          {
            v17 = *((_QWORD *)&v125 + 1);
            *(_BYTE *)(*((_QWORD *)&v125 + 1) + 100) |= 1u;
            *(_DWORD *)(v17 + 96) = v16;
          }
          if (*((_BYTE *)v15 + 8))
          {
            v18 = v15[1];
            sirinluexternal::MatchInfo::makeMatchScore(*((_QWORD **)&v125 + 1));
            v19 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 40);
            *(_BYTE *)(v19 + 12) |= 1u;
            *(_DWORD *)(v19 + 8) = v18;
          }
          v20 = *(_QWORD *)(v15 + 3);
          if ((v20 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeMaxTokenCount(*((_QWORD **)&v125 + 1));
            v21 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 88);
            *(_BYTE *)(v21 + 12) |= 1u;
            *(_DWORD *)(v21 + 8) = v20;
          }
          v22 = *(_QWORD *)(v15 + 7);
          if ((v22 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeMaxStopWordCount(*((_QWORD **)&v125 + 1));
            v23 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 80);
            *(_BYTE *)(v23 + 12) |= 1u;
            *(_DWORD *)(v23 + 8) = v22;
          }
          v24 = *(_QWORD *)(v15 + 9);
          if ((v24 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeMatchedStopWordCount(*((_QWORD **)&v125 + 1));
            v25 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 56);
            *(_BYTE *)(v25 + 12) |= 1u;
            *(_DWORD *)(v25 + 8) = v24;
          }
          v26 = *(_QWORD *)(v15 + 11);
          if ((v26 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeEditDistance(*((_QWORD **)&v125 + 1));
            v27 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 32);
            *(_BYTE *)(v27 + 12) |= 1u;
            *(_DWORD *)(v27 + 8) = v26;
          }
          v28 = *(_QWORD *)(v15 + 13);
          if ((v28 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeMaxAliasCount(*((_QWORD **)&v125 + 1));
            v29 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 72);
            *(_BYTE *)(v29 + 12) |= 1u;
            *(_DWORD *)(v29 + 8) = v28;
          }
          v30 = *(_QWORD *)(v15 + 15);
          if ((v30 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeMatchedAliasCount(*((_QWORD **)&v125 + 1));
            v31 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 48);
            *(_BYTE *)(v31 + 12) |= 1u;
            *(_DWORD *)(v31 + 8) = v30;
          }
          v32 = *(_QWORD *)(v15 + 5);
          if ((v32 & 0xFF00000000) != 0)
          {
            sirinluexternal::MatchInfo::makeMatchedTokenCount(*((_QWORD **)&v125 + 1));
            v33 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 64);
            *(_BYTE *)(v33 + 12) |= 1u;
            *(_DWORD *)(v33 + 8) = v32;
          }
          v35 = (int *)*((_QWORD *)v15 + 9);
          v34 = (int *)*((_QWORD *)v15 + 10);
          while (v35 != v34)
          {
            v36 = *v35;
            v37 = (_QWORD *)*((_QWORD *)&v125 + 1);
            v39 = *(char **)(*((_QWORD *)&v125 + 1) + 16);
            v38 = *(_QWORD *)(*((_QWORD *)&v125 + 1) + 24);
            if ((unint64_t)v39 >= v38)
            {
              v41 = *(char **)(*((_QWORD *)&v125 + 1) + 8);
              v42 = (v39 - v41) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL;
              v46 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v45)
                v46 = v43;
              if (v46)
              {
                v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v46);
                v41 = (char *)v37[1];
                v39 = (char *)v37[2];
              }
              else
              {
                v47 = 0;
              }
              v48 = (_DWORD *)(v46 + 4 * v42);
              *v48 = v36;
              v40 = v48 + 1;
              while (v39 != v41)
              {
                v49 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *--v48 = v49;
              }
              v37[1] = v48;
              v37[2] = v40;
              v37[3] = v46 + 4 * v47;
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v39 = v36;
              v40 = v39 + 4;
            }
            v37[2] = v40;
            ++v35;
          }
        }
        siri::ontology::UsoEntitySpan::getAlternatives((siri::ontology::UsoEntitySpan *)*v4);
        v50 = v116;
        v51 = (void (**)(sirinluexternal::SpanProperty *__hidden))v117;
        if (v116 != (void (**)(sirinluexternal::SpanProperty *__hidden))v117)
        {
          do
          {
            v52 = *v50;
            v119 = (std::string *)&off_1E7BB0858;
            v120 = 0;
            v121 = 0;
            v53 = (std::string *)operator new();
            v53->__r_.__value_.__r.__words[0] = 0;
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v54 = v120;
            v120 = v53;
            if (v54)
            {
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v54);
              v53 = v120;
            }
            std::string::operator=(v53, (const std::string *)v52);
            if (*((_BYTE *)v52 + 28))
            {
              v55 = *((_DWORD *)v52 + 6);
              sirinluexternal::AsrAlternative::makeProbability(&v119);
              v56 = v121;
              *(_BYTE *)(v121 + 12) |= 1u;
              *(_DWORD *)(v56 + 8) = v55;
            }
            v57 = (sirinluexternal::AsrAlternative *)operator new();
            sirinluexternal::AsrAlternative::AsrAlternative(v57, (const sirinluexternal::AsrAlternative *)&v119);
            v58 = v123.i64[1];
            if (v123.i64[1] >= (unint64_t)v124)
            {
              v60 = (v123.i64[1] - v123.i64[0]) >> 3;
              if ((unint64_t)(v60 + 1) >> 61)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v61 = (uint64_t)(v124 - v123.i64[0]) >> 2;
              if (v61 <= v60 + 1)
                v61 = v60 + 1;
              if ((uint64_t)v124 - v123.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v61;
              v134 = &v124;
              if (v62)
                v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v62);
              else
                v63 = 0;
              v64 = (sirinluexternal::AsrAlternative **)(v62 + 8 * v60);
              v65 = v62 + 8 * v63;
              v133 = v65;
              *v64 = v57;
              v59 = v64 + 1;
              __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v64 + 1);
              v66 = (_QWORD *)v123.i64[1];
              v67 = (_QWORD *)v123.i64[0];
              if (v123.i64[1] == v123.i64[0])
              {
                v69 = vdupq_n_s64(v123.u64[1]);
              }
              else
              {
                do
                {
                  v68 = (sirinluexternal::AsrAlternative *)*--v66;
                  *v66 = 0;
                  *--v64 = v68;
                }
                while (v66 != v67);
                v69 = v123;
                v59 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
                v65 = v133;
              }
              v123.i64[0] = (uint64_t)v64;
              v123.i64[1] = (uint64_t)v59;
              *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v69;
              v70 = v124;
              *(_QWORD *)&v124 = v65;
              v133 = v70;
              __str.__r_.__value_.__r.__words[0] = v69.i64[0];
              std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__str);
            }
            else
            {
              *(_QWORD *)v123.i64[1] = v57;
              v59 = (_QWORD *)(v58 + 8);
            }
            v123.i64[1] = (uint64_t)v59;
            sirinluexternal::AsrAlternative::~AsrAlternative((sirinluexternal::AsrAlternative *)&v119);
            ++v50;
          }
          while (v50 != v51);
          v50 = v116;
        }
        if (v50)
        {
          *(_QWORD *)&v117 = v50;
          operator delete(v50);
        }
        siri::ontology::UsoEntitySpan::getSpanProperties((siri::ontology::UsoEntitySpan *)*v4);
        v71 = v119;
        v72 = v120;
        if (v119 != v120)
        {
          do
          {
            v73 = v71->__r_.__value_.__r.__words[0];
            v116 = &off_1E7BAFEA0;
            v117 = 0u;
            v118 = 0u;
            v74 = (std::string *)operator new();
            v74->__r_.__value_.__r.__words[0] = 0;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v75 = v117;
            *(_QWORD *)&v117 = v74;
            if (v75)
            {
              std::default_delete<std::string>::operator()[abi:ne180100](v75);
              v74 = (std::string *)v117;
            }
            std::string::operator=(v74, (const std::string *)v73);
            std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (__int128 *)(v73 + 24));
            if ((_BYTE)v133)
            {
              sirinluexternal::SpanProperty::makeValueString(&v116);
              if (!(_BYTE)v133)
                std::__throw_bad_optional_access[abi:ne180100]();
              v76 = *((_QWORD *)&v118 + 1);
              siricommon::StringValue::makeValue(*((siricommon::StringValue **)&v118 + 1));
              std::string::operator=(*(std::string **)(v76 + 8), &__str);
              if ((_BYTE)v133 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v77 = *(_QWORD *)(v73 + 56);
            if ((v77 & 0xFF00000000) != 0)
            {
              sirinluexternal::SpanProperty::makeValueInt(&v116);
              v78 = v118;
              *(_BYTE *)(v118 + 12) |= 1u;
              *(_DWORD *)(v78 + 8) = v77;
            }
            if (*(_BYTE *)(v73 + 68))
            {
              v79 = *(_DWORD *)(v73 + 64);
              sirinluexternal::SpanProperty::makeValueFloat(&v116);
              v80 = *((_QWORD *)&v117 + 1);
              *(_BYTE *)(*((_QWORD *)&v117 + 1) + 12) |= 1u;
              *(_DWORD *)(v80 + 8) = v79;
            }
            v81 = (sirinluexternal::SpanProperty *)operator new();
            sirinluexternal::SpanProperty::SpanProperty(v81, (const sirinluexternal::SpanProperty *)&v116);
            v82 = v127[2];
            if (v127[2] >= v127[3])
            {
              v84 = (uint64_t)(v127[2] - v127[1]) >> 3;
              if ((unint64_t)(v84 + 1) >> 61)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v85 = (uint64_t)(v127[3] - v127[1]) >> 2;
              if (v85 <= v84 + 1)
                v85 = v84 + 1;
              if (v127[3] - v127[1] >= 0x7FFFFFFFFFFFFFF8uLL)
                v86 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v86 = v85;
              v134 = (__int128 *)&v127[3];
              if (v86)
                v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v86);
              else
                v87 = 0;
              v88 = (sirinluexternal::SpanProperty **)(v86 + 8 * v84);
              v89 = v86 + 8 * v87;
              v133 = v89;
              *v88 = v81;
              v83 = v88 + 1;
              __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v88 + 1);
              v90 = (_QWORD *)v127[2];
              v91 = (_QWORD *)v127[1];
              if (v127[2] == v127[1])
              {
                v93 = vdupq_n_s64(v127[2]);
              }
              else
              {
                do
                {
                  v92 = (sirinluexternal::SpanProperty *)*--v90;
                  *v90 = 0;
                  *--v88 = v92;
                }
                while (v90 != v91);
                v93 = *(int64x2_t *)&v127[1];
                v83 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
                v89 = v133;
              }
              v127[1] = v88;
              v127[2] = v83;
              *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v93;
              v94 = v127[3];
              v127[3] = v89;
              v133 = v94;
              __str.__r_.__value_.__r.__words[0] = v93.i64[0];
              std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__str);
            }
            else
            {
              *(_QWORD *)v127[2] = v81;
              v83 = (_QWORD *)(v82 + 8);
            }
            v127[2] = v83;
            sirinluexternal::SpanProperty::~SpanProperty((sirinluexternal::SpanProperty *)&v116);
            v71 = (std::string *)((char *)v71 + 8);
          }
          while (v71 != v72);
          v71 = v119;
        }
        if (v71)
        {
          v120 = v71;
          operator delete(v71);
        }
        v95 = (sirinluexternal::UsoEntitySpan *)operator new();
        sirinluexternal::UsoEntitySpan::UsoEntitySpan(v95, (const sirinluexternal::UsoEntitySpan *)&v122);
        v96 = a1;
        v98 = (sirinluexternal::UsoEntitySpan **)a1[14];
        v97 = a1[15];
        if ((unint64_t)v98 >= v97)
        {
          v100 = a1[13];
          v101 = ((uint64_t)v98 - v100) >> 3;
          if ((unint64_t)(v101 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v102 = v97 - v100;
          v103 = v102 >> 2;
          if (v102 >> 2 <= (unint64_t)(v101 + 1))
            v103 = v101 + 1;
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
            v104 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v104 = v103;
          v134 = (__int128 *)(a1 + 15);
          if (v104)
            v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v104);
          else
            v105 = 0;
          v106 = (sirinluexternal::UsoEntitySpan **)(v104 + 8 * v101);
          v107 = v104 + 8 * v105;
          v133 = v107;
          *v106 = v95;
          v99 = v106 + 1;
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v106 + 1);
          v109 = (_QWORD *)a1[13];
          v108 = (_QWORD *)a1[14];
          if (v108 == v109)
          {
            v111 = vdupq_n_s64((unint64_t)v108);
          }
          else
          {
            do
            {
              v110 = (sirinluexternal::UsoEntitySpan *)*--v108;
              *v108 = 0;
              *--v106 = v110;
            }
            while (v108 != v109);
            v111 = *(int64x2_t *)(a1 + 13);
            v99 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
            v107 = v133;
          }
          a1[13] = v106;
          a1[14] = v99;
          *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v111;
          v112 = a1[15];
          a1[15] = v107;
          v133 = v112;
          __str.__r_.__value_.__r.__words[0] = v111.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__str);
          v96 = a1;
        }
        else
        {
          *v98 = v95;
          v99 = v98 + 1;
        }
        v96[14] = v99;
        sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)&v122);
        ++v4;
      }
      while (v4 != v113);
      v4 = v130;
    }
    if (v4)
    {
      v131 = v4;
      operator delete(v4);
    }
  }
}

void sub_1C1F526E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;
  va_list va;

  va_start(va, a16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)va);
  v19 = *(void **)(v17 - 168);
  if (v19)
  {
    *(_QWORD *)(v17 - 160) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void siri::ontology::setNodeMessage(_QWORD *a1, uint64_t a2, unint64_t *a3, int a4)
{
  _QWORD *v8;
  int v9;
  const std::string *v10;
  char *v11;
  int v12;
  __int128 *v13;
  siricommon::StringValue *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  const std::string *v20;
  int v21;
  uint64_t v22;
  const std::string *v23;
  std::string *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  const std::string *v33;
  std::string *v34;
  __int128 v35;
  std::string v36;
  __int128 v37;
  std::string::size_type v38;
  std::string __p;
  char v40;

  switch((*(unsigned int (**)(unint64_t *))(*a3 + 16))(a3))
  {
    case 0u:
    case 2u:
      if (!v8)
        goto LABEL_33;
      v9 = *(_DWORD *)(v8[3] + 36);
      *(_BYTE *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v9;
      if (!v9)
      {
        v10 = (const std::string *)(v8[3] + 8);
        siricommon::StringValue::makeValue((siricommon::StringValue *)a2);
        std::string::operator=(*(std::string **)(a2 + 8), v10);
      }
      goto LABEL_30;
    case 1u:
      if (!v17)
        goto LABEL_33;
      v18 = v17;
      v19 = *(_DWORD *)(v17[3] + 36);
      *(_BYTE *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v19;
      if (!v19)
      {
        v20 = (const std::string *)(v17[3] + 8);
        siricommon::StringValue::makeValue((siricommon::StringValue *)a2);
        std::string::operator=(*(std::string **)(a2 + 8), v20);
      }
      sirinluexternal::UsoNode::makeUsoVerbElementId((_QWORD *)a2);
      v21 = *(_DWORD *)(v18[13] + 36);
      v22 = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(v22 + 12) |= 1u;
      *(_DWORD *)(v22 + 8) = v21;
      if (!v21)
      {
        v23 = (const std::string *)(v18[13] + 8);
        v24 = *(std::string **)(a2 + 64);
        if (!v24)
        {
          v24 = (std::string *)operator new();
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v25 = *(_QWORD *)(a2 + 64);
          *(_QWORD *)(a2 + 64) = v24;
          if (v25)
          {
            std::default_delete<std::string>::operator()[abi:ne180100](v25);
            v24 = *(std::string **)(a2 + 64);
          }
        }
        std::string::operator=(v24, v23);
      }
      siri::ontology::setIdentifierMessage(a1, a3, a4);
      goto LABEL_31;
    case 3u:
      if (!v11)
        goto LABEL_33;
      v12 = *(_DWORD *)(*((_QWORD *)v11 + 3) + 36);
      *(_BYTE *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v12;
      v13 = (__int128 *)(v11 + 104);
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)(v11 + 104));
      if (v40)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sirinluexternal::UsoNode::makeStringPayload((_QWORD *)a2);
        v14 = *(siricommon::StringValue **)(a2 + 48);
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v13);
        if (!v40)
          std::__throw_bad_optional_access[abi:ne180100]();
        siricommon::StringValue::makeValue(v14);
        v15 = *((_QWORD *)v14 + 1);
        if (*(char *)(v15 + 23) < 0)
          operator delete(*(void **)v15);
        v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v15 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v15 = v16;
      }
      siri::ontology::setIdentifierMessage(a1, a3, a4);
      siri::ontology::setUtteranceAlignmentMessageIfExists(a1, a3, a4);
      siri::ontology::setEntitySpanMessage(a1, a3, a4);
      return;
    case 4u:
      if (!v28)
        goto LABEL_33;
      v29 = v28;
      v30 = *(_DWORD *)(v28[3] + 36);
      *(_BYTE *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v30;
      if (*((_BYTE *)v28 + 112))
      {
        sirinluexternal::UsoNode::makeIntegerPayload((_QWORD *)a2);
        if (!*((_BYTE *)v29 + 112))
          std::__throw_bad_optional_access[abi:ne180100]();
        v31 = v29[13];
        v32 = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(v32 + 16) |= 1u;
        *(_QWORD *)(v32 + 8) = v31;
      }
LABEL_30:
      siri::ontology::setIdentifierMessage(a1, a3, a4);
      siri::ontology::setUtteranceAlignmentMessageIfExists(a1, a3, a4);
LABEL_31:
      siri::ontology::setEntitySpanMessage(a1, a3, a4);
      break;
    case 5u:
      if (!v26)
LABEL_33:
        __cxa_bad_cast();
      v27 = *(_DWORD *)(v26[3] + 36);
      *(_BYTE *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v27;
      if (!v27)
      {
        v33 = (const std::string *)(v26[3] + 8);
        siricommon::StringValue::makeValue((siricommon::StringValue *)a2);
        std::string::operator=(*(std::string **)(a2 + 8), v33);
      }
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(&__p, "UsoGraphProtoWriterException");
      std::to_string(&v36, a3[2]);
      v34 = std::string::insert(&v36, 0, "Unknown UsoGraphNode, vertex: ");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v38 = v34->__r_.__value_.__r.__words[2];
      v37 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,std::string>();
  }
}

void sub_1C1F52C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,std::string>()
{
  _QWORD *exception;
  _QWORD v1[3];
  _QWORD v2[3];

  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "/Library/Caches/com.apple.xbs/Sources/SiriNLUTypes/serializers/SiriOntology/cpp/UsoGraphProtoWriter.cpp");
  std::string::basic_string[abi:ne180100]<0>(v1, "setNodeMessage");
  siri::ontology::OntologyBaseException::OntologyBaseException();
  *exception = &off_1E7BAF888;
}

void sub_1C1F52E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void siri::ontology::OntologyBaseException::~OntologyBaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E7BB1878;
  if (SHIBYTE(this[13].__vftable) < 0)
    operator delete(this[11].__vftable);
  if (SHIBYTE(this[10].__vftable) < 0)
    operator delete(this[8].__vftable);
  if (SHIBYTE(this[6].__vftable) < 0)
    operator delete(this[4].__vftable);
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siri::ontology::OntologyBaseException::what(siri::ontology::OntologyBaseException *this)
{
  uint64_t result;

  result = (uint64_t)this + 88;
  if (*((char *)this + 111) < 0)
    return *(_QWORD *)result;
  return result;
}

void siri::ontology::UsoGraphProtoWriterException::~UsoGraphProtoWriterException(std::exception *this)
{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1C3BB720CLL);
}

void siri::ontology::UsoGraphProtoWriter::toProtobuf(siri::ontology::UsoGraphProtoWriter *this, const sirinluexternal::SemVer **a2, sirinluexternal::UsoGraph *a3)
{
  unint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t **v11;
  unint64_t **v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  __int128 v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD **v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *j;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  sirinluexternal::UsoNode *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  sirinluexternal::UsoNode **v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  sirinluexternal::UsoNode *v53;
  int64x2_t v54;
  unint64_t v55;
  void *v56;
  unint64_t **v57;
  unint64_t **v58;
  unint64_t *v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  std::string *v71;
  uint64_t v72;
  sirinluexternal::UsoEdge *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  sirinluexternal::UsoEdge **v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  sirinluexternal::UsoEdge *v84;
  int64x2_t v85;
  uint64_t v86;
  uint64_t v87;
  void (**v89)(sirinluexternal::UsoNode *__hidden);
  int64x2_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unint64_t **v95;
  unint64_t **v96;
  void *__p[2];
  __int128 v98;
  float v99;
  void (**v100)(sirinluexternal::UsoGraph *__hidden);
  __int128 v101;
  _QWORD v102[4];
  __int128 v103;
  _QWORD v104[4];
  __int128 v105;
  __int128 v106;
  void (**v107)(sirinluexternal::UsoEdge *__hidden);
  int64x2_t v108;
  unint64_t v109;
  _QWORD *v110;

  v100 = &off_1E7BB2398;
  v101 = 0u;
  memset(v102, 0, sizeof(v102));
  v103 = 0u;
  memset(v104, 0, sizeof(v104));
  v105 = 0u;
  v106 = 0u;
  sirinluexternal::UsoGraph::makeVersion(&v100);
  v5 = *((_QWORD *)&v106 + 1);
  v6 = *((_DWORD *)this + 2);
  *(_BYTE *)(*((_QWORD *)&v106 + 1) + 20) |= 1u;
  *(_DWORD *)(v5 + 8) = v6;
  v7 = *((_QWORD *)&v106 + 1);
  v8 = *((_DWORD *)this + 3);
  *(_BYTE *)(*((_QWORD *)&v106 + 1) + 20) |= 2u;
  *(_DWORD *)(v7 + 12) = v8;
  v9 = *((_QWORD *)&v106 + 1);
  v10 = *((_DWORD *)this + 4);
  *(_BYTE *)(*((_QWORD *)&v106 + 1) + 20) |= 4u;
  *(_DWORD *)(v9 + 16) = v10;
  *(_OWORD *)__p = 0u;
  v98 = 0u;
  v99 = 1.0;
  siri::ontology::UsoGraph::getNodes(this);
  v11 = v95;
  v12 = v96;
  if (v95 != v96)
  {
    v13 = 0;
    while (1)
    {
      v14 = *v11;
      v89 = &off_1E7BB1060;
      v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0;
      siri::ontology::setNodeMessage(&v100, (uint64_t)&v89, v14, v13);
      v15 = v14[2];
      v16 = (unint64_t)__p[1];
      if (__p[1])
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v3 = v14[2];
          if ((void *)v15 >= __p[1])
            v3 = v15 % (unint64_t)__p[1];
        }
        else
        {
          v3 = ((unint64_t)__p[1] - 1) & v15;
        }
        v18 = (_QWORD *)*((_QWORD *)__p[0] + v3);
        if (v18)
        {
          for (i = (_QWORD *)*v18; i; i = (_QWORD *)*i)
          {
            v20 = i[1];
            if (v20 == v15)
            {
              if (i[2] == v15)
                goto LABEL_75;
            }
            else
            {
              if (v17.u32[0] > 1uLL)
              {
                if ((void *)v20 >= __p[1])
                  v20 %= (unint64_t)__p[1];
              }
              else
              {
                v20 &= (unint64_t)__p[1] - 1;
              }
              if (v20 != v3)
                break;
            }
          }
        }
      }
      v21 = operator new(0x20uLL);
      *(_QWORD *)&v22 = v15;
      *((_QWORD *)&v22 + 1) = v13;
      *v21 = 0;
      v21[1] = v15;
      *((_OWORD *)v21 + 1) = v22;
      v23 = (float)(unint64_t)(*((_QWORD *)&v98 + 1) + 1);
      if (!v16 || (float)(v99 * (float)v16) < v23)
        break;
LABEL_65:
      v39 = __p[0];
      v40 = (_QWORD *)*((_QWORD *)__p[0] + v3);
      if (v40)
      {
        *v21 = *v40;
      }
      else
      {
        *v21 = v98;
        *(_QWORD *)&v98 = v21;
        v39[v3] = &v98;
        if (!*v21)
          goto LABEL_74;
        v41 = *(_QWORD *)(*v21 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v41 >= v16)
            v41 %= v16;
        }
        else
        {
          v41 &= v16 - 1;
        }
        v40 = (char *)__p[0] + 8 * v41;
      }
      *v40 = v21;
LABEL_74:
      ++*((_QWORD *)&v98 + 1);
LABEL_75:
      v42 = (sirinluexternal::UsoNode *)operator new();
      sirinluexternal::UsoNode::UsoNode(v42, (const sirinluexternal::UsoNode *)&v89);
      v43 = v104[2];
      if (v104[2] >= v104[3])
      {
        v45 = (uint64_t)(v104[2] - v104[1]) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v46 = (uint64_t)(v104[3] - v104[1]) >> 2;
        if (v46 <= v45 + 1)
          v46 = v45 + 1;
        if (v104[3] - v104[1] >= 0x7FFFFFFFFFFFFFF8uLL)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        v110 = &v104[3];
        if (v47)
          v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v47);
        else
          v48 = 0;
        v49 = (sirinluexternal::UsoNode **)(v47 + 8 * v45);
        v50 = v47 + 8 * v48;
        v109 = v50;
        *v49 = v42;
        v44 = v49 + 1;
        v108.i64[1] = (uint64_t)(v49 + 1);
        v52 = (_QWORD *)v104[1];
        v51 = (_QWORD *)v104[2];
        if (v104[2] == v104[1])
        {
          v54 = vdupq_n_s64(v104[2]);
        }
        else
        {
          do
          {
            v53 = (sirinluexternal::UsoNode *)*--v51;
            *v51 = 0;
            *--v49 = v53;
          }
          while (v51 != v52);
          v54 = *(int64x2_t *)&v104[1];
          v44 = (_QWORD *)v108.i64[1];
          v50 = v109;
        }
        v104[1] = v49;
        v104[2] = v44;
        v108 = v54;
        v55 = v104[3];
        v104[3] = v50;
        v109 = v55;
        v107 = (void (**)(sirinluexternal::UsoEdge *__hidden))v54.i64[0];
        std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v107);
      }
      else
      {
        *(_QWORD *)v104[2] = v42;
        v44 = (_QWORD *)(v43 + 8);
      }
      ++v13;
      v104[2] = v44;
      sirinluexternal::UsoNode::~UsoNode((sirinluexternal::UsoNode *)&v89);
      if (++v11 == v12)
      {
        v11 = v95;
        goto LABEL_102;
      }
    }
    v24 = (v16 & (v16 - 1)) != 0;
    if (v16 < 3)
      v24 = 1;
    v25 = v24 | (2 * v16);
    v26 = vcvtps_u32_f32(v23 / v99);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v16 = (unint64_t)__p[1];
    }
    if (*(_QWORD *)&prime > v16)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v16)
    {
      v34 = vcvtps_u32_f32((float)*((unint64_t *)&v98 + 1) / v99);
      if (v16 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v16)
      {
        v16 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = operator new(8 * *(_QWORD *)&prime);
          v29 = __p[0];
          __p[0] = v28;
          if (v29)
            operator delete(v29);
          v30 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v30++) = 0;
          while (*(_QWORD *)&prime != v30);
          v31 = (_QWORD **)v98;
          if ((_QWORD)v98)
          {
            v32 = *(_QWORD *)(v98 + 8);
            v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&prime)
                v32 %= *(_QWORD *)&prime;
            }
            else
            {
              v32 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v32) = &v98;
            for (j = *v31; j; v32 = v38)
            {
              v38 = j[1];
              if (v33.u32[0] > 1uLL)
              {
                if (v38 >= *(_QWORD *)&prime)
                  v38 %= *(_QWORD *)&prime;
              }
              else
              {
                v38 &= *(_QWORD *)&prime - 1;
              }
              if (v38 != v32)
              {
                if (!*((_QWORD *)__p[0] + v38))
                {
                  *((_QWORD *)__p[0] + v38) = v31;
                  goto LABEL_56;
                }
                *v31 = (_QWORD *)*j;
                *j = **((_QWORD **)__p[0] + v38);
                **((_QWORD **)__p[0] + v38) = j;
                j = v31;
              }
              v38 = v32;
LABEL_56:
              v31 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v16 = (unint64_t)prime;
          goto LABEL_60;
        }
        v56 = __p[0];
        __p[0] = 0;
        if (v56)
          operator delete(v56);
        v16 = 0;
        __p[1] = 0;
      }
    }
LABEL_60:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v3 = v15 % v16;
      else
        v3 = v15;
    }
    else
    {
      v3 = (v16 - 1) & v15;
    }
    goto LABEL_65;
  }
LABEL_102:
  if (v11)
  {
    v96 = v11;
    operator delete(v11);
  }
  siri::ontology::UsoGraph::getEdges(this);
  v58 = v95;
  v57 = v96;
  if (v95 != v96)
  {
    do
    {
      v59 = *v58;
      v60 = __p[0];
      v61 = __p[1];
      v62 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((uint64_t)__p[0], (unint64_t)__p[1], **v58);
      if (!v62)
      {
        std::string::basic_string[abi:ne180100]<0>(&v89, "UsoGraphProtoWriterException");
        siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,char const*>((uint64_t)&v89, 369, "Unknown fromNode edge");
      }
      v63 = v62;
      v64 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((uint64_t)v60, (unint64_t)v61, v59[1]);
      if (!v64)
      {
        std::string::basic_string[abi:ne180100]<0>(&v89, "UsoGraphProtoWriterException");
        siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,char const*>((uint64_t)&v89, 373, "Unknown toNode edge");
      }
      v107 = &off_1E7BAF820;
      LODWORD(v109) = 0;
      v108 = 0uLL;
      v65 = v63[3];
      LOBYTE(v109) = 1;
      v66 = v64[3];
      LOBYTE(v109) = 3;
      v108.i64[1] = __PAIR64__(v66, v65);
      sirinluexternal::UsoEdge::makeLabel(&v107);
      v67 = *((_DWORD *)v59 + 15);
      v68 = v108.i64[0];
      v69 = *((_DWORD *)v59 + 4);
      *(_BYTE *)(v108.i64[0] + 24) |= 3u;
      *(_DWORD *)(v68 + 16) = v69;
      *(_DWORD *)(v68 + 20) = v67;
      if (!v67)
      {
        sirinluexternal::UsoEdgeLabel::makeBaseEdgeLabel((_QWORD *)v68);
        v70 = *(_QWORD *)(v108.i64[0] + 8);
        v71 = *(std::string **)(v70 + 8);
        if (!v71)
        {
          v71 = (std::string *)operator new();
          v71->__r_.__value_.__r.__words[0] = 0;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v72 = *(_QWORD *)(v70 + 8);
          *(_QWORD *)(v70 + 8) = v71;
          if (v72)
          {
            std::default_delete<std::string>::operator()[abi:ne180100](v72);
            v71 = *(std::string **)(v70 + 8);
          }
        }
        std::string::operator=(v71, (const std::string *)(v59 + 4));
      }
      v73 = (sirinluexternal::UsoEdge *)operator new();
      sirinluexternal::UsoEdge::UsoEdge(v73, (const sirinluexternal::UsoEdge *)&v107);
      v74 = v102[2];
      if (v102[2] >= v102[3])
      {
        v76 = (uint64_t)(v102[2] - v102[1]) >> 3;
        if ((unint64_t)(v76 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v77 = (uint64_t)(v102[3] - v102[1]) >> 2;
        if (v77 <= v76 + 1)
          v77 = v76 + 1;
        if (v102[3] - v102[1] >= 0x7FFFFFFFFFFFFFF8uLL)
          v78 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v78 = v77;
        *((_QWORD *)&v91 + 1) = &v102[3];
        if (v78)
          v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v78);
        else
          v79 = 0;
        v80 = (sirinluexternal::UsoEdge **)(v78 + 8 * v76);
        v81 = v78 + 8 * v79;
        *(_QWORD *)&v91 = v81;
        *v80 = v73;
        v75 = v80 + 1;
        v90.i64[1] = (uint64_t)(v80 + 1);
        v83 = (_QWORD *)v102[1];
        v82 = (_QWORD *)v102[2];
        if (v102[2] == v102[1])
        {
          v85 = vdupq_n_s64(v102[2]);
        }
        else
        {
          do
          {
            v84 = (sirinluexternal::UsoEdge *)*--v82;
            *v82 = 0;
            *--v80 = v84;
          }
          while (v82 != v83);
          v85 = *(int64x2_t *)&v102[1];
          v75 = (_QWORD *)v90.i64[1];
          v81 = v91;
        }
        v102[1] = v80;
        v102[2] = v75;
        v90 = v85;
        v86 = v102[3];
        v102[3] = v81;
        *(_QWORD *)&v91 = v86;
        v89 = (void (**)(sirinluexternal::UsoNode *__hidden))v85.i64[0];
        std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v89);
      }
      else
      {
        *(_QWORD *)v102[2] = v73;
        v75 = (_QWORD *)(v74 + 8);
      }
      v102[2] = v75;
      v87 = v108.i64[0];
      v107 = &off_1E7BAF820;
      v108.i64[0] = 0;
      if (v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      PB::Base::~Base((PB::Base *)&v107);
      ++v58;
    }
    while (v58 != v57);
    v58 = v95;
  }
  if (v58)
  {
    v96 = v58;
    operator delete(v58);
  }
  sirinluexternal::UsoGraph::operator=(a2, (const sirinluexternal::SemVer **)&v100);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table((uint64_t)__p);
  sirinluexternal::UsoGraph::~UsoGraph((sirinluexternal::UsoGraph *)&v100);
}

void sub_1C1F53808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table((uint64_t)&a28);
  sirinluexternal::UsoGraph::~UsoGraph((sirinluexternal::UsoGraph *)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *exception;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];

  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v7, "/Library/Caches/com.apple.xbs/Sources/SiriNLUTypes/serializers/SiriOntology/cpp/UsoGraphProtoWriter.cpp");
  std::string::basic_string[abi:ne180100]<0>(v6, "toProtobuf");
  std::string::basic_string[abi:ne180100]<0>(v5, a3);
  siri::ontology::OntologyBaseException::OntologyBaseException();
  *exception = &off_1E7BAF888;
}

void sub_1C1F53A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void siri::ontology::UsoGraphProtoWriter::toProtobuf(siri::ontology::UsoGraphProtoWriter **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  sirinluexternal::UsoGraph *v5;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E7BB2398;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *a2 = v4;
  siri::ontology::UsoGraphProtoWriter::toProtobuf(*a1, (const sirinluexternal::SemVer **)v4, v5);
}

void sub_1C1F53B74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraphProtoWriter::toProtobuf(siri::ontology::UsoGraphProtoWriter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  sirinluexternal::UsoGraph *v6;

  v5 = operator new();
  *(_QWORD *)v5 = &off_1E7BB2398;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *a2 = v5;
  siri::ontology::UsoGraphProtoWriter::toProtobuf(this, (const sirinluexternal::SemVer **)v5, v6);
}

void sub_1C1F53C18(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_1C1F53E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);

  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va1);
  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  v5 = v13;
  v13 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100]((uint64_t)va3);

  _Unwind_Resume(a1);
}

void sub_1C1F53EE4()
{
  JUMPOUT(0x1C1F53ED8);
}

void sub_1C1F545BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sirinluexternalnlu_router::NLParseResponse::~NLParseResponse(sirinluexternalnlu_router::NLParseResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAF8B0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAF8B0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAF8B0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::NLParseResponse::readFrom(sirinluexternalnlu_router::NLParseResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::formatText(sirinluexternalnlu_router::NLParseResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "user_parses");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::NLParseResponse::NLParseResponse(_QWORD *this)
{
  *this = &off_1E7BAF8B0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAF8B0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternalnlu_router::NLParseResponse *sirinluexternalnlu_router::NLParseResponse::NLParseResponse(sirinluexternalnlu_router::NLParseResponse *this, const sirinluexternalnlu_router::NLParseResponse *a2)
{
  sirinluexternal::UserParse ***v3;
  const sirinluexternal::UUID ***v4;
  const sirinluexternal::UUID ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAF8B0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v3, *v4++);
  return this;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::operator=(uint64_t a1, const sirinluexternalnlu_router::NLParseResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluexternalnlu_router::NLParseResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluexternalnlu_router::NLParseResponse *)a1 != a2)
  {
    sirinluexternalnlu_router::NLParseResponse::NLParseResponse((sirinluexternalnlu_router::NLParseResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BAF8B0;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluexternalnlu_router::swap(_QWORD *this, sirinluexternalnlu_router::NLParseResponse *a2, sirinluexternalnlu_router::NLParseResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluexternalnlu_router::NLParseResponse::NLParseResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BAF8B0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BAF8B0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluexternalnlu_router::NLParseResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BAF8B0;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BAF8B0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLParseResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sirinluexternalnlu_router::NLParseResponse::hash_value(sirinluexternalnlu_router::NLParseResponse *this)
{
  sirinluexternal::UserParse **v1;
  sirinluexternal::UserParse **v2;
  uint64_t v3;
  sirinluexternal::UserParse *v4;

  v1 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sirinluexternalnlu_router::App::~App(sirinluexternalnlu_router::App *this)
{
  sirinluexternalnlu_router::App::~App(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF900;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::App::readFrom(sirinluexternalnlu_router::App *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::App::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalnlu_router::App::formatText(sirinluexternalnlu_router::App *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::App::App(_QWORD *this)
{
  *this = &off_1E7BAF900;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF900;
  this[1] = 0;
  return this;
}

sirinluexternalnlu_router::App *sirinluexternalnlu_router::App::App(sirinluexternalnlu_router::App *this, const sirinluexternalnlu_router::App *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BAF900;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return this;
}

const sirinluexternalnlu_router::App *sirinluexternalnlu_router::App::operator=(const sirinluexternalnlu_router::App *a1, const sirinluexternalnlu_router::App *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::App::App((sirinluexternalnlu_router::App *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    sirinluexternalnlu_router::App::~App((sirinluexternalnlu_router::App *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::App *a2, sirinluexternalnlu_router::App *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternalnlu_router::App::App(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF900;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF900;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluexternalnlu_router::App::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF900;
    v6[1] = v4;
    sirinluexternalnlu_router::App::~App((sirinluexternalnlu_router::App *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::App::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternalnlu_router::App::hash_value(sirinluexternalnlu_router::App *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  return result;
}

void sirinluexternalnlu_router::RetrievedContext::~RetrievedContext(sirinluexternalnlu_router::RetrievedContext *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF950;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF950;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF950;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::RetrievedContext::readFrom(sirinluexternalnlu_router::RetrievedContext *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 5)
      {
        v28 = (_QWORD *)operator new();
        *v28 = &off_1E7BAF9F0;
        v28[1] = 0;
        v29 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v28 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v28 + 16))(v28, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          v30 = 0;
          v31 = 0;
          v24 = 0;
          if (v20 <= v19)
            v20 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v32 = v19 + 1;
            v33 = *(_BYTE *)(v21 + v19);
            *((_QWORD *)a2 + 1) = v32;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v19 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v24) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v26 = *(_BYTE *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0)
              break;
            v22 += 7;
            v19 = v25;
            v14 = v23++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if ((*(_BYTE *)(this + 20) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::formatText(sirinluexternalnlu_router::RetrievedContext *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "type");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "typed_value");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::RetrievedContext::RetrievedContext(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF950;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF950;
  return this;
}

sirinluexternalnlu_router::RetrievedContext *sirinluexternalnlu_router::RetrievedContext::RetrievedContext(sirinluexternalnlu_router::RetrievedContext *this, const sirinluexternalnlu_router::RetrievedContext *a2)
{
  sirinluexternalnlu_router::TypedValue **v4;
  int v5;
  sirinluexternalnlu_router::TypedValue *v6;
  sirinluexternalnlu_router::TypedValue *v7;
  sirinluexternalnlu_router::TypedValue *v8;

  *(_QWORD *)this = &off_1E7BAF950;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternalnlu_router::TypedValue **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = 1;
    *((_DWORD *)this + 4) = v5;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v6 = (sirinluexternalnlu_router::TypedValue *)operator new();
    v7 = sirinluexternalnlu_router::TypedValue::TypedValue(v6, *((const sirinluexternalnlu_router::App ****)a2 + 1));
    v8 = *v4;
    *v4 = v7;
    if (v8)
      (*(void (**)(sirinluexternalnlu_router::TypedValue *))(*(_QWORD *)v8 + 8))(v8);
  }
  return this;
}

const sirinluexternalnlu_router::RetrievedContext *sirinluexternalnlu_router::RetrievedContext::operator=(const sirinluexternalnlu_router::RetrievedContext *a1, const sirinluexternalnlu_router::RetrievedContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v6)(sirinluexternalnlu_router::RetrievedContext *__hidden);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::RetrievedContext::RetrievedContext((sirinluexternalnlu_router::RetrievedContext *)&v6, a2);
    v3 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v8;
    v8 = v3;
    v4 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v7;
    v6 = &off_1E7BAF950;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::RetrievedContext *a2, sirinluexternalnlu_router::RetrievedContext *a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::RetrievedContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7BAF950;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_1E7BAF950;
    v8[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
    return sirinluexternalnlu_router::TypedValue::operator==(v2, v3);
  return result;
}

unint64_t sirinluexternalnlu_router::RetrievedContext::hash_value(sirinluexternalnlu_router::RetrievedContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if ((*((_BYTE *)this + 20) & 1) != 0)
    v1 = *((int *)this + 4);
  else
    v1 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  }
  else
  {
    v5 = 0;
  }
  return v5 ^ v1;
}

_QWORD *sirinluexternalnlu_router::RetrievedContext::makeTypedValue(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF9F0;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalnlu_router::PommesResponse::~PommesResponse(sirinluexternalnlu_router::PommesResponse *this)
{
  sirinluexternalnlu_router::PommesResponse::~PommesResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF9A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::PommesResponse::readFrom(sirinluexternalnlu_router::PommesResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 4)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::PommesResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalnlu_router::PommesResponse::formatText(sirinluexternalnlu_router::PommesResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::PommesResponse::PommesResponse(_QWORD *this)
{
  *this = &off_1E7BAF9A0;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF9A0;
  this[1] = 0;
  return this;
}

sirinluexternalnlu_router::PommesResponse *sirinluexternalnlu_router::PommesResponse::PommesResponse(sirinluexternalnlu_router::PommesResponse *this, const sirinluexternalnlu_router::PommesResponse *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BAF9A0;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return this;
}

const sirinluexternalnlu_router::PommesResponse *sirinluexternalnlu_router::PommesResponse::operator=(const sirinluexternalnlu_router::PommesResponse *a1, const sirinluexternalnlu_router::PommesResponse *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::PommesResponse::PommesResponse((sirinluexternalnlu_router::PommesResponse *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    sirinluexternalnlu_router::PommesResponse::~PommesResponse((sirinluexternalnlu_router::PommesResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::PommesResponse *a2, sirinluexternalnlu_router::PommesResponse *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternalnlu_router::PommesResponse::PommesResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF9A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF9A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluexternalnlu_router::PommesResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF9A0;
    v6[1] = v4;
    sirinluexternalnlu_router::PommesResponse::~PommesResponse((sirinluexternalnlu_router::PommesResponse *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::PommesResponse::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternalnlu_router::PommesResponse::hash_value(sirinluexternalnlu_router::PommesResponse *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  return result;
}

void sirinluexternalnlu_router::TypedValue::~TypedValue(sirinluexternalnlu_router::TypedValue *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF9F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF9F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF9F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::TypedValue::readFrom(sirinluexternalnlu_router::TypedValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BB08F8;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::TypedValue::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluexternalnlu_router::TypedValue::formatText(sirinluexternalnlu_router::TypedValue *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "primitive");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::TypedValue::TypedValue(_QWORD *this)
{
  *this = &off_1E7BAF9F0;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF9F0;
  this[1] = 0;
  return this;
}

sirinluexternalnlu_router::TypedValue *sirinluexternalnlu_router::TypedValue::TypedValue(sirinluexternalnlu_router::TypedValue *this, const sirinluexternalnlu_router::App ***a2)
{
  sirinluexternalnlu_router::PrimitiveValue *v4;
  sirinluexternalnlu_router::PrimitiveValue *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAF9F0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluexternalnlu_router::PrimitiveValue *)operator new();
    v5 = sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::TypedValue::operator=(uint64_t a1, const sirinluexternalnlu_router::App ***a2)
{
  uint64_t v3;
  void (**v5)(sirinluexternalnlu_router::TypedValue *__hidden);
  uint64_t v6;

  if ((const sirinluexternalnlu_router::App ***)a1 != a2)
  {
    sirinluexternalnlu_router::TypedValue::TypedValue((sirinluexternalnlu_router::TypedValue *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAF9F0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::TypedValue *a2, sirinluexternalnlu_router::TypedValue *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternalnlu_router::TypedValue::TypedValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF9F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF9F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternalnlu_router::TypedValue::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF9F0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::TypedValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluexternalnlu_router::PrimitiveValue::operator==(v2, v3);
}

unint64_t sirinluexternalnlu_router::TypedValue::hash_value(sirinluexternalnlu_router::TypedValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return std::__string_hash<char>::operator()[abi:ne180100](v3);
  else
    return 0;
}

_QWORD *sirinluexternalnlu_router::TypedValue::makePrimitive(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB08F8;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput(sirinluexternalnlu_router::QueryDecorationOutput *this)
{
  sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E7BAFA40;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 14);
    v4 = (void *)*((_QWORD *)this + 13);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v2;
    operator delete(v4);
  }
  v7 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::readFrom(sirinluexternalnlu_router::QueryDecorationOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  std::vector<std::string> *v10;
  std::allocator<std::string> *v11;
  std::vector<std::string> *v12;
  std::allocator<std::string> *v13;
  std::vector<std::string> *v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t result;
  std::allocator<std::string> *v27;
  std::vector<std::string> *v28;
  std::vector<std::string> *v29;
  std::vector<std::string> *v30;
  std::allocator<std::string> *v31;
  std::allocator<std::string> *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  std::string *v76;
  unint64_t v77;
  std::string *value;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  int64x2_t v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  std::string::size_type v87;
  std::vector<std::string> *v88;
  std::allocator<std::string> *v89;
  std::allocator<std::string> *v90;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (std::vector<std::string> *)((char *)this + 8);
  v9 = (std::allocator<std::string> *)((char *)this + 24);
  v10 = (std::vector<std::string> *)((char *)this + 56);
  v11 = (std::allocator<std::string> *)((char *)this + 72);
  v12 = (std::vector<std::string> *)((char *)this + 32);
  v13 = (std::allocator<std::string> *)((char *)this + 48);
  v14 = (std::vector<std::string> *)((char *)this + 80);
  v89 = (std::allocator<std::string> *)((char *)this + 120);
  v90 = (std::allocator<std::string> *)((char *)this + 96);
  while (1)
  {
    v15 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v20 = *(_BYTE *)(v15 + v2);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v2 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_22:
      if ((v18 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v18 >> 3))
      {
        case 3u:
          v88 = v14;
          v27 = v13;
          v28 = v12;
          v29 = v10;
          v30 = v8;
          v31 = v11;
          v32 = v9;
          v33 = (_QWORD *)operator new();
          v34 = v33;
          v33[1] = 0;
          v33[2] = 0;
          *v33 = &off_1E7BAF950;
          v36 = (_QWORD *)*((_QWORD *)this + 14);
          v35 = *((_QWORD *)this + 15);
          if ((unint64_t)v36 >= v35)
          {
            v55 = *((_QWORD *)this + 13);
            v56 = ((uint64_t)v36 - v55) >> 3;
            if ((unint64_t)(v56 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v57 = v35 - v55;
            v58 = v57 >> 2;
            if (v57 >> 2 <= (unint64_t)(v56 + 1))
              v58 = v56 + 1;
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            __v.__end_cap_.__value_ = v89;
            if (v59)
              v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v59);
            else
              v60 = 0;
            v77 = v59 + 8 * v56;
            value = (std::string *)(v59 + 8 * v60);
            __v.__end_cap_.__value_ = value;
            *(_QWORD *)v77 = v34;
            end = (std::__split_buffer<std::string>::pointer)(v77 + 8);
            __v.__end_ = (std::__split_buffer<std::string>::pointer)(v77 + 8);
            v80 = (_QWORD *)*((_QWORD *)this + 13);
            v79 = (_QWORD *)*((_QWORD *)this + 14);
            if (v79 == v80)
            {
              v82 = vdupq_n_s64((unint64_t)v79);
            }
            else
            {
              do
              {
                v81 = *--v79;
                *v79 = 0;
                *(_QWORD *)(v77 - 8) = v81;
                v77 -= 8;
              }
              while (v79 != v80);
              v82 = *(int64x2_t *)((char *)this + 104);
              end = __v.__end_;
              value = __v.__end_cap_.__value_;
            }
            *((_QWORD *)this + 13) = v77;
            *((_QWORD *)this + 14) = end;
            *(int64x2_t *)&__v.__begin_ = v82;
            v86 = (std::string *)*((_QWORD *)this + 15);
            *((_QWORD *)this + 15) = value;
            __v.__end_cap_.__value_ = v86;
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v82.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__v);
          }
          else
          {
            *v36 = v33;
            end = (std::__split_buffer<std::string>::pointer)(v36 + 1);
          }
          *((_QWORD *)this + 14) = end;
          v87 = end[-1].__r_.__value_.__r.__words[2];
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(std::string::size_type, PB::Reader *))(*(_QWORD *)v87 + 16))(v87, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v9 = v32;
          v11 = v31;
          v8 = v30;
          v10 = v29;
          v12 = v28;
          v13 = v27;
          v14 = v88;
          goto LABEL_91;
        case 5u:
          v42 = (char *)*((_QWORD *)this + 11);
          v41 = *((_QWORD *)this + 12);
          if ((unint64_t)v42 >= v41)
          {
            v61 = 0xAAAAAAAAAAAAAAABLL * ((v42 - (char *)v14->__begin_) >> 3);
            v62 = v61 + 1;
            if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_103;
            v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (unint64_t)v14->__begin_) >> 3);
            if (2 * v63 > v62)
              v62 = 2 * v63;
            if (v63 >= 0x555555555555555)
              v64 = 0xAAAAAAAAAAAAAAALL;
            else
              v64 = v62;
            __v.__end_cap_.__value_ = v90;
            if (v64)
              v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v64);
            else
              v65 = 0;
            v83 = (std::string *)(v64 + 24 * v61);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v64;
            __v.__begin_ = v83;
            __v.__end_cap_.__value_ = (std::string *)(v64 + 24 * v65);
            v83->__r_.__value_.__r.__words[0] = 0;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v83 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v14, &__v);
            v43 = (_QWORD *)*((_QWORD *)this + 11);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = 0;
            v43 = v42 + 24;
            *((_QWORD *)this + 11) = v42 + 24;
          }
          *((_QWORD *)this + 11) = v43;
          break;
        case 6u:
          v39 = (char *)*((_QWORD *)this + 5);
          v38 = *((_QWORD *)this + 6);
          if ((unint64_t)v39 >= v38)
          {
            v50 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (char *)v12->__begin_) >> 3);
            v51 = v50 + 1;
            if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_103;
            v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (unint64_t)v12->__begin_) >> 3);
            if (2 * v52 > v51)
              v51 = 2 * v52;
            if (v52 >= 0x555555555555555)
              v53 = 0xAAAAAAAAAAAAAAALL;
            else
              v53 = v51;
            __v.__end_cap_.__value_ = v13;
            if (v53)
              v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v53);
            else
              v54 = 0;
            v76 = (std::string *)(v53 + 24 * v50);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v53;
            __v.__begin_ = v76;
            __v.__end_cap_.__value_ = (std::string *)(v53 + 24 * v54);
            v76->__r_.__value_.__r.__words[0] = 0;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v76 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v12, &__v);
            v40 = (_QWORD *)*((_QWORD *)this + 5);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_QWORD *)v39 = 0;
            *((_QWORD *)v39 + 1) = 0;
            *((_QWORD *)v39 + 2) = 0;
            v40 = v39 + 24;
            *((_QWORD *)this + 5) = v39 + 24;
          }
          *((_QWORD *)this + 5) = v40;
          break;
        case 7u:
          v45 = (char *)*((_QWORD *)this + 8);
          v44 = *((_QWORD *)this + 9);
          if ((unint64_t)v45 >= v44)
          {
            v66 = 0xAAAAAAAAAAAAAAABLL * ((v45 - (char *)v10->__begin_) >> 3);
            v67 = v66 + 1;
            if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_103;
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (unint64_t)v10->__begin_) >> 3);
            if (2 * v68 > v67)
              v67 = 2 * v68;
            if (v68 >= 0x555555555555555)
              v69 = 0xAAAAAAAAAAAAAAALL;
            else
              v69 = v67;
            __v.__end_cap_.__value_ = v11;
            if (v69)
              v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v69);
            else
              v70 = 0;
            v84 = (std::string *)(v69 + 24 * v66);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v69;
            __v.__begin_ = v84;
            __v.__end_cap_.__value_ = (std::string *)(v69 + 24 * v70);
            v84->__r_.__value_.__r.__words[0] = 0;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v84 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
            v46 = (_QWORD *)*((_QWORD *)this + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_QWORD *)v45 = 0;
            *((_QWORD *)v45 + 1) = 0;
            *((_QWORD *)v45 + 2) = 0;
            v46 = v45 + 24;
            *((_QWORD *)this + 8) = v45 + 24;
          }
          *((_QWORD *)this + 8) = v46;
          break;
        case 8u:
          v48 = (char *)*((_QWORD *)this + 2);
          v47 = *((_QWORD *)this + 3);
          if ((unint64_t)v48 >= v47)
          {
            v71 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (char *)v8->__begin_) >> 3);
            v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_103:
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (unint64_t)v8->__begin_) >> 3);
            if (2 * v73 > v72)
              v72 = 2 * v73;
            if (v73 >= 0x555555555555555)
              v74 = 0xAAAAAAAAAAAAAAALL;
            else
              v74 = v72;
            __v.__end_cap_.__value_ = v9;
            if (v74)
              v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v74);
            else
              v75 = 0;
            v85 = (std::string *)(v74 + 24 * v71);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v74;
            __v.__begin_ = v85;
            __v.__end_cap_.__value_ = (std::string *)(v74 + 24 * v75);
            v85->__r_.__value_.__r.__words[0] = 0;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v85 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
            v49 = (_QWORD *)*((_QWORD *)this + 2);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_QWORD *)v48 = 0;
            *((_QWORD *)v48 + 1) = 0;
            *((_QWORD *)v48 + 2) = 0;
            v49 = v48 + 24;
            *((_QWORD *)this + 2) = v48 + 24;
          }
          *((_QWORD *)this + 2) = v49;
          break;
        default:
          goto LABEL_20;
      }
      PB::Reader::read();
      goto LABEL_91;
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v24 = v2 + 1;
      v25 = *(_BYTE *)(v15 + v2);
      *((_QWORD *)a2 + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_22;
      v22 += 7;
      v2 = v24;
      v21 = v23++ > 8;
    }
    while (!v21);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_91:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1C1F56D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base ***)(this + 104);
  v5 = *(const PB::Base ***)(this + 112);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = v3[10];
  v8 = v3[11];
  while (v7 != v8)
  {
    this = PB::Writer::write();
    v7 += 24;
  }
  v9 = v3[4];
  v10 = v3[5];
  while (v9 != v10)
  {
    this = PB::Writer::write();
    v9 += 24;
  }
  v11 = v3[7];
  v12 = v3[8];
  while (v11 != v12)
  {
    this = PB::Writer::write();
    v11 += 24;
  }
  v14 = v3[1];
  v13 = v3[2];
  while (v14 != v13)
  {
    this = PB::Writer::write();
    v14 += 24;
  }
  return this;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::formatText(sirinluexternalnlu_router::QueryDecorationOutput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  uint64_t k;
  uint64_t v11;
  uint64_t m;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  v7 = *((_QWORD *)this + 4);
  for (j = *((_QWORD *)this + 5); v7 != j; v7 += 24)
    PB::TextFormatter::format();
  v9 = *((_QWORD *)this + 7);
  for (k = *((_QWORD *)this + 8); v9 != k; v9 += 24)
    PB::TextFormatter::format();
  v11 = *((_QWORD *)this + 10);
  for (m = *((_QWORD *)this + 11); v11 != m; v11 += 24)
    PB::TextFormatter::format();
  v13 = (uint64_t *)*((_QWORD *)this + 13);
  v14 = (uint64_t *)*((_QWORD *)this + 14);
  while (v13 != v14)
  {
    v15 = *v13++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "required_context");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(sirinluexternalnlu_router::QueryDecorationOutput *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFA40;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFA40;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

sirinluexternalnlu_router::QueryDecorationOutput *sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(sirinluexternalnlu_router::QueryDecorationOutput *this, const sirinluexternalnlu_router::QueryDecorationOutput *a2)
{
  std::vector<std::string> *v4;
  const sirinluexternalnlu_router::RetrievedContext **v5;
  const sirinluexternalnlu_router::RetrievedContext **i;
  const sirinluexternalnlu_router::RetrievedContext *v7;
  sirinluexternalnlu_router::RetrievedContext *v8;
  unint64_t v9;
  sirinluexternalnlu_router::RetrievedContext **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  sirinluexternalnlu_router::RetrievedContext **v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  sirinluexternalnlu_router::RetrievedContext *v22;
  int64x2_t v23;
  unint64_t v24;
  std::vector<std::string> *v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  char *v30;

  *(_QWORD *)this = &off_1E7BAFA40;
  *(_OWORD *)((char *)this + 8) = 0u;
  v26 = (std::vector<std::string> *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (std::vector<std::string> *)((char *)this + 56);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  v5 = (const sirinluexternalnlu_router::RetrievedContext **)*((_QWORD *)a2 + 13);
  for (i = (const sirinluexternalnlu_router::RetrievedContext **)*((_QWORD *)a2 + 14); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (sirinluexternalnlu_router::RetrievedContext *)operator new();
    sirinluexternalnlu_router::RetrievedContext::RetrievedContext(v8, v7);
    v10 = (sirinluexternalnlu_router::RetrievedContext **)*((_QWORD *)this + 14);
    v9 = *((_QWORD *)this + 15);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *((_QWORD *)this + 13);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v30 = (char *)this + 120;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v16);
      else
        v17 = 0;
      v18 = (sirinluexternalnlu_router::RetrievedContext **)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      v29 = v19;
      *v18 = v8;
      v11 = v18 + 1;
      v28.i64[1] = (uint64_t)(v18 + 1);
      v21 = (_QWORD *)*((_QWORD *)this + 13);
      v20 = (_QWORD *)*((_QWORD *)this + 14);
      if (v20 == v21)
      {
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          v22 = (sirinluexternalnlu_router::RetrievedContext *)*--v20;
          *v20 = 0;
          *--v18 = v22;
        }
        while (v20 != v21);
        v23 = *(int64x2_t *)((char *)this + 104);
        v11 = (_QWORD *)v28.i64[1];
        v19 = v29;
      }
      *((_QWORD *)this + 13) = v18;
      *((_QWORD *)this + 14) = v11;
      v28 = v23;
      v24 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v19;
      v29 = v24;
      v27 = v23.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 14) = v11;
  }
  if (this != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 80), *((std::string **)a2 + 10), *((__int128 **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 32), *((std::string **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *((std::string **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v26, *((std::string **)a2 + 1), *((__int128 **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  }
  return this;
}

void sub_1C1F572CC(void *a1)
{
  __clang_call_terminate(a1);
}

const sirinluexternalnlu_router::QueryDecorationOutput *sirinluexternalnlu_router::QueryDecorationOutput::operator=(const sirinluexternalnlu_router::QueryDecorationOutput *a1, const sirinluexternalnlu_router::QueryDecorationOutput *a2)
{
  sirinluexternalnlu_router::QueryDecorationOutput *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput((sirinluexternalnlu_router::QueryDecorationOutput *)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::QueryDecorationOutput *)v5, v3);
    sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput((sirinluexternalnlu_router::QueryDecorationOutput *)v5);
  }
  return a1;
}

_QWORD *sirinluexternalnlu_router::swap(_QWORD *this, sirinluexternalnlu_router::QueryDecorationOutput *a2, sirinluexternalnlu_router::QueryDecorationOutput *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = this[13];
  this[13] = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v3;
  v4 = this[14];
  this[14] = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v4;
  v5 = this[15];
  this[15] = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v5;
  v6 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = this[11];
  this[11] = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = this[12];
  this[12] = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v8;
  v9 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v15;
  v16 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v16;
  v17 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  return this;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string> *v5;

  *(_QWORD *)a1 = &off_1E7BAFA40;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (std::vector<std::string> *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (std::vector<std::string> *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 80));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::string>::__vdeallocate(v5);
  *(_OWORD *)&v5->__begin_ = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  std::vector<std::string>::__vdeallocate(v4);
  *(_OWORD *)&v4->__begin_ = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

_QWORD *sirinluexternalnlu_router::QueryDecorationOutput::operator=(_QWORD *a1, uint64_t a2)
{
  sirinluexternalnlu_router::QueryDecorationOutput *v3;
  _BYTE v5[128];

  if (a1 != (_QWORD *)a2)
  {
    sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput((uint64_t)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::QueryDecorationOutput *)v5, v3);
    sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput((sirinluexternalnlu_router::QueryDecorationOutput *)v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  _QWORD *v21;

  v3 = (uint64_t *)a1[13];
  v2 = (uint64_t *)a1[14];
  v4 = (uint64_t *)a2[13];
  if ((char *)v2 - (char *)v3 != a2[14] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    result = sirinluexternalnlu_router::RetrievedContext::operator==(*v3, *v4);
    if (!(_DWORD)result)
      return result;
    ++v3;
    ++v4;
  }
  v8 = (unsigned __int8 *)a1[10];
  v9 = (unsigned __int8 *)a1[11];
  v10 = (unsigned __int8 *)a2[10];
  if (v9 - v8 != a2[11] - (_QWORD)v10)
    return 0;
  while (v8 != v9)
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v8, v10);
    if (!(_DWORD)result)
      return result;
    v8 += 24;
    v10 += 24;
  }
  v11 = (unsigned __int8 *)a1[4];
  v12 = (unsigned __int8 *)a1[5];
  v13 = (unsigned __int8 *)a2[4];
  if (v12 - v11 != a2[5] - (_QWORD)v13)
    return 0;
  while (v11 != v12)
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v11, v13);
    if (!(_DWORD)result)
      return result;
    v11 += 24;
    v13 += 24;
  }
  v14 = (unsigned __int8 *)a1[7];
  v15 = (unsigned __int8 *)a1[8];
  v16 = (unsigned __int8 *)a2[7];
  if (v15 - v14 != a2[8] - (_QWORD)v16)
    return 0;
  while (v14 != v15)
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v14, v16);
    if (!(_DWORD)result)
      return result;
    v14 += 24;
    v16 += 24;
  }
  v19 = a1 + 1;
  v17 = (unsigned __int8 *)a1[1];
  v18 = (unsigned __int8 *)v19[1];
  v21 = a2 + 1;
  v20 = (unsigned __int8 *)a2[1];
  if (v18 - v17 != v21[1] - (_QWORD)v20)
    return 0;
  if (v17 == v18)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v17, v20);
    if (!(_DWORD)result)
      break;
    v17 += 24;
    v20 += 24;
  }
  while (v17 != v18);
  return result;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::hash_value(sirinluexternalnlu_router::QueryDecorationOutput *this)
{
  sirinluexternalnlu_router::RetrievedContext **v2;
  sirinluexternalnlu_router::RetrievedContext **v3;
  uint64_t v4;
  sirinluexternalnlu_router::RetrievedContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (sirinluexternalnlu_router::RetrievedContext **)*((_QWORD *)this + 13);
  v3 = (sirinluexternalnlu_router::RetrievedContext **)*((_QWORD *)this + 14);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= sirinluexternalnlu_router::RetrievedContext::hash_value(v5);
    }
    while (v2 != v3);
  }
  v6 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 11);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v8 ^= std::__string_hash<char>::operator()[abi:ne180100](v6);
      v6 += 24;
    }
    while (v6 != v7);
  }
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v11 ^= std::__string_hash<char>::operator()[abi:ne180100](v9);
      v9 += 24;
    }
    while (v9 != v10);
  }
  v12 = *((_QWORD *)this + 7);
  v13 = *((_QWORD *)this + 8);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v14 ^= std::__string_hash<char>::operator()[abi:ne180100](v12);
      v12 += 24;
    }
    while (v12 != v13);
  }
  v16 = *((_QWORD *)this + 1);
  v15 = *((_QWORD *)this + 2);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v17 ^= std::__string_hash<char>::operator()[abi:ne180100](v16);
      v16 += 24;
    }
    while (v16 != v15);
  }
  return v8 ^ v4 ^ v11 ^ v14 ^ v17;
}

void sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult(sirinluexternalnlu_router::NLRouterTurnProbingResult *this)
{
  sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAFA90;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::readFrom(sirinluexternalnlu_router::NLRouterTurnProbingResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF9A0;
        v19[1] = 0;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = (_QWORD *)*((_QWORD *)this + 2);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF8B0;
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::formatText(sirinluexternalnlu_router::NLRouterTurnProbingResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "nl_parse_response");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "pommes_response");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAFA90;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAFA90;
  return this;
}

sirinluexternalnlu_router::NLRouterTurnProbingResult *sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(sirinluexternalnlu_router::NLRouterTurnProbingResult *this, const sirinluexternalnlu_router::NLParseResponse **a2)
{
  sirinluexternalnlu_router::NLParseResponse **v4;
  sirinluexternalnlu_router::NLParseResponse *v5;
  sirinluexternalnlu_router::NLParseResponse *v6;
  sirinluexternalnlu_router::NLParseResponse *v7;
  sirinluexternalnlu_router::PommesResponse *v8;
  sirinluexternalnlu_router::PommesResponse *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7BAFA90;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternalnlu_router::NLParseResponse **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[1])
  {
    v5 = (sirinluexternalnlu_router::NLParseResponse *)operator new();
    v6 = sirinluexternalnlu_router::NLParseResponse::NLParseResponse(v5, a2[1]);
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(sirinluexternalnlu_router::NLParseResponse *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (sirinluexternalnlu_router::PommesResponse *)operator new();
    v9 = sirinluexternalnlu_router::PommesResponse::PommesResponse(v8, a2[2]);
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::operator=(uint64_t a1, const sirinluexternalnlu_router::NLParseResponse **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternalnlu_router::NLParseResponse **)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult((sirinluexternalnlu_router::NLRouterTurnProbingResult *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult((sirinluexternalnlu_router::NLRouterTurnProbingResult *)v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::NLRouterTurnProbingResult *a2, sirinluexternalnlu_router::NLRouterTurnProbingResult *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BAFA90;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternalnlu_router::NLRouterTurnProbingResult *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BAFA90;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult((sirinluexternalnlu_router::NLRouterTurnProbingResult *)&v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5
    || !PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(v4 + 8), *(uint64_t **)(v5 + 8), *(_QWORD *)(v5 + 16)))
  {
    return 0;
  }
LABEL_4:
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternalnlu_router::PommesResponse::operator==(*(_QWORD *)(a1 + 16), v7);
  return result;
}

unint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::hash_value(sirinluexternalnlu_router::NLRouterTurnProbingResult *this)
{
  uint64_t v2;
  sirinluexternal::UserParse **v3;
  sirinluexternal::UserParse **v4;
  uint64_t v5;
  sirinluexternal::UserParse *v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 1);
  if (!v2
    || (v3 = *(sirinluexternal::UserParse ***)(v2 + 8), v4 = *(sirinluexternal::UserParse ***)(v2 + 16), v3 == v4))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3++;
      v5 ^= sirinluexternal::UserParse::hash_value(v6);
    }
    while (v3 != v4);
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v8 = std::__string_hash<char>::operator()[abi:ne180100](v8);
  }
  else
  {
    v8 = 0;
  }
  return v8 ^ v5;
}

_QWORD *sirinluexternalnlu_router::NLRouterTurnProbingResult::makeNlParseResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF8B0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternalnlu_router::NLRouterTurnProbingResult::makePommesResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF9A0;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALCDM_PLANNERCdmPlannerResponseReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEvent *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
LABEL_26:
        v20 = *(SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEvent **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEvent);
    objc_msgSend(a1, "addTranscriptEvents:", v20);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEventReadFrom((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UsoEdgeLabel::~UsoEdgeLabel(sirinluexternal::UsoEdgeLabel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAFAE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAFAE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAFAE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoEdgeLabel::readFrom(sirinluexternal::UsoEdgeLabel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v30 = (_QWORD *)operator new();
        *v30 = &off_1E7BAF048;
        v30[1] = 0;
        v31 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v30 + 16))(v30, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v33)
        {
          v44 = 0;
          v45 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_69;
            }
            v46 = v32 + 1;
            v47 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v46;
            v37 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v32 = v46;
            v14 = v45++ > 8;
            if (v14)
            {
LABEL_61:
              LODWORD(v37) = 0;
              goto LABEL_69;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              break;
            v35 += 7;
            v32 = v38;
            v14 = v36++ > 8;
            if (v14)
              goto LABEL_61;
          }
        }
LABEL_69:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v21 == 1)
      {
        *((_BYTE *)this + 24) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v40 = 0;
          v41 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v42 = v22 + 1;
            v43 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v42;
            v27 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v22 = v42;
            v14 = v41++ > 8;
            if (v14)
            {
LABEL_54:
              LODWORD(v27) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_54;
          }
        }
LABEL_66:
        *((_DWORD *)this + 5) = v27;
      }
      else
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_25;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UsoEdgeLabel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::formatText(sirinluexternal::UsoEdgeLabel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "base_edge_label");
  v6 = *((_BYTE *)this + 24);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "enumeration");
    v6 = *((_BYTE *)this + 24);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(a2, "uso_element_id");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAFAE0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAFAE0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

sirinluexternal::UsoEdgeLabel *sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(sirinluexternal::UsoEdgeLabel *this, const sirinluexternal::UsoEdgeLabel *a2)
{
  char v4;
  int v5;
  int v6;
  sirinluexternal::UsoLabel *v7;
  sirinluexternal::UsoLabel *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E7BAFAE0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) == 0)
  {
    v4 = 1;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *((_DWORD *)a2 + 5);
  *((_BYTE *)this + 24) = 2;
  *((_DWORD *)this + 5) = v5;
  v4 = 3;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    v6 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 24) = v4;
    *((_DWORD *)this + 4) = v6;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
  {
    v7 = (sirinluexternal::UsoLabel *)operator new();
    v8 = sirinluexternal::UsoLabel::UsoLabel(v7, *((const sirinluexternal::UsoLabel **)a2 + 1));
    v9 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::operator=(uint64_t a1, const sirinluexternal::UsoEdgeLabel *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(sirinluexternal::UsoEdgeLabel *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const sirinluexternal::UsoEdgeLabel *)a1 != a2)
  {
    sirinluexternal::UsoEdgeLabel::UsoEdgeLabel((sirinluexternal::UsoEdgeLabel *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v7 = &off_1E7BAFAE0;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoEdgeLabel *a2, sirinluexternal::UsoEdgeLabel *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7BAFAE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternal::UsoEdgeLabel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v9[2] = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_1E7BAFAE0;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t sirinluexternal::UsoEdgeLabel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2)
  {
    if (v3)
      return sirinluexternal::UsoLabel::operator==(v2, v3);
  }
  return result;
}

unint64_t sirinluexternal::UsoEdgeLabel::hash_value(sirinluexternal::UsoEdgeLabel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 4);
      goto LABEL_6;
    }
  }
  v2 = 0;
LABEL_6:
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else
  {
    v4 = 0;
  }
  return v2 ^ v1 ^ v4;
}

_QWORD *sirinluexternal::UsoEdgeLabel::makeBaseEdgeLabel(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF048;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALNLU_ROUTERPrimitiveValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALNLU_ROUTERApp *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 17)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERApp);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALNLU_ROUTERAppReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UserAcknowledged::~UserAcknowledged(sirinluexternal::UserAcknowledged *this)
{
  sirinluexternal::UserAcknowledged::~UserAcknowledged(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAFB30;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserAcknowledged::readFrom(sirinluexternal::UserAcknowledged *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserAcknowledged::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserAcknowledged::formatText(sirinluexternal::UserAcknowledged *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "reference");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "system_dialog_act_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserAcknowledged::UserAcknowledged(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAFB30;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAFB30;
  return this;
}

sirinluexternal::UserAcknowledged *sirinluexternal::UserAcknowledged::UserAcknowledged(sirinluexternal::UserAcknowledged *this, const sirinluexternal::UserAcknowledged *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BAFB30;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserAcknowledged::operator=(uint64_t a1, const sirinluexternal::UserAcknowledged *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserAcknowledged *)a1 != a2)
  {
    sirinluexternal::UserAcknowledged::UserAcknowledged((sirinluexternal::UserAcknowledged *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserAcknowledged::~UserAcknowledged((sirinluexternal::UserAcknowledged *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserAcknowledged *a2, sirinluexternal::UserAcknowledged *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::UserAcknowledged::UserAcknowledged(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAFB30;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::UserAcknowledged::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserAcknowledged *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BAFB30;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserAcknowledged::~UserAcknowledged((sirinluexternal::UserAcknowledged *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserAcknowledged::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserAcknowledged::hash_value(sirinluexternal::UserAcknowledged *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserAcknowledged::makeSystemDialogActId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserAcknowledged::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalqueryrewrite::QRToken::~QRToken(sirinluinternalqueryrewrite::QRToken *this)
{
  sirinluinternalqueryrewrite::QRToken::~QRToken(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAFB80;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRToken::readFrom(sirinluinternalqueryrewrite::QRToken *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v21)
          goto LABEL_43;
        goto LABEL_44;
      case 2u:
        *((_BYTE *)this + 44) |= 4u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_67;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_53:
          LODWORD(v27) = 0;
          goto LABEL_67;
        }
        v44 = 0;
        v45 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v46 = v22 + 1;
            v47 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v46;
            v27 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              v22 = v46;
              v14 = v45++ > 8;
              if (v14)
                goto LABEL_53;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_67:
        *((_DWORD *)this + 9) = v27;
        goto LABEL_72;
      case 3u:
        *((_BYTE *)this + 44) |= 2u;
        v30 = *((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        v32 = *(_QWORD *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)a2 + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_71;
            v33 += 7;
            v30 = v36;
            v14 = v34++ > 8;
          }
          while (!v14);
LABEL_60:
          LODWORD(v35) = 0;
          goto LABEL_71;
        }
        v48 = 0;
        v49 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)a2 + 1);
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 1u;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_72;
      case 5u:
        v39 = (_QWORD *)operator new();
        v39[1] = 0;
        v39[2] = 0;
        *v39 = 0;
        v21 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v39;
        if (v21)
LABEL_43:
          std::default_delete<std::string>::operator()[abi:ne180100](v21);
LABEL_44:
        PB::Reader::read();
        goto LABEL_72;
      case 6u:
        *((_BYTE *)this + 44) |= 8u;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 >= *((_QWORD *)a2 + 2))
        {
          v43 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v41 = v40 + 1;
          v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
          *((_QWORD *)a2 + 1) = v41;
          v43 = v42 != 0;
        }
        *((_BYTE *)this + 40) = v43;
        goto LABEL_72;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v31 == v30)
      {
        LODWORD(v35) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_71;
      }
      v50 = v30 + 1;
      v51 = *(_BYTE *)(v32 + v30);
      *((_QWORD *)a2 + 1) = v50;
      v35 |= (unint64_t)(v51 & 0x7F) << v48;
      if ((v51 & 0x80) == 0)
        break;
      v48 += 7;
      v30 = v50;
      v14 = v49++ > 8;
      if (v14)
        goto LABEL_60;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v35) = 0;
LABEL_71:
    *((_DWORD *)this + 8) = v35;
LABEL_72:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_72;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRToken::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  if (*(_QWORD *)(this + 24))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_5:
      if ((v4 & 1) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(v3 + 44) & 2) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
LABEL_7:
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 44) & 8) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRToken::formatText(sirinluinternalqueryrewrite::QRToken *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "asr_confidence", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "end_index");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v6 = *((_BYTE *)this + 44);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "remove_space_after");
    v6 = *((_BYTE *)this + 44);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(a2, "start_index");
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternalqueryrewrite::QRToken::QRToken(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAFB80;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAFB80;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

sirinluinternalqueryrewrite::QRToken *sirinluinternalqueryrewrite::QRToken::QRToken(sirinluinternalqueryrewrite::QRToken *this, const sirinluinternalqueryrewrite::QRToken *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)this = &off_1E7BAFB80;
  *((_QWORD *)this + 2) = 0;
  v4 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  v10 = *((_BYTE *)a2 + 44);
  if ((v10 & 4) == 0)
  {
    if ((*((_BYTE *)a2 + 44) & 2) == 0)
      goto LABEL_9;
LABEL_15:
    v17 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 44) |= 2u;
    *((_DWORD *)this + 8) = v17;
    if ((*((_BYTE *)a2 + 44) & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v16 = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 44) |= 4u;
  *((_DWORD *)this + 9) = v16;
  v10 = *((_BYTE *)a2 + 44);
  if ((v10 & 2) != 0)
    goto LABEL_15;
LABEL_9:
  if ((v10 & 1) != 0)
  {
LABEL_10:
    v11 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 44) |= 1u;
    *((_QWORD *)this + 1) = v11;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 2))
  {
    v12 = (std::string *)operator new();
    v13 = v12;
    v14 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    v18 = *v4;
    *v4 = (uint64_t)v13;
    if (v18)
      std::default_delete<std::string>::operator()[abi:ne180100](v18);
  }
  if ((*((_BYTE *)a2 + 44) & 8) != 0)
  {
    v19 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 8u;
    *((_BYTE *)this + 40) = v19;
  }
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRToken::operator=(uint64_t a1, const sirinluinternalqueryrewrite::QRToken *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  int v13;

  if ((const sirinluinternalqueryrewrite::QRToken *)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRToken::QRToken((sirinluinternalqueryrewrite::QRToken *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v3;
    sirinluinternalqueryrewrite::QRToken::~QRToken((sirinluinternalqueryrewrite::QRToken *)&v8);
  }
  return a1;
}

double sirinluinternalqueryrewrite::swap(sirinluinternalqueryrewrite *this, sirinluinternalqueryrewrite::QRToken *a2, sirinluinternalqueryrewrite::QRToken *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v6;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRToken::QRToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E7BAFB80;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRToken::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRToken::QRToken((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v3;
    sirinluinternalqueryrewrite::QRToken::~QRToken((sirinluinternalqueryrewrite::QRToken *)&v8);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRToken::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  char v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 24);
  v5 = *(unsigned __int8 ***)(a2 + 24);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 24);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(_BYTE *)(a1 + 44);
  v12 = *(_BYTE *)(a2 + 44);
  if ((v11 & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v13 = *(unsigned __int8 **)(a1 + 16);
  v14 = *(unsigned __int8 **)(a2 + 16);
  if (v13)
  {
    if (!v14 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v13, v14))
      return 0;
  }
  else if (v14)
  {
    return 0;
  }
  result = (v12 & 8) == 0;
  if ((v11 & 8) == 0)
    return result;
  return (v12 & 8) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
}

unint64_t sirinluinternalqueryrewrite::QRToken::hash_value(sirinluinternalqueryrewrite::QRToken *this)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_BYTE *)this + 44);
  if ((v4 & 4) != 0)
  {
    v5 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 44) & 2) != 0)
    {
LABEL_6:
      v6 = *((unsigned int *)this + 8);
      if ((*((_BYTE *)this + 44) & 1) != 0)
        goto LABEL_7;
LABEL_12:
      v7 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_12;
LABEL_7:
  if (*((double *)this + 1) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 1);
LABEL_13:
  v8 = *((_QWORD *)this + 2);
  if (v8)
    v8 = std::__string_hash<char>::operator()[abi:ne180100](v8);
  if ((v4 & 8) != 0)
    v9 = *((unsigned __int8 *)this + 40);
  else
    v9 = 0;
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9;
}

uint64_t SIRINLUINTERNALSNLCSNLCParserResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v27 = 0;
        }
        *(_DWORD *)(a1 + 12) = v27;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F5B700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F5B75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F5B7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F5B830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SIRINLUINTERNALContextRuleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALTurnContext *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnContext);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALTurnContextReadFrom((uint64_t)v17, a2))
          goto LABEL_26;
        goto LABEL_51;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v17);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_49:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_51:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_44:
        *(_BYTE *)(a1 + 32) = v21 != 0;
        goto LABEL_49;
      case 4u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_48:
        *(_DWORD *)(a1 + 16) = v27;
        goto LABEL_49;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

BOOL SIRINLUEXTERNALUserAcknowledgedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALPSCPSCServiceRequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_41;
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2))
          goto LABEL_45;
        goto LABEL_41;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend(a1, "addMatchingSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALLegacyNLContext);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALLegacyNLContextReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_42;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4AssetVersionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersion *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersion);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALSNLP_INTERMEDIATEITFMExecutedHandcraftedRulesReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRulesReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalqueryrewrite::QRInteraction::~QRInteraction(sirinluinternalqueryrewrite::QRInteraction *this)
{
  sirinluinternalqueryrewrite::QRInteraction::~QRInteraction(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BAFBD0;
  v8 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  int64x2_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  int64x2_t *v63;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)&this[2].i64[1];
  v9 = this + 2;
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          v23 = v22;
          *(_QWORD *)v22 = &off_1E7BAE868;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 48) = 0u;
          *(_OWORD *)(v22 + 64) = 0u;
          *(_DWORD *)(v22 + 80) = 0;
          v25 = (uint64_t *)this[1].i64[1];
          v24 = this[2].u64[0];
          if ((unint64_t)v25 >= v24)
          {
            v46 = this[1].i64[0];
            v47 = ((uint64_t)v25 - v46) >> 3;
            if ((unint64_t)(v47 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v48 = v24 - v46;
            v49 = v48 >> 2;
            if (v48 >> 2 <= (unint64_t)(v47 + 1))
              v49 = v47 + 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            v63 = v9;
            if (v50)
              v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v50);
            else
              v51 = 0;
            v52 = (uint64_t *)(v50 + 8 * v47);
            v53 = v50 + 8 * v51;
            v62 = v53;
            *v52 = v23;
            v26 = v52 + 1;
            v61.i64[1] = (uint64_t)(v52 + 1);
            v55 = (_QWORD *)this[1].i64[0];
            v54 = (_QWORD *)this[1].i64[1];
            if (v54 == v55)
            {
              v57 = vdupq_n_s64((unint64_t)v54);
            }
            else
            {
              do
              {
                v56 = *--v54;
                *v54 = 0;
                *--v52 = v56;
              }
              while (v54 != v55);
              v57 = this[1];
              v26 = (_QWORD *)v61.i64[1];
              v53 = v62;
            }
            this[1].i64[0] = (uint64_t)v52;
            this[1].i64[1] = (uint64_t)v26;
            v61 = v57;
            v58 = this[2].i64[0];
            this[2].i64[0] = v53;
            v62 = v58;
            v60 = v57.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v60);
          }
          else
          {
            *v25 = v22;
            v26 = v25 + 1;
          }
          this[1].i64[1] = (uint64_t)v26;
          v41 = *(v26 - 1);
          goto LABEL_63;
        case 2u:
          PB::PtrVector<sirinluinternal::Token>::emplace_back<>(v8);
          v41 = *(_QWORD *)(this[3].i64[0] - 8);
LABEL_63:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v41 + 16))(v41, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 3u:
          v35 = (_QWORD *)operator new();
          v35[1] = 0;
          v35[2] = 0;
          *v35 = 0;
          v36 = this->i64[1];
          this->i64[1] = (uint64_t)v35;
          if (v36)
            std::default_delete<std::string>::operator()[abi:ne180100](v36);
          PB::Reader::read();
          goto LABEL_70;
        case 4u:
          this[4].i8[12] |= 2u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 >= *((_QWORD *)a2 + 2))
          {
            v40 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
            *((_QWORD *)a2 + 1) = v38;
            v40 = v39 != 0;
          }
          this[4].i8[8] = v40;
          goto LABEL_70;
        case 5u:
          this[4].i8[12] |= 1u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_69;
              v30 += 7;
              v27 = v33;
              v16 = v31++ > 8;
            }
            while (!v16);
LABEL_45:
            v32 = 0;
            goto LABEL_69;
          }
          v42 = 0;
          v43 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v44 = v27 + 1;
              v45 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v44;
              v32 |= (unint64_t)(v45 & 0x7F) << v42;
              if (v45 < 0)
              {
                v42 += 7;
                v27 = v44;
                v16 = v43++ > 8;
                if (v16)
                  goto LABEL_45;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v32 = 0;
            }
            break;
          }
LABEL_69:
          this[4].i64[0] = v32;
          goto LABEL_70;
        default:
          goto LABEL_20;
      }
      goto LABEL_70;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_70:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1C1F5F270(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  char v10;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(const PB::Base ***)(v3 + 40);
  v8 = *(const PB::Base ***)(v3 + 48);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  v10 = *(_BYTE *)(v3 + 76);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    v10 = *(_BYTE *)(v3 + 76);
  }
  if ((v10 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::formatText(sirinluinternalqueryrewrite::QRInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "original_utterances");
  }
  v8 = (uint64_t *)*((_QWORD *)this + 5);
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "siri_response");
  }
  v11 = *((_BYTE *)this + 76);
  if ((v11 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "start_timestamp");
    v11 = *((_BYTE *)this + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(a2, "tap2edit");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalqueryrewrite::QRInteraction::QRInteraction(sirinluinternalqueryrewrite::QRInteraction *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFBD0;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFBD0;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

sirinluinternalqueryrewrite::QRInteraction *sirinluinternalqueryrewrite::QRInteraction::QRInteraction(sirinluinternalqueryrewrite::QRInteraction *this, const sirinluinternalqueryrewrite::QRInteraction *a2)
{
  sirinluinternal::Token ***v4;
  const sirinluexternal::UUID ***v5;
  const sirinluexternal::UUID ***i;
  const sirinluexternal::UUID **v7;
  sirinluinternalqueryrewrite::QRUtterance *v8;
  unint64_t v9;
  sirinluinternalqueryrewrite::QRUtterance **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  sirinluinternalqueryrewrite::QRUtterance **v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  sirinluinternalqueryrewrite::QRUtterance *v22;
  int64x2_t v23;
  unint64_t v24;
  const sirinluinternal::Token **v25;
  const sirinluinternal::Token **v26;
  std::string *v27;
  std::string *v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  int64x2_t v38;
  unint64_t v39;
  char *v40;

  *(_QWORD *)this = &off_1E7BAFBD0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v36 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = (sirinluinternal::Token ***)((char *)this + 40);
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  for (i = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 3); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (sirinluinternalqueryrewrite::QRUtterance *)operator new();
    sirinluinternalqueryrewrite::QRUtterance::QRUtterance(v8, v7);
    v10 = (sirinluinternalqueryrewrite::QRUtterance **)*((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *((_QWORD *)this + 2);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v40 = (char *)this + 32;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v16);
      else
        v17 = 0;
      v18 = (sirinluinternalqueryrewrite::QRUtterance **)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      v39 = v19;
      *v18 = v8;
      v11 = v18 + 1;
      v38.i64[1] = (uint64_t)(v18 + 1);
      v21 = (_QWORD *)*((_QWORD *)this + 2);
      v20 = (_QWORD *)*((_QWORD *)this + 3);
      if (v20 == v21)
      {
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          v22 = (sirinluinternalqueryrewrite::QRUtterance *)*--v20;
          *v20 = 0;
          *--v18 = v22;
        }
        while (v20 != v21);
        v23 = *((int64x2_t *)this + 1);
        v11 = (_QWORD *)v38.i64[1];
        v19 = v39;
      }
      *((_QWORD *)this + 2) = v18;
      *((_QWORD *)this + 3) = v11;
      v38 = v23;
      v24 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v19;
      v39 = v24;
      v37 = v23.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 3) = v11;
  }
  v25 = (const sirinluinternal::Token **)*((_QWORD *)a2 + 5);
  v26 = (const sirinluinternal::Token **)*((_QWORD *)a2 + 6);
  while (v25 != v26)
    PB::PtrVector<sirinluinternal::Token>::emplace_back<sirinluinternal::Token const&>(v4, *v25++);
  if (*((_QWORD *)a2 + 1))
  {
    v27 = (std::string *)operator new();
    v28 = v27;
    v29 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
    }
    else
    {
      v30 = *v29;
      v27->__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 2);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    v31 = *v36;
    *v36 = (uint64_t)v28;
    if (v31)
      std::default_delete<std::string>::operator()[abi:ne180100](v31);
  }
  v32 = *((_BYTE *)a2 + 76);
  if ((v32 & 2) != 0)
  {
    v33 = *((_BYTE *)a2 + 72);
    *((_BYTE *)this + 76) |= 2u;
    *((_BYTE *)this + 72) = v33;
    v32 = *((_BYTE *)a2 + 76);
  }
  if ((v32 & 1) != 0)
  {
    v34 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 76) |= 1u;
    *((_QWORD *)this + 8) = v34;
  }
  return this;
}

void sub_1C1F5F780(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::operator=(uint64_t a1, const sirinluinternalqueryrewrite::QRInteraction *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if ((const sirinluinternalqueryrewrite::QRInteraction *)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRInteraction::QRInteraction((sirinluinternalqueryrewrite::QRInteraction *)&v11, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = v16;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v9;
    v15 = v4;
    v16 = v5;
    sirinluinternalqueryrewrite::QRInteraction::~QRInteraction((sirinluinternalqueryrewrite::QRInteraction *)&v11);
  }
  return a1;
}

uint64_t sirinluinternalqueryrewrite::swap(uint64_t this, sirinluinternalqueryrewrite::QRInteraction *a2, sirinluinternalqueryrewrite::QRInteraction *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *(_QWORD *)(this + 56);
  v10 = *(_QWORD *)(this + 64);
  v11 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(this + 64) = v11;
  *((_QWORD *)a2 + 7) = v9;
  v12 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  v13 = *(_BYTE *)(this + 72);
  *(_BYTE *)(this + 72) = *((_BYTE *)a2 + 72);
  *((_QWORD *)a2 + 1) = v12;
  *((_BYTE *)a2 + 72) = v13;
  *((_QWORD *)a2 + 8) = v10;
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::QRInteraction(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E7BAFBD0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  v5 = a1 + 16;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = (_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v9 = *(void **)(a1 + 16);
    if (v8 != v6)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v6);
      v9 = *(void **)v5;
    }
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v9);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100](v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRInteraction::QRInteraction((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = v16;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v9;
    v15 = v4;
    v16 = v5;
    sirinluinternalqueryrewrite::QRInteraction::~QRInteraction((sirinluinternalqueryrewrite::QRInteraction *)&v11);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRInteraction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;

  v3 = *(uint64_t **)(a1 + 16);
  v2 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a2 + 16);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    result = sirinluinternalqueryrewrite::QRUtterance::operator==(*v3, *v4);
    if (!result)
      return result;
    ++v3;
    ++v4;
  }
  result = PB::PtrVector<sirinluinternal::Token>::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(uint64_t **)(a2 + 40), *(_QWORD *)(a2 + 48));
  if (result)
  {
    v8 = *(unsigned __int8 **)(a1 + 8);
    v9 = *(unsigned __int8 ***)(a2 + 8);
    if (v8)
    {
      if (!v9)
        return 0;
      v10 = v8[23];
      if ((v10 & 0x80u) == 0)
        v11 = (unsigned __int8 *)v8[23];
      else
        v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = v9[1];
      if (v11 != v12)
        return 0;
      if (v13 >= 0)
        v14 = *(unsigned __int8 **)(a2 + 8);
      else
        v14 = *v9;
      if ((v10 & 0x80) == 0)
      {
        if (v8[23])
        {
          while (*v8 == *v14)
          {
            ++v8;
            ++v14;
            if (!--v10)
              goto LABEL_23;
          }
          return 0;
        }
LABEL_23:
        if ((*(_BYTE *)(a1 + 76) & 2) != 0)
        {
          if ((*(_BYTE *)(a2 + 76) & 2) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72))
            return 0;
        }
        else if ((*(_BYTE *)(a2 + 76) & 2) != 0)
        {
          return 0;
        }
        result = (*(_BYTE *)(a2 + 76) & 1) == 0;
        if ((*(_BYTE *)(a1 + 76) & 1) == 0)
          return result;
        return (*(_BYTE *)(a2 + 76) & 1) != 0 && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
      }
      if (!memcmp(*(const void **)v8, v14, *((_QWORD *)v8 + 1)))
        goto LABEL_23;
    }
    else if (!v9)
    {
      goto LABEL_23;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluinternalqueryrewrite::QRInteraction::hash_value(sirinluinternalqueryrewrite::QRInteraction *this)
{
  sirinluinternalqueryrewrite::QRUtterance **v2;
  sirinluinternalqueryrewrite::QRUtterance **v3;
  uint64_t v4;
  sirinluinternalqueryrewrite::QRUtterance *v5;
  sirinluinternal::Token **v6;
  sirinluinternal::Token **v7;
  uint64_t v8;
  sirinluinternal::Token *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (sirinluinternalqueryrewrite::QRUtterance **)*((_QWORD *)this + 2);
  v3 = (sirinluinternalqueryrewrite::QRUtterance **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= sirinluinternalqueryrewrite::QRUtterance::hash_value(v5);
    }
    while (v2 != v3);
  }
  v6 = (sirinluinternal::Token **)*((_QWORD *)this + 5);
  v7 = (sirinluinternal::Token **)*((_QWORD *)this + 6);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluinternal::Token::hash_value(v9);
    }
    while (v6 != v7);
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
    v10 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  if ((*((_BYTE *)this + 76) & 2) != 0)
  {
    v11 = *((unsigned __int8 *)this + 72);
    if ((*((_BYTE *)this + 76) & 1) != 0)
      goto LABEL_15;
LABEL_17:
    v12 = 0;
    return v8 ^ v4 ^ v10 ^ v11 ^ v12;
  }
  v11 = 0;
  if ((*((_BYTE *)this + 76) & 1) == 0)
    goto LABEL_17;
LABEL_15:
  v12 = *((_QWORD *)this + 8);
  return v8 ^ v4 ^ v10 ^ v11 ^ v12;
}

BOOL SIRINLUEXTERNALUserWantedToUndoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALCATICATIResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserParse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_msgSend(a1, "addHypotheses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this)
{
  sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAFC20;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  PB::Base::~Base(this);
}

BOOL sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::readFrom(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (uint64_t *)((char *)this + 8);
    v8 = (uint64_t *)((char *)this + 16);
    v9 = (uint64_t *)((char *)this + 24);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          v16 = v18++ > 8;
          if (v16)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_27;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v13 >> 3;
      if ((v13 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        v25 = (_QWORD *)operator new();
        v25[1] = 0;
        v25[2] = 0;
        *v25 = 0;
        v23 = *v8;
        *v8 = (uint64_t)v25;
        if (!v23)
          goto LABEL_31;
        goto LABEL_30;
      }
      if ((_DWORD)v21 == 1)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *v9;
        *v9 = (uint64_t)v22;
        if (!v23)
          goto LABEL_31;
LABEL_30:
        std::default_delete<std::string>::operator()[abi:ne180100](v23);
LABEL_31:
        PB::Reader::read();
        goto LABEL_32;
      }
LABEL_27:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return 0;
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v24 = (_QWORD *)operator new();
    v24[1] = 0;
    v24[2] = 0;
    *v24 = 0;
    v23 = *v7;
    *v7 = (uint64_t)v24;
    if (v23)
      goto LABEL_30;
    goto LABEL_31;
  }
  return v4 == 0;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if (*(_QWORD *)(this + 24))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::formatText(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(_QWORD *this)
{
  *this = &off_1E7BAFC20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAFC20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this, const sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E7BAFC20;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v15 = (std::string *)operator new();
    v16 = v15;
    v17 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
    }
    else
    {
      v18 = *v17;
      v15->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
    }
    v19 = *v4;
    *v4 = (uint64_t)v16;
    if (v19)
      std::default_delete<std::string>::operator()[abi:ne180100](v19);
  }
  return this;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::operator=(uint64_t a1, const sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)a1 != a2)
  {
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier((sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier((sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)&v6);
  }
  return a1;
}

_QWORD *sirinluexternalcdm_planner::swap(_QWORD *this, sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a2, sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

_QWORD *sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E7BAFC20;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[3];
  a2[3] = 0;
  v6 = a1[3];
  a1[3] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = a2[2];
  a2[2] = 0;
  v8 = a1[2];
  a1[2] = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = a2[1];
  a2[1] = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  return a1;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier((sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)&v6);
  }
  return a1;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;

  v4 = (unsigned __int8 *)a1[3];
  v5 = (unsigned __int8 **)a2[3];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[3];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  v12 = (unsigned __int8 *)a1[2];
  v13 = (unsigned __int8 **)a2[2];
  if (v12)
  {
    if (!v13)
      return 0;
    v14 = v12[23];
    if ((v14 & 0x80u) == 0)
      v15 = (unsigned __int8 *)v12[23];
    else
      v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
    v17 = (char)v16;
    if ((char)v16 < 0)
      v16 = v13[1];
    if (v15 != v16)
      return 0;
    if (v17 >= 0)
      v18 = (unsigned __int8 *)a2[2];
    else
      v18 = *v13;
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1)))
        return 0;
    }
    else if (v12[23])
    {
      while (*v12 == *v18)
      {
        ++v12;
        ++v18;
        if (!--v14)
          goto LABEL_38;
      }
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
LABEL_38:
  v19 = (unsigned __int8 *)a1[1];
  v20 = (unsigned __int8 **)a2[1];
  result = v20 == 0;
  if (!v19)
    return result;
  if (!v20)
    return 0;
  v21 = v19[23];
  if ((v21 & 0x80u) == 0)
    v22 = (unsigned __int8 *)v19[23];
  else
    v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  v23 = (unsigned __int8 *)*((unsigned __int8 *)v20 + 23);
  v24 = (char)v23;
  if ((char)v23 < 0)
    v23 = v20[1];
  if (v22 != v23)
    return 0;
  if (v24 >= 0)
    v25 = (unsigned __int8 *)a2[1];
  else
    v25 = *v20;
  if ((v21 & 0x80) != 0)
    return !memcmp(*(const void **)v19, v25, *((_QWORD *)v19 + 1));
  if (!v19[23])
    return 1;
  v26 = v21 - 1;
  do
  {
    v28 = *v19++;
    v27 = v28;
    v30 = *v25++;
    v29 = v30;
    v32 = v26-- != 0;
    result = v27 == v29;
  }
  while (v27 == v29 && v32);
  return result;
}

unint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::hash_value(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  return v5 ^ v3 ^ v6;
}

void sirinluexternalnlu_router::TurnSummary::~TurnSummary(sirinluexternalnlu_router::TurnSummary *this)
{
  sirinluexternalnlu_router::TurnSummary::~TurnSummary(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAFC70;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::TurnSummary::readFrom(sirinluexternalnlu_router::TurnSummary *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 1u;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
        {
          v32 = 0;
          v33 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v34 = v23 + 1;
            v35 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v34;
            v28 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v23 = v34;
            v14 = v33++ > 8;
            if (v14)
            {
LABEL_44:
              LODWORD(v28) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v28) = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              break;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
            if (v14)
              goto LABEL_44;
          }
        }
LABEL_48:
        *((_DWORD *)this + 6) = v28;
        goto LABEL_49;
      }
      if ((_DWORD)v19 != 2)
        break;
      v31 = (_QWORD *)operator new();
      v31[1] = 0;
      v31[2] = 0;
      *v31 = 0;
      v21 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v31;
      if (v21)
        goto LABEL_36;
LABEL_37:
      PB::Reader::read();
LABEL_49:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if ((_DWORD)v19 != 1)
    {
LABEL_26:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_49;
    }
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v20[2] = 0;
    *v20 = 0;
    v21 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v20;
    if (!v21)
      goto LABEL_37;
LABEL_36:
    std::default_delete<std::string>::operator()[abi:ne180100](v21);
    goto LABEL_37;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::TurnSummary::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternalnlu_router::TurnSummary::formatText(sirinluexternalnlu_router::TurnSummary *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 28) & 1) != 0)
    PB::TextFormatter::format(a2, "execution_source");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::TurnSummary::TurnSummary(_QWORD *this)
{
  *this = &off_1E7BAFC70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAFC70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternalnlu_router::TurnSummary *sirinluexternalnlu_router::TurnSummary::TurnSummary(sirinluexternalnlu_router::TurnSummary *this, const sirinluexternalnlu_router::TurnSummary *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  *(_QWORD *)this = &off_1E7BAFC70;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *v4;
    *v4 = (uint64_t)v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
    v15 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) |= 1u;
    *((_DWORD *)this + 6) = v15;
  }
  return this;
}

uint64_t sirinluexternalnlu_router::TurnSummary::operator=(uint64_t a1, const sirinluexternalnlu_router::TurnSummary *a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if ((const sirinluexternalnlu_router::TurnSummary *)a1 != a2)
  {
    sirinluexternalnlu_router::TurnSummary::TurnSummary((sirinluexternalnlu_router::TurnSummary *)&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    v7 = v3;
    sirinluexternalnlu_router::TurnSummary::~TurnSummary((sirinluexternalnlu_router::TurnSummary *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::TurnSummary *a2, sirinluexternalnlu_router::TurnSummary *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  return this;
}

uint64_t sirinluexternalnlu_router::TurnSummary::TurnSummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E7BAFC70;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t sirinluexternalnlu_router::TurnSummary::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::TurnSummary::TurnSummary((uint64_t)&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    v7 = v3;
    sirinluexternalnlu_router::TurnSummary::~TurnSummary((sirinluexternalnlu_router::TurnSummary *)&v5);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::TurnSummary::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(unsigned __int8 **)(a1 + 16);
  v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a2 + 16);
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  result = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

unint64_t sirinluexternalnlu_router::TurnSummary::hash_value(sirinluexternalnlu_router::TurnSummary *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  if ((*((_BYTE *)this + 28) & 1) != 0)
    v5 = *((int *)this + 6);
  else
    v5 = 0;
  return v4 ^ v3 ^ v5;
}

void sirinluexternal::AsrHypothesis::~AsrHypothesis(sirinluexternal::AsrHypothesis *this)
{
  sirinluexternal::AsrHypothesis::~AsrHypothesis(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7BAFCC0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 7);
    v5 = (void *)*((_QWORD *)this + 6);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v3;
    operator delete(v5);
  }
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (v9)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 2);
    v11 = (void *)*((_QWORD *)this + 1);
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v9;
    operator delete(v11);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::AsrHypothesis::readFrom(sirinluexternal::AsrHypothesis *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  char *v9;
  void (**v10)(sirinluexternal::UUID *__hidden);
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  void (**v25)(sirinluexternal::UUID *__hidden);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int64x2_t v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64x2_t v66;
  unint64_t v67;
  char *v68;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 64;
  v9 = (char *)this + 24;
  v10 = &off_1E7BB0CB8;
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          v23 = (_QWORD *)operator new();
          *v23 = v10;
          v23[3] = 0;
          v24 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v23;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v23 = (_QWORD *)*((_QWORD *)this + 4);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v23 + 16))(v23, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          goto LABEL_73;
        case 2u:
          v36 = (_QWORD *)operator new();
          v36[1] = 0;
          v36[2] = 0;
          *v36 = 0;
          v37 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v36;
          if (v37)
            std::default_delete<std::string>::operator()[abi:ne180100](v37);
          PB::Reader::read();
          goto LABEL_73;
        case 3u:
          *((_BYTE *)this + 80) |= 1u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v31);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_73;
        case 4u:
          v25 = v10;
          v32 = operator new();
          v33 = v32;
          *(_QWORD *)v32 = &off_1E7BB1FC8;
          *(_DWORD *)(v32 + 60) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = 0;
          *(_QWORD *)(v32 + 16) = 0;
          v35 = (uint64_t *)*((_QWORD *)this + 2);
          v34 = *((_QWORD *)this + 3);
          if ((unint64_t)v35 >= v34)
          {
            v44 = *((_QWORD *)this + 1);
            v45 = ((uint64_t)v35 - v44) >> 3;
            if ((unint64_t)(v45 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v46 = v34 - v44;
            v47 = v46 >> 2;
            if (v46 >> 2 <= (unint64_t)(v45 + 1))
              v47 = v45 + 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            v68 = v9;
            if (v48)
              v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v48);
            else
              v49 = 0;
            v56 = (uint64_t *)(v48 + 8 * v45);
            v57 = v48 + 8 * v49;
            v67 = v57;
            *v56 = v33;
            v30 = v56 + 1;
            v66.i64[1] = (uint64_t)(v56 + 1);
            v59 = (_QWORD *)*((_QWORD *)this + 1);
            v58 = (_QWORD *)*((_QWORD *)this + 2);
            if (v58 == v59)
            {
              v61 = vdupq_n_s64((unint64_t)v58);
            }
            else
            {
              do
              {
                v60 = *--v58;
                *v58 = 0;
                *--v56 = v60;
              }
              while (v58 != v59);
              v61 = *(int64x2_t *)((char *)this + 8);
              v30 = (_QWORD *)v66.i64[1];
              v57 = v67;
            }
            *((_QWORD *)this + 1) = v56;
            *((_QWORD *)this + 2) = v30;
            v66 = v61;
            v63 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v57;
            v67 = v63;
            v65 = v61.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v65);
          }
          else
          {
            *v35 = v32;
            v30 = v35 + 1;
          }
          *((_QWORD *)this + 2) = v30;
          goto LABEL_70;
        case 5u:
          v25 = v10;
          v26 = operator new();
          v27 = v26;
          *(_QWORD *)v26 = &off_1E7BB08A8;
          *(_QWORD *)(v26 + 8) = 0;
          *(_DWORD *)(v26 + 24) = 0;
          v29 = (uint64_t *)*((_QWORD *)this + 7);
          v28 = *((_QWORD *)this + 8);
          if ((unint64_t)v29 >= v28)
          {
            v38 = *((_QWORD *)this + 6);
            v39 = ((uint64_t)v29 - v38) >> 3;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v40 = v28 - v38;
            v41 = v40 >> 2;
            if (v40 >> 2 <= (unint64_t)(v39 + 1))
              v41 = v39 + 1;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            v68 = v8;
            if (v42)
              v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v42);
            else
              v43 = 0;
            v50 = (uint64_t *)(v42 + 8 * v39);
            v51 = v42 + 8 * v43;
            v67 = v51;
            *v50 = v27;
            v30 = v50 + 1;
            v66.i64[1] = (uint64_t)(v50 + 1);
            v53 = (_QWORD *)*((_QWORD *)this + 6);
            v52 = (_QWORD *)*((_QWORD *)this + 7);
            if (v52 == v53)
            {
              v55 = vdupq_n_s64((unint64_t)v52);
            }
            else
            {
              do
              {
                v54 = *--v52;
                *v52 = 0;
                *--v50 = v54;
              }
              while (v52 != v53);
              v55 = *((int64x2_t *)this + 3);
              v30 = (_QWORD *)v66.i64[1];
              v51 = v67;
            }
            *((_QWORD *)this + 6) = v50;
            *((_QWORD *)this + 7) = v30;
            v66 = v55;
            v62 = *((_QWORD *)this + 8);
            *((_QWORD *)this + 8) = v51;
            v67 = v62;
            v65 = v55.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v65);
          }
          else
          {
            *v29 = v26;
            v30 = v29 + 1;
          }
          *((_QWORD *)this + 7) = v30;
LABEL_70:
          v64 = *(v30 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v64 + 16))(v64, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v10 = v25;
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_73;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_73:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1C1F62364(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::AsrHypothesis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 72))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 80) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v5 = *(const PB::Base ***)(v3 + 8);
  v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v9 = *(const PB::Base ***)(v3 + 48);
  v8 = *(const PB::Base ***)(v3 + 56);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  return this;
}

uint64_t sirinluexternal::AsrHypothesis::formatText(sirinluexternal::AsrHypothesis *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "asr_tokens");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "id_a");
  if ((*((_BYTE *)this + 80) & 1) != 0)
    PB::TextFormatter::format(a2, "probability", *((double *)this + 5));
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  v10 = (uint64_t *)*((_QWORD *)this + 7);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "rewritten_utterances");
  }
  if (*((_QWORD *)this + 9))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::AsrHypothesis::AsrHypothesis(sirinluexternal::AsrHypothesis *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFCC0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFCC0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

sirinluexternal::AsrHypothesis *sirinluexternal::AsrHypothesis::AsrHypothesis(sirinluexternal::AsrHypothesis *this, const sirinluexternal::UUID **a2)
{
  int64x2_t *v4;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  const sirinluexternal::UUID *v11;
  __int128 v12;
  uint64_t v13;
  const sirinluexternal::UUID *v14;
  const sirinluexternal::AsrTokenInformation **v15;
  const sirinluexternal::AsrTokenInformation **i;
  const sirinluexternal::AsrTokenInformation *v17;
  sirinluexternal::AsrTokenInformation *v18;
  unint64_t v19;
  sirinluexternal::AsrTokenInformation **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  sirinluexternal::AsrTokenInformation **v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  sirinluexternal::AsrTokenInformation *v31;
  int64x2_t v32;
  unint64_t v33;
  const siricommon::StringValue ***v34;
  const siricommon::StringValue ***j;
  const siricommon::StringValue **v36;
  sirinluexternal::RewrittenUtterance *v37;
  unint64_t v38;
  sirinluexternal::RewrittenUtterance **v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  sirinluexternal::RewrittenUtterance **v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  sirinluexternal::RewrittenUtterance *v50;
  int64x2_t v51;
  unint64_t v52;
  uint64_t v54;
  int64x2_t v55;
  unint64_t v56;
  char *v57;

  *(_QWORD *)this = &off_1E7BAFCC0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *((_OWORD *)this + 3) = 0u;
  v5 = (int64x2_t *)((char *)this + 48);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  if (a2[4])
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, a2[4]);
    v8 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (a2[9])
  {
    v9 = (std::string *)operator new();
    v10 = v9;
    v11 = a2[9];
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    v13 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v10;
    if (v13)
      std::default_delete<std::string>::operator()[abi:ne180100](v13);
  }
  if (((_BYTE)a2[10] & 1) != 0)
  {
    v14 = a2[5];
    *((_BYTE *)this + 80) |= 1u;
    *((_QWORD *)this + 5) = v14;
  }
  v15 = (const sirinluexternal::AsrTokenInformation **)a2[1];
  for (i = (const sirinluexternal::AsrTokenInformation **)a2[2]; v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (sirinluexternal::AsrTokenInformation *)operator new();
    sirinluexternal::AsrTokenInformation::AsrTokenInformation(v18, v17);
    v20 = (sirinluexternal::AsrTokenInformation **)*((_QWORD *)this + 2);
    v19 = *((_QWORD *)this + 3);
    if ((unint64_t)v20 >= v19)
    {
      v22 = ((uint64_t)v20 - v4->i64[0]) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v23 = v19 - v4->i64[0];
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      v57 = (char *)this + 24;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v25);
      else
        v26 = 0;
      v27 = (sirinluexternal::AsrTokenInformation **)(v25 + 8 * v22);
      v28 = v25 + 8 * v26;
      v56 = v28;
      *v27 = v18;
      v21 = v27 + 1;
      v55.i64[1] = (uint64_t)(v27 + 1);
      v30 = (_QWORD *)*((_QWORD *)this + 1);
      v29 = (_QWORD *)*((_QWORD *)this + 2);
      if (v29 == v30)
      {
        v32 = vdupq_n_s64((unint64_t)v29);
      }
      else
      {
        do
        {
          v31 = (sirinluexternal::AsrTokenInformation *)*--v29;
          *v29 = 0;
          *--v27 = v31;
        }
        while (v29 != v30);
        v32 = *v4;
        v21 = (_QWORD *)v55.i64[1];
        v28 = v56;
      }
      *((_QWORD *)this + 1) = v27;
      *((_QWORD *)this + 2) = v21;
      v55 = v32;
      v33 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v28;
      v56 = v33;
      v54 = v32.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v54);
    }
    else
    {
      *v20 = v18;
      v21 = v20 + 1;
    }
    *((_QWORD *)this + 2) = v21;
  }
  v34 = (const siricommon::StringValue ***)a2[6];
  for (j = (const siricommon::StringValue ***)a2[7]; v34 != j; ++v34)
  {
    v36 = *v34;
    v37 = (sirinluexternal::RewrittenUtterance *)operator new();
    sirinluexternal::RewrittenUtterance::RewrittenUtterance(v37, v36);
    v39 = (sirinluexternal::RewrittenUtterance **)*((_QWORD *)this + 7);
    v38 = *((_QWORD *)this + 8);
    if ((unint64_t)v39 >= v38)
    {
      v41 = ((uint64_t)v39 - v5->i64[0]) >> 3;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v42 = v38 - v5->i64[0];
      v43 = v42 >> 2;
      if (v42 >> 2 <= (unint64_t)(v41 + 1))
        v43 = v41 + 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      v57 = (char *)this + 64;
      if (v44)
        v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v44);
      else
        v45 = 0;
      v46 = (sirinluexternal::RewrittenUtterance **)(v44 + 8 * v41);
      v47 = v44 + 8 * v45;
      v56 = v47;
      *v46 = v37;
      v40 = v46 + 1;
      v55.i64[1] = (uint64_t)(v46 + 1);
      v49 = (_QWORD *)*((_QWORD *)this + 6);
      v48 = (_QWORD *)*((_QWORD *)this + 7);
      if (v48 == v49)
      {
        v51 = vdupq_n_s64((unint64_t)v48);
      }
      else
      {
        do
        {
          v50 = (sirinluexternal::RewrittenUtterance *)*--v48;
          *v48 = 0;
          *--v46 = v50;
        }
        while (v48 != v49);
        v51 = *v5;
        v40 = (_QWORD *)v55.i64[1];
        v47 = v56;
      }
      *((_QWORD *)this + 6) = v46;
      *((_QWORD *)this + 7) = v40;
      v55 = v51;
      v52 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v47;
      v56 = v52;
      v54 = v51.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v54);
    }
    else
    {
      *v39 = v37;
      v40 = v39 + 1;
    }
    *((_QWORD *)this + 7) = v40;
  }
  return this;
}

void sub_1C1F629C4(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternal::AsrHypothesis::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluexternal::AsrHypothesis::AsrHypothesis((sirinluexternal::AsrHypothesis *)v11, a2);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v12 = v4;
    v13 = v5;
    v6 = v16;
    v7 = *(_OWORD *)(a1 + 48);
    v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v6;
    v9 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    v17 = v9;
    v15 = v7;
    v16 = v8;
    sirinluexternal::AsrHypothesis::~AsrHypothesis((sirinluexternal::AsrHypothesis *)v11);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::AsrHypothesis *a2, sirinluexternal::AsrHypothesis *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  return result;
}

uint64_t sirinluexternal::AsrHypothesis::AsrHypothesis(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_1E7BAFCC0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  if (v9)
    std::default_delete<std::string>::operator()[abi:ne180100](v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD **)(a1 + 8);
  if (v10)
  {
    v11 = *(_QWORD **)(a1 + 16);
    v12 = *(void **)(a1 + 8);
    if (v11 != v10)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      while (v11 != v10);
      v12 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 16) = v10;
    operator delete(v12);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v15 = *(_QWORD **)(a1 + 48);
  if (v15)
  {
    v16 = *(_QWORD **)(a1 + 56);
    v17 = *(void **)(a1 + 48);
    if (v16 != v15)
    {
      do
      {
        v19 = *--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      while (v16 != v15);
      v17 = *(void **)v5;
    }
    *(_QWORD *)(a1 + 56) = v15;
    operator delete(v17);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return a1;
}

uint64_t sirinluexternal::AsrHypothesis::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if (a1 != a2)
  {
    sirinluexternal::AsrHypothesis::AsrHypothesis((uint64_t)v11, a2);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v12 = v4;
    v13 = v5;
    v6 = v16;
    v7 = *(_OWORD *)(a1 + 48);
    v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v6;
    v9 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    v17 = v9;
    v15 = v7;
    v16 = v8;
    sirinluexternal::AsrHypothesis::~AsrHypothesis((sirinluexternal::AsrHypothesis *)v11);
  }
  return a1;
}

BOOL sirinluexternal::AsrHypothesis::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 72);
  v7 = *(unsigned __int8 ***)(a2 + 72);
  if (!v6)
  {
    if (!v7)
      goto LABEL_23;
    return 0;
  }
  if (!v7)
    return 0;
  v8 = v6[23];
  if ((v8 & 0x80u) == 0)
    v9 = (unsigned __int8 *)v6[23];
  else
    v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v11 = (char)v10;
  if ((char)v10 < 0)
    v10 = v7[1];
  if (v9 != v10)
    return 0;
  if (v11 >= 0)
    v12 = *(unsigned __int8 **)(a2 + 72);
  else
    v12 = *v7;
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
      goto LABEL_23;
    return 0;
  }
  if (v6[23])
  {
    while (*v6 == *v12)
    {
      ++v6;
      ++v12;
      if (!--v8)
        goto LABEL_23;
    }
    return 0;
  }
LABEL_23:
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 1) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 1) != 0)
  {
    return 0;
  }
  v14 = *(uint64_t **)(a1 + 8);
  v13 = *(uint64_t **)(a1 + 16);
  v15 = *(uint64_t **)(a2 + 8);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 16) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    result = sirinluexternal::AsrTokenInformation::operator==(*v14, *v15);
    if (!result)
      return result;
    ++v14;
    ++v15;
  }
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v20 = a2 + 48;
  v19 = *(uint64_t **)(a2 + 48);
  if (v18 - v17 != *(_QWORD *)(v20 + 8) - (_QWORD)v19)
    return 0;
  if (v17 == v18)
    return 1;
  v21 = v17 + 8;
  do
  {
    v22 = *v19++;
    result = sirinluexternal::RewrittenUtterance::operator==(*(_QWORD *)(v21 - 8), v22);
    v23 = !result || v21 == v18;
    v21 += 8;
  }
  while (!v23);
  return result;
}

unint64_t sirinluexternal::AsrHypothesis::hash_value(sirinluexternal::AsrHypothesis *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  sirinluexternal::AsrTokenInformation **v10;
  sirinluexternal::AsrTokenInformation **v11;
  uint64_t v12;
  sirinluexternal::AsrTokenInformation *v13;
  sirinluexternal::RewrittenUtterance **v14;
  sirinluexternal::RewrittenUtterance **v15;
  uint64_t v16;
  sirinluexternal::RewrittenUtterance *v17;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 9);
  if (v7)
    v8 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  else
    v8 = 0;
  if ((*((_BYTE *)this + 80) & 1) != 0)
  {
    if (*((double *)this + 5) == 0.0)
      v9 = 0;
    else
      v9 = *((_QWORD *)this + 5);
  }
  else
  {
    v9 = 0;
  }
  v10 = (sirinluexternal::AsrTokenInformation **)*((_QWORD *)this + 1);
  v11 = (sirinluexternal::AsrTokenInformation **)*((_QWORD *)this + 2);
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *v10++;
      v12 ^= sirinluexternal::AsrTokenInformation::hash_value(v13);
    }
    while (v10 != v11);
  }
  v15 = (sirinluexternal::RewrittenUtterance **)*((_QWORD *)this + 6);
  v14 = (sirinluexternal::RewrittenUtterance **)*((_QWORD *)this + 7);
  if (v15 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = *v15++;
      v16 ^= sirinluexternal::RewrittenUtterance::hash_value(v17);
    }
    while (v15 != v14);
  }
  return v8 ^ v6 ^ v9 ^ v12 ^ v16;
}

_QWORD *sirinluexternal::AsrHypothesis::makeIdA(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput(sirinluexternal::NLUSupplementaryOutput *this)
{
  sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BAFD10;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::NLUSupplementaryOutput::readFrom(sirinluexternal::NLUSupplementaryOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 16);
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        v21 = (_QWORD *)operator new();
        *v21 = &off_1E7BB0FA0;
        v21[1] = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v21 = (_QWORD *)*((_QWORD *)this + 1);
        }
      }
      else if ((_DWORD)v20 == 2)
      {
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = &off_1E7BB19E0;
        v24 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v21 = (_QWORD *)*((_QWORD *)this + 5);
        }
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        PB::PtrVector<sirinluexternal::Span>::emplace_back<>(v8);
        v21 = *(_QWORD **)(*((_QWORD *)this + 3) - 8);
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v21 + 16))(v21, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(const PB::Base **)(v3 + 40);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = *(const PB::Base **)(v3 + 8);
  if (v8)
    return PB::Writer::writeSubmessage(a2, v8);
  return this;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::formatText(sirinluexternal::NLUSupplementaryOutput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction_outcome");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "matching_spans");
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "rewrite");
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternal::Span>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BAEAE8;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 40) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F63570(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput(sirinluexternal::NLUSupplementaryOutput *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFD10;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFD10;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluexternal::NLUSupplementaryOutput *sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput(sirinluexternal::NLUSupplementaryOutput *this, const sirinluexternal::NLUSupplementaryOutput *a2)
{
  uint64_t *v4;
  const sirinluexternal::Span **v5;
  const sirinluexternal::Span **i;
  sirinluexternal::RewriteMessage *v7;
  sirinluexternal::RewriteMessage *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAFD10;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  v5 = (const sirinluexternal::Span **)*((_QWORD *)a2 + 2);
  for (i = (const sirinluexternal::Span **)*((_QWORD *)a2 + 3); v5 != i; ++v5)
    PB::PtrVector<sirinluexternal::Span>::emplace_back<sirinluexternal::Span const&>((sirinluexternal::Span ***)this + 2, *v5);
  if (*((_QWORD *)a2 + 5))
  {
    v7 = (sirinluexternal::RewriteMessage *)operator new();
    v8 = sirinluexternal::RewriteMessage::RewriteMessage(v7, *((const sirinluexternal::RewriteMessage **)a2 + 5));
    v9 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = operator new();
    v11 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v10 = &off_1E7BB0FA0;
    *(_QWORD *)(v10 + 8) = 0;
    if ((*(_BYTE *)(v11 + 12) & 1) != 0)
    {
      v12 = *(_DWORD *)(v11 + 8);
      *(_BYTE *)(v10 + 12) = 1;
      *(_DWORD *)(v10 + 8) = v12;
    }
    v13 = *v4;
    *v4 = v10;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

uint64_t PB::PtrVector<sirinluexternal::Span>::emplace_back<sirinluexternal::Span const&>(sirinluexternal::Span ***a1, const sirinluexternal::Span *a2)
{
  sirinluexternal::Span *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::Span **v7;
  sirinluexternal::Span **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::Span **v14;
  unint64_t v15;
  sirinluexternal::Span **v16;
  sirinluexternal::Span **v17;
  sirinluexternal::Span *v18;
  int64x2_t v19;
  sirinluexternal::Span **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::Span *)operator new();
  result = (uint64_t)sirinluexternal::Span::Span(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::Span **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::Span **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::Span **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F6389C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::NLUSupplementaryOutput::operator=(uint64_t a1, const sirinluexternal::NLUSupplementaryOutput *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluexternal::NLUSupplementaryOutput *)a1 != a2)
  {
    sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput((sirinluexternal::NLUSupplementaryOutput *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput((sirinluexternal::NLUSupplementaryOutput *)&v7);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::NLUSupplementaryOutput *a2, sirinluexternal::NLUSupplementaryOutput *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  return this;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E7BAFD10;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput((sirinluexternal::NLUSupplementaryOutput *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::NLUSupplementaryOutput::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = PB::PtrVector<sirinluexternal::Span>::operator==(a1 + 2, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (!result)
    return result;
  v5 = a1[5];
  v6 = *(_QWORD *)(a2 + 40);
  if (!v5)
  {
    if (!v6)
      goto LABEL_9;
    return 0;
  }
  if (!v6 || (sirinluexternal::RewriteMessage::operator==(v5, v6) & 1) == 0)
    return 0;
LABEL_9:
  v7 = a1[1];
  v8 = *(_QWORD *)(a2 + 8);
  result = (v7 | v8) == 0;
  if (v7 && v8)
  {
    if ((*(_BYTE *)(v7 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v8 + 12) & 1) != 0 && *(_DWORD *)(v7 + 8) == *(_DWORD *)(v8 + 8))
        return 1;
    }
    else if ((*(_BYTE *)(v8 + 12) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<sirinluexternal::Span>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::Span::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::NLUSupplementaryOutput::hash_value(sirinluexternal::NLUSupplementaryOutput *this)
{
  sirinluexternal::Span **v2;
  sirinluexternal::Span **v3;
  uint64_t v4;
  sirinluexternal::Span *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (sirinluexternal::Span **)*((_QWORD *)this + 2);
  v3 = (sirinluexternal::Span **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= sirinluexternal::Span::hash_value(v5);
    }
    while (v2 != v3);
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 20) & 1) != 0)
      v7 = *(int *)(v6 + 16);
    else
      v7 = 0;
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
      v8 = std::__string_hash<char>::operator()[abi:ne180100](v8);
    v6 = v8 ^ v7;
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 12) & 1) != 0)
      v9 = *(int *)(v9 + 8);
    else
      v9 = 0;
  }
  return v6 ^ v4 ^ v9;
}

_QWORD *sirinluexternal::NLUSupplementaryOutput::makeRewrite(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB19E0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::NLUSupplementaryOutput::makeCorrectionOutcome(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0FA0;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::ReferenceContext::~ReferenceContext(sirinluexternal::ReferenceContext *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::ReferenceContext::readFrom(sirinluexternal::ReferenceContext *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;
  int v22;
  BOOL v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 12) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 9) = v23;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::ReferenceContext::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 12);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_BYTE *)(v3 + 12);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t sirinluexternal::ReferenceContext::formatText(sirinluexternal::ReferenceContext *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 12);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "contextual_reference");
    v5 = *((_BYTE *)this + 12);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "disambiguation_needed");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::ReferenceContext::ReferenceContext(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAFD60;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAFD60;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t sirinluexternal::ReferenceContext::ReferenceContext(uint64_t this, const sirinluexternal::ReferenceContext *a2)
{
  char v2;
  char v3;
  char v4;

  *(_QWORD *)this = &off_1E7BAFD60;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v3 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 12) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 12) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 9);
    *(_BYTE *)(this + 12) = v2;
    *(_BYTE *)(this + 9) = v4;
  }
  return this;
}

{
  char v2;
  char v3;
  char v4;

  *(_QWORD *)this = &off_1E7BAFD60;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v3 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 12) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 12) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 9);
    *(_BYTE *)(this + 12) = v2;
    *(_BYTE *)(this + 9) = v4;
  }
  return this;
}

uint64_t sirinluexternal::ReferenceContext::operator=(uint64_t a1, _BYTE *a2)
{
  char v2;
  void (**v4)(sirinluexternal::ReferenceContext *__hidden);
  char v5;
  char v6;
  int v7;
  void (**v9)(sirinluexternal::ReferenceContext *__hidden);
  __int16 v10;
  int v11;

  if ((_BYTE *)a1 != a2)
  {
    v4 = &off_1E7BAFD60;
    v9 = &off_1E7BAFD60;
    v11 = 0;
    v5 = a2[12];
    if ((v5 & 1) != 0)
    {
      LOBYTE(v4) = a2[8];
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = a2[9];
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((a2[12] & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v11;
    v11 = v7;
    LOWORD(v7) = *(_WORD *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = (_BYTE)v4;
    v10 = v7;
    *(_BYTE *)(a1 + 9) = v2;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::ReferenceContext *a2, sirinluexternal::ReferenceContext *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 9);
  *(_BYTE *)(this + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a2 + 9) = v3;
  return this;
}

uint64_t sirinluexternal::ReferenceContext::ReferenceContext(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BAFD60;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BAFD60;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  return result;
}

uint64_t sirinluexternal::ReferenceContext::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  int v5;
  void (**v7)(sirinluexternal::ReferenceContext *__hidden);
  __int16 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7BAFD60;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_WORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOWORD(v3) = *(_WORD *)(a1 + 8);
    *(_WORD *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::ReferenceContext::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 v2;

  if ((a1[12] & 1) != 0)
  {
    if ((a2[12] & 1) == 0 || a1[8] != a2[8])
      return 0;
  }
  else if ((a2[12] & 1) != 0)
  {
    return 0;
  }
  v2 = (a2[12] & 2) == 0;
  if ((a1[12] & 2) != 0)
    return (a2[12] & 2) != 0 && a1[9] == a2[9];
  return v2;
}

uint64_t sirinluexternal::ReferenceContext::hash_value(sirinluexternal::ReferenceContext *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 12) & 1) != 0)
  {
    v1 = *((unsigned __int8 *)this + 8);
    if ((*((_BYTE *)this + 12) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 12) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 9);
  return v2 ^ v1;
}

BOOL SIRINLUEXTERNALSpanPropertyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRICOMMONStringValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRICOMMONStringValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
        goto LABEL_31;
      case 2u:
        v18 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_30;
      case 3u:
        v18 = objc_alloc_init(SIRICOMMONInt32Value);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONInt32ValueReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_30;
      case 4u:
        v18 = objc_alloc_init(SIRICOMMONFloatValue);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (PBReaderPlaceMark() && (SIRICOMMONFloatValueReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

BOOL SIRINLUEXTERNALUserDialogActReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserAccepted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserAccepted);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUserAcceptedReadFrom((uint64_t)v17, a2))
          goto LABEL_54;
        goto LABEL_58;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserRejected);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserRejectedReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_54;
      case 5u:
      case 0xBu:
        goto LABEL_26;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserCancelled);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserCancelledReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_54;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToRepeat);
        objc_storeStrong(a1 + 10, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserWantedToRepeatReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_54;
      case 8u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserAcknowledged);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserAcknowledgedReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_54;
      case 9u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToProceed);
        objc_storeStrong(a1 + 9, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserWantedToProceedReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_54;
      case 0xAu:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToPause);
        objc_storeStrong(a1 + 8, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserWantedToPauseReadFrom((uint64_t)v17, a2))
          goto LABEL_58;
        goto LABEL_54;
      case 0xCu:
        v17 = objc_alloc_init(SIRINLUEXTERNALDelegatedUserDialogAct);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALDelegatedUserDialogActReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 0xDu:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserStatedTask);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserStatedTaskReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_58;
        goto LABEL_54;
      case 0xEu:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToUndo);
        objc_storeStrong(a1 + 11, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUserWantedToUndoReadFrom((uint64_t)v17, a2))
          goto LABEL_54;
        goto LABEL_58;
      default:
        if ((v10 >> 3) != 101)
        {
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          goto LABEL_55;
        }
        v17 = objc_alloc_init(SIRINLUEXTERNALUtteranceAlignment);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUtteranceAlignmentReadFrom(v17, a2) & 1) != 0)
        {
LABEL_54:
          PBReaderRecallMark();

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_58:

        return 0;
    }
  }
}

void sub_1C1F6714C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F672C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F673D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F67684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F67894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F67B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F67CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F67DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F67F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F68018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C1F681FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F683A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F68494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C1F68610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F686AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F68708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F6876C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F68880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F68A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F68B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F68CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F68DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F68F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F690DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F6918C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F692E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F69538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F696D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t SIRINLUEXTERNALTurnInputReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALSystemDialogActGroup *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogActGroup);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALSystemDialogActGroupReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_55;
        }
        goto LABEL_67;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        objc_msgSend((id)a1, "addSalientEntities:", v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_67;
        }
        goto LABEL_55;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        objc_msgSend((id)a1, "addActiveTasks:", v17);
        goto LABEL_29;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        objc_msgSend((id)a1, "addExecutedTasks:", v17);
LABEL_29:
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTaskReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_67;
        goto LABEL_55;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALAsrHypothesis);
        objc_msgSend((id)a1, "addAsrOutputs:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALAsrHypothesisReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_67;
        goto LABEL_55;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnContext);
        objc_storeStrong((id *)(a1 + 72), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTurnContextReadFrom((uint64_t)v17, a2))
          goto LABEL_67;
        goto LABEL_55;
      case 7u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v19;

        goto LABEL_56;
      case 8u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 84) |= 2u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_61:
        *(_BYTE *)(a1 + 80) = v23 != 0;
        goto LABEL_56;
      case 9u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 84) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_65:
        *(_QWORD *)(a1 + 8) = v29;
        goto LABEL_56;
      case 0xAu:
        v17 = objc_alloc_init(SIRINLUEXTERNALCorrectionOutcome);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALCorrectionOutcomeReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_55:
          PBReaderRecallMark();

LABEL_56:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
    }
  }
}

void sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this)
{
  sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAFDB0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

BOOL sirinluexternalsubword_embedding::SubwordEmbeddingSetup::readFrom(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (uint64_t *)((char *)this + 8);
    v8 = (uint64_t *)((char *)this + 16);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
        break;
      if ((v12 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *v8;
        *v8 = (uint64_t)v20;
        if (!v21)
          goto LABEL_30;
LABEL_29:
        std::default_delete<std::string>::operator()[abi:ne180100](v21);
LABEL_30:
        PB::Reader::read();
        goto LABEL_31;
      }
LABEL_26:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return 0;
LABEL_31:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v22 = (_QWORD *)operator new();
    v22[1] = 0;
    v22[2] = 0;
    *v22 = 0;
    v21 = *v7;
    *v7 = (uint64_t)v22;
    if (v21)
      goto LABEL_29;
    goto LABEL_30;
  }
  return v4 == 0;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::formatText(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAFDB0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAFDB0;
  return this;
}

sirinluexternalsubword_embedding::SubwordEmbeddingSetup *sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this, const sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E7BAFDB0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *v4;
    *v4 = (uint64_t)v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::operator=(uint64_t a1, const sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup((sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup((sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::swap(uint64_t this, sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a2, sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAFDB0;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup((sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 16);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  v12 = *(unsigned __int8 **)(a1 + 8);
  v13 = *(unsigned __int8 ***)(a2 + 8);
  result = v13 == 0;
  if (!v12)
    return result;
  if (!v13)
    return 0;
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = v13[1];
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = *(unsigned __int8 **)(a2 + 8);
  else
    v18 = *v13;
  if ((v14 & 0x80) != 0)
    return !memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1));
  if (!v12[23])
    return 1;
  v19 = v14 - 1;
  do
  {
    v21 = *v12++;
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::hash_value(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v4 ^ v3;
}

uint64_t SIRINLUEXTERNALRewrittenUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  SIRICOMMONStringValue *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing(sirinluinternaloverrides::TurnInputAndPreprocessing *this)
{
  sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_1E7BAFE00;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::readFrom(sirinluinternaloverrides::TurnInputAndPreprocessing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 8);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_22:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        v22 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v21;
        if (v22)
          std::default_delete<std::string>::operator()[abi:ne180100](v22);
        PB::Reader::read();
        goto LABEL_35;
      case 2u:
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E7BB0140;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_QWORD *)(v23 + 40) = 0;
        v24 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *((_QWORD *)this + 4);
        }
        break;
      case 3u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
        v23 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        break;
      case 4u:
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E7BB16E8;
        *(_DWORD *)(v23 + 148) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *(_OWORD *)(v23 + 88) = 0u;
        *(_OWORD *)(v23 + 104) = 0u;
        *(_QWORD *)(v23 + 128) = 0;
        *(_QWORD *)(v23 + 136) = 0;
        v25 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v23;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v23 = *((_QWORD *)this + 5);
        }
        break;
      default:
        goto LABEL_20;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_35:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_22;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_35;
  return result;
}

_QWORD *sirinluinternaloverrides::TurnInputAndPreprocessing::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;

  v3 = this;
  if (this[6])
    this = (_QWORD *)PB::Writer::write();
  v4 = (const PB::Base *)v3[4];
  if (v4)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[1];
  v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = (const PB::Base *)v3[5];
  if (v8)
    return (_QWORD *)PB::Writer::writeSubmessage(a2, v8);
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::formatText(sirinluinternaloverrides::TurnInputAndPreprocessing *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "matching_spans");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "token_chain");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "turn_input");
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(sirinluinternaloverrides::TurnInputAndPreprocessing *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFE00;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFE00;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

sirinluinternaloverrides::TurnInputAndPreprocessing *sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(sirinluinternaloverrides::TurnInputAndPreprocessing *this, const sirinluinternaloverrides::TurnInputAndPreprocessing *a2)
{
  sirinluinternal::MatchingSpan ***v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  sirinluinternal::TokenChain *v10;
  sirinluinternal::TokenChain *v11;
  uint64_t v12;
  const sirinluinternal::MatchingSpan **v13;
  const sirinluinternal::MatchingSpan **v14;
  sirinluexternal::TurnInput *v15;
  sirinluexternal::TurnInput *v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E7BAFE00;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::MatchingSpan ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((_QWORD *)a2 + 6))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 6);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v10 = (sirinluinternal::TokenChain *)operator new();
    v11 = sirinluinternal::TokenChain::TokenChain(v10, *((const sirinluinternal::TokenChain **)a2 + 4));
    v12 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 1);
  v14 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 2);
  while (v13 != v14)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v4, *v13++);
  if (*((_QWORD *)a2 + 5))
  {
    v15 = (sirinluexternal::TurnInput *)operator new();
    v16 = sirinluexternal::TurnInput::TurnInput(v15, *((const sirinluexternal::TurnInput **)a2 + 5));
    v17 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::operator=(uint64_t a1, const sirinluinternaloverrides::TurnInputAndPreprocessing *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((const sirinluinternaloverrides::TurnInputAndPreprocessing *)a1 != a2)
  {
    sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing((sirinluinternaloverrides::TurnInputAndPreprocessing *)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v3;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing((sirinluinternaloverrides::TurnInputAndPreprocessing *)v7);
  }
  return a1;
}

_QWORD *sirinluinternaloverrides::swap(_QWORD *this, sirinluinternaloverrides::TurnInputAndPreprocessing *a2, sirinluinternaloverrides::TurnInputAndPreprocessing *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v3;
  v4 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E7BAFE00;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v3;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing((sirinluinternaloverrides::TurnInputAndPreprocessing *)v7);
  }
  return a1;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::operator==(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v4 = (unsigned __int8 *)a1[6];
  v5 = *(unsigned __int8 ***)(a2 + 48);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 48);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (_QWORD *)a1[4];
  v12 = *(_QWORD *)(a2 + 32);
  if (!v11)
  {
    if (!v12)
      goto LABEL_23;
    return 0;
  }
  if (!v12 || !sirinluinternal::TokenChain::operator==(v11, v12))
    return 0;
LABEL_23:
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 1, *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    v14 = a1[5];
    v15 = *(_QWORD *)(a2 + 40);
    result = (v14 | v15) == 0;
    if (v14)
    {
      if (v15)
        return sirinluexternal::TurnInput::operator==(a1[5], v15);
    }
  }
  return result;
}

unint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::hash_value(sirinluinternaloverrides::TurnInputAndPreprocessing *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluinternal::TokenChain *v4;
  unint64_t v5;
  sirinluinternal::MatchingSpan **v6;
  sirinluinternal::MatchingSpan **v7;
  uint64_t v8;
  sirinluinternal::MatchingSpan *v9;
  unint64_t v10;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 4);
  if (v4)
    v5 = sirinluinternal::TokenChain::hash_value(v4);
  else
    v5 = 0;
  v6 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 1);
  v7 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluinternal::MatchingSpan::hash_value(v9);
    }
    while (v6 != v7);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
    v10 = sirinluexternal::TurnInput::hash_value((sirinluexternal::TurnInput *)v10);
  return v5 ^ v3 ^ v8 ^ v10;
}

_QWORD *sirinluinternaloverrides::TurnInputAndPreprocessing::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternaloverrides::TurnInputAndPreprocessing::makeTurnInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB16E8;
    *(_DWORD *)(v2 + 148) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALEntityCandidateReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUsoGraph *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_40;
        goto LABEL_44;
      case 2u:
        v17 = objc_alloc_init(SIRICOMMONDoubleValue);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRICOMMONDoubleValueReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_44;
        goto LABEL_40;
      case 3u:
        v17 = objc_alloc_init(SIRICOMMONStringValue);
        v18 = 4;
        goto LABEL_29;
      case 4u:
        v17 = objc_alloc_init(SIRICOMMONStringValue);
        v18 = 2;
LABEL_29:
        objc_storeStrong(&a1[v18], v17);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_44;
        goto LABEL_40;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRRGroupIdentifier);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRRGroupIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_44;
        goto LABEL_40;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRRAnnotation);
        objc_msgSend(a1, "addAnnotations:", v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRAnnotationReadFrom((uint64_t)v17, a2))
          goto LABEL_44;
        goto LABEL_40;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRRMetadata);
        objc_storeStrong(a1 + 6, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRRMetadataReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_41;
    }
  }
}

void sirinluinternal::OverrideValue::~OverrideValue(sirinluinternal::OverrideValue *this)
{
  sirinluinternal::OverrideValue::~OverrideValue(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7BAFE50;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::OverrideValue::readFrom(sirinluinternal::OverrideValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAF2B8;
        *(_QWORD *)(v20 + 8) = 0;
        v21 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 1);
        }
        break;
      case 2u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB18F0;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_DWORD *)(v20 + 88) = 0;
        v22 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *((_QWORD *)this + 4);
        }
        break;
      case 3u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0E48;
        *(_QWORD *)(v20 + 8) = 0;
        v23 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 2);
        }
        break;
      case 4u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAEEE0;
        *(_QWORD *)(v20 + 8) = 0;
        v24 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 3);
        }
        break;
      default:
        goto LABEL_19;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_34:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_34;
  return result;
}

uint64_t sirinluinternal::OverrideValue::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[4];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[2];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[3];
  if (v7)
    return PB::Writer::writeSubmessage(a2, v7);
  return this;
}

uint64_t sirinluinternal::OverrideValue::formatText(sirinluinternal::OverrideValue *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "ccqr_override_template");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "lvc_override_value");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "plan_override_value");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "user_parse");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::OverrideValue::OverrideValue(sirinluinternal::OverrideValue *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFE50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFE50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternal::OverrideValue *sirinluinternal::OverrideValue::OverrideValue(sirinluinternal::OverrideValue *this, const sirinluinternal::OverrideValue *a2)
{
  sirinluinternal::CCQROverrideTemplate **v4;
  sirinluinternal::CCQROverrideTemplate *v5;
  sirinluinternal::CCQROverrideTemplate *v6;
  sirinluinternal::CCQROverrideTemplate *v7;
  sirinluexternal::UserParse *v8;
  sirinluexternal::UserParse *v9;
  uint64_t v10;
  sirinluinternal::LVCOverrideValue *v11;
  sirinluinternal::LVCOverrideValue *v12;
  uint64_t v13;
  sirinluinternal::PlanOverrideValue *v14;
  sirinluinternal::PlanOverrideValue *v15;
  uint64_t v16;

  *(_QWORD *)this = &off_1E7BAFE50;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::CCQROverrideTemplate **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (sirinluinternal::CCQROverrideTemplate *)operator new();
    v6 = sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(v5, *((const sirinluexternal::RewriteMessage ***)a2 + 1));
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(sirinluinternal::CCQROverrideTemplate *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v8 = (sirinluexternal::UserParse *)operator new();
    v9 = sirinluexternal::UserParse::UserParse(v8, *((const sirinluexternal::UUID ***)a2 + 4));
    v10 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v11 = (sirinluinternal::LVCOverrideValue *)operator new();
    v12 = sirinluinternal::LVCOverrideValue::LVCOverrideValue(v11, *((const sirinluexternal::MultilingualVariant ***)a2 + 2));
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v14 = (sirinluinternal::PlanOverrideValue *)operator new();
    v15 = sirinluinternal::PlanOverrideValue::PlanOverrideValue(v14, *((const sirinluinternal::PlanOverrideValue **)a2 + 3));
    v16 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return this;
}

uint64_t sirinluinternal::OverrideValue::operator=(uint64_t a1, const sirinluinternal::OverrideValue *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluinternal::OverrideValue *)a1 != a2)
  {
    sirinluinternal::OverrideValue::OverrideValue((sirinluinternal::OverrideValue *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternal::OverrideValue::~OverrideValue((sirinluinternal::OverrideValue *)v6);
  }
  return a1;
}

_QWORD *sirinluinternal::swap(_QWORD *this, sirinluinternal::OverrideValue *a2, sirinluinternal::OverrideValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluinternal::OverrideValue::OverrideValue(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E7BAFE50;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = a2[1];
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a2[4];
  a2[4] = 0;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a2[2];
  a2[2] = 0;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a2[3];
  a2[3] = 0;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

uint64_t sirinluinternal::OverrideValue::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternal::OverrideValue::OverrideValue((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternal::OverrideValue::~OverrideValue((sirinluinternal::OverrideValue *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::OverrideValue::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5 || (sirinluinternal::CCQROverrideTemplate::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[4];
  v7 = a2[4];
  if (v6)
  {
    if (!v7 || !sirinluexternal::UserParse::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[2];
  v9 = a2[2];
  if (!v8)
  {
    if (!v9)
      goto LABEL_14;
    return 0;
  }
  if (!v9 || !sirinluinternal::LVCOverrideValue::operator==(v8, v9))
    return 0;
LABEL_14:
  v10 = a1[3];
  v11 = a2[3];
  result = (v10 | v11) == 0;
  if (v10)
  {
    if (v11)
      return sirinluinternal::PlanOverrideValue::operator==(a1[3], v11);
  }
  return result;
}

unint64_t sirinluinternal::OverrideValue::hash_value(sirinluinternal::OverrideValue *this)
{
  sirinluinternal::CCQROverrideTemplate *v2;
  unint64_t v3;
  sirinluexternal::UserParse *v4;
  unint64_t v5;
  uint64_t v6;
  sirinluexternal::MultilingualVariant *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = (sirinluinternal::CCQROverrideTemplate *)*((_QWORD *)this + 1);
  if (v2)
    v3 = sirinluinternal::CCQROverrideTemplate::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluexternal::UserParse *)*((_QWORD *)this + 4);
  if (v4)
    v5 = sirinluexternal::UserParse::hash_value(v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6 && (v7 = *(sirinluexternal::MultilingualVariant **)(v6 + 8)) != 0)
    v8 = sirinluexternal::MultilingualVariant::hash_value(v7);
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v10 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  }
  else
  {
    v10 = 0;
  }
  return v5 ^ v3 ^ v8 ^ v10;
}

_QWORD *sirinluinternal::OverrideValue::makeCcqrOverrideTemplate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF2B8;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::OverrideValue::makeUserParse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB18F0;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::OverrideValue::makeLvcOverrideValue(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0E48;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::OverrideValue::makePlanOverrideValue(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[3])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAEEE0;
    v2[1] = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALUsoGraphReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALSemVer *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSemVer);
        objc_storeStrong(a1 + 6, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALSemVerReadFrom((uint64_t)v17, a2))
          goto LABEL_38;
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUsoNode);
        objc_msgSend(a1, "addNodes:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUsoNodeReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_38;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUsoEdge);
        objc_msgSend(a1, "addEdges:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUsoEdgeReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_38;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUsoEntityIdentifier);
        objc_msgSend(a1, "addIdentifiers:", v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALUsoEntityIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUtteranceAlignment);
        objc_msgSend(a1, "addAlignments:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUtteranceAlignmentReadFrom(v17, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_38;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUsoEntitySpan);
        objc_msgSend(a1, "addSpans:", v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUsoEntitySpanReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

void sirinluexternal::SpanProperty::~SpanProperty(sirinluexternal::SpanProperty *this)
{
  sirinluexternal::SpanProperty::~SpanProperty(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7BAFEA0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SpanProperty::readFrom(sirinluexternal::SpanProperty *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100](v21);
        PB::Reader::read();
        goto LABEL_35;
      case 2u:
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E7BB0538;
        *(_QWORD *)(v22 + 8) = 0;
        v23 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *((_QWORD *)this + 4);
        }
        break;
      case 3u:
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E7BB11F0;
        *(_DWORD *)(v22 + 12) = 0;
        v24 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v22;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v22 = *((_QWORD *)this + 3);
        }
        break;
      case 4u:
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E7BB1B78;
        *(_DWORD *)(v22 + 12) = 0;
        v25 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v22;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v22 = *((_QWORD *)this + 2);
        }
        break;
      default:
        goto LABEL_19;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_35:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_35;
  return result;
}

_QWORD *sirinluexternal::SpanProperty::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  if (this[1])
    this = (_QWORD *)PB::Writer::write();
  v4 = (const PB::Base *)v3[4];
  if (v4)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[3];
  if (v5)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[2];
  if (v6)
    return (_QWORD *)PB::Writer::writeSubmessage(a2, v6);
  return this;
}

uint64_t sirinluexternal::SpanProperty::formatText(sirinluexternal::SpanProperty *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "value_float");
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "value_int");
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "value_string");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::SpanProperty::SpanProperty(sirinluexternal::SpanProperty *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFEA0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFEA0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluexternal::SpanProperty *sirinluexternal::SpanProperty::SpanProperty(sirinluexternal::SpanProperty *this, const sirinluexternal::SpanProperty *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  siricommon::StringValue *v10;
  siricommon::StringValue *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)this = &off_1E7BAFEA0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *v4;
    *v4 = (uint64_t)v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v10 = (siricommon::StringValue *)operator new();
    v11 = siricommon::StringValue::StringValue(v10, *((const siricommon::StringValue **)a2 + 4));
    v12 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v13 = operator new();
    v14 = *((_QWORD *)a2 + 3);
    *(_QWORD *)v13 = &off_1E7BB11F0;
    *(_DWORD *)(v13 + 12) = 0;
    if ((*(_BYTE *)(v14 + 12) & 1) != 0)
    {
      v15 = *(_DWORD *)(v14 + 8);
      *(_BYTE *)(v13 + 12) = 1;
      *(_DWORD *)(v13 + 8) = v15;
    }
    v16 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v13;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v17 = operator new();
    v18 = *((_QWORD *)a2 + 2);
    *(_QWORD *)v17 = &off_1E7BB1B78;
    *(_DWORD *)(v17 + 12) = 0;
    if ((*(_BYTE *)(v18 + 12) & 1) != 0)
    {
      v19 = *(_DWORD *)(v18 + 8);
      *(_BYTE *)(v17 + 12) = 1;
      *(_DWORD *)(v17 + 8) = v19;
    }
    v20 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v17;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  return this;
}

uint64_t sirinluexternal::SpanProperty::operator=(uint64_t a1, const sirinluexternal::SpanProperty *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluexternal::SpanProperty *)a1 != a2)
  {
    sirinluexternal::SpanProperty::SpanProperty((sirinluexternal::SpanProperty *)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluexternal::SpanProperty::~SpanProperty((sirinluexternal::SpanProperty *)v6);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::SpanProperty *a2, sirinluexternal::SpanProperty *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluexternal::SpanProperty::SpanProperty(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E7BAFEA0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = a2[1];
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = a2[4];
  a2[4] = 0;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a2[3];
  a2[3] = 0;
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a2[2];
  a2[2] = 0;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

uint64_t sirinluexternal::SpanProperty::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternal::SpanProperty::SpanProperty((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluexternal::SpanProperty::~SpanProperty((sirinluexternal::SpanProperty *)v6);
  }
  return a1;
}

BOOL sirinluexternal::SpanProperty::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;

  v4 = (unsigned __int8 *)a1[1];
  v5 = (unsigned __int8 **)a2[1];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[1];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = a1[4];
  v12 = a2[4];
  if (v11)
  {
    if (!v12 || (siricommon::StringValue::operator==(v11, v12) & 1) == 0)
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = a1[3];
  v14 = a2[3];
  if (!v13)
  {
    if (!v14)
      goto LABEL_34;
    return 0;
  }
  if (!v14)
    return 0;
  if ((*(_BYTE *)(v13 + 12) & 1) != 0)
  {
    if ((*(_BYTE *)(v14 + 12) & 1) == 0 || *(_DWORD *)(v13 + 8) != *(_DWORD *)(v14 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(v14 + 12) & 1) != 0)
  {
    return 0;
  }
LABEL_34:
  v15 = a1[2];
  v16 = a2[2];
  result = (v15 | v16) == 0;
  if (v15 && v16)
  {
    if ((*(_BYTE *)(v15 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v16 + 12) & 1) == 0 || *(float *)(v15 + 8) != *(float *)(v16 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v16 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sirinluexternal::SpanProperty::hash_value(sirinluexternal::SpanProperty *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 12) & 1) != 0)
      v6 = *(int *)(v6 + 8);
    else
      v6 = 0;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 12) & 1) != 0)
    {
      v8 = *(float *)(v7 + 8);
      v7 = LODWORD(v8);
      if (v8 == 0.0)
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
  }
  return v5 ^ v3 ^ v6 ^ v7;
}

_QWORD *sirinluexternal::SpanProperty::makeValueString(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SpanProperty::makeValueInt(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB11F0;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SpanProperty::makeValueFloat(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1B78;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALTokenReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_67;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          a1[68] |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_74:
          v55 = 8;
          goto LABEL_96;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          a1[68] |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_78:
          v55 = 32;
          goto LABEL_96;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          a1[68] |= 0x10u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v33 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v33 = 0;
LABEL_82:
          v56 = v33 != 0;
          v57 = 64;
          goto LABEL_87;
        case 5u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          a1[68] |= 0x20u;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_86;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_86:
          v56 = v39 != 0;
          v57 = 65;
LABEL_87:
          a1[v57] = v56;
          continue;
        case 6u:
          PBReaderReadString();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v43)
            objc_msgSend(a1, "addCleanValues:", v43);
          goto LABEL_70;
        case 7u:
          v44 = 0;
          v45 = 0;
          v22 = 0;
          a1[68] |= 8u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v22 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                v14 = v45++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_91:
          v55 = 48;
          goto LABEL_96;
        case 8u:
          v49 = 0;
          v50 = 0;
          v22 = 0;
          a1[68] |= 4u;
          break;
        case 9u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_67:
          v54 = *(void **)&a1[v18];
          *(_QWORD *)&a1[v18] = v17;

          continue;
        case 0xAu:
          PBReaderReadString();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v43)
            objc_msgSend(a1, "addNormalizedValues:", v43);
LABEL_70:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v51 = *v3;
        v52 = *(_QWORD *)(a2 + v51);
        if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
          break;
        v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
        *(_QWORD *)(a2 + v51) = v52 + 1;
        v22 |= (unint64_t)(v53 & 0x7F) << v49;
        if ((v53 & 0x80) == 0)
          goto LABEL_93;
        v49 += 7;
        v14 = v50++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_95;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_93:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_95:
      v55 = 36;
LABEL_96:
      *(_DWORD *)&a1[v55] = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse(sirinluexternalcdm_planner::CdmPlannerResponse *this)
{
  sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BAFEF0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::readFrom(sirinluexternalcdm_planner::CdmPlannerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  int64x2_t v46;
  unint64_t v47;
  char *v48;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void ***)((char *)this + 8);
    v9 = (char *)this + 40;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_24:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        v26 = (_QWORD *)operator new();
        v27 = v26;
        *v26 = &off_1E7BAE7D8;
        v26[1] = 0;
        v26[2] = 0;
        v26[3] = 0;
        v29 = (_QWORD *)*((_QWORD *)this + 4);
        v28 = *((_QWORD *)this + 5);
        if ((unint64_t)v29 >= v28)
        {
          v31 = *((_QWORD *)this + 3);
          v32 = ((uint64_t)v29 - v31) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v33 = v28 - v31;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          v48 = v9;
          if (v35)
            v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v35);
          else
            v36 = 0;
          v37 = (_QWORD *)(v35 + 8 * v32);
          v38 = v35 + 8 * v36;
          v47 = v38;
          *v37 = v27;
          v30 = v37 + 1;
          v46.i64[1] = (uint64_t)(v37 + 1);
          v40 = (_QWORD *)*((_QWORD *)this + 3);
          v39 = (_QWORD *)*((_QWORD *)this + 4);
          if (v39 == v40)
          {
            v42 = vdupq_n_s64((unint64_t)v39);
          }
          else
          {
            do
            {
              v41 = *--v39;
              *v39 = 0;
              *--v37 = v41;
            }
            while (v39 != v40);
            v42 = *(int64x2_t *)((char *)this + 24);
            v30 = (_QWORD *)v46.i64[1];
            v38 = v47;
          }
          *((_QWORD *)this + 3) = v37;
          *((_QWORD *)this + 4) = v30;
          v46 = v42;
          v43 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v38;
          v47 = v43;
          v45 = (void **)v42.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v45);
        }
        else
        {
          *v29 = v26;
          v30 = v29 + 1;
        }
        *((_QWORD *)this + 4) = v30;
        v44 = *(v30 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v44 + 16))(v44, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v22 == 2)
      {
        v25 = operator new();
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        v45 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v25);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](&v45, 0);
        PB::Reader::read();
      }
      else if ((_DWORD)v22 == 1)
      {
        v23 = (_QWORD *)operator new();
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v24 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v23;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100](v24);
        PB::Reader::read();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
      if (v16)
        goto LABEL_20;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C1F73858(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sirinluexternalcdm_planner::CdmPlannerResponse::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if (this[2])
    this = (_QWORD *)PB::Writer::write();
  if (v3[1])
    this = (_QWORD *)PB::Writer::write();
  v5 = (const PB::Base **)v3[3];
  v4 = (const PB::Base **)v3[4];
  while (v5 != v4)
  {
    v6 = *v5++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::formatText(sirinluexternalcdm_planner::CdmPlannerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = (uint64_t *)*((_QWORD *)this + 4);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "transcript_events");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse(sirinluexternalcdm_planner::CdmPlannerResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAFEF0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAFEF0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluexternalcdm_planner::CdmPlannerResponse *sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse(sirinluexternalcdm_planner::CdmPlannerResponse *this, const sirinluexternalcdm_planner::CdmPlannerResponse *a2)
{
  void ***v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  void **v10;
  const sirinluexternalcdm_planner::CDMTranscriptEvent **v11;
  const sirinluexternalcdm_planner::CDMTranscriptEvent **i;
  const sirinluexternalcdm_planner::CDMTranscriptEvent *v13;
  sirinluexternalcdm_planner::CDMTranscriptEvent *v14;
  unint64_t v15;
  sirinluexternalcdm_planner::CDMTranscriptEvent **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  sirinluexternalcdm_planner::CDMTranscriptEvent **v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  sirinluexternalcdm_planner::CDMTranscriptEvent *v28;
  int64x2_t v29;
  unint64_t v30;
  void **v32;
  int64x2_t v33;
  unint64_t v34;
  char *v35;

  *(_QWORD *)this = &off_1E7BAFEF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (void ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = (void **)operator new();
    PB::Data::Data();
    v32 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, v10);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v32, 0);
  }
  v11 = (const sirinluexternalcdm_planner::CDMTranscriptEvent **)*((_QWORD *)a2 + 3);
  for (i = (const sirinluexternalcdm_planner::CDMTranscriptEvent **)*((_QWORD *)a2 + 4); v11 != i; ++v11)
  {
    v13 = *v11;
    v14 = (sirinluexternalcdm_planner::CDMTranscriptEvent *)operator new();
    sirinluexternalcdm_planner::CDMTranscriptEvent::CDMTranscriptEvent(v14, v13);
    v16 = (sirinluexternalcdm_planner::CDMTranscriptEvent **)*((_QWORD *)this + 4);
    v15 = *((_QWORD *)this + 5);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *((_QWORD *)this + 3);
      v19 = ((uint64_t)v16 - v18) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v20 = v15 - v18;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v35 = (char *)this + 40;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v22);
      else
        v23 = 0;
      v24 = (sirinluexternalcdm_planner::CDMTranscriptEvent **)(v22 + 8 * v19);
      v25 = v22 + 8 * v23;
      v34 = v25;
      *v24 = v14;
      v17 = v24 + 1;
      v33.i64[1] = (uint64_t)(v24 + 1);
      v27 = (_QWORD *)*((_QWORD *)this + 3);
      v26 = (_QWORD *)*((_QWORD *)this + 4);
      if (v26 == v27)
      {
        v29 = vdupq_n_s64((unint64_t)v26);
      }
      else
      {
        do
        {
          v28 = (sirinluexternalcdm_planner::CDMTranscriptEvent *)*--v26;
          *v26 = 0;
          *--v24 = v28;
        }
        while (v26 != v27);
        v29 = *(int64x2_t *)((char *)this + 24);
        v17 = (_QWORD *)v33.i64[1];
        v25 = v34;
      }
      *((_QWORD *)this + 3) = v24;
      *((_QWORD *)this + 4) = v17;
      v33 = v29;
      v30 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v25;
      v34 = v30;
      v32 = (void **)v29.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v32);
    }
    else
    {
      *v16 = v14;
      v17 = v16 + 1;
    }
    *((_QWORD *)this + 4) = v17;
  }
  return this;
}

void sub_1C1F73C7C(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::operator=(uint64_t a1, const sirinluexternalcdm_planner::CdmPlannerResponse *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluexternalcdm_planner::CdmPlannerResponse *)a1 != a2)
  {
    sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse((sirinluexternalcdm_planner::CdmPlannerResponse *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse((sirinluexternalcdm_planner::CdmPlannerResponse *)&v7);
  }
  return a1;
}

_QWORD *sirinluexternalcdm_planner::swap(_QWORD *this, sirinluexternalcdm_planner::CdmPlannerResponse *a2, sirinluexternalcdm_planner::CdmPlannerResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse(uint64_t a1, uint64_t a2)
{
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E7BAFEF0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (void ***)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(void ***)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, v7);
  v8 = (void **)(a1 + 24);
  v9 = *(_QWORD **)(a1 + 24);
  if (v9)
  {
    v10 = *(_QWORD **)(a1 + 32);
    v11 = *(void **)(a1 + 24);
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = *v8;
    }
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v11);
    *v8 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return a1;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse((sirinluexternalcdm_planner::CdmPlannerResponse *)&v7);
  }
  return a1;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t result;

  v4 = (unsigned __int8 *)a1[2];
  v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[2];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = a2[1];
  if (!a1[1])
  {
    if (!v11)
      goto LABEL_24;
    return 0;
  }
  if (!v11 || (PB::Data::operator==() & 1) == 0 && a1[1] | a2[1])
    return 0;
LABEL_24:
  v13 = (char *)a1[3];
  v12 = (char *)a1[4];
  v15 = a2 + 3;
  v14 = (_QWORD **)a2[3];
  if (v12 - v13 != v15[1] - (_QWORD)v14)
    return 0;
  if (v13 == v12)
    return 1;
  do
  {
    result = sirinluexternalcdm_planner::CDMTranscriptEvent::operator==(*(_QWORD **)v13, *v14);
    if (!(_DWORD)result)
      break;
    v13 += 8;
    ++v14;
  }
  while (v13 != (char *)a1[4]);
  return result;
}

unint64_t sirinluexternalcdm_planner::CdmPlannerResponse::hash_value(sirinluexternalcdm_planner::CdmPlannerResponse *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  sirinluexternalcdm_planner::CDMTranscriptEvent **v5;
  sirinluexternalcdm_planner::CDMTranscriptEvent **v6;
  uint64_t v7;
  sirinluexternalcdm_planner::CDMTranscriptEvent *v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  if (*((_QWORD *)this + 1))
    v4 = PBHashBytes();
  else
    v4 = 0;
  v6 = (sirinluexternalcdm_planner::CDMTranscriptEvent **)*((_QWORD *)this + 3);
  v5 = (sirinluexternalcdm_planner::CDMTranscriptEvent **)*((_QWORD *)this + 4);
  if (v6 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v6++;
      v7 ^= sirinluexternalcdm_planner::CDMTranscriptEvent::hash_value(v8);
    }
    while (v6 != v5);
  }
  return v4 ^ v3 ^ v7;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRulesReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addRuleIds:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALNLU_ROUTERRequestSummaryReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUEXTERNALNLU_ROUTERTurnSummary *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (SIRINLUEXTERNALNLU_ROUTERTurnSummary *)a1[2];
        a1[2] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERTurnSummary);
    objc_msgSend(a1, "addTurnSummaries:", v18);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALNLU_ROUTERTurnSummaryReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALPlanOverrideValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternaloverrides::OverridesResponse::~OverridesResponse(sirinluinternaloverrides::OverridesResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAFF40;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAFF40;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAFF40;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternaloverrides::OverridesResponse::readFrom(sirinluinternaloverrides::OverridesResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternaloverrides::OverridesResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluinternaloverrides::OverridesResponse::formatText(sirinluinternaloverrides::OverridesResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "parses");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternaloverrides::OverridesResponse::OverridesResponse(_QWORD *this)
{
  *this = &off_1E7BAFF40;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAFF40;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternaloverrides::OverridesResponse *sirinluinternaloverrides::OverridesResponse::OverridesResponse(sirinluinternaloverrides::OverridesResponse *this, const sirinluinternaloverrides::OverridesResponse *a2)
{
  sirinluexternal::UserParse ***v3;
  const sirinluexternal::UUID ***v4;
  const sirinluexternal::UUID ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAFF40;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v3, *v4++);
  return this;
}

uint64_t sirinluinternaloverrides::OverridesResponse::operator=(uint64_t a1, const sirinluinternaloverrides::OverridesResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluinternaloverrides::OverridesResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluinternaloverrides::OverridesResponse *)a1 != a2)
  {
    sirinluinternaloverrides::OverridesResponse::OverridesResponse((sirinluinternaloverrides::OverridesResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BAFF40;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternaloverrides::swap(_QWORD *this, sirinluinternaloverrides::OverridesResponse *a2, sirinluinternaloverrides::OverridesResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluinternaloverrides::OverridesResponse::OverridesResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BAFF40;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BAFF40;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternaloverrides::OverridesResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluinternaloverrides::OverridesResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BAFF40;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BAFF40;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternaloverrides::OverridesResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sirinluinternaloverrides::OverridesResponse::hash_value(sirinluinternaloverrides::OverridesResponse *this)
{
  sirinluexternal::UserParse **v1;
  sirinluexternal::UserParse **v2;
  uint64_t v3;
  sirinluexternal::UserParse *v4;

  v1 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sub_1C1F75D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F75DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F75E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F75E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F75EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F75F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F75F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F75FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F7603C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F760A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F76110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F761A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALSubwordTokenChainReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUINTERNALSubwordToken *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (SIRINLUINTERNALSubwordToken *)a1[1];
        a1[1] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUINTERNALSubwordToken);
    objc_msgSend(a1, "addSubwordTokens:", v18);
    if (!PBReaderPlaceMark() || (SIRINLUINTERNALSubwordTokenReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSubwordTokenReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_39;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_41:
        v32 = 12;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            PBReaderReadString();
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v18;

          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v26 = 0;
        v27 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v22 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
            goto LABEL_43;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_45:
        v32 = 8;
      }
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALLVCOverrideValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALMultilingualVariant *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALMultilingualVariant);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALMultilingualVariantReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F77EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;

  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a19);
  std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);

  _Unwind_Resume(a1);
}

void sub_1C1F78134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F78224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F78384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F78484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F785CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F7870C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F7889C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F78AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C1F78C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F78E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F7900C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB71AC](a1 + 112);
  return a1;
}

uint64_t SIRICOMMONFloatValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALMENTION_DETECTORMentionDetectorResponseReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
    objc_msgSend(a1, "addMentions:", v17);
    if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALUsoEntityIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  SIRICOMMONStringValue *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 64) |= 4u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_59;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_61;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_61:
        v43 = 32;
        goto LABEL_74;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 56;
LABEL_30:
        v26 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_75;
      case 4u:
        v27 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v27, a2) & 1) == 0)
          goto LABEL_77;
        goto LABEL_36;
      case 5u:
        v27 = objc_alloc_init(SIRICOMMONDoubleValue);
        objc_storeStrong((id *)(a1 + 40), v27);
        if (PBReaderPlaceMark() && (SIRICOMMONDoubleValueReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_75:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_77:

        return 0;
      case 6u:
        v28 = 0;
        v29 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 64) |= 8u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v19 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_65:
        v43 = 48;
        goto LABEL_74;
      case 7u:
        v33 = 0;
        v34 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v19 |= (unint64_t)(v37 & 0x7F) << v33;
            if (v37 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_69:
        v43 = 16;
        goto LABEL_74;
      case 8u:
        v38 = 0;
        v39 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v19 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_73:
        v43 = 20;
LABEL_74:
        *(_DWORD *)(a1 + v43) = v19;
        goto LABEL_75;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_75;
    }
  }
}

uint64_t SIRINLUEXTERNALSpanReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  int *v5;
  int *v6;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  SIRINLUEXTERNALUsoGraph *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t result;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = 0x1EF71B000uLL;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  v10 = 0x1EF71B000uLL;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v4;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v5))
        break;
      v17 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v18 = v12++ >= 9;
      if (v18)
      {
        v13 = 0;
        v19 = *(unsigned __int8 *)(a2 + *v6);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v19 = *(unsigned __int8 *)(a2 + *v6);
    if (*(_BYTE *)(a2 + *v6))
      v13 = 0;
LABEL_14:
    v20 = v13 & 7;
    if (v19 || v20 == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v13 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 56;
        goto LABEL_23;
      case 2u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 48;
LABEL_23:
        v24 = *(void **)(a1 + v23);
        *(_QWORD *)(a1 + v23) = v22;

        goto LABEL_78;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + *(int *)(v8 + 1408)) |= 4u;
        while (2)
        {
          v28 = *v4;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v18 = v26++ >= 9;
              if (v18)
              {
                LODWORD(v27) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          LODWORD(v27) = 0;
LABEL_60:
        v53 = 64;
        goto LABEL_65;
      case 4u:
        v32 = 0;
        v33 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + *(int *)(v8 + 1408)) |= 2u;
        while (2)
        {
          v34 = *v4;
          v35 = *(_QWORD *)(a2 + v34);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v35);
            *(_QWORD *)(a2 + v34) = v36;
            v27 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v18 = v33++ >= 9;
              if (v18)
              {
                LODWORD(v27) = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          LODWORD(v27) = 0;
LABEL_64:
        v53 = 40;
LABEL_65:
        *(_DWORD *)(a1 + v53) = v27;
        goto LABEL_78;
      case 5u:
        v38 = v2;
        v39 = v10;
        v40 = v8;
        v41 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong((id *)(a1 + 72), v41);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUsoGraphReadFrom((id *)&v41->super.super.isa, a2))
        {
          PBReaderRecallMark();

          v8 = v40;
          v10 = v39;
          v2 = v38;
LABEL_78:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }

        return 0;
      case 6u:
        *(_BYTE *)(a1 + *(int *)(v8 + 1408)) |= 1u;
        v42 = *v4;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v5))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v6) = 1;
          v44 = 0;
        }
        *(_QWORD *)(a1 + 32) = v44;
        goto LABEL_78;
      case 7u:
        if (v20 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5) && !*(_BYTE *)(a2 + *v6))
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            while (1)
            {
              v49 = *v4;
              v50 = *(_QWORD *)(a2 + v49);
              v51 = v50 + 1;
              if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v5))
                break;
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v50);
              *(_QWORD *)(a2 + v49) = v51;
              v48 |= (unint64_t)(v52 & 0x7F) << v46;
              if (v52 < 0)
              {
                v46 += 7;
                v18 = v47++ >= 9;
                if (!v18)
                  continue;
              }
              goto LABEL_56;
            }
            *(_BYTE *)(a2 + *v6) = 1;
LABEL_56:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v54 = 0;
          v55 = 0;
          v56 = 0;
          while (1)
          {
            v57 = *v4;
            v58 = *(_QWORD *)(a2 + v57);
            v59 = v58 + 1;
            if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v5))
              break;
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v58);
            *(_QWORD *)(a2 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              v18 = v55++ >= 9;
              if (!v18)
                continue;
            }
            goto LABEL_75;
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_75:
          PBRepeatedInt32Add();
        }
        goto LABEL_78;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_78;
    }
  }
}

void sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this)
{
  sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7BB00A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoEntityIdentifier::readFrom(sirinluexternal::UsoEntityIdentifier *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 56) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              goto LABEL_98;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
          }
          while (!v14);
LABEL_73:
          LODWORD(v26) = 0;
          goto LABEL_98;
        }
        v59 = 0;
        v60 = 0;
        v26 = 0;
        if (v22 <= v21)
          v22 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v61 = v21 + 1;
            v62 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v61;
            v26 |= (unint64_t)(v62 & 0x7F) << v59;
            if (v62 < 0)
            {
              v59 += 7;
              v21 = v61;
              v14 = v60++ > 8;
              if (v14)
                goto LABEL_73;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v26) = 0;
          }
          break;
        }
LABEL_98:
        *((_DWORD *)this + 12) = v26;
        goto LABEL_20;
      case 2u:
        v29 = (_QWORD *)operator new();
        v29[1] = 0;
        v29[2] = 0;
        *v29 = 0;
        v30 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v29;
        if (v30)
          goto LABEL_37;
        goto LABEL_38;
      case 3u:
        v31 = (_QWORD *)operator new();
        v31[1] = 0;
        v31[2] = 0;
        *v31 = 0;
        v30 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v31;
        if (v30)
LABEL_37:
          std::default_delete<std::string>::operator()[abi:ne180100](v30);
LABEL_38:
        PB::Reader::read();
        goto LABEL_20;
      case 4u:
        v32 = operator new();
        *(_QWORD *)v32 = &off_1E7BB0538;
        *(_QWORD *)(v32 + 8) = 0;
        v33 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v32;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v32 = *((_QWORD *)this + 2);
        }
        goto LABEL_43;
      case 5u:
        v32 = operator new();
        *(_QWORD *)v32 = &off_1E7BB0C18;
        *(_DWORD *)(v32 + 16) = 0;
        v34 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v32;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v32 = *((_QWORD *)this + 3);
        }
LABEL_43:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v32 + 16))(v32, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 6u:
        *((_BYTE *)this + 56) |= 8u;
        v35 = *((_QWORD *)a2 + 1);
        v36 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          do
          {
            v41 = v35 + 1;
            *((_QWORD *)a2 + 1) = v35 + 1;
            v42 = *(_BYTE *)(v37 + v35);
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if ((v42 & 0x80) == 0)
              goto LABEL_102;
            v38 += 7;
            v35 = v41;
            v14 = v39++ > 8;
          }
          while (!v14);
LABEL_80:
          LODWORD(v40) = 0;
          goto LABEL_102;
        }
        v63 = 0;
        v64 = 0;
        v40 = 0;
        if (v36 <= v35)
          v36 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v36 == v35)
          {
            LODWORD(v40) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v65 = v35 + 1;
            v66 = *(_BYTE *)(v37 + v35);
            *((_QWORD *)a2 + 1) = v65;
            v40 |= (unint64_t)(v66 & 0x7F) << v63;
            if (v66 < 0)
            {
              v63 += 7;
              v35 = v65;
              v14 = v64++ > 8;
              if (v14)
                goto LABEL_80;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v40) = 0;
          }
          break;
        }
LABEL_102:
        *((_DWORD *)this + 13) = v40;
        goto LABEL_20;
      case 7u:
        *((_BYTE *)this + 56) |= 1u;
        v43 = *((_QWORD *)a2 + 1);
        v44 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          do
          {
            v49 = v43 + 1;
            *((_QWORD *)a2 + 1) = v43 + 1;
            v50 = *(_BYTE *)(v45 + v43);
            v48 |= (unint64_t)(v50 & 0x7F) << v46;
            if ((v50 & 0x80) == 0)
              goto LABEL_106;
            v46 += 7;
            v43 = v49;
            v14 = v47++ > 8;
          }
          while (!v14);
LABEL_87:
          LODWORD(v48) = 0;
          goto LABEL_106;
        }
        v67 = 0;
        v68 = 0;
        v48 = 0;
        if (v44 <= v43)
          v44 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v44 == v43)
          {
            LODWORD(v48) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v69 = v43 + 1;
            v70 = *(_BYTE *)(v45 + v43);
            *((_QWORD *)a2 + 1) = v69;
            v48 |= (unint64_t)(v70 & 0x7F) << v67;
            if (v70 < 0)
            {
              v67 += 7;
              v43 = v69;
              v14 = v68++ > 8;
              if (v14)
                goto LABEL_87;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v48) = 0;
          }
          break;
        }
LABEL_106:
        *((_DWORD *)this + 10) = v48;
        goto LABEL_20;
      case 8u:
        *((_BYTE *)this + 56) |= 2u;
        v51 = *((_QWORD *)a2 + 1);
        v52 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
        {
          v54 = 0;
          v55 = 0;
          v56 = 0;
          do
          {
            v57 = v51 + 1;
            *((_QWORD *)a2 + 1) = v51 + 1;
            v58 = *(_BYTE *)(v53 + v51);
            v56 |= (unint64_t)(v58 & 0x7F) << v54;
            if ((v58 & 0x80) == 0)
              goto LABEL_110;
            v54 += 7;
            v51 = v57;
            v14 = v55++ > 8;
          }
          while (!v14);
LABEL_94:
          LODWORD(v56) = 0;
          goto LABEL_110;
        }
        v71 = 0;
        v72 = 0;
        v56 = 0;
        if (v52 <= v51)
          v52 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v52 == v51)
          {
            LODWORD(v56) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v73 = v51 + 1;
            v74 = *(_BYTE *)(v53 + v51);
            *((_QWORD *)a2 + 1) = v73;
            v56 |= (unint64_t)(v74 & 0x7F) << v71;
            if (v74 < 0)
            {
              v71 += 7;
              v51 = v73;
              v14 = v72++ > 8;
              if (v14)
                goto LABEL_94;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v56) = 0;
          }
          break;
        }
LABEL_110:
        *((_DWORD *)this + 11) = v56;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t sirinluexternal::UsoEntityIdentifier::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  char v6;

  v3 = this;
  if ((*(_BYTE *)(this + 56) & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 32))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_BYTE *)(v3 + 56);
  if ((v6 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v6 = *(_BYTE *)(v3 + 56);
    if ((v6 & 1) == 0)
    {
LABEL_13:
      if ((v6 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(v3 + 56) & 1) == 0)
  {
    goto LABEL_13;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 56) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::UsoEntityIdentifier::formatText(sirinluexternal::UsoEntityIdentifier *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "group_index");
    v5 = *((_BYTE *)this + 56);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "interpretation_group");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "namespace_a");
  if ((*((_BYTE *)this + 56) & 4) != 0)
    PB::TextFormatter::format(a2, "node_index");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "probability");
  if ((*((_BYTE *)this + 56) & 8) != 0)
    PB::TextFormatter::format(a2, "source_component");
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB00A0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB00A0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

sirinluexternal::UsoEntityIdentifier *sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this, const sirinluexternal::UsoEntityIdentifier *a2)
{
  uint64_t *v4;
  int v5;
  std::string *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  siricommon::StringValue *v16;
  siricommon::StringValue *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  int v26;
  int v27;

  *(_QWORD *)this = &off_1E7BB00A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
    v5 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 56) = 4;
    *((_DWORD *)this + 12) = v5;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v6 = (std::string *)operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
    }
    v10 = *v4;
    *v4 = (uint64_t)v7;
    if (v10)
      std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v11 = (std::string *)operator new();
    v12 = v11;
    v13 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    }
    v15 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v15)
      std::default_delete<std::string>::operator()[abi:ne180100](v15);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v16 = (siricommon::StringValue *)operator new();
    v17 = siricommon::StringValue::StringValue(v16, *((const siricommon::StringValue **)a2 + 2));
    v18 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v19 = operator new();
    v20 = *((_QWORD *)a2 + 3);
    *(_QWORD *)v19 = &off_1E7BB0C18;
    *(_DWORD *)(v19 + 16) = 0;
    if ((*(_BYTE *)(v20 + 16) & 1) != 0)
    {
      v21 = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v19 + 16) = 1;
      *(_QWORD *)(v19 + 8) = v21;
    }
    v22 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v19;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v23 = *((_BYTE *)a2 + 56);
  if ((v23 & 8) == 0)
  {
    if ((*((_BYTE *)a2 + 56) & 1) == 0)
      goto LABEL_25;
LABEL_29:
    v27 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 56) |= 1u;
    *((_DWORD *)this + 10) = v27;
    if ((*((_BYTE *)a2 + 56) & 2) == 0)
      return this;
    goto LABEL_26;
  }
  v26 = *((_DWORD *)a2 + 13);
  *((_BYTE *)this + 56) |= 8u;
  *((_DWORD *)this + 13) = v26;
  v23 = *((_BYTE *)a2 + 56);
  if ((v23 & 1) != 0)
    goto LABEL_29;
LABEL_25:
  if ((v23 & 2) != 0)
  {
LABEL_26:
    v24 = *((_DWORD *)a2 + 11);
    *((_BYTE *)this + 56) |= 2u;
    *((_DWORD *)this + 11) = v24;
  }
  return this;
}

uint64_t sirinluexternal::UsoEntityIdentifier::operator=(uint64_t a1, const sirinluexternal::UsoEntityIdentifier *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const sirinluexternal::UsoEntityIdentifier *)a1 != a2)
  {
    sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&v8);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::UsoEntityIdentifier *a2, sirinluexternal::UsoEntityIdentifier *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)a2 + 6);
  v9 = *((_QWORD *)this + 6);
  *((double *)this + 6) = result;
  *((_QWORD *)a2 + 6) = v9;
  LODWORD(v7) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LODWORD(v7) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v7;
  return result;
}

uint64_t sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E7BB00A0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t sirinluexternal::UsoEntityIdentifier::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&v8);
  }
  return a1;
}

BOOL sirinluexternal::UsoEntityIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_BYTE *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  v13 = *(unsigned __int8 **)(a1 + 32);
  v14 = *(unsigned __int8 ***)(a2 + 32);
  if (v13)
  {
    if (!v14)
      return 0;
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)v13[23];
    else
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = *(unsigned __int8 **)(a2 + 32);
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        return 0;
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15)
          goto LABEL_40;
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a2 + 16);
  if (v20)
  {
    if (!v21 || (siricommon::StringValue::operator==(v20, v21) & 1) == 0)
      return 0;
  }
  else if (v21)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a2 + 24);
  if (v22)
  {
    if (!v23)
      return 0;
    if ((*(_BYTE *)(v22 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v23 + 16) & 1) == 0 || *(double *)(v22 + 8) != *(double *)(v23 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v23 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v23)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  result = (v5 & 2) == 0;
  if ((v4 & 2) == 0)
    return result;
  return (v5 & 2) != 0 && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
}

unint64_t sirinluexternal::UsoEntityIdentifier::hash_value(sirinluexternal::UsoEntityIdentifier *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_BYTE *)this + 56);
  if ((v2 & 4) != 0)
    v3 = *((unsigned int *)this + 12);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v7 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  else
    v7 = 0;
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v9 = std::__string_hash<char>::operator()[abi:ne180100](v9);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((double *)this + 3);
  if (v10 == 0.0)
  {
LABEL_17:
    if ((v2 & 8) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(*(_QWORD *)&v10 + 16) & 1) == 0)
  {
    v10 = 0.0;
    goto LABEL_17;
  }
  v10 = *(double *)(*(_QWORD *)&v10 + 8);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v2 & 8) == 0)
  {
LABEL_18:
    v11 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_19;
LABEL_25:
    v12 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_20;
LABEL_26:
    v13 = 0;
    return v5 ^ v3 ^ v7 ^ v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_24:
  v11 = *((int *)this + 13);
  if ((v2 & 1) == 0)
    goto LABEL_25;
LABEL_19:
  v12 = *((unsigned int *)this + 10);
  if ((v2 & 2) == 0)
    goto LABEL_26;
LABEL_20:
  v13 = *((unsigned int *)this + 11);
  return v5 ^ v3 ^ v7 ^ v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13;
}

_QWORD *sirinluexternal::UsoEntityIdentifier::makeNamespaceA(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntityIdentifier::makeProbability(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0C18;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALPLUMSpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this)
{
  sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB00F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::readFrom(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_25;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_20;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              goto LABEL_75;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
          }
          while (!v14);
LABEL_57:
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
        v47 = 0;
        v48 = 0;
        v26 = 0;
        if (v22 <= v21)
          v22 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v49 = v21 + 1;
            v50 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v49;
            v26 |= (unint64_t)(v50 & 0x7F) << v47;
            if (v50 < 0)
            {
              v47 += 7;
              v21 = v49;
              v14 = v48++ > 8;
              if (v14)
                goto LABEL_57;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v26) = 0;
          }
          break;
        }
LABEL_75:
        *((_DWORD *)this + 5) = v26;
        goto LABEL_20;
      case 2u:
        *((_BYTE *)this + 28) |= 1u;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_79;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_64:
          LODWORD(v34) = 0;
          goto LABEL_79;
        }
        v51 = 0;
        v52 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v53 = v29 + 1;
            v54 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v53;
            v34 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              v29 = v53;
              v14 = v52++ > 8;
              if (v14)
                goto LABEL_64;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_79:
        *((_DWORD *)this + 4) = v34;
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_83;
            v40 += 7;
            v37 = v43;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_71:
          LODWORD(v42) = 0;
          goto LABEL_83;
        }
        v55 = 0;
        v56 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        break;
      case 4u:
        v45 = (_QWORD *)operator new();
        v45[1] = 0;
        v45[2] = 0;
        *v45 = 0;
        v46 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v45;
        if (v46)
          std::default_delete<std::string>::operator()[abi:ne180100](v46);
        PB::Reader::read();
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v38 == v37)
      {
        LODWORD(v42) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_83;
      }
      v57 = v37 + 1;
      v58 = *(_BYTE *)(v39 + v37);
      *((_QWORD *)a2 + 1) = v57;
      v42 |= (unint64_t)(v58 & 0x7F) << v55;
      if ((v58 & 0x80) == 0)
        break;
      v55 += 7;
      v37 = v57;
      v14 = v56++ > 8;
      if (v14)
        goto LABEL_71;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v42) = 0;
LABEL_83:
    *((_DWORD *)this + 6) = v42;
LABEL_20:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
LABEL_4:
    this = PB::Writer::writeVarInt(a2);
LABEL_5:
  if (*(_QWORD *)(v3 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::formatText(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_5;
LABEL_9:
    PB::TextFormatter::format(a2, "os_release");
    if ((*((_BYTE *)this + 28) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
  PB::TextFormatter::format(a2, "ncv_number");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "patch_number");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB00F0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB00F0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

sirinluinternalsnlp_intermediate::SNLPAssetVersion *sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2)
{
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7BB00F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  v4 = *((_BYTE *)a2 + 28);
  if ((v4 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v5 = 2;
    *((_BYTE *)this + 28) = 2;
    *((_DWORD *)this + 5) = v6;
    v4 = *((_BYTE *)a2 + 28);
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 4);
    v5 |= 1u;
    *((_BYTE *)this + 28) = v5;
    *((_DWORD *)this + 4) = v7;
    v4 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v4 & 4) != 0)
  {
    v8 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) = v5 | 4;
    *((_DWORD *)this + 6) = v8;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v9 = (std::string *)operator new();
    v10 = v9;
    v11 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    v13 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v10;
    if (v13)
      std::default_delete<std::string>::operator()[abi:ne180100](v13);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if ((const sirinluinternalsnlp_intermediate::SNLPAssetVersion *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion((sirinluinternalsnlp_intermediate::SNLPAssetVersion *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    v8 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion((sirinluinternalsnlp_intermediate::SNLPAssetVersion *)&v6);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2, sirinluinternalsnlp_intermediate::SNLPAssetVersion *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  v7 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7BB00F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;

  if (a1 != a2)
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_OWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 16) = v3;
    v9 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = &off_1E7BB00F0;
    v8[1] = v6;
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion((sirinluinternalsnlp_intermediate::SNLPAssetVersion *)v8);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2 && v3)
  {
    v5 = *(unsigned __int8 *)(v2 + 23);
    if ((v5 & 0x80u) == 0)
      v6 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    else
      v6 = *(unsigned __int8 **)(v2 + 8);
    v7 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    v8 = (char)v7;
    if ((char)v7 < 0)
      v7 = *(unsigned __int8 **)(v3 + 8);
    if (v6 != v7)
      return 0;
    if (v8 >= 0)
      v9 = *(unsigned __int8 **)(a2 + 8);
    else
      v9 = *(unsigned __int8 **)v3;
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v2, v9, *(_QWORD *)(v2 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v2 + 23))
    {
      v10 = v5 - 1;
      do
      {
        v12 = *(unsigned __int8 *)v2++;
        v11 = v12;
        v14 = *v9++;
        v13 = v14;
        v16 = v10-- != 0;
      }
      while (v11 == v13 && v16);
      if (v11 != v13)
        return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::hash_value(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  v1 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 6);
    goto LABEL_8;
  }
LABEL_7:
  v3 = 0;
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v2 ^ v1 ^ v3 ^ v4;
}

void sub_1C1F7EDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F7EF90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F7F060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F7F128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C1F7F1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F7F2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C1F7F40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F7F54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SIRINLUINTERNALTokenChain *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
LABEL_26:
        v20 = *(SIRINLUINTERNALTokenChain **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(SIRINLUINTERNALTokenChain);
    objc_storeStrong((id *)(a1 + 24), v20);
    if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensorReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
          objc_msgSend(a1, "addFeature:", v26);

        goto LABEL_69;
      }
      if ((_DWORD)v18 == 2)
        break;
      if ((_DWORD)v18 == 1)
      {
        if (v16 != 2)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (1)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
              break;
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_68;
          }
LABEL_67:
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_68:
          PBRepeatedUInt32Add();
          goto LABEL_69;
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_33;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          PBRepeatedUInt32Add();
        }
LABEL_52:
        PBReaderRecallMark();
        goto LABEL_69;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_69:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if (v16 != 2)
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          goto LABEL_67;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if (v44 < 0)
        {
          v39 += 7;
          v14 = v40++ >= 9;
          if (!v14)
            continue;
        }
        goto LABEL_68;
      }
    }
    result = PBReaderPlaceMark();
    if (!(_DWORD)result)
      return result;
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if (v32 < 0)
        {
          v27 += 7;
          v14 = v28++ >= 9;
          if (!v14)
            continue;
        }
        goto LABEL_49;
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
      PBRepeatedUInt32Add();
    }
    goto LABEL_52;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALTaskReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SIRICOMMONDoubleValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(SIRICOMMONDoubleValue);
        objc_storeStrong(a1 + 1, v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONDoubleValueReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_34;
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_31:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong(a1 + 2, v18);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v18->super.super.isa, a2))
      goto LABEL_34;
    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternal::TokenChain::~TokenChain(sirinluinternal::TokenChain *this)
{
  sirinluinternal::TokenChain::~TokenChain(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BB0140;
  v4 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::TokenChain::readFrom(sirinluinternal::TokenChain *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 24);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) != 3)
        break;
      PB::PtrVector<sirinluinternal::Token>::emplace_back<>(v8);
      v24 = *(_QWORD *)(*((_QWORD *)this + 4) - 8);
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v24 + 16))(v24, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_34:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if ((_DWORD)v21 == 2)
    {
      v25 = (_QWORD *)operator new();
      v25[1] = 0;
      v25[2] = 0;
      *v25 = 0;
      v23 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v25;
      if (!v23)
      {
LABEL_33:
        PB::Reader::read();
        goto LABEL_34;
      }
    }
    else
    {
      if ((_DWORD)v21 != 1)
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_34;
      }
      v22 = (_QWORD *)operator new();
      v22[1] = 0;
      v22[2] = 0;
      *v22 = 0;
      v23 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v22;
      if (!v23)
        goto LABEL_33;
    }
    std::default_delete<std::string>::operator()[abi:ne180100](v23);
    goto LABEL_33;
  }
  return v4 == 0;
}

_QWORD *sirinluinternal::TokenChain::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if (this[2])
    this = (_QWORD *)PB::Writer::write();
  if (v3[1])
    this = (_QWORD *)PB::Writer::write();
  v5 = (const PB::Base **)v3[3];
  v4 = (const PB::Base **)v3[4];
  while (v5 != v4)
  {
    v6 = *v5++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternal::TokenChain::formatText(sirinluinternal::TokenChain *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = (uint64_t *)*((_QWORD *)this + 4);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "tokens");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::TokenChain::TokenChain(sirinluinternal::TokenChain *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0140;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0140;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluinternal::TokenChain *sirinluinternal::TokenChain::TokenChain(sirinluinternal::TokenChain *this, const sirinluinternal::TokenChain *a2)
{
  uint64_t *v4;
  sirinluinternal::Token ***v5;
  std::string *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  const sirinluinternal::Token **v16;
  const sirinluinternal::Token **v17;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB0140;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (sirinluinternal::Token ***)((char *)this + 24);
  *((_QWORD *)this + 5) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v6 = (std::string *)operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
    }
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (v10)
      std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v11 = (std::string *)operator new();
    v12 = v11;
    v13 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    }
    v15 = *v4;
    *v4 = (uint64_t)v12;
    if (v15)
      std::default_delete<std::string>::operator()[abi:ne180100](v15);
  }
  v17 = (const sirinluinternal::Token **)*((_QWORD *)a2 + 3);
  v16 = (const sirinluinternal::Token **)*((_QWORD *)a2 + 4);
  while (v17 != v16)
    PB::PtrVector<sirinluinternal::Token>::emplace_back<sirinluinternal::Token const&>(v5, *v17++);
  return this;
}

uint64_t sirinluinternal::TokenChain::operator=(uint64_t a1, const sirinluinternal::TokenChain *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluinternal::TokenChain *)a1 != a2)
  {
    sirinluinternal::TokenChain::TokenChain((sirinluinternal::TokenChain *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternal::TokenChain::~TokenChain((sirinluinternal::TokenChain *)&v7);
  }
  return a1;
}

_QWORD *sirinluinternal::swap(_QWORD *this, sirinluinternal::TokenChain *a2, sirinluinternal::TokenChain *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  return this;
}

_QWORD *sirinluinternal::TokenChain::TokenChain(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E7BB0140;
  *(_OWORD *)(a1 + 1) = 0u;
  v4 = a1 + 1;
  *(_OWORD *)(a1 + 3) = 0u;
  a1[5] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 3);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return a1;
}

uint64_t sirinluinternal::TokenChain::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sirinluinternal::TokenChain::TokenChain(&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternal::TokenChain::~TokenChain((sirinluinternal::TokenChain *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::TokenChain::operator==(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;

  v4 = (unsigned __int8 *)a1[2];
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 16);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_20;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_20:
  v12 = (unsigned __int8 *)a1[1];
  v13 = *(unsigned __int8 ***)(a2 + 8);
  if (!v12)
  {
    if (!v13)
      return PB::PtrVector<sirinluinternal::Token>::operator==(a1[3], a1[4], *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
    return 0;
  }
  if (!v13)
    return 0;
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = v13[1];
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = *(unsigned __int8 **)(a2 + 8);
  else
    v18 = *v13;
  if ((v14 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1)))
      return PB::PtrVector<sirinluinternal::Token>::operator==(a1[3], a1[4], *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
    return 0;
  }
  if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14)
        return PB::PtrVector<sirinluinternal::Token>::operator==(a1[3], a1[4], *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    return 0;
  }
  return PB::PtrVector<sirinluinternal::Token>::operator==(a1[3], a1[4], *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
}

unint64_t sirinluinternal::TokenChain::hash_value(sirinluinternal::TokenChain *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  sirinluinternal::Token **v6;
  sirinluinternal::Token **v7;
  uint64_t v8;
  sirinluinternal::Token *v9;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v7 = (sirinluinternal::Token **)*((_QWORD *)this + 3);
  v6 = (sirinluinternal::Token **)*((_QWORD *)this + 4);
  if (v7 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v7++;
      v8 ^= sirinluinternal::Token::hash_value(v9);
    }
    while (v7 != v6);
  }
  return v5 ^ v3 ^ v8;
}

void sirinluexternalnlu_router::NLRoutingGenAIMetadata::~NLRoutingGenAIMetadata(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::readFrom(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26 + 1;
            v39 = *(_BYTE *)(v27 + v26);
            *((_QWORD *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v26 = v38;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19 + 1;
            v35 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v34;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v19 = v34;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_59:
          v3 = v34;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::formatText(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "prescribed_tool");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "query_type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB0190;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB0190;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata(uint64_t this, const sirinluexternalnlu_router::NLRoutingGenAIMetadata *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_1E7BB0190;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_1E7BB0190;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v10[0] = &off_1E7BB0190;
    v11 = 0;
    v3 = *(_BYTE *)(a2 + 16);
    if ((v3 & 1) != 0)
    {
      v4 = *(_DWORD *)(a2 + 8);
      LOBYTE(v11) = 1;
      v5 = 3;
      if ((v3 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
      {
LABEL_4:
        v6 = *(_DWORD *)(a2 + 12);
        LOBYTE(v11) = v5;
LABEL_7:
        v7 = v11;
        v11 = *(_DWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v6;
        *(_DWORD *)(a1 + 16) = v7;
        v10[1] = v8;
        PB::Base::~Base((PB::Base *)v10);
        return a1;
      }
    }
    v6 = 0;
    goto LABEL_7;
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E7BB0190;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double sirinluexternalnlu_router::swap(sirinluexternalnlu_router *this, sirinluexternalnlu_router::NLRoutingGenAIMetadata *a2, sirinluexternalnlu_router::NLRoutingGenAIMetadata *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  result = *((double *)a2 + 1);
  v5 = *((_QWORD *)this + 1);
  *((double *)this + 1) = result;
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

double sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0190;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0190;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

BOOL sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::hash_value(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((int *)this + 2);
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t SIRINLUEXTERNALRewriteMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = &off_1E7BB0200;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v9 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 72);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::readFrom(sirinluinternalmention_resolver::MentionResolverRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 16);
  v9 = (uint64_t **)((char *)this + 96);
  v10 = (uint64_t **)((char *)this + 40);
  v11 = (uint64_t **)((char *)this + 72);
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_22:
      if ((v15 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB0CB8;
          *(_QWORD *)(v24 + 24) = 0;
          v25 = *((_QWORD *)this + 17);
          *((_QWORD *)this + 17) = v24;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v24 = *((_QWORD *)this + 17);
          }
          goto LABEL_58;
        case 2u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB0CB8;
          *(_QWORD *)(v24 + 24) = 0;
          v26 = *((_QWORD *)this + 16);
          *((_QWORD *)this + 16) = v24;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v24 = *((_QWORD *)this + 16);
          }
          goto LABEL_58;
        case 3u:
          v27 = (_QWORD *)operator new();
          v27[1] = 0;
          v27[2] = 0;
          *v27 = 0;
          v28 = *((_QWORD *)this + 18);
          *((_QWORD *)this + 18) = v27;
          if (v28)
            goto LABEL_31;
          goto LABEL_32;
        case 4u:
          v29 = (_QWORD *)operator new();
          v29[1] = 0;
          v29[2] = 0;
          *v29 = 0;
          v28 = *((_QWORD *)this + 21);
          *((_QWORD *)this + 21) = v29;
          if (v28)
LABEL_31:
            std::default_delete<std::string>::operator()[abi:ne180100](v28);
LABEL_32:
          PB::Reader::read();
          goto LABEL_61;
        case 5u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB0140;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *(_QWORD *)(v24 + 40) = 0;
          v30 = *((_QWORD *)this + 19);
          *((_QWORD *)this + 19) = v24;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v24 = *((_QWORD *)this + 19);
          }
          goto LABEL_58;
        case 6u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB1DD0;
          *(_DWORD *)(v24 + 64) = 0;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          v31 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v24;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v24 = *((_QWORD *)this + 8);
          }
          goto LABEL_58;
        case 7u:
          PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>(v11);
          v32 = *((_QWORD *)this + 10);
          goto LABEL_57;
        case 8u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v10);
          v32 = *((_QWORD *)this + 6);
          goto LABEL_57;
        case 9u:
          *((_BYTE *)this + 176) |= 1u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_83;
              v36 += 7;
              v33 = v39;
              v18 = v37++ > 8;
            }
            while (!v18);
LABEL_72:
            v38 = 0;
            goto LABEL_83;
          }
          v51 = 0;
          v52 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              v38 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v53 = v33 + 1;
              v54 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v53;
              v38 |= (unint64_t)(v54 & 0x7F) << v51;
              if (v54 < 0)
              {
                v51 += 7;
                v33 = v53;
                v18 = v52++ > 8;
                if (v18)
                  goto LABEL_72;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v38 = 0;
            }
            break;
          }
LABEL_83:
          *((_QWORD *)this + 15) = v38;
          goto LABEL_61;
        case 0xAu:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v9);
          v32 = *((_QWORD *)this + 13);
          goto LABEL_57;
        case 0xBu:
          *((_BYTE *)this + 176) |= 2u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_87;
              v44 += 7;
              v41 = v47;
              v18 = v45++ > 8;
            }
            while (!v18);
LABEL_79:
            v46 = 0;
            goto LABEL_87;
          }
          v55 = 0;
          v56 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v57 = v41 + 1;
              v58 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v57;
              v46 |= (unint64_t)(v58 & 0x7F) << v55;
              if (v58 < 0)
              {
                v55 += 7;
                v41 = v57;
                v18 = v56++ > 8;
                if (v18)
                  goto LABEL_79;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v46 = 0;
            }
            break;
          }
LABEL_87:
          *((_QWORD *)this + 20) = v46;
          goto LABEL_61;
        case 0xCu:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BAE468;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_QWORD *)(v24 + 56) = 0;
          v49 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v24;
          if (v49)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            v24 = *((_QWORD *)this + 1);
          }
          goto LABEL_58;
        case 0xDu:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
          v32 = *((_QWORD *)this + 3);
LABEL_57:
          v24 = *(_QWORD *)(v32 - 8);
LABEL_58:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v24 + 16))(v24, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_61;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_22;
      v19 += 7;
      v2 = v21;
      v18 = v20++ > 8;
    }
    while (!v18);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_61:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base **v11;
  const PB::Base **v12;
  const PB::Base *v13;
  const PB::Base **v14;
  const PB::Base **v15;
  const PB::Base *v16;
  const PB::Base *v17;
  const PB::Base **v18;
  const PB::Base **v19;
  const PB::Base *v20;

  v3 = this;
  v4 = *(const PB::Base **)(this + 136);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 128);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  if (*(_QWORD *)(v3 + 144))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 168))
    this = PB::Writer::write();
  v6 = *(const PB::Base **)(v3 + 152);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(const PB::Base **)(v3 + 64);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = *(const PB::Base ***)(v3 + 72);
  v9 = *(const PB::Base ***)(v3 + 80);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  v11 = *(const PB::Base ***)(v3 + 40);
  v12 = *(const PB::Base ***)(v3 + 48);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  if ((*(_BYTE *)(v3 + 176) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v14 = *(const PB::Base ***)(v3 + 96);
  v15 = *(const PB::Base ***)(v3 + 104);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  if ((*(_BYTE *)(v3 + 176) & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v17 = *(const PB::Base **)(v3 + 8);
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17);
  v19 = *(const PB::Base ***)(v3 + 16);
  v18 = *(const PB::Base ***)(v3 + 24);
  while (v19 != v18)
  {
    v20 = *v19++;
    this = PB::Writer::writeSubmessage(a2, v20);
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::formatText(sirinluinternalmention_resolver::MentionResolverRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "cdm_request_id");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "contextual_spans");
  }
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  v10 = (uint64_t *)*((_QWORD *)this + 6);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "detected_mentions");
  }
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "embedding_tensor");
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t *)*((_QWORD *)this + 10);
  while (v13 != v14)
  {
    v15 = *v13++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "entity_candidates");
  }
  v16 = (uint64_t *)*((_QWORD *)this + 12);
  v17 = (uint64_t *)*((_QWORD *)this + 13);
  while (v16 != v17)
  {
    v18 = *v16++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "matching_spans");
  }
  if ((*((_BYTE *)this + 176) & 1) != 0)
    PB::TextFormatter::format(a2, "max_candidates");
  v19 = *((_QWORD *)this + 16);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, a2, "nlu_request_id");
  v20 = *((_QWORD *)this + 17);
  if (v20)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, a2, "request_id");
  if (*((_QWORD *)this + 18))
    PB::TextFormatter::format();
  v21 = *((_QWORD *)this + 19);
  if (v21)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v21 + 32))(v21, a2, "token_chain");
  if ((*((_BYTE *)this + 176) & 2) != 0)
    PB::TextFormatter::format(a2, "turn_index");
  if (*((_QWORD *)this + 21))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BAE4B8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 72) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F83868(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0200;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0200;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

sirinluinternalmention_resolver::MentionResolverRequest *sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(sirinluinternalmention_resolver::MentionResolverRequest *this, const sirinluinternalmention_resolver::MentionResolverRequest *a2)
{
  sirinluexternal::RequestID **v4;
  sirinluinternal::MatchingSpan ***v5;
  sirinluexternal::EntityCandidate ***v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  sirinluinternal::TokenChain *v24;
  sirinluinternal::TokenChain *v25;
  uint64_t v26;
  char **v27;
  sirinluinternal::NLv4EmbeddingTensor *v28;
  uint64_t v29;
  const sirinluexternal::EntityCandidate **v30;
  const sirinluexternal::EntityCandidate **v31;
  const sirinluinternal::MatchingSpan **v32;
  const sirinluinternal::MatchingSpan **v33;
  uint64_t v34;
  const sirinluinternal::MatchingSpan **v35;
  const sirinluinternal::MatchingSpan **i;
  uint64_t v37;
  sirinluexternal::RequestID *v38;
  sirinluexternal::RequestID *v39;
  sirinluexternal::RequestID *v40;
  const sirinluinternal::MatchingSpan **v41;
  const sirinluinternal::MatchingSpan **j;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::RequestID **)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = (sirinluinternal::MatchingSpan ***)((char *)this + 40);
  *(_OWORD *)((char *)this + 72) = 0u;
  v6 = (sirinluexternal::EntityCandidate ***)((char *)this + 72);
  *(_QWORD *)this = &off_1E7BB0200;
  *((_OWORD *)this + 8) = 0u;
  v7 = (uint64_t *)((char *)this + 128);
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 9) = 0u;
  if (*((_QWORD *)a2 + 17))
  {
    v8 = operator new();
    v9 = sirinluexternal::UUID::UUID(v8, *((const sirinluexternal::UUID **)a2 + 17));
    v10 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 16))
  {
    v11 = operator new();
    v12 = sirinluexternal::UUID::UUID(v11, *((const sirinluexternal::UUID **)a2 + 16));
    v13 = *v7;
    *v7 = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 18))
  {
    v14 = (std::string *)operator new();
    v15 = v14;
    v16 = (__int128 *)*((_QWORD *)a2 + 18);
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
    }
    else
    {
      v17 = *v16;
      v14->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
    }
    v18 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v15;
    if (v18)
      std::default_delete<std::string>::operator()[abi:ne180100](v18);
  }
  if (*((_QWORD *)a2 + 21))
  {
    v19 = (std::string *)operator new();
    v20 = v19;
    v21 = (__int128 *)*((_QWORD *)a2 + 21);
    if (*((char *)v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
    }
    else
    {
      v22 = *v21;
      v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
    }
    v23 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v20;
    if (v23)
      std::default_delete<std::string>::operator()[abi:ne180100](v23);
  }
  if (*((_QWORD *)a2 + 19))
  {
    v24 = (sirinluinternal::TokenChain *)operator new();
    v25 = sirinluinternal::TokenChain::TokenChain(v24, *((const sirinluinternal::TokenChain **)a2 + 19));
    v26 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v27 = (char **)operator new();
    v28 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v27, *((char ***)a2 + 8));
    v29 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v28;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  v30 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 9);
  v31 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 10);
  while (v30 != v31)
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>(v6, *v30++);
  v32 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 5);
  v33 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 6);
  while (v32 != v33)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v5, *v32++);
  if ((*((_BYTE *)a2 + 176) & 1) != 0)
  {
    v34 = *((_QWORD *)a2 + 15);
    *((_BYTE *)this + 176) |= 1u;
    *((_QWORD *)this + 15) = v34;
  }
  v35 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 12);
  for (i = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 13); v35 != i; ++v35)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((sirinluinternal::MatchingSpan ***)this + 12, *v35);
  if ((*((_BYTE *)a2 + 176) & 2) != 0)
  {
    v37 = *((_QWORD *)a2 + 20);
    *((_BYTE *)this + 176) |= 2u;
    *((_QWORD *)this + 20) = v37;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v38 = (sirinluexternal::RequestID *)operator new();
    v39 = sirinluexternal::RequestID::RequestID(v38, *((const sirinluexternal::RequestID **)a2 + 1));
    v40 = *v4;
    *v4 = v39;
    if (v40)
      (*(void (**)(sirinluexternal::RequestID *))(*(_QWORD *)v40 + 8))(v40);
  }
  v41 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 2);
  for (j = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 3); v41 != j; ++v41)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((sirinluinternal::MatchingSpan ***)this + 2, *v41);
  return this;
}

uint64_t PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>(sirinluexternal::EntityCandidate ***a1, const sirinluexternal::EntityCandidate *a2)
{
  sirinluexternal::EntityCandidate *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::EntityCandidate **v7;
  sirinluexternal::EntityCandidate **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::EntityCandidate **v14;
  unint64_t v15;
  sirinluexternal::EntityCandidate **v16;
  sirinluexternal::EntityCandidate **v17;
  sirinluexternal::EntityCandidate *v18;
  int64x2_t v19;
  sirinluexternal::EntityCandidate **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::EntityCandidate *)operator new();
  result = (uint64_t)sirinluexternal::EntityCandidate::EntityCandidate(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::EntityCandidate **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::EntityCandidate **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::EntityCandidate **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F83EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::operator=(uint64_t a1, const sirinluinternalmention_resolver::MentionResolverRequest *a2)
{
  sirinluinternalmention_resolver::MentionResolverRequest *v3;
  _BYTE v5[184];

  if ((const sirinluinternalmention_resolver::MentionResolverRequest *)a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest((sirinluinternalmention_resolver::MentionResolverRequest *)v5, a2);
    sirinluinternalmention_resolver::swap(a1, (sirinluinternalmention_resolver::MentionResolverRequest *)v5, v3);
    sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest((sirinluinternalmention_resolver::MentionResolverRequest *)v5);
  }
  return a1;
}

uint64_t sirinluinternalmention_resolver::swap(uint64_t this, sirinluinternalmention_resolver::MentionResolverRequest *a2, sirinluinternalmention_resolver::MentionResolverRequest *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(_DWORD *)(this + 176);
  *(_DWORD *)(this + 176) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  v4 = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v4;
  v5 = *(_QWORD *)(this + 128);
  *(_QWORD *)(this + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v5;
  v6 = *(_QWORD *)(this + 144);
  *(_QWORD *)(this + 144) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v6;
  v7 = *(_QWORD *)(this + 168);
  *(_QWORD *)(this + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v7;
  v8 = *(_QWORD *)(this + 152);
  *(_QWORD *)(this + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v8;
  v9 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v15;
  v16 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v16;
  v17 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v17;
  v19 = *(_QWORD *)(this + 112);
  v18 = *(_QWORD *)(this + 120);
  v20 = *((_QWORD *)a2 + 15);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *(_QWORD *)(this + 120) = v20;
  *((_QWORD *)a2 + 14) = v19;
  *((_QWORD *)a2 + 15) = v18;
  v21 = *(_QWORD *)(this + 160);
  *(_QWORD *)(this + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v21;
  v22 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v22;
  v23 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v23;
  v24 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v24;
  v25 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v25;
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = (_QWORD *)(a1 + 72);
  *(_QWORD *)a1 = &off_1E7BB0200;
  *(_OWORD *)(a1 + 128) = 0u;
  v6 = (uint64_t *)(a1 + 128);
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v8 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v10 = *v6;
  *v6 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v12 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v11;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v14 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v13;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100](v14);
  v15 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v16 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v19 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::operator=(uint64_t a1, uint64_t a2)
{
  sirinluinternalmention_resolver::MentionResolverRequest *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest((uint64_t)v5, a2);
    sirinluinternalmention_resolver::swap(a1, (sirinluinternalmention_resolver::MentionResolverRequest *)v5, v3);
    sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest((sirinluinternalmention_resolver::MentionResolverRequest *)v5);
  }
  return a1;
}

BOOL sirinluinternalmention_resolver::MentionResolverRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a2 + 136);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a2 + 128);
  if (v6)
  {
    if (!v7 || !sirinluexternal::UUID::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(unsigned __int8 **)(a1 + 144);
  v9 = *(unsigned __int8 ***)(a2 + 144);
  if (v8)
  {
    if (!v9)
      return 0;
    v10 = v8[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v8[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v9[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = *(unsigned __int8 **)(a2 + 144);
    else
      v14 = *v9;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v8, v14, *((_QWORD *)v8 + 1)))
        return 0;
    }
    else if (v8[23])
    {
      while (*v8 == *v14)
      {
        ++v8;
        ++v14;
        if (!--v10)
          goto LABEL_28;
      }
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
LABEL_28:
  v15 = *(unsigned __int8 **)(a1 + 168);
  v16 = *(unsigned __int8 **)(a2 + 168);
  if (v15)
  {
    if (!v16 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v15, v16))
      return 0;
  }
  else if (v16)
  {
    return 0;
  }
  v17 = *(_QWORD **)(a1 + 152);
  v18 = *(_QWORD *)(a2 + 152);
  if (v17)
  {
    if (!v18 || !sirinluinternal::TokenChain::operator==(v17, v18))
      return 0;
  }
  else if (v18)
  {
    return 0;
  }
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a2 + 64);
  if (v19)
  {
    if (!v20 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v19, v20))
      return 0;
  }
  else if (v20)
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluexternal::EntityCandidate>::operator==((uint64_t *)(a1 + 72), *(uint64_t **)(a2 + 72), *(_QWORD *)(a2 + 80))|| !PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 40), *(uint64_t **)(a2 + 40), *(_QWORD *)(a2 + 48)))
  {
    return 0;
  }
  v21 = *(_BYTE *)(a1 + 176);
  v22 = *(_BYTE *)(a2 + 176);
  if ((v21 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 176) & 1) == 0 || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 176) & 1) != 0)
  {
    return 0;
  }
  if (PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 96), *(uint64_t **)(a2 + 96), *(_QWORD *)(a2 + 104)))
  {
    if ((v21 & 2) != 0)
    {
      if ((v22 & 2) == 0 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
        return 0;
    }
    else if ((v22 & 2) != 0)
    {
      return 0;
    }
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(_QWORD *)(a2 + 8);
    if (v23)
    {
      if (!v24 || !sirinluexternal::RequestID::operator==(v23, v24))
        return 0;
      return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 16), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    if (!v24)
      return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 16), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  return 0;
}

uint64_t PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::EntityCandidate::operator==(*(uint64_t **)(v6 - 8), v7);
    if ((_DWORD)result)
      v9 = v6 == v4;
    else
      v9 = 1;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternalmention_resolver::MentionResolverRequest::hash_value(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  sirinluinternal::TokenChain *v16;
  sirinluinternal::NLv4EmbeddingTensor *v17;
  sirinluexternal::EntityCandidate **v18;
  sirinluexternal::EntityCandidate **v19;
  uint64_t v20;
  sirinluexternal::EntityCandidate *v21;
  sirinluinternal::MatchingSpan **v22;
  sirinluinternal::MatchingSpan **v23;
  uint64_t v24;
  sirinluinternal::MatchingSpan *v25;
  uint64_t v26;
  uint64_t v27;
  sirinluinternal::MatchingSpan **v28;
  sirinluinternal::MatchingSpan **v29;
  uint64_t v30;
  sirinluinternal::MatchingSpan *v31;
  uint64_t v32;
  sirinluexternal::RequestID *v33;
  unint64_t v34;
  sirinluinternal::MatchingSpan **v35;
  sirinluinternal::MatchingSpan **v36;
  uint64_t v37;
  sirinluinternal::MatchingSpan *v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v2 = *((_QWORD *)this + 17);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 16);
  if (!v7)
  {
    v11 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(v7 + 28) & 1) == 0)
  {
    v8 = 0;
    if ((*(_BYTE *)(v7 + 28) & 2) != 0)
      goto LABEL_14;
LABEL_18:
    v9 = 0;
    if ((*(_BYTE *)(v7 + 28) & 4) != 0)
      goto LABEL_15;
LABEL_19:
    v10 = 0;
    goto LABEL_20;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 28) & 2) == 0)
    goto LABEL_18;
LABEL_14:
  v9 = *(_QWORD *)(v7 + 16);
  if ((*(_BYTE *)(v7 + 28) & 4) == 0)
    goto LABEL_19;
LABEL_15:
  v10 = *(int *)(v7 + 24);
LABEL_20:
  v11 = v9 ^ v8 ^ v10;
LABEL_21:
  v12 = *((_QWORD *)this + 18);
  if (v12)
    v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  else
    v13 = 0;
  v14 = *((_QWORD *)this + 21);
  if (v14)
    v15 = std::__string_hash<char>::operator()[abi:ne180100](v14);
  else
    v15 = 0;
  v16 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 19);
  if (v16)
    v42 = sirinluinternal::TokenChain::hash_value(v16);
  else
    v42 = 0;
  v17 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 8);
  if (v17)
    v41 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v17);
  else
    v41 = 0;
  v18 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 9);
  v19 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 10);
  if (v18 == v19)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = *v18++;
      v20 ^= sirinluexternal::EntityCandidate::hash_value(v21);
    }
    while (v18 != v19);
  }
  v22 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 5);
  v23 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 6);
  if (v22 == v23)
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *v22++;
      v24 ^= sirinluinternal::MatchingSpan::hash_value(v25);
    }
    while (v22 != v23);
  }
  v43 = v15;
  v44 = v13;
  v26 = v11;
  v27 = v6;
  if ((*((_BYTE *)this + 176) & 1) != 0)
    v40 = *((_QWORD *)this + 15);
  else
    v40 = 0;
  v28 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 12);
  v29 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 13);
  if (v28 == v29)
  {
    v30 = 0;
    if ((*((_BYTE *)this + 176) & 2) == 0)
    {
LABEL_50:
      v32 = 0;
      goto LABEL_53;
    }
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *v28++;
      v30 ^= sirinluinternal::MatchingSpan::hash_value(v31);
    }
    while (v28 != v29);
    if ((*((_BYTE *)this + 176) & 2) == 0)
      goto LABEL_50;
  }
  v32 = *((_QWORD *)this + 20);
LABEL_53:
  v33 = (sirinluexternal::RequestID *)*((_QWORD *)this + 1);
  if (v33)
    v34 = sirinluexternal::RequestID::hash_value(v33);
  else
    v34 = 0;
  v35 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  v36 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 3);
  if (v35 == v36)
  {
    v37 = 0;
  }
  else
  {
    v37 = 0;
    do
    {
      v38 = *v35++;
      v37 ^= sirinluinternal::MatchingSpan::hash_value(v38);
    }
    while (v35 != v36);
  }
  return v26 ^ v27 ^ v44 ^ v43 ^ v42 ^ v41 ^ v20 ^ v24 ^ v40 ^ v30 ^ v32 ^ v34 ^ v37;
}

_QWORD *sirinluinternalmention_resolver::MentionResolverRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[17])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[17];
    v1[17] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_resolver::MentionResolverRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[16])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[16];
    v1[16] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_resolver::MentionResolverRequest::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[19])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[19];
    v1[19] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_resolver::MentionResolverRequest::makeEmbeddingTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_resolver::MentionResolverRequest::makeCdmRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::SystemPrompted::~SystemPrompted(sirinluexternal::SystemPrompted *this)
{
  sirinluexternal::SystemPrompted::~SystemPrompted(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0250;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemPrompted::readFrom(sirinluexternal::SystemPrompted *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::SystemPrompted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::SystemPrompted::formatText(sirinluexternal::SystemPrompted *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "target");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::SystemPrompted::SystemPrompted(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0250;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0250;
  return this;
}

sirinluexternal::SystemPrompted *sirinluexternal::SystemPrompted::SystemPrompted(sirinluexternal::SystemPrompted *this, const sirinluexternal::SystemPrompted *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BB0250;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::SystemPrompted::operator=(uint64_t a1, const sirinluexternal::SystemPrompted *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::SystemPrompted *)a1 != a2)
  {
    sirinluexternal::SystemPrompted::SystemPrompted((sirinluexternal::SystemPrompted *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::SystemPrompted::~SystemPrompted((sirinluexternal::SystemPrompted *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::SystemPrompted *a2, sirinluexternal::SystemPrompted *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::SystemPrompted::SystemPrompted(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB0250;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::SystemPrompted::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::SystemPrompted *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB0250;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::SystemPrompted::~SystemPrompted((sirinluexternal::SystemPrompted *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::SystemPrompted::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::SystemPrompted::hash_value(sirinluexternal::SystemPrompted *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::SystemPrompted::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemPrompted::makeTarget(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalspanmatch::SpanMatchResponse::~SpanMatchResponse(sirinluinternalspanmatch::SpanMatchResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BB02A0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB02A0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB02A0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::readFrom(sirinluinternalspanmatch::SpanMatchResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::formatText(sirinluinternalspanmatch::SpanMatchResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "matching_spans");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(_QWORD *this)
{
  *this = &off_1E7BB02A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BB02A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalspanmatch::SpanMatchResponse *sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(sirinluinternalspanmatch::SpanMatchResponse *this, const sirinluinternalspanmatch::SpanMatchResponse *a2)
{
  sirinluinternal::MatchingSpan ***v3;
  const sirinluinternal::MatchingSpan **v4;
  const sirinluinternal::MatchingSpan **v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluinternal::MatchingSpan ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB02A0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 1);
  v5 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v3, *v4++);
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::operator=(uint64_t a1, const sirinluinternalspanmatch::SpanMatchResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluinternalspanmatch::SpanMatchResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluinternalspanmatch::SpanMatchResponse *)a1 != a2)
  {
    sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse((sirinluinternalspanmatch::SpanMatchResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BB02A0;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternalspanmatch::swap(_QWORD *this, sirinluinternalspanmatch::SpanMatchResponse *a2, sirinluinternalspanmatch::SpanMatchResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BB02A0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BB02A0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluinternalspanmatch::SpanMatchResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BB02A0;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BB02A0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalspanmatch::SpanMatchResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::hash_value(sirinluinternalspanmatch::SpanMatchResponse *this)
{
  sirinluinternal::MatchingSpan **v1;
  sirinluinternal::MatchingSpan **v2;
  uint64_t v3;
  sirinluinternal::MatchingSpan *v4;

  v1 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 1);
  v2 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluinternal::MatchingSpan::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t SIRINLUINTERNALComponentOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  SIRINLUINTERNALOverrideValue *v38;
  void *v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_50;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 32) = v22;
        goto LABEL_63;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_58:
        *(_BYTE *)(a1 + 56) = v28 != 0;
        goto LABEL_63;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_62:
        *(_QWORD *)(a1 + 8) = v34;
        goto LABEL_63;
      case 5u:
        v38 = objc_alloc_init(SIRINLUINTERNALOverrideValue);
        objc_storeStrong((id *)(a1 + 48), v38);
        if (!PBReaderPlaceMark()
          || !SIRINLUINTERNALOverrideValueReadFrom((id *)&v38->super.super.isa, a2))
        {
          goto LABEL_65;
        }
        goto LABEL_48;
      case 6u:
        v38 = objc_alloc_init(SIRINLUINTERNALNluRequestRule);
        objc_msgSend((id)a1, "addNluRequestRules:", v38);
        if (PBReaderPlaceMark() && SIRINLUINTERNALNluRequestRuleReadFrom((char *)v38, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_63:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_65:

        return 0;
      case 7u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_50:
        v39 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_63;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4SpanFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F87320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F8737C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F873E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F87450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F874BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F8753C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F87598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F875E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F87650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F876BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL SIRINLUEXTERNALUtteranceSpanReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startIndex;
              goto LABEL_69;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startIndex;
              goto LABEL_72;
            }
          }
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startIndex;
          goto LABEL_70;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endIndex;
              goto LABEL_69;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endIndex;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endIndex;
          goto LABEL_70;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 0x20u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startUnicodeScalarIndex;
              goto LABEL_69;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startUnicodeScalarIndex;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startUnicodeScalarIndex;
          goto LABEL_70;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endUnicodeScalarIndex;
              goto LABEL_69;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endUnicodeScalarIndex;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endUnicodeScalarIndex;
          goto LABEL_70;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 0x10u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startMilliSeconds;
              goto LABEL_69;
            }
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startMilliSeconds;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startMilliSeconds;
          goto LABEL_70;
        case 6u:
          v45 = 0;
          v46 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v19 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endMilliSeconds;
          goto LABEL_70;
        }
        v45 += 7;
        v23 = v46++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endMilliSeconds;
          goto LABEL_72;
        }
      }
      v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endMilliSeconds;
LABEL_69:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_70:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_72:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPairReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALRewriteUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  SIRINLUEXTERNALUUID *v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_33;
        goto LABEL_38;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v19;

        goto LABEL_36;
      case 4u:
        v18 = objc_alloc_init(SIRINLUINTERNALRewriteToken);
        objc_msgSend((id)a1, "addAsrUtteranceTokens:", v18);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALRewriteTokenReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_38;
        goto LABEL_33;
      case 5u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_36;
      case 6u:
        v18 = objc_alloc_init(SIRINLUINTERNALToken);
        objc_msgSend((id)a1, "addNluInternalTokens:", v18);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALTokenReadFrom(v18, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

void sirinluinternalcati::CATIRequest::~CATIRequest(sirinluinternalcati::CATIRequest *this)
{
  sirinluinternalcati::CATIRequest::~CATIRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BB0328;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalcati::CATIRequest::readFrom(sirinluinternalcati::CATIRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB1DD0;
          *(_DWORD *)(v20 + 64) = 0;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          v21 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = *((_QWORD *)this + 1);
          }
          goto LABEL_34;
        case 2u:
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          v23 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v22;
          if (v23)
            goto LABEL_28;
          goto LABEL_29;
        case 3u:
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          v23 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v24;
          if (v23)
LABEL_28:
            std::default_delete<std::string>::operator()[abi:ne180100](v23);
LABEL_29:
          PB::Reader::read();
          goto LABEL_37;
        case 4u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB0CB8;
          *(_QWORD *)(v20 + 24) = 0;
          v25 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v20;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v20 = *((_QWORD *)this + 4);
          }
          goto LABEL_34;
        case 5u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB16E8;
          *(_DWORD *)(v20 + 148) = 0;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          *(_OWORD *)(v20 + 40) = 0u;
          *(_OWORD *)(v20 + 56) = 0u;
          *(_OWORD *)(v20 + 72) = 0u;
          *(_OWORD *)(v20 + 88) = 0u;
          *(_OWORD *)(v20 + 104) = 0u;
          *(_QWORD *)(v20 + 128) = 0;
          *(_QWORD *)(v20 + 136) = 0;
          v26 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v20;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v20 = *((_QWORD *)this + 5);
          }
LABEL_34:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_37;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_37:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t sirinluinternalcati::CATIRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (v3[3])
    this = PB::Writer::write();
  if (v3[2])
    this = PB::Writer::write();
  v5 = (const PB::Base *)v3[4];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[5];
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6);
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::formatText(sirinluinternalcati::CATIRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embeddings");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "request_id");
  v7 = *((_QWORD *)this + 5);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "turn_input");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalcati::CATIRequest::CATIRequest(sirinluinternalcati::CATIRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0328;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0328;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluinternalcati::CATIRequest *sirinluinternalcati::CATIRequest::CATIRequest(sirinluinternalcati::CATIRequest *this, const sirinluinternalcati::CATIRequest *a2)
{
  sirinluinternal::NLv4EmbeddingTensor **v4;
  char **v5;
  sirinluinternal::NLv4EmbeddingTensor *v6;
  sirinluinternal::NLv4EmbeddingTensor *v7;
  std::string *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  sirinluexternal::TurnInput *v21;
  sirinluexternal::TurnInput *v22;
  uint64_t v23;

  *(_QWORD *)this = &off_1E7BB0328;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (char **)operator new();
    v6 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v5, *((char ***)a2 + 1));
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v13 = (std::string *)operator new();
    v14 = v13;
    v15 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v13->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v16;
    }
    v17 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v14;
    if (v17)
      std::default_delete<std::string>::operator()[abi:ne180100](v17);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v18 = operator new();
    v19 = sirinluexternal::UUID::UUID(v18, *((const sirinluexternal::UUID **)a2 + 4));
    v20 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v21 = (sirinluexternal::TurnInput *)operator new();
    v22 = sirinluexternal::TurnInput::TurnInput(v21, *((const sirinluexternal::TurnInput **)a2 + 5));
    v23 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v22;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::operator=(uint64_t a1, const sirinluinternalcati::CATIRequest *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluinternalcati::CATIRequest *)a1 != a2)
  {
    sirinluinternalcati::CATIRequest::CATIRequest((sirinluinternalcati::CATIRequest *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternalcati::CATIRequest::~CATIRequest((sirinluinternalcati::CATIRequest *)&v7);
  }
  return a1;
}

_QWORD *sirinluinternalcati::swap(_QWORD *this, sirinluinternalcati::CATIRequest *a2, sirinluinternalcati::CATIRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::CATIRequest(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E7BB0328;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[1];
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a2[3];
  a2[3] = 0;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  v8 = a2[2];
  a2[2] = 0;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
    std::default_delete<std::string>::operator()[abi:ne180100](v9);
  v10 = a2[4];
  a2[4] = 0;
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a2[5];
  a2[5] = 0;
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

uint64_t sirinluinternalcati::CATIRequest::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternalcati::CATIRequest::CATIRequest((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternalcati::CATIRequest::~CATIRequest((sirinluinternalcati::CATIRequest *)&v7);
  }
  return a1;
}

uint64_t sirinluinternalcati::CATIRequest::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (unsigned __int8 *)a1[3];
  v7 = (unsigned __int8 **)a2[3];
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = (unsigned __int8 *)a2[3];
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  v13 = (unsigned __int8 *)a1[2];
  v14 = (unsigned __int8 **)a2[2];
  if (v13)
  {
    if (!v14)
      return 0;
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)v13[23];
    else
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = (unsigned __int8 *)a2[2];
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        return 0;
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15)
          goto LABEL_40;
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  v20 = a1[4];
  v21 = a2[4];
  if (!v20)
  {
    if (!v21)
      goto LABEL_47;
    return 0;
  }
  if (!v21 || !sirinluexternal::UUID::operator==(v20, v21))
    return 0;
LABEL_47:
  v22 = a1[5];
  v23 = a2[5];
  result = (v22 | v23) == 0;
  if (v22)
  {
    if (v23)
      return sirinluexternal::TurnInput::operator==(a1[5], v23);
  }
  return result;
}

unint64_t sirinluinternalcati::CATIRequest::hash_value(sirinluinternalcati::CATIRequest *this)
{
  sirinluinternal::NLv4EmbeddingTensor *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 1);
  if (v2)
    v3 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v7 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  else
    v7 = 0;
  v8 = *((_QWORD *)this + 4);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(v8 + 28) & 1) == 0)
  {
    v9 = 0;
    if ((*(_BYTE *)(v8 + 28) & 2) != 0)
      goto LABEL_13;
LABEL_17:
    v10 = 0;
    if ((*(_BYTE *)(v8 + 28) & 4) != 0)
      goto LABEL_14;
LABEL_18:
    v11 = 0;
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 28) & 2) == 0)
    goto LABEL_17;
LABEL_13:
  v10 = *(_QWORD *)(v8 + 16);
  if ((*(_BYTE *)(v8 + 28) & 4) == 0)
    goto LABEL_18;
LABEL_14:
  v11 = *(int *)(v8 + 24);
LABEL_19:
  v12 = v10 ^ v9 ^ v11;
LABEL_20:
  v13 = *((_QWORD *)this + 5);
  if (v13)
    v13 = sirinluexternal::TurnInput::hash_value((sirinluexternal::TurnInput *)v13);
  return v5 ^ v3 ^ v7 ^ v12 ^ v13;
}

_QWORD *sirinluinternalcati::CATIRequest::makeEmbeddings(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalcati::CATIRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalcati::CATIRequest::makeTurnInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB16E8;
    *(_DWORD *)(v2 + 148) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALSUBWORD_EMBEDDINGSubwordEmbeddingResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSubwordTokenChain *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSubwordTokenChain);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALSubwordTokenChainReadFrom(v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUINTERNALEMBEDDINGEmbeddingTensorOutput);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark()
      || (SIRINLUINTERNALEMBEDDINGEmbeddingTensorOutputReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this)
{
  sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7BB0378;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::readFrom(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAE468;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_QWORD *)(v20 + 56) = 0;
        v21 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 3);
        }
        break;
      case 2u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0140;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_QWORD *)(v20 + 40) = 0;
        v22 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *((_QWORD *)this + 4);
        }
        break;
      case 3u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB13B0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_QWORD *)(v20 + 104) = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0CB8;
        *(_QWORD *)(v20 + 24) = 0;
        v24 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 2);
        }
        break;
      default:
        goto LABEL_19;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_34:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_34;
  return result;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[4];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[1];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[2];
  if (v7)
    return PB::Writer::writeSubmessage(a2, v7);
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::formatText(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "nl_context");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "nlu_request_id");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "request_id");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "token_chain");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0378;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0378;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this, const sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a2)
{
  sirinluexternal::NLContext **v4;
  sirinluexternal::RequestID *v5;
  sirinluexternal::RequestID *v6;
  uint64_t v7;
  sirinluinternal::TokenChain *v8;
  sirinluinternal::TokenChain *v9;
  uint64_t v10;
  sirinluexternal::NLContext *v11;
  sirinluexternal::NLContext *v12;
  sirinluexternal::NLContext *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_1E7BB0378;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::NLContext **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = (sirinluexternal::RequestID *)operator new();
    v6 = sirinluexternal::RequestID::RequestID(v5, *((const sirinluexternal::RequestID **)a2 + 3));
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v8 = (sirinluinternal::TokenChain *)operator new();
    v9 = sirinluinternal::TokenChain::TokenChain(v8, *((const sirinluinternal::TokenChain **)a2 + 4));
    v10 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v11 = (sirinluexternal::NLContext *)operator new();
    v12 = sirinluexternal::NLContext::NLContext(v11, *((const sirinluexternal::SystemDialogAct ****)a2 + 1));
    v13 = *v4;
    *v4 = v12;
    if (v13)
      (*(void (**)(sirinluexternal::NLContext *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v14 = operator new();
    v15 = sirinluexternal::UUID::UUID(v14, *((const sirinluexternal::UUID **)a2 + 2));
    v16 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::operator=(uint64_t a1, const sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)a1 != a2)
  {
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest((sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest((sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)v6);
  }
  return a1;
}

_QWORD *sirinluinternalcontextual_span_matcher::swap(_QWORD *this, sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a2, sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BB0378;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = a2[3];
  a2[3] = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[4];
  a2[4] = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[1];
  a2[1] = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a2[2];
  a2[2] = 0;
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest((sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)v6);
  }
  return a1;
}

BOOL sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v4 = a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluexternal::RequestID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (_QWORD *)a1[4];
  v7 = a2[4];
  if (v6)
  {
    if (!v7 || !sirinluinternal::TokenChain::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = (uint64_t *)a1[1];
  v9 = a2[1];
  if (!v8)
  {
    if (!v9)
      goto LABEL_14;
    return 0;
  }
  if (!v9 || (sirinluexternal::NLContext::operator==(v8, v9) & 1) == 0)
    return 0;
LABEL_14:
  v10 = a1[2];
  v11 = a2[2];
  result = (v10 | v11) == 0;
  if (v10)
  {
    if (v11)
      return sirinluexternal::UUID::operator==(a1[2], v11);
  }
  return result;
}

unint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::hash_value(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this)
{
  sirinluexternal::RequestID *v2;
  unint64_t v3;
  sirinluinternal::TokenChain *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (sirinluexternal::RequestID *)*((_QWORD *)this + 3);
  if (v2)
    v3 = sirinluexternal::RequestID::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 4);
  if (v4)
    v5 = sirinluinternal::TokenChain::hash_value(v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::NLContext::hash_value((sirinluexternal::NLContext *)v6);
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 28) & 1) != 0)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 28) & 2) != 0)
      {
LABEL_12:
        v9 = *(_QWORD *)(v7 + 16);
        if ((*(_BYTE *)(v7 + 28) & 4) != 0)
        {
LABEL_13:
          v10 = *(int *)(v7 + 24);
LABEL_17:
          v7 = v9 ^ v8 ^ v10;
          return v5 ^ v3 ^ v6 ^ v7;
        }
LABEL_16:
        v10 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      v8 = 0;
      if ((*(_BYTE *)(v7 + 28) & 2) != 0)
        goto LABEL_12;
    }
    v9 = 0;
    if ((*(_BYTE *)(v7 + 28) & 4) != 0)
      goto LABEL_13;
    goto LABEL_16;
  }
  return v5 ^ v3 ^ v6 ^ v7;
}

_QWORD *sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeNlContext(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB13B0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_QWORD *)(v2 + 104) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALCONTEXTUAL_SPAN_MATCHERContextualSpanMatcherRequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALRequestID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_32;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2))
          goto LABEL_35;
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALNLContext);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLContextReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_35;
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

void sirinluinternal::MentionDetectorSpanData::~MentionDetectorSpanData(sirinluinternal::MentionDetectorSpanData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluinternal::MentionDetectorSpanData::readFrom(sirinluinternal::MentionDetectorSpanData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::MentionDetectorSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(this + 8));
  return this;
}

uint64_t sirinluinternal::MentionDetectorSpanData::formatText(sirinluinternal::MentionDetectorSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "score", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternal::MentionDetectorSpanData::MentionDetectorSpanData(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB03C8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB03C8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double sirinluinternal::MentionDetectorSpanData::MentionDetectorSpanData(sirinluinternal::MentionDetectorSpanData *this, const sirinluinternal::MentionDetectorSpanData *a2)
{
  double result;

  *(_QWORD *)this = &off_1E7BB03C8;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB03C8;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t sirinluinternal::MentionDetectorSpanData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E7BB03C8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v8[0] = &off_1E7BB03C8;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::MentionDetectorSpanData *a2, sirinluinternal::MentionDetectorSpanData *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double sirinluinternal::MentionDetectorSpanData::MentionDetectorSpanData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BB03C8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BB03C8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

BOOL sirinluinternal::MentionDetectorSpanData::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return result;
}

uint64_t sirinluinternal::MentionDetectorSpanData::hash_value(sirinluinternal::MentionDetectorSpanData *this)
{
  if ((*((_BYTE *)this + 16) & 1) == 0)
    return 0;
  if (*((double *)this + 1) == 0.0)
    return 0;
  return *((_QWORD *)this + 1);
}

void sub_1C1F8D28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F8D398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F8D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F8D5D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F8D670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F8D7AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F8DBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C1F8DD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL SSUMetadata::Verify(SSUMetadata *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUMetadata *v5;
  uint64_t v6;
  SSUMetadata *v7;
  uint64_t v8;
  SSUMetadata *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  SSUMetadata *v15;
  unint64_t v16;
  SSUMetadata *v17;
  SSUMetadata *v18;
  uint64_t v19;
  SSUMetadata *v20;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (!result)
    return result;
  result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
  if (!result)
    return result;
  v5 = &this[-*(int *)this->var0];
  if (*(unsigned __int16 *)v5->var0 >= 5u && (v6 = *(unsigned __int16 *)v5[4].var0) != 0)
    v7 = &this[v6 + *(unsigned int *)this[v6].var0];
  else
    v7 = 0;
  result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
  if (!result)
    return result;
  v8 = *(int *)this->var0;
  v9 = &this[-v8];
  v10 = *(unsigned __int16 *)this[-v8].var0;
  if (v10 >= 7)
  {
    if (*(_WORD *)v9[6].var0)
    {
      result = 0;
      v11 = *((_QWORD *)a2 + 1);
      if (v11 < 9 || v11 - 8 < (unint64_t)this[*(unsigned __int16 *)v9[6].var0 - *(_QWORD *)a2].var0)
        return result;
    }
  }
  result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 8u);
  if (!result)
    return result;
  if (v10 < 9)
    goto LABEL_24;
  if (*(_WORD *)v9[8].var0)
  {
    result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)v9[8].var0 + *(unsigned int *)this[*(unsigned __int16 *)v9[8].var0].var0].var0, 4uLL, 0);
    if (!result)
      return result;
    v12 = *(int *)this->var0;
    if (*(unsigned __int16 *)this[-v12].var0 < 9u)
      goto LABEL_24;
    v13 = -v12;
  }
  else
  {
    v13 = -v8;
  }
  v14 = *(unsigned __int16 *)this[v13 + 8].var0;
  if (!v14 || (v15 = &this[v14 + *(unsigned int *)this[v14].var0], !*(_DWORD *)v15->var0))
  {
LABEL_24:
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 0xAu);
    if (result)
    {
      v18 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v18->var0 >= 0xBu && (v19 = *(unsigned __int16 *)v18[10].var0) != 0)
        v20 = &this[v19 + *(unsigned int *)this[v19].var0];
      else
        v20 = 0;
      result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v20->var0);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
    return result;
  }
  v16 = 0;
  v17 = v15 + 4;
  while (apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v17[*(unsigned int *)v17->var0].var0))
  {
    ++v16;
    v17 += 4;
    if (v16 >= *(unsigned int *)v15->var0)
      goto LABEL_24;
  }
  return 0;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUCategory>(apple::aiml::flatbuffers2::Verifier *a1, SSUCategory *a2)
{
  unint64_t v4;
  SSUCategory *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*(_DWORD *)a2->var0)
    return 1;
  v4 = 0;
  v5 = a2 + 4;
  do
  {
    result = SSUCategory::Verify(&v5[*(unsigned int *)v5->var0], a1);
    if (!result)
      break;
    ++v4;
    v5 += 4;
  }
  while (v4 < *(unsigned int *)a2->var0);
  return result;
}

void sirinluinternalssu::SSUResponse::~SSUResponse(sirinluinternalssu::SSUResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BB0418;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB0418;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB0418;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalssu::SSUResponse::readFrom(sirinluinternalssu::SSUResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalssu::SSUResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluinternalssu::SSUResponse::formatText(sirinluinternalssu::SSUResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "hypotheses");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalssu::SSUResponse::SSUResponse(_QWORD *this)
{
  *this = &off_1E7BB0418;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BB0418;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalssu::SSUResponse *sirinluinternalssu::SSUResponse::SSUResponse(sirinluinternalssu::SSUResponse *this, const sirinluinternalssu::SSUResponse *a2)
{
  sirinluexternal::UserParse ***v3;
  const sirinluexternal::UUID ***v4;
  const sirinluexternal::UUID ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB0418;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v3, *v4++);
  return this;
}

uint64_t sirinluinternalssu::SSUResponse::operator=(uint64_t a1, const sirinluinternalssu::SSUResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluinternalssu::SSUResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluinternalssu::SSUResponse *)a1 != a2)
  {
    sirinluinternalssu::SSUResponse::SSUResponse((sirinluinternalssu::SSUResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BB0418;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternalssu::swap(_QWORD *this, sirinluinternalssu::SSUResponse *a2, sirinluinternalssu::SSUResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluinternalssu::SSUResponse::SSUResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BB0418;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BB0418;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalssu::SSUResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluinternalssu::SSUResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BB0418;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BB0418;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalssu::SSUResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sirinluinternalssu::SSUResponse::hash_value(sirinluinternalssu::SSUResponse *this)
{
  sirinluexternal::UserParse **v1;
  sirinluexternal::UserParse **v2;
  uint64_t v3;
  sirinluexternal::UserParse *v4;

  v1 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t SIRINLUEXTERNALSSU_INFERENCESsuInferenceSetupReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALNluRequestRuleReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  SIRINLUINTERNALTurnInputRule *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_25;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_25;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
        goto LABEL_25;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_25:
        v19 = *(SIRINLUINTERNALTurnInputRule **)&a1[v18];
        *(_QWORD *)&a1[v18] = v17;
        goto LABEL_26;
      case 5u:
        v19 = objc_alloc_init(SIRINLUINTERNALTurnInputRule);
        objc_msgSend(a1, "addTurnInputRules:", v19);
        if (PBReaderPlaceMark() && SIRINLUINTERNALTurnInputRuleReadFrom((id *)&v19->super.super.isa, a2))
        {
          PBReaderRecallMark();
LABEL_26:

LABEL_27:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_27;
    }
  }
}

uint64_t SIRINLUEXTERNALUUIDReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v30 = 0;
          v31 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
              break;
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v20 |= (unint64_t)(v34 & 0x7F) << v30;
            if ((v34 & 0x80) == 0)
              goto LABEL_53;
            v30 += 7;
            v14 = v31++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_55;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_55:
          v36 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_45;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              v20 = 0;
              goto LABEL_47;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_47:
          v36 = 8;
        }
        *(_QWORD *)(a1 + v36) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::ResponseStatus::~ResponseStatus(sirinluexternal::ResponseStatus *this)
{
  sirinluexternal::ResponseStatus::~ResponseStatus(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0498;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::ResponseStatus::readFrom(sirinluexternal::ResponseStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 3)
      {
        v28 = (_QWORD *)operator new();
        v28[1] = 0;
        v28[2] = 0;
        *v28 = 0;
        v29 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v28;
        if (v29)
          std::default_delete<std::string>::operator()[abi:ne180100](v29);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          v30 = 0;
          v31 = 0;
          v24 = 0;
          if (v20 <= v19)
            v20 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_45;
            }
            v32 = v19 + 1;
            v33 = *(_BYTE *)(v21 + v19);
            *((_QWORD *)a2 + 1) = v32;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v19 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v24) = 0;
              goto LABEL_45;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v26 = *(_BYTE *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0)
              break;
            v22 += 7;
            v19 = v25;
            v14 = v23++ > 8;
            if (v14)
              goto LABEL_41;
          }
        }
LABEL_45:
        *((_DWORD *)this + 4) = v24;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::ResponseStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if ((*(_BYTE *)(this + 20) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternal::ResponseStatus::formatText(sirinluexternal::ResponseStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "code");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::ResponseStatus::ResponseStatus(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0498;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0498;
  return this;
}

sirinluexternal::ResponseStatus *sirinluexternal::ResponseStatus::ResponseStatus(sirinluexternal::ResponseStatus *this, const sirinluexternal::ResponseStatus *a2)
{
  uint64_t *v4;
  int v5;
  std::string *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7BB0498;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = 1;
    *((_DWORD *)this + 4) = v5;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v6 = (std::string *)operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
    }
    v10 = *v4;
    *v4 = (uint64_t)v7;
    if (v10)
      std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  return this;
}

const sirinluexternal::ResponseStatus *sirinluexternal::ResponseStatus::operator=(const sirinluexternal::ResponseStatus *a1, const sirinluexternal::ResponseStatus *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6[8];
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sirinluexternal::ResponseStatus::ResponseStatus((sirinluexternal::ResponseStatus *)v6, a2);
    v3 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v8;
    v8 = v3;
    v4 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v7;
    v7 = v4;
    sirinluexternal::ResponseStatus::~ResponseStatus((sirinluexternal::ResponseStatus *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::ResponseStatus *a2, sirinluexternal::ResponseStatus *a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

uint64_t sirinluexternal::ResponseStatus::ResponseStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7BB0498;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluexternal::ResponseStatus::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 16) = v3;
    v8[2] = v5;
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = &off_1E7BB0498;
    v8[1] = v6;
    sirinluexternal::ResponseStatus::~ResponseStatus((sirinluexternal::ResponseStatus *)v8);
  }
  return a1;
}

uint64_t sirinluexternal::ResponseStatus::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternal::ResponseStatus::hash_value(sirinluexternal::ResponseStatus *this)
{
  uint64_t v1;
  unint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
    v1 = *((int *)this + 4);
  else
    v1 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  return v2 ^ v1;
}

void sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BB04E8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::readFrom(sirinluinternalmention_detector::MentionDetectorRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB0CB8;
          *(_QWORD *)(v20 + 24) = 0;
          v21 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = *((_QWORD *)this + 5);
          }
          goto LABEL_45;
        case 2u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB0CB8;
          *(_QWORD *)(v20 + 24) = 0;
          v22 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v20;
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            v20 = *((_QWORD *)this + 4);
          }
          goto LABEL_45;
        case 3u:
          v23 = (_QWORD *)operator new();
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          v24 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v23;
          if (v24)
            goto LABEL_30;
          goto LABEL_31;
        case 4u:
          v25 = (_QWORD *)operator new();
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          v24 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v25;
          if (v24)
LABEL_30:
            std::default_delete<std::string>::operator()[abi:ne180100](v24);
LABEL_31:
          PB::Reader::read();
          goto LABEL_48;
        case 5u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB0140;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          *(_QWORD *)(v20 + 40) = 0;
          v26 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v20;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v20 = *((_QWORD *)this + 7);
          }
          goto LABEL_45;
        case 6u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BB1DD0;
          *(_DWORD *)(v20 + 64) = 0;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          v27 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v20;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v20 = *((_QWORD *)this + 2);
          }
          goto LABEL_45;
        case 7u:
          *((_BYTE *)this + 72) |= 1u;
          v28 = *((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          v30 = *(_QWORD *)a2;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = v28 + 1;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0)
                goto LABEL_63;
              v31 += 7;
              v28 = v34;
              v14 = v32++ > 8;
            }
            while (!v14);
LABEL_59:
            v33 = 0;
            goto LABEL_63;
          }
          v38 = 0;
          v39 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v29 == v28)
            {
              v33 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v40 = v28 + 1;
              v41 = *(_BYTE *)(v30 + v28);
              *((_QWORD *)a2 + 1) = v40;
              v33 |= (unint64_t)(v41 & 0x7F) << v38;
              if (v41 < 0)
              {
                v38 += 7;
                v28 = v40;
                v14 = v39++ > 8;
                if (v14)
                  goto LABEL_59;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v33 = 0;
            }
            break;
          }
LABEL_63:
          *((_QWORD *)this + 3) = v33;
          goto LABEL_48;
        case 8u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_1E7BAE468;
          *(_OWORD *)(v20 + 8) = 0u;
          *(_OWORD *)(v20 + 24) = 0u;
          *(_OWORD *)(v20 + 40) = 0u;
          *(_QWORD *)(v20 + 56) = 0;
          v36 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v20;
          if (v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            v20 = *((_QWORD *)this + 1);
          }
LABEL_45:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_48;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_48:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  if (*(_QWORD *)(v3 + 48))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 64))
    this = PB::Writer::write();
  v6 = *(const PB::Base **)(v3 + 56);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v8 = *(const PB::Base **)(v3 + 8);
  if (v8)
    return PB::Writer::writeSubmessage(a2, v8);
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::formatText(sirinluinternalmention_detector::MentionDetectorRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "cdm_request_id");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "embedding_tensor");
  if ((*((_BYTE *)this + 72) & 1) != 0)
    PB::TextFormatter::format(a2, "max_candidates");
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "nlu_request_id");
  v8 = *((_QWORD *)this + 5);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "request_id");
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  v9 = *((_QWORD *)this + 7);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "token_chain");
  if (*((_QWORD *)this + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E7BB04E8;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E7BB04E8;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  return result;
}

sirinluinternalmention_detector::MentionDetectorRequest *sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(sirinluinternalmention_detector::MentionDetectorRequest *this, const sirinluinternalmention_detector::MentionDetectorRequest *a2)
{
  sirinluexternal::RequestID **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  sirinluinternal::TokenChain *v22;
  sirinluinternal::TokenChain *v23;
  uint64_t v24;
  char **v25;
  sirinluinternal::NLv4EmbeddingTensor *v26;
  uint64_t v27;
  uint64_t v28;
  sirinluexternal::RequestID *v29;
  sirinluexternal::RequestID *v30;
  sirinluexternal::RequestID *v31;

  *(_QWORD *)this = &off_1E7BB04E8;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::RequestID **)((char *)this + 8);
  *((_OWORD *)this + 2) = 0u;
  v5 = (uint64_t *)((char *)this + 32);
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  if (*((_QWORD *)a2 + 5))
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, *((const sirinluexternal::UUID **)a2 + 5));
    v8 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v9 = operator new();
    v10 = sirinluexternal::UUID::UUID(v9, *((const sirinluexternal::UUID **)a2 + 4));
    v11 = *v5;
    *v5 = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v12 = (std::string *)operator new();
    v13 = v12;
    v14 = (__int128 *)*((_QWORD *)a2 + 6);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    v16 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v13;
    if (v16)
      std::default_delete<std::string>::operator()[abi:ne180100](v16);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v17 = (std::string *)operator new();
    v18 = v17;
    v19 = (__int128 *)*((_QWORD *)a2 + 8);
    if (*((char *)v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
    }
    else
    {
      v20 = *v19;
      v17->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v20;
    }
    v21 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v18;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100](v21);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v22 = (sirinluinternal::TokenChain *)operator new();
    v23 = sirinluinternal::TokenChain::TokenChain(v22, *((const sirinluinternal::TokenChain **)a2 + 7));
    v24 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v23;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v25 = (char **)operator new();
    v26 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v25, *((char ***)a2 + 2));
    v27 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v26;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v28 = *((_QWORD *)a2 + 3);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 3) = v28;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v29 = (sirinluexternal::RequestID *)operator new();
    v30 = sirinluexternal::RequestID::RequestID(v29, *((const sirinluexternal::RequestID **)a2 + 1));
    v31 = *v4;
    *v4 = v30;
    if (v31)
      (*(void (**)(sirinluexternal::RequestID *))(*(_QWORD *)v31 + 8))(v31);
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::operator=(uint64_t a1, const sirinluinternalmention_detector::MentionDetectorRequest *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  if ((const sirinluinternalmention_detector::MentionDetectorRequest *)a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest((sirinluinternalmention_detector::MentionDetectorRequest *)&v11, a2);
    v3 = v15;
    v4 = *(_OWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    v16 = v7;
    v14 = v4;
    v15 = v5;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v9;
    sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest((sirinluinternalmention_detector::MentionDetectorRequest *)&v11);
  }
  return a1;
}

uint64_t sirinluinternalmention_detector::swap(uint64_t this, sirinluinternalmention_detector::MentionDetectorRequest *a2, sirinluinternalmention_detector::MentionDetectorRequest *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *(_QWORD *)(this + 16);
  v10 = *(_QWORD *)(this + 24);
  v11 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 24) = v11;
  *((_QWORD *)a2 + 2) = v9;
  *((_QWORD *)a2 + 3) = v10;
  v12 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E7BB04E8;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v18 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return a1;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest((uint64_t)&v11, a2);
    v3 = v15;
    v4 = *(_OWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    v16 = v7;
    v14 = v4;
    v15 = v5;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v9;
    sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest((sirinluinternalmention_detector::MentionDetectorRequest *)&v11);
  }
  return a1;
}

BOOL sirinluinternalmention_detector::MentionDetectorRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  if (v6)
  {
    if (!v7 || !sirinluexternal::UUID::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(unsigned __int8 **)(a1 + 48);
  v9 = *(unsigned __int8 ***)(a2 + 48);
  if (v8)
  {
    if (!v9)
      return 0;
    v10 = v8[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v8[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v9[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = *(unsigned __int8 **)(a2 + 48);
    else
      v14 = *v9;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v8, v14, *((_QWORD *)v8 + 1)))
        return 0;
    }
    else if (v8[23])
    {
      while (*v8 == *v14)
      {
        ++v8;
        ++v14;
        if (!--v10)
          goto LABEL_28;
      }
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
LABEL_28:
  v15 = *(unsigned __int8 **)(a1 + 64);
  v16 = *(unsigned __int8 **)(a2 + 64);
  if (v15)
  {
    if (!v16 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v15, v16))
      return 0;
  }
  else if (v16)
  {
    return 0;
  }
  v17 = *(_QWORD **)(a1 + 56);
  v18 = *(_QWORD *)(a2 + 56);
  if (v17)
  {
    if (!v18 || !sirinluinternal::TokenChain::operator==(v17, v18))
      return 0;
  }
  else if (v18)
  {
    return 0;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a2 + 16);
  if (!v19)
  {
    if (!v20)
      goto LABEL_45;
    return 0;
  }
  if (!v20 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v19, v20))
    return 0;
LABEL_45:
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a2 + 8);
  result = (v21 | v22) == 0;
  if (v21)
  {
    if (v22)
      return sirinluexternal::RequestID::operator==(*(_QWORD *)(a1 + 8), v22);
  }
  return result;
}

unint64_t sirinluinternalmention_detector::MentionDetectorRequest::hash_value(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  sirinluinternal::TokenChain *v16;
  unint64_t v17;
  sirinluinternal::NLv4EmbeddingTensor *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 4);
  if (!v7)
  {
    v11 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(v7 + 28) & 1) == 0)
  {
    v8 = 0;
    if ((*(_BYTE *)(v7 + 28) & 2) != 0)
      goto LABEL_14;
LABEL_18:
    v9 = 0;
    if ((*(_BYTE *)(v7 + 28) & 4) != 0)
      goto LABEL_15;
LABEL_19:
    v10 = 0;
    goto LABEL_20;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 28) & 2) == 0)
    goto LABEL_18;
LABEL_14:
  v9 = *(_QWORD *)(v7 + 16);
  if ((*(_BYTE *)(v7 + 28) & 4) == 0)
    goto LABEL_19;
LABEL_15:
  v10 = *(int *)(v7 + 24);
LABEL_20:
  v11 = v9 ^ v8 ^ v10;
LABEL_21:
  v12 = *((_QWORD *)this + 6);
  if (v12)
    v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  else
    v13 = 0;
  v14 = *((_QWORD *)this + 8);
  if (v14)
    v15 = std::__string_hash<char>::operator()[abi:ne180100](v14);
  else
    v15 = 0;
  v16 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 7);
  if (v16)
    v17 = sirinluinternal::TokenChain::hash_value(v16);
  else
    v17 = 0;
  v18 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 2);
  if (v18)
    v19 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v18);
  else
    v19 = 0;
  if ((*((_BYTE *)this + 72) & 1) != 0)
    v20 = *((_QWORD *)this + 3);
  else
    v20 = 0;
  v21 = *((_QWORD *)this + 1);
  if (v21)
    v21 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v21);
  return v11 ^ v6 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21;
}

_QWORD *sirinluinternalmention_detector::MentionDetectorRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_detector::MentionDetectorRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_detector::MentionDetectorRequest::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_detector::MentionDetectorRequest::makeEmbeddingTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalmention_detector::MentionDetectorRequest::makeCdmRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void siricommon::StringValue::~StringValue(siricommon::StringValue *this)
{
  siricommon::StringValue::~StringValue(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0538;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t siricommon::StringValue::readFrom(siricommon::StringValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::StringValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t siricommon::StringValue::formatText(siricommon::StringValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *siricommon::StringValue::StringValue(_QWORD *this)
{
  *this = &off_1E7BB0538;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB0538;
  this[1] = 0;
  return this;
}

siricommon::StringValue *siricommon::StringValue::StringValue(siricommon::StringValue *this, const siricommon::StringValue *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BB0538;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return this;
}

const siricommon::StringValue *siricommon::StringValue::operator=(const siricommon::StringValue *a1, const siricommon::StringValue *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    siricommon::StringValue::StringValue((siricommon::StringValue *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    siricommon::StringValue::~StringValue((siricommon::StringValue *)&v5);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::StringValue *a2, siricommon::StringValue *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *siricommon::StringValue::StringValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB0538;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB0538;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t siricommon::StringValue::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BB0538;
    v6[1] = v4;
    siricommon::StringValue::~StringValue((siricommon::StringValue *)v6);
  }
  return a1;
}

uint64_t siricommon::StringValue::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t siricommon::StringValue::hash_value(siricommon::StringValue *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  return result;
}

void sirinluexternal::UserWantedToProceed::~UserWantedToProceed(sirinluexternal::UserWantedToProceed *this)
{
  sirinluexternal::UserWantedToProceed::~UserWantedToProceed(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0588;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserWantedToProceed::readFrom(sirinluexternal::UserWantedToProceed *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserWantedToProceed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserWantedToProceed::formatText(sirinluexternal::UserWantedToProceed *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "reference");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserWantedToProceed::UserWantedToProceed(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0588;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0588;
  return this;
}

sirinluexternal::UserWantedToProceed *sirinluexternal::UserWantedToProceed::UserWantedToProceed(sirinluexternal::UserWantedToProceed *this, const sirinluexternal::UserWantedToProceed *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BB0588;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserWantedToProceed::operator=(uint64_t a1, const sirinluexternal::UserWantedToProceed *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserWantedToProceed *)a1 != a2)
  {
    sirinluexternal::UserWantedToProceed::UserWantedToProceed((sirinluexternal::UserWantedToProceed *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserWantedToProceed::~UserWantedToProceed((sirinluexternal::UserWantedToProceed *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserWantedToProceed *a2, sirinluexternal::UserWantedToProceed *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::UserWantedToProceed::UserWantedToProceed(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB0588;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::UserWantedToProceed::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserWantedToProceed *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB0588;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserWantedToProceed::~UserWantedToProceed((sirinluexternal::UserWantedToProceed *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserWantedToProceed::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserWantedToProceed::hash_value(sirinluexternal::UserWantedToProceed *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserWantedToProceed::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserWantedToProceed::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::UserAccepted::~UserAccepted(sirinluexternal::UserAccepted *this)
{
  sirinluexternal::UserAccepted::~UserAccepted(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB05D8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserAccepted::readFrom(sirinluexternal::UserAccepted *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 2);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserAccepted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserAccepted::formatText(sirinluexternal::UserAccepted *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "offer_id");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "reference");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserAccepted::UserAccepted(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB05D8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB05D8;
  return this;
}

sirinluexternal::UserAccepted *sirinluexternal::UserAccepted::UserAccepted(sirinluexternal::UserAccepted *this, const sirinluexternal::UserAccepted *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7BB05D8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 1));
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 2));
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserAccepted::operator=(uint64_t a1, const sirinluexternal::UserAccepted *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserAccepted *)a1 != a2)
  {
    sirinluexternal::UserAccepted::UserAccepted((sirinluexternal::UserAccepted *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserAccepted::~UserAccepted((sirinluexternal::UserAccepted *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserAccepted *a2, sirinluexternal::UserAccepted *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternal::UserAccepted::UserAccepted(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BB05D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluexternal::UserAccepted::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserAccepted *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB05D8;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserAccepted::~UserAccepted((sirinluexternal::UserAccepted *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserAccepted::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 16), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserAccepted::hash_value(sirinluexternal::UserAccepted *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserAccepted::makeOfferId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserAccepted::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALCATICATIRequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALNLv4EmbeddingTensor *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_32;
        }
        goto LABEL_37;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 3;
        goto LABEL_26;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 2;
LABEL_26:
        v17 = (SIRINLUINTERNALNLv4EmbeddingTensor *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_37;
        goto LABEL_32;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

void sirinluinternal::SiriVocabularySpanData::~SiriVocabularySpanData(sirinluinternal::SiriVocabularySpanData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluinternal::SiriVocabularySpanData::readFrom(sirinluinternal::SiriVocabularySpanData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_31;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_31;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v19 != 2)
      {
        if ((_DWORD)v19 == 1)
        {
          *((_BYTE *)this + 28) |= 4u;
          v20 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v21 = *(_QWORD *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
          {
            v27 = 0;
            v28 = 0;
            v24 = 0;
            if (v2 <= v20)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v20)
              {
                LODWORD(v24) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_52;
              }
              v29 = v20 + 1;
              v30 = *(_BYTE *)(v21 + v20);
              *((_QWORD *)a2 + 1) = v29;
              v24 |= (unint64_t)(v30 & 0x7F) << v27;
              if ((v30 & 0x80) == 0)
                break;
              v27 += 7;
              v20 = v29;
              v14 = v28++ > 8;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v24) = 0;
LABEL_51:
            v2 = v29;
          }
          else
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            while (1)
            {
              v2 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v25 = *(_BYTE *)(v21 + v20);
              v24 |= (unint64_t)(v25 & 0x7F) << v22;
              if ((v25 & 0x80) == 0)
                break;
              v22 += 7;
              v20 = v2;
              v14 = v23++ > 8;
              if (v14)
              {
                LODWORD(v24) = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_DWORD *)this + 6) = v24;
        }
        else
        {
LABEL_31:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t sirinluinternal::SiriVocabularySpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t sirinluinternal::SiriVocabularySpanData::formatText(sirinluinternal::SiriVocabularySpanData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 28) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "prior_ordinality");
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "match_score", *((double *)this + 1));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "prior_score", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB0628;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB0628;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

double sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(sirinluinternal::SiriVocabularySpanData *this, const sirinluinternal::SiriVocabularySpanData *a2)
{
  char v2;
  char v3;
  int v4;
  double result;

  *(_QWORD *)this = &off_1E7BB0628;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 4;
    *((_BYTE *)this + 28) = 4;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t sirinluinternal::SiriVocabularySpanData::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void (**v5)(sirinluinternal::SiriVocabularySpanData *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  void (**v12)(sirinluinternal::SiriVocabularySpanData *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v5 = &off_1E7BB0628;
    v12 = &off_1E7BB0628;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 4) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 24);
      v7 = 4;
      BYTE4(v14) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a3 = *(double *)(a2 + 16);
        v7 |= 2u;
        BYTE4(v14) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 8);
      BYTE4(v14) = v7 | 1;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = (_DWORD)v5;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::SiriVocabularySpanData *a2, sirinluinternal::SiriVocabularySpanData *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0628;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0628;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sirinluinternal::SiriVocabularySpanData::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  void (**v7)(sirinluinternal::SiriVocabularySpanData *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = &off_1E7BB0628;
    v3 = *(_OWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::SiriVocabularySpanData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t sirinluinternal::SiriVocabularySpanData::hash_value(sirinluinternal::SiriVocabularySpanData *this)
{
  uint64_t v1;
  double v2;
  double v3;

  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
    v1 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 1) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

BOOL SIRINLUEXTERNALTurnContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALNLContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALNLContext);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLContextReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALLegacyNLContext);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALLegacyNLContextReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct(sirinluexternal::DelegatedUserDialogAct *this)
{
  sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &off_1E7BB0678;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::DelegatedUserDialogAct::readFrom(sirinluexternal::DelegatedUserDialogAct *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 16);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 68) |= 1u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_54;
              v24 += 7;
              v21 = v27;
              v15 = v25++ > 8;
            }
            while (!v15);
LABEL_50:
            LODWORD(v26) = 0;
            goto LABEL_54;
          }
          v35 = 0;
          v36 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v37 = v21 + 1;
              v38 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v37;
              v26 |= (unint64_t)(v38 & 0x7F) << v35;
              if (v38 < 0)
              {
                v35 += 7;
                v21 = v37;
                v15 = v36++ > 8;
                if (v15)
                  goto LABEL_50;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_54:
          *((_DWORD *)this + 16) = v26;
          goto LABEL_55;
        case 2u:
          v29 = operator new();
          *(_QWORD *)v29 = &off_1E7BB0538;
          *(_QWORD *)(v29 + 8) = 0;
          v30 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v29;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v29 = *((_QWORD *)this + 7);
          }
          goto LABEL_41;
        case 3u:
          v31 = (_QWORD *)operator new();
          v31[1] = 0;
          v31[2] = 0;
          *v31 = 0;
          v32 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v31;
          if (v32)
            std::default_delete<std::string>::operator()[abi:ne180100](v32);
          PB::Reader::read();
          goto LABEL_55;
        case 4u:
          PB::PtrVector<sirinluexternal::Span>::emplace_back<>(v8);
          v29 = *(_QWORD *)(*((_QWORD *)this + 3) - 8);
          goto LABEL_41;
        case 5u:
          v29 = operator new();
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v29 + 16) = 0;
          *(_QWORD *)v29 = &off_1E7BB19E0;
          v33 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v29;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v29 = *((_QWORD *)this + 6);
          }
          goto LABEL_41;
        case 6u:
          v29 = operator new();
          *(_QWORD *)v29 = &off_1E7BAFD60;
          *(_DWORD *)(v29 + 12) = 0;
          v34 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v29;
          if (v34)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            v29 = *((_QWORD *)this + 5);
          }
LABEL_41:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_55;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
    }
    while (!v15);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_55:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluexternal::DelegatedUserDialogAct::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 68) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = (const PB::Base *)v3[7];
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (v3[1])
    this = PB::Writer::write();
  v5 = (const PB::Base **)v3[2];
  v6 = (const PB::Base **)v3[3];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = (const PB::Base *)v3[6];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)v3[5];
  if (v9)
    return PB::Writer::writeSubmessage(a2, v9);
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::formatText(sirinluexternal::DelegatedUserDialogAct *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 68) & 1) != 0)
    PB::TextFormatter::format(a2, "asr_hypothesis_index");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "matching_spans");
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "reference_context");
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "rewrite");
  v10 = *((_QWORD *)this + 7);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "rewritten_utterance");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(sirinluexternal::DelegatedUserDialogAct *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0678;
  *((_DWORD *)this + 17) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0678;
  *((_DWORD *)this + 17) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

sirinluexternal::DelegatedUserDialogAct *sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(sirinluexternal::DelegatedUserDialogAct *this, const sirinluexternal::DelegatedUserDialogAct *a2)
{
  uint64_t *v4;
  int v5;
  siricommon::StringValue *v6;
  siricommon::StringValue *v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  const sirinluexternal::Span **v14;
  const sirinluexternal::Span **i;
  sirinluexternal::RewriteMessage *v16;
  sirinluexternal::RewriteMessage *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB0678;
  *((_DWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if ((*((_BYTE *)a2 + 68) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 16);
    *((_BYTE *)this + 68) = 1;
    *((_DWORD *)this + 16) = v5;
  }
  if (*((_QWORD *)a2 + 7))
  {
    v6 = (siricommon::StringValue *)operator new();
    v7 = siricommon::StringValue::StringValue(v6, *((const siricommon::StringValue **)a2 + 7));
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v9 = (std::string *)operator new();
    v10 = v9;
    v11 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    v13 = *v4;
    *v4 = (uint64_t)v10;
    if (v13)
      std::default_delete<std::string>::operator()[abi:ne180100](v13);
  }
  v14 = (const sirinluexternal::Span **)*((_QWORD *)a2 + 2);
  for (i = (const sirinluexternal::Span **)*((_QWORD *)a2 + 3); v14 != i; ++v14)
    PB::PtrVector<sirinluexternal::Span>::emplace_back<sirinluexternal::Span const&>((sirinluexternal::Span ***)this + 2, *v14);
  if (*((_QWORD *)a2 + 6))
  {
    v16 = (sirinluexternal::RewriteMessage *)operator new();
    v17 = sirinluexternal::RewriteMessage::RewriteMessage(v16, *((const sirinluexternal::RewriteMessage **)a2 + 6));
    v18 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v19 = operator new();
    v20 = (_BYTE *)*((_QWORD *)a2 + 5);
    *(_QWORD *)v19 = &off_1E7BAFD60;
    *(_DWORD *)(v19 + 12) = 0;
    v21 = v20[12];
    if ((v21 & 1) != 0)
    {
      v23 = v20[8];
      *(_BYTE *)(v19 + 12) = 1;
      *(_BYTE *)(v19 + 8) = v23;
      v22 = 3;
      if ((v21 & 2) == 0)
        goto LABEL_23;
    }
    else
    {
      v22 = 2;
      if ((v20[12] & 2) == 0)
      {
LABEL_23:
        v25 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v19;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        return this;
      }
    }
    v24 = v20[9];
    *(_BYTE *)(v19 + 12) = v22;
    *(_BYTE *)(v19 + 9) = v24;
    goto LABEL_23;
  }
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::operator=(uint64_t a1, const sirinluexternal::DelegatedUserDialogAct *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((const sirinluexternal::DelegatedUserDialogAct *)a1 != a2)
  {
    sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct((sirinluexternal::DelegatedUserDialogAct *)v9, a2);
    v3 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct((sirinluexternal::DelegatedUserDialogAct *)v9);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::DelegatedUserDialogAct *a2, sirinluexternal::DelegatedUserDialogAct *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(this + 68);
  *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v5 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E7BB0678;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
    std::default_delete<std::string>::operator()[abi:ne180100](v9);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct((uint64_t)v9, a2);
    v3 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct((sirinluexternal::DelegatedUserDialogAct *)v9);
  }
  return a1;
}

BOOL sirinluexternal::DelegatedUserDialogAct::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;

  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 68) & 1) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a2 + 56);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_31;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_31:
  result = PB::PtrVector<sirinluexternal::Span>::operator==((uint64_t *)(a1 + 16), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (!result)
    return result;
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a2 + 48);
  if (v14)
  {
    if (!v15 || (sirinluexternal::RewriteMessage::operator==(v14, v15) & 1) == 0)
      return 0;
    goto LABEL_37;
  }
  if (v15)
    return 0;
LABEL_37:
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(unsigned __int8 **)(a2 + 40);
  result = (v16 | (unint64_t)v17) == 0;
  if (v16)
  {
    if (v17)
      return sirinluexternal::ReferenceContext::operator==(*(unsigned __int8 **)(a1 + 40), v17);
  }
  return result;
}

unint64_t sirinluexternal::DelegatedUserDialogAct::hash_value(sirinluexternal::DelegatedUserDialogAct *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  sirinluexternal::Span **v8;
  sirinluexternal::Span **v9;
  uint64_t v10;
  sirinluexternal::Span *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*((_BYTE *)this + 68) & 1) != 0)
    v2 = *((unsigned int *)this + 16);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 7);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v7 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  else
    v7 = 0;
  v8 = (sirinluexternal::Span **)*((_QWORD *)this + 2);
  v9 = (sirinluexternal::Span **)*((_QWORD *)this + 3);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 ^= sirinluexternal::Span::hash_value(v11);
    }
    while (v8 != v9);
  }
  v12 = *((_QWORD *)this + 6);
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 20) & 1) != 0)
      v13 = *(int *)(v12 + 16);
    else
      v13 = 0;
    v14 = *(_QWORD *)(v12 + 8);
    if (v14)
      v14 = std::__string_hash<char>::operator()[abi:ne180100](v14);
    v12 = v14 ^ v13;
  }
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    if ((*(_BYTE *)(v15 + 12) & 1) != 0)
    {
      v16 = *(unsigned __int8 *)(v15 + 8);
      if ((*(_BYTE *)(v15 + 12) & 2) != 0)
        goto LABEL_26;
    }
    else
    {
      v16 = 0;
      if ((*(_BYTE *)(v15 + 12) & 2) != 0)
      {
LABEL_26:
        v17 = *(unsigned __int8 *)(v15 + 9);
LABEL_29:
        v15 = v17 ^ v16;
        return v5 ^ v2 ^ v12 ^ v15 ^ v7 ^ v10;
      }
    }
    v17 = 0;
    goto LABEL_29;
  }
  return v5 ^ v2 ^ v12 ^ v15 ^ v7 ^ v10;
}

_QWORD *sirinluexternal::DelegatedUserDialogAct::makeRewrittenUtterance(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::DelegatedUserDialogAct::makeRewrite(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB19E0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::DelegatedUserDialogAct::makeReferenceContext(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAFD60;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALAdjacentSpansReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUINTERNALSpanDataForNamedCaptureGroup *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (SIRINLUINTERNALSpanDataForNamedCaptureGroup *)a1[1];
        a1[1] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUINTERNALSpanDataForNamedCaptureGroup);
    objc_msgSend(a1, "addSpans:", v18);
    if (!PBReaderPlaceMark()
      || (SIRINLUINTERNALSpanDataForNamedCaptureGroupReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest(sirinluexternalnlu_router::NLRouterServiceRequest *this)
{
  sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BB06C8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 2);
    v10 = (void *)*((_QWORD *)this + 1);
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v8;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::readFrom(sirinluexternalnlu_router::NLRouterServiceRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  void (**v9)(sirinluexternalnlu_router::RequestSummary *__hidden);
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(sirinluexternalnlu_router::RequestSummary *__hidden);
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  int64x2_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t v51;
  unint64_t v52;
  char *v53;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 24;
  v9 = &off_1E7BB1788;
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          v23 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v22;
          if (v23)
            goto LABEL_31;
          goto LABEL_32;
        case 2u:
          v32 = operator new();
          *(_QWORD *)v32 = &off_1E7BB14A0;
          *(_OWORD *)(v32 + 8) = 0u;
          *(_OWORD *)(v32 + 24) = 0u;
          *(_OWORD *)(v32 + 40) = 0u;
          *(_OWORD *)(v32 + 56) = 0u;
          *(_OWORD *)(v32 + 72) = 0u;
          *(_OWORD *)(v32 + 88) = 0u;
          v33 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v32;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v32 = *((_QWORD *)this + 9);
          }
          goto LABEL_39;
        case 3u:
          v25 = operator new();
          v26 = v25;
          v27 = v9;
          *(_QWORD *)v25 = v9;
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          v29 = (uint64_t *)*((_QWORD *)this + 2);
          v28 = *((_QWORD *)this + 3);
          if ((unint64_t)v29 >= v28)
          {
            v36 = *((_QWORD *)this + 1);
            v37 = ((uint64_t)v29 - v36) >> 3;
            if ((unint64_t)(v37 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v38 = v28 - v36;
            v39 = v38 >> 2;
            if (v38 >> 2 <= (unint64_t)(v37 + 1))
              v39 = v37 + 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v39;
            v53 = v8;
            if (v40)
              v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v40);
            else
              v41 = 0;
            v42 = (uint64_t *)(v40 + 8 * v37);
            v43 = v40 + 8 * v41;
            v52 = v43;
            *v42 = v26;
            v30 = v42 + 1;
            v51.i64[1] = (uint64_t)(v42 + 1);
            v45 = (_QWORD *)*((_QWORD *)this + 1);
            v44 = (_QWORD *)*((_QWORD *)this + 2);
            if (v44 == v45)
            {
              v47 = vdupq_n_s64((unint64_t)v44);
            }
            else
            {
              do
              {
                v46 = *--v44;
                *v44 = 0;
                *--v42 = v46;
              }
              while (v44 != v45);
              v47 = *(int64x2_t *)((char *)this + 8);
              v30 = (_QWORD *)v51.i64[1];
              v43 = v52;
            }
            *((_QWORD *)this + 1) = v42;
            *((_QWORD *)this + 2) = v30;
            v51 = v47;
            v48 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v43;
            v52 = v48;
            v50 = v47.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v50);
          }
          else
          {
            *v29 = v25;
            v30 = v29 + 1;
          }
          *((_QWORD *)this + 2) = v30;
          v49 = *(v30 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v49 + 16))(v49, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v9 = v27;
          goto LABEL_59;
        case 4u:
          v31 = (_QWORD *)operator new();
          v31[1] = 0;
          v31[2] = 0;
          *v31 = 0;
          v23 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v31;
          if (v23)
            goto LABEL_31;
          goto LABEL_32;
        case 5u:
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          v23 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v24;
          if (v23)
LABEL_31:
            std::default_delete<std::string>::operator()[abi:ne180100](v23);
LABEL_32:
          PB::Reader::read();
          goto LABEL_59;
        case 6u:
          v32 = operator new();
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 16) = 0;
          *(_QWORD *)v32 = &off_1E7BAFA90;
          v34 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v32;
          if (v34)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            v32 = *((_QWORD *)this + 5);
          }
          goto LABEL_39;
        case 7u:
          v32 = operator new();
          *(_QWORD *)v32 = &off_1E7BAFA40;
          *(_OWORD *)(v32 + 8) = 0u;
          *(_OWORD *)(v32 + 24) = 0u;
          *(_OWORD *)(v32 + 40) = 0u;
          *(_OWORD *)(v32 + 56) = 0u;
          *(_OWORD *)(v32 + 72) = 0u;
          *(_OWORD *)(v32 + 88) = 0u;
          *(_OWORD *)(v32 + 104) = 0u;
          *(_QWORD *)(v32 + 120) = 0;
          v35 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v32;
          if (v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            v32 = *((_QWORD *)this + 6);
          }
LABEL_39:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v32 + 16))(v32, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_59;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_59:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1C1F96A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sirinluexternalnlu_router::NLRouterServiceRequest::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;

  v3 = this;
  if (this[4])
    this = (_QWORD *)PB::Writer::write();
  v4 = (const PB::Base *)v3[9];
  if (v4)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[1];
  v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v7);
  }
  if (v3[7])
    this = (_QWORD *)PB::Writer::write();
  if (v3[8])
    this = (_QWORD *)PB::Writer::write();
  v8 = (const PB::Base *)v3[5];
  if (v8)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)v3[6];
  if (v9)
    return (_QWORD *)PB::Writer::writeSubmessage(a2, v9);
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::formatText(sirinluexternalnlu_router::NLRouterServiceRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "conversation_history");
  }
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  v8 = *((_QWORD *)this + 5);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "probing_result");
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "query_decoration_output");
  if (*((_QWORD *)this + 7))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 8))
    PB::TextFormatter::format();
  v10 = *((_QWORD *)this + 9);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "turn_context");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest(sirinluexternalnlu_router::NLRouterServiceRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB06C8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB06C8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluexternalnlu_router::NLRouterServiceRequest *sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest(sirinluexternalnlu_router::NLRouterServiceRequest *this, const sirinluexternalnlu_router::NLRouterServiceRequest *a2)
{
  int64x2_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  sirinluexternalnlu_router::NLRouterTurnContext *v10;
  sirinluexternalnlu_router::NLRouterTurnContext *v11;
  uint64_t v12;
  const sirinluexternalnlu_router::RequestSummary **v13;
  const sirinluexternalnlu_router::RequestSummary **i;
  const sirinluexternalnlu_router::RequestSummary *v15;
  sirinluexternalnlu_router::RequestSummary *v16;
  unint64_t v17;
  sirinluexternalnlu_router::RequestSummary **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  sirinluexternalnlu_router::RequestSummary **v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  sirinluexternalnlu_router::RequestSummary *v29;
  int64x2_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 *v34;
  __int128 v35;
  uint64_t v36;
  std::string *v37;
  std::string *v38;
  __int128 *v39;
  __int128 v40;
  uint64_t v41;
  sirinluexternalnlu_router::NLRouterTurnProbingResult *v42;
  sirinluexternalnlu_router::NLRouterTurnProbingResult *v43;
  uint64_t v44;
  sirinluexternalnlu_router::QueryDecorationOutput *v45;
  sirinluexternalnlu_router::QueryDecorationOutput *DecorationOutput;
  uint64_t v47;
  uint64_t v49;
  int64x2_t v50;
  unint64_t v51;
  char *v52;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB06C8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v10 = (sirinluexternalnlu_router::NLRouterTurnContext *)operator new();
    v11 = sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(v10, *((const sirinluexternalnlu_router::NLRouterTurnContext **)a2 + 9));
    v12 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = (const sirinluexternalnlu_router::RequestSummary **)*((_QWORD *)a2 + 1);
  for (i = (const sirinluexternalnlu_router::RequestSummary **)*((_QWORD *)a2 + 2); v13 != i; ++v13)
  {
    v15 = *v13;
    v16 = (sirinluexternalnlu_router::RequestSummary *)operator new();
    sirinluexternalnlu_router::RequestSummary::RequestSummary(v16, v15);
    v18 = (sirinluexternalnlu_router::RequestSummary **)*((_QWORD *)this + 2);
    v17 = *((_QWORD *)this + 3);
    if ((unint64_t)v18 >= v17)
    {
      v20 = ((uint64_t)v18 - v4->i64[0]) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v21 = v17 - v4->i64[0];
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      v52 = (char *)this + 24;
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v23);
      else
        v24 = 0;
      v25 = (sirinluexternalnlu_router::RequestSummary **)(v23 + 8 * v20);
      v26 = v23 + 8 * v24;
      v51 = v26;
      *v25 = v16;
      v19 = v25 + 1;
      v50.i64[1] = (uint64_t)(v25 + 1);
      v28 = (_QWORD *)*((_QWORD *)this + 1);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
      if (v27 == v28)
      {
        v30 = vdupq_n_s64((unint64_t)v27);
      }
      else
      {
        do
        {
          v29 = (sirinluexternalnlu_router::RequestSummary *)*--v27;
          *v27 = 0;
          *--v25 = v29;
        }
        while (v27 != v28);
        v30 = *v4;
        v19 = (_QWORD *)v50.i64[1];
        v26 = v51;
      }
      *((_QWORD *)this + 1) = v25;
      *((_QWORD *)this + 2) = v19;
      v50 = v30;
      v31 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v26;
      v51 = v31;
      v49 = v30.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v49);
    }
    else
    {
      *v18 = v16;
      v19 = v18 + 1;
    }
    *((_QWORD *)this + 2) = v19;
  }
  if (*((_QWORD *)a2 + 7))
  {
    v32 = (std::string *)operator new();
    v33 = v32;
    v34 = (__int128 *)*((_QWORD *)a2 + 7);
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v34, *((_QWORD *)v34 + 1));
    }
    else
    {
      v35 = *v34;
      v32->__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 2);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v35;
    }
    v36 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v33;
    if (v36)
      std::default_delete<std::string>::operator()[abi:ne180100](v36);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v37 = (std::string *)operator new();
    v38 = v37;
    v39 = (__int128 *)*((_QWORD *)a2 + 8);
    if (*((char *)v39 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
    }
    else
    {
      v40 = *v39;
      v37->__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v40;
    }
    v41 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v38;
    if (v41)
      std::default_delete<std::string>::operator()[abi:ne180100](v41);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v42 = (sirinluexternalnlu_router::NLRouterTurnProbingResult *)operator new();
    v43 = sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(v42, *((const sirinluexternalnlu_router::NLParseResponse ***)a2 + 5));
    v44 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v43;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v45 = (sirinluexternalnlu_router::QueryDecorationOutput *)operator new();
    DecorationOutput = sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(v45, *((const sirinluexternalnlu_router::QueryDecorationOutput **)a2 + 6));
    v47 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = DecorationOutput;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  return this;
}

void sub_1C1F970C8(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRouterServiceRequest *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluexternalnlu_router::NLRouterServiceRequest *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest((sirinluexternalnlu_router::NLRouterServiceRequest *)&v9, a2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest((sirinluexternalnlu_router::NLRouterServiceRequest *)&v9);
  }
  return a1;
}

_QWORD *sirinluexternalnlu_router::swap(_QWORD *this, sirinluexternalnlu_router::NLRouterServiceRequest *a2, sirinluexternalnlu_router::NLRouterServiceRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_1E7BB06C8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (_QWORD *)*v4;
  if (*v4)
  {
    v10 = *(_QWORD **)(a1 + 16);
    v11 = (_QWORD *)*v4;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v11);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100](v15);
  v16 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  if (v17)
    std::default_delete<std::string>::operator()[abi:ne180100](v17);
  v18 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v21 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest((uint64_t)&v9, a2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest((sirinluexternalnlu_router::NLRouterServiceRequest *)&v9);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t result;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = (unsigned __int8 *)a1[4];
  v5 = (unsigned __int8 **)a2[4];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[4];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (uint64_t *)a1[9];
  v12 = a2[9];
  if (v11)
  {
    if (!v12 || (sirinluexternalnlu_router::NLRouterTurnContext::operator==(v11, v12) & 1) == 0)
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v14 = (char *)a1[1];
  v13 = (char *)a1[2];
  v15 = (uint64_t *)a2[1];
  if (v13 - v14 != a2[2] - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    result = sirinluexternalnlu_router::RequestSummary::operator==(*(_QWORD **)v14, *v15);
    if (!(_DWORD)result)
      return result;
    v14 += 8;
    ++v15;
  }
  v17 = (unsigned __int8 *)a1[7];
  v18 = (unsigned __int8 **)a2[7];
  if (v17)
  {
    if (!v18)
      return 0;
    v19 = v17[23];
    if ((v19 & 0x80u) == 0)
      v20 = (unsigned __int8 *)v17[23];
    else
      v20 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    v21 = (unsigned __int8 *)*((unsigned __int8 *)v18 + 23);
    v22 = (char)v21;
    if ((char)v21 < 0)
      v21 = v18[1];
    if (v20 != v21)
      return 0;
    if (v22 >= 0)
      v23 = (unsigned __int8 *)a2[7];
    else
      v23 = *v18;
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v17, v23, *((_QWORD *)v17 + 1)))
        return 0;
    }
    else if (v17[23])
    {
      v24 = v19 - 1;
      do
      {
        v26 = *v17++;
        v25 = v26;
        v28 = *v23++;
        v27 = v28;
        v30 = v24-- != 0;
      }
      while (v25 == v27 && v30);
      if (v25 != v27)
        return 0;
    }
  }
  else if (v18)
  {
    return 0;
  }
  v31 = (unsigned __int8 *)a1[8];
  v32 = (unsigned __int8 *)a2[8];
  if (v31)
  {
    if (!v32 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v31, v32))
      return 0;
  }
  else if (v32)
  {
    return 0;
  }
  v33 = a1[5];
  v34 = a2[5];
  if (!v33)
  {
    if (!v34)
      goto LABEL_64;
    return 0;
  }
  if (!v34 || (sirinluexternalnlu_router::NLRouterTurnProbingResult::operator==(v33, v34) & 1) == 0)
    return 0;
LABEL_64:
  v35 = a1[6];
  v36 = a2[6];
  result = (v35 | v36) == 0;
  if (v35)
  {
    if (v36)
      return sirinluexternalnlu_router::QueryDecorationOutput::operator==((_QWORD *)a1[6], (_QWORD *)v36);
  }
  return result;
}

unint64_t sirinluexternalnlu_router::NLRouterServiceRequest::hash_value(sirinluexternalnlu_router::NLRouterServiceRequest *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluexternalnlu_router::NLRouterTurnContext *v4;
  uint64_t v5;
  sirinluexternalnlu_router::RequestSummary **v6;
  sirinluexternalnlu_router::RequestSummary **v7;
  uint64_t v8;
  sirinluexternalnlu_router::RequestSummary *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  sirinluexternalnlu_router::NLRouterTurnProbingResult *v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = (sirinluexternalnlu_router::NLRouterTurnContext *)*((_QWORD *)this + 9);
  if (v4)
    v5 = sirinluexternalnlu_router::NLRouterTurnContext::hash_value(v4);
  else
    v5 = 0;
  v6 = (sirinluexternalnlu_router::RequestSummary **)*((_QWORD *)this + 1);
  v7 = (sirinluexternalnlu_router::RequestSummary **)*((_QWORD *)this + 2);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluexternalnlu_router::RequestSummary::hash_value(v9);
    }
    while (v6 != v7);
  }
  v10 = *((_QWORD *)this + 7);
  if (v10)
    v11 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 8);
  if (v12)
    v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  else
    v13 = 0;
  v14 = (sirinluexternalnlu_router::NLRouterTurnProbingResult *)*((_QWORD *)this + 5);
  if (v14)
    v15 = sirinluexternalnlu_router::NLRouterTurnProbingResult::hash_value(v14);
  else
    v15 = 0;
  v16 = *((_QWORD *)this + 6);
  if (v16)
    v16 = sirinluexternalnlu_router::QueryDecorationOutput::hash_value((sirinluexternalnlu_router::QueryDecorationOutput *)v16);
  return v5 ^ v3 ^ v13 ^ v15 ^ v16 ^ v8 ^ v11;
}

_QWORD *sirinluexternalnlu_router::NLRouterServiceRequest::makeTurnContext(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB14A0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternalnlu_router::NLRouterServiceRequest::makeProbingResult(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BAFA90;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternalnlu_router::NLRouterServiceRequest::makeQueryDecorationOutput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAFA40;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 8;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALOverrideValueReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALCCQROverrideTemplate *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUINTERNALCCQROverrideTemplate);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALCCQROverrideTemplateReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_32;
        }
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALLVCOverrideValue);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALLVCOverrideValueReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALPlanOverrideValue);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALPlanOverrideValueReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

void sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this)
{
  sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0718;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::readFrom(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BAEE90;
        *(_DWORD *)(v19 + 44) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 2);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BAEA98;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::formatText(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "subword_token_chain");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "subword_token_embedding");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0718;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0718;
  return this;
}

sirinluexternalsubword_embedding::SubwordEmbeddingResponse *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this, const sirinluinternal::SubwordTokenChain **a2)
{
  sirinluinternal::SubwordTokenChain **v4;
  sirinluinternal::SubwordTokenChain *v5;
  sirinluinternal::SubwordTokenChain *v6;
  sirinluinternal::SubwordTokenChain *v7;
  sirinluinternalembedding::EmbeddingTensorOutput *v8;
  sirinluinternalembedding::EmbeddingTensorOutput *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7BB0718;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluinternal::SubwordTokenChain **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[1])
  {
    v5 = (sirinluinternal::SubwordTokenChain *)operator new();
    v6 = sirinluinternal::SubwordTokenChain::SubwordTokenChain(v5, a2[1]);
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(sirinluinternal::SubwordTokenChain *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (sirinluinternalembedding::EmbeddingTensorOutput *)operator new();
    v9 = sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(v8, a2[2]);
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::operator=(uint64_t a1, const sirinluinternal::SubwordTokenChain **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternal::SubwordTokenChain **)a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse((sirinluexternalsubword_embedding::SubwordEmbeddingResponse *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse((sirinluexternalsubword_embedding::SubwordEmbeddingResponse *)v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::swap(uint64_t this, sirinluexternalsubword_embedding::SubwordEmbeddingResponse *a2, sirinluexternalsubword_embedding::SubwordEmbeddingResponse *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BB0718;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB0718;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse((sirinluexternalsubword_embedding::SubwordEmbeddingResponse *)&v6);
  }
  return a1;
}

BOOL sirinluexternalsubword_embedding::SubwordEmbeddingResponse::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluinternal::SubwordTokenChain::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluinternalembedding::EmbeddingTensorOutput::operator==(*(_QWORD *)(a1 + 16), v7);
  return result;
}

unint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::hash_value(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this)
{
  sirinluinternal::SubwordTokenChain *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (sirinluinternal::SubwordTokenChain *)*((_QWORD *)this + 1);
  if (v2)
    v3 = sirinluinternal::SubwordTokenChain::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = sirinluinternalembedding::EmbeddingTensorOutput::hash_value((sirinluinternalembedding::EmbeddingTensorOutput *)v4);
  return v4 ^ v3;
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::makeSubwordTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAEA98;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::makeSubwordTokenEmbedding(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAEE90;
    *(_DWORD *)(v2 + 44) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternaloverrides::OverridesRequest::~OverridesRequest(sirinluinternaloverrides::OverridesRequest *this)
{
  sirinluinternaloverrides::OverridesRequest::~OverridesRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  *(_QWORD *)this = &off_1E7BB0768;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v10 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternaloverrides::OverridesRequest::readFrom(sirinluinternaloverrides::OverridesRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  char *v10;
  void (**v11)(sirinluinternal::TokenChain *__hidden);
  void (**v12)(sirinluexternal::TurnContext *__hidden);
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(sirinluexternal::TurnContext *__hidden);
  void (**v32)(sirinluinternal::TokenChain *__hidden);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  int64x2_t v54;
  unint64_t v55;
  char *v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 56);
  v9 = (uint64_t **)((char *)this + 32);
  v10 = (char *)this + 24;
  v11 = &off_1E7BB0140;
  v12 = &off_1E7BB2118;
  while (1)
  {
    v13 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_22:
      if ((v16 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          v25 = (_QWORD *)operator new();
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          v26 = *((_QWORD *)this + 12);
          *((_QWORD *)this + 12) = v25;
          if (v26)
            std::default_delete<std::string>::operator()[abi:ne180100](v26);
          PB::Reader::read();
          goto LABEL_37;
        case 2u:
          v27 = operator new();
          *(_QWORD *)v27 = v11;
          *(_OWORD *)(v27 + 8) = 0u;
          *(_OWORD *)(v27 + 24) = 0u;
          *(_QWORD *)(v27 + 40) = 0;
          v30 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = v27;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v27 = *((_QWORD *)this + 10);
          }
          goto LABEL_34;
        case 3u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v9);
          v29 = *((_QWORD *)this + 5);
          goto LABEL_31;
        case 4u:
          PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>(v8);
          v29 = *((_QWORD *)this + 8);
LABEL_31:
          v27 = *(_QWORD *)(v29 - 8);
          goto LABEL_34;
        case 5u:
          v27 = operator new();
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = 0;
          *(_QWORD *)v27 = v12;
          v28 = *((_QWORD *)this + 11);
          *((_QWORD *)this + 11) = v27;
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            v27 = *((_QWORD *)this + 11);
          }
LABEL_34:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v27 + 16))(v27, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          goto LABEL_37;
        case 6u:
          v52 = v9;
          v31 = v12;
          v32 = v11;
          v33 = operator new();
          v34 = v33;
          *(_QWORD *)v33 = &off_1E7BAFE00;
          *(_OWORD *)(v33 + 8) = 0u;
          *(_OWORD *)(v33 + 24) = 0u;
          *(_OWORD *)(v33 + 40) = 0u;
          v36 = (uint64_t *)*((_QWORD *)this + 2);
          v35 = *((_QWORD *)this + 3);
          if ((unint64_t)v36 >= v35)
          {
            v38 = *((_QWORD *)this + 1);
            v39 = ((uint64_t)v36 - v38) >> 3;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v40 = v35 - v38;
            v41 = v40 >> 2;
            if (v40 >> 2 <= (unint64_t)(v39 + 1))
              v41 = v39 + 1;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            v56 = v10;
            if (v42)
              v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v42);
            else
              v43 = 0;
            v44 = (uint64_t *)(v42 + 8 * v39);
            v45 = v42 + 8 * v43;
            v55 = v45;
            *v44 = v34;
            v37 = v44 + 1;
            v54.i64[1] = (uint64_t)(v44 + 1);
            v47 = (_QWORD *)*((_QWORD *)this + 1);
            v46 = (_QWORD *)*((_QWORD *)this + 2);
            if (v46 == v47)
            {
              v49 = vdupq_n_s64((unint64_t)v46);
            }
            else
            {
              do
              {
                v48 = *--v46;
                *v46 = 0;
                *--v44 = v48;
              }
              while (v46 != v47);
              v49 = *(int64x2_t *)((char *)this + 8);
              v37 = (_QWORD *)v54.i64[1];
              v45 = v55;
            }
            *((_QWORD *)this + 1) = v44;
            *((_QWORD *)this + 2) = v37;
            v54 = v49;
            v50 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v45;
            v55 = v50;
            v53 = v49.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v53);
          }
          else
          {
            *v36 = v33;
            v37 = v36 + 1;
          }
          *((_QWORD *)this + 2) = v37;
          v51 = *(v37 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v51 + 16))(v51, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v11 = v32;
          v12 = v31;
          v9 = v52;
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_37;
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_22;
      v20 += 7;
      v2 = v22;
      v19 = v21++ > 8;
    }
    while (!v19);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_37:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1C1F995F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sirinluinternaloverrides::OverridesRequest::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base **v12;
  const PB::Base **v13;
  const PB::Base *v14;

  v3 = this;
  if (this[12])
    this = (_QWORD *)PB::Writer::write();
  v4 = (const PB::Base *)v3[10];
  if (v4)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[4];
  v6 = (const PB::Base **)v3[5];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = (const PB::Base **)v3[7];
  v9 = (const PB::Base **)v3[8];
  while (v8 != v9)
  {
    v10 = *v8++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v10);
  }
  v11 = (const PB::Base *)v3[11];
  if (v11)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v11);
  v13 = (const PB::Base **)v3[1];
  v12 = (const PB::Base **)v3[2];
  while (v13 != v12)
  {
    v14 = *v13++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v14);
  }
  return this;
}

uint64_t sirinluinternaloverrides::OverridesRequest::formatText(sirinluinternaloverrides::OverridesRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "inputs");
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "matching_spans");
  }
  v11 = (uint64_t *)*((_QWORD *)this + 7);
  v12 = (uint64_t *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "system_dialog_acts");
  }
  v14 = *((_QWORD *)this + 10);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "token_chain");
  v15 = *((_QWORD *)this + 11);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "turn_context");
  if (*((_QWORD *)this + 12))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BAE958;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F99954(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternaloverrides::OverridesRequest::OverridesRequest(sirinluinternaloverrides::OverridesRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0768;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0768;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

sirinluinternaloverrides::OverridesRequest *sirinluinternaloverrides::OverridesRequest::OverridesRequest(sirinluinternaloverrides::OverridesRequest *this, const sirinluinternaloverrides::OverridesRequest *a2)
{
  int64x2_t *v4;
  sirinluexternal::SystemDialogAct ***v5;
  std::string *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  sirinluinternal::TokenChain *v11;
  sirinluinternal::TokenChain *v12;
  uint64_t v13;
  const sirinluinternal::MatchingSpan **v14;
  const sirinluinternal::MatchingSpan **i;
  const sirinluexternal::SystemDialogAct **v16;
  const sirinluexternal::SystemDialogAct **v17;
  sirinluexternal::TurnContext *v18;
  sirinluexternal::TurnContext *v19;
  uint64_t v20;
  const sirinluinternaloverrides::TurnInputAndPreprocessing **v21;
  const sirinluinternaloverrides::TurnInputAndPreprocessing **j;
  const sirinluinternaloverrides::TurnInputAndPreprocessing *v23;
  sirinluinternaloverrides::TurnInputAndPreprocessing *v24;
  unint64_t v25;
  sirinluinternaloverrides::TurnInputAndPreprocessing **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  sirinluinternaloverrides::TurnInputAndPreprocessing **v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  sirinluinternaloverrides::TurnInputAndPreprocessing *v37;
  int64x2_t v38;
  unint64_t v39;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  char *v44;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (sirinluexternal::SystemDialogAct ***)((char *)this + 56);
  *(_QWORD *)this = &off_1E7BB0768;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if (*((_QWORD *)a2 + 12))
  {
    v6 = (std::string *)operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 12);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
    }
    v10 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v7;
    if (v10)
      std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  if (*((_QWORD *)a2 + 10))
  {
    v11 = (sirinluinternal::TokenChain *)operator new();
    v12 = sirinluinternal::TokenChain::TokenChain(v11, *((const sirinluinternal::TokenChain **)a2 + 10));
    v13 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 4);
  for (i = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 5); v14 != i; ++v14)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((sirinluinternal::MatchingSpan ***)this + 4, *v14);
  v16 = (const sirinluexternal::SystemDialogAct **)*((_QWORD *)a2 + 7);
  v17 = (const sirinluexternal::SystemDialogAct **)*((_QWORD *)a2 + 8);
  while (v16 != v17)
    PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>(v5, *v16++);
  if (*((_QWORD *)a2 + 11))
  {
    v18 = (sirinluexternal::TurnContext *)operator new();
    v19 = sirinluexternal::TurnContext::TurnContext(v18, *((const sirinluexternal::TurnContext **)a2 + 11));
    v20 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = (const sirinluinternaloverrides::TurnInputAndPreprocessing **)*((_QWORD *)a2 + 1);
  for (j = (const sirinluinternaloverrides::TurnInputAndPreprocessing **)*((_QWORD *)a2 + 2); v21 != j; ++v21)
  {
    v23 = *v21;
    v24 = (sirinluinternaloverrides::TurnInputAndPreprocessing *)operator new();
    sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(v24, v23);
    v26 = (sirinluinternaloverrides::TurnInputAndPreprocessing **)*((_QWORD *)this + 2);
    v25 = *((_QWORD *)this + 3);
    if ((unint64_t)v26 >= v25)
    {
      v28 = ((uint64_t)v26 - v4->i64[0]) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v29 = v25 - v4->i64[0];
      v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1))
        v30 = v28 + 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      v44 = (char *)this + 24;
      if (v31)
        v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v31);
      else
        v32 = 0;
      v33 = (sirinluinternaloverrides::TurnInputAndPreprocessing **)(v31 + 8 * v28);
      v34 = v31 + 8 * v32;
      v43 = v34;
      *v33 = v24;
      v27 = v33 + 1;
      v42.i64[1] = (uint64_t)(v33 + 1);
      v36 = (_QWORD *)*((_QWORD *)this + 1);
      v35 = (_QWORD *)*((_QWORD *)this + 2);
      if (v35 == v36)
      {
        v38 = vdupq_n_s64((unint64_t)v35);
      }
      else
      {
        do
        {
          v37 = (sirinluinternaloverrides::TurnInputAndPreprocessing *)*--v35;
          *v35 = 0;
          *--v33 = v37;
        }
        while (v35 != v36);
        v38 = *v4;
        v27 = (_QWORD *)v42.i64[1];
        v34 = v43;
      }
      *((_QWORD *)this + 1) = v33;
      *((_QWORD *)this + 2) = v27;
      v42 = v38;
      v39 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v34;
      v43 = v39;
      v41 = v38.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v41);
    }
    else
    {
      *v26 = v24;
      v27 = v26 + 1;
    }
    *((_QWORD *)this + 2) = v27;
  }
  return this;
}

void sub_1C1F99D6C(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>(sirinluexternal::SystemDialogAct ***a1, const sirinluexternal::SystemDialogAct *a2)
{
  sirinluexternal::SystemDialogAct *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::SystemDialogAct **v7;
  sirinluexternal::SystemDialogAct **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::SystemDialogAct **v14;
  unint64_t v15;
  sirinluexternal::SystemDialogAct **v16;
  sirinluexternal::SystemDialogAct **v17;
  sirinluexternal::SystemDialogAct *v18;
  int64x2_t v19;
  sirinluexternal::SystemDialogAct **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::SystemDialogAct *)operator new();
  result = (uint64_t)sirinluexternal::SystemDialogAct::SystemDialogAct(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::SystemDialogAct **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::SystemDialogAct **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::SystemDialogAct **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F99ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

const sirinluinternaloverrides::OverridesRequest *sirinluinternaloverrides::OverridesRequest::operator=(const sirinluinternaloverrides::OverridesRequest *a1, const sirinluinternaloverrides::OverridesRequest *a2)
{
  sirinluinternaloverrides::OverridesRequest *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    sirinluinternaloverrides::OverridesRequest::OverridesRequest((sirinluinternaloverrides::OverridesRequest *)v5, a2);
    sirinluinternaloverrides::swap(a1, (sirinluinternaloverrides::OverridesRequest *)v5, v3);
    sirinluinternaloverrides::OverridesRequest::~OverridesRequest((sirinluinternaloverrides::OverridesRequest *)v5);
  }
  return a1;
}

_QWORD *sirinluinternaloverrides::swap(_QWORD *this, sirinluinternaloverrides::OverridesRequest *a2, sirinluinternaloverrides::OverridesRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = this[12];
  this[12] = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v3;
  v4 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = this[11];
  this[11] = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v11;
  v12 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  v14 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  return this;
}

uint64_t sirinluinternaloverrides::OverridesRequest::OverridesRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = &off_1E7BB0768;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v8 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (_QWORD *)*v4;
  if (*v4)
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = (_QWORD *)*v4;
    if (v14 != v13)
    {
      do
      {
        v17 = *--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      while (v14 != v13);
      v15 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v13;
    operator delete(v15);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

_QWORD *sirinluinternaloverrides::OverridesRequest::operator=(_QWORD *a1, uint64_t a2)
{
  sirinluinternaloverrides::OverridesRequest *v3;
  _BYTE v5[104];

  if (a1 != (_QWORD *)a2)
  {
    sirinluinternaloverrides::OverridesRequest::OverridesRequest((uint64_t)v5, a2);
    sirinluinternaloverrides::swap(a1, (sirinluinternaloverrides::OverridesRequest *)v5, v3);
    sirinluinternaloverrides::OverridesRequest::~OverridesRequest((sirinluinternaloverrides::OverridesRequest *)v5);
  }
  return a1;
}

uint64_t sirinluinternaloverrides::OverridesRequest::operator==(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (unsigned __int8 *)a1[12];
  v5 = *(unsigned __int8 ***)(a2 + 96);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 96);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (_QWORD *)a1[10];
  v12 = *(_QWORD *)(a2 + 80);
  if (v11)
  {
    if (!v12 || !sirinluinternal::TokenChain::operator==(v11, v12))
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 4, *(uint64_t **)(a2 + 32), *(_QWORD *)(a2 + 40))
    || !PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(a1 + 7, *(_QWORD ***)(a2 + 56), *(_QWORD *)(a2 + 64)))
  {
    return 0;
  }
  v13 = a1[11];
  v14 = *(_QWORD *)(a2 + 88);
  if (v13)
  {
    if (v14 && sirinluexternal::TurnContext::operator==(v13, v14))
      return PB::PtrVector<sirinluinternaloverrides::TurnInputAndPreprocessing>::operator==(a1 + 1, *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
    return 0;
  }
  if (v14)
    return 0;
  return PB::PtrVector<sirinluinternaloverrides::TurnInputAndPreprocessing>::operator==(a1 + 1, *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::SystemDialogAct::operator==(*(_QWORD **)(v6 - 8), v7);
    if ((_DWORD)result)
      v9 = v6 == v4;
    else
      v9 = 1;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t PB::PtrVector<sirinluinternaloverrides::TurnInputAndPreprocessing>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternaloverrides::TurnInputAndPreprocessing::operator==(*(uint64_t **)(v6 - 8), v7);
    if ((_DWORD)result)
      v9 = v6 == v4;
    else
      v9 = 1;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternaloverrides::OverridesRequest::hash_value(sirinluinternaloverrides::OverridesRequest *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluinternal::TokenChain *v4;
  unint64_t v5;
  sirinluinternal::MatchingSpan **v6;
  sirinluinternal::MatchingSpan **v7;
  uint64_t v8;
  sirinluinternal::MatchingSpan *v9;
  sirinluexternal::SystemDialogAct **v10;
  sirinluexternal::SystemDialogAct **v11;
  uint64_t v12;
  sirinluexternal::SystemDialogAct *v13;
  sirinluexternal::TurnContext *v14;
  unint64_t v15;
  sirinluinternaloverrides::TurnInputAndPreprocessing **v16;
  sirinluinternaloverrides::TurnInputAndPreprocessing **v17;
  uint64_t v18;
  sirinluinternaloverrides::TurnInputAndPreprocessing *v19;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 10);
  if (v4)
    v5 = sirinluinternal::TokenChain::hash_value(v4);
  else
    v5 = 0;
  v6 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 4);
  v7 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 5);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluinternal::MatchingSpan::hash_value(v9);
    }
    while (v6 != v7);
  }
  v10 = (sirinluexternal::SystemDialogAct **)*((_QWORD *)this + 7);
  v11 = (sirinluexternal::SystemDialogAct **)*((_QWORD *)this + 8);
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *v10++;
      v12 ^= sirinluexternal::SystemDialogAct::hash_value(v13);
    }
    while (v10 != v11);
  }
  v14 = (sirinluexternal::TurnContext *)*((_QWORD *)this + 11);
  if (v14)
    v15 = sirinluexternal::TurnContext::hash_value(v14);
  else
    v15 = 0;
  v17 = (sirinluinternaloverrides::TurnInputAndPreprocessing **)*((_QWORD *)this + 1);
  v16 = (sirinluinternaloverrides::TurnInputAndPreprocessing **)*((_QWORD *)this + 2);
  if (v17 == v16)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v17++;
      v18 ^= sirinluinternaloverrides::TurnInputAndPreprocessing::hash_value(v19);
    }
    while (v17 != v16);
  }
  return v5 ^ v3 ^ v8 ^ v12 ^ v15 ^ v18;
}

_QWORD *sirinluinternaloverrides::OverridesRequest::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[10])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternaloverrides::OverridesRequest::makeTurnContext(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[11])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB2118;
    this = (_QWORD *)v1[11];
    v1[11] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALNLU_ROUTERNLRouterTurnContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALTask *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        objc_msgSend(a1, "addActiveTasks:", v17);
        goto LABEL_23;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        objc_msgSend(a1, "addExecutedTasks:", v17);
LABEL_23:
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTaskReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_35;
        goto LABEL_31;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        objc_msgSend(a1, "addSystemDialogActs:", v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_35;
        }
        goto LABEL_31;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        objc_msgSend(a1, "addSalientEntities:", v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_31:
          PBReaderRecallMark();

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

void sirinluinternalcati::CATIResponse::~CATIResponse(sirinluinternalcati::CATIResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BB07B8;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB07B8;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB07B8;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalcati::CATIResponse::readFrom(sirinluinternalcati::CATIResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalcati::CATIResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluinternalcati::CATIResponse::formatText(sirinluinternalcati::CATIResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "hypotheses");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalcati::CATIResponse::CATIResponse(_QWORD *this)
{
  *this = &off_1E7BB07B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BB07B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalcati::CATIResponse *sirinluinternalcati::CATIResponse::CATIResponse(sirinluinternalcati::CATIResponse *this, const sirinluinternalcati::CATIResponse *a2)
{
  sirinluexternal::UserParse ***v3;
  const sirinluexternal::UUID ***v4;
  const sirinluexternal::UUID ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB07B8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v3, *v4++);
  return this;
}

uint64_t sirinluinternalcati::CATIResponse::operator=(uint64_t a1, const sirinluinternalcati::CATIResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluinternalcati::CATIResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluinternalcati::CATIResponse *)a1 != a2)
  {
    sirinluinternalcati::CATIResponse::CATIResponse((sirinluinternalcati::CATIResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BB07B8;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternalcati::swap(_QWORD *this, sirinluinternalcati::CATIResponse *a2, sirinluinternalcati::CATIResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluinternalcati::CATIResponse::CATIResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BB07B8;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BB07B8;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalcati::CATIResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluinternalcati::CATIResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BB07B8;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BB07B8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalcati::CATIResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sirinluinternalcati::CATIResponse::hash_value(sirinluinternalcati::CATIResponse *this)
{
  sirinluexternal::UserParse **v1;
  sirinluexternal::UserParse **v2;
  uint64_t v3;
  sirinluexternal::UserParse *v4;

  v1 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sirinluinternal::ContextRule::~ContextRule(sirinluinternal::ContextRule *this)
{
  sirinluinternal::ContextRule::~ContextRule(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BB0808;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::ContextRule::readFrom(sirinluinternal::ContextRule *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 8);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          v21 = (_QWORD *)operator new();
          v21[1] = 0;
          v21[2] = 0;
          *v21 = &off_1E7BB2118;
          v22 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v21;
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            v21 = (_QWORD *)*((_QWORD *)this + 4);
          }
          goto LABEL_27;
        case 2u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
          v21 = *(_QWORD **)(*((_QWORD *)this + 2) - 8);
LABEL_27:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v21 + 16))(v21, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 3u:
          *((_BYTE *)this + 48) |= 2u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 >= *((_QWORD *)a2 + 2))
          {
            v26 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v24 = v23 + 1;
            v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v23);
            *((_QWORD *)a2 + 1) = v24;
            v26 = v25 != 0;
          }
          *((_BYTE *)this + 44) = v26;
          goto LABEL_52;
        case 4u:
          *((_BYTE *)this + 48) |= 1u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_51;
              v30 += 7;
              v27 = v33;
              v15 = v31++ > 8;
            }
            while (!v15);
LABEL_47:
            LODWORD(v32) = 0;
            goto LABEL_51;
          }
          v35 = 0;
          v36 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v37 = v27 + 1;
              v38 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v37;
              v32 |= (unint64_t)(v38 & 0x7F) << v35;
              if (v38 < 0)
              {
                v35 += 7;
                v27 = v37;
                v15 = v36++ > 8;
                if (v15)
                  goto LABEL_47;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_51:
          *((_DWORD *)this + 10) = v32;
          goto LABEL_52;
        default:
          goto LABEL_20;
      }
      goto LABEL_52;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
    }
    while (!v15);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_52:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluinternal::ContextRule::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base ***)(v3 + 8);
  v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    v8 = *(_BYTE *)(v3 + 48);
  }
  if ((v8 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluinternal::ContextRule::formatText(sirinluinternal::ContextRule *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "apply_to_prompt_scenarios");
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "matching_spans");
  }
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "sda_comparison_mode");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "turn_context");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::ContextRule::ContextRule(sirinluinternal::ContextRule *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0808;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)((char *)this + 37) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0808;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)((char *)this + 37) = 0;
  return result;
}

sirinluinternal::ContextRule *sirinluinternal::ContextRule::ContextRule(sirinluinternal::ContextRule *this, const sirinluexternal::TurnContext **a2)
{
  sirinluinternal::MatchingSpan ***v4;
  sirinluexternal::TurnContext *v5;
  sirinluexternal::TurnContext *v6;
  uint64_t v7;
  const sirinluinternal::MatchingSpan **v8;
  const sirinluinternal::MatchingSpan **v9;
  char v10;
  char v11;
  int v12;

  *(_QWORD *)this = &off_1E7BB0808;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::MatchingSpan ***)((char *)this + 8);
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)((char *)this + 37) = 0;
  if (a2[4])
  {
    v5 = (sirinluexternal::TurnContext *)operator new();
    v6 = sirinluexternal::TurnContext::TurnContext(v5, a2[4]);
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = (const sirinluinternal::MatchingSpan **)a2[1];
  v9 = (const sirinluinternal::MatchingSpan **)a2[2];
  while (v8 != v9)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v4, *v8++);
  v10 = *((_BYTE *)a2 + 48);
  if ((v10 & 2) != 0)
  {
    v11 = *((_BYTE *)a2 + 44);
    *((_BYTE *)this + 48) |= 2u;
    *((_BYTE *)this + 44) = v11;
    v10 = *((_BYTE *)a2 + 48);
  }
  if ((v10 & 1) != 0)
  {
    v12 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 48) |= 1u;
    *((_DWORD *)this + 10) = v12;
  }
  return this;
}

uint64_t sirinluinternal::ContextRule::operator=(uint64_t a1, const sirinluexternal::TurnContext **a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const sirinluexternal::TurnContext **)a1 != a2)
  {
    sirinluinternal::ContextRule::ContextRule((sirinluinternal::ContextRule *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v4;
    v10 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v12;
    v12 = v3;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v6;
    sirinluinternal::ContextRule::~ContextRule((sirinluinternal::ContextRule *)v8);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::ContextRule *a2, sirinluinternal::ContextRule *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LOBYTE(v7) = *(_BYTE *)(this + 44);
  *(_BYTE *)(this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v7;
  LODWORD(v7) = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  return this;
}

uint64_t sirinluinternal::ContextRule::ContextRule(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E7BB0808;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 37) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternal::ContextRule::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  int v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    sirinluinternal::ContextRule::ContextRule((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v4;
    v10 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v12;
    v12 = v3;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v6;
    sirinluinternal::ContextRule::~ContextRule((sirinluinternal::ContextRule *)v8);
  }
  return a1;
}

BOOL sirinluinternal::ContextRule::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::TurnContext::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  if (!result)
    return result;
  if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0)
      goto LABEL_14;
    return 0;
  }
  if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
    return 0;
LABEL_14:
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return result;
}

unint64_t sirinluinternal::ContextRule::hash_value(sirinluinternal::ContextRule *this)
{
  sirinluexternal::TurnContext *v2;
  unint64_t v3;
  sirinluinternal::MatchingSpan **v4;
  sirinluinternal::MatchingSpan **v5;
  uint64_t v6;
  sirinluinternal::MatchingSpan *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (sirinluexternal::TurnContext *)*((_QWORD *)this + 4);
  if (v2)
    v3 = sirinluexternal::TurnContext::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 1);
  v5 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= sirinluinternal::MatchingSpan::hash_value(v7);
    }
    while (v4 != v5);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v8 = *((unsigned __int8 *)this + 44);
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_11;
LABEL_13:
    v9 = 0;
    return v6 ^ v3 ^ v8 ^ v9;
  }
  v8 = 0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_13;
LABEL_11:
  v9 = *((int *)this + 10);
  return v6 ^ v3 ^ v8 ^ v9;
}

_QWORD *sirinluinternal::ContextRule::makeTurnContext(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB2118;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sub_1C1F9CE7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sirinluexternal::AsrAlternative::~AsrAlternative(sirinluexternal::AsrAlternative *this)
{
  sirinluexternal::AsrAlternative::~AsrAlternative(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0858;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::AsrAlternative::readFrom(sirinluexternal::AsrAlternative *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  _DWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_DWORD *)operator new();
        *(_QWORD *)v22 = &off_1E7BB1B78;
        v22[3] = 0;
        v23 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = (_DWORD *)*((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::AsrAlternative::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t sirinluexternal::AsrAlternative::formatText(sirinluexternal::AsrAlternative *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "probability");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::AsrAlternative::AsrAlternative(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0858;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0858;
  return this;
}

sirinluexternal::AsrAlternative *sirinluexternal::AsrAlternative::AsrAlternative(sirinluexternal::AsrAlternative *this, const sirinluexternal::AsrAlternative *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7BB0858;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *v4;
    *v4 = (uint64_t)v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = operator new();
    v11 = *((_QWORD *)a2 + 2);
    *(_QWORD *)v10 = &off_1E7BB1B78;
    *(_DWORD *)(v10 + 12) = 0;
    if ((*(_BYTE *)(v11 + 12) & 1) != 0)
    {
      v12 = *(_DWORD *)(v11 + 8);
      *(_BYTE *)(v10 + 12) = 1;
      *(_DWORD *)(v10 + 8) = v12;
    }
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v10;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

uint64_t sirinluexternal::AsrAlternative::operator=(uint64_t a1, const sirinluexternal::AsrAlternative *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::AsrAlternative *)a1 != a2)
  {
    sirinluexternal::AsrAlternative::AsrAlternative((sirinluexternal::AsrAlternative *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::AsrAlternative::~AsrAlternative((sirinluexternal::AsrAlternative *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::AsrAlternative *a2, sirinluexternal::AsrAlternative *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternal::AsrAlternative::AsrAlternative(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BB0858;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluexternal::AsrAlternative::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluexternal::AsrAlternative::AsrAlternative(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::AsrAlternative::~AsrAlternative((sirinluexternal::AsrAlternative *)&v5);
  }
  return a1;
}

BOOL sirinluexternal::AsrAlternative::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  result = (v12 | v13) == 0;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    if ((*(_BYTE *)(v12 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v13 + 12) & 1) != 0 && *(float *)(v12 + 8) == *(float *)(v13 + 8))
        return 1;
    }
    else if ((*(_BYTE *)(v13 + 12) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluexternal::AsrAlternative::hash_value(sirinluexternal::AsrAlternative *this)
{
  unint64_t v2;
  uint64_t v3;
  float v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 12) & 1) != 0)
    {
      v4 = *(float *)(v3 + 8);
      v3 = LODWORD(v4);
      if (v4 == 0.0)
        v3 = 0;
    }
    else
    {
      v3 = 0;
    }
  }
  return v3 ^ v2;
}

_QWORD *sirinluexternal::AsrAlternative::makeProbability(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1B78;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::RewrittenUtterance::~RewrittenUtterance(sirinluexternal::RewrittenUtterance *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB08A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB08A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB08A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RewrittenUtterance::readFrom(sirinluexternal::RewrittenUtterance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BB0538;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::RewrittenUtterance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t sirinluexternal::RewrittenUtterance::formatText(sirinluexternal::RewrittenUtterance *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "rewritten_utterance");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "score", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::RewrittenUtterance::RewrittenUtterance(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB08A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB08A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

sirinluexternal::RewrittenUtterance *sirinluexternal::RewrittenUtterance::RewrittenUtterance(sirinluexternal::RewrittenUtterance *this, const siricommon::StringValue **a2)
{
  siricommon::StringValue *v4;
  siricommon::StringValue *v5;
  uint64_t v6;
  const siricommon::StringValue *v7;

  *(_QWORD *)this = &off_1E7BB08A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (a2[1])
  {
    v4 = (siricommon::StringValue *)operator new();
    v5 = siricommon::StringValue::StringValue(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (((_BYTE)a2[3] & 1) != 0)
  {
    v7 = a2[2];
    *((_BYTE *)this + 24) |= 1u;
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

uint64_t sirinluexternal::RewrittenUtterance::operator=(uint64_t a1, const siricommon::StringValue **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(sirinluexternal::RewrittenUtterance *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const siricommon::StringValue **)a1 != a2)
  {
    sirinluexternal::RewrittenUtterance::RewrittenUtterance((sirinluexternal::RewrittenUtterance *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = &off_1E7BB08A8;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::RewrittenUtterance *a2, sirinluexternal::RewrittenUtterance *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t sirinluexternal::RewrittenUtterance::RewrittenUtterance(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E7BB08A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E7BB08A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t sirinluexternal::RewrittenUtterance::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    v10[0] = &off_1E7BB08A8;
    v10[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

BOOL sirinluexternal::RewrittenUtterance::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t sirinluexternal::RewrittenUtterance::hash_value(sirinluexternal::RewrittenUtterance *this)
{
  uint64_t v2;
  unint64_t v3;
  double v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v3 = std::__string_hash<char>::operator()[abi:ne180100](v3);
  }
  else
  {
    v3 = 0;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v4 = *((double *)this + 2);
    if (v4 == 0.0)
      v4 = 0.0;
  }
  else
  {
    v4 = 0.0;
  }
  return *(_QWORD *)&v4 ^ v3;
}

_QWORD *sirinluexternal::RewrittenUtterance::makeRewrittenUtterance(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalnlu_router::PrimitiveValue::~PrimitiveValue(sirinluexternalnlu_router::PrimitiveValue *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB08F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB08F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB08F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::readFrom(sirinluexternalnlu_router::PrimitiveValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 17)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF900;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::formatText(sirinluexternalnlu_router::PrimitiveValue *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "app");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(_QWORD *this)
{
  *this = &off_1E7BB08F8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB08F8;
  this[1] = 0;
  return this;
}

sirinluexternalnlu_router::PrimitiveValue *sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(sirinluexternalnlu_router::PrimitiveValue *this, const sirinluexternalnlu_router::App **a2)
{
  sirinluexternalnlu_router::App *v4;
  sirinluexternalnlu_router::App *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BB08F8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluexternalnlu_router::App *)operator new();
    v5 = sirinluexternalnlu_router::App::App(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::operator=(uint64_t a1, const sirinluexternalnlu_router::App **a2)
{
  uint64_t v3;
  void (**v5)(sirinluexternalnlu_router::PrimitiveValue *__hidden);
  uint64_t v6;

  if ((const sirinluexternalnlu_router::App **)a1 != a2)
  {
    sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue((sirinluexternalnlu_router::PrimitiveValue *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BB08F8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::PrimitiveValue *a2, sirinluexternalnlu_router::PrimitiveValue *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB08F8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB08F8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BB08F8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluexternalnlu_router::App::operator==(v2, v3);
}

unint64_t sirinluexternalnlu_router::PrimitiveValue::hash_value(sirinluexternalnlu_router::PrimitiveValue *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    return 0;
}

_QWORD *sirinluexternalnlu_router::PrimitiveValue::makeApp(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF900;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse(sirinluinternalcontextupdate::ContextUpdateResponse *this)
{
  sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BB0948;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::readFrom(sirinluinternalcontextupdate::ContextUpdateResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  char *v44;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        v26 = (_QWORD *)operator new();
        *v26 = &off_1E7BB0CB8;
        v26[3] = 0;
        v27 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v26;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v26 = (_QWORD *)*((_QWORD *)this + 4);
        }
      }
      else
      {
        if ((v12 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_48;
        }
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_1E7BB1F78;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_QWORD *)(v20 + 40) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v28 = *((_QWORD *)this + 1);
          v29 = ((uint64_t)v23 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v30 = v22 - v28;
          v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1))
            v31 = v29 + 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          v44 = v8;
          if (v32)
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v32);
          else
            v33 = 0;
          v34 = (uint64_t *)(v32 + 8 * v29);
          v35 = v32 + 8 * v33;
          v43 = v35;
          *v34 = v21;
          v24 = v34 + 1;
          v42.i64[1] = (uint64_t)(v34 + 1);
          v37 = (_QWORD *)*((_QWORD *)this + 1);
          v36 = (_QWORD *)*((_QWORD *)this + 2);
          if (v36 == v37)
          {
            v39 = vdupq_n_s64((unint64_t)v36);
          }
          else
          {
            do
            {
              v38 = *--v36;
              *v36 = 0;
              *--v34 = v38;
            }
            while (v36 != v37);
            v39 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v42.i64[1];
            v35 = v43;
          }
          *((_QWORD *)this + 1) = v34;
          *((_QWORD *)this + 2) = v24;
          v42 = v39;
          v40 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v35;
          v43 = v40;
          v41 = v39.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v41);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v26 = (_QWORD *)*(v24 - 1);
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v26 + 16))(v26, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_48:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

void sub_1C1F9E744(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 8);
  v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(const PB::Base **)(v3 + 32);
  if (v7)
    return PB::Writer::writeSubmessage(a2, v7);
  return this;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::formatText(sirinluinternalcontextupdate::ContextUpdateResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "reformed_turn_input_bundles");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "request_id");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse(sirinluinternalcontextupdate::ContextUpdateResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0948;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0948;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternalcontextupdate::ContextUpdateResponse *sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse(sirinluinternalcontextupdate::ContextUpdateResponse *this, const sirinluinternalcontextupdate::ContextUpdateResponse *a2)
{
  int64x2_t *v4;
  const sirinluinternalcontextupdate::ReformedTurnInputBundle **v5;
  const sirinluinternalcontextupdate::ReformedTurnInputBundle **i;
  const sirinluinternalcontextupdate::ReformedTurnInputBundle *v7;
  sirinluinternalcontextupdate::ReformedTurnInputBundle *v8;
  unint64_t v9;
  sirinluinternalcontextupdate::ReformedTurnInputBundle **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  sirinluinternalcontextupdate::ReformedTurnInputBundle **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  sirinluinternalcontextupdate::ReformedTurnInputBundle *v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  char *v31;

  *(_QWORD *)this = &off_1E7BB0948;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (const sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((_QWORD *)a2 + 1);
  for (i = (const sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((_QWORD *)a2 + 2); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (sirinluinternalcontextupdate::ReformedTurnInputBundle *)operator new();
    sirinluinternalcontextupdate::ReformedTurnInputBundle::ReformedTurnInputBundle(v8, v7);
    v10 = (sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((_QWORD *)this + 2);
    v9 = *((_QWORD *)this + 3);
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((uint64_t)v10 - v4->i64[0]) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = v9 - v4->i64[0];
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v31 = (char *)this + 24;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v15);
      else
        v16 = 0;
      v17 = (sirinluinternalcontextupdate::ReformedTurnInputBundle **)(v15 + 8 * v12);
      v18 = v15 + 8 * v16;
      v30 = v18;
      *v17 = v8;
      v11 = v17 + 1;
      v29.i64[1] = (uint64_t)(v17 + 1);
      v20 = (_QWORD *)*((_QWORD *)this + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 2);
      if (v19 == v20)
      {
        v22 = vdupq_n_s64((unint64_t)v19);
      }
      else
      {
        do
        {
          v21 = (sirinluinternalcontextupdate::ReformedTurnInputBundle *)*--v19;
          *v19 = 0;
          *--v17 = v21;
        }
        while (v19 != v20);
        v22 = *v4;
        v11 = (_QWORD *)v29.i64[1];
        v18 = v30;
      }
      *((_QWORD *)this + 1) = v17;
      *((_QWORD *)this + 2) = v11;
      v29 = v22;
      v23 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v18;
      v30 = v23;
      v28 = v22.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v28);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 2) = v11;
  }
  if (*((_QWORD *)a2 + 4))
  {
    v24 = operator new();
    v25 = sirinluexternal::UUID::UUID(v24, *((const sirinluexternal::UUID **)a2 + 4));
    v26 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  return this;
}

void sub_1C1F9EAEC(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::operator=(uint64_t a1, const sirinluinternalcontextupdate::ContextUpdateResponse *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluinternalcontextupdate::ContextUpdateResponse *)a1 != a2)
  {
    sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse((sirinluinternalcontextupdate::ContextUpdateResponse *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse((sirinluinternalcontextupdate::ContextUpdateResponse *)v6);
  }
  return a1;
}

_QWORD *sirinluinternalcontextupdate::swap(_QWORD *this, sirinluinternalcontextupdate::ContextUpdateResponse *a2, sirinluinternalcontextupdate::ContextUpdateResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  return this;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7BB0948;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 8) = 0u;
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a2 + 24) = 0u;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse((sirinluinternalcontextupdate::ContextUpdateResponse *)v6);
  }
  return a1;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)a1[1];
  v2 = (uint64_t *)a1[2];
  v4 = (uint64_t *)a2[1];
  if ((char *)v2 - (char *)v3 != a2[2] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    result = sirinluinternalcontextupdate::ReformedTurnInputBundle::operator==(*v3, *v4);
    if (!(_DWORD)result)
      return result;
    ++v3;
    ++v4;
  }
  v8 = a1[4];
  v9 = a2[4];
  result = (v8 | v9) == 0;
  if (v8)
  {
    if (v9)
      return sirinluexternal::UUID::operator==(a1[4], v9);
  }
  return result;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::hash_value(sirinluinternalcontextupdate::ContextUpdateResponse *this)
{
  sirinluinternalcontextupdate::ReformedTurnInputBundle **v2;
  sirinluinternalcontextupdate::ReformedTurnInputBundle **v3;
  uint64_t v4;
  sirinluinternalcontextupdate::ReformedTurnInputBundle *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((_QWORD *)this + 1);
  v3 = (sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= sirinluinternalcontextupdate::ReformedTurnInputBundle::hash_value(v5);
    }
    while (v2 != v3);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 28) & 1) != 0)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if ((*(_BYTE *)(v6 + 28) & 2) != 0)
      {
LABEL_9:
        v8 = *(_QWORD *)(v6 + 16);
        if ((*(_BYTE *)(v6 + 28) & 4) != 0)
        {
LABEL_10:
          v9 = *(int *)(v6 + 24);
LABEL_14:
          v6 = v8 ^ v7 ^ v9;
          return v6 ^ v4;
        }
LABEL_13:
        v9 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(v6 + 28) & 2) != 0)
        goto LABEL_9;
    }
    v8 = 0;
    if ((*(_BYTE *)(v6 + 28) & 4) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  return v6 ^ v4;
}

_QWORD *sirinluinternalcontextupdate::ContextUpdateResponse::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALInternalSpanDataReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSiriVocabularySpanData *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUINTERNALSiriVocabularySpanData);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALSiriVocabularySpanDataReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_35;
        }
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALPLUMSpanData);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALPLUMSpanDataReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_35;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALOvertonKGSpanData);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALOvertonKGSpanDataReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_35;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMentionDetectorSpanData);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALMentionDetectorSpanDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 5u:
        v17 = objc_alloc_init(SIRINLUINTERNALMentionResolverSpanData);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && SIRINLUINTERNALMentionResolverSpanDataReadFrom((uint64_t)v17, a2))
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_36;
    }
  }
}

BOOL SIRINLUEXTERNALSUBWORD_EMBEDDINGSubwordEmbeddingSetupReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0998;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100](v23);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF498;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "response");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0998;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0998;
  return this;
}

sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  uint64_t *v4;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v5;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluinternalsnlp_intermediate::LinearizedTensor **v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BB0998;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[2])
  {
    v5 = (sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)operator new();
    v6 = sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(v5, a2[2]);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[1];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)*v10, (std::string::size_type)v10[1]);
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = (std::string::size_type)v10[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *v4;
    *v4 = (uint64_t)v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor ***)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB0998;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  result = v7 == 0;
  if (!v6)
    return result;
  if (!v7)
    return 0;
  v9 = v6[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v6[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v7[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a2 + 8);
  else
    v13 = *v7;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v6, v13, *((_QWORD *)v6 + 1));
  if (!v6[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v6++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
  uint64_t v2;
  sirinluinternalsnlp_intermediate::LinearizedTensor *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (v2 && (v3 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v2 + 8)) != 0)
    v4 = sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  return v5 ^ v4;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::makeResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF498;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALNLV4_PARSERNLv4ParserResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserParse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_msgSend(a1, "addHypotheses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlc::SNLCParserResponse::~SNLCParserResponse(sirinluinternalsnlc::SNLCParserResponse *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::readFrom(sirinluinternalsnlc::SNLCParserResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_46:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::formatText(sirinluinternalsnlc::SNLCParserResponse *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "classification_label");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "classification_probability", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB09E8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB09E8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

float sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse(sirinluinternalsnlc::SNLCParserResponse *this, const sirinluinternalsnlc::SNLCParserResponse *a2)
{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = &off_1E7BB09E8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = &off_1E7BB09E8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

float *sirinluinternalsnlc::SNLCParserResponse::operator=(float *a1, uint64_t a2, float a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(sirinluinternalsnlc::SNLCParserResponse *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = &off_1E7BB09E8;
    v14 = 0;
    v4 = *(_BYTE *)(a2 + 16);
    if ((v4 & 1) != 0)
    {
      v5 = *(_DWORD *)(a2 + 8);
      LOBYTE(v14) = 1;
      v6 = 3;
      if ((v4 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 12);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v5;
    v12 = v8;
    v9 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float sirinluinternalsnlc::swap(sirinluinternalsnlc *this, sirinluinternalsnlc::SNLCParserResponse *a2, sirinluinternalsnlc::SNLCParserResponse *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7BB09E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7BB09E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *sirinluinternalsnlc::SNLCParserResponse::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(sirinluinternalsnlc::SNLCParserResponse *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = &off_1E7BB09E8;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[2];
    v5 = a2[3];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[2];
    a1[2] = v4;
    v11 = v7;
    v8 = a1[3];
    a1[3] = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

BOOL sirinluinternalsnlc::SNLCParserResponse::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::hash_value(sirinluinternalsnlc::SNLCParserResponse *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

BOOL SIRINLUINTERNALOVERRIDESTurnInputAndPreprocessingReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUINTERNALTokenChain *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v17;
        goto LABEL_31;
      case 2u:
        v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2))
          goto LABEL_35;
        goto LABEL_30;
      case 3u:
        v18 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v18);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_30;
      case 4u:
        v18 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensor *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensor);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensorReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRICOMMONInt32ValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void siricommon::Int64Value::~Int64Value(siricommon::Int64Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siricommon::Int64Value::readFrom(siricommon::Int64Value *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_42:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::Int64Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t siricommon::Int64Value::formatText(siricommon::Int64Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "value");
  return PB::TextFormatter::endObject(a2);
}

uint64_t siricommon::Int64Value::Int64Value(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB0A38;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB0A38;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t siricommon::Int64Value::Int64Value(uint64_t this, const siricommon::Int64Value *a2)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BB0A38;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BB0A38;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::Int64Value::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[0] = &off_1E7BB0A38;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = &off_1E7BB0A38;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::Int64Value *a2, siricommon::Int64Value *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

uint64_t siricommon::Int64Value::Int64Value(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BB0A38;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB0A38;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

BOOL siricommon::Int64Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t siricommon::Int64Value::hash_value(siricommon::Int64Value *this)
{
  if ((*((_BYTE *)this + 16) & 1) != 0)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

BOOL SIRINLUEXTERNALNLContextReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALSystemDialogActGroup *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogActGroup);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALSystemDialogActGroupReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_34;
        }
        goto LABEL_38;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        objc_msgSend(a1, "addActiveTasks:", v17);
        goto LABEL_26;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        objc_msgSend(a1, "addExecutedTasks:", v17);
LABEL_26:
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTaskReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_38;
        goto LABEL_34;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        objc_msgSend(a1, "addSalientEntities:", v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_38;
        }
        goto LABEL_34;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        objc_msgSend(a1, "addSystemDialogActs:", v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_35;
    }
  }
}

void sirinluinternal::MentionResolverSpanData::~MentionResolverSpanData(sirinluinternal::MentionResolverSpanData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluinternal::MentionResolverSpanData::readFrom(sirinluinternal::MentionResolverSpanData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluinternal::MentionResolverSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t sirinluinternal::MentionResolverSpanData::formatText(sirinluinternal::MentionResolverSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "joint_score", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "model_score", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternal::MentionResolverSpanData::MentionResolverSpanData(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB0A88;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB0A88;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double sirinluinternal::MentionResolverSpanData::MentionResolverSpanData(sirinluinternal::MentionResolverSpanData *this, const sirinluinternal::MentionResolverSpanData *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = &off_1E7BB0A88;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = 1;
    *((double *)this + 1) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

{
  char v2;
  double result;

  *(_QWORD *)this = &off_1E7BB0A88;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = 1;
    *((double *)this + 1) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t sirinluinternal::MentionResolverSpanData::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(sirinluinternal::MentionResolverSpanData *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = &off_1E7BB0A88;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::MentionResolverSpanData *a2, sirinluinternal::MentionResolverSpanData *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double sirinluinternal::MentionResolverSpanData::MentionResolverSpanData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0A88;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0A88;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t sirinluinternal::MentionResolverSpanData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(sirinluinternal::MentionResolverSpanData *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7BB0A88;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::MentionResolverSpanData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

uint64_t sirinluinternal::MentionResolverSpanData::hash_value(sirinluinternal::MentionResolverSpanData *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

BOOL SIRINLUEXTERNALUserWantedToRepeatReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALSystemDialogActReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_43;
        goto LABEL_50;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemPrompted);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALSystemPromptedReadFrom((uint64_t)v17, a2))
          goto LABEL_50;
        goto LABEL_43;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemOffered);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSystemOfferedReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_50;
        goto LABEL_43;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemGaveOptions);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSystemGaveOptionsReadFrom(v17, a2) & 1) == 0)
          goto LABEL_50;
        goto LABEL_43;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemInformed);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemInformedReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemReportedSuccess);
        objc_storeStrong(a1 + 8, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALSystemReportedSuccessReadFrom((uint64_t)v17, a2))
          goto LABEL_50;
        goto LABEL_43;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemReportedFailure);
        objc_storeStrong(a1 + 7, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALSystemReportedFailureReadFrom((uint64_t)v17, a2))
          goto LABEL_43;
        goto LABEL_50;
      default:
        if ((v10 >> 3) != 101)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong(a1 + 6, v17);
        if (PBReaderPlaceMark() && (SIRICOMMONStringValueReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_43:
          PBReaderRecallMark();

          goto LABEL_44;
        }
LABEL_50:

        return 0;
    }
  }
}

uint64_t SIRICOMMONInt64ValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALEMBEDDINGEmbeddingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUINTERNALTokenChain *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALSystemGaveOptionsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserDialogAct *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserDialogAct);
        objc_msgSend(a1, "addChoices:", v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALUserDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternal::CompareOptions::~CompareOptions(sirinluinternal::CompareOptions *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluinternal::CompareOptions::readFrom(sirinluinternal::CompareOptions *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 12) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 10) = v24;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 12) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v26 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v26 = v25 != 0;
        }
        *((_BYTE *)this + 9) = v26;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::CompareOptions::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 12);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_BYTE *)(v3 + 12);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2);
    }
  }
  else if ((*(_BYTE *)(this + 12) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 12) & 4) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t sirinluinternal::CompareOptions::formatText(sirinluinternal::CompareOptions *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 12);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 12) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "diacritic_insensitive");
    if ((*((_BYTE *)this + 12) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "case_insensitive");
  v5 = *((_BYTE *)this + 12);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "width_insensitive");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternal::CompareOptions::CompareOptions(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB0AD8;
  *(_WORD *)(this + 8) = 1;
  *(_BYTE *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB0AD8;
  *(_WORD *)(this + 8) = 1;
  *(_BYTE *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t sirinluinternal::CompareOptions::CompareOptions(uint64_t this, const sirinluinternal::CompareOptions *a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;

  *(_QWORD *)this = &off_1E7BB0AD8;
  v2 = 1;
  *(_WORD *)(this + 8) = 1;
  *(_BYTE *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  v3 = *((_BYTE *)a2 + 12);
  if ((v3 & 1) != 0)
  {
    v4 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v4;
    v3 = *((_BYTE *)a2 + 12);
    if ((v3 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 0;
  if ((*((_BYTE *)a2 + 12) & 2) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 9);
    v2 |= 2u;
    *(_BYTE *)(this + 12) = v2;
    *(_BYTE *)(this + 9) = v5;
    v3 = *((_BYTE *)a2 + 12);
  }
LABEL_6:
  if ((v3 & 4) != 0)
  {
    v6 = *((_BYTE *)a2 + 10);
    *(_BYTE *)(this + 12) = v2 | 4;
    *(_BYTE *)(this + 10) = v6;
  }
  return this;
}

uint64_t sirinluinternal::CompareOptions::operator=(uint64_t a1, _BYTE *a2)
{
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  int v8;
  __int16 v9;
  void (**v11)(sirinluinternal::CompareOptions *__hidden);
  char v12;
  __int16 v13;
  int v14;

  if ((_BYTE *)a1 != a2)
  {
    v11 = &off_1E7BB0AD8;
    v14 = 0;
    v3 = a2[12];
    v4 = 1;
    if ((v3 & 1) != 0)
    {
      LOBYTE(v14) = 1;
      v4 = a2[8];
      v5 = 1;
      if ((v3 & 2) != 0)
      {
LABEL_4:
        v6 = a2[9];
        v5 |= 2u;
        LOBYTE(v14) = v5;
        if ((v3 & 4) != 0)
        {
LABEL_5:
          v7 = a2[10];
          LOBYTE(v14) = v5 | 4;
LABEL_9:
          v8 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = v14;
          v14 = v8;
          LOBYTE(v8) = *(_BYTE *)(a1 + 8);
          *(_BYTE *)(a1 + 8) = v4;
          v12 = v8;
          v9 = *(_WORD *)(a1 + 9);
          *(_BYTE *)(a1 + 9) = v6;
          v13 = v9;
          *(_BYTE *)(a1 + 10) = v7;
          PB::Base::~Base((PB::Base *)&v11);
          return a1;
        }
LABEL_8:
        v7 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v5 = 0;
      if ((a2[12] & 2) != 0)
        goto LABEL_4;
    }
    v6 = 0;
    if ((v3 & 4) != 0)
      goto LABEL_5;
    goto LABEL_8;
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::CompareOptions *a2, sirinluinternal::CompareOptions *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 9);
  *(_BYTE *)(this + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a2 + 9) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 10);
  *(_BYTE *)(this + 10) = *((_BYTE *)a2 + 10);
  *((_BYTE *)a2 + 10) = v3;
  return this;
}

uint64_t sirinluinternal::CompareOptions::CompareOptions(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BB0AD8;
  *(_WORD *)(result + 8) = 1;
  *(_BYTE *)(result + 10) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 10);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB0AD8;
  *(_WORD *)(result + 8) = 1;
  *(_BYTE *)(result + 10) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 10);
  return result;
}

uint64_t sirinluinternal::CompareOptions::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int16 v5;
  int v6;
  void (**v8)(sirinluinternal::CompareOptions *__hidden);
  char v9;
  __int16 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_1E7BB0AD8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_WORD *)(a2 + 9);
    v6 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v11 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v9 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 9);
    *(_WORD *)(a1 + 9) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

BOOL sirinluinternal::CompareOptions::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 v2;

  if ((a1[12] & 1) != 0)
  {
    if ((a2[12] & 1) == 0 || a1[8] != a2[8])
      return 0;
  }
  else if ((a2[12] & 1) != 0)
  {
    return 0;
  }
  if ((a1[12] & 2) != 0)
  {
    if ((a2[12] & 2) == 0 || a1[9] != a2[9])
      return 0;
  }
  else if ((a2[12] & 2) != 0)
  {
    return 0;
  }
  v2 = (a2[12] & 4) == 0;
  if ((a1[12] & 4) != 0)
    return (a2[12] & 4) != 0 && a1[10] == a2[10];
  return v2;
}

uint64_t sirinluinternal::CompareOptions::hash_value(sirinluinternal::CompareOptions *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 12) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 12) & 2) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 12) & 4) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((unsigned __int8 *)this + 8);
  if ((*((_BYTE *)this + 12) & 2) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 9);
  if ((*((_BYTE *)this + 12) & 4) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((unsigned __int8 *)this + 10);
  return v2 ^ v1 ^ v3;
}

BOOL SIRINLUEXTERNALSemVerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__patchVersion;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__patchVersion;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__patchVersion;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__majorVersion;
            goto LABEL_47;
          }
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            break;
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__majorVersion;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__majorVersion;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 20) |= 2u;
    while (1)
    {
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__minorVersion;
        goto LABEL_47;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
      *(_QWORD *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        break;
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__minorVersion;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__minorVersion;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary(sirinluexternal::UsoOntologyVocabulary *this)
{
  sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BB0B28;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoOntologyVocabulary::readFrom(sirinluexternal::UsoOntologyVocabulary *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (std::vector<std::string> *)((char *)this + 8);
    v9 = (std::allocator<std::string> *)((char *)this + 24);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_29;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        v25 = (char *)*((_QWORD *)this + 2);
        v24 = *((_QWORD *)this + 3);
        if ((unint64_t)v25 >= v24)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (char *)v8->__begin_) >> 3);
          v28 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v28;
          __v.__end_cap_.__value_ = v9;
          if (v30)
            v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v30);
          else
            v31 = 0;
          v32 = (std::string *)(v30 + 24 * v27);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v30;
          __v.__begin_ = v32;
          __v.__end_cap_.__value_ = (std::string *)(v30 + 24 * v31);
          v32->__r_.__value_.__r.__words[0] = 0;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          v26 = (_QWORD *)*((_QWORD *)this + 2);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          v26 = v25 + 24;
          *((_QWORD *)v25 + 2) = 0;
        }
        *((_QWORD *)this + 2) = v26;
        PB::Reader::read();
      }
      else if ((v13 >> 3) == 1)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_1E7BB15B8;
        v21[5] = 0;
        v22 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_DWORD *)*((_QWORD *)this + 4);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
      if (v16)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v5 != v6)
  {
    this = PB::Writer::write();
    v5 += 24;
  }
  return this;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::formatText(sirinluexternal::UsoOntologyVocabulary *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "uso_version");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary(sirinluexternal::UsoOntologyVocabulary *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0B28;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0B28;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluexternal::UsoOntologyVocabulary *sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary(sirinluexternal::UsoOntologyVocabulary *this, const sirinluexternal::UsoOntologyVocabulary *a2)
{
  std::vector<std::string> *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BB0B28;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (std::vector<std::string> *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = operator new();
    v6 = sirinluexternal::SemVer::SemVer(v5, *((const sirinluexternal::SemVer **)a2 + 4));
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *((std::string **)a2 + 1), *((__int128 **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  return this;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::operator=(uint64_t a1, const sirinluexternal::UsoOntologyVocabulary *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluexternal::UsoOntologyVocabulary *)a1 != a2)
  {
    sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary((sirinluexternal::UsoOntologyVocabulary *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary((sirinluexternal::UsoOntologyVocabulary *)v6);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::UsoOntologyVocabulary *a2, sirinluexternal::UsoOntologyVocabulary *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (std::vector<std::string> *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BB0B28;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::string>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary((sirinluexternal::UsoOntologyVocabulary *)v6);
  }
  return a1;
}

BOOL sirinluexternal::UsoOntologyVocabulary::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::SemVer::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v8 = a1 + 8;
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 **)(v8 + 8);
  v10 = a2 + 8;
  v9 = *(unsigned __int8 **)(a2 + 8);
  if (v7 - v6 != *(_QWORD *)(v10 + 8) - (_QWORD)v9)
    return 0;
  if (v6 == v7)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v6, v9);
    if (!result)
      break;
    v6 += 24;
    v9 += 24;
  }
  while (v6 != v7);
  return result;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::hash_value(sirinluexternal::UsoOntologyVocabulary *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 20) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 20) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 20) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(unsigned int *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 20) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(unsigned int *)(v1 + 12);
  if ((*(_BYTE *)(v1 + 20) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(unsigned int *)(v1 + 16);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v8 ^= std::__string_hash<char>::operator()[abi:ne180100](v6);
      v6 += 24;
    }
    while (v6 != v7);
  }
  return v8 ^ v5;
}

_QWORD *sirinluexternal::UsoOntologyVocabulary::makeUsoVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB15B8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0B78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0B78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0B78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::readFrom(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB00F0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 28) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::formatText(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "version");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(_QWORD *this)
{
  *this = &off_1E7BB0B78;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB0B78;
  this[1] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::NLv4AssetVersion *sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this, const sirinluinternalsnlp_intermediate::SNLPAssetVersion **a2)
{
  sirinluinternalsnlp_intermediate::SNLPAssetVersion *v4;
  sirinluinternalsnlp_intermediate::SNLPAssetVersion *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BB0B78;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)operator new();
    v5 = sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPAssetVersion **a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternalsnlp_intermediate::NLv4AssetVersion *__hidden);
  uint64_t v6;

  if ((const sirinluinternalsnlp_intermediate::SNLPAssetVersion **)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion((sirinluinternalsnlp_intermediate::NLv4AssetVersion *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BB0B78;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4AssetVersion *a2, sirinluinternalsnlp_intermediate::NLv4AssetVersion *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB0B78;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB0B78;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BB0B78;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4AssetVersion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator==(v2, v3);
}

sirinluinternalsnlp_intermediate::SNLPAssetVersion *sirinluinternalsnlp_intermediate::NLv4AssetVersion::hash_value(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
  sirinluinternalsnlp_intermediate::SNLPAssetVersion *result;

  result = (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)*((_QWORD *)this + 1);
  if (result)
    return (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)sirinluinternalsnlp_intermediate::SNLPAssetVersion::hash_value(result);
  return result;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4AssetVersion::makeVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB00F0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BB0BC8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::readFrom(sirinluinternalmention_resolver::MentionResolverResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        v24 = (_QWORD *)operator new();
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        v25 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v24;
        if (v25)
          std::default_delete<std::string>::operator()[abi:ne180100](v25);
        PB::Reader::read();
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
          v21 = *(_QWORD **)(*((_QWORD *)this + 2) - 8);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
LABEL_27:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            goto LABEL_36;
          }
          v21 = (_QWORD *)operator new();
          *v21 = &off_1E7BB0CB8;
          v21[3] = 0;
          v22 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v21;
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            v21 = (_QWORD *)*((_QWORD *)this + 4);
          }
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
LABEL_36:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[1];
  v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if (v3[5])
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::formatText(sirinluinternalmention_resolver::MentionResolverResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "mentions");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "request_id");
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0BC8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0BC8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluinternalmention_resolver::MentionResolverResponse *sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this, const sirinluexternal::UUID **a2)
{
  sirinluinternal::MatchingSpan ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const sirinluinternal::MatchingSpan **v8;
  const sirinluinternal::MatchingSpan **v9;
  std::string *v10;
  std::string *v11;
  const sirinluexternal::UUID *v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E7BB0BC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::MatchingSpan ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (a2[4])
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, a2[4]);
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = (const sirinluinternal::MatchingSpan **)a2[1];
  v9 = (const sirinluinternal::MatchingSpan **)a2[2];
  while (v8 != v9)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v4, *v8++);
  if (a2[5])
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = a2[5];
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *(_OWORD *)v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse((sirinluinternalmention_resolver::MentionResolverResponse *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse((sirinluinternalmention_resolver::MentionResolverResponse *)&v7);
  }
  return a1;
}

_QWORD *sirinluinternalmention_resolver::swap(_QWORD *this, sirinluinternalmention_resolver::MentionResolverResponse *a2, sirinluinternalmention_resolver::MentionResolverResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E7BB0BC8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse((sirinluinternalmention_resolver::MentionResolverResponse *)&v7);
  }
  return a1;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = a1[4];
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 1, *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  if (!(_DWORD)result)
    return result;
  v7 = (unsigned __int8 *)a1[5];
  v8 = *(unsigned __int8 ***)(a2 + 40);
  result = v8 == 0;
  if (!v7)
    return result;
  if (!v8)
    return 0;
  v9 = v7[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v7[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v8[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a2 + 40);
  else
    v13 = *v8;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v7, v13, *((_QWORD *)v7 + 1));
  if (!v7[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v7++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalmention_resolver::MentionResolverResponse::hash_value(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternal::MatchingSpan **v7;
  sirinluinternal::MatchingSpan **v8;
  uint64_t v9;
  sirinluinternal::MatchingSpan *v10;
  unint64_t v11;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 1);
  v8 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      v9 ^= sirinluinternal::MatchingSpan::hash_value(v10);
    }
    while (v7 != v8);
  }
  v11 = *((_QWORD *)this + 5);
  if (v11)
    v11 = std::__string_hash<char>::operator()[abi:ne180100](v11);
  return v9 ^ v6 ^ v11;
}

_QWORD *sirinluinternalmention_resolver::MentionResolverResponse::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void siricommon::DoubleValue::~DoubleValue(siricommon::DoubleValue *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siricommon::DoubleValue::readFrom(siricommon::DoubleValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::DoubleValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(this + 8));
  return this;
}

uint64_t siricommon::DoubleValue::formatText(siricommon::DoubleValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "value", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t siricommon::DoubleValue::DoubleValue(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB0C18;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB0C18;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double siricommon::DoubleValue::DoubleValue(siricommon::DoubleValue *this, const siricommon::DoubleValue *a2)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0C18;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0C18;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t siricommon::DoubleValue::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E7BB0C18;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v8[0] = &off_1E7BB0C18;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double siricommon::swap(siricommon *this, siricommon::DoubleValue *a2, siricommon::DoubleValue *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double siricommon::DoubleValue::DoubleValue(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0C18;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E7BB0C18;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

BOOL siricommon::DoubleValue::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return result;
}

uint64_t siricommon::DoubleValue::hash_value(siricommon::DoubleValue *this)
{
  if ((*((_BYTE *)this + 16) & 1) == 0)
    return 0;
  if (*((double *)this + 1) == 0.0)
    return 0;
  return *((_QWORD *)this + 1);
}

uint64_t SIRINLUINTERNALOvertonKGSpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21)
          objc_msgSend((id)a1, "addFeatures:", v21);

      }
      else if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest(sirinluinternalsnlc::SNLCParserRequest *this)
{
  sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BB0C68;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v8 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::readFrom(sirinluinternalsnlc::SNLCParserRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_22:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB0CB8;
        *(_QWORD *)(v21 + 24) = 0;
        v22 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *((_QWORD *)this + 7);
        }
        break;
      case 2u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE788;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        v23 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v21;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v21 = *((_QWORD *)this + 8);
        }
        break;
      case 3u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB1DD0;
        *(_DWORD *)(v21 + 64) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v21 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
        v21 = *(_QWORD *)(*((_QWORD *)this + 4) - 8);
        break;
      case 5u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB16E8;
        *(_DWORD *)(v21 + 148) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        *(_OWORD *)(v21 + 104) = 0u;
        *(_QWORD *)(v21 + 128) = 0;
        *(_QWORD *)(v21 + 136) = 0;
        v25 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v21 = *((_QWORD *)this + 9);
        }
        break;
      case 6u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE238;
        *(_DWORD *)(v21 + 72) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 52) = 0u;
        v26 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v21;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v21 = *((_QWORD *)this + 2);
        }
        break;
      case 7u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE468;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_QWORD *)(v21 + 56) = 0;
        v27 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v21;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v21 = *((_QWORD *)this + 6);
        }
        break;
      default:
        goto LABEL_20;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_40:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_22;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_40;
  return result;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 56);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[8];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[1];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base **)v3[3];
  v8 = (const PB::Base **)v3[4];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = (const PB::Base *)v3[9];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[2];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[6];
  if (v12)
    return PB::Writer::writeSubmessage(a2, v12);
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::formatText(sirinluinternalsnlc::SNLCParserRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embeddings");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "legacy_context");
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "matching_spans");
  }
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "nlu_request_id");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "request_id");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "tokenised_utterance");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "turn_input");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest(sirinluinternalsnlc::SNLCParserRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0C68;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0C68;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluinternalsnlc::SNLCParserRequest *sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest(sirinluinternalsnlc::SNLCParserRequest *this, const sirinluinternalsnlc::SNLCParserRequest *a2)
{
  sirinluinternal::NLv4EmbeddingTensor **v4;
  sirinluinternal::MatchingSpan ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sirinluinternalnlv4_parser::Tokenisation *v9;
  sirinluinternalnlv4_parser::Tokenisation *v10;
  uint64_t v11;
  char **v12;
  sirinluinternal::NLv4EmbeddingTensor *v13;
  sirinluinternal::NLv4EmbeddingTensor *v14;
  const sirinluinternal::MatchingSpan **v15;
  const sirinluinternal::MatchingSpan **v16;
  sirinluexternal::TurnInput *v17;
  sirinluexternal::TurnInput *v18;
  uint64_t v19;
  sirinluexternal::LegacyNLContext *v20;
  sirinluexternal::LegacyNLContext *v21;
  uint64_t v22;
  sirinluexternal::RequestID *v23;
  sirinluexternal::RequestID *v24;
  uint64_t v25;

  *(_QWORD *)this = &off_1E7BB0C68;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (sirinluinternal::MatchingSpan ***)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)a2 + 7))
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, *((const sirinluexternal::UUID **)a2 + 7));
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v9 = (sirinluinternalnlv4_parser::Tokenisation *)operator new();
    v10 = sirinluinternalnlv4_parser::Tokenisation::Tokenisation(v9, *((const sirinluinternalnlv4_parser::Tokenisation **)a2 + 8));
    v11 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v12 = (char **)operator new();
    v13 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v12, *((char ***)a2 + 1));
    v14 = *v4;
    *v4 = v13;
    if (v14)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 3);
  v16 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 4);
  while (v15 != v16)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v5, *v15++);
  if (*((_QWORD *)a2 + 9))
  {
    v17 = (sirinluexternal::TurnInput *)operator new();
    v18 = sirinluexternal::TurnInput::TurnInput(v17, *((const sirinluexternal::TurnInput **)a2 + 9));
    v19 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v20 = (sirinluexternal::LegacyNLContext *)operator new();
    v21 = sirinluexternal::LegacyNLContext::LegacyNLContext(v20, *((const sirinluexternal::LegacyNLContext **)a2 + 2));
    v22 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v23 = (sirinluexternal::RequestID *)operator new();
    v24 = sirinluexternal::RequestID::RequestID(v23, *((const sirinluexternal::RequestID **)a2 + 6));
    v25 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::operator=(uint64_t a1, const sirinluinternalsnlc::SNLCParserRequest *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluinternalsnlc::SNLCParserRequest *)a1 != a2)
  {
    sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest((sirinluinternalsnlc::SNLCParserRequest *)&v9, a2);
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest((sirinluinternalsnlc::SNLCParserRequest *)&v9);
  }
  return a1;
}

_QWORD *sirinluinternalsnlc::swap(_QWORD *this, sirinluinternalsnlc::SNLCParserRequest *a2, sirinluinternalsnlc::SNLCParserRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v3;
  v4 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = &off_1E7BB0C68;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v11 = *v4;
  *v4 = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return a1;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest((uint64_t)&v9, a2);
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest((sirinluinternalsnlc::SNLCParserRequest *)&v9);
  }
  return a1;
}

BOOL sirinluinternalsnlc::SNLCParserRequest::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[7];
  v5 = *(_QWORD *)(a2 + 56);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (_QWORD *)a1[8];
  v7 = *(_QWORD **)(a2 + 64);
  if (v6)
  {
    if (!v7 || !sirinluinternalnlv4_parser::Tokenisation::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[1];
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 3, *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  if (!result)
    return result;
  v11 = a1[9];
  v12 = *(_QWORD *)(a2 + 72);
  if (v11)
  {
    if (!v12 || (sirinluexternal::TurnInput::operator==(v11, v12) & 1) == 0)
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = a1[2];
  v14 = *(_QWORD *)(a2 + 16);
  if (!v13)
  {
    if (!v14)
      goto LABEL_29;
    return 0;
  }
  if (!v14 || !sirinluexternal::LegacyNLContext::operator==(v13, v14))
    return 0;
LABEL_29:
  v15 = a1[6];
  v16 = *(_QWORD *)(a2 + 48);
  result = (v15 | v16) == 0;
  if (v15)
  {
    if (v16)
      return sirinluexternal::RequestID::operator==(a1[6], v16);
  }
  return result;
}

unint64_t sirinluinternalsnlc::SNLCParserRequest::hash_value(sirinluinternalsnlc::SNLCParserRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternalnlv4_parser::Tokenisation *v7;
  unint64_t v8;
  sirinluinternal::NLv4EmbeddingTensor *v9;
  unint64_t v10;
  sirinluinternal::MatchingSpan **v11;
  sirinluinternal::MatchingSpan **v12;
  uint64_t v13;
  sirinluinternal::MatchingSpan *v14;
  sirinluexternal::TurnInput *v15;
  unint64_t v16;
  sirinluexternal::LegacyNLContext *v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluinternalnlv4_parser::Tokenisation *)*((_QWORD *)this + 8);
  if (v7)
    v8 = sirinluinternalnlv4_parser::Tokenisation::hash_value(v7);
  else
    v8 = 0;
  v9 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 1);
  if (v9)
    v10 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v9);
  else
    v10 = 0;
  v11 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 3);
  v12 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 4);
  if (v11 == v12)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  v15 = (sirinluexternal::TurnInput *)*((_QWORD *)this + 9);
  if (v15)
    v16 = sirinluexternal::TurnInput::hash_value(v15);
  else
    v16 = 0;
  v17 = (sirinluexternal::LegacyNLContext *)*((_QWORD *)this + 2);
  if (v17)
    v18 = sirinluexternal::LegacyNLContext::hash_value(v17);
  else
    v18 = 0;
  v19 = *((_QWORD *)this + 6);
  if (v19)
    v19 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v19);
  return v8 ^ v6 ^ v16 ^ v18 ^ v19 ^ v10 ^ v13;
}

_QWORD *sirinluinternalsnlc::SNLCParserRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalsnlc::SNLCParserRequest::makeTokenisedUtterance(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAE788;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalsnlc::SNLCParserRequest::makeEmbeddings(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalsnlc::SNLCParserRequest::makeTurnInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB16E8;
    *(_DWORD *)(v2 + 148) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalsnlc::SNLCParserRequest::makeLegacyContext(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE238;
    *(_DWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 52) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalsnlc::SNLCParserRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::UUID::~UUID(sirinluexternal::UUID *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::UUID::readFrom(sirinluexternal::UUID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27 + 1;
            v46 = *(_BYTE *)(v28 + v27);
            *((_QWORD *)a2 + 1) = v45;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v27 = v45;
            v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_82:
          v3 = v45;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 6) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 28) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33 + 1;
            v50 = *(_BYTE *)(v34 + v33);
            *((_QWORD *)a2 + 1) = v49;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v33 = v49;
            v14 = v48++ > 8;
            if (v14)
            {
              v37 = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
LABEL_87:
          v3 = v49;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              v37 = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_QWORD *)this + 2) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 28) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20 + 1;
            v42 = *(_BYTE *)(v21 + v20);
            *((_QWORD *)a2 + 1) = v41;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v20 = v41;
            v14 = v40++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_77:
          v3 = v41;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_QWORD *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UUID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::UUID::formatText(sirinluexternal::UUID *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "low_int");
    if ((*((_BYTE *)this + 28) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "high_int");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "namespace_a");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UUID::UUID(_QWORD *this)
{
  *this = &off_1E7BB0CB8;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BB0CB8;
  this[3] = 0;
  return this;
}

uint64_t sirinluexternal::UUID::UUID(uint64_t this, const sirinluexternal::UUID *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)this = &off_1E7BB0CB8;
  *(_QWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t sirinluexternal::UUID::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (**v4)(sirinluexternal::UUID *__hidden);
  char v5;
  char v6;
  int v7;
  int v8;
  __int128 v9;
  void (**v11)(sirinluexternal::UUID *__hidden);
  __int128 v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v4 = &off_1E7BB0CB8;
    v11 = &off_1E7BB0CB8;
    HIDWORD(v13) = 0;
    v5 = *(_BYTE *)(a2 + 28);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(sirinluexternal::UUID *__hidden))(a2 + 8);
      v6 = 1;
      BYTE4(v13) = 1;
      if ((v5 & 2) != 0)
      {
LABEL_4:
        v2 = *(_QWORD *)(a2 + 16);
        v6 |= 2u;
        BYTE4(v13) = v6;
        if ((v5 & 4) != 0)
        {
LABEL_5:
          v7 = *(_DWORD *)(a2 + 24);
          BYTE4(v13) = v6 | 4;
LABEL_9:
          v8 = HIDWORD(v13);
          v9 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v4;
          *(_QWORD *)(a1 + 16) = v2;
          v12 = v9;
          *(_QWORD *)&v9 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v7;
          *(_DWORD *)(a1 + 28) = v8;
          v13 = v9;
          PB::Base::~Base((PB::Base *)&v11);
          return a1;
        }
LABEL_8:
        v7 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v6 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v5 & 4) != 0)
      goto LABEL_5;
    goto LABEL_8;
  }
  return a1;
}

{
  uint64_t v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UUID *__hidden);
  __int128 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = &off_1E7BB0CB8;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UUID *a2, sirinluexternal::UUID *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  return this;
}

uint64_t sirinluexternal::UUID::UUID(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BB0CB8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB0CB8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

BOOL sirinluexternal::UUID::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

uint64_t sirinluexternal::UUID::hash_value(sirinluexternal::UUID *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((_QWORD *)this + 2);
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((int *)this + 6);
  return v2 ^ v1 ^ v3;
}

BOOL SIRINLUINTERNALSSUSSURequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  SIRINLUEXTERNALUUID *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 6;
        goto LABEL_23;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 2;
LABEL_23:
        v19 = (SIRINLUEXTERNALUUID *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_36;
      case 3u:
        v19 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 1, v19);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_40;
        goto LABEL_35;
      case 4u:
        v19 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend(a1, "addMatchingSpans:", v19);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_40;
        goto LABEL_35;
      case 5u:
        v19 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        objc_msgSend(a1, "addSalientEntities:", v19);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v19->super.super.isa, a2))
        {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 6u:
        v19 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v19);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v19, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark();
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

void sirinluinternal::OverrideMetadata::~OverrideMetadata(sirinluinternal::OverrideMetadata *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

BOOL sirinluinternal::OverrideMetadata::readFrom(sirinluinternal::OverrideMetadata *this, PB::Reader *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  while (1)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    v5 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v4 || v5 != 0)
      return v5 == 0;
    v7 = *(_QWORD *)a2;
    v8 = 0;
    v9 = 0;
    v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      v13 = 0;
      if (v3 > v4)
        v4 = *((_QWORD *)a2 + 1);
      while (v4 != v3)
      {
        v11 = v3 + 1;
        v12 = *(_BYTE *)(v7 + v3);
        *((_QWORD *)a2 + 1) = v11;
        v13 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          goto LABEL_22;
        v8 += 7;
        v3 = v11;
        v10 = v9++ > 8;
        if (v10)
          goto LABEL_23;
      }
      v5 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v5 == 0;
    }
    v13 = 0;
    while (1)
    {
      v14 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v15 = *(_BYTE *)(v7 + v3);
      v13 |= (unint64_t)(v15 & 0x7F) << v8;
      if ((v15 & 0x80) == 0)
        break;
      v8 += 7;
      v3 = v14;
      v10 = v9++ > 8;
      if (v10)
        goto LABEL_23;
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      v5 = 0;
      return v5 == 0;
    }
LABEL_23:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
  }
}

uint64_t sirinluinternal::OverrideMetadata::formatText(sirinluinternal::OverrideMetadata *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternal::OverrideMetadata::OverrideMetadata(_QWORD *this)
{
  *this = &off_1E7BB0D08;
  return this;
}

{
  *this = &off_1E7BB0D08;
  return this;
}

_QWORD *sirinluinternal::OverrideMetadata::OverrideMetadata(_QWORD *this, const sirinluinternal::OverrideMetadata *a2)
{
  *this = &off_1E7BB0D08;
  return this;
}

{
  *this = &off_1E7BB0D08;
  return this;
}

uint64_t sirinluinternal::OverrideMetadata::operator=(uint64_t a1, uint64_t a2)
{
  void (**v4)(sirinluinternal::OverrideMetadata *__hidden);

  if (a1 != a2)
  {
    v4 = &off_1E7BB0D08;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

{
  void (**v4)(sirinluinternal::OverrideMetadata *__hidden);

  if (a1 != a2)
  {
    v4 = &off_1E7BB0D08;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

_QWORD *sirinluinternal::OverrideMetadata::OverrideMetadata(_QWORD *result)
{
  *result = &off_1E7BB0D08;
  return result;
}

{
  *result = &off_1E7BB0D08;
  return result;
}

uint64_t sirinluinternal::OverrideMetadata::operator==()
{
  return 1;
}

uint64_t sirinluinternal::OverrideMetadata::hash_value(sirinluinternal::OverrideMetadata *this)
{
  return 0;
}

void sirinluexternalssu_inference::SsuInferenceResponse::~SsuInferenceResponse(sirinluexternalssu_inference::SsuInferenceResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BB0D58;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB0D58;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BB0D58;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::readFrom(sirinluexternalssu_inference::SsuInferenceResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::formatText(sirinluexternalssu_inference::SsuInferenceResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "parses");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(_QWORD *this)
{
  *this = &off_1E7BB0D58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BB0D58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternalssu_inference::SsuInferenceResponse *sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(sirinluexternalssu_inference::SsuInferenceResponse *this, const sirinluexternalssu_inference::SsuInferenceResponse *a2)
{
  sirinluexternal::UserParse ***v3;
  const sirinluexternal::UUID ***v4;
  const sirinluexternal::UUID ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB0D58;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v3, *v4++);
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::operator=(uint64_t a1, const sirinluexternalssu_inference::SsuInferenceResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluexternalssu_inference::SsuInferenceResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluexternalssu_inference::SsuInferenceResponse *)a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse((sirinluexternalssu_inference::SsuInferenceResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BB0D58;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluexternalssu_inference::swap(_QWORD *this, sirinluexternalssu_inference::SsuInferenceResponse *a2, sirinluexternalssu_inference::SsuInferenceResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BB0D58;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BB0D58;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluexternalssu_inference::SsuInferenceResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BB0D58;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BB0D58;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluexternalssu_inference::SsuInferenceResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::hash_value(sirinluexternalssu_inference::SsuInferenceResponse *this)
{
  sirinluexternal::UserParse **v1;
  sirinluexternal::UserParse **v2;
  uint64_t v3;
  sirinluexternal::UserParse *v4;

  v1 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse(sirinluinternaluaap_parser::UaaPParserResponse *this)
{
  sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BB0DA8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::readFrom(sirinluinternaluaap_parser::UaaPParserResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD **)(*((_QWORD *)this + 2) - 8);
      }
      else
      {
        if ((v12 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BB0CB8;
        v20[3] = 0;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = (_QWORD *)*((_QWORD *)this + 4);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::formatText(sirinluinternaluaap_parser::UaaPParserResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "hypotheses");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "request_id");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse(sirinluinternaluaap_parser::UaaPParserResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0DA8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0DA8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternaluaap_parser::UaaPParserResponse *sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse(sirinluinternaluaap_parser::UaaPParserResponse *this, const sirinluexternal::UUID **a2)
{
  sirinluexternal::UserParse ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const sirinluexternal::UUID ***v8;
  const sirinluexternal::UUID ***v9;

  *(_QWORD *)this = &off_1E7BB0DA8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2[4])
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, a2[4]);
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v9 = (const sirinluexternal::UUID ***)a2[1];
  v8 = (const sirinluexternal::UUID ***)a2[2];
  while (v9 != v8)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v4, *v9++);
  return this;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse((sirinluinternaluaap_parser::UaaPParserResponse *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse((sirinluinternaluaap_parser::UaaPParserResponse *)v6);
  }
  return a1;
}

_QWORD *sirinluinternaluaap_parser::swap(_QWORD *this, sirinluinternaluaap_parser::UaaPParserResponse *a2, sirinluinternaluaap_parser::UaaPParserResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BB0DA8;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse((sirinluinternaluaap_parser::UaaPParserResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternaluaap_parser::UaaPParserResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5))
      return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else if (!v5)
  {
    return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  return 0;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::hash_value(sirinluinternaluaap_parser::UaaPParserResponse *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sirinluexternal::UserParse **v6;
  sirinluexternal::UserParse **v7;
  uint64_t v8;
  sirinluexternal::UserParse *v9;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v7 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluexternal::UserParse::hash_value(v9);
    }
    while (v6 != v7);
  }
  return v8 ^ v5;
}

_QWORD *sirinluinternaluaap_parser::UaaPParserResponse::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALCorrectionOutcomeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternal::ComponentOverride::~ComponentOverride(sirinluinternal::ComponentOverride *this)
{
  sirinluinternal::ComponentOverride::~ComponentOverride(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BB0DF8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 6, 0);
  v4 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::ComponentOverride::readFrom(sirinluinternal::ComponentOverride *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  uint64_t **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  void **v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 48);
  v9 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v15 = *(_BYTE *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0)
        break;
      v11 += 7;
      v2 = v14;
      v16 = v12++ > 8;
      if (v16)
        goto LABEL_20;
    }
LABEL_26:
    if ((v13 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        v23 = (_QWORD *)operator new();
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v24 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v23;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100](v24);
        PB::Reader::read();
        goto LABEL_21;
      case 2u:
        *((_BYTE *)this + 72) |= 2u;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = v25 + 1;
            *((_QWORD *)a2 + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              goto LABEL_73;
            v28 += 7;
            v25 = v31;
            v16 = v29++ > 8;
          }
          while (!v16);
LABEL_60:
          LODWORD(v30) = 0;
          goto LABEL_73;
        }
        v48 = 0;
        v49 = 0;
        v30 = 0;
        if (v26 <= v25)
          v26 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v26 == v25)
          {
            LODWORD(v30) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v50 = v25 + 1;
            v51 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)a2 + 1) = v50;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if (v51 < 0)
            {
              v48 += 7;
              v25 = v50;
              v16 = v49++ > 8;
              if (v16)
                goto LABEL_60;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v30) = 0;
          }
          break;
        }
LABEL_73:
        *((_DWORD *)this + 16) = v30;
        goto LABEL_21;
      case 3u:
        *((_BYTE *)this + 72) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        if (v33 >= *((_QWORD *)a2 + 2))
        {
          v36 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = v33 + 1;
          v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v33);
          *((_QWORD *)a2 + 1) = v34;
          v36 = v35 != 0;
        }
        *((_BYTE *)this + 68) = v36;
        goto LABEL_21;
      case 4u:
        *((_BYTE *)this + 72) |= 1u;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_77;
            v40 += 7;
            v37 = v43;
            v16 = v41++ > 8;
          }
          while (!v16);
LABEL_69:
          v42 = 0;
          goto LABEL_77;
        }
        v52 = 0;
        v53 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v38 == v37)
          {
            v42 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v54 = v37 + 1;
            v55 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)a2 + 1) = v54;
            v42 |= (unint64_t)(v55 & 0x7F) << v52;
            if (v55 < 0)
            {
              v52 += 7;
              v37 = v54;
              v16 = v53++ > 8;
              if (v16)
                goto LABEL_69;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v42 = 0;
          }
          break;
        }
LABEL_77:
        *((_QWORD *)this + 1) = v42;
        goto LABEL_21;
      case 5u:
        v45 = operator new();
        *(_QWORD *)v45 = &off_1E7BAFE50;
        *(_OWORD *)(v45 + 8) = 0u;
        *(_OWORD *)(v45 + 24) = 0u;
        v46 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v45;
        if (v46)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          v45 = *((_QWORD *)this + 7);
        }
        goto LABEL_50;
      case 6u:
        PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<>(v9);
        v45 = *(_QWORD *)(*((_QWORD *)this + 4) - 8);
LABEL_50:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v45 + 16))(v45, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_21:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 7u:
        v47 = operator new();
        *(_QWORD *)v47 = 0;
        *(_QWORD *)(v47 + 8) = 0;
        v56 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v47);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](&v56, 0);
        PB::Reader::read();
        goto LABEL_21;
      default:
        goto LABEL_20;
    }
  }
  v17 = 0;
  v18 = 0;
  v13 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v19 = v2 + 1;
    v20 = *(_BYTE *)(v10 + v2);
    *((_QWORD *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0)
      goto LABEL_26;
    v17 += 7;
    v2 = v19;
    v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_21;
  return result;
}

uint64_t sirinluinternal::ComponentOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base **v6;
  const PB::Base **v7;
  const PB::Base *v8;

  v3 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 1) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
LABEL_7:
  v5 = *(const PB::Base **)(v3 + 56);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base ***)(v3 + 24);
  v7 = *(const PB::Base ***)(v3 + 32);
  while (v6 != v7)
  {
    v8 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  if (*(_QWORD *)(v3 + 48))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternal::ComponentOverride::formatText(sirinluinternal::ComponentOverride *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "creation_timestamp_ms_since_unix_epoch");
    v5 = *((_BYTE *)this + 72);
  }
  if ((v5 & 4) != 0)
    PB::TextFormatter::format(a2, "enabled");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "nlu_request_rules");
  }
  if ((*((_BYTE *)this + 72) & 2) != 0)
    PB::TextFormatter::format(a2, "override_namespace");
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  v9 = *((_QWORD *)this + 7);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "value");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::ComponentOverride::ComponentOverride(sirinluinternal::ComponentOverride *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB0DF8;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB0DF8;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

sirinluinternal::ComponentOverride *sirinluinternal::ComponentOverride::ComponentOverride(sirinluinternal::ComponentOverride *this, const sirinluinternal::ComponentOverride *a2)
{
  uint64_t *v4;
  void ***v5;
  std::string *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  sirinluinternal::OverrideValue *v13;
  sirinluinternal::OverrideValue *v14;
  uint64_t v15;
  const sirinluinternal::NluRequestRule **v16;
  const sirinluinternal::NluRequestRule **i;
  void **v18;
  int v20;
  char v21;
  void **v22;

  *(_QWORD *)this = &off_1E7BB0DF8;
  *((_OWORD *)this + 1) = 0u;
  v4 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  v5 = (void ***)((char *)this + 48);
  *((_DWORD *)this + 16) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v6 = (std::string *)operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
    }
    v10 = *v4;
    *v4 = (uint64_t)v7;
    if (v10)
      std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  v11 = *((_BYTE *)a2 + 72);
  if ((v11 & 2) == 0)
  {
    if ((*((_BYTE *)a2 + 72) & 4) == 0)
      goto LABEL_9;
LABEL_20:
    v21 = *((_BYTE *)a2 + 68);
    *((_BYTE *)this + 72) |= 4u;
    *((_BYTE *)this + 68) = v21;
    if ((*((_BYTE *)a2 + 72) & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v20 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 72) |= 2u;
  *((_DWORD *)this + 16) = v20;
  v11 = *((_BYTE *)a2 + 72);
  if ((v11 & 4) != 0)
    goto LABEL_20;
LABEL_9:
  if ((v11 & 1) != 0)
  {
LABEL_10:
    v12 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 1) = v12;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 7))
  {
    v13 = (sirinluinternal::OverrideValue *)operator new();
    v14 = sirinluinternal::OverrideValue::OverrideValue(v13, *((const sirinluinternal::OverrideValue **)a2 + 7));
    v15 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = (const sirinluinternal::NluRequestRule **)*((_QWORD *)a2 + 3);
  for (i = (const sirinluinternal::NluRequestRule **)*((_QWORD *)a2 + 4); v16 != i; ++v16)
    PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<sirinluinternal::NluRequestRule const&>((sirinluinternal::NluRequestRule ***)this + 3, *v16);
  if (*((_QWORD *)a2 + 6))
  {
    v18 = (void **)operator new();
    PB::Data::Data();
    v22 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, v18);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v22, 0);
  }
  return this;
}

uint64_t sirinluinternal::ComponentOverride::operator=(uint64_t a1, const sirinluinternal::ComponentOverride *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  int v18;

  if ((const sirinluinternal::ComponentOverride *)a1 != a2)
  {
    sirinluinternal::ComponentOverride::ComponentOverride((sirinluinternal::ComponentOverride *)&v11, a2);
    v3 = v14;
    v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    v18 = v6;
    v7 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    v16 = v7;
    LOBYTE(v7) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v17;
    v17 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v12;
    v12 = v8;
    v13 = v4;
    v14 = v5;
    v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v15;
    v15 = v9;
    sirinluinternal::ComponentOverride::~ComponentOverride((sirinluinternal::ComponentOverride *)&v11);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::ComponentOverride *a2, sirinluinternal::ComponentOverride *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 68);
  *(_BYTE *)(this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v4;
  v6 = *(_QWORD *)(this + 8);
  v5 = *(_QWORD *)(this + 16);
  v7 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v7;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v5;
  v8 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  return this;
}

uint64_t sirinluinternal::ComponentOverride::ComponentOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)a1 = &off_1E7BB0DF8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  v8 = *(void ***)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 48), v8);
  return a1;
}

uint64_t sirinluinternal::ComponentOverride::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    sirinluinternal::ComponentOverride::ComponentOverride((uint64_t)&v11, a2);
    v3 = v14;
    v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    v18 = v6;
    v7 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    v16 = v7;
    LOBYTE(v7) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v17;
    v17 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v12;
    v12 = v8;
    v13 = v4;
    v14 = v5;
    v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v15;
    v15 = v9;
    sirinluinternal::ComponentOverride::~ComponentOverride((sirinluinternal::ComponentOverride *)&v11);
  }
  return a1;
}

uint64_t sirinluinternal::ComponentOverride::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 16);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 4) == 0 || *(unsigned __int8 *)(a1 + 68) != *(unsigned __int8 *)(a2 + 68))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  v11 = *(_QWORD **)(a1 + 56);
  v12 = *(_QWORD **)(a2 + 56);
  if (!v11)
  {
    if (!v12)
      goto LABEL_42;
    return 0;
  }
  if (!v12 || (sirinluinternal::OverrideValue::operator==(v11, v12) & 1) == 0)
    return 0;
LABEL_42:
  result = PB::PtrVector<sirinluinternal::NluRequestRule>::operator==((uint64_t *)(a1 + 24), *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    if (!*(_QWORD *)(a1 + 48))
      return *(_QWORD *)(a2 + 48) == 0;
    if (*(_QWORD *)(a2 + 48))
    {
      if ((PB::Data::operator==() & 1) != 0)
        return 1;
      if (!*(_QWORD *)(a1 + 48))
        return *(_QWORD *)(a2 + 48) == 0;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluinternal::ComponentOverride::hash_value(sirinluinternal::ComponentOverride *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternal::OverrideValue *v7;
  unint64_t v8;
  sirinluinternal::NluRequestRule **v9;
  sirinluinternal::NluRequestRule **v10;
  uint64_t v11;
  sirinluinternal::NluRequestRule *v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  if ((*((_BYTE *)this + 72) & 2) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    if ((*((_BYTE *)this + 72) & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  v4 = *((int *)this + 16);
  if ((*((_BYTE *)this + 72) & 4) == 0)
    goto LABEL_9;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 68);
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
LABEL_7:
    v6 = *((_QWORD *)this + 1);
    goto LABEL_11;
  }
LABEL_10:
  v6 = 0;
LABEL_11:
  v7 = (sirinluinternal::OverrideValue *)*((_QWORD *)this + 7);
  if (v7)
    v8 = sirinluinternal::OverrideValue::hash_value(v7);
  else
    v8 = 0;
  v9 = (sirinluinternal::NluRequestRule **)*((_QWORD *)this + 3);
  v10 = (sirinluinternal::NluRequestRule **)*((_QWORD *)this + 4);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v9++;
      v11 ^= sirinluinternal::NluRequestRule::hash_value(v12);
    }
    while (v9 != v10);
  }
  if (*((_QWORD *)this + 6))
    v13 = PBHashBytes();
  else
    v13 = 0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v13 ^ v8 ^ v11;
}

_QWORD *sirinluinternal::ComponentOverride::makeValue(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAFE50;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRICOMMONDoubleValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternal::LVCOverrideValue::~LVCOverrideValue(sirinluinternal::LVCOverrideValue *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0E48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0E48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB0E48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::LVCOverrideValue::readFrom(sirinluinternal::LVCOverrideValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB1290;
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::LVCOverrideValue::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternal::LVCOverrideValue::formatText(sirinluinternal::LVCOverrideValue *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "lvc_value");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternal::LVCOverrideValue::LVCOverrideValue(_QWORD *this)
{
  *this = &off_1E7BB0E48;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB0E48;
  this[1] = 0;
  return this;
}

sirinluinternal::LVCOverrideValue *sirinluinternal::LVCOverrideValue::LVCOverrideValue(sirinluinternal::LVCOverrideValue *this, const sirinluexternal::MultilingualVariant **a2)
{
  sirinluexternal::MultilingualVariant *v4;
  sirinluexternal::MultilingualVariant *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BB0E48;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluexternal::MultilingualVariant *)operator new();
    v5 = sirinluexternal::MultilingualVariant::MultilingualVariant(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternal::LVCOverrideValue::operator=(uint64_t a1, const sirinluexternal::MultilingualVariant **a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternal::LVCOverrideValue *__hidden);
  uint64_t v6;

  if ((const sirinluexternal::MultilingualVariant **)a1 != a2)
  {
    sirinluinternal::LVCOverrideValue::LVCOverrideValue((sirinluinternal::LVCOverrideValue *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BB0E48;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::LVCOverrideValue *a2, sirinluinternal::LVCOverrideValue *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternal::LVCOverrideValue::LVCOverrideValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB0E48;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB0E48;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternal::LVCOverrideValue::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BB0E48;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternal::LVCOverrideValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluexternal::MultilingualVariant::operator==(v2, v3);
}

sirinluexternal::MultilingualVariant *sirinluinternal::LVCOverrideValue::hash_value(sirinluinternal::LVCOverrideValue *this)
{
  sirinluexternal::MultilingualVariant *result;

  result = (sirinluexternal::MultilingualVariant *)*((_QWORD *)this + 1);
  if (result)
    return (sirinluexternal::MultilingualVariant *)sirinluexternal::MultilingualVariant::hash_value(result);
  return result;
}

_QWORD *sirinluinternal::LVCOverrideValue::makeLvcValue(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1290;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sub_1C1FB13C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB14F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB1574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB15D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB16B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB177C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB17FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB18A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB19C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C1FB1A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C1FB1B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C1FB1BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1CB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1D30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FB1DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB1E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1FB1ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALSNLCSNLCParserRequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_41;
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2))
          goto LABEL_45;
        goto LABEL_41;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend(a1, "addMatchingSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALLegacyNLContext);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALLegacyNLContextReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_42;
    }
  }
}

BOOL SIRINLUINTERNALUAAP_PARSERUaaPParserResponseReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
    objc_msgSend(a1, "addHypotheses:", v17);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMatchingSpanReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  SIRINLUEXTERNALUsoGraph *v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_57;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_57;
      case 3u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_61:
        v40 = 72;
        goto LABEL_66;
      case 4u:
        v26 = 0;
        v27 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 88) |= 1u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_65:
        v40 = 32;
LABEL_66:
        *(_DWORD *)(a1 + v40) = v22;
        goto LABEL_77;
      case 5u:
        v31 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong((id *)(a1 + 80), v31);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v31->super.super.isa, a2))
          goto LABEL_80;
        goto LABEL_55;
      case 6u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            while (1)
            {
              v36 = *v3;
              v37 = *(_QWORD *)(a2 + v36);
              if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                break;
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_52;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          while (1)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
              break;
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 1;
            v43 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              v14 = v42++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_76;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
        goto LABEL_77;
      case 7u:
        v31 = objc_alloc_init(SIRINLUINTERNALInternalSpanData);
        objc_storeStrong((id *)(a1 + 48), v31);
        if (PBReaderPlaceMark()
          && SIRINLUINTERNALInternalSpanDataReadFrom((id *)&v31->super.super.isa, a2))
        {
LABEL_55:
          PBReaderRecallMark();

LABEL_77:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_80:

        return 0;
      case 8u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 64;
LABEL_57:
        v39 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_77;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_77;
    }
  }
}

BOOL SIRINLUEXTERNALSystemInformedReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_msgSend(a1, "addEntities:", v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sirinluinternal::SubwordToken::readFrom(sirinluinternal::SubwordToken *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v24 > 0xFFFFFFFFFFFFFFF5 || v24 + 10 > v25)
        {
          v40 = 0;
          v41 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v42 = v24 + 1;
            v43 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)a2 + 1) = v42;
            v29 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v24 = v42;
            v14 = v41++ > 8;
            if (v14)
            {
LABEL_53:
              LODWORD(v29) = 0;
              goto LABEL_64;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v29) = 0;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = v24 + 1;
            *((_QWORD *)a2 + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              break;
            v27 += 7;
            v24 = v30;
            v14 = v28++ > 8;
            if (v14)
              goto LABEL_53;
          }
        }
LABEL_64:
        *((_DWORD *)this + 5) = v29;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v33)
        {
          v44 = 0;
          v45 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_68;
            }
            v46 = v32 + 1;
            v47 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v46;
            v37 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v32 = v46;
            v14 = v45++ > 8;
            if (v14)
            {
LABEL_60:
              LODWORD(v37) = 0;
              goto LABEL_68;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              break;
            v35 += 7;
            v32 = v38;
            v14 = v36++ > 8;
            if (v14)
              goto LABEL_60;
          }
        }
LABEL_68:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100](v21);
        PB::Reader::read();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::SubwordToken::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluinternal::SubwordToken::formatText(sirinluinternal::SubwordToken *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "subword_token_index");
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "token_index");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternal::SubwordToken::operator=(uint64_t a1, const sirinluinternal::SubwordToken *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const sirinluinternal::SubwordToken *)a1 != a2)
  {
    sirinluinternal::SubwordToken::SubwordToken((sirinluinternal::SubwordToken *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    sirinluinternal::SubwordToken::~SubwordToken((sirinluinternal::SubwordToken *)&v7);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::SubwordToken *a2, sirinluinternal::SubwordToken *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return this;
}

uint64_t sirinluinternal::SubwordToken::SubwordToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E7BB0EE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t sirinluinternal::SubwordToken::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_DWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_1E7BB0EE0;
    v10[1] = v7;
    *(_QWORD *)(a1 + 16) = v6;
    v10[2] = v8;
    sirinluinternal::SubwordToken::~SubwordToken((sirinluinternal::SubwordToken *)v10);
  }
  return a1;
}

BOOL sirinluinternal::SubwordToken::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t sirinluinternal::SubwordToken::hash_value(sirinluinternal::SubwordToken *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((int *)this + 4);
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_5;
LABEL_7:
    v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_5:
  v4 = *((int *)this + 5);
  return v3 ^ v2 ^ v4;
}

void sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
  sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0F30;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::readFrom(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100](v23);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB00F0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 28) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::formatText(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "version");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0F30;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0F30;
  return this;
}

sirinluinternalsnlp_intermediate::ITFMAssetVersion *sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this, const sirinluinternalsnlp_intermediate::SNLPAssetVersion **a2)
{
  uint64_t *v4;
  sirinluinternalsnlp_intermediate::SNLPAssetVersion *v5;
  sirinluinternalsnlp_intermediate::SNLPAssetVersion *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluinternalsnlp_intermediate::SNLPAssetVersion *v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BB0F30;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[2])
  {
    v5 = (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)operator new();
    v6 = sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(v5, a2[2]);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[1];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *v4;
    *v4 = (uint64_t)v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPAssetVersion **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternalsnlp_intermediate::SNLPAssetVersion **)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion((sirinluinternalsnlp_intermediate::ITFMAssetVersion *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion((sirinluinternalsnlp_intermediate::ITFMAssetVersion *)v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMAssetVersion *a2, sirinluinternalsnlp_intermediate::ITFMAssetVersion *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB0F30;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion((sirinluinternalsnlp_intermediate::ITFMAssetVersion *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  result = v7 == 0;
  if (!v6)
    return result;
  if (!v7)
    return 0;
  v9 = v6[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v6[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v7[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a2 + 8);
  else
    v13 = *v7;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v6, v13, *((_QWORD *)v6 + 1));
  if (!v6[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v6++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::hash_value(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
  sirinluinternalsnlp_intermediate::SNLPAssetVersion *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)*((_QWORD *)this + 2);
  if (v2)
    v3 = sirinluinternalsnlp_intermediate::SNLPAssetVersion::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v4 ^ v3;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMAssetVersion::makeVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB00F0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALLegacyNLContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  SIRICOMMONStringValue *v37;
  uint64_t result;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_57;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_59;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_59:
        v45 = v19 != 0;
        v46 = 40;
        goto LABEL_68;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 44) |= 8u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_63:
        v45 = v25 != 0;
        v46 = 42;
        goto LABEL_68;
      case 3u:
        PBReaderReadString();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v29;

        goto LABEL_73;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_67:
        v45 = v33 != 0;
        v46 = 41;
LABEL_68:
        *(_BYTE *)(a1 + v46) = v45;
        goto LABEL_73;
      case 5u:
        v37 = objc_alloc_init(SIRICOMMONStringValue);
        objc_msgSend((id)a1, "addRenderedTexts:", v37);
        if (PBReaderPlaceMark() && (SIRICOMMONStringValueReadFrom((uint64_t)v37, a2) & 1) != 0)
        {
          PBReaderRecallMark();
LABEL_55:

LABEL_73:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 7u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                LODWORD(v41) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v41) = 0;
LABEL_72:
        *(_DWORD *)(a1 + 8) = v41;
        goto LABEL_73;
      case 8u:
        PBReaderReadString();
        v37 = (SIRICOMMONStringValue *)objc_claimAutoreleasedReturnValue();
        if (v37)
          objc_msgSend((id)a1, "addResponseSemanticValues:", v37);
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_73;
    }
  }
}

void sirinluexternal::CorrectionOutcome::~CorrectionOutcome(sirinluexternal::CorrectionOutcome *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::CorrectionOutcome::readFrom(sirinluexternal::CorrectionOutcome *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::CorrectionOutcome::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::formatText(sirinluexternal::CorrectionOutcome *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::CorrectionOutcome::CorrectionOutcome(_QWORD *this)
{
  *this = &off_1E7BB0FA0;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB0FA0;
  this[1] = 0;
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::CorrectionOutcome(uint64_t this, const sirinluexternal::CorrectionOutcome *a2)
{
  int v2;

  *(_QWORD *)this = &off_1E7BB0FA0;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_1E7BB0FA0;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BB0FA0;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BB0FA0;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::CorrectionOutcome *a2, sirinluexternal::CorrectionOutcome *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::CorrectionOutcome(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BB0FA0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB0FA0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL sirinluexternal::CorrectionOutcome::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sirinluexternal::CorrectionOutcome::hash_value(sirinluexternal::CorrectionOutcome *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void sirinluexternal::UserRejected::~UserRejected(sirinluexternal::UserRejected *this)
{
  sirinluexternal::UserRejected::~UserRejected(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB0FF0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserRejected::readFrom(sirinluexternal::UserRejected *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 2);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserRejected::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserRejected::formatText(sirinluexternal::UserRejected *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "offer_id");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "reference");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserRejected::UserRejected(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0FF0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB0FF0;
  return this;
}

sirinluexternal::UserRejected *sirinluexternal::UserRejected::UserRejected(sirinluexternal::UserRejected *this, const sirinluexternal::UserRejected *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7BB0FF0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 1));
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 2));
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserRejected::operator=(uint64_t a1, const sirinluexternal::UserRejected *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserRejected *)a1 != a2)
  {
    sirinluexternal::UserRejected::UserRejected((sirinluexternal::UserRejected *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserRejected::~UserRejected((sirinluexternal::UserRejected *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserRejected *a2, sirinluexternal::UserRejected *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternal::UserRejected::UserRejected(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BB0FF0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluexternal::UserRejected::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserRejected *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB0FF0;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserRejected::~UserRejected((sirinluexternal::UserRejected *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserRejected::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 16), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserRejected::hash_value(sirinluexternal::UserRejected *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserRejected::makeOfferId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserRejected::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALUsoNodeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  SIRICOMMONStringValue *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_44;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_46:
        *(_DWORD *)(a1 + 40) = v19;
        goto LABEL_47;
      case 2u:
        v24 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_49;
        goto LABEL_36;
      case 3u:
        v24 = objc_alloc_init(SIRICOMMONInt64Value);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (SIRICOMMONInt64ValueReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_49;
        goto LABEL_36;
      case 4u:
        v24 = objc_alloc_init(SIRICOMMONUInt32Value);
        objc_storeStrong((id *)(a1 + 48), v24);
        if (PBReaderPlaceMark() && (SIRICOMMONUInt32ValueReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();
LABEL_37:

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      case 5u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 8;
        goto LABEL_40;
      case 6u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 56;
LABEL_40:
        v27 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_47;
      case 7u:
        PBReaderReadString();
        v24 = (SIRICOMMONStringValue *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend((id)a1, "addNormalizedStringPayloads:", v24);
        goto LABEL_37;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

BOOL SIRINLUINTERNALITFMITFMParserRequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_41;
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2))
          goto LABEL_45;
        goto LABEL_41;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend(a1, "addMatchingSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_41;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALParser);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALParserReadFrom((uint64_t)v17, a2))
          goto LABEL_45;
        goto LABEL_41;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_42;
    }
  }
}

uint64_t SIRINLUEXTERNALMultilingualVariantReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALCONTEXTUPDATEContextUpdateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALTurnInput *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 8), v17);
        goto LABEL_23;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_msgSend((id)a1, "addPreviousTurns:", v17);
LABEL_23:
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_34;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALRewriteHypothesis);
        objc_msgSend((id)a1, "addQrHypotheses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALRewriteHypothesisReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_34;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 40;
        goto LABEL_32;
      case 5u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v17 = *(SIRINLUEXTERNALTurnInput **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v19;
        goto LABEL_35;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 16;
LABEL_32:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_34:
          PBReaderRecallMark();
LABEL_35:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_36;
    }
  }
}

BOOL SIRINLUINTERNALCompareOptionsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 12) |= 4u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__widthInsensitive;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            v20 = 0;
            v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__widthInsensitive;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__widthInsensitive;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__caseInsensitive;
            goto LABEL_47;
          }
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            break;
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            v20 = 0;
            v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__caseInsensitive;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__caseInsensitive;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 12) |= 2u;
    while (1)
    {
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__diacriticInsensitive;
        goto LABEL_47;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
      *(_QWORD *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        break;
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        v20 = 0;
        v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__diacriticInsensitive;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__diacriticInsensitive;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_50:
    *(_BYTE *)(a1 + *v25) = v20 != 0;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1FBDBA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C1FBDD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1FBE098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C1FBE158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FBE230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1FBE4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FBE654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBE78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C1FBE910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBEA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C1FBEBFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBEDB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBEF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBF01C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1FBF19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBF264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1FBF450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C1FBF624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBF6E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FBF88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1FBF910()
{
  JUMPOUT(0x1C1FBF904);
}

void sub_1C1FBFA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBFB00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FBFC48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1FBFD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FBFEE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FC014C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FC039C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1FC053C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_34;
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

        goto LABEL_39;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 24) = v23;
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALCorrectionOutcome);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALCorrectionOutcomeReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

void sirinluexternal::UsoNode::~UsoNode(sirinluexternal::UsoNode *this)
{
  sirinluexternal::UsoNode::~UsoNode(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E7BB1060;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v7 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoNode::readFrom(sirinluexternal::UsoNode *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  std::string *v49;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (std::vector<std::string> *)((char *)this + 24);
  v9 = (std::allocator<std::string> *)((char *)this + 40);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 76) |= 1u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_68;
              v25 += 7;
              v22 = v28;
              v16 = v26++ > 8;
            }
            while (!v16);
LABEL_52:
            LODWORD(v27) = 0;
            goto LABEL_68;
          }
          v40 = 0;
          v41 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v42 = v22 + 1;
              v43 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v42;
              v27 |= (unint64_t)(v43 & 0x7F) << v40;
              if (v43 < 0)
              {
                v40 += 7;
                v22 = v42;
                v16 = v41++ > 8;
                if (v16)
                  goto LABEL_52;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_68:
          *((_DWORD *)this + 18) = v27;
          goto LABEL_69;
        case 2u:
          v30 = operator new();
          *(_QWORD *)v30 = &off_1E7BB0538;
          *(_QWORD *)(v30 + 8) = 0;
          v31 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v30;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v30 = *((_QWORD *)this + 6);
          }
          goto LABEL_37;
        case 3u:
          v30 = operator new();
          *(_QWORD *)v30 = &off_1E7BB0A38;
          *(_DWORD *)(v30 + 16) = 0;
          v32 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v30;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v30 = *((_QWORD *)this + 2);
          }
          goto LABEL_37;
        case 4u:
          v30 = operator new();
          *(_QWORD *)v30 = &off_1E7BAF448;
          *(_DWORD *)(v30 + 12) = 0;
          v33 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v30;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v30 = *((_QWORD *)this + 7);
          }
LABEL_37:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 5u:
          v34 = (_QWORD *)operator new();
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          v35 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v34;
          if (v35)
            goto LABEL_41;
          goto LABEL_64;
        case 6u:
          v36 = (_QWORD *)operator new();
          v36[1] = 0;
          v36[2] = 0;
          *v36 = 0;
          v35 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v36;
          if (v35)
LABEL_41:
            std::default_delete<std::string>::operator()[abi:ne180100](v35);
          goto LABEL_64;
        case 7u:
          v38 = (char *)*((_QWORD *)this + 4);
          v37 = *((_QWORD *)this + 5);
          if ((unint64_t)v38 >= v37)
          {
            v44 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (char *)v8->__begin_) >> 3);
            v45 = v44 + 1;
            if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (unint64_t)v8->__begin_) >> 3);
            if (2 * v46 > v45)
              v45 = 2 * v46;
            if (v46 >= 0x555555555555555)
              v47 = 0xAAAAAAAAAAAAAAALL;
            else
              v47 = v45;
            __v.__end_cap_.__value_ = v9;
            if (v47)
              v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v47);
            else
              v48 = 0;
            v49 = (std::string *)(v47 + 24 * v44);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v47;
            __v.__begin_ = v49;
            __v.__end_cap_.__value_ = (std::string *)(v47 + 24 * v48);
            v49->__r_.__value_.__r.__words[0] = 0;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v49 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
            v39 = (_QWORD *)*((_QWORD *)this + 4);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_QWORD *)v38 = 0;
            *((_QWORD *)v38 + 1) = 0;
            v39 = v38 + 24;
            *((_QWORD *)v38 + 2) = 0;
          }
          *((_QWORD *)this + 4) = v39;
LABEL_64:
          PB::Reader::read();
          goto LABEL_69;
        default:
          goto LABEL_20;
      }
      goto LABEL_69;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_69:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluexternal::UsoNode::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 76) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = (const PB::Base *)v3[6];
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[2];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[7];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  if (v3[1])
    this = PB::Writer::write();
  if (v3[8])
    this = PB::Writer::write();
  v8 = v3[3];
  v7 = v3[4];
  while (v8 != v7)
  {
    this = PB::Writer::write();
    v8 += 24;
  }
  return this;
}

uint64_t sirinluexternal::UsoNode::formatText(sirinluexternal::UsoNode *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "integer_payload");
  v6 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); v6 != i; v6 += 24)
    PB::TextFormatter::format();
  v8 = *((_QWORD *)this + 6);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "string_payload");
  if ((*((_BYTE *)this + 76) & 1) != 0)
    PB::TextFormatter::format(a2, "uso_element_id");
  v9 = *((_QWORD *)this + 7);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "uso_verb_element_id");
  if (*((_QWORD *)this + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::UsoNode::UsoNode(sirinluexternal::UsoNode *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1060;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1060;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluexternal::UsoNode *sirinluexternal::UsoNode::UsoNode(sirinluexternal::UsoNode *this, const sirinluexternal::UsoNode *a2)
{
  uint64_t *v4;
  std::vector<std::string> *v5;
  int v6;
  siricommon::StringValue *v7;
  siricommon::StringValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;

  *(_QWORD *)this = &off_1E7BB1060;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (std::vector<std::string> *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 76) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 18);
    *((_BYTE *)this + 76) = 1;
    *((_DWORD *)this + 18) = v6;
  }
  if (*((_QWORD *)a2 + 6))
  {
    v7 = (siricommon::StringValue *)operator new();
    v8 = siricommon::StringValue::StringValue(v7, *((const siricommon::StringValue **)a2 + 6));
    v9 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = operator new();
    v11 = *((_QWORD *)a2 + 2);
    *(_QWORD *)v10 = &off_1E7BB0A38;
    *(_DWORD *)(v10 + 16) = 0;
    if ((*(_BYTE *)(v11 + 16) & 1) != 0)
    {
      v12 = *(_QWORD *)(v11 + 8);
      *(_BYTE *)(v10 + 16) = 1;
      *(_QWORD *)(v10 + 8) = v12;
    }
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v10;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v14 = operator new();
    v15 = *((_QWORD *)a2 + 7);
    *(_QWORD *)v14 = &off_1E7BAF448;
    *(_DWORD *)(v14 + 12) = 0;
    if ((*(_BYTE *)(v15 + 12) & 1) != 0)
    {
      v16 = *(_DWORD *)(v15 + 8);
      *(_BYTE *)(v14 + 12) = 1;
      *(_DWORD *)(v14 + 8) = v16;
    }
    v17 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v14;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v18 = (std::string *)operator new();
    v19 = v18;
    v20 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
    }
    else
    {
      v21 = *v20;
      v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v21;
    }
    v22 = *v4;
    *v4 = (uint64_t)v19;
    if (v22)
      std::default_delete<std::string>::operator()[abi:ne180100](v22);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v23 = (std::string *)operator new();
    v24 = v23;
    v25 = (__int128 *)*((_QWORD *)a2 + 8);
    if (*((char *)v25 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23->__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v26;
    }
    v27 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v24;
    if (v27)
      std::default_delete<std::string>::operator()[abi:ne180100](v27);
  }
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

uint64_t sirinluexternal::UsoNode::operator=(uint64_t a1, const sirinluexternal::UsoNode *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluexternal::UsoNode *)a1 != a2)
  {
    sirinluexternal::UsoNode::UsoNode((sirinluexternal::UsoNode *)&v9, a2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluexternal::UsoNode::~UsoNode((sirinluexternal::UsoNode *)&v9);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoNode *a2, sirinluexternal::UsoNode *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  v5 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  return this;
}

uint64_t sirinluexternal::UsoNode::UsoNode(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = &off_1E7BB1060;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v14 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100](v14);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return a1;
}

uint64_t sirinluexternal::UsoNode::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluexternal::UsoNode::UsoNode((uint64_t)&v9, a2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluexternal::UsoNode::~UsoNode((sirinluexternal::UsoNode *)&v9);
  }
  return a1;
}

BOOL sirinluexternal::UsoNode::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if ((*(_BYTE *)(a1 + 76) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 1) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    if (!v7)
      return 0;
    if ((*(_BYTE *)(v6 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v7 + 16) & 1) == 0 || *(_QWORD *)(v6 + 8) != *(_QWORD *)(v7 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v7 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a2 + 56);
  if (v8)
  {
    if (!v9)
      return 0;
    if ((*(_BYTE *)(v8 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v9 + 12) & 1) == 0 || *(_DWORD *)(v8 + 8) != *(_DWORD *)(v9 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v9 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(unsigned __int8 **)(a1 + 8);
  v11 = *(unsigned __int8 **)(a2 + 8);
  if (v10)
  {
    if (!v11 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(unsigned __int8 **)(a1 + 64);
  v13 = *(unsigned __int8 **)(a2 + 64);
  if (v12)
  {
    if (!v13 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v12, v13))
      return 0;
    return std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), *(unsigned __int8 **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  if (!v13)
    return std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), *(unsigned __int8 **)(a2 + 24), *(_QWORD *)(a2 + 32));
  return 0;
}

unint64_t sirinluexternal::UsoNode::hash_value(sirinluexternal::UsoNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((*((_BYTE *)this + 76) & 1) != 0)
    v2 = *((unsigned int *)this + 18);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6 && (*(_BYTE *)(v6 + 16) & 1) != 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *((_QWORD *)this + 7);
  if (v8 && (*(_BYTE *)(v8 + 12) & 1) != 0)
    v9 = *(unsigned int *)(v8 + 8);
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 1);
  if (v10)
    v11 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 8);
  if (v12)
    v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  else
    v13 = 0;
  v14 = *((_QWORD *)this + 3);
  v15 = *((_QWORD *)this + 4);
  if (v14 == v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v16 ^= std::__string_hash<char>::operator()[abi:ne180100](v14);
      v14 += 24;
    }
    while (v14 != v15);
  }
  return v5 ^ v2 ^ v7 ^ v9 ^ v11 ^ v13 ^ v16;
}

_QWORD *sirinluexternal::UsoNode::makeStringPayload(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoNode::makeIntegerPayload(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0A38;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoNode::makeUsoVerbElementId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF448;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALRewriteInteractionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUINTERNALRewriteUtterance *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUINTERNALRewriteUtterance);
        objc_msgSend((id)a1, "addOriginalUtterances:", v17);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALRewriteUtteranceReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_26;
        goto LABEL_52;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALToken);
        objc_msgSend((id)a1, "addSiriResponse:", v17);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALTokenReadFrom(v17, a2) & 1) != 0)
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_50:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      case 3u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

        goto LABEL_50;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_45:
        *(_BYTE *)(a1 + 40) = v23 != 0;
        goto LABEL_50;
      case 5u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_49:
        *(_QWORD *)(a1 + 8) = v29;
        goto LABEL_50;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

uint64_t SIRINLUINTERNALParseOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  SIRINLUEXTERNALUserParse *v38;
  void *v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_50;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_54:
        *(_BYTE *)(a1 + 56) = v21 != 0;
        goto LABEL_63;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_58:
        *(_QWORD *)(a1 + 8) = v27;
        goto LABEL_63;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v33) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v33) = 0;
LABEL_62:
        *(_DWORD *)(a1 + 40) = v33;
        goto LABEL_63;
      case 6u:
        v38 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_storeStrong((id *)(a1 + 32), v38);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v38, a2) & 1) == 0)
          goto LABEL_65;
        goto LABEL_48;
      case 7u:
        v38 = objc_alloc_init(SIRINLUINTERNALNluRequestRule);
        objc_msgSend((id)a1, "addNluRequestRules:", v38);
        if (PBReaderPlaceMark() && SIRINLUINTERNALNluRequestRuleReadFrom((char *)v38, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_63:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_65:

        return 0;
      case 8u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
LABEL_50:
        v39 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_63;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
    }
  }
}

void sirinluinternal::AdjacentSpans::~AdjacentSpans(sirinluinternal::AdjacentSpans *this)
{
  sirinluinternal::AdjacentSpans::~AdjacentSpans(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BB1100;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::AdjacentSpans::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  unint64_t v44;
  int64x2_t *v45;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = this + 2;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        v23 = operator new();
        v24 = v23;
        *(_QWORD *)v23 = &off_1E7BB1D80;
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        v26 = (uint64_t *)this[1].i64[1];
        v25 = this[2].u64[0];
        if ((unint64_t)v26 >= v25)
        {
          v28 = this[1].i64[0];
          v29 = ((uint64_t)v26 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v30 = v25 - v28;
          v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1))
            v31 = v29 + 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          v45 = v8;
          if (v32)
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v32);
          else
            v33 = 0;
          v34 = (uint64_t *)(v32 + 8 * v29);
          v35 = v32 + 8 * v33;
          v44 = v35;
          *v34 = v24;
          v27 = v34 + 1;
          v43.i64[1] = (uint64_t)(v34 + 1);
          v37 = (_QWORD *)this[1].i64[0];
          v36 = (_QWORD *)this[1].i64[1];
          if (v36 == v37)
          {
            v39 = vdupq_n_s64((unint64_t)v36);
          }
          else
          {
            do
            {
              v38 = *--v36;
              *v36 = 0;
              *--v34 = v38;
            }
            while (v36 != v37);
            v39 = this[1];
            v27 = (_QWORD *)v43.i64[1];
            v35 = v44;
          }
          this[1].i64[0] = (uint64_t)v34;
          this[1].i64[1] = (uint64_t)v27;
          v43 = v39;
          v40 = this[2].i64[0];
          this[2].i64[0] = v35;
          v44 = v40;
          v42 = v39.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          *v26 = v23;
          v27 = v26 + 1;
        }
        this[1].i64[1] = (uint64_t)v27;
        v41 = *(v27 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v41 + 16))(v41, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v12 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = this->i64[1];
        this->i64[1] = (uint64_t)v20;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100](v21);
        PB::Reader::read();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C1FC4FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::AdjacentSpans::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  v5 = *(const PB::Base ***)(v3 + 16);
  v4 = *(const PB::Base ***)(v3 + 24);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternal::AdjacentSpans::formatText(sirinluinternal::AdjacentSpans *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "spans");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::AdjacentSpans::AdjacentSpans(sirinluinternal::AdjacentSpans *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1100;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1100;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternal::AdjacentSpans *sirinluinternal::AdjacentSpans::AdjacentSpans(sirinluinternal::AdjacentSpans *this, const sirinluinternal::AdjacentSpans *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  const sirinluinternal::SpanDataForNamedCaptureGroup **v10;
  const sirinluinternal::SpanDataForNamedCaptureGroup **i;
  const sirinluinternal::SpanDataForNamedCaptureGroup *v12;
  sirinluinternal::SpanDataForNamedCaptureGroup *v13;
  unint64_t v14;
  sirinluinternal::SpanDataForNamedCaptureGroup **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  sirinluinternal::SpanDataForNamedCaptureGroup **v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  sirinluinternal::SpanDataForNamedCaptureGroup *v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  char *v34;

  *(_QWORD *)this = &off_1E7BB1100;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *v4;
    *v4 = (uint64_t)v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  v10 = (const sirinluinternal::SpanDataForNamedCaptureGroup **)*((_QWORD *)a2 + 2);
  for (i = (const sirinluinternal::SpanDataForNamedCaptureGroup **)*((_QWORD *)a2 + 3); v10 != i; ++v10)
  {
    v12 = *v10;
    v13 = (sirinluinternal::SpanDataForNamedCaptureGroup *)operator new();
    sirinluinternal::SpanDataForNamedCaptureGroup::SpanDataForNamedCaptureGroup(v13, v12);
    v15 = (sirinluinternal::SpanDataForNamedCaptureGroup **)*((_QWORD *)this + 3);
    v14 = *((_QWORD *)this + 4);
    if ((unint64_t)v15 >= v14)
    {
      v17 = *((_QWORD *)this + 2);
      v18 = ((uint64_t)v15 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v19 = v14 - v17;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      v34 = (char *)this + 32;
      if (v21)
        v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v21);
      else
        v22 = 0;
      v23 = (sirinluinternal::SpanDataForNamedCaptureGroup **)(v21 + 8 * v18);
      v24 = v21 + 8 * v22;
      v33 = v24;
      *v23 = v13;
      v16 = v23 + 1;
      v32.i64[1] = (uint64_t)(v23 + 1);
      v26 = (_QWORD *)*((_QWORD *)this + 2);
      v25 = (_QWORD *)*((_QWORD *)this + 3);
      if (v25 == v26)
      {
        v28 = vdupq_n_s64((unint64_t)v25);
      }
      else
      {
        do
        {
          v27 = (sirinluinternal::SpanDataForNamedCaptureGroup *)*--v25;
          *v25 = 0;
          *--v23 = v27;
        }
        while (v25 != v26);
        v28 = *((int64x2_t *)this + 1);
        v16 = (_QWORD *)v32.i64[1];
        v24 = v33;
      }
      *((_QWORD *)this + 2) = v23;
      *((_QWORD *)this + 3) = v16;
      v32 = v28;
      v29 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v24;
      v33 = v29;
      v31 = v28.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v31);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    *((_QWORD *)this + 3) = v16;
  }
  return this;
}

void sub_1C1FC5344(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluinternal::AdjacentSpans::operator=(uint64_t a1, const sirinluinternal::AdjacentSpans *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluinternal::AdjacentSpans *)a1 != a2)
  {
    sirinluinternal::AdjacentSpans::AdjacentSpans((sirinluinternal::AdjacentSpans *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternal::AdjacentSpans::~AdjacentSpans((sirinluinternal::AdjacentSpans *)v6);
  }
  return a1;
}

_QWORD *sirinluinternal::swap(_QWORD *this, sirinluinternal::AdjacentSpans *a2, sirinluinternal::AdjacentSpans *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  return this;
}

uint64_t sirinluinternal::AdjacentSpans::AdjacentSpans(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E7BB1100;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = (void **)(a1 + 16);
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v9 = *(void **)(a1 + 16);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluinternal::AdjacentSpans::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluinternal::AdjacentSpans::AdjacentSpans((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluinternal::AdjacentSpans::~AdjacentSpans((sirinluinternal::AdjacentSpans *)v6);
  }
  return a1;
}

BOOL sirinluinternal::AdjacentSpans::operator==(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  BOOL v18;

  v4 = (unsigned __int8 *)a1[1];
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = a1[2];
  v12 = a1[3];
  v14 = a2 + 16;
  v13 = *(uint64_t **)(a2 + 16);
  if (v12 - v11 != *(_QWORD *)(v14 + 8) - (_QWORD)v13)
    return 0;
  if (v11 == v12)
    return 1;
  v15 = v11 + 8;
  do
  {
    v16 = *v13++;
    result = sirinluinternal::SpanDataForNamedCaptureGroup::operator==(*(_QWORD *)(v15 - 8), v16);
    v18 = !result || v15 == v12;
    v15 += 8;
  }
  while (!v18);
  return result;
}

unint64_t sirinluinternal::AdjacentSpans::hash_value(sirinluinternal::AdjacentSpans *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluinternal::SpanDataForNamedCaptureGroup **v4;
  sirinluinternal::SpanDataForNamedCaptureGroup **v5;
  uint64_t v6;
  sirinluinternal::SpanDataForNamedCaptureGroup *v7;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v5 = (sirinluinternal::SpanDataForNamedCaptureGroup **)*((_QWORD *)this + 2);
  v4 = (sirinluinternal::SpanDataForNamedCaptureGroup **)*((_QWORD *)this + 3);
  if (v5 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v5++;
      v6 ^= sirinluinternal::SpanDataForNamedCaptureGroup::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

BOOL SIRINLUINTERNALSNLP_INTERMEDIATEITFMSpanFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALCDMNluResponseReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALRequestID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_38;
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_msgSend(a1, "addParses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_38;
      case 3u:
        v17 = objc_alloc_init(SIRINLUEXTERNALResponseStatus);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALResponseStatusReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_38;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRepetitionResult);
        objc_msgSend(a1, "addRepetitionResults:", v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRepetitionResultReadFrom((uint64_t)v17, a2))
          goto LABEL_42;
        goto LABEL_38;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALLanguageVariantResult);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALLanguageVariantResultReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALNLUSupplementaryOutput);
        objc_storeStrong(a1 + 6, v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALNLUSupplementaryOutputReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

void sirinluexternal::RRSurroundingText::~RRSurroundingText(sirinluexternal::RRSurroundingText *this)
{
  sirinluexternal::RRSurroundingText::~RRSurroundingText(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB1150;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RRSurroundingText::readFrom(sirinluexternal::RRSurroundingText *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  _DWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_DWORD *)operator new();
        *(_QWORD *)v22 = &off_1E7BAF3F8;
        v22[10] = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::RRSurroundingText::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t sirinluexternal::RRSurroundingText::formatText(sirinluexternal::RRSurroundingText *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "bounding_box");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::RRSurroundingText::RRSurroundingText(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB1150;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB1150;
  return this;
}

sirinluexternal::RRSurroundingText *sirinluexternal::RRSurroundingText::RRSurroundingText(sirinluexternal::RRSurroundingText *this, const sirinluexternal::RRSurroundingText *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  sirinluexternal::RRBoundingBox *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7BB1150;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = (sirinluexternal::RRBoundingBox *)operator new();
    v11 = sirinluexternal::RRBoundingBox::RRBoundingBox(v10, *((const sirinluexternal::RRBoundingBox **)a2 + 1));
    v12 = *v4;
    *v4 = v13;
    if (v12)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v12 + 8))(v12, v11);
  }
  return this;
}

uint64_t sirinluexternal::RRSurroundingText::operator=(uint64_t a1, const sirinluexternal::RRSurroundingText *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::RRSurroundingText *)a1 != a2)
  {
    sirinluexternal::RRSurroundingText::RRSurroundingText((sirinluexternal::RRSurroundingText *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::RRSurroundingText::~RRSurroundingText((sirinluexternal::RRSurroundingText *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RRSurroundingText *a2, sirinluexternal::RRSurroundingText *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::RRSurroundingText::RRSurroundingText(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB1150;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::RRSurroundingText::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluexternal::RRSurroundingText::RRSurroundingText(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::RRSurroundingText::~RRSurroundingText((sirinluexternal::RRSurroundingText *)&v5);
  }
  return a1;
}

BOOL sirinluexternal::RRSurroundingText::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_21;
    return 0;
  }
  if (!v5)
    return 0;
  v6 = v4[23];
  if ((v6 & 0x80u) == 0)
    v7 = (unsigned __int8 *)v4[23];
  else
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v5[1];
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = *(unsigned __int8 **)(a2 + 16);
  else
    v10 = *v5;
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
      goto LABEL_21;
    return 0;
  }
  if (v4[23])
  {
    while (*v4 == *v10)
    {
      ++v4;
      ++v10;
      if (!--v6)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a2 + 8);
  result = (v12 | v13) == 0;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    return sirinluexternal::RRBoundingBox::operator==(*(_QWORD *)(a1 + 8), v13);
  return result;
}

unint64_t sirinluexternal::RRSurroundingText::hash_value(sirinluexternal::RRSurroundingText *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = sirinluexternal::RRBoundingBox::hash_value((sirinluexternal::RRBoundingBox *)v4);
  return v4 ^ v3;
}

_QWORD *sirinluexternal::RRSurroundingText::makeBoundingBox(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF3F8;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALAsrHypothesisReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  SIRINLUEXTERNALUUID *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_33;
        goto LABEL_38;
      case 2u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v20;

        goto LABEL_36;
      case 3u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_36;
      case 4u:
        v18 = objc_alloc_init(SIRINLUEXTERNALAsrTokenInformation);
        objc_msgSend((id)a1, "addAsrTokens:", v18);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALAsrTokenInformationReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 5u:
        v18 = objc_alloc_init(SIRINLUEXTERNALRewrittenUtterance);
        objc_msgSend((id)a1, "addRewrittenUtterances:", v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRewrittenUtteranceReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_44;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_46:
          v36 = 20;
          goto LABEL_55;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_50:
          v36 = 16;
          goto LABEL_55;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        case 4u:
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v34;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          break;
        v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
        *(_QWORD *)(a2 + v31) = v32 + 1;
        v19 |= (unint64_t)(v33 & 0x7F) << v29;
        if ((v33 & 0x80) == 0)
          goto LABEL_52;
        v29 += 7;
        v14 = v30++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_54:
      v36 = 24;
LABEL_55:
      *(_DWORD *)(a1 + v36) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALTurnInputRuleReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SIRINLUINTERNALContextRule *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(SIRINLUINTERNALContextRule);
        objc_msgSend(a1, "addPositiveContextRules:", v18);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SIRINLUINTERNALUtteranceRule);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALUtteranceRuleReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_33;
LABEL_28:
        PBReaderRecallMark();

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUINTERNALContextRule);
    objc_msgSend(a1, "addNegativeContextRules:", v18);
LABEL_26:
    if (!PBReaderPlaceMark() || (SIRINLUINTERNALContextRuleReadFrom((uint64_t)v18, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalpsc::PSCServiceResponse::~PSCServiceResponse(sirinluinternalpsc::PSCServiceResponse *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluinternalpsc::PSCServiceResponse::readFrom(sirinluinternalpsc::PSCServiceResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalpsc::PSCServiceResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8));
  return this;
}

uint64_t sirinluinternalpsc::PSCServiceResponse::formatText(sirinluinternalpsc::PSCServiceResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "pommes_probability", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternalpsc::PSCServiceResponse::PSCServiceResponse(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB11A0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB11A0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

float sirinluinternalpsc::PSCServiceResponse::PSCServiceResponse(sirinluinternalpsc::PSCServiceResponse *this, const sirinluinternalpsc::PSCServiceResponse *a2)
{
  float result;

  *(_QWORD *)this = &off_1E7BB11A0;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)this = &off_1E7BB11A0;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t sirinluinternalpsc::PSCServiceResponse::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(sirinluinternalpsc::PSCServiceResponse *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7BB11A0;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(sirinluinternalpsc::PSCServiceResponse *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = &off_1E7BB11A0;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float sirinluinternalpsc::swap(sirinluinternalpsc *this, sirinluinternalpsc::PSCServiceResponse *a2, sirinluinternalpsc::PSCServiceResponse *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float sirinluinternalpsc::PSCServiceResponse::PSCServiceResponse(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7BB11A0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7BB11A0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

BOOL sirinluinternalpsc::PSCServiceResponse::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

float sirinluinternalpsc::PSCServiceResponse::hash_value(sirinluinternalpsc::PSCServiceResponse *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

uint64_t SIRINLUINTERNALOverrideCollectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  SIRINLUINTERNALParseOverride *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_38;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_40:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 40;
LABEL_30:
        v26 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_41;
      case 4u:
        v27 = objc_alloc_init(SIRINLUINTERNALParseOverride);
        objc_msgSend((id)a1, "addParseOverrides:", v27);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALParseOverrideReadFrom((uint64_t)v27, a2) & 1) == 0)
          goto LABEL_43;
        goto LABEL_36;
      case 5u:
        v27 = objc_alloc_init(SIRINLUINTERNALComponentOverride);
        objc_msgSend((id)a1, "addComponentOverrides:", v27);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALComponentOverrideReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void siricommon::Int32Value::~Int32Value(siricommon::Int32Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siricommon::Int32Value::readFrom(siricommon::Int32Value *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::Int32Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t siricommon::Int32Value::formatText(siricommon::Int32Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "value");
  return PB::TextFormatter::endObject(a2);
}

uint64_t siricommon::Int32Value::Int32Value(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB11F0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB11F0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t siricommon::Int32Value::Int32Value(uint64_t this, const siricommon::Int32Value *a2)
{
  int v2;

  *(_QWORD *)this = &off_1E7BB11F0;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_1E7BB11F0;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::Int32Value::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BB11F0;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BB11F0;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::Int32Value *a2, siricommon::Int32Value *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t siricommon::Int32Value::Int32Value(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BB11F0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB11F0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL siricommon::Int32Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t siricommon::Int32Value::hash_value(siricommon::Int32Value *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this)
{
  sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BB1240;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemDialogActGroup::readFrom(sirinluexternal::SystemDialogActGroup *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  char *v44;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        v23 = operator new();
        v24 = v23;
        *(_QWORD *)v23 = &off_1E7BB1240;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        v26 = (uint64_t *)*((_QWORD *)this + 2);
        v25 = *((_QWORD *)this + 3);
        if ((unint64_t)v26 >= v25)
        {
          v28 = *((_QWORD *)this + 1);
          v29 = ((uint64_t)v26 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v30 = v25 - v28;
          v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1))
            v31 = v29 + 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          v44 = v8;
          if (v32)
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v32);
          else
            v33 = 0;
          v34 = (uint64_t *)(v32 + 8 * v29);
          v35 = v32 + 8 * v33;
          v43 = v35;
          *v34 = v24;
          v27 = v34 + 1;
          v42.i64[1] = (uint64_t)(v34 + 1);
          v37 = (_QWORD *)*((_QWORD *)this + 1);
          v36 = (_QWORD *)*((_QWORD *)this + 2);
          if (v36 == v37)
          {
            v39 = vdupq_n_s64((unint64_t)v36);
          }
          else
          {
            do
            {
              v38 = *--v36;
              *v36 = 0;
              *--v34 = v38;
            }
            while (v36 != v37);
            v39 = *(int64x2_t *)((char *)this + 8);
            v27 = (_QWORD *)v42.i64[1];
            v35 = v43;
          }
          *((_QWORD *)this + 1) = v34;
          *((_QWORD *)this + 2) = v27;
          v42 = v39;
          v40 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v35;
          v43 = v40;
          v41 = v39.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v41);
        }
        else
        {
          *v26 = v23;
          v27 = v26 + 1;
        }
        *((_QWORD *)this + 2) = v27;
        v20 = *(v27 - 1);
      }
      else
      {
        if ((v12 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_48;
        }
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAE958;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 4);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_48:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

void sub_1C1FCC660(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::SystemDialogActGroup::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogActGroup::formatText(sirinluexternal::SystemDialogActGroup *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "child_acts");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "system_dialog_act");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1240;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1240;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluexternal::SystemDialogActGroup *sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this, const sirinluexternal::SystemDialogAct **a2)
{
  int64x2_t *v4;
  sirinluexternal::SystemDialogAct *v5;
  sirinluexternal::SystemDialogAct *v6;
  uint64_t v7;
  const sirinluexternal::SystemDialogActGroup **v8;
  const sirinluexternal::SystemDialogActGroup **i;
  const sirinluexternal::SystemDialogActGroup *v10;
  sirinluexternal::SystemDialogActGroup *v11;
  unint64_t v12;
  sirinluexternal::SystemDialogActGroup **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  sirinluexternal::SystemDialogActGroup **v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  sirinluexternal::SystemDialogActGroup *v24;
  int64x2_t v25;
  unint64_t v26;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  char *v31;

  *(_QWORD *)this = &off_1E7BB1240;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2[4])
  {
    v5 = (sirinluexternal::SystemDialogAct *)operator new();
    v6 = sirinluexternal::SystemDialogAct::SystemDialogAct(v5, a2[4]);
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = (const sirinluexternal::SystemDialogActGroup **)a2[1];
  for (i = (const sirinluexternal::SystemDialogActGroup **)a2[2]; v8 != i; ++v8)
  {
    v10 = *v8;
    v11 = (sirinluexternal::SystemDialogActGroup *)operator new();
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(v11, v10);
    v13 = (sirinluexternal::SystemDialogActGroup **)*((_QWORD *)this + 2);
    v12 = *((_QWORD *)this + 3);
    if ((unint64_t)v13 >= v12)
    {
      v15 = ((uint64_t)v13 - v4->i64[0]) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v16 = v12 - v4->i64[0];
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      v31 = (char *)this + 24;
      if (v18)
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v18);
      else
        v19 = 0;
      v20 = (sirinluexternal::SystemDialogActGroup **)(v18 + 8 * v15);
      v21 = v18 + 8 * v19;
      v30 = v21;
      *v20 = v11;
      v14 = v20 + 1;
      v29.i64[1] = (uint64_t)(v20 + 1);
      v23 = (_QWORD *)*((_QWORD *)this + 1);
      v22 = (_QWORD *)*((_QWORD *)this + 2);
      if (v22 == v23)
      {
        v25 = vdupq_n_s64((unint64_t)v22);
      }
      else
      {
        do
        {
          v24 = (sirinluexternal::SystemDialogActGroup *)*--v22;
          *v22 = 0;
          *--v20 = v24;
        }
        while (v22 != v23);
        v25 = *v4;
        v14 = (_QWORD *)v29.i64[1];
        v21 = v30;
      }
      *((_QWORD *)this + 1) = v20;
      *((_QWORD *)this + 2) = v14;
      v29 = v25;
      v26 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v21;
      v30 = v26;
      v28 = v25.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v28);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 1;
    }
    *((_QWORD *)this + 2) = v14;
  }
  return this;
}

void sub_1C1FCC9FC(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternal::SystemDialogActGroup::operator=(uint64_t a1, const sirinluexternal::SystemDialogAct **a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluexternal::SystemDialogAct **)a1 != a2)
  {
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v6);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::SystemDialogActGroup *a2, sirinluexternal::SystemDialogActGroup *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BB1240;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_QWORD *)*v4;
  if (*v4)
  {
    v8 = *(_QWORD **)(a1 + 16);
    v9 = (_QWORD *)*v4;
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::SystemDialogActGroup::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::SystemDialogActGroup::operator==(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;

  v4 = (_QWORD *)a1[4];
  v5 = *(_QWORD **)(a2 + 32);
  if (v4)
  {
    if (!v5 || (sirinluexternal::SystemDialogAct::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[1];
  v7 = a1[2];
  v9 = a2 + 8;
  v8 = *(uint64_t **)(a2 + 8);
  if (v7 - v6 != *(_QWORD *)(v9 + 8) - (_QWORD)v8)
    return 0;
  if (v6 == v7)
    return 1;
  v10 = v6 + 8;
  do
  {
    v11 = *v8++;
    result = sirinluexternal::SystemDialogActGroup::operator==(*(_QWORD *)(v10 - 8), v11);
    if ((_DWORD)result)
      v13 = v10 == v7;
    else
      v13 = 1;
    v10 += 8;
  }
  while (!v13);
  return result;
}

unint64_t sirinluexternal::SystemDialogActGroup::hash_value(sirinluexternal::SystemDialogActGroup *this)
{
  sirinluexternal::SystemDialogAct *v2;
  unint64_t v3;
  sirinluexternal::SystemDialogActGroup **v4;
  sirinluexternal::SystemDialogActGroup **v5;
  uint64_t v6;
  sirinluexternal::SystemDialogActGroup *v7;

  v2 = (sirinluexternal::SystemDialogAct *)*((_QWORD *)this + 4);
  if (v2)
    v3 = sirinluexternal::SystemDialogAct::hash_value(v2);
  else
    v3 = 0;
  v5 = (sirinluexternal::SystemDialogActGroup **)*((_QWORD *)this + 1);
  v4 = (sirinluexternal::SystemDialogActGroup **)*((_QWORD *)this + 2);
  if (v5 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v5++;
      v6 ^= sirinluexternal::SystemDialogActGroup::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

_QWORD *sirinluexternal::SystemDialogActGroup::makeSystemDialogAct(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE958;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::MultilingualVariant::~MultilingualVariant(sirinluexternal::MultilingualVariant *this)
{
  sirinluexternal::MultilingualVariant::~MultilingualVariant(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB1290;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::MultilingualVariant::readFrom(sirinluexternal::MultilingualVariant *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::MultilingualVariant::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t sirinluexternal::MultilingualVariant::formatText(sirinluexternal::MultilingualVariant *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "language_variant_score", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::MultilingualVariant::MultilingualVariant(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB1290;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB1290;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

sirinluexternal::MultilingualVariant *sirinluexternal::MultilingualVariant::MultilingualVariant(sirinluexternal::MultilingualVariant *this, const sirinluexternal::MultilingualVariant *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E7BB1290;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 24) |= 1u;
    *((_QWORD *)this + 2) = v9;
  }
  return this;
}

uint64_t sirinluexternal::MultilingualVariant::operator=(uint64_t a1, const sirinluexternal::MultilingualVariant *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const sirinluexternal::MultilingualVariant *)a1 != a2)
  {
    sirinluexternal::MultilingualVariant::MultilingualVariant((sirinluexternal::MultilingualVariant *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    sirinluexternal::MultilingualVariant::~MultilingualVariant((sirinluexternal::MultilingualVariant *)&v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::MultilingualVariant *a2, sirinluexternal::MultilingualVariant *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t sirinluexternal::MultilingualVariant::MultilingualVariant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E7BB1290;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t sirinluexternal::MultilingualVariant::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v11 = v6;
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_1E7BB1290;
    v10[1] = v7;
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    sirinluexternal::MultilingualVariant::~MultilingualVariant((sirinluexternal::MultilingualVariant *)v10);
  }
  return a1;
}

BOOL sirinluexternal::MultilingualVariant::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t sirinluexternal::MultilingualVariant::hash_value(sirinluexternal::MultilingualVariant *this)
{
  unint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return *(_QWORD *)&v3 ^ v2;
}

uint64_t SIRINLUEXTERNALUtteranceAlignmentReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  SIRINLUEXTERNALUtteranceSpan *v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_49;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        a1[24] |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_43:
        v31 = 8;
        goto LABEL_48;
      }
      v29 = objc_alloc_init(SIRINLUEXTERNALUtteranceSpan);
      objc_msgSend(a1, "addSpans:", v29);
      if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUtteranceSpanReadFrom((uint64_t)v29, a2))
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    a1[24] |= 2u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_45;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        LODWORD(v20) = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_47:
    v31 = 12;
LABEL_48:
    *(_DWORD *)&a1[v31] = v20;
    goto LABEL_49;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALSSU_INFERENCESsuInferenceResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserParse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_msgSend(a1, "addParses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALPreprocessingWrapperReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALTOKENIZERTokenizerResponse *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUINTERNALTOKENIZERTokenizerResponse);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && SIRINLUINTERNALTOKENIZERTokenizerResponseReadFrom((uint64_t)v17, a2))
          goto LABEL_32;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALSPANMATCHSpanMatchResponse);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALSPANMATCHSpanMatchResponseReadFrom(v17, a2) & 1) == 0)
          goto LABEL_35;
        goto LABEL_32;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALEMBEDDINGEmbeddingResponse);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALEMBEDDINGEmbeddingResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMENTION_RESOLVERMentionResolverResponse);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark()
          && SIRINLUINTERNALMENTION_RESOLVERMentionResolverResponseReadFrom((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_33;
    }
  }
}

uint64_t SIRINLUEXTERNALRRMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  SIRINLUEXTERNALRRSurroundingText *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_37;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(SIRINLUEXTERNALRRSurroundingText);
          objc_msgSend((id)a1, "addSurroundingTexts:", v18);
          if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRSurroundingTextReadFrom((uint64_t)v18, a2))
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = objc_alloc_init(SIRINLUEXTERNALRRBoundingBox);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRBoundingBoxReadFrom((uint64_t)v18, a2))
            goto LABEL_42;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup(sirinluexternalssu_inference::SsuInferenceSetup *this)
{
  sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB1310;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::readFrom(sirinluexternalssu_inference::SsuInferenceSetup *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::formatText(sirinluexternalssu_inference::SsuInferenceSetup *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(_QWORD *this)
{
  *this = &off_1E7BB1310;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB1310;
  this[1] = 0;
  return this;
}

sirinluexternalssu_inference::SsuInferenceSetup *sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(sirinluexternalssu_inference::SsuInferenceSetup *this, const sirinluexternalssu_inference::SsuInferenceSetup *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BB1310;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return this;
}

const sirinluexternalssu_inference::SsuInferenceSetup *sirinluexternalssu_inference::SsuInferenceSetup::operator=(const sirinluexternalssu_inference::SsuInferenceSetup *a1, const sirinluexternalssu_inference::SsuInferenceSetup *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup((sirinluexternalssu_inference::SsuInferenceSetup *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup((sirinluexternalssu_inference::SsuInferenceSetup *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::swap(uint64_t this, sirinluexternalssu_inference::SsuInferenceSetup *a2, sirinluexternalssu_inference::SsuInferenceSetup *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB1310;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB1310;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BB1310;
    v6[1] = v4;
    sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup((sirinluexternalssu_inference::SsuInferenceSetup *)v6);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternalssu_inference::SsuInferenceSetup::hash_value(sirinluexternalssu_inference::SsuInferenceSetup *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  return result;
}

void sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB1360;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100](v23);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF620;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "response");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB1360;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB1360;
  return this;
}

sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  uint64_t *v4;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v5;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluinternalsnlp_intermediate::LinearizedTensor **v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BB1360;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[2])
  {
    v5 = (sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)operator new();
    v6 = sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(v5, a2[2]);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[1];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)*v10, (std::string::size_type)v10[1]);
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = (std::string::size_type)v10[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *v4;
    *v4 = (uint64_t)v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor ***)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB1360;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  result = v7 == 0;
  if (!v6)
    return result;
  if (!v7)
    return 0;
  v9 = v6[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v6[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v7[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a2 + 8);
  else
    v13 = *v7;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v6, v13, *((_QWORD *)v6 + 1));
  if (!v6[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v6++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
  uint64_t v2;
  sirinluinternalsnlp_intermediate::LinearizedTensor *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (v2 && (v3 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v2 + 8)) != 0)
    v4 = sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  return v5 ^ v4;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::makeResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF620;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t siri_nlu_types::ssu_compression_utilities::compressArchiveForSSUFilePath(std::string *this, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3)
{
  void *v4;
  void *v5;
  std::string *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  std::string *p_pn;
  void *v12;
  void *v13;
  BOOL v14;
  id v15;
  void *v17;
  void *exception;
  void *v19;
  char *v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  id v24;
  std::string pn;

  v4 = (void *)MEMORY[0x1E0C99E98];
  v5 = (void *)MEMORY[0x1E0CB3940];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    pn = *this;
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &pn;
  else
    v6 = (std::string *)pn.__r_.__value_.__r.__words[0];
  objc_msgSend(v5, "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fileURLWithPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  v9 = (void *)MEMORY[0x1E0C99E98];
  v10 = (void *)MEMORY[0x1E0CB3940];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_pn = &pn;
  else
    p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  objc_msgSend(v10, "stringWithUTF8String:", p_pn);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "fileURLWithPath:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  v24 = 0;
  v14 = +[SSUCompressionUtils compressArchiveForSSUFileURL:outputFileURL:error:](SSUCompressionUtils, "compressArchiveForSSUFileURL:outputFileURL:error:", v8, v13, &v24);
  v15 = v24;
  if (!v14)
  {
    v17 = v15;
    exception = __cxa_allocate_exception(0x10uLL);
    v19 = exception;
    if (!v17)
    {
      MEMORY[0x1C3BB7128](exception, "Unable to compress for some unknown reason");
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v17, "localizedDescription");
    v20 = (char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    std::string::basic_string[abi:ne180100]<0>(&v23, v20);
    v21 = std::string::insert(&v23, 0, "Error during compression: ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BB7134](v19, &pn);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }

  return 1;
}

void sub_1C1FD1290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;

  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);

    if ((v27 & 1) == 0)
      goto LABEL_8;
  }
  else
  {

    if (!v27)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t siri_nlu_types::ssu_compression_utilities::decompressFromCompressedSSUFilePath(std::string *this, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3)
{
  void *v4;
  void *v5;
  std::string *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  std::string *p_pn;
  void *v12;
  void *v13;
  BOOL v14;
  id v15;
  void *v17;
  void *exception;
  void *v19;
  char *v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  id v24;
  std::string pn;

  v4 = (void *)MEMORY[0x1E0C99E98];
  v5 = (void *)MEMORY[0x1E0CB3940];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    pn = *this;
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &pn;
  else
    v6 = (std::string *)pn.__r_.__value_.__r.__words[0];
  objc_msgSend(v5, "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fileURLWithPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  v9 = (void *)MEMORY[0x1E0C99E98];
  v10 = (void *)MEMORY[0x1E0CB3940];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_pn = &pn;
  else
    p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  objc_msgSend(v10, "stringWithUTF8String:", p_pn);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "fileURLWithPath:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  v24 = 0;
  v14 = +[SSUCompressionUtils decompressFromCompressedSSUFilePath:outputFileURL:error:](SSUCompressionUtils, "decompressFromCompressedSSUFilePath:outputFileURL:error:", v8, v13, &v24);
  v15 = v24;
  if (!v14)
  {
    v17 = v15;
    exception = __cxa_allocate_exception(0x10uLL);
    v19 = exception;
    if (!v17)
    {
      MEMORY[0x1C3BB7128](exception, "Unable to decompress for some unknown reason");
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v17, "localizedDescription");
    v20 = (char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    std::string::basic_string[abi:ne180100]<0>(&v23, v20);
    v21 = std::string::insert(&v23, 0, "Error during decompression: ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BB7134](v19, &pn);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }

  return 1;
}

void sub_1C1FD15AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;

  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);

    if ((v27 & 1) == 0)
      goto LABEL_8;
  }
  else
  {

    if (!v27)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_1C1FD1828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1FD1904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FD1D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FD1E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

apple::aiml::flatbuffers2::vector_downward *apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned long long>(apple::aiml::flatbuffers2::vector_downward *this, uint64_t a2, uint64_t a3)
{
  apple::aiml::flatbuffers2::vector_downward *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v5 = this;
  if (a3 || *((_BYTE *)this + 80))
  {
    apple::aiml::flatbuffers2::FlatBufferBuilder::Align(this, 8uLL);
    apple::aiml::flatbuffers2::vector_downward::ensure_space(v5, 8uLL);
    v6 = *((_QWORD *)v5 + 6);
    *(_QWORD *)(v6 - 8) = a3;
    v6 -= 8;
    *((_QWORD *)v5 + 6) = v6;
    v7 = (*((_DWORD *)v5 + 8) - v6 + *((_DWORD *)v5 + 10));
    this = (apple::aiml::flatbuffers2::vector_downward *)apple::aiml::flatbuffers2::vector_downward::ensure_space(v5, 8uLL);
    **((_QWORD **)v5 + 7) = v7 | (a2 << 32);
    *((_QWORD *)v5 + 7) += 8;
    ++*((_DWORD *)v5 + 16);
    v8 = *((unsigned __int16 *)v5 + 34);
    if (v8 <= a2)
      LOWORD(v8) = a2;
    *((_WORD *)v5 + 34) = v8;
  }
  return this;
}

void sirinluexternal::NLContext::~NLContext(sirinluexternal::NLContext *this)
{
  sirinluexternal::NLContext::~NLContext(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BB13B0;
  v3 = (void **)((char *)this + 88);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::NLContext::readFrom(sirinluexternal::NLContext *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 88);
  v9 = (uint64_t **)((char *)this + 56);
  v10 = (_QWORD *)((char *)this + 32);
  v11 = (_QWORD *)((char *)this + 8);
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_22:
      if ((v15 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB1240;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          v25 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = v24;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v24 = *((_QWORD *)this + 10);
          }
          goto LABEL_31;
        case 2u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>(v11);
          v26 = *((_QWORD *)this + 2);
          goto LABEL_30;
        case 3u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>(v10);
          v26 = *((_QWORD *)this + 5);
          goto LABEL_30;
        case 4u:
          PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>(v9);
          v26 = *((_QWORD *)this + 8);
          goto LABEL_30;
        case 5u:
          PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>(v8);
          v26 = *((_QWORD *)this + 12);
LABEL_30:
          v24 = *(_QWORD *)(v26 - 8);
LABEL_31:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v24 + 16))(v24, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_34;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_22;
      v19 += 7;
      v2 = v21;
      v18 = v20++ > 8;
    }
    while (!v18);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_34:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t sirinluexternal::NLContext::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base **v11;
  const PB::Base **v12;
  const PB::Base *v13;
  const PB::Base **v14;
  const PB::Base **v15;
  const PB::Base *v16;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 80);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[1];
  v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = (const PB::Base **)v3[4];
  v9 = (const PB::Base **)v3[5];
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  v11 = (const PB::Base **)v3[7];
  v12 = (const PB::Base **)v3[8];
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  v15 = (const PB::Base **)v3[11];
  v14 = (const PB::Base **)v3[12];
  while (v15 != v14)
  {
    v16 = *v15++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  return this;
}

uint64_t sirinluexternal::NLContext::formatText(sirinluexternal::NLContext *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "active_tasks");
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "executed_tasks");
  }
  v11 = (uint64_t *)*((_QWORD *)this + 7);
  v12 = (uint64_t *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "salient_entities");
  }
  v14 = *((_QWORD *)this + 10);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "system_dialog_act_group");
  v15 = (uint64_t *)*((_QWORD *)this + 11);
  v16 = (uint64_t *)*((_QWORD *)this + 12);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "system_dialog_acts");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *PB::PtrVector<sirinluexternal::Task>::emplace_back<>(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = (_QWORD *)operator new();
  v3 = result;
  *result = &off_1E7BAE328;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - *a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - *a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = (_QWORD *)*a1;
    v14 = (_QWORD *)a1[1];
    if (v14 == (_QWORD *)*a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (_QWORD *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1FD2518(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluexternal::NLContext::NLContext(sirinluexternal::NLContext *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB13B0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB13B0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  return result;
}

sirinluexternal::NLContext *sirinluexternal::NLContext::NLContext(sirinluexternal::NLContext *this, const sirinluexternal::SystemDialogAct ***a2)
{
  sirinluexternal::Task ***v4;
  sirinluexternal::EntityCandidate ***v5;
  sirinluexternal::SystemDialogAct ***v6;
  sirinluexternal::SystemDialogActGroup *v7;
  sirinluexternal::SystemDialogActGroup *v8;
  uint64_t v9;
  const sirinluexternal::Task **v10;
  const sirinluexternal::Task **v11;
  const sirinluexternal::Task **v12;
  const sirinluexternal::Task **i;
  const sirinluexternal::EntityCandidate **v14;
  const sirinluexternal::EntityCandidate **v15;
  const sirinluexternal::SystemDialogAct **v16;
  const sirinluexternal::SystemDialogAct **v17;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::Task ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (sirinluexternal::EntityCandidate ***)((char *)this + 56);
  *(_OWORD *)((char *)this + 88) = 0u;
  v6 = (sirinluexternal::SystemDialogAct ***)((char *)this + 88);
  *(_QWORD *)this = &off_1E7BB13B0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 13) = 0;
  if (a2[10])
  {
    v7 = (sirinluexternal::SystemDialogActGroup *)operator new();
    v8 = sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(v7, a2[10]);
    v9 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = a2[1];
  v11 = a2[2];
  while (v10 != v11)
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>(v4, *v10++);
  v12 = a2[4];
  for (i = a2[5]; v12 != i; ++v12)
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>((sirinluexternal::Task ***)this + 4, *v12);
  v14 = a2[7];
  v15 = a2[8];
  while (v14 != v15)
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>(v5, *v14++);
  v17 = a2[11];
  v16 = a2[12];
  while (v17 != v16)
    PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>(v6, *v17++);
  return this;
}

uint64_t PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>(sirinluexternal::Task ***a1, const sirinluexternal::Task *a2)
{
  sirinluexternal::Task *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::Task **v7;
  sirinluexternal::Task **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::Task **v14;
  unint64_t v15;
  sirinluexternal::Task **v16;
  sirinluexternal::Task **v17;
  sirinluexternal::Task *v18;
  int64x2_t v19;
  sirinluexternal::Task **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::Task *)operator new();
  result = (uint64_t)sirinluexternal::Task::Task(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::Task **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::Task **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::Task **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1FD28A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

const sirinluexternal::SystemDialogAct ***sirinluexternal::NLContext::operator=(const sirinluexternal::SystemDialogAct ***a1, const sirinluexternal::SystemDialogAct ***a2)
{
  sirinluexternal::NLContext *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    sirinluexternal::NLContext::NLContext((sirinluexternal::NLContext *)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::NLContext *)v5, v3);
    sirinluexternal::NLContext::~NLContext((sirinluexternal::NLContext *)v5);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::NLContext *a2, sirinluexternal::NLContext *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  v13 = this[11];
  this[11] = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = this[12];
  this[12] = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = this[13];
  this[13] = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  return this;
}

uint64_t sirinluexternal::NLContext::NLContext(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E7BB13B0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return a1;
}

_QWORD *sirinluexternal::NLContext::operator=(_QWORD *a1, uint64_t a2)
{
  sirinluexternal::NLContext *v3;
  _BYTE v5[112];

  if (a1 != (_QWORD *)a2)
  {
    sirinluexternal::NLContext::NLContext((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::NLContext *)v5, v3);
    sirinluexternal::NLContext::~NLContext((sirinluexternal::NLContext *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::NLContext::operator==(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)a1[10];
  v5 = *(_QWORD *)(a2 + 80);
  if (v4)
  {
    if (!v5 || (sirinluexternal::SystemDialogActGroup::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 1, *(_QWORD ***)(a2 + 8), *(_QWORD *)(a2 + 16))
    && PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 4, *(_QWORD ***)(a2 + 32), *(_QWORD *)(a2 + 40))
    && PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(a1 + 7, *(uint64_t **)(a2 + 56), *(_QWORD *)(a2 + 64)))
  {
    return PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(a1 + 11, *(_QWORD ***)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  return 0;
}

BOOL PB::PtrVector<sirinluexternal::Task>::operator==(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::Task::operator==(*(_QWORD **)(v6 - 8), v7);
    v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::NLContext::hash_value(sirinluexternal::NLContext *this)
{
  sirinluexternal::SystemDialogActGroup *v2;
  unint64_t v3;
  sirinluexternal::Task **v4;
  sirinluexternal::Task **v5;
  uint64_t v6;
  sirinluexternal::Task *v7;
  sirinluexternal::Task **v8;
  sirinluexternal::Task **v9;
  uint64_t v10;
  sirinluexternal::Task *v11;
  sirinluexternal::EntityCandidate **v12;
  sirinluexternal::EntityCandidate **v13;
  uint64_t v14;
  sirinluexternal::EntityCandidate *v15;
  sirinluexternal::SystemDialogAct **v16;
  sirinluexternal::SystemDialogAct **v17;
  uint64_t v18;
  sirinluexternal::SystemDialogAct *v19;

  v2 = (sirinluexternal::SystemDialogActGroup *)*((_QWORD *)this + 10);
  if (v2)
    v3 = sirinluexternal::SystemDialogActGroup::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluexternal::Task **)*((_QWORD *)this + 1);
  v5 = (sirinluexternal::Task **)*((_QWORD *)this + 2);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= sirinluexternal::Task::hash_value(v7);
    }
    while (v4 != v5);
  }
  v8 = (sirinluexternal::Task **)*((_QWORD *)this + 4);
  v9 = (sirinluexternal::Task **)*((_QWORD *)this + 5);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 ^= sirinluexternal::Task::hash_value(v11);
    }
    while (v8 != v9);
  }
  v12 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 7);
  v13 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 8);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 ^= sirinluexternal::EntityCandidate::hash_value(v15);
    }
    while (v12 != v13);
  }
  v17 = (sirinluexternal::SystemDialogAct **)*((_QWORD *)this + 11);
  v16 = (sirinluexternal::SystemDialogAct **)*((_QWORD *)this + 12);
  if (v17 == v16)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v17++;
      v18 ^= sirinluexternal::SystemDialogAct::hash_value(v19);
    }
    while (v17 != v16);
  }
  return v6 ^ v3 ^ v10 ^ v14 ^ v18;
}

_QWORD *sirinluexternal::NLContext::makeSystemDialogActGroup(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[10])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1240;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalssu::SSURequest::~SSURequest(sirinluinternalssu::SSURequest *this)
{
  sirinluinternalssu::SSURequest::~SSURequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &off_1E7BB1400;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v6 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v6 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalssu::SSURequest::readFrom(sirinluinternalssu::SSURequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 56);
  v9 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v15 = *(_BYTE *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0)
        break;
      v11 += 7;
      v2 = v14;
      v16 = v12++ > 8;
      if (v16)
        goto LABEL_20;
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = v22;
        if (v23)
          goto LABEL_27;
        goto LABEL_28;
      case 2u:
        v24 = (_QWORD *)operator new();
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        v23 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v24;
        if (v23)
LABEL_27:
          std::default_delete<std::string>::operator()[abi:ne180100](v23);
LABEL_28:
        PB::Reader::read();
        goto LABEL_39;
      case 3u:
        v25 = operator new();
        *(_QWORD *)v25 = &off_1E7BB0CB8;
        *(_QWORD *)(v25 + 24) = 0;
        v26 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v25;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v25 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v9);
        v27 = *((_QWORD *)this + 4);
        goto LABEL_33;
      case 5u:
        PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>(v8);
        v27 = *((_QWORD *)this + 8);
LABEL_33:
        v25 = *(_QWORD *)(v27 - 8);
        break;
      case 6u:
        v25 = operator new();
        *(_QWORD *)v25 = &off_1E7BAE468;
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_OWORD *)(v25 + 40) = 0u;
        *(_QWORD *)(v25 + 56) = 0;
        v28 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v25;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v25 = *((_QWORD *)this + 6);
        }
        break;
      default:
        goto LABEL_20;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v25 + 16))(v25, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_39:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v17 = 0;
  v18 = 0;
  v13 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v19 = v2 + 1;
    v20 = *(_BYTE *)(v10 + v2);
    *((_QWORD *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0)
      goto LABEL_22;
    v17 += 7;
    v2 = v19;
    v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_39;
  return result;
}

_QWORD *sirinluinternalssu::SSURequest::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base *v11;

  v3 = this;
  if (this[10])
    this = (_QWORD *)PB::Writer::write();
  if (v3[2])
    this = (_QWORD *)PB::Writer::write();
  v4 = (const PB::Base *)v3[1];
  if (v4)
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[3];
  v6 = (const PB::Base **)v3[4];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = (const PB::Base **)v3[7];
  v9 = (const PB::Base **)v3[8];
  while (v8 != v9)
  {
    v10 = *v8++;
    this = (_QWORD *)PB::Writer::writeSubmessage(a2, v10);
  }
  v11 = (const PB::Base *)v3[6];
  if (v11)
    return (_QWORD *)PB::Writer::writeSubmessage(a2, v11);
  return this;
}

uint64_t sirinluinternalssu::SSURequest::formatText(sirinluinternalssu::SSURequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "asr_id");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "matching_spans");
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "nlu_request_id");
  v10 = (uint64_t *)*((_QWORD *)this + 7);
  v11 = (uint64_t *)*((_QWORD *)this + 8);
  while (v10 != v11)
  {
    v12 = *v10++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "salient_entities");
  }
  if (*((_QWORD *)this + 10))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalssu::SSURequest::SSURequest(sirinluinternalssu::SSURequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1400;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1400;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

sirinluinternalssu::SSURequest *sirinluinternalssu::SSURequest::SSURequest(sirinluinternalssu::SSURequest *this, const sirinluinternalssu::SSURequest *a2)
{
  uint64_t *v4;
  sirinluinternal::MatchingSpan ***v5;
  sirinluexternal::EntityCandidate ***v6;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const sirinluinternal::MatchingSpan **v20;
  const sirinluinternal::MatchingSpan **v21;
  const sirinluexternal::EntityCandidate **v22;
  const sirinluexternal::EntityCandidate **v23;
  sirinluexternal::RequestID *v24;
  sirinluexternal::RequestID *v25;
  uint64_t v26;

  *(_QWORD *)this = &off_1E7BB1400;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (sirinluinternal::MatchingSpan ***)((char *)this + 24);
  *(_OWORD *)((char *)this + 56) = 0u;
  v6 = (sirinluexternal::EntityCandidate ***)((char *)this + 56);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (*((_QWORD *)a2 + 10))
  {
    v7 = (std::string *)operator new();
    v8 = v7;
    v9 = (__int128 *)*((_QWORD *)a2 + 10);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
    }
    v11 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v8;
    if (v11)
      std::default_delete<std::string>::operator()[abi:ne180100](v11);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v12 = (std::string *)operator new();
    v13 = v12;
    v14 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    v16 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v13;
    if (v16)
      std::default_delete<std::string>::operator()[abi:ne180100](v16);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v17 = operator new();
    v18 = sirinluexternal::UUID::UUID(v17, *((const sirinluexternal::UUID **)a2 + 1));
    v19 = *v4;
    *v4 = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 3);
  v21 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 4);
  while (v20 != v21)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v5, *v20++);
  v22 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 7);
  v23 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 8);
  while (v22 != v23)
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>(v6, *v22++);
  if (*((_QWORD *)a2 + 6))
  {
    v24 = (sirinluexternal::RequestID *)operator new();
    v25 = sirinluexternal::RequestID::RequestID(v24, *((const sirinluexternal::RequestID **)a2 + 6));
    v26 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  return this;
}

uint64_t sirinluinternalssu::SSURequest::operator=(uint64_t a1, const sirinluinternalssu::SSURequest *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if ((const sirinluinternalssu::SSURequest *)a1 != a2)
  {
    sirinluinternalssu::SSURequest::SSURequest((sirinluinternalssu::SSURequest *)v9, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v3;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v6 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v14;
    v13 = v5;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalssu::SSURequest::~SSURequest((sirinluinternalssu::SSURequest *)v9);
  }
  return a1;
}

_QWORD *sirinluinternalssu::swap(_QWORD *this, sirinluinternalssu::SSURequest *a2, sirinluinternalssu::SSURequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  return this;
}

uint64_t sirinluinternalssu::SSURequest::SSURequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = &off_1E7BB1400;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return a1;
}

uint64_t sirinluinternalssu::SSURequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    sirinluinternalssu::SSURequest::SSURequest((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v3;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v6 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v14;
    v13 = v5;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalssu::SSURequest::~SSURequest((sirinluinternalssu::SSURequest *)v9);
  }
  return a1;
}

uint64_t sirinluinternalssu::SSURequest::operator==(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v4 = (unsigned __int8 *)a1[10];
  v5 = *(unsigned __int8 ***)(a2 + 80);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 80);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (unsigned __int8 *)a1[2];
  v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a2 + 16);
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  v18 = a1[1];
  v19 = *(_QWORD *)(a2 + 8);
  if (!v18)
  {
    if (!v19)
      goto LABEL_42;
    return 0;
  }
  if (!v19 || !sirinluexternal::UUID::operator==(v18, v19))
    return 0;
LABEL_42:
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 3, *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    result = PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(a1 + 7, *(uint64_t **)(a2 + 56), *(_QWORD *)(a2 + 64));
    if ((_DWORD)result)
    {
      v21 = a1[6];
      v22 = *(_QWORD *)(a2 + 48);
      result = (v21 | v22) == 0;
      if (v21)
      {
        if (v22)
          return sirinluexternal::RequestID::operator==(a1[6], v22);
      }
    }
  }
  return result;
}

unint64_t sirinluinternalssu::SSURequest::hash_value(sirinluinternalssu::SSURequest *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sirinluinternal::MatchingSpan **v11;
  sirinluinternal::MatchingSpan **v12;
  uint64_t v13;
  sirinluinternal::MatchingSpan *v14;
  sirinluexternal::EntityCandidate **v15;
  sirinluexternal::EntityCandidate **v16;
  uint64_t v17;
  sirinluexternal::EntityCandidate *v18;
  unint64_t v19;

  v2 = *((_QWORD *)this + 10);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 1);
  if (!v6)
  {
    v10 = 0;
    goto LABEL_17;
  }
  if ((*(_BYTE *)(v6 + 28) & 1) == 0)
  {
    v7 = 0;
    if ((*(_BYTE *)(v6 + 28) & 2) != 0)
      goto LABEL_10;
LABEL_14:
    v8 = 0;
    if ((*(_BYTE *)(v6 + 28) & 4) != 0)
      goto LABEL_11;
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 28) & 2) == 0)
    goto LABEL_14;
LABEL_10:
  v8 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v6 + 28) & 4) == 0)
    goto LABEL_15;
LABEL_11:
  v9 = *(int *)(v6 + 24);
LABEL_16:
  v10 = v8 ^ v7 ^ v9;
LABEL_17:
  v11 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 3);
  v12 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 4);
  if (v11 == v12)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  v15 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 7);
  v16 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 8);
  if (v15 == v16)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = *v15++;
      v17 ^= sirinluexternal::EntityCandidate::hash_value(v18);
    }
    while (v15 != v16);
  }
  v19 = *((_QWORD *)this + 6);
  if (v19)
    v19 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v19);
  return v5 ^ v3 ^ v19 ^ v10 ^ v13 ^ v17;
}

_QWORD *sirinluinternalssu::SSURequest::makeAsrId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalssu::SSURequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::UserStatedTask::~UserStatedTask(sirinluexternal::UserStatedTask *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB1450;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB1450;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BB1450;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserStatedTask::readFrom(sirinluexternal::UserStatedTask *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserStatedTask::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluexternal::UserStatedTask::formatText(sirinluexternal::UserStatedTask *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "task");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserStatedTask::UserStatedTask(_QWORD *this)
{
  *this = &off_1E7BB1450;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB1450;
  this[1] = 0;
  return this;
}

sirinluexternal::UserStatedTask *sirinluexternal::UserStatedTask::UserStatedTask(sirinluexternal::UserStatedTask *this, const sirinluexternal::SemVer ***a2)
{
  sirinluexternal::UsoGraph *v4;
  sirinluexternal::UsoGraph *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BB1450;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluexternal::UsoGraph *)operator new();
    v5 = sirinluexternal::UsoGraph::UsoGraph(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluexternal::UserStatedTask::operator=(uint64_t a1, const sirinluexternal::SemVer ***a2)
{
  uint64_t v3;
  void (**v5)(sirinluexternal::UserStatedTask *__hidden);
  uint64_t v6;

  if ((const sirinluexternal::SemVer ***)a1 != a2)
  {
    sirinluexternal::UserStatedTask::UserStatedTask((sirinluexternal::UserStatedTask *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BB1450;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserStatedTask *a2, sirinluexternal::UserStatedTask *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternal::UserStatedTask::UserStatedTask(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB1450;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BB1450;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternal::UserStatedTask::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BB1450;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserStatedTask::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluexternal::UsoGraph::operator==((_QWORD *)v2, (_QWORD *)v3);
}

sirinluexternal::UsoGraph *sirinluexternal::UserStatedTask::hash_value(sirinluexternal::UserStatedTask *this)
{
  sirinluexternal::UsoGraph *result;

  result = (sirinluexternal::UsoGraph *)*((_QWORD *)this + 1);
  if (result)
    return (sirinluexternal::UsoGraph *)sirinluexternal::UsoGraph::hash_value(result);
  return result;
}

_QWORD *sirinluexternal::UserStatedTask::makeTask(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALNLV4_PARSERNLv4ParserRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_45;
        goto LABEL_53;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2))
          goto LABEL_53;
        goto LABEL_45;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_53;
        }
        goto LABEL_45;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_53;
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_53;
        goto LABEL_45;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_51:
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_46;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_45:
          PBReaderRecallMark();

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_53:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

void sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext(sirinluexternalnlu_router::NLRouterTurnContext *this)
{
  sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BB14A0;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::readFrom(sirinluexternalnlu_router::NLRouterTurnContext *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 56);
  v9 = (uint64_t **)((char *)this + 80);
  v10 = (_QWORD *)((char *)this + 32);
  v11 = (_QWORD *)((char *)this + 8);
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v17 = *(_BYTE *)(v12 + v2);
      v15 |= (unint64_t)(v17 & 0x7F) << v13;
      if ((v17 & 0x80) == 0)
        break;
      v13 += 7;
      v2 = v16;
      v18 = v14++ > 8;
      if (v18)
        goto LABEL_20;
    }
LABEL_22:
    if ((v15 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v15 >> 3))
    {
      case 1u:
        PB::PtrVector<sirinluexternal::Task>::emplace_back<>(v11);
        v24 = *((_QWORD *)this + 2);
        break;
      case 2u:
        PB::PtrVector<sirinluexternal::Task>::emplace_back<>(v10);
        v24 = *((_QWORD *)this + 5);
        break;
      case 3u:
        PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>(v9);
        v24 = *((_QWORD *)this + 11);
        break;
      case 4u:
        PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>(v8);
        v24 = *((_QWORD *)this + 8);
        break;
      default:
        goto LABEL_20;
    }
    v25 = *(_QWORD *)(v24 - 8);
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v25 + 16))(v25, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_31:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v19 = 0;
  v20 = 0;
  v15 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v21 = v2 + 1;
    v22 = *(_BYTE *)(v12 + v2);
    *((_QWORD *)a2 + 1) = v21;
    v15 |= (unint64_t)(v22 & 0x7F) << v19;
    if ((v22 & 0x80) == 0)
      goto LABEL_22;
    v19 += 7;
    v2 = v21;
    v18 = v20++ > 8;
  }
  while (!v18);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_31;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base **v10;
  const PB::Base **v11;
  const PB::Base *v12;
  const PB::Base **v13;
  const PB::Base **v14;
  const PB::Base *v15;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base ***)(this + 8);
  v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = (const PB::Base **)v3[4];
  v8 = (const PB::Base **)v3[5];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = (const PB::Base **)v3[10];
  v11 = (const PB::Base **)v3[11];
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  v14 = (const PB::Base **)v3[7];
  v13 = (const PB::Base **)v3[8];
  while (v14 != v13)
  {
    v15 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::formatText(sirinluexternalnlu_router::NLRouterTurnContext *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "active_tasks");
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "executed_tasks");
  }
  v11 = (uint64_t *)*((_QWORD *)this + 7);
  v12 = (uint64_t *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "salient_entities");
  }
  v14 = (uint64_t *)*((_QWORD *)this + 10);
  v15 = (uint64_t *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "system_dialog_acts");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(sirinluexternalnlu_router::NLRouterTurnContext *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB14A0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB14A0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

sirinluexternalnlu_router::NLRouterTurnContext *sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(sirinluexternalnlu_router::NLRouterTurnContext *this, const sirinluexternalnlu_router::NLRouterTurnContext *a2)
{
  sirinluexternal::Task ***v4;
  sirinluexternal::EntityCandidate ***v5;
  const sirinluexternal::Task **v6;
  const sirinluexternal::Task **v7;
  const sirinluexternal::Task **v8;
  const sirinluexternal::Task **i;
  const sirinluexternal::SystemDialogAct **v10;
  const sirinluexternal::SystemDialogAct **j;
  const sirinluexternal::EntityCandidate **v12;
  const sirinluexternal::EntityCandidate **v13;

  *(_QWORD *)this = &off_1E7BB14A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::Task ***)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (sirinluexternal::EntityCandidate ***)((char *)this + 56);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v6 = (const sirinluexternal::Task **)*((_QWORD *)a2 + 1);
  v7 = (const sirinluexternal::Task **)*((_QWORD *)a2 + 2);
  while (v6 != v7)
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>(v4, *v6++);
  v8 = (const sirinluexternal::Task **)*((_QWORD *)a2 + 4);
  for (i = (const sirinluexternal::Task **)*((_QWORD *)a2 + 5); v8 != i; ++v8)
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>((sirinluexternal::Task ***)this + 4, *v8);
  v10 = (const sirinluexternal::SystemDialogAct **)*((_QWORD *)a2 + 10);
  for (j = (const sirinluexternal::SystemDialogAct **)*((_QWORD *)a2 + 11); v10 != j; ++v10)
    PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>((sirinluexternal::SystemDialogAct ***)this + 10, *v10);
  v13 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 7);
  v12 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 8);
  while (v13 != v12)
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>(v5, *v13++);
  return this;
}

const sirinluexternalnlu_router::NLRouterTurnContext *sirinluexternalnlu_router::NLRouterTurnContext::operator=(const sirinluexternalnlu_router::NLRouterTurnContext *a1, const sirinluexternalnlu_router::NLRouterTurnContext *a2)
{
  sirinluexternalnlu_router::NLRouterTurnContext *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext((sirinluexternalnlu_router::NLRouterTurnContext *)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::NLRouterTurnContext *)v5, v3);
    sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext((sirinluexternalnlu_router::NLRouterTurnContext *)v5);
  }
  return a1;
}

_QWORD *sirinluexternalnlu_router::swap(_QWORD *this, sirinluexternalnlu_router::NLRouterTurnContext *a2, sirinluexternalnlu_router::NLRouterTurnContext *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v9;
  v10 = this[11];
  this[11] = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = this[12];
  this[12] = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v11;
  v12 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;

  *(_QWORD *)a1 = &off_1E7BB14A0;
  v4 = (_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 8));
  *v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return a1;
}

_QWORD *sirinluexternalnlu_router::NLRouterTurnContext::operator=(_QWORD *a1, uint64_t a2)
{
  sirinluexternalnlu_router::NLRouterTurnContext *v3;
  _BYTE v5[104];

  if (a1 != (_QWORD *)a2)
  {
    sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext((uint64_t)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::NLRouterTurnContext *)v5, v3);
    sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext((sirinluexternalnlu_router::NLRouterTurnContext *)v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::operator==(uint64_t *a1, uint64_t a2)
{
  if (PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 1, *(_QWORD ***)(a2 + 8), *(_QWORD *)(a2 + 16))
    && PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 4, *(_QWORD ***)(a2 + 32), *(_QWORD *)(a2 + 40))
    && PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(a1 + 10, *(_QWORD ***)(a2 + 80), *(_QWORD *)(a2 + 88)))
  {
    return PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(a1 + 7, *(uint64_t **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    return 0;
  }
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::hash_value(sirinluexternalnlu_router::NLRouterTurnContext *this)
{
  sirinluexternal::Task **v2;
  sirinluexternal::Task **v3;
  uint64_t v4;
  sirinluexternal::Task *v5;
  sirinluexternal::Task **v6;
  sirinluexternal::Task **v7;
  uint64_t v8;
  sirinluexternal::Task *v9;
  sirinluexternal::SystemDialogAct **v10;
  sirinluexternal::SystemDialogAct **v11;
  uint64_t v12;
  sirinluexternal::SystemDialogAct *v13;
  sirinluexternal::EntityCandidate **v14;
  sirinluexternal::EntityCandidate **v15;
  uint64_t v16;
  sirinluexternal::EntityCandidate *v17;

  v2 = (sirinluexternal::Task **)*((_QWORD *)this + 1);
  v3 = (sirinluexternal::Task **)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= sirinluexternal::Task::hash_value(v5);
    }
    while (v2 != v3);
  }
  v6 = (sirinluexternal::Task **)*((_QWORD *)this + 4);
  v7 = (sirinluexternal::Task **)*((_QWORD *)this + 5);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluexternal::Task::hash_value(v9);
    }
    while (v6 != v7);
  }
  v10 = (sirinluexternal::SystemDialogAct **)*((_QWORD *)this + 10);
  v11 = (sirinluexternal::SystemDialogAct **)*((_QWORD *)this + 11);
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *v10++;
      v12 ^= sirinluexternal::SystemDialogAct::hash_value(v13);
    }
    while (v10 != v11);
  }
  v15 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 7);
  v14 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 8);
  if (v15 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = *v15++;
      v16 ^= sirinluexternal::EntityCandidate::hash_value(v17);
    }
    while (v15 != v14);
  }
  return v8 ^ v4 ^ v12 ^ v16;
}

void sirinluexternal::UserDialogAct::~UserDialogAct(sirinluexternal::UserDialogAct *this)
{
  sirinluexternal::UserDialogAct::~UserDialogAct(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BB14F0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserDialogAct::readFrom(sirinluexternal::UserDialogAct *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 3u:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BB05D8;
        v21 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BB0FF0;
        v23 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 6);
        }
        break;
      case 5u:
      case 0xBu:
        goto LABEL_19;
      case 6u:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BAE508;
        v24 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 4);
        }
        break;
      case 7u:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BB1ED8;
        v25 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = v20;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v20 = *((_QWORD *)this + 10);
        }
        break;
      case 8u:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BAFB30;
        v26 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v20 = *((_QWORD *)this + 2);
        }
        break;
      case 9u:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BB0588;
        v27 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v20;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v20 = *((_QWORD *)this + 9);
        }
        break;
      case 0xAu:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BB1698;
        v28 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v20;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v20 = *((_QWORD *)this + 8);
        }
        break;
      case 0xCu:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0678;
        *(_DWORD *)(v20 + 68) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_QWORD *)(v20 + 56) = 0;
        v29 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v20;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v20 = *((_QWORD *)this + 5);
        }
        break;
      case 0xDu:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB1450;
        *(_QWORD *)(v20 + 8) = 0;
        v30 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v20;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v20 = *((_QWORD *)this + 7);
        }
        break;
      case 0xEu:
        v20 = operator new();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = &off_1E7BAE378;
        v31 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v20;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v20 = *((_QWORD *)this + 11);
        }
        break;
      default:
        if ((v11 >> 3) != 101)
          goto LABEL_19;
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAEF58;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 40) = 0;
        v22 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *((_QWORD *)this + 3);
        }
        break;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_49:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_49;
  return result;
}

uint64_t sirinluexternal::UserDialogAct::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[6];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[4];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[10];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[2];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)v3[9];
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  v10 = (const PB::Base *)v3[8];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[5];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[7];
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12);
  v13 = (const PB::Base *)v3[11];
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13);
  v14 = (const PB::Base *)v3[3];
  if (v14)
    return PB::Writer::writeSubmessage(a2, v14);
  return this;
}

uint64_t sirinluexternal::UserDialogAct::formatText(sirinluexternal::UserDialogAct *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accepted");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "acknowledged");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "alignment");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "cancelled");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "delegated");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "rejected");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "user_stated_task");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "wanted_to_pause");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "wanted_to_proceed");
  v14 = *((_QWORD *)this + 10);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "wanted_to_repeat");
  v15 = *((_QWORD *)this + 11);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "wanted_to_undo");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::UserDialogAct::UserDialogAct(sirinluexternal::UserDialogAct *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB14F0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB14F0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

sirinluexternal::UserDialogAct *sirinluexternal::UserDialogAct::UserDialogAct(sirinluexternal::UserDialogAct *this, const sirinluexternal::UserDialogAct *a2)
{
  sirinluexternal::UserAccepted **v4;
  sirinluexternal::UserAccepted *v5;
  sirinluexternal::UserAccepted *v6;
  sirinluexternal::UserAccepted *v7;
  sirinluexternal::UserRejected *v8;
  sirinluexternal::UserRejected *v9;
  uint64_t v10;
  sirinluexternal::UserCancelled *v11;
  sirinluexternal::UserCancelled *v12;
  uint64_t v13;
  sirinluexternal::UserWantedToRepeat *v14;
  sirinluexternal::UserWantedToRepeat *v15;
  uint64_t v16;
  sirinluexternal::UserAcknowledged *v17;
  sirinluexternal::UserAcknowledged *v18;
  uint64_t v19;
  sirinluexternal::UserWantedToProceed *v20;
  sirinluexternal::UserWantedToProceed *v21;
  uint64_t v22;
  sirinluexternal::UserWantedToPause *v23;
  sirinluexternal::UserWantedToPause *v24;
  uint64_t v25;
  sirinluexternal::DelegatedUserDialogAct *v26;
  sirinluexternal::DelegatedUserDialogAct *v27;
  uint64_t v28;
  sirinluexternal::UserStatedTask *v29;
  sirinluexternal::UserStatedTask *v30;
  uint64_t v31;
  sirinluexternal::UserWantedToUndo *v32;
  sirinluexternal::UserWantedToUndo *v33;
  uint64_t v34;
  sirinluexternal::UtteranceAlignment *v35;
  sirinluexternal::UtteranceAlignment *v36;
  uint64_t v37;

  *(_QWORD *)this = &off_1E7BB14F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::UserAccepted **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (sirinluexternal::UserAccepted *)operator new();
    v6 = sirinluexternal::UserAccepted::UserAccepted(v5, *((const sirinluexternal::UserAccepted **)a2 + 1));
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(sirinluexternal::UserAccepted *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v8 = (sirinluexternal::UserRejected *)operator new();
    v9 = sirinluexternal::UserRejected::UserRejected(v8, *((const sirinluexternal::UserRejected **)a2 + 6));
    v10 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v11 = (sirinluexternal::UserCancelled *)operator new();
    v12 = sirinluexternal::UserCancelled::UserCancelled(v11, *((const sirinluexternal::UserCancelled **)a2 + 4));
    v13 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 10))
  {
    v14 = (sirinluexternal::UserWantedToRepeat *)operator new();
    v15 = sirinluexternal::UserWantedToRepeat::UserWantedToRepeat(v14, *((const sirinluexternal::UserWantedToRepeat **)a2 + 10));
    v16 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v17 = (sirinluexternal::UserAcknowledged *)operator new();
    v18 = sirinluexternal::UserAcknowledged::UserAcknowledged(v17, *((const sirinluexternal::UserAcknowledged **)a2 + 2));
    v19 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v20 = (sirinluexternal::UserWantedToProceed *)operator new();
    v21 = sirinluexternal::UserWantedToProceed::UserWantedToProceed(v20, *((const sirinluexternal::UserWantedToProceed **)a2 + 9));
    v22 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v23 = (sirinluexternal::UserWantedToPause *)operator new();
    v24 = sirinluexternal::UserWantedToPause::UserWantedToPause(v23, *((const sirinluexternal::UserWantedToPause **)a2 + 8));
    v25 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v26 = (sirinluexternal::DelegatedUserDialogAct *)operator new();
    v27 = sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(v26, *((const sirinluexternal::DelegatedUserDialogAct **)a2 + 5));
    v28 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v29 = (sirinluexternal::UserStatedTask *)operator new();
    v30 = sirinluexternal::UserStatedTask::UserStatedTask(v29, *((const sirinluexternal::SemVer ****)a2 + 7));
    v31 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v30;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  if (*((_QWORD *)a2 + 11))
  {
    v32 = (sirinluexternal::UserWantedToUndo *)operator new();
    v33 = sirinluexternal::UserWantedToUndo::UserWantedToUndo(v32, *((const sirinluexternal::UserWantedToUndo **)a2 + 11));
    v34 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v33;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v35 = (sirinluexternal::UtteranceAlignment *)operator new();
    v36 = sirinluexternal::UtteranceAlignment::UtteranceAlignment(v35, *((const sirinluexternal::UtteranceAlignment **)a2 + 3));
    v37 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v36;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::operator=(uint64_t a1, const sirinluexternal::UserDialogAct *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if ((const sirinluexternal::UserDialogAct *)a1 != a2)
  {
    sirinluexternal::UserDialogAct::UserDialogAct((sirinluexternal::UserDialogAct *)&v10, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v6;
    v7 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v16;
    v16 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v8;
    sirinluexternal::UserDialogAct::~UserDialogAct((sirinluexternal::UserDialogAct *)&v10);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::UserDialogAct *a2, sirinluexternal::UserDialogAct *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = this[11];
  this[11] = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  return this;
}

uint64_t sirinluexternal::UserDialogAct::UserDialogAct(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_1E7BB14F0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v4 = a2[1];
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a2[6];
  a2[6] = 0;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a2[4];
  a2[4] = 0;
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a2[10];
  a2[10] = 0;
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a2[2];
  a2[2] = 0;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a2[9];
  a2[9] = 0;
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a2[8];
  a2[8] = 0;
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a2[5];
  a2[5] = 0;
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = a2[7];
  a2[7] = 0;
  v21 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = a2[11];
  a2[11] = 0;
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = a2[3];
  a2[3] = 0;
  v25 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

uint64_t sirinluexternal::UserDialogAct::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternal::UserDialogAct::UserDialogAct((uint64_t)&v10, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v6;
    v7 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v16;
    v16 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v8;
    sirinluexternal::UserDialogAct::~UserDialogAct((sirinluexternal::UserDialogAct *)&v10);
  }
  return a1;
}

BOOL sirinluexternal::UserDialogAct::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 result;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5 || (sirinluexternal::UserAccepted::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[6];
  v7 = a2[6];
  if (v6)
  {
    if (!v7 || (sirinluexternal::UserRejected::operator==(v6, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[4];
  v9 = a2[4];
  if (v8)
  {
    if (!v9 || (sirinluexternal::UserCancelled::operator==(v8, v9) & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = a1[10];
  v11 = a2[10];
  if (v10)
  {
    if (!v11 || (sirinluexternal::UserWantedToRepeat::operator==(v10, v11) & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = a1[2];
  v13 = a2[2];
  if (v12)
  {
    if (!v13 || (sirinluexternal::UserAcknowledged::operator==(v12, v13) & 1) == 0)
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = a1[9];
  v15 = a2[9];
  if (v14)
  {
    if (!v15 || (sirinluexternal::UserWantedToProceed::operator==(v14, v15) & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = a1[8];
  v17 = a2[8];
  if (v16)
  {
    if (!v17 || (sirinluexternal::UserWantedToPause::operator==(v16, v17) & 1) == 0)
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = a1[5];
  v19 = a2[5];
  if (v18)
  {
    if (!v19 || !sirinluexternal::DelegatedUserDialogAct::operator==(v18, v19))
      return 0;
  }
  else if (v19)
  {
    return 0;
  }
  v20 = a1[7];
  v21 = a2[7];
  if (v20)
  {
    if (!v21 || (sirinluexternal::UserStatedTask::operator==(v20, v21) & 1) == 0)
      return 0;
  }
  else if (v21)
  {
    return 0;
  }
  v22 = a1[11];
  v23 = a2[11];
  if (!v22)
  {
    if (!v23)
      goto LABEL_49;
    return 0;
  }
  if (!v23 || (sirinluexternal::UserWantedToUndo::operator==(v22, v23) & 1) == 0)
    return 0;
LABEL_49:
  v24 = a1[3];
  v25 = a2[3];
  result = (v24 | v25) == 0;
  if (v24)
  {
    if (v25)
      return sirinluexternal::UtteranceAlignment::operator==(a1[3], v25);
  }
  return result;
}

unint64_t sirinluexternal::UserDialogAct::hash_value(sirinluexternal::UserDialogAct *this)
{
  sirinluexternal::UserAccepted *v2;
  unint64_t v3;
  sirinluexternal::UserRejected *v4;
  unint64_t v5;
  sirinluexternal::UserCancelled *v6;
  unint64_t v7;
  sirinluexternal::UserWantedToRepeat *v8;
  unint64_t v9;
  sirinluexternal::UserAcknowledged *v10;
  unint64_t v11;
  sirinluexternal::UserWantedToProceed *v12;
  unint64_t v13;
  sirinluexternal::UserWantedToPause *v14;
  unint64_t v15;
  sirinluexternal::DelegatedUserDialogAct *v16;
  unint64_t v17;
  uint64_t v18;
  sirinluexternal::UsoGraph *v19;
  uint64_t v20;
  sirinluexternal::UserWantedToUndo *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;

  v2 = (sirinluexternal::UserAccepted *)*((_QWORD *)this + 1);
  if (v2)
    v3 = sirinluexternal::UserAccepted::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluexternal::UserRejected *)*((_QWORD *)this + 6);
  v25 = v3;
  if (v4)
    v5 = sirinluexternal::UserRejected::hash_value(v4);
  else
    v5 = 0;
  v6 = (sirinluexternal::UserCancelled *)*((_QWORD *)this + 4);
  if (v6)
    v7 = sirinluexternal::UserCancelled::hash_value(v6);
  else
    v7 = 0;
  v8 = (sirinluexternal::UserWantedToRepeat *)*((_QWORD *)this + 10);
  if (v8)
    v9 = sirinluexternal::UserWantedToRepeat::hash_value(v8);
  else
    v9 = 0;
  v10 = (sirinluexternal::UserAcknowledged *)*((_QWORD *)this + 2);
  if (v10)
    v11 = sirinluexternal::UserAcknowledged::hash_value(v10);
  else
    v11 = 0;
  v12 = (sirinluexternal::UserWantedToProceed *)*((_QWORD *)this + 9);
  if (v12)
    v13 = sirinluexternal::UserWantedToProceed::hash_value(v12);
  else
    v13 = 0;
  v14 = (sirinluexternal::UserWantedToPause *)*((_QWORD *)this + 8);
  if (v14)
    v15 = sirinluexternal::UserWantedToPause::hash_value(v14);
  else
    v15 = 0;
  v16 = (sirinluexternal::DelegatedUserDialogAct *)*((_QWORD *)this + 5);
  if (v16)
    v17 = sirinluexternal::DelegatedUserDialogAct::hash_value(v16);
  else
    v17 = 0;
  v18 = *((_QWORD *)this + 7);
  if (v18 && (v19 = *(sirinluexternal::UsoGraph **)(v18 + 8)) != 0)
    v20 = sirinluexternal::UsoGraph::hash_value(v19);
  else
    v20 = 0;
  v21 = (sirinluexternal::UserWantedToUndo *)*((_QWORD *)this + 11);
  if (v21)
    v22 = sirinluexternal::UserWantedToUndo::hash_value(v21);
  else
    v22 = 0;
  v23 = *((_QWORD *)this + 3);
  if (v23)
    v23 = sirinluexternal::UtteranceAlignment::hash_value((sirinluexternal::UtteranceAlignment *)v23);
  return v5 ^ v25 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v20 ^ v22 ^ v23;
}

_QWORD *sirinluexternal::UserDialogAct::makeAccepted(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB05D8;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeRejected(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB0FF0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeCancelled(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BAE508;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeWantedToRepeat(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[10])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB1ED8;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeAcknowledged(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BAFB30;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeWantedToProceed(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[9])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB0588;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeWantedToPause(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB1698;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeDelegated(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0678;
    *(_DWORD *)(v2 + 68) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeUserStatedTask(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB1450;
    v2[1] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeWantedToUndo(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[11])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BAE378;
    this = (_QWORD *)v1[11];
    v1[11] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserDialogAct::makeAlignment(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAEF58;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternal::MatchingSpan::~MatchingSpan(sirinluinternal::MatchingSpan *this)
{
  sirinluinternal::MatchingSpan::~MatchingSpan(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E7BB1540;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

BOOL sirinluinternal::MatchingSpan::readFrom(sirinluinternal::MatchingSpan *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  char *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  unint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  char v92;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v56 = v10++ > 8;
      if (v56)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v18 = (_QWORD *)operator new();
        v18[1] = 0;
        v18[2] = 0;
        *v18 = 0;
        v19 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v18;
        if (v19)
          goto LABEL_93;
        goto LABEL_94;
      case 2u:
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v19 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v19)
          goto LABEL_93;
        goto LABEL_94;
      case 3u:
        *((_BYTE *)this + 80) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              goto LABEL_124;
            v24 += 7;
            v21 = v27;
            v56 = v25++ > 8;
          }
          while (!v56);
LABEL_101:
          LODWORD(v26) = 0;
          goto LABEL_124;
        }
        v63 = 0;
        v64 = 0;
        v26 = 0;
        if (v22 <= v21)
          v22 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v65 = v21 + 1;
            v66 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v65;
            v26 |= (unint64_t)(v66 & 0x7F) << v63;
            if (v66 < 0)
            {
              v63 += 7;
              v21 = v65;
              v56 = v64++ > 8;
              if (v56)
                goto LABEL_101;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v26) = 0;
          }
          break;
        }
LABEL_124:
        *((_DWORD *)this + 19) = v26;
        break;
      case 4u:
        *((_BYTE *)this + 80) |= 1u;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_127;
            v32 += 7;
            v29 = v35;
            v56 = v33++ > 8;
          }
          while (!v56);
LABEL_108:
          LODWORD(v34) = 0;
          goto LABEL_127;
        }
        v67 = 0;
        v68 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v69 = v29 + 1;
            v70 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v69;
            v34 |= (unint64_t)(v70 & 0x7F) << v67;
            if (v70 < 0)
            {
              v67 += 7;
              v29 = v69;
              v56 = v68++ > 8;
              if (v56)
                goto LABEL_108;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_127:
        *((_DWORD *)this + 18) = v34;
        break;
      case 5u:
        v37 = operator new();
        *(_QWORD *)v37 = &off_1E7BB2398;
        *(_OWORD *)(v37 + 8) = 0u;
        *(_OWORD *)(v37 + 24) = 0u;
        *(_OWORD *)(v37 + 40) = 0u;
        *(_OWORD *)(v37 + 56) = 0u;
        *(_OWORD *)(v37 + 72) = 0u;
        *(_OWORD *)(v37 + 88) = 0u;
        *(_OWORD *)(v37 + 104) = 0u;
        *(_OWORD *)(v37 + 120) = 0u;
        v38 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v37;
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          v37 = *((_QWORD *)this + 8);
        }
        goto LABEL_89;
      case 6u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 2);
            while (1)
            {
              v40 = *((_QWORD *)this + 3);
              if ((unint64_t)v39 >= v40)
              {
                v41 = (char *)*((_QWORD *)this + 1);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_163;
                v44 = v40 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v45);
                  v41 = (char *)*((_QWORD *)this + 1);
                  v39 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v48 = (char *)(v47 + 1);
                while (v39 != v41)
                {
                  v49 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v49;
                }
                *((_QWORD *)this + 1) = v47;
                *((_QWORD *)this + 2) = v48;
                *((_QWORD *)this + 3) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
                v39 = v48;
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v39 += 4;
              }
              *((_QWORD *)this + 2) = v39;
              v51 = *((_QWORD *)a2 + 1);
              v50 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              v56 = v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v50;
              if (v56)
                break;
              while (1)
              {
                v58 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v60 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v60 & 0x7F) << v53;
                if ((v60 & 0x80) == 0)
                  break;
                v53 += 7;
                v51 = v58;
                v56 = v54++ > 8;
                if (v56)
                  goto LABEL_81;
              }
LABEL_84:
              *((_DWORD *)v39 - 1) = v55;
              if (v58 >= v50 || *((_BYTE *)a2 + 24))
                goto LABEL_91;
            }
            if (v50 <= v51)
              v57 = *((_QWORD *)a2 + 1);
            else
              v57 = *((_QWORD *)a2 + 2);
            while (v57 != v51)
            {
              v58 = v51 + 1;
              v59 = *(_BYTE *)(v52 + v51);
              *((_QWORD *)a2 + 1) = v58;
              v55 |= (unint64_t)(v59 & 0x7F) << v53;
              if ((v59 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_84;
              }
              v53 += 7;
              v51 = v58;
              v56 = v54++ > 8;
              if (v56)
              {
LABEL_81:
                LODWORD(v55) = 0;
                goto LABEL_84;
              }
            }
            *((_BYTE *)a2 + 24) = 1;
            *((_DWORD *)v39 - 1) = 0;
          }
LABEL_91:
          PB::Reader::recallMark();
        }
        else
        {
          v72 = (char *)*((_QWORD *)this + 2);
          v71 = *((_QWORD *)this + 3);
          if ((unint64_t)v72 >= v71)
          {
            v74 = (char *)*((_QWORD *)this + 1);
            v75 = (v72 - v74) >> 2;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 62)
LABEL_163:
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v77 = v71 - (_QWORD)v74;
            if (v77 >> 1 > v76)
              v76 = v77 >> 1;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
              v78 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v78);
              v74 = (char *)*((_QWORD *)this + 1);
              v72 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v79 = 0;
            }
            v80 = (_DWORD *)(v78 + 4 * v75);
            *v80 = 0;
            v73 = v80 + 1;
            while (v72 != v74)
            {
              v81 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *--v80 = v81;
            }
            *((_QWORD *)this + 1) = v80;
            *((_QWORD *)this + 2) = v73;
            *((_QWORD *)this + 3) = v78 + 4 * v79;
            if (v74)
              operator delete(v74);
          }
          else
          {
            *(_DWORD *)v72 = 0;
            v73 = v72 + 4;
          }
          *((_QWORD *)this + 2) = v73;
          v82 = *((_QWORD *)a2 + 1);
          v83 = *((_QWORD *)a2 + 2);
          v84 = *(_QWORD *)a2;
          v85 = 0;
          v86 = 0;
          if (v82 > 0xFFFFFFFFFFFFFFF5 || v82 + 10 > v83)
          {
            v90 = 0;
            if (v83 <= v82)
              v83 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v83 == v82)
              {
                LODWORD(v90) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_153;
              }
              v88 = v82 + 1;
              v89 = *(_BYTE *)(v84 + v82);
              *((_QWORD *)a2 + 1) = v88;
              v90 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0)
                break;
              v85 += 7;
              v82 = v88;
              v56 = v86++ > 8;
              if (v56)
              {
LABEL_149:
                LODWORD(v90) = 0;
                goto LABEL_153;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v90) = 0;
          }
          else
          {
            v90 = 0;
            while (1)
            {
              v91 = v82 + 1;
              *((_QWORD *)a2 + 1) = v82 + 1;
              v92 = *(_BYTE *)(v84 + v82);
              v90 |= (unint64_t)(v92 & 0x7F) << v85;
              if ((v92 & 0x80) == 0)
                break;
              v85 += 7;
              v82 = v91;
              v56 = v86++ > 8;
              if (v56)
                goto LABEL_149;
            }
          }
LABEL_153:
          *(v73 - 1) = v90;
        }
        break;
      case 7u:
        v37 = operator new();
        *(_QWORD *)v37 = &off_1E7BAED10;
        *(_OWORD *)(v37 + 8) = 0u;
        *(_OWORD *)(v37 + 24) = 0u;
        *(_QWORD *)(v37 + 40) = 0;
        v61 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v37;
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
          v37 = *((_QWORD *)this + 5);
        }
LABEL_89:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v37 + 16))(v37, a2) & 1) != 0)
        {
          goto LABEL_91;
        }
        return 0;
      case 8u:
        v62 = (_QWORD *)operator new();
        v62[1] = 0;
        v62[2] = 0;
        *v62 = 0;
        v19 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v62;
        if (v19)
LABEL_93:
          std::default_delete<std::string>::operator()[abi:ne180100](v19);
LABEL_94:
        PB::Reader::read();
        break;
      default:
        goto LABEL_19;
    }
LABEL_154:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v14 = 0;
  v15 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v16 = v2 + 1;
    v17 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v16;
    v11 |= (unint64_t)(v17 & 0x7F) << v14;
    if ((v17 & 0x80) == 0)
      goto LABEL_21;
    v14 += 7;
    v2 = v16;
    v56 = v15++ > 8;
  }
  while (!v56);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_154;
  return 0;
}

uint64_t sirinluinternal::MatchingSpan::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  uint64_t v6;
  uint64_t v7;
  const PB::Base *v8;

  v3 = this;
  if (*(_QWORD *)(this + 48))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 32))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 80);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 80);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 64);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  while (v6 != v7)
  {
    v6 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v8 = *(const PB::Base **)(v3 + 40);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  if (*(_QWORD *)(v3 + 56))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternal::MatchingSpan::formatText(sirinluinternal::MatchingSpan *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 80) & 1) != 0)
    PB::TextFormatter::format(a2, "end_token_index");
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "internal_span_data");
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(a2, "matcher_names");
  }
  if (*((_QWORD *)this + 7))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 80) & 2) != 0)
    PB::TextFormatter::format(a2, "start_token_index");
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "uso_graph");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1540;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1540;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

sirinluinternal::MatchingSpan *sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this, const sirinluinternal::MatchingSpan *a2)
{
  _QWORD *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  sirinluexternal::UsoGraph *v18;
  sirinluexternal::UsoGraph *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  char *v33;
  void *v34;
  char *v35;
  sirinluinternal::InternalSpanData *v36;
  sirinluinternal::InternalSpanData *v37;
  uint64_t v38;
  std::string *v39;
  std::string *v40;
  __int128 *v41;
  __int128 v42;
  uint64_t v43;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BB1540;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*((_QWORD *)a2 + 6))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 6);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  v15 = *((_BYTE *)a2 + 80);
  if ((v15 & 2) != 0)
  {
    v16 = *((_DWORD *)a2 + 19);
    *((_BYTE *)this + 80) |= 2u;
    *((_DWORD *)this + 19) = v16;
    v15 = *((_BYTE *)a2 + 80);
  }
  if ((v15 & 1) != 0)
  {
    v17 = *((_DWORD *)a2 + 18);
    *((_BYTE *)this + 80) |= 1u;
    *((_DWORD *)this + 18) = v17;
  }
  if (*((_QWORD *)a2 + 8))
  {
    v18 = (sirinluexternal::UsoGraph *)operator new();
    v19 = sirinluexternal::UsoGraph::UsoGraph(v18, *((const sirinluexternal::SemVer ***)a2 + 8));
    v20 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (this != a2)
  {
    v21 = (char *)*((_QWORD *)a2 + 1);
    v22 = (_BYTE *)*((_QWORD *)a2 + 2);
    v23 = v22 - v21;
    v24 = (v22 - v21) >> 2;
    v25 = *((_QWORD *)this + 3);
    v26 = (char *)*((_QWORD *)this + 1);
    if (v24 <= (v25 - (uint64_t)v26) >> 2)
    {
      v29 = (void **)((char *)this + 16);
      v31 = (_BYTE *)*((_QWORD *)this + 2);
      v32 = (v31 - v26) >> 2;
      if (v32 < v24)
      {
        v33 = &v21[4 * v32];
        if (v31 != v26)
        {
          memmove(*((void **)this + 1), *((const void **)a2 + 1), v31 - v26);
          v26 = (char *)*v29;
        }
        v23 = v22 - v33;
        if (v22 == v33)
          goto LABEL_40;
        v34 = v26;
        v35 = v33;
        goto LABEL_39;
      }
    }
    else
    {
      if (v26)
      {
        *((_QWORD *)this + 2) = v26;
        operator delete(v26);
        v25 = 0;
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_51;
      v27 = v25 >> 1;
      if (v25 >> 1 <= v24)
        v27 = (v22 - v21) >> 2;
      v28 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v27;
      if (v28 >> 62)
LABEL_51:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
      *((_QWORD *)this + 2) = v26;
      v29 = (void **)((char *)this + 16);
      *((_QWORD *)this + 1) = v26;
      *((_QWORD *)this + 3) = &v26[4 * v30];
    }
    if (v22 == v21)
    {
LABEL_40:
      *v29 = &v26[v23];
      goto LABEL_41;
    }
    v34 = v26;
    v35 = v21;
LABEL_39:
    memmove(v34, v35, v23);
    goto LABEL_40;
  }
LABEL_41:
  if (*((_QWORD *)a2 + 5))
  {
    v36 = (sirinluinternal::InternalSpanData *)operator new();
    v37 = sirinluinternal::InternalSpanData::InternalSpanData(v36, *((const sirinluinternal::SiriVocabularySpanData ***)a2 + 5));
    v38 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v37;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v39 = (std::string *)operator new();
    v40 = v39;
    v41 = (__int128 *)*((_QWORD *)a2 + 7);
    if (*((char *)v41 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
    }
    else
    {
      v42 = *v41;
      v39->__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v42;
    }
    v43 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v40;
    if (v43)
      std::default_delete<std::string>::operator()[abi:ne180100](v43);
  }
  return this;
}

uint64_t sirinluinternal::MatchingSpan::operator=(uint64_t a1, const sirinluinternal::MatchingSpan *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if ((const sirinluinternal::MatchingSpan *)a1 != a2)
  {
    sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v11 = v5;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v13 = v7;
    v14 = v8;
    sirinluinternal::MatchingSpan::~MatchingSpan((sirinluinternal::MatchingSpan *)v10);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::MatchingSpan *a2, sirinluinternal::MatchingSpan *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  v6 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  return this;
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_1E7BB1540;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100](v15);
  return a1;
}

uint64_t sirinluinternal::MatchingSpan::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    sirinluinternal::MatchingSpan::MatchingSpan((uint64_t)v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v11 = v5;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v13 = v7;
    v14 = v8;
    sirinluinternal::MatchingSpan::~MatchingSpan((sirinluinternal::MatchingSpan *)v10);
  }
  return a1;
}

BOOL sirinluinternal::MatchingSpan::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 48);
  v5 = *(unsigned __int8 ***)(a2 + 48);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 48);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(unsigned __int8 **)(a1 + 32);
  v12 = *(unsigned __int8 ***)(a2 + 32);
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a2 + 32);
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 2) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 1) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 1) != 0)
  {
    return 0;
  }
  v18 = *(_QWORD **)(a1 + 64);
  v19 = *(_QWORD **)(a2 + 64);
  if (v18)
  {
    if (!v19 || (sirinluexternal::UsoGraph::operator==(v18, v19) & 1) == 0)
      return 0;
  }
  else if (v19)
  {
    return 0;
  }
  v21 = *(char **)(a1 + 8);
  v20 = *(char **)(a1 + 16);
  v22 = *(_DWORD **)(a2 + 8);
  if (v20 - v21 != *(_QWORD *)(a2 + 16) - (_QWORD)v22)
    return 0;
  while (v21 != v20)
  {
    if (*(_DWORD *)v21 != *v22)
      return 0;
    v21 += 4;
    ++v22;
  }
  v23 = *(_QWORD **)(a1 + 40);
  v24 = *(_QWORD **)(a2 + 40);
  if (!v23)
  {
    if (!v24)
      goto LABEL_61;
    return 0;
  }
  if (!v24 || !sirinluinternal::InternalSpanData::operator==(v23, v24))
    return 0;
LABEL_61:
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(unsigned __int8 **)(a2 + 56);
  result = (v25 | (unint64_t)v26) == 0;
  if (v25)
  {
    if (v26)
      return std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(*(unsigned __int8 **)(a1 + 56), v26);
  }
  return result;
}

unint64_t sirinluinternal::MatchingSpan::hash_value(sirinluinternal::MatchingSpan *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  uint64_t v9;
  uint64_t v10;
  sirinluinternal::InternalSpanData *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  if ((*((_BYTE *)this + 80) & 2) != 0)
  {
    v6 = *((unsigned int *)this + 19);
    if ((*((_BYTE *)this + 80) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v6 = 0;
    if ((*((_BYTE *)this + 80) & 1) != 0)
    {
LABEL_9:
      v7 = *((unsigned int *)this + 18);
      goto LABEL_12;
    }
  }
  v7 = 0;
LABEL_12:
  v8 = (sirinluexternal::UsoGraph *)*((_QWORD *)this + 8);
  if (v8)
    v9 = sirinluexternal::UsoGraph::hash_value(v8);
  else
    v9 = 0;
  v10 = PBHashBytes();
  v11 = (sirinluinternal::InternalSpanData *)*((_QWORD *)this + 5);
  if (v11)
    v12 = sirinluinternal::InternalSpanData::hash_value(v11);
  else
    v12 = 0;
  v13 = *((_QWORD *)this + 7);
  if (v13)
    v13 = std::__string_hash<char>::operator()[abi:ne180100](v13);
  return v5 ^ v3 ^ v6 ^ v7 ^ v9 ^ v12 ^ v13 ^ v10;
}

_QWORD *sirinluinternal::MatchingSpan::makeUsoGraph(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::MatchingSpan::makeInternalSpanData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAED10;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sub_1C1FD8F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1FD9094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1FD91A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FD9244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1FD9388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1FD9854(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1C1FD999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALQUERYREWRITEQRRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 40;
        goto LABEL_30;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRInteraction);
        objc_msgSend((id)a1, "addInteractions:", v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALQUERYREWRITEQRInteractionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALRewriteInteraction);
        objc_msgSend((id)a1, "addOriginalInteractions:", v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALRewriteInteractionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 4u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v17 = *(SIRINLUEXTERNALUUID **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v19;
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 24;
LABEL_30:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_40;
        goto LABEL_35;
      case 6u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark();
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

BOOL SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 8;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4ContextFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponse);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::SemVer::~SemVer(sirinluexternal::SemVer *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::SemVer::readFrom(sirinluexternal::SemVer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27 + 1;
            v46 = *(_BYTE *)(v28 + v27);
            *((_QWORD *)a2 + 1) = v45;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v27 = v45;
            v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_82:
          v3 = v45;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33 + 1;
            v50 = *(_BYTE *)(v34 + v33);
            *((_QWORD *)a2 + 1) = v49;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v33 = v49;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
LABEL_87:
          v3 = v49;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_DWORD *)this + 3) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20 + 1;
            v42 = *(_BYTE *)(v21 + v20);
            *((_QWORD *)a2 + 1) = v41;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v20 = v41;
            v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_77:
          v3 = v41;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::SemVer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 20) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::SemVer::formatText(sirinluexternal::SemVer *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "minor_version");
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "major_version");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "patch_version");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::SemVer::SemVer(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BB15B8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BB15B8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t sirinluexternal::SemVer::SemVer(uint64_t this, const sirinluexternal::SemVer *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_1E7BB15B8;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 20) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_BYTE *)(this + 20) = v3;
    *(_DWORD *)(this + 12) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v3 | 4;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t sirinluexternal::SemVer::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  void (**v5)(sirinluexternal::SemVer *__hidden);
  char v6;
  char v7;
  int v8;
  __int128 v9;
  void (**v11)(sirinluexternal::SemVer *__hidden);
  __int128 v12;

  if (a1 != a2)
  {
    v5 = &off_1E7BB15B8;
    v11 = &off_1E7BB15B8;
    HIDWORD(v12) = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 1) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
      v7 = 1;
      BYTE12(v12) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v2 = *(_DWORD *)(a2 + 12);
        v7 |= 2u;
        BYTE12(v12) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v3 = *(_DWORD *)(a2 + 16);
      BYTE12(v12) = v7 | 4;
    }
LABEL_9:
    v8 = HIDWORD(v12);
    v9 = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (_DWORD)v5;
    *(_DWORD *)(a1 + 12) = v2;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::SemVer *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB15B8;
    v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_DWORD *sirinluexternal::swap(_DWORD *this, sirinluexternal::SemVer *a2, sirinluexternal::SemVer *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return this;
}

uint64_t sirinluexternal::SemVer::SemVer(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = &off_1E7BB15B8;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 16) = a2[4];
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB15B8;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 16) = a2[4];
  return result;
}

BOOL sirinluexternal::SemVer::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 4) == 0;
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
    return (*(_BYTE *)(a2 + 20) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t sirinluexternal::SemVer::hash_value(sirinluexternal::SemVer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 20) & 4) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((unsigned int *)this + 2);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((unsigned int *)this + 3);
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3;
}

uint64_t SIRINLUEXTERNALSystemOfferedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserDialogAct *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserDialogAct);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALUserDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalsnlp_intermediate::LinearizedTensor::~LinearizedTensor(sirinluinternalsnlp_intermediate::LinearizedTensor *this)
{
  sirinluinternalsnlp_intermediate::LinearizedTensor::~LinearizedTensor(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BB1608;
  v4 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

BOOL sirinluinternalsnlp_intermediate::LinearizedTensor::readFrom(sirinluinternalsnlp_intermediate::LinearizedTensor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  int v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  char *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  std::string *v91;
  _DWORD *v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  unint64_t v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  _DWORD *v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  unint64_t v113;
  char v114;
  unint64_t v115;
  char v116;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (std::vector<std::string> *)((char *)this + 56);
    v9 = (std::allocator<std::string> *)((char *)this + 72);
    do
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v13 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_26;
          v16 += 7;
          v2 = v18;
          v40 = v17++ > 8;
          if (v40)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v40 = v12++ > 8;
        if (v40)
          goto LABEL_20;
      }
LABEL_26:
      v21 = v13 & 7;
      if (v21 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        v46 = (char *)*((_QWORD *)this + 8);
        v45 = *((_QWORD *)this + 9);
        if ((unint64_t)v46 >= v45)
        {
          v72 = 0xAAAAAAAAAAAAAAABLL * ((v46 - (char *)v8->__begin_) >> 3);
          v73 = v72 + 1;
          if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v74 > v73)
            v73 = 2 * v74;
          if (v74 >= 0x555555555555555)
            v75 = 0xAAAAAAAAAAAAAAALL;
          else
            v75 = v73;
          __v.__end_cap_.__value_ = v9;
          if (v75)
            v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v75);
          else
            v76 = 0;
          v91 = (std::string *)(v75 + 24 * v72);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v75;
          __v.__begin_ = v91;
          __v.__end_cap_.__value_ = (std::string *)(v75 + 24 * v76);
          v91->__r_.__value_.__r.__words[0] = 0;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v91 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          v47 = (_QWORD *)*((_QWORD *)this + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v46 = 0;
          *((_QWORD *)v46 + 1) = 0;
          v47 = v46 + 24;
          *((_QWORD *)v46 + 2) = 0;
        }
        *((_QWORD *)this + 8) = v47;
        PB::Reader::read();
        goto LABEL_21;
      }
      if ((_DWORD)v22 == 2)
      {
        if (v21 != 2)
        {
          v78 = (char *)*((_QWORD *)this + 2);
          v77 = *((_QWORD *)this + 3);
          if ((unint64_t)v78 >= v77)
          {
            v85 = (char *)*((_QWORD *)this + 1);
            v86 = (v78 - v85) >> 2;
            v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 62)
LABEL_206:
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v88 = v77 - (_QWORD)v85;
            if (v88 >> 1 > v87)
              v87 = v88 >> 1;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
              v89 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            if (v89)
            {
              v89 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v89);
              v85 = (char *)*((_QWORD *)this + 1);
              v78 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v90 = 0;
            }
            v105 = (_DWORD *)(v89 + 4 * v86);
            *v105 = 0;
            v71 = v105 + 1;
            while (v78 != v85)
            {
              v106 = *((_DWORD *)v78 - 1);
              v78 -= 4;
              *--v105 = v106;
            }
            *((_QWORD *)this + 1) = v105;
            *((_QWORD *)this + 2) = v71;
            *((_QWORD *)this + 3) = v89 + 4 * v90;
            if (v85)
              operator delete(v85);
          }
          else
          {
            *(_DWORD *)v78 = 0;
            v71 = v78 + 4;
          }
          *((_QWORD *)this + 2) = v71;
          v107 = *((_QWORD *)a2 + 1);
          v108 = *((_QWORD *)a2 + 2);
          v109 = *(_QWORD *)a2;
          v110 = 0;
          v111 = 0;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            v102 = 0;
            while (1)
            {
              v115 = v107 + 1;
              *((_QWORD *)a2 + 1) = v107 + 1;
              v116 = *(_BYTE *)(v109 + v107);
              v102 |= (unint64_t)(v116 & 0x7F) << v110;
              if ((v116 & 0x80) == 0)
                goto LABEL_200;
              v110 += 7;
              v107 = v115;
              v40 = v111++ > 8;
              if (v40)
                goto LABEL_196;
            }
          }
          v102 = 0;
          if (v108 <= v107)
            v108 = *((_QWORD *)a2 + 1);
          while (v108 != v107)
          {
            v113 = v107 + 1;
            v114 = *(_BYTE *)(v109 + v107);
            *((_QWORD *)a2 + 1) = v113;
            v102 |= (unint64_t)(v114 & 0x7F) << v110;
            if ((v114 & 0x80) == 0)
            {
LABEL_198:
              if (*((_BYTE *)a2 + 24))
                LODWORD(v102) = 0;
              goto LABEL_200;
            }
            v110 += 7;
            v107 = v113;
            v40 = v111++ > 8;
            if (v40)
            {
LABEL_196:
              LODWORD(v102) = 0;
              goto LABEL_200;
            }
          }
          goto LABEL_197;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
        {
          v23 = (char *)*((_QWORD *)this + 2);
          while (1)
          {
            v48 = *((_QWORD *)this + 3);
            if ((unint64_t)v23 >= v48)
            {
              v49 = (char *)*((_QWORD *)this + 1);
              v50 = (v23 - v49) >> 2;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62)
                goto LABEL_206;
              v52 = v48 - (_QWORD)v49;
              if (v52 >> 1 > v51)
                v51 = v52 >> 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                v53 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v53);
                v49 = (char *)*((_QWORD *)this + 1);
                v23 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v54 = 0;
              }
              v55 = (_DWORD *)(v53 + 4 * v50);
              *v55 = 0;
              v56 = (char *)(v55 + 1);
              while (v23 != v49)
              {
                v57 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *--v55 = v57;
              }
              *((_QWORD *)this + 1) = v55;
              *((_QWORD *)this + 2) = v56;
              *((_QWORD *)this + 3) = v53 + 4 * v54;
              if (v49)
                operator delete(v49);
              v23 = v56;
            }
            else
            {
              *(_DWORD *)v23 = 0;
              v23 += 4;
            }
            *((_QWORD *)this + 2) = v23;
            v59 = *((_QWORD *)a2 + 1);
            v58 = *((_QWORD *)a2 + 2);
            v60 = *(_QWORD *)a2;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v58)
              break;
            while (1)
            {
              v66 = v59 + 1;
              *((_QWORD *)a2 + 1) = v59 + 1;
              v68 = *(_BYTE *)(v60 + v59);
              v63 |= (unint64_t)(v68 & 0x7F) << v61;
              if ((v68 & 0x80) == 0)
                break;
              v61 += 7;
              v59 = v66;
              v40 = v62++ > 8;
              if (v40)
                goto LABEL_114;
            }
LABEL_117:
            *((_DWORD *)v23 - 1) = v63;
            if (v66 >= v58 || *((_BYTE *)a2 + 24))
              goto LABEL_133;
          }
          if (v58 <= v59)
            v65 = *((_QWORD *)a2 + 1);
          else
            v65 = *((_QWORD *)a2 + 2);
          while (v65 != v59)
          {
            v66 = v59 + 1;
            v67 = *(_BYTE *)(v60 + v59);
            *((_QWORD *)a2 + 1) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if ((v67 & 0x80) == 0)
            {
              if (*((_BYTE *)a2 + 24))
                LODWORD(v63) = 0;
              goto LABEL_117;
            }
            v61 += 7;
            v59 = v66;
            v40 = v62++ > 8;
            if (v40)
            {
LABEL_114:
              LODWORD(v63) = 0;
              goto LABEL_117;
            }
          }
LABEL_132:
          *((_BYTE *)a2 + 24) = 1;
          *((_DWORD *)v23 - 1) = 0;
        }
      }
      else
      {
        if ((_DWORD)v22 != 1)
        {
LABEL_20:
          if ((PB::Reader::skip(a2) & 1) == 0)
            return 0;
          goto LABEL_21;
        }
        if (v21 != 2)
        {
          v70 = (char *)*((_QWORD *)this + 5);
          v69 = *((_QWORD *)this + 6);
          if ((unint64_t)v70 >= v69)
          {
            v79 = (char *)*((_QWORD *)this + 4);
            v80 = (v70 - v79) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
              goto LABEL_206;
            v82 = v69 - (_QWORD)v79;
            if (v82 >> 1 > v81)
              v81 = v82 >> 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v83);
              v79 = (char *)*((_QWORD *)this + 4);
              v70 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v84 = 0;
            }
            v92 = (_DWORD *)(v83 + 4 * v80);
            *v92 = 0;
            v71 = v92 + 1;
            while (v70 != v79)
            {
              v93 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *--v92 = v93;
            }
            *((_QWORD *)this + 4) = v92;
            *((_QWORD *)this + 5) = v71;
            *((_QWORD *)this + 6) = v83 + 4 * v84;
            if (v79)
              operator delete(v79);
          }
          else
          {
            *(_DWORD *)v70 = 0;
            v71 = v70 + 4;
          }
          *((_QWORD *)this + 5) = v71;
          v94 = *((_QWORD *)a2 + 1);
          v95 = *((_QWORD *)a2 + 2);
          v96 = *(_QWORD *)a2;
          v97 = 0;
          v98 = 0;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v102 = 0;
            while (1)
            {
              v103 = v94 + 1;
              *((_QWORD *)a2 + 1) = v94 + 1;
              v104 = *(_BYTE *)(v96 + v94);
              v102 |= (unint64_t)(v104 & 0x7F) << v97;
              if ((v104 & 0x80) == 0)
                goto LABEL_200;
              v97 += 7;
              v94 = v103;
              v40 = v98++ > 8;
              if (v40)
                goto LABEL_196;
            }
          }
          v102 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)a2 + 1);
          while (v95 != v94)
          {
            v100 = v94 + 1;
            v101 = *(_BYTE *)(v96 + v94);
            *((_QWORD *)a2 + 1) = v100;
            v102 |= (unint64_t)(v101 & 0x7F) << v97;
            if ((v101 & 0x80) == 0)
              goto LABEL_198;
            v97 += 7;
            v94 = v100;
            v40 = v98++ > 8;
            if (v40)
              goto LABEL_196;
          }
LABEL_197:
          LODWORD(v102) = 0;
          *((_BYTE *)a2 + 24) = 1;
LABEL_200:
          *(v71 - 1) = v102;
          goto LABEL_21;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
        {
          v23 = (char *)*((_QWORD *)this + 5);
          do
          {
            v24 = *((_QWORD *)this + 6);
            if ((unint64_t)v23 >= v24)
            {
              v25 = (char *)*((_QWORD *)this + 4);
              v26 = (v23 - v25) >> 2;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62)
                goto LABEL_206;
              v28 = v24 - (_QWORD)v25;
              if (v28 >> 1 > v27)
                v27 = v28 >> 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v29 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
              {
                v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v29);
                v25 = (char *)*((_QWORD *)this + 4);
                v23 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v30 = 0;
              }
              v31 = (_DWORD *)(v29 + 4 * v26);
              *v31 = 0;
              v32 = (char *)(v31 + 1);
              while (v23 != v25)
              {
                v33 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *--v31 = v33;
              }
              *((_QWORD *)this + 4) = v31;
              *((_QWORD *)this + 5) = v32;
              *((_QWORD *)this + 6) = v29 + 4 * v30;
              if (v25)
                operator delete(v25);
              v23 = v32;
            }
            else
            {
              *(_DWORD *)v23 = 0;
              v23 += 4;
            }
            *((_QWORD *)this + 5) = v23;
            v35 = *((_QWORD *)a2 + 1);
            v34 = *((_QWORD *)a2 + 2);
            v36 = *(_QWORD *)a2;
            v37 = 0;
            v38 = 0;
            v39 = 0;
            v40 = v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v34;
            if (v40)
            {
              if (v34 <= v35)
                v41 = *((_QWORD *)a2 + 1);
              else
                v41 = *((_QWORD *)a2 + 2);
              while (1)
              {
                if (v41 == v35)
                  goto LABEL_132;
                v42 = v35 + 1;
                v43 = *(_BYTE *)(v36 + v35);
                *((_QWORD *)a2 + 1) = v42;
                v39 |= (unint64_t)(v43 & 0x7F) << v37;
                if ((v43 & 0x80) == 0)
                  break;
                v37 += 7;
                v35 = v42;
                v40 = v38++ > 8;
                if (v40)
                {
LABEL_68:
                  LODWORD(v39) = 0;
                  goto LABEL_71;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v39) = 0;
            }
            else
            {
              while (1)
              {
                v42 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v44 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v44 & 0x7F) << v37;
                if ((v44 & 0x80) == 0)
                  break;
                v37 += 7;
                v35 = v42;
                v40 = v38++ > 8;
                if (v40)
                  goto LABEL_68;
              }
            }
LABEL_71:
            *((_DWORD *)v23 - 1) = v39;
          }
          while (v42 < v34 && !*((_BYTE *)a2 + 24));
        }
      }
LABEL_133:
      PB::Reader::recallMark();
LABEL_21:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

_QWORD *sirinluinternalsnlp_intermediate::LinearizedTensor::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  v4 = this[4];
  v5 = this[5];
  while (v4 != v5)
  {
    v4 += 4;
    this = (_QWORD *)PB::Writer::writeVarInt(a2);
  }
  v6 = v3[1];
  v7 = v3[2];
  while (v6 != v7)
  {
    v6 += 4;
    this = (_QWORD *)PB::Writer::writeVarInt(a2);
  }
  v9 = v3[7];
  v8 = v3[8];
  while (v9 != v8)
  {
    this = (_QWORD *)PB::Writer::write();
    v9 += 24;
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::LinearizedTensor::formatText(sirinluinternalsnlp_intermediate::LinearizedTensor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 7);
  for (i = *((_QWORD *)this + 8); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(a2, "numericalized_feature");
  }
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "shape");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor(sirinluinternalsnlp_intermediate::LinearizedTensor *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1608;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1608;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluinternalsnlp_intermediate::LinearizedTensor *sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor(sirinluinternalsnlp_intermediate::LinearizedTensor *this, const sirinluinternalsnlp_intermediate::LinearizedTensor *a2)
{
  _QWORD *v3;
  std::vector<std::string> *v4;

  *(_QWORD *)this = &off_1E7BB1608;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (std::vector<std::string> *)((char *)this + 56);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (this != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *((std::string **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::LinearizedTensor::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor((sirinluinternalsnlp_intermediate::LinearizedTensor *)&v9, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v7;
    sirinluinternalsnlp_intermediate::LinearizedTensor::~LinearizedTensor((sirinluinternalsnlp_intermediate::LinearizedTensor *)&v9);
  }
  return a1;
}

_QWORD *sirinluinternalsnlp_intermediate::swap(_QWORD *this, sirinluinternalsnlp_intermediate::LinearizedTensor *a2, sirinluinternalsnlp_intermediate::LinearizedTensor *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E7BB1608;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::LinearizedTensor::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor((uint64_t)&v9, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v7;
    sirinluinternalsnlp_intermediate::LinearizedTensor::~LinearizedTensor((sirinluinternalsnlp_intermediate::LinearizedTensor *)&v9);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::LinearizedTensor::operator==(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  const void *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _BOOL8 result;

  v5 = a1 + 4;
  v4 = (const void *)a1[4];
  v6 = v5[1] - (_QWORD)v4;
  v8 = a2 + 4;
  v7 = (const void *)a2[4];
  if (v6 != v8[1] - (_QWORD)v7)
    return 0;
  if (memcmp(v4, v7, v6))
    return 0;
  v9 = (const void *)a1[1];
  v10 = a1[2] - (_QWORD)v9;
  v11 = (const void *)a2[1];
  if (v10 != a2[2] - (_QWORD)v11)
    return 0;
  if (memcmp(v9, v11, v10))
    return 0;
  v14 = a1 + 7;
  v12 = (unsigned __int8 *)a1[7];
  v13 = (unsigned __int8 *)v14[1];
  v16 = a2 + 7;
  v15 = (unsigned __int8 *)a2[7];
  if (v13 - v12 != v16[1] - (_QWORD)v15)
    return 0;
  if (v12 == v13)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v12, v15);
    if (!result)
      break;
    v12 += 24;
    v15 += 24;
  }
  while (v12 != v13);
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(sirinluinternalsnlp_intermediate::LinearizedTensor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  v4 = *((_QWORD *)this + 7);
  v5 = *((_QWORD *)this + 8);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v6 ^= std::__string_hash<char>::operator()[abi:ne180100](v4);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return v3 ^ v2 ^ v6;
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRTokenReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_40;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 52) |= 4u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_51:
          v45 = 32;
          goto LABEL_56;
        case 3u:
          v28 = 0;
          v29 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          while (2)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
              *(_QWORD *)(a2 + v30) = v32;
              v23 |= (unint64_t)(v33 & 0x7F) << v28;
              if (v33 < 0)
              {
                v28 += 7;
                v15 = v29++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_55:
          v45 = 16;
LABEL_56:
          *(_DWORD *)(a1 + v45) = v23;
          continue;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          *(_QWORD *)(a1 + 8) = v36;
          continue;
        case 5u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
LABEL_40:
          v37 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 6u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          *(_BYTE *)(a1 + 52) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v41 = *v3;
        v42 = *(_QWORD *)(a2 + v41);
        v43 = v42 + 1;
        if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
        *(_QWORD *)(a2 + v41) = v43;
        v40 |= (unint64_t)(v44 & 0x7F) << v38;
        if ((v44 & 0x80) == 0)
          goto LABEL_58;
        v38 += 7;
        v15 = v39++ >= 9;
        if (v15)
        {
          v40 = 0;
          goto LABEL_60;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
      if (*(_BYTE *)(a2 + *v5))
        v40 = 0;
LABEL_60:
      *(_BYTE *)(a1 + 48) = v40 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMENTION_DETECTORMentionDetectorRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 40;
        goto LABEL_23;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 32;
LABEL_23:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_52;
        goto LABEL_44;
      case 3u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 48;
        goto LABEL_28;
      case 4u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 64;
LABEL_28:
        v22 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2))
          goto LABEL_52;
        goto LABEL_44;
      case 6u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_52;
        }
        goto LABEL_44;
      case 7u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_50:
        *(_QWORD *)(a1 + 8) = v25;
        goto LABEL_45;
      case 8u:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_44:
          PBReaderRecallMark();

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

id loggerContext(int a1)
{
  if (a1 >= 2)
    __cxa_rethrow();
  if (loggerContext(SiriNLUTypesLogCategory)::onceToken != -1)
    dispatch_once(&loggerContext(SiriNLUTypesLogCategory)::onceToken, &__block_literal_global_13599);
  return (id)loggerContext(SiriNLUTypesLogCategory)::logObjects[a1];
}

void ___Z13loggerContext23SiriNLUTypesLogCategory_block_invoke()
{
  os_log_t v0;
  void *v1;
  os_log_t v2;
  void *v3;

  v0 = os_log_create("com.apple.siri.sirinlutypes", "SELFLog");
  v1 = (void *)loggerContext(SiriNLUTypesLogCategory)::logObjects[0];
  loggerContext(SiriNLUTypesLogCategory)::logObjects[0] = (uint64_t)v0;

  v2 = os_log_create("com.apple.siri.sirinlutypes", "Converter");
  v3 = (void *)qword_1ED7A0D00;
  qword_1ED7A0D00 = (uint64_t)v2;

}

void sirinluexternal::UserWantedToPause::~UserWantedToPause(sirinluexternal::UserWantedToPause *this)
{
  sirinluexternal::UserWantedToPause::~UserWantedToPause(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB1698;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserWantedToPause::readFrom(sirinluexternal::UserWantedToPause *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserWantedToPause::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserWantedToPause::formatText(sirinluexternal::UserWantedToPause *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "reference");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserWantedToPause::UserWantedToPause(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB1698;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB1698;
  return this;
}

sirinluexternal::UserWantedToPause *sirinluexternal::UserWantedToPause::UserWantedToPause(sirinluexternal::UserWantedToPause *this, const sirinluexternal::UserWantedToPause *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BB1698;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserWantedToPause::operator=(uint64_t a1, const sirinluexternal::UserWantedToPause *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserWantedToPause *)a1 != a2)
  {
    sirinluexternal::UserWantedToPause::UserWantedToPause((sirinluexternal::UserWantedToPause *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserWantedToPause::~UserWantedToPause((sirinluexternal::UserWantedToPause *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserWantedToPause *a2, sirinluexternal::UserWantedToPause *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::UserWantedToPause::UserWantedToPause(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB1698;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::UserWantedToPause::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserWantedToPause *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB1698;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserWantedToPause::~UserWantedToPause((sirinluexternal::UserWantedToPause *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserWantedToPause::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserWantedToPause::hash_value(sirinluexternal::UserWantedToPause *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserWantedToPause::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserWantedToPause::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::TurnInput::~TurnInput(sirinluexternal::TurnInput *this)
{
  sirinluexternal::TurnInput::~TurnInput(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  *(_QWORD *)this = &off_1E7BB16E8;
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v11 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v11 = (void **)((char *)this + 64);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  if (v6)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 5);
    v8 = (void *)*((_QWORD *)this + 4);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v6;
    operator delete(v8);
  }
  v11 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v11);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::TurnInput::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  int64x2_t *v11;
  void (**v12)(sirinluexternal::SystemDialogActGroup *__hidden);
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(sirinluexternal::SystemDialogActGroup *__hidden);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  int64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  unint64_t v71;
  int64x2_t *v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = this + 4;
  v9 = &this->i64[1];
  v10 = (uint64_t **)&this[6];
  v11 = this + 3;
  v12 = &off_1E7BB1240;
  while (1)
  {
    v13 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_22:
      if ((v16 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          v25 = operator new();
          *(_QWORD *)v25 = v12;
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          v26 = this[8].i64[0];
          this[8].i64[0] = v25;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v25 = this[8].i64[0];
          }
          goto LABEL_36;
        case 2u:
          PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>(v10);
          v34 = this[6].i64[1];
          goto LABEL_35;
        case 3u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>(v9);
          v34 = this[1].i64[0];
          goto LABEL_35;
        case 4u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>(v8);
          v34 = this[4].i64[1];
LABEL_35:
          v25 = *(_QWORD *)(v34 - 8);
          goto LABEL_36;
        case 5u:
          v27 = v12;
          v28 = operator new();
          v29 = v28;
          *(_QWORD *)v28 = &off_1E7BAFCC0;
          *(_OWORD *)(v28 + 8) = 0u;
          *(_OWORD *)(v28 + 24) = 0u;
          *(_OWORD *)(v28 + 48) = 0u;
          *(_OWORD *)(v28 + 64) = 0u;
          *(_DWORD *)(v28 + 80) = 0;
          v31 = (uint64_t *)this[2].i64[1];
          v30 = this[3].u64[0];
          if ((unint64_t)v31 >= v30)
          {
            v51 = this[2].i64[0];
            v52 = ((uint64_t)v31 - v51) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v53 = v30 - v51;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            v72 = v11;
            if (v55)
              v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v55);
            else
              v56 = 0;
            v61 = (uint64_t *)(v55 + 8 * v52);
            v62 = v55 + 8 * v56;
            v71 = v62;
            *v61 = v29;
            v32 = v61 + 1;
            v70.i64[1] = (uint64_t)(v61 + 1);
            v64 = (_QWORD *)this[2].i64[0];
            v63 = (_QWORD *)this[2].i64[1];
            if (v63 == v64)
            {
              v66 = vdupq_n_s64((unint64_t)v63);
            }
            else
            {
              do
              {
                v65 = *--v63;
                *v63 = 0;
                *--v61 = v65;
              }
              while (v63 != v64);
              v66 = this[2];
              v32 = (_QWORD *)v70.i64[1];
              v62 = v71;
            }
            this[2].i64[0] = (uint64_t)v61;
            this[2].i64[1] = (uint64_t)v32;
            v70 = v66;
            v67 = this[3].i64[0];
            this[3].i64[0] = v62;
            v71 = v67;
            v69 = v66.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v69);
          }
          else
          {
            *v31 = v28;
            v32 = v31 + 1;
          }
          this[2].i64[1] = (uint64_t)v32;
          v68 = *(v32 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v68 + 16))(v68, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v12 = v27;
          goto LABEL_39;
        case 6u:
          v25 = operator new();
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)v25 = &off_1E7BB2118;
          v40 = this[8].i64[1];
          this[8].i64[1] = v25;
          if (v40)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            v25 = this[8].i64[1];
          }
          goto LABEL_36;
        case 7u:
          v41 = (_QWORD *)operator new();
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          v42 = this[5].i64[1];
          this[5].i64[1] = (uint64_t)v41;
          if (v42)
            std::default_delete<std::string>::operator()[abi:ne180100](v42);
          PB::Reader::read();
          goto LABEL_39;
        case 8u:
          this[9].i8[4] |= 2u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 >= *((_QWORD *)a2 + 2))
          {
            v38 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v36 = v35 + 1;
            v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v35);
            *((_QWORD *)a2 + 1) = v36;
            v38 = v37 != 0;
          }
          this[9].i8[0] = v38;
          goto LABEL_39;
        case 9u:
          this[9].i8[4] |= 1u;
          v43 = *((_QWORD *)a2 + 1);
          v44 = *((_QWORD *)a2 + 2);
          v45 = *(_QWORD *)a2;
          if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = v43 + 1;
              *((_QWORD *)a2 + 1) = v43 + 1;
              v50 = *(_BYTE *)(v45 + v43);
              v48 |= (unint64_t)(v50 & 0x7F) << v46;
              if ((v50 & 0x80) == 0)
                goto LABEL_85;
              v46 += 7;
              v43 = v49;
              v19 = v47++ > 8;
            }
            while (!v19);
LABEL_72:
            v48 = 0;
            goto LABEL_85;
          }
          v57 = 0;
          v58 = 0;
          v48 = 0;
          if (v44 <= v43)
            v44 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v44 == v43)
            {
              v48 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v59 = v43 + 1;
              v60 = *(_BYTE *)(v45 + v43);
              *((_QWORD *)a2 + 1) = v59;
              v48 |= (unint64_t)(v60 & 0x7F) << v57;
              if (v60 < 0)
              {
                v57 += 7;
                v43 = v59;
                v19 = v58++ > 8;
                if (v19)
                  goto LABEL_72;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v48 = 0;
            }
            break;
          }
LABEL_85:
          this[7].i64[1] = v48;
          goto LABEL_39;
        case 0xAu:
          v25 = operator new();
          *(_QWORD *)v25 = &off_1E7BB0FA0;
          *(_QWORD *)(v25 + 8) = 0;
          v33 = this[3].i64[1];
          this[3].i64[1] = v25;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v25 = this[3].i64[1];
          }
LABEL_36:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v25 + 16))(v25, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_39;
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_22;
      v20 += 7;
      v2 = v22;
      v19 = v21++ > 8;
    }
    while (!v19);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_39:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1C1FE04C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::TurnInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base **v11;
  const PB::Base **v12;
  const PB::Base *v13;
  const PB::Base **v14;
  const PB::Base **v15;
  const PB::Base *v16;
  const PB::Base *v17;
  char v18;
  const PB::Base *v19;

  v3 = this;
  v4 = *(const PB::Base **)(this + 128);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base ***)(v3 + 96);
  v6 = *(const PB::Base ***)(v3 + 104);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(const PB::Base ***)(v3 + 8);
  v9 = *(const PB::Base ***)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  v11 = *(const PB::Base ***)(v3 + 64);
  v12 = *(const PB::Base ***)(v3 + 72);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  v14 = *(const PB::Base ***)(v3 + 32);
  v15 = *(const PB::Base ***)(v3 + 40);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  v17 = *(const PB::Base **)(v3 + 136);
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17);
  if (*(_QWORD *)(v3 + 88))
    this = PB::Writer::write();
  v18 = *(_BYTE *)(v3 + 148);
  if ((v18 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    v18 = *(_BYTE *)(v3 + 148);
  }
  if ((v18 & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v19 = *(const PB::Base **)(v3 + 56);
  if (v19)
    return PB::Writer::writeSubmessage(a2, v19);
  return this;
}

uint64_t sirinluexternal::TurnInput::formatText(sirinluexternal::TurnInput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "active_tasks");
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "asr_outputs");
  }
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "correction_outcome_override");
  v12 = (uint64_t *)*((_QWORD *)this + 8);
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "executed_tasks");
  }
  if (*((_QWORD *)this + 11))
    PB::TextFormatter::format();
  v15 = (uint64_t *)*((_QWORD *)this + 12);
  v16 = (uint64_t *)*((_QWORD *)this + 13);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "salient_entities");
  }
  if ((*((_BYTE *)this + 148) & 1) != 0)
    PB::TextFormatter::format(a2, "start_timestamp");
  v18 = *((_QWORD *)this + 16);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "system_dialog_act_group");
  if ((*((_BYTE *)this + 148) & 2) != 0)
    PB::TextFormatter::format(a2, "tap_to_edit");
  v19 = *((_QWORD *)this + 17);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, a2, "turn_context");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::TurnInput::TurnInput(sirinluexternal::TurnInput *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB16E8;
  *((_DWORD *)this + 37) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB16E8;
  *((_DWORD *)this + 37) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  return result;
}

sirinluexternal::TurnInput *sirinluexternal::TurnInput::TurnInput(sirinluexternal::TurnInput *this, const sirinluexternal::TurnInput *a2)
{
  sirinluexternal::Task ***v4;
  sirinluexternal::SystemDialogActGroup **v5;
  sirinluexternal::SystemDialogActGroup *v6;
  sirinluexternal::SystemDialogActGroup *v7;
  sirinluexternal::SystemDialogActGroup *v8;
  const sirinluexternal::EntityCandidate **v9;
  const sirinluexternal::EntityCandidate **i;
  const sirinluexternal::Task **v11;
  const sirinluexternal::Task **v12;
  const sirinluexternal::Task **v13;
  const sirinluexternal::Task **j;
  const sirinluexternal::UUID ***v15;
  const sirinluexternal::UUID ***k;
  const sirinluexternal::UUID **v17;
  sirinluexternal::AsrHypothesis *v18;
  unint64_t v19;
  sirinluexternal::AsrHypothesis **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  sirinluexternal::AsrHypothesis **v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  sirinluexternal::AsrHypothesis *v32;
  int64x2_t v33;
  unint64_t v34;
  sirinluexternal::TurnContext *v35;
  sirinluexternal::TurnContext *v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 *v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  int64x2_t v52;
  unint64_t v53;
  char *v54;

  *(_QWORD *)this = &off_1E7BB16E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::Task ***)((char *)this + 8);
  *((_QWORD *)this + 16) = 0;
  v5 = (sirinluexternal::SystemDialogActGroup **)((char *)this + 128);
  *((_DWORD *)this + 37) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = 0;
  if (*((_QWORD *)a2 + 16))
  {
    v6 = (sirinluexternal::SystemDialogActGroup *)operator new();
    v7 = sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(v6, *((const sirinluexternal::SystemDialogAct ***)a2 + 16));
    v8 = *v5;
    *v5 = v7;
    if (v8)
      (*(void (**)(sirinluexternal::SystemDialogActGroup *))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 12);
  for (i = (const sirinluexternal::EntityCandidate **)*((_QWORD *)a2 + 13); v9 != i; ++v9)
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>((sirinluexternal::EntityCandidate ***)this + 12, *v9);
  v11 = (const sirinluexternal::Task **)*((_QWORD *)a2 + 1);
  v12 = (const sirinluexternal::Task **)*((_QWORD *)a2 + 2);
  while (v11 != v12)
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>(v4, *v11++);
  v13 = (const sirinluexternal::Task **)*((_QWORD *)a2 + 8);
  for (j = (const sirinluexternal::Task **)*((_QWORD *)a2 + 9); v13 != j; ++v13)
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>((sirinluexternal::Task ***)this + 8, *v13);
  v15 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 4);
  for (k = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 5); v15 != k; ++v15)
  {
    v17 = *v15;
    v18 = (sirinluexternal::AsrHypothesis *)operator new();
    sirinluexternal::AsrHypothesis::AsrHypothesis(v18, v17);
    v20 = (sirinluexternal::AsrHypothesis **)*((_QWORD *)this + 5);
    v19 = *((_QWORD *)this + 6);
    if ((unint64_t)v20 >= v19)
    {
      v22 = *((_QWORD *)this + 4);
      v23 = ((uint64_t)v20 - v22) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v24 = v19 - v22;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      v54 = (char *)this + 48;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v26);
      else
        v27 = 0;
      v28 = (sirinluexternal::AsrHypothesis **)(v26 + 8 * v23);
      v29 = v26 + 8 * v27;
      v53 = v29;
      *v28 = v18;
      v21 = v28 + 1;
      v52.i64[1] = (uint64_t)(v28 + 1);
      v31 = (_QWORD *)*((_QWORD *)this + 4);
      v30 = (_QWORD *)*((_QWORD *)this + 5);
      if (v30 == v31)
      {
        v33 = vdupq_n_s64((unint64_t)v30);
      }
      else
      {
        do
        {
          v32 = (sirinluexternal::AsrHypothesis *)*--v30;
          *v30 = 0;
          *--v28 = v32;
        }
        while (v30 != v31);
        v33 = *((int64x2_t *)this + 2);
        v21 = (_QWORD *)v52.i64[1];
        v29 = v53;
      }
      *((_QWORD *)this + 4) = v28;
      *((_QWORD *)this + 5) = v21;
      v52 = v33;
      v34 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v29;
      v53 = v34;
      v51 = v33.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v51);
    }
    else
    {
      *v20 = v18;
      v21 = v20 + 1;
    }
    *((_QWORD *)this + 5) = v21;
  }
  if (*((_QWORD *)a2 + 17))
  {
    v35 = (sirinluexternal::TurnContext *)operator new();
    v36 = sirinluexternal::TurnContext::TurnContext(v35, *((const sirinluexternal::TurnContext **)a2 + 17));
    v37 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v36;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  if (*((_QWORD *)a2 + 11))
  {
    v38 = (std::string *)operator new();
    v39 = v38;
    v40 = (__int128 *)*((_QWORD *)a2 + 11);
    if (*((char *)v40 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
    }
    else
    {
      v41 = *v40;
      v38->__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v41;
    }
    v42 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v39;
    if (v42)
      std::default_delete<std::string>::operator()[abi:ne180100](v42);
  }
  v43 = *((_BYTE *)a2 + 148);
  if ((v43 & 2) != 0)
  {
    v44 = *((_BYTE *)a2 + 144);
    *((_BYTE *)this + 148) |= 2u;
    *((_BYTE *)this + 144) = v44;
    v43 = *((_BYTE *)a2 + 148);
  }
  if ((v43 & 1) != 0)
  {
    v45 = *((_QWORD *)a2 + 15);
    *((_BYTE *)this + 148) |= 1u;
    *((_QWORD *)this + 15) = v45;
  }
  if (*((_QWORD *)a2 + 7))
  {
    v46 = operator new();
    v47 = *((_QWORD *)a2 + 7);
    *(_QWORD *)v46 = &off_1E7BB0FA0;
    *(_QWORD *)(v46 + 8) = 0;
    if ((*(_BYTE *)(v47 + 12) & 1) != 0)
    {
      v48 = *(_DWORD *)(v47 + 8);
      *(_BYTE *)(v46 + 12) = 1;
      *(_DWORD *)(v46 + 8) = v48;
    }
    v49 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v46;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  return this;
}

void sub_1C1FE0CEC(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternal::TurnInput::operator=(uint64_t a1, const sirinluexternal::TurnInput *a2)
{
  sirinluexternal::TurnInput *v3;
  _BYTE v5[152];

  if ((const sirinluexternal::TurnInput *)a1 != a2)
  {
    sirinluexternal::TurnInput::TurnInput((sirinluexternal::TurnInput *)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::TurnInput *)v5, v3);
    sirinluexternal::TurnInput::~TurnInput((sirinluexternal::TurnInput *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::TurnInput *a2, sirinluexternal::TurnInput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_DWORD *)(this + 148);
  *(_DWORD *)(this + 148) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v3;
  v4 = *(_QWORD *)(this + 128);
  *(_QWORD *)(this + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v4;
  v5 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v5;
  v6 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v6;
  v7 = *(_QWORD *)(this + 112);
  v8 = *(_QWORD *)(this + 120);
  v9 = *((_QWORD *)a2 + 15);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *(_QWORD *)(this + 120) = v9;
  *((_QWORD *)a2 + 14) = v7;
  v10 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v12;
  v13 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v16;
  v17 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v17;
  v18 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v18;
  v19 = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v20;
  LOBYTE(v20) = *(_BYTE *)(this + 144);
  *(_BYTE *)(this + 144) = *((_BYTE *)a2 + 144);
  *((_BYTE *)a2 + 144) = v20;
  *((_QWORD *)a2 + 15) = v8;
  v21 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v21;
  return this;
}

uint64_t sirinluexternal::TurnInput::TurnInput(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BB16E8;
  v5 = (_QWORD *)(a1 + 64);
  v6 = (_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  v7 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v9 = *(_QWORD **)(a1 + 32);
  if (v9)
  {
    v10 = (void **)(a1 + 32);
    v11 = *(_QWORD **)(a1 + 40);
    v12 = *(void **)(a1 + 32);
    if (v11 != v9)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      while (v11 != v9);
      v12 = *v10;
    }
    *(_QWORD *)(a1 + 40) = v9;
    operator delete(v12);
    *v10 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v16 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  if (v18)
    std::default_delete<std::string>::operator()[abi:ne180100](v18);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return a1;
}

uint64_t sirinluexternal::TurnInput::operator=(uint64_t a1, uint64_t a2)
{
  sirinluexternal::TurnInput *v3;
  _BYTE v5[152];

  if (a1 != a2)
  {
    sirinluexternal::TurnInput::TurnInput((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::TurnInput *)v5, v3);
    sirinluexternal::TurnInput::~TurnInput((sirinluexternal::TurnInput *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::TurnInput::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD **)(a1 + 128);
  v5 = *(_QWORD *)(a2 + 128);
  if (v4)
  {
    if (!v5 || (sirinluexternal::SystemDialogActGroup::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluexternal::EntityCandidate>::operator==((uint64_t *)(a1 + 96), *(uint64_t **)(a2 + 96), *(_QWORD *)(a2 + 104));
  if (!(_DWORD)result)
    return result;
  result = PB::PtrVector<sirinluexternal::Task>::operator==((uint64_t *)(a1 + 8), *(_QWORD ***)(a2 + 8), *(_QWORD *)(a2 + 16));
  if (!(_DWORD)result)
    return result;
  result = PB::PtrVector<sirinluexternal::Task>::operator==((uint64_t *)(a1 + 64), *(_QWORD ***)(a2 + 64), *(_QWORD *)(a2 + 72));
  if (!(_DWORD)result)
    return result;
  v8 = *(uint64_t **)(a1 + 32);
  v7 = *(uint64_t **)(a1 + 40);
  v9 = *(uint64_t **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    result = sirinluexternal::AsrHypothesis::operator==(*v8, *v9);
    if (!(_DWORD)result)
      return result;
    ++v8;
    ++v9;
  }
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a2 + 136);
  if (v10)
  {
    if (!v11 || !sirinluexternal::TurnContext::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(unsigned __int8 **)(a1 + 88);
  v13 = *(unsigned __int8 **)(a2 + 88);
  if (v12)
  {
    if (!v13 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 148) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 148) & 2) == 0 || *(unsigned __int8 *)(a1 + 144) != *(unsigned __int8 *)(a2 + 144))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 148) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 148) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 148) & 1) == 0)
      goto LABEL_35;
    return 0;
  }
  if ((*(_BYTE *)(a2 + 148) & 1) == 0 || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a2 + 120))
    return 0;
LABEL_35:
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a2 + 56);
  result = (v14 | v15) == 0;
  if (v14 && v15)
  {
    if ((*(_BYTE *)(v14 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 12) & 1) != 0 && *(_DWORD *)(v14 + 8) == *(_DWORD *)(v15 + 8))
        return 1;
    }
    else if ((*(_BYTE *)(v15 + 12) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluexternal::TurnInput::hash_value(sirinluexternal::TurnInput *this)
{
  sirinluexternal::SystemDialogActGroup *v2;
  unint64_t v3;
  sirinluexternal::EntityCandidate **v4;
  sirinluexternal::EntityCandidate **v5;
  uint64_t v6;
  sirinluexternal::EntityCandidate *v7;
  sirinluexternal::Task **v8;
  sirinluexternal::Task **v9;
  uint64_t v10;
  sirinluexternal::Task *v11;
  sirinluexternal::Task **v12;
  sirinluexternal::Task **v13;
  uint64_t v14;
  sirinluexternal::Task *v15;
  sirinluexternal::AsrHypothesis **v16;
  sirinluexternal::AsrHypothesis **v17;
  uint64_t v18;
  sirinluexternal::AsrHypothesis *v19;
  sirinluexternal::TurnContext *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (sirinluexternal::SystemDialogActGroup *)*((_QWORD *)this + 16);
  if (v2)
    v3 = sirinluexternal::SystemDialogActGroup::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 12);
  v5 = (sirinluexternal::EntityCandidate **)*((_QWORD *)this + 13);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= sirinluexternal::EntityCandidate::hash_value(v7);
    }
    while (v4 != v5);
  }
  v8 = (sirinluexternal::Task **)*((_QWORD *)this + 1);
  v9 = (sirinluexternal::Task **)*((_QWORD *)this + 2);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 ^= sirinluexternal::Task::hash_value(v11);
    }
    while (v8 != v9);
  }
  v12 = (sirinluexternal::Task **)*((_QWORD *)this + 8);
  v13 = (sirinluexternal::Task **)*((_QWORD *)this + 9);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 ^= sirinluexternal::Task::hash_value(v15);
    }
    while (v12 != v13);
  }
  v16 = (sirinluexternal::AsrHypothesis **)*((_QWORD *)this + 4);
  v17 = (sirinluexternal::AsrHypothesis **)*((_QWORD *)this + 5);
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v16++;
      v18 ^= sirinluexternal::AsrHypothesis::hash_value(v19);
    }
    while (v16 != v17);
  }
  v20 = (sirinluexternal::TurnContext *)*((_QWORD *)this + 17);
  if (v20)
    v21 = sirinluexternal::TurnContext::hash_value(v20);
  else
    v21 = 0;
  v22 = *((_QWORD *)this + 11);
  if (v22)
    v22 = std::__string_hash<char>::operator()[abi:ne180100](v22);
  if ((*((_BYTE *)this + 148) & 2) != 0)
  {
    v23 = *((unsigned __int8 *)this + 144);
    if ((*((_BYTE *)this + 148) & 1) != 0)
      goto LABEL_31;
  }
  else
  {
    v23 = 0;
    if ((*((_BYTE *)this + 148) & 1) != 0)
    {
LABEL_31:
      v24 = *((_QWORD *)this + 15);
      goto LABEL_34;
    }
  }
  v24 = 0;
LABEL_34:
  v25 = *((_QWORD *)this + 7);
  if (v25)
  {
    if ((*(_BYTE *)(v25 + 12) & 1) != 0)
      v25 = *(int *)(v25 + 8);
    else
      v25 = 0;
  }
  return v6 ^ v3 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v10 ^ v14 ^ v18;
}

_QWORD *sirinluexternal::TurnInput::makeSystemDialogActGroup(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[16])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1240;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[16];
    v1[16] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::TurnInput::makeTurnContext(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[17])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB2118;
    this = (_QWORD *)v1[17];
    v1[17] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::TurnInput::makeCorrectionOutcomeOverride(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0FA0;
    v2[1] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::PayloadAttachmentInfo::~PayloadAttachmentInfo(sirinluexternal::PayloadAttachmentInfo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::PayloadAttachmentInfo::readFrom(sirinluexternal::PayloadAttachmentInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::PayloadAttachmentInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::PayloadAttachmentInfo::formatText(sirinluexternal::PayloadAttachmentInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "attachment_type");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::PayloadAttachmentInfo::PayloadAttachmentInfo(_QWORD *this)
{
  *this = &off_1E7BB1738;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BB1738;
  this[1] = 0;
  return this;
}

uint64_t sirinluexternal::PayloadAttachmentInfo::PayloadAttachmentInfo(uint64_t this, const sirinluexternal::PayloadAttachmentInfo *a2)
{
  int v2;

  *(_QWORD *)this = &off_1E7BB1738;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_1E7BB1738;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t sirinluexternal::PayloadAttachmentInfo::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BB1738;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_1E7BB1738;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::PayloadAttachmentInfo *a2, sirinluexternal::PayloadAttachmentInfo *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t sirinluexternal::PayloadAttachmentInfo::PayloadAttachmentInfo(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BB1738;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BB1738;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL sirinluexternal::PayloadAttachmentInfo::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sirinluexternal::PayloadAttachmentInfo::hash_value(sirinluexternal::PayloadAttachmentInfo *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void sirinluexternalnlu_router::RequestSummary::~RequestSummary(sirinluexternalnlu_router::RequestSummary *this)
{
  sirinluexternalnlu_router::RequestSummary::~RequestSummary(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BB1788;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::RequestSummary::readFrom(sirinluexternalnlu_router::RequestSummary *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  unint64_t v44;
  char *v45;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        v23 = (_QWORD *)operator new();
        v24 = v23;
        *v23 = &off_1E7BAFC70;
        v23[1] = 0;
        v23[2] = 0;
        v23[3] = 0;
        v26 = (_QWORD *)*((_QWORD *)this + 2);
        v25 = *((_QWORD *)this + 3);
        if ((unint64_t)v26 >= v25)
        {
          v28 = *((_QWORD *)this + 1);
          v29 = ((uint64_t)v26 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v30 = v25 - v28;
          v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1))
            v31 = v29 + 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          v45 = v8;
          if (v32)
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v32);
          else
            v33 = 0;
          v34 = (_QWORD *)(v32 + 8 * v29);
          v35 = v32 + 8 * v33;
          v44 = v35;
          *v34 = v24;
          v27 = v34 + 1;
          v43.i64[1] = (uint64_t)(v34 + 1);
          v37 = (_QWORD *)*((_QWORD *)this + 1);
          v36 = (_QWORD *)*((_QWORD *)this + 2);
          if (v36 == v37)
          {
            v39 = vdupq_n_s64((unint64_t)v36);
          }
          else
          {
            do
            {
              v38 = *--v36;
              *v36 = 0;
              *--v34 = v38;
            }
            while (v36 != v37);
            v39 = *(int64x2_t *)((char *)this + 8);
            v27 = (_QWORD *)v43.i64[1];
            v35 = v44;
          }
          *((_QWORD *)this + 1) = v34;
          *((_QWORD *)this + 2) = v27;
          v43 = v39;
          v40 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v35;
          v44 = v40;
          v42 = v39.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          *v26 = v23;
          v27 = v26 + 1;
        }
        *((_QWORD *)this + 2) = v27;
        v41 = *(v27 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v41 + 16))(v41, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v12 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100](v21);
        PB::Reader::read();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C1FE1D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalnlu_router::RequestSummary::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if (*(_QWORD *)(this + 32))
    this = PB::Writer::write();
  v5 = *(const PB::Base ***)(v3 + 8);
  v4 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::RequestSummary::formatText(sirinluexternalnlu_router::RequestSummary *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "turn_summaries");
  }
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternalnlu_router::RequestSummary::RequestSummary(sirinluexternalnlu_router::RequestSummary *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB1788;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB1788;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluexternalnlu_router::RequestSummary *sirinluexternalnlu_router::RequestSummary::RequestSummary(sirinluexternalnlu_router::RequestSummary *this, const sirinluexternalnlu_router::RequestSummary *a2)
{
  int64x2_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  const sirinluexternalnlu_router::TurnSummary **v10;
  const sirinluexternalnlu_router::TurnSummary **i;
  const sirinluexternalnlu_router::TurnSummary *v12;
  sirinluexternalnlu_router::TurnSummary *v13;
  unint64_t v14;
  sirinluexternalnlu_router::TurnSummary **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  sirinluexternalnlu_router::TurnSummary **v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  sirinluexternalnlu_router::TurnSummary *v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v30;
  int64x2_t v31;
  unint64_t v32;
  char *v33;

  *(_QWORD *)this = &off_1E7BB1788;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  v10 = (const sirinluexternalnlu_router::TurnSummary **)*((_QWORD *)a2 + 1);
  for (i = (const sirinluexternalnlu_router::TurnSummary **)*((_QWORD *)a2 + 2); v10 != i; ++v10)
  {
    v12 = *v10;
    v13 = (sirinluexternalnlu_router::TurnSummary *)operator new();
    sirinluexternalnlu_router::TurnSummary::TurnSummary(v13, v12);
    v15 = (sirinluexternalnlu_router::TurnSummary **)*((_QWORD *)this + 2);
    v14 = *((_QWORD *)this + 3);
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((uint64_t)v15 - v4->i64[0]) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v18 = v14 - v4->i64[0];
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v33 = (char *)this + 24;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v20);
      else
        v21 = 0;
      v22 = (sirinluexternalnlu_router::TurnSummary **)(v20 + 8 * v17);
      v23 = v20 + 8 * v21;
      v32 = v23;
      *v22 = v13;
      v16 = v22 + 1;
      v31.i64[1] = (uint64_t)(v22 + 1);
      v25 = (_QWORD *)*((_QWORD *)this + 1);
      v24 = (_QWORD *)*((_QWORD *)this + 2);
      if (v24 == v25)
      {
        v27 = vdupq_n_s64((unint64_t)v24);
      }
      else
      {
        do
        {
          v26 = (sirinluexternalnlu_router::TurnSummary *)*--v24;
          *v24 = 0;
          *--v22 = v26;
        }
        while (v24 != v25);
        v27 = *v4;
        v16 = (_QWORD *)v31.i64[1];
        v23 = v32;
      }
      *((_QWORD *)this + 1) = v22;
      *((_QWORD *)this + 2) = v16;
      v31 = v27;
      v28 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v23;
      v32 = v28;
      v30 = v27.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    *((_QWORD *)this + 2) = v16;
  }
  return this;
}

void sub_1C1FE20B8(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternalnlu_router::RequestSummary::operator=(uint64_t a1, const sirinluexternalnlu_router::RequestSummary *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluexternalnlu_router::RequestSummary *)a1 != a2)
  {
    sirinluexternalnlu_router::RequestSummary::RequestSummary((sirinluexternalnlu_router::RequestSummary *)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluexternalnlu_router::RequestSummary::~RequestSummary((sirinluexternalnlu_router::RequestSummary *)v6);
  }
  return a1;
}

_QWORD *sirinluexternalnlu_router::swap(_QWORD *this, sirinluexternalnlu_router::RequestSummary *a2, sirinluexternalnlu_router::RequestSummary *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluexternalnlu_router::RequestSummary::RequestSummary(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BB1788;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = (_QWORD *)*v4;
  if (*v4)
  {
    v8 = *(_QWORD **)(a1 + 16);
    v9 = (_QWORD *)*v4;
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternalnlu_router::RequestSummary::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::RequestSummary::RequestSummary((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    sirinluexternalnlu_router::RequestSummary::~RequestSummary((sirinluexternalnlu_router::RequestSummary *)v6);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::RequestSummary::operator==(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  BOOL v18;

  v4 = (unsigned __int8 *)a1[4];
  v5 = *(unsigned __int8 ***)(a2 + 32);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 32);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = a1[1];
  v12 = a1[2];
  v14 = a2 + 8;
  v13 = *(uint64_t **)(a2 + 8);
  if (v12 - v11 != *(_QWORD *)(v14 + 8) - (_QWORD)v13)
    return 0;
  if (v11 == v12)
    return 1;
  v15 = v11 + 8;
  do
  {
    v16 = *v13++;
    result = sirinluexternalnlu_router::TurnSummary::operator==(*(_QWORD *)(v15 - 8), v16);
    v18 = !result || v15 == v12;
    v15 += 8;
  }
  while (!v18);
  return result;
}

unint64_t sirinluexternalnlu_router::RequestSummary::hash_value(sirinluexternalnlu_router::RequestSummary *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluexternalnlu_router::TurnSummary **v4;
  sirinluexternalnlu_router::TurnSummary **v5;
  uint64_t v6;
  sirinluexternalnlu_router::TurnSummary *v7;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v5 = (sirinluexternalnlu_router::TurnSummary **)*((_QWORD *)this + 1);
  v4 = (sirinluexternalnlu_router::TurnSummary **)*((_QWORD *)this + 2);
  if (v5 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v5++;
      v6 ^= sirinluexternalnlu_router::TurnSummary::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

uint64_t SIRINLUINTERNALCONTEXTUAL_SPAN_MATCHERContextualSpanMatcherResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALMatchingSpan *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend(a1, "addContextualSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALITFMITFMParserResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  int v28;
  SIRINLUEXTERNALParser *v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_38;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_40:
        *(_BYTE *)(a1 + 32) = v20 != 0;
        goto LABEL_43;
      case 2u:
        *(_BYTE *)(a1 + 36) |= 1u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        *(_DWORD *)(a1 + 8) = v28;
        goto LABEL_43;
      case 3u:
        v29 = objc_alloc_init(SIRINLUEXTERNALParser);
        objc_storeStrong((id *)(a1 + 24), v29);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALParserReadFrom((uint64_t)v29, a2))
          goto LABEL_45;
        goto LABEL_36;
      case 4u:
        v29 = objc_alloc_init(SIRINLUINTERNALITFMITFMHypothesis);
        objc_msgSend((id)a1, "addHypotheses:", v29);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALITFMITFMHypothesisReadFrom((uint64_t)v29, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

uint64_t siri::ontology::createUsoGraphProtoReaderLogContext(siri::ontology *this)
{
  if (siri::ontology::createUsoGraphProtoReaderLogContext(void)::once != -1)
    dispatch_once(&siri::ontology::createUsoGraphProtoReaderLogContext(void)::once, &__block_literal_global_13788);
  return siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext;
}

os_log_t ___ZN4siri8ontology35createUsoGraphProtoReaderLogContextEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.siri.SiriNLUTypes.Serializer", "UsoGraphProtoReader");
  siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext = (uint64_t)result;
  return result;
}

uint64_t siri::ontology::UsoGraphProtoReader::getOrCreateNodeName(siri::ontology::UsoGraphProtoReader *this, const sirinluexternal::UsoNode *a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  uint64_t CustomEntityName;
  __int128 *v6;
  __int128 v7;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;
  std::string v15;
  _QWORD v16[3];

  v2 = *((_DWORD *)a2 + 18);
  if (v2)
  {
    v3 = MEMORY[0x1C3BB70BC](*(_QWORD *)this, *((unsigned int *)a2 + 18));
    if (!v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "UsoGraphProtoReaderException");
      std::to_string(&v12, v2);
      v9 = std::string::insert(&v12, 0, "Invalid node element id: ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v14 = v9->__r_.__value_.__r.__words[2];
      v13 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>((uint64_t)v16, 66, "getOrCreateNodeName");
    }
    return v3;
  }
  else
  {
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (!v6)
    {
      v11 = std::string::basic_string[abi:ne180100]<0>(v16, "UsoGraphProtoReaderException");
      siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>((uint64_t)v11, 55, "getOrCreateNodeName", "element id 0 (custom) used without an entity label set");
    }
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v15.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
    }
    CustomEntityName = siri::ontology::UsoVocabManager::createCustomEntityName();
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  return CustomEntityName;
}

void sub_1C1FE3E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

void siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  _QWORD *exception;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];

  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v9, "/Library/Caches/com.apple.xbs/Sources/SiriNLUTypes/serializers/SiriOntology/cpp/UsoGraphProtoReader.cpp");
  std::string::basic_string[abi:ne180100]<0>(v8, a3);
  std::string::basic_string[abi:ne180100]<0>(v7, a4);
  siri::ontology::OntologyBaseException::OntologyBaseException();
  *exception = &off_1E7BB1850;
}

void sub_1C1FE3F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *exception;
  _QWORD v5[3];
  _QWORD v6[3];

  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "/Library/Caches/com.apple.xbs/Sources/SiriNLUTypes/serializers/SiriOntology/cpp/UsoGraphProtoReader.cpp");
  std::string::basic_string[abi:ne180100]<0>(v5, a3);
  siri::ontology::OntologyBaseException::OntologyBaseException();
  *exception = &off_1E7BB1850;
}

void sub_1C1FE4090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void siri::ontology::UsoGraphProtoReaderException::~UsoGraphProtoReaderException(std::exception *this)
{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siri::ontology::UsoGraphProtoReader::getOrCreateEdgeName(siri::ontology::UsoVocabManager **this, const sirinluexternal::UsoEdgeLabel *a2)
{
  unsigned int v2;
  uint64_t EdgeName;
  char v4;
  uint64_t CustomEdgeName;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  std::string v18;
  _QWORD v19[3];

  v2 = *((_DWORD *)a2 + 5);
  if (v2)
  {
    EdgeName = siri::ontology::UsoVocabManager::getEdgeName(*this);
    if (!v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "UsoGraphProtoReaderException");
      std::to_string(&v15, v2);
      v12 = std::string::insert(&v15, 0, "Invalid edge element id: ");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v17 = v12->__r_.__value_.__r.__words[2];
      v16 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>((uint64_t)v19, 91, "getOrCreateEdgeName");
    }
    return EdgeName;
  }
  v6 = *((_QWORD *)a2 + 1);
  if (!v6)
  {
    v14 = std::string::basic_string[abi:ne180100]<0>(v19, "UsoGraphProtoReaderException");
    siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>((uint64_t)v14, 77, "getOrCreateEdgeName", "baseEdgeLabel is NULL when edgeId being 0 (i.e. custom edge)");
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_14;
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v7 + 23))
    {
      v8 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
      v18.__r_.__value_.__r.__words[2] = v8;
      goto LABEL_11;
    }
LABEL_14:
    v11 = std::string::basic_string[abi:ne180100]<0>(v19, "UsoGraphProtoReaderException");
    siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>((uint64_t)v11, 82, "getOrCreateEdgeName", "Empty baseEdgeLabel when edgeId being 0 (i.e. custom edge)");
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
    goto LABEL_14;
  std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v7, v9);
LABEL_11:
  CustomEdgeName = siri::ontology::UsoVocabManager::createCustomEdgeName();
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return CustomEdgeName;
}

void sub_1C1FE4288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoGraphProtoReader::getOrCreateVerbName(siri::ontology::UsoVocabManager **this, const sirinluexternal::UsoNode *a2)
{
  unsigned int v2;
  uint64_t VerbName;
  char v4;
  uint64_t CustomVerbName;
  __int128 *v6;
  __int128 v7;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;
  std::string v15;
  _QWORD v16[3];

  v2 = *(_DWORD *)(*((_QWORD *)a2 + 7) + 8);
  if (v2)
  {
    VerbName = siri::ontology::UsoVocabManager::getVerbName(*this);
    if (!v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "UsoGraphProtoReaderException");
      std::to_string(&v12, v2);
      v9 = std::string::insert(&v12, 0, "Invalid verb element id: ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v14 = v9->__r_.__value_.__r.__words[2];
      v13 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>((uint64_t)v16, 109, "getOrCreateVerbName");
    }
    return VerbName;
  }
  else
  {
    v6 = (__int128 *)*((_QWORD *)a2 + 8);
    if (!v6)
    {
      v11 = std::string::basic_string[abi:ne180100]<0>(v16, "UsoGraphProtoReaderException");
      siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>((uint64_t)v11, 100, "getOrCreateVerbName", "verb element id 0 (custom) used without a verbLabel set");
    }
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v15.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
    }
    CustomVerbName = siri::ontology::UsoVocabManager::createCustomVerbName();
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  return CustomVerbName;
}

void sub_1C1FE4420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::populateUtteranceSpan@<X0>(siri::ontology *this@<X0>, _QWORD *a2@<X8>)
{
  int v5;
  int v6;
  uint64_t result;
  char v8;
  int v9;
  int v10;

  v5 = *((_DWORD *)this + 5);
  v6 = *((_DWORD *)this + 2);
  result = operator new();
  *(_DWORD *)result = v5;
  *(_DWORD *)(result + 4) = v6;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  *a2 = result;
  v8 = *((_BYTE *)this + 32);
  v9 = *((_DWORD *)this + 7);
  if ((v8 & 0x20) == 0)
    v9 = -1;
  v10 = *((_DWORD *)this + 4);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    v10 = -1;
  *(_DWORD *)(result + 8) = v9;
  *(_DWORD *)(result + 12) = v10;
  if ((v8 & 0x10) != 0)
  {
    *(_DWORD *)(result + 16) = *((_DWORD *)this + 6);
    *(_BYTE *)(result + 20) = 1;
  }
  if ((v8 & 2) != 0)
  {
    *(_DWORD *)(result + 24) = *((_DWORD *)this + 3);
    *(_BYTE *)(result + 28) = 1;
  }
  return result;
}

float siri::ontology::populateAlternative@<S0>(siri::ontology *this@<X0>, std::string **a2@<X8>)
{
  uint64_t v3;
  std::string *v6;
  float result;
  uint64_t v8;
  std::string v9;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "UsoGraphProtoReaderException");
    siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>((uint64_t)&v9, 133, "populateAlternative", "AsrAlternative without alternative value");
  }
  v6 = (std::string *)operator new();
  if (*(char *)(v3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  else
    v9 = *(std::string *)v3;
  result = *(float *)&v9.__r_.__value_.__l.__data_;
  *v6 = v9;
  v6[1].__r_.__value_.__r.__words[0] = 0;
  *a2 = v6;
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 12) & 1) != 0)
    {
      result = *(float *)(v8 + 8);
      *(float *)&v6[1].__r_.__value_.__l.__data_ = result;
      v6[1].__r_.__value_.__s.__data_[4] = 1;
    }
  }
  return result;
}

void sub_1C1FE460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1C3BB720C](v14, 0x1012C40F498771DLL);
  _Unwind_Resume(a1);
}

void siri::ontology::populateSpanProperty(siri::ontology *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  std::string v14;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "UsoGraphProtoReaderException");
    siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,char const*>((uint64_t)&v14, 148, "populateSpanProperty", "span property map without a key existance");
  }
  v6 = operator new();
  if (*(char *)(v3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  else
    v14 = *(std::string *)v3;
  *(_OWORD *)v6 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  v7 = v14.__r_.__value_.__r.__words[2];
  *(_BYTE *)(v6 + 24) = 0;
  v8 = (std::string *)(v6 + 24);
  *(_QWORD *)(v6 + 16) = v7;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *a2 = v6;
  v9 = *((_QWORD *)this + 3);
  if (v9 && (*(_BYTE *)(v9 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 56) = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v6 + 60) = 1;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10 && (*(_BYTE *)(v10 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 64) = *(_DWORD *)(v10 + 8);
    *(_BYTE *)(v6 + 68) = 1;
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *(__int128 **)(v11 + 8);
    if (v12)
    {
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v13 = *v12;
        *(_QWORD *)(v6 + 40) = *((_QWORD *)v12 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v13;
      }
      *(_BYTE *)(v6 + 48) = 1;
    }
  }
}

void sub_1C1FE4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  _QWORD *v15;

  *v15 = 0;
  std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 48) && *(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1C3BB720CLL);
  }
  return result;
}

void siri::ontology::populateMatchInfo(siri::ontology *this@<X0>, uint64_t *a2@<X8>)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char **v35;
  uint64_t v36;
  char *v37;
  char *v38;
  size_t v39;
  unint64_t v40;
  char *v41;
  void *v42;
  char *v43;
  _QWORD *v44;

  v5 = *((_DWORD *)this + 24);
  v6 = operator new();
  v7 = (_QWORD *)v6;
  *(_DWORD *)v6 = v5;
  *(_QWORD *)(v6 + 72) = 0;
  v44 = (_QWORD *)(v6 + 72);
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *a2 = v6;
  v8 = *((_QWORD *)this + 5);
  if (v8 && (*(_BYTE *)(v8 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 4) = *(_DWORD *)(v8 + 8);
    *(_BYTE *)(v6 + 8) = 1;
  }
  v9 = *((_QWORD *)this + 11);
  if (v9 && (*(_BYTE *)(v9 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v6 + 16) = 1;
  }
  v10 = *((_QWORD *)this + 10);
  if (v10 && (*(_BYTE *)(v10 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 28) = *(_DWORD *)(v10 + 8);
    *(_BYTE *)(v6 + 32) = 1;
  }
  v11 = *((_QWORD *)this + 7);
  if (v11 && (*(_BYTE *)(v11 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 36) = *(_DWORD *)(v11 + 8);
    *(_BYTE *)(v6 + 40) = 1;
  }
  v12 = *((_QWORD *)this + 4);
  if (v12 && (*(_BYTE *)(v12 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 44) = *(_DWORD *)(v12 + 8);
    *(_BYTE *)(v6 + 48) = 1;
  }
  v13 = *((_QWORD *)this + 9);
  if (v13 && (*(_BYTE *)(v13 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 52) = *(_DWORD *)(v13 + 8);
    *(_BYTE *)(v6 + 56) = 1;
  }
  v14 = *((_QWORD *)this + 6);
  if (v14 && (*(_BYTE *)(v14 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 60) = *(_DWORD *)(v14 + 8);
    *(_BYTE *)(v6 + 64) = 1;
  }
  v15 = *((_QWORD *)this + 8);
  if (v15 && (*(_BYTE *)(v15 + 12) & 1) != 0)
  {
    *(_DWORD *)(v6 + 20) = *(_DWORD *)(v15 + 8);
    *(_BYTE *)(v6 + 24) = 1;
  }
  v16 = (int *)*((_QWORD *)this + 1);
  v17 = (int *)*((_QWORD *)this + 2);
  if (v16 == v17)
    return;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    v21 = *v16;
    if ((unint64_t)v19 >= v20)
    {
      v22 = (v19 - v18) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v20 - (_QWORD)v18) >> 1 > v23)
        v23 = (uint64_t)(v20 - (_QWORD)v18) >> 1;
      if (v20 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v24);
      else
        v25 = 0;
      v26 = (char *)(v24 + 4 * v22);
      *(_DWORD *)v26 = v21;
      v27 = v26 + 4;
      while (v19 != v18)
      {
        v28 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v26 - 1) = v28;
        v26 -= 4;
      }
      v20 = v24 + 4 * v25;
      if (v18)
        operator delete(v18);
      v18 = v26;
      v19 = v27;
    }
    else
    {
      *(_DWORD *)v19 = v21;
      v19 += 4;
    }
    ++v16;
  }
  while (v16 != v17);
  if (v18 == v19)
    goto LABEL_65;
  v29 = v19 - v18;
  v30 = (v19 - v18) >> 2;
  v31 = v7[11];
  v32 = (char *)v7[9];
  if (v30 > (v31 - (uint64_t)v32) >> 2)
  {
    if (v32)
    {
      v7[10] = v32;
      operator delete(v32);
      v31 = 0;
      *v44 = 0;
      v44[1] = 0;
      v44[2] = 0;
    }
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_68;
    v33 = v31 >> 1;
    if (v31 >> 1 <= v30)
      v33 = (v19 - v18) >> 2;
    v34 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v33;
    if (v34 >> 62)
LABEL_68:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
    v7[10] = v32;
    v35 = (char **)(v7 + 10);
    *(v35 - 1) = v32;
    v35[1] = &v32[4 * v36];
    goto LABEL_62;
  }
  v38 = (char *)v7[10];
  v35 = (char **)(v7 + 10);
  v37 = v38;
  v39 = v38 - v32;
  v40 = (v38 - v32) >> 2;
  if (v40 >= v30)
  {
LABEL_62:
    v42 = v32;
    v43 = v18;
    goto LABEL_63;
  }
  v41 = &v18[4 * v40];
  if (v37 != v32)
  {
    memmove(v32, v18, v39);
    v32 = *v35;
  }
  v29 = v19 - v41;
  if (v19 != v41)
  {
    v42 = v32;
    v43 = v41;
LABEL_63:
    memmove(v42, v43, v29);
  }
  *v35 = &v32[v29];
  if (v18)
LABEL_65:
    operator delete(v18);
}

void sub_1C1FE4BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9)
{
  void *v9;
  uint64_t v11;

  if (v9)
    operator delete(v9);
  v11 = *a9;
  *a9 = 0;
  if (v11)
    std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v11);
  _Unwind_Resume(exception_object);
}

void std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3BB720CLL);
}

_QWORD *siri::ontology::buildEntitySpanMap(_QWORD *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  siri::ontology *v18;
  uint64_t v19;
  siri::ontology **v20;
  siri::ontology **v21;
  siri::ontology **v22;
  siri::ontology **v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  void ***v40;
  void ***v41;
  uint64_t v42;
  std::string *v43;
  std::string *v44;
  std::string v45;
  char v46;
  std::string v47;
  char v48;
  std::string v49;
  char v50;
  siri::ontology::UsoEntitySpan *v51;
  _QWORD v52[4];
  std::string *v53[4];
  void **v54[2];

  v2 = (uint64_t *)result[13];
  for (i = (uint64_t *)result[14]; v2 != i; ++v2)
  {
    v5 = *v2;
    v6 = operator new();
    v53[1] = 0;
    v53[2] = 0;
    v52[1] = 0;
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_BYTE *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 64) = 0;
    *(_BYTE *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_OWORD *)(v6 + 112) = 0u;
    v53[0] = 0;
    *(_QWORD *)(v6 + 144) = 0;
    *(_OWORD *)(v6 + 128) = 0u;
    v52[2] = 0;
    v51 = (siri::ontology::UsoEntitySpan *)v6;
    v52[0] = 0;
    *(_BYTE *)(v6 + 152) = 0;
    *(_BYTE *)(v6 + 176) = 0;
    v54[0] = (void **)v52;
    std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](v54);
    v54[0] = (void **)v53;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](v54);
    v7 = *(_QWORD *)(v5 + 56);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (*(char *)(v8 + 23) < 0)
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
        else
          v49 = *(std::string *)v8;
        v50 = 1;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6, (__n128 *)&v49);
        if (v50)
        {
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
        }
      }
    }
    v9 = *(_QWORD *)(v5 + 64);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        if (*(char *)(v10 + 23) < 0)
          std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
        else
          v47 = *(std::string *)v10;
        v48 = 1;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 + 152, (__n128 *)&v47);
        if (v48)
        {
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
    }
    v11 = *(_DWORD *)(v5 + 116);
    if (v11)
    {
      *(_DWORD *)(v6 + 32) = v11;
      *(_BYTE *)(v6 + 36) = 1;
    }
    v12 = *(_QWORD *)(v5 + 40);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (*(char *)(v13 + 23) < 0)
          std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        else
          v45 = *(std::string *)v13;
        v46 = 1;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 + 40, (__n128 *)&v45);
        if (v46)
        {
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
        }
      }
    }
    v14 = *(_QWORD *)(v5 + 104);
    if (v14 && (*(_BYTE *)(v14 + 12) & 1) != 0)
    {
      v15 = *(_DWORD *)(v14 + 8);
      *(_BYTE *)(v6 + 116) = 1;
      *(_DWORD *)(v6 + 112) = v15;
    }
    v16 = *(_QWORD *)(v5 + 32);
    if (v16 && (*(_BYTE *)(v16 + 12) & 1) != 0)
    {
      v17 = *(_DWORD *)(v16 + 8);
      *(_BYTE *)(v6 + 124) = 1;
      *(_DWORD *)(v6 + 120) = v17;
    }
    v18 = *(siri::ontology **)(v5 + 48);
    if (v18)
    {
      siri::ontology::populateMatchInfo(v18, (uint64_t *)v53);
      if (*(_BYTE *)(v6 + 80))
      {
        v19 = *(_QWORD *)(v6 + 72);
        *(std::string **)(v6 + 72) = v53[0];
        if (v19)
          std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v19);
      }
      else
      {
        *(std::string **)(v6 + 72) = v53[0];
        *(_BYTE *)(v6 + 80) = 1;
      }
    }
    v20 = *(siri::ontology ***)(v5 + 8);
    v21 = *(siri::ontology ***)(v5 + 16);
    while (v20 != v21)
    {
      siri::ontology::populateAlternative(*v20, v53);
      v44 = v53[0];
      siri::ontology::UsoEntitySpan::addAlternative();
      if (v44)
        std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100]((uint64_t)v44);
      ++v20;
    }
    v22 = *(siri::ontology ***)(v5 + 80);
    v23 = *(siri::ontology ***)(v5 + 88);
    while (v22 != v23)
    {
      siri::ontology::populateSpanProperty(*v22, (uint64_t *)v53);
      v43 = v53[0];
      siri::ontology::UsoEntitySpan::addSpanProperty();
      if (v43)
        std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100]((uint64_t)v43);
      ++v22;
    }
    v24 = *(unsigned int *)(v5 + 112);
    v53[0] = (std::string *)v24;
    result = std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, v24, v53);
    v25 = result;
    v27 = (uint64_t *)result[4];
    v26 = result[5];
    if ((unint64_t)v27 >= v26)
    {
      v28 = result[3];
      v29 = ((uint64_t)v27 - v28) >> 3;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v31 = v26 - v28;
      if (v31 >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v33 = (char *)operator new(8 * v32);
      }
      else
      {
        v33 = 0;
      }
      v34 = (uint64_t *)&v33[8 * v29];
      v51 = 0;
      *v34 = v6;
      v35 = v34 + 1;
      v37 = (_QWORD *)v25[3];
      v36 = (_QWORD *)v25[4];
      if (v36 == v37)
      {
        v39 = vdupq_n_s64((unint64_t)v36);
      }
      else
      {
        do
        {
          v38 = *--v36;
          *v36 = 0;
          *--v34 = v38;
        }
        while (v36 != v37);
        v39 = *(int64x2_t *)(v25 + 3);
      }
      v25[3] = v34;
      v25[4] = v35;
      v25[5] = &v33[8 * v32];
      v41 = (void ***)v39.i64[1];
      v40 = (void ***)v39.i64[0];
      while (v41 != v40)
        std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](--v41);
      if (v40)
        operator delete(v40);
      result = v51;
      v25[4] = v35;
      if (result)
      {
        siri::ontology::UsoEntitySpan::~UsoEntitySpan((void **)result);
        result = (_QWORD *)MEMORY[0x1C3BB720C](v42, 0x1032C403F51C822);
      }
    }
    else
    {
      *v27 = v6;
      result[4] = v27 + 1;
    }
  }
  return result;
}

void sub_1C1FE5070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1C1FE50B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](a10);
  JUMPOUT(0x1C1FE50A4);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BB720CLL);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1C1FE5584(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntitySpan::~UsoEntitySpan(void **this)
{
  uint64_t v2;
  void **v3;

  if (*((_BYTE *)this + 176) && *((char *)this + 175) < 0)
    operator delete(this[19]);
  v3 = this + 16;
  std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 11;
  std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((_BYTE *)this + 80))
  {
    v2 = (uint64_t)this[9];
    this[9] = 0;
    if (v2)
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v2);
  }
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

void **std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](void ***a1)
{
  void **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::ontology::UsoEntitySpan::~UsoEntitySpan(result);
    JUMPOUT(0x1C3BB720CLL);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t siri::ontology::UsoGraphProtoReader::fromProtobuf(siri::ontology::UsoGraphProtoReader *this, const sirinluexternal::UsoGraph *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  _QWORD *v50;
  siri::ontology **v51;
  siri::ontology **v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  _QWORD *v57;
  _QWORD *i;
  unint64_t v59;
  _QWORD *v60;
  float v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  siri::ontology::UsoGraphProtoReader *v70;
  unint64_t v71;
  char *v72;
  const sirinluexternal::UsoNode *v73;
  siri::ontology::oname::graph::ontology_init *NodeName;
  unsigned int v75;
  siri::ontology::oname::graph::ontology_init *v76;
  const void *OperatorNode;
  siri::ontology::oname::graph::ontology_init *v78;
  uint64_t v79;
  __int128 *v80;
  __int128 v81;
  uint64_t IntNode;
  uint64_t StringNode;
  uint8x8_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *j;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD **v104;
  _QWORD *k;
  unint64_t v106;
  float v107;
  _BOOL8 v109;
  unint64_t v110;
  unint64_t v111;
  size_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint8x8_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *m;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  void ***v130;
  void ***v131;
  void **v132;
  NSObject *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t result;
  uint64_t v139;
  std::string *v140;
  std::string *v141;
  uint64_t *v142;
  char *v143;
  siri::ontology::UsoGraphProtoReader *v144;
  char *v145;
  void **v146;
  uint64_t v147;
  uint64_t v148;
  void *__p[2];
  __int128 v150;
  int v151;
  void *v152;
  uint8_t buf[16];
  __int128 v154;
  float v155;
  std::string v156;
  char v157;
  uint64_t v158[4];
  int v159;
  uint64_t v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  char v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 8);
    v7 = (int *)(v5 + 16);
  }
  else
  {
    v6 = *(_QWORD **)(*(_QWORD *)this + 128);
    v7 = (int *)(v6 + 1);
  }
  v8 = *v7;
  *((_QWORD *)a3 + 1) = *v6;
  *((_DWORD *)a3 + 4) = v8;
  v9 = operator new();
  v158[0] = 0;
  LODWORD(v158[1]) = 0;
  MEMORY[0x1C3BB7038](v9, v158);
  v160 = v9;
  v10 = *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10);
  if (v10)
  {
    if (v10 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10 >> 3);
    v145 = &v11[8 * v12];
  }
  else
  {
    v11 = 0;
    v145 = 0;
  }
  memset(v158, 0, sizeof(v158));
  v159 = 1065353216;
  v13 = (uint64_t *)*((_QWORD *)a2 + 7);
  v142 = (uint64_t *)*((_QWORD *)a2 + 8);
  v143 = v11;
  v144 = this;
  if (v13 == v142)
  {
LABEL_82:
    *(_OWORD *)buf = 0u;
    v154 = 0u;
    v155 = 1.0;
    v46 = (unint64_t *)*((_QWORD *)a2 + 1);
    v47 = (unint64_t *)*((_QWORD *)a2 + 2);
    while (v46 != v47)
    {
      v48 = *v46;
      if ((*(_BYTE *)(*v46 + 40) & 1) != 0)
        v49 = *(_DWORD *)(v48 + 32);
      else
        v49 = -1;
      v50 = (_QWORD *)operator new();
      *(_DWORD *)v50 = v49;
      v50[2] = 0;
      v50[3] = 0;
      v50[1] = 0;
      v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      v51 = *(siri::ontology ***)(v48 + 8);
      v52 = *(siri::ontology ***)(v48 + 16);
      while (v51 != v52)
      {
        siri::ontology::populateUtteranceSpan(*v51, __p);
        v152 = __p[0];
        siri::ontology::UsoUtteranceAlignment::addSpan();
        v53 = v152;
        v152 = 0;
        if (v53)
          MEMORY[0x1C3BB720C](v53, 0x1000C405AAC83ABLL);
        ++v51;
      }
      v54 = *(unsigned int *)(v48 + 36);
      v167.__r_.__value_.__r.__words[0] = 0;
      __p[0] = (void *)v54;
      __p[1] = v50;
      v55 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v56 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          v48 = v54;
          if (*(_QWORD *)&buf[8] <= v54)
            v48 = v54 % *(_QWORD *)&buf[8];
        }
        else
        {
          v48 = (*(_DWORD *)&buf[8] - 1) & v54;
        }
        v57 = *(_QWORD **)(*(_QWORD *)buf + 8 * v48);
        if (v57)
        {
          for (i = (_QWORD *)*v57; i; i = (_QWORD *)*i)
          {
            v59 = i[1];
            if (v59 == v54)
            {
              if (i[2] == v54)
                goto LABEL_129;
            }
            else
            {
              if (v56.u32[0] > 1uLL)
              {
                if (v59 >= *(_QWORD *)&buf[8])
                  v59 %= *(_QWORD *)&buf[8];
              }
              else
              {
                v59 &= *(_QWORD *)&buf[8] - 1;
              }
              if (v59 != v48)
                break;
            }
          }
        }
      }
      v60 = operator new(0x20uLL);
      *v60 = 0;
      v60[1] = v54;
      __p[1] = 0;
      v60[2] = v54;
      v60[3] = v50;
      v61 = (float)(unint64_t)(*((_QWORD *)&v154 + 1) + 1);
      if (!v55 || (float)(v155 * (float)v55) < v61)
      {
        v62 = (v55 & (v55 - 1)) != 0;
        if (v55 < 3)
          v62 = 1;
        v63 = v62 | (2 * v55);
        v64 = vcvtps_u32_f32(v61 / v155);
        if (v63 <= v64)
          v65 = v64;
        else
          v65 = v63;
        std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>>>::__rehash<true>((uint64_t)buf, v65);
        v55 = *(_QWORD *)&buf[8];
        if ((*(_QWORD *)&buf[8] & (*(_QWORD *)&buf[8] - 1)) != 0)
        {
          if (*(_QWORD *)&buf[8] <= v54)
            v48 = v54 % *(_QWORD *)&buf[8];
          else
            v48 = v54;
        }
        else
        {
          v48 = (*(_DWORD *)&buf[8] - 1) & v54;
        }
      }
      v66 = *(_QWORD *)buf;
      v67 = *(_QWORD **)(*(_QWORD *)buf + 8 * v48);
      if (v67)
      {
        *v60 = *v67;
      }
      else
      {
        *v60 = v154;
        *(_QWORD *)&v154 = v60;
        *(_QWORD *)(v66 + 8 * v48) = &v154;
        if (!*v60)
          goto LABEL_128;
        v68 = *(_QWORD *)(*v60 + 8);
        if ((v55 & (v55 - 1)) != 0)
        {
          if (v68 >= v55)
            v68 %= v55;
        }
        else
        {
          v68 &= v55 - 1;
        }
        v67 = (_QWORD *)(*(_QWORD *)buf + 8 * v68);
      }
      *v67 = v60;
LABEL_128:
      ++*((_QWORD *)&v154 + 1);
LABEL_129:
      std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)&__p[1]);
      std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)&v167);
      ++v46;
    }
    *(_OWORD *)__p = 0u;
    v150 = 0u;
    v151 = 1065353216;
    siri::ontology::buildEntitySpanMap(a2, (uint64_t *)__p);
    v69 = *((_QWORD *)a2 + 10);
    v70 = v144;
    if (*((_QWORD *)a2 + 11) == v69)
    {
      v122 = v11;
      goto LABEL_284;
    }
    v71 = 0;
    v72 = v11;
LABEL_132:
    v73 = *(const sirinluexternal::UsoNode **)(v69 + 8 * v71);
    NodeName = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphProtoReader::getOrCreateNodeName(v70, v73);
    v75 = *((_DWORD *)NodeName + 8);
    if (v75 >= 4)
    {
      if (v75 - 5 >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(&v167, "UsoGraphProtoReaderException");
        std::operator+<char>();
        siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>((uint64_t)&v167, 415, "fromProtobuf");
      }
      OperatorNode = (const void *)siri::ontology::UsoGraph::createOperatorNode();
      goto LABEL_252;
    }
    siri::ontology::oname::graph::ontology_init::Root(NodeName);
    v76 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
    if ((_DWORD)v76)
    {
      OperatorNode = *(const void **)(v160 + 88);
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::primitive_String(v76);
      v78 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
      if ((_DWORD)v78)
      {
        v79 = *((_QWORD *)v73 + 6);
        if (v79 && (v80 = *(__int128 **)(v79 + 8)) != 0)
        {
          if (*((char *)v80 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)v80, *((_QWORD *)v80 + 1));
          }
          else
          {
            v81 = *v80;
            v167.__r_.__value_.__r.__words[2] = *((_QWORD *)v80 + 2);
            *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v81;
          }
          v168 = 1;
          StringNode = siri::ontology::UsoGraph::createStringNode();
        }
        else
        {
          v167.__r_.__value_.__s.__data_[0] = 0;
          v168 = 0;
          StringNode = siri::ontology::UsoGraph::createStringNode();
        }
        OperatorNode = (const void *)StringNode;
        if (v168 && SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v167.__r_.__value_.__l.__data_);
      }
      else
      {
        siri::ontology::oname::graph::ontology_init::primitive_Integer(v78);
        if (siri::ontology::operator==())
        {
          IntNode = siri::ontology::UsoGraph::createIntNode();
        }
        else if (*((_QWORD *)v73 + 7))
        {
          siri::ontology::UsoGraphProtoReader::getOrCreateVerbName((siri::ontology::UsoVocabManager **)v144, v73);
          IntNode = siri::ontology::UsoGraph::createTaskNode();
        }
        else
        {
          IntNode = siri::ontology::UsoGraph::createEntityNode();
        }
        OperatorNode = (const void *)IntNode;
      }
    }
    if (v158[1])
    {
      v84 = (uint8x8_t)vcnt_s8((int8x8_t)v158[1]);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        v85 = v71;
        if (v71 >= v158[1])
          v85 = v71 % v158[1];
      }
      else
      {
        v85 = (v158[1] - 1) & v71;
      }
      v86 = *(_QWORD **)(v158[0] + 8 * v85);
      if (v86)
      {
        for (j = (_QWORD *)*v86; j; j = (_QWORD *)*j)
        {
          v88 = j[1];
          if (v88 == v71)
          {
            if (j[2] == v71)
            {
              v167.__r_.__value_.__r.__words[0] = v71;
              v98 = std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v158, v71, &v167);
              v99 = (uint64_t *)v98[3];
              v100 = (uint64_t *)v98[4];
              while (v99 != v100)
              {
                v101 = *v99;
                *v99 = 0;
                v148 = v101;
                siri::ontology::UsoEntityNode::addIdentifier();
                v102 = v148;
                v148 = 0;
                if (v102)
                  std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v102);
                ++v99;
              }
              break;
            }
          }
          else
          {
            if (v84.u32[0] > 1uLL)
            {
              if (v88 >= v158[1])
                v88 %= v158[1];
            }
            else
            {
              v88 &= v158[1] - 1;
            }
            if (v88 != v85)
              break;
          }
        }
      }
    }
    v89 = *(_QWORD *)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_236;
    v90 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
    v90.i16[0] = vaddlv_u8(v90);
    v91 = v90.u32[0];
    if (v90.u32[0] > 1uLL)
    {
      v92 = v71;
      if (v71 >= *(_QWORD *)&buf[8])
        v92 = v71 % *(_QWORD *)&buf[8];
    }
    else
    {
      v92 = (*(_QWORD *)&buf[8] - 1) & v71;
    }
    v93 = *(_QWORD *)buf;
    v94 = *(_QWORD **)(*(_QWORD *)buf + 8 * v92);
    if (!v94)
      goto LABEL_236;
    v95 = (_QWORD *)*v94;
    if (!v95)
      goto LABEL_236;
    v96 = *(_QWORD *)&buf[8] - 1;
    while (1)
    {
      v97 = v95[1];
      if (v97 == v71)
      {
        if (v95[2] == v71)
        {
          if (v91 > 1)
          {
            v103 = v71;
            if (v71 >= v89)
              v103 = v71 % v89;
          }
          else
          {
            v103 = v96 & v71;
          }
          v104 = *(_QWORD ***)(v93 + 8 * v103);
          if (v104)
          {
            for (k = *v104; k; k = (_QWORD *)*k)
            {
              v106 = k[1];
              if (v106 == v71)
              {
                if (k[2] == v71)
                  goto LABEL_235;
              }
              else
              {
                if (v91 > 1)
                {
                  if (v106 >= v89)
                    v106 %= v89;
                }
                else
                {
                  v106 &= v96;
                }
                if (v106 != v103)
                  break;
              }
            }
          }
          k = operator new(0x20uLL);
          *k = 0;
          k[1] = v71;
          v107 = (float)(unint64_t)(*((_QWORD *)&v154 + 1) + 1);
          k[2] = v71;
          k[3] = 0;
          if ((float)(v155 * (float)v89) < v107)
          {
            v109 = v89 < 3 || v91 > 1;
            v110 = v109 | (2 * v89);
            v111 = vcvtps_u32_f32(v107 / v155);
            if (v110 <= v111)
              v112 = v111;
            else
              v112 = v110;
            std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>>>::__rehash<true>((uint64_t)buf, v112);
            v89 = *(_QWORD *)&buf[8];
            if ((*(_QWORD *)&buf[8] & (*(_QWORD *)&buf[8] - 1)) != 0)
            {
              if (v71 >= *(_QWORD *)&buf[8])
                v103 = v71 % *(_QWORD *)&buf[8];
              else
                v103 = v71;
            }
            else
            {
              v103 = (*(_QWORD *)&buf[8] - 1) & v71;
            }
          }
          v113 = *(_QWORD *)buf;
          v114 = *(_QWORD **)(*(_QWORD *)buf + 8 * v103);
          if (v114)
          {
            *k = *v114;
            goto LABEL_233;
          }
          *k = v154;
          *(_QWORD *)&v154 = k;
          *(_QWORD *)(v113 + 8 * v103) = &v154;
          if (*k)
          {
            v115 = *(_QWORD *)(*k + 8);
            if ((v89 & (v89 - 1)) != 0)
            {
              if (v115 >= v89)
                v115 %= v89;
            }
            else
            {
              v115 &= v89 - 1;
            }
            v114 = (_QWORD *)(*(_QWORD *)buf + 8 * v115);
LABEL_233:
            *v114 = k;
          }
          ++*((_QWORD *)&v154 + 1);
LABEL_235:
          v116 = k[3];
          k[3] = 0;
          v147 = v116;
          siri::ontology::UsoEntityNode::addUtteranceAlignment();
          std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&v147);
LABEL_236:
          if (__p[1])
          {
            v117 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v117.i16[0] = vaddlv_u8(v117);
            if (v117.u32[0] > 1uLL)
            {
              v118 = v71;
              if ((void *)v71 >= __p[1])
                v118 = v71 % (unint64_t)__p[1];
            }
            else
            {
              v118 = ((unint64_t)__p[1] - 1) & v71;
            }
            v119 = (_QWORD *)*((_QWORD *)__p[0] + v118);
            if (v119)
            {
              for (m = (_QWORD *)*v119; m; m = (_QWORD *)*m)
              {
                v121 = m[1];
                if (v121 == v71)
                {
                  if (m[2] == v71)
                  {
                    v167.__r_.__value_.__r.__words[0] = v71;
                    v129 = std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t *)__p, v71, &v167);
                    v130 = (void ***)v129[3];
                    v131 = (void ***)v129[4];
                    while (v130 != v131)
                    {
                      v132 = *v130;
                      *v130 = 0;
                      v146 = v132;
                      siri::ontology::UsoEntityNode::addEntitySpan();
                      if (v146)
                      {
                        siri::ontology::UsoEntitySpan::~UsoEntitySpan(v146);
                        MEMORY[0x1C3BB720C]();
                      }
                      ++v130;
                    }
                    break;
                  }
                }
                else
                {
                  if (v117.u32[0] > 1uLL)
                  {
                    if ((void *)v121 >= __p[1])
                      v121 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v121 &= (unint64_t)__p[1] - 1;
                  }
                  if (v121 != v118)
                    break;
                }
              }
            }
          }
LABEL_252:
          if (v72 >= v145)
          {
            v123 = (v72 - v11) >> 3;
            v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if ((v145 - v11) >> 2 > v124)
              v124 = (v145 - v11) >> 2;
            if ((unint64_t)(v145 - v11) >= 0x7FFFFFFFFFFFFFF8)
              v125 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v125 = v124;
            if (v125)
              v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v125);
            else
              v126 = 0;
            v127 = (char *)(v125 + 8 * v123);
            *(_QWORD *)v127 = OperatorNode;
            v122 = v127 + 8;
            if (v72 == v11)
            {
              v70 = v144;
            }
            else
            {
              v70 = v144;
              do
              {
                v128 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v127 - 1) = v128;
                v127 -= 8;
              }
              while (v72 != v11);
            }
            v145 = (char *)(v125 + 8 * v126);
            if (v11)
              operator delete(v11);
            v11 = v127;
          }
          else
          {
            *(_QWORD *)v72 = OperatorNode;
            v122 = v72 + 8;
            v70 = v144;
          }
          ++v71;
          v69 = *((_QWORD *)a2 + 10);
          v72 = v122;
          if (v71 >= (*((_QWORD *)a2 + 11) - v69) >> 3)
          {
LABEL_284:
            v134 = *((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 5) != v134)
            {
              v135 = 0;
              v136 = (v122 - v11) >> 3;
              do
              {
                v137 = *(_QWORD *)(v134 + 8 * v135);
                if (v136 <= *(unsigned int *)(v137 + 16))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v167, "UsoGraphProtoReaderException");
                  std::to_string(&v166, *(_DWORD *)(v137 + 16));
                  v141 = std::string::insert(&v166, 0, "Invalid edge from_index: ");
                  v141->__r_.__value_.__l.__size_ = 0;
                  v141->__r_.__value_.__r.__words[2] = 0;
                  v141->__r_.__value_.__r.__words[0] = 0;
                  siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>((uint64_t)&v167, 432, "fromProtobuf");
                }
                if (v136 <= *(unsigned int *)(v137 + 20))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v167, "UsoGraphProtoReaderException");
                  std::to_string(&v166, *(_DWORD *)(v137 + 20));
                  v140 = std::string::insert(&v166, 0, "Invalid edge to_index: ");
                  v140->__r_.__value_.__l.__size_ = 0;
                  v140->__r_.__value_.__r.__words[2] = 0;
                  v140->__r_.__value_.__r.__words[0] = 0;
                  siri::ontology::throwException<siri::ontology::UsoGraphProtoReaderException,char const*,int,char const*,std::string>((uint64_t)&v167, 436, "fromProtobuf");
                }
                siri::ontology::UsoGraphProtoReader::getOrCreateEdgeName((siri::ontology::UsoVocabManager **)v70, *(const sirinluexternal::UsoEdgeLabel **)(v137 + 8));
                if (v136 <= *(unsigned int *)(v137 + 16) || v136 <= *(unsigned int *)(v137 + 20))
                  std::vector<std::reference_wrapper<siri::ontology::UsoGraphNode>>::__throw_out_of_range[abi:ne180100]();
                siri::ontology::UsoGraphNode::setSuccessor();
                ++v135;
                v134 = *((_QWORD *)a2 + 4);
              }
              while (v135 < (*((_QWORD *)a2 + 5) - v134) >> 3);
            }
            siri::ontology::UsoGraph::deepCopyToGraph();
            std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>>>::~__hash_table((uint64_t)__p);
            std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>>>::~__hash_table((uint64_t)buf);
            goto LABEL_292;
          }
          goto LABEL_132;
        }
      }
      else
      {
        if (v90.u32[0] > 1uLL)
        {
          if (v97 >= *(_QWORD *)&buf[8])
            v97 %= *(_QWORD *)&buf[8];
        }
        else
        {
          v97 &= v96;
        }
        if (v97 != v92)
          goto LABEL_236;
      }
      v95 = (_QWORD *)*v95;
      if (!v95)
        goto LABEL_236;
    }
  }
  while (1)
  {
    v14 = *v13;
    v15 = *(_QWORD *)(*v13 + 32);
    if (!v15)
      break;
    v16 = *(_QWORD *)(v14 + 8);
    if (!v16)
      break;
    v17 = operator new();
    if (*(char *)(v15 + 23) < 0)
      std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
    else
      v162 = *(std::string *)v15;
    if (*(char *)(v16 + 23) < 0)
      std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
    else
      v161 = *(std::string *)v16;
    v167.__r_.__value_.__s.__data_[0] = 0;
    v168 = 0;
    v18 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v164, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
    else
      v164 = v162;
    v19 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v163, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
    else
      v163 = v161;
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)__p, (__int128 *)&v167);
    v20 = SHIBYTE(v164.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v166, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
    else
      v166 = v164;
    v21 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v165, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
    else
      v165 = v163;
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)buf, (__int128 *)__p);
    *(std::string *)v17 = v166;
    *(std::string *)(v17 + 24) = v165;
    *(_BYTE *)(v17 + 48) = 0;
    *(_BYTE *)(v17 + 72) = 0;
    if (BYTE8(v154))
    {
      *(_OWORD *)(v17 + 48) = *(_OWORD *)buf;
      *(_QWORD *)(v17 + 64) = v154;
      *(_BYTE *)(v17 + 72) = 1;
    }
    *(_QWORD *)(v17 + 112) = 0;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_OWORD *)(v17 + 96) = 0u;
    if (BYTE8(v150) && SBYTE7(v150) < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    v11 = v143;
    if (v20 < 0)
    {
      operator delete(v164.__r_.__value_.__l.__data_);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_38:
        if (v18 < 0)
          goto LABEL_45;
        goto LABEL_39;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v161.__r_.__value_.__l.__data_);
    if (v18 < 0)
LABEL_45:
      operator delete(v162.__r_.__value_.__l.__data_);
LABEL_39:
    v22 = *(_QWORD *)(v14 + 16);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        if (*(char *)(v23 + 23) < 0)
          std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
        else
          v156 = *(std::string *)v23;
        v157 = 1;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v17 + 48, (__n128 *)&v156);
        if (v157)
        {
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v156.__r_.__value_.__l.__data_);
        }
      }
    }
    v24 = *(_QWORD *)(v14 + 24);
    if (v24 && (*(_BYTE *)(v24 + 16) & 1) != 0)
    {
      *(_QWORD *)(v17 + 80) = *(_QWORD *)(v24 + 8);
      *(_BYTE *)(v17 + 88) = 1;
    }
    v25 = *(_DWORD *)(v14 + 52);
    if (v25)
    {
      *(_DWORD *)(v17 + 96) = v25;
      *(_BYTE *)(v17 + 100) = 1;
    }
    v26 = *(_DWORD *)(v14 + 40);
    if (v26)
    {
      *(_DWORD *)(v17 + 104) = v26;
      *(_BYTE *)(v17 + 108) = 1;
    }
    v27 = *(_DWORD *)(v14 + 44);
    if (v27)
    {
      *(_DWORD *)(v17 + 112) = v27;
      *(_BYTE *)(v17 + 116) = 1;
    }
    v28 = *(unsigned int *)(v14 + 48);
    *(_QWORD *)buf = v28;
    v29 = std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v158, v28, buf);
    v30 = v29;
    v31 = (uint64_t *)v29[4];
    v32 = v29[5];
    if ((unint64_t)v31 >= v32)
    {
      v33 = (_QWORD *)v29[3];
      v34 = v31 - v33;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v36 = v32 - (_QWORD)v33;
      if (v36 >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = (char *)operator new(8 * v37);
        v33 = (_QWORD *)v30[3];
        v31 = (uint64_t *)v30[4];
      }
      else
      {
        v38 = 0;
      }
      v39 = (uint64_t *)&v38[8 * v34];
      *v39 = v17;
      v40 = v39 + 1;
      while (v31 != v33)
      {
        v41 = *--v31;
        *v31 = 0;
        *--v39 = v41;
      }
      v42 = (_QWORD *)v30[3];
      v43 = (_QWORD *)v30[4];
      v30[3] = v39;
      v30[4] = v40;
      v30[5] = &v38[8 * v37];
      while (v43 != v42)
      {
        v45 = *--v43;
        v44 = v45;
        *v43 = 0;
        if (v45)
          std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v44);
      }
      if (v42)
        operator delete(v42);
      v30[4] = v40;
    }
    else
    {
      *v31 = v17;
      v29[4] = v31 + 1;
    }
    if (++v13 == v142)
      goto LABEL_82;
  }
  if (siri::ontology::createUsoGraphProtoReaderLogContext(void)::once != -1)
    dispatch_once(&siri::ontology::createUsoGraphProtoReaderLogContext(void)::once, &__block_literal_global_13788);
  v133 = siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext;
  if (os_log_type_enabled((os_log_t)siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C1D3C000, v133, OS_LOG_TYPE_ERROR, "Malformed graph. Invalid Identifier: missing value or backingAppBundleId. Returning empty graph.", buf, 2u);
  }
LABEL_292:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>>>::~__hash_table((uint64_t)v158);
  if (v11)
    operator delete(v11);
  result = v160;
  if (v160)
  {
    v139 = MEMORY[0x1C3BB7050]();
    return MEMORY[0x1C3BB720C](v139, 0x10A0C403D23BABBLL);
  }
  return result;
}

void sub_1C1FE69C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  void *v55;
  NSObject *v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;

  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](v51 + 3);
  operator delete(v51);
  if (a2 == 2)
  {
    v55 = __cxa_begin_catch(a1);
    if (siri::ontology::createUsoGraphProtoReaderLogContext(void)::once != -1)
      dispatch_once(&siri::ontology::createUsoGraphProtoReaderLogContext(void)::once, &__block_literal_global_13788);
    v56 = siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext;
    if (os_log_type_enabled((os_log_t)siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext, OS_LOG_TYPE_ERROR))
    {
      v59 = (*(uint64_t (**)(void *))(*(_QWORD *)v55 + 16))(v55);
      *(_DWORD *)(v52 - 144) = 136315138;
      *(_QWORD *)(v52 - 140) = v59;
      _os_log_error_impl(&dword_1C1D3C000, v56, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v52 - 144), 0xCu);
    }
  }
  else
  {
    if (a2 != 1)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>>>::~__hash_table((uint64_t)&a29);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>>>::~__hash_table((uint64_t)&a35);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>>>::~__hash_table((uint64_t)&a45);
      if (v50)
        operator delete(v50);
      std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a50);
      _Unwind_Resume(a1);
    }
    v57 = __cxa_begin_catch(a1);
    if (siri::ontology::createUsoGraphProtoReaderLogContext(void)::once != -1)
      dispatch_once(&siri::ontology::createUsoGraphProtoReaderLogContext(void)::once, &__block_literal_global_13788);
    v58 = siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext;
    if (os_log_type_enabled((os_log_t)siri::ontology::createUsoGraphProtoReaderLogContext(void)::rdLogContext, OS_LOG_TYPE_ERROR))
    {
      v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v57 + 16))(v57);
      *(_DWORD *)(v52 - 144) = 136315138;
      *(_QWORD *)(v52 - 140) = v60;
      _os_log_error_impl(&dword_1C1D3C000, v58, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v52 - 144), 0xCu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C1FE6790);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1C1FE7370(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t *std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD **)(v1 + 16);
      v4 = *(void **)(v1 + 8);
      if (v3 != v2)
      {
        do
        {
          v6 = *--v3;
          v5 = v6;
          *v3 = 0;
          if (v6)
            MEMORY[0x1C3BB720C](v5, 0x1000C405AAC83ABLL);
        }
        while (v3 != v2);
        v4 = *(void **)(v1 + 8);
      }
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v4);
    }
    JUMPOUT(0x1C3BB720CLL);
  }
  return result;
}

void std::vector<std::reference_wrapper<siri::ontology::UsoGraphNode>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]();
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_out_of_range[abi:ne180100]()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E7BA5D20, MEMORY[0x1E0DE42E0]);
}

void sub_1C1FE7674(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t siri::ontology::UsoGraphProtoReader::fromProtobuf@<X0>(siri::ontology::UsoGraphProtoReader *this@<X0>, const sirinluexternal::UsoGraph *a2@<X1>, siri::ontology::UsoGraph **a3@<X8>)
{
  siri::ontology::UsoGraph *v6;

  v6 = (siri::ontology::UsoGraph *)operator new();
  MEMORY[0x1C3BB7044](v6, this);
  *a3 = v6;
  return siri::ontology::UsoGraphProtoReader::fromProtobuf(this, a2, v6);
}

void sub_1C1FE7964(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::SystemReportedSuccess::~SystemReportedSuccess(sirinluexternal::SystemReportedSuccess *this)
{
  sirinluexternal::SystemReportedSuccess::~SystemReportedSuccess(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BB18A0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemReportedSuccess::readFrom(sirinluexternal::SystemReportedSuccess *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::SystemReportedSuccess::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::SystemReportedSuccess::formatText(sirinluexternal::SystemReportedSuccess *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "task");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::SystemReportedSuccess::SystemReportedSuccess(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB18A0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BB18A0;
  return this;
}

sirinluexternal::SystemReportedSuccess *sirinluexternal::SystemReportedSuccess::SystemReportedSuccess(sirinluexternal::SystemReportedSuccess *this, const sirinluexternal::SystemReportedSuccess *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BB18A0;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::SystemReportedSuccess::operator=(uint64_t a1, const sirinluexternal::SystemReportedSuccess *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::SystemReportedSuccess *)a1 != a2)
  {
    sirinluexternal::SystemReportedSuccess::SystemReportedSuccess((sirinluexternal::SystemReportedSuccess *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::SystemReportedSuccess::~SystemReportedSuccess((sirinluexternal::SystemReportedSuccess *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::SystemReportedSuccess *a2, sirinluexternal::SystemReportedSuccess *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::SystemReportedSuccess::SystemReportedSuccess(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BB18A0;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::SystemReportedSuccess::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::SystemReportedSuccess *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BB18A0;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::SystemReportedSuccess::~SystemReportedSuccess((sirinluexternal::SystemReportedSuccess *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::SystemReportedSuccess::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::SystemReportedSuccess::hash_value(sirinluexternal::SystemReportedSuccess *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::SystemReportedSuccess::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemReportedSuccess::makeTask(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALRewriteHypothesisReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  SIRINLUEXTERNALUUID *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
          objc_storeStrong((id *)(a1 + 16), v18);
          if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v20;

          continue;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v24 = 0;
          }
          *(_QWORD *)(a1 + 8) = v24;
          continue;
        case 4u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0)
          goto LABEL_36;
        v25 += 7;
        v15 = v26++ >= 9;
        if (v15)
        {
          LODWORD(v27) = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v27) = 0;
LABEL_38:
      *(_DWORD *)(a1 + 24) = v27;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALSNLP_INTERMEDIATEITFMContextFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponse *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponse);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponse **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UserParse::~UserParse(sirinluexternal::UserParse *this)
{
  sirinluexternal::UserParse::~UserParse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E7BB18F0;
  v7 = (void **)((char *)this + 64);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserParse::readFrom(sirinluexternal::UserParse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 64);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          v21 = operator new();
          *(_QWORD *)v21 = &off_1E7BB0CB8;
          *(_QWORD *)(v21 + 24) = 0;
          v22 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v21;
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            v21 = *((_QWORD *)this + 3);
          }
          goto LABEL_39;
        case 2u:
          PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<>(v8);
          v21 = *(_QWORD *)(*((_QWORD *)this + 9) - 8);
          goto LABEL_39;
        case 3u:
          *((_BYTE *)this + 88) |= 2u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_46;
        case 4u:
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          v25 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v24;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100](v25);
          PB::Reader::read();
          goto LABEL_47;
        case 5u:
          v21 = operator new();
          *(_QWORD *)v21 = &off_1E7BB21B8;
          *(_DWORD *)(v21 + 12) = 0;
          *(_DWORD *)(v21 + 16) = 0;
          v26 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v21;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v21 = *((_QWORD *)this + 7);
          }
          goto LABEL_39;
        case 6u:
          v21 = operator new();
          *(_QWORD *)v21 = &off_1E7BAF268;
          *(_QWORD *)(v21 + 8) = 0;
          *(_DWORD *)(v21 + 16) = 0;
          v27 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v21;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v21 = *((_QWORD *)this + 4);
          }
          goto LABEL_39;
        case 7u:
          *((_BYTE *)this + 88) |= 1u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v29);
LABEL_46:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_44:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_47;
        case 8u:
          v21 = operator new();
          *(_QWORD *)v21 = &off_1E7BB0FA0;
          *(_QWORD *)(v21 + 8) = 0;
          v28 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v21;
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            v21 = *((_QWORD *)this + 2);
          }
LABEL_39:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_47;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
    }
    while (!v15);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_47:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t sirinluexternal::UserParse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base ***)(v3 + 64);
  v6 = *(const PB::Base ***)(v3 + 72);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 88) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
  if (*(_QWORD *)(v3 + 40))
    this = PB::Writer::write();
  v8 = *(const PB::Base **)(v3 + 56);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = *(const PB::Base **)(v3 + 32);
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  if ((*(_BYTE *)(v3 + 88) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v10 = *(const PB::Base **)(v3 + 16);
  if (v10)
    return PB::Writer::writeSubmessage(a2, v10);
  return this;
}

uint64_t sirinluexternal::UserParse::formatText(sirinluexternal::UserParse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 88) & 1) != 0)
    PB::TextFormatter::format(a2, "comparable_probability", *((double *)this + 1));
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction_outcome");
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "id_a");
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "parser");
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 88) & 2) != 0)
    PB::TextFormatter::format(a2, "probability", *((double *)this + 6));
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "repetition_result");
  v9 = (uint64_t *)*((_QWORD *)this + 8);
  v10 = (uint64_t *)*((_QWORD *)this + 9);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "user_dialog_acts");
  }
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::UserParse::UserParse(sirinluexternal::UserParse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BB18F0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BB18F0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  return result;
}

sirinluexternal::UserParse *sirinluexternal::UserParse::UserParse(sirinluexternal::UserParse *this, const sirinluexternal::UUID **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const sirinluexternal::UserDialogAct **v9;
  const sirinluexternal::UserDialogAct **i;
  const sirinluexternal::UUID *v11;
  std::string *v12;
  std::string *v13;
  const sirinluexternal::UUID *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  const sirinluexternal::UUID *v18;
  char v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const sirinluexternal::UUID *v25;
  char v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  const sirinluexternal::UUID *v31;
  uint64_t v32;
  const sirinluexternal::UUID *v33;
  int v34;
  uint64_t v35;

  *(_QWORD *)this = &off_1E7BB18F0;
  *((_OWORD *)this + 1) = 0u;
  v4 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (uint64_t *)((char *)this + 56);
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  if (a2[3])
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, a2[3]);
    v8 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = (const sirinluexternal::UserDialogAct **)a2[8];
  for (i = (const sirinluexternal::UserDialogAct **)a2[9]; v9 != i; ++v9)
    PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>((sirinluexternal::UserDialogAct ***)this + 8, *v9);
  if (((_BYTE)a2[11] & 2) != 0)
  {
    v11 = a2[6];
    *((_BYTE *)this + 88) |= 2u;
    *((_QWORD *)this + 6) = v11;
  }
  if (a2[5])
  {
    v12 = (std::string *)operator new();
    v13 = v12;
    v14 = a2[5];
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *(_OWORD *)v14;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    v16 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v13;
    if (v16)
      std::default_delete<std::string>::operator()[abi:ne180100](v16);
  }
  if (a2[7])
  {
    v17 = operator new();
    v18 = a2[7];
    *(_QWORD *)v17 = &off_1E7BB21B8;
    *(_DWORD *)(v17 + 12) = 0;
    *(_DWORD *)(v17 + 16) = 0;
    v19 = *((_BYTE *)v18 + 16);
    if ((v19 & 1) != 0)
    {
      v21 = *((_DWORD *)v18 + 2);
      *(_BYTE *)(v17 + 16) = 1;
      *(_DWORD *)(v17 + 8) = v21;
      v20 = 3;
      if ((v19 & 2) == 0)
        goto LABEL_20;
    }
    else
    {
      v20 = 2;
      if ((*((_BYTE *)v18 + 16) & 2) == 0)
      {
LABEL_20:
        v23 = *v5;
        *v5 = v17;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        goto LABEL_22;
      }
    }
    v22 = *((_DWORD *)v18 + 3);
    *(_BYTE *)(v17 + 16) = v20;
    *(_DWORD *)(v17 + 12) = v22;
    goto LABEL_20;
  }
LABEL_22:
  if (!a2[4])
    goto LABEL_30;
  v24 = operator new();
  v25 = a2[4];
  *(_QWORD *)v24 = &off_1E7BAF268;
  *(_QWORD *)(v24 + 8) = 0;
  *(_DWORD *)(v24 + 16) = 0;
  v26 = *((_BYTE *)v25 + 16);
  if ((v26 & 1) != 0)
  {
    v28 = *((_DWORD *)v25 + 2);
    *(_BYTE *)(v24 + 16) = 1;
    *(_DWORD *)(v24 + 8) = v28;
    v27 = 3;
    if ((v26 & 2) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v27 = 2;
  if ((*((_BYTE *)v25 + 16) & 2) != 0)
  {
LABEL_27:
    v29 = *((_DWORD *)v25 + 3);
    *(_BYTE *)(v24 + 16) = v27;
    *(_DWORD *)(v24 + 12) = v29;
  }
LABEL_28:
  v30 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v24;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_30:
  if (((_BYTE)a2[11] & 1) != 0)
  {
    v31 = a2[1];
    *((_BYTE *)this + 88) |= 1u;
    *((_QWORD *)this + 1) = v31;
  }
  if (a2[2])
  {
    v32 = operator new();
    v33 = a2[2];
    *(_QWORD *)v32 = &off_1E7BB0FA0;
    *(_QWORD *)(v32 + 8) = 0;
    if ((*((_BYTE *)v33 + 12) & 1) != 0)
    {
      v34 = *((_DWORD *)v33 + 2);
      *(_BYTE *)(v32 + 12) = 1;
      *(_DWORD *)(v32 + 8) = v34;
    }
    v35 = *v4;
    *v4 = v32;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  return this;
}

uint64_t sirinluexternal::UserParse::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluexternal::UserParse::UserParse((sirinluexternal::UserParse *)&v12, a2);
    v3 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v16;
    v16 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v17;
    v17 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v13;
    v13 = v6;
    v7 = v15;
    v9 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v7;
    v10 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v19;
    v19 = v10;
    v14 = v9;
    v15 = v8;
    sirinluexternal::UserParse::~UserParse((sirinluexternal::UserParse *)&v12);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::UserParse *a2, sirinluexternal::UserParse *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  return result;
}

