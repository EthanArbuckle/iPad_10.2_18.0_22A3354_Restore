void sub_1B2F70624(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  std::mutex *v2;
  uint64_t v3;
  _QWORD **v4;
  void **v5;
  _QWORD **v6;
  std::mutex *v7;
  void *v9;
  void *v10;

  v6 = v4;
  v7 = v2;
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(v3, *v6);
  PCSharedMutex::~PCSharedMutex(v7);
  v9 = (void *)*((_QWORD *)v1 + 72);
  if (v9)
  {
    *((_QWORD *)v1 + 73) = v9;
    operator delete(v9);
  }
  v10 = *v5;
  if (*v5)
  {
    *((_QWORD *)v1 + 70) = v10;
    operator delete(v10);
  }
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::~OZCameraBehavior(OZCameraBehavior *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E65C71F0;
  *((_QWORD *)this + 2) = &unk_1E65C7510;
  *((_QWORD *)this + 6) = &unk_1E65C7768;
  *((_QWORD *)this + 42) = &unk_1E65C77C0;
  *((_QWORD *)this + 67) = &unk_1E65C77E8;
  OZCameraBehavior::flushCache(this);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 832, *((_QWORD **)this + 105));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 728));
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy((uint64_t)this + 704, *((_QWORD **)this + 89));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 600));
  v2 = (void *)*((_QWORD *)this + 72);
  if (v2)
  {
    *((_QWORD *)this + 73) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 69);
  if (v3)
  {
    *((_QWORD *)this + 70) = v3;
    operator delete(v3);
  }
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZCameraBehavior::~OZCameraBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZCameraBehavior::~OZCameraBehavior(OZCameraBehavior *this)
{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 16));
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 48));
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 336));
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 536));
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZCameraBehavior::~OZCameraBehavior((OZCameraBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZCameraBehavior::operator=(uint64_t a1)
{
  OZChannelBehavior::operator=();
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 832, *(_QWORD **)(a1 + 840));
  *(_QWORD *)(a1 + 832) = a1 + 840;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 856) = 0x4014000000000000;
}

unint64_t OZCameraBehavior::addCurveNodesToChannels(OZCameraBehavior *this, OZSceneNode *a2)
{
  return OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 1);
}

unint64_t OZCameraBehavior::addTransRotCurveNodesToChannels(OZCameraBehavior *this, OZSceneNode *lpsrc, int a3, int a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char **v62;
  char **v63;
  OZChannel *v64;
  OZSingleChanCurveNode *v65;
  OZChannel **v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  OZChannel **v74;
  char *v75;
  char *v76;
  OZChannel *v77;
  OZSingleChanCurveNode **v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  OZSingleChanCurveNode **v86;
  char *v87;
  char *v88;
  OZSingleChanCurveNode *v89;
  int v91;
  char v92;
  char *__p;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;

  if (lpsrc)
  else
    v7 = 0;
  *((_QWORD *)this + 70) = *((_QWORD *)this + 69);
  *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
  if (!v7)
    return 0;
  v8 = 0;
  __p = 0;
  v94 = 0;
  v98 = 0;
  if (a3)
  {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, 1uLL);
    *(_QWORD *)v10 = v7 + 1352;
    v11 = v10 + 8;
    __p = v10;
    v98 = (unint64_t)&v10[8 * v9];
    v12 = v7 + 1504;
    if ((unint64_t)(v10 + 8) >= v98)
    {
      v15 = (8 * v9) >> 2;
      if (v15 <= 2)
        v15 = 2;
      if ((unint64_t)(8 * v9) >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, v16);
      else
        v17 = 0;
      v18 = (char *)(v17 + 1);
      v19 = (char *)&v17[v16];
      v17[1] = v12;
      v13 = (char *)(v17 + 2);
      v20 = v11;
      if (v11 != __p)
      {
        do
        {
          v21 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v18 - 1) = v21;
          v18 -= 8;
        }
        while (v20 != __p);
        v20 = __p;
      }
      __p = v18;
      v98 = (unint64_t)v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *((_QWORD *)v10 + 1) = v12;
      v13 = v10 + 16;
    }
    v95 = v13;
    v22 = v7 + 1952;
    if ((unint64_t)v13 >= v98)
    {
      v23 = (v13 - __p) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v24 = (uint64_t)(v98 - (_QWORD)__p) >> 2;
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if (v98 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, v25);
      else
        v26 = 0;
      v27 = &v26[8 * v23];
      v28 = &v26[8 * v25];
      *(_QWORD *)v27 = v22;
      v8 = v27 + 8;
      v29 = v95;
      if (v95 != __p)
      {
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v27 - 1) = v30;
          v27 -= 8;
        }
        while (v29 != __p);
        v29 = __p;
      }
      __p = v27;
      v98 = (unint64_t)v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v13 = v22;
      v8 = v13 + 8;
    }
    v94 = v8;
  }
  v91 = a3;
  v92 = a4;
  if (a4)
  {
    v31 = v7 + 2240;
    if ((unint64_t)v8 >= v98)
    {
      v33 = (v8 - __p) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v34 = (uint64_t)(v98 - (_QWORD)__p) >> 2;
      if (v34 <= v33 + 1)
        v34 = v33 + 1;
      if (v98 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, v35);
      else
        v36 = 0;
      v37 = &v36[8 * v33];
      v38 = &v36[8 * v35];
      *(_QWORD *)v37 = v31;
      v32 = v37 + 8;
      v39 = v94;
      if (v94 != __p)
      {
        do
        {
          v40 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *((_QWORD *)v37 - 1) = v40;
          v37 -= 8;
        }
        while (v39 != __p);
        v39 = __p;
      }
      __p = v37;
      v98 = (unint64_t)v38;
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_QWORD *)v8 = v31;
      v32 = v8 + 8;
    }
    v96 = v32;
    v41 = v7 + 2392;
    if ((unint64_t)v32 >= v98)
    {
      v43 = (v32 - __p) >> 3;
      if ((unint64_t)(v43 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v44 = (uint64_t)(v98 - (_QWORD)__p) >> 2;
      if (v44 <= v43 + 1)
        v44 = v43 + 1;
      if (v98 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, v45);
      else
        v46 = 0;
      v47 = &v46[8 * v43];
      v48 = &v46[8 * v45];
      *(_QWORD *)v47 = v41;
      v42 = v47 + 8;
      v49 = v96;
      if (v96 != __p)
      {
        do
        {
          v50 = *((_QWORD *)v49 - 1);
          v49 -= 8;
          *((_QWORD *)v47 - 1) = v50;
          v47 -= 8;
        }
        while (v49 != __p);
        v49 = __p;
      }
      __p = v47;
      v98 = (unint64_t)v48;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_QWORD *)v32 = v41;
      v42 = v32 + 8;
    }
    v97 = v42;
    v51 = v7 + 2544;
    if ((unint64_t)v42 >= v98)
    {
      v52 = (v42 - __p) >> 3;
      if ((unint64_t)(v52 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v53 = (uint64_t)(v98 - (_QWORD)__p) >> 2;
      if (v53 <= v52 + 1)
        v53 = v52 + 1;
      if (v98 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      if (v54)
        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v98, v54);
      else
        v55 = 0;
      v56 = &v55[8 * v52];
      v57 = &v55[8 * v54];
      *(_QWORD *)v56 = v51;
      v8 = v56 + 8;
      v58 = v97;
      if (v97 != __p)
      {
        do
        {
          v59 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v56 - 1) = v59;
          v56 -= 8;
        }
        while (v58 != __p);
        v58 = __p;
      }
      __p = v56;
      v98 = (unint64_t)v57;
      if (v58)
        operator delete(v58);
    }
    else
    {
      *(_QWORD *)v42 = v51;
      v8 = v42 + 8;
    }
    v94 = v8;
  }
  v60 = __p;
  if (v8 != __p)
  {
    v61 = 0;
    v62 = (char **)((char *)this + 552);
    v63 = (char **)((char *)this + 576);
    do
    {
      v64 = *(OZChannel **)&v60[8 * v61];
      v65 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v65, (OZCameraBehavior *)((char *)this + 536), v64, v61);
      OZChannel::appendCurveProcessingNode(v64, v65);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v65);
      v66 = (OZChannel **)*((_QWORD *)this + 70);
      v67 = *((_QWORD *)this + 71);
      if ((unint64_t)v66 >= v67)
      {
        v69 = ((char *)v66 - *v62) >> 3;
        if ((unint64_t)(v69 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v70 = v67 - (_QWORD)*v62;
        v71 = v70 >> 2;
        if (v70 >> 2 <= (unint64_t)(v69 + 1))
          v71 = v69 + 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v71;
        if (v72)
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 568, v72);
        else
          v73 = 0;
        v74 = (OZChannel **)&v73[8 * v69];
        *v74 = v64;
        v68 = v74 + 1;
        v75 = (char *)*((_QWORD *)this + 70);
        v76 = (char *)*((_QWORD *)this + 69);
        if (v75 != v76)
        {
          do
          {
            v77 = (OZChannel *)*((_QWORD *)v75 - 1);
            v75 -= 8;
            *--v74 = v77;
          }
          while (v75 != v76);
          v75 = *v62;
        }
        *((_QWORD *)this + 69) = v74;
        *((_QWORD *)this + 70) = v68;
        *((_QWORD *)this + 71) = &v73[8 * v72];
        if (v75)
          operator delete(v75);
      }
      else
      {
        *v66 = v64;
        v68 = v66 + 1;
      }
      *((_QWORD *)this + 70) = v68;
      v78 = (OZSingleChanCurveNode **)*((_QWORD *)this + 73);
      v79 = *((_QWORD *)this + 74);
      if ((unint64_t)v78 >= v79)
      {
        v81 = ((char *)v78 - *v63) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v82 = v79 - (_QWORD)*v63;
        v83 = v82 >> 2;
        if (v82 >> 2 <= (unint64_t)(v81 + 1))
          v83 = v81 + 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
          v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 592, v84);
        else
          v85 = 0;
        v86 = (OZSingleChanCurveNode **)&v85[8 * v81];
        *v86 = v65;
        v80 = v86 + 1;
        v87 = (char *)*((_QWORD *)this + 73);
        v88 = (char *)*((_QWORD *)this + 72);
        if (v87 != v88)
        {
          do
          {
            v89 = (OZSingleChanCurveNode *)*((_QWORD *)v87 - 1);
            v87 -= 8;
            *--v86 = v89;
          }
          while (v87 != v88);
          v87 = *v63;
        }
        *((_QWORD *)this + 72) = v86;
        *((_QWORD *)this + 73) = v80;
        *((_QWORD *)this + 74) = &v85[8 * v84];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v78 = v65;
        v80 = v78 + 1;
      }
      *((_QWORD *)this + 73) = v80;
      ++v61;
      v60 = __p;
    }
    while (v61 < (v94 - __p) >> 3);
  }
  PCSharedMutex::lock((std::mutex *)((char *)this + 600));
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy((uint64_t)this + 704, *((_QWORD **)this + 89));
  *((_QWORD *)this + 88) = (char *)this + 712;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  PCSharedMutex::unlock((std::mutex *)((char *)this + 600));
  if (v91)
  {
    OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v7 + 1216));
    if ((v92 & 1) != 0)
      OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)(v7 + 2104));
  }
  else if ((v92 & 1) != 0)
  {
    OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v7 + 2104));
  }
  v14 = (unint64_t)(v94 - __p) >> 3;
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_1B2F70F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZCameraBehavior::didAddToNode(OZCameraBehavior *this, OZSceneNode *a2)
{
  uint64_t result;

  result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((_BYTE *)this + 544))
  {
    result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
    if (result)
    {
      result = (*(uint64_t (**)(OZCameraBehavior *, OZSceneNode *))(*(_QWORD *)this + 760))(this, a2);
      *((_BYTE *)this + 544) = 1;
    }
  }
  return result;
}

uint64_t OZCameraBehavior::didAddSceneNodeToScene(OZCameraBehavior *this, OZScene *a2)
{
  uint64_t result;
  uint64_t v4;

  result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((_BYTE *)this + 544))
  {
    v4 = (*(uint64_t (**)(OZCameraBehavior *))(*(_QWORD *)this + 320))(this);
    result = (*(uint64_t (**)(OZCameraBehavior *, uint64_t))(*(_QWORD *)this + 760))(this, v4);
    *((_BYTE *)this + 544) = 1;
  }
  return result;
}

uint64_t OZCameraBehavior::willRemove(OZCameraBehavior *this)
{
  OZChannelBehavior::willRemove(this);
  *((_BYTE *)this + 544) = 0;
  *((_QWORD *)this + 70) = *((_QWORD *)this + 69);
  *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
  return (*(uint64_t (**)(OZCameraBehavior *))(*(_QWORD *)this + 736))(this);
}

void OZCameraBehavior::notify(OZCameraBehavior *this, __int16 a2)
{
  OZChannelBehavior::notify(this, a2);
  if ((a2 & 0x981C) != 0)
    (*(void (**)(OZCameraBehavior *))(*(_QWORD *)this + 736))(this);
}

void `non-virtual thunk to'OZCameraBehavior::notify(OZCameraBehavior *this, __int16 a2)
{
  char *v3;

  v3 = (char *)this - 336;
  OZChannelBehavior::notify((OZCameraBehavior *)((char *)this - 336), a2);
  if ((a2 & 0x981C) != 0)
    (*(void (**)(char *))(*(_QWORD *)v3 + 736))(v3);
}

void OZCameraBehavior::flushCache(OZCameraBehavior *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 600);
  PCSharedMutex::lock((std::mutex *)((char *)this + 600));
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy((uint64_t)this + 704, *((_QWORD **)this + 89));
  *((_QWORD *)this + 88) = (char *)this + 712;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  PCSharedMutex::unlock(v2);
  PCSharedMutex::lock((std::mutex *)((char *)this + 728));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 832, *((_QWORD **)this + 105));
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  PCSharedMutex::unlock((std::mutex *)((char *)this + 728));
}

void OZCameraBehavior::getCurrentValuesOfAffectedChannels(uint64_t a1, CMTime *a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *PreviousProcessingNode;
  char *v14;
  CMTime *v15;

  v6 = (std::mutex *)(a1 + 600);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 600));
  v7 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>(a1 + 704, a2);
  v8 = v7;
  if (a1 + 712 != v7 && v7 + 56 != a3)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)a3, *(char **)(v7 + 56), *(_QWORD *)(v7 + 64), (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3);
  PCSharedMutex::unlock_shared(v6);
  if (a1 + 712 == v8)
  {
    v9 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v9)
    {
      v10 = 0;
      v11 = v9 >> 3;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      do
      {
        PreviousProcessingNode = (void *)OZChannel::getPreviousProcessingNode(*(OZChannel **)(*(_QWORD *)(a1 + 552) + 8 * v10), *(void **)(*(_QWORD *)(a1 + 576) + 8 * v10));
        *(double *)(*(_QWORD *)a3 + 8 * v10) = OZChannel::getCurveValueForNode(*(OZChannel **)(*(_QWORD *)(a1 + 552) + 8 * v10), a2, PreviousProcessingNode, 0.0);
        ++v10;
      }
      while (v12 != v10);
    }
    PCSharedMutex::lock(v6);
    v15 = a2;
    v14 = (char *)std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)(a1 + 704), a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15)+ 56;
    if (v14 != (char *)a3)
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v14, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    PCSharedMutex::unlock(v6);
  }
}

void sub_1B2F7133C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double OZCameraBehavior::getValueOfAffectedChannel(OZCameraBehavior *this, const CMTime *a2, int a3)
{
  void *PreviousProcessingNode;

  PreviousProcessingNode = (void *)OZChannel::getPreviousProcessingNode(*(OZChannel **)(*((_QWORD *)this + 69) + 8 * a3), *(void **)(*((_QWORD *)this + 72) + 8 * a3));
  return OZChannel::getCurveValueForNode(*(OZChannel **)(*((_QWORD *)this + 69) + 8 * a3), a2, PreviousProcessingNode, 0.0);
}

BOOL OZCameraBehavior::CompareDeltaKeys::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMTime v6;
  CMTime time1;

  time1 = *(CMTime *)a2;
  v6 = *(CMTime *)a3;
  if (!CMTimeCompare(&time1, &v6))
    return *(_DWORD *)(a2 + 24) < *(_DWORD *)(a3 + 24);
  time1 = *(CMTime *)a2;
  v6 = *(CMTime *)a3;
  return CMTimeCompare(&time1, &v6) >> 31;
}

double OZCameraBehavior::getInputDelta(OZCameraBehavior *this, uint64_t a2, const CMTime *a3, double a4)
{
  double v5;
  std::mutex *v9;
  double *v10;
  OZCameraBehavior *v11;
  double v12;
  _QWORD v14[3];
  CMTime v15;
  int v16;
  CMTime *v17;

  v5 = 0.0;
  if (*((double *)this + 107) > 3.0)
  {
    v15 = *a3;
    v16 = a2;
    v9 = (std::mutex *)((char *)this + 728);
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 728));
    v10 = (double *)std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::find<OZCameraBehavior::DeltaKey>((uint64_t)this + 832, (uint64_t)&v15);
    v11 = (OZCameraBehavior *)v10;
    if ((double *)((char *)this + 840) != v10)
      v5 = a4 - v10[8];
    PCSharedMutex::unlock_shared(v9);
    if ((OZCameraBehavior *)((char *)this + 840) == v11)
    {
      memset(v14, 0, sizeof(v14));
      (*(void (**)(_QWORD *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                           + 328))(v14, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
      v12 = (*(double (**)(OZCameraBehavior *, _QWORD *, uint64_t))(*(_QWORD *)this + 752))(this, v14, a2);
      PCSharedMutex::lock(v9);
      v17 = &v15;
      *((double *)std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__emplace_unique_key_args<OZCameraBehavior::DeltaKey,std::piecewise_construct_t const&,std::tuple<OZCameraBehavior::DeltaKey const&>,std::tuple<>>((uint64_t **)this + 104, (uint64_t)&v15, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17)+ 8) = v12;
      PCSharedMutex::unlock(v9);
      return a4 - v12;
    }
  }
  return v5;
}

void sub_1B2F715A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCameraBehavior::parseBegin(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  unint64_t v4;

  OZBehavior::parseBegin(this, a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 107) = (double)v4;
  return 1;
}

uint64_t `non-virtual thunk to'OZCameraBehavior::parseBegin(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  unint64_t v4;

  OZBehavior::parseBegin((OZCameraBehavior *)((char *)this - 48), a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 101) = (double)v4;
  return 1;
}

uint64_t OZCameraBehavior::parseEnd(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZCameraBehavior::parseEnd(OZCameraBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd((OZCameraBehavior *)((char *)this - 48), a2);
  return 1;
}

double OZCameraBehavior::getFocalDistance(OZCameraBehavior *this, OZChannelBehavior *a2, const CMTime *a3, const CMTime *a4)
{
  double ChannelValueBeforeThis;
  double v8;
  double v9;
  LiCamera *v10;
  double v11;
  CMTime v13;
  PCSharedCount v14;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17;

  ChannelValueBeforeThis = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 6808), a3);
  v8 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 4880), a3);
  if (ChannelValueBeforeThis <= -0.0000001 || (v9 = 0.0, ChannelValueBeforeThis >= 0.0000001))
  {
    v13 = *a3;
    OZCamera::cameraAtTime(a2, &v13, &v14);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v16, &v14);
    PCSharedCount::~PCSharedCount(&v15);
    if (!v16.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PCSharedCount *__return_ptr))(*(_QWORD *)v16.var0 + 272))(&v14);
    if (!v16.var0)
      throw_PCNullPointerException(1);
    v10 = (LiCamera *)(*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)v16.var0 + 688))(v16.var0);
    v9 = LiCamera::computeFocalDistance(v10, ChannelValueBeforeThis, v11, v8, *(double *)&v14.var0, *(double *)&v15.var0);
    PCSharedCount::~PCSharedCount(&v17);
  }
  return v9;
}

void sub_1B2F717A8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::getPositionBeforeThis(OZCameraBehavior *this@<X0>, OZTransformNode *a2@<X1>, const CMTime *a3@<X2>, double *a4@<X8>)
{
  double ChannelValueBeforeThis;
  double v9;
  double v10;

  ChannelValueBeforeThis = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 1352), a3);
  v9 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 1504), a3);
  v10 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 1952), a3);
  *a4 = ChannelValueBeforeThis;
  a4[1] = v9;
  a4[2] = v10;
}

void OZCameraBehavior::getRotationBeforeThis(OZCameraBehavior *this@<X0>, OZCamera *a2@<X1>, const CMTime *a3@<X2>, double *a4@<X8>)
{
  double ChannelValueBeforeThis;
  double v9;
  double v10;

  ChannelValueBeforeThis = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 2240), a3);
  v9 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 2392), a3);
  v10 = OZChannelBehavior::getChannelValueBeforeThis(this, (OZChannel *)((char *)a2 + 2544), a3);
  *a4 = ChannelValueBeforeThis;
  a4[1] = v9;
  a4[2] = v10;
}

double OZCameraBehavior::getRotationBeforeThisAsQuat@<D0>(OZCameraBehavior *this@<X0>, OZCamera *a2@<X1>, const CMTime *a3@<X2>, double *a4@<X8>)
{
  double v5;
  __double2 v6;
  double v7;
  __double2 v8;
  double v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double result;
  double v20;
  double v21[3];

  OZCameraBehavior::getRotationBeforeThis(this, a2, a3, v21);
  v5 = v21[1];
  v20 = v21[2];
  v6 = __sincos_stret(v21[0] * 0.5);
  v7 = v6.__sinval * 0.0;
  v8 = __sincos_stret(v5 * 0.5);
  v9 = v8.__sinval * 0.0;
  v10 = __sincos_stret(v20 * 0.5);
  v11 = v6.__cosval * v8.__cosval - (v7 * v9 + v7 * v8.__sinval + v6.__sinval * v9);
  v12 = v6.__sinval * v8.__cosval + v6.__cosval * v9 + v7 * v8.__sinval - v7 * v9;
  v13 = v7 * v8.__cosval + v6.__cosval * v8.__sinval + v6.__sinval * v9 - v7 * v9;
  v14 = v7 * v9 - v6.__sinval * v8.__sinval + v7 * v8.__cosval + v6.__cosval * v9;
  v15 = v10.__sinval * 0.0 * v12;
  v16 = v10.__sinval * 0.0 * v13;
  v17 = v10.__sinval * 0.0 * v11;
  v18 = v10.__sinval * 0.0 * v14;
  a4[2] = v18 - v10.__sinval * v12 + v10.__cosval * v13 + v17;
  a4[3] = v15 - v16 + v10.__cosval * v14 + v10.__sinval * v11;
  result = v10.__sinval * v13 - v18 + v10.__cosval * v12 + v17;
  *a4 = v10.__cosval * v11 - (v10.__sinval * v14 + v15 + v16);
  a4[1] = result;
  return result;
}

double OZCameraBehavior::calcEaseInEaseOut(OZCameraBehavior *this, double result)
{
  double v2;
  double v3;
  double v4;
  double v5;
  long double v6;

  switch((int)this)
  {
    case 1:
      v2 = cos(result * 3.14159265 * 0.5);
      v3 = 1.0;
      goto LABEL_8;
    case 2:
      v4 = sin(result * 3.14159265 * 0.5);
      v5 = 0.0;
      goto LABEL_5;
    case 3:
      v6 = sin(result * 3.14159265 + -1.57079633);
      v5 = 0.5;
      v4 = v6 * 0.5;
LABEL_5:
      result = v4 + v5;
      break;
    case 4:
      result = result * result;
      break;
    case 5:
      v3 = 1.0;
      v2 = (1.0 - result) * (1.0 - result);
LABEL_8:
      result = v3 - v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t OZCameraBehavior::isActive(OZCameraBehavior *this)
{
  int v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 0, 1);
  result = 0;
  if (v2)
  {
    result = (*(uint64_t (**)(OZCameraBehavior *))(*(_QWORD *)this + 320))(this);
    if (result)
      return (*(_BYTE *)(result + 1024) & 2) == 0;
  }
  return result;
}

__n128 OZCameraBehavior::solveNode(OZCameraBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.value = result;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZCameraBehavior *, uint64_t, CMTime *, double, double))(*(_QWORD *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      result = *(__n128 *)&v14.value;
      v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZCameraBehavior::solveNode(OZCameraBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  double result;

  *(_QWORD *)&result = OZCameraBehavior::solveNode((OZCameraBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZCameraBehavior::getNeededRange(OZCameraBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

__n128 `non-virtual thunk to'OZCameraBehavior::getNeededRange(OZCameraBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

void std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>((uint64_t)a1, &v11, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::find<OZCameraBehavior::DeltaKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = a1 + 8;
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    a1 = OZCameraBehavior::CompareDeltaKeys::operator()(a1, (uint64_t)(v3 + 4), a2);
    v6 = v3 + 1;
    if (!(_DWORD)a1)
    {
      v6 = v3;
      v5 = (uint64_t)v3;
    }
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v5 == v2 || OZCameraBehavior::CompareDeltaKeys::operator()(a1, a2, v5 + 32))
    return v2;
  return v5;
}

_OWORD *std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__emplace_unique_key_args<OZCameraBehavior::DeltaKey,std::piecewise_construct_t const&,std::tuple<OZCameraBehavior::DeltaKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__find_equal<OZCameraBehavior::DeltaKey>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *(_OWORD *)((char *)*a4 + 12);
    v7[2] = **a4;
    *(_OWORD *)((char *)v7 + 44) = v9;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<OZCameraBehavior::DeltaKey,double>,std::__map_value_compare<OZCameraBehavior::DeltaKey,std::__value_type<OZCameraBehavior::DeltaKey,double>,OZCameraBehavior::CompareDeltaKeys,true>,std::allocator<std::__value_type<OZCameraBehavior::DeltaKey,double>>>::__find_equal<OZCameraBehavior::DeltaKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        a1 = OZCameraBehavior::CompareDeltaKeys::operator()(a1, a3, (uint64_t)(v4 + 4));
        if (!(_DWORD)a1)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      a1 = OZCameraBehavior::CompareDeltaKeys::operator()(a1, v8, a3);
      if (!(_DWORD)a1)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void OZClampBehavior::OZClampBehavior(OZClampBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C7880;
  v5[2] = &unk_1E65C7BC0;
  v5[6] = &unk_1E65C7E18;
  v5[42] = &unk_1E65C7E70;
  v5[67] = &unk_1E65C7E98;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Clamp Behavior Operation Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Clamp Behavior Operation"));
  OZChannelEnum::OZChannelEnum((OZClampBehavior *)((char *)this + 864), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Clamp Behavior Min"));
  OZChannelDouble::OZChannelDouble((OZClampBehavior *)((char *)this + 1120), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Clamp Behavior Max"));
  OZChannelDouble::OZChannelDouble((OZClampBehavior *)((char *)this + 1272), 10.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B2F72070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZSingleChannelBehavior *v12;
  OZChannelEnum *v13;
  OZChannel *v14;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void OZClampBehavior::OZClampBehavior(OZClampBehavior *this, const OZClampBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C7880;
  *(_QWORD *)(v5 + 16) = &unk_1E65C7BC0;
  *(_QWORD *)(v5 + 48) = &unk_1E65C7E18;
  *(_QWORD *)(v5 + 336) = &unk_1E65C7E70;
  *(_QWORD *)(v5 + 536) = &unk_1E65C7E98;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 864), (const OZClampBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1120), (const OZChannelBase *)a2 + 10, v6);
  *((_QWORD *)this + 140) = &off_1E6551358;
  *((_QWORD *)this + 142) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1272), (const OZChannelBase *)((char *)a2 + 1272), v6);
  *((_QWORD *)this + 159) = &off_1E6551358;
  *((_QWORD *)this + 161) = &unk_1E65516B8;
}

void sub_1B2F721B0(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior *v1;
  OZChannelEnum *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZClampBehavior::~OZClampBehavior(OZClampBehavior *this)
{
  *(_QWORD *)this = &off_1E65C7880;
  *((_QWORD *)this + 2) = &unk_1E65C7BC0;
  *((_QWORD *)this + 6) = &unk_1E65C7E18;
  *((_QWORD *)this + 42) = &unk_1E65C7E70;
  *((_QWORD *)this + 67) = &unk_1E65C7E98;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1272));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1120));
  OZChannelEnum::~OZChannelEnum((OZClampBehavior *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZClampBehavior::~OZClampBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZClampBehavior::~OZClampBehavior(OZClampBehavior *this)
{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 16));
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 48));
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 336));
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 536));
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZClampBehavior::~OZClampBehavior((OZClampBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZClampBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 1120, (uint64_t)v4 + 1120);
  return OZChannelBase::operator=(a1 + 1272, (uint64_t)v5 + 1272);
}

BOOL OZClampBehavior::isRebuildUIChannel(OZClampBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 864) == a2;
}

void OZClampBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  char v5;
  const CMTime *v6;
  char *v7;
  int ValueAsInt;
  int v9;
  uint64_t i;
  const void *v11;
  char *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == a2)
    return;
  v4 = 0;
  v5 = 0;
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v7 = *(char **)(v2 + 16);
    if (v7)
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v7 + 864), v6, 0.0);
    if (ValueAsInt == 2)
    {
      v5 = 1;
      v4 = 1;
    }
    else
    {
      if (ValueAsInt)
        v9 = v4;
      else
        v9 = 1;
      if (ValueAsInt == 1)
        v5 = 1;
      else
        v4 = v9;
      if ((v4 & 1) == 0)
        goto LABEL_16;
    }
    if ((v5 & 1) != 0)
      break;
LABEL_16:
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == a2)
      goto LABEL_19;
  }
  v5 = 1;
  LOBYTE(v4) = 1;
LABEL_19:
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v11 = *(const void **)(i + 16);
    if (v11)
    else
      v12 = 0;
    v13 = (OZChannelBase *)(v12 + 1120);
    if ((v4 & 1) != 0)
      OZChannelBase::resetFlag(v13, 0x400000, 1);
    else
      OZChannelBase::setFlag(v13, 0x400000, 1);
    v14 = (OZChannelBase *)(v12 + 1272);
    if ((v5 & 1) != 0)
      OZChannelBase::resetFlag(v14, 0x400000, 1);
    else
      OZChannelBase::setFlag(v14, 0x400000, 1);
  }
}

double OZClampBehavior::solveNode(OZClampBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  int ValueAsInt;
  double v8;
  double v9;
  double v10;
  double v12;
  CMTime v15;
  CMTime v16;

  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v16, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v15 = v16;
  if ((*(unsigned int (**)(OZClampBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v15, 0, 1, 1))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 864), &v16, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1120), &v16, 0.0);
    v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1272), &v16, 0.0);
    if ((ValueAsInt & 0xFFFFFFFD) != 0 || v9 <= a5)
      v12 = a5;
    else
      v12 = v9;
    if ((ValueAsInt - 1) >= 2 || v12 <= v10)
      return v12;
    else
      return v10;
  }
  return a5;
}

double `non-virtual thunk to'OZClampBehavior::solveNode(OZClampBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZClampBehavior::solveNode((OZClampBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZClampBehavior::didSetChannelInfo(OZClampBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel::setInfo((OZChannel *)((char *)this + 1120), a2);
  OZChannel::setInfo((OZChannel *)((char *)this + 1272), a2);
}

void OZDiscreteBehavior::OZDiscreteBehavior(OZDiscreteBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C7F10;
  v5[2] = &unk_1E65C8250;
  v5[6] = &unk_1E65C84A8;
  v5[42] = &unk_1E65C8500;
  v5[67] = &unk_1E65C8528;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Discrete Behavior Step Size"));
  OZChannelDouble::OZChannelDouble((OZDiscreteBehavior *)((char *)this + 864), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Discrete Behavior Offset"));
  OZChannelDouble::OZChannelDouble((OZDiscreteBehavior *)((char *)this + 1016), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 864), 0.0);
}

void sub_1B2F72744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSingleChannelBehavior *v10;
  OZChannel *v11;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior::OZDiscreteBehavior(OZDiscreteBehavior *this, const OZDiscreteBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C7F10;
  *(_QWORD *)(v5 + 16) = &unk_1E65C8250;
  *(_QWORD *)(v5 + 48) = &unk_1E65C84A8;
  *(_QWORD *)(v5 + 336) = &unk_1E65C8500;
  *(_QWORD *)(v5 + 536) = &unk_1E65C8528;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((_QWORD *)this + 127) = &off_1E6551358;
  *((_QWORD *)this + 129) = &unk_1E65516B8;
}

void sub_1B2F72848(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior *v1;
  OZChannel *v2;

  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior::~OZDiscreteBehavior(OZDiscreteBehavior *this)
{
  *(_QWORD *)this = &off_1E65C7F10;
  *((_QWORD *)this + 2) = &unk_1E65C8250;
  *((_QWORD *)this + 6) = &unk_1E65C84A8;
  *((_QWORD *)this + 42) = &unk_1E65C8500;
  *((_QWORD *)this + 67) = &unk_1E65C8528;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZDiscreteBehavior::~OZDiscreteBehavior(OZDiscreteBehavior *this)
{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 16));
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 48));
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 336));
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 536));
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZDiscreteBehavior::~OZDiscreteBehavior((OZDiscreteBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZDiscreteBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  return OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
}

long double OZDiscreteBehavior::solveNode(OZDiscreteBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  double v7;
  long double v8;
  long double v9;
  long double v10;
  CMTime v12;
  CMTime v13;

  memset(&v13, 0, sizeof(v13));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v13, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v12 = v13;
  if ((*(unsigned int (**)(OZDiscreteBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v12, 0, 1, 1))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v13, 0.0);
    v8 = v7;
    if (v7 >= 0.001)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), &v13, 0.0);
      v10 = fmod(v9, v8);
      return v10 + v8 * floor((a5 - v10) / v8 + 0.0000001);
    }
  }
  return a5;
}

long double `non-virtual thunk to'OZDiscreteBehavior::solveNode(OZDiscreteBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZDiscreteBehavior::solveNode((OZDiscreteBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZDiscreteBehavior::didSetChannelInfo(OZDiscreteBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel::setInfo((OZChannel *)((char *)this + 864), a2);
}

void OZDollyInOutBehavior::OZDollyInOutBehavior(OZDollyInOutBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C85A0;
  v5[2] = &unk_1E65C88C0;
  v5[6] = &unk_1E65C8B18;
  v5[42] = &unk_1E65C8B70;
  v5[67] = &unk_1E65C8B98;
  PCURL::PCURL((PCURL *)v7, CFSTR("Dolly In/Out Behavior Distance"));
  OZChannelDouble::OZChannelDouble((OZDollyInOutBehavior *)((char *)this + 864), 0, v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZDollyInOutBehavior *)((char *)this + 1016), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((_QWORD *)this + 159) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 864), -100000.0);
  OZChannel::setMax((OZChannel *)((char *)this + 864), 100000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), -10000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 10000.0);
  v8 = 0x500000004;
  *(_OWORD *)&v7[0].var0 = xmmword_1B35622DC;
  OZChannelEnum::setTags((OZDollyInOutBehavior *)((char *)this + 1016), (char *)v7, 6);
}

void sub_1B2F72CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZCameraBehavior *v11;
  OZChannel *v12;
  OZChannelEnum *v13;

  OZChannelEnum::~OZChannelEnum(v13);
  OZChannel::~OZChannel(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior::OZDollyInOutBehavior(OZDollyInOutBehavior *this, const OZDollyInOutBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C85A0;
  *(_QWORD *)(v5 + 16) = &unk_1E65C88C0;
  *(_QWORD *)(v5 + 48) = &unk_1E65C8B18;
  *(_QWORD *)(v5 + 336) = &unk_1E65C8B70;
  *(_QWORD *)(v5 + 536) = &unk_1E65C8B98;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZDollyInOutBehavior *)((char *)this + 1016), (const OZDollyInOutBehavior *)((char *)a2 + 1016), v6);
  *((_QWORD *)this + 159) = 0;
}

void sub_1B2F72DE0(_Unwind_Exception *a1)
{
  OZCameraBehavior *v1;
  OZChannel *v2;

  OZChannel::~OZChannel(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior::~OZDollyInOutBehavior(OZDollyInOutBehavior *this)
{
  *(_QWORD *)this = &off_1E65C85A0;
  *((_QWORD *)this + 2) = &unk_1E65C88C0;
  *((_QWORD *)this + 6) = &unk_1E65C8B18;
  *((_QWORD *)this + 42) = &unk_1E65C8B70;
  *((_QWORD *)this + 67) = &unk_1E65C8B98;
  OZChannelEnum::~OZChannelEnum((OZDollyInOutBehavior *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZDollyInOutBehavior::~OZDollyInOutBehavior(OZDollyInOutBehavior *this)
{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 16));
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 48));
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 336));
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 536));
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZDollyInOutBehavior::~OZDollyInOutBehavior((OZDollyInOutBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZDollyInOutBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  return OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
}

unint64_t OZDollyInOutBehavior::addCurveNodesToChannels(OZDollyInOutBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  void *v5;

  v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2)
  else
    v5 = 0;
  *((_QWORD *)this + 159) = v5;
  return v4;
}

double OZDollyInOutBehavior::solveNode(OZDollyInOutBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  int v9;
  uint64_t v10;
  __n128 FrameDuration;
  CMTime *v12;
  double Seconds;
  double v14;
  double v15;
  double v16;
  OZCameraBehavior *ValueAsInt;
  double v18;
  double v19;
  double v20;
  double v21;
  CMTime v23;
  void *__p[3];
  CMTime time;
  CMTime v26;
  CMTime v27;
  CMTime v28[2];
  __n128 v29;
  CMTimeEpoch v30;
  CMTime v31;
  CMTime time2;

  v9 = (*(uint64_t (**)(OZDollyInOutBehavior *, double))(*(_QWORD *)this + 768))(this, a4);
  if (a2 <= 2 && v9)
  {
    memset(&v31, 0, sizeof(v31));
    (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                         + 336))(&v31, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
    v29 = 0uLL;
    v30 = 0;
    v10 = (*(uint64_t (**)(OZDollyInOutBehavior *))(*(_QWORD *)this + 336))(this);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v29);
    (*(void (**)(CMTime *__return_ptr, OZDollyInOutBehavior *, __n128))(*(_QWORD *)this + 608))(v28, this, FrameDuration);
    v27 = v28[0];
    memset(&v26, 0, sizeof(v26));
    v23 = v28[1];
    *(__n128 *)&time2.value = v29;
    time2.epoch = v30;
    PC_CMTimeSaferSubtract(&v23, &time2, (uint64_t)&v26);
    v23 = v31;
    time2 = v27;
    PC_CMTimeSaferSubtract(&v23, &time2, (uint64_t)__p);
    *(__n128 *)&v23.value = v29;
    v23.epoch = v30;
    time2 = v26;
    v12 = CMTimeCompare(&v23, &time2) >= 0 ? (CMTime *)&v29 : &v26;
    v23 = *v12;
    operator/((__int128 *)__p, (uint64_t)&v23, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    if (Seconds >= 0.0000001)
    {
      v14 = Seconds;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v31, 0.0);
      v16 = v15;
      if (v15 <= -0.0000001 || v15 >= 0.0000001)
      {
        if (v14 > 0.9999999)
          v14 = 1.0;
        ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), MEMORY[0x1E0CA2E68], 0.0);
        v18 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v14);
        time2.value = 0;
        *(_QWORD *)&time2.timescale = 0;
        *(double *)&time2.epoch = -(v16 * v18);
        std::vector<double>::vector(__p, 3uLL);
        (*(void (**)(OZDollyInOutBehavior *, const CMTime *, void **))(*(_QWORD *)this + 744))(this, a3, __p);
        v19 = *(double *)__p[0];
        v20 = *((double *)__p[0] + 1);
        v21 = *((double *)__p[0] + 2);
        OZCameraBehavior::getRotationBeforeThisAsQuat(this, *((OZCamera **)this + 159), a3, (double *)&v23.value);
        PCQuat<double>::transform<double>((double *)&v23.value, (double *)&time2.value);
        if (a2 == 2)
        {
          a5 = v21 + *(double *)&time2.epoch;
        }
        else if (a2 == 1)
        {
          a5 = v20 + *(double *)&time2.timescale;
        }
        else
        {
          a5 = v19 + *(double *)&time2.value;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
  return a5;
}

void sub_1B2F732D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double `non-virtual thunk to'OZDollyInOutBehavior::solveNode(OZDollyInOutBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZDollyInOutBehavior::solveNode((OZDollyInOutBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B2F73354(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZChannel *v6;

  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65C8C10;
  *(_QWORD *)(v5 + 16) = &unk_1E65C8EF8;
  *(_QWORD *)(v5 + 48) = &unk_1E65C9150;
  *(_QWORD *)(v5 + 336) = &unk_1E65C91A8;
  v6 = (OZChannel *)(v5 + 664);
  OZChannel::setScale((OZChannel *)(v5 + 664), 0.1);
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, 100.0);
  OZChannel::setDefaultValue(v6, 30.0);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1376), 4.5);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1376), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 816), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 816));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1072), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1072));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1224), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1224));
}

void sub_1B2F73470(_Unwind_Exception *a1)
{
  OZAttractedToBehavior *v1;

  OZAttractedToBehavior::~OZAttractedToBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this, OZDriftAttractedToBehavior *a2, char a3)
{
  _QWORD *v3;

  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3);
  *v3 = &off_1E65C8C10;
  v3[2] = &unk_1E65C8EF8;
  v3[6] = &unk_1E65C9150;
  v3[42] = &unk_1E65C91A8;
}

void `non-virtual thunk to'OZDriftAttractedToBehavior::~OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 16));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 48));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 336));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZDriftAttractedToBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZDriftAttractedToBehavior::~OZDriftAttractedToBehavior(OZDriftAttractedToBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZDriftAttractorBehavior::OZDriftAttractorBehavior(OZDriftAttractorBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZChannel *v6;

  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65C91E8;
  *(_QWORD *)(v5 + 16) = &unk_1E65C94D8;
  *(_QWORD *)(v5 + 48) = &unk_1E65C9730;
  *(_QWORD *)(v5 + 336) = &unk_1E65C9788;
  v6 = (OZChannel *)(v5 + 792);
  OZChannel::setScale((OZChannel *)(v5 + 792), 0.1);
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, 100.0);
  OZChannel::setDefaultValue(v6, 30.0);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), 4.5);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1504), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 944), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 944));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1200), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1200));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1352), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1352));
}

void sub_1B2F7367C(_Unwind_Exception *a1)
{
  OZAttractorBehavior *v1;

  OZAttractorBehavior::~OZAttractorBehavior(v1);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior::OZDriftAttractorBehavior(OZDriftAttractorBehavior *this, OZDriftAttractorBehavior *a2, char a3)
{
  _QWORD *v3;

  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3);
  *v3 = &off_1E65C91E8;
  v3[2] = &unk_1E65C94D8;
  v3[6] = &unk_1E65C9730;
  v3[42] = &unk_1E65C9788;
}

void `non-virtual thunk to'OZDriftAttractorBehavior::~OZDriftAttractorBehavior(OZDriftAttractorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 16));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 48));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 336));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZDriftAttractorBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZDriftAttractorBehavior::~OZDriftAttractorBehavior(OZDriftAttractorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZExponentialBehavior::OZExponentialBehavior(OZExponentialBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;
  OZChannelBase *v5;

  OZRampBehavior::OZRampBehavior(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E65C97C8;
  *(_QWORD *)(v4 + 16) = &unk_1E65C9B08;
  *(_QWORD *)(v4 + 48) = &unk_1E65C9D60;
  *(_QWORD *)(v4 + 336) = &unk_1E65C9DB8;
  *(_QWORD *)(v4 + 536) = &unk_1E65C9DE0;
  v5 = (OZChannelBase *)(v4 + 1168);
  OZChannelBase::setFlag((OZChannelBase *)(v4 + 1168), 2, 0);
  OZChannelBase::saveStateAsDefault(v5);
}

void sub_1B2F737F4(_Unwind_Exception *a1)
{
  OZRampBehavior *v1;

  OZRampBehavior::~OZRampBehavior(v1);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior::OZExponentialBehavior(OZExponentialBehavior *this, const OZExponentialBehavior *a2, char a3)
{
  _QWORD *v3;

  OZRampBehavior::OZRampBehavior(this, a2, a3);
  *v3 = &off_1E65C97C8;
  v3[2] = &unk_1E65C9B08;
  v3[6] = &unk_1E65C9D60;
  v3[42] = &unk_1E65C9DB8;
  v3[67] = &unk_1E65C9DE0;
}

void `non-virtual thunk to'OZExponentialBehavior::~OZExponentialBehavior(OZExponentialBehavior *this)
{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 16));
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 48));
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 336));
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 536));
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZExponentialBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZExponentialBehavior::~OZExponentialBehavior(OZExponentialBehavior *this)
{
  OZRampBehavior::~OZRampBehavior(this);
  JUMPOUT(0x1B5E29170);
}

OZExponentialCurveNode *OZExponentialBehavior::createCurveNode(OZExponentialBehavior *this, OZChannel *a2)
{
  OZChannelInfo *var16;
  double v5;
  double v6;
  __n128 v7;
  double v8;
  OZExponentialCurveNode *v9;

  var16 = a2->var16;
  v5 = *((double *)var16 + 5);
  if (v5 != *((double *)this + 78))
  {
    *((double *)this + 78) = v5;
    (*(void (**)(OZExponentialBehavior *))(*(_QWORD *)this + 752))(this);
    var16 = a2->var16;
  }
  if (!OZChannelInfo::operator==((uint64_t)this + 544, (uint64_t)var16))
  {
    OZChannelInfo::operator=((uint64_t)this + 544, (uint64_t)a2->var16);
    (*(void (**)(OZExponentialBehavior *, char *, OZChannel *))(*(_QWORD *)this + 760))(this, (char *)this + 544, a2);
  }
  v6 = *((double *)a2->var16 + 2);
  (*((void (**)(OZChannel *))a2->var0 + 101))(a2);
  v8 = 3.40282347e38;
  if (v6 != -3.40282347e38 && v7.n128_f64[0] != 3.40282347e38)
    v8 = (*((double (**)(OZChannel *, __n128, double))a2->var0 + 101))(a2, v7, 3.40282347e38)
       - *((double *)a2->var16 + 2);
  *((double *)this + 79) = v8;
  v9 = (OZExponentialCurveNode *)operator new();
  OZExponentialCurveNode::OZExponentialCurveNode(v9, this, a2);
  return v9;
}

void sub_1B2F73A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void OZExponentialCurveNode::OZExponentialCurveNode(OZExponentialCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v5;
  void *v6;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *v5 = &off_1E65C9E58;
  if (a2)
  else
    v6 = 0;
  *((_QWORD *)this + 4) = v6;
}

void OZExponentialCurveNode::~OZExponentialCurveNode(OZExponentialCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZExponentialCurveNode::solveNode(OZExponentialCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v6;
  __n128 FrameDuration;
  OZBehavior *v8;
  OZChannel *v9;
  const CMTime *v10;
  Float64 v11;
  uint64_t v12;
  Float64 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double Seconds;
  double v20;
  Float64 v21;
  double v22;
  double v23;
  int32_t v24;
  double v25;
  CMTime v27;
  CMTime time;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32[2];
  __n128 v33;
  CMTimeEpoch v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime time2;
  CMTime time1;

  memset(&v36, 0, sizeof(v36));
  (*(void (**)(CMTime *__return_ptr, double))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 4) + 376) + 32)
                                                       + 336))(&v36, a3);
  v6 = *((_QWORD *)this + 4);
  v35 = v36;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 296))(v6, &v35, 0, 1, 1))
  {
    v33 = 0uLL;
    v34 = 0;
    FrameDuration = OZBehavior::getFrameDuration((OZBehavior *)*((_QWORD *)this + 4), &v33);
    (*(void (**)(CMTime *__return_ptr, __n128))(**((_QWORD **)this + 4) + 608))(v32, FrameDuration);
    memset(&v31, 0, sizeof(v31));
    v37 = v32[0];
    v8 = (OZBehavior *)*((_QWORD *)this + 4);
    OZBehavior::getFrameDuration(v8, (__n128 *)&time1);
    v9 = (OZChannel *)((char *)v8 + 1320);
    v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble(v9, MEMORY[0x1E0CA2E68], 0.0);
    operator*(&time1, &v30, v11);
    time1 = v37;
    time2 = v30;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v31);
    memset(&v30, 0, sizeof(v30));
    time1 = v32[0];
    time2 = v32[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
    time1 = v37;
    *(__n128 *)&time2.value = v33;
    time2.epoch = v34;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    v12 = *((_QWORD *)this + 4);
    OZBehavior::getFrameDuration((OZBehavior *)v12, (__n128 *)&time1);
    OZChannel::getValueAsDouble((OZChannel *)(v12 + 1472), v10, 0.0);
    operator*(&time1, &v37, v13);
    time1 = v29;
    time2 = v37;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
    OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 4) + 864), v10, 0.0);
    v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 4) + 1016), v10, 0.0);
    v17 = v16;
    if (v16 >= v15)
      v18 = 1.0;
    else
      v18 = -1.0;
    if (vabdd_f64(v16, v15) >= 0.0000001)
    {
      time1 = v30;
      time2 = v31;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      if (fabs(Seconds) >= 0.0000001)
      {
        v20 = log((v17 + 0.0001 - v15) * v18);
        time1 = v36;
        time2 = v31;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        v21 = CMTimeGetSeconds(&v27);
        v22 = v20 + 9.21034037;
        time1 = v36;
        time2 = v31;
        v23 = v21 / Seconds;
        if (CMTimeCompare(&time1, &time2) < 0)
          v23 = 0.0;
        time1 = v36;
        time2 = v30;
        v24 = CMTimeCompare(&time1, &time2);
        v25 = 1.0;
        if (v24 <= 0)
          v25 = v23;
        v15 = v15 + v18 * exp(v22 * v25 + -9.21034037) + -0.0001;
      }
    }
    return v15 + a4;
  }
  return a4;
}

__n128 OZExponentialCurveNode::solveNode(OZExponentialCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  unint64_t v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v9 = *(CMTime *)((_BYTE *)a2 + 5);
  result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.value = result;
  v8.epoch = *((_QWORD *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZExponentialCurveNode *, CMTime *, double, double))(*(_QWORD *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      v11 = v8;
      v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      result = *(__n128 *)&v12.value;
      v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

OZBehaviorCurveNode *OZExponentialCurveNode::cloneNode(OZExponentialCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E65C9E58;
  *((_QWORD *)v2 + 4) = *((_QWORD *)this + 4);
  return v2;
}

void sub_1B2F73FE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZExponentialCurveNode::compare(OZExponentialCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

OZCurveNodeParam *OZExponentialCurveNode::getNeededRange(OZExponentialCurveNode *this, OZCurveNodeParam *a2)
{
  (*(void (**)(_QWORD, _QWORD, OZCurveNodeParam *))(**((_QWORD **)this + 4) + 696))(*((_QWORD *)this + 4), *(unsigned int *)(*((_QWORD *)this + 2) + 24), a2);
  return a2;
}

void OZFadeInOutBehavior::OZFadeInOutBehavior(OZFadeInOutBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *v6;
  OZChannelImpl *Instance;
  OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *v8;
  OZChannelImpl *v9;
  OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *v10;
  OZChannelImpl *v11;
  OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *v12;
  OZChannelImpl *v13;
  PCString v14;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C9F50;
  v5[2] = &unk_1E65CA200;
  v5[6] = &unk_1E65CA458;
  v5[42] = &unk_1E65CA4B0;
  PCURL::PCURL((PCURL *)&v14, CFSTR("Fade In Out Behavior Fade In Time"));
  Instance = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(v6);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 536), 20.0, &v14, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, Instance, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Fade In Out Behavior Fade Out Time"));
  v9 = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 688), 20.0, &v14, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, v9, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Fade In Out Behavior Start Frame Offset"));
  v11 = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(v10);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 840), &v14, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, v11, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Fade In Out Behavior End Frame Offset"));
  v13 = (OZChannelImpl *)OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZFadeInOutBehavior *)((char *)this + 992), &v14, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, v13, 0);
  PCString::~PCString(&v14);
}

void sub_1B2F74224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;

  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F74298(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F74288);
}

void OZFadeInOutBehavior::OZFadeInOutBehavior(OZFadeInOutBehavior *this, const OZFadeInOutBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C9F50;
  *(_QWORD *)(v5 + 16) = &unk_1E65CA200;
  *(_QWORD *)(v5 + 48) = &unk_1E65CA458;
  *(_QWORD *)(v5 + 336) = &unk_1E65CA4B0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 67) = &off_1E6551358;
  *((_QWORD *)this + 69) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 688), (const OZChannelBase *)((char *)a2 + 688), v6);
  *((_QWORD *)this + 86) = &off_1E6551358;
  *((_QWORD *)this + 88) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 840), (const OZChannelBase *)((char *)a2 + 840), v6);
  *((_QWORD *)this + 105) = &off_1E6551358;
  *((_QWORD *)this + 107) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 992), (const OZChannelBase *)((char *)a2 + 992), v6);
  *((_QWORD *)this + 124) = &off_1E6551358;
  *((_QWORD *)this + 126) = &unk_1E65516B8;
}

void sub_1B2F74398(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;

  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior::~OZFadeInOutBehavior(OZFadeInOutBehavior *this)
{
  *(_QWORD *)this = &off_1E65C9F50;
  *((_QWORD *)this + 2) = &unk_1E65CA200;
  *((_QWORD *)this + 6) = &unk_1E65CA458;
  *((_QWORD *)this + 42) = &unk_1E65CA4B0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 992));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 840));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 688));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 536));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFadeInOutBehavior::~OZFadeInOutBehavior(OZFadeInOutBehavior *this)
{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 16));
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 48));
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 336));
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFadeInOutBehavior::~OZFadeInOutBehavior((OZFadeInOutBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

double OZFadeInOutBehavior::operator=(uint64_t a1, const void *a2)
{
  double *v4;
  double *v5;
  double result;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)(v4 + 67));
  OZChannelBase::operator=(a1 + 688, (uint64_t)(v5 + 86));
  OZChannelBase::operator=(a1 + 840, (uint64_t)(v5 + 105));
  OZChannelBase::operator=(a1 + 992, (uint64_t)(v5 + 124));
  result = v5[143];
  *(double *)(a1 + 1144) = result;
  return result;
}

void OZFadeInOutBehavior::didAddToNode(OZFadeInOutBehavior *this, OZSceneNode *lpsrc)
{
  OZChannel *v4;
  OZFadeInOutCurveNode *v5;

  if (lpsrc)
  {
    {
      OZChannelBehavior::didAddToNode(this, lpsrc);
      v4 = (OZChannel *)((char *)lpsrc + 6680);
      v5 = (OZFadeInOutCurveNode *)operator new();
      OZFadeInOutCurveNode::OZFadeInOutCurveNode(v5, this, v4);
      OZChannel::appendCurveProcessingNode(v4, v5);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v5);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v4);
    }
  }
}

void sub_1B2F74638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

double OZFadeInOutBehavior::getMultiplier(OZFadeInOutBehavior *this, CMTime *a2)
{
  CMTimeEpoch epoch;
  double Seconds;
  uint64_t v6;
  CMTime *v7;
  Float64 v8;
  Float64 v9;
  Float64 v11;
  Float64 v12;
  double v13;
  CMTime time;
  __int128 v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25[2];
  __int128 v26;
  CMTimeEpoch v27;
  CMTime v28;
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(v25);
  *(_OWORD *)&a2->value = *(_OWORD *)&v25[0].value;
  epoch = v25[0].epoch;
  a2->epoch = v25[0].epoch;
  v26 = *(_OWORD *)&a2->value;
  v27 = epoch;
  Seconds = -1.0;
  if ((*(unsigned int (**)(OZFadeInOutBehavior *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v26, 0, 1, 1))
  {
    v6 = (*(uint64_t (**)(OZFadeInOutBehavior *))(*(_QWORD *)this + 312))(this);
    (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v6 + 712))(v25);
    memset(&v24, 0, sizeof(v24));
    OZBehavior::getFrameDuration(this, (__n128 *)&v24);
    memset(&v23, 0, sizeof(v23));
    v28 = v25[0];
    v7 = (CMTime *)MEMORY[0x1E0CA2E68];
    Seconds = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 840), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v24, &v22, v8);
    time1 = v28;
    time2 = v22;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
    memset(&v22, 0, sizeof(v22));
    time1 = v25[0];
    time2 = v25[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v28);
    time1 = v28;
    time2 = v24;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), v7, 0.0);
    operator*(&v24, &v28, v9);
    time1 = v21;
    time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
    memset(&v21, 0, sizeof(v21));
    time1 = *a2;
    time2 = v24;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v21);
    time1 = v21;
    time2 = v23;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = v21;
      time2 = v22;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        time1 = *a2;
        time2 = v22;
        if (CMTimeCompare(&time1, &time2) >= 1)
          *a2 = v22;
        memset(&v20, 0, sizeof(v20));
        time1 = v22;
        time2 = v23;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
        time2 = *a2;
        v28 = v23;
        PC_CMTimeSaferSubtract(&time2, &v28, (uint64_t)&time1);
        *a2 = time1;
        memset(&v28, 0, sizeof(v28));
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 536), v7, 0.0);
        operator*(&v24, &v28, v11);
        memset(&v19, 0, sizeof(v19));
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 688), v7, 0.0);
        operator*(&v24, &v19, v12);
        memset(&v18, 0, sizeof(v18));
        time1 = v20;
        time2 = v19;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
        time1 = *a2;
        time2 = v28;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          operator/((__int128 *)&a2->value, (uint64_t)&v28, (uint64_t)&v17);
          Seconds = CMTimeGetSeconds(&v17);
          time1 = *a2;
          time2 = v18;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            time1 = v19;
            time2 = *v7;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              time1 = *a2;
              time2 = v18;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
              operator/(&v15, (uint64_t)&v19, (uint64_t)&v16);
              v13 = 1.0 - CMTimeGetSeconds(&v16);
              if (Seconds > v13)
                return v13;
            }
          }
        }
        else
        {
          time1 = *a2;
          time2 = v18;
          Seconds = 1.0;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            time1 = v19;
            time2 = *v7;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              time1 = *a2;
              time2 = v18;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
              operator/(&v15, (uint64_t)&v19, (uint64_t)&time);
              return 1.0 - CMTimeGetSeconds(&time);
            }
          }
        }
      }
    }
  }
  return Seconds;
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeInTimeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeInTimeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::_OZFadeInOutBehavior_fadeInTimeChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *v0;

  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::_OZFadeInOutBehavior_fadeInTimeChan)
  {
    v0 = (OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *)operator new();
    OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::OZFadeInOutBehavior_fadeInTimeChanImpl(v0);
    OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::_OZFadeInOutBehavior_fadeInTimeChan = (uint64_t)v0;
  }
}

void sub_1B2F74CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl::OZFadeInOutBehavior_fadeInTimeChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 20.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 20.0, 0, 1);
  PCSingleton::PCSingleton((OZFadeInOutBehavior::OZFadeInOutBehavior_fadeInTimeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CA4F0;
  *((_QWORD *)this + 5) = &unk_1E65CA510;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F74D50(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeOutTimeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::OZFadeInOutBehavior_fadeOutTimeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::_OZFadeInOutBehavior_fadeOutTimeChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *v0;

  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::_OZFadeInOutBehavior_fadeOutTimeChan)
  {
    v0 = (OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *)operator new();
    OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::OZFadeInOutBehavior_fadeOutTimeChanImpl(v0);
    OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::_OZFadeInOutBehavior_fadeOutTimeChan = (uint64_t)v0;
  }
}

void sub_1B2F74E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl::OZFadeInOutBehavior_fadeOutTimeChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 20.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 20.0, 0, 1);
  PCSingleton::PCSingleton((OZFadeInOutBehavior::OZFadeInOutBehavior_fadeOutTimeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CA568;
  *((_QWORD *)this + 5) = &unk_1E65CA588;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F74ECC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_startTimeOffsetChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_startTimeOffsetChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::_OZFadeInOutBehavior_startTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *v0;

  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::_OZFadeInOutBehavior_startTimeOffsetChan)
  {
    v0 = (OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *)operator new();
    OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::OZFadeInOutBehavior_startTimeOffsetChanImpl(v0);
    OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::_OZFadeInOutBehavior_startTimeOffsetChan = (uint64_t)v0;
  }
}

void sub_1B2F74F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl::OZFadeInOutBehavior_startTimeOffsetChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZFadeInOutBehavior::OZFadeInOutBehavior_startTimeOffsetChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CA5E0;
  *((_QWORD *)this + 5) = &unk_1E65CA600;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F7504C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_endTimeOffsetChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::OZFadeInOutBehavior_endTimeOffsetChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::_OZFadeInOutBehavior_endTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *v0;

  if (!OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::_OZFadeInOutBehavior_endTimeOffsetChan)
  {
    v0 = (OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *)operator new();
    OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::OZFadeInOutBehavior_endTimeOffsetChanImpl(v0);
    OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::_OZFadeInOutBehavior_endTimeOffsetChan = (uint64_t)v0;
  }
}

void sub_1B2F75118(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl::OZFadeInOutBehavior_endTimeOffsetChanImpl(OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZFadeInOutBehavior::OZFadeInOutBehavior_endTimeOffsetChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CA658;
  *((_QWORD *)this + 5) = &unk_1E65CA678;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F751CC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZFadeInOutCurveNode::OZFadeInOutCurveNode(OZFadeInOutCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v5;
  void *v6;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *v5 = &off_1E65CA6D0;
  if (a2)
  else
    v6 = 0;
  *((_QWORD *)this + 4) = v6;
}

void OZFadeInOutCurveNode::~OZFadeInOutCurveNode(OZFadeInOutCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZFadeInOutCurveNode::solveNode(OZFadeInOutCurveNode *this, const CMTime *a2, double a3, double a4)
{
  OZFadeInOutBehavior *v5;
  double Multiplier;
  BOOL v7;
  double v8;
  CMTime v10;

  v5 = (OZFadeInOutBehavior *)*((_QWORD *)this + 4);
  v10 = *a2;
  Multiplier = OZFadeInOutBehavior::getMultiplier(v5, &v10);
  if (Multiplier >= 0.0)
  {
    v7 = a4 >= 0.0000001 || a4 <= -0.0000001;
    v8 = 1.0;
    if (v7)
      v8 = a4;
    return v8 * Multiplier;
  }
  return a4;
}

void OZFadeInOutCurveNode::solveNode(OZFadeInOutCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  OZFadeInOutBehavior *v7;
  double Multiplier;
  double v9;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v13 = *(CMTime *)((_BYTE *)a2 + 5);
  v12 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = (OZFadeInOutBehavior *)*((_QWORD *)this + 4);
      v11 = v12;
      Multiplier = OZFadeInOutBehavior::getMultiplier(v7, &v11);
      v9 = *(double *)(v3 + 8 * v6);
      if (Multiplier >= 0.0)
      {
        if (v9 < 0.0000001 && v9 > -0.0000001)
          v9 = 1.0;
        v9 = Multiplier * v9;
      }
      *(double *)(v2 + 8 * v6) = v9;
      v15 = v12;
      v14 = v13;
      PC_CMTimeSaferAdd(&v15, &v14, (uint64_t)&v12);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *OZFadeInOutCurveNode::cloneNode(OZFadeInOutCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E65CA6D0;
  *((_QWORD *)v2 + 4) = *((_QWORD *)this + 4);
  return v2;
}

void sub_1B2F75450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZFadeInOutCurveNode::compare(OZFadeInOutCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZFadeInOutCurveNode::getNeededRange(OZFadeInOutCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

void OZFocusBehavior::OZFocusBehavior(OZFocusBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CA7C8;
  v5[2] = &unk_1E65CAAC8;
  v5[6] = &unk_1E65CAD20;
  v5[42] = &unk_1E65CAD78;
  v5[67] = &unk_1E65CADA0;
  PCURL::PCURL((PCURL *)v7, CFSTR("Focus Behavior Target"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZFocusBehavior *)((char *)this + 544), v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Focus Behavior Transition"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 704), 0.5, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZFocusBehavior *)((char *)this + 856), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((_QWORD *)this + 139) = 0;
  *((_BYTE *)this + 1120) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)&v7[0].var0 = xmmword_1B35624AC;
  v8 = 0x500000004;
  OZChannelEnum::setTags((OZFocusBehavior *)((char *)this + 856), (char *)v7, 6);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 544, 1);
}

void sub_1B2F756D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZChannelBehavior *v11;
  OZChanTransformNodeRef *v12;
  OZChannelPercent *v13;

  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v12);
  OZChannelBehavior::~OZChannelBehavior(v11);
  _Unwind_Resume(a1);
}

void OZFocusBehavior::OZFocusBehavior(OZFocusBehavior *this, const OZFocusBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CA7C8;
  *(_QWORD *)(v5 + 16) = &unk_1E65CAAC8;
  *(_QWORD *)(v5 + 48) = &unk_1E65CAD20;
  *(_QWORD *)(v5 + 336) = &unk_1E65CAD78;
  *(_QWORD *)(v5 + 536) = &unk_1E65CADA0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 544), (const OZFocusBehavior *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 704), (const OZChannelBase *)((char *)a2 + 704), v6);
  OZChannelEnum::OZChannelEnum((OZFocusBehavior *)((char *)this + 856), (const OZFocusBehavior *)((char *)a2 + 856), v6);
  *((_QWORD *)this + 139) = 0;
  *((_BYTE *)this + 1120) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
}

void sub_1B2F75838(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  OZChanTransformNodeRef *v2;
  OZChannelPercent *v3;

  OZChannelPercent::~OZChannelPercent(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZFocusBehavior::~OZFocusBehavior(OZFocusBehavior *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E65CA7C8;
  *((_QWORD *)this + 2) = &unk_1E65CAAC8;
  *((_QWORD *)this + 6) = &unk_1E65CAD20;
  *((_QWORD *)this + 42) = &unk_1E65CAD78;
  *((_QWORD *)this + 67) = &unk_1E65CADA0;
  v2 = (void *)*((_QWORD *)this + 144);
  if (v2)
  {
    *((_QWORD *)this + 145) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 141);
  if (v3)
  {
    *((_QWORD *)this + 142) = v3;
    operator delete(v3);
  }
  OZChannelEnum::~OZChannelEnum((OZFocusBehavior *)((char *)this + 856));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 704));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZFocusBehavior *)((char *)this + 544));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZFocusBehavior::~OZFocusBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFocusBehavior::~OZFocusBehavior(OZFocusBehavior *this)
{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 16));
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 48));
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 336));
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 536));
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZFocusBehavior::~OZFocusBehavior((OZFocusBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZFocusBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 544, (uint64_t)v4 + 544);
  OZChannelBase::operator=(a1 + 704, (uint64_t)v5 + 704);
  return OZChannelBase::operator=(a1 + 856, (uint64_t)v5 + 856);
}

uint64_t OZFocusBehavior::addCurveNodesToChannels(OZFocusBehavior *this, OZSceneNode *lpsrc)
{
  char *v3;
  OZChannel *v4;
  uint64_t CurveInterface;
  OZSingleChanCurveNode *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  OZSingleChanCurveNode **v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  OZSingleChanCurveNode **v30;
  char *v31;
  char *v32;
  char *v33;
  OZSingleChanCurveNode *v34;
  uint64_t v35;

  if (lpsrc)
  {
    *((_QWORD *)this + 139) = v3;
    if (v3)
    {
      v4 = (OZChannel *)(v3 + 7848);
      CurveInterface = OZChannel::getCurveInterface((OZChannel *)(v3 + 7848));
      v6 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v6, (OZFocusBehavior *)((char *)this + 536), v4, 0);
      OZChannel::appendCurveProcessingNode(v4, v6);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v6);
      v7 = (uint64_t *)*((_QWORD *)this + 142);
      v8 = *((_QWORD *)this + 143);
      if ((unint64_t)v7 >= v8)
      {
        v10 = *((_QWORD *)this + 141);
        v11 = ((uint64_t)v7 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v12 = v8 - v10;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1144, v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v11];
        v17 = &v15[8 * v14];
        *v16 = CurveInterface;
        v9 = v16 + 1;
        v18 = (char *)*((_QWORD *)this + 142);
        v19 = (char *)*((_QWORD *)this + 141);
        if (v18 != v19)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v16 = v20;
          }
          while (v18 != v19);
          v18 = (char *)*((_QWORD *)this + 141);
        }
        *((_QWORD *)this + 141) = v16;
        *((_QWORD *)this + 142) = v9;
        *((_QWORD *)this + 143) = v17;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v7 = CurveInterface;
        v9 = v7 + 1;
      }
      *((_QWORD *)this + 142) = v9;
      v21 = (OZSingleChanCurveNode **)*((_QWORD *)this + 145);
      v22 = *((_QWORD *)this + 146);
      if ((unint64_t)v21 >= v22)
      {
        v24 = *((_QWORD *)this + 144);
        v25 = ((uint64_t)v21 - v24) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v26 = v22 - v24;
        v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1168, v28);
        else
          v29 = 0;
        v30 = (OZSingleChanCurveNode **)&v29[8 * v25];
        v31 = &v29[8 * v28];
        *v30 = v6;
        v23 = v30 + 1;
        v32 = (char *)*((_QWORD *)this + 145);
        v33 = (char *)*((_QWORD *)this + 144);
        if (v32 != v33)
        {
          do
          {
            v34 = (OZSingleChanCurveNode *)*((_QWORD *)v32 - 1);
            v32 -= 8;
            *--v30 = v34;
          }
          while (v32 != v33);
          v32 = (char *)*((_QWORD *)this + 144);
        }
        *((_QWORD *)this + 144) = v30;
        *((_QWORD *)this + 145) = v23;
        *((_QWORD *)this + 146) = v31;
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v21 = v6;
        v23 = v21 + 1;
      }
      *((_QWORD *)this + 145) = v23;
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v4);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 139) + 7568) + 104))(*((_QWORD *)this + 139) + 7568, 1, 0);
      if ((*(uint64_t (**)(OZFocusBehavior *))(*(_QWORD *)this + 336))(this))
      {
        v35 = (*(uint64_t (**)(OZFocusBehavior *))(*(_QWORD *)this + 336))(this);
        OZDocument::postNotification(*(OZDocument **)(v35 + 1584), 8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 139) = 0;
  }
  return 0;
}

void sub_1B2F75CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

uint64_t OZFocusBehavior::didAddToNode(OZFocusBehavior *this, OZSceneNode *a2)
{
  uint64_t result;

  result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((_BYTE *)this + 1120))
  {
    result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
    if (result)
    {
      result = (*(uint64_t (**)(OZFocusBehavior *, OZSceneNode *))(*(_QWORD *)this + 736))(this, a2);
      *((_BYTE *)this + 1120) = 1;
    }
  }
  return result;
}

uint64_t OZFocusBehavior::didAddSceneNodeToScene(OZFocusBehavior *this, OZScene *a2)
{
  uint64_t result;
  uint64_t v4;

  result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((_BYTE *)this + 1120))
  {
    v4 = (*(uint64_t (**)(OZFocusBehavior *))(*(_QWORD *)this + 320))(this);
    result = (*(uint64_t (**)(OZFocusBehavior *, uint64_t))(*(_QWORD *)this + 736))(this, v4);
    *((_BYTE *)this + 1120) = 1;
  }
  return result;
}

void OZFocusBehavior::willRemove(OZFocusBehavior *this)
{
  OZChannelBehavior::willRemove(this);
  *((_BYTE *)this + 1120) = 0;
  *((_QWORD *)this + 142) = *((_QWORD *)this + 141);
  *((_QWORD *)this + 145) = *((_QWORD *)this + 144);
}

uint64_t OZFocusBehavior::isActive(OZFocusBehavior *this)
{
  int v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 0, 1);
  result = 0;
  if (v2)
  {
    result = (*(uint64_t (**)(OZFocusBehavior *))(*(_QWORD *)this + 320))(this);
    if (result)
      return (*(_BYTE *)(result + 1024) & 2) == 0;
  }
  return result;
}

void OZFocusBehavior::getEvalDepChansForRef(int a1, int a2, void *lpsrc, uint64_t *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;

  if (lpsrc)
  {
    if (v5)
    {
      v6 = v5;
      do
      {
        v7 = operator new(0x18uLL);
        v7[1] = a4;
        v7[2] = v6 + 136;
        v8 = *a4;
        *v7 = *a4;
        *(_QWORD *)(v8 + 8) = v7;
        *a4 = (uint64_t)v7;
        ++a4[2];
        v9 = (const void *)v6[120];
        if (!v9)
          break;
      }
      while (v6);
    }
  }
}

double OZFocusBehavior::solveNode(OZFocusBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  const void *TransformNode;
  const void *v10;
  uint64_t v11;
  __n128 FrameDuration;
  __n128 *v13;
  double Seconds;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  OZCameraBehavior *ValueAsInt;
  double v21;
  OZCamera *v22;
  const CMTime *v23;
  double FocalDistance;
  CMTime v26[5];
  CMTime v27;
  PCSharedCount v28;
  PCSharedCount v29;
  OZRenderState time1;
  __int128 v31;
  double v32;
  CMTime time;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  __int128 v37;
  int64_t v38;
  __n128 v39;
  CMTimeEpoch v40;
  CMTime v41;

  if ((*(unsigned int (**)(OZFocusBehavior *, double))(*(_QWORD *)this + 744))(this, a4))
  {
    TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 544));
    if (TransformNode)
    {
      if (*((_QWORD *)this + 139))
      {
        v10 = TransformNode;
        memset(&v41, 0, sizeof(v41));
        (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                           + 32)
                                                                             + 336))(&v41, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
        v39 = 0uLL;
        v40 = 0;
        v11 = (*(uint64_t (**)(OZFocusBehavior *))(*(_QWORD *)this + 336))(this);
        FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v39);
        (*(void (**)(CMTime *__return_ptr, OZFocusBehavior *, __n128))(*(_QWORD *)this + 608))(&v36, this, FrameDuration);
        v35 = v36;
        memset(&v34, 0, sizeof(v34));
        *(_OWORD *)&time1.var0.var0 = v37;
        time1.var0.var3 = v38;
        *(__n128 *)&v26[0].value = v39;
        v26[0].epoch = v40;
        PC_CMTimeSaferSubtract((CMTime *)&time1, v26, (uint64_t)&v34);
        time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v41;
        v26[0] = v35;
        PC_CMTimeSaferSubtract((CMTime *)&time1, v26, (uint64_t)&v31);
        *(__n128 *)&time1.var0.var0 = v39;
        time1.var0.var3 = v40;
        v26[0] = v34;
        v13 = CMTimeCompare((CMTime *)&time1, v26) >= 0 ? &v39 : (__n128 *)&v34;
        *(__n128 *)&time1.var0.var0 = *v13;
        time1.var0.var3 = v13[1].n128_i64[0];
        operator/(&v31, (uint64_t)&time1, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        if (Seconds >= 0.0)
        {
          v15 = 1.0;
          v16 = Seconds <= 1.0 ? Seconds : 1.0;
          if (!a2)
          {
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 704), &v41, 0.0);
            if (v17 <= -0.0000001 || v17 >= 0.0000001)
            {
              v18 = v16 / v17;
              v19 = 1.0;
              if (v18 <= 1.0)
                v19 = v18;
              if (v18 >= 0.0)
                v15 = v19;
              else
                v15 = 0.0;
            }
            ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 856), MEMORY[0x1E0CA2E68], 0.0);
            v21 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v15);
            OZRenderState::OZRenderState(&time1);
            time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v41;
            v22 = (OZCamera *)*((_QWORD *)this + 139);
            v27 = v41;
            OZCamera::cameraAtTime(v22, &v27, (PCSharedCount *)v26);
            PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v28, (const PCSharedCount *)v26);
            PCSharedCount::~PCSharedCount((PCSharedCount *)&v26[0].timescale);
            v31 = 0uLL;
            v32 = 0.0;
            (*(void (**)(const void *, __int128 *, OZRenderState *))(*(_QWORD *)v10 + 1232))(v10, &v31, &time1);
            if (!v28.var0)
              throw_PCNullPointerException(1);
            (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v28.var0 + 240))(v26);
            PCMatrix44Tmpl<double>::transform<double>((double *)&v26[0].value, (double *)&v31, (double *)&v31);
            FocalDistance = OZCameraBehavior::getFocalDistance(this, *((OZChannelBehavior **)this + 139), &v41, v23);
            a5 = v21
               * (sqrt(*(double *)&v31 * *(double *)&v31 + *((double *)&v31 + 1) * *((double *)&v31 + 1) + v32 * v32)
                - FocalDistance
                - a5)
               + a5;
            PCSharedCount::~PCSharedCount(&v29);
          }
        }
      }
    }
  }
  return a5;
}

void sub_1B2F7621C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,PCSharedCount a30)
{
  PCSharedCount::~PCSharedCount(&a30);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZFocusBehavior::solveNode(OZFocusBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZFocusBehavior::solveNode((OZFocusBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

__n128 OZFocusBehavior::solveNode(OZFocusBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.value = result;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZFocusBehavior *, uint64_t, CMTime *, double, double))(*(_QWORD *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      result = *(__n128 *)&v14.value;
      v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZFocusBehavior::solveNode(OZFocusBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  double result;

  *(_QWORD *)&result = OZFocusBehavior::solveNode((OZFocusBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZFocusBehavior::getNeededRange(OZFocusBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

__n128 `non-virtual thunk to'OZFocusBehavior::getNeededRange(OZFocusBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

void OZFramingBehavior::OZFramingBehavior(OZFramingBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  int v6[4];
  uint64_t v7;
  int v8[2];
  int v9[4];
  int v10;
  PCString v11[2];
  __int128 v12;
  __int128 v13;
  int v14;
  PCString v15[2];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CAE38;
  v5[2] = &unk_1E65CB158;
  v5[6] = &unk_1E65CB3B0;
  v5[42] = &unk_1E65CB408;
  v5[67] = &unk_1E65CB430;
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Target"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZFramingBehavior *)((char *)this + 864), v11, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Target Face Enum"));
  PCURL::PCURL((PCURL *)v15, CFSTR("Framing Behavior Target Face Label"));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1024), 4u, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Up Vector Enum"));
  PCURL::PCURL((PCURL *)v15, CFSTR("Framing Behavior Up Vector Label"));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1280), 0, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Framing Enum"));
  PCURL::PCURL((PCURL *)v15, CFSTR("Framing Behavior Framing Label"));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1536), 2u, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Framing Offset"));
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 1792), v11, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 3u);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Path Apex"));
  OZChannelDouble::OZChannelDouble((OZFramingBehavior *)((char *)this + 2680), 0.5, v11, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Path Offset"));
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 2832), v11, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 3u);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Orientation Enum"));
  PCURL::PCURL((PCURL *)v15, CFSTR("Framing Behavior Orientation Label"));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 3720), 0, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Position Transition"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3976), 0.5, v11, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Rotation Transition"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4128), 0.5, v11, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)v15, CFSTR("Framing Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 4280), 0, v11, v15, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, 0, 0);
  PCString::~PCString(v15);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Ease Out Time"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4536), 1.0, v11, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, CFSTR("Framing Behavior Ease Out Curve"));
  OZChannelDouble::OZChannelDouble((OZFramingBehavior *)((char *)this + 4688), 10.0, v11, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 0, 0);
  PCString::~PCString(v11);
  *(_OWORD *)((char *)this + 4840) = 0u;
  OZValueCache<OZFramingCacheItem>::OZValueCache((uint64_t)this + 4856);
  *((_QWORD *)this + 627) = 0;
  *((_QWORD *)this + 626) = 0;
  *((_QWORD *)this + 625) = (char *)this + 5008;
  PCMutex::PCMutex((PCMutex *)((char *)this + 5024));
  *((_QWORD *)this + 637) = 0x3FF0000000000000;
  *((_QWORD *)this + 642) = 0xBFF0000000000000;
  *((_OWORD *)this + 320) = xmmword_1B304F7C0;
  *((_OWORD *)this + 319) = xmmword_1B304F7C0;
  *(_OWORD *)&v15[0].var0 = xmmword_1B3562564;
  v16 = 0x500000004;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 1024), (char *)v15, 6);
  v14 = 12;
  *(_OWORD *)&v11[0].var0 = xmmword_1B356251C;
  v12 = unk_1B356252C;
  v13 = xmmword_1B356253C;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 1280), (char *)v11, 13);
  v10 = 4;
  *(_OWORD *)v9 = xmmword_1B3562550;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 1536), (char *)v9, 5);
  *(_QWORD *)v8 = 0x100000000;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 3720), (char *)v8, 2);
  v7 = 0x500000004;
  *(_OWORD *)v6 = xmmword_1B3562564;
  OZChannelEnum::setTags((OZFramingBehavior *)((char *)this + 4280), (char *)v6, 6);
  OZChannelBase::resetFlag((OZChannelBase *)this + 16, 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1792));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2832), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2832));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2680), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2680));
  OZChannel::setMin((OZChannel *)((char *)this + 2680), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2680), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2680), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2680), 1.0);
  *((_BYTE *)this + 2232) = 0;
  *((_BYTE *)this + 3272) = 0;
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 4856);
  *((_QWORD *)this + 611) = 250;
}

void sub_1B2F76AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelPercent *a10, OZChannelPercent *a11, OZChanTransformNodeRef *a12, _Unwind_Exception *exception_object, uint64_t a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelEnum *a17, OZChannelEnum *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,PCString a27)
{
  OZCameraBehavior *v27;
  uint64_t v28;
  PCMutex *v29;
  OZChannelEnum *v30;
  OZChannelPercent *v31;
  OZChannelPosition3D *v32;
  OZChannel *v33;
  OZChannelPosition3D *v34;
  _QWORD **v35;
  OZChannel *v36;

  PCMutex::~PCMutex(v29);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v27 + 5000, *v35);
  OZValueCache<OZFramingCacheItem>::~OZValueCache(v28);
  OZChannel::~OZChannel(v36);
  OZChannelPercent::~OZChannelPercent(v31);
  OZChannelEnum::~OZChannelEnum(v30);
  OZChannelPercent::~OZChannelPercent(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPosition3D::~OZChannelPosition3D(v34);
  OZChannel::~OZChannel(v33);
  OZChannelPosition3D::~OZChannelPosition3D(v32);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a12);
  OZCameraBehavior::~OZCameraBehavior(v27);
  _Unwind_Resume(a1);
}

void OZFramingBehavior::OZFramingBehavior(OZFramingBehavior *this, const OZFramingBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CAE38;
  *(_QWORD *)(v5 + 16) = &unk_1E65CB158;
  *(_QWORD *)(v5 + 48) = &unk_1E65CB3B0;
  *(_QWORD *)(v5 + 336) = &unk_1E65CB408;
  *(_QWORD *)(v5 + 536) = &unk_1E65CB430;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 864), (const OZFramingBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1024), (const OZFramingBehavior *)((char *)a2 + 1024), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1280), (const OZFramingBehavior *)((char *)a2 + 1280), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 1536), (const OZFramingBehavior *)((char *)a2 + 1536), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 1792), (const OZFramingBehavior *)((char *)a2 + 1792), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2680), (const OZChannelBase *)((char *)a2 + 2680), v6);
  *((_QWORD *)this + 335) = &off_1E6551358;
  *((_QWORD *)this + 337) = &unk_1E65516B8;
  OZChannelPosition3D::OZChannelPosition3D((OZFramingBehavior *)((char *)this + 2832), (const OZFramingBehavior *)((char *)a2 + 2832), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 3720), (const OZFramingBehavior *)((char *)a2 + 3720), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3976), (const OZChannelBase *)((char *)a2 + 3976), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4128), (const OZChannelBase *)((char *)a2 + 4128), v6);
  OZChannelEnum::OZChannelEnum((OZFramingBehavior *)((char *)this + 4280), (const OZFramingBehavior *)((char *)a2 + 4280), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4536), (const OZChannelBase *)((char *)a2 + 4536), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 4688), (const OZChannelBase *)((char *)a2 + 4688), v6);
  *((_QWORD *)this + 586) = &off_1E6551358;
  *((_QWORD *)this + 588) = &unk_1E65516B8;
  *(_OWORD *)((char *)this + 4840) = 0u;
  OZValueCache<OZFramingCacheItem>::OZValueCache((uint64_t)this + 4856);
  *((_QWORD *)this + 627) = 0;
  *((_QWORD *)this + 626) = 0;
  *((_QWORD *)this + 625) = (char *)this + 5008;
  PCMutex::PCMutex((PCMutex *)((char *)this + 5024));
  *((_QWORD *)this + 637) = 0x3FF0000000000000;
  *((_QWORD *)this + 642) = 0xBFF0000000000000;
  *((_OWORD *)this + 320) = xmmword_1B304F7C0;
  *((_OWORD *)this + 319) = xmmword_1B304F7C0;
  *((_BYTE *)this + 2232) = 0;
  *((_BYTE *)this + 3272) = 0;
  PCMutex::lock((PCMutex *)((char *)this + 5024));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 5000, *((_QWORD **)this + 626));
  *((_QWORD *)this + 625) = (char *)this + 5008;
  *((_OWORD *)this + 313) = 0u;
  PCMutex::unlock((PCMutex *)((char *)this + 5024));
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 4856);
  *((_QWORD *)this + 611) = 250;
}

void sub_1B2F76F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannelEnum *a11, OZChannelPosition3D *a12, OZChannel *a13, OZChannelPosition3D *a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelEnum *a17, OZChanTransformNodeRef *a18)
{
  OZCameraBehavior *v18;
  OZChannelPercent *v19;
  OZChannelEnum *v20;
  uint64_t v21;
  OZChannelPercent *v22;
  uint64_t v23;
  OZChannel *v24;
  _QWORD **v25;
  OZChannelPercent *v26;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v23, *v25);
  OZValueCache<OZFramingCacheItem>::~OZValueCache(v21);
  OZChannel::~OZChannel(v24);
  OZChannelPercent::~OZChannelPercent(v22);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannelPercent::~OZChannelPercent(v26);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannelPosition3D::~OZChannelPosition3D(a12);
  OZChannel::~OZChannel(a13);
  OZChannelPosition3D::~OZChannelPosition3D(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a18);
  OZCameraBehavior::~OZCameraBehavior(v18);
  _Unwind_Resume(a1);
}

void OZFramingBehavior::~OZFramingBehavior(OZFramingBehavior *this)
{
  *(_QWORD *)this = &off_1E65CAE38;
  *((_QWORD *)this + 2) = &unk_1E65CB158;
  *((_QWORD *)this + 6) = &unk_1E65CB3B0;
  *((_QWORD *)this + 42) = &unk_1E65CB408;
  *((_QWORD *)this + 67) = &unk_1E65CB430;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 5024));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 5000, *((_QWORD **)this + 626));
  OZValueCache<OZFramingCacheItem>::~OZValueCache((uint64_t)this + 4856);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4688));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 4536));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 4280));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 4128));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3976));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 3720));
  OZChannelPosition3D::~OZChannelPosition3D((OZFramingBehavior *)((char *)this + 2832));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2680));
  OZChannelPosition3D::~OZChannelPosition3D((OZFramingBehavior *)((char *)this + 1792));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 1536));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 1280));
  OZChannelEnum::~OZChannelEnum((OZFramingBehavior *)((char *)this + 1024));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZFramingBehavior *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZFramingBehavior::~OZFramingBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFramingBehavior::~OZFramingBehavior(OZFramingBehavior *this)
{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 16));
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 48));
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 336));
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 536));
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZFramingBehavior::~OZFramingBehavior((OZFramingBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZFramingBehavior::flushCache(OZFramingBehavior *this)
{
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 4856);
  OZCameraBehavior::flushCache(this);
}

uint64_t OZFramingBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1024, (uint64_t)v5 + 1024);
  OZChannelBase::operator=(a1 + 1280, (uint64_t)v5 + 1280);
  OZChannelBase::operator=(a1 + 1536, (uint64_t)v5 + 1536);
  OZChannelPosition::operator=(a1 + 1792, (uint64_t)v5 + 1792);
  OZChannelBase::operator=(a1 + 2680, (uint64_t)v5 + 2680);
  OZChannelPosition::operator=(a1 + 2832, (uint64_t)v5 + 2832);
  OZChannelBase::operator=(a1 + 3720, (uint64_t)v5 + 3720);
  OZChannelBase::operator=(a1 + 3976, (uint64_t)v5 + 3976);
  OZChannelBase::operator=(a1 + 4128, (uint64_t)v5 + 4128);
  OZChannelBase::operator=(a1 + 4280, (uint64_t)v5 + 4280);
  OZChannelBase::operator=(a1 + 4536, (uint64_t)v5 + 4536);
  return OZChannelBase::operator=(a1 + 4688, (uint64_t)v5 + 4688);
}

unint64_t OZFramingBehavior::addCurveNodesToChannels(OZFramingBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  BOOL v7;
  BOOL v8;

  v4 = OZCameraBehavior::addCurveNodesToChannels(this, a2);
  if (a2)
  {
    *((_QWORD *)this + 605) = v5;
    *((_QWORD *)this + 606) = v6;
    if (v5)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
    {
      if (v5)
        v8 = v6 == 0;
      else
        v8 = 1;
      if (!v8)
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1536), 2, 0);
    }
    else
    {
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1536), 2, 0);
    }
  }
  else
  {
    *(_OWORD *)((char *)this + 4840) = 0u;
  }
  return v4;
}

void shortest_slerp(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v10 = a4;
  v4 = a1[1];
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v9 = a2[2];
  v8 = a2[3];
  if ((*a1 + *a2) * (*a1 + *a2) + (v4 + v5) * (v4 + v5) + (v6 + v9) * (v6 + v9) + (v7 + v8) * (v7 + v8) < (*a1 - *a2) * (*a1 - *a2) + (v4 - v5) * (v4 - v5) + (v6 - v9) * (v6 - v9) + (v7 - v8) * (v7 - v8))
  {
    *a2 = -*a2;
    a2[1] = -v5;
    a2[2] = -v9;
    a2[3] = -v8;
  }
  slerp<double>(a1, a2, &v10, a3);
}

double calcRotation@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  double result;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64_t v27;
  double v28;
  double v30;
  float64x2_t v31;
  double v32;
  __int128 v33;
  uint64_t v34;
  double v35[3];
  _BYTE v36[40];
  double v37;
  __int128 v38;
  __int128 v39;
  double v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  double v45;

  v44 = *(_OWORD *)a2;
  v45 = a2[2];
  v43 = 0x3FF0000000000000;
  v40 = 1.0;
  v37 = 1.0;
  memset(&v36[8], 0, 32);
  v38 = 0u;
  v39 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(double *)&v9 = -*a1;
  v10 = -a1[1];
  v11 = -a1[2];
  *(_QWORD *)v36 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v36, (float64x2_t)v9, v10, v11);
  if (a6 != 1.0)
  {
    *(float64x2_t *)v36 = vmulq_n_f64(*(float64x2_t *)v36, a6);
    *(float64x2_t *)&v36[16] = vmulq_n_f64(*(float64x2_t *)&v36[16], a6);
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)v36, (double *)&v44, (double *)&v44);
  if (*(double *)&v44 > -0.0000001
    && *(double *)&v44 < 0.0000001
    && *((double *)&v44 + 1) > -0.0000001
    && *((double *)&v44 + 1) < 0.0000001
    && v45 > -0.0000001
    && v45 < 0.0000001)
  {
    v44 = *(_OWORD *)a4;
    v45 = a4[2];
  }
  *(_QWORD *)a5 = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  PCQuat<double>::setRotation((double *)a5, a4, (double *)&v44);
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v33 = xmmword_1B304EEE0;
  v34 = 0;
  v35[0] = v12 * *(double *)v36 + v13 * *(double *)&v36[8] + v14 * *(double *)&v36[16];
  v35[1] = v12 * *(double *)&v36[32] + v13 * v37 + v14 * *(double *)&v38;
  v35[2] = v12 * *(double *)&v39 + v13 * *((double *)&v39 + 1) + v14 * v40;
  v15 = *(double *)a5;
  v30 = v15;
  v16 = *(float64x2_t *)(a5 + 8);
  v31 = v16;
  v17 = *(double *)(a5 + 24);
  v32 = v17;
  v18 = v15 * v15 + vaddvq_f64(vmulq_f64(v16, v16)) + v17 * v17;
  if (v18 != 0.0)
  {
    v30 = v15 / v18;
    v31 = vdivq_f64(vnegq_f64(v16), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
    v32 = -v17 / v18;
  }
  PCQuat<double>::transform<double>(&v30, v35);
  PCQuat<double>::setRotation(&v30, (double *)&v33, v35);
  if (&v30 != (double *)a5)
  {
    v20 = *(double *)(a5 + 8);
    v21 = *(double *)(a5 + 16);
    v22 = *(double *)(a5 + 24);
    v23 = *(double *)a5 * v30 - (v20 * v31.f64[0] + v21 * v31.f64[1] + v22 * v32);
    v24 = v30 * v20 + *(double *)a5 * v31.f64[0];
    v25 = v30 * v22 + *(double *)a5 * v32;
    v26 = v21 * v32 - v31.f64[1] * v22;
    v27 = v31.f64[0] * v22 - v20 * v32;
    v28 = v20 * v31.f64[1] - v31.f64[0] * v21;
    *(double *)(a5 + 16) = v30 * v21 + *(double *)a5 * v31.f64[1] + v27;
    *(double *)(a5 + 24) = v28 + v25;
    result = v24 + v26;
    *(double *)a5 = v23;
    *(double *)(a5 + 8) = v24 + v26;
  }
  return result;
}

void *OZFramingBehavior::calcTargetSize@<X0>(OZFramingBehavior *this@<X0>, CMTimeValue *a2@<X8>)
{
  void *result;
  uint64_t v5;
  const CMTime *v6;
  double v7;
  double v8;
  double v9;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CMTimeValue *v22;
  CMTimeValue v23;
  uint64_t *v24;
  uint64_t v25;
  CMTimeEpoch *v26;
  CMTimeEpoch v27;
  __int128 v28;
  CMTime v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  CMTimeEpoch epoch;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  OZRenderState v38;
  CMTime v39;
  __n128 v40;
  CMTimeEpoch v41;
  __int128 v42;
  int64_t v43;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v44;
  CMTime v45[2];
  $3CC8671D27C23BF42ADDB32F2B5E48AE v46;

  result = (void *)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
  if (result)
  {
    v5 = (uint64_t)result;
    (*(void (**)(CMTime *__return_ptr, OZFramingBehavior *))(*(_QWORD *)this + 608))(v45, this);
    v44 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v45[0];
    v42 = 0uLL;
    v43 = 0;
    OZBehavior::getFrameDuration(this, &v40);
    v38.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v45[0];
    v29 = v45[1];
    PC_CMTimeSaferAdd((CMTime *)&v38, &v29, (uint64_t)&v46);
    v38.var0 = v46;
    *(__n128 *)&v29.value = v40;
    v29.epoch = v41;
    PC_CMTimeSaferSubtract((CMTime *)&v38, &v29, (uint64_t)&v42);
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3976), MEMORY[0x1E0CA2E68], 0.0);
    v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4128), v6, 0.0);
    if (v8 <= v9)
      v8 = v9;
    v40 = 0uLL;
    v41 = 0;
    *(_OWORD *)&v38.var0.var0 = v42;
    v38.var0.var3 = v43;
    v29 = (CMTime)v44;
    PC_CMTimeSaferSubtract((CMTime *)&v38, &v29, (uint64_t)&v39);
    operator*(&v39, (CMTime *)&v46, v8);
    v38.var0 = v44;
    v29 = (CMTime)v46;
    PC_CMTimeSaferAdd((CMTime *)&v38, &v29, (uint64_t)&v40);
    *((_OWORD *)a2 + 1) = xmmword_1B304F270;
    *((_OWORD *)a2 + 2) = xmmword_1B304F270;
    *(_OWORD *)a2 = xmmword_1B304F270;
    OZRenderState::OZRenderState(&v38);
    *(__n128 *)&v38.var0.var0 = v40;
    v38.var0.var3 = v41;
    (*(void (**)(uint64_t, CMTimeValue *, OZRenderState *))(*(_QWORD *)v5 + 1360))(v5, a2, &v38);
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v39.value = _Q0;
    v39.epoch = 0x3FF0000000000000;
    (*(void (**)(uint64_t, CMTime *, OZRenderState *, _QWORD))(*(_QWORD *)v5 + 1320))(v5, &v39, &v38, 0);
    v15 = 0;
    v37 = 0x3FF0000000000000;
    v29.value = v39.value;
    *(_OWORD *)&v29.timescale = 0u;
    v30 = 0u;
    v31 = *(_QWORD *)&v39.timescale;
    v32 = 0u;
    v33 = 0u;
    v16 = -1.0;
    v17 = 1.0;
    epoch = v39.epoch;
    v18 = 1.0;
    v19 = -1.0;
    v35 = 0u;
    v20 = 1.0;
    v36 = 0u;
    v21 = -1.0;
    do
    {
      v22 = a2 + 1;
      if ((v15 & 1) != 0)
        v22 = a2;
      v23 = *v22;
      v24 = a2 + 3;
      if ((v15 & 2) != 0)
        v24 = a2 + 2;
      v25 = *v24;
      v26 = a2 + 5;
      if ((v15 & 4) != 0)
        v26 = a2 + 4;
      v27 = *v26;
      v46.var0 = v23;
      *(_QWORD *)&v46.var1 = v25;
      v46.var3 = v27;
      result = PCMatrix44Tmpl<double>::transform<double>((double *)&v29.value, (double *)&v46.var0, (double *)&v46.var0);
      if (v15)
      {
        if (v17 >= *(double *)&v46.var0)
          v17 = *(double *)&v46.var0;
        if (v16 <= *(double *)&v46.var0)
          v16 = *(double *)&v46.var0;
        if (v18 >= *(double *)&v46.var1)
          v18 = *(double *)&v46.var1;
        if (v19 <= *(double *)&v46.var1)
          v19 = *(double *)&v46.var1;
        if (v20 >= *(double *)&v46.var3)
          v20 = *(double *)&v46.var3;
        if (v21 <= *(double *)&v46.var3)
          v21 = *(double *)&v46.var3;
      }
      else
      {
        v19 = *(double *)&v46.var1;
        v21 = *(double *)&v46.var3;
        v16 = *(double *)&v46.var0;
        v17 = *(double *)&v46.var0;
        v18 = *(double *)&v46.var1;
        v20 = *(double *)&v46.var3;
      }
      ++v15;
    }
    while (v15 != 8);
    *(double *)a2 = v17;
    *((double *)a2 + 1) = v16;
    *((double *)a2 + 2) = v18;
    *((double *)a2 + 3) = v19;
    *((double *)a2 + 4) = v20;
    *((double *)a2 + 5) = v21;
  }
  else
  {
    v28 = *(_OWORD *)((char *)this + 5112);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 5096);
    *((_OWORD *)a2 + 1) = v28;
    *((_OWORD *)a2 + 2) = *(_OWORD *)((char *)this + 5128);
  }
  return result;
}

uint64_t OZFramingBehavior::targetSizeHasChanged(OZFramingBehavior *this)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  OZFramingBehavior::calcTargetSize(this, (CMTimeValue *)&v4);
  if (*(double *)&v4 == *((double *)this + 637)
    && *((double *)&v4 + 1) == *((double *)this + 638)
    && *(double *)&v5 == *((double *)this + 639)
    && *((double *)&v5 + 1) == *((double *)this + 640)
    && *(double *)&v6 == *((double *)this + 641)
    && *((double *)&v6 + 1) == *((double *)this + 642))
  {
    return 0;
  }
  v2 = v5;
  *(_OWORD *)((char *)this + 5096) = v4;
  *(_OWORD *)((char *)this + 5112) = v2;
  *(_OWORD *)((char *)this + 5128) = v6;
  return 1;
}

const void *OZFramingBehavior::getTargetTransform(uint64_t a1, double *a2, uint64_t a3)
{
  const void *result;
  const void *v6;
  void *v7;
  double v13;
  double v14;
  __int128 v15;

  result = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)(a1 + 864));
  if (result)
  {
    v6 = result;
    (*(void (**)(const void *, double *, uint64_t))(*(_QWORD *)result + 1256))(result, a2, a3);
    if (v7)
    {
      v13 = 0.0;
      v14 = 0.0;
      __asm { FMOV            V0.2D, #-1.0 }
      v15 = _Q0;
      (*(void (**)(void *, double *, uint64_t))(*(_QWORD *)v7 + 1488))(v7, &v13, a3);
      PCMatrix44Tmpl<double>::rightTranslate(a2, v13 + *(double *)&v15 * 0.5, v14 + *((double *)&v15 + 1) * 0.5, 0.0);
    }
    return (const void *)PCMatrix44Tmpl<double>::orthoNormalize((uint64_t)a2);
  }
  return result;
}

void OZFramingBehavior::calculateFraming(OZFramingBehavior *this, const CMTime *a2, double *a3, double *a4, double *a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int ValueAsInt;
  double v18;
  double v19;
  OZCamera *v20;
  __n128 v21;
  const CMTime *v22;
  double FocalDistance;
  double v24;
  double v25;
  double v26;
  double v27[2];
  CMTime v28;
  PCSharedCount v29;
  PCSharedCount v30;
  OZRenderState v31;

  *a3 = 0.0;
  *a4 = 0.0;
  *a5 = 0.0;
  if (OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864)) && *((_QWORD *)this + 605))
  {
    v10 = *((double *)this + 638);
    v11 = *((double *)this + 637);
    v12 = *((double *)this + 640);
    v13 = *((double *)this + 639);
    v14 = *((double *)this + 642);
    v15 = *((double *)this + 641);
    v16 = 0.0;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1024), MEMORY[0x1E0CA2E68], 0.0);
    v18 = 0.0;
    if (ValueAsInt <= 5)
    {
      v16 = vabdd_f64(v12, v13);
      v19 = vabdd_f64(v14, v15);
      if (((1 << ValueAsInt) & 3) != 0)
      {
        v18 = v19;
      }
      else
      {
        v18 = vabdd_f64(v10, v11);
        if (((1 << ValueAsInt) & 0xC) != 0)
          v16 = v19;
      }
    }
    if (*((_QWORD *)this + 605))
    {
      OZRenderState::OZRenderState(&v31);
      *(_OWORD *)&v31.var0.var0 = *(_OWORD *)&a2->value;
      v31.var0.var3 = a2->epoch;
      v20 = (OZCamera *)*((_QWORD *)this + 605);
      v28 = *a2;
      v21 = OZCamera::cameraAtTime(v20, &v28, &v29);
      if (!v29.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(double *__return_ptr, __n128))(*(_QWORD *)v29.var0 + 272))(v27, v21);
      FocalDistance = OZCameraBehavior::getFocalDistance(this, *((OZChannelBehavior **)this + 605), a2, v22);
      if (!v29.var0)
        throw_PCNullPointerException(1);
      v24 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v29.var0 + 688))(v29.var0);
      v25 = v27[1] * 0.5 / FocalDistance;
      *a3 = v18 * 0.5 / (v24 * (v27[0] * 0.5) / FocalDistance) - FocalDistance;
      v26 = v16 * 0.5 / v25 - FocalDistance;
      *a4 = v26;
      if (*a3 > v26)
        v26 = *a3;
      *a5 = v26;
      PCSharedCount::~PCSharedCount(&v30);
    }
  }
}

void sub_1B2F77E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void OZFramingBehavior::calculateFramingOffset(OZFramingBehavior *this)
{
  OZScene *v2;
  unsigned int ValueAsInt;
  unsigned int v4;
  OZChannelPosition3D *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CMTime v10;

  v2 = (OZScene *)(*(uint64_t (**)(OZFramingBehavior *))(*(_QWORD *)this + 336))(this);
  if (v2)
  {
    memset(&v10, 0, sizeof(v10));
    OZScene::getCurrentTime(v2, (__n128 *)&v10);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1536), &v10, 0.0);
    if (ValueAsInt >= 3)
    {
      if (ValueAsInt != 3)
        return;
      v5 = (OZFramingBehavior *)((char *)this + 1792);
      v6 = 0.0;
    }
    else
    {
      v4 = ValueAsInt;
      v8 = 0.0;
      v9 = 0.0;
      v7 = 0.0;
      OZFramingBehavior::calculateFraming(this, &v10, &v9, &v8, &v7);
      if (v4 == 2)
      {
        v5 = (OZFramingBehavior *)((char *)this + 1792);
        v6 = v7;
      }
      else
      {
        v5 = (OZFramingBehavior *)((char *)this + 1792);
        if (v4 == 1)
          v6 = v8;
        else
          v6 = v9;
      }
    }
    OZChannelPosition3D::setPosition(v5, &v10, 0.0, 0.0, v6);
  }
}

uint64_t OZFramingBehavior::checkFit(OZFramingBehavior *this, uint64_t a2)
{
  OZScene *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  unsigned int v12;
  _BYTE v14[5];
  double v15;
  double v16;
  double v17;
  CMTime v18;

  v4 = (OZScene *)(*(uint64_t (**)(OZFramingBehavior *))(*(_QWORD *)this + 336))(this);
  if (v4)
  {
    memset(&v18, 0, sizeof(v18));
    OZScene::getCurrentTime(v4, (__n128 *)&v18);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1928), &v18, 0.0);
    v6 = v5;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2080), &v18, 0.0);
    v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2528), &v18, 0.0);
    if (v6 != 0.0 || v8 != 0.0)
      return 4;
    v10 = v9;
    v16 = 0.0;
    v17 = 0.0;
    v15 = 0.0;
    OZFramingBehavior::calculateFraming(this, &v18, &v17, &v16, &v15);
    v14[2] = v10 == v15;
    v14[0] = v10 == v17;
    v14[1] = v10 == v16;
    v14[3] = v10 == 0.0;
    v14[4] = 1;
    v11 = v14[(int)a2] != 0;
    if (v10 == v15)
      v11 = 1;
    if (v10 == v17)
      v11 = 1;
    if (!v11 && v10 != v16)
    {
      if (v10 == 0.0)
        return 3;
      return 4;
    }
    if (v14[(int)a2])
      v12 = a2;
    else
      v12 = 2 * (v10 == v15);
    if (v11)
      return v12;
    else
      return 1;
  }
  return a2;
}

void OZChannelPosition3D::getPosition(uint64_t a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a2, a4);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a2, a4);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 736), a2, a4);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v12;
}

uint64_t OZFramingBehavior::performDragOperation(OZFramingBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  uint64_t v9;
  __int128 v10;
  _OWORD v12[3];

  v9 = OZBehavior::performDragOperation(this, a2, a3, a4, a5, a6, a7, a8);
  OZFramingBehavior::calcTargetSize(this, (CMTimeValue *)v12);
  v10 = v12[1];
  *(_OWORD *)((char *)this + 5096) = v12[0];
  *(_OWORD *)((char *)this + 5112) = v10;
  *(_OWORD *)((char *)this + 5128) = v12[2];
  OZFramingBehavior::calculateFramingOffset(this);
  return v9;
}

uint64_t `non-virtual thunk to'OZFramingBehavior::performDragOperation(OZFramingBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZFramingBehavior::performDragOperation((OZFramingBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZFramingBehavior::notify(OZFramingBehavior *this, __int16 a2)
{
  OZScene *v4;
  OZScene *v5;
  uint64_t v6;
  uint64_t v7;
  OZNotificationManager *v8;
  OZChannelBase *v9;
  OZNotificationManager *v10;
  OZNotificationManager *v11;
  OZChannelBase *v12;
  OZNotificationManager *v13;
  OZNotificationManager *v14;
  OZNotificationManager *v15;
  OZChannelBase *v16;
  uint64_t ValueAsInt;
  int v18;
  CMTime v19;

  v4 = (OZScene *)(*(uint64_t (**)(OZFramingBehavior *))(*(_QWORD *)this + 336))(this);
  if ((a2 & 0xC) != 0)
  {
    v5 = v4;
    v6 = *((_QWORD *)v4 + 198);
    memset(&v19, 0, sizeof(v19));
    OZScene::getCurrentTime(v4, (__n128 *)&v19);
    v7 = *((_QWORD *)this + 605);
    if (v7)
    {
      v8 = *(OZNotificationManager **)(v6 + 168);
      if (v8)
      {
        if (OZNotificationManager::wasChannelModified(v8, (const OZChannelBase *)(v7 + 6808)))
        {
          v9 = (OZChannelBase *)*((_QWORD *)v5 + 188);
          if (v9)
            OZChannelBase::setRangeName(v9, (const PCString *)1);
          OZFramingBehavior::calculateFramingOffset(this);
        }
      }
    }
    if (OZFramingBehavior::targetSizeHasChanged(this))
      goto LABEL_13;
    v10 = *(OZNotificationManager **)(v6 + 168);
    if (!v10)
      goto LABEL_16;
    if (OZNotificationManager::wasChannelModified(v10, (const OZChannelBase *)((char *)this + 1536)))
      goto LABEL_13;
    v11 = *(OZNotificationManager **)(v6 + 168);
    if (!v11)
      goto LABEL_16;
    if (OZNotificationManager::wasChannelModified(v11, (const OZChannelBase *)((char *)this + 864)))
    {
LABEL_13:
      v12 = (OZChannelBase *)*((_QWORD *)v5 + 188);
      if (v12)
        OZChannelBase::setRangeName(v12, (const PCString *)1);
      OZFramingBehavior::calculateFramingOffset(this);
    }
    else
    {
      v13 = *(OZNotificationManager **)(v6 + 168);
      if (v13)
      {
        if (OZNotificationManager::wasChannelModified(v13, (const OZChannelBase *)((char *)this + 1928))
          || (v14 = *(OZNotificationManager **)(v6 + 168)) != 0
          && (OZNotificationManager::wasChannelModified(v14, (const OZChannelBase *)((char *)this + 2080))
           || (v15 = *(OZNotificationManager **)(v6 + 168)) != 0
           && OZNotificationManager::wasChannelModified(v15, (const OZChannelBase *)((char *)this + 2528))))
        {
          v16 = (OZChannelBase *)*((_QWORD *)v5 + 188);
          if (v16)
            OZChannelBase::setRangeName(v16, (const PCString *)1);
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1536), &v19, 0.0);
          v18 = OZFramingBehavior::checkFit(this, ValueAsInt);
          OZChannel::setValue((OZChannel *)((char *)this + 1536), &v19, (double)v18, 0);
        }
      }
    }
  }
LABEL_16:
  if ((a2 & 0x981C) != 0)
  {
    PCMutex::lock((PCMutex *)((char *)this + 5024));
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 5000, *((_QWORD **)this + 626));
    *((_QWORD *)this + 625) = (char *)this + 5008;
    *((_QWORD *)this + 627) = 0;
    *((_QWORD *)this + 626) = 0;
    PCMutex::unlock((PCMutex *)((char *)this + 5024));
  }
  OZCameraBehavior::notify(this, a2);
}

void `non-virtual thunk to'OZFramingBehavior::notify(OZFramingBehavior *this, __int16 a2)
{
  OZFramingBehavior::notify((OZFramingBehavior *)((char *)this - 336), a2);
}

BOOL OZFramingBehavior::velocityCached(uint64_t a1, CMTime *a2, uint64_t a3)
{
  PCMutex *v6;
  uint64_t v7;
  __int128 v8;
  _BOOL8 v9;

  v6 = (PCMutex *)(a1 + 5024);
  PCMutex::lock((PCMutex *)(a1 + 5024));
  v7 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>(a1 + 5000, a2);
  if (a1 + 5008 != v7)
  {
    v8 = *(_OWORD *)(v7 + 56);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 72);
    *(_OWORD *)a3 = v8;
  }
  v9 = a1 + 5008 != v7;
  PCMutex::unlock(v6);
  return v9;
}

uint64_t OZFramingBehavior::cacheVelocity(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  PCMutex *v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v10;

  v6 = (PCMutex *)(a1 + 5024);
  PCMutex::lock((PCMutex *)(a1 + 5024));
  v10 = a2;
  v7 = std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)(a1 + 5000), (CMTime *)a2, (uint64_t)&std::piecewise_construct, &v10);
  v8 = *a3;
  *((_QWORD *)v7 + 9) = *((_QWORD *)a3 + 2);
  *(_OWORD *)((char *)v7 + 56) = v8;
  return PCMutex::unlock(v6);
}

uint64_t OZFramingBehavior::accumTargetVelocity@<X0>(OZFramingBehavior *this@<X0>, Float64 a2@<D0>, double a3@<D1>, const CMTime *a4@<X1>, OZTransformNode *a5@<X2>, double *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;
  double v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64_t v25;
  float Seconds;
  double v27;
  double v28;
  _BYTE v29[24];
  CMTime time;
  CMTime v31;
  float64x2_t v32;
  double v33;
  CMTime v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  OZRenderState v43;
  double v44[3];
  float64x2_t v45;
  double v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  __int128 v51;
  int64_t v52;
  __n128 v53;
  CMTimeEpoch v54;
  __int128 v55;
  int64_t v56;
  __int128 v57;
  int64_t v58;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v59;
  CMTime time2;
  CMTime time1;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 608))(&v55);
  v53 = 0uLL;
  v54 = 0;
  v12 = (*(uint64_t (**)(OZFramingBehavior *))(*(_QWORD *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v53);
  v52 = v56;
  v51 = v55;
  memset(&v50, 0, sizeof(v50));
  *(_OWORD *)&v43.var0.var0 = v57;
  v43.var0.var3 = v58;
  *(__n128 *)&v34.value = v53;
  v34.epoch = v54;
  PC_CMTimeSaferSubtract((CMTime *)&v43, &v34, (uint64_t)&v50);
  memset(&v49, 0, sizeof(v49));
  operator*(&v50, &time2, a2);
  v43.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)time2;
  *(__n128 *)&v34.value = v53;
  v34.epoch = v54;
  PC_CMTimeFloorToSampleDuration((CMTime *)&v43, &v34, (uint64_t)&time1);
  *(_OWORD *)&v43.var0.var0 = v51;
  v43.var0.var3 = v52;
  v34 = time1;
  PC_CMTimeSaferAdd((CMTime *)&v43, &v34, (uint64_t)&v49);
  v48 = *a4;
  memset(&v47, 0, sizeof(v47));
  *(_OWORD *)&v43.var0.var0 = v51;
  v43.var0.var3 = v52;
  v34 = v50;
  PC_CMTimeSaferAdd((CMTime *)&v43, &v34, (uint64_t)&v47);
  v45 = 0uLL;
  v46 = 0.0;
  memset(v44, 0, sizeof(v44));
  a6[1] = 0.0;
  a6[2] = 0.0;
  *a6 = 0.0;
  OZRenderState::OZRenderState(&v43);
  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v34.value = 0x3FF0000000000000;
  *(_OWORD *)&v34.timescale = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  v40 = 0u;
  v41 = 0u;
  time1 = v49;
  *(__n128 *)&time2.value = v53;
  time2.epoch = v54;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v59);
  v43.var0 = v59;
  (*(void (**)(OZTransformNode *, CMTime *, OZRenderState *))(*(_QWORD *)a5 + 1256))(a5, &v34, &v43);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v34.value, v44, v45.f64);
  v32 = 0uLL;
  v33 = 0.0;
  v31 = v49;
  time1 = v49;
  time2 = v48;
  result = CMTimeCompare(&time1, &time2);
  if ((int)result <= 0)
  {
    v14 = 1.0 / (a3 * 0.1);
    if (a3 * 0.1 > 10.0)
      v14 = 0.1;
    if (a3 * 0.1 >= 0.1)
      v15 = v14;
    else
      v15 = 10.0;
    v16 = v15;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    do
    {
      if (OZFramingBehavior::velocityCached((uint64_t)this, &v31, (uint64_t)&v32))
      {
        v45 = vaddq_f64(v32, v45);
        v20 = v33;
        v46 = v33 + v46;
        v21 = v32.f64[1];
        v28 = v32.f64[0];
      }
      else
      {
        v23 = v45.f64[1];
        v22 = v45.f64[0];
        v24 = v46;
        v43.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v31;
        (*(void (**)(OZTransformNode *, CMTime *, OZRenderState *))(*(_QWORD *)a5 + 1256))(a5, &v34, &v43);
        PCMatrix44Tmpl<double>::transform<double>((double *)&v34.value, v44, v45.f64);
        v25 = v45.f64[0] - v22;
        v21 = v45.f64[1] - v23;
        v20 = v46 - v24;
        v28 = v25;
        v32.f64[0] = v25;
        v32.f64[1] = v21;
        v33 = v46 - v24;
        OZFramingBehavior::cacheVelocity((uint64_t)this, &v31, (__int128 *)&v32);
      }
      time1 = v31;
      time2 = v49;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v59);
      time1 = v47;
      time2 = v49;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v29);
      operator/((__int128 *)&v59.var0, (uint64_t)v29, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      v27 = 1.0 - powf(Seconds, v16);
      v17 = v28 * v27 + v17;
      v18 = v21 * v27 + v18;
      *a6 = v17;
      a6[1] = v18;
      v19 = v27 * v20 + v19;
      a6[2] = v19;
      time2 = v31;
      *(__n128 *)&v59.var0 = v53;
      v59.var3 = v54;
      PC_CMTimeSaferAdd(&time2, (CMTime *)&v59, (uint64_t)&time1);
      v31 = time1;
      time2 = v48;
      result = CMTimeCompare(&time1, &time2);
    }
    while ((int)result < 1);
  }
  return result;
}

double OZFramingBehavior::solveNode(OZFramingBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  OZTransformNode *TransformNode;
  OZTransformNode *v10;
  const void *v11;
  _QWORD *v12;
  _QWORD *v13;
  const void *v14;
  uint64_t v15;
  __n128 FrameDuration;
  __n128 *v17;
  double Seconds;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  const CMTime *v27;
  int ValueAsInt;
  uint64_t v29;
  OZCameraBehavior *v30;
  OZCameraBehavior *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CMTime *v49;
  OZCamera *v50;
  const CMTime *v51;
  OZCamera *v52;
  const void *v53;
  void *v54;
  double v55;
  int v56;
  int v57;
  double v58;
  __int128 v59;
  double v60;
  double v61;
  int v62;
  double v63;
  float64_t v64;
  double v65;
  float64_t v66;
  double v67;
  const CMTime *v68;
  double v69;
  double v70;
  int32_t v72;
  CMTime *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  const void *v78;
  void *v79;
  void *v80;
  float64x2_t *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  BOOL v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double EulerAngles;
  double v103;
  uint64_t i;
  double v105;
  double v107;
  double v108;
  int v109;
  double v110;
  Float64 v111;
  double v112;
  double v113;
  double v114;
  double FocalDistance;
  float64x2_t v116;
  double v117;
  _BYTE v118[40];
  _BYTE v119[24];
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  double v125;
  double v126;
  double v127;
  __int128 v128;
  double v129[2];
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  _BYTE v133[24];
  uint64_t v134;
  _BYTE v135[48];
  __int128 v136;
  __int128 v137;
  _BYTE v138[48];
  __int128 v139;
  double v140;
  OZRenderState v141;
  float64x2_t v142;
  double v143;
  CMTime v144;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v145;
  _BYTE v146[24];
  __int128 v147;
  double v148;
  __int128 v149;
  __int128 v150;
  double v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  float64x2_t v155;
  double v156;
  CMTime v157;
  double v158;
  double v159;
  double v160;
  float64x2_t v161;
  double v162;
  __int128 v163;
  double v164;
  CMTime var0;
  PC_Sp_counted_base *v166;
  PCSharedCount v167;
  OZRenderState time2;
  OZRenderState time1;
  CMTime v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  double v174[3];
  void *__p[3];
  _QWORD v176[8];
  CMTime time;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v178;
  _QWORD v179[3];
  __int128 v180;
  int64_t v181;
  __int128 v182;
  int64_t v183;
  __int128 v184;
  int64_t v185;
  __n128 v186;
  int64_t v187;
  CMTime v188;

  if ((*(unsigned int (**)(OZFramingBehavior *, double))(*(_QWORD *)this + 768))(this, a4))
  {
    TransformNode = (OZTransformNode *)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
    if (TransformNode)
    {
      if (*((_QWORD *)this + 606))
      {
        v10 = TransformNode;
        if (!*((_QWORD *)this + 605))
          goto LABEL_10;
        v11 = (const void *)*((_QWORD *)TransformNode + 120);
        if (!v11)
          goto LABEL_10;
        if (!v12)
          goto LABEL_10;
        do
        {
          v13 = v12;
          v14 = (const void *)v12[120];
          if (!v14)
            break;
        }
        while (v12);
        if ((*(unsigned int (**)(_QWORD *))(*v13 + 1640))(v13))
        {
LABEL_10:
          memset(&v188, 0, sizeof(v188));
          (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v188, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
          v186 = 0uLL;
          v187 = 0;
          v15 = (*(uint64_t (**)(OZFramingBehavior *))(*(_QWORD *)this + 336))(this);
          FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v186);
          (*(void (**)(__int128 *__return_ptr, OZFramingBehavior *, __n128))(*(_QWORD *)this + 608))(&v182, this, FrameDuration);
          v180 = v182;
          v181 = v183;
          memset(v179, 0, sizeof(v179));
          OZBehavior::getFrameDuration(this, (__n128 *)v146);
          *(_OWORD *)&time1.var0.var0 = v182;
          time1.var0.var3 = v183;
          *(_OWORD *)&time2.var0.var0 = v184;
          time2.var0.var3 = v185;
          PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v141);
          *(_OWORD *)&time1.var0.var0 = *(_OWORD *)&v141.var0.var0;
          time1.var0.var3 = v141.var0.var3;
          *(_OWORD *)&time2.var0.var0 = *(_OWORD *)v146;
          time2.var0.var3 = *(_QWORD *)&v146[16];
          PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)v179);
          memset(&v178, 0, sizeof(v178));
          *(_OWORD *)&time1.var0.var0 = v184;
          time1.var0.var3 = v185;
          *(__n128 *)&time2.var0.var0 = v186;
          time2.var0.var3 = v187;
          PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v178);
          time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v188;
          *(_OWORD *)&time2.var0.var0 = v180;
          time2.var0.var3 = v181;
          PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v141);
          *(__n128 *)&time1.var0.var0 = v186;
          time1.var0.var3 = v187;
          time2.var0 = v178;
          v17 = CMTimeCompare((CMTime *)&time1, (CMTime *)&time2) >= 0 ? &v186 : (__n128 *)&v178;
          *(__n128 *)&time1.var0.var0 = *v17;
          time1.var0.var3 = v17[1].n128_i64[0];
          operator/((__int128 *)&v141.var0.var0, (uint64_t)&time1, (uint64_t)&time);
          Seconds = CMTimeGetSeconds(&time);
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3976), &v188, 0.0);
          v20 = v19;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4128), &v188, 0.0);
          if (Seconds >= 0.0)
          {
            v22 = v21;
            if (Seconds != 0.0 || v20 <= 0.0 || v21 <= 0.0)
            {
              v23 = Seconds <= 1.0;
              if (Seconds <= 1.0)
                v24 = Seconds;
              else
                v24 = 1.0;
              v25 = 0.0;
              if (!v23)
              {
                *(_OWORD *)&time1.var0.var0 = v180;
                time1.var0.var3 = v181;
                time2.var0 = v178;
                PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v141);
                v25 = (*(double (**)(OZFramingBehavior *, uint64_t, OZRenderState *, double))(*(_QWORD *)this + 776))(this, a2, &v141, a5);
              }
              v176[1] = 0xBFF0000000000000;
              v176[0] = &unk_1E65CB4A8;
              if (OZValueCache<OZFramingCacheItem>::find((uint64_t)this + 4856, (uint64_t)v176, v24))
              {
                switch((int)a2)
                {
                  case 0:
                    v26 = *(double *)&v176[2];
                    goto LABEL_70;
                  case 1:
                    v26 = *(double *)&v176[3];
                    goto LABEL_70;
                  case 2:
                    v26 = *(double *)&v176[4];
                    goto LABEL_70;
                  case 3:
                    v26 = *(double *)&v176[5];
                    goto LABEL_70;
                  case 4:
                    v26 = *(double *)&v176[6];
                    goto LABEL_70;
                  case 5:
                    v26 = *(double *)&v176[7];
LABEL_70:
                    a5 = v25 + v26;
                    break;
                  default:
                    return a5;
                }
              }
              else
              {
                v107 = v25;
                v27 = (const CMTime *)MEMORY[0x1E0CA2E68];
                ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3720), MEMORY[0x1E0CA2E68], 0.0);
                v29 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4280), v27, 0.0);
                v30 = (OZCameraBehavior *)v29;
                if (ValueAsInt)
                  v31 = (OZCameraBehavior *)v29;
                else
                  v31 = 0;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4536), &v188, 0.0);
                v33 = v32;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4688), &v188, 0.0);
                v35 = v34;
                if (v20 >= v22)
                  v36 = v20;
                else
                  v36 = v22;
                v37 = 1.0;
                if (v33 <= 1.0)
                  v38 = v33;
                else
                  v38 = 1.0;
                if (v33 >= v36)
                  v39 = v38;
                else
                  v39 = v36;
                if (v20 <= -0.0000001 || v20 >= 0.0000001)
                {
                  v40 = 1.0;
                  if (v24 / v20 <= 1.0)
                    v40 = v24 / v20;
                  if (v24 / v20 >= 0.0)
                    v37 = v40;
                  else
                    v37 = 0.0;
                }
                v41 = OZCameraBehavior::calcEaseInEaseOut(v30, v37);
                if (v22 <= -0.0000001 || (v42 = 1.0, v22 >= 0.0000001))
                {
                  v43 = 1.0;
                  if (v24 / v22 <= 1.0)
                    v43 = v24 / v22;
                  v42 = 0.0;
                  if (v24 / v22 >= 0.0)
                    v42 = v43;
                }
                v111 = v39;
                v44 = OZCameraBehavior::calcEaseInEaseOut(v31, v42);
                std::vector<double>::vector(__p, 6uLL);
                (*(void (**)(OZFramingBehavior *, const CMTime *, void **))(*(_QWORD *)this + 744))(this, a3, __p);
                v45 = *(double *)__p[0];
                v46 = *((double *)__p[0] + 1);
                v114 = *((double *)__p[0] + 2);
                v47 = *((double *)__p[0] + 4);
                v48 = *((double *)__p[0] + 5);
                v174[0] = *((double *)__p[0] + 3);
                v174[1] = v47;
                v174[2] = v48;
                v171 = 0x3FF0000000000000;
                v172 = 0uLL;
                v173 = 0;
                PCQuat<double>::setEulerAngles((double *)&v171, 4, v174[0], v47, v48);
                memset(&v170, 0, sizeof(v170));
                if (v24 == 1.0)
                {
                  *(_OWORD *)&time1.var0.var0 = v180;
                  time1.var0.var3 = v181;
                  time2.var0 = v178;
                  PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v170);
                }
                else
                {
                  v170 = v188;
                }
                OZRenderState::OZRenderState(&time1);
                v49 = (CMTime *)v179;
                if (!ValueAsInt)
                  v49 = &v170;
                *(_OWORD *)&time1.var0.var0 = *(_OWORD *)&v49->value;
                time1.var0.var3 = v49->epoch;
                time1.var8 = 0;
                OZRenderState::OZRenderState(&time2);
                time2.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v188;
                time2.var8 = 0;
                v117 = (*(double (**)(_QWORD))(**((_QWORD **)this + 606) + 1328))(*((_QWORD *)this + 606));
                v166 = 0;
                PCSharedCount::PCSharedCount(&v167);
                v50 = (OZCamera *)*((_QWORD *)this + 605);
                if (v50)
                {
                  var0 = (CMTime)time2.var0;
                  OZCamera::cameraAtTime(v50, &var0, (PCSharedCount *)&v141);
                  PCPtr<LiImageSource>::operator=<TXTextureDecal>(&v166, (const PCSharedCount *)&v141);
                  PCSharedCount::~PCSharedCount((PCSharedCount *)&v141.var0.var1);
                  if (!v166)
                    throw_PCNullPointerException(1);
                  v117 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v166 + 688))(v166);
                  FocalDistance = OZCameraBehavior::getFocalDistance(this, *((OZChannelBehavior **)this + 605), &v188, v51);
                }
                else
                {
                  FocalDistance = 0.0;
                }
                v53 = (const void *)*((_QWORD *)this + 606);
                v109 = ValueAsInt;
                v108 = v41;
                v110 = v35;
                if (v53)
                else
                  v54 = 0;
                v116 = (float64x2_t)xmmword_1B304EEE0;
                v163 = xmmword_1B304EEE0;
                v164 = 0.0;
                v55 = 0.0;
                v56 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1024), MEMORY[0x1E0CA2E68], 0.0);
                v57 = v56;
                v58 = 1.0;
                v113 = v45;
                switch(v56)
                {
                  case 0:
                    v59 = xmmword_1B304EED0;
                    goto LABEL_73;
                  case 1:
                    v59 = xmmword_1B3058A90;
LABEL_73:
                    v116 = (float64x2_t)v59;
                    goto LABEL_76;
                  case 2:
                    v163 = 0uLL;
                    v164 = -1.0;
                    v58 = 0.0;
                    v55 = -1.0;
                    goto LABEL_76;
                  case 3:
                    v163 = 0uLL;
                    v164 = 1.0;
                    v116 = (float64x2_t)xmmword_1B305A270;
                    v58 = 0.0;
                    v55 = 1.0;
LABEL_76:
                    v60 = 0.0;
                    goto LABEL_80;
                  case 4:
                    v60 = 1.0;
                    goto LABEL_79;
                  case 5:
                    v60 = -1.0;
                    goto LABEL_79;
                  default:
                    v60 = 0.0;
LABEL_79:
                    v116 = 0u;
LABEL_80:
                    if (!v54 || !v52)
                      goto LABEL_87;
                    if (v56 == 2)
                    {
                      v55 = 1.0;
                    }
                    else
                    {
                      if (v56 != 3)
                        goto LABEL_87;
                      v55 = -1.0;
                    }
                    v163 = 0uLL;
                    v58 = 0.0;
                    v164 = v55;
LABEL_87:
                    v112 = v46;
                    v61 = 0.0;
                    v62 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1280), MEMORY[0x1E0CA2E68], 0.0);
                    switch(v62)
                    {
                      case 1:
                      case 7:
                        v163 = 0x3FF0000000000000uLL;
                        v164 = 0.0;
                        v55 = 0.0;
                        v61 = 1.0;
                        goto LABEL_95;
                      case 2:
                      case 8:
                        v163 = 0xBFF0000000000000;
                        v164 = 0.0;
                        v55 = 0.0;
                        v61 = -1.0;
                        goto LABEL_95;
                      case 3:
                      case 9:
                        v163 = xmmword_1B304EEE0;
                        v164 = 0.0;
                        v58 = 1.0;
                        goto LABEL_92;
                      case 4:
                      case 10:
                        v163 = xmmword_1B305A270;
                        v164 = 0.0;
                        v58 = -1.0;
LABEL_92:
                        v55 = 0.0;
                        break;
                      case 5:
                      case 11:
                        v163 = 0uLL;
                        v164 = 1.0;
                        v55 = 1.0;
                        goto LABEL_95;
                      case 6:
                      case 12:
                        v163 = 0uLL;
                        v164 = -1.0;
                        v55 = -1.0;
LABEL_95:
                        v58 = 0.0;
                        break;
                      default:
                        break;
                    }
                    if (v166
                      && (*(unsigned int (**)(PC_Sp_counted_base *))(*(_QWORD *)v166 + 632))(v166) == 1)
                    {
                      *(_OWORD *)v146 = 0uLL;
                      *(double *)&v146[16] = FocalDistance;
                      v141.var7.var0[1][2] = 1.0;
                      v141.var7.var0[0][1] = 1.0;
                      v141.var3 = 1.0;
                      v141.var0.var0 = 0x3FF0000000000000;
                      memset(&v141.var0.var1, 0, 32);
                      memset(&v141.var4, 0, 32);
                      memset(&v141.var7.var0[0][2], 0, 32);
                      PCMatrix44Tmpl<double>::leftRotate((__int128 *)&v141.var0.var0, (double *)&v171);
                      v63 = 1.0 / v117;
                      if (1.0 / v117 != 1.0)
                      {
                        *(float64x2_t *)&v141.var0.var0 = vmulq_n_f64(*(float64x2_t *)&v141.var0.var0, v63);
                        *(float64x2_t *)&v141.var0.var3 = vmulq_n_f64(*(float64x2_t *)&v141.var0.var3, v63);
                      }
                      PCMatrix44Tmpl<double>::transform<double>((double *)&v141.var0.var0, (double *)v146, (double *)v146);
                      v112 = v112 + *(double *)&v146[8];
                      v113 = v113 + *(double *)v146;
                      v114 = v114 + *(double *)&v146[16];
                    }
                    v161 = 0uLL;
                    v162 = 0.0;
                    v159 = 0.0;
                    v158 = 0.0;
                    v160 = 0.0;
                    OZChannelPosition3D::getPosition((uint64_t)this + 1792, &v188, &v158, 0.0);
                    switch(v57)
                    {
                      case 0:
                        v64 = v159;
                        v65 = -v158;
                        goto LABEL_104;
                      case 1:
                        v64 = v159;
                        v65 = v158;
LABEL_104:
                        v161.f64[0] = 0.0;
                        goto LABEL_111;
                      case 2:
                        v66 = v158;
                        v65 = -v159;
                        goto LABEL_107;
                      case 3:
                        v66 = v158;
                        v65 = v159;
LABEL_107:
                        v161.f64[0] = v66;
                        v64 = 0.0;
                        goto LABEL_111;
                      case 4:
                        v67 = v158;
                        v64 = v159;
                        goto LABEL_110;
                      case 5:
                        v64 = v159;
                        v67 = -v158;
LABEL_110:
                        v161.f64[0] = v67;
                        v65 = 0.0;
LABEL_111:
                        v161.f64[1] = v64;
                        v162 = v65;
                        break;
                      default:
                        break;
                    }
                    if (v52)
                    {
                      v157 = (CMTime)time1.var0;
                      OZCamera::cameraAtTime(v52, &v157, (PCSharedCount *)v146);
                      PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v141, (const PCSharedCount *)v146);
                      PCSharedCount::~PCSharedCount((PCSharedCount *)&v146[8]);
                      if (!v141.var0.var0)
                        throw_PCNullPointerException(1);
                      if (!(*(unsigned int (**)(int64_t))(*(_QWORD *)v141.var0.var0 + 632))(v141.var0.var0))
                      {
                        v69 = OZCameraBehavior::getFocalDistance(this, v52, &v170, v68);
                        v162 = v162 - v69;
                      }
                      PCSharedCount::~PCSharedCount((PCSharedCount *)&v141.var0.var1);
                    }
                    v70 = FocalDistance + v160;
                    if (FocalDistance + v160 < 0.0000001 && v70 > -0.0000001)
                      v70 = -1.0;
                    v155 = vaddq_f64(v161, vmulq_n_f64(v116, v70));
                    v156 = v162 + v60 * v70;
                    v154 = 0x3FF0000000000000;
                    v151 = 1.0;
                    v148 = 1.0;
                    *(_QWORD *)v146 = 0x3FF0000000000000;
                    *(_OWORD *)&v146[8] = 0u;
                    v147 = 0u;
                    v149 = 0u;
                    v150 = 0u;
                    v152 = 0u;
                    v153 = 0u;
                    OZFramingBehavior::getTargetTransform((uint64_t)this, (double *)v146, (uint64_t)&time1);
                    if (fabs(v111 + -1.0) < 0.0000001 || v24 < v111)
                    {
                      PCMatrix44Tmpl<double>::transform<double>((double *)v146, v161.f64, v161.f64);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v146, v155.f64, v155.f64);
                    }
                    else
                    {
                      memset(v133, 0, sizeof(v133));
                      operator*((CMTime *)&v178, (CMTime *)&v145, v111);
                      v141.var0 = v145;
                      *(__n128 *)v135 = v186;
                      *(_QWORD *)&v135[16] = v187;
                      PC_CMTimeFloorToSampleDuration((CMTime *)&v141, (CMTime *)v135, (uint64_t)v118);
                      *(_OWORD *)&v141.var0.var0 = v180;
                      v141.var0.var3 = v181;
                      *(_OWORD *)v135 = *(_OWORD *)v118;
                      *(_QWORD *)&v135[16] = *(_QWORD *)&v118[16];
                      PC_CMTimeSaferAdd((CMTime *)&v141, (CMTime *)v135, (uint64_t)v133);
                      memset(&v145, 0, sizeof(v145));
                      *(_OWORD *)&v141.var0.var0 = v180;
                      v141.var0.var3 = v181;
                      *($3CC8671D27C23BF42ADDB32F2B5E48AE *)v135 = v178;
                      PC_CMTimeSaferAdd((CMTime *)&v141, (CMTime *)v135, (uint64_t)&v145);
                      v141.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v188;
                      *($3CC8671D27C23BF42ADDB32F2B5E48AE *)v135 = v145;
                      v72 = CMTimeCompare((CMTime *)&v141, (CMTime *)v135);
                      v73 = (CMTime *)&v145;
                      if (v72 < 0)
                        v73 = &v188;
                      v144 = *v73;
                      OZFramingBehavior::accumTargetVelocity(this, v111, v110, &v144, v10, v142.f64);
                      OZRenderState::OZRenderState(&v141, &time1);
                      *(_OWORD *)v135 = *(_OWORD *)v133;
                      *(_QWORD *)&v135[16] = *(_QWORD *)&v133[16];
                      *(__n128 *)v118 = v186;
                      *(_QWORD *)&v118[16] = v187;
                      PC_CMTimeSaferSubtract((CMTime *)v135, (CMTime *)v118, (uint64_t)&v139);
                      *(_OWORD *)&v141.var0.var0 = v139;
                      *(double *)&v141.var0.var3 = v140;
                      *(_QWORD *)&v138[40] = 0x3FF0000000000000;
                      *(_QWORD *)v138 = 0x3FF0000000000000;
                      *(_QWORD *)&v135[40] = 0x3FF0000000000000;
                      *(_QWORD *)v135 = 0x3FF0000000000000;
                      memset(&v135[8], 0, 32);
                      v136 = 0u;
                      v137 = 0u;
                      memset(&v138[8], 0, 32);
                      OZFramingBehavior::getTargetTransform((uint64_t)this, (double *)v135, (uint64_t)&v141);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v135, v161.f64, v161.f64);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v135, v155.f64, v155.f64);
                      v161 = vaddq_f64(v142, v161);
                      v162 = v143 + v162;
                      v155 = vaddq_f64(v142, v155);
                      v156 = v143 + v156;
                    }
                    if (v62 <= 6)
                    {
                      v74 = v61 * *((double *)&v147 + 1);
                      v75 = v61 * *(double *)&v150;
                      v61 = v61 * *(double *)v146 + v58 * *(double *)&v146[8] + v55 * *(double *)&v146[16];
                      v76 = v74 + v58 * v148;
                      v77 = v58 * *((double *)&v150 + 1);
                      v58 = v76 + v55 * *(double *)&v149;
                      *(double *)&v163 = v61;
                      *((double *)&v163 + 1) = v58;
                      v55 = v75 + v77 + v55 * v151;
                      v164 = v55;
                    }
                    v141.var7.var0[1][2] = 1.0;
                    v141.var7.var0[0][1] = 1.0;
                    v141.var3 = 1.0;
                    v141.var0.var0 = 0x3FF0000000000000;
                    memset(&v141.var0.var1, 0, 32);
                    memset(&v141.var4, 0, 32);
                    memset(&v141.var7.var0[0][2], 0, 32);
                    v78 = *(const void **)(*((_QWORD *)this + 606) + 960);
                    if (v78
                    {
                      (*(void (**)(void *, OZRenderState *, OZRenderState *))(*(_QWORD *)v79 + 1256))(v79, &v141, &time2);
                      v80 = v54;
                    }
                    else
                    {
                      *(double *)&v141.var0.var0 = v117;
                      v80 = v54;
                    }
                    v137 = *(_OWORD *)&v141.var6;
                    *(_OWORD *)v138 = *(_OWORD *)&v141.var7.var0[0][1];
                    *(_OWORD *)&v138[16] = *(_OWORD *)&v141.var7.var0[0][3];
                    *(_OWORD *)&v138[32] = *(_OWORD *)&v141.var7.var0[1][1];
                    *(_OWORD *)v135 = *(_OWORD *)&v141.var0.var0;
                    *(_OWORD *)&v135[16] = *(_OWORD *)&v141.var0.var3;
                    *(_OWORD *)&v135[32] = *(_OWORD *)&v141.var2;
                    v136 = *(_OWORD *)&v141.var4;
                    if (PCMatrix44Tmpl<double>::invert((double *)v135, (double *)v135, 0.0))
                    {
                      v81 = &v155;
                      PCMatrix44Tmpl<double>::transform<double>((double *)v135, v155.f64, v155.f64);
                      PCMatrix44Tmpl<double>::transform<double>((double *)v135, v161.f64, v161.f64);
                      *(double *)&v163 = v61 * *(double *)v135 + v58 * *(double *)&v135[8] + v55 * *(double *)&v135[16];
                      *((double *)&v163 + 1) = v61 * *(double *)&v135[32]
                                             + v58 * *(double *)&v135[40]
                                             + v55 * *(double *)&v136;
                      v164 = v61 * *(double *)&v137 + v58 * *((double *)&v137 + 1) + v55 * *(double *)v138;
                      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2680), &v188, 0.0);
                      v83 = v82;
                      v84 = v156;
                      if (v108 == 1.0)
                        v85 = v156 + 3.0e-12;
                      else
                        v85 = v114 + v108 * (v156 - v114);
                      v87 = v57 < 4 && v52 != 0 || v80 == 0;
                      v88 = v155.f64[1];
                      v89 = v108 * (v155.f64[1] - v112);
                      v90 = v113 + v108 * (v155.f64[0] - v113);
                      v91 = v112 + v89;
                      *(double *)&v145.var0 = v90;
                      *(_QWORD *)&v144.timescale = 0;
                      v144.value = 0;
                      v92 = -1.0;
                      if (!v87)
                        v92 = 1.0;
                      *(double *)&v144.epoch = v92;
                      if (!v109)
                      {
                        v81 = (float64x2_t *)&v145;
                        v88 = v112 + v89;
                      }
                      v142.f64[0] = v81->f64[0];
                      v142.f64[1] = v88;
                      if (!v109)
                        v84 = v85;
                      v143 = v84;
                      calcRotation(v142.f64, v161.f64, (double *)&v163, (double *)&v144.value, (uint64_t)v133, v117);
                      v139 = 0uLL;
                      v140 = 0.0;
                      OZChannelPosition3D::getPosition((uint64_t)this + 2832, &v188, &v139, 0.0);
                      v93 = 0.00001;
                      if (v83 != 0.0)
                        v93 = v83;
                      if (v108 <= v93)
                      {
                        v97 = v108 / v93;
                        v96 = (v93 * 3.0 * (v108 / v93)
                             + v97 * v97 * ((v93 - v93) * 3.0 - v93 * 3.0)
                             + v97 * (v97 * v97) * (v93 - v93 * 3.0 - ((v93 - v93) * 3.0 - v93 * 3.0))
                             + 0.0)
                            / v93;
                      }
                      else
                      {
                        v94 = (v108 - v93) / (1.0 - v93);
                        v95 = (v93 - v93) * 3.0;
                        v96 = 1.0
                            - (v93
                             + v95 * v94
                             + v94 * v94 * (v95 - v95)
                             + v94 * (v94 * v94) * (1.0 - v93 - v95 - (v95 - v95))
                             - v93)
                            / (1.0 - v93);
                      }
                      PCQuat<double>::transform<double>((double *)v133, (double *)&v139);
                      v98 = v96 * v140;
                      v99 = v90 + v96 * *(double *)&v139;
                      v100 = v91 + v96 * *((double *)&v139 + 1);
                      *(double *)&v145.var0 = v99;
                      *(double *)&v145.var1 = v100;
                      v101 = v98 + v85;
                      *(double *)&v145.var3 = v101;
                      v142 = *v81;
                      v143 = v81[1].f64[0];
                      calcRotation(v142.f64, v161.f64, (double *)&v163, (double *)&v144.value, (uint64_t)v118, v117);
                      *(_OWORD *)&v133[8] = *(_OWORD *)&v118[8];
                      v134 = *(_QWORD *)&v118[24];
                      v131 = *(_OWORD *)&v118[8];
                      v130 = *(_QWORD *)v118;
                      v132 = *(_QWORD *)&v118[24];
                      *(_QWORD *)v133 = *(_QWORD *)v118;
                      shortest_slerp((double *)&v171, (double *)&v130, (uint64_t)v118, v44);
                      v171 = *(_QWORD *)v118;
                      v172 = *(_OWORD *)&v118[8];
                      v173 = *(_QWORD *)&v118[24];
                      v128 = 0uLL;
                      v129[0] = 0.0;
                      EulerAngles = PCQuat<double>::getEulerAngles((double *)&v171, &v128, (_QWORD *)&v128 + 1, v129, 4);
                      if (v166
                        && (*(unsigned int (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v166 + 632))(v166, EulerAngles) == 1)
                      {
                        v125 = 0.0;
                        v126 = 0.0;
                        v127 = FocalDistance;
                        v124 = 0x3FF0000000000000;
                        v121 = 0x3FF0000000000000;
                        *(_QWORD *)v119 = 0x3FF0000000000000;
                        *(_QWORD *)v118 = 0x3FF0000000000000;
                        memset(&v118[8], 0, 32);
                        *(_OWORD *)&v119[8] = 0u;
                        v120 = 0u;
                        v122 = 0u;
                        v123 = 0u;
                        PCMatrix44Tmpl<double>::leftRotate((__int128 *)v118, (double *)&v171);
                        v103 = 1.0 / v117;
                        if (1.0 / v117 != 1.0)
                        {
                          *(float64x2_t *)v118 = vmulq_n_f64(*(float64x2_t *)v118, v103);
                          *(float64x2_t *)&v118[16] = vmulq_n_f64(*(float64x2_t *)&v118[16], v103);
                        }
                        PCMatrix44Tmpl<double>::transform<double>((double *)v118, &v125, &v125);
                        v99 = v99 - v125;
                        v100 = v100 - v126;
                        v101 = v101 - v127;
                      }
                      if ((a2 - 3) <= 2)
                      {
                        for (i = 0; i != 3; ++i)
                          v129[i - 2] = v129[i - 2]
                                      + (double)(int)vcvtmd_s64_f64((v174[i] - v129[i - 2]) / 6.28318531 + 0.5 + 0.0000001)
                                      * 6.28318531;
                      }
                      *(_QWORD *)v118 = &unk_1E65CB4A8;
                      *(double *)&v118[8] = v24;
                      *(double *)&v118[16] = v99;
                      *(double *)&v118[24] = v100;
                      *(double *)&v118[32] = v101;
                      *(_OWORD *)v119 = v128;
                      *(double *)&v119[16] = v129[0];
                      OZValueCache<OZFramingCacheItem>::add((uint64_t)this + 4856, (uint64_t)v118);
                      switch((int)a2)
                      {
                        case 0:
                          a5 = v107 + v99;
                          break;
                        case 1:
                          a5 = v107 + v100;
                          break;
                        case 2:
                          a5 = v107 + v101;
                          break;
                        case 3:
                          v105 = *(double *)&v128;
                          goto LABEL_171;
                        case 4:
                          v105 = *((double *)&v128 + 1);
                          goto LABEL_171;
                        case 5:
                          v105 = v129[0];
LABEL_171:
                          a5 = v107 + v105;
                          break;
                        default:
                          break;
                      }
                    }
                    PCSharedCount::~PCSharedCount(&v167);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    break;
                }
              }
            }
          }
        }
      }
    }
  }
  return a5;
}

void sub_1B2F79D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount *a18)
{
  void *v19;

  PCSharedCount::~PCSharedCount(a18);
  v19 = (void *)STACK[0x740];
  if (STACK[0x740])
  {
    STACK[0x748] = (unint64_t)v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZFramingCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  std::mutex *v6;
  uint64_t i;
  double v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == a1 + 8)
    {
      v9 = 0;
      goto LABEL_7;
    }
    v8 = *(double *)(i + 24);
    if (v8 == a3)
      break;
  }
  *(double *)(a2 + 8) = v8;
  v10 = *(_OWORD *)(i + 32);
  v11 = *(_OWORD *)(i + 64);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(i + 48);
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 16) = v10;
  v9 = 1;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

double PCQuat<double>::getEulerAngles(double *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  double result;
  _OWORD v11[3];
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v16, a1);
  memset(v11, 0, sizeof(v11));
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v12 = a5;
  PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v16, (uint64_t)v11);
  v9 = *((_QWORD *)&v13 + 1);
  *a2 = v13;
  *a3 = v9;
  result = *(double *)&v14;
  *a4 = v14;
  return result;
}

void OZValueCache<OZFramingCacheItem>::add(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >= *(_QWORD *)(a1 + 32))
  {
    v6 = *(uint64_t **)(a1 + 16);
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *(_QWORD *)(a1 + 24) = v5 - 1;
    (*(void (**)(uint64_t *))v6[2])(v6 + 2);
    operator delete(v6);
  }
  v8 = operator new(0x50uLL);
  v8[3] = *(_QWORD *)(a2 + 8);
  v8[1] = a1 + 8;
  v8[2] = &unk_1E65CB4A8;
  v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 3) = v9;
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 8);
  *v8 = v10;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(a1 + 8) = v8;
  ++*(_QWORD *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B2F7A01C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZFramingBehavior::solveNode(OZFramingBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  return OZFramingBehavior::solveNode((OZFramingBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZFramingCacheItem::~OZFramingCacheItem(OZFramingCacheItem *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t OZValueCache<OZFramingCacheItem>::OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65CB4E0;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B3054250;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B2F7A09C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZFramingCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZFramingCacheItem>::~OZValueCache(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZValueCache<OZFramingCacheItem>::~OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65CB4E0;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

void BHOvershootBehavior::BHOvershootBehavior(BHOvershootBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CB510;
  v5[2] = &unk_1E65CB850;
  v5[6] = &unk_1E65CBAA8;
  v5[42] = &unk_1E65CBB00;
  v5[67] = &unk_1E65CBB28;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior Start Value"));
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 864), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior End Value"));
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1016), &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior Ramp Fraction"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), 0.35, &v6, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior Ring Cycles"));
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1320), 3.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior Acceleration"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1472), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior Start Frame Offset"));
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1624), &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Overshoot Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((BHOvershootBehavior *)((char *)this + 1776), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1624), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1776), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1168), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1472), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 1168), 0.01);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1168));
  OZChannel::setMin((OZChannel *)((char *)this + 1320), 0.01);
  OZChannel::setMax((OZChannel *)((char *)this + 1320), 100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1320), 10.0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1320));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1624), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1624));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1776), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1776));
}

void sub_1B2F7A49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSingleChannelBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannelPercent *v13;
  OZChannel *v14;
  OZChannelPercent *v15;
  OZChannel *v16;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannel::~OZChannel(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior::BHOvershootBehavior(BHOvershootBehavior *this, const BHOvershootBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CB510;
  *(_QWORD *)(v5 + 16) = &unk_1E65CB850;
  *(_QWORD *)(v5 + 48) = &unk_1E65CBAA8;
  *(_QWORD *)(v5 + 336) = &unk_1E65CBB00;
  *(_QWORD *)(v5 + 536) = &unk_1E65CBB28;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((_QWORD *)this + 127) = &off_1E6551358;
  *((_QWORD *)this + 129) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((_QWORD *)this + 165) = &off_1E6551358;
  *((_QWORD *)this + 167) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1472), (const OZChannelBase *)((char *)a2 + 1472), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1624), (const OZChannelBase *)((char *)a2 + 1624), v6);
  *((_QWORD *)this + 203) = &off_1E6551358;
  *((_QWORD *)this + 205) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1776), (const OZChannelBase *)((char *)a2 + 1776), v6);
  *((_QWORD *)this + 222) = &off_1E6551358;
  *((_QWORD *)this + 224) = &unk_1E65516B8;
}

void sub_1B2F7A6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10)
{
  OZSingleChannelBehavior *v10;
  OZChannel *v11;
  OZChannelPercent *v12;
  OZChannel *v13;
  OZChannelPercent *v14;
  OZChannel *v15;

  OZChannel::~OZChannel(v15);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannel::~OZChannel(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannel::~OZChannel(v11);
  OZChannel::~OZChannel(a10);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F7A74C()
{
  JUMPOUT(0x1B2F7A734);
}

void sub_1B2F7A754()
{
  JUMPOUT(0x1B2F7A73CLL);
}

void BHOvershootBehavior::~BHOvershootBehavior(BHOvershootBehavior *this)
{
  *(_QWORD *)this = &off_1E65CB510;
  *((_QWORD *)this + 2) = &unk_1E65CB850;
  *((_QWORD *)this + 6) = &unk_1E65CBAA8;
  *((_QWORD *)this + 42) = &unk_1E65CBB00;
  *((_QWORD *)this + 67) = &unk_1E65CBB28;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1776));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1624));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  BHOvershootBehavior::~BHOvershootBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'BHOvershootBehavior::~BHOvershootBehavior(BHOvershootBehavior *this)
{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 16));
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 48));
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 336));
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 536));
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  BHOvershootBehavior::~BHOvershootBehavior((BHOvershootBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t BHOvershootBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
  OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);
  OZChannelBase::operator=(a1 + 1472, (uint64_t)v5 + 1472);
  OZChannelBase::operator=(a1 + 1624, (uint64_t)v5 + 1624);
  return OZChannelBase::operator=(a1 + 1776, (uint64_t)v5 + 1776);
}

double BHOvershootBehavior::solveNode(BHOvershootBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  OZScene *v7;
  const CMTime *v8;
  double v9;
  double v10;
  OZScene *v11;
  double v12;
  OZChannel *v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double Seconds;
  double v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  long double v33;
  double v34;
  CMTime time;
  __n128 v36;
  CMTimeEpoch v37;
  CMTime v38;
  __n128 v39;
  CMTimeEpoch v40;
  CMTime v41;
  CMTime v42[2];
  CMTime v43;
  CMTime v44;
  __n128 v45;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;

  memset(&v44, 0, sizeof(v44));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v44, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v43 = v44;
  if ((*(unsigned int (**)(BHOvershootBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 296))(this, &v43, 0, 1, 1)&& (*(uint64_t (**)(BHOvershootBehavior *))(*(_QWORD *)this + 336))(this))
  {
    (*(void (**)(CMTime *__return_ptr, BHOvershootBehavior *))(*(_QWORD *)this + 608))(v42, this);
    memset(&v41, 0, sizeof(v41));
    v45 = *(__n128 *)&v42[0].value;
    epoch = v42[0].epoch;
    v7 = (OZScene *)(*(uint64_t (**)(BHOvershootBehavior *))(*(_QWORD *)this + 336))(this);
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1624), MEMORY[0x1E0CA2E68], 0.0);
    OZScene::getTimeForFrame(v7, v9, &v39);
    *(__n128 *)&time1.value = v45;
    time1.epoch = epoch;
    *(__n128 *)&time2.value = v39;
    time2.epoch = v40;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
    v39 = 0uLL;
    v40 = 0;
    OZBehavior::getFrameDuration(this, &v36);
    time1 = v42[0];
    time2 = v42[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v45);
    *(__n128 *)&time1.value = v45;
    time1.epoch = epoch;
    *(__n128 *)&time2.value = v36;
    time2.epoch = v37;
    v10 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v38);
    v11 = (OZScene *)(*(uint64_t (**)(BHOvershootBehavior *, double))(*(_QWORD *)this + 336))(this, v10);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1776), v8, 0.0);
    OZScene::getTimeForFrame(v11, v12, &v45);
    time1 = v38;
    *(__n128 *)&time2.value = v45;
    time2.epoch = epoch;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v39);
    time1 = v44;
    time2 = v41;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v13 = (OZChannel *)((char *)this + 864);
      goto LABEL_7;
    }
    time1 = v44;
    *(__n128 *)&time2.value = v39;
    time2.epoch = v40;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      v13 = (OZChannel *)((char *)this + 1016);
LABEL_7:
      OZChannel::getValueAsDouble(v13, MEMORY[0x1E0CA2E68], 0.0);
      return v14 + a5;
    }
    v45 = 0uLL;
    epoch = 0;
    *(__n128 *)&time1.value = v39;
    time1.epoch = v40;
    time2 = v41;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v45);
    *(__n128 *)&time1.value = v45;
    time1.epoch = epoch;
    time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), v8, 0.0);
      v17 = v16;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), v8, 0.0);
      v19 = v18;
      v20 = v18 - v17;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), v8, 0.0);
      v22 = v21;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1472), v8, 0.0);
      v24 = v23;
      time1 = v44;
      time2 = v41;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v38);
      operator/((__int128 *)&v38.value, (uint64_t)&v45, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      v27 = Seconds;
      if (Seconds <= v22)
      {
        v34 = Seconds / v22;
        *(double *)&time1.value = v27 / v22;
        if (v24 > 0.0 && v34 > 0.0 && v34 < 1.0)
        {
          PCMath::easeInOut((double *)&time1.value, v34, v24, 0.0, 0.0, 1.0, 0, v25);
          v34 = *(double *)&time1.value;
        }
        return v17 + v20 * v34 + a5;
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), MEMORY[0x1E0CA2E68], 0.0);
        v29 = v28 * 6.28318531;
        time1.value = 0;
        PCMath::easeInOut(0, 1.0, v24, 0.0, 0.0, 1.0, (double *)&time1.value, v30);
        v31 = (1.0 - v22) * (v20 * *(double *)&time1.value) / v22 / v29;
        v32 = (v27 - v22) / (1.0 - v22);
        v33 = v31 * sin(v29 * v32);
        return v19 + a5 + v33 * ((exp(v32 * -3.0) + -0.0497870684) * 1.0523957);
      }
    }
    else
    {
      return 0.0;
    }
  }
  return a5;
}

double `non-virtual thunk to'BHOvershootBehavior::solveNode(BHOvershootBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return BHOvershootBehavior::solveNode((BHOvershootBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void BHOvershootBehavior::didSetChannelInfo(BHOvershootBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel *v6;
  OZChannel *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  const CMTime *v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double v19;

  v6 = (OZChannel *)((char *)this + 864);
  OZChannel::setInfo((OZChannel *)((char *)this + 864), a2);
  v7 = (OZChannel *)((char *)this + 1016);
  OZChannel::setInfo((OZChannel *)((char *)this + 1016), a2);
  v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((_QWORD *)this + 124) + 40) + -57.2957795) >= 0.0000001)
      v10 = 100.0;
    else
      v10 = 6.28318531;
  }
  else
  {
    v10 = v9 - v8;
    v11 = *((double *)this + 79);
    if (v11 != 3.40282347e38)
    {
      v12 = v10 / v11;
      v13 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble(v6, MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::setValue(v6, v13, v12 * v14, 0);
      OZChannel::getValueAsDouble(v7, v13, 0.0);
      OZChannel::setValue(v7, v13, v12 * v15, 0);
    }
  }
  v19 = 0.0;
  (*(void (**)(_QWORD, double *))(**((_QWORD **)a3->var14 + 1) + 264))(*((_QWORD *)a3->var14 + 1), &v19);
  v16 = v19;
  v19 = 0.0;
  (*(void (**)(_QWORD, double *))(**((_QWORD **)a3->var14 + 1) + 256))(*((_QWORD *)a3->var14 + 1), &v19);
  if (v19 == 3.40282347e38 || v16 == -3.40282347e38)
    v18 = 3.40282347e38;
  else
    v18 = v19 - v16;
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, v10);
  OZChannel::setMin(v6, -v18);
  OZChannel::setMax(v6, v18);
  OZChannel::setSliderMin(v7, 0.0);
  OZChannel::setSliderMax(v7, v10);
  OZChannel::setMin(v7, -v18);
  OZChannel::setMax(v7, v18);
}

void OZGenericBehavior::OZGenericBehavior(OZGenericBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E65CBBA0;
  *(_QWORD *)(v4 + 16) = &unk_1E65CBE60;
  *(_QWORD *)(v4 + 48) = &unk_1E65CC0B8;
  *(_QWORD *)(v4 + 336) = &unk_1E65CC110;
  *(_QWORD *)(v4 + 552) = 0;
  *(_QWORD *)(v4 + 544) = 0;
  *(_QWORD *)(v4 + 536) = v4 + 544;
  *(_QWORD *)(v4 + 560) = v4 + 560;
  *(_QWORD *)(v4 + 568) = v4 + 560;
  *(_QWORD *)(v4 + 576) = 0;
  *(_BYTE *)(v4 + 584) = 0;
}

void OZGenericBehavior::OZGenericBehavior(OZGenericBehavior *this, unint64_t ***a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD **v10;
  _QWORD *v11;
  OZChannelBase *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  OZChannelBase *v18;
  const OZChannelBase *ChannelRootBase;
  _QWORD **v20;
  uint64_t ObjectManipulator;
  uint64_t v22;
  int v23;
  _OWORD *v24;
  OZChannelRef *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t i;
  _QWORD *v29;
  unint64_t v30;
  _QWORD **v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  _OWORD *v37;
  std::string *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  const OZGenericBehavior *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  unint64_t *v48;

  OZChannelBehavior::OZChannelBehavior(this, (const OZChannelBehavior *)a2, a3);
  *(_QWORD *)v5 = &off_1E65CBBA0;
  *(_QWORD *)(v5 + 16) = &unk_1E65CBE60;
  *(_QWORD *)(v5 + 48) = &unk_1E65CC0B8;
  *(_QWORD *)(v5 + 336) = &unk_1E65CC110;
  *(_QWORD *)(v5 + 552) = 0;
  *(_QWORD *)(v5 + 544) = 0;
  *(_QWORD *)(v5 + 536) = v5 + 544;
  v6 = v5 + 560;
  *(_QWORD *)(v5 + 560) = v5 + 560;
  *(_QWORD *)(v5 + 568) = v5 + 560;
  *(_QWORD *)(v5 + 576) = 0;
  *(_BYTE *)(v5 + 584) = *((_BYTE *)a2 + 584);
  v7 = a2[21];
  if (v7)
  {
    v42 = (const OZGenericBehavior *)a2;
    v43 = v5 + 560;
    v9 = *v7;
    v8 = v7[1];
    v10 = v47;
    v47[0] = 0;
    v47[1] = 0;
    v46 = (uint64_t *)v47;
    v44 = v8;
    if (v9 != v8)
    {
      v11 = a2 + 68;
      do
      {
        v45 = *v9;
        v12 = (OZChannelBase *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 248))(v45);
        OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v12);
        v13 = (_QWORD *)*v11;
        if (!*v11)
          goto LABEL_15;
        v14 = v11;
        do
        {
          v15 = v13[4];
          v16 = v15 >= v45;
          if (v15 >= v45)
            v17 = v13;
          else
            v17 = v13 + 1;
          if (v16)
            v14 = v13;
          v13 = (_QWORD *)*v17;
        }
        while (*v17);
        if (v14 != v11 && v45 >= v14[4])
        {
          v18 = (OZChannelBase *)v14[5];
          ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(v18);
          v20 = v10;
          ObjectManipulator = OZChannelBase::getObjectManipulator(v18);
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 56))(v22);
          v24 = (_OWORD *)operator new();
          *v24 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator)
                                       + 8)
                           + 8);
          v25 = (OZChannelRef *)operator new();
          OZChannelRef::OZChannelRef(v25, v18, ChannelRootBase);
          v26 = operator new(0x30uLL);
          v26[4] = v23;
          *((_QWORD *)v26 + 3) = v25;
          *((_QWORD *)v26 + 4) = v24;
          *((_QWORD *)v26 + 5) = v12;
          v27 = *((_QWORD *)this + 70);
          v6 = v43;
          *(_QWORD *)v26 = v27;
          *((_QWORD *)v26 + 1) = v43;
          *(_QWORD *)(v27 + 8) = v26;
          *((_QWORD *)this + 70) = v26;
          ++*((_QWORD *)this + 72);
          v10 = v20;
        }
        else
        {
LABEL_15:
          v48 = &v45;
          std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(&v46, &v45, (uint64_t)&std::piecewise_construct, (uint64_t **)&v48)[5] = (uint64_t)v12;
        }
        ++v9;
      }
      while (v9 != v44);
    }
    if (*((_QWORD *)v42 + 72))
    {
      for (i = *((_QWORD *)v42 + 71);
            (const OZGenericBehavior *)i != (const OZGenericBehavior *)((char *)v42 + 560);
            i = *(_QWORD *)(i + 8))
      {
        v29 = v47[0];
        if (v47[0])
        {
          v30 = *(_QWORD *)(i + 40);
          v31 = v10;
          do
          {
            v32 = v29;
            v33 = v31;
            v34 = v29[4];
            v35 = v29 + 1;
            if (v34 >= v30)
            {
              v35 = v32;
              v31 = (_QWORD **)v32;
            }
            v29 = (_QWORD *)*v35;
          }
          while (v29);
          if (v31 != v10)
          {
            if (v34 < v30)
              v32 = v33;
            if (v30 >= v32[4])
            {
              v36 = *(_DWORD *)(i + 16);
              v37 = (_OWORD *)operator new();
              *v37 = *(_OWORD *)*(_QWORD *)(i + 32);
              v38 = (std::string *)operator new();
              OZChannelRef::OZChannelRef(v38, *(const OZChannelRef **)(i + 24));
              v48 = (unint64_t *)(i + 40);
              v39 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(&v46, (unint64_t *)(i + 40), (uint64_t)&std::piecewise_construct, (uint64_t **)&v48)[5];
              v40 = operator new(0x30uLL);
              v40[4] = v36;
              *((_QWORD *)v40 + 3) = v38;
              *((_QWORD *)v40 + 4) = v37;
              *((_QWORD *)v40 + 5) = v39;
              v41 = *((_QWORD *)this + 70);
              *(_QWORD *)v40 = v41;
              *((_QWORD *)v40 + 1) = v6;
              *(_QWORD *)(v41 + 8) = v40;
              *((_QWORD *)this + 70) = v40;
              ++*((_QWORD *)this + 72);
            }
          }
        }
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v46, v47[0]);
  }
}

void sub_1B2F7B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  OZChannelBehavior *v15;
  uint64_t v16;

  MEMORY[0x1B5E29170](v16, 0x1012C40EC159624);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  std::__list_imp<unsigned int>::clear(a10);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v15 + 536, *((_QWORD **)v15 + 68));
  OZChannelBehavior::~OZChannelBehavior(v15);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::~OZGenericBehavior(OZGenericBehavior *this)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t *v10;
  uint64_t v11;
  OZChannelBase *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E65CBBA0;
  *((_QWORD *)this + 2) = &unk_1E65CBE60;
  *((_QWORD *)this + 6) = &unk_1E65CC0B8;
  *((_QWORD *)this + 42) = &unk_1E65CC110;
  v2 = (uint64_t **)*((_QWORD *)this + 21);
  if (v2)
  {
    v13 = &v13;
    v14 = &v13;
    v15 = 0;
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      v5 = 1;
      v6 = &v13;
      do
      {
        v7 = operator new(0x18uLL);
        v8 = *v3++;
        v7[1] = &v13;
        v7[2] = v8;
        *v7 = v6;
        v6[1] = v7;
        v13 = v7;
        v15 = v5++;
        v6 = v7;
      }
      while (v3 != v4);
      for (i = v14; i != &v13; i = (_QWORD *)i[1])
      {
        v12 = (OZChannelBase *)i[2];
        OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), v12);
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)this + 536, (unint64_t *)&v12);
        if (v12)
          (*((void (**)(OZChannelBase *))v12->var0 + 1))(v12);
      }
    }
    std::__list_imp<unsigned int>::clear(&v13);
  }
  while (*((_QWORD *)this + 72))
  {
    v10 = (uint64_t *)*((_QWORD *)this + 71);
    if (v10[4])
    {
      MEMORY[0x1B5E29170](v10[4], 0x1000C40451B5BE8);
      v10 = (uint64_t *)*((_QWORD *)this + 71);
    }
    v10[4] = 0;
    if (v10[3])
    {
      OZChannelRef::~OZChannelRef((void **)v10[3]);
      MEMORY[0x1B5E29170]();
      v10 = (uint64_t *)*((_QWORD *)this + 71);
    }
    v10[3] = 0;
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = v10[1];
    *(_QWORD *)v10[1] = v11;
    --*((_QWORD *)this + 72);
    operator delete(v10);
  }
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 70);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 536, *((_QWORD **)this + 68));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZGenericBehavior::~OZGenericBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZGenericBehavior::~OZGenericBehavior(OZGenericBehavior *this)
{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 16));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 48));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 336));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZGenericBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *i;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  OZChannelFolder *v24;
  _QWORD *v25;
  OZChannelBase *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  OZChannelBase *v32;
  const OZChannelBase *ChannelRootBase;
  uint64_t ObjectManipulator;
  uint64_t v35;
  int v36;
  _OWORD *v37;
  OZChannelRef *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t j;
  int v42;
  _OWORD *v43;
  std::string *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t v53;
  unint64_t *v54;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  i = v4;
  v6 = *(uint64_t ***)(a1 + 168);
  if (v6)
  {
    v51 = (uint64_t *)&v51;
    v52 = &v51;
    v53 = 0;
    v7 = *v6;
    v8 = v6[1];
    if (*v6 != v8)
    {
      v9 = v4;
      v10 = 1;
      v11 = &v51;
      do
      {
        v12 = (uint64_t *)operator new(0x18uLL);
        v13 = *v7++;
        v12[1] = (uint64_t)&v51;
        v12[2] = v13;
        *v12 = (uint64_t)v11;
        v11[1] = v12;
        v51 = v12;
        v53 = v10++;
        v11 = (uint64_t **)v12;
      }
      while (v7 != v8);
      v14 = v52;
      for (i = v9; v14 != &v51; v14 = (uint64_t **)v14[1])
      {
        OZGenericBehavior::removeChannel((uint64_t **)a1, (OZChannelBase *)v14[2]);
        v15 = v14[2];
        if (v15)
          (*(void (**)(uint64_t *))(*v15 + 8))(v15);
        v14[2] = 0;
      }
    }
    std::__list_imp<unsigned int>::clear(&v51);
  }
  while (*(_QWORD *)(a1 + 576))
  {
    v16 = *(uint64_t **)(a1 + 568);
    if (v16[4])
    {
      MEMORY[0x1B5E29170](v16[4], 0x1000C40451B5BE8);
      v16 = *(uint64_t **)(a1 + 568);
    }
    v16[4] = 0;
    if (v16[3])
    {
      OZChannelRef::~OZChannelRef((void **)v16[3]);
      MEMORY[0x1B5E29170]();
      v16 = *(uint64_t **)(a1 + 568);
    }
    v16[3] = 0;
    v17 = *v16;
    *(_QWORD *)(v17 + 8) = v16[1];
    *(_QWORD *)v16[1] = v17;
    --*(_QWORD *)(a1 + 576);
    operator delete(v16);
  }
  v18 = (unint64_t **)*((_QWORD *)i + 21);
  if (v18)
  {
    v48 = i;
    v19 = a1 + 560;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    v22 = *v18;
    v21 = v18[1];
    v52 = 0;
    v53 = 0;
    v51 = (uint64_t *)&v52;
    if (v22 != v21)
    {
      v23 = v20;
      v24 = (OZChannelFolder *)(a1 + 56);
      v25 = v48 + 68;
      v49 = v21;
      do
      {
        v50 = *v22;
        v26 = (OZChannelBase *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v50 + 248))(v50);
        OZChannelFolder::push_back(v24, v26);
        if (v23 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 272))(v23))
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 896))(v23, v50);
        v27 = (_QWORD *)*v25;
        if (!*v25)
          goto LABEL_34;
        v28 = v48 + 68;
        do
        {
          v29 = v27[4];
          v30 = v29 >= v50;
          if (v29 >= v50)
            v31 = v27;
          else
            v31 = v27 + 1;
          if (v30)
            v28 = v27;
          v27 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v28 != v25 && v50 >= v28[4])
        {
          v32 = (OZChannelBase *)v28[5];
          ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(v32);
          ObjectManipulator = OZChannelBase::getObjectManipulator(v32);
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 56))(v35);
          v37 = (_OWORD *)operator new();
          *v37 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator)
                                       + 8)
                           + 8);
          v38 = (OZChannelRef *)operator new();
          OZChannelRef::OZChannelRef(v38, v32, ChannelRootBase);
          v39 = operator new(0x30uLL);
          v39[4] = v36;
          *((_QWORD *)v39 + 3) = v38;
          *((_QWORD *)v39 + 4) = v37;
          *((_QWORD *)v39 + 5) = v26;
          v40 = *(_QWORD *)(a1 + 560);
          v21 = v49;
          v19 = a1 + 560;
          *(_QWORD *)v39 = v40;
          *((_QWORD *)v39 + 1) = a1 + 560;
          *(_QWORD *)(v40 + 8) = v39;
          *(_QWORD *)(a1 + 560) = v39;
          ++*(_QWORD *)(a1 + 576);
          v24 = (OZChannelFolder *)(a1 + 56);
        }
        else
        {
LABEL_34:
          v54 = &v50;
          std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(&v51, &v50, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54)[5] = (uint64_t)v26;
        }
        ++v22;
      }
      while (v22 != v21);
    }
    if (v48[72])
    {
      for (j = v48[71]; (_QWORD *)j != v48 + 70; j = *(_QWORD *)(j + 8))
      {
        v42 = *(_DWORD *)(j + 16);
        v43 = (_OWORD *)operator new();
        *v43 = *(_OWORD *)*(_QWORD *)(j + 32);
        v44 = (std::string *)operator new();
        OZChannelRef::OZChannelRef(v44, *(const OZChannelRef **)(j + 24));
        v54 = (unint64_t *)(j + 40);
        v45 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(&v51, (unint64_t *)(j + 40), (uint64_t)&std::piecewise_construct, (uint64_t **)&v54)[5];
        v46 = operator new(0x30uLL);
        v46[4] = v42;
        *((_QWORD *)v46 + 3) = v44;
        *((_QWORD *)v46 + 4) = v43;
        *((_QWORD *)v46 + 5) = v45;
        v47 = *(_QWORD *)(a1 + 560);
        *(_QWORD *)v46 = v47;
        *((_QWORD *)v46 + 1) = v19;
        *(_QWORD *)(v47 + 8) = v46;
        *(_QWORD *)(a1 + 560) = v46;
        ++*(_QWORD *)(a1 + 576);
      }
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1))
      OZGenericBehavior::genericBehaviorDidLoad((OZGenericBehavior *)a1, 1);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v51, v52);
  }
}

void sub_1B2F7BB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::removeChannel(uint64_t **this, OZChannelBase *a2)
{
  uint64_t v4;
  OZChannelBase *v5;

  v5 = a2;
  v4 = ((uint64_t (*)(uint64_t **))(*this)[40])(this);
  if (v4)
    (*(void (**)(uint64_t, OZChannelBase *))(*(_QWORD *)v4 + 888))(v4, a2);
  OZChannelFolder::removeDescendant((OZChannelFolder *)(this + 7), a2);
  std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)(this + 67), (unint64_t *)&v5);
  OZGenericBehavior::removeGenericNodes(this, v5);
}

_QWORD *OZGenericBehavior::genericBehaviorDidLoad(OZGenericBehavior *this, int a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t Effect;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  __int32 v25;
  __int32 v26;
  uint64_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v37;
  _QWORD *i;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _QWORD *j;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  BOOL v56;
  OZChannel *v58;
  _QWORD *v59;
  OZChannelBase *v60;
  _QWORD *v61;
  _QWORD *k;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  OZChannelBase *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  OZChannelBase **v70;

  result = (_QWORD *)(*(uint64_t (**)(OZGenericBehavior *))(*(_QWORD *)this + 320))(this);
  if (*((_QWORD *)this + 21))
  {
    v65 = a2;
    v5 = *((_QWORD *)this + 71);
    v67 = &v67;
    v68 = &v67;
    v69 = 0;
    if ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)this + 560))
    {
      v6 = (uint64_t)result;
      v7 = (char *)this + 544;
      v8 = result + 2;
      v9 = result + 122;
      v10 = result + 125;
      do
      {
        v11 = *(_QWORD **)v7;
        if (*(_QWORD *)v7)
        {
          v12 = *(_QWORD *)(v5 + 40);
          v13 = (char *)this + 544;
          do
          {
            v14 = v11[4];
            v15 = v14 >= v12;
            if (v14 >= v12)
              v16 = v11;
            else
              v16 = v11 + 1;
            if (v15)
              v13 = (char *)v11;
            v11 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v13 != v7 && v12 >= *((_QWORD *)v13 + 4))
            goto LABEL_77;
        }
        v17 = *(_DWORD *)(v5 + 16);
        if (v17)
          v18 = *(_DWORD *)(v6 + 80) == v17;
        else
          v18 = 1;
        v19 = v8;
        if (!v18)
        {
          if (OZSceneNode::getEffect((OZSceneNode *)v6, *(_DWORD *)(v5 + 16)))
          {
            Effect = OZSceneNode::getEffect((OZSceneNode *)v6, v17);
            v21 = Effect + 48;
          }
          else
          {
            if (!OZSceneNode::getBehavior((OZSceneNode *)v6, v17))
            {
              v19 = 0;
              goto LABEL_26;
            }
            Effect = OZSceneNode::getBehavior((OZSceneNode *)v6, v17);
            v21 = Effect + 16;
          }
          if (Effect)
            v19 = (_QWORD *)v21;
          else
            v19 = 0;
        }
LABEL_26:
        v22 = *(int **)(v5 + 32);
        v23 = *v22;
        v24 = v22[1];
        v25 = v22[2];
        v26 = v22[3];
        if (v24 | v23 | v25 | v26)
        {
          if (v19)
          {
            v27 = (*(uint64_t (**)(_QWORD *))(*v19 + 256))(v19);
            v28 = *(int32x4_t **)(v5 + 32);
            v29 = *v28;
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v27 + 8)+ 8), *v28)))) & 1) != 0)
            {
              v23 = (int)*v28;
              v24 = HIDWORD(v28->i64[0]);
              v25 = v29.i32[2];
              v26 = v29.i32[3];
              goto LABEL_30;
            }
          }
          else
          {
LABEL_30:
            v30 = *(_DWORD **)(v6 + 8);
            v31 = v30[2];
            v32 = v30[3];
            v34 = v30[4];
            v33 = v30[5];
            v37 = v31 == v23 && v32 == v24 && v34 == v25 && v33 == v26;
            v19 = v8;
            if (!v37)
            {
              for (i = *(_QWORD **)(v6 + 984); i != v9; i = (_QWORD *)i[1])
              {
                v39 = i[2];
                v40 = *(_DWORD **)(v39 + 40);
                v41 = v40[2];
                v42 = v40[3];
                v44 = v40[4];
                v43 = v40[5];
                if (v41 == v23 && v42 == v24 && v44 == v25 && v43 == v26)
                {
                  v19 = (_QWORD *)(v39 + 48);
                  goto LABEL_72;
                }
              }
              for (j = *(_QWORD **)(v6 + 1008); ; j = (_QWORD *)j[1])
              {
                if (j == v10)
                {
                  v66 = *(OZChannelBase **)(v5 + 40);
                  goto LABEL_76;
                }
                v49 = j[2];
                v50 = *(_DWORD **)(v49 + 8);
                v51 = v50[2];
                v52 = v50[3];
                v54 = v50[4];
                v53 = v50[5];
                v55 = v51 == v23 && v52 == v24;
                v56 = v55 && v54 == v25;
                if (v56 && v53 == v26)
                  break;
              }
              v19 = (_QWORD *)(v49 + 16);
            }
          }
LABEL_72:
          v66 = *(OZChannelBase **)(v5 + 40);
          goto LABEL_73;
        }
        v66 = *(OZChannelBase **)(v5 + 40);
        if (!v19)
          goto LABEL_76;
LABEL_73:
        v58 = (OZChannel *)(*(uint64_t (**)(_QWORD *, _QWORD, double))(*v19 + 224))(v19, *(_QWORD *)(v5 + 24), *((double *)this + 74));
        if (!v58
          || !(*(unsigned int (**)(OZGenericBehavior *, OZChannelBase *, OZChannel *))(*(_QWORD *)this + 680))(this, v66, v58))
        {
LABEL_76:
          v59 = operator new(0x18uLL);
          v60 = v66;
          v61 = v67;
          v59[1] = &v67;
          v59[2] = v60;
          *v59 = v61;
          v61[1] = v59;
          v67 = v59;
          ++v69;
          goto LABEL_77;
        }
        v70 = &v66;
        std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>((uint64_t **)this + 67, (unint64_t *)&v66, (uint64_t)&std::piecewise_construct, (uint64_t **)&v70)[5] = (uint64_t)v58;
        OZChannelBase::resetFlag(v66, 2, 0);
        OZGenericBehavior::addGenericNodes(this, v66, v58);
LABEL_77:
        v5 = *(_QWORD *)(v5 + 8);
      }
      while ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)this + 560));
    }
    if (v65)
    {
      for (k = v68; k != &v67; k = (_QWORD *)k[1])
        OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), (OZChannelBase *)k[2]);
      while (*((_QWORD *)this + 72))
      {
        v63 = (uint64_t *)*((_QWORD *)this + 71);
        if (v63[4])
        {
          MEMORY[0x1B5E29170](v63[4], 0x1000C40451B5BE8);
          v63 = (uint64_t *)*((_QWORD *)this + 71);
        }
        v63[4] = 0;
        if (v63[3])
        {
          OZChannelRef::~OZChannelRef((void **)v63[3]);
          MEMORY[0x1B5E29170]();
          v63 = (uint64_t *)*((_QWORD *)this + 71);
        }
        v63[3] = 0;
        v64 = *v63;
        *(_QWORD *)(v64 + 8) = v63[1];
        *(_QWORD *)v63[1] = v64;
        --*((_QWORD *)this + 72);
        operator delete(v63);
      }
    }
    return std::__list_imp<unsigned int>::clear(&v67);
  }
  return result;
}

void sub_1B2F7C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::willDeleteObject(OZGenericBehavior *this, OZObjectManipulator *a2)
{
  char *v4;
  char *v5;
  OZChannelBase *v6;
  OZChannelBase *ChannelRootBase;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  OZChannelRef *v11;
  OZChannelBase *v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  OZChannelBase **v20;
  char *v21;
  OZChannelBase *v22;
  char *v23;
  char *v24;
  BOOL v25;
  char *v26;
  char *v27;
  char *v28;
  char *__p;
  char *v30;
  char *v31;

  v4 = (char *)*((_QWORD *)this + 67);
  v5 = (char *)this + 544;
  __p = 0;
  v30 = 0;
  v31 = 0;
  if (v4 != (char *)this + 544)
  {
    v28 = (char *)this + 560;
    do
    {
      v6 = (OZChannelBase *)*((_QWORD *)v4 + 5);
      ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(v6);
      if ((OZObjectManipulator *)OZChannelBase::getObjectManipulator(ChannelRootBase) == a2)
      {
        v8 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
        v10 = (_OWORD *)operator new();
        *v10 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2) + 8)
                         + 8);
        v11 = (OZChannelRef *)operator new();
        OZChannelRef::OZChannelRef(v11, v6, ChannelRootBase);
        v12 = (OZChannelBase *)*((_QWORD *)v4 + 4);
        v13 = operator new(0x30uLL);
        v13[4] = v9;
        *((_QWORD *)v13 + 3) = v11;
        *((_QWORD *)v13 + 4) = v10;
        *((_QWORD *)v13 + 5) = v12;
        v14 = *((_QWORD *)this + 70);
        *(_QWORD *)v13 = v14;
        *((_QWORD *)v13 + 1) = v28;
        *(_QWORD *)(v14 + 8) = v13;
        *((_QWORD *)this + 70) = v13;
        ++*((_QWORD *)this + 72);
        OZChannelBase::setFlag(v12, 2, 0);
        if (v30 >= v31)
        {
          v16 = (v30 - __p) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v17 = (v31 - __p) >> 2;
          if (v17 <= v16 + 1)
            v17 = v16 + 1;
          if ((unint64_t)(v31 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v31, v18);
          else
            v19 = 0;
          v20 = (OZChannelBase **)&v19[8 * v16];
          *v20 = v12;
          v15 = (char *)(v20 + 1);
          v21 = v30;
          if (v30 != __p)
          {
            do
            {
              v22 = (OZChannelBase *)*((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v22;
            }
            while (v21 != __p);
            v21 = __p;
          }
          __p = (char *)v20;
          v31 = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v30 = v12;
          v15 = v30 + 8;
        }
        v30 = v15;
        OZGenericBehavior::removeGenericNodes((uint64_t **)this, v12);
      }
      v23 = (char *)*((_QWORD *)v4 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char *)*((_QWORD *)v4 + 2);
          v25 = *(_QWORD *)v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
    }
    while (v24 != v5);
    v27 = __p;
    v26 = v30;
    while (v27 != v26)
    {
      std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)this + 536, (unint64_t *)v26 - 1);
      v27 = __p;
      v26 = v30 - 8;
      v30 -= 8;
    }
  }
  OZChannelBehavior::willDeleteObject(this, a2);
  if (__p)
    operator delete(__p);
}

void sub_1B2F7C33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZGenericBehavior::removeGenericNodes(uint64_t **this, OZChannelBase *a2)
{
  void *v3;
  uint64_t *v4;
  void *v5;
  const void *v6;
  void *v7;
  OZChannelBase ***v8;
  OZChannelBase **i;
  OZChannelBase *v10;
  uint64_t v11;

  if ((a2->var7 & 0x1000) != 0)
  {
    if (v8)
    {
      for (i = *v8; i != v8[1]; ++i)
      {
        v10 = *i;
        OZGenericBehavior::removeGenericNodes((OZGenericBehavior *)this, v10);
      }
    }
  }
  else
  {
    v4 = this[44];
    if (v4 != (uint64_t *)(this + 43))
    {
      v5 = v3;
      while (1)
      {
        v6 = (const void *)v4[2];
        v7 = v6
        if (v5 == *((void **)v7 + 5))
          break;
        v4 = (uint64_t *)v4[1];
        if (v4 == (uint64_t *)(this + 43))
          return;
      }
      OZChannel::deleteCurveProcessingNode(*((OZChannel **)v7 + 2), v7);
      v11 = *v4;
      *(_QWORD *)(v11 + 8) = v4[1];
      *(_QWORD *)v4[1] = v11;
      this[45] = (uint64_t *)((char *)this[45] - 1);
      operator delete(v4);
    }
  }
}

_QWORD *OZGenericBehavior::didUndoDeleteOfObject(OZGenericBehavior *this, OZObjectManipulator *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *result;

  v4 = (char *)this + 560;
  v5 = *((_QWORD *)this + 71);
  v6 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  result = (_QWORD *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  if ((char *)v5 != v4)
  {
    while (v7 != *(_DWORD *)(v5 + 16)
         || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(result[1] + 8), *(int32x4_t *)*(_QWORD *)(v5 + 32))))) & 1) != 0)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if ((char *)v5 == v4)
        return result;
    }
    OZChannelBase::resetFlag(*(OZChannelBase **)(v5 + 40), 2, 0);
    return OZGenericBehavior::genericBehaviorDidLoad(this, 0);
  }
  return result;
}

void OZGenericBehavior::willDeleteChannel(OZGenericBehavior *this, OZChannelBase *a2)
{
  char *v4;
  char *v5;
  OZChannelBase *ChannelRootBase;
  uint64_t ObjectManipulator;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  OZChannelRef *v11;
  OZChannelBase *v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  OZChannelBase **v20;
  char *v21;
  OZChannelBase *v22;
  char *v23;
  char *v24;
  BOOL v25;
  char *v26;
  char *v27;
  char *__p;
  char *v29;
  char *v30;

  v4 = (char *)*((_QWORD *)this + 67);
  v5 = (char *)this + 544;
  __p = 0;
  v29 = 0;
  v30 = 0;
  if (v4 != (char *)this + 544)
  {
    do
    {
      if (*((OZChannelBase **)v4 + 5) == a2)
      {
        ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
        ObjectManipulator = OZChannelBase::getObjectManipulator(ChannelRootBase);
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
        v10 = (_OWORD *)operator new();
        *v10 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator)
                                     + 8)
                         + 8);
        v11 = (OZChannelRef *)operator new();
        OZChannelRef::OZChannelRef(v11, a2, ChannelRootBase);
        v12 = (OZChannelBase *)*((_QWORD *)v4 + 4);
        v13 = operator new(0x30uLL);
        v13[4] = v9;
        *((_QWORD *)v13 + 3) = v11;
        *((_QWORD *)v13 + 4) = v10;
        *((_QWORD *)v13 + 5) = v12;
        v14 = *((_QWORD *)this + 70);
        *(_QWORD *)v13 = v14;
        *((_QWORD *)v13 + 1) = (char *)this + 560;
        *(_QWORD *)(v14 + 8) = v13;
        *((_QWORD *)this + 70) = v13;
        ++*((_QWORD *)this + 72);
        OZChannelBase::setFlag(v12, 2, 0);
        if (v29 >= v30)
        {
          v16 = (v29 - __p) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v17 = (v30 - __p) >> 2;
          if (v17 <= v16 + 1)
            v17 = v16 + 1;
          if ((unint64_t)(v30 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v30, v18);
          else
            v19 = 0;
          v20 = (OZChannelBase **)&v19[8 * v16];
          *v20 = v12;
          v15 = (char *)(v20 + 1);
          v21 = v29;
          if (v29 != __p)
          {
            do
            {
              v22 = (OZChannelBase *)*((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v22;
            }
            while (v21 != __p);
            v21 = __p;
          }
          __p = (char *)v20;
          v30 = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v29 = v12;
          v15 = v29 + 8;
        }
        v29 = v15;
        OZGenericBehavior::removeGenericNodes((uint64_t **)this, v12);
      }
      v23 = (char *)*((_QWORD *)v4 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char *)*((_QWORD *)v4 + 2);
          v25 = *(_QWORD *)v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
    }
    while (v24 != v5);
    v27 = __p;
    v26 = v29;
    while (v27 != v26)
    {
      std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)this + 536, (unint64_t *)v26 - 1);
      v27 = __p;
      v26 = v29 - 8;
      v29 -= 8;
    }
  }
  OZChannelBehavior::willDeleteChannel(this, a2);
  if (__p)
    operator delete(__p);
}

void sub_1B2F7C850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OZChannelBase *OZGenericBehavior::didUndoDeleteChannel(OZGenericBehavior *this, OZChannelBase *a2)
{
  char *v4;
  uint64_t v5;
  OZChannelBase *ChannelRootBase;
  uint64_t ObjectManipulator;
  uint64_t v8;
  int v9;
  OZChannelBase *result;
  int32x4_t v11;
  int32x4_t v12;

  v4 = (char *)this + 560;
  v5 = *((_QWORD *)this + 71);
  ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
  ObjectManipulator = OZChannelBase::getObjectManipulator(ChannelRootBase);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
  if ((char *)v5 != v4)
  {
    v11 = *(int32x4_t *)((char *)result->var1 + 8);
    v12 = v11;
    while (1)
    {
      if (v9 == *(_DWORD *)(v5 + 16)
        && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v11, *(int32x4_t *)*(_QWORD *)(v5 + 32))))) & 1) == 0)
      {
        result = OZChannelRef::getChannel(*(OZChannelRef **)(v5 + 24), ChannelRootBase);
        v11 = v12;
        if (result == a2)
          break;
      }
      v5 = *(_QWORD *)(v5 + 8);
      if ((char *)v5 == v4)
        return result;
    }
    OZGenericBehavior::genericBehaviorDidLoad(this, 0);
    return OZChannelBase::resetFlag(*(OZChannelBase **)(v5 + 40), 2, 0);
  }
  return result;
}

_QWORD *OZGenericBehavior::addGenericNodes(OZGenericBehavior *this, OZChannelBase *a2, OZChannel *a3)
{
  OZChannel *v6;
  __n128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  OZGenericReplaceCurveNode *v13;
  OZGenericReplaceCurveNode *v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *result;
  OZChannelBase ***v18;
  OZChannelBase ***v19;
  BOOL v20;
  OZChannelBase **v21;
  OZChannelBase **v22;
  OZChannelBase *v23;
  OZChannelBase *v24;
  OZChannelBase *v25;
  double v26;

  if ((a2->var7 & 0x1000) != 0)
  {
    if (v15)
      v15[440] = 0;
    v18 = (OZChannelBase ***)v16[14];
    v19 = (OZChannelBase ***)result[14];
    if (v18)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      v21 = *v18;
      if (*v18 != v18[1])
      {
        v22 = *v19;
        do
        {
          if (v22 == v19[1])
            break;
          v24 = *v21++;
          v23 = v24;
          v25 = *v22++;
          result = (_QWORD *)OZGenericBehavior::addGenericNodes(this, v23, v25);
        }
        while (v21 != v18[1]);
      }
    }
  }
  else
  {
    if (a3)
    v26 = 0.0;
    (*(void (**)(_QWORD, double *))(**((_QWORD **)a3->var14 + 1) + 264))(*((_QWORD *)a3->var14 + 1), &v26);
    v7.n128_f64[0] = v26;
    if (v26 > -0.0000001 && v26 < 0.0000001)
    {
      v26 = 0.0;
      (*(void (**)(_QWORD, double *, double))(**((_QWORD **)a3->var14 + 1) + 256))(*((_QWORD *)a3->var14 + 1), &v26, v7.n128_f64[0]);
      OZChannel::setMin(v6, -v26);
    }
    v26 = 0.0;
    (*(void (**)(_QWORD, double *, __n128))(**((_QWORD **)a3->var14 + 1) + 256))(*((_QWORD *)a3->var14 + 1), &v26, v7);
    v8 = v26;
    if (v26 > -0.0000001 && v26 < 0.0000001)
    {
      v26 = 0.0;
      (*(void (**)(_QWORD, double *, double))(**((_QWORD **)a3->var14 + 1) + 264))(*((_QWORD *)a3->var14 + 1), &v26, v8);
      OZChannel::setMax(v6, -v26);
    }
    v9 = *((double *)a3->var16 + 2);
    if (v9 > -0.0000001 && v9 < 0.0000001)
    {
      v10 = (*((double (**)(OZChannel *))a3->var0 + 101))(a3);
      OZChannel::setSliderMin(v6, -v10);
    }
    v11 = (*((double (**)(OZChannel *))a3->var0 + 101))(a3);
    if (v11 > -0.0000001 && v11 < 0.0000001)
      OZChannel::setSliderMax(v6, -*((double *)a3->var16 + 2));
    v12 = (*(uint64_t (**)(OZGenericBehavior *, OZChannel *))(*(_QWORD *)this + 672))(this, a3);
    v13 = (OZGenericReplaceCurveNode *)operator new();
    v14 = v13;
    if (v12)
      OZGenericReplaceCurveNode::OZGenericReplaceCurveNode(v13, this, v6, a3);
    else
      OZGenericOffsetCurveNode::OZGenericOffsetCurveNode(v13, this, v6, a3);
    OZChannel::appendCurveProcessingNode(a3, v14);
    return OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v14);
  }
  return result;
}

void sub_1B2F7CCD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

void OZGenericBehavior::didAddToNode(OZGenericBehavior *this, OZSceneNode *a2)
{
  OZChannelBase *v4;

  OZChannelBehavior::didAddToNode(this, a2);
  v4 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  OZChannelBehavior::setAffectedChannel(this, v4);
  if (!*((_BYTE *)this + 584))
    OZGenericBehavior::genericBehaviorDidLoad(this, 0);
}

void OZGenericBehavior::willRemove(OZGenericBehavior *this)
{
  unint64_t **v2;
  unint64_t *v3;
  unint64_t *v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  OZChannelBase *v12;
  uint64_t ObjectManipulator;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const OZChannelBase *ChannelRootBase;
  const char *v18;
  _OWORD *v19;
  OZChannelRef *v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  PCString v24;
  void *v25[2];
  char v26;

  v2 = (unint64_t **)*((_QWORD *)this + 21);
  if (v2)
  {
    v4 = *v2;
    v3 = v2[1];
    if (*v2 != v3)
    {
      v5 = (char *)this + 544;
      do
      {
        v6 = *(_QWORD **)v5;
        if (*(_QWORD *)v5)
        {
          v7 = *v4;
          v8 = (char *)this + 544;
          do
          {
            v9 = v6[4];
            v10 = v9 >= v7;
            if (v9 >= v7)
              v11 = v6;
            else
              v11 = v6 + 1;
            if (v10)
              v8 = (char *)v6;
            v6 = (_QWORD *)*v11;
          }
          while (*v11);
          if (v8 != v5 && v7 >= *((_QWORD *)v8 + 4))
          {
            v12 = (OZChannelBase *)*((_QWORD *)v8 + 5);
            ObjectManipulator = OZChannelBase::getObjectManipulator(v12);
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
            v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
            v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator)
                            + 8);
            ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(v12);
            OZChannelRef::OZChannelRef((OZChannelRef *)v25, v12, ChannelRootBase);
            if (v26 >= 0)
              v18 = (const char *)v25;
            else
              v18 = (const char *)v25[0];
            PCString::PCString(&v24, v18);
            v19 = (_OWORD *)operator new();
            *v19 = *(_OWORD *)(v16 + 8);
            v20 = (OZChannelRef *)operator new();
            OZChannelRef::OZChannelRef(v20, &v24);
            v21 = *v4;
            v22 = operator new(0x30uLL);
            v22[4] = v15;
            *((_QWORD *)v22 + 3) = v20;
            *((_QWORD *)v22 + 4) = v19;
            *((_QWORD *)v22 + 5) = v21;
            v23 = *((_QWORD *)this + 70);
            *(_QWORD *)v22 = v23;
            *((_QWORD *)v22 + 1) = (char *)this + 560;
            *(_QWORD *)(v23 + 8) = v22;
            *((_QWORD *)this + 70) = v22;
            ++*((_QWORD *)this + 72);
            PCString::~PCString(&v24);
            OZChannelRef::~OZChannelRef(v25);
          }
        }
        ++v4;
      }
      while (v4 != v3);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 536, *((_QWORD **)this + 68));
  *((_QWORD *)this + 67) = (char *)this + 544;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = 0;
  OZChannelBehavior::willRemove(this);
}

void sub_1B2F7CF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, void *a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x1012C40EC159624);
  PCString::~PCString(&a9);
  OZChannelRef::~OZChannelRef(&a10);
  _Unwind_Resume(a1);
}

_QWORD *OZGenericBehavior::updateReferenceIDs(OZGenericBehavior *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  result = OZChannelObjectRoot::updateReferenceIDs((_QWORD *)a1 + 7, a2);
  v5 = *((_QWORD *)a1 + 71);
  if ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)a1 + 560))
  {
    v8 = a2[1];
    v7 = a2 + 1;
    v6 = v8;
    do
    {
      if (v6)
      {
        v9 = *(_DWORD *)(v5 + 16);
        v10 = v7;
        v11 = v6;
        do
        {
          v12 = *(_DWORD *)(v11 + 28);
          v13 = v12 >= v9;
          if (v12 >= v9)
            v14 = (uint64_t *)v11;
          else
            v14 = (uint64_t *)(v11 + 8);
          if (v13)
            v10 = (_QWORD *)v11;
          v11 = *v14;
        }
        while (*v14);
        if (v10 != v7 && v9 >= *((_DWORD *)v10 + 7))
          *(_DWORD *)(v5 + 16) = *((_DWORD *)v10 + 8);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((OZGenericBehavior *)v5 != (OZGenericBehavior *)((char *)a1 + 560));
  }
  if (*((_BYTE *)a1 + 584) || *((_QWORD *)a1 + 72))
  {
    result = (_QWORD *)(*(uint64_t (**)(OZGenericBehavior *))(*(_QWORD *)a1 + 320))(a1);
    if (result)
    {
      result = OZGenericBehavior::genericBehaviorDidLoad(a1, 1);
      *((_BYTE *)a1 + 584) = 0;
    }
  }
  return result;
}

_QWORD *`non-virtual thunk to'OZGenericBehavior::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZGenericBehavior::updateReferenceIDs((OZGenericBehavior *)(a1 - 16), a2);
}

_QWORD *OZGenericBehavior::sceneNodeDidLoad(OZGenericBehavior *this)
{
  _QWORD *result;

  result = OZGenericBehavior::genericBehaviorDidLoad(this, 1);
  *((_BYTE *)this + 584) = 0;
  return result;
}

uint64_t OZGenericBehavior::affectsBehavior(OZGenericBehavior *this, OZBehavior *a2)
{
  unint64_t **v2;
  unint64_t *v3;
  unint64_t *v4;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  const void *ObjectManipulator;
  OZBehavior *v10;
  void *v11;
  unint64_t v13;
  unint64_t *v14;

  v2 = (unint64_t **)*((_QWORD *)this + 21);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      v6 = 0;
      v7 = (uint64_t **)((char *)this + 536);
      while (1)
      {
        v13 = *v3;
        v14 = &v13;
        v8 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)&v14);
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator((OZChannelBase *)v8[5]);
        if (ObjectManipulator)
        {
          if (v10 == a2)
            goto LABEL_13;
          if (v10)
          {
            if (v11)
              v6 |= (*(uint64_t (**)(void *, OZBehavior *))(*(_QWORD *)v11 + 624))(v11, a2);
          }
        }
        else if (!a2)
        {
LABEL_13:
          LOBYTE(v6) = 1;
          return v6 & 1;
        }
        if (++v3 == v4)
          return v6 & 1;
      }
    }
  }
  LOBYTE(v6) = 0;
  return v6 & 1;
}

uint64_t *OZGenericBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZChannelFolder *v4;
  uint64_t *result;

  v4 = (OZChannelFolder *)(this + 7);
  result = (uint64_t *)OZChannelBase::testFlag((OZChannelBase *)(this + 7), 8);
  if ((result & 1) == 0)
  {
    OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
    return OZChannelFolder::markFactoriesForSerialization(v4, a2);
  }
  return result;
}

uint64_t *`non-virtual thunk to'OZGenericBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZGenericBehavior::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZGenericBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGenericBehaviorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 69);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 88);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 20));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZGenericBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZGenericBehavior::writeHeader(this - 6, a2);
}

uint64_t OZGenericBehavior::writeBody(OZGenericBehavior *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  unint64_t **v6;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  OZChannelBase *v16;
  uint64_t ObjectManipulator;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const OZChannelBase *ChannelRootBase;
  const char *v22;
  uint64_t v23;
  PCString v25;
  void *v26[2];
  char v27;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGenericBehaviorScope);
  OZChannelObjectRoot::serializeSelfOnly((OZGenericBehavior *)((char *)this + 56), a2, a3);
  v6 = (unint64_t **)*((_QWORD *)this + 21);
  if (v6)
  {
    v8 = *v6;
    v7 = v6[1];
    if (*v6 != v7)
    {
      v9 = (_QWORD *)((char *)this + 544);
      do
      {
        v10 = (_QWORD *)*v9;
        if (*v9)
        {
          v11 = *v8;
          v12 = v9;
          do
          {
            v13 = v10[4];
            v14 = v13 >= v11;
            if (v13 >= v11)
              v15 = v10;
            else
              v15 = v10 + 1;
            if (v14)
              v12 = v10;
            v10 = (_QWORD *)*v15;
          }
          while (*v15);
          if (v12 != v9 && v11 >= v12[4])
          {
            v16 = (OZChannelBase *)v12[5];
            ObjectManipulator = OZChannelBase::getObjectManipulator(v16);
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator);
            v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
            v20 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator)
                            + 8);
            ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(v16);
            OZChannelRef::OZChannelRef((OZChannelRef *)v26, v16, ChannelRootBase);
            if (v27 >= 0)
              v22 = (const char *)v26;
            else
              v22 = (const char *)v26[0];
            PCString::PCString(&v25, v22);
            (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 200);
            (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, v19);
            (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 8, v20 + 8);
            (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 6, &v25);
            (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
            v23 = *v8 + 16;
            (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)v23 + 16))(v23, a2, 1);
            (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, a2, 1, 1, 1);
            (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
            PCString::~PCString(&v25);
            OZChannelRef::~OZChannelRef(v26);
          }
        }
        ++v8;
      }
      while (v8 != v7);
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2F7D4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZGenericBehavior::writeBody(OZGenericBehavior *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  return OZGenericBehavior::writeBody((OZGenericBehavior *)((char *)this - 48), a2, a3);
}

uint64_t OZGenericBehavior::parseBegin(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  unint64_t v4;

  *((_BYTE *)this + 584) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGenericBehaviorScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 56), a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 74) = (double)v4;
  return 1;
}

uint64_t `non-virtual thunk to'OZGenericBehavior::parseBegin(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  unint64_t v4;

  *((_BYTE *)this + 536) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGenericBehaviorScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 68) = (double)v4;
  return 1;
}

uint64_t OZGenericBehavior::parseEnd(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  OZChannelBase *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  char v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  int v23;
  OZChannelBase *v24;
  unsigned int v25;
  unsigned int v27;
  uint64_t *v28;
  _QWORD v29[2];

  OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this + 56), a2);
  v4 = *((_DWORD *)a2 + 26);
  v5 = (uint64_t *)*((_QWORD *)this + 21);
  if (v4 > 4)
  {
    if (!v5)
      return 1;
    v17 = 0;
    v8 = v5[1];
  }
  else
  {
    if (!v5)
      return 1;
    v6 = v5[1] - *v5;
    if ((v6 & 0x7FFFFFFF8) != 0)
    {
      v7 = *(OZChannelBase **)(*v5 + 8 * ((v6 >> 3) - 1));
      if (v7)
      {
        OZChannelBase::setID(v7, v7->var3 + 10000);
        v5 = (uint64_t *)*((_QWORD *)this + 21);
        if (!v5)
          return 1;
      }
    }
    v8 = v5[1];
    v29[0] = 0;
    v29[1] = 0;
    v28 = v29;
    v9 = *v5;
    if (*v5 == v8)
    {
      v11 = 0;
      v17 = 0;
    }
    else
    {
      while (1)
      {
        v10 = *(_DWORD *)(*(_QWORD *)v9 + 24);
        v27 = v10;
        v11 = (_QWORD *)v29[0];
        if (v29[0])
        {
          v12 = v29;
          v13 = (uint64_t *)v29[0];
          do
          {
            v14 = v13;
            v15 = v12;
            v16 = *((_DWORD *)v13 + 7);
            if (v16 >= v10)
              v12 = v13;
            else
              ++v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
          if (v12 != v29)
          {
            if (v16 < v10)
              v14 = v15;
            if (v10 >= *((_DWORD *)v14 + 7))
              break;
          }
        }
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v28, &v27, &v27);
        v9 += 8;
        if (v9 == v8)
        {
          v17 = 0;
          v11 = (_QWORD *)v29[0];
          goto LABEL_23;
        }
      }
      v17 = 1;
    }
LABEL_23:
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v28, v11);
  }
  v18 = (char *)this + 560;
  v19 = *v5;
  v20 = (char *)*((_QWORD *)this + 71);
  if (v19 != v8 && v20 != v18)
  {
    v22 = v19 + 8;
    v23 = 1;
    do
    {
      v24 = *(OZChannelBase **)(v22 - 8);
      OZChannelBase::setFlag(v24, 2, 0);
      *((_QWORD *)v20 + 5) = v24;
      if (v4 <= 4)
      {
        v25 = v23;
        if ((v17 & 1) == 0)
          v25 = v24->var3 - 10000;
        OZChannelBase::setID(v24, v25);
      }
      if (v22 == v8)
        break;
      v20 = (char *)*((_QWORD *)v20 + 1);
      ++v23;
      v22 += 8;
    }
    while (v20 != v18);
  }
  return 1;
}

void sub_1B2F7D77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZGenericBehavior::parseEnd(OZGenericBehavior *this, PCSerializerReadStream *a2)
{
  OZGenericBehavior::parseEnd((OZGenericBehavior *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZGenericBehavior::parseElement(OZGenericBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  OZChannelBase *v10;
  _QWORD *AttributeAsUUID;
  int v12;
  OZChannelRef *v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  PCSharedCount v19;
  int v20;
  PCSharedCount v21;

  PCSharedCount::PCSharedCount(&v21);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 110)
  {
    v16 = (_QWORD *)*((_QWORD *)this + 21);
    if (v16)
      v17 = (((v16[1] - *v16) << 29) + 0x100000000) >> 32;
    else
      v17 = 1;
    if (*((_QWORD *)this + 72) != v17)
    {
      (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 40))(a2);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (v6 != 200)
  {
LABEL_15:
    OZChannelObjectRoot::parseElement((OZTimeMarkerSet **)this + 7, a2, a3);
    goto LABEL_17;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 21);
  if (v7)
  {
    v8 = *v7;
    v9 = *(_QWORD *)(*((_QWORD *)this + 21) + 8) - v8;
    if ((v9 & 0x7FFFFFFF8) != 0 && *((_DWORD *)a2 + 26) <= 4u)
    {
      v10 = *(OZChannelBase **)(v8 + 8 * ((v9 >> 3) - 1));
      if (v10)
        OZChannelBase::setID(v10, v10->var3 + 10000);
    }
  }
  v20 = 0;
  PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v20);
  AttributeAsUUID = (_QWORD *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 8);
  PCSharedCount::PCSharedCount(&v19);
  PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 6, (uint64_t)&v19);
  v12 = v20;
  if (!AttributeAsUUID)
  {
    AttributeAsUUID = (_QWORD *)operator new();
    *AttributeAsUUID = 0;
    AttributeAsUUID[1] = 0;
  }
  v13 = (OZChannelRef *)operator new();
  OZChannelRef::OZChannelRef(v13, (PCString *)&v19);
  v14 = operator new(0x30uLL);
  v14[4] = v12;
  *((_QWORD *)v14 + 3) = v13;
  *((_QWORD *)v14 + 4) = AttributeAsUUID;
  *((_QWORD *)v14 + 5) = 0;
  v15 = *((_QWORD *)this + 70);
  *(_QWORD *)v14 = v15;
  *((_QWORD *)v14 + 1) = (char *)this + 560;
  *(_QWORD *)(v15 + 8) = v14;
  *((_QWORD *)this + 70) = v14;
  ++*((_QWORD *)this + 72);
  PCString::~PCString((PCString *)&v19);
LABEL_17:
  PCString::~PCString((PCString *)&v21);
  return 1;
}

void sub_1B2F7D978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
  uint64_t v12;

  MEMORY[0x1B5E29170](v12, 0x1012C40EC159624);
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZGenericBehavior::parseElement(OZGenericBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZGenericBehavior::parseElement((OZGenericBehavior *)((char *)this - 48), a2, a3);
  return 1;
}

BOOL OZGenericBehavior::shouldReplaceValueForChan(OZGenericBehavior *this, OZChannelBase *lpsrc)
{
  OZChannelFolder *var6;
  _BOOL8 result;

  result = 1;
  if (!lpsrc
  {
    var6 = lpsrc->var6;
    if (!var6
    {
      return 0;
    }
  }
  return result;
}

BOOL OZGenericBehavior::areChannelsCompatible(OZGenericBehavior *this, OZChannelBase *a2, OZChannelBase *a3)
{
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a3->var1 + 8), *(int32x4_t *)((char *)a2->var1 + 8))))) & 1) == 0;
}

void OZGenericBehaviorV2::OZGenericBehaviorV2(OZGenericBehaviorV2 *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)(v4 + 552) = 0;
  *(_QWORD *)(v4 + 544) = 0;
  *(_QWORD *)(v4 + 536) = v4 + 544;
  *(_QWORD *)(v4 + 560) = v4 + 560;
  *(_QWORD *)(v4 + 568) = v4 + 560;
  *(_QWORD *)(v4 + 576) = 0;
  *(_BYTE *)(v4 + 584) = 0;
  *(_QWORD *)v4 = &off_1E65CC150;
  *(_QWORD *)(v4 + 16) = &unk_1E65CC410;
  *(_QWORD *)(v4 + 48) = &unk_1E65CC668;
  *(_QWORD *)(v4 + 336) = &unk_1E65CC6C0;
}

void OZGenericBehaviorV2::OZGenericBehaviorV2(OZGenericBehaviorV2 *this, unint64_t ***a2, char a3)
{
  _QWORD *v3;

  OZGenericBehavior::OZGenericBehavior(this, a2, a3);
  *v3 = &off_1E65CC150;
  v3[2] = &unk_1E65CC410;
  v3[6] = &unk_1E65CC668;
  v3[42] = &unk_1E65CC6C0;
}

uint64_t OZGenericBehaviorV2::areChannelsCompatible(OZGenericBehaviorV2 *this, OZChannelBase *a2, OZChannelBase *a3)
{
  uint64_t result;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a3->var1 + 8), *(int32x4_t *)((char *)a2->var1 + 8))))) & 1) == 0)return 1;
  if (!*((_BYTE *)this + 584))
    return 0;
  result = (*((uint64_t (**)(OZChannelBase *))a2->var0 + 15))(a2);
  if ((_DWORD)result)
    return (*((uint64_t (**)(OZChannelBase *))a3->var0 + 15))(a3);
  return result;
}

void OZGenericBehaviorV1::OZGenericBehaviorV1(OZGenericBehaviorV1 *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)(v4 + 552) = 0;
  *(_QWORD *)(v4 + 544) = 0;
  *(_QWORD *)(v4 + 536) = v4 + 544;
  *(_QWORD *)(v4 + 560) = v4 + 560;
  *(_QWORD *)(v4 + 568) = v4 + 560;
  *(_QWORD *)(v4 + 576) = 0;
  *(_BYTE *)(v4 + 584) = 0;
  *(_QWORD *)v4 = &off_1E65CC6E8;
  *(_QWORD *)(v4 + 16) = &unk_1E65CC9A8;
  *(_QWORD *)(v4 + 48) = &unk_1E65CCC00;
  *(_QWORD *)(v4 + 336) = &unk_1E65CCC58;
}

void OZGenericBehaviorV1::OZGenericBehaviorV1(OZGenericBehaviorV1 *this, unint64_t ***a2, char a3)
{
  _QWORD *v3;

  OZGenericBehavior::OZGenericBehavior(this, a2, a3);
  *v3 = &off_1E65CC6E8;
  v3[2] = &unk_1E65CC9A8;
  v3[6] = &unk_1E65CCC00;
  v3[42] = &unk_1E65CCC58;
}

BOOL OZGenericBehaviorV1::shouldReplaceValueForChan(OZGenericBehaviorV1 *this, OZChannelBase *lpsrc)
{
  return lpsrc
}

void OZGenericBehaviorV2::~OZGenericBehaviorV2(OZGenericBehaviorV2 *this)
{
  OZGenericBehavior::~OZGenericBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZGenericBehaviorV2::~OZGenericBehaviorV2(OZGenericBehaviorV2 *this)
{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 16));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 48));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 336));
}

{
  OZGenericBehavior::~OZGenericBehavior((OZGenericBehaviorV2 *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZGenericCurveNode::OZGenericCurveNode(OZGenericCurveNode *this, OZBehavior *a2, OZChannel *a3, OZChannel *a4)
{
  _QWORD *v7;
  void *v8;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a4);
  *v7 = &off_1E65CCCB0;
  v7[5] = a3;
  if (a2)
  else
    v8 = 0;
  *((_QWORD *)this + 4) = v8;
}

void OZGenericCurveNode::~OZGenericCurveNode(OZGenericCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZGenericCurveNode::compare(OZGenericCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

void OZGenericOffsetCurveNode::OZGenericOffsetCurveNode(OZGenericOffsetCurveNode *this, OZBehavior *a2, OZChannel *a3, OZChannel *a4)
{
  _QWORD *v4;

  OZGenericCurveNode::OZGenericCurveNode(this, a2, a3, a4);
  *v4 = &off_1E65CCDA8;
}

void OZGenericOffsetCurveNode::~OZGenericOffsetCurveNode(OZGenericOffsetCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZGenericOffsetCurveNode::solveNode(OZGenericOffsetCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v7;
  double v8;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  memset(&v12, 0, sizeof(v12));
  (*(void (**)(CMTime *__return_ptr, double))(**((_QWORD **)this + 2) + 320))(&v11, a3);
  v14 = *a2;
  v13 = v11;
  PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v12);
  v7 = *((_QWORD *)this + 4);
  v10 = v12;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, &v10, 0, 1, 1))
  {
    OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v12, 0.0);
    return v8 + a4;
  }
  return a4;
}

void OZGenericOffsetCurveNode::solveNode(OZGenericOffsetCurveNode *this, OZCurveNodeParam *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  CMTime v20;
  __int128 v21;
  uint64_t v22;
  CMTime v23;
  __int128 v24;
  uint64_t v25;
  CMTime v26;
  CMTime v27;
  __int128 v28;
  uint64_t v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;

  v4 = (_QWORD *)*((_QWORD *)a2 + 19);
  v5 = (uint64_t *)*((_QWORD *)a2 + 10);
  v32 = *(CMTime *)((_BYTE *)a2 + 5);
  v31 = *(CMTime *)((_BYTE *)a2 + 4);
  memset(&v30, 0, sizeof(v30));
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 2) + 320))(&v30);
  v35 = v31;
  v34 = v30;
  PC_CMTimeSaferAdd(&v35, &v34, (uint64_t)&v31);
  v28 = 0uLL;
  v29 = 0;
  operator*(*((_DWORD *)a2 + 36), &v32, &v33);
  v35 = v31;
  v34 = v33;
  PC_CMTimeSaferAdd(&v35, &v34, (uint64_t)&v28);
  v27 = v31;
  v6 = *((_QWORD *)this + 4);
  v26 = v31;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 296))(v6, &v26, 0, 1, 1)&& (v7 = *((_QWORD *)this + 4), v24 = v28, v25 = v29, (*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, &v24, 0, 1, 1)))
  {
    if (*((_DWORD *)a2 + 36))
    {
      v8 = 0;
      do
      {
        v9 = *(double *)&v5[v8];
        OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v27, 0.0);
        *(double *)&v4[v8] = v9 + v10;
        v34 = v27;
        v33 = v32;
        PC_CMTimeSaferAdd(&v34, &v33, (uint64_t)&v35);
        v27 = v35;
        ++v8;
      }
      while (v8 < *((unsigned int *)a2 + 36));
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 4);
    v23 = v31;
    if (((*(uint64_t (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 296))(v11, &v23, 0, 1, 1) & 1) != 0|| (v12 = *((_QWORD *)this + 4), v21 = v28, v22 = v29, ((*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 296))(v12, &v21, 0, 1, 1) & 1) != 0))
    {
      if (*((_DWORD *)a2 + 36))
      {
        v13 = 0;
        do
        {
          v14 = *((_QWORD *)this + 4);
          v20 = v27;
          v15 = (*(uint64_t (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 296))(v14, &v20, 0, 1, 1);
          v16 = *(double *)&v5[v13];
          if (v15)
          {
            OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v27, 0.0);
            v16 = v16 + v17;
          }
          *(double *)&v4[v13] = v16;
          v34 = v27;
          v33 = v32;
          PC_CMTimeSaferAdd(&v34, &v33, (uint64_t)&v35);
          v27 = v35;
          ++v13;
        }
        while (v13 < *((unsigned int *)a2 + 36));
      }
    }
    else
    {
      v18 = *((unsigned int *)a2 + 36);
      if ((_DWORD)v18)
      {
        do
        {
          v19 = *v5++;
          *v4++ = v19;
          --v18;
        }
        while (v18);
      }
    }
  }
}

OZBehaviorCurveNode *OZGenericOffsetCurveNode::cloneNode(OZGenericOffsetCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *((_QWORD *)v2 + 4) = *((_QWORD *)this + 4);
  *(_QWORD *)v2 = &off_1E65CCDA8;
  return v2;
}

void sub_1B2F7E288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

uint64_t OZGenericOffsetCurveNode::compare(OZGenericOffsetCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZGenericOffsetCurveNode::getNeededRange(OZGenericOffsetCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

void OZGenericReplaceCurveNode::OZGenericReplaceCurveNode(OZGenericReplaceCurveNode *this, OZBehavior *a2, OZChannel *a3, OZChannel *a4)
{
  _QWORD *v4;

  OZGenericCurveNode::OZGenericCurveNode(this, a2, a3, a4);
  *v4 = &off_1E65CCEA0;
}

void OZGenericReplaceCurveNode::~OZGenericReplaceCurveNode(OZGenericReplaceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZGenericReplaceCurveNode::solveNode(OZGenericReplaceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v7;
  double v8;
  __int128 v10;
  uint64_t v11;
  CMTime v12;
  __int128 v13;
  uint64_t v14;
  CMTime v15;
  CMTime v16;

  v13 = 0uLL;
  v14 = 0;
  (*(void (**)(CMTime *__return_ptr, double))(**((_QWORD **)this + 2) + 320))(&v12, a3);
  v16 = *a2;
  v15 = v12;
  PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)&v13);
  v7 = *((_QWORD *)this + 4);
  v10 = v13;
  v11 = v14;
  if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, &v10, 0, 1, 1))
  {
    OZChannel::getValueAsDouble(*((OZChannel **)this + 5), a2, 0.0);
    return v8;
  }
  return a4;
}

double OZGenericReplaceCurveNode::solveNode(OZGenericReplaceCurveNode *this, OZCurveNodeParam *a2)
{
  double *v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  CMTime v18;
  __int128 v19;
  uint64_t v20;
  CMTime v21;
  __int128 v22;
  uint64_t v23;
  CMTime v24;
  CMTime v25;
  __int128 v26;
  uint64_t v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;

  v4 = (double *)*((_QWORD *)a2 + 19);
  v5 = (double *)*((_QWORD *)a2 + 10);
  v30 = *(CMTime *)((_BYTE *)a2 + 5);
  v29 = *(CMTime *)((_BYTE *)a2 + 4);
  memset(&v28, 0, sizeof(v28));
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 2) + 320))(&v28);
  v33 = v29;
  v32 = v28;
  PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v29);
  v26 = 0uLL;
  v27 = 0;
  operator*(*((_DWORD *)a2 + 36), &v30, &v31);
  v33 = v29;
  v32 = v31;
  PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v26);
  v25 = v29;
  v6 = *((_QWORD *)this + 4);
  v24 = v29;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 296))(v6, &v24, 0, 1, 1)&& (v7 = *((_QWORD *)this + 4), v22 = v26, v23 = v27, (*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, &v22, 0, 1, 1)))
  {
    if (*((_DWORD *)a2 + 36))
    {
      v9 = 0;
      do
      {
        OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v25, 0.0);
        v4[v9] = v10;
        v32 = v25;
        v31 = v30;
        PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)&v33);
        result = *(double *)&v33.value;
        v25 = v33;
        ++v9;
      }
      while (v9 < *((unsigned int *)a2 + 36));
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 4);
    v21 = v29;
    if (((*(uint64_t (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 296))(v11, &v21, 0, 1, 1) & 1) != 0|| (v12 = *((_QWORD *)this + 4), v19 = v26, v20 = v27, ((*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 296))(v12, &v19, 0, 1, 1) & 1) != 0))
    {
      if (*((_DWORD *)a2 + 36))
      {
        v13 = 0;
        do
        {
          v14 = *((_QWORD *)this + 4);
          v18 = v25;
          if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 296))(v14, &v18, 0, 1, 1))
          {
            OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v25, 0.0);
          }
          else
          {
            v15 = v5[v13];
          }
          v4[v13] = v15;
          v32 = v25;
          v31 = v30;
          PC_CMTimeSaferAdd(&v32, &v31, (uint64_t)&v33);
          result = *(double *)&v33.value;
          v25 = v33;
          ++v13;
        }
        while (v13 < *((unsigned int *)a2 + 36));
      }
    }
    else
    {
      v16 = *((unsigned int *)a2 + 36);
      if ((_DWORD)v16)
      {
        do
        {
          v17 = *v5++;
          result = v17;
          *v4++ = v17;
          --v16;
        }
        while (v16);
      }
    }
  }
  return result;
}

OZBehaviorCurveNode *OZGenericReplaceCurveNode::cloneNode(OZGenericReplaceCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *((_QWORD *)v2 + 4) = *((_QWORD *)this + 4);
  *(_QWORD *)v2 = &off_1E65CCEA0;
  return v2;
}

void sub_1B2F7E794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

uint64_t OZGenericReplaceCurveNode::compare(OZGenericReplaceCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZGenericReplaceCurveNode::getNeededRange(OZGenericReplaceCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

void OZGravityBehavior::OZGravityBehavior(OZGravityBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CCF98;
  v5[2] = &unk_1E65CD280;
  v5[6] = &unk_1E65CD4D8;
  v5[42] = &unk_1E65CD530;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Gravity Behavior Grav Acceleration"));
  OZChannelDouble::OZChannelDouble((OZGravityBehavior *)((char *)this + 504), 30.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 504), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 504), 100.0);
}

void sub_1B2F7E8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;

  PCString::~PCString(&a10);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZGravityBehavior::OZGravityBehavior(OZGravityBehavior *this, OZGravityBehavior *a2, char a3)
{
  uint64_t v5;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CCF98;
  *(_QWORD *)(v5 + 16) = &unk_1E65CD280;
  *(_QWORD *)(v5 + 48) = &unk_1E65CD4D8;
  *(_QWORD *)(v5 + 336) = &unk_1E65CD530;
  OZChannel::OZChannel((OZChannel *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 63) = &off_1E6551358;
  *((_QWORD *)this + 65) = &unk_1E65516B8;
}

void sub_1B2F7E9A0(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;

  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZGravityBehavior::~OZGravityBehavior(OZGravityBehavior *this)
{
  *(_QWORD *)this = &off_1E65CCF98;
  *((_QWORD *)this + 2) = &unk_1E65CD280;
  *((_QWORD *)this + 6) = &unk_1E65CD4D8;
  *((_QWORD *)this + 42) = &unk_1E65CD530;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  *(_QWORD *)this = &off_1E65CCF98;
  *((_QWORD *)this + 2) = &unk_1E65CD280;
  *((_QWORD *)this + 6) = &unk_1E65CD4D8;
  *((_QWORD *)this + 42) = &unk_1E65CD530;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZGravityBehavior::~OZGravityBehavior(OZGravityBehavior *this)
{
  *(_QWORD *)this = &unk_1E65CD280;
  *((_QWORD *)this + 4) = &unk_1E65CD4D8;
  *((_QWORD *)this + 40) = &unk_1E65CD530;
  *((_QWORD *)this - 2) = &off_1E65CCF98;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 488));
  OZReflexiveBehavior::~OZReflexiveBehavior((OZGravityBehavior *)((char *)this - 16));
}

{
  OZReflexiveBehavior *v1;

  v1 = (OZGravityBehavior *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E65CCF98;
  *((_QWORD *)this - 40) = &unk_1E65CD280;
  *((_QWORD *)this - 36) = &unk_1E65CD4D8;
  *(_QWORD *)this = &unk_1E65CD530;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 168));
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
}

{
  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 16));
}

{
  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 48));
}

{
  OZGravityBehavior::~OZGravityBehavior((OZGravityBehavior *)((char *)this - 336));
}

void `non-virtual thunk to'OZGravityBehavior::~OZGravityBehavior(OZChannel *this)
{
  this[-1].var15 = (OZChannelImpl *)&unk_1E65CD280;
  this->var0 = (void **)&unk_1E65CD4D8;
  this[1].var17 = (OZChannelInfo *)&unk_1E65CD530;
  this[-1].var13 = (OZChannelTimeConverter *)&off_1E65CCF98;
  OZChannel::~OZChannel(this + 3);
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)&this[-1].var13);
}

uint64_t OZGravityBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
}

double OZGravityBehavior::accumForces(OZGravityBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v4;
  double v5;
  double result;
  CMTime v7;

  v7 = *(CMTime *)((char *)a2 + 176);
  v4 = *((double *)a2 + 17);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), &v7, 0.0);
  result = v4 - v5;
  *((double *)a2 + 17) = result;
  return result;
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior(OZGrowShrinkBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *v6;
  OZChannelImpl *Instance;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *v8;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *v9;
  OZChannelInfo *v10;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *v11;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *v12;
  OZChannelInfo *v13;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl *v14;
  OZChannelImpl *v15;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *v16;
  OZChannelImpl *v17;
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *v18;
  OZChannelImpl *v19;
  PCString v20;
  PCString v21;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CD570;
  v5[2] = &unk_1E65CD820;
  v5[6] = &unk_1E65CDA78;
  v5[42] = &unk_1E65CDAD0;
  PCURL::PCURL((PCURL *)&v21, CFSTR("Grow/Shrink Behavior Increment Type Enum"));
  PCURL::PCURL((PCURL *)&v20, CFSTR("Grow/Shrink Behavior Increment Type"));
  Instance = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(v6);
  OZChannelEnum::OZChannelEnum((OZGrowShrinkBehavior *)((char *)this + 536), 2u, &v21, &v20, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, Instance, 0);
  PCString::~PCString(&v20);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Grow/Shrink Behavior Scale Rate"));
  v9 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(v8);
  v10 = (OZChannelInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(v9);
  OZChannel2D::OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 792), &v21, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 2u, (OZChannelImpl *)v9, v10);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Grow/Shrink Behavior Scale Dest"));
  v12 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(v11);
  v13 = (OZChannelInfo *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(v12);
  OZChannelScale::OZChannelScale((OZGrowShrinkBehavior *)((char *)this + 1232), 0.0, 0.0, &v21, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 2u, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Grow/Shrink Behavior Curvature"));
  v15 = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(v14);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 11, 0.0, &v21, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, v15, 0);
  PCString::~PCString(&v21);
  PCURL::PCURL((PCURL *)&v21, CFSTR("Grow/Shrink Behavior End Frame Offset"));
  v17 = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZGrowShrinkBehavior *)((char *)this + 1824), &v21, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, v17, 0);
  PCString::~PCString(&v21);
  v18 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *)PCString::PCString(&v21, "HUD Scale (Hidden)");
  v19 = (OZChannelImpl *)OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(v18);
  OZChannelDouble::OZChannelDouble((OZGrowShrinkBehavior *)((char *)this + 1976), &v21, (OZChannelFolder *)((char *)this + 56), 0xCEu, 2, v19, 0);
  PCString::~PCString(&v21);
  *((_BYTE *)this + 2128) = 0;
}

void sub_1B2F7EE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelBehavior *v12;
  OZChannelEnum *v13;
  OZChannel2D *v14;
  OZChannel2D *v15;
  OZChannelPercent *v16;
  OZChannel *v17;

  OZChannel::~OZChannel(v17);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannel2D::~OZChannel2D(v15);
  OZChannel2D::~OZChannel2D(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelBehavior::~OZChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void sub_1B2F7EF50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2F7EF38);
}

void OZGrowShrinkBehavior::OZGrowShrinkBehavior(OZGrowShrinkBehavior *this, const OZGrowShrinkBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CD570;
  *(_QWORD *)(v5 + 16) = &unk_1E65CD820;
  *(_QWORD *)(v5 + 48) = &unk_1E65CDA78;
  *(_QWORD *)(v5 + 336) = &unk_1E65CDAD0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 536), (const OZGrowShrinkBehavior *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannel2D::OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 792), (const OZGrowShrinkBehavior *)((char *)a2 + 792), v6);
  OZChannelScale::OZChannelScale((OZGrowShrinkBehavior *)((char *)this + 1232), (const OZGrowShrinkBehavior *)((char *)a2 + 1232), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 11, (const OZChannelBase *)((char *)a2 + 1672), v6);
  OZChannel::OZChannel((OZChannel *)this + 12, (const OZChannelBase *)((char *)a2 + 1824), v6);
  *((_QWORD *)this + 228) = &off_1E6551358;
  *((_QWORD *)this + 230) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)this + 13, (const OZChannelBase *)((char *)a2 + 1976), v6);
  *((_QWORD *)this + 247) = &off_1E6551358;
  *((_QWORD *)this + 249) = &unk_1E65516B8;
  *((_BYTE *)this + 2128) = 0;
}

void sub_1B2F7F06C(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  OZChannelEnum *v2;
  OZChannel2D *v3;
  OZChannel2D *v4;
  OZChannelPercent *v5;
  OZChannel *v6;

  OZChannel::~OZChannel(v6);
  OZChannelPercent::~OZChannelPercent(v5);
  OZChannel2D::~OZChannel2D(v4);
  OZChannel2D::~OZChannel2D(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F7F0C8()
{
  JUMPOUT(0x1B2F7F0B8);
}

void OZGrowShrinkBehavior::~OZGrowShrinkBehavior(OZGrowShrinkBehavior *this)
{
  *(_QWORD *)this = &off_1E65CD570;
  *((_QWORD *)this + 2) = &unk_1E65CD820;
  *((_QWORD *)this + 6) = &unk_1E65CDA78;
  *((_QWORD *)this + 42) = &unk_1E65CDAD0;
  OZChannel::~OZChannel((OZChannel *)this + 13);
  OZChannel::~OZChannel((OZChannel *)this + 12);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 11);
  OZChannel2D::~OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 1232));
  OZChannel2D::~OZChannel2D((OZGrowShrinkBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZGrowShrinkBehavior *)((char *)this + 536));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZGrowShrinkBehavior::~OZGrowShrinkBehavior(OZGrowShrinkBehavior *this)
{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 16));
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 48));
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 336));
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZGrowShrinkBehavior::~OZGrowShrinkBehavior((OZGrowShrinkBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZGrowShrinkBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  uint64_t result;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)v4 + 536);
  OZChannelFolder::operator=(a1 + 792);
  OZChannelBase::operator=(a1 + 928, (uint64_t)v5 + 928);
  OZChannelBase::operator=(a1 + 1080, (uint64_t)v5 + 1080);
  OZChannelFolder::operator=(a1 + 1232);
  OZChannelBase::operator=(a1 + 1368, (uint64_t)v5 + 1368);
  OZChannelBase::operator=(a1 + 1520, (uint64_t)v5 + 1520);
  OZChannelBase::operator=(a1 + 1672, (uint64_t)v5 + 1672);
  OZChannelBase::operator=(a1 + 1824, (uint64_t)v5 + 1824);
  result = OZChannelBase::operator=(a1 + 1976, (uint64_t)v5 + 1976);
  *(_BYTE *)(a1 + 2128) = 0;
  return result;
}

void OZGrowShrinkBehavior::addGrowShrinkNodes(OZGrowShrinkBehavior *this, OZSceneNode *lpsrc)
{
  char *v3;
  OZGrowShrinkCurveNode *v4;
  OZGrowShrinkCurveNode *v5;

  if (lpsrc)
  else
    v3 = 0;
  v4 = (OZGrowShrinkCurveNode *)operator new();
  OZGrowShrinkCurveNode::OZGrowShrinkCurveNode(v4, this, (OZChannel *)(v3 + 4576), 1);
  OZChannel::appendCurveProcessingNode((OZChannel *)(v3 + 4576), v4);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v4);
  v5 = (OZGrowShrinkCurveNode *)operator new();
  OZGrowShrinkCurveNode::OZGrowShrinkCurveNode(v5, this, (OZChannel *)(v3 + 4728), 0);
  OZChannel::appendCurveProcessingNode((OZChannel *)(v3 + 4728), v5);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v5);
  OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v3 + 4440));
}

void sub_1B2F7F3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A189A79ELL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::didAddToNode(OZGrowShrinkBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  if (!*((_BYTE *)this + 2128))
  {
    if ((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2))
    {
      OZGrowShrinkBehavior::addGrowShrinkNodes(this, a2);
      *((_BYTE *)this + 2128) = 1;
    }
  }
}

void OZGrowShrinkBehavior::didAddSceneNodeToScene(OZGrowShrinkBehavior *this, OZScene *a2)
{
  OZSceneNode *v3;

  OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((_BYTE *)this + 2128))
  {
    v3 = (OZSceneNode *)(*(uint64_t (**)(OZGrowShrinkBehavior *))(*(_QWORD *)this + 320))(this);
    OZGrowShrinkBehavior::addGrowShrinkNodes(this, v3);
    *((_BYTE *)this + 2128) = 1;
  }
}

void OZGrowShrinkBehavior::willRemove(OZGrowShrinkBehavior *this)
{
  OZChannelBehavior::willRemove(this);
  *((_BYTE *)this + 2128) = 0;
}

BOOL OZGrowShrinkBehavior::isRebuildUIChannel(OZGrowShrinkBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2;
}

OZChannelBase *OZGrowShrinkBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  const CMTime *v6;
  char *v7;
  uint64_t i;
  const void *v9;
  char *v10;
  OZChannelBase *v11;
  int v12;
  uint64_t j;
  const void *v14;
  char *v15;

  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 536), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v7 = *(char **)(v4 + 16);
      if (v7)
      result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 536), v6, 0.0);
      if (v5 != (_DWORD)result)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a2)
      {
        for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          v9 = *(const void **)(i + 16);
          if (v9)
          else
            v10 = 0;
          v11 = (OZChannelBase *)(v10 + 792);
          if (v5 == 1)
          {
            v12 = 1;
            OZChannelBase::setFlag(v11, 0x400000, 1);
            OZChannelBase::resetFlag((OZChannelBase *)v10 + 11, 0x400000, 1);
          }
          else if (v5)
          {
            OZChannelBase::setFlag(v11, 0x400000, 1);
            OZChannelBase::resetFlag((OZChannelBase *)v10 + 11, 0x400000, 1);
            v12 = 0;
          }
          else
          {
            v12 = 1;
            OZChannelBase::resetFlag(v11, 0x400000, 1);
            OZChannelBase::setFlag((OZChannelBase *)v10 + 11, 0x400000, 1);
          }
          result = OZChannelBase::enable((OZChannelBase *)(v10 + 1672), v12, 0);
        }
        return result;
      }
    }
    for (j = *(_QWORD *)(a2 + 8); j != a2; j = *(_QWORD *)(j + 8))
    {
      v14 = *(const void **)(j + 16);
      if (v14)
      else
        v15 = 0;
      OZChannelBase::resetFlag((OZChannelBase *)(v15 + 792), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)v15 + 11, 0x400000, 1);
      result = OZChannelBase::enable((OZChannelBase *)(v15 + 1672), 0, 0);
    }
  }
  return result;
}

OZGrowShrinkCurveNode *OZGrowShrinkBehavior::createCurveNode(OZGrowShrinkBehavior *this, OZChannel *a2)
{
  char v4;
  OZGrowShrinkCurveNode *v5;

  v4 = a2->var3 == 1;
  v5 = (OZGrowShrinkCurveNode *)operator new();
  OZGrowShrinkCurveNode::OZGrowShrinkCurveNode(v5, this, a2, v4);
  return v5;
}

void sub_1B2F7F724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A189A79ELL);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior::getScaleRates(OZGrowShrinkBehavior *this, CMTime *a2, double *a3, double *a4)
{
  CMTimeEpoch epoch;
  __n128 FrameDuration;
  CMTime *v10;
  Float64 v11;
  CMTimeEpoch v12;
  double Seconds;
  double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  Float64 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double v34;
  long double v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime time;
  CMTime v40;
  CMTime v41;
  CMTime v42[2];
  CMTime v43;
  __int128 v44;
  CMTimeEpoch v45;
  CMTime v46;
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(v42);
  *(_OWORD *)&a2->value = *(_OWORD *)&v42[0].value;
  epoch = v42[0].epoch;
  a2->epoch = v42[0].epoch;
  v44 = *(_OWORD *)&a2->value;
  v45 = epoch;
  if (((*(uint64_t (**)(OZGrowShrinkBehavior *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v44, 0, 1, 1) & 1) == 0)
  {
    *a3 = 0.0;
    *a4 = 0.0;
    return;
  }
  memset(&v43, 0, sizeof(v43));
  FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v43);
  (*(void (**)(CMTime *__return_ptr, OZGrowShrinkBehavior *, __n128))(*(_QWORD *)this + 608))(v42, this, FrameDuration);
  memset(&v41, 0, sizeof(v41));
  time1 = v42[0];
  time2 = v42[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v46);
  time1 = v46;
  time2 = v43;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
  v10 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)this + 12, MEMORY[0x1E0CA2E68], 0.0);
  operator*(&v43, &v46, v11);
  time1 = v40;
  time2 = v46;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v41);
  time1 = *a2;
  time2 = v41;
  if (CMTimeCompare(&time1, &time2) >= 1)
    *a2 = v41;
  memset(&v40, 0, sizeof(v40));
  time2 = v42[0];
  time1 = v41;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
  time1 = v40;
  time2 = *v10;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *a3 = 0.0;
    *a4 = 0.0;
  }
  v46 = v42[0];
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time2, &v46, (uint64_t)&time1);
  *(_OWORD *)&a2->value = *(_OWORD *)&time1.value;
  v12 = time1.epoch;
  a2->epoch = time1.epoch;
  *(_OWORD *)&time.value = *(_OWORD *)&a2->value;
  time.epoch = v12;
  Seconds = CMTimeGetSeconds(&time);
  v38 = v40;
  v14 = Seconds / CMTimeGetSeconds(&v38);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), a2, 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 11, a2, 0.0);
    v22 = (1.0 - cos(v14 * 3.14159265)) * 0.5 * v21 + v14 * (1.0 - v21);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 928), a2, 0.0);
    v24 = v23;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1080), a2, 0.0);
    v26 = v25;
    v37 = v40;
    v27 = v24 * CMTimeGetSeconds(&v37);
    v36 = v40;
    v28 = CMTimeGetSeconds(&v36);
    *a3 = v22 * v27;
    v20 = v22 * (v26 * v28);
    goto LABEL_18;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), a2, 0.0) == 1)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 11, a2, 0.0);
    v16 = (1.0 - cos(v14 * 3.14159265)) * 0.5 * v15 + v14 * (1.0 - v15);
    OZChannel::getValueAsDouble((OZChannel *)this + 9, a2, 0.0);
    v18 = v17;
    OZChannel::getValueAsDouble((OZChannel *)this + 10, a2, 0.0);
    *a3 = v18 * v16;
    v20 = v19 * v16;
    goto LABEL_18;
  }
  OZChannel::getValueAsDouble((OZChannel *)this + 9, &v40, 0.0);
  v30 = v29;
  OZChannel::getValueAsDouble((OZChannel *)this + 10, &v40, 0.0);
  v32 = v31;
  if (v30 <= -0.99)
  {
    v34 = -1.0;
    *a3 = exp2(v14 * -6.64385619) + -1.0;
    time1 = *a2;
    time2 = v40;
    if (CMTimeCompare(&time1, &time2))
      goto LABEL_15;
  }
  else
  {
    v33 = log(v30 + 1.0);
    v34 = exp2(v14 * (v33 / 0.693147181)) + -1.0;
  }
  *a3 = v34;
LABEL_15:
  if (v32 <= -0.99)
  {
    v20 = -1.0;
    *a4 = exp2(v14 * -6.64385619) + -1.0;
    time1 = *a2;
    time2 = v40;
    if (CMTimeCompare(&time1, &time2))
      return;
  }
  else
  {
    v35 = log(v32 + 1.0);
    v20 = exp2(v14 * (v35 / 0.693147181)) + -1.0;
  }
LABEL_18:
  *a4 = v20;
}

double OZGrowShrinkBehavior::getXMultiplier(OZGrowShrinkBehavior *this, CMTime *a2)
{
  double result;
  CMTime v3;
  double v4;
  double v5;

  v5 = 0.0;
  v3 = *a2;
  OZGrowShrinkBehavior::getScaleRates(this, &v3, &v5, &v4);
  result = v5 + 1.0;
  if (v5 + 1.0 < 0.0)
    return 0.0;
  return result;
}

double OZGrowShrinkBehavior::getYMultiplier(OZGrowShrinkBehavior *this, CMTime *a2)
{
  double result;
  CMTime v3;
  double v4;
  double v5;

  v4 = 0.0;
  v3 = *a2;
  OZGrowShrinkBehavior::getScaleRates(this, &v3, &v5, &v4);
  result = v4 + 1.0;
  if (v4 + 1.0 < 0.0)
    return 0.0;
  return result;
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::OZGrowShrinkBehavior_incrementTypeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::OZGrowShrinkBehavior_incrementTypeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::_OZGrowShrinkBehavior_incrementTypeChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::_OZGrowShrinkBehavior_incrementTypeChan)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::OZGrowShrinkBehavior_incrementTypeChanImpl(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::_OZGrowShrinkBehavior_incrementTypeChan = (uint64_t)v0;
  }
}

void sub_1B2F7FDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl::OZGrowShrinkBehavior_incrementTypeChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 2.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 2.0, 0, 1);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_incrementTypeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CDB10;
  *((_QWORD *)this + 5) = &unk_1E65CDB30;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2F7FEA4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::_OZGrowShrinkBehavior_scaleRateChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::_OZGrowShrinkBehavior_scaleRateChan)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::OZGrowShrinkBehavior_scaleRateChanImpl(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::_OZGrowShrinkBehavior_scaleRateChan = (uint64_t)v0;
  }
}

void sub_1B2F7FF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl::OZGrowShrinkBehavior_scaleRateChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CDB88;
  *((_QWORD *)this + 5) = &unk_1E65CDBA8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F80024(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleRateChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::_OZGrowShrinkBehavior_scaleRateChanInfo;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::_OZGrowShrinkBehavior_scaleRateChanInfo)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::OZGrowShrinkBehavior_scaleRateChanInfo(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::_OZGrowShrinkBehavior_scaleRateChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F800F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo::OZGrowShrinkBehavior_scaleRateChanInfo(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 1.0, 0.01, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleRateChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65CDC00;
  *((_QWORD *)this + 10) = &unk_1E65CDC20;
  return this;
}

void sub_1B2F801A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::_OZGrowShrinkBehavior_scaleDestChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::_OZGrowShrinkBehavior_scaleDestChan)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::OZGrowShrinkBehavior_scaleDestChanImpl(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::_OZGrowShrinkBehavior_scaleDestChan = (uint64_t)v0;
  }
}

void sub_1B2F8026C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl::OZGrowShrinkBehavior_scaleDestChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CDC78;
  *((_QWORD *)this + 5) = &unk_1E65CDC98;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F80320(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::OZGrowShrinkBehavior_scaleDestChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::_OZGrowShrinkBehavior_scaleDestChanInfo;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::_OZGrowShrinkBehavior_scaleDestChanInfo)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::OZGrowShrinkBehavior_scaleDestChanInfo(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::_OZGrowShrinkBehavior_scaleDestChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F803EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo::OZGrowShrinkBehavior_scaleDestChanInfo(OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_scaleDestChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65CDCF0;
  *((_QWORD *)this + 10) = &unk_1E65CDD10;
  return this;
}

void sub_1B2F804A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::OZGrowShrinkBehavior_curvatureFactorChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::OZGrowShrinkBehavior_curvatureFactorChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::_OZGrowShrinkBehavior_curvatureFactorChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::_OZGrowShrinkBehavior_curvatureFactorChan)
  {
    v0 = (OZChannelPercent *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::OZGrowShrinkBehavior_curvatureFactorChanImpl(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::_OZGrowShrinkBehavior_curvatureFactorChan = (uint64_t)v0;
  }
}

void sub_1B2F8056C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZGrowShrinkBehavior::OZGrowShrinkBehavior_curvatureFactorChanImpl::OZGrowShrinkBehavior_curvatureFactorChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65CDD68;
  this->var5 = (PCString *)&unk_1E65CDD88;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2F80618(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::OZGrowShrinkBehavior_endTimeOffsetChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::OZGrowShrinkBehavior_endTimeOffsetChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::_OZGrowShrinkBehavior_endTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::_OZGrowShrinkBehavior_endTimeOffsetChan)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::OZGrowShrinkBehavior_endTimeOffsetChanImpl(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::_OZGrowShrinkBehavior_endTimeOffsetChan = (uint64_t)v0;
  }
}

void sub_1B2F806E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl::OZGrowShrinkBehavior_endTimeOffsetChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_endTimeOffsetChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CDDE0;
  *((_QWORD *)this + 5) = &unk_1E65CDE00;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F80798(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::OZGrowShrinkBehavior_hudValueScaleChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::OZGrowShrinkBehavior_hudValueScaleChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::_OZGrowShrinkBehavior_hudValueScaleChan;
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *v0;

  if (!OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::_OZGrowShrinkBehavior_hudValueScaleChan)
  {
    v0 = (OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *)operator new();
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::OZGrowShrinkBehavior_hudValueScaleChanImpl(v0);
    OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::_OZGrowShrinkBehavior_hudValueScaleChan = (uint64_t)v0;
  }
}

void sub_1B2F80864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl::OZGrowShrinkBehavior_hudValueScaleChanImpl(OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZGrowShrinkBehavior::OZGrowShrinkBehavior_hudValueScaleChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65CDE58;
  *((_QWORD *)this + 5) = &unk_1E65CDE78;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F80918(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZGrowShrinkCurveNode::OZGrowShrinkCurveNode(OZGrowShrinkCurveNode *this, OZGrowShrinkBehavior *a2, OZChannel *a3, char a4)
{
  uint64_t v6;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *(_QWORD *)v6 = &off_1E65CDED0;
  *(_QWORD *)(v6 + 32) = a2;
  *(_BYTE *)(v6 + 40) = a4;
}

void OZGrowShrinkCurveNode::~OZGrowShrinkCurveNode(OZGrowShrinkCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZGrowShrinkCurveNode::solveNode(OZGrowShrinkCurveNode *this, const CMTime *a2, double a3, double a4)
{
  int v5;
  OZGrowShrinkBehavior *v6;
  double XMultiplier;
  CMTime v9;
  CMTime v10;

  v5 = *((unsigned __int8 *)this + 40);
  v6 = (OZGrowShrinkBehavior *)*((_QWORD *)this + 4);
  if (v5)
  {
    v10 = *a2;
    XMultiplier = OZGrowShrinkBehavior::getXMultiplier(v6, &v10);
  }
  else
  {
    v9 = *a2;
    XMultiplier = OZGrowShrinkBehavior::getYMultiplier(v6, &v9);
  }
  return XMultiplier * a4;
}

void OZGrowShrinkCurveNode::solveNode(OZGrowShrinkCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  double v8;
  OZGrowShrinkBehavior *v9;
  unint64_t v10;
  double v11;
  OZGrowShrinkBehavior *v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  v4 = *((_QWORD *)a2 + 19);
  v5 = *((_QWORD *)a2 + 10);
  v16 = *(CMTime *)((_BYTE *)a2 + 5);
  v15 = *(CMTime *)((_BYTE *)a2 + 4);
  v6 = *((_DWORD *)a2 + 36);
  if (*((_BYTE *)this + 40))
  {
    if (v6)
    {
      v7 = 0;
      do
      {
        v8 = *(double *)(v5 + 8 * v7);
        v9 = (OZGrowShrinkBehavior *)*((_QWORD *)this + 4);
        v14 = v15;
        *(double *)(v4 + 8 * v7) = v8 * OZGrowShrinkBehavior::getXMultiplier(v9, &v14);
        v18 = v15;
        v17 = v16;
        PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
        ++v7;
      }
      while (v7 < *((unsigned int *)a2 + 36));
    }
  }
  else if (v6)
  {
    v10 = 0;
    do
    {
      v11 = *(double *)(v5 + 8 * v10);
      v12 = (OZGrowShrinkBehavior *)*((_QWORD *)this + 4);
      v13 = v15;
      *(double *)(v4 + 8 * v10) = v11 * OZGrowShrinkBehavior::getYMultiplier(v12, &v13);
      v18 = v15;
      v17 = v16;
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
      ++v10;
    }
    while (v10 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *OZGrowShrinkCurveNode::cloneNode(OZGrowShrinkCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E65CDED0;
  return v2;
}

void sub_1B2F80BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A189A79ELL);
  _Unwind_Resume(a1);
}

uint64_t OZGrowShrinkCurveNode::compare(OZGrowShrinkCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZGrowShrinkCurveNode::getNeededRange(OZGrowShrinkCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

void OZLogarithmicBehavior::OZLogarithmicBehavior(OZLogarithmicBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;
  OZChannelBase *v5;

  OZRampBehavior::OZRampBehavior(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E65CDFC8;
  *(_QWORD *)(v4 + 16) = &unk_1E65CE308;
  *(_QWORD *)(v4 + 48) = &unk_1E65CE560;
  *(_QWORD *)(v4 + 336) = &unk_1E65CE5B8;
  *(_QWORD *)(v4 + 536) = &unk_1E65CE5E0;
  v5 = (OZChannelBase *)(v4 + 1168);
  OZChannelBase::setFlag((OZChannelBase *)(v4 + 1168), 2, 0);
  OZChannelBase::saveStateAsDefault(v5);
}

void sub_1B2F80CB0(_Unwind_Exception *a1)
{
  OZRampBehavior *v1;

  OZRampBehavior::~OZRampBehavior(v1);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior::OZLogarithmicBehavior(OZLogarithmicBehavior *this, const OZLogarithmicBehavior *a2, char a3)
{
  _QWORD *v3;

  OZRampBehavior::OZRampBehavior(this, a2, a3);
  *v3 = &off_1E65CDFC8;
  v3[2] = &unk_1E65CE308;
  v3[6] = &unk_1E65CE560;
  v3[42] = &unk_1E65CE5B8;
  v3[67] = &unk_1E65CE5E0;
}

void `non-virtual thunk to'OZLogarithmicBehavior::~OZLogarithmicBehavior(OZLogarithmicBehavior *this)
{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 16));
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 48));
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 336));
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 536));
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZLogarithmicBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZLogarithmicBehavior::~OZLogarithmicBehavior(OZLogarithmicBehavior *this)
{
  OZRampBehavior::~OZRampBehavior(this);
  JUMPOUT(0x1B5E29170);
}

OZLogarithmicCurveNode *OZLogarithmicBehavior::createCurveNode(OZLogarithmicBehavior *this, OZChannel *a2)
{
  OZChannelInfo *var16;
  double v5;
  double v6;
  __n128 v7;
  double v8;
  OZLogarithmicCurveNode *v9;

  var16 = a2->var16;
  v5 = *((double *)var16 + 5);
  if (v5 != *((double *)this + 78))
  {
    *((double *)this + 78) = v5;
    (*(void (**)(OZLogarithmicBehavior *))(*(_QWORD *)this + 752))(this);
    var16 = a2->var16;
  }
  if (!OZChannelInfo::operator==((uint64_t)this + 544, (uint64_t)var16))
  {
    OZChannelInfo::operator=((uint64_t)this + 544, (uint64_t)a2->var16);
    (*(void (**)(OZLogarithmicBehavior *, char *, OZChannel *))(*(_QWORD *)this + 760))(this, (char *)this + 544, a2);
  }
  v6 = *((double *)a2->var16 + 2);
  (*((void (**)(OZChannel *))a2->var0 + 101))(a2);
  v8 = 3.40282347e38;
  if (v6 != -3.40282347e38 && v7.n128_f64[0] != 3.40282347e38)
    v8 = (*((double (**)(OZChannel *, __n128, double))a2->var0 + 101))(a2, v7, 3.40282347e38)
       - *((double *)a2->var16 + 2);
  *((double *)this + 79) = v8;
  v9 = (OZLogarithmicCurveNode *)operator new();
  OZLogarithmicCurveNode::OZLogarithmicCurveNode(v9, this, a2);
  return v9;
}

void sub_1B2F80F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void OZLogarithmicCurveNode::OZLogarithmicCurveNode(OZLogarithmicCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v5;
  void *v6;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *v5 = &off_1E65CE658;
  if (a2)
  else
    v6 = 0;
  *((_QWORD *)this + 4) = v6;
}

void OZLogarithmicCurveNode::~OZLogarithmicCurveNode(OZLogarithmicCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZLogarithmicCurveNode::solveNode(OZLogarithmicCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v6;
  __n128 FrameDuration;
  OZBehavior *v8;
  OZChannel *v9;
  const CMTime *v10;
  Float64 v11;
  uint64_t v12;
  Float64 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double Seconds;
  Float64 v19;
  double v20;
  int32_t v21;
  double v22;
  int32_t v23;
  double v24;
  CMTime v26;
  CMTime time;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31[2];
  __n128 v32;
  CMTimeEpoch v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime time2;
  CMTime time1;

  memset(&v35, 0, sizeof(v35));
  (*(void (**)(CMTime *__return_ptr, double))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 4) + 376) + 32)
                                                       + 336))(&v35, a3);
  v6 = *((_QWORD *)this + 4);
  v34 = v35;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 296))(v6, &v34, 0, 1, 1))
  {
    v32 = 0uLL;
    v33 = 0;
    FrameDuration = OZBehavior::getFrameDuration((OZBehavior *)*((_QWORD *)this + 4), &v32);
    (*(void (**)(CMTime *__return_ptr, __n128))(**((_QWORD **)this + 4) + 608))(v31, FrameDuration);
    memset(&v30, 0, sizeof(v30));
    v36 = v31[0];
    v8 = (OZBehavior *)*((_QWORD *)this + 4);
    OZBehavior::getFrameDuration(v8, (__n128 *)&time1);
    v9 = (OZChannel *)((char *)v8 + 1320);
    v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble(v9, MEMORY[0x1E0CA2E68], 0.0);
    operator*(&time1, &v29, v11);
    time1 = v36;
    time2 = v29;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v30);
    memset(&v29, 0, sizeof(v29));
    time1 = v31[0];
    time2 = v31[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v36);
    time1 = v36;
    *(__n128 *)&time2.value = v32;
    time2.epoch = v33;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
    v12 = *((_QWORD *)this + 4);
    OZBehavior::getFrameDuration((OZBehavior *)v12, (__n128 *)&time1);
    OZChannel::getValueAsDouble((OZChannel *)(v12 + 1472), v10, 0.0);
    operator*(&time1, &v36, v13);
    time1 = v28;
    time2 = v36;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
    OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 4) + 864), v10, 0.0);
    v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 4) + 1016), v10, 0.0);
    v17 = v16;
    if (vabdd_f64(v16, v15) >= 0.0000001)
    {
      time1 = v29;
      time2 = v30;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      if (fabs(Seconds) >= 0.0000001)
      {
        time1 = v35;
        time2 = v30;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
        v19 = CMTimeGetSeconds(&v26) / Seconds;
        time1 = v35;
        time2 = v30;
        v20 = (v17 - v15) / 6.90775528;
        v21 = CMTimeCompare(&time1, &time2);
        v22 = v19 * 999.0;
        time1 = v35;
        time2 = v29;
        v23 = CMTimeCompare(&time1, &time2);
        v24 = 1.0;
        if (v21 >= 0)
          v24 = v22 + 1.0;
        if (v23 > 0)
          v24 = 1000.0;
        v15 = v15 + v20 * log(v24);
      }
    }
    return v15 + a4;
  }
  return a4;
}

__n128 OZLogarithmicCurveNode::solveNode(OZLogarithmicCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  unint64_t v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v9 = *(CMTime *)((_BYTE *)a2 + 5);
  result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.value = result;
  v8.epoch = *((_QWORD *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZLogarithmicCurveNode *, CMTime *, double, double))(*(_QWORD *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      v11 = v8;
      v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      result = *(__n128 *)&v12.value;
      v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

OZBehaviorCurveNode *OZLogarithmicCurveNode::cloneNode(OZLogarithmicCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E65CE658;
  *((_QWORD *)v2 + 4) = *((_QWORD *)this + 4);
  return v2;
}

void sub_1B2F81478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZLogarithmicCurveNode::compare(OZLogarithmicCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

OZCurveNodeParam *OZLogarithmicCurveNode::getNeededRange(OZLogarithmicCurveNode *this, OZCurveNodeParam *a2)
{
  (*(void (**)(_QWORD, _QWORD, OZCurveNodeParam *))(**((_QWORD **)this + 4) + 696))(*((_QWORD *)this + 4), *(unsigned int *)(*((_QWORD *)this + 2) + 24), a2);
  return a2;
}

void OZMoveToBehavior::OZMoveToBehavior(OZMoveToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6[2];
  uint64_t v7;
  PCString v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CE750;
  v5[2] = &unk_1E65CEA70;
  v5[6] = &unk_1E65CECC8;
  v5[42] = &unk_1E65CED20;
  v5[67] = &unk_1E65CED48;
  PCURL::PCURL((PCURL *)v6, CFSTR("Move To Behavior Position"));
  OZChannelPosition3D::OZChannelPosition3D((OZMoveToBehavior *)((char *)this + 864), v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 3u);
  PCString::~PCString(v6);
  PCURL::PCURL((PCURL *)v6, CFSTR("Move To Behavior Influence"));
  OZChannelDouble::OZChannelDouble((OZMoveToBehavior *)((char *)this + 1752), 1.0, v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v6);
  PCURL::PCURL((PCURL *)v6, CFSTR("Move To Behavior Direction Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Move To Behavior Direction Label"));
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 1904), 0, v6, &v8, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(v6);
  PCURL::PCURL((PCURL *)v6, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 2160), 0, v6, &v8, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(v6);
  *((_QWORD *)this + 302) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 864), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 864));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1000), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 125) + 128))((char *)this + 1000);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1152), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 144) + 128))((char *)this + 1152);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1600), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 200) + 128))((char *)this + 1600);
  OZChannel::setMin((OZChannel *)((char *)this + 1752), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 1752), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1752), 0.01);
  v8.var0 = (__CFString *)0x100000000;
  OZChannelEnum::setTags((OZMoveToBehavior *)((char *)this + 1904), (char *)&v8, 2);
  v7 = 0x500000004;
  *(_OWORD *)&v6[0].var0 = xmmword_1B356292C;
  OZChannelEnum::setTags((OZMoveToBehavior *)((char *)this + 2160), (char *)v6, 6);
}

void sub_1B2F81820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15)
{
  OZCameraBehavior *v15;
  OZChannelPosition3D *v16;
  OZChannel *v17;
  OZChannelEnum *v18;
  OZChannelEnum *v19;

  OZChannelEnum::~OZChannelEnum(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannel::~OZChannel(v17);
  OZChannelPosition3D::~OZChannelPosition3D(v16);
  OZCameraBehavior::~OZCameraBehavior(v15);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior::OZMoveToBehavior(OZMoveToBehavior *this, const OZMoveToBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CE750;
  *(_QWORD *)(v5 + 16) = &unk_1E65CEA70;
  *(_QWORD *)(v5 + 48) = &unk_1E65CECC8;
  *(_QWORD *)(v5 + 336) = &unk_1E65CED20;
  *(_QWORD *)(v5 + 536) = &unk_1E65CED48;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)(v5 + 864), (const OZMoveToBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1752), (const OZChannelBase *)((char *)a2 + 1752), v6);
  *((_QWORD *)this + 219) = &off_1E6551358;
  *((_QWORD *)this + 221) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 1904), (const OZMoveToBehavior *)((char *)a2 + 1904), v6);
  OZChannelEnum::OZChannelEnum((OZMoveToBehavior *)((char *)this + 2160), (const OZMoveToBehavior *)((char *)a2 + 2160), v6);
  *((_QWORD *)this + 302) = 0;
}

void sub_1B2F819B0(_Unwind_Exception *a1)
{
  OZCameraBehavior *v1;
  OZChannelPosition3D *v2;
  OZChannel *v3;
  OZChannelEnum *v4;

  OZChannelEnum::~OZChannelEnum(v4);
  OZChannel::~OZChannel(v3);
  OZChannelPosition3D::~OZChannelPosition3D(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior::~OZMoveToBehavior(OZMoveToBehavior *this)
{
  *(_QWORD *)this = &off_1E65CE750;
  *((_QWORD *)this + 2) = &unk_1E65CEA70;
  *((_QWORD *)this + 6) = &unk_1E65CECC8;
  *((_QWORD *)this + 42) = &unk_1E65CED20;
  *((_QWORD *)this + 67) = &unk_1E65CED48;
  OZChannelEnum::~OZChannelEnum((OZMoveToBehavior *)((char *)this + 2160));
  OZChannelEnum::~OZChannelEnum((OZMoveToBehavior *)((char *)this + 1904));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1752));
  OZChannelPosition3D::~OZChannelPosition3D((OZMoveToBehavior *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZMoveToBehavior::~OZMoveToBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZMoveToBehavior::~OZMoveToBehavior(OZMoveToBehavior *this)
{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 16));
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 48));
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 336));
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 536));
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZMoveToBehavior::~OZMoveToBehavior((OZMoveToBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZMoveToBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelPosition::operator=(a1 + 864, (uint64_t)v4 + 864);
  return OZChannelBase::operator=(a1 + 2160, (uint64_t)v5 + 2160);
}

unint64_t OZMoveToBehavior::addCurveNodesToChannels(OZMoveToBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  void *v5;

  v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2)
  else
    v5 = 0;
  *((_QWORD *)this + 302) = v5;
  return v4;
}

double OZMoveToBehavior::solveNode(OZMoveToBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  int v9;
  uint64_t v10;
  __n128 FrameDuration;
  CMTime *v12;
  double Seconds;
  double v14;
  double v15;
  const CMTime *v16;
  OZCameraBehavior *ValueAsInt;
  double v18;
  double v19;
  int v20;
  double v21;
  BOOL v22;
  double v23;
  const void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  double v32;
  float64_t v34;
  float64_t v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  void *__p[3];
  CMTime time2;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  OZRenderState time1;
  float64x2_t v51;
  double v52;
  CMTime time;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  __int128 v57;
  int64_t v58;
  __n128 v59;
  CMTimeEpoch v60;
  CMTime v61;

  v9 = (*(uint64_t (**)(OZMoveToBehavior *, double))(*(_QWORD *)this + 768))(this, a4);
  if (a2 <= 2 && v9)
  {
    memset(&v61, 0, sizeof(v61));
    (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                         + 336))(&v61, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
    v59 = 0uLL;
    v60 = 0;
    v10 = (*(uint64_t (**)(OZMoveToBehavior *))(*(_QWORD *)this + 336))(this);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v59);
    (*(void (**)(CMTime *__return_ptr, OZMoveToBehavior *, __n128))(*(_QWORD *)this + 608))(&v56, this, FrameDuration);
    v55 = v56;
    memset(&v54, 0, sizeof(v54));
    *(_OWORD *)&time1.var0.var0 = v57;
    time1.var0.var3 = v58;
    *(__n128 *)&time2.value = v59;
    time2.epoch = v60;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v54);
    time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v61;
    time2 = v55;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v51);
    *(__n128 *)&time1.var0.var0 = v59;
    time1.var0.var3 = v60;
    time2 = v54;
    if (CMTimeCompare((CMTime *)&time1, &time2) >= 0)
      v12 = (CMTime *)&v59;
    else
      v12 = &v54;
    *(_OWORD *)&time1.var0.var0 = *(_OWORD *)&v12->value;
    time1.var0.var3 = v12->epoch;
    operator/((__int128 *)&v51, (uint64_t)&time1, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    v14 = Seconds;
    if (Seconds > 1.0)
      Seconds = 1.0;
    if (v14 >= 0.0)
      v15 = Seconds;
    else
      v15 = 0.0;
    v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 2160), MEMORY[0x1E0CA2E68], 0.0);
    v18 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v15);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1752), a3, 0.0);
    v36 = v18 * v19;
    v20 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1904), v16, 0.0);
    if (v20 == 1)
    {
      v21 = 1.0 - v36;
      if (1.0 - v36 < 0.0000001)
        v21 = 0.0;
    }
    else
    {
      v21 = v36;
    }
    v22 = v21 < 0.0000001;
    if (v20 == 1)
      v22 = v21 > 1.0;
    if (!v22)
    {
      v37 = v21;
      if (v21 == v14)
      {
        v23 = 0.0;
      }
      else if (v14 < 0.0000001 && v20 == 1 || (v23 = 0.0, v14 > 1.0) && v20 != 1)
      {
        time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v55;
        time2 = v54;
        PC_CMTimeSaferAdd((CMTime *)&time1, &time2, (uint64_t)&v51);
        v23 = (*(double (**)(OZMoveToBehavior *, uint64_t, float64x2_t *, double))(*(_QWORD *)this + 776))(this, a2, &v51, a5);
      }
      OZRenderState::OZRenderState(&time1);
      time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v61;
      *(_WORD *)&time1.var8 = 256;
      time1.var6 = 0;
      v49 = 0x3FF0000000000000;
      v46 = 0x3FF0000000000000;
      v43 = 0x3FF0000000000000;
      time2.value = 0x3FF0000000000000;
      *(_OWORD *)&time2.timescale = 0u;
      v42 = 0u;
      v44 = 0u;
      v45 = 0u;
      v47 = 0u;
      v48 = 0u;
      v24 = *(const void **)(*((_QWORD *)this + 302) + 960);
      if (v24)
      {
        if (v25)
          (*(void (**)(void *, CMTime *, OZRenderState *))(*(_QWORD *)v25 + 1256))(v25, &time2, &time1);
      }
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1000), &v61, 0.0);
      v35 = v26;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1152), &v61, 0.0);
      v34 = v27;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1600), &v61, 0.0);
      v29 = v28;
      v51.f64[0] = v35;
      v51.f64[1] = v34;
      v52 = v28;
      if (v37 < 1.0)
      {
        std::vector<double>::vector(__p, 3uLL);
        (*(void (**)(OZMoveToBehavior *, const CMTime *, void **))(*(_QWORD *)this + 744))(this, a3, __p);
        v30 = *((double *)__p[0] + 2);
        v38 = *(float64x2_t *)__p[0];
        v39 = v30;
        PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, v38.f64, v38.f64);
        v31.f64[0] = v35;
        v31.f64[1] = v34;
        v51 = vaddq_f64(v38, vmulq_n_f64(vsubq_f64(v31, v38), v37));
        v52 = v39 + v37 * (v29 - v39);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      PCMatrix44Tmpl<double>::invert((double *)&time2.value, (double *)&time2.value, 0.0);
      PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, v51.f64, v51.f64);
      if ((_DWORD)a2 == 2)
      {
        v32 = v52;
      }
      else if ((_DWORD)a2 == 1)
      {
        v32 = v51.f64[1];
      }
      else
      {
        v32 = v51.f64[0];
      }
      return v23 + v32;
    }
  }
  return a5;
}

void sub_1B2F820C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double `non-virtual thunk to'OZMoveToBehavior::solveNode(OZMoveToBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  return OZMoveToBehavior::solveNode((OZMoveToBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZNegateBehavior::OZNegateBehavior(OZNegateBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v4 = &off_1E65CEDC0;
  v4[2] = &unk_1E65CF100;
  v4[6] = &unk_1E65CF358;
  v4[42] = &unk_1E65CF3B0;
  v4[67] = &unk_1E65CF3D8;
}

void OZNegateBehavior::OZNegateBehavior(OZNegateBehavior *this, const OZNegateBehavior *a2, char a3)
{
  _QWORD *v3;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *v3 = &off_1E65CEDC0;
  v3[2] = &unk_1E65CF100;
  v3[6] = &unk_1E65CF358;
  v3[42] = &unk_1E65CF3B0;
  v3[67] = &unk_1E65CF3D8;
}

void `non-virtual thunk to'OZNegateBehavior::~OZNegateBehavior(OZNegateBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 16));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 536));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZNegateBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZNegateBehavior::~OZNegateBehavior(OZNegateBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZNegateBehavior::solveNode(OZNegateBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = 0uLL;
  v10 = 0;
  (*(void (**)(__int128 *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                               + 32)
                                                                                 + 336))(&v9, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v7 = v9;
  v8 = v10;
  return (*(uint64_t (**)(OZNegateBehavior *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v7, 0, 1, 1);
}

uint64_t `non-virtual thunk to'OZNegateBehavior::solveNode(OZNegateBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  char *v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = (char *)this - 536;
  v9 = 0uLL;
  v10 = 0;
  (*(void (**)(__int128 *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this - 20)
                                                                                               + 32)
                                                                                 + 336))(&v9, *(_QWORD *)(*((_QWORD *)this - 20) + 32), a3, a4);
  v7 = v9;
  v8 = v10;
  return (*(uint64_t (**)(char *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 296))(v5, &v7, 0, 1, 1);
}

void OZOscillateBehavior::OZOscillateBehavior(OZOscillateBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CF450;
  v5[2] = &unk_1E65CF790;
  v5[6] = &unk_1E65CF9E8;
  v5[42] = &unk_1E65CFA40;
  v5[67] = &unk_1E65CFA68;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior Wave Shape Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Oscillate Behavior Wave Shape"));
  OZChannelEnum::OZChannelEnum((OZOscillateBehavior *)((char *)this + 864), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior Phase"));
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1120), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior Amplitude"));
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1272), 100.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior Speed"));
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1424), 10.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior Absolute"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1576), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior Start Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1728), &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZOscillateBehavior *)((char *)this + 1880), &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2032), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 2u, 0, 0);
  PCString::~PCString(&v7);
  *((_WORD *)this + 1092) = 0;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1728), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1880), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1728), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1728));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1880), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1880));
}

void sub_1B2F826C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSingleChannelBehavior *v10;
  OZChannelEnum *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannelBool *v15;
  OZChannel *v16;
  OZChannel *v17;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior::OZOscillateBehavior(OZOscillateBehavior *this, const OZOscillateBehavior *a2, char a3)
{
  _QWORD *v5;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *v5 = &off_1E65CF450;
  v5[2] = &unk_1E65CF790;
  v5[6] = &unk_1E65CF9E8;
  v5[42] = &unk_1E65CFA40;
  v5[67] = &unk_1E65CFA68;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 108), (const OZOscillateBehavior *)((char *)a2 + 864), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1120), (const OZChannelBase *)a2 + 10, (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 140) = &off_1E6551358;
  *((_QWORD *)this + 142) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1272), (const OZChannelBase *)((char *)a2 + 1272), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 159) = &off_1E6551358;
  *((_QWORD *)this + 161) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1424), (const OZChannelBase *)((char *)a2 + 1424), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 178) = &off_1E6551358;
  *((_QWORD *)this + 180) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1576), (const OZChannelBase *)((char *)a2 + 1576), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1728), (const OZChannelBase *)((char *)a2 + 1728), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 216) = &off_1E6551358;
  *((_QWORD *)this + 218) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1880), (const OZChannelBase *)((char *)a2 + 1880), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 235) = &off_1E6551358;
  *((_QWORD *)this + 237) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2032), (const OZChannelBase *)((char *)a2 + 2032), (OZChannelFolder *)((char *)this + 56));
  *((_WORD *)this + 1092) = *((_WORD *)a2 + 1092);
}

void sub_1B2F82954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannelEnum *a10)
{
  OZSingleChannelBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannelBool *v13;
  OZChannel *v14;
  OZChannel *v15;

  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZChannel::~OZChannel(a9);
  OZChannelEnum::~OZChannelEnum(a10);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F829C0()
{
  JUMPOUT(0x1B2F829A0);
}

void sub_1B2F829C8()
{
  JUMPOUT(0x1B2F829A8);
}

void sub_1B2F829D0()
{
  JUMPOUT(0x1B2F829B0);
}

void OZOscillateBehavior::~OZOscillateBehavior(OZOscillateBehavior *this)
{
  *(_QWORD *)this = &off_1E65CF450;
  *((_QWORD *)this + 2) = &unk_1E65CF790;
  *((_QWORD *)this + 6) = &unk_1E65CF9E8;
  *((_QWORD *)this + 42) = &unk_1E65CFA40;
  *((_QWORD *)this + 67) = &unk_1E65CFA68;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1880));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1728));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1272));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1120));
  OZChannelEnum::~OZChannelEnum((OZOscillateBehavior *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZOscillateBehavior::~OZOscillateBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZOscillateBehavior::~OZOscillateBehavior(OZOscillateBehavior *this)
{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 16));
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 48));
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 336));
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 536));
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZOscillateBehavior::~OZOscillateBehavior((OZOscillateBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZOscillateBehavior::operator=(uint64_t a1, const void *a2)
{
  _WORD *v4;
  _WORD *v5;
  uint64_t result;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)(v4 + 432));
  OZChannelBase::operator=(a1 + 1120, (uint64_t)(v5 + 560));
  OZChannelBase::operator=(a1 + 1272, (uint64_t)(v5 + 636));
  OZChannelBase::operator=(a1 + 1424, (uint64_t)(v5 + 712));
  OZChannelBase::operator=(a1 + 1728, (uint64_t)(v5 + 864));
  OZChannelBase::operator=(a1 + 1880, (uint64_t)(v5 + 940));
  result = OZChannelBase::operator=(a1 + 2032, (uint64_t)(v5 + 1016));
  *(_WORD *)(a1 + 2184) = v5[1092];
  return result;
}

uint64_t OZOscillateBehavior::sceneNodeDidLoad(OZOscillateBehavior *this)
{
  uint64_t result;

  result = OZSingleChannelBehavior::sceneNodeDidLoad(this);
  *((_WORD *)this + 1092) = 0;
  return result;
}

long double OZOscillateBehavior::waveFunc(OZOscillateBehavior *this, double a2)
{
  double v3;
  double v6;

  v3 = 0.0;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 864), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      return sin(a2 * 6.28318531);
    case 1u:
      if (a2 > 0.5)
        return -1.0;
      else
        return 1.0;
    case 2u:
      v3 = a2 + a2;
      goto LABEL_14;
    case 3u:
      if (a2 <= 0.25 || a2 >= 0.75)
      {
        v3 = a2 * 4.0;
        if (a2 * 4.0 <= 1.0)
          return v3;
        v6 = -4.0;
        return v3 + v6;
      }
      v3 = (a2 + -0.5) * -4.0;
LABEL_14:
      if (v3 > 1.0)
      {
        v6 = -2.0;
        return v3 + v6;
      }
      return v3;
    default:
      return v3;
  }
}

double OZOscillateBehavior::solveNode(OZOscillateBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  OZScene *v8;
  double v9;
  CMTime *v10;
  double v11;
  OZScene *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  CMTime v30;
  CMTime time;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36[2];
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime time2;
  CMTime time1;

  memset(&v38, 0, sizeof(v38));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v38, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v37 = v38;
  if ((*(unsigned int (**)(OZOscillateBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 296))(this, &v37, 0, 1, 1)&& (*(uint64_t (**)(OZOscillateBehavior *))(*(_QWORD *)this + 336))(this))
  {
    (*(void (**)(CMTime *__return_ptr, OZOscillateBehavior *))(*(_QWORD *)this + 608))(v36, this);
    memset(&v35, 0, sizeof(v35));
    v41 = v36[0];
    v8 = (OZScene *)(*(uint64_t (**)(OZOscillateBehavior *))(*(_QWORD *)this + 336))(this);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1728), &v38, 0.0);
    OZScene::getTimeForFrame(v8, v9, (__n128 *)&v40);
    time1 = v41;
    time2 = v40;
    v10 = &v35;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v35);
    memset(&v34, 0, sizeof(v34));
    OZBehavior::getFrameDuration(this, (__n128 *)&v39);
    time1 = v36[0];
    time2 = v36[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
    time1 = v41;
    time2 = v39;
    v11 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
    v12 = (OZScene *)(*(uint64_t (**)(OZOscillateBehavior *, double))(*(_QWORD *)this + 336))(this, v11);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1880), &v38, 0.0);
    OZScene::getTimeForFrame(v12, v13, (__n128 *)&v41);
    time1 = v40;
    time2 = v41;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
    time1 = v38;
    time2 = v35;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = v38;
      time2 = v34;
      if (CMTimeCompare(&time1, &time2) <= 0)
        v10 = &v38;
      else
        v10 = &v34;
    }
    v33 = *v10;
    time1 = *v10;
    time2 = v35;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v33);
    memset(&v32, 0, sizeof(v32));
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2032), MEMORY[0x1E0CA2E68], 0.0))
    {
      (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 320))(&v40);
      time1 = *a3;
      time2 = v40;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v39);
      time1 = v41;
      time2 = v39;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
    }
    else
    {
      v32 = v38;
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1120), &v32, 0.0);
    v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1272), &v32, 0.0);
    v17 = v16;
    if (OZChannel::hasMoreThanOneKeypoint((OZChannel *)((char *)this + 1424))
      || OZBehavior::IsChannelAffectedByBehaviors((OZOscillateBehavior *)((char *)this + 1424), 0))
    {
      v40 = v35;
      v18 = 0;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 864), MEMORY[0x1E0CA2E68], 0.0) == 2)
        v19 = 2;
      else
        v19 = 4;
      v20 = (double)v19;
      while (1)
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1424), &v40, 0.0);
        v22 = v21 / 60.0;
        v23 = 1.0 / (v21 / 60.0);
        v24 = v22 <= 0.0 ? 100000000.0 : v23;
        memset(&v39, 0, sizeof(v39));
        OZFigTimeForChannelSeconds(&v39, v24 / v20, 0x40000);
        time1 = v40;
        time2 = v39;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
        time1 = v41;
        time2 = v33;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          break;
        time2 = v40;
        v41 = v39;
        PC_CMTimeSaferAdd(&time2, &v41, (uint64_t)&time1);
        v40 = time1;
        ++v18;
      }
      time1 = v33;
      time2 = v40;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      v25 = v15 / 6.28318531 + v22 * ((double)(v18 & (v19 - 1)) / v20 * v24 + CMTimeGetSeconds(&time));
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1424), &v32, 0.0);
      v30 = v33;
      v27 = v15 / 6.28318531 + v26 * (CMTimeGetSeconds(&v30) / 60.0);
      time1.value = 0;
      modf(v27, (long double *)&time1.value);
      v25 = v27 - *(double *)&time1.value;
      if (v27 - *(double *)&time1.value < 0.0)
        v25 = v25 + 1.0;
    }
    v28 = v17 * OZOscillateBehavior::waveFunc(this, v25);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1576), MEMORY[0x1E0CA2E68], 0.0)
      && (v17 > 0.0 && v28 < 0.0 || v17 < 0.0 && v28 > 0.0))
    {
      v28 = -v28;
    }
    return v28 + a5;
  }
  return a5;
}

double `non-virtual thunk to'OZOscillateBehavior::solveNode(OZOscillateBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZOscillateBehavior::solveNode((OZOscillateBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZOscillateBehavior::didSetChannelInfo(OZOscillateBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = (OZChannel *)((char *)this + 1272);
  v6 = *(double *)(*((_QWORD *)this + 175) + 40);
  OZChannel::setInfo((OZChannel *)((char *)this + 1272), a2);
  v7 = 1.0;
  if (!*((_BYTE *)this + 2184))
    v7 = v6 / *((double *)a2 + 5);
  v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((_QWORD *)this + 175) + 40) + -57.2957795) >= 0.0000001)
      v10 = 100.0;
    else
      v10 = 6.28318531;
  }
  else
  {
    v10 = v9 - v8;
    if (!*((_BYTE *)this + 2184))
    {
      v11 = *((double *)this + 79);
      if (v11 != 3.40282347e38)
        v7 = v7 * (v10 / v11);
    }
  }
  if (vabdd_f64(1.0, v7) >= 0.0000001)
    OZChannel::scaleChannel(v5, v7);
  OZChannel::setSliderMin(v5, 0.0);
  OZChannel::setSliderMax(v5, v10);
  v12 = 0.0;
  (*(void (**)(_QWORD, double *))(**(_QWORD **)(*((_QWORD *)this + 173) + 8) + 256))(*(_QWORD *)(*((_QWORD *)this + 173) + 8), &v12);
  if (v12 < v10)
    OZChannel::setMax(v5, v10);
}

void OZOscillateBehavior::didSkipApplyingToNonkeyframableChannel(OZOscillateBehavior *this, OZChannel *a2, __n128 a3)
{
  if (*((_BYTE *)this + 2185))
    OZSingleChannelBehavior::conformToChannel(this, a2, 0, a3);
}

uint64_t OZOscillateBehavior::parseBegin(OZOscillateBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v4;
  BOOL v5;

  *((_BYTE *)this + 2184) = 0;
  v4 = *((_DWORD *)a2 + 26);
  if (v4 < 5 || (v4 == 5 ? (v5 = *((_DWORD *)a2 + 27) > 6u) : (v5 = 1), !v5))
  {
    *((_BYTE *)this + 2185) = 1;
    OZChannel::setValue((OZChannel *)((char *)this + 2032), MEMORY[0x1E0CA2E68], 1.0, 0);
  }
  return OZSingleChannelBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZOscillateBehavior::parseBegin(OZOscillateBehavior *this, PCSerializerReadStream *a2)
{
  return OZOscillateBehavior::parseBegin((OZOscillateBehavior *)((char *)this - 48), a2);
}

uint64_t OZOscillateBehavior::parseElement(OZOscillateBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v7;

  if (*((_DWORD *)a3 + 2) == 110)
  {
    v7 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v7);
    if (v7 == *((_DWORD *)this + 324))
      *((_BYTE *)this + 2184) = 1;
  }
  return OZSingleChannelBehavior::parseElement((OZTimeMarkerSet **)this, a2, a3);
}

uint64_t `non-virtual thunk to'OZOscillateBehavior::parseElement(OZOscillateBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZOscillateBehavior::parseElement((OZOscillateBehavior *)((char *)this - 48), a2, a3);
}

void OZPanBehavior::OZPanBehavior(OZPanBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65CFAE0;
  v5[2] = &unk_1E65CFE00;
  v5[6] = &unk_1E65D0058;
  v5[42] = &unk_1E65D00B0;
  v5[67] = &unk_1E65D00D8;
  PCURL::PCURL((PCURL *)v7, CFSTR("Pan Behavior Angle Start"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 864), 0.0, v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Pan Behavior Angle End"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1016), 0.523598776, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1168), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Pan Behavior Axis Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pan Behavior Axis Label"));
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1424), 1u, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((_QWORD *)this + 210) = 0;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), -3.14159265);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 3.14159265);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1016), -3.14159265);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1016), 3.14159265);
  v8 = 0x500000004;
  *(_OWORD *)&v7[0].var0 = xmmword_1B35629A0;
  OZChannelEnum::setTags((OZPanBehavior *)((char *)this + 1168), (char *)v7, 6);
}

void sub_1B2F83834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZCameraBehavior *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannelEnum *v14;
  OZChannelEnum *v15;

  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZPanBehavior::OZPanBehavior(OZPanBehavior *this, const OZPanBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65CFAE0;
  *(_QWORD *)(v5 + 16) = &unk_1E65CFE00;
  *(_QWORD *)(v5 + 48) = &unk_1E65D0058;
  *(_QWORD *)(v5 + 336) = &unk_1E65D00B0;
  *(_QWORD *)(v5 + 536) = &unk_1E65D00D8;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551728;
  *((_QWORD *)this + 110) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((_QWORD *)this + 127) = &off_1E6551728;
  *((_QWORD *)this + 129) = &unk_1E6551A88;
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1168), (const OZPanBehavior *)((char *)a2 + 1168), v6);
  OZChannelEnum::OZChannelEnum((OZPanBehavior *)((char *)this + 1424), (const OZPanBehavior *)((char *)a2 + 1424), v6);
  *((_QWORD *)this + 210) = 0;
}

void sub_1B2F839D0(_Unwind_Exception *a1)
{
  OZCameraBehavior *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannelEnum *v4;

  OZChannelEnum::~OZChannelEnum(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZPanBehavior::~OZPanBehavior(OZPanBehavior *this)
{
  *(_QWORD *)this = &off_1E65CFAE0;
  *((_QWORD *)this + 2) = &unk_1E65CFE00;
  *((_QWORD *)this + 6) = &unk_1E65D0058;
  *((_QWORD *)this + 42) = &unk_1E65D00B0;
  *((_QWORD *)this + 67) = &unk_1E65D00D8;
  OZChannelEnum::~OZChannelEnum((OZPanBehavior *)((char *)this + 1424));
  OZChannelEnum::~OZChannelEnum((OZPanBehavior *)((char *)this + 1168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZPanBehavior::~OZPanBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZPanBehavior::~OZPanBehavior(OZPanBehavior *this)
{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 16));
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 48));
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 336));
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 536));
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZPanBehavior::~OZPanBehavior((OZPanBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZPanBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
  return OZChannelBase::operator=(a1 + 1424, (uint64_t)v5 + 1424);
}

unint64_t OZPanBehavior::addCurveNodesToChannels(OZPanBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  void *v5;

  v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 0, 1);
  if (a2)
  else
    v5 = 0;
  *((_QWORD *)this + 210) = v5;
  return v4;
}

double OZPanBehavior::solveNode(OZPanBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  int v9;
  uint64_t v10;
  __n128 FrameDuration;
  CMTime *v12;
  double Seconds;
  double v14;
  const CMTime *v15;
  OZCameraBehavior *ValueAsInt;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  __int128 v25;
  CMTime time;
  CMTime v27;
  CMTime v28;
  CMTime v29[2];
  __n128 v30;
  CMTimeEpoch v31;
  CMTime v32;
  CMTime time2;
  CMTime time1;

  v9 = (*(uint64_t (**)(OZPanBehavior *, double))(*(_QWORD *)this + 768))(this, a4);
  if (a2 <= 2 && v9)
  {
    memset(&v32, 0, sizeof(v32));
    (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                         + 336))(&v32, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
    v30 = 0uLL;
    v31 = 0;
    v10 = (*(uint64_t (**)(OZPanBehavior *))(*(_QWORD *)this + 336))(this);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v30);
    (*(void (**)(CMTime *__return_ptr, OZPanBehavior *, __n128))(*(_QWORD *)this + 608))(v29, this, FrameDuration);
    v28 = v29[0];
    memset(&v27, 0, sizeof(v27));
    time1 = v29[1];
    *(__n128 *)&time2.value = v30;
    time2.epoch = v31;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
    time1 = v32;
    time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
    *(__n128 *)&time1.value = v30;
    time1.epoch = v31;
    time2 = v27;
    v12 = CMTimeCompare(&time1, &time2) >= 0 ? (CMTime *)&v30 : &v27;
    time1 = *v12;
    operator/(&v25, (uint64_t)&time1, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    if (Seconds >= 0.0)
    {
      if (Seconds <= 1.0)
        v14 = Seconds;
      else
        v14 = 1.0;
      v15 = (const CMTime *)MEMORY[0x1E0CA2E68];
      ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1168), MEMORY[0x1E0CA2E68], 0.0);
      v17 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v14);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v32, 0.0);
      v19 = v18;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), &v32, 0.0);
      v21 = v20;
      v22 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1424), v15, 0.0);
      v23 = v17 * (v19 - v21) - v19;
      if (v22 != a2)
        v23 = 0.0;
      return a5 - v23;
    }
  }
  return a5;
}

double `non-virtual thunk to'OZPanBehavior::solveNode(OZPanBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZPanBehavior::solveNode((OZPanBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZPointAtBehavior::OZPointAtBehavior(OZPointAtBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D0150;
  v5[2] = &unk_1E65D0470;
  v5[6] = &unk_1E65D06C8;
  v5[42] = &unk_1E65D0720;
  v5[67] = &unk_1E65D0748;
  PCURL::PCURL((PCURL *)v7, CFSTR("Point At Behavior Object"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZPointAtBehavior *)((char *)this + 864), v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Point At Behavior Transition"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), 0.5, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1176), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Point At Behavior Axis Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Point At Behavior Axis Label"));
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1432), 2u, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Point At Behavior Invert Axis"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1688), 1, v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(v7);
  *((_QWORD *)this + 230) = 0;
  OZValueCache<OZPointAtCacheItem>::OZValueCache((uint64_t)this + 1848);
  *((_BYTE *)this + 2016) = 0;
  *((_QWORD *)this + 251) = 0;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)&v7[0].var0 = xmmword_1B35629D0;
  v8 = 0x500000004;
  OZChannelEnum::setTags((OZPointAtBehavior *)((char *)this + 1176), (char *)v7, 6);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 864, 1);
  *((_QWORD *)this + 249) = 0;
  *((_QWORD *)this + 250) = 0;
  *((_QWORD *)this + 251) = 0;
}

void sub_1B2F8415C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZCameraBehavior *v11;
  OZChanTransformNodeRef *v12;
  OZChannelPercent *v13;
  OZChannelEnum *v14;
  OZChannelEnum *v15;
  OZChannelBool *v16;

  OZChannelBool::~OZChannelBool(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior::OZPointAtBehavior(OZPointAtBehavior *this, const OZPointAtBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D0150;
  *(_QWORD *)(v5 + 16) = &unk_1E65D0470;
  *(_QWORD *)(v5 + 48) = &unk_1E65D06C8;
  *(_QWORD *)(v5 + 336) = &unk_1E65D0720;
  *(_QWORD *)(v5 + 536) = &unk_1E65D0748;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 864), (const OZPointAtBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), (const OZChannelBase *)((char *)a2 + 1024), v6);
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1176), (const OZPointAtBehavior *)((char *)a2 + 1176), v6);
  OZChannelEnum::OZChannelEnum((OZPointAtBehavior *)((char *)this + 1432), (const OZPointAtBehavior *)((char *)a2 + 1432), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1688), (const OZChannelBase *)((char *)a2 + 1688), v6);
  *((_QWORD *)this + 230) = 0;
  OZValueCache<OZPointAtCacheItem>::OZValueCache((uint64_t)this + 1848);
  *((_QWORD *)this + 251) = 0;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *((_BYTE *)this + 2016) = *((_BYTE *)a2 + 2016);
  *((_QWORD *)this + 249) = 0;
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 250) = 0;
}

void sub_1B2F84350(_Unwind_Exception *a1)
{
  OZCameraBehavior *v1;
  OZChanTransformNodeRef *v2;
  OZChannelPercent *v3;
  OZChannelEnum *v4;
  OZChannelEnum *v5;
  OZChannelBool *v6;

  OZChannelBool::~OZChannelBool(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelPercent::~OZChannelPercent(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F843AC()
{
  JUMPOUT(0x1B2F8439CLL);
}

void OZPointAtBehavior::~OZPointAtBehavior(OZPointAtBehavior *this)
{
  *(_QWORD *)this = &off_1E65D0150;
  *((_QWORD *)this + 2) = &unk_1E65D0470;
  *((_QWORD *)this + 6) = &unk_1E65D06C8;
  *((_QWORD *)this + 42) = &unk_1E65D0720;
  *((_QWORD *)this + 67) = &unk_1E65D0748;
  OZValueCache<OZPointAtCacheItem>::~OZValueCache((uint64_t)this + 1848);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1688));
  OZChannelEnum::~OZChannelEnum((OZPointAtBehavior *)((char *)this + 1432));
  OZChannelEnum::~OZChannelEnum((OZPointAtBehavior *)((char *)this + 1176));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1024));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZPointAtBehavior *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZPointAtBehavior::~OZPointAtBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZPointAtBehavior::~OZPointAtBehavior(OZPointAtBehavior *this)
{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 16));
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 48));
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 336));
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 536));
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZPointAtBehavior::~OZPointAtBehavior((OZPointAtBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZPointAtBehavior::flushCache(OZPointAtBehavior *this)
{
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 1848);
  OZCameraBehavior::flushCache(this);
}

uint64_t OZPointAtBehavior::operator=(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 864, (uint64_t)(v4 + 864));
  OZChannelBase::operator=(a1 + 1024, (uint64_t)(v5 + 1024));
  OZChannelBase::operator=(a1 + 1176, (uint64_t)(v5 + 1176));
  OZChannelBase::operator=(a1 + 1432, (uint64_t)(v5 + 1432));
  result = OZChannelBase::operator=(a1 + 1688, (uint64_t)(v5 + 1688));
  *(_BYTE *)(a1 + 2016) = v5[2016];
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 1992) = 0;
  return result;
}

unint64_t OZPointAtBehavior::addCurveNodesToChannels(OZPointAtBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  void *v5;
  double v6;

  v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 0, 1);
  if (a2)
  else
    v5 = 0;
  if (v5 != *((void **)this + 230))
  {
    if (!*((_BYTE *)this + 2016))
    {
      OZChannel::setValue((OZChannel *)((char *)this + 1432), MEMORY[0x1E0CA2E68], 2.0, 0);
      v6 = 0.0;
      if (a2
      {
        v6 = 1.0;
      }
      OZChannel::setValue((OZChannel *)((char *)this + 1688), MEMORY[0x1E0CA2E68], v6, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 1688), v6);
    }
    *((_QWORD *)this + 230) = v5;
    *((_BYTE *)this + 2016) = 1;
  }
  return v4;
}

void OZPointAtBehavior::getEvalDepChansForRef(int a1, int a2, void *lpsrc, uint64_t *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;

  if (lpsrc)
  {
    if (v5)
    {
      v6 = v5;
      do
      {
        v7 = operator new(0x18uLL);
        v7[1] = a4;
        v7[2] = v6 + 136;
        v8 = *a4;
        *v7 = *a4;
        *(_QWORD *)(v8 + 8) = v7;
        *a4 = (uint64_t)v7;
        ++a4[2];
        v9 = (const void *)v6[120];
        if (!v9)
          break;
      }
      while (v6);
    }
  }
}

double OZPointAtBehavior::solveNode(OZPointAtBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  int v9;
  _QWORD *TransformNode;
  _QWORD *v11;
  const void *v12;
  void *v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  const void *v17;
  uint64_t v18;
  __n128 FrameDuration;
  __n128 *v20;
  double Seconds;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  OZCameraBehavior *ValueAsInt;
  double v29;
  double v30;
  double v31;
  double v32;
  OZCamera *v33;
  OZChannelBehavior *v34;
  const CMTime *v35;
  double FocalDistance;
  const void *v37;
  void *v38;
  double v39;
  int v40;
  double v41;
  double v42;
  int v43;
  uint64_t v44;
  double v45;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  __double2 v52;
  __int128 v53;
  double v54;
  __double2 v55;
  double v56;
  __double2 v57;
  double v58;
  __double2 v59;
  double v60;
  __double2 v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  double v88;
  double v90;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  __int128 v103;
  double v104;
  double v105[4];
  double v106;
  __int128 v107;
  double v108;
  float64x2_t v109;
  double v110;
  double v111[3];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[8];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[48];
  __int128 v130;
  __int128 v131;
  _BYTE v132[48];
  _BYTE v133[48];
  __int128 v134;
  __int128 v135;
  _BYTE v136[48];
  CMTime var0;
  float64x2_t v138;
  double v139;
  OZRenderState time2;
  OZRenderState time1;
  CMTime v142;
  _QWORD v143[3];
  void *__p[3];
  double v145[3];
  double v146;
  _QWORD v147[2];
  double v148;
  double v149;
  double v150;
  CMTime time;
  __int128 v152;
  int64_t v153;
  __int128 v154;
  int64_t v155;
  __int128 v156;
  int64_t v157;
  __int128 v158;
  int64_t v159;
  __n128 v160;
  int64_t v161;
  CMTime v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  _BYTE v170[48];
  __int128 v171;
  __int128 v172;
  _BYTE v173[48];

  v9 = (*(uint64_t (**)(OZPointAtBehavior *, double))(*(_QWORD *)this + 768))(this, a4);
  if (a2 <= 2)
  {
    if (v9)
    {
      TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
      if (TransformNode)
      {
        v11 = TransformNode;
        v12 = (const void *)*((_QWORD *)this + 230);
        if (v12)
        {
          if (!v13)
            goto LABEL_11;
          v14 = (const void *)v11[120];
          if (!v14)
            goto LABEL_11;
          if (!v15)
            goto LABEL_11;
          do
          {
            v16 = v15;
            v17 = (const void *)v15[120];
            if (!v17)
              break;
          }
          while (v15);
          if ((*(unsigned int (**)(_QWORD *))(*v16 + 1640))(v16))
          {
LABEL_11:
            memset(&v162, 0, sizeof(v162));
            (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                               + 32)
                                                                                 + 336))(&v162, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
            v160 = 0uLL;
            v161 = 0;
            v18 = (*(uint64_t (**)(OZPointAtBehavior *))(*(_QWORD *)this + 336))(this);
            FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), &v160);
            (*(void (**)(__int128 *__return_ptr, OZPointAtBehavior *, __n128))(*(_QWORD *)this + 608))(&v156, this, FrameDuration);
            v155 = v157;
            v154 = v156;
            v152 = 0uLL;
            v153 = 0;
            *(_OWORD *)&time1.var0.var0 = v158;
            time1.var0.var3 = v159;
            *(__n128 *)&time2.var0.var0 = v160;
            time2.var0.var3 = v161;
            PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v152);
            time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v162;
            *(_OWORD *)&time2.var0.var0 = v154;
            time2.var0.var3 = v155;
            PC_CMTimeSaferSubtract((CMTime *)&time1, (CMTime *)&time2, (uint64_t)v170);
            *(__n128 *)&time1.var0.var0 = v160;
            time1.var0.var3 = v161;
            *(_OWORD *)&time2.var0.var0 = v152;
            time2.var0.var3 = v153;
            v20 = CMTimeCompare((CMTime *)&time1, (CMTime *)&time2) >= 0 ? &v160 : (__n128 *)&v152;
            *(__n128 *)&time1.var0.var0 = *v20;
            time1.var0.var3 = v20[1].n128_i64[0];
            operator/((__int128 *)v170, (uint64_t)&time1, (uint64_t)&time);
            Seconds = CMTimeGetSeconds(&time);
            if (Seconds >= 0.0)
            {
              if (Seconds <= 1.0)
                v22 = Seconds;
              else
                v22 = 1.0;
              v23 = 0.0;
              if (Seconds > 1.0)
              {
                *(_OWORD *)&time1.var0.var0 = v154;
                time1.var0.var3 = v155;
                *(_OWORD *)&time2.var0.var0 = v152;
                time2.var0.var3 = v153;
                PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)v170);
                v23 = (*(double (**)(OZPointAtBehavior *, uint64_t, _BYTE *, double))(*(_QWORD *)this + 776))(this, a2, v170, a5);
              }
              v147[1] = 0xBFF0000000000000;
              v147[0] = &unk_1E65D07C0;
              v150 = 0.0;
              v148 = 0.0;
              v149 = 0.0;
              if (OZValueCache<OZPointAtCacheItem>::find((uint64_t)this + 1848, (uint64_t)v147, v22))
              {
                if ((_DWORD)a2 == 2)
                {
                  v24 = v150;
                }
                else if ((_DWORD)a2 == 1)
                {
                  v24 = v149;
                }
                else
                {
                  v24 = v148;
                }
                return v23 + v24;
              }
              else
              {
                v146 = 0.0;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1024), &v162, 0.0);
                if (v25 <= -0.0000001 || (v26 = 1.0, v25 >= 0.0000001))
                {
                  v27 = v22 / v25;
                  v26 = 1.0;
                  if (v27 <= 1.0)
                    v26 = v27;
                  if (v27 < 0.0)
                    v26 = 0.0;
                }
                v146 = v26;
                ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1176), MEMORY[0x1E0CA2E68], 0.0);
                v146 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v146);
                OZCameraBehavior::getPositionBeforeThis(this, *((OZTransformNode **)this + 230), a3, v145);
                std::vector<double>::vector(__p, 3uLL);
                (*(void (**)(OZPointAtBehavior *, const CMTime *, void **))(*(_QWORD *)this + 744))(this, a3, __p);
                v30 = *(double *)__p[0];
                v29 = *((double *)__p[0] + 1);
                v31 = *((double *)__p[0] + 2);
                v143[0] = *(_QWORD *)__p[0];
                *(double *)&v143[1] = v29;
                *(double *)&v143[2] = v31;
                memset(&v142, 0, sizeof(v142));
                if (v22 == 1.0)
                {
                  *(_OWORD *)&time1.var0.var0 = v154;
                  time1.var0.var3 = v155;
                  *(_OWORD *)&time2.var0.var0 = v152;
                  time2.var0.var3 = v153;
                  PC_CMTimeSaferAdd((CMTime *)&time1, (CMTime *)&time2, (uint64_t)&v142);
                }
                else
                {
                  v142 = v162;
                }
                OZRenderState::OZRenderState(&time1);
                time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v142;
                OZRenderState::OZRenderState(&time2);
                time2.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v162;
                time2.var8 = 0;
                v32 = (*(double (**)(_QWORD))(**((_QWORD **)this + 230) + 1328))(*((_QWORD *)this + 230));
                v138 = 0uLL;
                v139 = 0.0;
                if (v33)
                {
                  v34 = v33;
                  var0 = (CMTime)time1.var0;
                  OZCamera::cameraAtTime(v33, &var0, (PCSharedCount *)v133);
                  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v170, (const PCSharedCount *)v133);
                  PCSharedCount::~PCSharedCount((PCSharedCount *)&v133[8]);
                  if (!*(_QWORD *)v170)
                    throw_PCNullPointerException(1);
                  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v170 + 632))(*(_QWORD *)v170) == 1)
                  {
                    FocalDistance = OZCameraBehavior::getFocalDistance(this, v34, &v142, v35);
                    v138 = vaddq_f64(v138, (float64x2_t)0);
                    v139 = FocalDistance + v139;
                  }
                  PCSharedCount::~PCSharedCount((PCSharedCount *)&v170[8]);
                }
                *(_QWORD *)&v136[40] = 0x3FF0000000000000;
                *(_QWORD *)v136 = 0x3FF0000000000000;
                *(_QWORD *)&v133[40] = 0x3FF0000000000000;
                *(_QWORD *)v133 = 0x3FF0000000000000;
                memset(&v133[8], 0, 32);
                v134 = 0u;
                v135 = 0u;
                memset(&v136[8], 0, 32);
                (*(void (**)(_QWORD *, _BYTE *, OZRenderState *))(*v11 + 1256))(v11, v133, &time1);
                PCMatrix44Tmpl<double>::transform<double>((double *)v133, v138.f64, v138.f64);
                *(_QWORD *)&v132[40] = 0x3FF0000000000000;
                *(_QWORD *)v132 = 0x3FF0000000000000;
                *(_QWORD *)&v129[40] = 0x3FF0000000000000;
                *(_QWORD *)v129 = 0x3FF0000000000000;
                memset(&v129[8], 0, 32);
                v130 = 0u;
                v131 = 0u;
                memset(&v132[8], 0, 32);
                v37 = *(const void **)(*((_QWORD *)this + 230) + 960);
                if (v37
                {
                  (*(void (**)(void *, _BYTE *, OZRenderState *))(*(_QWORD *)v38 + 1256))(v38, v129, &time2);
                  v39 = v145[0];
                }
                else
                {
                  v39 = v32 * v145[0];
                  v145[0] = v32 * v145[0];
                }
                v125 = v131;
                v126 = *(_OWORD *)v132;
                v127 = *(_OWORD *)&v132[16];
                v128 = *(_OWORD *)&v132[32];
                v121 = *(_OWORD *)v129;
                v122 = *(_OWORD *)&v129[16];
                v123 = *(_OWORD *)&v129[32];
                v124 = v130;
                PCMatrix44Tmpl<double>::rightTranslate((double *)&v121, v39, v145[1], v145[2]);
                PCMatrix44Tmpl<double>::rightRotate((double *)&v121, 4, v30, v29, v31);
                v120[4] = v125;
                v120[5] = v126;
                v120[6] = v127;
                v120[7] = v128;
                v120[0] = v121;
                v120[1] = v122;
                v120[2] = v123;
                v120[3] = v124;
                PCMatrix44Tmpl<double>::invert((double *)v120, (double *)v120, 0.0);
                PCMatrix44Tmpl<double>::transform<double>((double *)v120, v138.f64, v138.f64);
                v116 = v125;
                v117 = v126;
                v118 = v127;
                v119 = v128;
                v112 = v121;
                v113 = v122;
                v114 = v123;
                v115 = v124;
                if (!v13)
                {
                  v172 = v135;
                  *(_OWORD *)v173 = *(_OWORD *)v136;
                  *(_OWORD *)&v173[16] = *(_OWORD *)&v136[16];
                  *(_OWORD *)&v173[32] = *(_OWORD *)&v136[32];
                  *(_OWORD *)v170 = *(_OWORD *)v133;
                  *(_OWORD *)&v170[16] = *(_OWORD *)&v133[16];
                  *(_OWORD *)&v170[32] = *(_OWORD *)&v133[32];
                  v171 = v134;
                  PCMatrix44Tmpl<double>::invert((double *)v170, (double *)v170, 0.0);
                  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v112, (double *)v170);
                }
                memset(v111, 0, sizeof(v111));
                v40 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1432), &v162, 0.0);
                v92 = v22;
                if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1688), &v162, 0.0))
                  v41 = -1.0;
                else
                  v41 = 1.0;
                v111[v40] = v41;
                v109 = v138;
                v110 = v139;
                v42 = sqrt(v138.f64[0] * v138.f64[0] + v138.f64[1] * v138.f64[1] + v110 * v110);
                if (v42 <= -0.000000100000001 || v42 >= 0.000000100000001)
                {
                  v109.f64[0] = v138.f64[0] / v42;
                  v109.f64[1] = v138.f64[1] / v42;
                  v110 = v139 / v42;
                }
                v106 = 1.0;
                v107 = 0uLL;
                v108 = 0.0;
                v105[0] = 1.0;
                memset(&v105[1], 0, 24);
                PCQuat<double>::setRotation(&v106, v111, v109.f64);
                v96 = v30;
                v97 = v29;
                v98 = v23;
                slerp<double>(v105, &v106, &v146, (uint64_t)v170);
                v43 = 0;
                if (v40 == 2)
                  v44 = 1;
                else
                  v44 = 2;
                *(_QWORD *)&v164 = 0;
                *((_QWORD *)&v163 + 1) = 0;
                *((_QWORD *)&v163 + v44) = 0x3FF0000000000000;
                v106 = *(double *)v170;
                v107 = *(_OWORD *)&v170[8];
                v108 = *(double *)&v170[24];
                *(_QWORD *)&v163 = 0;
                v99 = 0.0;
                v100 = 0.0;
                v101 = 0.0;
                *(&v99 + v40) = v41;
                v45 = sqrt(v99 * v99 + v100 * v100 + v101 * v101);
                if (v45 < 0.000000100000001 && v45 > -0.000000100000001)
                  v45 = 1.0;
                v47 = v99 / v45;
                v48 = v100 / v45;
                v49 = v101 / v45;
                v50 = -3.40282347e38;
                v51 = -3.40282347e38;
                do
                {
                  v103 = v163;
                  v104 = *(double *)&v164;
                  v52 = __sincos_stret((((double)v43 + (double)v43) / 2880.0 + -1.0) * 3.14159265 * 0.5);
                  *(double *)&v170[16] = v52.__cosval * *((double *)&v107 + 1)
                                       + v106 * (v52.__sinval * v48)
                                       + v108 * (v52.__sinval * v47)
                                       - *(double *)&v107 * (v52.__sinval * v49);
                  *(double *)&v170[24] = *(double *)&v107 * (v52.__sinval * v48)
                                       - *((double *)&v107 + 1) * (v52.__sinval * v47)
                                       + v52.__cosval * v108
                                       + v106 * (v52.__sinval * v49);
                  *(double *)&v170[8] = v52.__cosval * *(double *)&v107
                                      + v106 * (v52.__sinval * v47)
                                      + *((double *)&v107 + 1) * (v52.__sinval * v49)
                                      - v108 * (v52.__sinval * v48);
                  *(double *)v170 = v52.__cosval * v106
                                  - (v108 * (v52.__sinval * v49)
                                   + *(double *)&v107 * (v52.__sinval * v47)
                                   + *((double *)&v107 + 1) * (v52.__sinval * v48));
                  PCQuat<double>::transform<double>((double *)v170, (double *)&v103);
                  v53 = v103;
                  v54 = *(double *)&v103 * *(double *)&v114
                      + *((double *)&v103 + 1) * *((double *)&v114 + 1)
                      + v104 * *(double *)&v115;
                  *(double *)&v103 = *(double *)&v103 * *(double *)&v112
                                   + *((double *)&v103 + 1) * *((double *)&v112 + 1)
                                   + v104 * *(double *)&v113;
                  *((double *)&v103 + 1) = v54;
                  v104 = *(double *)&v53 * *(double *)&v116
                       + *((double *)&v53 + 1) * *((double *)&v116 + 1)
                       + v104 * *(double *)&v117;
                  if (*((double *)&v103 + v44) > v51)
                  {
                    v51 = *((double *)&v103 + v44);
                    v50 = (((double)v43 + (double)v43) / 2880.0 + -1.0) * 3.14159265;
                  }
                  ++v43;
                }
                while (v43 != 2880);
                v55 = __sincos_stret(v50 * 0.5);
                v93 = v55.__cosval * v106
                    - (v108 * (v55.__sinval * v49)
                     + *(double *)&v107 * (v55.__sinval * v47)
                     + *((double *)&v107 + 1) * (v55.__sinval * v48));
                v94 = v55.__cosval * *(double *)&v107
                    + v106 * (v55.__sinval * v47)
                    + *((double *)&v107 + 1) * (v55.__sinval * v49)
                    - v108 * (v55.__sinval * v48);
                v56 = *(double *)&v107 * (v55.__sinval * v48)
                    - *((double *)&v107 + 1) * (v55.__sinval * v47)
                    + v55.__cosval * v108
                    + v106 * (v55.__sinval * v49);
                *((double *)&v107 + 1) = v55.__cosval * *((double *)&v107 + 1)
                                       + v106 * (v55.__sinval * v48)
                                       + v108 * (v55.__sinval * v47)
                                       - *(double *)&v107 * (v55.__sinval * v49);
                v95 = *((double *)&v107 + 1);
                v108 = v56;
                v106 = v93;
                *(double *)&v107 = v94;
                v103 = 0uLL;
                v104 = 0.0;
                v57 = __sincos_stret(v96 * 0.5);
                v58 = v57.__sinval * 0.0;
                v59 = __sincos_stret(v97 * 0.5);
                v60 = v59.__sinval * 0.0;
                v61 = __sincos_stret(v31 * 0.5);
                v62 = v57.__cosval * v59.__cosval - (v58 * v60 + v58 * v59.__sinval + v57.__sinval * v60);
                v63 = v57.__sinval * v59.__cosval + v57.__cosval * v60 + v58 * v59.__sinval - v58 * v60;
                v64 = v58 * v59.__cosval + v57.__cosval * v59.__sinval + v57.__sinval * v60 - v58 * v60;
                v65 = v58 * v60 - v57.__sinval * v59.__sinval + v58 * v59.__cosval + v57.__cosval * v60;
                v66 = v61.__sinval * 0.0 * v63;
                v67 = v61.__sinval * 0.0 * v64;
                v68 = v61.__cosval * v62 - (v61.__sinval * v65 + v66 + v67);
                v69 = v61.__sinval * 0.0 * v62;
                v70 = v61.__cosval * v65 + v61.__sinval * v62;
                v71 = v61.__sinval * 0.0 * v65;
                v72 = v61.__sinval * v64 - v71 + v61.__cosval * v63 + v69;
                v73 = v71 - v61.__sinval * v63 + v61.__cosval * v64 + v69;
                v74 = v66 - v67 + v70;
                v75 = v68 * v93 - (v74 * v56 + v72 * v94 + v73 * v95);
                v76 = v68 * v94 + v72 * v93;
                v77 = v68 * v95 + v73 * v93;
                v78 = v68 * v56 + v74 * v93;
                v79 = v73 * v56 - v74 * v95;
                v80 = v74 * v94 - v72 * v56;
                v81 = v72 * v95 - v73 * v94;
                v82 = v79 + v76;
                v83 = v80 + v77;
                v84 = v81 + v78;
                v85 = sqrt(v75 * v75 + v84 * v84 + v82 * v82 + v83 * v83);
                if (v85 == 0.0)
                {
                  v100 = 0.0;
                  v101 = 0.0;
                  v102 = 0.0;
                  v86 = 1.0;
                }
                else
                {
                  v100 = v82 / v85;
                  v101 = v83 / v85;
                  v102 = v84 / v85;
                  v86 = v75 / v85;
                }
                v99 = v86;
                *(_QWORD *)&v173[40] = 0x3FF0000000000000;
                *(_QWORD *)v173 = 0x3FF0000000000000;
                *(_QWORD *)&v170[40] = 0x3FF0000000000000;
                *(_QWORD *)v170 = 0x3FF0000000000000;
                memset(&v170[8], 0, 32);
                v171 = 0u;
                v172 = 0u;
                memset(&v173[8], 0, 32);
                PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)v170, &v99);
                v165 = 0u;
                v164 = 0u;
                v163 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0;
                v166 = 4;
                PCMatrix44Tmpl<double>::getTransformation((__int128 *)v170, (uint64_t)&v163);
                v87 = 0;
                v103 = v167;
                v104 = *(double *)&v168;
                do
                {
                  *(double *)((char *)&v103 + v87 * 8) = *(double *)((char *)&v103 + v87 * 8)
                                                       + (double)(int)vcvtmd_s64_f64((*(double *)&v143[v87]- *(double *)((char *)&v103 + v87 * 8))/ 6.28318531+ 0.5+ 0.0000001)* 6.28318531;
                  ++v87;
                }
                while (v87 != 3);
                v88 = *((double *)&v103 + v40);
                if (v88 < 0.01 && v88 > -0.01)
                  v88 = 0.0;
                *((double *)&v103 + v40) = v88;
                if (v138.f64[0] * v138.f64[0] + v138.f64[1] * v138.f64[1] + v139 * v139 >= 0.001)
                {
                  *(double *)&v170[8] = v92;
                  *(_QWORD *)v170 = &unk_1E65D07C0;
                  *(_OWORD *)&v170[16] = v103;
                  *(double *)&v170[32] = v104;
                  OZValueCache<OZPointAtCacheItem>::add((uint64_t)this + 1848, (uint64_t)v170);
                  *((double *)this + 251) = v104;
                  *(_OWORD *)((char *)this + 1992) = v103;
                }
                else
                {
                  v104 = *((double *)this + 251);
                  v103 = *(_OWORD *)((char *)this + 1992);
                }
                if ((_DWORD)a2 == 1)
                {
                  v90 = *((double *)&v103 + 1);
                }
                else if ((_DWORD)a2)
                {
                  v90 = v104;
                }
                else
                {
                  v90 = *(double *)&v103;
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                return v98 + v90;
              }
            }
          }
        }
      }
    }
  }
  return a5;
}

void sub_1B2F8566C(_Unwind_Exception *a1)
{
  void *v2;

  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x788]);
  v2 = (void *)STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZPointAtCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  std::mutex *v6;
  uint64_t i;
  double v8;
  uint64_t v9;
  __int128 v10;

  v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == a1 + 8)
    {
      v9 = 0;
      goto LABEL_7;
    }
    v8 = *(double *)(i + 24);
    if (v8 == a3)
      break;
  }
  *(double *)(a2 + 8) = v8;
  v10 = *(_OWORD *)(i + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(i + 48);
  *(_OWORD *)(a2 + 16) = v10;
  v9 = 1;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

void OZValueCache<OZPointAtCacheItem>::add(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >= *(_QWORD *)(a1 + 32))
  {
    v6 = *(uint64_t **)(a1 + 16);
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *(_QWORD *)(a1 + 24) = v5 - 1;
    (*(void (**)(uint64_t *))v6[2])(v6 + 2);
    operator delete(v6);
  }
  std::list<OZPointAtCacheItem>::push_back((uint64_t *)(a1 + 8), a2);
  PCSharedMutex::unlock(v4);
}

void sub_1B2F85828(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZPointAtBehavior::solveNode(OZPointAtBehavior *this, uint64_t a2, const CMTime *a3, double a4, double a5)
{
  return OZPointAtBehavior::solveNode((OZPointAtBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZPointAtCacheItem::~OZPointAtCacheItem(OZPointAtCacheItem *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t OZValueCache<OZPointAtCacheItem>::OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65D07F8;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B3054250;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B2F858A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZPointAtCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZPointAtCacheItem>::~OZValueCache(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZValueCache<OZPointAtCacheItem>::~OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65D07F8;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

__n128 std::list<OZPointAtCacheItem>::push_back(uint64_t *a1, uint64_t a2)
{
  char *v4;
  __n128 result;
  uint64_t v6;

  v4 = (char *)operator new(0x38uLL);
  *((_QWORD *)v4 + 1) = a1;
  *((_QWORD *)v4 + 2) = &unk_1E65D07C0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 40) = result;
  v6 = *a1;
  *(_QWORD *)v4 = *a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void OZRandomizeBehavior::OZRandomizeBehavior(OZRandomizeBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZChannelBase *v6;

  OZWriggleBehavior::OZWriggleBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65D0828;
  *(_QWORD *)(v5 + 16) = &unk_1E65D0B68;
  *(_QWORD *)(v5 + 48) = &unk_1E65D0DC0;
  *(_QWORD *)(v5 + 336) = &unk_1E65D0E18;
  *(_QWORD *)(v5 + 536) = &unk_1E65D0E40;
  v6 = (OZChannelBase *)(v5 + 1704);
  OZChannelBase::setFlag((OZChannelBase *)(v5 + 1704), 2, 0);
  OZChannelBase::saveStateAsDefault(v6);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 992), 10.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 992), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1552), 10.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1552), 0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1552), 20.0);
}

void sub_1B2F85A3C(_Unwind_Exception *a1)
{
  OZWriggleBehavior *v1;

  OZWriggleBehavior::~OZWriggleBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior::OZRandomizeBehavior(OZRandomizeBehavior *this, const OZRandomizeBehavior *a2, char a3)
{
  _QWORD *v3;

  OZWriggleBehavior::OZWriggleBehavior(this, a2, a3);
  *v3 = &off_1E65D0828;
  v3[2] = &unk_1E65D0B68;
  v3[6] = &unk_1E65D0DC0;
  v3[42] = &unk_1E65D0E18;
  v3[67] = &unk_1E65D0E40;
}

void `non-virtual thunk to'OZRandomizeBehavior::~OZRandomizeBehavior(OZRandomizeBehavior *this)
{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 16));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 48));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 336));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 536));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZRandomizeBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZRandomizeBehavior::~OZRandomizeBehavior(OZRandomizeBehavior *this)
{
  OZWriggleBehavior::~OZWriggleBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZRampBehavior::OZRampBehavior(OZRampBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D0EB8;
  v5[2] = &unk_1E65D11F8;
  v5[6] = &unk_1E65D1450;
  v5[42] = &unk_1E65D14A8;
  v5[67] = &unk_1E65D14D0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Ramp Behavior Start Value"));
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 864), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Ramp Behavior End Value"));
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 1016), &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Ramp Behavior Curvature"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Ramp Behavior Start Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 1320), &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Ramp Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZRampBehavior *)((char *)this + 1472), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1472), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1168), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1320), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1320));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1472), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1472));
}

void sub_1B2F85DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSingleChannelBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannelPercent *v13;
  OZChannel *v14;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZRampBehavior::OZRampBehavior(OZRampBehavior *this, const OZRampBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D0EB8;
  *(_QWORD *)(v5 + 16) = &unk_1E65D11F8;
  *(_QWORD *)(v5 + 48) = &unk_1E65D1450;
  *(_QWORD *)(v5 + 336) = &unk_1E65D14A8;
  *(_QWORD *)(v5 + 536) = &unk_1E65D14D0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  *((_QWORD *)this + 127) = &off_1E6551358;
  *((_QWORD *)this + 129) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((_QWORD *)this + 165) = &off_1E6551358;
  *((_QWORD *)this + 167) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1472), (const OZChannelBase *)((char *)a2 + 1472), v6);
  *((_QWORD *)this + 184) = &off_1E6551358;
  *((_QWORD *)this + 186) = &unk_1E65516B8;
}

void sub_1B2F85FB0(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannelPercent *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannelPercent::~OZChannelPercent(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRampBehavior::~OZRampBehavior(OZRampBehavior *this)
{
  *(_QWORD *)this = &off_1E65D0EB8;
  *((_QWORD *)this + 2) = &unk_1E65D11F8;
  *((_QWORD *)this + 6) = &unk_1E65D1450;
  *((_QWORD *)this + 42) = &unk_1E65D14A8;
  *((_QWORD *)this + 67) = &unk_1E65D14D0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZRampBehavior::~OZRampBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRampBehavior::~OZRampBehavior(OZRampBehavior *this)
{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 16));
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 48));
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 336));
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 536));
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZRampBehavior::~OZRampBehavior((OZRampBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZRampBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
  OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);
  return OZChannelBase::operator=(a1 + 1472, (uint64_t)v5 + 1472);
}

double OZRampBehavior::solveNode(OZRampBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  OZScene *v7;
  const CMTime *v8;
  double v9;
  double v10;
  OZScene *v11;
  double v12;
  OZChannel *v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double Seconds;
  double v21;
  CMTime time;
  __n128 v23;
  CMTimeEpoch v24;
  CMTime v25;
  __n128 v26;
  CMTimeEpoch v27;
  CMTime v28;
  CMTime v29[2];
  CMTime v30;
  CMTime v31;
  __n128 v32;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;

  memset(&v31, 0, sizeof(v31));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v31, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v30 = v31;
  if ((*(unsigned int (**)(OZRampBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v30, 0, 1, 1)&& (*(uint64_t (**)(OZRampBehavior *))(*(_QWORD *)this + 336))(this))
  {
    (*(void (**)(CMTime *__return_ptr, OZRampBehavior *))(*(_QWORD *)this + 608))(v29, this);
    memset(&v28, 0, sizeof(v28));
    v32 = *(__n128 *)&v29[0].value;
    epoch = v29[0].epoch;
    v7 = (OZScene *)(*(uint64_t (**)(OZRampBehavior *))(*(_QWORD *)this + 336))(this);
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), MEMORY[0x1E0CA2E68], 0.0);
    OZScene::getTimeForFrame(v7, v9, &v26);
    *(__n128 *)&time1.value = v32;
    time1.epoch = epoch;
    *(__n128 *)&time2.value = v26;
    time2.epoch = v27;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v28);
    v26 = 0uLL;
    v27 = 0;
    OZBehavior::getFrameDuration(this, &v23);
    time1 = v29[0];
    time2 = v29[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v32);
    *(__n128 *)&time1.value = v32;
    time1.epoch = epoch;
    *(__n128 *)&time2.value = v23;
    time2.epoch = v24;
    v10 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
    v11 = (OZScene *)(*(uint64_t (**)(OZRampBehavior *, double))(*(_QWORD *)this + 336))(this, v10);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1472), v8, 0.0);
    OZScene::getTimeForFrame(v11, v12, &v32);
    time1 = v25;
    *(__n128 *)&time2.value = v32;
    time2.epoch = epoch;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v26);
    time1 = v31;
    time2 = v28;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v13 = (OZChannel *)((char *)this + 864);
      goto LABEL_7;
    }
    time1 = v31;
    *(__n128 *)&time2.value = v26;
    time2.epoch = v27;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      v13 = (OZChannel *)((char *)this + 1016);
LABEL_7:
      OZChannel::getValueAsDouble(v13, MEMORY[0x1E0CA2E68], 0.0);
      return v14 + a5;
    }
    v32 = 0uLL;
    epoch = 0;
    *(__n128 *)&time1.value = v26;
    time1.epoch = v27;
    time2 = v28;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v32);
    *(__n128 *)&time1.value = v32;
    time1.epoch = epoch;
    time2 = *v8;
    if (CMTimeCompare(&time1, &time2))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), v8, 0.0);
      v17 = v16;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), v8, 0.0);
      v19 = v18 - v17;
      time1 = v31;
      time2 = v28;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
      operator/((__int128 *)&v25.value, (uint64_t)&v32, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), v8, 0.0);
      return v17 + v19 * (Seconds * (1.0 - v21) + v21 * ((1.0 - cos(Seconds * 3.14159265)) * 0.5)) + a5;
    }
    else
    {
      return 0.0;
    }
  }
  return a5;
}

double `non-virtual thunk to'OZRampBehavior::solveNode(OZRampBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZRampBehavior::solveNode((OZRampBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZRampBehavior::didSetChannelInfo(OZRampBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel *v6;
  OZChannel *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  const CMTime *v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double v19;

  v6 = (OZChannel *)((char *)this + 864);
  OZChannel::setInfo((OZChannel *)((char *)this + 864), a2);
  v7 = (OZChannel *)((char *)this + 1016);
  OZChannel::setInfo((OZChannel *)((char *)this + 1016), a2);
  v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((_QWORD *)this + 124) + 40) + -57.2957795) >= 0.0000001)
      v10 = 100.0;
    else
      v10 = 6.28318531;
  }
  else
  {
    v10 = v9 - v8;
    v11 = *((double *)this + 79);
    if (v11 != 3.40282347e38)
    {
      v12 = v10 / v11;
      v13 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble(v6, MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::setValue(v6, v13, v12 * v14, 0);
      OZChannel::getValueAsDouble(v7, v13, 0.0);
      OZChannel::setValue(v7, v13, v12 * v15, 0);
    }
  }
  v19 = 0.0;
  (*(void (**)(_QWORD, double *))(**((_QWORD **)a3->var14 + 1) + 264))(*((_QWORD *)a3->var14 + 1), &v19);
  v16 = v19;
  v19 = 0.0;
  (*(void (**)(_QWORD, double *))(**((_QWORD **)a3->var14 + 1) + 256))(*((_QWORD *)a3->var14 + 1), &v19);
  if (v19 == 3.40282347e38 || v16 == -3.40282347e38)
    v18 = 3.40282347e38;
  else
    v18 = v19 - v16;
  OZChannel::setSliderMin(v6, 0.0);
  OZChannel::setSliderMax(v6, v10);
  OZChannel::setMin(v6, -v18);
  OZChannel::setMax(v6, v18);
  OZChannel::setSliderMin(v7, 0.0);
  OZChannel::setSliderMax(v7, v10);
  OZChannel::setMin(v7, -v18);
  OZChannel::setMax(v7, v18);
}

void OZRateBehavior::OZRateBehavior(OZRateBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D1548;
  v5[2] = &unk_1E65D1888;
  v5[6] = &unk_1E65D1AE0;
  v5[42] = &unk_1E65D1B38;
  v5[67] = &unk_1E65D1B60;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Rate Behavior Rate"));
  OZChannelDouble::OZChannelDouble((OZRateBehavior *)((char *)this + 864), &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Rate Behavior Curvature"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1016), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Rate Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZRateBehavior *)((char *)this + 1168), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1016), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1168), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1168), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1168));
}

void sub_1B2F86958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSingleChannelBehavior *v10;
  OZChannel *v11;
  OZChannelPercent *v12;

  PCString::~PCString(&a10);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannel::~OZChannel(v11);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZRateBehavior::OZRateBehavior(OZRateBehavior *this, const OZRateBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D1548;
  *(_QWORD *)(v5 + 16) = &unk_1E65D1888;
  *(_QWORD *)(v5 + 48) = &unk_1E65D1AE0;
  *(_QWORD *)(v5 + 336) = &unk_1E65D1B38;
  *(_QWORD *)(v5 + 536) = &unk_1E65D1B60;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  *((_QWORD *)this + 146) = &off_1E6551358;
  *((_QWORD *)this + 148) = &unk_1E65516B8;
}

void sub_1B2F86A98(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior *v1;
  OZChannel *v2;
  OZChannelPercent *v3;

  OZChannelPercent::~OZChannelPercent(v3);
  OZChannel::~OZChannel(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRateBehavior::~OZRateBehavior(OZRateBehavior *this)
{
  *(_QWORD *)this = &off_1E65D1548;
  *((_QWORD *)this + 2) = &unk_1E65D1888;
  *((_QWORD *)this + 6) = &unk_1E65D1AE0;
  *((_QWORD *)this + 42) = &unk_1E65D1B38;
  *((_QWORD *)this + 67) = &unk_1E65D1B60;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1168));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZRateBehavior::~OZRateBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRateBehavior::~OZRateBehavior(OZRateBehavior *this)
{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 16));
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 48));
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 336));
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 536));
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZRateBehavior::~OZRateBehavior((OZRateBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZRateBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  return OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
}

Float64 OZRateBehavior::solveNode(OZRateBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  __n128 FrameDuration;
  Float64 v8;
  double Seconds;
  double v10;
  double v11;
  Float64 v12;
  CMTime v14;
  CMTime time;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20[2];
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time2;
  CMTime time1;

  memset(&v23, 0, sizeof(v23));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v23, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v22 = v23;
  if ((*(unsigned int (**)(OZRateBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v22, 0, 1, 1))
  {
    memset(&v21, 0, sizeof(v21));
    FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v21);
    (*(void (**)(CMTime *__return_ptr, OZRateBehavior *, __n128))(*(_QWORD *)this + 608))(v20, this, FrameDuration);
    memset(&v19, 0, sizeof(v19));
    time2 = v20[0];
    time1 = v23;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    memset(&v18, 0, sizeof(v18));
    v17 = v20[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v21, &v16, v8);
    time1 = v17;
    time2 = v16;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    time1 = v18;
    time2 = v21;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      time1 = v19;
      time2 = v18;
      if (CMTimeCompare(&time1, &time2) >= 1)
        v19 = v18;
      OZBehavior::getFrameDuration(this, (__n128 *)&v16);
      time1 = v18;
      time2 = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
      operator/((__int128 *)&v19.value, (uint64_t)&v17, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1016), MEMORY[0x1E0CA2E68], 0.0);
      v11 = v10 * ((1.0 - cos(Seconds * 3.14159265)) * 0.5) + Seconds * (1.0 - v10);
      if ((~v18.flags & 0x11) == 0)
      {
        CMTimeMake(&time1, 10, 1);
        v18 = time1;
      }
      memset(&time1, 0, sizeof(time1));
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), MEMORY[0x1E0CA2E68], 0.0);
      operator*(&v18, &time1, v12);
      operator*(&time1, &v14, v11);
      return CMTimeGetSeconds(&v14) + a5;
    }
  }
  return a5;
}

Float64 `non-virtual thunk to'OZRateBehavior::solveNode(OZRateBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZRateBehavior::solveNode((OZRateBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZRateBehavior::didSetChannelInfo(OZRateBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel::setInfo((OZChannel *)((char *)this + 864), a2);
}

void OZRepelFromBehavior::OZRepelFromBehavior(OZRepelFromBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZChannel *v6;
  uint64_t v7;
  double v8;
  double v9;

  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65D1BD8;
  *(_QWORD *)(v5 + 16) = &unk_1E65D1EC0;
  *(_QWORD *)(v5 + 48) = &unk_1E65D2118;
  *(_QWORD *)(v5 + 336) = &unk_1E65D2170;
  v6 = (OZChannel *)(v5 + 664);
  OZChannel::setScale((OZChannel *)(v5 + 664), -*(double *)(*(_QWORD *)(v5 + 792) + 40));
  v7 = *((_QWORD *)this + 99);
  v8 = *(double *)(v7 + 16);
  OZChannel::setSliderMin(v6, -*(double *)(v7 + 8));
  OZChannel::setSliderMax(v6, -v8);
  OZChannel::getValueAsDouble(v6, MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setDefaultValue(v6, -v9);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1224), 100.0);
}

void sub_1B2F87050(_Unwind_Exception *a1)
{
  OZAttractedToBehavior *v1;

  OZAttractedToBehavior::~OZAttractedToBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior::OZRepelFromBehavior(OZRepelFromBehavior *this, OZRepelFromBehavior *a2, char a3)
{
  _QWORD *v3;

  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3);
  *v3 = &off_1E65D1BD8;
  v3[2] = &unk_1E65D1EC0;
  v3[6] = &unk_1E65D2118;
  v3[42] = &unk_1E65D2170;
}

void `non-virtual thunk to'OZRepelFromBehavior::~OZRepelFromBehavior(OZRepelFromBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 16));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 48));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 336));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZRepelFromBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZRepelFromBehavior::~OZRepelFromBehavior(OZRepelFromBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZRepelorBehavior::OZRepelorBehavior(OZRepelorBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZChannel *v6;
  uint64_t v7;
  double v8;
  double v9;

  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65D2198;
  *(_QWORD *)(v5 + 16) = &unk_1E65D2488;
  *(_QWORD *)(v5 + 48) = &unk_1E65D26E0;
  *(_QWORD *)(v5 + 336) = &unk_1E65D2738;
  v6 = (OZChannel *)(v5 + 792);
  OZChannel::setScale((OZChannel *)(v5 + 792), -*(double *)(*(_QWORD *)(v5 + 920) + 40));
  v7 = *((_QWORD *)this + 115);
  v8 = *(double *)(v7 + 16);
  OZChannel::setSliderMin(v6, -*(double *)(v7 + 8));
  OZChannel::setSliderMax(v6, -v8);
  OZChannel::getValueAsDouble(v6, MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::setDefaultValue(v6, -v9);
  OZChannelBase::reset((OZChannelBase *)v6, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), 100.0);
}

void sub_1B2F87224(_Unwind_Exception *a1)
{
  OZAttractorBehavior *v1;

  OZAttractorBehavior::~OZAttractorBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior::OZRepelorBehavior(OZRepelorBehavior *this, OZRepelorBehavior *a2, char a3)
{
  _QWORD *v3;

  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3);
  *v3 = &off_1E65D2198;
  v3[2] = &unk_1E65D2488;
  v3[6] = &unk_1E65D26E0;
  v3[42] = &unk_1E65D2738;
}

void `non-virtual thunk to'OZRepelorBehavior::~OZRepelorBehavior(OZRepelorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 16));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 48));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 336));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZRepelorBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZRepelorBehavior::~OZRepelorBehavior(OZRepelorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZReverseBehavior::OZReverseBehavior(OZReverseBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v4 = &off_1E65D2790;
  v4[2] = &unk_1E65D2AD0;
  v4[6] = &unk_1E65D2D28;
  v4[42] = &unk_1E65D2D80;
  v4[67] = &unk_1E65D2DA8;
}

void OZReverseBehavior::OZReverseBehavior(OZReverseBehavior *this, const OZReverseBehavior *a2, char a3)
{
  _QWORD *v3;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *v3 = &off_1E65D2790;
  v3[2] = &unk_1E65D2AD0;
  v3[6] = &unk_1E65D2D28;
  v3[42] = &unk_1E65D2D80;
  v3[67] = &unk_1E65D2DA8;
}

void `non-virtual thunk to'OZReverseBehavior::~OZReverseBehavior(OZReverseBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 16));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 536));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZReverseBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZReverseBehavior::~OZReverseBehavior(OZReverseBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double OZReverseBehavior::solveNode(OZReverseBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double `non-virtual thunk to'OZReverseBehavior::solveNode(OZReverseBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

uint64_t OZReverseBehavior::getNeededTime@<X0>(OZReverseBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  CMTimeEpoch epoch;
  CMTime v8;
  CMTime v9;
  __n128 v10;
  CMTimeEpoch v11;
  CMTime v12;
  CMTime v13[2];
  _QWORD v14[3];
  CMTime time2;
  CMTime time1;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(v14);
  result = (*(uint64_t (**)(OZReverseBehavior *, _QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, v14, 0, 1, 1);
  if ((result & 1) != 0)
  {
    (*(void (**)(CMTime *__return_ptr, OZReverseBehavior *))(*(_QWORD *)this + 608))(v13, this);
    memset(&v12, 0, sizeof(v12));
    (*(void (**)(__n128 *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                         + 336))(&v10, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a2);
    time2 = v13[0];
    *(__n128 *)&time1.value = v10;
    time1.epoch = v11;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
    v10 = 0uLL;
    v11 = 0;
    OZBehavior::getFrameDuration(this, &v10);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    time1 = v13[1];
    *(__n128 *)&time2.value = v10;
    time2.epoch = v11;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
    time1 = v8;
    time2 = v12;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
    time2 = v13[0];
    time1 = v9;
    PC_CMTimeSaferAdd(&time1, &time2, a3);
    time2 = v13[0];
    time1 = *(CMTime *)a3;
    if (CMTimeCompare(&time1, &time2) < 0)
      *(CMTime *)a3 = v13[0];
    result = (uint64_t)(*(_QWORD *(**)(CMTime *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                                       + 328))(&time1, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
    *(_OWORD *)a3 = *(_OWORD *)&time1.value;
    epoch = time1.epoch;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
  }
  *(_QWORD *)(a3 + 16) = epoch;
  return result;
}

uint64_t `non-virtual thunk to'OZReverseBehavior::getNeededTime@<X0>(OZReverseBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  return OZReverseBehavior::getNeededTime((OZReverseBehavior *)((char *)this - 536), a2, a3);
}

void OZRotationalDragBehavior::OZRotationalDragBehavior(OZRotationalDragBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D2E20;
  v5[2] = &unk_1E65D3108;
  v5[6] = &unk_1E65D3360;
  v5[42] = &unk_1E65D33B8;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Rotational Drag Behavior Drag Coefficient"));
  OZChannelDouble::OZChannelDouble((OZRotationalDragBehavior *)((char *)this + 504), 0.5, &v6, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setMin((OZChannel *)((char *)this + 504), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 504), 2.0);
}

void sub_1B2F87788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;

  PCString::~PCString(&a10);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior::OZRotationalDragBehavior(OZRotationalDragBehavior *this, OZRotationalDragBehavior *a2, char a3)
{
  uint64_t v5;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D2E20;
  *(_QWORD *)(v5 + 16) = &unk_1E65D3108;
  *(_QWORD *)(v5 + 48) = &unk_1E65D3360;
  *(_QWORD *)(v5 + 336) = &unk_1E65D33B8;
  OZChannel::OZChannel((OZChannel *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 63) = &off_1E6551358;
  *((_QWORD *)this + 65) = &unk_1E65516B8;
}

void sub_1B2F87834(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;

  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior::~OZRotationalDragBehavior(OZRotationalDragBehavior *this)
{
  *(_QWORD *)this = &off_1E65D2E20;
  *((_QWORD *)this + 2) = &unk_1E65D3108;
  *((_QWORD *)this + 6) = &unk_1E65D3360;
  *((_QWORD *)this + 42) = &unk_1E65D33B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  *(_QWORD *)this = &off_1E65D2E20;
  *((_QWORD *)this + 2) = &unk_1E65D3108;
  *((_QWORD *)this + 6) = &unk_1E65D3360;
  *((_QWORD *)this + 42) = &unk_1E65D33B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRotationalDragBehavior::~OZRotationalDragBehavior(OZRotationalDragBehavior *this)
{
  *(_QWORD *)this = &unk_1E65D3108;
  *((_QWORD *)this + 4) = &unk_1E65D3360;
  *((_QWORD *)this + 40) = &unk_1E65D33B8;
  *((_QWORD *)this - 2) = &off_1E65D2E20;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 488));
  OZReflexiveBehavior::~OZReflexiveBehavior((OZRotationalDragBehavior *)((char *)this - 16));
}

{
  OZReflexiveBehavior *v1;

  v1 = (OZRotationalDragBehavior *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E65D2E20;
  *((_QWORD *)this - 40) = &unk_1E65D3108;
  *((_QWORD *)this - 36) = &unk_1E65D3360;
  *(_QWORD *)this = &unk_1E65D33B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 168));
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
}

{
  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 16));
}

{
  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 48));
}

{
  OZRotationalDragBehavior::~OZRotationalDragBehavior((OZRotationalDragBehavior *)((char *)this - 336));
}

void `non-virtual thunk to'OZRotationalDragBehavior::~OZRotationalDragBehavior(OZChannel *this)
{
  this[-1].var15 = (OZChannelImpl *)&unk_1E65D3108;
  this->var0 = (void **)&unk_1E65D3360;
  this[1].var17 = (OZChannelInfo *)&unk_1E65D33B8;
  this[-1].var13 = (OZChannelTimeConverter *)&off_1E65D2E20;
  OZChannel::~OZChannel(this + 3);
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)&this[-1].var13);
}

uint64_t OZRotationalDragBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
}

double OZRotationalDragBehavior::accumForces(OZRotationalDragBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v4;
  double v5;
  double result;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), (const CMTime *)((char *)a2 + 176), 0.0);
  v5 = v4 * *((double *)a2 + 12);
  *(float64x2_t *)((char *)a2 + 152) = vsubq_f64(*(float64x2_t *)((char *)a2 + 152), vmulq_n_f64(*((float64x2_t *)a2 + 5), v4));
  result = *((double *)a2 + 21) - v5;
  *((double *)a2 + 21) = result;
  return result;
}

double OZRotationalDragBehavior::accumForces(OZRotationalDragBehavior *this, const CMTime *a2, OZTransformNode *a3)
{
  double result;
  CMTimeValue value;
  uint64_t v6;
  double v7;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), a2 + 1, 0.0);
  value = a2->value;
  v6 = *(_QWORD *)&a2->timescale;
  while (value != v6)
  {
    v7 = result * *(double *)(value + 96);
    *(float64x2_t *)(value + 152) = vsubq_f64(*(float64x2_t *)(value + 152), vmulq_n_f64(*(float64x2_t *)(value + 80), result));
    *(double *)(value + 168) = *(double *)(value + 168) - v7;
    value += 248;
  }
  return result;
}

void OZSnapAlignBehavior::OZSnapAlignBehavior(OZSnapAlignBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D33F8;
  v5[2] = &unk_1E65D36C0;
  v5[6] = &unk_1E65D3918;
  v5[42] = &unk_1E65D3970;
  v5[67] = &unk_1E65D3998;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Snap Align Behavior Rotation Axis Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Snap Align Behavior Rotation Axis"));
  OZChannelEnum::OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 544), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Snap Align Behavior Object Axis Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Snap Align Behavior Object Axis"));
  OZChannelEnum::OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 800), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Snap Align Behavior Invert Axis"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1056), &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Oscillate Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZSnapAlignBehavior *)((char *)this + 1208), &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 544), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 800), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1208), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1208), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1208));
}

void sub_1B2F87D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelBehavior *v12;
  OZChannelEnum *v13;
  OZChannelEnum *v14;
  OZChannelBool *v15;

  PCString::~PCString(&a12);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelBehavior::~OZChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior::OZSnapAlignBehavior(OZSnapAlignBehavior *this, const OZSnapAlignBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D33F8;
  *(_QWORD *)(v5 + 16) = &unk_1E65D36C0;
  *(_QWORD *)(v5 + 48) = &unk_1E65D3918;
  *(_QWORD *)(v5 + 336) = &unk_1E65D3970;
  *(_QWORD *)(v5 + 536) = &unk_1E65D3998;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 544), (const OZSnapAlignBehavior *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 800), (const OZSnapAlignBehavior *)((char *)a2 + 800), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1056), (const OZChannelBase *)((char *)a2 + 1056), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1208), (const OZChannelBase *)((char *)a2 + 1208), v6);
  *((_QWORD *)this + 151) = &off_1E6551358;
  *((_QWORD *)this + 153) = &unk_1E65516B8;
}

void sub_1B2F87EB8(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  OZChannelEnum *v2;
  OZChannelEnum *v3;
  OZChannelBool *v4;

  OZChannelBool::~OZChannelBool(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior::~OZSnapAlignBehavior(OZSnapAlignBehavior *this)
{
  *(_QWORD *)this = &off_1E65D33F8;
  *((_QWORD *)this + 2) = &unk_1E65D36C0;
  *((_QWORD *)this + 6) = &unk_1E65D3918;
  *((_QWORD *)this + 42) = &unk_1E65D3970;
  *((_QWORD *)this + 67) = &unk_1E65D3998;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1208));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1056));
  OZChannelEnum::~OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 800));
  OZChannelEnum::~OZChannelEnum((OZSnapAlignBehavior *)((char *)this + 544));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZSnapAlignBehavior::~OZSnapAlignBehavior(OZSnapAlignBehavior *this)
{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 16));
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 48));
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 336));
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 536));
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZSnapAlignBehavior::~OZSnapAlignBehavior((OZSnapAlignBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSnapAlignBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 544, (uint64_t)v4 + 544);
  OZChannelBase::operator=(a1 + 800, (uint64_t)v5 + 800);
  OZChannelBase::operator=(a1 + 1056, (uint64_t)v5 + 1056);
  return OZChannelBase::operator=(a1 + 1208, (uint64_t)v5 + 1208);
}

_QWORD *OZSnapAlignBehavior::didAddToNode(_QWORD *this, OZSceneNode *lpsrc)
{
  _QWORD *v2;
  OZChannel *v4;
  OZSingleChanCurveNode *v5;
  OZChannel *v6;
  OZSingleChanCurveNode *v7;
  OZChannel *v8;
  OZSingleChanCurveNode *v9;

  v2 = this;
  if (lpsrc)
  {
    v2[170] = this;
    if (this)
    {
      OZChannelBehavior::didAddToNode((OZChannelBehavior *)v2, lpsrc);
      OZChannelBehavior::setAffectedChannel((OZChannelBehavior *)v2, (OZChannelBase *)(v2[170] + 2104));
      v4 = (OZChannel *)(v2[170] + 2240);
      v5 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v5, (OZSingleChanBehaviorIF *)(v2 + 67), v4);
      OZChannel::appendCurveProcessingNode(v4, v5);
      OZChannelBehavior::didAddCurveNode((uint64_t)v2, (uint64_t)v5);
      v6 = (OZChannel *)(v2[170] + 2392);
      v7 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v7, (OZSingleChanBehaviorIF *)(v2 + 67), v6);
      OZChannel::appendCurveProcessingNode(v6, v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)v2, (uint64_t)v7);
      v8 = (OZChannel *)(v2[170] + 2544);
      v9 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v9, (OZSingleChanBehaviorIF *)(v2 + 67), v8);
      OZChannel::appendCurveProcessingNode(v8, v9);
      return OZChannelBehavior::didAddCurveNode((uint64_t)v2, (uint64_t)v9);
    }
  }
  else
  {
    this[170] = 0;
  }
  return this;
}

void sub_1B2F88224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

double OZSnapAlignBehavior::solveHelper(OZSnapAlignBehavior *this, int a2, CMTime *a3, double a4)
{
  const void *v8;
  void *v9;
  void *v10;
  CMTimeEpoch epoch;
  double v12;
  int ValueAsInt;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  double v27;
  char v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float v35;
  double v36;
  float v37;
  double v38;
  float v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _BOOL4 v45;
  _BOOL4 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  int v54;
  double v55;
  double v56;
  double v57;
  int v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  _BOOL8 Transformation;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  BOOL v75;
  double v77;
  int64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  CMTime v86;
  OZRenderState v87;
  CMTime v88;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v89;
  CMTime v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  CMTime v100;

  v97 = 0.0;
  v98 = 0.0;
  v99 = 0.0;
  v94 = 0.0;
  v95 = 0.0;
  v96 = 0.0;
  v91 = 0.0;
  v92 = 0.0;
  v93 = 0.0;
  v90 = *a3;
  OZTransformNode::getTranslation(*((_QWORD *)this + 170), &v97, &v90);
  OZBehavior::getFrameDuration(this, (__n128 *)&v88);
  operator*(&v88, (CMTime *)&v89, 0.5);
  v87.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)*a3;
  v79 = *(_OWORD *)&v89.var0;
  *(_QWORD *)&v80 = v89.var3;
  PC_CMTimeSaferAdd((CMTime *)&v87, (CMTime *)&v79, (uint64_t)&v100);
  v90 = v100;
  OZTransformNode::getTranslation(*((_QWORD *)this + 170), &v94, &v90);
  OZBehavior::getFrameDuration(this, (__n128 *)&v89);
  v87.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)*a3;
  v79 = *(_OWORD *)&v89.var0;
  *(_QWORD *)&v80 = v89.var3;
  PC_CMTimeSaferAdd((CMTime *)&v87, (CMTime *)&v79, (uint64_t)&v100);
  v90 = v100;
  OZTransformNode::getTranslation(*((_QWORD *)this + 170), &v91, &v90);
  v8 = *(const void **)(*((_QWORD *)this + 170) + 960);
  if (v8)
  {
    if (v9)
    {
      v10 = v9;
      OZRenderState::OZRenderState(&v87);
      *(_OWORD *)&v87.var0.var0 = *(_OWORD *)&a3->value;
      epoch = a3->epoch;
      v87.var3 = 1.0;
      v87.var0.var3 = epoch;
      (*(void (**)(void *, double *, OZRenderState *))(*(_QWORD *)v10 + 1232))(v10, &v97, &v87);
      OZBehavior::getFrameDuration(this, (__n128 *)&v86);
      operator*(&v86, &v88, 0.5);
      v79 = *(_OWORD *)&a3->value;
      *(_QWORD *)&v80 = a3->epoch;
      v100 = v88;
      PC_CMTimeSaferAdd((CMTime *)&v79, &v100, (uint64_t)&v89);
      v87.var0 = v89;
      (*(void (**)(void *, double *, OZRenderState *))(*(_QWORD *)v10 + 1232))(v10, &v94, &v87);
      OZBehavior::getFrameDuration(this, (__n128 *)&v88);
      v79 = *(_OWORD *)&a3->value;
      *(_QWORD *)&v80 = a3->epoch;
      v100 = v88;
      PC_CMTimeSaferAdd((CMTime *)&v79, &v100, (uint64_t)&v89);
      v87.var0 = v89;
      (*(void (**)(void *, double *, OZRenderState *))(*(_QWORD *)v10 + 1232))(v10, &v91, &v87);
    }
  }
  v12 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 544), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt != 3)
  {
    v24 = ValueAsInt;
    v25 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 800), a3, 0.0);
    if (a2 != 3 && v24 == 2)
      return v12;
    if (v24)
    {
      if (v24 != 2)
      {
        if (v24 != 1)
        {
          v28 = 0;
          v26 = 0.0;
          v27 = 0.0;
          goto LABEL_58;
        }
        if (a2 == 1)
          return -1.57079633;
        if (a2 != 2)
        {
          v26 = v91 - v97;
          v27 = -(v93 - v99);
          v28 = 1;
LABEL_58:
          if (fabs(v26) < 0.01)
          {
            v12 = a4;
            if (fabs(v27) < 0.01)
              return v12;
          }
          v72 = atan2(v27, v26);
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1056), a3, 0.0))
          {
            v73 = 3.14159265;
            if (v72 <= 3.14159265)
              v73 = -3.14159265;
            v72 = v72 + v73;
          }
          if (v24)
          {
            if ((v28 & 1) != 0)
            {
              if (!v25)
                goto LABEL_73;
LABEL_70:
              v74 = -3.14159265;
LABEL_74:
              v72 = v72 + v74;
            }
          }
          else if (v25)
          {
            v72 = v72 + 4.71238898;
            if ((v28 & 1) != 0)
              goto LABEL_70;
          }
          else
          {
            v72 = v72 + 0.0;
            if ((v28 & 1) != 0)
            {
LABEL_73:
              v74 = -1.57079633;
              goto LABEL_74;
            }
          }
          if (v25)
            v75 = v24 == 2;
          else
            v75 = 0;
          if (v75)
            return v72 + -1.57079633;
          else
            return v72;
        }
        return 1.57079633;
      }
      v28 = 0;
      v29 = v92;
      v30 = v98;
      v26 = v91 - v97;
    }
    else
    {
      if (a2 == 1)
        return v12;
      if (a2 == 2)
        return 1.57079633;
      v28 = 0;
      v29 = v92;
      v30 = v98;
      v26 = -(v93 - v99);
    }
    v27 = v29 - v30;
    goto LABEL_58;
  }
  v14 = v94 - v97;
  v15 = v95 - v98;
  v16 = v96 - v99;
  v17 = v91 - v94;
  v18 = v92 - v95;
  v19 = v93 - v96;
  v20 = v14 * v14 + v15 * v15 + v16 * v16;
  if (v20 <= -0.0000001)
  {
    v21 = v94 - v97;
    v22 = v95 - v98;
    v23 = v96 - v99;
  }
  else
  {
    v21 = v94 - v97;
    v22 = v95 - v98;
    v23 = v96 - v99;
    if (v20 < 0.0000001)
    {
      v20 = v17 * v17 + v18 * v18 + v19 * v19;
      if (v20 <= -0.0000001)
      {
        v21 = v91 - v94;
        v22 = v92 - v95;
        v23 = v93 - v96;
      }
      else
      {
        v21 = v91 - v94;
        v22 = v92 - v95;
        v23 = v93 - v96;
        if (v20 < 0.0000001)
          return a4;
      }
    }
  }
  v31 = v17 - v14;
  v32 = v18 - v15;
  v33 = v19 - v16;
  v34 = sqrt(v20);
  if (v34 <= -0.000000100000001 || v34 >= 0.000000100000001)
  {
    v21 = v21 / v34;
    v22 = v22 / v34;
    v23 = v23 / v34;
  }
  v35 = v21;
  v36 = v35;
  v37 = v22;
  v38 = v37;
  v39 = v23;
  v40 = v39;
  v41 = v33 * v38 - v32 * v39;
  v42 = v31 * v40 - v33 * v36;
  v43 = v32 * v36 - v31 * v38;
  v44 = v43 * v43 + v41 * v41 + v42 * v42;
  v45 = v44 > -0.0000001;
  v46 = v44 < 0.0000001;
  if (v45 && v46)
  {
    v41 = 0.0;
    v47 = 1.0;
  }
  else
  {
    v47 = v42;
  }
  if (v45 && v46)
    v48 = 0.0;
  else
    v48 = v43;
  v49 = sqrt(v48 * v48 + v41 * v41 + v47 * v47);
  v77 = a4;
  if (v49 <= -0.000000100000001 || v49 >= 0.000000100000001)
  {
    v41 = v41 / v49;
    v47 = v47 / v49;
    v48 = v48 / v49;
  }
  v50 = v47 * v40 - v48 * v38;
  v51 = v48 * v36 - v41 * v40;
  v52 = v41 * v38 - v47 * v36;
  v53 = sqrt(v52 * v52 + v50 * v50 + v51 * v51);
  v78 = *(_QWORD *)&v41;
  if (v53 <= -0.000000100000001 || v53 >= 0.000000100000001)
  {
    v50 = v50 / v53;
    v51 = v51 / v53;
    v52 = v52 / v53;
  }
  v54 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 800), a3, 0.0);
  v55 = -v50;
  v56 = -v51;
  v57 = -v52;
  if (v54 == 1)
  {
    v50 = v36;
    v51 = v38;
    v52 = v40;
    v36 = v55;
    v38 = v56;
    v40 = v57;
  }
  v58 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1056), a3, 0.0);
  v59 = -v36;
  v60 = -v50;
  if (!v58)
  {
    v60 = v50;
    v59 = v36;
  }
  *(double *)&v87.var0.var0 = v59;
  *(double *)&v87.var0.var1 = v60;
  v61 = -v38;
  v62 = -v51;
  if (!v58)
  {
    v62 = v51;
    v61 = v38;
  }
  v87.var2 = v61;
  v87.var3 = v62;
  v63 = -v40;
  v64 = -v52;
  if (!v58)
  {
    v64 = v52;
    v63 = v40;
  }
  *(double *)&v87.var6 = v63;
  v87.var7.var0[0][0] = v64;
  v87.var0.var3 = v78;
  *(double *)&v87.var4 = v47;
  v87.var7.var0[0][1] = v48;
  v87.var1 = 0.0;
  v87.var5 = 0;
  memset(&v87.var7.var0[0][2], 0, 32);
  v87.var7.var0[1][2] = 1.0;
  v80 = 0u;
  v81 = 0u;
  v79 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0;
  v82 = 4;
  Transformation = PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v87.var0.var0, (uint64_t)&v79);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Behaviors/OZSnapAlignBehavior.cpp", 202, v66, v67, v68, v69, v70);
  switch(a2)
  {
    case 1:
      v71 = (double *)&v83;
      break;
    case 3:
      v71 = (double *)&v84;
      break;
    case 2:
      v71 = (double *)&v83 + 1;
      break;
    default:
      return v77;
  }
  return *v71;
}

double OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  __n128 FrameDuration;
  Float64 v9;
  CMTime v11;
  __n128 v12;
  CMTimeEpoch v13;
  CMTime v14;
  CMTime v15[2];
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime time2;
  CMTime time1;

  memset(&v18, 0, sizeof(v18));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v18, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v17 = v18;
  if ((*(unsigned int (**)(OZSnapAlignBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 296))(this, &v17, 0, 1, 1))
  {
    memset(&v16, 0, sizeof(v16));
    FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v16);
    (*(void (**)(CMTime *__return_ptr, OZSnapAlignBehavior *, __n128))(*(_QWORD *)this + 608))(v15, this, FrameDuration);
    memset(&v14, 0, sizeof(v14));
    time1 = v15[0];
    time2 = v15[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
    time1 = v19;
    time2 = v16;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1208), &v18, 0.0);
    operator*(&v16, &v19, v9);
    *(__n128 *)&time1.value = v12;
    time1.epoch = v13;
    time2 = v19;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    OZBehavior::getFrameDuration(this, &v12);
    time1 = v18;
    *(__n128 *)&time2.value = v12;
    time2.epoch = v13;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
    time1 = v19;
    time2 = v14;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = v14;
      time2 = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
      v18 = v19;
    }
    v11 = v18;
    return OZSnapAlignBehavior::solveHelper(this, a2, &v11, a5);
  }
  return a5;
}

double `non-virtual thunk to'OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZSnapAlignBehavior::solveNode((OZSnapAlignBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

double OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, OZCurveNodeParam *a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 FrameDuration;
  Float64 v9;
  double result;
  unint64_t v11;
  double v12;
  CMTime v13;
  __n128 v14;
  CMTimeEpoch v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19[2];
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time2;
  CMTime time1;

  v6 = *((_QWORD *)a3 + 19);
  v7 = *((_QWORD *)a3 + 10);
  v22 = *(CMTime *)((_BYTE *)a3 + 5);
  memset(&v21, 0, sizeof(v21));
  (*(void (**)(CMTime *__return_ptr, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v21, *(_QWORD *)(*((_QWORD *)this + 47) + 32), (char *)a3 + 96);
  memset(&v20, 0, sizeof(v20));
  FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v20);
  (*(void (**)(CMTime *__return_ptr, OZSnapAlignBehavior *, __n128))(*(_QWORD *)this + 608))(v19, this, FrameDuration);
  memset(&v18, 0, sizeof(v18));
  time1 = v19[0];
  time2 = v19[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
  time1 = v23;
  time2 = v20;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1208), MEMORY[0x1E0CA2E68], 0.0);
  operator*(&v20, &v23, v9);
  time1 = v17;
  time2 = v23;
  result = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
  if (*((_DWORD *)a3 + 36))
  {
    v11 = 0;
    do
    {
      v16 = v21;
      if ((*(unsigned int (**)(OZSnapAlignBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v16, 0, 1, 1))
      {
        v23 = v21;
        OZBehavior::getFrameDuration(this, &v14);
        time1 = v23;
        *(__n128 *)&time2.value = v14;
        time2.epoch = v15;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
        time1 = v17;
        time2 = v18;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          time1 = v18;
          time2 = v20;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        }
        v13 = v23;
        v12 = OZSnapAlignBehavior::solveHelper(this, a2, &v13, *(double *)(v7 + 8 * v11));
      }
      else
      {
        v12 = *(double *)(v7 + 8 * v11);
      }
      *(double *)(v6 + 8 * v11) = v12;
      time2 = v21;
      v23 = v22;
      PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&time1);
      result = *(double *)&time1.value;
      v21 = time1;
      ++v11;
    }
    while (v11 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZSnapAlignBehavior::solveNode(OZSnapAlignBehavior *this, int a2, OZCurveNodeParam *a3)
{
  return OZSnapAlignBehavior::solveNode((OZSnapAlignBehavior *)((char *)this - 536), a2, a3);
}

void OZSpinBehavior::OZSpinBehavior(OZSpinBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D3A30;
  v5[2] = &unk_1E65D3D18;
  v5[6] = &unk_1E65D3F70;
  v5[42] = &unk_1E65D3FC8;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Spin Behavior Increment Type Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Behavior Increment Type"));
  OZChannelEnum::OZChannelEnum((OZSpinBehavior *)((char *)this + 504), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Spin Behavior Agular Velocity"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 5, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Spin Behavior Final Angle"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 6, &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Sping Behavior Axis Preset Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Sping Behavior Axis Preset"));
  OZChannelEnum::OZChannelEnum((OZSpinBehavior *)((char *)this + 1064), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Spin Behavior Axis Latitude"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1320), &v7, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Spin Behavior Axis Longitude"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1472), &v7, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setKeyframable((OZChannel *)this + 5, 0);
  OZChannel::setKeyframable((OZChannel *)this + 6, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1472), 0);
}

void sub_1B2F891E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZReflexiveBehavior *v12;
  OZChannelEnum *v13;
  OZChannel *v14;
  OZChannel *v15;
  OZChannelEnum *v16;
  OZChannel *v17;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZSpinBehavior::OZSpinBehavior(OZSpinBehavior *this, OZSpinBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D3A30;
  *(_QWORD *)(v5 + 16) = &unk_1E65D3D18;
  *(_QWORD *)(v5 + 48) = &unk_1E65D3F70;
  *(_QWORD *)(v5 + 336) = &unk_1E65D3FC8;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (OZSpinBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)this + 5, (const OZChannelBase *)((char *)a2 + 760), v6);
  *((_QWORD *)this + 95) = &off_1E6551728;
  *((_QWORD *)this + 97) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)this + 6, (const OZChannelBase *)((char *)a2 + 912), v6);
  *((_QWORD *)this + 114) = &off_1E6551728;
  *((_QWORD *)this + 116) = &unk_1E6551A88;
  OZChannelEnum::OZChannelEnum((OZSpinBehavior *)((char *)this + 1064), (OZSpinBehavior *)((char *)a2 + 1064), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((_QWORD *)this + 165) = &off_1E6551728;
  *((_QWORD *)this + 167) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1472), (const OZChannelBase *)((char *)a2 + 1472), v6);
  *((_QWORD *)this + 184) = &off_1E6551728;
  *((_QWORD *)this + 186) = &unk_1E6551A88;
}

void sub_1B2F893F4(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannelEnum *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannelEnum *v5;
  OZChannel *v6;

  OZChannel::~OZChannel(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F89450()
{
  JUMPOUT(0x1B2F89440);
}

void OZSpinBehavior::~OZSpinBehavior(OZSpinBehavior *this)
{
  *(_QWORD *)this = &off_1E65D3A30;
  *((_QWORD *)this + 2) = &unk_1E65D3D18;
  *((_QWORD *)this + 6) = &unk_1E65D3F70;
  *((_QWORD *)this + 42) = &unk_1E65D3FC8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannelEnum::~OZChannelEnum((OZSpinBehavior *)((char *)this + 1064));
  OZChannel::~OZChannel((OZChannel *)this + 6);
  OZChannel::~OZChannel((OZChannel *)this + 5);
  OZChannelEnum::~OZChannelEnum((OZSpinBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZSpinBehavior::~OZSpinBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZSpinBehavior::~OZSpinBehavior(OZSpinBehavior *this)
{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 16));
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 48));
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 336));
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSpinBehavior::~OZSpinBehavior((OZSpinBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSpinBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 760, (uint64_t)v5 + 760);
  OZChannelBase::operator=(a1 + 912, (uint64_t)v5 + 912);
  OZChannelBase::operator=(a1 + 1064, (uint64_t)v5 + 1064);
  OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);
  return OZChannelBase::operator=(a1 + 1472, (uint64_t)v5 + 1472);
}

BOOL OZSpinBehavior::isRebuildUIChannel(OZSpinBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 504) == a2 || (OZChannelBase *)((char *)this + 1064) == a2;
}

OZChannelBase *OZSpinBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  const CMTime *v8;
  const void *v9;
  char *v10;
  uint64_t i;
  const void *v12;
  char *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  OZChannelBase *v16;
  OZChannelBase *v17;

  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    v6 = 0;
    LOBYTE(v7) = 1;
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v9 = *(const void **)(v4 + 16);
      if (v9)
      else
        v10 = 0;
      v7 = (v5 == OZChannel::getValueAsInt((OZChannel *)(v10 + 504), v8, 0.0)) & v7;
      result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)v10 + 7, v8, 0.0);
      v6 |= (_DWORD)result == 3;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      v12 = *(const void **)(i + 16);
      if (v12)
      else
        v13 = 0;
      v14 = (OZChannelBase *)(v13 + 760);
      if (v7)
      {
        if (!v5)
        {
          OZChannelBase::resetFlag(v14, 0x400000, 1);
          OZChannelBase::setFlag((OZChannelBase *)(v13 + 912), 0x400000, 1);
          goto LABEL_16;
        }
        OZChannelBase::setFlag(v14, 0x400000, 1);
        v15 = (OZChannelBase *)(v13 + 912);
      }
      else
      {
        OZChannelBase::resetFlag(v14, 0x400000, 1);
        v15 = (OZChannelBase *)(v13 + 912);
      }
      OZChannelBase::resetFlag(v15, 0x400000, 1);
LABEL_16:
      v16 = (OZChannelBase *)(v13 + 1320);
      v17 = (OZChannelBase *)(v13 + 1472);
      if ((v6 & 1) != 0)
      {
        OZChannelBase::resetFlag(v16, 0x400000, 1);
        result = OZChannelBase::resetFlag(v17, 0x400000, 1);
      }
      else
      {
        OZChannelBase::setFlag(v16, 0x400000, 1);
        result = OZChannelBase::setFlag(v17, 0x400000, 1);
      }
    }
  }
  return result;
}

double OZSpinBehavior::calcRotSpeed(OZSpinBehavior *this)
{
  double v2;
  double v3;
  double result;
  uint64_t v5;
  __n128 FrameDuration;
  double Seconds;
  double v8;
  double v9;
  CMTime v10;
  _QWORD v11[3];
  CMTime v12;
  __n128 v13;
  CMTimeEpoch v14;
  CMTime v15;
  CMTime v16;

  v2 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), MEMORY[0x1E0CA2E68], 0.0);
  if (v3 == 0.0)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 5, MEMORY[0x1E0CA2E68], 0.0);
  }
  else
  {
    v13 = 0uLL;
    v14 = 0;
    v5 = (*(uint64_t (**)(OZSpinBehavior *))(*(_QWORD *)this + 336))(this);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), &v13);
    (*(void (**)(_QWORD *__return_ptr, OZSpinBehavior *, __n128))(*(_QWORD *)this + 608))(v11, this, FrameDuration);
    v16 = v12;
    *(__n128 *)&v15.value = v13;
    v15.epoch = v14;
    PC_CMTimeSaferSubtract(&v16, &v15, (uint64_t)&v10);
    Seconds = CMTimeGetSeconds(&v10);
    if (Seconds > 0.0)
    {
      v8 = Seconds;
      OZChannel::getValueAsDouble((OZChannel *)this + 6, MEMORY[0x1E0CA2E68], 0.0);
      return v9 / v8;
    }
    return v2;
  }
  return result;
}

void OZSpinBehavior::calcAxis(uint64_t a1, double *a2)
{
  const CMTime *v4;
  double v5;
  __double2 v6;
  double v7;
  __double2 v8;

  switch(OZChannel::getValueAsInt((OZChannel *)(a1 + 1064), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      a2[1] = 0.0;
      a2[2] = 0.0;
      *a2 = 1.0;
      break;
    case 1u:
      *(_OWORD *)a2 = xmmword_1B304EEE0;
      a2[2] = 0.0;
      break;
    case 2u:
      *a2 = 0.0;
      a2[1] = 0.0;
      a2[2] = 1.0;
      break;
    case 3u:
      v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 1320), MEMORY[0x1E0CA2E68], 0.0);
      v6 = __sincos_stret(v5);
      a2[1] = v6.__sinval;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 1472), v4, 0.0);
      v8 = __sincos_stret(v7);
      a2[2] = v6.__cosval * v8.__cosval;
      *a2 = v6.__cosval * v8.__sinval;
      break;
    default:
      return;
  }
}

void OZSpinBehavior::accumForces(OZSpinBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  uint64_t v5;
  double v6;
  double v7;
  int8x16_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  CMTime v13;
  CMTime time1;
  CMTime v15;
  float64x2_t v16;
  double v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time2;

  memset(&v20, 0, sizeof(v20));
  v5 = (*(uint64_t (**)(OZSpinBehavior *, OZSimulationState *, OZTransformNode *))(*(_QWORD *)this + 336))(this, a2, a3);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v20);
  memset(&v19, 0, sizeof(v19));
  operator*(&v20, &v19, 0.001);
  (*(void (**)(float64x2_t *__return_ptr, OZSpinBehavior *))(*(_QWORD *)this + 608))(&v16, this);
  *(float64x2_t *)&time1.value = v16;
  *(double *)&time1.epoch = v17;
  time2 = *(CMTime *)((char *)a2 + 176);
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *(float64x2_t *)&time1.value = v16;
    *(double *)&time1.epoch = v17;
    time2 = v18;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
    time1 = v23;
    time2 = v20;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
    time1 = *(CMTime *)((char *)a2 + 176);
    time2 = v22;
    if (CMTimeCompare(&time1, &time2) <= 0 || (v18.flags & 1) != 0 && (v18.flags & 0x10) != 0)
    {
      (*(void (**)(CMTime *__return_ptr, OZSpinBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      time2 = *(CMTime *)((char *)a2 + 176);
      v23 = v19;
      PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&v13);
      time2 = time1;
      v23 = v13;
      if (CMTimeCompare(&time2, &v23) > 0)
        goto LABEL_6;
      time2 = time1;
      v23 = v15;
      PC_CMTimeSaferAdd(&time2, &v23, (uint64_t)&v22);
      time2 = v22;
      v23 = v20;
      PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&v21);
      time2 = v13;
      v23 = v21;
      if (CMTimeCompare(&time2, &v23) > 0 && ((v15.flags & 1) == 0 || (v15.flags & 0x10) == 0))
      {
LABEL_6:
        v16 = 0uLL;
        v17 = 0.0;
        OZSpinBehavior::calcAxis((uint64_t)this, v16.f64);
        v6 = OZSpinBehavior::calcRotSpeed(this);
        v7 = v6 * v17;
        v8 = (int8x16_t)vmulq_n_f64(v16, v6);
        v9 = (float64x2_t)vextq_s8(v8, v8, 8uLL);
        v10.f64[0] = v9.f64[0];
        v10.f64[1] = v7;
        v11 = vsubq_f64(*((float64x2_t *)a2 + 7), v10);
        v9.f64[0] = v7;
        v12 = vsubq_f64(*((float64x2_t *)a2 + 6), v9);
        *((float64x2_t *)a2 + 5) = vsubq_f64(*((float64x2_t *)a2 + 5), (float64x2_t)v8);
        *((float64x2_t *)a2 + 6) = v12;
        *((float64x2_t *)a2 + 7) = v11;
      }
    }
  }
}

float64x2_t OZSpinBehavior::accumInitialValues(OZSpinBehavior *this, float64x2_t *a2, OZTransformNode *a3)
{
  double v5;
  double v6;
  int8x16_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t result;
  float64x2_t v12;
  float64x2_t v13;
  double v14;

  v13 = 0uLL;
  v14 = 0.0;
  OZSpinBehavior::calcAxis((uint64_t)this, v13.f64);
  v5 = OZSpinBehavior::calcRotSpeed(this);
  v6 = v5 * v14;
  v7 = (int8x16_t)vmulq_n_f64(v13, v5);
  v8 = (float64x2_t)vextq_s8(v7, v7, 8uLL);
  v9.f64[0] = v8.f64[0];
  v9.f64[1] = v6;
  v10 = vaddq_f64(v9, a2[7]);
  result = vaddq_f64((float64x2_t)v7, a2[5]);
  v8.f64[0] = v6;
  v12 = vaddq_f64(v8, a2[6]);
  a2[5] = result;
  a2[6] = v12;
  a2[7] = v10;
  return result;
}

void OZSpringBehavior::OZSpringBehavior(OZSpringBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D4008;
  v5[2] = &unk_1E65D42F0;
  v5[6] = &unk_1E65D4548;
  v5[42] = &unk_1E65D45A0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spring Behavior Attracted To Object"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZSpringBehavior *)((char *)this + 504), &v6, (OZChannelFolder *)((char *)this + 56), 0x190u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spring Behavior Spring Constant"));
  OZChannelDouble::OZChannelDouble((OZSpringBehavior *)((char *)this + 664), 0.1, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spring Behavior Relaxed Length"));
  OZChannelDouble::OZChannelDouble((OZSpringBehavior *)((char *)this + 816), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spring Behavior Repel"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 968), &v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spring Behavior Active Axes"));
  OZChannelBool3D::OZChannelBool3D((OZSpringBehavior *)((char *)this + 1120), 1, 1, 0, &v6, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 3u);
  PCString::~PCString(&v6);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 504, 1);
}

void sub_1B2F89F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;
  OZChanTransformNodeRef *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannelBool *v14;
  OZChannelBool3D *v15;

  OZChannelBool3D::~OZChannelBool3D(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F89FA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F89F84);
}

void sub_1B2F89FB4()
{
  JUMPOUT(0x1B2F89F84);
}

void sub_1B2F89FBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F89F8CLL);
}

void sub_1B2F89FCC()
{
  JUMPOUT(0x1B2F89F8CLL);
}

void sub_1B2F89FD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F89F94);
}

void sub_1B2F89FE4()
{
  JUMPOUT(0x1B2F89F94);
}

void OZSpringBehavior::OZSpringBehavior(OZSpringBehavior *this, OZSpringBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D4008;
  *(_QWORD *)(v5 + 16) = &unk_1E65D42F0;
  *(_QWORD *)(v5 + 48) = &unk_1E65D4548;
  *(_QWORD *)(v5 + 336) = &unk_1E65D45A0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 504), (OZSpringBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 664), (const OZChannelBase *)((char *)a2 + 664), v6);
  *((_QWORD *)this + 83) = &off_1E6551358;
  *((_QWORD *)this + 85) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 816), (const OZChannelBase *)((char *)a2 + 816), v6);
  *((_QWORD *)this + 102) = &off_1E6551358;
  *((_QWORD *)this + 104) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 968), (const OZChannelBase *)((char *)a2 + 968), v6);
  OZChannelBool3D::OZChannelBool3D((OZSpringBehavior *)((char *)this + 1120), (OZSpringBehavior *)((char *)a2 + 1120), v6);
}

void sub_1B2F8A0D8(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChanTransformNodeRef *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannelBool *v5;

  OZChannelBool::~OZChannelBool(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSpringBehavior::~OZSpringBehavior(OZSpringBehavior *this)
{
  *(_QWORD *)this = &off_1E65D4008;
  *((_QWORD *)this + 2) = &unk_1E65D42F0;
  *((_QWORD *)this + 6) = &unk_1E65D4548;
  *((_QWORD *)this + 42) = &unk_1E65D45A0;
  OZChannelBool3D::~OZChannelBool3D((OZSpringBehavior *)((char *)this + 1120));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 968));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 816));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 664));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZSpringBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZSpringBehavior::~OZSpringBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZSpringBehavior::~OZSpringBehavior(OZSpringBehavior *this)
{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 16));
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 48));
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 336));
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSpringBehavior::~OZSpringBehavior((OZSpringBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSpringBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 664, (uint64_t)v5 + 664);
  OZChannelBase::operator=(a1 + 816, (uint64_t)v5 + 816);
  return OZChannelBase::operator=(a1 + 968, (uint64_t)v5 + 968);
}

uint64_t OZSpringBehavior::accumForces(OZSpringBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  uint64_t result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  CMTime v22;
  float64x2_t v23;
  double v24;

  result = (uint64_t)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
  if (result)
  {
    v23 = 0uLL;
    v24 = 0.0;
    OZSimulationState::getNodePosition((uint64_t)a2, (CMTime *)((char *)a2 + 176), result, (OZSimulationState *)a3, &v23);
    v7 = *((double *)a2 + 2) - v24;
    v19 = vsubq_f64(*(float64x2_t *)a2, v23);
    v8 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)) + v7 * v7);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 816), (const CMTime *)((char *)a2 + 176), 0.0);
    v10 = v8 - v9;
    v22 = *(CMTime *)((char *)a2 + 176);
    if (v8 - v9 >= 0.0
      || (result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 968), &v22, 0.0), (_DWORD)result))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 664), &v22, 0.0);
      v12 = -(v11 * v10);
      v18 = v12;
      v13 = v8 >= 0.000000100000001 || v8 <= -0.000000100000001;
      v14 = 1.0;
      if (v13)
        v14 = v8;
      v17 = *(_QWORD *)&v14;
      v15 = v7 / v14 * v12;
      v20 = 0uLL;
      v21 = 0.0;
      result = OZChannelBool3D::getValue((uint64_t)this + 1120, (const CMTime *)((char *)a2 + 176), v20.f64, 0.0);
      v16 = v15 * v21;
      *((float64x2_t *)a2 + 8) = vaddq_f64(vmulq_f64(vmulq_n_f64(vdivq_f64(v19, (float64x2_t)vdupq_lane_s64(v17, 0)), v18), v20), *((float64x2_t *)a2 + 8));
      *((double *)a2 + 18) = v16 + *((double *)a2 + 18);
    }
  }
  return result;
}

const void *OZSpringBehavior::getReferencedNode(OZSpringBehavior *this)
{
  return OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
}

void OZStopBehavior::OZStopBehavior(OZStopBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v4 = &off_1E65D45E0;
  v4[2] = &unk_1E65D4920;
  v4[6] = &unk_1E65D4B78;
  v4[42] = &unk_1E65D4BD0;
  v4[67] = &unk_1E65D4BF8;
}

void OZStopBehavior::OZStopBehavior(OZStopBehavior *this, const OZStopBehavior *a2, char a3)
{
  _QWORD *v3;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *v3 = &off_1E65D45E0;
  v3[2] = &unk_1E65D4920;
  v3[6] = &unk_1E65D4B78;
  v3[42] = &unk_1E65D4BD0;
  v3[67] = &unk_1E65D4BF8;
}

void `non-virtual thunk to'OZStopBehavior::~OZStopBehavior(OZStopBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 16));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 536));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZStopBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZStopBehavior::~OZStopBehavior(OZStopBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double `non-virtual thunk to'OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int32_t v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime time1;
  CMTime v19;
  CMTime time2;

  v5 = *((_QWORD *)a3 + 19);
  v6 = *((_QWORD *)a3 + 10);
  v17 = *(CMTime *)((_BYTE *)a3 + 5);
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v16, *(_QWORD *)(*((_QWORD *)this + 47) + 32), (char *)a3 + 96);
  (*(void (**)(CMTime *__return_ptr, OZStopBehavior *))(*(_QWORD *)this + 608))(&time1, this);
  v15 = time1;
  v7 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 0, 1);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = v7;
    v10 = 0;
    do
    {
      v11 = v10;
      if (v9)
      {
        v14 = v16;
        v12 = (*(uint64_t (**)(OZStopBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v14, 1, 1, 1);
        v11 = v10;
        if (v12)
        {
          time1 = v16;
          time2 = v15;
          v13 = CMTimeCompare(&time1, &time2);
          v11 = v10;
          if (v13 >= 1)
            v11 = (*((_DWORD *)a3 + 18) - 1);
        }
      }
      *(_QWORD *)(v5 + 8 * v10) = *(_QWORD *)(v6 + 8 * v11);
      time2 = v16;
      v19 = v17;
      PC_CMTimeSaferAdd(&time2, &v19, (uint64_t)&time1);
      result = *(double *)&time1.value;
      v16 = time1;
      ++v10;
    }
    while (v10 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZStopBehavior::solveNode(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  return OZStopBehavior::solveNode((OZStopBehavior *)((char *)this - 536), a2, a3);
}

__n128 OZStopBehavior::getNeededTime@<Q0>(OZStopBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTimeEpoch epoch;
  __n128 result;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime time1;
  CMTime time2;

  memset(&v10, 0, sizeof(v10));
  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v10);
  v9 = v10;
  if (((*(uint64_t (**)(OZStopBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v9, 0, 1, 1) & 1) != 0&& ((*(void (**)(CMTime *__return_ptr, OZStopBehavior *))(*(_QWORD *)this + 608))(&time1, this), epoch = time1.epoch, v8 = time1, time1 = v10, *(_OWORD *)&time2.value = *(_OWORD *)&v8.value, time2.epoch = epoch, CMTimeCompare(&time1, &time2) > 0))
  {
    (*(void (**)(_QWORD, CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 328))(*(_QWORD *)(*((_QWORD *)this + 47) + 32), &v8);
  }
  else
  {
    result = *(__n128 *)&a2->value;
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a3 + 16) = a2->epoch;
  }
  return result;
}

double `non-virtual thunk to'OZStopBehavior::getNeededTime@<D0>(OZStopBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = OZStopBehavior::getNeededTime((OZStopBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

OZCurveNodeParam *OZStopBehavior::getNeededRange(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  __n128 FrameDuration;
  double v11;
  unsigned int v12;
  CMTime v14;
  CMTime time;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  __n128 v19;
  CMTimeEpoch v20;
  CMTime v21[2];
  CMTime v22;
  CMTime time2;
  CMTime time1;

  v5 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 0, 1);
  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  *((_OWORD *)a3 + 3) = *(_OWORD *)((char *)a3 + 120);
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  if (v5)
  {
    v6 = (_OWORD *)((char *)a3 + 96);
    v7 = (_OWORD *)((char *)a3 + 24);
    v8 = (_OWORD *)((char *)a3 + 120);
    v19 = 0uLL;
    v9 = (_OWORD *)((char *)a3 + 48);
    v20 = 0;
    FrameDuration = OZBehavior::getFrameDuration(this, &v19);
    memset(&v18, 0, sizeof(v18));
    (*(void (**)(CMTime *__return_ptr, OZStopBehavior *, __n128))(*(_QWORD *)this + 608))(v21, this, FrameDuration);
    time1 = v21[0];
    (*(void (**)(CMTime *__return_ptr, _QWORD, CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 328))(&v18, *(_QWORD *)(*((_QWORD *)this + 47) + 32), &time1);
    (*(void (**)(CMTime *__return_ptr, OZStopBehavior *))(*(_QWORD *)this + 608))(v21, this);
    memset(&v17, 0, sizeof(v17));
    time1 = v21[0];
    time2 = v21[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
    time1 = v22;
    *(__n128 *)&time2.value = v19;
    time2.epoch = v20;
    v11 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
    (*(void (**)(CMTime *__return_ptr, _QWORD, CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                           + 328))(&v17, *(_QWORD *)(*((_QWORD *)this + 47) + 32), &v16, v11);
    memset(&v22, 0, sizeof(v22));
    operator*(*((_DWORD *)a3 + 36) - 1, (CMTime *)a3 + 5, &v16);
    time1 = *(CMTime *)((_BYTE *)a3 + 4);
    time2 = v16;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
    time1 = v17;
    time2 = v22;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *v7 = *v6;
      *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
      *v9 = *v8;
      *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
      *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
      *((_BYTE *)a3 + 88) = 0;
      *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
    }
    else
    {
      *(_OWORD *)&time1.value = *v6;
      time1.epoch = *((_QWORD *)a3 + 14);
      time2 = v18;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        *v7 = *(_OWORD *)&v18.value;
        *((_QWORD *)a3 + 5) = v18.epoch;
        *((_DWORD *)a3 + 18) = 1;
        *v9 = *v8;
        *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
LABEL_8:
        *((_QWORD *)a3 + 10) = operator new[]();
        *((_BYTE *)a3 + 88) = 1;
        *(_BYTE *)a3 = 0;
        return a3;
      }
      *v7 = *v6;
      *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
      *v9 = *v8;
      *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
      *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
      *((_BYTE *)a3 + 88) = 0;
      *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
      time1 = v18;
      *(_OWORD *)&time2.value = *v6;
      time2.epoch = *((_QWORD *)a3 + 14);
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
      time1 = v14;
      *(__n128 *)&time2.value = v19;
      time2.epoch = v20;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
      operator/((__int128 *)&v16.value, (uint64_t)a3 + 120, (uint64_t)&time);
      v12 = vcvtpd_u64_f64(CMTimeGetSeconds(&time));
      if (*((_DWORD *)a3 + 36) > v12)
      {
        *((_DWORD *)a3 + 18) = v12;
        goto LABEL_8;
      }
    }
  }
  return a3;
}

OZCurveNodeParam *`non-virtual thunk to'OZStopBehavior::getNeededRange(OZStopBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  return OZStopBehavior::getNeededRange((OZStopBehavior *)((char *)this - 536), a2, a3);
}

void OZThrowBehavior::OZThrowBehavior(OZThrowBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D4C70;
  v5[2] = &unk_1E65D4F58;
  v5[6] = &unk_1E65D51B0;
  v5[42] = &unk_1E65D5208;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Throw Behavior Increment Type Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Throw Behavior Increment Type"));
  OZChannelEnum::OZChannelEnum((OZThrowBehavior *)((char *)this + 504), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Throw Behavior Throw Velocity"));
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 760), &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Throw Behavior Throw Distance"));
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 1352), &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "HUD Scale (Hidden)");
  OZChannelDouble::OZChannelDouble((OZThrowBehavior *)((char *)this + 1944), &v7, (OZChannelFolder *)((char *)this + 56), 0x193u, 2, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Throw Dimension Type Enum (Hidden)");
  PCString::PCString(&v6, "Throw Dimension Type Enum (Hidden)");
  OZChannelEnum::OZChannelEnum((OZThrowBehavior *)((char *)this + 2096), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x194u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 760), 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 1352), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1944), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2096), 0);
}

void sub_1B2F8AE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;
  OZChannelEnum *v11;
  OZChannel3D *v12;
  OZChannel3D *v13;
  OZChannel *v14;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v14);
  OZChannel3D::~OZChannel3D(v13);
  OZChannel3D::~OZChannel3D(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZThrowBehavior::OZThrowBehavior(OZThrowBehavior *this, OZThrowBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D4C70;
  *(_QWORD *)(v5 + 16) = &unk_1E65D4F58;
  *(_QWORD *)(v5 + 48) = &unk_1E65D51B0;
  *(_QWORD *)(v5 + 336) = &unk_1E65D5208;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (OZThrowBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 760), (OZThrowBehavior *)((char *)a2 + 760), v6);
  OZChannel3D::OZChannel3D((OZThrowBehavior *)((char *)this + 1352), (OZThrowBehavior *)((char *)a2 + 1352), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1944), (const OZChannelBase *)((char *)a2 + 1944), v6);
  *((_QWORD *)this + 243) = &off_1E6551358;
  *((_QWORD *)this + 245) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZThrowBehavior *)((char *)this + 2096), (OZThrowBehavior *)((char *)a2 + 2096), v6);
}

void sub_1B2F8B030(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannelEnum *v2;
  OZChannel3D *v3;
  OZChannel3D *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannel3D::~OZChannel3D(v4);
  OZChannel3D::~OZChannel3D(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZThrowBehavior::~OZThrowBehavior(OZThrowBehavior *this)
{
  *(_QWORD *)this = &off_1E65D4C70;
  *((_QWORD *)this + 2) = &unk_1E65D4F58;
  *((_QWORD *)this + 6) = &unk_1E65D51B0;
  *((_QWORD *)this + 42) = &unk_1E65D5208;
  OZChannelEnum::~OZChannelEnum((OZThrowBehavior *)((char *)this + 2096));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1944));
  *((_QWORD *)this + 169) = &off_1E65568E0;
  *((_QWORD *)this + 171) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1792));
  OZChannel2D::~OZChannel2D((OZThrowBehavior *)((char *)this + 1352));
  *((_QWORD *)this + 95) = &off_1E65568E0;
  *((_QWORD *)this + 97) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1200));
  OZChannel2D::~OZChannel2D((OZThrowBehavior *)((char *)this + 760));
  OZChannelEnum::~OZChannelEnum((OZThrowBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZThrowBehavior::~OZThrowBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZThrowBehavior::~OZThrowBehavior(OZThrowBehavior *this)
{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 16));
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 48));
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 336));
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZThrowBehavior::~OZThrowBehavior((OZThrowBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZThrowBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelFolder::operator=(a1 + 760);
  OZChannelBase::operator=(a1 + 896, (uint64_t)v5 + 896);
  OZChannelBase::operator=(a1 + 1048, (uint64_t)v5 + 1048);
  OZChannelBase::operator=(a1 + 1200, (uint64_t)v5 + 1200);
  OZChannelFolder::operator=(a1 + 1352);
  OZChannelBase::operator=(a1 + 1488, (uint64_t)v5 + 1488);
  OZChannelBase::operator=(a1 + 1640, (uint64_t)v5 + 1640);
  OZChannelBase::operator=(a1 + 1792, (uint64_t)v5 + 1792);
  OZChannelBase::operator=(a1 + 1944, (uint64_t)v5 + 1944);
  return OZChannelBase::operator=(a1 + 2096, (uint64_t)v5 + 2096);
}

BOOL OZThrowBehavior::isRebuildUIChannel(OZThrowBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 504) == a2;
}

OZChannelBase *OZThrowBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  const CMTime *v6;
  char *v7;
  uint64_t i;
  const void *v9;
  char *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  uint64_t j;
  const void *v14;
  char *v15;

  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v7 = *(char **)(v4 + 16);
      if (v7)
      result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 504), v6, 0.0);
      if (v5 != (_DWORD)result)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a2)
      {
        for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          v9 = *(const void **)(i + 16);
          if (v9)
          else
            v10 = 0;
          v11 = (OZChannelBase *)(v10 + 760);
          v12 = (OZChannelBase *)(v10 + 1352);
          if (v5)
          {
            OZChannelBase::setFlag(v11, 0x400000, 1);
            result = OZChannelBase::resetFlag(v12, 0x400000, 1);
          }
          else
          {
            OZChannelBase::resetFlag(v11, 0x400000, 1);
            result = OZChannelBase::setFlag(v12, 0x400000, 1);
          }
        }
        return result;
      }
    }
    for (j = *(_QWORD *)(a2 + 8); j != a2; j = *(_QWORD *)(j + 8))
    {
      v14 = *(const void **)(j + 16);
      if (v14)
      else
        v15 = 0;
      OZChannelBase::resetFlag((OZChannelBase *)(v15 + 760), 0x400000, 1);
      result = OZChannelBase::resetFlag((OZChannelBase *)(v15 + 1352), 0x400000, 1);
    }
  }
  return result;
}

void OZThrowBehavior::calcThrowVelocity(uint64_t a1, double *a2)
{
  uint64_t v4;
  __n128 FrameDuration;
  double Seconds;
  double v7;
  CMTime v8;
  _QWORD v9[3];
  CMTime v10;
  __n128 v11;
  CMTimeEpoch v12;
  CMTime v13;
  CMTime v14;

  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E0CA2E68], 0.0))
  {
    v11 = 0uLL;
    v12 = 0;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), &v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __n128))(*(_QWORD *)a1 + 608))(v9, a1, FrameDuration);
    v14 = v10;
    *(__n128 *)&v13.value = v11;
    v13.epoch = v12;
    PC_CMTimeSaferSubtract(&v14, &v13, (uint64_t)&v8);
    Seconds = CMTimeGetSeconds(&v8);
    if (Seconds <= 0.0)
    {
      *a2 = 0.0;
      a2[1] = 0.0;
      a2[2] = 0.0;
    }
    else
    {
      v7 = Seconds;
      OZChannel3D::getValue(a1 + 1352, MEMORY[0x1E0CA2E68], a2, 0.0);
      *(float64x2_t *)a2 = vmulq_n_f64(*(float64x2_t *)a2, 1.0 / v7);
      a2[2] = 1.0 / v7 * a2[2];
    }
  }
  else
  {
    OZChannel3D::getValue(a1 + 760, MEMORY[0x1E0CA2E68], a2, 0.0);
  }
}

void OZThrowBehavior::accumForces(OZThrowBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  uint64_t v5;
  CMTime v6;
  CMTime time1;
  CMTime v8;
  float64x2_t v9;
  double v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime time2;

  memset(&v13, 0, sizeof(v13));
  v5 = (*(uint64_t (**)(OZThrowBehavior *, OZSimulationState *, OZTransformNode *))(*(_QWORD *)this + 336))(this, a2, a3);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v13);
  memset(&v12, 0, sizeof(v12));
  operator*(&v13, &v12, 0.001);
  (*(void (**)(float64x2_t *__return_ptr, OZThrowBehavior *))(*(_QWORD *)this + 608))(&v9, this);
  *(float64x2_t *)&time1.value = v9;
  *(double *)&time1.epoch = v10;
  time2 = *(CMTime *)((char *)a2 + 176);
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *(float64x2_t *)&time1.value = v9;
    *(double *)&time1.epoch = v10;
    time2 = v11;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
    time1 = v16;
    time2 = v13;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
    time1 = *(CMTime *)((char *)a2 + 176);
    time2 = v15;
    if (CMTimeCompare(&time1, &time2) <= 0 || (v11.flags & 1) != 0 && (v11.flags & 0x10) != 0)
    {
      (*(void (**)(CMTime *__return_ptr, OZThrowBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      time2 = *(CMTime *)((char *)a2 + 176);
      v16 = v12;
      PC_CMTimeSaferAdd(&time2, &v16, (uint64_t)&v6);
      time2 = time1;
      v16 = v6;
      if (CMTimeCompare(&time2, &v16) > 0)
        goto LABEL_6;
      time2 = time1;
      v16 = v8;
      PC_CMTimeSaferAdd(&time2, &v16, (uint64_t)&v15);
      time2 = v15;
      v16 = v13;
      PC_CMTimeSaferSubtract(&time2, &v16, (uint64_t)&v14);
      time2 = v6;
      v16 = v14;
      if (CMTimeCompare(&time2, &v16) > 0 && ((v8.flags & 1) == 0 || (v8.flags & 0x10) == 0))
      {
LABEL_6:
        v9 = 0uLL;
        v10 = 0.0;
        OZThrowBehavior::calcThrowVelocity((uint64_t)this, v9.f64);
        *(float64x2_t *)((char *)a2 + 56) = vsubq_f64(*(float64x2_t *)((char *)a2 + 56), v9);
        *((double *)a2 + 9) = *((double *)a2 + 9) - v10;
      }
    }
  }
}

double OZThrowBehavior::accumInitialValues(OZThrowBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double result;
  float64x2_t v5;
  double v6;

  v5 = 0uLL;
  v6 = 0.0;
  OZThrowBehavior::calcThrowVelocity((uint64_t)this, v5.f64);
  *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(v5, *(float64x2_t *)((char *)a2 + 56));
  result = v6 + *((double *)a2 + 9);
  *((double *)a2 + 9) = result;
  return result;
}

void OZViscousDragBehavior::OZViscousDragBehavior(OZViscousDragBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *v6;
  OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *Instance;
  OZChannelInfo *v8;
  PCString v9;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D5248;
  v5[2] = &unk_1E65D5530;
  v5[6] = &unk_1E65D5788;
  v5[42] = &unk_1E65D57E0;
  PCURL::PCURL((PCURL *)&v9, CFSTR("Viscous Drag Behavior Coefficient of Drag"));
  Instance = (OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *)OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(v6);
  v8 = (OZChannelInfo *)OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(Instance);
  OZChannel3D::OZChannel3D((OZViscousDragBehavior *)((char *)this + 504), 0.3, 0.3, 0.3, &v9, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 3u, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Viscous Drag Behavior Active Axes"));
  OZChannelBool3D::OZChannelBool3D((OZViscousDragBehavior *)((char *)this + 1096), 1, 1, 0, &v9, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 3u);
  PCString::~PCString(&v9);
}

void sub_1B2F8B9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;
  OZChannel3D *v11;

  PCString::~PCString(&a10);
  OZChannel3D::~OZChannel3D(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior::OZViscousDragBehavior(OZViscousDragBehavior *this, OZViscousDragBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D5248;
  *(_QWORD *)(v5 + 16) = &unk_1E65D5530;
  *(_QWORD *)(v5 + 48) = &unk_1E65D5788;
  *(_QWORD *)(v5 + 336) = &unk_1E65D57E0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel3D::OZChannel3D((OZChannel3D *)(v5 + 504), (OZViscousDragBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannelBool3D::OZChannelBool3D((OZViscousDragBehavior *)((char *)this + 1096), (OZViscousDragBehavior *)((char *)a2 + 1096), v6);
}

void sub_1B2F8BA88(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannel3D *v2;

  OZChannel3D::~OZChannel3D(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior::~OZViscousDragBehavior(OZViscousDragBehavior *this)
{
  *(_QWORD *)this = &off_1E65D5248;
  *((_QWORD *)this + 2) = &unk_1E65D5530;
  *((_QWORD *)this + 6) = &unk_1E65D5788;
  *((_QWORD *)this + 42) = &unk_1E65D57E0;
  OZChannelBool3D::~OZChannelBool3D((OZViscousDragBehavior *)((char *)this + 1096));
  *((_QWORD *)this + 63) = &off_1E65568E0;
  *((_QWORD *)this + 65) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannel2D::~OZChannel2D((OZViscousDragBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZViscousDragBehavior::~OZViscousDragBehavior(OZViscousDragBehavior *this)
{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 16));
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 48));
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 336));
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZViscousDragBehavior::~OZViscousDragBehavior((OZViscousDragBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZViscousDragBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 504);
  OZChannelBase::operator=(a1 + 640, (uint64_t)v5 + 640);
  OZChannelBase::operator=(a1 + 792, (uint64_t)v5 + 792);
  return OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
}

double OZViscousDragBehavior::accumForces(OZViscousDragBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v5;
  double v6;
  double result;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  double v12;
  CMTime v13;

  v13 = *(CMTime *)((char *)a2 + 176);
  v11 = 0uLL;
  v12 = 0.0;
  OZChannel3D::getValue((uint64_t)this + 504, &v13, &v11, 0.0);
  v5 = v12 * *((double *)a2 + 9);
  v9 = 0uLL;
  v10 = 0.0;
  v8 = vmulq_f64(v11, *(float64x2_t *)((char *)a2 + 56));
  OZChannelBool3D::getValue((uint64_t)this + 1096, &v13, v9.f64, 0.0);
  v6 = v5 * v10;
  *((float64x2_t *)a2 + 8) = vsubq_f64(*((float64x2_t *)a2 + 8), vmulq_f64(v8, v9));
  result = *((double *)a2 + 18) - v6;
  *((double *)a2 + 18) = result;
  return result;
}

uint64_t OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::OZViscousDragBehavior_kChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::OZViscousDragBehavior_kChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::_OZViscousDragBehavior_kChan;
}

void std::__call_once_param<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *v0;

  if (!OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::_OZViscousDragBehavior_kChan)
  {
    v0 = (OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *)operator new();
    OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::OZViscousDragBehavior_kChanImpl(v0);
    OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::_OZViscousDragBehavior_kChan = (uint64_t)v0;
  }
}

void sub_1B2F8BDBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl::OZViscousDragBehavior_kChanImpl(OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.3);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.3, 1, 1);
  PCSingleton::PCSingleton((OZViscousDragBehavior::OZViscousDragBehavior_kChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65D5820;
  *((_QWORD *)this + 5) = &unk_1E65D5840;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F8BE80(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::OZViscousDragBehavior_kChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::OZViscousDragBehavior_kChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::_OZViscousDragBehavior_kChanInfo;
}

void std::__call_once_param<std::tuple<OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *v0;

  if (!OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::_OZViscousDragBehavior_kChanInfo)
  {
    v0 = (OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *)operator new();
    OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::OZViscousDragBehavior_kChanInfo(v0);
    OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::_OZViscousDragBehavior_kChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F8BF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo::OZViscousDragBehavior_kChanInfo(OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZViscousDragBehavior::OZViscousDragBehavior_kChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65D5898;
  *((_QWORD *)this + 10) = &unk_1E65D58B8;
  return this;
}

void sub_1B2F8BFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior::OZVortexAroundBehavior(OZVortexAroundBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  unsigned int v6;
  PCString v7;
  PCString v8;

  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D5910;
  v5[2] = &unk_1E65D5BF8;
  v5[6] = &unk_1E65D5E50;
  v5[42] = &unk_1E65D5EA8;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Vortex Behavior Pole Axis Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Vortex Behavior Pole Axis"));
  OZChannelEnum::OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2120), 1u, &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  v6 = *((_DWORD *)this + 20);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Vortex Behavior Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 2376), v6, &v8, (OZChannelFolder *)((char *)this + 56), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Vortex Behavior Direction Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Vortex Behavior Direction"));
  OZChannelEnum::OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2528), &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2376), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2376));
}

void sub_1B2F8C1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZAttractedToBehavior *v12;
  OZChannelEnum *v13;
  OZChannel *v14;

  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZAttractedToBehavior::~OZAttractedToBehavior(v12);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior::OZVortexAroundBehavior(OZVortexAroundBehavior *this, OZVortexAroundBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZAttractedToBehavior::OZAttractedToBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D5910;
  *(_QWORD *)(v5 + 16) = &unk_1E65D5BF8;
  *(_QWORD *)(v5 + 48) = &unk_1E65D5E50;
  *(_QWORD *)(v5 + 336) = &unk_1E65D5EA8;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 2120), (OZVortexAroundBehavior *)((char *)a2 + 2120), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2376), (const OZChannelBase *)((char *)a2 + 2376), v6);
  *((_QWORD *)this + 297) = &off_1E65531D8;
  *((_QWORD *)this + 299) = &unk_1E6553538;
  OZChannelEnum::OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2528), (OZVortexAroundBehavior *)((char *)a2 + 2528), v6);
}

void sub_1B2F8C31C(_Unwind_Exception *a1)
{
  OZAttractedToBehavior *v1;
  OZChannelEnum *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZAttractedToBehavior::~OZAttractedToBehavior(v1);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior::~OZVortexAroundBehavior(OZVortexAroundBehavior *this)
{
  *(_QWORD *)this = &off_1E65D5910;
  *((_QWORD *)this + 2) = &unk_1E65D5BF8;
  *((_QWORD *)this + 6) = &unk_1E65D5E50;
  *((_QWORD *)this + 42) = &unk_1E65D5EA8;
  OZChannelEnum::~OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2528));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2376));
  OZChannelEnum::~OZChannelEnum((OZVortexAroundBehavior *)((char *)this + 2120));
  OZAttractedToBehavior::~OZAttractedToBehavior(this);
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZVortexAroundBehavior::~OZVortexAroundBehavior(OZVortexAroundBehavior *this)
{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 16));
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 48));
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 336));
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZVortexAroundBehavior::~OZVortexAroundBehavior((OZVortexAroundBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZVortexAroundBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;

  OZAttractedToBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return OZChannelBase::operator=(a1 + 2528, (uint64_t)v4 + 2528);
}

BOOL OZVortexAroundBehavior::isRebuildUIChannel(OZVortexAroundBehavior *this, OZChannelBase *a2)
{
  return a2->var6 == (OZChannelFolder *)((char *)this + 1528) || (OZChannelBase *)((char *)this + 2120) == a2;
}

void OZVortexAroundBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  const CMTime *v5;
  const void *v6;
  char *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  uint64_t i;
  const void *v14;
  char *v15;
  OZChannelBase *v16;
  OZChannelBase *v17;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = 0;
    v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v6 = *(const void **)(v2 + 16);
      if (v6)
      else
        v7 = 0;
      v8 = OZChannelBool3D::getX((OZChannelBool3D *)(v7 + 1528), v5, 0.0);
      v9 = OZChannelBool3D::getY((OZChannelBool3D *)(v7 + 1528), v5, 0.0);
      if (v8)
        v10 = 2;
      else
        v10 = 1;
      if (v9)
        v8 = v10;
      v11 = OZChannelBool3D::getZ((OZChannelBool3D *)(v7 + 1528), v5, 0.0);
      v4 |= v8 + v11 == 3;
      if (v8 + v11 == 3 && OZChannel::getValueAsInt((OZChannel *)(v7 + 2120), v5, 0.0) == 3)
        break;
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == a2)
      {
        v12 = 1;
        goto LABEL_16;
      }
    }
    v12 = 0;
LABEL_16:
    for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      v14 = *(const void **)(i + 16);
      if (v14)
      else
        v15 = 0;
      v16 = (OZChannelBase *)(v15 + 2120);
      if ((v4 & 1) != 0)
        OZChannelBase::resetFlag(v16, 0x400000, 1);
      else
        OZChannelBase::setFlag(v16, 0x400000, 1);
      OZChannelBase::enable((OZChannelBase *)(v15 + 2120), v4 & 1, 1);
      v17 = (OZChannelBase *)(v15 + 2376);
      if ((v12 & 1) != 0)
        OZChannelBase::setFlag(v17, 0x400000, 1);
      else
        OZChannelBase::resetFlag(v17, 0x400000, 1);
    }
  }
}

uint64_t OZVortexAroundBehavior::accumInitialValues(OZVortexAroundBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;
  double v11;
  double v12;
  double v13;
  int ValueAsInt;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int32x2_t v28;
  int64x2_t v29;
  double v30;
  int8x16_t v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  double v37;
  unsigned int v38;
  float64x2_t v39;
  double v40;
  CMTime v41;

  v41 = *(CMTime *)((char *)a2 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 664), &v41, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1224), &v41, 0.0);
  v9 = v8;
  v39 = 0uLL;
  v40 = 0.0;
  v38 = 0;
  result = OZAttractedToBehavior::getMaskVector((uint64_t)this, v39.f64, &v38);
  if (v38 >= 2)
  {
    result = (uint64_t)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
    if (result)
    {
      v36 = 0uLL;
      v37 = 0.0;
      result = (uint64_t)OZSimulationState::getNodePosition((uint64_t)a2, (CMTime *)((char *)a2 + 176), result, (OZSimulationState *)a3, &v36);
      v11 = v37 - *((double *)a2 + 2);
      v34 = vmulq_f64(vsubq_f64(v36, *(float64x2_t *)a2), v39);
      v35 = v11 * v40;
      v12 = vaddvq_f64(vmulq_f64(v34, v34)) + v35 * v35;
      v13 = sqrt(v12);
      if (v13 >= 10.0 && v13 <= v9)
      {
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 816), &v41, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1072), &v41, 0.0);
        if (ValueAsInt)
          v17 = v12;
        else
          v17 = v13;
        v18 = v7 / (v17 * v16);
        v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2120), &v41, 0.0);
        v20 = v38;
        v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2376), MEMORY[0x1E0CA2E68], 0.0);
        OZVortexBehavior::CalcThrowDirection(v34.f64, v39.f64, v20, v19, 0, v21, v32.f64);
        v22 = v32;
        v23 = v33;
        v24 = sqrt(v13* sqrt(v18 * v34.f64[0] * (v18 * v34.f64[0])+ v18 * v34.f64[1] * (v18 * v34.f64[1])+ v18 * v35 * (v18 * v35)));
        v25 = sqrt(vaddvq_f64(vmulq_f64(v22, v22)) + v23 * v23);
        if (v25 <= -0.000000100000001 || v25 >= 0.000000100000001)
        {
          v22 = vdivq_f64(v32, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25, 0));
          v23 = v33 / v25;
        }
        v31 = (int8x16_t)vmulq_n_f64(v22, v24);
        v26 = v24 * v23;
        v30 = v24;
        result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2528), MEMORY[0x1E0CA2E68], 0.0);
        v27 = -(v30 * v23);
        if ((_DWORD)result)
          v27 = v26;
        v28 = vdup_n_s32(result == 0);
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v29, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v31), v31));
        *((double *)a2 + 9) = v27 + *((double *)a2 + 9);
      }
    }
  }
  return result;
}

uint64_t OZVortexAroundBehavior::accumInitialValues(OZVortexAroundBehavior *this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t result;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  OZChannel *v18;
  OZChannel *v19;
  OZChannel *v20;
  uint64_t v21;
  int v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  unsigned int ValueAsInt;
  int v29;
  unsigned int v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int32x2_t v36;
  int64x2_t v37;
  double v38;
  int8x16_t v39;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  double v45;
  unsigned int v46;
  float64x2_t v47;
  double v48;
  CMTime v49;

  v49 = *(CMTime *)((_BYTE *)a2 + 1);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 664), &v49, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1224), &v49, 0.0);
  v11 = v10;
  v47 = 0uLL;
  v48 = 0.0;
  v46 = 0;
  result = OZAttractedToBehavior::getMaskVector((uint64_t)this, v47.f64, &v46);
  if (v46 >= 2)
  {
    result = (uint64_t)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
    if (result)
    {
      v44 = 0uLL;
      v45 = 0.0;
      OZSimulationState::GetNodePosition(&v49, result, (OZSimulationState *)a4, &v44);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1072), &v49, 0.0);
      v14 = v13;
      result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2376), MEMORY[0x1E0CA2E68], 0.0);
      v15 = *(_QWORD *)a2;
      v16 = *((_QWORD *)a2 + 1);
      if (v16 != *(_QWORD *)a2 && a3 >= 1)
      {
        v17 = result;
        v18 = (OZChannel *)((char *)this + 816);
        v19 = (OZChannel *)((char *)this + 2120);
        v20 = (OZChannel *)((char *)this + 2528);
        v21 = v16 - 248;
        v22 = 1;
        do
        {
          v23 = v45 - *(double *)(v21 + 16);
          v42 = vmulq_f64(vsubq_f64(v44, *(float64x2_t *)v21), v47);
          v43 = v23 * v48;
          v24 = vaddvq_f64(vmulq_f64(v42, v42)) + v43 * v43;
          v25 = sqrt(v24);
          v26 = v25 >= 10.0 && v25 <= v11;
          if (v26)
          {
            if (OZChannel::getValueAsInt(v18, &v49, 0.0))
              v27 = v24;
            else
              v27 = v25;
            ValueAsInt = OZChannel::getValueAsInt(v19, &v49, 0.0);
            v29 = v46;
            v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 232) + 32))(*(_QWORD *)(v21 + 232));
            OZVortexBehavior::CalcThrowDirection(v42.f64, v47.f64, v29, ValueAsInt, v17, v30, v40.f64);
            v31 = v40;
            v32 = v41;
            v33 = sqrt(vaddvq_f64(vmulq_f64(v31, v31)) + v32 * v32);
            if (v33 <= -0.000000100000001 || v33 >= 0.000000100000001)
            {
              v31 = vdivq_f64(v40, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0));
              v32 = v41 / v33;
            }
            v34 = v9 / (v14 * v27);
            v38 = sqrt(v25* sqrt(v34 * v42.f64[0] * (v34 * v42.f64[0])+ v34 * v42.f64[1] * (v34 * v42.f64[1])+ v34 * v43 * (v34 * v43)));
            v39 = (int8x16_t)vmulq_n_f64(v31, v38);
            result = OZChannel::getValueAsInt(v20, MEMORY[0x1E0CA2E68], 0.0);
            v35 = -(v38 * v32);
            if ((_DWORD)result)
              v35 = v38 * v32;
            v36 = vdup_n_s32(result == 0);
            v37.i64[0] = v36.u32[0];
            v37.i64[1] = v36.u32[1];
            *(float64x2_t *)(v21 + 56) = vaddq_f64(*(float64x2_t *)(v21 + 56), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v37, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v39), v39));
            *(double *)(v21 + 72) = v35 + *(double *)(v21 + 72);
            v15 = *(_QWORD *)a2;
          }
          if (v21 == v15)
            break;
          v21 -= 248;
          v26 = v22++ < a3;
        }
        while (v26);
      }
    }
  }
  return result;
}

void OZVortexBehavior::OZVortexBehavior(OZVortexBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  unsigned int v6;
  PCString v7;
  PCString v8;

  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D5EE8;
  v5[2] = &unk_1E65D61D8;
  v5[6] = &unk_1E65D6430;
  v5[42] = &unk_1E65D6488;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Vortex Behavior Pole Axis Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Vortex Behavior Pole Axis"));
  OZChannelEnum::OZChannelEnum((OZVortexBehavior *)((char *)this + 2248), 1u, &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  v6 = *((_DWORD *)this + 20);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Vortex Behavior Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 2504), v6, &v8, (OZChannelFolder *)((char *)this + 56), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Vortex Behavior Direction Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Vortex Behavior Direction"));
  OZChannelEnum::OZChannelEnum((OZVortexBehavior *)((char *)this + 2656), &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 344), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 344), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2504), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2504));
}

void sub_1B2F8CE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZAttractorBehavior *v12;
  OZChannelEnum *v13;
  OZChannel *v14;

  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZAttractorBehavior::~OZAttractorBehavior(v12);
  _Unwind_Resume(a1);
}

void OZVortexBehavior::OZVortexBehavior(OZVortexBehavior *this, OZVortexBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZAttractorBehavior::OZAttractorBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D5EE8;
  *(_QWORD *)(v5 + 16) = &unk_1E65D61D8;
  *(_QWORD *)(v5 + 48) = &unk_1E65D6430;
  *(_QWORD *)(v5 + 336) = &unk_1E65D6488;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 2248), (OZVortexBehavior *)((char *)a2 + 2248), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2504), (const OZChannelBase *)((char *)a2 + 2504), v6);
  *((_QWORD *)this + 313) = &off_1E65531D8;
  *((_QWORD *)this + 315) = &unk_1E6553538;
  OZChannelEnum::OZChannelEnum((OZVortexBehavior *)((char *)this + 2656), (OZVortexBehavior *)((char *)a2 + 2656), v6);
}

void sub_1B2F8CF50(_Unwind_Exception *a1)
{
  OZAttractorBehavior *v1;
  OZChannelEnum *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZAttractorBehavior::~OZAttractorBehavior(v1);
  _Unwind_Resume(a1);
}

void OZVortexBehavior::~OZVortexBehavior(OZVortexBehavior *this)
{
  *(_QWORD *)this = &off_1E65D5EE8;
  *((_QWORD *)this + 2) = &unk_1E65D61D8;
  *((_QWORD *)this + 6) = &unk_1E65D6430;
  *((_QWORD *)this + 42) = &unk_1E65D6488;
  OZChannelEnum::~OZChannelEnum((OZVortexBehavior *)((char *)this + 2656));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2504));
  OZChannelEnum::~OZChannelEnum((OZVortexBehavior *)((char *)this + 2248));
  OZAttractorBehavior::~OZAttractorBehavior(this);
}

{
  OZVortexBehavior::~OZVortexBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZVortexBehavior::~OZVortexBehavior(OZVortexBehavior *this)
{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 16));
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 48));
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 336));
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZVortexBehavior::~OZVortexBehavior((OZVortexBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZVortexBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;

  OZAttractorBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return OZChannelBase::operator=(a1 + 2656, (uint64_t)v4 + 2656);
}

BOOL OZVortexBehavior::isRebuildUIChannel(OZVortexBehavior *this, OZChannelBase *a2)
{
  return a2->var6 == (OZChannelFolder *)((char *)this + 1656)
      || (OZChannelBase *)((char *)this + 2248) == a2
      || OZTransitiveBehavior::isRebuildUIChannel(this, a2);
}

void OZVortexBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  const CMTime *v5;
  const void *v6;
  char *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  uint64_t i;
  const void *v14;
  char *v15;
  OZChannelBase *v16;
  OZChannelBase *v17;

  OZTransitiveBehavior::updateHiddenFlags(a1, a2);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v4 = 0;
    v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v6 = *(const void **)(v3 + 16);
      if (v6)
      else
        v7 = 0;
      v8 = OZChannelBool3D::getX((OZChannelBool3D *)(v7 + 1656), v5, 0.0);
      v9 = OZChannelBool3D::getY((OZChannelBool3D *)(v7 + 1656), v5, 0.0);
      if (v8)
        v10 = 2;
      else
        v10 = 1;
      if (v9)
        v8 = v10;
      v11 = OZChannelBool3D::getZ((OZChannelBool3D *)(v7 + 1656), v5, 0.0);
      v4 |= v8 + v11 == 3;
      if (v8 + v11 == 3 && OZChannel::getValueAsInt((OZChannel *)(v7 + 2248), v5, 0.0) == 3)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == a2)
      {
        v12 = 1;
        goto LABEL_16;
      }
    }
    v12 = 0;
LABEL_16:
    for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      v14 = *(const void **)(i + 16);
      if (v14)
      else
        v15 = 0;
      v16 = (OZChannelBase *)(v15 + 2248);
      if ((v4 & 1) != 0)
        OZChannelBase::resetFlag(v16, 0x400000, 1);
      else
        OZChannelBase::setFlag(v16, 0x400000, 1);
      OZChannelBase::enable((OZChannelBase *)(v15 + 2248), v4 & 1, 1);
      v17 = (OZChannelBase *)(v15 + 2504);
      if ((v12 & 1) != 0)
        OZChannelBase::setFlag(v17, 0x400000, 1);
      else
        OZChannelBase::resetFlag(v17, 0x400000, 1);
    }
  }
}

uint64_t OZVortexBehavior::accumInitialValues(OZVortexBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  CMTime *v6;
  void *TransformNode;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  const CMTime *v16;
  unsigned int ValueAsInt;
  int v18;
  int v19;
  double v20;
  double v21;
  int32x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v28;
  double v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v37 = 0.0;
  v38 = 0.0;
  v39 = 0.0;
  v6 = (CMTime *)((char *)a2 + 176);
  TransformNode = OZSimulationBehavior::getTransformNode(this);
  OZSimulationState::getNodePosition((uint64_t)a2, v6, (uint64_t)TransformNode, (OZSimulationState *)a3, &v37);
  v8 = v37;
  v9 = v38;
  v10 = *(double *)a2;
  v11 = *((double *)a2 + 1);
  v12 = v39;
  v13 = *((double *)a2 + 2);
  v31 = 0.0;
  v32 = 0.0;
  v33 = 0.0;
  v30 = 0;
  result = OZAttractorBehavior::getMaskVector((uint64_t)this, &v31, &v30);
  if (v30 >= 2)
  {
    v34 = (v8 - v10) * v31;
    v35 = (v9 - v11) * v32;
    v36 = (v12 - v13) * v33;
    v15 = sqrt(v34 * v34 + v35 * v35 + v36 * v36);
    if (v15 <= -0.0000001 || v15 >= 0.0000001)
    {
      v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2248), MEMORY[0x1E0CA2E68], 0.0);
      v18 = v30;
      v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2504), v16, 0.0);
      OZVortexBehavior::CalcThrowDirection(&v34, &v31, v18, ValueAsInt, v19, 0, v28.f64);
      v20 = v29;
      v26 = v28;
      v28 = 0uLL;
      v29 = 0.0;
      OZAttractorBehavior::calcAttraction(this, (uint64_t)a2, (OZSimulationState *)a3, v28.f64);
      v25 = sqrt(v15 * sqrt(v28.f64[0] * v28.f64[0] + v28.f64[1] * v28.f64[1] + v29 * v29));
      v27 = (int8x16_t)vmulq_n_f64(v26, v25);
      result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2656), v16, 0.0);
      v21 = -(v20 * v25);
      v22 = vdup_n_s32(result == 0);
      v23.i64[0] = v22.u32[0];
      v23.i64[1] = v22.u32[1];
      v24 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v23, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v27), v27);
      if ((_DWORD)result)
        v21 = v20 * v25;
      *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), v24);
      *((double *)a2 + 9) = *((double *)a2 + 9) + v21;
    }
  }
  return result;
}

void OZVortexBehavior::CalcThrowDirection(double *a1@<X0>, double *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, double *a7@<X8>)
{
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  int v44;
  unsigned int v45;
  __double2 v47;
  double v48;
  double v50;
  double v52[4];
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a3 == 2)
  {
    v8 = a2[1];
    v9 = *a2 >= 0.0000001 || *a2 <= -0.0000001;
    v10 = 0.0;
    if (v9)
      v11 = 0.0;
    else
      v11 = 1.0;
    if (v8 >= 0.0000001 || v8 <= -0.0000001)
      v13 = 0.0;
    else
      v13 = 1.0;
    v14 = a2[2];
    if (v14 < 0.0000001 && v14 > -0.0000001)
      v10 = 1.0;
    v16 = a1[1];
    v17 = a1[2];
    v18 = v16 * v10 - v17 * v13;
    v19 = v11 * v17 - v10 * *a1;
    v20 = v13 * *a1 - v16 * v11;
    goto LABEL_46;
  }
  if (a4 != 3)
  {
    v55 = 0.0;
    v56 = 0.0;
    v53 = 1.0;
    v54 = 0.0;
    v57 = 1.0;
    v58 = 0.0;
    v59 = 0.0;
    v60 = 0.0;
    v61 = 1.0;
    v27 = &v53 + 3 * a4;
    v29 = v27[1];
    v28 = v27[2];
    v31 = *a1;
    v30 = a1[1];
    v32 = a1[2];
    v33 = v30 * v28 - v32 * v29;
    v34 = v32 * *v27 - v28 * *a1;
    v35 = v29 * *a1 - v30 * *v27;
    if (v35 * v35 + v33 * v33 + v34 * v34 <= 0.0001)
    {
      v38 = &v53 + 3 * ((a4 + 2) % 3);
      v18 = -*v38;
      v19 = -v38[1];
      v20 = -v38[2];
    }
    else
    {
      v36 = &v53 + 3 * ((a4 + 1) % 3);
      if (v33 * *v36 + v34 * v36[1] + v35 * v36[2] >= 0.0)
      {
        v37 = v33;
      }
      else
      {
        v35 = -v35;
        v34 = -v34;
        v37 = -v33;
      }
      v18 = v30 * v35 - v32 * v34;
      v19 = v32 * v37 - v31 * v35;
      v20 = v31 * v34 - v30 * v37;
    }
    goto LABEL_46;
  }
  v21 = *a1;
  v22 = a1[1];
  v23 = a1[2];
  if (*a1 < v22)
  {
    if (v21 < v23)
    {
      v24 = 1.0;
      v25 = 0.0;
      v26 = 0.0;
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v22 >= v23)
  {
LABEL_32:
    v26 = 0.0;
    v25 = 1.0;
    goto LABEL_33;
  }
  v26 = 1.0;
  v25 = 0.0;
LABEL_33:
  v24 = 0.0;
LABEL_34:
  v39 = v26 * v23 - v22 * v25;
  v40 = v21 * v25 - v24 * v23;
  v41 = v22 * v24 - v21 * v26;
  v42 = sqrt(v41 * v41 + v39 * v39 + v40 * v40);
  if (v42 <= -0.000000100000001 || v42 >= 0.000000100000001)
  {
    v39 = v39 / v42;
    v40 = v40 / v42;
    v41 = v41 / v42;
  }
  v43 = -32;
  v44 = -1640531527;
  v45 = a6;
  do
  {
    a6 += (a5 + 16 * v45) ^ (v44 + v45) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1 + (v45 >> 5));
    v45 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * a6) ^ (v44 + a6) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (a6 >> 5));
    v44 -= 1640531527;
  }
  while (!__CFADD__(v43++, 1));
  v47 = __sincos_stret((double)(v45 ^ a6) / 4294967300.0 * 6.28318531 * 0.5);
  v48 = sqrt(v21 * v21 + v22 * v22 + v23 * v23);
  if (v48 < 0.000000100000001 && v48 > -0.000000100000001)
    v48 = 1.0;
  v52[0] = v47.__cosval;
  v52[1] = v21 / v48 * v47.__sinval;
  v52[2] = v22 / v48 * v47.__sinval;
  v52[3] = v23 / v48 * v47.__sinval;
  v53 = 1.0;
  v54 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  v57 = 1.0;
  v58 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  v61 = 1.0;
  PCMatrix33Tmpl<double>::setRotationFromQuaternion(&v53, v52);
  v18 = v39 * v53 + v40 * v54 + v41 * v55;
  v19 = v39 * v56 + v40 * v57 + v41 * v58;
  v20 = v39 * v59 + v40 * v60 + v41 * v61;
LABEL_46:
  v50 = sqrt(v20 * v20 + v19 * v19 + v18 * v18);
  if (v50 < 0.000000100000001 && v50 > -0.000000100000001)
    v50 = 1.0;
  *a7 = v18 / v50;
  a7[1] = v19 / v50;
  a7[2] = v20 / v50;
}

uint64_t OZVortexBehavior::accumInitialValues(OZVortexBehavior *this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  void *TransformNode;
  uint64_t result;
  unsigned int ValueAsInt;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  const CMTime *v15;
  double v16;
  double v17;
  int v18;
  unsigned int v19;
  double v20;
  float64x2_t v21;
  double v22;
  int32x2_t v23;
  int64x2_t v24;
  float64x2_t v25;
  double v27;
  float64x2_t v28;
  int8x16_t v29;
  CMTime v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  unsigned int v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  double v39;
  CMTime v40;

  v40 = *(CMTime *)((_BYTE *)a2 + 1);
  v38 = 0uLL;
  v39 = 0.0;
  TransformNode = OZSimulationBehavior::getTransformNode(this);
  OZSimulationState::GetNodePosition(&v40, (uint64_t)TransformNode, (OZSimulationState *)a4, &v38);
  v36 = 0uLL;
  v37 = 0.0;
  v35 = 0;
  result = OZAttractorBehavior::getMaskVector((uint64_t)this, v36.f64, &v35);
  if (v35 >= 2)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2248), MEMORY[0x1E0CA2E68], 0.0);
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2504), &v40, 0.0);
    v11 = *((_QWORD *)a2 + 1);
    if (v11 != *(_QWORD *)a2 && a3 >= 1)
    {
      v12 = result;
      v13 = v11 - 248;
      v14 = 1;
      v15 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v16 = v39 - *(double *)(v13 + 16);
        v33 = vmulq_f64(vsubq_f64(v38, *(float64x2_t *)v13), v36);
        v34 = v16 * v37;
        v17 = sqrt(vaddvq_f64(vmulq_f64(v33, v33)) + v34 * v34);
        if (v17 > -0.0000001 && v17 < 0.0000001)
          break;
        v18 = v35;
        v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 232) + 32))(*(_QWORD *)(v13 + 232));
        OZVortexBehavior::CalcThrowDirection(v33.f64, v36.f64, v18, ValueAsInt, v12, v19, v31.f64);
        v20 = v32;
        v21 = v31;
        v31 = 0uLL;
        v32 = 0.0;
        v28 = v21;
        v30 = v40;
        OZAttractorBehavior::calcAttraction((uint64_t)this, &v30, v38.f64, (double *)v13, v31.f64);
        v27 = sqrt(v17 * sqrt(v31.f64[0] * v31.f64[0] + v31.f64[1] * v31.f64[1] + v32 * v32));
        v29 = (int8x16_t)vmulq_n_f64(v28, v27);
        result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2656), v15, 0.0);
        v22 = -(v20 * v27);
        v23 = vdup_n_s32(result == 0);
        v24.i64[0] = v23.u32[0];
        v24.i64[1] = v23.u32[1];
        v25 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v29), v29);
        if ((_DWORD)result)
          v22 = v20 * v27;
        *(float64x2_t *)(v13 + 56) = vaddq_f64(*(float64x2_t *)(v13 + 56), v25);
        *(double *)(v13 + 72) = *(double *)(v13 + 72) + v22;
        if (v13 == *(_QWORD *)a2)
          break;
        v13 -= 248;
      }
      while (v14++ < a3);
    }
  }
  return result;
}

double PCMatrix33Tmpl<double>::setRotationFromQuaternion(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = v2 * v2 + v3 * v3 + v4 * v4 + v5 * v5;
  v7 = 2.0 / v6;
  v8 = v6 <= 0.0;
  v9 = 0.0;
  if (!v8)
    v9 = v7;
  v10 = v3 * v9;
  v11 = v4 * v9;
  v12 = v5 * v9;
  v13 = v2 * v10;
  v14 = v2 * v11;
  v15 = v2 * v12;
  v16 = v3 * v10;
  v17 = v3 * v11;
  v18 = v3 * v12;
  v19 = v4 * v11;
  v20 = v4 * v12;
  v21 = v5 * v12;
  *a1 = 1.0 - (v19 + v21);
  a1[1] = v17 - v15;
  a1[2] = v18 + v14;
  a1[3] = v17 + v15;
  a1[4] = 1.0 - (v16 + v21);
  a1[5] = v20 - v13;
  a1[6] = v18 - v14;
  a1[7] = v20 + v13;
  result = 1.0 - (v16 + v19);
  a1[8] = result;
  return result;
}

void OZWindBehavior::OZWindBehavior(OZWindBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D64C8;
  v5[2] = &unk_1E65D67B0;
  v5[6] = &unk_1E65D6A08;
  v5[42] = &unk_1E65D6A60;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Wind Behavior Coefficient"));
  OZChannel3D::OZChannel3D((OZWindBehavior *)((char *)this + 504), 1.0, 1.0, 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Wind Behavior Wind Velocity"));
  OZChannel3D::OZChannel3D((OZWindBehavior *)((char *)this + 1096), &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "HUD Scale (Hidden)");
  OZChannelDouble::OZChannelDouble((OZWindBehavior *)((char *)this + 1688), &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 2, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Wind Dimension Type Enum (Hidden)");
  PCString::PCString(&v6, "Wind Dimension Type Enum (Hidden)");
  OZChannelEnum::OZChannelEnum((OZWindBehavior *)((char *)this + 1840), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 640), 5.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 792), 5.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1688), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1840), 0);
}

void sub_1B2F8DEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;
  OZChannel3D *v11;
  OZChannel3D *v12;
  OZChannel *v13;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel3D::~OZChannel3D(v12);
  OZChannel3D::~OZChannel3D(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void OZWindBehavior::OZWindBehavior(OZWindBehavior *this, OZWindBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D64C8;
  *(_QWORD *)(v5 + 16) = &unk_1E65D67B0;
  *(_QWORD *)(v5 + 48) = &unk_1E65D6A08;
  *(_QWORD *)(v5 + 336) = &unk_1E65D6A60;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel3D::OZChannel3D((OZChannel3D *)(v5 + 504), (OZWindBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel3D::OZChannel3D((OZWindBehavior *)((char *)this + 1096), (OZWindBehavior *)((char *)a2 + 1096), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1688), (const OZChannelBase *)((char *)a2 + 1688), v6);
  *((_QWORD *)this + 211) = &off_1E6551358;
  *((_QWORD *)this + 213) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZWindBehavior *)((char *)this + 1840), (OZWindBehavior *)((char *)a2 + 1840), v6);
}

void sub_1B2F8E010(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannel3D *v2;
  OZChannel3D *v3;
  OZChannel *v4;

  OZChannel::~OZChannel(v4);
  OZChannel3D::~OZChannel3D(v3);
  OZChannel3D::~OZChannel3D(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZWindBehavior::~OZWindBehavior(OZWindBehavior *this)
{
  *(_QWORD *)this = &off_1E65D64C8;
  *((_QWORD *)this + 2) = &unk_1E65D67B0;
  *((_QWORD *)this + 6) = &unk_1E65D6A08;
  *((_QWORD *)this + 42) = &unk_1E65D6A60;
  OZChannelEnum::~OZChannelEnum((OZWindBehavior *)((char *)this + 1840));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1688));
  *((_QWORD *)this + 137) = &off_1E65568E0;
  *((_QWORD *)this + 139) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1536));
  OZChannel2D::~OZChannel2D((OZWindBehavior *)((char *)this + 1096));
  *((_QWORD *)this + 63) = &off_1E65568E0;
  *((_QWORD *)this + 65) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannel2D::~OZChannel2D((OZWindBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZWindBehavior::~OZWindBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZWindBehavior::~OZWindBehavior(OZWindBehavior *this)
{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 16));
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 48));
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 336));
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZWindBehavior::~OZWindBehavior((OZWindBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZWindBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 504);
  OZChannelBase::operator=(a1 + 640, (uint64_t)v5 + 640);
  OZChannelBase::operator=(a1 + 792, (uint64_t)v5 + 792);
  OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
  OZChannelFolder::operator=(a1 + 1096);
  OZChannelBase::operator=(a1 + 1232, (uint64_t)v5 + 1232);
  OZChannelBase::operator=(a1 + 1384, (uint64_t)v5 + 1384);
  OZChannelBase::operator=(a1 + 1536, (uint64_t)v5 + 1536);
  OZChannelBase::operator=(a1 + 1688, (uint64_t)v5 + 1688);
  return OZChannelBase::operator=(a1 + 1840, (uint64_t)v5 + 1840);
}

uint64_t OZWindBehavior::parseBegin(OZWindBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin(this, a2);
  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 944), 0.0);
    (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 118) + 288))((char *)this + 944, 0);
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZWindBehavior::parseBegin(OZWindBehavior *this, PCSerializerReadStream *a2)
{
  OZWindBehavior::parseBegin((OZWindBehavior *)((char *)this - 48), a2);
  return 1;
}

double OZWindBehavior::accumForces(OZWindBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v5;
  double result;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v10;
  CMTime v11;

  v11 = *(CMTime *)((char *)a2 + 176);
  v9 = 0uLL;
  v10 = 0.0;
  v7 = 0uLL;
  v8 = 0.0;
  OZChannel3D::getValue((uint64_t)this + 504, &v11, &v9, 0.0);
  OZChannel3D::getValue((uint64_t)this + 1096, &v11, &v7, 0.0);
  v5 = (*((double *)a2 + 9) - v8) * v10;
  *((float64x2_t *)a2 + 8) = vsubq_f64(*((float64x2_t *)a2 + 8), vmulq_f64(vsubq_f64(*(float64x2_t *)((char *)a2 + 56), v7), v9));
  result = *((double *)a2 + 18) - v5;
  *((double *)a2 + 18) = result;
  return result;
}

void OZWriggleBehavior::OZWriggleBehavior(OZWriggleBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  unint64_t v6;
  PCString v7;
  PCString v8;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D6AA0;
  v5[2] = &unk_1E65D6DE0;
  v5[6] = &unk_1E65D7038;
  v5[42] = &unk_1E65D7090;
  v5[67] = &unk_1E65D70B8;
  v5[110] = 0;
  v5[109] = 0;
  v5[108] = v5 + 109;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 111));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Offset"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 992), 100.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Multiplier"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1144), 1.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Apply Mode Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Wriggle Behavior Apply Mode"));
  OZChannelEnum::OZChannelEnum((OZWriggleBehavior *)((char *)this + 1296), 0, &v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Frequency"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 1552), 1.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Phase"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 1704), &v8, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Num Octaves"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 1856), 10.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xCDu, 2, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Frequency Step"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2008), 2.0, &v8, (OZChannelFolder *)((char *)this + 56), 0xCEu, 2, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Noisiness"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2160), 0.5, &v8, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Link"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2312), 0, &v8, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Affect Objects"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2464), &v8, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 2616), &v8, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior Start Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2768), &v8, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wriggle Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZWriggleBehavior *)((char *)this + 2920), &v8, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::PCString(&v8, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3072), 0, &v8, (OZChannelFolder *)((char *)this + 56), 0xD6u, 2u, 0, 0);
  PCString::~PCString(&v8);
  *((_WORD *)this + 1612) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 1552), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1552), 2.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1704), 100.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1856), 1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 1856), 20.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2008), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2008), 10.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2160), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2160), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2160), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2160), 1.0);
  LODWORD(v6) = *(_DWORD *)((*(uint64_t (**)(OZWriggleBehavior *))(*(_QWORD *)this + 312))(this) + 24);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2616), (double)v6);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2616), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2768), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2920), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1296), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1296));
  OZChannelBase::resetFlag((OZChannelBase *)this + 22, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 22);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2616), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2616));
  *((_QWORD *)this + 79) = 0x4059000000000000;
}

void sub_1B2F8E9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelPercent *a11, OZChannel *a12, std::mutex *a13, OZChannel *a14, OZChannelEnum *a15, OZChannel *a16, PCString a17, PCString a18)
{
  OZSingleChannelBehavior *v18;
  OZChannel *v19;
  OZChannelBool *v20;
  OZChannel *v21;
  OZChannel *v22;
  OZChannel *v23;
  OZChannel *v24;
  OZChannel *v25;

  PCString::~PCString(&a18);
  OZChannel::~OZChannel(v21);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v19);
  OZChannelBool::~OZChannelBool(v20);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(v25);
  OZChannel::~OZChannel(v24);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a16);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannel::~OZChannel(a12);
  PCSharedMutex::~PCSharedMutex(a13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v18 + 864, *((_QWORD **)v18 + 109));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v18);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior::OZWriggleBehavior(OZWriggleBehavior *this, const OZWriggleBehavior *a2, char a3)
{
  _QWORD *v5;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *v5 = &off_1E65D6AA0;
  v5[2] = &unk_1E65D6DE0;
  v5[6] = &unk_1E65D7038;
  v5[42] = &unk_1E65D7090;
  v5[67] = &unk_1E65D70B8;
  v5[110] = 0;
  v5[109] = 0;
  v5[108] = v5 + 109;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 111));
  OZChannel::OZChannel((OZChannel *)((char *)this + 992), (const OZChannelBase *)((char *)a2 + 992), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 124) = &off_1E6551358;
  *((_QWORD *)this + 126) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1144), (const OZChannelBase *)((char *)a2 + 1144), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZWriggleBehavior *)((char *)this + 1296), (const OZWriggleBehavior *)((char *)a2 + 1296), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1552), (const OZChannelBase *)((char *)a2 + 1552), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 194) = &off_1E6551358;
  *((_QWORD *)this + 196) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1704), (const OZChannelBase *)((char *)a2 + 1704), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 213) = &off_1E6551358;
  *((_QWORD *)this + 215) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1856), (const OZChannelBase *)((char *)a2 + 1856), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 232) = &off_1E6551358;
  *((_QWORD *)this + 234) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2008), (const OZChannelBase *)((char *)a2 + 2008), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 251) = &off_1E6551358;
  *((_QWORD *)this + 253) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2160), (const OZChannelBase *)((char *)a2 + 2160), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 270) = &off_1E6551358;
  *((_QWORD *)this + 272) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2312), (const OZChannelBase *)((char *)a2 + 2312), (OZChannelFolder *)((char *)this + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2464), (const OZChannelBase *)a2 + 22, (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2616), (const OZChannelBase *)((char *)a2 + 2616), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 327) = &off_1E65531D8;
  *((_QWORD *)this + 329) = &unk_1E6553538;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2768), (const OZChannelBase *)((char *)a2 + 2768), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 346) = &off_1E6551358;
  *((_QWORD *)this + 348) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2920), (const OZChannelBase *)((char *)a2 + 2920), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 365) = &off_1E6551358;
  *((_QWORD *)this + 367) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3072), (const OZChannelBase *)((char *)a2 + 3072), (OZChannelFolder *)((char *)this + 56));
  *((_WORD *)this + 1612) = *((_WORD *)a2 + 1612);
}

void sub_1B2F8EE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannel *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannelEnum *a15, OZChannelPercent *a16, OZChannel *a17, std::mutex *a18)
{
  OZSingleChannelBehavior *v18;
  OZChannelBool *v19;
  OZChannelBool *v20;
  OZChannel *v21;
  OZChannel *v22;
  OZChannel *v23;

  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v21);
  OZChannelBool::~OZChannelBool(v20);
  OZChannelBool::~OZChannelBool(v19);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannel::~OZChannel(a17);
  PCSharedMutex::~PCSharedMutex(a18);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v18 + 864, *((_QWORD **)v18 + 109));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v18);
  _Unwind_Resume(a1);
}

void sub_1B2F8EEB0()
{
  JUMPOUT(0x1B2F8EE4CLL);
}

void sub_1B2F8EEB8()
{
  JUMPOUT(0x1B2F8EE54);
}

void sub_1B2F8EEC0()
{
  JUMPOUT(0x1B2F8EE5CLL);
}

void sub_1B2F8EEC8()
{
  JUMPOUT(0x1B2F8EE64);
}

void sub_1B2F8EED0()
{
  JUMPOUT(0x1B2F8EE6CLL);
}

void sub_1B2F8EED8()
{
  JUMPOUT(0x1B2F8EE74);
}

void sub_1B2F8EEE0()
{
  JUMPOUT(0x1B2F8EE7CLL);
}

void sub_1B2F8EEE8()
{
  JUMPOUT(0x1B2F8EE84);
}

void sub_1B2F8EEF0()
{
  JUMPOUT(0x1B2F8EE8CLL);
}

void sub_1B2F8EEF8()
{
  JUMPOUT(0x1B2F8EE94);
}

void OZWriggleBehavior::~OZWriggleBehavior(OZWriggleBehavior *this)
{
  *(_QWORD *)this = &off_1E65D6AA0;
  *((_QWORD *)this + 2) = &unk_1E65D6DE0;
  *((_QWORD *)this + 6) = &unk_1E65D7038;
  *((_QWORD *)this + 42) = &unk_1E65D7090;
  *((_QWORD *)this + 67) = &unk_1E65D70B8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3072));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2920));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2768));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2616));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2464));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2312));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1856));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1704));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1552));
  OZChannelEnum::~OZChannelEnum((OZWriggleBehavior *)((char *)this + 1296));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1144));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 992));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 888));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 864, *((_QWORD **)this + 109));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZWriggleBehavior::~OZWriggleBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZWriggleBehavior::~OZWriggleBehavior(OZWriggleBehavior *this)
{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 16));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 48));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 336));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 536));
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriggleBehavior::~OZWriggleBehavior((OZWriggleBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZWriggleBehavior::operator=(uint64_t a1, const void *a2)
{
  _WORD *v4;
  _WORD *v5;
  uint64_t result;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 992, (uint64_t)(v4 + 496));
  OZChannelBase::operator=(a1 + 1144, (uint64_t)(v5 + 572));
  OZChannelBase::operator=(a1 + 1296, (uint64_t)(v5 + 648));
  OZChannelBase::operator=(a1 + 1552, (uint64_t)(v5 + 776));
  OZChannelBase::operator=(a1 + 1704, (uint64_t)(v5 + 852));
  OZChannelBase::operator=(a1 + 1856, (uint64_t)(v5 + 928));
  OZChannelBase::operator=(a1 + 2008, (uint64_t)(v5 + 1004));
  OZChannelBase::operator=(a1 + 2160, (uint64_t)(v5 + 1080));
  OZChannelBase::operator=(a1 + 2312, (uint64_t)(v5 + 1156));
  OZChannelBase::operator=(a1 + 2464, (uint64_t)(v5 + 1232));
  OZChannelBase::operator=(a1 + 2616, (uint64_t)(v5 + 1308));
  OZChannelBase::operator=(a1 + 2768, (uint64_t)(v5 + 1384));
  OZChannelBase::operator=(a1 + 2920, (uint64_t)(v5 + 1460));
  result = OZChannelBase::operator=(a1 + 3072, (uint64_t)(v5 + 1536));
  *(_WORD *)(a1 + 3224) = v5[1612];
  return result;
}

uint64_t OZWriggleBehavior::sceneNodeDidLoad(OZWriggleBehavior *this)
{
  uint64_t result;

  result = OZSingleChannelBehavior::sceneNodeDidLoad(this);
  *((_WORD *)this + 1612) = 0;
  return result;
}

int8x8_t *OZWriggleBehavior::dirty(OZWriggleBehavior *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 888);
  PCSharedMutex::lock((std::mutex *)((char *)this + 888));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 864, *((_QWORD **)this + 109));
  *((_QWORD *)this + 108) = (char *)this + 872;
  *((_QWORD *)this + 110) = 0;
  *((_QWORD *)this + 109) = 0;
  PCSharedMutex::unlock(v2);
  return OZBehavior::dirty(this);
}

int8x8_t *`non-virtual thunk to'OZWriggleBehavior::dirty(OZWriggleBehavior *this)
{
  return OZWriggleBehavior::dirty((OZWriggleBehavior *)((char *)this - 16));
}

BOOL OZWriggleBehavior::isRebuildUIChannel(OZWriggleBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 1296) == a2;
}

OZChannelBase *OZWriggleBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  int ValueAsInt;
  uint64_t v5;
  int v6;
  const CMTime *v7;
  char *v8;
  uint64_t i;
  const void *v10;
  char *v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  uint64_t j;
  const void *v15;
  char *v16;
  int canAffectObjects;
  OZChannelBase *v18;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 1296), MEMORY[0x1E0CA2E68], 0.0);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 != a2)
  {
    v6 = ValueAsInt;
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v8 = *(char **)(v5 + 16);
      if (v8)
      if (v6 != OZChannel::getValueAsInt((OZChannel *)(v8 + 1296), v7, 0.0))
        break;
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a2)
      {
        for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          v10 = *(const void **)(i + 16);
          if (v10)
          else
            v11 = 0;
          v12 = (OZChannelBase *)(v11 + 992);
          v13 = (OZChannelBase *)(v11 + 1144);
          if (v6 == 2)
          {
            OZChannelBase::setFlag(v12, 0x400000, 1);
            OZChannelBase::resetFlag(v13, 0x400000, 1);
          }
          else
          {
            OZChannelBase::resetFlag(v12, 0x400000, 1);
            OZChannelBase::setFlag(v13, 0x400000, 1);
          }
        }
        goto LABEL_21;
      }
    }
    for (j = *(_QWORD *)(a2 + 8); j != a2; j = *(_QWORD *)(j + 8))
    {
      v15 = *(const void **)(j + 16);
      if (v15)
      else
        v16 = 0;
      OZChannelBase::resetFlag((OZChannelBase *)(v16 + 992), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)(v16 + 1144), 0x400000, 1);
    }
  }
LABEL_21:
  canAffectObjects = OZWriggleBehavior::canAffectObjects((OZWriggleBehavior *)a1);
  v18 = (OZChannelBase *)(a1 + 2464);
  if (canAffectObjects)
    return OZChannelBase::resetFlag(v18, 0x400000, 1);
  else
    return OZChannelBase::setFlag(v18, 0x400000, 1);
}

uint64_t OZWriggleBehavior::canAffectObjects(OZWriggleBehavior *this)
{
  OZChannelBase *ChanBase;
  uint64_t ObjectManipulator;
  char v3;

  ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase && (ObjectManipulator = OZChannelBase::getObjectManipulator(ChanBase)) != 0)
    v3 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator) + 8)+ 8), (int32x4_t)xmmword_1B3562C00)))) ^ 1;
  else
    v3 = 0;
  return v3 & 1;
}

OZSingleChanCurveNode *OZWriggleBehavior::createCurveNode(OZWriggleBehavior *this, OZChannel *a2, __n128 a3)
{
  OZChannel *ChanBase;
  unsigned int var3;
  int v7;
  OZChannel *v8;
  BOOL v9;
  OZSingleChanCurveNode *v10;

  OZSingleChannelBehavior::conformToChannel(this, a2, 1, a3);
  ChanBase = (OZChannel *)OZSingleChannelBehavior::getChanBase(this);
  var3 = a2->var3;
  if (ChanBase != a2 && a2)
  {
    v7 = 1;
    v8 = a2;
    do
    {
      v8 = (OZChannel *)v8->var6;
      if (v8 == ChanBase)
      {
        v9 = 1;
      }
      else
      {
        v7 *= 100;
        var3 += v8->var3 * v7;
        v9 = v8 == 0;
      }
    }
    while (!v9);
  }
  v10 = (OZSingleChanCurveNode *)operator new();
  OZSingleChanCurveNode::OZSingleChanCurveNode(v10, (OZWriggleBehavior *)((char *)this + 536), a2, var3);
  return v10;
}

void sub_1B2F8F53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior::didSkipApplyingToNonkeyframableChannel(OZWriggleBehavior *this, OZChannel *a2, __n128 a3)
{
  if (*((_BYTE *)this + 3225))
    OZSingleChannelBehavior::conformToChannel(this, a2, 0, a3);
}

BOOL OZWriggleBehavior::CompareKeys::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMTime v6;
  CMTime time1;

  if (*(_DWORD *)a2 != *(_DWORD *)a3)
    return *(_DWORD *)a2 < *(_DWORD *)a3;
  time1 = *(CMTime *)(a2 + 4);
  v6 = *(CMTime *)(a3 + 4);
  if (!CMTimeCompare(&time1, &v6))
    return *(double *)(a2 + 32) < *(double *)(a3 + 32);
  time1 = *(CMTime *)(a2 + 4);
  v6 = *(CMTime *)(a3 + 4);
  return CMTimeCompare(&time1, &v6) >> 31;
}

double OZWriggleBehavior::solveNode(OZWriggleBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  double v5;
  uint64_t v11;
  int v12;
  OZScene *v13;
  double v14;
  CMTime *v15;
  double v16;
  OZScene *v17;
  double v18;
  unsigned int ValueAsInt;
  double v20;
  double v21;
  double Seconds;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  unsigned int v31;
  int v32;
  int v33;
  double v34;
  int v35;
  double v36;
  double v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  double v48;
  long double v49;
  double v50;
  double v51;
  unsigned int v52;
  int v53;
  int v54;
  double v55;
  int v56;
  double v57;
  double v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  double v68;
  long double v69;
  double v70;
  double v71;
  unsigned int v72;
  int v73;
  int v74;
  double v75;
  int v76;
  double v77;
  double v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  double v88;
  long double v89;
  double v90;
  unsigned int v91;
  int v92;
  int v93;
  double v94;
  int v95;
  double v96;
  int v97;
  double v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  double v107;
  long double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double *v114;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  CMTime time;
  __n128 v124;
  CMTimeEpoch v125;
  CMTime v126;
  __n128 v127;
  CMTimeEpoch v128;
  CMTime v129;
  CMTime v130[2];
  _BYTE v131[32];
  double v132;
  CMTime v133;
  CMTime v134;
  CMTime v135;
  __n128 v136;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;

  memset(&v135, 0, sizeof(v135));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                       + 336))(&v135, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
  v134 = v135;
  if ((*(unsigned int (**)(OZWriggleBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v134, 0, 1, 1)&& (*(uint64_t (**)(OZWriggleBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v133 = v135;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3072), MEMORY[0x1E0CA2E68], 0.0))
    {
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&time2);
      *(CMTime *)v131 = v133;
      time1 = time2;
      PC_CMTimeSaferAdd((CMTime *)v131, &time1, (uint64_t)v130);
      v133 = v130[0];
    }
    *(_QWORD *)&v131[24] = 0;
    *(_DWORD *)v131 = a2;
    *(_OWORD *)&v131[4] = *(_OWORD *)&a3->value;
    *(_QWORD *)&v131[20] = a3->epoch;
    v132 = a4;
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 888));
    v11 = std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::find<OZWriggleBehavior::ValueCacheKey>((uint64_t)this + 864, (uint64_t)v131);
    if ((OZWriggleBehavior *)((char *)this + 872) != (OZWriggleBehavior *)v11
      && *(_BYTE *)(v11 + 88)
      && *(double *)(v11 + 72) == a5)
    {
      v12 = 0;
      v5 = *(double *)(v11 + 80);
    }
    else
    {
      v12 = 1;
    }
    PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 888));
    if (v12)
    {
      (*(void (**)(CMTime *__return_ptr, OZWriggleBehavior *))(*(_QWORD *)this + 608))(v130, this);
      memset(&v129, 0, sizeof(v129));
      v136 = *(__n128 *)&v130[0].value;
      epoch = v130[0].epoch;
      v13 = (OZScene *)(*(uint64_t (**)(OZWriggleBehavior *))(*(_QWORD *)this + 336))(this);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2768), &v133, 0.0);
      OZScene::getTimeForFrame(v13, v14, &v127);
      *(__n128 *)&time1.value = v136;
      time1.epoch = epoch;
      *(__n128 *)&time2.value = v127;
      time2.epoch = v128;
      v15 = &v129;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v129);
      v127 = 0uLL;
      v128 = 0;
      OZBehavior::getFrameDuration(this, &v124);
      time1 = v130[0];
      time2 = v130[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v136);
      *(__n128 *)&time1.value = v136;
      time1.epoch = epoch;
      *(__n128 *)&time2.value = v124;
      time2.epoch = v125;
      v16 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v126);
      v17 = (OZScene *)(*(uint64_t (**)(OZWriggleBehavior *, double))(*(_QWORD *)this + 336))(this, v16);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2920), &v133, 0.0);
      OZScene::getTimeForFrame(v17, v18, &v136);
      time1 = v126;
      *(__n128 *)&time2.value = v136;
      time2.epoch = epoch;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v127);
      v136 = 0uLL;
      epoch = 0;
      time1 = v135;
      time2 = v129;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        time1 = v135;
        *(__n128 *)&time2.value = v127;
        time2.epoch = v128;
        if (CMTimeCompare(&time1, &time2) <= 0)
          v15 = &v135;
        else
          v15 = (CMTime *)&v127;
      }
      v136 = *(__n128 *)&v15->value;
      epoch = v15->epoch;
      time1 = *v15;
      time2 = v129;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v136);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2616), &v133, 0.0);
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 2312), &v133, 0.0)
        && OZSingleChannelBehavior::getChanBase(this))
      {
        ValueAsInt ^= a2 & (*(unsigned __int8 *)(OZSingleChannelBehavior::getChanBase(this) + 57) << 27 >> 31);
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2464), &v133, 0.0)
        && OZWriggleBehavior::canAffectObjects(this))
      {
        ValueAsInt ^= a4;
      }
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1704), &v133, 0.0);
      v21 = v20;
      *(__n128 *)&time.value = v136;
      time.epoch = epoch;
      Seconds = CMTimeGetSeconds(&time);
      v23 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1856), &v133, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1552), &v133, 0.0);
      v25 = v24;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2008), &v133, 0.0);
      v122 = v26;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2160), &v133, 0.0);
      v121 = v27;
      v28 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1296), &v133, 0.0);
      v5 = a5;
      v29 = v21 + Seconds;
      switch(v28)
      {
        case 0:
          if (v23 < 1)
          {
            v50 = 0.5;
          }
          else
          {
            v30 = a5;
            v31 = 0;
            v117 = v29 + v29;
            v32 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            v33 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            v34 = -1.0;
            v35 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            v36 = 0.0;
            v37 = 1.0;
            do
            {
              v38 = (int)(v117 * v25);
              if (v38)
              {
                v39 = -32;
                v40 = -1640531527;
                v41 = v31;
                v42 = ValueAsInt;
                do
                {
                  v41 += (v38 + 16 * v42) ^ (v42 + v40) ^ (v32 + (v42 >> 5));
                  v42 += (v33 + 16 * v41) ^ (v40 + v41) ^ (v35 + (v41 >> 5));
                  v40 -= 1640531527;
                  v43 = __CFADD__(v39++, 1);
                }
                while (!v43);
                v34 = (double)(int)(v42 ^ v41) / 2147483650.0;
              }
              v44 = -32;
              v45 = -1640531527;
              v46 = v31;
              v47 = ValueAsInt;
              do
              {
                v46 += (v38 + 1 + 16 * v47) ^ (v47 + v45) ^ (v32 + (v47 >> 5));
                v47 += (v33 + 16 * v46) ^ (v45 + v46) ^ (v35 + (v46 >> 5));
                v45 -= 1640531527;
                v43 = __CFADD__(v44++, 1);
              }
              while (!v43);
              v48 = (double)(int)(v47 ^ v46) / 2147483650.0;
              v49 = cos((v117 * v25 - (double)v38) * 3.14159265);
              v36 = v36 + v37 * ((1.0 - (1.0 - v49) * 0.5) * v34 + (1.0 - v49) * 0.5 * v48);
              v25 = v122 * v25;
              v37 = v121 * v37;
              ++v31;
              v34 = 0.0;
            }
            while (v31 != v23);
            v50 = (v36 + 1.0) * 0.5;
            a5 = v30;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), &v133, 0.0);
          v110 = v109 * v50;
          goto LABEL_78;
        case 1:
          if (v23 < 1)
          {
            v70 = 0.5;
          }
          else
          {
            v51 = a5;
            v52 = 0;
            v118 = v29 + v29;
            v53 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            v54 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            v55 = -1.0;
            v56 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            v57 = 0.0;
            v58 = 1.0;
            do
            {
              v59 = (int)(v118 * v25);
              if (v59)
              {
                v60 = -32;
                v61 = -1640531527;
                v62 = v52;
                v63 = ValueAsInt;
                do
                {
                  v62 += (v59 + 16 * v63) ^ (v63 + v61) ^ (v53 + (v63 >> 5));
                  v63 += (v54 + 16 * v62) ^ (v61 + v62) ^ (v56 + (v62 >> 5));
                  v61 -= 1640531527;
                  v43 = __CFADD__(v60++, 1);
                }
                while (!v43);
                v55 = (double)(int)(v63 ^ v62) / 2147483650.0;
              }
              v64 = -32;
              v65 = -1640531527;
              v66 = v52;
              v67 = ValueAsInt;
              do
              {
                v66 += (v59 + 1 + 16 * v67) ^ (v67 + v65) ^ (v53 + (v67 >> 5));
                v67 += (v54 + 16 * v66) ^ (v65 + v66) ^ (v56 + (v66 >> 5));
                v65 -= 1640531527;
                v43 = __CFADD__(v64++, 1);
              }
              while (!v43);
              v68 = (double)(int)(v67 ^ v66) / 2147483650.0;
              v69 = cos((v118 * v25 - (double)v59) * 3.14159265);
              v57 = v57 + v58 * ((1.0 - (1.0 - v69) * 0.5) * v55 + (1.0 - v69) * 0.5 * v68);
              v25 = v122 * v25;
              v58 = v121 * v58;
              ++v52;
              v55 = 0.0;
            }
            while (v52 != v23);
            v70 = (v57 + 1.0) * 0.5;
            a5 = v51;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), &v133, 0.0);
          v5 = a5 - v111 * v70;
          break;
        case 2:
          if (v23 < 1)
          {
            v90 = 0.5;
          }
          else
          {
            v71 = a5;
            v72 = 0;
            v119 = v29 + v29;
            v73 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            v74 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            v75 = 0.0;
            v76 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            v77 = 1.0;
            v78 = 1.0;
            do
            {
              v79 = (int)(v119 * v25);
              if (v79)
              {
                v80 = -32;
                v81 = -1640531527;
                v82 = v72;
                v83 = ValueAsInt;
                do
                {
                  v82 += (v79 + 16 * v83) ^ (v83 + v81) ^ (v73 + (v83 >> 5));
                  v83 += (v74 + 16 * v82) ^ (v81 + v82) ^ (v76 + (v82 >> 5));
                  v81 -= 1640531527;
                  v43 = __CFADD__(v80++, 1);
                }
                while (!v43);
                v78 = (double)(int)(v83 ^ v82) / 2147483650.0;
              }
              v84 = -32;
              v85 = -1640531527;
              v86 = v72;
              v87 = ValueAsInt;
              do
              {
                v86 += (v79 + 1 + 16 * v87) ^ (v87 + v85) ^ (v73 + (v87 >> 5));
                v87 += (v74 + 16 * v86) ^ (v85 + v86) ^ (v76 + (v86 >> 5));
                v85 -= 1640531527;
                v43 = __CFADD__(v84++, 1);
              }
              while (!v43);
              v88 = (double)(int)(v87 ^ v86) / 2147483650.0;
              v89 = cos((v119 * v25 - (double)v79) * 3.14159265);
              v75 = v75 + v77 * ((1.0 - (1.0 - v89) * 0.5) * v78 + (1.0 - v89) * 0.5 * v88);
              v25 = v122 * v25;
              v77 = v121 * v77;
              ++v72;
              v78 = 0.0;
            }
            while (v72 != v23);
            v90 = (v75 + 1.0) * 0.5;
            a5 = v71;
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1144), &v133, 0.0);
          v5 = v112 * v90 * a5;
          break;
        case 3:
          v116 = a5;
          if (v23 < 1)
          {
            v94 = 0.0;
          }
          else
          {
            v91 = 0;
            v120 = v29 + v29;
            v92 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
            v93 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
            v94 = 0.0;
            v95 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
            v96 = 1.0;
            do
            {
              v97 = (int)(v120 * v25);
              v98 = 0.0;
              if (v97)
              {
                v99 = -32;
                v100 = -1640531527;
                v101 = v91;
                v102 = ValueAsInt;
                do
                {
                  v101 += (v97 + 16 * v102) ^ (v102 + v100) ^ (v92 + (v102 >> 5));
                  v102 += (v93 + 16 * v101) ^ (v100 + v101) ^ (v95 + (v101 >> 5));
                  v100 -= 1640531527;
                  v43 = __CFADD__(v99++, 1);
                }
                while (!v43);
                v98 = (double)(int)(v102 ^ v101) / 2147483650.0;
              }
              v103 = -32;
              v104 = -1640531527;
              v105 = v91;
              v106 = ValueAsInt;
              do
              {
                v105 += (v97 + 1 + 16 * v106) ^ (v106 + v104) ^ (v92 + (v106 >> 5));
                v106 += (v93 + 16 * v105) ^ (v104 + v105) ^ (v95 + (v105 >> 5));
                v104 -= 1640531527;
                v43 = __CFADD__(v103++, 1);
              }
              while (!v43);
              v107 = (double)(int)(v106 ^ v105) / 2147483650.0;
              v108 = cos((v120 * v25 - (double)v97) * 3.14159265);
              v94 = v94 + v96 * ((1.0 - (1.0 - v108) * 0.5) * v98 + (1.0 - v108) * 0.5 * v107);
              v25 = v122 * v25;
              v96 = v121 * v96;
              ++v91;
            }
            while (v91 != v23);
          }
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 992), &v133, 0.0);
          v110 = v94 * v113;
          a5 = v116;
LABEL_78:
          v5 = v110 + a5;
          break;
        default:
          break;
      }
      PCSharedMutex::lock((std::mutex *)((char *)this + 888));
      time1.value = (CMTimeValue)v131;
      v114 = (double *)std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__emplace_unique_key_args<OZWriggleBehavior::ValueCacheKey,std::piecewise_construct_t const&,std::tuple<OZWriggleBehavior::ValueCacheKey const&>,std::tuple<>>((uint64_t **)this + 108, (uint64_t)v131, (uint64_t)&std::piecewise_construct, &time1);
      v114[9] = a5;
      v114[10] = v5;
      *((_BYTE *)v114 + 88) = 1;
      PCSharedMutex::unlock((std::mutex *)((char *)this + 888));
    }
    return v5;
  }
  return a5;
}

void sub_1B2F90244(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZWriggleBehavior::solveNode(OZWriggleBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZWriggleBehavior::solveNode((OZWriggleBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZWriggleBehavior::didSetChannelInfo(OZWriggleBehavior *this, const OZChannelInfo *a2, OZChannel *a3)
{
  OZChannel *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = (OZChannel *)((char *)this + 992);
  v6 = *(double *)(*((_QWORD *)this + 140) + 40);
  OZChannel::setInfo((OZChannel *)((char *)this + 992), a2);
  v7 = 1.0;
  if (!*((_BYTE *)this + 3224))
    v7 = v6 / *((double *)a2 + 5);
  v8 = *((double *)a2 + 2);
  if (v8 == -3.40282347e38 || (v9 = *((double *)a2 + 1), v9 == 3.40282347e38))
  {
    if (fabs(*(double *)(*((_QWORD *)this + 140) + 40) + -57.2957795) >= 0.0000001)
      v10 = 100.0;
    else
      v10 = 6.28318531;
  }
  else
  {
    v10 = v9 - v8;
    if (!*((_BYTE *)this + 3224))
    {
      v11 = *((double *)this + 79);
      if (v11 < 3.40282347e38)
        v7 = v7 * (v10 / v11);
    }
  }
  if (vabdd_f64(1.0, v7) >= 0.0000001)
    OZChannel::scaleChannel(v5, v7);
  OZChannel::setSliderMin(v5, 0.0);
  OZChannel::setSliderMax(v5, v10);
  v12 = 0.0;
  (*(void (**)(_QWORD, double *))(**(_QWORD **)(*((_QWORD *)this + 138) + 8) + 256))(*(_QWORD *)(*((_QWORD *)this + 138) + 8), &v12);
  if (v12 < v10)
    OZChannel::setMax(v5, v10);
}

uint64_t OZWriggleBehavior::parseBegin(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v4;
  BOOL v5;

  *((_BYTE *)this + 3224) = 0;
  v4 = *((_DWORD *)a2 + 26);
  if (v4 < 5 || (v4 == 5 ? (v5 = *((_DWORD *)a2 + 27) > 6u) : (v5 = 1), !v5))
  {
    *((_BYTE *)this + 3225) = 1;
    OZChannel::setValue((OZChannel *)((char *)this + 3072), MEMORY[0x1E0CA2E68], 1.0, 0);
  }
  return OZSingleChannelBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZWriggleBehavior::parseBegin(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  return OZWriggleBehavior::parseBegin((OZWriggleBehavior *)((char *)this - 48), a2);
}

uint64_t OZWriggleBehavior::parseElement(OZWriggleBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v7;

  if (*((_DWORD *)a3 + 2) == 110)
  {
    v7 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v7);
    if (v7 == *((_DWORD *)this + 254))
      *((_BYTE *)this + 3224) = 1;
  }
  return OZSingleChannelBehavior::parseElement((OZTimeMarkerSet **)this, a2, a3);
}

uint64_t `non-virtual thunk to'OZWriggleBehavior::parseElement(OZWriggleBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZWriggleBehavior::parseElement((OZWriggleBehavior *)((char *)this - 48), a2, a3);
}

uint64_t OZWriggleBehavior::parseEnd(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  if (!*((_BYTE *)this + 3224))
    *((_QWORD *)this + 79) = 0x4059000000000000;
  return OZSingleChannelBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZWriggleBehavior::parseEnd(OZWriggleBehavior *this, PCSerializerReadStream *a2)
{
  if (!*((_BYTE *)this + 3176))
    *((_QWORD *)this + 73) = 0x4059000000000000;
  return OZSingleChannelBehavior::parseEnd((OZWriggleBehavior *)((char *)this - 48), a2);
}

uint64_t std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::find<OZWriggleBehavior::ValueCacheKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = a1 + 8;
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    a1 = OZWriggleBehavior::CompareKeys::operator()(a1, (uint64_t)(v3 + 4), a2);
    v6 = v3 + 1;
    if (!(_DWORD)a1)
    {
      v6 = v3;
      v5 = (uint64_t)v3;
    }
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v5 == v2 || OZWriggleBehavior::CompareKeys::operator()(a1, a2, v5 + 32))
    return v2;
  return v5;
}

_OWORD *std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__emplace_unique_key_args<OZWriggleBehavior::ValueCacheKey,std::piecewise_construct_t const&,std::tuple<OZWriggleBehavior::ValueCacheKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__find_equal<OZWriggleBehavior::ValueCacheKey>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x60uLL);
    v9 = *((_QWORD *)*a4 + 4);
    v10 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v10;
    *((_QWORD *)v7 + 10) = 0;
    *((_QWORD *)v7 + 11) = 0;
    *((_QWORD *)v7 + 8) = v9;
    *((_QWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,std::__map_value_compare<OZWriggleBehavior::ValueCacheKey,std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>,OZWriggleBehavior::CompareKeys,true>,std::allocator<std::__value_type<OZWriggleBehavior::ValueCacheKey,OZWriggleBehavior::ValueCacheEntry>>>::__find_equal<OZWriggleBehavior::ValueCacheKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        a1 = OZWriggleBehavior::CompareKeys::operator()(a1, a3, (uint64_t)(v4 + 4));
        if (!(_DWORD)a1)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      a1 = OZWriggleBehavior::CompareKeys::operator()(a1, v8, a3);
      if (!(_DWORD)a1)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void OZZoomInOutBehavior::OZZoomInOutBehavior(OZZoomInOutBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D7130;
  v5[2] = &unk_1E65D7450;
  v5[6] = &unk_1E65D76A8;
  v5[42] = &unk_1E65D7700;
  v5[67] = &unk_1E65D7728;
  PCURL::PCURL((PCURL *)v7, CFSTR("Zoom In/Out Behavior Zoom"));
  OZChannelDouble::OZChannelDouble((OZZoomInOutBehavior *)((char *)this + 864), 0, v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZZoomInOutBehavior *)((char *)this + 1016), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  *((_QWORD *)this + 159) = 0;
  OZChannel::setMin((OZChannel *)((char *)this + 864), -1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 864), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 1.0);
  v8 = 0x500000004;
  *(_OWORD *)&v7[0].var0 = xmmword_1B3562C38;
  OZChannelEnum::setTags((OZZoomInOutBehavior *)((char *)this + 1016), (char *)v7, 6);
}

void sub_1B2F90838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZCameraBehavior *v11;
  OZChannel *v12;
  OZChannelEnum *v13;

  OZChannelEnum::~OZChannelEnum(v13);
  OZChannel::~OZChannel(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior::OZZoomInOutBehavior(OZZoomInOutBehavior *this, const OZZoomInOutBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D7130;
  *(_QWORD *)(v5 + 16) = &unk_1E65D7450;
  *(_QWORD *)(v5 + 48) = &unk_1E65D76A8;
  *(_QWORD *)(v5 + 336) = &unk_1E65D7700;
  *(_QWORD *)(v5 + 536) = &unk_1E65D7728;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZZoomInOutBehavior *)((char *)this + 1016), (const OZZoomInOutBehavior *)((char *)a2 + 1016), v6);
  *((_QWORD *)this + 159) = 0;
}

void sub_1B2F90944(_Unwind_Exception *a1)
{
  OZCameraBehavior *v1;
  OZChannel *v2;

  OZChannel::~OZChannel(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior::~OZZoomInOutBehavior(OZZoomInOutBehavior *this)
{
  *(_QWORD *)this = &off_1E65D7130;
  *((_QWORD *)this + 2) = &unk_1E65D7450;
  *((_QWORD *)this + 6) = &unk_1E65D76A8;
  *((_QWORD *)this + 42) = &unk_1E65D7700;
  *((_QWORD *)this + 67) = &unk_1E65D7728;
  OZChannelEnum::~OZChannelEnum((OZZoomInOutBehavior *)((char *)this + 1016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZZoomInOutBehavior::~OZZoomInOutBehavior(OZZoomInOutBehavior *this)
{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 16));
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 48));
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 336));
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 536));
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZZoomInOutBehavior::~OZZoomInOutBehavior((OZZoomInOutBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZZoomInOutBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
  return OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
}

unint64_t OZZoomInOutBehavior::addCurveNodesToChannels(OZZoomInOutBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  char *v5;
  OZChannel *v6;
  OZSingleChanCurveNode *v7;
  OZChannel **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  OZChannel **v17;
  char *v18;
  char *v19;
  char *v20;
  OZChannel *v21;
  OZSingleChanCurveNode **v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  OZSingleChanCurveNode **v31;
  char *v32;
  char *v33;
  char *v34;
  OZSingleChanCurveNode *v35;

  v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2)
  {
    *((_QWORD *)this + 159) = v5;
    if (v5)
    {
      v6 = (OZChannel *)(v5 + 6808);
      v7 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v7, (OZZoomInOutBehavior *)((char *)this + 536), v6, 200);
      OZChannel::appendCurveProcessingNode(v6, v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
      v8 = (OZChannel **)*((_QWORD *)this + 70);
      v9 = *((_QWORD *)this + 71);
      if ((unint64_t)v8 >= v9)
      {
        v11 = *((_QWORD *)this + 69);
        v12 = ((uint64_t)v8 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v13 = v9 - v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 568, v15);
        else
          v16 = 0;
        v17 = (OZChannel **)&v16[8 * v12];
        v18 = &v16[8 * v15];
        *v17 = v6;
        v10 = v17 + 1;
        v19 = (char *)*((_QWORD *)this + 70);
        v20 = (char *)*((_QWORD *)this + 69);
        if (v19 != v20)
        {
          do
          {
            v21 = (OZChannel *)*((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v17 = v21;
          }
          while (v19 != v20);
          v19 = (char *)*((_QWORD *)this + 69);
        }
        *((_QWORD *)this + 69) = v17;
        *((_QWORD *)this + 70) = v10;
        *((_QWORD *)this + 71) = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v8 = v6;
        v10 = v8 + 1;
      }
      *((_QWORD *)this + 70) = v10;
      v22 = (OZSingleChanCurveNode **)*((_QWORD *)this + 73);
      v23 = *((_QWORD *)this + 74);
      if ((unint64_t)v22 >= v23)
      {
        v25 = *((_QWORD *)this + 72);
        v26 = ((uint64_t)v22 - v25) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v27 = v23 - v25;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 592, v29);
        else
          v30 = 0;
        v31 = (OZSingleChanCurveNode **)&v30[8 * v26];
        v32 = &v30[8 * v29];
        *v31 = v7;
        v24 = v31 + 1;
        v33 = (char *)*((_QWORD *)this + 73);
        v34 = (char *)*((_QWORD *)this + 72);
        if (v33 != v34)
        {
          do
          {
            v35 = (OZSingleChanCurveNode *)*((_QWORD *)v33 - 1);
            v33 -= 8;
            *--v31 = v35;
          }
          while (v33 != v34);
          v33 = (char *)*((_QWORD *)this + 72);
        }
        *((_QWORD *)this + 72) = v31;
        *((_QWORD *)this + 73) = v24;
        *((_QWORD *)this + 74) = v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v22 = v7;
        v24 = v22 + 1;
      }
      *((_QWORD *)this + 73) = v24;
      OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)v6);
    }
  }
  else
  {
    *((_QWORD *)this + 159) = 0;
  }
  return v4;
}

void sub_1B2F90D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

double OZZoomInOutBehavior::solveNode(OZZoomInOutBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  uint64_t v9;
  __n128 FrameDuration;
  CMTime *v11;
  double Seconds;
  double v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double v19;
  OZCameraBehavior *ValueAsInt;
  double v21;
  OZCamera *v22;
  int v23;
  double v24;
  LiCamera *v25;
  double v26;
  LiCamera *v27;
  double v28;
  long double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  CMTime v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CMTime v40;
  PCSharedCount v41;
  PCSharedCount v42;
  OZRenderState time1;
  void *__p[3];
  CMTime time;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  __int128 v49;
  int64_t v50;
  __n128 v51;
  CMTimeEpoch v52;
  CMTime v53;

  if ((*(unsigned int (**)(OZZoomInOutBehavior *, double))(*(_QWORD *)this + 768))(this, a4))
  {
    memset(&v53, 0, sizeof(v53));
    (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                         + 336))(&v53, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
    v51 = 0uLL;
    v52 = 0;
    v9 = (*(uint64_t (**)(OZZoomInOutBehavior *))(*(_QWORD *)this + 336))(this);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v51);
    (*(void (**)(CMTime *__return_ptr, OZZoomInOutBehavior *, __n128))(*(_QWORD *)this + 608))(&v48, this, FrameDuration);
    v47 = v48;
    memset(&v46, 0, sizeof(v46));
    *(_OWORD *)&time1.var0.var0 = v49;
    time1.var0.var3 = v50;
    *(__n128 *)&v34.value = v51;
    v34.epoch = v52;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &v34, (uint64_t)&v46);
    time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v53;
    v34 = v47;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &v34, (uint64_t)__p);
    *(__n128 *)&time1.var0.var0 = v51;
    time1.var0.var3 = v52;
    v34 = v46;
    if (CMTimeCompare((CMTime *)&time1, &v34) >= 0)
      v11 = (CMTime *)&v51;
    else
      v11 = &v46;
    *(_OWORD *)&time1.var0.var0 = *(_OWORD *)&v11->value;
    time1.var0.var3 = v11->epoch;
    operator/((__int128 *)__p, (uint64_t)&time1, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    if (Seconds < 0.0000001)
      return a5;
    v13 = Seconds <= 0.9999999 ? Seconds : 1.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), &v53, 0.0);
    v15 = v14;
    if (v14 > -0.0000001 && v14 < 0.0000001)
      return a5;
    std::vector<double>::vector(__p, 4uLL);
    (*(void (**)(OZZoomInOutBehavior *, const CMTime *, void **))(*(_QWORD *)this + 744))(this, a3, __p);
    v18 = *((double *)__p[0] + 3);
    if (v15 <= 0.0000001)
      v19 = -(v15 * (175.0 - v18));
    else
      v19 = v15 * (5.0 - v18);
    ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), MEMORY[0x1E0CA2E68], 0.0);
    v21 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v13);
    OZRenderState::OZRenderState(&time1);
    time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v53;
    v22 = (OZCamera *)*((_QWORD *)this + 159);
    v40 = v53;
    OZCamera::cameraAtTime(v22, &v40, (PCSharedCount *)&v34);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v41, (const PCSharedCount *)&v34);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v34.timescale);
    if (!v41.var0)
      throw_PCNullPointerException(1);
    v23 = (*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)v41.var0 + 632))(v41.var0);
    v16 = v18 + v19 * v21;
    if (v23 != 1)
    {
      if (v23)
      {
LABEL_38:
        v16 = a5;
        goto LABEL_39;
      }
LABEL_37:
      if (a2 == 200)
        goto LABEL_39;
      goto LABEL_38;
    }
    if (!v41.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(double *__return_ptr))(*(_QWORD *)v41.var0 + 272))(&v38);
    if (!v41.var0)
      throw_PCNullPointerException(1);
    v24 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v41.var0 + 688))(v41.var0);
    if (!v41.var0)
      throw_PCNullPointerException(1);
    v26 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v41.var0 + 488))(v41.var0);
    if (!v41.var0)
      throw_PCNullPointerException(1);
    v28 = LiCamera::computeFocalDistance(v25, v18, v24, v26, v38, v39);
    if (!v41.var0)
      throw_PCNullPointerException(1);
    v29 = LiCamera::computeFocalDistance(v27, v16, v24, v26, v38, v39);
    v31 = *(double *)__p[0];
    v30 = *((double *)__p[0] + 1);
    v32 = *((double *)__p[0] + 2);
    v35 = 0.0;
    v36 = 0.0;
    v37 = v29 - v28;
    OZCameraBehavior::getRotationBeforeThisAsQuat(this, *((OZCamera **)this + 159), a3, (double *)&v34.value);
    PCQuat<double>::transform<double>((double *)&v34.value, &v35);
    v33 = v35 / v24;
    v35 = v35 / v24;
    if (a2 > 1)
    {
      if (a2 != 2)
        goto LABEL_37;
      v16 = v32 - v37;
    }
    else
    {
      if (a2)
      {
        if (a2 == 1)
        {
          v16 = v30 - v36;
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      v16 = v31 - v33;
    }
LABEL_39:
    PCSharedCount::~PCSharedCount(&v42);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v16;
  }
  return a5;
}

void sub_1B2F911D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a24);
  if (__p)
  {
    a59 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZZoomInOutBehavior::solveNode(OZZoomInOutBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZZoomInOutBehavior::solveNode((OZZoomInOutBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZZoomObjectBehavior::OZZoomObjectBehavior(OZZoomObjectBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZCameraBehavior::OZCameraBehavior(this, a2, a3, a4);
  *v5 = &off_1E65D77A0;
  v5[2] = &unk_1E65D7AC0;
  v5[6] = &unk_1E65D7D18;
  v5[42] = &unk_1E65D7D70;
  v5[67] = &unk_1E65D7D98;
  PCURL::PCURL((PCURL *)v7, CFSTR("Zoom Object Behavior Object"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZZoomObjectBehavior *)((char *)this + 864), v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Zoom Object Behavior Transition"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), 0.5, v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Camera Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Camera Behavior Speed Label"));
  OZChannelEnum::OZChannelEnum((OZZoomObjectBehavior *)((char *)this + 1176), 0, v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Zoom Object Behavior Zoom"));
  OZChannelDouble::OZChannelDouble((OZZoomObjectBehavior *)((char *)this + 1432), 0, v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(v7);
  *((_QWORD *)this + 198) = 0;
  OZValueCache<OZZoomObjectCacheItem>::OZValueCache((uint64_t)this + 1592);
  OZChannel::setMin((OZChannel *)((char *)this + 1432), -1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 1432), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1432), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1432), 1.0);
  v8 = 0x500000004;
  *(_OWORD *)&v7[0].var0 = xmmword_1B3562C68;
  OZChannelEnum::setTags((OZZoomObjectBehavior *)((char *)this + 1176), (char *)v7, 6);
}

void sub_1B2F9149C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZCameraBehavior *v11;
  OZChanTransformNodeRef *v12;
  OZChannelPercent *v13;
  OZChannelEnum *v14;
  OZChannel *v15;
  uint64_t v16;

  OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(v16);
  OZChannel::~OZChannel(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v12);
  OZCameraBehavior::~OZCameraBehavior(v11);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior::OZZoomObjectBehavior(OZZoomObjectBehavior *this, const OZZoomObjectBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCameraBehavior::OZCameraBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65D77A0;
  *(_QWORD *)(v5 + 16) = &unk_1E65D7AC0;
  *(_QWORD *)(v5 + 48) = &unk_1E65D7D18;
  *(_QWORD *)(v5 + 336) = &unk_1E65D7D70;
  *(_QWORD *)(v5 + 536) = &unk_1E65D7D98;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 864), (const OZZoomObjectBehavior *)((char *)a2 + 864), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1024), (const OZChannelBase *)((char *)a2 + 1024), v6);
  OZChannelEnum::OZChannelEnum((OZZoomObjectBehavior *)((char *)this + 1176), (const OZZoomObjectBehavior *)((char *)a2 + 1176), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1432), (const OZChannelBase *)((char *)a2 + 1432), v6);
  *((_QWORD *)this + 179) = &off_1E6551358;
  *((_QWORD *)this + 181) = &unk_1E65516B8;
  *((_QWORD *)this + 198) = 0;
  OZValueCache<OZZoomObjectCacheItem>::OZValueCache((uint64_t)this + 1592);
}

void sub_1B2F91640(_Unwind_Exception *a1)
{
  OZCameraBehavior *v1;
  OZChanTransformNodeRef *v2;
  OZChannelPercent *v3;
  OZChannelEnum *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelPercent::~OZChannelPercent(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  OZCameraBehavior::~OZCameraBehavior(v1);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior::~OZZoomObjectBehavior(OZZoomObjectBehavior *this)
{
  *(_QWORD *)this = &off_1E65D77A0;
  *((_QWORD *)this + 2) = &unk_1E65D7AC0;
  *((_QWORD *)this + 6) = &unk_1E65D7D18;
  *((_QWORD *)this + 42) = &unk_1E65D7D70;
  *((_QWORD *)this + 67) = &unk_1E65D7D98;
  OZValueCache<OZZoomObjectCacheItem>::~OZValueCache((uint64_t)this + 1592);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1432));
  OZChannelEnum::~OZChannelEnum((OZZoomObjectBehavior *)((char *)this + 1176));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1024));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZZoomObjectBehavior *)((char *)this + 864));
  OZCameraBehavior::~OZCameraBehavior(this);
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZZoomObjectBehavior::~OZZoomObjectBehavior(OZZoomObjectBehavior *this)
{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 16));
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 48));
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 336));
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 536));
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZZoomObjectBehavior::~OZZoomObjectBehavior((OZZoomObjectBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZZoomObjectBehavior::flushCache(OZZoomObjectBehavior *this)
{
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 1592);
  OZCameraBehavior::flushCache(this);
}

uint64_t OZZoomObjectBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCameraBehavior::operator=(a1);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 864, (uint64_t)v4 + 864);
  OZChannelBase::operator=(a1 + 1024, (uint64_t)v5 + 1024);
  OZChannelBase::operator=(a1 + 1432, (uint64_t)v5 + 1432);
  return OZChannelBase::operator=(a1 + 1176, (uint64_t)v5 + 1176);
}

unint64_t OZZoomObjectBehavior::addCurveNodesToChannels(OZZoomObjectBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  char *v5;
  OZChannel *v6;
  OZSingleChanCurveNode *v7;
  OZChannel **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  OZChannel **v17;
  char *v18;
  char *v19;
  char *v20;
  OZChannel *v21;
  OZSingleChanCurveNode **v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  OZSingleChanCurveNode **v31;
  char *v32;
  char *v33;
  char *v34;
  OZSingleChanCurveNode *v35;

  v4 = OZCameraBehavior::addTransRotCurveNodesToChannels(this, a2, 1, 0);
  if (a2)
  {
    *((_QWORD *)this + 198) = v5;
    if (v5)
    {
      v6 = (OZChannel *)(v5 + 6808);
      v7 = (OZSingleChanCurveNode *)operator new();
      OZSingleChanCurveNode::OZSingleChanCurveNode(v7, (OZZoomObjectBehavior *)((char *)this + 536), v6, 100);
      OZChannel::appendCurveProcessingNode(v6, v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
      v8 = (OZChannel **)*((_QWORD *)this + 70);
      v9 = *((_QWORD *)this + 71);
      if ((unint64_t)v8 >= v9)
      {
        v11 = *((_QWORD *)this + 69);
        v12 = ((uint64_t)v8 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v13 = v9 - v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 568, v15);
        else
          v16 = 0;
        v17 = (OZChannel **)&v16[8 * v12];
        v18 = &v16[8 * v15];
        *v17 = v6;
        v10 = v17 + 1;
        v19 = (char *)*((_QWORD *)this + 70);
        v20 = (char *)*((_QWORD *)this + 69);
        if (v19 != v20)
        {
          do
          {
            v21 = (OZChannel *)*((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v17 = v21;
          }
          while (v19 != v20);
          v19 = (char *)*((_QWORD *)this + 69);
        }
        *((_QWORD *)this + 69) = v17;
        *((_QWORD *)this + 70) = v10;
        *((_QWORD *)this + 71) = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v8 = v6;
        v10 = v8 + 1;
      }
      *((_QWORD *)this + 70) = v10;
      v22 = (OZSingleChanCurveNode **)*((_QWORD *)this + 73);
      v23 = *((_QWORD *)this + 74);
      if ((unint64_t)v22 >= v23)
      {
        v25 = *((_QWORD *)this + 72);
        v26 = ((uint64_t)v22 - v25) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v27 = v23 - v25;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 592, v29);
        else
          v30 = 0;
        v31 = (OZSingleChanCurveNode **)&v30[8 * v26];
        v32 = &v30[8 * v29];
        *v31 = v7;
        v24 = v31 + 1;
        v33 = (char *)*((_QWORD *)this + 73);
        v34 = (char *)*((_QWORD *)this + 72);
        if (v33 != v34)
        {
          do
          {
            v35 = (OZSingleChanCurveNode *)*((_QWORD *)v33 - 1);
            v33 -= 8;
            *--v31 = v35;
          }
          while (v33 != v34);
          v33 = (char *)*((_QWORD *)this + 72);
        }
        *((_QWORD *)this + 72) = v31;
        *((_QWORD *)this + 73) = v24;
        *((_QWORD *)this + 74) = v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v22 = v7;
        v24 = v22 + 1;
      }
      *((_QWORD *)this + 73) = v24;
      OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)v6);
    }
  }
  else
  {
    *((_QWORD *)this + 198) = 0;
  }
  return v4;
}

void sub_1B2F91AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

double OZZoomObjectBehavior::solveNode(OZZoomObjectBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  const void *TransformNode;
  uint64_t v10;
  uint64_t v11;
  __n128 FrameDuration;
  __n128 *v13;
  double Seconds;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  OZCameraBehavior *ValueAsInt;
  double v27;
  double v28;
  double v29;
  double v30;
  const void *v31;
  void *v32;
  OZCamera *v33;
  float64x2_t v34;
  double v35;
  double v36;
  LiCamera *v37;
  double v38;
  long double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int8x16_t v43;
  double v44;
  double v46;
  PCSharedCount v47;
  PCSharedCount v48;
  float64x2_t v49;
  double v50;
  double v51;
  float64x2_t v52;
  double v53;
  double v54[2];
  CMTime var0;
  PCSharedCount v56;
  PCSharedCount v57;
  float64_t v58;
  __int128 v59;
  __int128 v60;
  float64_t v61;
  __int128 v62;
  float64x2_t v63;
  double v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  CMTime time2;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  void *__p[3];
  OZRenderState time1;
  CMTime v83;
  _QWORD v84[6];
  CMTime time;
  CMTime v86;
  CMTime v87;
  CMTime v88;
  __int128 v89;
  int64_t v90;
  __n128 v91;
  CMTimeEpoch v92;
  CMTime v93;

  if (!(*(unsigned int (**)(OZZoomObjectBehavior *, double))(*(_QWORD *)this + 768))(this, a4))
    return a5;
  TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 864));
  if (!TransformNode)
    return a5;
  v10 = (uint64_t)TransformNode;
  if (a2 >= 3 && a2 != 100)
    return a5;
  memset(&v93, 0, sizeof(v93));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                       + 336))(&v93, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
  v91 = 0uLL;
  v92 = 0;
  v11 = (*(uint64_t (**)(OZZoomObjectBehavior *))(*(_QWORD *)this + 336))(this);
  FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v91);
  (*(void (**)(CMTime *__return_ptr, OZZoomObjectBehavior *, __n128))(*(_QWORD *)this + 608))(&v88, this, FrameDuration);
  v87 = v88;
  memset(&v86, 0, sizeof(v86));
  *(_OWORD *)&time1.var0.var0 = v89;
  time1.var0.var3 = v90;
  *(__n128 *)&time2.value = v91;
  time2.epoch = v92;
  PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v86);
  time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v93;
  time2 = v87;
  PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v58);
  *(__n128 *)&time1.var0.var0 = v91;
  time1.var0.var3 = v92;
  time2 = v86;
  v13 = CMTimeCompare((CMTime *)&time1, &time2) >= 0 ? &v91 : (__n128 *)&v86;
  *(__n128 *)&time1.var0.var0 = *v13;
  time1.var0.var3 = v13[1].n128_i64[0];
  operator/((__int128 *)&v58, (uint64_t)&time1, (uint64_t)&time);
  Seconds = CMTimeGetSeconds(&time);
  if (Seconds < 0.0)
    return a5;
  if (Seconds <= 1.0)
    v15 = Seconds;
  else
    v15 = 1.0;
  v16 = 0.0;
  if (Seconds > 1.0)
  {
    if (a2 == 100)
      v17 = 3;
    else
      v17 = a2;
    time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v87;
    time2 = v86;
    PC_CMTimeSaferAdd((CMTime *)&time1, &time2, (uint64_t)&v58);
    v16 = (*(double (**)(OZZoomObjectBehavior *, uint64_t, float64_t *, double))(*(_QWORD *)this + 776))(this, v17, &v58, a5);
  }
  v84[1] = 0xBFF0000000000000;
  v84[0] = &unk_1E65D7E10;
  if (OZValueCache<OZBoundsCacheItem>::find((uint64_t)this + 1592, (uint64_t)v84, v15))
  {
    if (a2 > 1)
    {
      if (a2 == 2)
        v18 = *(double *)&v84[4];
      else
        v18 = *(double *)&v84[5];
    }
    else if (a2)
    {
      v18 = *(double *)&v84[3];
    }
    else
    {
      v18 = *(double *)&v84[2];
    }
    return v16 + v18;
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1432), &v93, 0.0);
  v20 = v19;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1024), &v93, 0.0);
  v22 = v21;
  if (v21 <= -0.0000001 || (v23 = 1.0, v21 >= 0.0000001))
  {
    v24 = v15 / v21;
    v25 = 1.0;
    if (v15 / v22 <= 1.0)
      v25 = v15 / v22;
    if (v24 >= 0.0)
      v23 = v25;
    else
      v23 = 0.0;
  }
  ValueAsInt = (OZCameraBehavior *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1176), MEMORY[0x1E0CA2E68], 0.0);
  v46 = OZCameraBehavior::calcEaseInEaseOut(ValueAsInt, v23);
  memset(&v83, 0, sizeof(v83));
  if (v15 == 1.0)
  {
    time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v87;
    time2 = v86;
    PC_CMTimeSaferAdd((CMTime *)&time1, &time2, (uint64_t)&v83);
  }
  else
  {
    v83 = v93;
  }
  OZRenderState::OZRenderState(&time1);
  time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v83;
  time1.var9 = 1;
  std::vector<double>::vector(__p, 4uLL);
  (*(void (**)(OZZoomObjectBehavior *, const CMTime *, void **))(*(_QWORD *)this + 744))(this, a3, __p);
  v79 = *(float64x2_t *)__p[0];
  v27 = *((double *)__p[0] + 3);
  v80 = *((double *)__p[0] + 2);
  if (v46 >= 1.0)
  {
    v28 = 175.0 - v27;
    if (v20 < 0.0)
      v28 = v27 + -5.0;
    v29 = v20 * v28;
    v30 = 0.0;
    if (v22 != 1.0)
      v30 = (v15 - v22) / (1.0 - v22);
    v27 = v27 + v29 * v30;
  }
  v77 = 0uLL;
  v78 = 0.0;
  v76 = 0x3FF0000000000000;
  v73 = 0x3FF0000000000000;
  v70 = 0x3FF0000000000000;
  time2.value = 0x3FF0000000000000;
  *(_OWORD *)&time2.timescale = 0u;
  v69 = 0u;
  v71 = 0u;
  v72 = 0u;
  v74 = 0u;
  v75 = 0u;
  OZTransformNode::getPivot(v10, &v77, (CMTime *)&time1);
  (*(void (**)(uint64_t, CMTime *, OZRenderState *))(*(_QWORD *)v10 + 1256))(v10, &time2, &time1);
  PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, v77.f64, v77.f64);
  time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v93;
  v67 = 0x3FF0000000000000;
  v64 = 1.0;
  v61 = 1.0;
  v58 = 1.0;
  v59 = 0u;
  v60 = 0u;
  v62 = 0u;
  v63 = 0u;
  v65 = 0u;
  v66 = 0u;
  v31 = *(const void **)(*((_QWORD *)this + 198) + 960);
  if (v31)
  {
    if (v32)
      (*(void (**)(void *, float64_t *, OZRenderState *))(*(_QWORD *)v32 + 1256))(v32, &v58, &time1);
  }
  PCMatrix44Tmpl<double>::transform<double>(&v58, v79.f64, v79.f64);
  v33 = (OZCamera *)*((_QWORD *)this + 198);
  var0 = (CMTime)time1.var0;
  OZCamera::cameraAtTime(v33, &var0, &v47);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v56, &v47);
  PCSharedCount::~PCSharedCount(&v48);
  if (!v56.var0)
    throw_PCNullPointerException(1);
  if ((*(unsigned int (**)(PC_Sp_counted_base *))(*(_QWORD *)v56.var0 + 632))(v56.var0))
  {
    v34 = v77;
    v35 = v78;
  }
  else
  {
    if (!v56.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(double *__return_ptr))(*(_QWORD *)v56.var0 + 272))(v54);
    if (!v56.var0)
      throw_PCNullPointerException(1);
    v36 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v56.var0 + 688))(v56.var0);
    if (!v56.var0)
      throw_PCNullPointerException(1);
    v38 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v56.var0 + 488))(v56.var0);
    if (!v56.var0)
      throw_PCNullPointerException(1);
    v39 = LiCamera::computeFocalDistance(v37, v27, v36, v38, v54[0], v54[1]);
    v52 = 0uLL;
    v53 = v39;
    OZCameraBehavior::getRotationBeforeThisAsQuat(this, *((OZCamera **)this + 198), a3, (double *)&v47);
    PCQuat<double>::transform<double>((double *)&v47, v52.f64);
    v40.f64[0] = v58;
    v41.f64[0] = *((float64_t *)&v59 + 1);
    v42.f64[0] = *((float64_t *)&v60 + 1);
    *(_QWORD *)&v42.f64[1] = v59;
    v43 = (int8x16_t)vmulq_f64(v52, v42);
    v40.f64[1] = v61;
    *(_QWORD *)&v41.f64[1] = v62;
    v34 = vaddq_f64(vaddq_f64(vaddq_f64((float64x2_t)vextq_s8(v43, v43, 8uLL), vmulq_f64(v52, v40)), vmulq_n_f64(v41, v53)), v77);
    v35 = vaddvq_f64(vmulq_f64(v52, v63)) + v53 * v64 + v78;
  }
  v52 = vaddq_f64(v79, vmulq_n_f64(vsubq_f64(v34, v79), v46));
  v53 = v80 + v46 * (v35 - v80);
  PCMatrix44Tmpl<double>::invert(&v58, &v58, 0.0);
  PCMatrix44Tmpl<double>::transform<double>(&v58, v52.f64, v52.f64);
  v48.var0 = *(PC_Sp_counted_base **)&v15;
  v47.var0 = (PC_Sp_counted_base *)&unk_1E65D7E10;
  v49 = v52;
  v50 = v53;
  v51 = v27;
  OZValueCache<OZZoomObjectCacheItem>::add((uint64_t)this + 1592, (uint64_t)&v47);
  switch(a2)
  {
    case 2:
      v44 = v53;
      goto LABEL_61;
    case 1:
      v44 = v52.f64[1];
      goto LABEL_61;
    case 0:
      v44 = v52.f64[0];
LABEL_61:
      a5 = v16 + v44;
      goto LABEL_63;
  }
  a5 = v16 + v27;
LABEL_63:
  PCSharedCount::~PCSharedCount(&v57);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a5;
}

void sub_1B2F922B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a69;

  PCSharedCount::~PCSharedCount(&a28);
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZValueCache<OZZoomObjectCacheItem>::add(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >= *(_QWORD *)(a1 + 32))
  {
    v6 = *(uint64_t **)(a1 + 16);
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *(_QWORD *)(a1 + 24) = v5 - 1;
    (*(void (**)(uint64_t *))v6[2])(v6 + 2);
    operator delete(v6);
  }
  v8 = operator new(0x40uLL);
  v8[3] = *(_QWORD *)(a2 + 8);
  v8[1] = a1 + 8;
  v8[2] = &unk_1E65D7E10;
  v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 3) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *v8 = v10;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(a1 + 8) = v8;
  ++*(_QWORD *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B2F923F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZZoomObjectBehavior::solveNode(OZZoomObjectBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZZoomObjectBehavior::solveNode((OZZoomObjectBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

uint64_t OZValueCache<OZZoomObjectCacheItem>::OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65D7E48;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B3054250;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B2F9245C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZValueCache<OZZoomObjectCacheItem>::~OZValueCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65D7E48;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1B2F92AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OZAttractedToBehavior_Factory::getInstance(OZAttractedToBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZAttractedToBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZAttractedToBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAttractedToBehavior_Factory::_instance;
}

uint64_t OZAttractorBehavior_Factory::getInstance(OZAttractorBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZAttractorBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZAttractorBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAttractorBehavior_Factory::_instance;
}

uint64_t OZDriftAttractorBehavior_Factory::getInstance(OZDriftAttractorBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDriftAttractorBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDriftAttractorBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDriftAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDriftAttractorBehavior_Factory::_instance;
}

uint64_t OZDriftAttractedToBehavior_Factory::getInstance(OZDriftAttractedToBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDriftAttractedToBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDriftAttractedToBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDriftAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDriftAttractedToBehavior_Factory::_instance;
}

uint64_t OZRepelFromBehavior_Factory::getInstance(OZRepelFromBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRepelFromBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRepelFromBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRepelFromBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRepelFromBehavior_Factory::_instance;
}

uint64_t OZRepelorBehavior_Factory::getInstance(OZRepelorBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRepelorBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRepelorBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRepelorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRepelorBehavior_Factory::_instance;
}

uint64_t OZGravityBehavior_Factory::getInstance(OZGravityBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGravityBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGravityBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGravityBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGravityBehavior_Factory::_instance;
}

uint64_t OZThrowBehavior_Factory::getInstance(OZThrowBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZThrowBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZThrowBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZThrowBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZThrowBehavior_Factory::_instance;
}

uint64_t OZSpinBehavior_Factory::getInstance(OZSpinBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSpinBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSpinBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSpinBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSpinBehavior_Factory::_instance;
}

uint64_t OZBrownianBehavior_Factory::getInstance(OZBrownianBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior_Factory::_instance;
}

uint64_t OZAlignSimBehavior_Factory::getInstance(OZAlignSimBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZAlignSimBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZAlignSimBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAlignSimBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAlignSimBehavior_Factory::_instance;
}

uint64_t OZRotationalDragBehavior_Factory::getInstance(OZRotationalDragBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRotationalDragBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRotationalDragBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRotationalDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRotationalDragBehavior_Factory::_instance;
}

uint64_t OZSpringBehavior_Factory::getInstance(OZSpringBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSpringBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSpringBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSpringBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSpringBehavior_Factory::_instance;
}

uint64_t OZViscousDragBehavior_Factory::getInstance(OZViscousDragBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZViscousDragBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZViscousDragBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZViscousDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZViscousDragBehavior_Factory::_instance;
}

uint64_t OZWindBehavior_Factory::getInstance(OZWindBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZWindBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZWindBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZWindBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZWindBehavior_Factory::_instance;
}

uint64_t OZVortexAroundBehavior_Factory::getInstance(OZVortexAroundBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZVortexAroundBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZVortexAroundBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZVortexAroundBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZVortexAroundBehavior_Factory::_instance;
}

uint64_t OZVortexBehavior_Factory::getInstance(OZVortexBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZVortexBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZVortexBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZVortexBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZVortexBehavior_Factory::_instance;
}

uint64_t OZBoundsCollisionBehavior_Factory::getInstance(OZBoundsCollisionBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBoundsCollisionBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBoundsCollisionBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBoundsCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBoundsCollisionBehavior_Factory::_instance;
}

uint64_t OZRampBehavior_Factory::getInstance(OZRampBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRampBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRampBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRampBehavior_Factory::_instance;
}

uint64_t OZExponentialBehavior_Factory::getInstance(OZExponentialBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZExponentialBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZExponentialBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZExponentialBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZExponentialBehavior_Factory::_instance;
}

uint64_t OZLogarithmicBehavior_Factory::getInstance(OZLogarithmicBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLogarithmicBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLogarithmicBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLogarithmicBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLogarithmicBehavior_Factory::_instance;
}

uint64_t OZRateBehavior_Factory::getInstance(OZRateBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRateBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRateBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRateBehavior_Factory::_instance;
}

uint64_t OZGrowShrinkBehavior_Factory::getInstance(OZGrowShrinkBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGrowShrinkBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGrowShrinkBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGrowShrinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGrowShrinkBehavior_Factory::_instance;
}

uint64_t OZAverageBehavior_Factory::getInstance(OZAverageBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZAverageBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZAverageBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAverageBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAverageBehavior_Factory::_instance;
}

uint64_t OZRandomizeBehavior_Factory::getInstance(OZRandomizeBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRandomizeBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRandomizeBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRandomizeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRandomizeBehavior_Factory::_instance;
}

uint64_t OZReverseBehavior_Factory::getInstance(OZReverseBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZReverseBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZReverseBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZReverseBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZReverseBehavior_Factory::_instance;
}

uint64_t OZNegateBehavior_Factory::getInstance(OZNegateBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZNegateBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZNegateBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZNegateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZNegateBehavior_Factory::_instance;
}

uint64_t OZStopBehavior_Factory::getInstance(OZStopBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZStopBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZStopBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZStopBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZStopBehavior_Factory::_instance;
}

uint64_t OZOscillateBehavior_Factory::getInstance(OZOscillateBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZOscillateBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZOscillateBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZOscillateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZOscillateBehavior_Factory::_instance;
}

uint64_t OZFadeInOutBehavior_Factory::getInstance(OZFadeInOutBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFadeInOutBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFadeInOutBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFadeInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFadeInOutBehavior_Factory::_instance;
}

uint64_t OZSnapAlignBehavior_Factory::getInstance(OZSnapAlignBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSnapAlignBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSnapAlignBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSnapAlignBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSnapAlignBehavior_Factory::_instance;
}

uint64_t OZFocusBehavior_Factory::getInstance(OZFocusBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFocusBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFocusBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFocusBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFocusBehavior_Factory::_instance;
}

uint64_t OZFramingBehavior_Factory::getInstance(OZFramingBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFramingBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFramingBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFramingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFramingBehavior_Factory::_instance;
}

uint64_t OZMoveToBehavior_Factory::getInstance(OZMoveToBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMoveToBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMoveToBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMoveToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMoveToBehavior_Factory::_instance;
}

uint64_t OZPointAtBehavior_Factory::getInstance(OZPointAtBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZPointAtBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZPointAtBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZPointAtBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZPointAtBehavior_Factory::_instance;
}

uint64_t OZWriggleBehavior_Factory::getInstance(OZWriggleBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZWriggleBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZWriggleBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZWriggleBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZWriggleBehavior_Factory::_instance;
}

uint64_t OZGenericBehavior_Factory::getInstance(OZGenericBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGenericBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGenericBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGenericBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGenericBehavior_Factory::_instance;
}

uint64_t OZGenericBehaviorV1_Factory::getInstance(OZGenericBehaviorV1_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGenericBehaviorV1_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGenericBehaviorV1_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGenericBehaviorV1_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGenericBehaviorV1_Factory::_instance;
}

uint64_t OZGenericBehaviorV2_Factory::getInstance(OZGenericBehaviorV2_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGenericBehaviorV2_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGenericBehaviorV2_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGenericBehaviorV2_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGenericBehaviorV2_Factory::_instance;
}

uint64_t OZAlignToBehavior_Factory::getInstance(OZAlignToBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZAlignToBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZAlignToBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZAlignToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZAlignToBehavior_Factory::_instance;
}

uint64_t OZ3DEnginePhysicsBehavior_Factory::getInstance(OZ3DEnginePhysicsBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEnginePhysicsBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEnginePhysicsBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEnginePhysicsBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEnginePhysicsBehavior_Factory::_instance;
}

uint64_t OZ3DEngineApplyForceBehavior_Factory::getInstance(OZ3DEngineApplyForceBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEngineApplyForceBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEngineApplyForceBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineApplyForceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineApplyForceBehavior_Factory::_instance;
}

uint64_t OZ3DEnginePhysicsFieldBehavior_Factory::getInstance(OZ3DEnginePhysicsFieldBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEnginePhysicsFieldBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEnginePhysicsFieldBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEnginePhysicsFieldBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEnginePhysicsFieldBehavior_Factory::_instance;
}

uint64_t OZ3DEngineScenePlacementBehavior_Factory::getInstance(OZ3DEngineScenePlacementBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEngineScenePlacementBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEngineScenePlacementBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineScenePlacementBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineScenePlacementBehavior_Factory::_instance;
}

uint64_t BHOvershootBehavior_Factory::getInstance(BHOvershootBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&BHOvershootBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&BHOvershootBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<BHOvershootBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return BHOvershootBehavior_Factory::_instance;
}

uint64_t OZDiscreteBehavior_Factory::getInstance(OZDiscreteBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDiscreteBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDiscreteBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDiscreteBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDiscreteBehavior_Factory::_instance;
}

uint64_t OZClampBehavior_Factory::getInstance(OZClampBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZClampBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZClampBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZClampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZClampBehavior_Factory::_instance;
}

uint64_t OZDollyInOutBehavior_Factory::getInstance(OZDollyInOutBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZDollyInOutBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZDollyInOutBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZDollyInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZDollyInOutBehavior_Factory::_instance;
}

uint64_t OZPanBehavior_Factory::getInstance(OZPanBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZPanBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZPanBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZPanBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZPanBehavior_Factory::_instance;
}

uint64_t OZZoomInOutBehavior_Factory::getInstance(OZZoomInOutBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZZoomInOutBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZZoomInOutBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZZoomInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZZoomInOutBehavior_Factory::_instance;
}

uint64_t OZZoomObjectBehavior_Factory::getInstance(OZZoomObjectBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZZoomObjectBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZZoomObjectBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZZoomObjectBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZZoomObjectBehavior_Factory::_instance;
}

void std::__call_once_param<std::tuple<OZAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZAttractedToBehavior_Factory *v0;

  v0 = (OZAttractedToBehavior_Factory *)operator new();
  OZAttractedToBehavior_Factory::OZAttractedToBehavior_Factory(v0);
  OZAttractedToBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F93E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::OZAttractedToBehavior_Factory(OZAttractedToBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD20;
  v4 = xmmword_1B3562CE0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D7E78;
  *((_QWORD *)this + 18) = &unk_1E65D7F58;
}

void sub_1B2F93F00(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZAttractedToBehavior *OZAttractedToBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZAttractedToBehavior *v6;

  v6 = (OZAttractedToBehavior *)operator new();
  OZAttractedToBehavior::OZAttractedToBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F93F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

OZAttractedToBehavior *OZAttractedToBehavior_Factory::createCopy(OZAttractedToBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZAttractedToBehavior *v5;
  OZAttractedToBehavior *v6;

  v5 = (OZAttractedToBehavior *)operator new();
  OZAttractedToBehavior::OZAttractedToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Attracted To Behavior", "com.apple.ozone.framework");
}

PCString *OZAttractedToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Attracted To Behavior");
}

OZAttractedToBehavior *OZAttractedToBehavior_Factory::createBehaviorCopy(OZAttractedToBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZAttractedToBehavior *v5;
  OZAttractedToBehavior *v6;

  v5 = (OZAttractedToBehavior *)operator new();
  OZAttractedToBehavior::OZAttractedToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F940C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Attracted To Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZAttractorBehavior_Factory *v0;

  v0 = (OZAttractorBehavior_Factory *)operator new();
  OZAttractorBehavior_Factory::OZAttractorBehavior_Factory(v0);
  OZAttractorBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9414C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::OZAttractorBehavior_Factory(OZAttractorBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD60;
  v4 = xmmword_1B3562CF0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D7FB0;
  *((_QWORD *)this + 18) = &unk_1E65D8090;
}

void sub_1B2F941FC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZAttractorBehavior *OZAttractorBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZAttractorBehavior *v6;

  v6 = (OZAttractorBehavior *)operator new();
  OZAttractorBehavior::OZAttractorBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F9426C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

OZAttractorBehavior *OZAttractorBehavior_Factory::createCopy(OZAttractorBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZAttractorBehavior *v5;
  OZAttractorBehavior *v6;

  v5 = (OZAttractorBehavior *)operator new();
  OZAttractorBehavior::OZAttractorBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Attractor Behavior", "com.apple.ozone.framework");
}

PCString *OZAttractorBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Attractor Behavior");
}

OZAttractorBehavior *OZAttractorBehavior_Factory::createBehaviorCopy(OZAttractorBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZAttractorBehavior *v5;
  OZAttractorBehavior *v6;

  v5 = (OZAttractorBehavior *)operator new();
  OZAttractorBehavior::OZAttractorBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F943C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Attractor Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZDriftAttractorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDriftAttractorBehavior_Factory *v0;

  v0 = (OZDriftAttractorBehavior_Factory *)operator new();
  OZDriftAttractorBehavior_Factory::OZDriftAttractorBehavior_Factory(v0);
  OZDriftAttractorBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F94448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::OZDriftAttractorBehavior_Factory(OZDriftAttractorBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562CF0;
  v4 = xmmword_1B3562D00;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D80E8;
  *((_QWORD *)this + 18) = &unk_1E65D81C8;
}

void sub_1B2F944F8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZDriftAttractorBehavior *OZDriftAttractorBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZDriftAttractorBehavior *v6;

  v6 = (OZDriftAttractorBehavior *)operator new();
  OZDriftAttractorBehavior::OZDriftAttractorBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F94568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

OZDriftAttractorBehavior *OZDriftAttractorBehavior_Factory::createCopy(OZDriftAttractorBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZDriftAttractorBehavior *v5;
  OZDriftAttractorBehavior *v6;

  v5 = (OZDriftAttractorBehavior *)operator new();
  OZDriftAttractorBehavior::OZDriftAttractorBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Drift Attractor Behavior", "com.apple.ozone.framework");
}

PCString *OZDriftAttractorBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Drift Attractor Behavior");
}

OZDriftAttractorBehavior *OZDriftAttractorBehavior_Factory::createBehaviorCopy(OZDriftAttractorBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZDriftAttractorBehavior *v5;
  OZDriftAttractorBehavior *v6;

  v5 = (OZDriftAttractorBehavior *)operator new();
  OZDriftAttractorBehavior::OZDriftAttractorBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F946C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZDriftAttractorBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Drift Attractor Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZDriftAttractedToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDriftAttractedToBehavior_Factory *v0;

  v0 = (OZDriftAttractedToBehavior_Factory *)operator new();
  OZDriftAttractedToBehavior_Factory::OZDriftAttractedToBehavior_Factory(v0);
  OZDriftAttractedToBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F94744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::OZDriftAttractedToBehavior_Factory(OZDriftAttractedToBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562CE0;
  v4 = xmmword_1B3562D10;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8220;
  *((_QWORD *)this + 18) = &unk_1E65D8300;
}

void sub_1B2F947F4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZDriftAttractedToBehavior *OZDriftAttractedToBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZDriftAttractedToBehavior *v6;

  v6 = (OZDriftAttractedToBehavior *)operator new();
  OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F94864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

OZDriftAttractedToBehavior *OZDriftAttractedToBehavior_Factory::createCopy(OZDriftAttractedToBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZDriftAttractedToBehavior *v5;
  OZDriftAttractedToBehavior *v6;

  v5 = (OZDriftAttractedToBehavior *)operator new();
  OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F948FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Drift Attracted To Behavior", "com.apple.ozone.framework");
}

PCString *OZDriftAttractedToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Drift Attracted To Behavior");
}

OZDriftAttractedToBehavior *OZDriftAttractedToBehavior_Factory::createBehaviorCopy(OZDriftAttractedToBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZDriftAttractedToBehavior *v5;
  OZDriftAttractedToBehavior *v6;

  v5 = (OZDriftAttractedToBehavior *)operator new();
  OZDriftAttractedToBehavior::OZDriftAttractedToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F949BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZDriftAttractedToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Drift Attracted To Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRepelFromBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRepelFromBehavior_Factory *v0;

  v0 = (OZRepelFromBehavior_Factory *)operator new();
  OZRepelFromBehavior_Factory::OZRepelFromBehavior_Factory(v0);
  OZRepelFromBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F94A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::OZRepelFromBehavior_Factory(OZRepelFromBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562CE0;
  v4 = xmmword_1B3562D20;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8358;
  *((_QWORD *)this + 18) = &unk_1E65D8438;
}

void sub_1B2F94AF0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRepelFromBehavior *OZRepelFromBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRepelFromBehavior *v6;

  v6 = (OZRepelFromBehavior *)operator new();
  OZRepelFromBehavior::OZRepelFromBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F94B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

OZRepelFromBehavior *OZRepelFromBehavior_Factory::createCopy(OZRepelFromBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZRepelFromBehavior *v5;
  OZRepelFromBehavior *v6;

  v5 = (OZRepelFromBehavior *)operator new();
  OZRepelFromBehavior::OZRepelFromBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Repel From Behavior", "com.apple.ozone.framework");
}

PCString *OZRepelFromBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Repel From Behavior");
}

OZRepelFromBehavior *OZRepelFromBehavior_Factory::createBehaviorCopy(OZRepelFromBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZRepelFromBehavior *v5;
  OZRepelFromBehavior *v6;

  v5 = (OZRepelFromBehavior *)operator new();
  OZRepelFromBehavior::OZRepelFromBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4007EE8A1DLL);
  _Unwind_Resume(a1);
}

void OZRepelFromBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Repel From Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRepelorBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRepelorBehavior_Factory *v0;

  v0 = (OZRepelorBehavior_Factory *)operator new();
  OZRepelorBehavior_Factory::OZRepelorBehavior_Factory(v0);
  OZRepelorBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F94D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::OZRepelorBehavior_Factory(OZRepelorBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562CF0;
  v4 = xmmword_1B3562D30;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8490;
  *((_QWORD *)this + 18) = &unk_1E65D8570;
}

void sub_1B2F94DEC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRepelorBehavior *OZRepelorBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRepelorBehavior *v6;

  v6 = (OZRepelorBehavior *)operator new();
  OZRepelorBehavior::OZRepelorBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F94E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

OZRepelorBehavior *OZRepelorBehavior_Factory::createCopy(OZRepelorBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZRepelorBehavior *v5;
  OZRepelorBehavior *v6;

  v5 = (OZRepelorBehavior *)operator new();
  OZRepelorBehavior::OZRepelorBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Repel Behavior", "com.apple.ozone.framework");
}

PCString *OZRepelorBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Repel Behavior");
}

OZRepelorBehavior *OZRepelorBehavior_Factory::createBehaviorCopy(OZRepelorBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZRepelorBehavior *v5;
  OZRepelorBehavior *v6;

  v5 = (OZRepelorBehavior *)operator new();
  OZRepelorBehavior::OZRepelorBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F94FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B4C31086);
  _Unwind_Resume(a1);
}

void OZRepelorBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Repel Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZGravityBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGravityBehavior_Factory *v0;

  v0 = (OZGravityBehavior_Factory *)operator new();
  OZGravityBehavior_Factory::OZGravityBehavior_Factory(v0);
  OZGravityBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F95038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::OZGravityBehavior_Factory(OZGravityBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562D40;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D85C8;
  *((_QWORD *)this + 18) = &unk_1E65D86A8;
}

void sub_1B2F950E8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZGravityBehavior *OZGravityBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZGravityBehavior *v6;

  v6 = (OZGravityBehavior *)operator new();
  OZGravityBehavior::OZGravityBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F95158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

OZGravityBehavior *OZGravityBehavior_Factory::createCopy(OZGravityBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZGravityBehavior *v5;
  OZGravityBehavior *v6;

  v5 = (OZGravityBehavior *)operator new();
  OZGravityBehavior::OZGravityBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F951F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Gravity Behavior", "com.apple.ozone.framework");
}

PCString *OZGravityBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Gravity Behavior");
}

OZGravityBehavior *OZGravityBehavior_Factory::createBehaviorCopy(OZGravityBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZGravityBehavior *v5;
  OZGravityBehavior *v6;

  v5 = (OZGravityBehavior *)operator new();
  OZGravityBehavior::OZGravityBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F952B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZGravityBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Gravity Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZThrowBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZThrowBehavior_Factory *v0;

  v0 = (OZThrowBehavior_Factory *)operator new();
  OZThrowBehavior_Factory::OZThrowBehavior_Factory(v0);
  OZThrowBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F95334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::OZThrowBehavior_Factory(OZThrowBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562D50;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8700;
  *((_QWORD *)this + 18) = &unk_1E65D87E0;
}

void sub_1B2F953E4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZThrowBehavior *OZThrowBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZThrowBehavior *v6;

  v6 = (OZThrowBehavior *)operator new();
  OZThrowBehavior::OZThrowBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F95454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4090ACE74ALL);
  _Unwind_Resume(a1);
}

OZThrowBehavior *OZThrowBehavior_Factory::createCopy(OZThrowBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZThrowBehavior *v5;
  OZThrowBehavior *v6;

  v5 = (OZThrowBehavior *)operator new();
  OZThrowBehavior::OZThrowBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F954EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4090ACE74ALL);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Throw Behavior", "com.apple.ozone.framework");
}

PCString *OZThrowBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Throw Behavior");
}

PCString *OZThrowBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Basic Motion");
}

OZThrowBehavior *OZThrowBehavior_Factory::createBehaviorCopy(OZThrowBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZThrowBehavior *v5;
  OZThrowBehavior *v6;

  v5 = (OZThrowBehavior *)operator new();
  OZThrowBehavior::OZThrowBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F955BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4090ACE74ALL);
  _Unwind_Resume(a1);
}

void OZThrowBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Throw Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZSpinBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSpinBehavior_Factory *v0;

  v0 = (OZSpinBehavior_Factory *)operator new();
  OZSpinBehavior_Factory::OZSpinBehavior_Factory(v0);
  OZSpinBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F95640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::OZSpinBehavior_Factory(OZSpinBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562D60;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8838;
  *((_QWORD *)this + 18) = &unk_1E65D8918;
}

void sub_1B2F956F0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZSpinBehavior *OZSpinBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZSpinBehavior *v6;

  v6 = (OZSpinBehavior *)operator new();
  OZSpinBehavior::OZSpinBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F95760(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E24EDE16);
  _Unwind_Resume(a1);
}

OZSpinBehavior *OZSpinBehavior_Factory::createCopy(OZSpinBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZSpinBehavior *v5;
  OZSpinBehavior *v6;

  v5 = (OZSpinBehavior *)operator new();
  OZSpinBehavior::OZSpinBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F957F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E24EDE16);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Spin Behavior", "com.apple.ozone.framework");
}

PCString *OZSpinBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Spin Behavior");
}

OZSpinBehavior *OZSpinBehavior_Factory::createBehaviorCopy(OZSpinBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZSpinBehavior *v5;
  OZSpinBehavior *v6;

  v5 = (OZSpinBehavior *)operator new();
  OZSpinBehavior::OZSpinBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F958B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E24EDE16);
  _Unwind_Resume(a1);
}

void OZSpinBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Spin Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZBrownianBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior_Factory *v0;

  v0 = (OZBrownianBehavior_Factory *)operator new();
  OZBrownianBehavior_Factory::OZBrownianBehavior_Factory(v0);
  OZBrownianBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9593C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::OZBrownianBehavior_Factory(OZBrownianBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562D70;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8970;
  *((_QWORD *)this + 18) = &unk_1E65D8A50;
}

void sub_1B2F959EC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZBrownianBehavior *OZBrownianBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZBrownianBehavior *v6;

  v6 = (OZBrownianBehavior *)operator new();
  OZBrownianBehavior::OZBrownianBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F95A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4007283F0DLL);
  _Unwind_Resume(a1);
}

OZBrownianBehavior *OZBrownianBehavior_Factory::createCopy(OZBrownianBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZBrownianBehavior *v5;
  OZBrownianBehavior *v6;

  v5 = (OZBrownianBehavior *)operator new();
  OZBrownianBehavior::OZBrownianBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F95AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4007283F0DLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Random Motion Behavior", "com.apple.ozone.framework");
}

PCString *OZBrownianBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Random Motion Behavior");
}

OZBrownianBehavior *OZBrownianBehavior_Factory::createBehaviorCopy(OZBrownianBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZBrownianBehavior *v5;
  OZBrownianBehavior *v6;

  v5 = (OZBrownianBehavior *)operator new();
  OZBrownianBehavior::OZBrownianBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F95BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4007283F0DLL);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Random Motion Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZAlignSimBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZAlignSimBehavior_Factory *v0;

  v0 = (OZAlignSimBehavior_Factory *)operator new();
  OZAlignSimBehavior_Factory::OZAlignSimBehavior_Factory(v0);
  OZAlignSimBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F95C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::OZAlignSimBehavior_Factory(OZAlignSimBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562D80;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8AA8;
  *((_QWORD *)this + 18) = &unk_1E65D8B88;
}

void sub_1B2F95CE8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZAlignSimBehavior *OZAlignSimBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZAlignSimBehavior *v6;

  v6 = (OZAlignSimBehavior *)operator new();
  OZAlignSimBehavior::OZAlignSimBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F95D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40517E23F4);
  _Unwind_Resume(a1);
}

OZAlignSimBehavior *OZAlignSimBehavior_Factory::createCopy(OZAlignSimBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZAlignSimBehavior *v5;
  OZAlignSimBehavior *v6;

  v5 = (OZAlignSimBehavior *)operator new();
  OZAlignSimBehavior::OZAlignSimBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F95DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40517E23F4);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Align To Motion (Simulation) Behavior", "com.apple.ozone.framework");
}

PCString *OZAlignSimBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Align To Motion (Simulation) Behavior");
}

OZAlignSimBehavior *OZAlignSimBehavior_Factory::createBehaviorCopy(OZAlignSimBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZAlignSimBehavior *v5;
  OZAlignSimBehavior *v6;

  v5 = (OZAlignSimBehavior *)operator new();
  OZAlignSimBehavior::OZAlignSimBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F95EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40517E23F4);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Align To Motion (Simulation) Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRotationalDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRotationalDragBehavior_Factory *v0;

  v0 = (OZRotationalDragBehavior_Factory *)operator new();
  OZRotationalDragBehavior_Factory::OZRotationalDragBehavior_Factory(v0);
  OZRotationalDragBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F95F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::OZRotationalDragBehavior_Factory(OZRotationalDragBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562D90;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8BE0;
  *((_QWORD *)this + 18) = &unk_1E65D8CC0;
}

void sub_1B2F95FE4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRotationalDragBehavior *OZRotationalDragBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRotationalDragBehavior *v6;

  v6 = (OZRotationalDragBehavior *)operator new();
  OZRotationalDragBehavior::OZRotationalDragBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F96054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

OZRotationalDragBehavior *OZRotationalDragBehavior_Factory::createCopy(OZRotationalDragBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZRotationalDragBehavior *v5;
  OZRotationalDragBehavior *v6;

  v5 = (OZRotationalDragBehavior *)operator new();
  OZRotationalDragBehavior::OZRotationalDragBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F960EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rotational Drag Behavior", "com.apple.ozone.framework");
}

PCString *OZRotationalDragBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rotational Drag Behavior");
}

OZRotationalDragBehavior *OZRotationalDragBehavior_Factory::createBehaviorCopy(OZRotationalDragBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZRotationalDragBehavior *v5;
  OZRotationalDragBehavior *v6;

  v5 = (OZRotationalDragBehavior *)operator new();
  OZRotationalDragBehavior::OZRotationalDragBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F961AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C405E53A2FELL);
  _Unwind_Resume(a1);
}

void OZRotationalDragBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rotational Drag Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZSpringBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSpringBehavior_Factory *v0;

  v0 = (OZSpringBehavior_Factory *)operator new();
  OZSpringBehavior_Factory::OZSpringBehavior_Factory(v0);
  OZSpringBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F96230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::OZSpringBehavior_Factory(OZSpringBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562DA0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8D18;
  *((_QWORD *)this + 18) = &unk_1E65D8DF8;
}

void sub_1B2F962E0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZSpringBehavior *OZSpringBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZSpringBehavior *v6;

  v6 = (OZSpringBehavior *)operator new();
  OZSpringBehavior::OZSpringBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F96350(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40F0886A7ALL);
  _Unwind_Resume(a1);
}

OZSpringBehavior *OZSpringBehavior_Factory::createCopy(OZSpringBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZSpringBehavior *v5;
  OZSpringBehavior *v6;

  v5 = (OZSpringBehavior *)operator new();
  OZSpringBehavior::OZSpringBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F963E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40F0886A7ALL);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Spring Behavior", "com.apple.ozone.framework");
}

PCString *OZSpringBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Spring Behavior");
}

OZSpringBehavior *OZSpringBehavior_Factory::createBehaviorCopy(OZSpringBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZSpringBehavior *v5;
  OZSpringBehavior *v6;

  v5 = (OZSpringBehavior *)operator new();
  OZSpringBehavior::OZSpringBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F964A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40F0886A7ALL);
  _Unwind_Resume(a1);
}

void OZSpringBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Spring Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZViscousDragBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZViscousDragBehavior_Factory *v0;

  v0 = (OZViscousDragBehavior_Factory *)operator new();
  OZViscousDragBehavior_Factory::OZViscousDragBehavior_Factory(v0);
  OZViscousDragBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9652C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::OZViscousDragBehavior_Factory(OZViscousDragBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562DB0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8E50;
  *((_QWORD *)this + 18) = &unk_1E65D8F30;
}

void sub_1B2F965DC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZViscousDragBehavior *OZViscousDragBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZViscousDragBehavior *v6;

  v6 = (OZViscousDragBehavior *)operator new();
  OZViscousDragBehavior::OZViscousDragBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F9664C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40485E7B79);
  _Unwind_Resume(a1);
}

OZViscousDragBehavior *OZViscousDragBehavior_Factory::createCopy(OZViscousDragBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZViscousDragBehavior *v5;
  OZViscousDragBehavior *v6;

  v5 = (OZViscousDragBehavior *)operator new();
  OZViscousDragBehavior::OZViscousDragBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F966E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40485E7B79);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Viscous Drag Behavior", "com.apple.ozone.framework");
}

PCString *OZViscousDragBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Viscous Drag Behavior");
}

OZViscousDragBehavior *OZViscousDragBehavior_Factory::createBehaviorCopy(OZViscousDragBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZViscousDragBehavior *v5;
  OZViscousDragBehavior *v6;

  v5 = (OZViscousDragBehavior *)operator new();
  OZViscousDragBehavior::OZViscousDragBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F967A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40485E7B79);
  _Unwind_Resume(a1);
}

void OZViscousDragBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Viscous Drag Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZWindBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZWindBehavior_Factory *v0;

  v0 = (OZWindBehavior_Factory *)operator new();
  OZWindBehavior_Factory::OZWindBehavior_Factory(v0);
  OZWindBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F96828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::OZWindBehavior_Factory(OZWindBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3562DC0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D8F88;
  *((_QWORD *)this + 18) = &unk_1E65D9068;
}

void sub_1B2F968D8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZWindBehavior *OZWindBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZWindBehavior *v6;

  v6 = (OZWindBehavior *)operator new();
  OZWindBehavior::OZWindBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F96948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E8D74823);
  _Unwind_Resume(a1);
}

OZWindBehavior *OZWindBehavior_Factory::createCopy(OZWindBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZWindBehavior *v5;
  OZWindBehavior *v6;

  v5 = (OZWindBehavior *)operator new();
  OZWindBehavior::OZWindBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F969E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E8D74823);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Wind Behavior", "com.apple.ozone.framework");
}

PCString *OZWindBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Wind Behavior");
}

OZWindBehavior *OZWindBehavior_Factory::createBehaviorCopy(OZWindBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZWindBehavior *v5;
  OZWindBehavior *v6;

  v5 = (OZWindBehavior *)operator new();
  OZWindBehavior::OZWindBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F96AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40E8D74823);
  _Unwind_Resume(a1);
}

void OZWindBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Wind Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZVortexAroundBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZVortexAroundBehavior_Factory *v0;

  v0 = (OZVortexAroundBehavior_Factory *)operator new();
  OZVortexAroundBehavior_Factory::OZVortexAroundBehavior_Factory(v0);
  OZVortexAroundBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F96B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::OZVortexAroundBehavior_Factory(OZVortexAroundBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562CE0;
  v4 = xmmword_1B3562DD0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D90C0;
  *((_QWORD *)this + 18) = &unk_1E65D91A0;
}

void sub_1B2F96BD4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZVortexAroundBehavior *OZVortexAroundBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZVortexAroundBehavior *v6;

  v6 = (OZVortexAroundBehavior *)operator new();
  OZVortexAroundBehavior::OZVortexAroundBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F96C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CAA9D9EALL);
  _Unwind_Resume(a1);
}

OZVortexAroundBehavior *OZVortexAroundBehavior_Factory::createCopy(OZVortexAroundBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZVortexAroundBehavior *v5;
  OZVortexAroundBehavior *v6;

  v5 = (OZVortexAroundBehavior *)operator new();
  OZVortexAroundBehavior::OZVortexAroundBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F96CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CAA9D9EALL);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Vortex Around Behavior", "com.apple.ozone.framework");
}

PCString *OZVortexAroundBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Vortex Around Behavior");
}

OZVortexAroundBehavior *OZVortexAroundBehavior_Factory::createBehaviorCopy(OZVortexAroundBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZVortexAroundBehavior *v5;
  OZVortexAroundBehavior *v6;

  v5 = (OZVortexAroundBehavior *)operator new();
  OZVortexAroundBehavior::OZVortexAroundBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F96D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CAA9D9EALL);
  _Unwind_Resume(a1);
}

void OZVortexAroundBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Vortex Around Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZVortexBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZVortexBehavior_Factory *v0;

  v0 = (OZVortexBehavior_Factory *)operator new();
  OZVortexBehavior_Factory::OZVortexBehavior_Factory(v0);
  OZVortexBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F96E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::OZVortexBehavior_Factory(OZVortexBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562CF0;
  v4 = xmmword_1B3562DE0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D91F8;
  *((_QWORD *)this + 18) = &unk_1E65D92D8;
}

void sub_1B2F96ED0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZVortexBehavior *OZVortexBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZVortexBehavior *v6;

  v6 = (OZVortexBehavior *)operator new();
  OZVortexBehavior::OZVortexBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F96F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407695AE63);
  _Unwind_Resume(a1);
}

OZVortexBehavior *OZVortexBehavior_Factory::createCopy(OZVortexBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZVortexBehavior *v5;
  OZVortexBehavior *v6;

  v5 = (OZVortexBehavior *)operator new();
  OZVortexBehavior::OZVortexBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F96FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407695AE63);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Vortex Behavior", "com.apple.ozone.framework");
}

PCString *OZVortexBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Vortex Behavior");
}

OZVortexBehavior *OZVortexBehavior_Factory::createBehaviorCopy(OZVortexBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZVortexBehavior *v5;
  OZVortexBehavior *v6;

  v5 = (OZVortexBehavior *)operator new();
  OZVortexBehavior::OZVortexBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407695AE63);
  _Unwind_Resume(a1);
}

void OZVortexBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Vortex Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZBoundsCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBoundsCollisionBehavior_Factory *v0;

  v0 = (OZBoundsCollisionBehavior_Factory *)operator new();
  OZBoundsCollisionBehavior_Factory::OZBoundsCollisionBehavior_Factory(v0);
  OZBoundsCollisionBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9711C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::OZBoundsCollisionBehavior_Factory(OZBoundsCollisionBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD80;
  v4 = xmmword_1B3562DF0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D9330;
  *((_QWORD *)this + 18) = &unk_1E65D9410;
}

void sub_1B2F971CC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZBoundsCollisionBehavior *OZBoundsCollisionBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZBoundsCollisionBehavior *v6;

  v6 = (OZBoundsCollisionBehavior *)operator new();
  OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2F9723C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4050FA34F2);
  _Unwind_Resume(a1);
}

OZBoundsCollisionBehavior *OZBoundsCollisionBehavior_Factory::createCopy(OZBoundsCollisionBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZBoundsCollisionBehavior *v5;
  OZBoundsCollisionBehavior *v6;

  v5 = (OZBoundsCollisionBehavior *)operator new();
  OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F972D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4050FA34F2);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Edge Collision Behavior", "com.apple.ozone.framework");
}

PCString *OZBoundsCollisionBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Edge Collision Behavior");
}

OZBoundsCollisionBehavior *OZBoundsCollisionBehavior_Factory::createBehaviorCopy(OZBoundsCollisionBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZBoundsCollisionBehavior *v5;
  OZBoundsCollisionBehavior *v6;

  v5 = (OZBoundsCollisionBehavior *)operator new();
  OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4050FA34F2);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Edge Collision Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRampBehavior_Factory *v0;

  v0 = (OZRampBehavior_Factory *)operator new();
  OZRampBehavior_Factory::OZRampBehavior_Factory(v0);
  OZRampBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F97418(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::OZRampBehavior_Factory(OZRampBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562E00;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9468;
  *((_QWORD *)this + 18) = &unk_1E65D9548;
}

void sub_1B2F974BC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRampBehavior *OZRampBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRampBehavior *v6;

  v6 = (OZRampBehavior *)operator new();
  OZRampBehavior::OZRampBehavior(v6, this, a2, a3);
  (*(void (**)(OZRampBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9753C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

OZRampBehavior *OZRampBehavior_Factory::createCopy(OZRampBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZRampBehavior *v5;
  const OZRampBehavior *v6;

  v5 = (OZRampBehavior *)operator new();
  OZRampBehavior::OZRampBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F975D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Ramp Behavior", "com.apple.ozone.framework");
}

PCString *OZRampBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Ramp Behavior");
}

OZRampBehavior *OZRampBehavior_Factory::createBehaviorCopy(OZRampBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZRampBehavior *v5;
  const OZRampBehavior *v6;

  v5 = (OZRampBehavior *)operator new();
  OZRampBehavior::OZRampBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZRampBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Ramp Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZExponentialBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZExponentialBehavior_Factory *v0;

  v0 = (OZExponentialBehavior_Factory *)operator new();
  OZExponentialBehavior_Factory::OZExponentialBehavior_Factory(v0);
  OZExponentialBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F97718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::OZExponentialBehavior_Factory(OZExponentialBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562E00;
  v4 = xmmword_1B3562E10;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D95A0;
  *((_QWORD *)this + 18) = &unk_1E65D9680;
}

void sub_1B2F977BC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZExponentialBehavior *OZExponentialBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZExponentialBehavior *v6;

  v6 = (OZExponentialBehavior *)operator new();
  OZExponentialBehavior::OZExponentialBehavior(v6, this, a2, a3);
  (*(void (**)(OZExponentialBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9783C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

OZExponentialBehavior *OZExponentialBehavior_Factory::createCopy(OZExponentialBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZExponentialBehavior *v5;
  const OZExponentialBehavior *v6;

  v5 = (OZExponentialBehavior *)operator new();
  OZExponentialBehavior::OZExponentialBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F978D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Exponential Behavior", "com.apple.ozone.framework");
}

PCString *OZExponentialBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Exponential Behavior");
}

OZExponentialBehavior *OZExponentialBehavior_Factory::createBehaviorCopy(OZExponentialBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZExponentialBehavior *v5;
  const OZExponentialBehavior *v6;

  v5 = (OZExponentialBehavior *)operator new();
  OZExponentialBehavior::OZExponentialBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZExponentialBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Exponential Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZLogarithmicBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLogarithmicBehavior_Factory *v0;

  v0 = (OZLogarithmicBehavior_Factory *)operator new();
  OZLogarithmicBehavior_Factory::OZLogarithmicBehavior_Factory(v0);
  OZLogarithmicBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F97A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::OZLogarithmicBehavior_Factory(OZLogarithmicBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562E00;
  v4 = xmmword_1B3562E20;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D96D8;
  *((_QWORD *)this + 18) = &unk_1E65D97B8;
}

void sub_1B2F97ABC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZLogarithmicBehavior *OZLogarithmicBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZLogarithmicBehavior *v6;

  v6 = (OZLogarithmicBehavior *)operator new();
  OZLogarithmicBehavior::OZLogarithmicBehavior(v6, this, a2, a3);
  (*(void (**)(OZLogarithmicBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F97B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

OZLogarithmicBehavior *OZLogarithmicBehavior_Factory::createCopy(OZLogarithmicBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZLogarithmicBehavior *v5;
  const OZLogarithmicBehavior *v6;

  v5 = (OZLogarithmicBehavior *)operator new();
  OZLogarithmicBehavior::OZLogarithmicBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Logarithmic Behavior", "com.apple.ozone.framework");
}

PCString *OZLogarithmicBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Logarithmic Behavior");
}

OZLogarithmicBehavior *OZLogarithmicBehavior_Factory::createBehaviorCopy(OZLogarithmicBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZLogarithmicBehavior *v5;
  const OZLogarithmicBehavior *v6;

  v5 = (OZLogarithmicBehavior *)operator new();
  OZLogarithmicBehavior::OZLogarithmicBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E90F3EC5);
  _Unwind_Resume(a1);
}

void OZLogarithmicBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Logarithmic Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRateBehavior_Factory *v0;

  v0 = (OZRateBehavior_Factory *)operator new();
  OZRateBehavior_Factory::OZRateBehavior_Factory(v0);
  OZRateBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F97D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::OZRateBehavior_Factory(OZRateBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562E30;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9810;
  *((_QWORD *)this + 18) = &unk_1E65D98F0;
}

void sub_1B2F97DBC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRateBehavior *OZRateBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRateBehavior *v6;

  v6 = (OZRateBehavior *)operator new();
  OZRateBehavior::OZRateBehavior(v6, this, a2, a3);
  (*(void (**)(OZRateBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F97E3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40043C88C7);
  _Unwind_Resume(a1);
}

OZRateBehavior *OZRateBehavior_Factory::createCopy(OZRateBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZRateBehavior *v5;
  const OZRateBehavior *v6;

  v5 = (OZRateBehavior *)operator new();
  OZRateBehavior::OZRateBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40043C88C7);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rate Behavior", "com.apple.ozone.framework");
}

PCString *OZRateBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rate Behavior");
}

OZRateBehavior *OZRateBehavior_Factory::createBehaviorCopy(OZRateBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZRateBehavior *v5;
  const OZRateBehavior *v6;

  v5 = (OZRateBehavior *)operator new();
  OZRateBehavior::OZRateBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F97F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40043C88C7);
  _Unwind_Resume(a1);
}

void OZRateBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rate Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZGrowShrinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGrowShrinkBehavior_Factory *v0;

  v0 = (OZGrowShrinkBehavior_Factory *)operator new();
  OZGrowShrinkBehavior_Factory::OZGrowShrinkBehavior_Factory(v0);
  OZGrowShrinkBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F98018(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::OZGrowShrinkBehavior_Factory(OZGrowShrinkBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562E40;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65D9948;
  *((_QWORD *)this + 18) = &unk_1E65D9A28;
}

void sub_1B2F980C8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior *OZGrowShrinkBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZGrowShrinkBehavior *v6;

  v6 = (OZGrowShrinkBehavior *)operator new();
  OZGrowShrinkBehavior::OZGrowShrinkBehavior(v6, this, a2, a3);
  (*(void (**)(OZGrowShrinkBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F98148(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40169269A5);
  _Unwind_Resume(a1);
}

OZGrowShrinkBehavior *OZGrowShrinkBehavior_Factory::createCopy(OZGrowShrinkBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZGrowShrinkBehavior *v5;
  const OZGrowShrinkBehavior *v6;

  v5 = (OZGrowShrinkBehavior *)operator new();
  OZGrowShrinkBehavior::OZGrowShrinkBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F981E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40169269A5);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Grow/Shrink Behavior", "com.apple.ozone.framework");
}

PCString *OZGrowShrinkBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Grow/Shrink Behavior");
}

OZGrowShrinkBehavior *OZGrowShrinkBehavior_Factory::createBehaviorCopy(OZGrowShrinkBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZGrowShrinkBehavior *v5;
  const OZGrowShrinkBehavior *v6;

  v5 = (OZGrowShrinkBehavior *)operator new();
  OZGrowShrinkBehavior::OZGrowShrinkBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F982A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40169269A5);
  _Unwind_Resume(a1);
}

void OZGrowShrinkBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Grow/Shrink Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZAverageBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZAverageBehavior_Factory *v0;

  v0 = (OZAverageBehavior_Factory *)operator new();
  OZAverageBehavior_Factory::OZAverageBehavior_Factory(v0);
  OZAverageBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F98324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::OZAverageBehavior_Factory(OZAverageBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562E50;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9A80;
  *((_QWORD *)this + 18) = &unk_1E65D9B60;
}

void sub_1B2F983C8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZAverageBehavior *OZAverageBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZAverageBehavior *v6;

  v6 = (OZAverageBehavior *)operator new();
  OZAverageBehavior::OZAverageBehavior(v6, this, a2, a3);
  (*(void (**)(OZAverageBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F98448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40AA8D5CE1);
  _Unwind_Resume(a1);
}

OZAverageBehavior *OZAverageBehavior_Factory::createCopy(OZAverageBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZAverageBehavior *v5;
  const OZAverageBehavior *v6;

  v5 = (OZAverageBehavior *)operator new();
  OZAverageBehavior::OZAverageBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F984E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40AA8D5CE1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Average Behavior", "com.apple.ozone.framework");
}

PCString *OZAverageBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Average Behavior");
}

OZAverageBehavior *OZAverageBehavior_Factory::createBehaviorCopy(OZAverageBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZAverageBehavior *v5;
  const OZAverageBehavior *v6;

  v5 = (OZAverageBehavior *)operator new();
  OZAverageBehavior::OZAverageBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F985A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40AA8D5CE1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Average Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRandomizeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRandomizeBehavior_Factory *v0;

  v0 = (OZRandomizeBehavior_Factory *)operator new();
  OZRandomizeBehavior_Factory::OZRandomizeBehavior_Factory(v0);
  OZRandomizeBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F98624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::OZRandomizeBehavior_Factory(OZRandomizeBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562E70;
  v4 = xmmword_1B3562E60;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9BB8;
  *((_QWORD *)this + 18) = &unk_1E65D9C98;
}

void sub_1B2F986C8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRandomizeBehavior *OZRandomizeBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRandomizeBehavior *v6;

  v6 = (OZRandomizeBehavior *)operator new();
  OZRandomizeBehavior::OZRandomizeBehavior(v6, this, a2, a3);
  (*(void (**)(OZRandomizeBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F98748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

OZRandomizeBehavior *OZRandomizeBehavior_Factory::createCopy(OZRandomizeBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZRandomizeBehavior *v5;
  const OZRandomizeBehavior *v6;

  v5 = (OZRandomizeBehavior *)operator new();
  OZRandomizeBehavior::OZRandomizeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F987E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Randomize Behavior", "com.apple.ozone.framework");
}

PCString *OZRandomizeBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Randomize Behavior");
}

OZRandomizeBehavior *OZRandomizeBehavior_Factory::createBehaviorCopy(OZRandomizeBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZRandomizeBehavior *v5;
  const OZRandomizeBehavior *v6;

  v5 = (OZRandomizeBehavior *)operator new();
  OZRandomizeBehavior::OZRandomizeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F988A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZRandomizeBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Randomize Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZReverseBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZReverseBehavior_Factory *v0;

  v0 = (OZReverseBehavior_Factory *)operator new();
  OZReverseBehavior_Factory::OZReverseBehavior_Factory(v0);
  OZReverseBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F98924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::OZReverseBehavior_Factory(OZReverseBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562E80;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9CF0;
  *((_QWORD *)this + 18) = &unk_1E65D9DD0;
}

void sub_1B2F989C8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZReverseBehavior *OZReverseBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZReverseBehavior *v6;

  v6 = (OZReverseBehavior *)operator new();
  OZReverseBehavior::OZReverseBehavior(v6, this, a2, a3);
  (*(void (**)(OZReverseBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F98A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

OZReverseBehavior *OZReverseBehavior_Factory::createCopy(OZReverseBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZReverseBehavior *v5;
  const OZReverseBehavior *v6;

  v5 = (OZReverseBehavior *)operator new();
  OZReverseBehavior::OZReverseBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F98AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Reverse Behavior", "com.apple.ozone.framework");
}

PCString *OZReverseBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Reverse Behavior");
}

OZReverseBehavior *OZReverseBehavior_Factory::createBehaviorCopy(OZReverseBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZReverseBehavior *v5;
  const OZReverseBehavior *v6;

  v5 = (OZReverseBehavior *)operator new();
  OZReverseBehavior::OZReverseBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F98BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZReverseBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Reverse Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZNegateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZNegateBehavior_Factory *v0;

  v0 = (OZNegateBehavior_Factory *)operator new();
  OZNegateBehavior_Factory::OZNegateBehavior_Factory(v0);
  OZNegateBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F98C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::OZNegateBehavior_Factory(OZNegateBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562E90;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9E28;
  *((_QWORD *)this + 18) = &unk_1E65D9F08;
}

void sub_1B2F98CC8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZNegateBehavior *OZNegateBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZNegateBehavior *v6;

  v6 = (OZNegateBehavior *)operator new();
  OZNegateBehavior::OZNegateBehavior(v6, this, a2, a3);
  (*(void (**)(OZNegateBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F98D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

OZNegateBehavior *OZNegateBehavior_Factory::createCopy(OZNegateBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZNegateBehavior *v5;
  const OZNegateBehavior *v6;

  v5 = (OZNegateBehavior *)operator new();
  OZNegateBehavior::OZNegateBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F98DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Negate Behavior", "com.apple.ozone.framework");
}

PCString *OZNegateBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Negate Behavior");
}

OZNegateBehavior *OZNegateBehavior_Factory::createBehaviorCopy(OZNegateBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZNegateBehavior *v5;
  const OZNegateBehavior *v6;

  v5 = (OZNegateBehavior *)operator new();
  OZNegateBehavior::OZNegateBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F98EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZNegateBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Negate Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZStopBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZStopBehavior_Factory *v0;

  v0 = (OZStopBehavior_Factory *)operator new();
  OZStopBehavior_Factory::OZStopBehavior_Factory(v0);
  OZStopBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F98F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::OZStopBehavior_Factory(OZStopBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562EA0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65D9F60;
  *((_QWORD *)this + 18) = &unk_1E65DA040;
}

void sub_1B2F98FC8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZStopBehavior *OZStopBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZStopBehavior *v6;

  v6 = (OZStopBehavior *)operator new();
  OZStopBehavior::OZStopBehavior(v6, this, a2, a3);
  (*(void (**)(OZStopBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F99048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

OZStopBehavior *OZStopBehavior_Factory::createCopy(OZStopBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZStopBehavior *v5;
  const OZStopBehavior *v6;

  v5 = (OZStopBehavior *)operator new();
  OZStopBehavior::OZStopBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F990E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Stop Behavior", "com.apple.ozone.framework");
}

PCString *OZStopBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Stop Behavior");
}

OZStopBehavior *OZStopBehavior_Factory::createBehaviorCopy(OZStopBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZStopBehavior *v5;
  const OZStopBehavior *v6;

  v5 = (OZStopBehavior *)operator new();
  OZStopBehavior::OZStopBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F991A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZStopBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Stop Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZOscillateBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZOscillateBehavior_Factory *v0;

  v0 = (OZOscillateBehavior_Factory *)operator new();
  OZOscillateBehavior_Factory::OZOscillateBehavior_Factory(v0);
  OZOscillateBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F99224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::OZOscillateBehavior_Factory(OZOscillateBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562EB0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DA098;
  *((_QWORD *)this + 18) = &unk_1E65DA178;
}

void sub_1B2F992C8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZOscillateBehavior *OZOscillateBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZOscillateBehavior *v6;

  v6 = (OZOscillateBehavior *)operator new();
  OZOscillateBehavior::OZOscillateBehavior(v6, this, a2, a3);
  (*(void (**)(OZOscillateBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F99348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4038C9F42CLL);
  _Unwind_Resume(a1);
}

OZOscillateBehavior *OZOscillateBehavior_Factory::createCopy(OZOscillateBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZOscillateBehavior *v5;
  const OZOscillateBehavior *v6;

  v5 = (OZOscillateBehavior *)operator new();
  OZOscillateBehavior::OZOscillateBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F993E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4038C9F42CLL);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Oscillate Behavior", "com.apple.ozone.framework");
}

PCString *OZOscillateBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Oscillate Behavior");
}

OZOscillateBehavior *OZOscillateBehavior_Factory::createBehaviorCopy(OZOscillateBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZOscillateBehavior *v5;
  const OZOscillateBehavior *v6;

  v5 = (OZOscillateBehavior *)operator new();
  OZOscillateBehavior::OZOscillateBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F994A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4038C9F42CLL);
  _Unwind_Resume(a1);
}

void OZOscillateBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Oscillate Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZFadeInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFadeInOutBehavior_Factory *v0;

  v0 = (OZFadeInOutBehavior_Factory *)operator new();
  OZFadeInOutBehavior_Factory::OZFadeInOutBehavior_Factory(v0);
  OZFadeInOutBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F99524(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::OZFadeInOutBehavior_Factory(OZFadeInOutBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562EC0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054BC0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DA1D0;
  *((_QWORD *)this + 18) = &unk_1E65DA2B0;
}

void sub_1B2F995D4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZFadeInOutBehavior *OZFadeInOutBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZFadeInOutBehavior *v6;

  v6 = (OZFadeInOutBehavior *)operator new();
  OZFadeInOutBehavior::OZFadeInOutBehavior(v6, this, a2, a3);
  (*(void (**)(OZFadeInOutBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F99654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403800496ELL);
  _Unwind_Resume(a1);
}

OZFadeInOutBehavior *OZFadeInOutBehavior_Factory::createCopy(OZFadeInOutBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZFadeInOutBehavior *v5;
  const OZFadeInOutBehavior *v6;

  v5 = (OZFadeInOutBehavior *)operator new();
  OZFadeInOutBehavior::OZFadeInOutBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F996EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403800496ELL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Fade In/Fade Out Behavior", "com.apple.ozone.framework");
}

PCString *OZFadeInOutBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Fade In/Fade Out Behavior");
}

OZFadeInOutBehavior *OZFadeInOutBehavior_Factory::createBehaviorCopy(OZFadeInOutBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZFadeInOutBehavior *v5;
  const OZFadeInOutBehavior *v6;

  v5 = (OZFadeInOutBehavior *)operator new();
  OZFadeInOutBehavior::OZFadeInOutBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F997AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403800496ELL);
  _Unwind_Resume(a1);
}

void OZFadeInOutBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Fade In/Fade Out Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZSnapAlignBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSnapAlignBehavior_Factory *v0;

  v0 = (OZSnapAlignBehavior_Factory *)operator new();
  OZSnapAlignBehavior_Factory::OZSnapAlignBehavior_Factory(v0);
  OZSnapAlignBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F99830(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::OZSnapAlignBehavior_Factory(OZSnapAlignBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562ED0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DA308;
  *((_QWORD *)this + 18) = &unk_1E65DA3E8;
}

void sub_1B2F998E0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZSnapAlignBehavior *OZSnapAlignBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZSnapAlignBehavior *v6;

  v6 = (OZSnapAlignBehavior *)operator new();
  OZSnapAlignBehavior::OZSnapAlignBehavior(v6, this, a2, a3);
  (*(void (**)(OZSnapAlignBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F99960(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4044E5C1C2);
  _Unwind_Resume(a1);
}

OZSnapAlignBehavior *OZSnapAlignBehavior_Factory::createCopy(OZSnapAlignBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZSnapAlignBehavior *v5;
  const OZSnapAlignBehavior *v6;

  v5 = (OZSnapAlignBehavior *)operator new();
  OZSnapAlignBehavior::OZSnapAlignBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F999F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4044E5C1C2);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Snap Alignment to Motion Behavior", "com.apple.ozone.framework");
}

PCString *OZSnapAlignBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Snap Alignment to Motion Behavior");
}

OZSnapAlignBehavior *OZSnapAlignBehavior_Factory::createBehaviorCopy(OZSnapAlignBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZSnapAlignBehavior *v5;
  const OZSnapAlignBehavior *v6;

  v5 = (OZSnapAlignBehavior *)operator new();
  OZSnapAlignBehavior::OZSnapAlignBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F99AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4044E5C1C2);
  _Unwind_Resume(a1);
}

void OZSnapAlignBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Snap Alignment to Motion Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZFocusBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFocusBehavior_Factory *v0;

  v0 = (OZFocusBehavior_Factory *)operator new();
  OZFocusBehavior_Factory::OZFocusBehavior_Factory(v0);
  OZFocusBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F99B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::OZFocusBehavior_Factory(OZFocusBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562EE0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CF40;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DA440;
  *((_QWORD *)this + 18) = &unk_1E65DA520;
}

void sub_1B2F99BEC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZFocusBehavior *OZFocusBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZFocusBehavior *v6;

  v6 = (OZFocusBehavior *)operator new();
  OZFocusBehavior::OZFocusBehavior(v6, this, a2, a3);
  (*(void (**)(OZFocusBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F99C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C403D53667BLL);
  _Unwind_Resume(a1);
}

OZFocusBehavior *OZFocusBehavior_Factory::createCopy(OZFocusBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZFocusBehavior *v5;
  const OZFocusBehavior *v6;

  v5 = (OZFocusBehavior *)operator new();
  OZFocusBehavior::OZFocusBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F99D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C403D53667BLL);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Focus Behavior", "com.apple.ozone.framework");
}

PCString *OZFocusBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Focus Behavior");
}

void OZFocusBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Camera Behavior Category", "com.apple.ozone.framework");
}

PCString *OZFocusBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Camera");
}

OZFocusBehavior *OZFocusBehavior_Factory::createBehaviorCopy(OZFocusBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZFocusBehavior *v5;
  const OZFocusBehavior *v6;

  v5 = (OZFocusBehavior *)operator new();
  OZFocusBehavior::OZFocusBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F99DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C403D53667BLL);
  _Unwind_Resume(a1);
}

void OZFocusBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Focus Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZFramingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFramingBehavior_Factory *v0;

  v0 = (OZFramingBehavior_Factory *)operator new();
  OZFramingBehavior_Factory::OZFramingBehavior_Factory(v0);
  OZFramingBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F99E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::OZFramingBehavior_Factory(OZFramingBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562EF0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DA578;
  *((_QWORD *)this + 18) = &unk_1E65DA658;
}

void sub_1B2F99F20(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZFramingBehavior *OZFramingBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZFramingBehavior *v6;

  v6 = (OZFramingBehavior *)operator new();
  OZFramingBehavior::OZFramingBehavior(v6, this, a2, a3);
  (*(void (**)(OZFramingBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F99FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40644A3602);
  _Unwind_Resume(a1);
}

OZFramingBehavior *OZFramingBehavior_Factory::createCopy(OZFramingBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZFramingBehavior *v5;
  const OZFramingBehavior *v6;

  v5 = (OZFramingBehavior *)operator new();
  OZFramingBehavior::OZFramingBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40644A3602);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Framing Behavior", "com.apple.ozone.framework");
}

PCString *OZFramingBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Framing Behavior");
}

OZFramingBehavior *OZFramingBehavior_Factory::createBehaviorCopy(OZFramingBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZFramingBehavior *v5;
  const OZFramingBehavior *v6;

  v5 = (OZFramingBehavior *)operator new();
  OZFramingBehavior::OZFramingBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A0F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40644A3602);
  _Unwind_Resume(a1);
}

void OZFramingBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Framing Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZMoveToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMoveToBehavior_Factory *v0;

  v0 = (OZMoveToBehavior_Factory *)operator new();
  OZMoveToBehavior_Factory::OZMoveToBehavior_Factory(v0);
  OZMoveToBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9A17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::OZMoveToBehavior_Factory(OZMoveToBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F00;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DA6B0;
  *((_QWORD *)this + 18) = &unk_1E65DA790;
}

void sub_1B2F9A22C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZMoveToBehavior *OZMoveToBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZMoveToBehavior *v6;

  v6 = (OZMoveToBehavior *)operator new();
  OZMoveToBehavior::OZMoveToBehavior(v6, this, a2, a3);
  (*(void (**)(OZMoveToBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9A2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB464180);
  _Unwind_Resume(a1);
}

OZMoveToBehavior *OZMoveToBehavior_Factory::createCopy(OZMoveToBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZMoveToBehavior *v5;
  const OZMoveToBehavior *v6;

  v5 = (OZMoveToBehavior *)operator new();
  OZMoveToBehavior::OZMoveToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB464180);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Move To Behavior", "com.apple.ozone.framework");
}

PCString *OZMoveToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Move To Behavior");
}

OZMoveToBehavior *OZMoveToBehavior_Factory::createBehaviorCopy(OZMoveToBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZMoveToBehavior *v5;
  const OZMoveToBehavior *v6;

  v5 = (OZMoveToBehavior *)operator new();
  OZMoveToBehavior::OZMoveToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB464180);
  _Unwind_Resume(a1);
}

void OZMoveToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Move To Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZPointAtBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZPointAtBehavior_Factory *v0;

  v0 = (OZPointAtBehavior_Factory *)operator new();
  OZPointAtBehavior_Factory::OZPointAtBehavior_Factory(v0);
  OZPointAtBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9A488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::OZPointAtBehavior_Factory(OZPointAtBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F10;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DA7E8;
  *((_QWORD *)this + 18) = &unk_1E65DA8C8;
}

void sub_1B2F9A538(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZPointAtBehavior *OZPointAtBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZPointAtBehavior *v6;

  v6 = (OZPointAtBehavior *)operator new();
  OZPointAtBehavior::OZPointAtBehavior(v6, this, a2, a3);
  (*(void (**)(OZPointAtBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9A5B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A7CEF128);
  _Unwind_Resume(a1);
}

OZPointAtBehavior *OZPointAtBehavior_Factory::createCopy(OZPointAtBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZPointAtBehavior *v5;
  const OZPointAtBehavior *v6;

  v5 = (OZPointAtBehavior *)operator new();
  OZPointAtBehavior::OZPointAtBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A650(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A7CEF128);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Point At Behavior", "com.apple.ozone.framework");
}

PCString *OZPointAtBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Point At Behavior");
}

OZPointAtBehavior *OZPointAtBehavior_Factory::createBehaviorCopy(OZPointAtBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZPointAtBehavior *v5;
  const OZPointAtBehavior *v6;

  v5 = (OZPointAtBehavior *)operator new();
  OZPointAtBehavior::OZPointAtBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A7CEF128);
  _Unwind_Resume(a1);
}

void OZPointAtBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Point At Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZWriggleBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZWriggleBehavior_Factory *v0;

  v0 = (OZWriggleBehavior_Factory *)operator new();
  OZWriggleBehavior_Factory::OZWriggleBehavior_Factory(v0);
  OZWriggleBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9A794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::OZWriggleBehavior_Factory(OZWriggleBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562E70;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DA920;
  *((_QWORD *)this + 18) = &unk_1E65DAA00;
}

void sub_1B2F9A838(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZWriggleBehavior *OZWriggleBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZWriggleBehavior *v6;

  v6 = (OZWriggleBehavior *)operator new();
  OZWriggleBehavior::OZWriggleBehavior(v6, this, a2, a3);
  (*(void (**)(OZWriggleBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9A8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

OZWriggleBehavior *OZWriggleBehavior_Factory::createCopy(OZWriggleBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZWriggleBehavior *v5;
  const OZWriggleBehavior *v6;

  v5 = (OZWriggleBehavior *)operator new();
  OZWriggleBehavior::OZWriggleBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9A950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Wriggle Behavior", "com.apple.ozone.framework");
}

PCString *OZWriggleBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Wriggle Behavior");
}

OZWriggleBehavior *OZWriggleBehavior_Factory::createBehaviorCopy(OZWriggleBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZWriggleBehavior *v5;
  const OZWriggleBehavior *v6;

  v5 = (OZWriggleBehavior *)operator new();
  OZWriggleBehavior::OZWriggleBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9AA10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406BAFD185);
  _Unwind_Resume(a1);
}

void OZWriggleBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Wriggle Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZGenericBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGenericBehavior_Factory *v0;

  v0 = (OZGenericBehavior_Factory *)operator new();
  OZGenericBehavior_Factory::OZGenericBehavior_Factory(v0);
  OZGenericBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9AA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::OZGenericBehavior_Factory(OZGenericBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F20;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DAA58;
  *((_QWORD *)this + 18) = &unk_1E65DAB38;
}

void sub_1B2F9AB38(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZGenericBehavior *OZGenericBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZGenericBehavior *v6;

  v6 = (OZGenericBehavior *)operator new();
  OZGenericBehavior::OZGenericBehavior(v6, this, a2, a3);
  (*(void (**)(OZGenericBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9ABB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

OZGenericBehavior *OZGenericBehavior_Factory::createCopy(OZGenericBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZGenericBehavior *v5;
  const OZGenericBehavior *v6;

  v5 = (OZGenericBehavior *)operator new();
  OZGenericBehavior::OZGenericBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9AC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Custom Behavior", "com.apple.ozone.framework");
}

PCString *OZGenericBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Custom Behavior");
}

OZGenericBehavior *OZGenericBehavior_Factory::createBehaviorCopy(OZGenericBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZGenericBehavior *v5;
  const OZGenericBehavior *v6;

  v5 = (OZGenericBehavior *)operator new();
  OZGenericBehavior::OZGenericBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9AD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void OZGenericBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Custom Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZGenericBehaviorV1_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGenericBehaviorV1_Factory *v0;

  v0 = (OZGenericBehaviorV1_Factory *)operator new();
  OZGenericBehaviorV1_Factory::OZGenericBehaviorV1_Factory(v0);
  OZGenericBehaviorV1_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9AD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV1_Factory::OZGenericBehaviorV1_Factory(OZGenericBehaviorV1_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562F20;
  v4 = xmmword_1B3562F30;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DAB90;
  *((_QWORD *)this + 18) = &unk_1E65DAC70;
}

void sub_1B2F9AE38(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZGenericBehaviorV1 *OZGenericBehaviorV1_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZGenericBehaviorV1 *v6;

  v6 = (OZGenericBehaviorV1 *)operator new();
  OZGenericBehaviorV1::OZGenericBehaviorV1(v6, this, a2, a3);
  (*(void (**)(OZGenericBehaviorV1 *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9AEB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

OZGenericBehaviorV1 *OZGenericBehaviorV1_Factory::createCopy(OZGenericBehaviorV1_Factory *this, OZFactoryBase *a2, char a3)
{
  OZGenericBehaviorV1 *v5;
  unint64_t ***v6;

  v5 = (OZGenericBehaviorV1 *)operator new();
  OZGenericBehaviorV1::OZGenericBehaviorV1(v5, v6, a3);
  return v5;
}

void sub_1B2F9AF50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

OZGenericBehaviorV1 *OZGenericBehaviorV1_Factory::createBehaviorCopy(OZGenericBehaviorV1_Factory *this, OZBehavior *a2, char a3)
{
  OZGenericBehaviorV1 *v5;
  unint64_t ***v6;

  v5 = (OZGenericBehaviorV1 *)operator new();
  OZGenericBehaviorV1::OZGenericBehaviorV1(v5, v6, a3);
  return v5;
}

void sub_1B2F9AFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZGenericBehaviorV2_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGenericBehaviorV2_Factory *v0;

  v0 = (OZGenericBehaviorV2_Factory *)operator new();
  OZGenericBehaviorV2_Factory::OZGenericBehaviorV2_Factory(v0);
  OZGenericBehaviorV2_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9B054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZGenericBehaviorV2_Factory::OZGenericBehaviorV2_Factory(OZGenericBehaviorV2_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F40;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DACC8;
  *((_QWORD *)this + 18) = &unk_1E65DADA8;
}

void sub_1B2F9B0F8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZGenericBehaviorV2 *OZGenericBehaviorV2_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZGenericBehaviorV2 *v6;

  v6 = (OZGenericBehaviorV2 *)operator new();
  OZGenericBehaviorV2::OZGenericBehaviorV2(v6, this, a2, a3);
  (*(void (**)(OZGenericBehaviorV2 *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9B178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

OZGenericBehaviorV2 *OZGenericBehaviorV2_Factory::createCopy(OZGenericBehaviorV2_Factory *this, OZFactoryBase *a2, char a3)
{
  OZGenericBehaviorV2 *v5;
  unint64_t ***v6;

  v5 = (OZGenericBehaviorV2 *)operator new();
  OZGenericBehaviorV2::OZGenericBehaviorV2(v5, v6, a3);
  return v5;
}

void sub_1B2F9B210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

uint64_t OZGenericBehaviorV2_Factory::revision(OZGenericBehaviorV2_Factory *this)
{
  return 5;
}

OZGenericBehaviorV2 *OZGenericBehaviorV2_Factory::createBehaviorCopy(OZGenericBehaviorV2_Factory *this, OZBehavior *a2, char a3)
{
  OZGenericBehaviorV2 *v5;
  unint64_t ***v6;

  v5 = (OZGenericBehaviorV2 *)operator new();
  OZGenericBehaviorV2::OZGenericBehaviorV2(v5, v6, a3);
  return v5;
}

void sub_1B2F9B2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4005C83619);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZAlignToBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZAlignToBehavior_Factory *v0;

  v0 = (OZAlignToBehavior_Factory *)operator new();
  OZAlignToBehavior_Factory::OZAlignToBehavior_Factory(v0);
  OZAlignToBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9B31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::OZAlignToBehavior_Factory(OZAlignToBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F50;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DAE00;
  *((_QWORD *)this + 18) = &unk_1E65DAEE0;
}

void sub_1B2F9B3CC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZAlignToBehavior *OZAlignToBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZAlignToBehavior *v6;

  v6 = (OZAlignToBehavior *)operator new();
  OZAlignToBehavior::OZAlignToBehavior(v6, this, a2, a3);
  (*(void (**)(OZAlignToBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9B44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F071F58DLL);
  _Unwind_Resume(a1);
}

OZAlignToBehavior *OZAlignToBehavior_Factory::createCopy(OZAlignToBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZAlignToBehavior *v5;
  const OZAlignToBehavior *v6;

  v5 = (OZAlignToBehavior *)operator new();
  OZAlignToBehavior::OZAlignToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9B4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F071F58DLL);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Align To Behavior", "com.apple.ozone.framework");
}

PCString *OZAlignToBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Align To Behavior");
}

OZAlignToBehavior *OZAlignToBehavior_Factory::createBehaviorCopy(OZAlignToBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZAlignToBehavior *v5;
  const OZAlignToBehavior *v6;

  v5 = (OZAlignToBehavior *)operator new();
  OZAlignToBehavior::OZAlignToBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9B5A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F071F58DLL);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Align To Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZ3DEnginePhysicsBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEnginePhysicsBehavior_Factory *v0;

  v0 = (OZ3DEnginePhysicsBehavior_Factory *)operator new();
  OZ3DEnginePhysicsBehavior_Factory::OZ3DEnginePhysicsBehavior_Factory(v0);
  OZ3DEnginePhysicsBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9B628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior_Factory::OZ3DEnginePhysicsBehavior_Factory(OZ3DEnginePhysicsBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F60;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DAF38;
  *((_QWORD *)this + 18) = &unk_1E65DB018;
}

void sub_1B2F9B6D8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZ3DEnginePhysicsBehavior *OZ3DEnginePhysicsBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZ3DEnginePhysicsBehavior *v6;

  v6 = (OZ3DEnginePhysicsBehavior *)operator new();
  OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(v6, this, a2, a3);
  (*(void (**)(OZ3DEnginePhysicsBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9B758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FE6BBC9FLL);
  _Unwind_Resume(a1);
}

OZ3DEnginePhysicsBehavior *OZ3DEnginePhysicsBehavior_Factory::createCopy(OZ3DEnginePhysicsBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZ3DEnginePhysicsBehavior *v5;
  const OZ3DEnginePhysicsBehavior *v6;

  v5 = (OZ3DEnginePhysicsBehavior *)operator new();
  OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9B7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FE6BBC9FLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Physics Behavior");
}

PCString *OZ3DEnginePhysicsBehavior_Factory::getCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Simulations Behavior Category");
}

OZ3DEnginePhysicsBehavior *OZ3DEnginePhysicsBehavior_Factory::createBehaviorCopy(OZ3DEnginePhysicsBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZ3DEnginePhysicsBehavior *v5;
  const OZ3DEnginePhysicsBehavior *v6;

  v5 = (OZ3DEnginePhysicsBehavior *)operator new();
  OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9B8A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FE6BBC9FLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Enable physics simulation on a 3D Object.");
}

void std::__call_once_param<std::tuple<OZ3DEngineApplyForceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEngineApplyForceBehavior_Factory *v0;

  v0 = (OZ3DEngineApplyForceBehavior_Factory *)operator new();
  OZ3DEngineApplyForceBehavior_Factory::OZ3DEngineApplyForceBehavior_Factory(v0);
  OZ3DEngineApplyForceBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9B924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEngineApplyForceBehavior_Factory::OZ3DEngineApplyForceBehavior_Factory(OZ3DEngineApplyForceBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3560420;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DB070;
  *((_QWORD *)this + 18) = &unk_1E65DB150;
}

void sub_1B2F9B9D4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZ3DEngineApplyForceBehavior *OZ3DEngineApplyForceBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZ3DEngineApplyForceBehavior *v6;

  v6 = (OZ3DEngineApplyForceBehavior *)operator new();
  OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(v6, this, a2, a3);
  (*(void (**)(OZ3DEngineApplyForceBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9BA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072A32FDDLL);
  _Unwind_Resume(a1);
}

OZ3DEngineApplyForceBehavior *OZ3DEngineApplyForceBehavior_Factory::createCopy(OZ3DEngineApplyForceBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZ3DEngineApplyForceBehavior *v5;
  const OZ3DEngineApplyForceBehavior *v6;

  v5 = (OZ3DEngineApplyForceBehavior *)operator new();
  OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9BAEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072A32FDDLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineApplyForceBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apply Force");
}

OZ3DEngineApplyForceBehavior *OZ3DEngineApplyForceBehavior_Factory::createBehaviorCopy(OZ3DEngineApplyForceBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZ3DEngineApplyForceBehavior *v5;
  const OZ3DEngineApplyForceBehavior *v6;

  v5 = (OZ3DEngineApplyForceBehavior *)operator new();
  OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9BB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072A32FDDLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineApplyForceBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apply a force to a 3D Object.");
}

void std::__call_once_param<std::tuple<OZ3DEnginePhysicsFieldBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEnginePhysicsFieldBehavior_Factory *v0;

  v0 = (OZ3DEnginePhysicsFieldBehavior_Factory *)operator new();
  OZ3DEnginePhysicsFieldBehavior_Factory::OZ3DEnginePhysicsFieldBehavior_Factory(v0);
  OZ3DEnginePhysicsFieldBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9BC10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior_Factory::OZ3DEnginePhysicsFieldBehavior_Factory(OZ3DEnginePhysicsFieldBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3560430;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DB1A8;
  *((_QWORD *)this + 18) = &unk_1E65DB288;
}

void sub_1B2F9BCC0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZ3DEnginePhysicsFieldBehavior *OZ3DEnginePhysicsFieldBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZ3DEnginePhysicsFieldBehavior *v6;

  v6 = (OZ3DEnginePhysicsFieldBehavior *)operator new();
  OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(v6, this, a2, a3);
  (*(void (**)(OZ3DEnginePhysicsFieldBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9BD40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4047D9007BLL);
  _Unwind_Resume(a1);
}

OZ3DEnginePhysicsFieldBehavior *OZ3DEnginePhysicsFieldBehavior_Factory::createCopy(OZ3DEnginePhysicsFieldBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZ3DEnginePhysicsFieldBehavior *v5;
  const OZ3DEnginePhysicsFieldBehavior *v6;

  v5 = (OZ3DEnginePhysicsFieldBehavior *)operator new();
  OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9BDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4047D9007BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsFieldBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Physics Field");
}

OZ3DEnginePhysicsFieldBehavior *OZ3DEnginePhysicsFieldBehavior_Factory::createBehaviorCopy(OZ3DEnginePhysicsFieldBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZ3DEnginePhysicsFieldBehavior *v5;
  const OZ3DEnginePhysicsFieldBehavior *v6;

  v5 = (OZ3DEnginePhysicsFieldBehavior *)operator new();
  OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9BE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4047D9007BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePhysicsFieldBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apply a physics field to a 3D Object.");
}

void std::__call_once_param<std::tuple<OZ3DEngineScenePlacementBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEngineScenePlacementBehavior_Factory *v0;

  v0 = (OZ3DEngineScenePlacementBehavior_Factory *)operator new();
  OZ3DEngineScenePlacementBehavior_Factory::OZ3DEngineScenePlacementBehavior_Factory(v0);
  OZ3DEngineScenePlacementBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9BEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZ3DEngineScenePlacementBehavior_Factory::OZ3DEngineScenePlacementBehavior_Factory(OZ3DEngineScenePlacementBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562F70;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DB2E0;
  *((_QWORD *)this + 18) = &unk_1E65DB3C0;
}

void sub_1B2F9BFAC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZ3DEngineScenePlacementBehavior *OZ3DEngineScenePlacementBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZ3DEngineScenePlacementBehavior *v6;

  v6 = (OZ3DEngineScenePlacementBehavior *)operator new();
  OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(v6, this, a2, a3);
  (*(void (**)(OZ3DEngineScenePlacementBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9C02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B8ADC18BLL);
  _Unwind_Resume(a1);
}

OZ3DEngineScenePlacementBehavior *OZ3DEngineScenePlacementBehavior_Factory::createCopy(OZ3DEngineScenePlacementBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZ3DEngineScenePlacementBehavior *v5;
  const OZ3DEngineScenePlacementBehavior *v6;

  v5 = (OZ3DEngineScenePlacementBehavior *)operator new();
  OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B8ADC18BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineScenePlacementBehavior_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Place In Scene");
}

OZ3DEngineScenePlacementBehavior *OZ3DEngineScenePlacementBehavior_Factory::createBehaviorCopy(OZ3DEngineScenePlacementBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZ3DEngineScenePlacementBehavior *v5;
  const OZ3DEngineScenePlacementBehavior *v6;

  v5 = (OZ3DEngineScenePlacementBehavior *)operator new();
  OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C16C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B8ADC18BLL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEngineScenePlacementBehavior_Factory::longDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Place an object in a 3D Scene.");
}

void std::__call_once_param<std::tuple<BHOvershootBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  BHOvershootBehavior_Factory *v0;

  v0 = (BHOvershootBehavior_Factory *)operator new();
  BHOvershootBehavior_Factory::BHOvershootBehavior_Factory(v0);
  BHOvershootBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9C1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::BHOvershootBehavior_Factory(BHOvershootBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562F80;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DB418;
  *((_QWORD *)this + 18) = &unk_1E65DB4F8;
}

void sub_1B2F9C28C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

BHOvershootBehavior *BHOvershootBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  BHOvershootBehavior *v6;

  v6 = (BHOvershootBehavior *)operator new();
  BHOvershootBehavior::BHOvershootBehavior(v6, this, a2, a3);
  (*(void (**)(BHOvershootBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9C30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A4B50A0FLL);
  _Unwind_Resume(a1);
}

BHOvershootBehavior *BHOvershootBehavior_Factory::createCopy(BHOvershootBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  BHOvershootBehavior *v5;
  const BHOvershootBehavior *v6;

  v5 = (BHOvershootBehavior *)operator new();
  BHOvershootBehavior::BHOvershootBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A4B50A0FLL);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Overshoot Behavior", "com.apple.ozone.framework");
}

PCString *BHOvershootBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Overshoot Behavior");
}

BHOvershootBehavior *BHOvershootBehavior_Factory::createBehaviorCopy(BHOvershootBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  BHOvershootBehavior *v5;
  const BHOvershootBehavior *v6;

  v5 = (BHOvershootBehavior *)operator new();
  BHOvershootBehavior::BHOvershootBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C464(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A4B50A0FLL);
  _Unwind_Resume(a1);
}

void BHOvershootBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Overshoot Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZDiscreteBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDiscreteBehavior_Factory *v0;

  v0 = (OZDiscreteBehavior_Factory *)operator new();
  OZDiscreteBehavior_Factory::OZDiscreteBehavior_Factory(v0);
  OZDiscreteBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9C4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::OZDiscreteBehavior_Factory(OZDiscreteBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562F90;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DB550;
  *((_QWORD *)this + 18) = &unk_1E65DB630;
}

void sub_1B2F9C58C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZDiscreteBehavior *OZDiscreteBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZDiscreteBehavior *v6;

  v6 = (OZDiscreteBehavior *)operator new();
  OZDiscreteBehavior::OZDiscreteBehavior(v6, this, a2, a3);
  (*(void (**)(OZDiscreteBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9C60C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C400F2DC2B4);
  _Unwind_Resume(a1);
}

OZDiscreteBehavior *OZDiscreteBehavior_Factory::createCopy(OZDiscreteBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZDiscreteBehavior *v5;
  const OZDiscreteBehavior *v6;

  v5 = (OZDiscreteBehavior *)operator new();
  OZDiscreteBehavior::OZDiscreteBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C6A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C400F2DC2B4);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Discrete Behavior", "com.apple.ozone.framework");
}

PCString *OZDiscreteBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Discrete Behavior");
}

OZDiscreteBehavior *OZDiscreteBehavior_Factory::createBehaviorCopy(OZDiscreteBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZDiscreteBehavior *v5;
  const OZDiscreteBehavior *v6;

  v5 = (OZDiscreteBehavior *)operator new();
  OZDiscreteBehavior::OZDiscreteBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C400F2DC2B4);
  _Unwind_Resume(a1);
}

void OZDiscreteBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Discrete Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZClampBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZClampBehavior_Factory *v0;

  v0 = (OZClampBehavior_Factory *)operator new();
  OZClampBehavior_Factory::OZClampBehavior_Factory(v0);
  OZClampBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9C7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::OZClampBehavior_Factory(OZClampBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3562FA0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65DB688;
  *((_QWORD *)this + 18) = &unk_1E65DB768;
}

void sub_1B2F9C88C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZClampBehavior *OZClampBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZClampBehavior *v6;

  v6 = (OZClampBehavior *)operator new();
  OZClampBehavior::OZClampBehavior(v6, this, a2, a3);
  (*(void (**)(OZClampBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9C90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400E62EA3ALL);
  _Unwind_Resume(a1);
}

OZClampBehavior *OZClampBehavior_Factory::createCopy(OZClampBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZClampBehavior *v5;
  const OZClampBehavior *v6;

  v5 = (OZClampBehavior *)operator new();
  OZClampBehavior::OZClampBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9C9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400E62EA3ALL);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Clamp Behavior", "com.apple.ozone.framework");
}

PCString *OZClampBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Clamp Behavior");
}

OZClampBehavior *OZClampBehavior_Factory::createBehaviorCopy(OZClampBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZClampBehavior *v5;
  const OZClampBehavior *v6;

  v5 = (OZClampBehavior *)operator new();
  OZClampBehavior::OZClampBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9CA64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C400E62EA3ALL);
  _Unwind_Resume(a1);
}

void OZClampBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Clamp Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZDollyInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZDollyInOutBehavior_Factory *v0;

  v0 = (OZDollyInOutBehavior_Factory *)operator new();
  OZDollyInOutBehavior_Factory::OZDollyInOutBehavior_Factory(v0);
  OZDollyInOutBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9CAE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::OZDollyInOutBehavior_Factory(OZDollyInOutBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562FB0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CF40;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DB7C0;
  *((_QWORD *)this + 18) = &unk_1E65DB8A0;
}

void sub_1B2F9CB98(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZDollyInOutBehavior *OZDollyInOutBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZDollyInOutBehavior *v6;

  v6 = (OZDollyInOutBehavior *)operator new();
  OZDollyInOutBehavior::OZDollyInOutBehavior(v6, this, a2, a3);
  (*(void (**)(OZDollyInOutBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9CC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

OZDollyInOutBehavior *OZDollyInOutBehavior_Factory::createCopy(OZDollyInOutBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZDollyInOutBehavior *v5;
  const OZDollyInOutBehavior *v6;

  v5 = (OZDollyInOutBehavior *)operator new();
  OZDollyInOutBehavior::OZDollyInOutBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9CCB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Dolly In/Out Behavior", "com.apple.ozone.framework");
}

PCString *OZDollyInOutBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Dolly In/Out Behavior");
}

OZDollyInOutBehavior *OZDollyInOutBehavior_Factory::createBehaviorCopy(OZDollyInOutBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZDollyInOutBehavior *v5;
  const OZDollyInOutBehavior *v6;

  v5 = (OZDollyInOutBehavior *)operator new();
  OZDollyInOutBehavior::OZDollyInOutBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9CD70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZDollyInOutBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Dolly In/Out Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZPanBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZPanBehavior_Factory *v0;

  v0 = (OZPanBehavior_Factory *)operator new();
  OZPanBehavior_Factory::OZPanBehavior_Factory(v0);
  OZPanBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9CDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::OZPanBehavior_Factory(OZPanBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562FC0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CF40;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DB8F8;
  *((_QWORD *)this + 18) = &unk_1E65DB9D8;
}

void sub_1B2F9CEA4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZPanBehavior *OZPanBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZPanBehavior *v6;

  v6 = (OZPanBehavior *)operator new();
  OZPanBehavior::OZPanBehavior(v6, this, a2, a3);
  (*(void (**)(OZPanBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9CF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4043450B84);
  _Unwind_Resume(a1);
}

OZPanBehavior *OZPanBehavior_Factory::createCopy(OZPanBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZPanBehavior *v5;
  const OZPanBehavior *v6;

  v5 = (OZPanBehavior *)operator new();
  OZPanBehavior::OZPanBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9CFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4043450B84);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pan Behavior", "com.apple.ozone.framework");
}

PCString *OZPanBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Pan Behavior");
}

OZPanBehavior *OZPanBehavior_Factory::createBehaviorCopy(OZPanBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZPanBehavior *v5;
  const OZPanBehavior *v6;

  v5 = (OZPanBehavior *)operator new();
  OZPanBehavior::OZPanBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9D07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4043450B84);
  _Unwind_Resume(a1);
}

void OZPanBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pan Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZZoomInOutBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZZoomInOutBehavior_Factory *v0;

  v0 = (OZZoomInOutBehavior_Factory *)operator new();
  OZZoomInOutBehavior_Factory::OZZoomInOutBehavior_Factory(v0);
  OZZoomInOutBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9D100(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::OZZoomInOutBehavior_Factory(OZZoomInOutBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562FD0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CF40;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DBA30;
  *((_QWORD *)this + 18) = &unk_1E65DBB10;
}

void sub_1B2F9D1B0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZZoomInOutBehavior *OZZoomInOutBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZZoomInOutBehavior *v6;

  v6 = (OZZoomInOutBehavior *)operator new();
  OZZoomInOutBehavior::OZZoomInOutBehavior(v6, this, a2, a3);
  (*(void (**)(OZZoomInOutBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9D230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

OZZoomInOutBehavior *OZZoomInOutBehavior_Factory::createCopy(OZZoomInOutBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZZoomInOutBehavior *v5;
  const OZZoomInOutBehavior *v6;

  v5 = (OZZoomInOutBehavior *)operator new();
  OZZoomInOutBehavior::OZZoomInOutBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9D2C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Zoom In/Out Behavior", "com.apple.ozone.framework");
}

PCString *OZZoomInOutBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Zoom In/Out Behavior");
}

OZZoomInOutBehavior *OZZoomInOutBehavior_Factory::createBehaviorCopy(OZZoomInOutBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZZoomInOutBehavior *v5;
  const OZZoomInOutBehavior *v6;

  v5 = (OZZoomInOutBehavior *)operator new();
  OZZoomInOutBehavior::OZZoomInOutBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9D388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40813A7831);
  _Unwind_Resume(a1);
}

void OZZoomInOutBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Zoom In/Out Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZZoomObjectBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZZoomObjectBehavior_Factory *v0;

  v0 = (OZZoomObjectBehavior_Factory *)operator new();
  OZZoomObjectBehavior_Factory::OZZoomObjectBehavior_Factory(v0);
  OZZoomObjectBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F9D40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::OZZoomObjectBehavior_Factory(OZZoomObjectBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3562FE0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CF40;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65DBB68;
  *((_QWORD *)this + 18) = &unk_1E65DBC48;
}

void sub_1B2F9D4BC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZZoomObjectBehavior *OZZoomObjectBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZZoomObjectBehavior *v6;

  v6 = (OZZoomObjectBehavior *)operator new();
  OZZoomObjectBehavior::OZZoomObjectBehavior(v6, this, a2, a3);
  (*(void (**)(OZZoomObjectBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2F9D53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F9929814);
  _Unwind_Resume(a1);
}

OZZoomObjectBehavior *OZZoomObjectBehavior_Factory::createCopy(OZZoomObjectBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZZoomObjectBehavior *v5;
  const OZZoomObjectBehavior *v6;

  v5 = (OZZoomObjectBehavior *)operator new();
  OZZoomObjectBehavior::OZZoomObjectBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9D5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F9929814);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Zoom Object Behavior", "com.apple.ozone.framework");
}

PCString *OZZoomObjectBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Zoom Object Behavior");
}

OZZoomObjectBehavior *OZZoomObjectBehavior_Factory::createBehaviorCopy(OZZoomObjectBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZZoomObjectBehavior *v5;
  const OZZoomObjectBehavior *v6;

  v5 = (OZZoomObjectBehavior *)operator new();
  OZZoomObjectBehavior::OZZoomObjectBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2F9D694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40F9929814);
  _Unwind_Resume(a1);
}

void OZZoomObjectBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Zoom Object Behavior Desc", "com.apple.ozone.framework");
}

void PSEmitter::PSEmitter(PSEmitter *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  PCURL *v10;
  PSEmitter::PSEmitter_emitPatternChanImpl *v11;
  OZChannelImpl *Instance;
  PCURL *v13;
  PSEmitter::PSEmitter_numPointsChanImpl *v14;
  PSEmitter::PSEmitter_numPointsChanInfo *v15;
  OZChannelInfo *v16;
  PCURL *v17;
  PSEmitter::PSEmitter_numPointsUChanImpl *v18;
  PSEmitter::PSEmitter_numPointsUChanInfo *v19;
  OZChannelInfo *v20;
  PCURL *v21;
  PSEmitter::PSEmitter_numPointsVChanImpl *v22;
  PSEmitter::PSEmitter_numPointsVChanInfo *v23;
  OZChannelInfo *v24;
  PCURL *v25;
  PSEmitter::PSEmitter_numPointsWChanImpl *v26;
  PSEmitter::PSEmitter_numPointsWChanInfo *v27;
  OZChannelInfo *v28;
  PCURL *v29;
  PSEmitter::PSEmitter_strokeWidthChanImpl *v30;
  PSEmitter::PSEmitter_strokeWidthChanInfo *v31;
  OZChannelInfo *v32;
  PCURL *v33;
  PSEmitter::PSEmitter_strokeWidthOSChanImpl *v34;
  PSEmitter::PSEmitter_strokeWidthOSChanInfo *v35;
  OZChannelInfo *v36;
  PCURL *v37;
  PSEmitter::PSEmitter_tileOffsetChanImpl *v38;
  PSEmitter::PSEmitter_tileOffsetChanInfo *v39;
  OZChannelInfo *v40;
  PCURL *v41;
  PSEmitter::PSEmitter_rectBuildOriginChanImpl *v42;
  OZChannelImpl *v43;
  PCURL *v44;
  PSEmitter::PSEmitter_rectBuildStyleChanImpl *v45;
  OZChannelImpl *v46;
  PCString *v47;
  PSEmitter::PSEmitter_boxBuildOriginChanImpl *v48;
  OZChannelImpl *v49;
  PCString *v50;
  PSEmitter::PSEmitter_boxBuildStyleChanImpl *v51;
  OZChannelImpl *v52;
  PCURL *v53;
  PSEmitter::PSEmitter_openBuildOriginChanImpl *v54;
  OZChannelImpl *v55;
  PCURL *v56;
  PSEmitter::PSEmitter_closedBuildOriginChanImpl *v57;
  OZChannelImpl *v58;
  PCURL *v59;
  PSEmitter::PSEmitter_radialBuildOriginChanImpl *v60;
  OZChannelImpl *v61;
  PCURL *v62;
  PCURL *v63;
  PSEmitter::PSEmitter_outlineOffsetChanImpl *v64;
  PSEmitter::PSEmitter_outlineOffsetChanInfo *v65;
  OZChannelInfo *v66;
  PCURL *v67;
  PSEmitter::PSEmitter_radiusChanImpl *v68;
  PSEmitter::PSEmitter_radiusChanInfo *v69;
  OZChannelInfo *v70;
  PCURL *v71;
  PCURL *v72;
  PCURL *v73;
  PSEmitter::PSEmitter_rectWidthChanImpl *v74;
  OZChannelImpl *v75;
  PCURL *v76;
  PSEmitter::PSEmitter_rectSizeChanImpl *v77;
  PSEmitter::PSEmitter_rectSizeChanInfo *v78;
  OZChannelInfo *v79;
  PCURL *v80;
  PSEmitter::PSEmitter_numRadialArmsChanImpl *v81;
  PSEmitter::PSEmitter_numRadialArmsChanInfo *v82;
  OZChannelInfo *v83;
  PCURL *v84;
  PSEmitter::PSEmitter_pointsPerArmChanImpl *v85;
  PSEmitter::PSEmitter_pointsPerArmChanInfo *v86;
  OZChannelInfo *v87;
  PCURL *v88;
  PSEmitter::PSEmitter_spiralCoeffChanImpl *v89;
  PSEmitter::PSEmitter_spiralCoeffChanInfo *v90;
  OZChannelInfo *v91;
  PCURL *v92;
  PSEmitter::PSEmitter_waveAmplitudeChanImpl *v93;
  OZChannelImpl *v94;
  PCURL *v95;
  PSEmitter::PSEmitter_waveFrequencyChanImpl *v96;
  PSEmitter::PSEmitter_waveFrequencyChanInfo *v97;
  OZChannelInfo *v98;
  PCURL *v99;
  PSEmitter::PSEmitter_wavePhaseChanInfo *v100;
  OZChannelInfo *v101;
  PCURL *v102;
  PSEmitter::PSEmitter_waveDampingChanImpl *v103;
  PSEmitter::PSEmitter_waveDampingChanInfo *v104;
  OZChannelInfo *v105;
  PCURL *v106;
  PCURL *v107;
  PCURL *v108;
  PCURL *v109;
  PCURL *v110;
  PSEmitter::PSEmitter_emissionLatitudeChanImpl *v111;
  OZChannelImpl *v112;
  PCURL *v113;
  PSEmitter::PSEmitter_emissionLongitudeChanImpl *v114;
  OZChannelImpl *v115;
  PCURL *v116;
  PSEmitter::PSEmitter_emissionRangeChanImpl *v117;
  OZChannelImpl *v118;
  PCURL *v119;
  PCURL *v120;
  PSEmitter::PSEmitter_birthRateChanImpl *v121;
  PSEmitter::PSEmitter_birthRateChanInfo *v122;
  OZChannelInfo *v123;
  PCString *v124;
  PCURL *v125;
  PSEmitter::PSEmitter_initialNumChanImpl *v126;
  OZChannelImpl *v127;
  PCURL *v128;
  PSEmitter::PSEmitter_lifetimeChanImpl *v129;
  PSEmitter::PSEmitter_lifetimeChanInfo *v130;
  OZChannelInfo *v131;
  PCURL *v132;
  PCURL *v133;
  PSEmitter::PSEmitter_speedChanImpl *v134;
  PSEmitter::PSEmitter_speedChanInfo *v135;
  OZChannelInfo *v136;
  PCURL *v137;
  PSEmitter::PSEmitter_spinChanImpl *v138;
  PSEmitter::PSEmitter_spinChanInfo *v139;
  OZChannelInfo *v140;
  PCURL *v141;
  PCURL *v142;
  PSEmitter::PSEmitter_tintAmountChanImpl *v143;
  OZChannelImpl *v144;
  PCURL *v145;
  PCURL *v146;
  PCURL *v147;
  PCURL *v148;
  PCURL *v149;
  PCURL *v150;
  PCURL *v151;
  PCURL *v152;
  PCURL *v153;
  PSEmitter::PSEmitter_renderSpaceChanImpl *v154;
  OZChannelImpl *v155;
  PCURL *v156;
  PCURL *v157;
  PCURL *v158;
  PCURL *v159;
  PCString v165;
  PCString v166;

  OZLockingElement::OZLockingElement(this, a2, a3, a4);
  *v5 = off_1E65DBCA0;
  v5[25] = &unk_1E65DBF40;
  v5[27] = &unk_1E65DC818;
  v5[31] = &unk_1E65DCA70;
  v5[841] = &unk_1E65DCAC8;
  PCString::PCString(&v166, "Channel ParticleTypes");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18976), &v166, (OZChannelFolder *)((char *)this + 256), 0x12Cu, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v6, CFSTR("Emitter Shape Options"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19104), &v166, (OZChannelFolder *)((char *)this + 648), 0x12Du, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v7, CFSTR("Emitter Shape Enum 2D"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Shape Type"));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19232), &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x12Eu, 0, 0, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v8, CFSTR("Emitter Shape Anim Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Shape Anim"));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19488), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x15Au, 2, 0, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v9, CFSTR("Emitter Emit At Points"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19744), &v166, (OZChannelFolder *)((char *)this + 19104), 0x12Fu, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v10, CFSTR("Emitter Emit Pattern Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Emit Pattern Type"));
  Instance = (OZChannelImpl *)PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(v11);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19896), 1u, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x148u, 0, Instance, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v13, CFSTR("Emitter Num Points"));
  v15 = (PSEmitter::PSEmitter_numPointsChanInfo *)PSEmitter::PSEmitter_numPointsChanImpl::getInstance(v14);
  v16 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsChanInfo::getInstance(v15);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20152), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x130u, 0, (OZChannelImpl *)v15, v16);
  PCString::~PCString(&v166);
  PCURL::PCURL(v17, CFSTR("Emitter Num Points U"));
  v19 = (PSEmitter::PSEmitter_numPointsUChanInfo *)PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(v18);
  v20 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(v19);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20304), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x131u, 0, (OZChannelImpl *)v19, v20);
  PCString::~PCString(&v166);
  PCURL::PCURL(v21, CFSTR("Emitter Num Points V"));
  v23 = (PSEmitter::PSEmitter_numPointsVChanInfo *)PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(v22);
  v24 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(v23);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20456), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x132u, 0, (OZChannelImpl *)v23, v24);
  PCString::~PCString(&v166);
  PCURL::PCURL(v25, CFSTR("Emitter Num Points W"));
  v27 = (PSEmitter::PSEmitter_numPointsWChanInfo *)PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(v26);
  v28 = (OZChannelInfo *)PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(v27);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 20608), 5.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x167u, 0, (OZChannelImpl *)v27, v28);
  PCString::~PCString(&v166);
  PCURL::PCURL(v29, CFSTR("Emitter Stroke Width"));
  v31 = (PSEmitter::PSEmitter_strokeWidthChanInfo *)PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(v30);
  v32 = (OZChannelInfo *)PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(v31);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20760), 1.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x162u, 2u, (OZChannelImpl *)v31, v32);
  PCString::~PCString(&v166);
  PCURL::PCURL(v33, CFSTR("Emitter Stroke Width OS"));
  v35 = (PSEmitter::PSEmitter_strokeWidthOSChanInfo *)PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(v34);
  v36 = (OZChannelInfo *)PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(v35);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20912), 1.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x163u, 2u, (OZChannelImpl *)v35, v36);
  PCString::~PCString(&v166);
  PCURL::PCURL(v37, CFSTR("Emitter Tile Offset"));
  v39 = (PSEmitter::PSEmitter_tileOffsetChanInfo *)PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(v38);
  v40 = (OZChannelInfo *)PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(v39);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21064), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x149u, 0, (OZChannelImpl *)v39, v40);
  PCString::~PCString(&v166);
  PCURL::PCURL(v41, CFSTR("Emitter Rect Build Origin Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Rect Build Origin Type"));
  v43 = (OZChannelImpl *)PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(v42);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21216), 4u, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Au, 0, v43, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v44, CFSTR("Emitter Rect Build Style Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Rect Build Style Type"));
  v46 = (OZChannelImpl *)PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(v45);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21472), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Bu, 0, v46, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCString::PCString(v47, "Hidden");
  v48 = (PSEmitter::PSEmitter_boxBuildOriginChanImpl *)PCString::PCString(&v165, "Hidden");
  v49 = (OZChannelImpl *)PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(v48);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21728), 0xEu, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x168u, 0, v49, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCString::PCString(v50, "Hidden");
  v51 = (PSEmitter::PSEmitter_boxBuildStyleChanImpl *)PCString::PCString(&v165, "Hidden");
  v52 = (OZChannelImpl *)PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(v51);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21984), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x169u, 0, v52, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v53, CFSTR("Emitter Open Build Origin Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Open Build Origin Type"));
  v55 = (OZChannelImpl *)PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(v54);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22240), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Eu, 0, v55, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v56, CFSTR("Emitter Closed Build Origin Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Closed Build Origin Type"));
  v58 = (OZChannelImpl *)PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(v57);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22496), 1u, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Cu, 0, v58, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v59, CFSTR("Emitter Radial Build Origin Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Radial Build Origin Type"));
  v61 = (OZChannelImpl *)PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(v60);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22752), 0, &v166, &v165, (OZChannelFolder *)((char *)this + 19104), 0x14Du, 0, v61, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v62, CFSTR("Emitter Build Randomly"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23008), 0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x14Fu, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v63, CFSTR("Emitter Outline Offset"));
  v65 = (PSEmitter::PSEmitter_outlineOffsetChanInfo *)PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(v64);
  v66 = (OZChannelInfo *)PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(v65);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23160), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x150u, 0, (OZChannelImpl *)v65, v66);
  PCString::~PCString(&v166);
  PCURL::PCURL(v67, CFSTR("Emitter Radius"));
  v69 = (PSEmitter::PSEmitter_radiusChanInfo *)PSEmitter::PSEmitter_radiusChanImpl::getInstance(v68);
  v70 = (OZChannelInfo *)PSEmitter::PSEmitter_radiusChanInfo::getInstance(v69);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 23312), 200.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x133u, 0, (OZChannelImpl *)v69, v70);
  PCString::~PCString(&v166);
  PCURL::PCURL(v71, CFSTR("Emitter Point 1"));
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 23464), -100.0, 0.0, 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x134u, 0, 3u);
  PCString::~PCString(&v166);
  PCURL::PCURL(v72, CFSTR("Emitter Point 2"));
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 24352), 100.0, 0.0, 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x135u, 0, 3u);
  PCString::~PCString(&v166);
  PCURL::PCURL(v73, CFSTR("Emitter Rect Width"));
  v75 = (OZChannelImpl *)PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(v74);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 25240), 200.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x151u, 2, v75, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v76, CFSTR("Emitter Rect Size"));
  v78 = (PSEmitter::PSEmitter_rectSizeChanInfo *)PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(v77);
  v79 = (OZChannelInfo *)PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(v78);
  OZChannel3D::OZChannel3D((PSEmitter *)((char *)this + 25392), 300.0, 300.0, 300.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x15Bu, 0, 3u, (OZChannelImpl *)v78, v79);
  PCString::~PCString(&v166);
  PCURL::PCURL(v80, CFSTR("Emitter Num Radial Arms"));
  v82 = (PSEmitter::PSEmitter_numRadialArmsChanInfo *)PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(v81);
  v83 = (OZChannelInfo *)PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(v82);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 25984), 3.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x153u, 0, (OZChannelImpl *)v82, v83);
  PCString::~PCString(&v166);
  PCURL::PCURL(v84, CFSTR("Emitter Points Per Arm"));
  v86 = (PSEmitter::PSEmitter_pointsPerArmChanInfo *)PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(v85);
  v87 = (OZChannelInfo *)PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(v86);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 26136), 10.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x154u, 0, (OZChannelImpl *)v86, v87);
  PCString::~PCString(&v166);
  PCURL::PCURL(v88, CFSTR("Emitter Spiral Twists"));
  v90 = (PSEmitter::PSEmitter_spiralCoeffChanInfo *)PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(v89);
  v91 = (OZChannelInfo *)PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(v90);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26288), 0.25, &v166, (OZChannelFolder *)((char *)this + 19104), 0x155u, 0, (OZChannelImpl *)v90, v91);
  PCString::~PCString(&v166);
  PCURL::PCURL(v92, CFSTR("Emitter Wave Amplitude"));
  v94 = (OZChannelImpl *)PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(v93);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26440), 50.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x156u, 0, v94, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v95, CFSTR("Emitter Wave Frequency"));
  v97 = (PSEmitter::PSEmitter_waveFrequencyChanInfo *)PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(v96);
  v98 = (OZChannelInfo *)PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(v97);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26592), 1.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x157u, 0, (OZChannelImpl *)v97, v98);
  PCString::~PCString(&v166);
  PCURL::PCURL(v99, CFSTR("Emitter Wave Phase"));
  v101 = (OZChannelInfo *)PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(v100);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 26744), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x158u, 0, 0, v101);
  PCString::~PCString(&v166);
  PCURL::PCURL(v102, CFSTR("Emitter Wave Damping"));
  v104 = (PSEmitter::PSEmitter_waveDampingChanInfo *)PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(v103);
  v105 = (OZChannelInfo *)PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(v104);
  OZChannelDouble::OZChannelDouble((PSEmitter *)((char *)this + 26896), 0.0, &v166, (OZChannelFolder *)((char *)this + 19104), 0x15Fu, 0, (OZChannelImpl *)v104, v105);
  PCString::~PCString(&v166);
  PCURL::PCURL(v106, CFSTR("Emitter Emit At Alpha"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27048), 1, &v166, (OZChannelFolder *)((char *)this + 19104), 0x141u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v107, CFSTR("Emitter Emit Alpha Cutoff"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 27200), 0.5, &v166, (OZChannelFolder *)((char *)this + 19104), 0x142u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v108, CFSTR("Emitter Geometry Node Ref"));
  OZChanRotoshapeRef::OZChanRotoshapeRef((PSEmitter *)((char *)this + 27352), &v166, (OZChannelFolder *)((char *)this + 19104), 0x146u, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v109, CFSTR("Emitter Image Node Ref"));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((PSEmitter *)((char *)this + 27512), &v166, (OZChannelFolder *)((char *)this + 19104), 0x147u, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v110, CFSTR("Emitter Emission Angle"));
  v112 = (OZChannelImpl *)PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(v111);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 27672), 0.0, &v166, (OZChannelFolder *)((char *)this + 648), 0x136u, 0, v112, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v113, CFSTR("Emitter Emission Longitude"));
  v115 = (OZChannelImpl *)PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(v114);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 27824), 4.71238898, &v166, (OZChannelFolder *)((char *)this + 648), 0x166u, 0, v115, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v116, CFSTR("Emitter Emission Range"));
  v118 = (OZChannelImpl *)PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(v117);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 27976), 6.28318531, &v166, (OZChannelFolder *)((char *)this + 648), 0x137u, 0, v118, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v119, CFSTR("Emitter Multiplier Properties"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28128), &v166, (OZChannelFolder *)((char *)this + 648), 0x138u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v120, CFSTR("Emitter Birth Rate"));
  v122 = (PSEmitter::PSEmitter_birthRateChanInfo *)PSEmitter::PSEmitter_birthRateChanImpl::getInstance(v121);
  v123 = (OZChannelInfo *)PSEmitter::PSEmitter_birthRateChanInfo::getInstance(v122);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28256), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x139u, 0, (OZChannelImpl *)v122, v123);
  PCString::~PCString(&v166);
  PCString::PCString(v124, "Hidden");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 28408), 0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x16Cu, 2u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v125, CFSTR("Emitter Initial Num"));
  v127 = (OZChannelImpl *)PSEmitter::PSEmitter_initialNumChanImpl::getInstance(v126);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28560), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Au, 0, v127, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v128, CFSTR("Emitter Lifetime"));
  v130 = (PSEmitter::PSEmitter_lifetimeChanInfo *)PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(v129);
  v131 = (OZChannelInfo *)PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(v130);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28712), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Bu, 0, (OZChannelImpl *)v130, v131);
  PCString::~PCString(&v166);
  PCURL::PCURL(v132, CFSTR("Emitter Scale"));
  OZChannelScale3D::OZChannelScale3D((PSEmitter *)((char *)this + 28864), 1.0, 1.0, 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Cu, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v133, CFSTR("Emitter Speed"));
  v135 = (PSEmitter::PSEmitter_speedChanInfo *)PSEmitter::PSEmitter_speedChanImpl::getInstance(v134);
  v136 = (OZChannelInfo *)PSEmitter::PSEmitter_speedChanInfo::getInstance(v135);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29456), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Du, 0, (OZChannelImpl *)v135, v136);
  PCString::~PCString(&v166);
  PCURL::PCURL(v137, CFSTR("Emitter Spin"));
  v139 = (PSEmitter::PSEmitter_spinChanInfo *)PSEmitter::PSEmitter_spinChanImpl::getInstance(v138);
  v140 = (OZChannelInfo *)PSEmitter::PSEmitter_spinChanInfo::getInstance(v139);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29608), 1.0, &v166, (OZChannelFolder *)((char *)this + 28128), 0x13Eu, 0, (OZChannelImpl *)v139, v140);
  PCString::~PCString(&v166);
  PCURL::PCURL(v141, CFSTR("Emitter Tint Color"));
  OZChannelColor::OZChannelColor((PSEmitter *)((char *)this + 29760), 1.0, 1.0, 1.0, 1.0, &v166, (OZChannelFolder *)((char *)this + 648), 0x13Fu, 2u, 6u);
  PCString::~PCString(&v166);
  PCURL::PCURL(v142, CFSTR("Emitter Tint Amount"));
  v144 = (OZChannelImpl *)PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(v143);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 30920), 0.0, &v166, (OZChannelFolder *)((char *)this + 648), 0x140u, 2u, v144, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v145, CFSTR("Emitter Render Order Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Render Order"));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 31072), &v166, &v165, (OZChannelFolder *)((char *)this + 648), 0x143u, 0, 0, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v146, CFSTR("Replicator Reverse Stacking"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31328), &v166, (OZChannelFolder *)((char *)this + 648), 0x15Cu, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v147, CFSTR("Emitter Interleave Particle Types"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31480), &v166, (OZChannelFolder *)((char *)this + 648), 0x144u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v148, CFSTR("Emitter Fill Points"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31632), 0, &v166, (OZChannelFolder *)((char *)this + 648), 0x159u, 0, 0, 0);
  PCString::~PCString(&v166);
  LODWORD(v139) = *((_DWORD *)this + 70);
  PCURL::PCURL(v149, CFSTR("Emitter Random Fill Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 31784), v139, &v166, (OZChannelFolder *)((char *)this + 648), 0x15Du, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v150, CFSTR("Emitter Use Reparametrized Shape"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31936), 1, &v166, (OZChannelFolder *)((char *)this + 648), 0x15Eu, 2u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v151, CFSTR("Emitter Preview Position"));
  OZChannelPosition::OZChannelPosition((PSEmitter *)((char *)this + 32088), &v166, (OZChannelFolder *)((char *)this + 648), 0x145u, 2u, 2u, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v152, CFSTR("Emitter Is 3D"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32792), 0, &v166, (OZChannelFolder *)((char *)this + 648), 0x164u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v153, CFSTR("Emitter Render Space Enum"));
  PCURL::PCURL((PCURL *)&v165, CFSTR("Emitter Render Space"));
  v155 = (OZChannelImpl *)PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(v154);
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 32944), 1u, &v166, &v165, (OZChannelFolder *)((char *)this + 648), 0x16Au, 0, v155, 0);
  PCString::~PCString(&v165);
  PCString::~PCString(&v166);
  PCURL::PCURL(v156, CFSTR("Emitter Is Facing Camera"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33200), 1, &v166, (OZChannelFolder *)((char *)this + 648), 0x165u, 0, 0, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v157, CFSTR("Emitter Is Depth Ordered"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33352), 1, &v166, (OZChannelFolder *)((char *)this + 648), 0x16Bu, 0, 0, 0);
  PCString::~PCString(&v166);
  *(_OWORD *)((char *)this + 33512) = 0u;
  *((_DWORD *)this + 8396) = -1;
  PCMutex::PCMutex((PCMutex *)((char *)this + 33592));
  *((_OWORD *)this + 2104) = 0u;
  *((int64x2_t *)this + 2105) = vdupq_n_s64((unint64_t)this + 33680);
  *((_QWORD *)this + 4212) = 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 256), 0x40000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 256));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18976), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 18976));
  PSEmitter::updateEmitterShapeEnum(this, 0);
  PCURL::PCURL((PCURL *)&v166, CFSTR("Emitter Rect Size Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25528), &v166, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v158, CFSTR("Emitter Rect Size Height"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25680), &v166, 0);
  PCString::~PCString(&v166);
  PCURL::PCURL(v159, CFSTR("Emitter Rect Size Depth"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25832), &v166, 0);
  PCString::~PCString(&v166);
  resetVisibleInHUDFlags((OZChannelBase *)((char *)this + 256), (OZChannelBase *)((char *)this + 18976));
  (*(void (**)(PSEmitter *, uint64_t))(*(_QWORD *)this + 448))(this, 1);
  *((_WORD *)this + 16776) = 0;
  *((_DWORD *)this + 8389) = 0;
  *((_DWORD *)this + 8390) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 2098) = _Q0;
}

void sub_1B2F9EDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannelEnum *a11, OZChannelBool *a12, OZChannelPosition *a13, OZChannelBool *a14, OZChannel *a15, OZChannelBool *a16, OZChannelBool *a17, OZChannelBool *a18, OZChannelEnum *a19, OZChannelPercent *a20,OZChannelColor *a21,OZChannelPercent *a22,OZChannelPercent *a23,OZChannelScale3D *a24,OZChannelPercent *a25,OZChannelPercent *a26,OZChannelBool *a27,OZChannelPercent *a28,OZChannel *a29,OZChannel *a30,OZChannel *a31,OZChanElementOrFootageRef *a32,OZChanRotoshapeRef *a33,OZChannelPercent *a34,OZChannelBool *a35,OZChannel *a36,OZChannel *a37,OZChannel *a38,OZChannel *a39,OZChannel *a40,OZChannel *a41,OZChannel *a42,OZChannel3D *a43,OZChannel *a44,OZChannelPosition3D *a45,OZChannelPosition3D *a46,OZChannelEnum *a47,OZChannelBool *a48,OZChannelEnum *a49,OZChannelEnum *a50)
{
  OZLockingElement *v50;
  OZChannelBool *v51;
  OZChannelFolder *v52;
  OZChannelFolder *v53;
  OZChannelBool *v54;
  PCMutex *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;

  PCString::~PCString((PCString *)(v58 - 96));
  std::__list_imp<unsigned int>::clear(v56);
  PCMutex::~PCMutex(v55);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v57);
  OZChannelBool::~OZChannelBool(v54);
  OZChannelBool::~OZChannelBool(v51);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelPosition::~OZChannelPosition(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannel::~OZChannel(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelPercent::~OZChannelPercent(a20);
  OZChannelColor::~OZChannelColor(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelScale3D::~OZChannelScale3D(a24);
  OZChannelPercent::~OZChannelPercent(a25);
  OZChannelPercent::~OZChannelPercent(a26);
  OZChannelBool::~OZChannelBool(a27);
  OZChannelPercent::~OZChannelPercent(a28);
  OZChannelFolder::~OZChannelFolder(v53);
  OZChannel::~OZChannel(a29);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(a31);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a32);
  OZChanRotoshapeRef::~OZChanRotoshapeRef(a33);
  OZChannelPercent::~OZChannelPercent(a34);
  OZChannelBool::~OZChannelBool(a35);
  OZChannel::~OZChannel(a36);
  OZChannel::~OZChannel(a37);
  OZChannel::~OZChannel(a38);
  OZChannel::~OZChannel(a39);
  OZChannel::~OZChannel(a40);
  OZChannel::~OZChannel(a41);
  OZChannel::~OZChannel(a42);
  OZChannel3D::~OZChannel3D(a43);
  OZChannel::~OZChannel(a44);
  OZChannelPosition3D::~OZChannelPosition3D(a45);
  OZChannelPosition3D::~OZChannelPosition3D(a46);
  OZChannel::~OZChannel(*(OZChannel **)(v58 - 256));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v58 - 248));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v58 - 240));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 232));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 224));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 216));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 208));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 200));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 192));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v58 - 184));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v58 - 176));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v58 - 168));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v58 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v58 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v58 - 144));
  OZChannel::~OZChannel(*(OZChannel **)(v58 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v58 - 128));
  OZChannelEnum::~OZChannelEnum(a47);
  OZChannelBool::~OZChannelBool(a48);
  OZChannelEnum::~OZChannelEnum(a49);
  OZChannelEnum::~OZChannelEnum(a50);
  OZChannelFolder::~OZChannelFolder(v52);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v58 - 112));
  OZLockingElement::~OZLockingElement(v50);
  _Unwind_Resume(a1);
}

void PSEmitter::updateEmitterShapeEnum(PSEmitter *this, int a2)
{
  int ValueAsInt;
  OZChannelEnum *v5;
  int v6;
  double v7;
  PCString v8;
  PCSharedCount v9[2];
  _BYTE v10[28];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    PCSharedCount::PCSharedCount(v9);
    OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 19232), (const PCString *)v9);
    PCString::~PCString((PCString *)v9);
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0);
  v5 = (PSEmitter *)((char *)this + 19232);
  if (ValueAsInt)
  {
    *(_OWORD *)&v9[0].var0 = xmmword_1B3563650;
    *(_OWORD *)v10 = unk_1B3563660;
    *(_OWORD *)&v10[12] = unk_1B356366C;
    OZChannelEnum::setTags(v5, (char *)v9, 11);
    PCURL::PCURL((PCURL *)&v8, CFSTR("Emitter Shape Enum 3D"));
    OZChannelEnum::setStrings((const PCString *)v5, &v8, 1);
    PCString::~PCString(&v8);
    return;
  }
  *(_DWORD *)&v10[16] = 5;
  *(_OWORD *)&v9[0].var0 = xmmword_1B356367C;
  *(_OWORD *)v10 = unk_1B356368C;
  OZChannelEnum::setTags(v5, (char *)v9, 9);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Emitter Shape Enum 2D"));
  OZChannelEnum::setStrings((const PCString *)v5, &v8, 1);
  PCString::~PCString(&v8);
  if (a2)
  {
    v6 = OZChannel::getValueAsInt((OZChannel *)v5, MEMORY[0x1E0CA2E68], 0.0);
    if (v6 == 10)
    {
      v7 = 2.0;
    }
    else
    {
      if (v6 != 11)
        return;
      v7 = 6.0;
    }
    OZChannel::setValue((OZChannel *)v5, MEMORY[0x1E0CA2E68], v7, 0);
  }
}

void sub_1B2F9F868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelBase *resetVisibleInHUDFlags(OZChannelBase *result, OZChannelBase *a2)
{
  const void ***var0;
  const void **i;
  OZChannelBase *v5;
  OZChannelFolder *v6;
  OZChannelFolder *v7;

  var0 = (const void ***)result[1].var0;
  if (var0)
  {
    for (i = *var0; i != var0[1]; ++i)
    {
      v5 = (OZChannelBase *)*i;
      if (*i != a2)
      {
        if (v5
        {
          result = (OZChannelBase *)resetVisibleInHUDFlags(v7, a2);
        }
        else
        {
          result = OZChannelBase::resetFlag(v5, 16, 0);
        }
      }
    }
  }
  return result;
}

void PSEmitter::PSEmitter(PSEmitter *this, const PSEmitter *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  __n128 TimeOffset;
  char *v13;
  const void *v14;
  _QWORD *v15;
  OZSceneNode *v16;
  OZChannelBase *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  OZChannelBase *v21;
  OZScene *v22;
  uint64_t v23;
  OZChannelFolder *v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD v27[6];
  __n128 v28[2];

  v5 = (char *)a2 + 200;
  v26 = a3;
  OZLockingElement::OZLockingElement(this, (const OZElement *)((char *)a2 + 200), a3);
  *(_QWORD *)v6 = off_1E65DBCA0;
  *(_QWORD *)(v6 + 200) = &unk_1E65DBF40;
  *(_QWORD *)(v6 + 216) = &unk_1E65DC818;
  *(_QWORD *)(v6 + 248) = &unk_1E65DCA70;
  *(_QWORD *)(v6 + 6728) = &unk_1E65DCAC8;
  v24 = (OZChannelFolder *)(v6 + 18976);
  v25 = v6 + 200;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 18976), (const OZChannelFolder *)((char *)a2 + 18976), (OZChannelFolder *)((char *)this + 256));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19104), (const OZChannelFolder *)((char *)a2 + 19104), (OZChannelFolder *)((char *)this + 648));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19232), (const PSEmitter *)((char *)a2 + 19232), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19488), (const PSEmitter *)((char *)a2 + 19488), (OZChannelFolder *)((char *)this + 19104));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19744), (const OZChannelBase *)((char *)a2 + 19744), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 19896), (const PSEmitter *)((char *)a2 + 19896), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 20152), (const OZChannelBase *)((char *)a2 + 20152), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 2519) = &off_1E6551AF8;
  *((_QWORD *)this + 2521) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20304), (const OZChannelBase *)((char *)a2 + 20304), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 2538) = &off_1E6551AF8;
  *((_QWORD *)this + 2540) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20456), (const OZChannelBase *)((char *)a2 + 20456), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 2557) = &off_1E6551AF8;
  *((_QWORD *)this + 2559) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20608), (const OZChannelBase *)a2 + 184, (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 2576) = &off_1E6551AF8;
  *((_QWORD *)this + 2578) = &unk_1E6551E58;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20760), (const OZChannelBase *)((char *)a2 + 20760), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 20912), (const OZChannelBase *)((char *)a2 + 20912), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21064), (const OZChannelBase *)((char *)a2 + 21064), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21216), (const PSEmitter *)((char *)a2 + 21216), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21472), (const PSEmitter *)((char *)a2 + 21472), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21728), (const PSEmitter *)((char *)a2 + 21728), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 21984), (const PSEmitter *)((char *)a2 + 21984), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22240), (const PSEmitter *)((char *)a2 + 22240), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22496), (const PSEmitter *)((char *)a2 + 22496), (OZChannelFolder *)((char *)this + 19104));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 22752), (const PSEmitter *)((char *)a2 + 22752), (OZChannelFolder *)((char *)this + 19104));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23008), (const OZChannelBase *)((char *)a2 + 23008), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23160), (const OZChannelBase *)((char *)a2 + 23160), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 23312), (const OZChannelBase *)((char *)a2 + 23312), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 2914) = &off_1E6551358;
  *((_QWORD *)this + 2916) = &unk_1E65516B8;
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 23464), (const PSEmitter *)((char *)a2 + 23464), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPosition3D::OZChannelPosition3D((PSEmitter *)((char *)this + 24352), (const PSEmitter *)((char *)a2 + 24352), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 25240), (const OZChannelBase *)((char *)a2 + 25240), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3155) = &off_1E6551358;
  *((_QWORD *)this + 3157) = &unk_1E65516B8;
  OZChannel3D::OZChannel3D((PSEmitter *)((char *)this + 25392), (const PSEmitter *)((char *)a2 + 25392), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 25984), (const OZChannelBase *)a2 + 232, (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3248) = &off_1E6551AF8;
  *((_QWORD *)this + 3250) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26136), (const OZChannelBase *)((char *)a2 + 26136), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3267) = &off_1E6551AF8;
  *((_QWORD *)this + 3269) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26288), (const OZChannelBase *)((char *)a2 + 26288), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3286) = &off_1E6551358;
  *((_QWORD *)this + 3288) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26440), (const OZChannelBase *)((char *)a2 + 26440), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3305) = &off_1E6551358;
  *((_QWORD *)this + 3307) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26592), (const OZChannelBase *)((char *)a2 + 26592), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3324) = &off_1E6551358;
  *((_QWORD *)this + 3326) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26744), (const OZChannelBase *)((char *)a2 + 26744), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3343) = &off_1E6551728;
  *((_QWORD *)this + 3345) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 26896), (const OZChannelBase *)((char *)a2 + 26896), (OZChannelFolder *)((char *)this + 19104));
  *((_QWORD *)this + 3362) = &off_1E6551358;
  *((_QWORD *)this + 3364) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27048), (const OZChannelBase *)((char *)a2 + 27048), (OZChannelFolder *)((char *)this + 19104));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 27200), (const OZChannelBase *)((char *)a2 + 27200), (OZChannelFolder *)((char *)this + 19104));
  OZChanRotoshapeRef::OZChanRotoshapeRef((PSEmitter *)((char *)this + 27352), (const PSEmitter *)((char *)a2 + 27352), (OZChannelFolder *)((char *)this + 19104));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((PSEmitter *)((char *)this + 27512), (const PSEmitter *)((char *)a2 + 27512), (OZChannelFolder *)((char *)this + 19104));
  OZChannel::OZChannel((OZChannel *)((char *)this + 27672), (const OZChannelBase *)((char *)a2 + 27672), (OZChannelFolder *)((char *)this + 648));
  *((_QWORD *)this + 3459) = &off_1E6551728;
  *((_QWORD *)this + 3461) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 27824), (const OZChannelBase *)((char *)a2 + 27824), (OZChannelFolder *)((char *)this + 648));
  *((_QWORD *)this + 3478) = &off_1E6551728;
  *((_QWORD *)this + 3480) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 27976), (const OZChannelBase *)((char *)a2 + 27976), (OZChannelFolder *)((char *)this + 648));
  *((_QWORD *)this + 3497) = &off_1E6551728;
  *((_QWORD *)this + 3499) = &unk_1E6551A88;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28128), (const OZChannelFolder *)((char *)a2 + 28128), (OZChannelFolder *)((char *)this + 648));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28256), (const OZChannelBase *)((char *)a2 + 28256), (OZChannelFolder *)((char *)this + 28128));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 28408), (const OZChannelBase *)((char *)a2 + 28408), (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28560), (const OZChannelBase *)a2 + 255, (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28712), (const OZChannelBase *)((char *)a2 + 28712), (OZChannelFolder *)((char *)this + 28128));
  OZChannelScale3D::OZChannelScale3D((PSEmitter *)((char *)this + 28864), (const PSEmitter *)((char *)a2 + 28864), (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29456), (const OZChannelBase *)a2 + 263, (OZChannelFolder *)((char *)this + 28128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 29608), (const OZChannelBase *)((char *)a2 + 29608), (OZChannelFolder *)((char *)this + 28128));
  OZChannelColor::OZChannelColor((PSEmitter *)((char *)this + 29760), (const PSEmitter *)((char *)a2 + 29760), (OZChannelFolder *)((char *)this + 648));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 30920), (const OZChannelBase *)((char *)a2 + 30920), (OZChannelFolder *)((char *)this + 648));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 31072), (const PSEmitter *)((char *)a2 + 31072), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31328), (const OZChannelBase *)((char *)a2 + 31328), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31480), (const OZChannelBase *)((char *)a2 + 31480), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31632), (const OZChannelBase *)((char *)a2 + 31632), (OZChannelFolder *)((char *)this + 648));
  OZChannel::OZChannel((OZChannel *)((char *)this + 31784), (const OZChannelBase *)((char *)a2 + 31784), (OZChannelFolder *)((char *)this + 648));
  *((_QWORD *)this + 3973) = &off_1E65531D8;
  *((_QWORD *)this + 3975) = &unk_1E6553538;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31936), (const OZChannelBase *)((char *)a2 + 31936), (OZChannelFolder *)((char *)this + 648));
  OZChannelPosition::OZChannelPosition((PSEmitter *)((char *)this + 32088), (const PSEmitter *)((char *)a2 + 32088), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32792), (const OZChannelBase *)((char *)a2 + 32792), (OZChannelFolder *)((char *)this + 648));
  OZChannelEnum::OZChannelEnum((PSEmitter *)((char *)this + 32944), (const PSEmitter *)((char *)a2 + 32944), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33200), (const OZChannelBase *)((char *)a2 + 33200), (OZChannelFolder *)((char *)this + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 33352), (const OZChannelBase *)((char *)a2 + 33352), (OZChannelFolder *)((char *)this + 648));
  *(_OWORD *)((char *)this + 33512) = 0u;
  *((_DWORD *)this + 8396) = -1;
  PCMutex::PCMutex((PCMutex *)((char *)this + 33592));
  *((_OWORD *)this + 2104) = 0u;
  *((_QWORD *)this + 4210) = (char *)this + 33680;
  *((_QWORD *)this + 4211) = (char *)this + 33680;
  *((_QWORD *)this + 4212) = 0;
  TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)a2 + 16, v28);
  (*(void (**)(uint64_t, __n128 *, _QWORD, __n128))(*(_QWORD *)v25 + 1120))(v25, v28, 0, TimeOffset);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 1128))(v27);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v25 + 1136))(v25, v27, 0);
  PSEmitter::updateEmitterShapeEnum(this, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 256), 0x40000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 256));
  *((_WORD *)this + 16776) = 0;
  *((_DWORD *)this + 8389) = 0;
  *((_DWORD *)this + 8390) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 2098) = _Q0;
  if ((v26 & 1) == 0 && (const PSEmitter *)((char *)a2 + 33680) != *((const PSEmitter **)a2 + 4211))
  {
    v13 = (char *)a2 + 33680;
    do
    {
      v14 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v13 + 16)
                                                                                          + 8)
                                                                            + 24))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 16) + 8), *(_QWORD *)(*(_QWORD *)v13 + 16), v26);
      if (v14)
      {
        if (v15)
        {
          v16 = (OZSceneNode *)v15;
          if ((v26 & 8) == 0)
          {
            OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v15 + 2));
            v17 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v16 + 640))(v16);
            OZChannelBase::setNameUnset(v17, 1);
          }
          v18 = operator new(0x18uLL);
          v19 = (_QWORD *)*((_QWORD *)this + 4211);
          *v18 = (char *)this + 33680;
          v18[1] = v19;
          v18[2] = v16;
          *v19 = v18;
          v20 = *((_QWORD *)this + 4212) + 1;
          *((_QWORD *)this + 4211) = v18;
          *((_QWORD *)this + 4212) = v20;
          v21 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v16 + 640))(v16);
          OZChannelFolder::push_front(v24, v21);
          PSParticleType::setEmitter(v16, this);
          (*(void (**)(OZSceneNode *, uint64_t))(*(_QWORD *)v16 + 256))(v16, v25);
          v22 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 272))(v25);
          v23 = (uint64_t)v22;
          if (v22)
          {
            OZScene::registerNode(v22, v16);
            OZScene::addAllDependencies(v23, v16);
          }
        }
      }
      v13 = *(char **)v13;
    }
    while (v13 != *((char **)a2 + 4211));
  }
}

void sub_1B2FA02E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCMutex *a10, uint64_t a11, OZChannelBool *a12, OZChannelBool *a13, OZChannelEnum *a14, OZChannelBool *a15, OZChannelPosition *a16, OZChannelBool *a17, OZChannel *a18, OZChannelBool *a19, OZChannelBool *a20,OZChannelBool *a21,OZChannelEnum *a22,OZChannelPercent *a23,OZChannelColor *a24,OZChannelPercent *a25,OZChannelPercent *a26,OZChannelScale3D *a27,OZChannelPercent *a28,OZChannelPercent *a29,OZChannelBool *a30,OZChannelPercent *a31,OZChannelFolder *a32,OZChannel *a33,OZChannel *a34,OZChannel *a35,OZChanElementOrFootageRef *a36,OZChanRotoshapeRef *a37,OZChannelPercent *a38,OZChannelBool *a39,OZChannel *a40,OZChannel *a41,OZChannel *a42,OZChannel *a43,OZChannel *a44,OZChannel *a45,OZChannel *a46,OZChannel3D *a47,OZChannel *a48,OZChannelPosition3D *a49,OZChannelPosition3D *a50,OZChannel *a51,OZChannelPercent *a52,OZChannelBool *a53,OZChannelEnum *a54,OZChannelEnum *a55,OZChannelEnum *a56,OZChannelEnum *a57,OZChannelEnum *a58,OZChannelEnum *a59,OZChannelEnum *a60,OZChannelPercent *a61,OZChannelPercent *a62,OZChannelPercent *a63)
{
  OZChannel *a64;
  OZLockingElement *v64;
  OZChannelFolder *v65;
  uint64_t v66;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelPosition::~OZChannelPosition(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannel::~OZChannel(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChannelBool::~OZChannelBool(a20);
  OZChannelBool::~OZChannelBool(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelColor::~OZChannelColor(a24);
  OZChannelPercent::~OZChannelPercent(a25);
  OZChannelPercent::~OZChannelPercent(a26);
  OZChannelScale3D::~OZChannelScale3D(a27);
  OZChannelPercent::~OZChannelPercent(a28);
  OZChannelPercent::~OZChannelPercent(a29);
  OZChannelBool::~OZChannelBool(a30);
  OZChannelPercent::~OZChannelPercent(a31);
  OZChannelFolder::~OZChannelFolder(a32);
  OZChannel::~OZChannel(a33);
  OZChannel::~OZChannel(a34);
  OZChannel::~OZChannel(a35);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a36);
  OZChanRotoshapeRef::~OZChanRotoshapeRef(a37);
  OZChannelPercent::~OZChannelPercent(a38);
  OZChannelBool::~OZChannelBool(a39);
  OZChannel::~OZChannel(a40);
  OZChannel::~OZChannel(a41);
  OZChannel::~OZChannel(a42);
  OZChannel::~OZChannel(a43);
  OZChannel::~OZChannel(a44);
  OZChannel::~OZChannel(a45);
  OZChannel::~OZChannel(a46);
  OZChannel3D::~OZChannel3D(a47);
  OZChannel::~OZChannel(a48);
  OZChannelPosition3D::~OZChannelPosition3D(a49);
  OZChannelPosition3D::~OZChannelPosition3D(a50);
  OZChannel::~OZChannel(a51);
  OZChannelPercent::~OZChannelPercent(a52);
  OZChannelBool::~OZChannelBool(a53);
  OZChannelEnum::~OZChannelEnum(a54);
  OZChannelEnum::~OZChannelEnum(a55);
  OZChannelEnum::~OZChannelEnum(a56);
  OZChannelEnum::~OZChannelEnum(a57);
  OZChannelEnum::~OZChannelEnum(a58);
  OZChannelEnum::~OZChannelEnum(a59);
  OZChannelEnum::~OZChannelEnum(a60);
  OZChannelPercent::~OZChannelPercent(a61);
  OZChannelPercent::~OZChannelPercent(a62);
  OZChannelPercent::~OZChannelPercent(a63);
  OZChannel::~OZChannel(a64);
  OZChannel::~OZChannel(*(OZChannel **)(v66 - 256));
  OZChannel::~OZChannel(*(OZChannel **)(v66 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v66 - 240));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v66 - 232));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v66 - 224));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v66 - 216));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v66 - 208));
  OZChannelFolder::~OZChannelFolder(v65);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v66 - 184));
  OZLockingElement::~OZLockingElement(v64);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::operator=(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  _BYTE *v5;

  OZElement::operator=(a1 + 200, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 18976);
  OZChannelFolder::operator=(a1 + 19104);
  OZChannelBase::operator=(a1 + 19232, (uint64_t)(v5 + 19232));
  OZChannelBase::operator=(a1 + 19488, (uint64_t)(v5 + 19488));
  OZChannelBase::operator=(a1 + 19744, (uint64_t)(v5 + 19744));
  OZChannelBase::operator=(a1 + 20304, (uint64_t)(v5 + 20304));
  OZChannelBase::operator=(a1 + 20456, (uint64_t)(v5 + 20456));
  OZChannelBase::operator=(a1 + 20608, (uint64_t)(v5 + 20608));
  OZChannelBase::operator=(a1 + 20760, (uint64_t)(v5 + 20760));
  OZChannelBase::operator=(a1 + 20912, (uint64_t)(v5 + 20912));
  OZChannelBase::operator=(a1 + 23312, (uint64_t)(v5 + 23312));
  OZChannelPosition::operator=(a1 + 23464, (uint64_t)(v5 + 23464));
  OZChannelPosition::operator=(a1 + 24352, (uint64_t)(v5 + 24352));
  OZChannelBase::operator=(a1 + 27048, (uint64_t)(v5 + 27048));
  OZChannelBase::operator=(a1 + 27200, (uint64_t)(v5 + 27200));
  OZChanSceneNodeRef::operator=(a1 + 27352, (uint64_t)(v5 + 27352));
  OZChanSceneNodeRef::operator=(a1 + 27512, (uint64_t)(v5 + 27512));
  OZChannelBase::operator=(a1 + 27672, (uint64_t)(v5 + 27672));
  OZChannelBase::operator=(a1 + 27824, (uint64_t)(v5 + 27824));
  OZChannelBase::operator=(a1 + 27976, (uint64_t)(v5 + 27976));
  OZChannelBase::operator=(a1 + 28712, (uint64_t)(v5 + 28712));
  OZChannelBase::operator=(a1 + 28256, (uint64_t)(v5 + 28256));
  OZChannelBase::operator=(a1 + 28408, (uint64_t)(v5 + 28408));
  OZChannelBase::operator=(a1 + 28560, (uint64_t)(v5 + 28560));
  OZChannelFolder::operator=(a1 + 28864);
  OZChannelBase::operator=(a1 + 29000, (uint64_t)(v5 + 29000));
  OZChannelBase::operator=(a1 + 29152, (uint64_t)(v5 + 29152));
  OZChannelBase::operator=(a1 + 29304, (uint64_t)(v5 + 29304));
  OZChannelBase::operator=(a1 + 29456, (uint64_t)(v5 + 29456));
  OZChannelBase::operator=(a1 + 29608, (uint64_t)(v5 + 29608));
  OZChannelFolder::operator=(a1 + 29760);
  OZChannelBase::operator=(a1 + 29896, (uint64_t)(v5 + 29896));
  OZChannelBase::operator=(a1 + 30048, (uint64_t)(v5 + 30048));
  OZChannelBase::operator=(a1 + 30200, (uint64_t)(v5 + 30200));
  OZChannelBase::operator=(a1 + 30352, (uint64_t)(v5 + 30352));
  OZChannelBase::operator=(a1 + 30504, (uint64_t)(v5 + 30504));
  *(_BYTE *)(a1 + 30760) = v5[30760];
  OZChannelBase::operator=(a1 + 30768, (uint64_t)(v5 + 30768));
  OZChannelBase::operator=(a1 + 30920, (uint64_t)(v5 + 30920));
  OZChannelBase::operator=(a1 + 31072, (uint64_t)(v5 + 31072));
  OZChannelBase::operator=(a1 + 31328, (uint64_t)(v5 + 31328));
  OZChannelBase::operator=(a1 + 31480, (uint64_t)(v5 + 31480));
  OZChannelBase::operator=(a1 + 31936, (uint64_t)(v5 + 31936));
  *(_WORD *)(a1 + 33552) = 0;
  *(_QWORD *)(a1 + 33556) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 33568) = _Q0;
  *(_DWORD *)(a1 + 33584) = -1;
  *(_OWORD *)(a1 + 33664) = 0u;
  return OZChannelBase::operator=(a1 + 26896, (uint64_t)(v5 + 26896));
}

uint64_t `non-virtual thunk to'PSEmitter::operator=(uint64_t a1, const void *a2)
{
  return PSEmitter::operator=(a1 - 200, a2);
}

void PSEmitter::~PSEmitter(PSEmitter *this)
{
  _QWORD *v2;
  OZElement *v3;
  uint64_t i;
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  OZChannelBase *v8;
  OZScene *v9;

  v2 = (_QWORD *)((char *)this + 33664);
  *(_QWORD *)this = off_1E65DBCA0;
  *((_QWORD *)this + 25) = &unk_1E65DBF40;
  v3 = (OZElement *)((char *)this + 200);
  *((_QWORD *)this + 27) = &unk_1E65DC818;
  *((_QWORD *)this + 31) = &unk_1E65DCA70;
  *((_QWORD *)this + 841) = &unk_1E65DCAC8;
  for (i = *((_QWORD *)this + 4212); i; i = v2[4])
  {
    v5 = (uint64_t *)v2[3];
    v6 = (unsigned int *)v5[2];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = v5[1];
    *(_QWORD *)v5[1] = v7;
    v2[4] = i - 1;
    operator delete(v5);
    v8 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 640))(v6);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18976), v8);
    v9 = (OZScene *)*((_QWORD *)this + 146);
    if (v9 && OZScene::getNode(v9, v6[20]) == v6)
    {
      OZScene::unregisterNode(*((OZScene **)this + 146), (OZSceneNode *)v6);
      OZScene::removeAllDependencies(*((OZScene **)this + 146), (OZSceneNode *)v6);
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*v2)
    MEMORY[0x1B5E2914C](*v2, 0x1000C8052888210);
  *v2 = 0;
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 4210);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 33592));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 33512);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 33352));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 33200));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 32944));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 32792));
  OZChannelPosition::~OZChannelPosition((PSEmitter *)((char *)this + 32088));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31936));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31784));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31632));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31480));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31328));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 31072));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 30920));
  *((_QWORD *)this + 3720) = &off_1E6557D88;
  *((_QWORD *)this + 3722) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30768));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((PSEmitter *)((char *)this + 29760));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 29608));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 29456));
  *((_QWORD *)this + 3608) = &off_1E6560F48;
  *((_QWORD *)this + 3610) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29304));
  OZChannel2D::~OZChannel2D((PSEmitter *)((char *)this + 28864));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28712));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28560));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 28408));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28256));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 28128));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27976));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27824));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27672));
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef((PSEmitter *)((char *)this + 27512));
  OZChanRotoshapeRef::~OZChanRotoshapeRef((PSEmitter *)((char *)this + 27352));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 27200));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 27048));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26896));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26136));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25984));
  *((_QWORD *)this + 3174) = &off_1E65568E0;
  *((_QWORD *)this + 3176) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25832));
  OZChannel2D::~OZChannel2D((PSEmitter *)((char *)this + 25392));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25240));
  OZChannelPosition3D::~OZChannelPosition3D((PSEmitter *)((char *)this + 24352));
  OZChannelPosition3D::~OZChannelPosition3D((PSEmitter *)((char *)this + 23464));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23312));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 23160));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 23008));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 22752));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 22496));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 22240));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21984));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21728));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21472));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 21216));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21064));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 20912));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 20760));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20608));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20456));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20152));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 19896));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19744));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 19488));
  OZChannelEnum::~OZChannelEnum((PSEmitter *)((char *)this + 19232));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 19104));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18976));
  OZElement::~OZElement(v3);
  *(_QWORD *)this = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
}

{
  PSEmitter::~PSEmitter(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSEmitter::~PSEmitter(PSEmitter *this)
{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 200));
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 216));
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 248));
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 6728));
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  PSEmitter::~PSEmitter((PSEmitter *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *PSEmitter::didCreateCopyForCopyOnWrite(PSEmitter *this, double a2)
{
  OZChannel *v2;

  v2 = (OZChannel *)((char *)this + 31784);
  LODWORD(a2) = *((_DWORD *)this + 70);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 31784), (double)*(unint64_t *)&a2);
  OZChannel::resetCurve(v2);
  return OZChannelBase::resetFlag((OZChannelBase *)v2, 0x100000000, 1);
}

OZChannelBase *`non-virtual thunk to'PSEmitter::didCreateCopyForCopyOnWrite(PSEmitter *this, double a2)
{
  return PSEmitter::didCreateCopyForCopyOnWrite((PSEmitter *)((char *)this - 200), a2);
}

uint64_t PSEmitter::willRemoveFromScene(PSEmitter *this, OZScene *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  OZLockingElement::willRemoveFromScene(this, a2);
  v4 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  result = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v4 != result)
  {
    v6 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD, OZScene *))(**(_QWORD **)(v4 + 16) + 872))(*(_QWORD *)(v4 + 16), a2);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::willRemoveFromScene(PSEmitter *this, OZScene *a2)
{
  return PSEmitter::willRemoveFromScene((PSEmitter *)((char *)this - 200), a2);
}

BOOL PSEmitter::areEffectsAppliedInScreenSpace(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL `non-virtual thunk to'PSEmitter::areEffectsAppliedInScreenSpace(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 26064), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

void PSEmitter::getOriginalBounds(Li3DEngineScene *a1, float64x2_t *a2, const CMTime *a3)
{
  OZScene **v6;
  int v12;
  uint64_t v13;
  uint64_t i;
  const void *v15;
  PSParticleType *v16;
  PCSharedCount *v17;
  PC_Sp_counted_base *j;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22[2];
  BOOL v23;
  OZSimStateArray *v24;
  CMTime v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  CMTime v36;
  _BYTE v37[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v37, v6);
  __asm { FMOV            V0.2D, #-1.0 }
  v21 = _Q0;
  a2[1] = _Q0;
  v36 = *a3;
  if (PSEmitter::needSourceBitmap(a1, &v36))
    v12 = 2;
  else
    v12 = 0;
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v27 = 0u;
  v28 = 0u;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  (*(void (**)(_QWORD *, uint64_t *, const CMTime *))(*((_QWORD *)a1 + 25) + 1264))((_QWORD *)a1 + 25, &v26, a3);
  v13 = (*(uint64_t (**)(Li3DEngineScene *))(*(_QWORD *)a1 + 256))(a1);
  for (i = (*(uint64_t (**)(Li3DEngineScene *))(*(_QWORD *)a1 + 264))(a1); v13 != i; v13 = *(_QWORD *)(v13 + 8))
  {
    v15 = *(const void **)(v13 + 16);
    if (v15)
    else
      v16 = 0;
    v25 = v36;
    if ((*(unsigned int (**)(_QWORD *, CMTime *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v16 + 2) + 104))((_QWORD *)v16 + 2, &v25, 0, 1, 1))
    {
      v24 = 0;
      v23 = 0;
      PSParticleType::getState(v16, v12, a3, &v24, &v23);
      (*(void (**)(PSParticleType *))(*(_QWORD *)v16 + 1240))(v16);
      v17 = (PCSharedCount *)v24;
      for (j = *(PC_Sp_counted_base **)v24; j != v17[1].var0; j = (PC_Sp_counted_base *)((char *)j + 248))
      {
        v22[0] = 0uLL;
        v22[1] = v21;
        (*(void (**)(PSParticleType *, PC_Sp_counted_base *, const CMTime *, float64x2_t *))(*(_QWORD *)v16 + 1248))(v16, j, a3, v22);
        PCRect<double>::operator|=(a2, v22);
        v17 = (PCSharedCount *)v24;
      }
      if (v23)
      {
        OZSimStateArray::~OZSimStateArray(v17);
        MEMORY[0x1B5E29170]();
      }
    }
  }
  __asm { FMOV            V0.2D, #2.0 }
  v20 = vrndpq_f64(vaddq_f64(a2[1], _Q0));
  *a2 = vrndpq_f64(vaddq_f64(*a2, v21));
  a2[1] = v20;
  if (v20.f64[0] < 0.0 || v20.f64[1] < 0.0)
  {
    *a2 = v21;
    a2[1] = _Q0;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v37);
}

void sub_1B2FA13B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::needSourceBitmap(PSEmitter *this, const CMTime *a2)
{
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const CMTime *v9;
  char *v10;
  BOOL v11;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), MEMORY[0x1E0CA2E68], 0.0) != 5)
    return 0;
  result = (uint64_t)OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 27512));
  if (!result)
    return result;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 27048), MEMORY[0x1E0CA2E68], 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27200), a2, 0.0);
    result = 1;
    if (v5 <= -0.0000001 || v5 >= 0.0000001)
      return result;
  }
  v6 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v7 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v6 == v7)
    return 0;
  v8 = v7;
  v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
  do
  {
    v10 = *(char **)(v6 + 16);
    if (v10)
    v11 = OZChannel::getValueAsInt((OZChannel *)(v10 + 5368), v9, 0.0) == 4;
    result = v11;
    if (v11)
      break;
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6 != v8);
  return result;
}

void `non-virtual thunk to'PSEmitter::getOriginalBounds(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
  PSEmitter::getOriginalBounds((Li3DEngineScene *)(a1 - 200), a2, a3);
}

uint64_t PSEmitter::getProjectedBounds(uint64_t a1, float64x2_t *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CMTime v19[59];

  OZRenderParams::OZRenderParams((OZRenderParams *)v19);
  OZRenderParams::setState((OZRenderParams *)v19, a4);
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v10 = 0u;
  v11 = 0u;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  (*(void (**)(uint64_t, uint64_t *, const OZRenderState *))(*(_QWORD *)(a1 + 200) + 1256))(a1 + 200, &v9, a4);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v9, a3);
  PSEmitter::getRenderBounds(a1, a2, v19, &v9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v19);
  return 1;
}

void sub_1B2FA15F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void PSEmitter::getRenderBounds(uint64_t a1, float64x2_t *a2, CMTime *this, _BYTE *a4)
{
  char v9;
  uint64_t i;
  _OWORD *v11;
  __int128 v12;
  OZScene **v13;
  int v18;
  uint64_t v19;
  uint64_t j;
  const void *v21;
  PSParticleType *v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v26;
  float64x2_t v27;
  BOOL v28;
  OZSimStateArray *v29;
  CMTime v30;
  CMTime v31;
  _BYTE v32[8];
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  _BYTE v40[128];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CMTime v44;

  if (OZRenderParams::hasParameter((OZRenderParams *)this, (const char *)kPSIsPreviewRender))
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0xC090000000000000);
    a2[1] = (float64x2_t)vdupq_n_s64(0x40A0000000000000uLL);
  }
  else
  {
    v44 = *this;
    PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v33, (const OZRenderParams *)this);
    v33[0] = a1;
    v36 = 0;
    v37 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32792), &v44, 0.0) != 0;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v44, 0.0))
      _ZF = !v37;
    else
      _ZF = 1;
    v9 = !_ZF;
    v38 = v9;
    if (!_ZF)
    {
      (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(_QWORD *)(a1 + 200) + 1304))(a1 + 200, &v39, this);
      PSEmitter::getCameraPropertiesInLocalSpace(a1, (PC_Sp_counted_base **)this, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
    }
    if (v40 != a4)
    {
      for (i = 0; i != 128; i += 32)
      {
        v11 = &v40[i];
        v12 = *(_OWORD *)&a4[i + 16];
        *v11 = *(_OWORD *)&a4[i];
        v11[1] = v12;
      }
    }
    v13 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v32, v13);
    __asm { FMOV            V0.2D, #-1.0 }
    v27 = _Q0;
    a2[1] = _Q0;
    if (PSEmitter::needSourceBitmap((PSEmitter *)a1, &v44))
      v18 = 2;
    else
      v18 = v36;
    v31 = *this;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
    for (j = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1); v19 != j; v19 = *(_QWORD *)(v19 + 8))
    {
      v21 = *(const void **)(v19 + 16);
      if (v21)
      else
        v22 = 0;
      v30 = v44;
      if ((*(unsigned int (**)(_QWORD *, CMTime *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v22 + 2) + 104))((_QWORD *)v22 + 2, &v30, 0, 1, 1))
      {
        v29 = 0;
        v28 = 0;
        (*(void (**)(PSParticleType *))(*(_QWORD *)v22 + 1240))(v22);
        PSParticleType::getState(v22, v18, &v31, &v29, &v28);
        v23 = *(_QWORD *)v29;
        v24 = *((_QWORD *)v29 + 1);
        while (v23 != v24)
        {
          (*(void (**)(PSParticleType *, _QWORD *, uint64_t, float64x2_t *))(*(_QWORD *)v22 + 1256))(v22, v33, v23, a2);
          v23 += 248;
        }
        if (v28 && v29)
        {
          OZSimStateArray::~OZSimStateArray((PCSharedCount *)v29);
          MEMORY[0x1B5E29170]();
        }
      }
    }
    __asm { FMOV            V0.2D, #2.0 }
    v26 = vrndpq_f64(vaddq_f64(a2[1], _Q0));
    *a2 = vrndpq_f64(vaddq_f64(*a2, v27));
    a2[1] = v26;
    if (v26.f64[0] < 0.0 || v26.f64[1] < 0.0)
    {
      *a2 = v27;
      a2[1] = _Q0;
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v32);
    LiClipSet::~LiClipSet((LiClipSet *)&v35);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v34);
  }
}

void sub_1B2FA1934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  LiClipSet::~LiClipSet((LiClipSet *)&STACK[0x608]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSEmitter::getProjectedBounds(uint64_t a1, float64x2_t *a2, double *a3, const OZRenderState *a4)
{
  PSEmitter::getProjectedBounds(a1 - 200, a2, a3, a4);
  return 1;
}

void PSEmitter::getCameraPropertiesInLocalSpace(uint64_t a1, PC_Sp_counted_base **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PC_Sp_counted_base *v10;
  PCShared_base *v11;
  PC_Sp_counted_base *var0;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  PCSharedCount v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[1424];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)a4 = xmmword_1B304EEE0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0x3FF0000000000000;
  if ((unint64_t)a2[162] | (unint64_t)a2[160] && *((_BYTE *)a2 + 242))
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v26, (const OZRenderParams *)a2);
    v10 = a2[162];
    if (!v10)
      v10 = a2[160];
    v16.var0 = v10;
    if (v10)
      v11 = (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24));
    else
      v11 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v17, v11);
    OZRenderParams::setCamera((uint64_t)v26, &v16);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v17);
    v25 = 0x3FF0000000000000;
    v22 = 0x3FF0000000000000;
    v19 = 0x3FF0000000000000;
    v16.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    v17 = 0u;
    v18 = 0u;
    v20 = 0u;
    v21 = 0u;
    v23 = 0u;
    v24 = 0u;
    (*(void (**)(uint64_t, PCSharedCount *, _BYTE *))(*(_QWORD *)(a1 + 200) + 1296))(a1 + 200, &v16, v26);
    PCMatrix44Tmpl<double>::transform<double>((double *)&v16, (double *)a3, (double *)a3);
    var0 = v16.var0;
    v14 = *((_QWORD *)&v18 + 1);
    v13 = v19;
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = v13;
    v15 = v21;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)&v21 + 1);
    *(_QWORD *)a5 = var0;
    *(_QWORD *)(a5 + 8) = v14;
    *(_QWORD *)(a5 + 16) = v15;
    PCVector3<double>::normalize((double *)a4, 0.000000100000001);
    PCVector3<double>::normalize((double *)a5, 0.000000100000001);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v26);
  }
}

void sub_1B2FA1B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  PCSharedCount *v25;

  PCSharedCount::~PCSharedCount(v25);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a25);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::estimateRenderMemory(uint64_t a1, CMTime *a2, _BYTE *a3)
{
  BOOL v6;
  char v7;
  uint64_t i;
  _OWORD *v9;
  __int128 v10;
  OZScene **v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  PSParticleType *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  BOOL v24;
  OZSimStateArray *v25;
  char v26;
  CMTime v27;
  _QWORD **v28;
  _QWORD *v29[2];
  CMTime v30;
  _BYTE v31[8];
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  BOOL hasParameter;
  BOOL v36;
  char v37;
  uint64_t v38;
  _BYTE v39[128];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CMTime v43;

  v43 = *a2;
  PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v32, (const OZRenderParams *)a2);
  v32[0] = a1;
  hasParameter = OZRenderParams::hasParameter((OZRenderParams *)a2, (const char *)kPSIsPreviewRender);
  v36 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32792), &v43, 0.0) != 0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v43, 0.0))
    v6 = !v36;
  else
    v6 = 1;
  v7 = !v6;
  v37 = v7;
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(_QWORD *)(a1 + 200) + 1304))(a1 + 200, &v38, a2);
    PSEmitter::getCameraPropertiesInLocalSpace(a1, (PC_Sp_counted_base **)a2, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v42);
  }
  if (v39 != a3)
  {
    for (i = 0; i != 128; i += 32)
    {
      v9 = &v39[i];
      v10 = *(_OWORD *)&a3[i + 16];
      *v9 = *(_OWORD *)&a3[i];
      v9[1] = v10;
    }
  }
  v11 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v11);
  v12 = PSEmitter::needSourceBitmap((PSEmitter *)a1, &v43);
  v13 = hasParameter;
  if (v12)
    v13 = 2;
  v23 = v13;
  v30 = *a2;
  v29[0] = 0;
  v29[1] = 0;
  v28 = v29;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  if (v14 == v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = *(const void **)(v14 + 16);
      if (v17)
      else
        v18 = 0;
      v27 = v43;
      if ((*(unsigned int (**)(_QWORD *, CMTime *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v18 + 2) + 104))((_QWORD *)v18 + 2, &v27, 0, 1, 1))
      {
        (*(void (**)(PSParticleType *, CMTime *))(*(_QWORD *)v18 + 1288))(v18, a2);
        v26 = 1;
        v19 = (*(uint64_t (**)(PSParticleType *, CMTime *, char *))(*(_QWORD *)v18 + 1272))(v18, a2, &v26);
        if (v26 || !(v19 >> 24))
        {
          v16 += v19;
        }
        else
        {
          v25 = 0;
          v24 = 0;
          PSParticleType::getState(v18, v23, &v30, &v25, &v24);
          v21 = *(_QWORD *)v25;
          v20 = *((_QWORD *)v25 + 1);
          while (v21 != v20)
          {
            v16 += (*(uint64_t (**)(PSParticleType *, _QWORD *, uint64_t, _QWORD ***))(*(_QWORD *)v18 + 1264))(v18, v32, v21, &v28);
            v21 += 248;
          }
          if (v24 && v25)
          {
            OZSimStateArray::~OZSimStateArray((PCSharedCount *)v25);
            MEMORY[0x1B5E29170]();
          }
        }
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != v15);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v28, v29[0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v31);
  LiClipSet::~LiClipSet((LiClipSet *)&v34);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v33);
  return v16;
}

void sub_1B2FA1E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a16, a17);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a23);
  LiClipSet::~LiClipSet((LiClipSet *)&STACK[0x618]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a26);
  _Unwind_Resume(a1);
}

void PSEmitter::SimEntry::~SimEntry(PCSharedCount **this)
{
  PCSharedCount *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *this;
    if (*this)
    {
      OZSimStateArray::~OZSimStateArray(v2);
      MEMORY[0x1B5E29170]();
    }
  }
}

double PSEmitter::setupEmitterParams(PSEmitter *this, const OZRenderParams *a2, PSEmitter::RenderParams *a3)
{
  BOOL v6;
  char v7;
  double result;
  CMTime v9;

  v9 = *(CMTime *)a2;
  *(_QWORD *)a3 = this;
  *((_BYTE *)a3 + 1496) = OZRenderParams::hasParameter(a2, (const char *)kPSIsPreviewRender);
  *((_BYTE *)a3 + 1497) = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 33200), &v9, 0.0))
    v6 = *((_BYTE *)a3 + 1497) == 0;
  else
    v6 = 1;
  v7 = !v6;
  *((_BYTE *)a3 + 1498) = v7;
  if (!v6)
  {
    (*(void (**)(char *, char *, const OZRenderParams *))(*((_QWORD *)this + 25) + 1304))((char *)this + 200, (char *)a3 + 1504, a2);
    PSEmitter::getCameraPropertiesInLocalSpace((uint64_t)this, (PC_Sp_counted_base **)a2, (uint64_t)a3 + 1760, (uint64_t)a3 + 1784, (uint64_t)a3 + 1808);
  }
  *((_QWORD *)a3 + 219) = 0x3FF0000000000000;
  *((_QWORD *)a3 + 214) = 0x3FF0000000000000;
  *((_QWORD *)a3 + 209) = 0x3FF0000000000000;
  *((_QWORD *)a3 + 204) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)((char *)a3 + 1640) = 0u;
  *(_OWORD *)((char *)a3 + 1656) = 0u;
  *((_OWORD *)a3 + 105) = 0u;
  *((_OWORD *)a3 + 106) = 0u;
  *(_OWORD *)((char *)a3 + 1720) = 0u;
  *(_OWORD *)((char *)a3 + 1736) = 0u;
  return result;
}

_QWORD *PSEmitter::getSimList(uint64_t a1, const CMTime *a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  int v12;
  const void *v13;
  PSParticleType *v14;
  uint64_t v15;
  uint64_t v16;
  OZSimStateArray *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v22;
  OZSimStateArray *v23;
  __int128 v24;
  CMTimeEpoch epoch;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  if ((_QWORD *)v9 == result)
  {
    v12 = 0;
  }
  else
  {
    v11 = result;
    v12 = 0;
    do
    {
      v13 = *(const void **)(v9 + 16);
      if (v13)
      else
        v14 = 0;
      epoch = a2->epoch;
      v24 = *(_OWORD *)&a2->value;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v14 + 2) + 104))((_QWORD *)v14 + 2, &v24, 0, 1, 1);
      if ((_DWORD)result)
      {
        v23 = 0;
        v22 = 0;
        PSParticleType::getState(v14, a3, a2, &v23, &v22);
        result = v23;
        v15 = *((_QWORD *)v23 + 1);
        if (*(_QWORD *)v23 == v15)
        {
          if (v22)
          {
            OZSimStateArray::~OZSimStateArray((PCSharedCount *)v23);
            result = (_QWORD *)MEMORY[0x1B5E29170]();
          }
        }
        else
        {
          v12 -= 1108378657 * ((unint64_t)(v15 - *(_QWORD *)v23) >> 3);
          v16 = operator new();
          v17 = v23;
          v18 = v22;
          *(_QWORD *)v16 = v23;
          *(_BYTE *)(v16 + 8) = v18;
          *(_QWORD *)(v16 + 16) = *(_QWORD *)v17;
          v19 = *((_QWORD *)v17 + 1);
          *(_QWORD *)(v16 + 24) = v19;
          *(_QWORD *)(v16 + 32) = v19;
          *(_QWORD *)(v16 + 40) = v14;
          result = operator new(0x18uLL);
          result[1] = a4;
          result[2] = v16;
          v20 = *a4;
          *result = *a4;
          *(_QWORD *)(v20 + 8) = result;
          *a4 = (uint64_t)result;
          ++a4[2];
        }
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while ((_QWORD *)v9 != v11);
  }
  *a5 = v12;
  return result;
}

BOOL PSEmitter::lessThanOldestFirst(uint64_t a1, uint64_t a2)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  CMTime v8;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 32);
  v8 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v8))
  {
    time1 = *(CMTime *)(a1 + 32);
    v8 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v8) >> 31;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = *(_DWORD *)(a2 + 56);
    if (v5 >= v6)
    {
      if (v5 > v6)
      {
        return 0;
      }
      else
      {
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
        return v7 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
      }
    }
    else
    {
      return 1;
    }
  }
}

uint64_t PSEmitter::lessThanYoungestFirst(uint64_t a1, uint64_t a2)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  CMTime v8;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 32);
  v8 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v8))
  {
    time1 = *(CMTime *)(a1 + 32);
    v8 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v8) > 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = *(_DWORD *)(a2 + 56);
    if (v5 <= v6)
    {
      if (v5 >= v6)
      {
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
        return v7 > (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
}

BOOL PSEmitter::lessThanOldestFirstWithRank(uint64_t a1, uint64_t a2)
{
  unsigned int v5;
  unsigned int v6;
  double *v7;
  double v8;
  double v9;
  unsigned int v10;
  CMTime v11;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 32);
  v11 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v11))
  {
    time1 = *(CMTime *)(a1 + 32);
    v11 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v11) >> 31;
  }
  v5 = *(_DWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a2 + 56);
  if (v5 < v6)
    return 1;
  if (v5 > v6)
    return 0;
  v7 = *(double **)(a1 + 8);
  v8 = v7[22];
  v9 = *(double *)(*(_QWORD *)(a2 + 8) + 176);
  if (v8 < v9)
    return 1;
  if (v8 > v9)
    return 0;
  v10 = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 32))(v7);
  return v10 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
}

BOOL PSEmitter::lessThanYoungestFirstWithRank(uint64_t a1, uint64_t a2)
{
  unsigned int v5;
  unsigned int v6;
  double *v7;
  double v8;
  double v9;
  unsigned int v10;
  CMTime v11;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 32);
  v11 = *(CMTime *)(a2 + 32);
  if (CMTimeCompare(&time1, &v11))
  {
    time1 = *(CMTime *)(a1 + 32);
    v11 = *(CMTime *)(a2 + 32);
    return CMTimeCompare(&time1, &v11) > 0;
  }
  v5 = *(_DWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a2 + 56);
  if (v5 < v6)
    return 1;
  if (v5 > v6)
    return 0;
  v7 = *(double **)(a1 + 8);
  v8 = v7[22];
  v9 = *(double *)(*(_QWORD *)(a2 + 8) + 176);
  if (v8 > v9)
    return 1;
  if (v8 < v9)
    return 0;
  v10 = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 32))(v7);
  return v10 > (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
}

BOOL PSEmitter::lessThanZDepthOldestFirst(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a2 + 24);
  if (vabdd_f64(v2, v3) >= 0.0000001)
    return v2 < v3;
  else
    return PSEmitter::lessThanOldestFirst(a1, a2);
}

uint64_t PSEmitter::lessThanZDepthYoungestFirst(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a2 + 24);
  if (vabdd_f64(v2, v3) >= 0.0000001)
    return v2 < v3;
  else
    return PSEmitter::lessThanYoungestFirst(a1, a2);
}

void PSEmitter::PostRenderFinalizer::~PostRenderFinalizer(PSEmitter::PostRenderFinalizer *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  for (i = *(_QWORD *)(*(_QWORD *)this + 8); i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 40) + 1304))(*(_QWORD *)(v4 + 40), *((_QWORD *)this + 1));
    PSEmitter::SimEntry::~SimEntry((PCSharedCount **)v4);
    MEMORY[0x1B5E29170]();
  }
}

void PSEmitter::getHelium(PSEmitter *this@<X0>, CMTime *a2@<X1>, LiAgent *a3@<X2>, PSHeliumNode **a4@<X8>)
{
  _BOOL4 hasParameter;
  OZScene **v9;
  PSHeliumNode *v10;
  uint64_t *i;
  int v12;
  uint64_t v13;
  unsigned int v14;
  const LiClipSet *ObjectClipPlanes;
  CGColorSpace *CGColorSpace;
  const FxColorDescription *RequestedColorDescription;
  __int128 v18[8];
  FxColorDescription v19;
  uint64_t *v20;
  CMTime *v21;
  CMTime v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE v27[8];
  __int128 v28;
  CMTimeEpoch epoch;

  v28 = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  if (((*(uint64_t (**)(char *, __int128 *, _QWORD, _QWORD, _QWORD))(*((_QWORD *)this + 27) + 104))((char *)this + 216, &v28, 0, 0, 0) & 1) != 0)
  {
    hasParameter = OZRenderParams::hasParameter((OZRenderParams *)a2, (const char *)kPSIsPreviewRender);
    v9 = (OZScene **)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v27, v9);
    v10 = (PSHeliumNode *)HGObject::operator new(0x390uLL);
    PSHeliumNode::PSHeliumNode(v10, (const OZRenderParams *)a2);
    v26 = 0;
    v23 = (uint64_t)&v23;
    v24 = &v23;
    v25 = 0;
    v22 = *a2;
    PSEmitter::getSimList((uint64_t)this, &v22, hasParameter, &v23, &v26);
    if (v25)
    {
      v20 = &v23;
      v21 = a2;
      for (i = v24; i != &v23; i = (uint64_t *)i[1])
        (*(void (**)(_QWORD, CMTime *, PSHeliumNode *))(**(_QWORD **)(i[2] + 40) + 1296))(*(_QWORD *)(i[2] + 40), v21, v10);
      v12 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
      v13 = *((_QWORD *)a3 + 20);
      LiAgent::getObjectToImageTransform(a3, (uint64_t)v18);
      PCMatrix44Tmpl<double>::operator*(v13, v18, (uint64_t)&v19);
      PSHeliumNode::setObjectToFilmMatrix((uint64_t)v10, (uint64_t)&v19);
      v14 = v26;
      PSHeliumNode::setNumberOfParticles(v10, v26);
      ObjectClipPlanes = (const LiClipSet *)LiAgent::getObjectClipPlanes(a3);
      PSHeliumNode::setClip(v10, ObjectClipPlanes);
      if (v12)
        PSEmitter::getHeliumGraph3D((uint64_t)this, a2, (uint64_t)a3, &v23, hasParameter, v14, (uint64_t)v10);
      else
        PSEmitter::getHeliumGraph2D((uint64_t)this, (const OZRenderParams *)a2, (uint64_t)a3, &v23, hasParameter, v14, (uint64_t)v10);
      PSHeliumNode::preRender(v10);
      PSEmitter::PostRenderFinalizer::~PostRenderFinalizer((PSEmitter::PostRenderFinalizer *)&v20);
      CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a3 + 6)
                                                                                              + 160));
      RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a3);
      FxColorDescription::FxColorDescription(&v19, RequestedColorDescription, CGColorSpace);
      LiAgent::setActualColorDescription((CGColorSpace **)a3, &v19);
      *a4 = v10;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v19._pcColorDesc._colorSpaceRef._obj);
      std::__list_imp<unsigned int>::clear(&v23);
    }
    else
    {
      *a4 = 0;
      std::__list_imp<unsigned int>::clear(&v23);
      if (v10)
        (*(void (**)(PSHeliumNode *))(*(_QWORD *)v10 + 24))(v10);
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v27);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1B2FA28F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  std::__list_imp<unsigned int>::clear((_QWORD *)(v18 - 152));
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v18 - 120));
  _Unwind_Resume(a1);
}

void PSEmitter::getHeliumGraph3D(uint64_t a1, CMTime *a2, uint64_t a3, _QWORD *a4, char a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t i;
  _QWORD *v16;
  __int128 v17;
  uint64_t j;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  float64x2_t v24;
  double v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29[5];
  double v30;
  _BYTE v31[128];
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[7];
  char v35;
  char v36;
  BOOL v37;
  _BYTE v38[256];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CMTime v42;

  v42 = *a2;
  PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v32, (const OZRenderParams *)a2);
  LiClipSet::operator=((uint64_t)v34, a3 + 96);
  v34[6] = LiAgent::getHeliumRenderer((LiRenderParameters **)a3);
  v32[0] = a1;
  v35 = a5;
  v37 = OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v42, 0.0) != 0;
  v36 = 1;
  v14 = *(_QWORD *)(a3 + 160);
  LiAgent::getObjectToImageTransform((LiAgent *)a3, (uint64_t)v29);
  PCMatrix44Tmpl<double>::operator*(v14, v29, (uint64_t)v31);
  for (i = 0; i != 16; i += 4)
  {
    v16 = &v32[i];
    v17 = *(_OWORD *)&v31[i * 8 + 16];
    *((_OWORD *)v16 + 102) = *(_OWORD *)&v31[i * 8];
    *((_OWORD *)v16 + 103) = v17;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 33200), &v42, 0.0))
  {
    LiAgent::getFaceCameraTransform((LiAgent *)a3, (uint64_t)v29);
    for (j = 0; j != 8; j += 2)
    {
      v19 = &v38[j * 16];
      v20 = v29[j + 1];
      *v19 = v29[j];
      v19[1] = v20;
    }
    PSEmitter::getCameraPropertiesInLocalSpace(a1, (PC_Sp_counted_base **)a2, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  LiAgent::getObjectToFilmTransform((LiAgent *)a3, (uint64_t)v29);
  v24 = vnegq_f64((float64x2_t)v29[4]);
  v25 = -v30;
  PSEmitter::buildRenderList3D(a1, v21, a4, a6, &v26, 0, v24.f64);
  v22 = v26;
  v23 = v27;
  if (v26 != v27)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD *, _QWORD, _QWORD, uint64_t))(**((_QWORD **)v22 + 2) + 1280))(*((_QWORD *)v22 + 2), v32, *((_QWORD *)v22 + 1), *(_QWORD *)v22, a7);
      v22 += 4;
    }
    while (v22 != v23);
    v22 = v26;
  }
  if (v22)
  {
    v27 = v22;
    operator delete(v22);
  }
  LiClipSet::~LiClipSet((LiClipSet *)v34);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v33);
}

void sub_1B2FA2B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50)
{
  LiClipSet *v50;

  LiClipSet::~LiClipSet(v50);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a50);
  _Unwind_Resume(a1);
}

void PSEmitter::getHeliumGraph2D(uint64_t a1, const OZRenderParams *a2, uint64_t a3, _QWORD *a4, char a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t i;
  _QWORD *v16;
  __int128 v17;
  __int128 *v18;
  int v19;
  uint64_t (*v20)(uint64_t);
  int v21;
  void *v22;
  BOOL (*v23)(uint64_t, uint64_t);
  int haveROI;
  int v25;
  __int128 *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64x2_t v36;
  float64x2_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  int ValueAsInt;
  __n128 v50;
  _OWORD v51[2];
  __n128 v52;
  CMTime v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  __n128 v58;
  _BYTE v59[128];
  _QWORD v60[2];
  uint64_t v61;
  _QWORD v62[7];
  char v63;
  __int16 v64;

  PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v60, a2);
  LiClipSet::operator=((uint64_t)v62, a3 + 96);
  v62[6] = LiAgent::getHeliumRenderer((LiRenderParameters **)a3);
  v60[0] = a1;
  v63 = a5;
  v64 = 0;
  v14 = *(_QWORD *)(a3 + 160);
  LiAgent::getObjectToImageTransform((LiAgent *)a3, (uint64_t)&v57);
  PCMatrix44Tmpl<double>::operator*(v14, &v57, (uint64_t)v59);
  for (i = 0; i != 16; i += 4)
  {
    v16 = &v60[i];
    v17 = *(_OWORD *)&v59[i * 8 + 16];
    *((_OWORD *)v16 + 102) = *(_OWORD *)&v59[i * 8];
    *((_OWORD *)v16 + 103) = v17;
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  std::vector<simd_float4x4>::resize((uint64_t)&v54, a6);
  v18 = v54;
  v53 = *(CMTime *)a2;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 31480), &v53, 0.0);
  v19 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31632), MEMORY[0x1E0CA2E68], 0.0);
  v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576);
  if (v19)
  {
    v21 = v20(a1);
    v22 = PSEmitter::lessThanYoungestFirstWithRank;
    v23 = PSEmitter::lessThanOldestFirstWithRank;
  }
  else
  {
    v21 = v20(a1);
    v22 = PSEmitter::lessThanYoungestFirst;
    v23 = PSEmitter::lessThanOldestFirst;
  }
  if (v21)
    v22 = v23;
  v47 = v22;
  haveROI = LiAgent::haveROI((LiAgent *)a3);
  LiAgent::getROI((__n128 *)a3, &v52);
  v46 = a7;
  v48 = (_QWORD *)a4[1];
  if (v48 == a4)
  {
    v31 = v18;
  }
  else
  {
    v25 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v50 = _Q0;
    v31 = v18;
    do
    {
      v32 = *(uint64_t ***)(*a4 + 16);
      v34 = **v32;
      v33 = (*v32)[1];
      if (v34 != v33)
      {
        v35 = v32[5];
        v31 = v18;
        do
        {
          if (!haveROI)
            goto LABEL_16;
          v57 = 0uLL;
          v58 = v50;
          (*(void (**)(uint64_t *, _QWORD *, uint64_t, __int128 *))(*v35 + 1256))(v35, v60, v34, &v57);
          if (v58.n128_f64[0] < 0.0
            || v58.n128_f64[1] < 0.0
            || (v36.i64[0] = v52.n128_i32[0],
                v36.i64[1] = v52.n128_i32[1],
                v37 = vcvtq_f64_s64(v36),
                v36.i64[0] = v52.n128_i32[2],
                v36.i64[1] = v52.n128_i32[3],
                v51[0] = v37,
                v51[1] = vcvtq_f64_s64(v36),
                PCRect<double>::intersects((double *)&v57, (double *)v51)))
          {
LABEL_16:
            v38 = *(char **)(v34 + 232);
            if (v38)
            *((_QWORD *)v31 + 1) = v38;
            *((_QWORD *)v31 + 2) = v35;
            *((_DWORD *)v31 + 14) = v25;
            *(_QWORD *)v31 = v34;
            _Q0 = *(__n128 *)(v38 + 8);
            *((_QWORD *)v31 + 6) = *((_QWORD *)v38 + 3);
            v31[2] = (__int128)_Q0;
            v31 += 4;
          }
          v34 += 248;
        }
        while (v34 != v33);
      }
      if (!ValueAsInt)
      {
        v39 = 126 - 2 * __clz(((char *)v31 - (char *)v18) >> 6);
        *(_QWORD *)&v57 = v47;
        if (v31 == v18)
          v40 = 0;
        else
          v40 = v39;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(v18, v31, (uint64_t (**)(__int128 *, __int128 *))&v57, v40, 1, _Q0);
      }
      ++v25;
      a4 = (_QWORD *)*a4;
      v18 = v31;
    }
    while (a4 != v48);
  }
  std::vector<simd_float4x4>::resize((uint64_t)&v54, (int)(((char *)v31 - (char *)v54) >> 6));
  if (ValueAsInt)
  {
    v42 = 126 - 2 * __clz(((char *)v55 - (char *)v54) >> 6);
    *(_QWORD *)&v57 = v47;
    if (v55 == v54)
      v43 = 0;
    else
      v43 = v42;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(v54, v55, (uint64_t (**)(__int128 *, __int128 *))&v57, v43, 1, v41);
  }
  v44 = v54;
  v45 = v55;
  if (v54 != v55)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD *, _QWORD, _QWORD, uint64_t))(**((_QWORD **)v44 + 2) + 1280))(*((_QWORD *)v44 + 2), v60, *((_QWORD *)v44 + 1), *(_QWORD *)v44, v46);
      v44 += 4;
    }
    while (v44 != v45);
    v44 = v54;
  }
  if (v44)
  {
    v55 = v44;
    operator delete(v44);
  }
  LiClipSet::~LiClipSet((LiClipSet *)v62);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v61);
}

void sub_1B2FA2F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, LiClipSet *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (__p)
    operator delete(__p);
  LiClipSet::~LiClipSet(a11);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a63);
  _Unwind_Resume(a1);
}

void PSEmitter::buildRenderList3D(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, __int128 **a5, char a6, double *a7)
{
  _QWORD *v9;
  int v10;
  __int128 *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  char *v19;
  __int128 *v20;
  __int128 v21;
  int v22;
  __n128 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  int ValueAsInt;
  int v26;
  BOOL (*v27)(uint64_t, uint64_t);
  __int128 *v28;
  __int128 *v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t (*v36)(__int128 *, __int128 *);

  std::vector<simd_float4x4>::resize((uint64_t)a5, a4);
  v9 = (_QWORD *)a3[1];
  if (v9 != a3)
  {
    v10 = 0;
    v11 = *a5;
    do
    {
      v12 = *(uint64_t ***)(*a3 + 16);
      v14 = **v12;
      v13 = (*v12)[1];
      if (v14 == v13)
      {
        a3 = (_QWORD *)*a3;
      }
      else
      {
        v15 = v12[5];
        do
        {
          v16 = a7[1];
          v17 = *(double *)(v14 + 184);
          v18 = *a7 * *(double *)(v14 + 176);
          *(_QWORD *)v11 = v14;
          *((_QWORD *)v11 + 2) = v15;
          *((double *)v11 + 3) = v18 + v16 * v17 + a7[2] * *(double *)(v14 + 192);
          *((_DWORD *)v11 + 14) = v10;
          v19 = *(char **)(v14 + 232);
          if (v19)
          v20 = v11 + 4;
          *((_QWORD *)v11 + 1) = v19;
          v21 = *(_OWORD *)(v19 + 8);
          *((_QWORD *)v11 + 6) = *((_QWORD *)v19 + 3);
          v11[2] = v21;
          v14 += 248;
          v11 += 4;
        }
        while (v14 != v13);
        a3 = (_QWORD *)*a3;
        v11 = v20;
      }
      ++v10;
    }
    while (a3 != v9);
  }
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 33352), MEMORY[0x1E0CA2E68], 0.0) || (a6 & 1) != 0)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 31632), MEMORY[0x1E0CA2E68], 0.0);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
    v24 = (uint64_t (*)(__int128 *, __int128 *))PSEmitter::lessThanYoungestFirst;
    if (v26)
      v24 = (uint64_t (*)(__int128 *, __int128 *))PSEmitter::lessThanOldestFirst;
    v27 = PSEmitter::lessThanOldestFirstWithRank;
    if (!v26)
      v27 = PSEmitter::lessThanYoungestFirstWithRank;
    if (ValueAsInt)
      v24 = (uint64_t (*)(__int128 *, __int128 *))v27;
  }
  else
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
    v24 = (uint64_t (*)(__int128 *, __int128 *))PSEmitter::lessThanZDepthYoungestFirst;
    if (v22)
      v24 = (uint64_t (*)(__int128 *, __int128 *))PSEmitter::lessThanZDepthOldestFirst;
  }
  v28 = *a5;
  v29 = a5[1];
  v30 = 126 - 2 * __clz(((char *)v29 - (char *)*a5) >> 6);
  v31 = v29 == *a5;
  v36 = v24;
  if (v31)
    v32 = 0;
  else
    v32 = v30;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(v28, v29, &v36, v32, 1, v23);
}

uint64_t PSEmitter::shouldPrecompose(PSEmitter *this, const CMTime *a2)
{
  char *v4;
  double v5;
  char *v6;

  v4 = (char *)this + 6880;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6880), a2, 0.0);
  if (vabdd_f64(1.0, v5) >= 0.0000001)
    return 1;
  if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v4 + 496))(v4, 1) & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 288))(this) & 1) != 0)
    return 1;
  v6 = (char *)this + 200;
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 416))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *))(*(_QWORD *)v6 + 1864))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *, const CMTime *))(*(_QWORD *)v6 + 1592))((char *)this + 200, a2) & 1) != 0
    || ((*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 272))(this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 280))(this);
  }
}

uint64_t PSEmitter::shouldDoLocalParticleRender(PSEmitter *this)
{
  char *v2;
  int ValueAsInt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  PSParticleType *v9;

  v2 = (char *)this + 33708;
  if (!*((_BYTE *)this + 33712))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0);
    *(_DWORD *)v2 = ValueAsInt;
    v2[4] = 1;
    if (!ValueAsInt)
      goto LABEL_6;
    return 1;
  }
  if (*(_DWORD *)v2)
    return 1;
LABEL_6:
  v5 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v6 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v5 != v6)
  {
    v7 = v6;
    while (1)
    {
      v8 = *(const void **)(v5 + 16);
      v9 = v8
      if ((*(unsigned int (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)v9 + 2) + 24))((_QWORD *)v9 + 2, 0, 1)&& PSParticleType::shouldDoLocalParticleRender(v9))
      {
        break;
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v7)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t PSEmitter::setLithiumTransform(PSEmitter *this, LiSceneObject *a2, OZRenderState *a3)
{
  return OZElement::setLithiumTransform((OZElement *)((char *)this + 200), a2, a3);
}

uint64_t PSEmitter::doesTransformFromLocalToScreenSpace(PSEmitter *this, CMTime *a2)
{
  int v4;
  CMTime v6;

  if (((*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) & 1) == 0)
    return OZElement::doesTransformFromLocalToScreenSpace((uint64_t)this + 200);
  v4 = (*(uint64_t (**)(PSEmitter *, CMTime *))(*(_QWORD *)this + 136))(this, a2);
  v6 = *a2;
  if (!PSEmitter::shouldPrecompose(this, &v6) || v4)
    return PSEmitter::shouldDoLocalParticleRender(this);
  else
    return 1;
}

uint64_t `non-virtual thunk to'PSEmitter::doesTransformFromLocalToScreenSpace(PSEmitter *this, CMTime *a2)
{
  return PSEmitter::doesTransformFromLocalToScreenSpace((PSEmitter *)((char *)this - 200), a2);
}

void PSEmitter::makeRenderImageSource(PSEmitter *this@<X0>, OZChannelBase *a2@<X1>, const OZRenderGraphState *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  int shouldDoLocalParticleRender;
  int v11;
  PSEmitterRender *v12;
  LiGroup *v13;
  char *v14;
  LiGraphBuilder *v15;
  LiGroup *v16;
  PCSharedCount *p_var1;
  PSEmitterRender *v18;
  LiGeode *v19;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v21;
  PCSharedCount v22;
  PCSharedCount v23;
  PCSharedCount v24;
  OZRenderState v25;
  PCSharedCount v26;
  PCSharedCount v27[5];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  LiGroup *v34;
  PCSharedCount v35[7];
  _QWORD v36[20];
  _QWORD v37[10];
  PCSharedCount v38[26];
  LiGraphBuilder *v39;
  PCSharedCount v40;
  PCSharedCount v41[2];

  shouldDoLocalParticleRender = PSEmitter::shouldDoLocalParticleRender(this);
  v11 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
  if (a4 || !(v11 | shouldDoLocalParticleRender))
  {
    v13 = (LiGroup *)operator new();
    LiGroup::LiGroup(v13);
    v40.var0 = (PC_Sp_counted_base *)v13;
    PCSharedCount::PCSharedCount(v41, (LiGroup *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
    if (!v13)
      throw_PCNullPointerException(1);
    v14 = (char *)this + 200;
    *((_DWORD *)v13 + 130) = *((_DWORD *)this + 70);
    v15 = (LiGraphBuilder *)*((_QWORD *)a3 + 37);
    v39 = 0;
    if (!v15)
    {
      if (a4)
      {
        v16 = (LiGroup *)operator new();
        LiGroup::LiGroup(v16);
        v34 = v16;
        PCSharedCount::PCSharedCount(v35, (LiGroup *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
        OZChannelBase::setRangeName(a2, (const PCString *)&v25);
        v15 = (LiGraphBuilder *)operator new();
        LiGraphBuilder::LiGraphBuilder(v15, &v34, &v25);
        PCSharedCount::~PCSharedCount(v35);
      }
      else
      {
        v15 = (LiGraphBuilder *)(*(uint64_t (**)(char *, OZChannelBase *))(*(_QWORD *)v14 + 1984))((char *)this + 200, a2);
      }
      v39 = v15;
    }
    LiGraphBuilder::LiGraphBuilder((LiGraphBuilder *)v38, v15);
    LiGraphBuilder::addGroupAndMakeCurrent(v38, &v40);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v34, a3);
    v37[9] = v38;
    if ((*(unsigned int (**)(PSEmitter *, OZChannelBase *))(*(_QWORD *)this + 136))(this, a2)
      || (a4 & 1) != 0)
    {
      v25.var7.var0[1][2] = 1.0;
      v25.var7.var0[0][1] = 1.0;
      v25.var3 = 1.0;
      v25.var0.var0 = 0x3FF0000000000000;
      memset(&v25.var0.var1, 0, 32);
      memset(&v25.var4, 0, 32);
      memset(&v25.var7.var0[0][2], 0, 32);
      if (!v40.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, OZRenderState *))(*(_QWORD *)v40.var0 + 16))(v40.var0, &v25);
    }
    else
    {
      v33 = 0x3FF0000000000000;
      v30 = 0x3FF0000000000000;
      v27[4].var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
      v26.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
      memset(v27, 0, 32);
      v28 = 0u;
      v29 = 0u;
      v31 = 0u;
      v32 = 0u;
      OZRenderState::OZRenderState(&v25, (const OZRenderState *)a2);
      v25.var4 = 1;
      (*(void (**)(char *, PCSharedCount *, OZRenderState *))(*(_QWORD *)v14 + 1256))((char *)this + 200, &v26, &v25);
      if (!v40.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)v40.var0 + 16))(v40.var0, &v26);
    }
    if ((PSEmitter::shouldDoLocalParticleRender(this) | v11) == 1)
    {
      v25.var0.var0 = 0;
      p_var1 = (PCSharedCount *)&v25.var0.var1;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v25.var0.var1);
      v18 = (PSEmitterRender *)operator new();
      PSEmitterRender::PSEmitterRender(v18, this, (const OZRenderParams *)a2);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v25, v18);
      v19 = (LiGeode *)operator new();
      LiGeode::LiGeode(v19, (LiImageSource *)v25.var0.var0);
      v26.var0 = (PC_Sp_counted_base *)v19;
      PCSharedCount::PCSharedCount(v27, (LiGeode *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
      if (!v26.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v26.var0 + 130) = *((_DWORD *)this + 70);
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v23, &v26);
      if (!v40.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v40.var0 + 152))(v40.var0, v23.var0);
      var0 = v26.var0;
      if (!v26.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)var0 + 132) = LiGraphBuilder::getAndIncrementCompositeOrder((LiGraphBuilder *)v38);
      PCSharedCount::~PCSharedCount(&v24);
      PCSharedCount::~PCSharedCount(v27);
    }
    else
    {
      v21 = v40.var0;
      p_var1 = &v22;
      PCSharedCount::PCSharedCount(&v22, v41);
      PSEmitter::buildRealRenderGraph((uint64_t)this, &v21, (OZRenderParams *)a2, v38, (OZRenderGraphState *)&v34);
    }
    PCSharedCount::~PCSharedCount(p_var1);
    LiGraphBuilder::render(v38, (PCSharedCount *)&v25);
    if (a4)
    {
      (*(void (**)(PCSharedCount *__return_ptr, char *, OZChannelBase *, uint64_t))(*(_QWORD *)v14 + 2088))(&v26, v14, a2, 1);
      if (!v25.var0.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(int64_t, PC_Sp_counted_base *))(*(_QWORD *)v25.var0.var0 + 184))(v25.var0.var0, v26.var0);
      PCSharedCount::~PCSharedCount(v27);
    }
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, (const PCSharedCount *)&v25);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v25.var0.var1);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v37);
    std::__list_imp<unsigned int>::clear(v36);
    LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v38);
    if (v39)
    {
      LiGraphBuilder::~LiGraphBuilder(v39);
      MEMORY[0x1B5E29170]();
    }
    PCSharedCount::~PCSharedCount(v41);
  }
  else
  {
    v12 = (PSEmitterRender *)operator new();
    PSEmitterRender::PSEmitterRender(v12, this, (const OZRenderParams *)a2);
    a5->var0 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(a5 + 1, (PSEmitterRender *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  }
}

void sub_1B2FA39EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  PCSharedCount *v71;
  PCSharedCount *v72;
  PCSharedCount *v73;
  uint64_t v74;

  PCSharedCount::~PCSharedCount(v73);
  PCSharedCount::~PCSharedCount(v72);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x290]);
  std::__list_imp<unsigned int>::clear(&a71);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x2E0]);
  std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100]((LiGraphBuilder **)(v74 - 112), 0);
  PCSharedCount::~PCSharedCount(v71);
  _Unwind_Resume(a1);
}

_QWORD *PSEmitter::buildRealRenderGraph(uint64_t a1, _QWORD *a2, OZRenderParams *a3, PCSharedCount *a4, OZRenderGraphState *a5)
{
  _BOOL4 hasParameter;
  OZScene **v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t *j;
  uint64_t *v14;
  double *v15;
  double v17[3];
  void *__p;
  uint64_t *v19;
  uint64_t v20;
  double v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  CMTime v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  char v30[8];
  _BYTE v31[64];
  uint64_t v32[20];
  uint64_t v33;

  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v31, a5);
  (*(void (**)(uint64_t, OZRenderParams *, _BYTE *))(*(_QWORD *)(a1 + 200) + 2064))(a1 + 200, a3, v31);
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 33352), MEMORY[0x1E0CA2E68], 0.0))
  {
    if (!*a2)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 192))(*a2, 1);
  }
  hasParameter = OZRenderParams::hasParameter(a3, (const char *)kPSIsPreviewRender);
  v10 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v30, v10);
  v29 = 0;
  v26 = (uint64_t)&v26;
  v27 = &v26;
  v28 = 0;
  v25 = *(CMTime *)a3;
  PSEmitter::getSimList(a1, &v25, hasParameter, &v26, &v29);
  if (v28)
  {
    v24[0] = &v26;
    v24[1] = a3;
    for (i = v27; i != &v26; i = (uint64_t *)i[1])
      (*(void (**)(_QWORD, OZRenderParams *))(**(_QWORD **)(i[2] + 40) + 1288))(*(_QWORD *)(i[2] + 40), a3);
    PSEmitter::RenderParams::RenderParams((PSEmitter::RenderParams *)v21, a3);
    PSEmitter::setupEmitterParams((PSEmitter *)a1, a3, (PSEmitter::RenderParams *)v21);
    __p = 0;
    v19 = 0;
    v20 = 0;
    v17[0] = 0.0;
    v17[1] = 0.0;
    v17[2] = 1.0;
    PSEmitter::buildRenderList3D(a1, v12, &v26, v29, (__int128 **)&__p, 1, v17);
    v14 = (uint64_t *)__p;
    for (j = v19;
          j != v14;
          PSParticleType::buildParticleRenderGraph(j[2], (uint64_t)a2, v21, j[1], v15, a4, (const OZRenderGraphState *)v31))
    {
      v15 = (double *)*(j - 8);
      j -= 8;
    }
    if (__p)
    {
      v19 = (uint64_t *)__p;
      operator delete(__p);
    }
    LiClipSet::~LiClipSet((LiClipSet *)&v23);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v22);
    PSEmitter::PostRenderFinalizer::~PostRenderFinalizer((PSEmitter::PostRenderFinalizer *)v24);
  }
  std::__list_imp<unsigned int>::clear(&v26);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v30);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v33);
  return std::__list_imp<unsigned int>::clear(v32);
}

void sub_1B2FA3DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  if (__p)
    operator delete(__p);
  LiClipSet::~LiClipSet((LiClipSet *)&STACK[0x5D8]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  PSEmitter::PostRenderFinalizer::~PostRenderFinalizer((PSEmitter::PostRenderFinalizer *)&STACK[0x760]);
  std::__list_imp<unsigned int>::clear(&STACK[0x788]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x7A8]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x890]);
  std::__list_imp<unsigned int>::clear(&STACK[0x7F0]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSEmitter::makeRenderImageSource(PSEmitter *this@<X0>, OZChannelBase *a2@<X1>, const OZRenderGraphState *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  PSEmitter::makeRenderImageSource((PSEmitter *)((char *)this - 200), a2, a3, a4, a5);
}

{
  PSEmitter::makeRenderImageSource((PSEmitter *)((char *)this - 6728), a2, a3, a4, a5);
}

uint64_t PSEmitter::getPrecompCameraType(PSEmitter *this, const OZRenderState *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'PSEmitter::getPrecompCameraType(PSEmitter *this, const OZRenderState *a2)
{
  return 0;
}

uint64_t PSEmitter::acceptsShapeMasks(PSEmitter *this)
{
  return (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
}

uint64_t `non-virtual thunk to'PSEmitter::acceptsShapeMasks(PSEmitter *this)
{
  return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200) ^ 1;
}

uint64_t PSEmitter::restrictImageMaskToStencil(PSEmitter *this)
{
  return (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
}

uint64_t `non-virtual thunk to'PSEmitter::restrictImageMaskToStencil(PSEmitter *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200);
}

BOOL PSEmitter::is3D(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL `non-virtual thunk to'PSEmitter::is3D(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 32592), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

void PSEmitter::buildRenderGraph(PSEmitter *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZElement *v8;
  OZElement *v9;
  uint64_t v10;
  int shouldDoLocalParticleRender;
  LiGroup *v12;
  CMTimeValue value;
  PCSharedCount v14;
  CMTime v15;
  _QWORD v16[3];
  char v17;
  uint64_t v18;

  if (!(*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this))
  {
    v10 = *((_QWORD *)this + 25);
    v9 = (OZElement *)((char *)this + 200);
    v8 = v9;
    if (!(*(unsigned int (**)(OZElement *))(v10 + 1440))(v9))
    {
      OZElement::buildRenderGraph(v9, a2, a3, a4);
      return;
    }
    goto LABEL_8;
  }
  v15 = *a2;
  if ((PSEmitter::shouldPrecompose(this, &v15) & 1) != 0)
  {
    v8 = (OZElement *)((char *)this + 200);
    if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 1440))((char *)this + 200) & 1) == 0)
      goto LABEL_10;
LABEL_8:
    (*(void (**)(OZElement *, CMTime *, LiGraphBuilder *))(*(_QWORD *)v8 + 1976))(v8, a2, a3);
    return;
  }
  shouldDoLocalParticleRender = PSEmitter::shouldDoLocalParticleRender(this);
  v8 = (OZElement *)((char *)this + 200);
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 1440))((char *)this + 200) & 1) != 0)
    goto LABEL_8;
  if (shouldDoLocalParticleRender)
  {
LABEL_10:
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v15, a4);
    if (PSEmitter::shouldDoLocalParticleRender(this))
      v17 = 0;
    LiGraphBuilder::partitionWorld((uint64_t)a3);
    OZElement::buildRenderGraph(v8, a2, a3, (const OZRenderGraphState *)&v15);
    LiGraphBuilder::partitionWorld((uint64_t)a3);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v18);
    std::__list_imp<unsigned int>::clear(v16);
    return;
  }
  v12 = (LiGroup *)operator new();
  LiGroup::LiGroup(v12);
  v15.value = (CMTimeValue)v12;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v15.timescale, (LiGroup *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  if (!v15.value)
    throw_PCNullPointerException(1);
  *(_DWORD *)(v15.value + 520) = *((_DWORD *)this + 70);
  (*(void (**)(PSEmitter *))(*(_QWORD *)this + 104))(this);
  LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)a3, (const PCSharedCount *)&v15);
  value = v15.value;
  PCSharedCount::PCSharedCount(&v14, (const PCSharedCount *)&v15.timescale);
  PSEmitter::buildRealRenderGraph((uint64_t)this, &value, (OZRenderParams *)a2, (PCSharedCount *)a3, a4);
  PCSharedCount::~PCSharedCount(&v14);
  LiGraphBuilder::endInsertingIntoGroup(a3);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v15.timescale);
}

void sub_1B2FA4150(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSEmitter::buildRenderGraph(PSEmitter *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  PSEmitter::buildRenderGraph((PSEmitter *)((char *)this - 200), a2, a3, a4);
}

{
  PSEmitter::buildRenderGraph((PSEmitter *)((char *)this - 6728), a2, a3, a4);
}

uint64_t PSEmitter::setGeodeProperties3D(PSEmitter *this, CMTime *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  uint64_t result;
  int v9;
  BOOL v10;
  BOOL v11;
  CMTime v12;

  OZElement::setGeodeProperties3D((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  result = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
  v9 = result;
  if (*((_BYTE *)a3 + 258))
    v10 = 1;
  else
    v10 = (_DWORD)result == 0;
  if (!v10)
  {
    result = PSEmitter::shouldDoLocalParticleRender(this);
    if ((result & 1) == 0)
    {
      v12 = *a2;
      result = PSEmitter::shouldPrecompose(this, &v12);
      if ((_DWORD)result)
        *((_BYTE *)a4 + 554) = 0;
    }
  }
  if (v9 && (result = PSEmitter::shouldDoLocalParticleRender(this), (_DWORD)result))
  {
    v12 = *a2;
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 33200), &v12, 0.0);
    v11 = (_DWORD)result != 0;
  }
  else
  {
    v11 = 0;
  }
  *((_BYTE *)a4 + 556) = v11;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::setGeodeProperties3D(PSEmitter *this, CMTime *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  return PSEmitter::setGeodeProperties3D((PSEmitter *)((char *)this - 200), a2, a3, a4);
}

uint64_t PSEmitter::hitCheck(uint64_t a1, float *a2, __int128 *a3, uint64_t a4, uint64_t a5, char a6)
{
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 v30;
  uint64_t v31;

  if ((a6 & 4) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 680))(a1 + 200) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v30 = *a3;
    v31 = *((_QWORD *)a3 + 2);
    if (!(*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 216) + 104))(a1 + 216, &v30, 1, 1, 1))return 0;
  }
  v12 = *a2;
  v28 = a2[1];
  v29 = v12;
  v27 = 0;
  v14 = *(_QWORD *)(a1 + 200);
  v13 = a1 + 200;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, uint64_t *, __int128 *, _QWORD))(v14 + 1368))(v13, a4, &v29, &v28, &v27, a3, 0);
  result = 0;
  if (v15)
  {
    v24 = 0.0;
    v25 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v26 = _Q0;
    (*(void (**)(uint64_t, double *, __int128 *))(*(_QWORD *)v13 + 1488))(v13, &v24, a3);
    result = 0;
    if (*(double *)&v26 >= 0.0)
    {
      result = 0;
      if (*((double *)&v26 + 1) >= 0.0 && v24 <= v29 && *(double *)&v26 + v24 >= v29)
      {
        result = 0;
        v22 = v28;
        if (v25 <= v28 && *((double *)&v26 + 1) + v25 >= v28)
        {
          v23 = v27;
          *(double *)a5 = v29;
          *(double *)(a5 + 8) = v22;
          *(_QWORD *)(a5 + 16) = v23;
          return v13;
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::hitCheck(uint64_t a1, float *a2, __int128 *a3, uint64_t a4, uint64_t a5, char a6)
{
  return PSEmitter::hitCheck(a1 - 200, a2, a3, a4, a5, a6);
}

BOOL PSEmitter::hasDescendants(PSEmitter *this)
{
  return *((_QWORD *)this + 4212) != 0;
}

BOOL `non-virtual thunk to'PSEmitter::hasDescendants(PSEmitter *this)
{
  return *((_QWORD *)this + 4187) != 0;
}

uint64_t PSEmitter::numberOfDescendants(PSEmitter *this)
{
  return *((unsigned int *)this + 8424);
}

uint64_t `non-virtual thunk to'PSEmitter::numberOfDescendants(PSEmitter *this)
{
  return *((unsigned int *)this + 8374);
}

uint64_t PSEmitter::getDescendantAtIndex(PSEmitter *this, int a2)
{
  char *v2;
  char *v3;
  _BOOL4 v4;
  int v6;
  BOOL v8;
  uint64_t v9;

  v2 = (char *)this + 33680;
  v3 = (char *)*((_QWORD *)this + 4211);
  v4 = v3 != (char *)this + 33680;
  if (v3 != (char *)this + 33680 && a2 != 0)
  {
    v6 = a2 - 1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 1);
      v8 = v6-- != 0;
      v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4)
    return 0;
  v9 = *((_QWORD *)v3 + 2);
  if (v9)
    return v9 + 16;
  else
    return 0;
}

uint64_t `non-virtual thunk to'PSEmitter::getDescendantAtIndex(PSEmitter *this, int a2)
{
  char *v2;
  char *v3;
  _BOOL4 v4;
  int v5;
  BOOL v7;
  uint64_t v8;

  v2 = (char *)this + 33480;
  v3 = (char *)*((_QWORD *)this + 4186);
  v4 = v3 != (char *)this + 33480;
  if (a2 && v3 != (char *)this + 33480)
  {
    v5 = a2 - 1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 1);
      v7 = v5-- != 0;
      v4 = v3 != v2;
    }
    while (v3 != v2 && v7);
  }
  if (!v4)
    return 0;
  v8 = *((_QWORD *)v3 + 2);
  if (v8)
    return v8 + 16;
  else
    return 0;
}

_QWORD *PSEmitter::addDescendantAfter(_QWORD *this, OZSceneNode *lpsrc, OZSceneNode *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const OZChannelBase *v14;
  OZChannelBase *v15;
  OZChannelBase *v16;
  OZScene *v17;

  if (lpsrc)
  {
    v5 = this;
    if (this)
    {
      v6 = v5 + 4211;
      PSParticleType::setEmitter(this, (PSEmitter *)v5);
      if (a3)
      {
        v7 = v5 + 4210;
        for (i = (_QWORD *)*v6; i != v7; i = (_QWORD *)i[1])
        {
          if ((OZSceneNode *)i[2] == a3)
          {
            if (i == v7)
              break;
            v9 = (uint64_t *)i[1];
            v10 = operator new(0x18uLL);
            v10[2] = lpsrc;
            v11 = *v9;
            *(_QWORD *)(v11 + 8) = v10;
            *v10 = v11;
            *v9 = (uint64_t)v10;
            v10[1] = v9;
            goto LABEL_12;
          }
        }
      }
      v12 = operator new(0x18uLL);
      v13 = (_QWORD *)*v6;
      *v12 = v5 + 4210;
      v12[1] = v13;
      v12[2] = lpsrc;
      *v13 = v12;
      *v6 = v12;
LABEL_12:
      ++v5[4212];
      if (a3)
      {
        v14 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
        v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 640))(lpsrc);
        OZChannelFolder::insertDescendantAfter((OZChannelFolder *)(v5 + 2372), v14, v15);
      }
      else
      {
        v16 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 640))(lpsrc);
        OZChannelFolder::push_front((OZChannelFolder *)(v5 + 2372), v16);
      }
      (*(void (**)(OZSceneNode *, _QWORD *))(*(_QWORD *)lpsrc + 256))(lpsrc, v5 + 25);
      v17 = (OZScene *)v5[146];
      if (v17)
      {
        OZScene::registerNode(v17, lpsrc);
        OZScene::addAllDependencies(v5[146], lpsrc);
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 424))(v5);
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'PSEmitter::addDescendantAfter(PSEmitter *this, OZSceneNode *a2, OZSceneNode *a3)
{
  return PSEmitter::addDescendantAfter((_QWORD *)this - 25, a2, a3);
}

_QWORD *PSEmitter::addDescendantBefore(_QWORD *this, OZSceneNode *lpsrc, OZSceneNode *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  const OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  OZScene *v13;

  if (lpsrc)
  {
    v5 = this;
    if (this)
    {
      v6 = v5 + 4210;
      PSParticleType::setEmitter(this, (PSEmitter *)v5);
      v7 = v5 + 4210;
      if (a3)
      {
        v7 = v5 + 4210;
        if ((uint64_t *)v5[4211] != v6)
        {
          v7 = (uint64_t *)v5[4211];
          while ((OZSceneNode *)v7[2] != a3)
          {
            v7 = (uint64_t *)v7[1];
            if (v7 == v6)
            {
              v7 = v5 + 4210;
              break;
            }
          }
        }
      }
      v8 = operator new(0x18uLL);
      v8[2] = lpsrc;
      v9 = *v7;
      *(_QWORD *)(v9 + 8) = v8;
      *v8 = v9;
      *v7 = (uint64_t)v8;
      v8[1] = v7;
      ++v5[4212];
      if (a3)
      {
        v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
        v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 640))(lpsrc);
        OZChannelFolder::insertDescendantBefore((OZChannelFolder *)(v5 + 2372), v10, v11);
      }
      else
      {
        v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 640))(lpsrc);
        OZChannelFolder::push_back((OZChannelFolder *)(v5 + 2372), v12);
      }
      (*(void (**)(OZSceneNode *, _QWORD *))(*(_QWORD *)lpsrc + 256))(lpsrc, v5 + 25);
      v13 = (OZScene *)v5[146];
      if (v13)
      {
        OZScene::registerNode(v13, lpsrc);
        OZScene::addAllDependencies(v5[146], lpsrc);
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 424))(v5);
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'PSEmitter::addDescendantBefore(PSEmitter *this, OZSceneNode *a2, OZSceneNode *a3)
{
  return PSEmitter::addDescendantBefore((_QWORD *)this - 25, a2, a3);
}

OZChannelFolder *PSEmitter::removeDescendant(PSEmitter *this, OZSceneNode *a2)
{
  char *v4;
  OZSceneNode **v5;
  OZSceneNode **i;
  OZSceneNode *v7;
  char *v8;
  OZScene *v9;
  OZScene *v10;
  OZChannelBase *v11;

  v4 = (char *)this + 33688;
  v5 = (OZSceneNode **)((char *)this + 33680);
  for (i = (OZSceneNode **)*((_QWORD *)this + 4211); i != v5; i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v5)
      {
        (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)a2 + 256))(a2, 0);
        v7 = *i;
        *((_QWORD *)v7 + 1) = i[1];
        *(_QWORD *)i[1] = v7;
        --*((_QWORD *)v4 + 1);
        operator delete(i);
        (*(void (**)(PSEmitter *))(*(_QWORD *)this + 424))(this);
        v8 = (char *)this + 200;
        if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
        {
          v9 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v8 + 272))((char *)this + 200);
          OZScene::unregisterNode(v9, a2);
          v10 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v8 + 272))((char *)this + 200);
          OZScene::removeAllDependencies(v10, a2);
        }
      }
      break;
    }
  }
  v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18976), v11);
}

OZChannelFolder *`non-virtual thunk to'PSEmitter::removeDescendant(PSEmitter *this, OZSceneNode *a2)
{
  return PSEmitter::removeDescendant((PSEmitter *)((char *)this - 200), a2);
}

uint64_t PSEmitter::begin_descendants(PSEmitter *this)
{
  return *((_QWORD *)this + 4211);
}

uint64_t `non-virtual thunk to'PSEmitter::begin_descendants(PSEmitter *this)
{
  return *((_QWORD *)this + 4186);
}

uint64_t PSEmitter::end_descendants(PSEmitter *this)
{
  return (uint64_t)this + 33680;
}

uint64_t `non-virtual thunk to'PSEmitter::end_descendants(PSEmitter *this)
{
  return (uint64_t)this + 33480;
}

uint64_t PSEmitter::isFourCornerPinned(PSEmitter *this)
{
  uint64_t result;

  result = OZElement::isFourCornerPinned((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::isFourCornerPinned(OZElement *this)
{
  uint64_t result;

  result = OZElement::isFourCornerPinned(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200) ^ 1;
  return result;
}

uint64_t PSEmitter::isCropped(PSEmitter *this)
{
  uint64_t result;

  result = OZElement::isCropped((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::isCropped(OZElement *this)
{
  uint64_t result;

  result = OZElement::isCropped(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200) ^ 1;
  return result;
}

uint64_t PSEmitter::isDropShadowEnabled(PSEmitter *this)
{
  uint64_t result;

  result = OZElement::isDropShadowEnabled((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::isDropShadowEnabled(OZElement *this)
{
  uint64_t result;

  result = OZElement::isDropShadowEnabled(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200) ^ 1;
  return result;
}

uint64_t PSEmitter::canReflect(PSEmitter *this)
{
  uint64_t result;

  result = OZElement::canReflect((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
    return (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::canReflect(OZElement *this)
{
  uint64_t result;

  result = OZElement::canReflect(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200) ^ 1;
  return result;
}

uint64_t PSEmitter::writeBody(PSEmitter *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZEmitterScope);
    v10 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
    v11 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
    if (v10 != v11)
    {
      v12 = v11;
      do
      {
        v13 = *(_QWORD *)(v10 + 16);
        if (!OZChannelBase::testFlag((OZChannelBase *)(v13 + 56), 8))
        {
          v15 = *(_QWORD *)(v13 + 48);
          v14 = v13 + 48;
          (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(v15 + 16))(v14, a2, 0);
          (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a2, 0, 1, a5);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        }
        v10 = *(_QWORD *)(v10 + 8);
      }
      while (v10 != v12);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  v16 = *((_DWORD *)this + 70);
  if (v16 != OZChannel::getValueAsInt((OZChannel *)((char *)this + 31784), MEMORY[0x1E0CA2E68], 0.0))
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31784), 0x100000000, 1);
  return OZElement::writeBody((OZElement *)((char *)this + 200), a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'PSEmitter::writeBody(PSEmitter *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return PSEmitter::writeBody((PSEmitter *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return PSEmitter::writeBody((PSEmitter *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t PSEmitter::parseBegin(PSEmitter *this, PCSerializerReadStream *a2)
{
  const CMTime *v4;

  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)((char *)this + 31936), MEMORY[0x1E0CA2E68], 0.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 19896), v4, 3.0, 0);
  }
  OZElement::parseBegin((OZElement *)((char *)this + 200), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZEmitterScope);
  return 1;
}

uint64_t `non-virtual thunk to'PSEmitter::parseBegin(PSEmitter *this, PCSerializerReadStream *a2)
{
  PSEmitter::parseBegin((PSEmitter *)((char *)this - 200), a2);
  return 1;
}

{
  PSEmitter::parseBegin((PSEmitter *)((char *)this - 248), a2);
  return 1;
}

uint64_t PSEmitter::parseEnd(PSEmitter *this, PCSerializerReadStream *a2)
{
  int ValueAsInt;
  const CMTime *v5;
  OZChannel *v6;
  double v7;
  const CMTime *v8;
  OZChannel *v9;
  const CMTime *v10;

  OZElement::parseEnd((OZElement *)((char *)this + 200), a2);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 27824), 4.71238898);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), MEMORY[0x1E0CA2E68], 0.0);
  switch(ValueAsInt)
  {
    case 2:
      v9 = (OZChannel *)((char *)this + 19896);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) != 3)
        goto LABEL_11;
      v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v7 = 0.0;
      break;
    case 5:
      v9 = (OZChannel *)((char *)this + 19896);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) != 3)
        goto LABEL_11;
      v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v7 = 2.0;
      break;
    case 3:
      v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue((OZChannel *)((char *)this + 19232), MEMORY[0x1E0CA2E68], 2.0, 0);
      v6 = (OZChannel *)((char *)this + 19896);
      v7 = 1.0;
      v8 = v5;
      goto LABEL_10;
    default:
      goto LABEL_11;
  }
  v6 = v9;
LABEL_10:
  OZChannel::setValue(v6, v8, v7, 0);
LABEL_11:
  (*(void (**)(PSEmitter *, _QWORD))(*(_QWORD *)this + 456))(this, 0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) == 3)
    OZChannelBase::reset((OZChannelBase *)((char *)this + 19896), 0);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 27048), MEMORY[0x1E0CA2E68], 0.0))
  {
    v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)((char *)this + 27048), MEMORY[0x1E0CA2E68], 1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 27200), v10, 0.0, 0);
  }
  if (*((_DWORD *)a2 + 26) <= 2u)
    OZChannel::setValue((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0, 0);
  (*(void (**)(PSEmitter *, uint64_t))(*(_QWORD *)this + 448))(this, 1);
  return 1;
}

uint64_t `non-virtual thunk to'PSEmitter::parseEnd(PSEmitter *this, PCSerializerReadStream *a2)
{
  PSEmitter::parseEnd((PSEmitter *)((char *)this - 200), a2);
  return 1;
}

{
  PSEmitter::parseEnd((PSEmitter *)((char *)this - 248), a2);
  return 1;
}

uint64_t PSEmitter::parseElement(PSEmitter *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  const void *v6;
  void *v7;
  char *v8;
  char *v9;
  OZSceneNode *v10;
  _QWORD *v11;
  uint64_t v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  OZScene *v15;
  uint64_t v16;
  unsigned int v18[2];
  PCSharedCount v19;

  PCSharedCount::PCSharedCount(&v19);
  *(_QWORD *)v18 = 0;
  OZElement::parseElement((OZElement *)((char *)this + 200), a2, a3);
  if (*((_DWORD *)a3 + 2) == 62)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v18);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v19);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v18[1]);
    v6 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v18[0]);
    if (v6)
    {
      if (v7)
      {
        v8 = (char *)(*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v7 + 168))(v7, &v19, v18[1]);
        v9 = v8;
        if (v8)
        {
          OZChannelBase::setID((OZChannelBase *)((char *)v10 + 56), v18[1]);
          PSParticleType::setEmitter(v10, this);
          (*(void (**)(OZSceneNode *, char *))(*(_QWORD *)v10 + 256))(v10, (char *)this + 200);
          v11 = operator new(0x18uLL);
          v11[1] = (char *)this + 33680;
          v11[2] = v9;
          v12 = *((_QWORD *)this + 4210);
          *v11 = v12;
          *(_QWORD *)(v12 + 8) = v11;
          *((_QWORD *)this + 4210) = v11;
          ++*((_QWORD *)this + 4212);
          v13 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 640))(v9);
          OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 18976), v13);
          v14 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 640))(v9);
          OZChannelBase::resetFlag(v14, 64, 0);
          v15 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
          v16 = (uint64_t)v15;
          if (v15)
          {
            OZScene::registerNode(v15, v10);
            OZScene::addAllDependencies(v16, v10);
          }
          PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v9 + 48));
        }
      }
    }
  }
  PCString::~PCString((PCString *)&v19);
  return 1;
}

void sub_1B2FA51A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSEmitter::parseElement(PSEmitter *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PSEmitter::parseElement((PSEmitter *)((char *)this - 200), a2, a3);
  return 1;
}

{
  PSEmitter::parseElement((PSEmitter *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t PSEmitter::createParticleType(PSEmitter *this, OZImageNode *a2)
{
  OZChannelBase *v3;
  const PCString *Name;
  const PCString *NextUniqueID;
  uint64_t ParticleType;
  PCString v8;

  PCURL::PCURL((PCURL *)&v8, CFSTR("Particle Type Default Name"));
  if (a2)
  {
    if (v3)
    {
      Name = (const PCString *)OZObjectManipulator::getName((OZObjectManipulator *)&v3->var2);
      PCString::set(&v8, Name);
    }
  }
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v3);
  ParticleType = PSParticleType::createParticleType((PSParticleType *)&v8, NextUniqueID);
  (*(void (**)(uint64_t, PCString *, _QWORD))(*(_QWORD *)(ParticleType + 16) + 120))(ParticleType + 16, &v8, 0);
  PCString::~PCString(&v8);
  return ParticleType;
}

void sub_1B2FA52AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL PSEmitter::isRenderingOldestParticleFirst(PSEmitter *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 31072), MEMORY[0x1E0CA2E68], 0.0) == 0;
}

uint64_t PSEmitter::getFillSeed(PSEmitter *this, PSParticleType *a2)
{
  return PSParticleType::getSeed(a2);
}

void PSEmitter::getIconName(PSEmitter *this@<X0>, PCURL *a2@<X8>)
{
  _DWORD *v4;
  int ValueAsInt;
  OZScene *v6;
  CMTime v7;

  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0))
    goto LABEL_9;
  v4 = (_DWORD *)((char *)this + 33708);
  if (*((_BYTE *)this + 33712))
  {
    if (*v4)
      goto LABEL_9;
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0);
    *v4 = ValueAsInt;
    *((_BYTE *)this + 33712) = 1;
    if (ValueAsInt)
      goto LABEL_9;
  }
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v6 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v6, (__n128 *)&v7);
    if (PSEmitter::shouldPrecompose(this, &v7))
    {
      PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconColor-ParticleEmitterRasterized"));
      return;
    }
  }
LABEL_9:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
}

void `non-virtual thunk to'PSEmitter::getIconName(PSEmitter *this@<X0>, PCURL *a2@<X8>)
{
  PSEmitter::getIconName((PSEmitter *)((char *)this - 200), a2);
}

void PSEmitter::getIconNameBW(PSEmitter *this@<X0>, PCURL *a2@<X8>)
{
  _DWORD *v4;
  int ValueAsInt;
  OZScene *v6;
  CMTime v7;

  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0))
    goto LABEL_9;
  v4 = (_DWORD *)((char *)this + 33708);
  if (*((_BYTE *)this + 33712))
  {
    if (*v4)
      goto LABEL_9;
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0);
    *v4 = ValueAsInt;
    *((_BYTE *)this + 33712) = 1;
    if (ValueAsInt)
      goto LABEL_9;
  }
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v6 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v6, (__n128 *)&v7);
    if (PSEmitter::shouldPrecompose(this, &v7))
    {
      PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconGrey-ParticleEmitterRasterized"));
      return;
    }
  }
LABEL_9:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 88))(*((_QWORD *)this + 26));
}

void `non-virtual thunk to'PSEmitter::getIconNameBW(PSEmitter *this@<X0>, PCURL *a2@<X8>)
{
  PSEmitter::getIconNameBW((PSEmitter *)((char *)this - 200), a2);
}

uint64_t PSEmitter::getIconID(PSEmitter *this)
{
  _DWORD *v2;
  int ValueAsInt;
  OZScene *v4;
  CMTime v6;

  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 96))(*((_QWORD *)this + 26));
  v2 = (_DWORD *)((char *)this + 33708);
  if (*((_BYTE *)this + 33712))
  {
    if (*v2)
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 96))(*((_QWORD *)this + 26));
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0);
    *v2 = ValueAsInt;
    *((_BYTE *)this + 33712) = 1;
    if (ValueAsInt)
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 96))(*((_QWORD *)this + 26));
  }
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v4 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v4, (__n128 *)&v6);
    if ((PSEmitter::shouldPrecompose(this, &v6) & 1) != 0)
      return 29;
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 96))(*((_QWORD *)this + 26));
}

uint64_t `non-virtual thunk to'PSEmitter::getIconID(PSEmitter *this)
{
  return PSEmitter::getIconID((PSEmitter *)((char *)this - 200));
}

__n128 PSEmitter::getNaturalDuration@<Q0>(PSEmitter *this@<X0>, __n128 *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v3 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 272))(v3);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'PSEmitter::getNaturalDuration@<D0>(PSEmitter *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = PSEmitter::getNaturalDuration((PSEmitter *)((char *)this - 216), a2).n128_u64[0];
  return result;
}

_QWORD *PSEmitter::addParticleType(PSEmitter *this, PSParticleType *a2)
{
  uint64_t *v4;
  OZChannelBase *v5;
  OZScene *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v4 = (uint64_t *)((char *)this + 33680);
  PSParticleType::setEmitter(a2, this);
  v5 = (OZChannelBase *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)a2 + 640))(a2);
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18976), v5);
  (*(void (**)(PSParticleType *, char *))(*(_QWORD *)a2 + 256))(a2, (char *)this + 200);
  v6 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (v6)
  {
    v7 = (uint64_t)v6;
    OZScene::registerNode(v6, a2);
    OZScene::addAllDependencies(v7, a2);
    OZDocument::postNotification(*(OZDocument **)(v7 + 1584), 16);
    (*(void (**)(PSParticleType *, uint64_t))(*(_QWORD *)a2 + 280))(a2, v7);
  }
  result = operator new(0x18uLL);
  result[1] = v4;
  result[2] = a2;
  v9 = *v4;
  *result = *v4;
  *(_QWORD *)(v9 + 8) = result;
  *v4 = (uint64_t)result;
  ++v4[2];
  return result;
}

PSParticleType *PSEmitter::addNewParticleType(PSEmitter *this, OZImageNode *lpsrc)
{
  void *v4;
  const CMTime *v5;
  PSParticleType *v6;
  __n128 TimeOffset;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;

  if (lpsrc)
  {
    if (v4)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v4 + 248))(v4))
      {
        v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannel::setValue((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 1.0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 32944), v5, 0.0, 0);
        (*(void (**)(PSEmitter *, uint64_t))(*(_QWORD *)this + 456))(this, 1);
      }
    }
  }
  v6 = (PSParticleType *)(*(uint64_t (**)(PSEmitter *, OZImageNode *))(*(_QWORD *)this + 568))(this, lpsrc);
  PSEmitter::addParticleType(this, v6);
  (*(void (**)(PSParticleType *, OZImageNode *))(*(_QWORD *)v6 + 1328))(v6, lpsrc);
  TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)this + 16, &v13);
  (*(void (**)(PSParticleType *, __n128 *, _QWORD, __n128))(*(_QWORD *)v6 + 1120))(v6, &v13, 0, TimeOffset);
  v9 = *(_OWORD *)((char *)this + 408);
  v10 = *((_QWORD *)this + 53);
  v11 = *((_OWORD *)this + 27);
  v12 = *((_QWORD *)this + 56);
  (*(void (**)(PSParticleType *, __int128 *, _QWORD))(*(_QWORD *)v6 + 1136))(v6, &v9, 0);
  return v6;
}

void PSEmitter::allowDrag(PSEmitter *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v14 = (char *)this + 33504;
  *a5 = 0;
  *((_WORD *)this + 16752) = 0;
  if (!lpsrc)
    goto LABEL_51;
  if (v16)
  {
    v17 = (char *)this + 33680;
    v18 = *((_QWORD *)v14 + 23);
    if ((PSEmitter *)v18 == (PSEmitter *)((char *)this + 33680))
    {
      *a6 = 0;
    }
    else
    {
      v19 = *((_QWORD *)v14 + 23);
      while (*(void **)(v19 + 16) != v16)
      {
        v19 = *(_QWORD *)(v19 + 8);
        if ((char *)v19 == v17)
          goto LABEL_25;
      }
      if ((char *)v19 != v17)
      {
        if ((OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200) == a3)
          return;
        v18 = *((_QWORD *)v14 + 23);
      }
LABEL_25:
      *a6 = 0;
      if ((char *)v18 != v17)
      {
        v29 = a6;
        v30 = a4;
        v25 = 0;
        v26 = -1;
        v27 = -1;
        do
        {
          if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 640))(*(_QWORD *)(v18 + 16)) == a3)
            v26 = v25;
          if (*(_QWORD **)(v18 + 16) == v15)
            v27 = v25;
          if ((v27 & 0x8000000000000000) == 0 && (v26 & 0x8000000000000000) == 0)
            break;
          ++v25;
          v18 = *(_QWORD *)(v18 + 8);
        }
        while ((char *)v18 != v17);
        if (v27 != v26 && ((v26 | v27) & 0x8000000000000000) == 0)
        {
          *a5 = v30 & 2;
          if (v27 > v26)
            v28 = 2;
          else
            v28 = 3;
          *v29 = v28;
LABEL_42:
          if (!*a5)
            return;
LABEL_45:
          v14[1] = 1;
          return;
        }
        LOBYTE(a4) = v30;
        if ((v26 & 0x8000000000000000) == 0)
        {
LABEL_44:
          *a5 = a4 & 1;
          if ((a4 & 1) == 0)
            return;
          goto LABEL_45;
        }
      }
    }
    if ((OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200) != a3)
      goto LABEL_42;
    goto LABEL_44;
  }
  if (v15
    && (*(uint64_t (**)(_QWORD *))(*v15 + 272))(v15)
  {
    *a6 = 1;
    *a5 = a4 & 9;
    *v14 = 1;
    if ((a4 & 9) != 0)
      return;
  }
  else
  {
LABEL_51:
    if (*a5)
      return;
  }
  OZElement::allowDrag((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7);
  if (!*a5)
  {
    v23 = *((_QWORD *)lpsrc + 1);
    v31 = xmmword_1B3555900;
    if (OZFactory::isKindOfClass(v23, (int32x4_t *)&v31))
    {
      v24 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 216))(this);
      if (a7 == 1
        && v24 == 1
        && (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200) == a3)
      {
        *a5 = a4 & 1;
        *a6 = 1;
      }
    }
  }
}

void `non-virtual thunk to'PSEmitter::allowDrag(PSEmitter *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  PSEmitter::allowDrag((PSEmitter *)((char *)this - 200), a2, a3, a4, a5, a6, a7);
}

{
  PSEmitter::allowDrag((PSEmitter *)((char *)this - 216), a2, a3, a4, a5, a6, a7);
}

uint64_t PSEmitter::prepareForDragOperation(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 33504) || *(_BYTE *)(a1 + 33505))
    return 1;
  else
    return OZSceneNode::prepareForDragOperation();
}

uint64_t `non-virtual thunk to'PSEmitter::prepareForDragOperation(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 33304) || *(_BYTE *)(a1 + 33305))
    return 1;
  else
    return OZSceneNode::prepareForDragOperation();
}

{
  if (*(_BYTE *)(a1 + 33288) || *(_BYTE *)(a1 + 33289))
    return 1;
  else
    return OZSceneNode::prepareForDragOperation();
}

uint64_t PSEmitter::performDragOperation(PSEmitter *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const CMTime *a8)
{
  char *v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  OZImageNode *v25;
  OZImageNode *v26;
  int v27;
  PSParticleType *v28;
  PSParticleType *v29;
  uint64_t v30;
  OZDocument *v31;
  int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v38;
  void *v39;
  int32x4_t v40;
  PCString v41;

  v16 = (char *)this + 33504;
  if ((*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 624))(this) && (v16[1] || *v16))
  {
    PCURL::PCURL((PCURL *)&v41, CFSTR("Undo Drop"));
    (*(void (**)(char *, PCString *, uint64_t))(*((_QWORD *)this + 27) + 176))((char *)this + 216, &v41, 3);
    PCString::~PCString(&v41);
    while (*((_QWORD *)v16 + 24))
    {
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v16 + 23) + 16) + 640))(*(_QWORD *)(*((_QWORD *)v16 + 23) + 16));
      (*(void (**)(PSEmitter *, uint64_t))(*(_QWORD *)this + 416))(this, v17);
    }
    v18 = 1;
    if (!a2)
    {
LABEL_15:
      if (!*v16)
      {
LABEL_21:
        v22 = *((_QWORD *)a2 + 1);
        v40 = (int32x4_t)xmmword_1B3555900;
        if (OZFactory::isKindOfClass(v22, &v40))
        {
          v23 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 216))(this);
          if (a6 == 1
            && v23 == 1
            && (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200) == a3)
          {
            v38 = (const void *)(*(uint64_t (**)(PSEmitter *, _QWORD))(*(_QWORD *)this + 224))(this, 0);
            v24 = 1;
            (*(void (**)(void *, OZFactoryBase *, OZChannelBase *, uint64_t, uint64_t, uint64_t, uint64_t, const CMTime *))(*(_QWORD *)v39 + 584))(v39, a2, a3, a4, a5, 1, a7, a8);
            return v24;
          }
        }
        OZElement::performDragOperation((OZElement *)((char *)this + 200), a2, a3, a4, a5, a6, a7, a8);
        return 1;
      }
      return 1;
    }
  }
  else
  {
    v18 = 0;
    if (!a2)
      goto LABEL_15;
  }
  if (!v16[1])
  {
    if (!*v16 || (a7 & 8) != 0 && v19 && (v19[1224] & 8) == 0)
      goto LABEL_21;
    if (!v25)
      return 1;
    v26 = v25;
    v27 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
    v28 = PSEmitter::addNewParticleType(this, v26);
    if ((v18 & 1) == 0)
    {
      v29 = v28;
      PCURL::PCURL((PCURL *)&v41, CFSTR("Undo Drop"));
      (*(void (**)(uint64_t, PCString *, uint64_t))(*((_QWORD *)v29 + 2) + 176))((uint64_t)v29 + 16, &v41, 1);
      PCString::~PCString(&v41);
    }
    (*(void (**)(PSEmitter *))(*(_QWORD *)this + 424))(this);
    if (v27 == (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this))
      return 1;
    v30 = *((_QWORD *)this + 146);
    if (!v30)
      return 1;
    v31 = *(OZDocument **)(v30 + 1584);
    v32 = 12;
LABEL_46:
    OZDocument::postNotification(v31, v32);
    return 1;
  }
  v21 = v20[120];
  if ((OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*v20 + 640))(v20) != a3)
  {
    if (v21)
    {
      if ((v18 & 1) == 0)
      {
        PCURL::PCURL((PCURL *)&v41, CFSTR("Undo Reorder"));
        (*(void (**)(_QWORD *, PCString *, uint64_t))(v20[2] + 176))(v20 + 2, &v41, 3);
        PCString::~PCString(&v41);
      }
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 1000))(v21, v20);
    }
    else if ((v18 & 1) == 0)
    {
      PCURL::PCURL((PCURL *)&v41, CFSTR("Undo Drop"));
      (*(void (**)(char *, PCString *, uint64_t))(*((_QWORD *)this + 27) + 176))((char *)this + 216, &v41, 3);
      PCString::~PCString(&v41);
    }
    v33 = (_QWORD *)*((_QWORD *)v16 + 23);
    if (v33 != (_QWORD *)((char *)this + 33680))
    {
      v34 = v33 + 2;
      if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v33[2] + 640))(v33[2]) == a3)
      {
        v35 = 0;
LABEL_42:
        if ((_DWORD)a5 == 3)
          v35 = *v34;
        goto LABEL_44;
      }
      while (1)
      {
        v33 = (_QWORD *)v33[1];
        if (v33 == (_QWORD *)((char *)this + 33680))
          break;
        v35 = *v34;
        v34 = v33 + 2;
        if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v33[2] + 640))(v33[2]) == a3)
          goto LABEL_42;
      }
    }
    v35 = 0;
LABEL_44:
    (*(void (**)(PSEmitter *, _QWORD *, uint64_t))(*(_QWORD *)this + 232))(this, v20, v35);
    (*(void (**)(PSEmitter *))(*(_QWORD *)this + 424))(this);
    v36 = *((_QWORD *)this + 146);
    if (!v36)
      return 1;
    v31 = *(OZDocument **)(v36 + 1584);
    v32 = 16;
    goto LABEL_46;
  }
  return 0;
}

void sub_1B2FA60DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSEmitter::performDragOperation(PSEmitter *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const CMTime *a8)
{
  return PSEmitter::performDragOperation((PSEmitter *)((char *)this - 200), a2, a3, a4, a5, a6, a7, a8);
}

{
  return PSEmitter::performDragOperation((PSEmitter *)((char *)this - 216), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t PSEmitter::deleteThis(PSEmitter *this, OZChannelBase *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  void *v9;
  uint64_t v10;
  OZChannelBase *v11;
  OZScene *v12;
  OZDocument **v13;

  v4 = (uint64_t *)(*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v5 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v4 == (uint64_t *)v5)
    return OZSceneNode::deleteThis((PSEmitter *)((char *)this + 200), a2);
  v6 = (uint64_t *)v5;
  while (1)
  {
    v7 = (void *)v4[2];
    if ((OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 640))(v7) == a2)
      break;
    v4 = (uint64_t *)v4[1];
    if (v4 == v6)
      return OZSceneNode::deleteThis((PSEmitter *)((char *)this + 200), a2);
  }
  v10 = *v4;
  *(_QWORD *)(v10 + 8) = v4[1];
  *(_QWORD *)v4[1] = v10;
  --*((_QWORD *)this + 4212);
  operator delete(v4);
  v11 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 640))(v9);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18976), v11);
  v12 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (v12)
  {
    v13 = (OZDocument **)v12;
    OZScene::unregisterNode(v12, (OZSceneNode *)v7);
    OZScene::removeAllDependencies((OZScene *)v13, (OZSceneNode *)v7);
    OZDocument::postNotification(v13[198], 16);
  }
  (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  return 1;
}

uint64_t `non-virtual thunk to'PSEmitter::deleteThis(PSEmitter *this, OZChannelBase *a2)
{
  return PSEmitter::deleteThis((PSEmitter *)((char *)this - 200), a2);
}

{
  return PSEmitter::deleteThis((PSEmitter *)((char *)this - 216), a2);
}

uint64_t PSEmitter::dirty(PSEmitter *this)
{
  uint64_t result;

  result = OZElement::dirty((OZElement *)((char *)this + 200));
  *((_DWORD *)this + 8396) = -1;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::dirty(OZElement *this)
{
  uint64_t result;

  result = OZElement::dirty(this);
  *((_DWORD *)this + 8346) = -1;
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::dirty(PSEmitter *this)
{
  uint64_t result;

  result = OZElement::dirty((OZElement *)((char *)this - 16));
  *((_DWORD *)this + 8342) = -1;
  return result;
}

uint64_t PSEmitter::calcStaticHash(uint64_t a1)
{
  uint64_t result;

  result = OZChannelBase::testFlag((OZChannelBase *)(a1 + 256), 8);
  if ((result & 1) == 0)
    return OZTransformNode::calcStaticHash(a1 + 200);
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::calcStaticHash(uint64_t a1)
{
  uint64_t result;

  result = OZChannelBase::testFlag((OZChannelBase *)(a1 + 56), 8);
  if ((result & 1) == 0)
    return OZTransformNode::calcStaticHash(a1);
  return result;
}

double PSEmitter::calcHashForState(PSEmitter *a1, const void *a2, __int128 *a3, uint64_t a4)
{
  int8x8_t *v7;
  int8x8_t *v8;
  int8x8_t *Hash;
  double result;
  __int128 v11;
  uint64_t v12;
  __n128 v13;

  (*(void (**)(_QWORD *, const void *, __int128 *, uint64_t, uint64_t))(*((_QWORD *)a1 + 25) + 536))((_QWORD *)a1 + 25, a2, a3, a4, 1);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v13 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  if (PSEmitter::simulatingAnyParticleTypes(a1))
  {
    (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    (*(void (**)(const void *, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v11);
  }
  Hash = PCHashWriteStream::getHash(v8);
  PCHash128::operator+=((int *)&v13, (int *)Hash);
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v8, &v13).n128_u64[0];
  return result;
}

uint64_t PSEmitter::simulatingAnyParticleTypes(PSEmitter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;

  v2 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v3 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v2 == v3)
    return 0;
  v4 = v3;
  do
  {
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 1384))(v5);
    if ((result & 1) != 0)
      break;
    v2 = *(_QWORD *)(v2 + 8);
  }
  while (v2 != v4);
  return result;
}

double `non-virtual thunk to'PSEmitter::calcHashForState(uint64_t a1, const void *a2, __int128 *a3, uint64_t a4)
{
  return PSEmitter::calcHashForState((PSEmitter *)(a1 - 200), a2, a3, a4);
}

{
  return PSEmitter::calcHashForState((PSEmitter *)(a1 - 216), a2, a3, a4);
}

const void *PSEmitter::getGeometryNode(PSEmitter *this)
{
  return OZChanRotoshapeRef::getRotoshape((OZChannelBase *)((char *)this + 27352));
}

OZChannelBase *PSEmitter::updateChanHiddenFlag(PSEmitter *this, OZChannelBase *a2, int a3, char a4)
{
  char *v7;
  uint64_t v8;
  OZChannelBase *result;
  OZNotificationManager *v10;
  PCSharedCount v11;

  v7 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
    v8 = *(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v7 + 272))(v7) + 1584);
  else
    v8 = 0;
  result = (OZChannelBase *)OZChannelBase::testFlag(a2, 2);
  if ((_DWORD)result != a3)
  {
    if ((a4 & 1) == 0)
    {
      if (v8)
      {
        v10 = *(OZNotificationManager **)(v8 + 168);
        if (!v10 || !OZNotificationManager::wasChannelModified(v10, a2))
        {
          PCSharedCount::PCSharedCount(&v11);
          (*((void (**)(OZChannelBase *, PCSharedCount *))a2->var0 + 43))(a2, &v11);
          PCString::~PCString((PCString *)&v11);
        }
      }
    }
    if (a3)
      return OZChannelBase::setFlag(a2, 2, a4);
    else
      return OZChannelBase::resetFlag(a2, 2, a4);
  }
  return result;
}

void sub_1B2FA6624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSEmitter::updateEmitterHiddenFlags(PSEmitter *this, char a2)
{
  char *v4;
  int ValueAsInt;
  char *v6;
  int v7;
  int v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  OZChannel **v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  OZChannel **v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  OZChannel **v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  OZChannel **v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  OZChannel **v97;
  char *v98;
  char *v99;
  char *v100;
  OZChannel *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  OZChannel **v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  OZChannel **v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  OZChannel **v204;
  char *v205;
  char *v206;
  char *v207;
  OZChannel *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  OZChannel **v213;
  char *v214;
  char *v215;
  char *v216;
  OZChannel *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  OZChannel **v231;
  char *v232;
  char *v233;
  char *v234;
  OZChannel *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  OZChannel **v255;
  char *v256;
  char *v257;
  char *v258;
  OZChannel *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  OZChannel **v344;
  char *v345;
  char *v346;
  char *v347;
  OZChannel *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  char *v390;
  char *v391;
  uint64_t v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  char *v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  OZChannel **v406;
  char *v407;
  char *v408;
  char *v409;
  OZChannel *v410;
  OZChannel **v411;
  char *v412;
  char *v413;
  char *v414;
  OZChannel *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  char *v434;
  char *v435;
  uint64_t v436;
  char *v437;
  char *v438;
  char *v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  char *v445;
  char *v446;
  uint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  uint64_t v459;
  char *v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  char *v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  uint64_t v479;
  char *v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  char *v484;
  char *v485;
  char *v486;
  char *v487;
  char *v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  char *v495;
  char *v496;
  char *v497;
  char *v498;
  uint64_t v499;
  char *v500;
  char *v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  char *v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  char *v517;
  char *v518;
  char *v519;
  char *v520;
  uint64_t v521;
  char *v522;
  uint64_t v523;
  unint64_t v524;
  unint64_t v525;
  char *v526;
  char *v527;
  char *v528;
  char *v529;
  char *v530;
  uint64_t v531;
  char *v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  char *v536;
  char *v537;
  char *v538;
  char *v539;
  char *v540;
  uint64_t v541;
  char *v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  char *v546;
  char *v547;
  char *v548;
  char *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  char *v555;
  char *v556;
  char *v557;
  char *v558;
  char *v559;
  uint64_t v560;
  OZChannelBase **i;
  uint64_t *v562;
  uint64_t *v563;
  uint64_t *v564;
  BOOL v565;
  char *v566;
  char *v567;
  char *v568;
  char *v569;
  uint64_t v570;
  OZChannel **v571;
  uint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  char *v576;
  char *v577;
  char *v578;
  char *v579;
  uint64_t v580;
  char *v581;
  uint64_t v582;
  unint64_t v583;
  unint64_t v584;
  char *v585;
  OZChannel **v586;
  char *v587;
  char *v588;
  char *v589;
  OZChannel *v590;
  int v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  OZChannel *v598;
  char *v599;
  char *v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  char *v606;
  char *v607;
  char *v608;
  char *v609;
  char *v610;
  char *v611;
  char *v612;
  OZChannel *v613;
  OZChannelBase *v614;
  CMTime v615;
  char *v616;
  char *v617;
  unint64_t v618;
  uint64_t *v619;
  _QWORD *v620[3];

  v620[0] = 0;
  v620[1] = 0;
  v619 = (uint64_t *)v620;
  v613 = (OZChannel *)((char *)this + 19744);
  v616 = (char *)this + 19744;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 19896;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 20152;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 20304;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 20456;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 20608;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 20760;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 20912;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v597 = (char *)this + 21064;
  v616 = (char *)this + 21064;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 21216;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 21472;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 21728;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 21984;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 22240;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 22496;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 22752;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 23008;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 23160;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v599 = (char *)this + 20456;
  v616 = (char *)this + 23312;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 23464;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 24352;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v600 = (char *)this + 23464;
  v616 = (char *)this + 25392;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v596 = (char *)this + 25392;
  v616 = (char *)this + 25528;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 25680;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 25832;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v592 = (char *)this + 25984;
  v616 = (char *)this + 25984;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 26136;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v595 = (char *)this + 25528;
  v616 = (char *)this + 26288;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 26440;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v602 = (char *)this + 23312;
  v616 = (char *)this + 26592;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v601 = (char *)this + 20152;
  v616 = (char *)this + 26744;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 26896;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v594 = (char *)this + 27200;
  v616 = (char *)this + 27200;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v4 = (char *)this + 27352;
  v616 = (char *)this + 27352;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v598 = (OZChannel *)((char *)this + 20304);
  v593 = (char *)this + 27512;
  v616 = (char *)this + 27512;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 27672;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v611 = (char *)this + 27824;
  v612 = (char *)this + 27672;
  v616 = (char *)this + 27824;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 27976;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v608 = (char *)this + 28256;
  v616 = (char *)this + 28256;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v607 = (char *)this + 28560;
  v616 = (char *)this + 28560;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v606 = (char *)this + 28712;
  v616 = (char *)this + 28712;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v605 = (char *)this + 28864;
  v616 = (char *)this + 28864;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v604 = (char *)this + 29456;
  v616 = (char *)this + 29456;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v603 = (char *)this + 29608;
  v616 = (char *)this + 29608;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 29760;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 30920;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v610 = (char *)this + 31072;
  v616 = (char *)this + 31072;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 31328;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v609 = (char *)this + 31480;
  v616 = (char *)this + 31480;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = (char *)this + 31784;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v619, (unint64_t *)&v616, (uint64_t *)&v616);
  v616 = 0;
  v617 = 0;
  v618 = 0;
  v615 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), &v615, 0.0);
  v6 = (char *)this + 19896;
  v7 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), &v615, 0.0);
  v8 = OZChannel::getValueAsInt(v613, &v615, 0.0);
  if (ValueAsInt == 1)
  {
    v16 = v8;
    v17 = v617;
    if ((unint64_t)v617 >= v618)
    {
      v26 = (v617 - v616) >> 3;
      v18 = (char *)this + 24352;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v27 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v28);
      else
        v29 = 0;
      v52 = &v29[8 * v26];
      v53 = &v29[8 * v28];
      *(_QWORD *)v52 = v600;
      v19 = v52 + 8;
      v55 = v616;
      v54 = v617;
      if (v617 != v616)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *((_QWORD *)v52 - 1) = v56;
          v52 -= 8;
        }
        while (v54 != v55);
        v54 = v616;
      }
      v616 = v52;
      v617 = (char *)v19;
      v618 = (unint64_t)v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      v18 = (char *)this + 24352;
      *(_QWORD *)v617 = v600;
      v19 = v17 + 8;
    }
    v617 = (char *)v19;
    if ((unint64_t)v19 >= v618)
    {
      v58 = ((char *)v19 - v616) >> 3;
      if ((unint64_t)(v58 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v59 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v59 <= v58 + 1)
        v59 = v58 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v59;
      if (v60)
        v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v60);
      else
        v61 = 0;
      v80 = &v61[8 * v58];
      v81 = &v61[8 * v60];
      *(_QWORD *)v80 = v18;
      v57 = (OZChannel **)(v80 + 8);
      v83 = v616;
      v82 = v617;
      if (v617 != v616)
      {
        do
        {
          v84 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v80 - 1) = v84;
          v80 -= 8;
        }
        while (v82 != v83);
        v82 = v616;
      }
      v616 = v80;
      v617 = (char *)v57;
      v618 = (unint64_t)v81;
      if (v82)
        operator delete(v82);
    }
    else
    {
      *v19 = v18;
      v57 = (OZChannel **)(v19 + 1);
    }
    v617 = (char *)v57;
    if ((unint64_t)v57 >= v618)
    {
      v86 = ((char *)v57 - v616) >> 3;
      if ((unint64_t)(v86 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v87 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v87 <= v86 + 1)
        v87 = v86 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v88 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v88 = v87;
      if (v88)
        v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v88);
      else
        v89 = 0;
      v97 = (OZChannel **)&v89[8 * v86];
      v98 = &v89[8 * v88];
      *v97 = v613;
      v85 = (char *)(v97 + 1);
      v100 = v616;
      v99 = v617;
      if (v617 != v616)
      {
        do
        {
          v101 = (OZChannel *)*((_QWORD *)v99 - 1);
          v99 -= 8;
          *--v97 = v101;
        }
        while (v99 != v100);
        v99 = v616;
      }
      v616 = (char *)v97;
      v617 = v85;
      v618 = (unint64_t)v98;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *v57 = v613;
      v85 = (char *)(v57 + 1);
    }
    v617 = v85;
    if (!v16)
      goto LABEL_754;
    if ((unint64_t)v85 >= v618)
    {
      v104 = (v85 - v616) >> 3;
      if ((unint64_t)(v104 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v105 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v105 <= v104 + 1)
        v105 = v104 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v106 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v106 = v105;
      v102 = (char *)this + 23160;
      if (v106)
        v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v106);
      else
        v107 = 0;
      v136 = &v107[8 * v104];
      v137 = &v107[8 * v106];
      *(_QWORD *)v136 = v601;
      v103 = v136 + 8;
      v139 = v616;
      v138 = v617;
      if (v617 != v616)
      {
        do
        {
          v140 = *((_QWORD *)v138 - 1);
          v138 -= 8;
          *((_QWORD *)v136 - 1) = v140;
          v136 -= 8;
        }
        while (v138 != v139);
        v138 = v616;
      }
      v616 = v136;
      v617 = v103;
      v618 = (unint64_t)v137;
      if (v138)
        operator delete(v138);
    }
    else
    {
      v102 = (char *)this + 23160;
      *(_QWORD *)v85 = v601;
      v103 = v85 + 8;
    }
    v617 = v103;
    if ((unint64_t)v103 < v618)
    {
      *(_QWORD *)v103 = v102;
      v141 = v103 + 8;
LABEL_718:
      v617 = v141;
      goto LABEL_754;
    }
    v142 = (v103 - v616) >> 3;
    if ((unint64_t)(v142 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v143 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v143 <= v142 + 1)
      v143 = v142 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
      v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v144);
    else
      v145 = 0;
    v146 = &v145[8 * v142];
    v147 = &v145[8 * v144];
    *(_QWORD *)v146 = v102;
    v141 = v146 + 8;
    v149 = v616;
    v148 = v617;
    if (v617 != v616)
    {
      do
      {
        v150 = *((_QWORD *)v148 - 1);
        v148 -= 8;
        *((_QWORD *)v146 - 1) = v150;
        v146 -= 8;
      }
      while (v148 != v149);
      goto LABEL_232;
    }
LABEL_233:
    v616 = v146;
    v617 = v141;
    v618 = (unint64_t)v147;
    if (v148)
      operator delete(v148);
    goto LABEL_718;
  }
  if (ValueAsInt == 10)
  {
    v12 = v8;
    v13 = v617;
    if ((unint64_t)v617 >= v618)
    {
      v22 = (v617 - v616) >> 3;
      v15 = (char *)this + 23312;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v23 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v24);
      else
        v25 = 0;
      v42 = &v25[8 * v22];
      v43 = &v25[8 * v24];
      *(_QWORD *)v42 = v6;
      v14 = v42 + 8;
      v45 = v616;
      v44 = v617;
      if (v617 != v616)
      {
        do
        {
          v46 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *((_QWORD *)v42 - 1) = v46;
          v42 -= 8;
        }
        while (v44 != v45);
        v44 = v616;
      }
      v616 = v42;
      v617 = (char *)v14;
      v618 = (unint64_t)v43;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *(_QWORD *)v617 = v6;
      v14 = v13 + 8;
      v15 = (char *)this + 23312;
    }
    v617 = (char *)v14;
    if ((unint64_t)v14 >= v618)
    {
      v48 = ((char *)v14 - v616) >> 3;
      if ((unint64_t)(v48 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v49 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v49 <= v48 + 1)
        v49 = v48 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v50);
      else
        v51 = 0;
      v72 = &v51[8 * v48];
      v73 = &v51[8 * v50];
      *(_QWORD *)v72 = v15;
      v47 = (OZChannel **)(v72 + 8);
      v75 = v616;
      v74 = v617;
      if (v617 != v616)
      {
        do
        {
          v76 = *((_QWORD *)v74 - 1);
          v74 -= 8;
          *((_QWORD *)v72 - 1) = v76;
          v72 -= 8;
        }
        while (v74 != v75);
        v74 = v616;
      }
      v616 = v72;
      v617 = (char *)v47;
      v618 = (unint64_t)v73;
      if (v74)
        operator delete(v74);
    }
    else
    {
      *v14 = v15;
      v47 = (OZChannel **)(v14 + 1);
    }
    v617 = (char *)v47;
    if (v7 != 2)
    {
      if (v7 == 1)
      {
        if ((unint64_t)v47 >= v618)
        {
          v112 = ((char *)v47 - v616) >> 3;
          if ((unint64_t)(v112 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v113 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
          if (v113 <= v112 + 1)
            v113 = v112 + 1;
          if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
            v114 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v114 = v113;
          if (v114)
            v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v114);
          else
            v115 = 0;
          v195 = &v115[8 * v112];
          v196 = &v115[8 * v114];
          *(_QWORD *)v195 = v598;
          v78 = v195 + 8;
          v198 = v616;
          v197 = v617;
          if (v617 != v616)
          {
            do
            {
              v199 = *((_QWORD *)v197 - 1);
              v197 -= 8;
              *((_QWORD *)v195 - 1) = v199;
              v195 -= 8;
            }
            while (v197 != v198);
            v197 = v616;
          }
          v616 = v195;
          v617 = v78;
          v618 = (unint64_t)v196;
          if (v197)
            operator delete(v197);
        }
        else
        {
          *v47 = v598;
          v78 = (char *)(v47 + 1);
        }
        v617 = v78;
        if ((unint64_t)v78 >= v618)
        {
          v200 = (v78 - v616) >> 3;
          if ((unint64_t)(v200 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v201 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
          if (v201 <= v200 + 1)
            v201 = v200 + 1;
          if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
            v202 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v202 = v201;
          if (v202)
            v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v202);
          else
            v203 = 0;
          v266 = &v203[8 * v200];
          v267 = &v203[8 * v202];
          *(_QWORD *)v266 = v599;
          v79 = v266 + 8;
          v269 = v616;
          v268 = v617;
          if (v617 != v616)
          {
            do
            {
              v270 = *((_QWORD *)v268 - 1);
              v268 -= 8;
              *((_QWORD *)v266 - 1) = v270;
              v266 -= 8;
            }
            while (v268 != v269);
            v268 = v616;
          }
          v616 = v266;
          v617 = v79;
          v618 = (unint64_t)v267;
          if (v268)
            operator delete(v268);
        }
        else
        {
          *(_QWORD *)v78 = v599;
          v79 = v78 + 8;
        }
        v617 = v79;
        if ((unint64_t)v79 >= v618)
        {
          v271 = (v79 - v616) >> 3;
          if ((unint64_t)(v271 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v272 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
          if (v272 <= v271 + 1)
            v272 = v271 + 1;
          if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
            v273 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v273 = v272;
          if (v273)
            v274 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v273);
          else
            v274 = 0;
          v302 = &v274[8 * v271];
          v303 = &v274[8 * v273];
          *(_QWORD *)v302 = v597;
          v304 = v302 + 8;
          v306 = v616;
          v305 = v617;
          if (v617 == v616)
            goto LABEL_751;
          do
          {
            v307 = *((_QWORD *)v305 - 1);
            v305 -= 8;
            *((_QWORD *)v302 - 1) = v307;
            v302 -= 8;
          }
          while (v305 != v306);
          goto LABEL_750;
        }
LABEL_454:
        v236 = (char *)this + 21064;
        goto LABEL_641;
      }
      if (v7)
        goto LABEL_754;
      if ((unint64_t)v47 >= v618)
      {
        v120 = ((char *)v47 - v616) >> 3;
        if ((unint64_t)(v120 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v121 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v121 <= v120 + 1)
          v121 = v120 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v122 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v122 = v121;
        if (v122)
          v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v122);
        else
          v123 = 0;
        v213 = (OZChannel **)&v123[8 * v120];
        v214 = &v123[8 * v122];
        *v213 = v613;
        v77 = v213 + 1;
        v216 = v616;
        v215 = v617;
        if (v617 != v616)
        {
          do
          {
            v217 = (OZChannel *)*((_QWORD *)v215 - 1);
            v215 -= 8;
            *--v213 = v217;
          }
          while (v215 != v216);
          v215 = v616;
        }
        v616 = (char *)v213;
        v617 = (char *)v77;
        v618 = (unint64_t)v214;
        if (v215)
          operator delete(v215);
      }
      else
      {
        *v47 = v613;
        v77 = v47 + 1;
      }
      v617 = (char *)v77;
      if (!v12)
        goto LABEL_754;
      if ((unint64_t)v77 >= v618)
      {
        v218 = ((char *)v77 - v616) >> 3;
        if ((unint64_t)(v218 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v219 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v219 <= v218 + 1)
          v219 = v218 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v220 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v220 = v219;
        if (v220)
          v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v220);
        else
          v221 = 0;
        v382 = &v221[8 * v218];
        v383 = &v221[8 * v220];
        *(_QWORD *)v382 = v598;
        v79 = v382 + 8;
        v385 = v616;
        v384 = v617;
        if (v617 != v616)
        {
          do
          {
            v386 = *((_QWORD *)v384 - 1);
            v384 -= 8;
            *((_QWORD *)v382 - 1) = v386;
            v382 -= 8;
          }
          while (v384 != v385);
          v384 = v616;
        }
        v616 = v382;
        v617 = v79;
        v618 = (unint64_t)v383;
        if (v384)
          operator delete(v384);
      }
      else
      {
        *v77 = v598;
        v79 = (char *)(v77 + 1);
      }
      v617 = v79;
      if ((unint64_t)v79 >= v618)
      {
        v387 = (v79 - v616) >> 3;
        if ((unint64_t)(v387 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v388 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v388 <= v387 + 1)
          v388 = v387 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v389 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v389 = v388;
        if (v389)
          v390 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v389);
        else
          v390 = 0;
        v302 = &v390[8 * v387];
        v303 = &v390[8 * v389];
        *(_QWORD *)v302 = v599;
        v304 = v302 + 8;
        v402 = v616;
        v305 = v617;
        if (v617 == v616)
          goto LABEL_751;
        do
        {
          v403 = *((_QWORD *)v305 - 1);
          v305 -= 8;
          *((_QWORD *)v302 - 1) = v403;
          v302 -= 8;
        }
        while (v305 != v402);
        goto LABEL_750;
      }
      v236 = (char *)this + 20456;
LABEL_641:
      *(_QWORD *)v79 = v236;
      v304 = v79 + 8;
LABEL_753:
      v617 = v304;
      goto LABEL_754;
    }
    if ((unint64_t)v47 >= v618)
    {
      v116 = ((char *)v47 - v616) >> 3;
      if ((unint64_t)(v116 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v117 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v117 <= v116 + 1)
        v117 = v116 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v118 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v118 = v117;
      if (v118)
        v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v118);
      else
        v119 = 0;
      v204 = (OZChannel **)&v119[8 * v116];
      v205 = &v119[8 * v118];
      *v204 = v613;
      v79 = (char *)(v204 + 1);
      v207 = v616;
      v206 = v617;
      if (v617 != v616)
      {
        do
        {
          v208 = (OZChannel *)*((_QWORD *)v206 - 1);
          v206 -= 8;
          *--v204 = v208;
        }
        while (v206 != v207);
        v206 = v616;
      }
      v616 = (char *)v204;
      v617 = v79;
      v618 = (unint64_t)v205;
      if (v206)
        operator delete(v206);
    }
    else
    {
      *v47 = v613;
      v79 = (char *)(v47 + 1);
    }
    v617 = v79;
    if (!v12)
      goto LABEL_754;
    if ((unint64_t)v79 >= v618)
    {
      v209 = (v79 - v616) >> 3;
      if ((unint64_t)(v209 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v210 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v210 <= v209 + 1)
        v210 = v209 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v211 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v211 = v210;
      if (v211)
        v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v211);
      else
        v212 = 0;
      v302 = &v212[8 * v209];
      v303 = &v212[8 * v211];
      *(_QWORD *)v302 = v601;
      v304 = v302 + 8;
      v380 = v616;
      v305 = v617;
      if (v617 == v616)
        goto LABEL_751;
      do
      {
        v381 = *((_QWORD *)v305 - 1);
        v305 -= 8;
        *((_QWORD *)v302 - 1) = v381;
        v302 -= 8;
      }
      while (v305 != v380);
      goto LABEL_750;
    }
LABEL_386:
    v236 = (char *)this + 20152;
    goto LABEL_641;
  }
  v591 = v8;
  if (ValueAsInt == 2)
  {
    v9 = v617;
    if ((unint64_t)v617 >= v618)
    {
      v30 = (v617 - v616) >> 3;
      v11 = (char *)this + 23312;
      if ((unint64_t)(v30 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v31 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v31 <= v30 + 1)
        v31 = v30 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v32);
      else
        v33 = 0;
      v62 = &v33[8 * v30];
      v63 = &v33[8 * v32];
      *(_QWORD *)v62 = v6;
      v10 = v62 + 8;
      v65 = v616;
      v64 = v617;
      if (v617 != v616)
      {
        do
        {
          v66 = *((_QWORD *)v64 - 1);
          v64 -= 8;
          *((_QWORD *)v62 - 1) = v66;
          v62 -= 8;
        }
        while (v64 != v65);
        v64 = v616;
      }
      v616 = v62;
      v617 = (char *)v10;
      v618 = (unint64_t)v63;
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_QWORD *)v617 = v6;
      v10 = v9 + 8;
      v11 = (char *)this + 23312;
    }
    v617 = (char *)v10;
    if ((unint64_t)v10 >= v618)
    {
      v68 = ((char *)v10 - v616) >> 3;
      if ((unint64_t)(v68 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v69 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v69 <= v68 + 1)
        v69 = v68 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      if (v70)
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v70);
      else
        v71 = 0;
      v90 = &v71[8 * v68];
      v91 = &v71[8 * v70];
      *(_QWORD *)v90 = v11;
      v67 = (OZChannel **)(v90 + 8);
      v93 = v616;
      v92 = v617;
      if (v617 != v616)
      {
        do
        {
          v94 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v90 - 1) = v94;
          v90 -= 8;
        }
        while (v92 != v93);
        v92 = v616;
      }
      v616 = v90;
      v617 = (char *)v67;
      v618 = (unint64_t)v91;
      if (v92)
        operator delete(v92);
    }
    else
    {
      *v10 = v11;
      v67 = (OZChannel **)(v10 + 1);
    }
    v617 = (char *)v67;
    if (v7 != 2)
    {
      if (v7 != 1)
      {
        if (!v7)
        {
          if ((unint64_t)v67 >= v618)
          {
            v132 = ((char *)v67 - v616) >> 3;
            if ((unint64_t)(v132 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v133 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
            if (v133 <= v132 + 1)
              v133 = v132 + 1;
            if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
              v134 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v134 = v133;
            if (v134)
              v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v134);
            else
              v135 = 0;
            v255 = (OZChannel **)&v135[8 * v132];
            v256 = &v135[8 * v134];
            *v255 = v613;
            v95 = (char *)(v255 + 1);
            v258 = v616;
            v257 = v617;
            if (v617 != v616)
            {
              do
              {
                v259 = (OZChannel *)*((_QWORD *)v257 - 1);
                v257 -= 8;
                *--v255 = v259;
              }
              while (v257 != v258);
              v257 = v616;
            }
            v616 = (char *)v255;
            v617 = v95;
            v618 = (unint64_t)v256;
            if (v257)
              operator delete(v257);
          }
          else
          {
            *v67 = v613;
            v95 = (char *)(v67 + 1);
          }
          v617 = v95;
          if (v591)
          {
            if ((unint64_t)v95 >= v618)
            {
              v262 = (v95 - v616) >> 3;
              if ((unint64_t)(v262 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v263 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
              if (v263 <= v262 + 1)
                v263 = v262 + 1;
              if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              v260 = (char *)this + 23160;
              if (v264)
                v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v264);
              else
                v265 = 0;
              v393 = &v265[8 * v262];
              v394 = &v265[8 * v264];
              *(_QWORD *)v393 = v601;
              v261 = v393 + 8;
              v396 = v616;
              v395 = v617;
              if (v617 != v616)
              {
                do
                {
                  v397 = *((_QWORD *)v395 - 1);
                  v395 -= 8;
                  *((_QWORD *)v393 - 1) = v397;
                  v393 -= 8;
                }
                while (v395 != v396);
                v395 = v616;
              }
              v616 = v393;
              v617 = v261;
              v618 = (unint64_t)v394;
              if (v395)
                operator delete(v395);
            }
            else
            {
              v260 = (char *)this + 23160;
              *(_QWORD *)v95 = v601;
              v261 = v95 + 8;
            }
            v617 = v261;
            if ((unint64_t)v261 < v618)
            {
              *(_QWORD *)v261 = v260;
              v304 = v261 + 8;
              goto LABEL_753;
            }
            v398 = (v261 - v616) >> 3;
            if ((unint64_t)(v398 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v399 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
            if (v399 <= v398 + 1)
              v399 = v398 + 1;
            if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
              v400 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v400 = v399;
            if (v400)
              v401 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v400);
            else
              v401 = 0;
            v302 = &v401[8 * v398];
            v303 = &v401[8 * v400];
            *(_QWORD *)v302 = v260;
            v304 = v302 + 8;
            v404 = v616;
            v305 = v617;
            if (v617 != v616)
            {
              do
              {
                v405 = *((_QWORD *)v305 - 1);
                v305 -= 8;
                *((_QWORD *)v302 - 1) = v405;
                v302 -= 8;
              }
              while (v305 != v404);
LABEL_750:
              v305 = v616;
              goto LABEL_751;
            }
            goto LABEL_751;
          }
        }
        goto LABEL_754;
      }
      if ((unint64_t)v67 >= v618)
      {
        v124 = ((char *)v67 - v616) >> 3;
        if ((unint64_t)(v124 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v125 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v125 <= v124 + 1)
          v125 = v124 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v125;
        if (v126)
          v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v126);
        else
          v127 = 0;
        v222 = &v127[8 * v124];
        v223 = &v127[8 * v126];
        *(_QWORD *)v222 = v598;
        v96 = v222 + 8;
        v225 = v616;
        v224 = v617;
        if (v617 != v616)
        {
          do
          {
            v226 = *((_QWORD *)v224 - 1);
            v224 -= 8;
            *((_QWORD *)v222 - 1) = v226;
            v222 -= 8;
          }
          while (v224 != v225);
          v224 = v616;
        }
        v616 = v222;
        v617 = v96;
        v618 = (unint64_t)v223;
        if (v224)
          operator delete(v224);
      }
      else
      {
        *v67 = v598;
        v96 = (char *)(v67 + 1);
      }
      v617 = v96;
      if ((unint64_t)v96 >= v618)
      {
        v227 = (v96 - v616) >> 3;
        if ((unint64_t)(v227 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v228 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v228 <= v227 + 1)
          v228 = v227 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v229 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v229 = v228;
        if (v229)
          v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v229);
        else
          v230 = 0;
        v275 = &v230[8 * v227];
        v276 = &v230[8 * v229];
        *(_QWORD *)v275 = v599;
        v79 = v275 + 8;
        v278 = v616;
        v277 = v617;
        if (v617 != v616)
        {
          do
          {
            v279 = *((_QWORD *)v277 - 1);
            v277 -= 8;
            *((_QWORD *)v275 - 1) = v279;
            v275 -= 8;
          }
          while (v277 != v278);
          v277 = v616;
        }
        v616 = v275;
        v617 = v79;
        v618 = (unint64_t)v276;
        if (v277)
          operator delete(v277);
      }
      else
      {
        *(_QWORD *)v96 = v599;
        v79 = v96 + 8;
      }
      v617 = v79;
      if ((unint64_t)v79 >= v618)
      {
        v280 = (v79 - v616) >> 3;
        if ((unint64_t)(v280 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v281 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v281 <= v280 + 1)
          v281 = v280 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v282 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v282 = v281;
        if (v282)
          v283 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v282);
        else
          v283 = 0;
        v302 = &v283[8 * v280];
        v303 = &v283[8 * v282];
        *(_QWORD *)v302 = v597;
        v304 = v302 + 8;
        v308 = v616;
        v305 = v617;
        if (v617 == v616)
          goto LABEL_751;
        do
        {
          v309 = *((_QWORD *)v305 - 1);
          v305 -= 8;
          *((_QWORD *)v302 - 1) = v309;
          v302 -= 8;
        }
        while (v305 != v308);
        goto LABEL_750;
      }
      goto LABEL_454;
    }
    if ((unint64_t)v67 >= v618)
    {
      v128 = ((char *)v67 - v616) >> 3;
      if ((unint64_t)(v128 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v129 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v129 <= v128 + 1)
        v129 = v128 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v130 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v130 = v129;
      if (v130)
        v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v130);
      else
        v131 = 0;
      v231 = (OZChannel **)&v131[8 * v128];
      v232 = &v131[8 * v130];
      *v231 = v613;
      v79 = (char *)(v231 + 1);
      v234 = v616;
      v233 = v617;
      if (v617 != v616)
      {
        do
        {
          v235 = (OZChannel *)*((_QWORD *)v233 - 1);
          v233 -= 8;
          *--v231 = v235;
        }
        while (v233 != v234);
        v233 = v616;
      }
      v616 = (char *)v231;
      v617 = v79;
      v618 = (unint64_t)v232;
      if (v233)
        operator delete(v233);
    }
    else
    {
      *v67 = v613;
      v79 = (char *)(v67 + 1);
    }
    v617 = v79;
    if (!v591)
      goto LABEL_754;
    if ((unint64_t)v79 >= v618)
    {
      v237 = (v79 - v616) >> 3;
      if ((unint64_t)(v237 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v238 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v238 <= v237 + 1)
        v238 = v237 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v239 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v239 = v238;
      if (v239)
        v240 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v239);
      else
        v240 = 0;
      v302 = &v240[8 * v237];
      v303 = &v240[8 * v239];
      *(_QWORD *)v302 = v601;
      v304 = v302 + 8;
      v391 = v616;
      v305 = v617;
      if (v617 == v616)
        goto LABEL_751;
      do
      {
        v392 = *((_QWORD *)v305 - 1);
        v305 -= 8;
        *((_QWORD *)v302 - 1) = v392;
        v302 -= 8;
      }
      while (v305 != v391);
      goto LABEL_750;
    }
    goto LABEL_386;
  }
  if ((ValueAsInt - 5) <= 1)
  {
    v20 = v617;
    if ((unint64_t)v617 >= v618)
    {
      v38 = (v617 - v616) >> 3;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v39 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v39 <= v38 + 1)
        v39 = v38 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v40);
      else
        v41 = 0;
      v151 = &v41[8 * v38];
      v152 = &v41[8 * v40];
      *(_QWORD *)v151 = v6;
      v21 = v151 + 8;
      v154 = v616;
      v153 = v617;
      if (v617 != v616)
      {
        do
        {
          v155 = *((_QWORD *)v153 - 1);
          v153 -= 8;
          *((_QWORD *)v151 - 1) = v155;
          v151 -= 8;
        }
        while (v153 != v154);
        v153 = v616;
      }
      v616 = v151;
      v617 = (char *)v21;
      v618 = (unint64_t)v152;
      if (v153)
        operator delete(v153);
    }
    else
    {
      *(_QWORD *)v617 = v6;
      v21 = v20 + 8;
    }
    v617 = (char *)v21;
    if (ValueAsInt == 5)
    {
      if ((unint64_t)v21 >= v618)
      {
        v159 = ((char *)v21 - v616) >> 3;
        if ((unint64_t)(v159 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v160 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v160 <= v159 + 1)
          v160 = v159 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        if (v161)
          v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v161);
        else
          v162 = 0;
        v175 = &v162[8 * v159];
        v176 = &v162[8 * v161];
        *(_QWORD *)v175 = v593;
        v156 = v175 + 8;
        v178 = v616;
        v177 = v617;
        if (v617 != v616)
        {
          do
          {
            v179 = *((_QWORD *)v177 - 1);
            v177 -= 8;
            *((_QWORD *)v175 - 1) = v179;
            v175 -= 8;
          }
          while (v177 != v178);
          v177 = v616;
        }
        v616 = v175;
        v617 = (char *)v156;
        v618 = (unint64_t)v176;
        if (v177)
          operator delete(v177);
      }
      else
      {
        *v21 = v593;
        v156 = v21 + 1;
      }
      v617 = (char *)v156;
      if ((unint64_t)v156 < v618)
      {
        *v156 = v594;
        v180 = (OZChannel **)(v156 + 1);
LABEL_469:
        v617 = (char *)v180;
        if (v7)
        {
          if (v7 != 2)
          {
            if (v7 != 1)
              goto LABEL_754;
            if ((unint64_t)v180 >= v618)
            {
              v298 = ((char *)v180 - v616) >> 3;
              if ((unint64_t)(v298 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v299 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
              if (v299 <= v298 + 1)
                v299 = v298 + 1;
              if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v299;
              v286 = (char *)this + 20456;
              if (v300)
                v301 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v300);
              else
                v301 = 0;
              v416 = &v301[8 * v298];
              v417 = &v301[8 * v300];
              *(_QWORD *)v416 = v598;
              v287 = v416 + 8;
              v419 = v616;
              v418 = v617;
              if (v617 != v616)
              {
                do
                {
                  v420 = *((_QWORD *)v418 - 1);
                  v418 -= 8;
                  *((_QWORD *)v416 - 1) = v420;
                  v416 -= 8;
                }
                while (v418 != v419);
                v418 = v616;
              }
              v616 = v416;
              v617 = v287;
              v618 = (unint64_t)v417;
              if (v418)
                operator delete(v418);
            }
            else
            {
              v286 = (char *)this + 20456;
              *v180 = v598;
              v287 = (char *)(v180 + 1);
            }
            v617 = v287;
            if ((unint64_t)v287 >= v618)
            {
              v422 = (v287 - v616) >> 3;
              if ((unint64_t)(v422 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v423 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
              if (v423 <= v422 + 1)
                v423 = v422 + 1;
              if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
                v424 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v424 = v423;
              if (v424)
                v425 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v424);
              else
                v425 = 0;
              v426 = &v425[8 * v422];
              v427 = &v425[8 * v424];
              *(_QWORD *)v426 = v286;
              v421 = v426 + 8;
              v429 = v616;
              v428 = v617;
              if (v617 != v616)
              {
                do
                {
                  v430 = *((_QWORD *)v428 - 1);
                  v428 -= 8;
                  *((_QWORD *)v426 - 1) = v430;
                  v426 -= 8;
                }
                while (v428 != v429);
                v428 = v616;
              }
              v616 = v426;
              v617 = v421;
              v618 = (unint64_t)v427;
              if (v428)
                operator delete(v428);
            }
            else
            {
              *(_QWORD *)v287 = v286;
              v421 = v287 + 8;
            }
            v617 = v421;
            if ((unint64_t)v421 < v618)
            {
              *(_QWORD *)v421 = v597;
              v141 = v421 + 8;
              goto LABEL_718;
            }
            v431 = (v421 - v616) >> 3;
            if ((unint64_t)(v431 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v432 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
            if (v432 <= v431 + 1)
              v432 = v431 + 1;
            if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
              v433 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v433 = v432;
            if (v433)
              v434 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v433);
            else
              v434 = 0;
            v146 = &v434[8 * v431];
            v147 = &v434[8 * v433];
            *(_QWORD *)v146 = v597;
            v141 = v146 + 8;
            v435 = v616;
            v148 = v617;
            if (v617 != v616)
            {
              do
              {
                v436 = *((_QWORD *)v148 - 1);
                v148 -= 8;
                *((_QWORD *)v146 - 1) = v436;
                v146 -= 8;
              }
              while (v148 != v435);
LABEL_232:
              v148 = v616;
              goto LABEL_233;
            }
            goto LABEL_233;
          }
          if ((unint64_t)v180 >= v618)
          {
            v290 = ((char *)v180 - v616) >> 3;
            if ((unint64_t)(v290 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v291 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
            if (v291 <= v290 + 1)
              v291 = v290 + 1;
            if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
              v292 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v292 = v291;
            if (v292)
              v293 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v292);
            else
              v293 = 0;
            v406 = (OZChannel **)&v293[8 * v290];
            v407 = &v293[8 * v292];
            *v406 = v613;
            v288 = (char *)(v406 + 1);
            v409 = v616;
            v408 = v617;
            if (v617 != v616)
            {
              do
              {
                v410 = (OZChannel *)*((_QWORD *)v408 - 1);
                v408 -= 8;
                *--v406 = v410;
              }
              while (v408 != v409);
              v408 = v616;
            }
            v616 = (char *)v406;
            v617 = v288;
            v618 = (unint64_t)v407;
            if (v408)
              operator delete(v408);
          }
          else
          {
            *v180 = v613;
            v288 = (char *)(v180 + 1);
          }
          v617 = v288;
          if (!v591)
            goto LABEL_754;
LABEL_626:
          v614 = (OZChannelBase *)((char *)this + 20152);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
          goto LABEL_754;
        }
        if ((unint64_t)v180 >= v618)
        {
          v294 = ((char *)v180 - v616) >> 3;
          if ((unint64_t)(v294 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v295 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
          if (v295 <= v294 + 1)
            v295 = v294 + 1;
          if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
            v296 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v296 = v295;
          if (v296)
            v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v296);
          else
            v297 = 0;
          v411 = (OZChannel **)&v297[8 * v294];
          v412 = &v297[8 * v296];
          *v411 = v613;
          v289 = (char *)(v411 + 1);
          v414 = v616;
          v413 = v617;
          if (v617 != v616)
          {
            do
            {
              v415 = (OZChannel *)*((_QWORD *)v413 - 1);
              v413 -= 8;
              *--v411 = v415;
            }
            while (v413 != v414);
            v413 = v616;
          }
          v616 = (char *)v411;
          v617 = v289;
          v618 = (unint64_t)v412;
          if (v413)
            operator delete(v413);
        }
        else
        {
          *v180 = v613;
          v289 = (char *)(v180 + 1);
        }
        v617 = v289;
        if (!v591)
          goto LABEL_754;
        goto LABEL_280;
      }
      v181 = ((char *)v156 - v616) >> 3;
      if ((unint64_t)(v181 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v182 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v182 <= v181 + 1)
        v182 = v181 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v183 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v183 = v182;
      if (v183)
        v184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v183);
      else
        v184 = 0;
      v241 = &v184[8 * v181];
      v242 = &v184[8 * v183];
      *(_QWORD *)v241 = v594;
      v180 = (OZChannel **)(v241 + 8);
      v244 = v616;
      v243 = v617;
      if (v617 != v616)
      {
        do
        {
          v245 = *((_QWORD *)v243 - 1);
          v243 -= 8;
          *((_QWORD *)v241 - 1) = v245;
          v241 -= 8;
        }
        while (v243 != v244);
LABEL_466:
        v243 = v616;
      }
    }
    else
    {
      if ((unint64_t)v21 >= v618)
      {
        v163 = ((char *)v21 - v616) >> 3;
        v158 = (char *)this + 25680;
        if ((unint64_t)(v163 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v164 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v164 <= v163 + 1)
          v164 = v163 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v165 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v165 = v164;
        if (v165)
          v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v165);
        else
          v166 = 0;
        v185 = &v166[8 * v163];
        v186 = &v166[8 * v165];
        *(_QWORD *)v185 = v596;
        v157 = v185 + 8;
        v188 = v616;
        v187 = v617;
        if (v617 != v616)
        {
          do
          {
            v189 = *((_QWORD *)v187 - 1);
            v187 -= 8;
            *((_QWORD *)v185 - 1) = v189;
            v185 -= 8;
          }
          while (v187 != v188);
          v187 = v616;
        }
        v616 = v185;
        v617 = (char *)v157;
        v618 = (unint64_t)v186;
        if (v187)
          operator delete(v187);
      }
      else
      {
        *v21 = v596;
        v157 = v21 + 1;
        v158 = (char *)this + 25680;
      }
      v617 = (char *)v157;
      if ((unint64_t)v157 >= v618)
      {
        v191 = ((char *)v157 - v616) >> 3;
        if ((unint64_t)(v191 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v192 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v192 <= v191 + 1)
          v192 = v191 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
          v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v193);
        else
          v194 = 0;
        v246 = &v194[8 * v191];
        v247 = &v194[8 * v193];
        *(_QWORD *)v246 = v595;
        v190 = v246 + 8;
        v249 = v616;
        v248 = v617;
        if (v617 != v616)
        {
          do
          {
            v250 = *((_QWORD *)v248 - 1);
            v248 -= 8;
            *((_QWORD *)v246 - 1) = v250;
            v246 -= 8;
          }
          while (v248 != v249);
          v248 = v616;
        }
        v616 = v246;
        v617 = (char *)v190;
        v618 = (unint64_t)v247;
        if (v248)
          operator delete(v248);
      }
      else
      {
        *v157 = v595;
        v190 = v157 + 1;
      }
      v617 = (char *)v190;
      if ((unint64_t)v190 < v618)
      {
        *v190 = v158;
        v180 = (OZChannel **)(v190 + 1);
        goto LABEL_469;
      }
      v251 = ((char *)v190 - v616) >> 3;
      if ((unint64_t)(v251 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v252 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v252 <= v251 + 1)
        v252 = v251 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v253 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v253 = v252;
      if (v253)
        v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v253);
      else
        v254 = 0;
      v241 = &v254[8 * v251];
      v242 = &v254[8 * v253];
      *(_QWORD *)v241 = v158;
      v180 = (OZChannel **)(v241 + 8);
      v284 = v616;
      v243 = v617;
      if (v617 != v616)
      {
        do
        {
          v285 = *((_QWORD *)v243 - 1);
          v243 -= 8;
          *((_QWORD *)v241 - 1) = v285;
          v241 -= 8;
        }
        while (v243 != v284);
        goto LABEL_466;
      }
    }
    v616 = v241;
    v617 = (char *)v180;
    v618 = (unint64_t)v242;
    if (v243)
      operator delete(v243);
    goto LABEL_469;
  }
  if (ValueAsInt != 4)
  {
    if (ValueAsInt == 11)
    {
      v34 = v617;
      if ((unint64_t)v617 >= v618)
      {
        v167 = (v617 - v616) >> 3;
        v36 = (char *)this + 25680;
        v37 = (char *)this + 25832;
        if ((unint64_t)(v167 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v168 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v168 <= v167 + 1)
          v168 = v167 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v169 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v169 = v168;
        if (v169)
          v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v169);
        else
          v170 = 0;
        v314 = &v170[8 * v167];
        v315 = &v170[8 * v169];
        *(_QWORD *)v314 = v6;
        v35 = v314 + 8;
        v317 = v616;
        v316 = v617;
        if (v617 != v616)
        {
          do
          {
            v318 = *((_QWORD *)v316 - 1);
            v316 -= 8;
            *((_QWORD *)v314 - 1) = v318;
            v314 -= 8;
          }
          while (v316 != v317);
          v316 = v616;
        }
        v616 = v314;
        v617 = v35;
        v618 = (unint64_t)v315;
        if (v316)
          operator delete(v316);
      }
      else
      {
        *(_QWORD *)v617 = v6;
        v35 = v34 + 8;
        v36 = (char *)this + 25680;
        v37 = (char *)this + 25832;
      }
      v617 = v35;
      if ((unint64_t)v35 >= v618)
      {
        v320 = (v35 - v616) >> 3;
        if ((unint64_t)(v320 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v321 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v321 <= v320 + 1)
          v321 = v320 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v322 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v322 = v321;
        if (v322)
          v323 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v322);
        else
          v323 = 0;
        v334 = &v323[8 * v320];
        v335 = &v323[8 * v322];
        *(_QWORD *)v334 = v596;
        v319 = v334 + 8;
        v337 = v616;
        v336 = v617;
        if (v617 != v616)
        {
          do
          {
            v338 = *((_QWORD *)v336 - 1);
            v336 -= 8;
            *((_QWORD *)v334 - 1) = v338;
            v334 -= 8;
          }
          while (v336 != v337);
          v336 = v616;
        }
        v616 = v334;
        v617 = v319;
        v618 = (unint64_t)v335;
        if (v336)
          operator delete(v336);
      }
      else
      {
        *(_QWORD *)v35 = v596;
        v319 = v35 + 8;
      }
      v617 = v319;
      if ((unint64_t)v319 >= v618)
      {
        v340 = (v319 - v616) >> 3;
        if ((unint64_t)(v340 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v341 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v341 <= v340 + 1)
          v341 = v340 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v342 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v342 = v341;
        if (v342)
          v343 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v342);
        else
          v343 = 0;
        v355 = &v343[8 * v340];
        v356 = &v343[8 * v342];
        *(_QWORD *)v355 = v595;
        v339 = v355 + 8;
        v358 = v616;
        v357 = v617;
        if (v617 != v616)
        {
          do
          {
            v359 = *((_QWORD *)v357 - 1);
            v357 -= 8;
            *((_QWORD *)v355 - 1) = v359;
            v355 -= 8;
          }
          while (v357 != v358);
          v357 = v616;
        }
        v616 = v355;
        v617 = v339;
        v618 = (unint64_t)v356;
        if (v357)
          operator delete(v357);
      }
      else
      {
        *(_QWORD *)v319 = v595;
        v339 = v319 + 8;
      }
      v617 = v339;
      if ((unint64_t)v339 >= v618)
      {
        v361 = (v339 - v616) >> 3;
        if ((unint64_t)(v361 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v362 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v362 <= v361 + 1)
          v362 = v361 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v363 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v363 = v362;
        if (v363)
          v364 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v363);
        else
          v364 = 0;
        v365 = &v364[8 * v361];
        v366 = &v364[8 * v363];
        *(_QWORD *)v365 = v36;
        v360 = v365 + 8;
        v368 = v616;
        v367 = v617;
        if (v617 != v616)
        {
          do
          {
            v369 = *((_QWORD *)v367 - 1);
            v367 -= 8;
            *((_QWORD *)v365 - 1) = v369;
            v365 -= 8;
          }
          while (v367 != v368);
          v367 = v616;
        }
        v616 = v365;
        v617 = v360;
        v618 = (unint64_t)v366;
        if (v367)
          operator delete(v367);
      }
      else
      {
        *(_QWORD *)v339 = v36;
        v360 = v339 + 8;
      }
      v617 = v360;
      if ((unint64_t)v360 >= v618)
      {
        v371 = (v360 - v616) >> 3;
        if ((unint64_t)(v371 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v372 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v372 <= v371 + 1)
          v372 = v371 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v373 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v373 = v372;
        if (v373)
          v374 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v373);
        else
          v374 = 0;
        v375 = &v374[8 * v371];
        v376 = &v374[8 * v373];
        *(_QWORD *)v375 = v37;
        v370 = v375 + 8;
        v378 = v616;
        v377 = v617;
        if (v617 != v616)
        {
          do
          {
            v379 = *((_QWORD *)v377 - 1);
            v377 -= 8;
            *((_QWORD *)v375 - 1) = v379;
            v375 -= 8;
          }
          while (v377 != v378);
          v377 = v616;
        }
        v616 = v375;
        v617 = v370;
        v618 = (unint64_t)v376;
        if (v377)
          operator delete(v377);
      }
      else
      {
        *(_QWORD *)v360 = v37;
        v370 = v360 + 8;
      }
      v617 = v370;
      if (!v7)
      {
        v614 = (OZChannelBase *)v613;
        std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
        if (v591)
        {
          v614 = (OZChannelBase *)((char *)this + 20304);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
          v614 = (OZChannelBase *)((char *)this + 20456);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
          v614 = (OZChannelBase *)((char *)this + 23160);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
        }
        goto LABEL_754;
      }
      if (v7 != 2)
      {
        if (v7 == 1)
        {
          v614 = (OZChannelBase *)((char *)this + 20304);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
          v614 = (OZChannelBase *)((char *)this + 20456);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
          v614 = (OZChannelBase *)((char *)this + 20608);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
          v614 = (OZChannelBase *)((char *)this + 21064);
          std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
        }
        goto LABEL_754;
      }
      v614 = (OZChannelBase *)v613;
      std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
      if (!v591)
        goto LABEL_754;
      goto LABEL_626;
    }
    if ((ValueAsInt - 7) <= 1)
    {
      v110 = v617;
      if ((unint64_t)v617 >= v618)
      {
        v310 = (v617 - v616) >> 3;
        if ((unint64_t)(v310 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v311 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v311 <= v310 + 1)
          v311 = v310 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v312 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v312 = v311;
        if (v312)
          v313 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v312);
        else
          v313 = 0;
        v566 = &v313[8 * v310];
        v567 = &v313[8 * v312];
        *(_QWORD *)v566 = v602;
        v111 = v566 + 8;
        v569 = v616;
        v568 = v617;
        if (v617 != v616)
        {
          do
          {
            v570 = *((_QWORD *)v568 - 1);
            v568 -= 8;
            *((_QWORD *)v566 - 1) = v570;
            v566 -= 8;
          }
          while (v568 != v569);
          v568 = v616;
        }
        v616 = v566;
        v617 = v111;
        v618 = (unint64_t)v567;
        if (v568)
          operator delete(v568);
      }
      else
      {
        *(_QWORD *)v617 = v602;
        v111 = v110 + 8;
      }
      v617 = v111;
      if (ValueAsInt == 8)
      {
        v614 = (OZChannelBase *)((char *)this + 26288);
        std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
        v111 = v617;
      }
      if ((unint64_t)v111 >= v618)
      {
        v572 = (v111 - v616) >> 3;
        if ((unint64_t)(v572 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v573 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v573 <= v572 + 1)
          v573 = v572 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v574 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v574 = v573;
        if (v574)
          v575 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v574);
        else
          v575 = 0;
        v576 = &v575[8 * v572];
        v577 = &v575[8 * v574];
        *(_QWORD *)v576 = v592;
        v571 = (OZChannel **)(v576 + 8);
        v579 = v616;
        v578 = v617;
        if (v617 != v616)
        {
          do
          {
            v580 = *((_QWORD *)v578 - 1);
            v578 -= 8;
            *((_QWORD *)v576 - 1) = v580;
            v576 -= 8;
          }
          while (v578 != v579);
          v578 = v616;
        }
        v616 = v576;
        v617 = (char *)v571;
        v618 = (unint64_t)v577;
        if (v578)
          operator delete(v578);
      }
      else
      {
        *(_QWORD *)v111 = v592;
        v571 = (OZChannel **)(v111 + 8);
      }
      v617 = (char *)v571;
      if ((unint64_t)v571 >= v618)
      {
        v582 = ((char *)v571 - v616) >> 3;
        if ((unint64_t)(v582 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v583 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
        if (v583 <= v582 + 1)
          v583 = v582 + 1;
        if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
          v584 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v584 = v583;
        if (v584)
          v585 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v584);
        else
          v585 = 0;
        v586 = (OZChannel **)&v585[8 * v582];
        v587 = &v585[8 * v584];
        *v586 = v613;
        v581 = (char *)(v586 + 1);
        v589 = v616;
        v588 = v617;
        if (v617 != v616)
        {
          do
          {
            v590 = (OZChannel *)*((_QWORD *)v588 - 1);
            v588 -= 8;
            *--v586 = v590;
          }
          while (v588 != v589);
          v588 = v616;
        }
        v616 = (char *)v586;
        v617 = v581;
        v618 = (unint64_t)v587;
        if (v588)
          operator delete(v588);
      }
      else
      {
        *v571 = v613;
        v581 = (char *)(v571 + 1);
      }
      v617 = v581;
      if (v591)
      {
        v614 = (OZChannelBase *)((char *)this + 26136);
        std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
        v614 = (OZChannelBase *)((char *)this + 23160);
        std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
      }
      goto LABEL_754;
    }
    if (ValueAsInt != 9)
      goto LABEL_754;
    v614 = (OZChannelBase *)((char *)this + 23464);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)((char *)this + 24352);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)((char *)this + 26440);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)((char *)this + 26592);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)((char *)this + 26744);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)((char *)this + 26896);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)v613;
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    if (!v591)
      goto LABEL_754;
LABEL_280:
    v614 = (OZChannelBase *)((char *)this + 20152);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    v614 = (OZChannelBase *)((char *)this + 23160);
    std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v616, &v614);
    goto LABEL_754;
  }
  v108 = v617;
  if ((unint64_t)v617 >= v618)
  {
    v171 = (v617 - v616) >> 3;
    if ((unint64_t)(v171 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v172 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v172 <= v171 + 1)
      v172 = v171 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v173 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v173 = v172;
    if (v173)
      v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v173);
    else
      v174 = 0;
    v324 = &v174[8 * v171];
    v325 = &v174[8 * v173];
    *(_QWORD *)v324 = v4;
    v109 = (OZChannel **)(v324 + 8);
    v327 = v616;
    v326 = v617;
    if (v617 != v616)
    {
      do
      {
        v328 = *((_QWORD *)v326 - 1);
        v326 -= 8;
        *((_QWORD *)v324 - 1) = v328;
        v324 -= 8;
      }
      while (v326 != v327);
      v326 = v616;
    }
    v616 = v324;
    v617 = (char *)v109;
    v618 = (unint64_t)v325;
    if (v326)
      operator delete(v326);
  }
  else
  {
    *(_QWORD *)v617 = v4;
    v109 = (OZChannel **)(v108 + 8);
  }
  v617 = (char *)v109;
  if ((unint64_t)v109 >= v618)
  {
    v330 = ((char *)v109 - v616) >> 3;
    if ((unint64_t)(v330 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v331 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v331 <= v330 + 1)
      v331 = v330 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v332 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v332 = v331;
    if (v332)
      v333 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v332);
    else
      v333 = 0;
    v344 = (OZChannel **)&v333[8 * v330];
    v345 = &v333[8 * v332];
    *v344 = v613;
    v329 = (char *)(v344 + 1);
    v347 = v616;
    v346 = v617;
    if (v617 != v616)
    {
      do
      {
        v348 = (OZChannel *)*((_QWORD *)v346 - 1);
        v346 -= 8;
        *--v344 = v348;
      }
      while (v346 != v347);
      v346 = v616;
    }
    v616 = (char *)v344;
    v617 = v329;
    v618 = (unint64_t)v345;
    if (v346)
      operator delete(v346);
  }
  else
  {
    *v109 = v613;
    v329 = (char *)(v109 + 1);
  }
  v617 = v329;
  if (v591)
  {
    if ((unint64_t)v329 >= v618)
    {
      v351 = (v329 - v616) >> 3;
      if ((unint64_t)(v351 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v352 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v352 <= v351 + 1)
        v352 = v351 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v353 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v353 = v352;
      v349 = (char *)this + 23160;
      if (v353)
        v354 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v353);
      else
        v354 = 0;
      v437 = &v354[8 * v351];
      v438 = &v354[8 * v353];
      *(_QWORD *)v437 = v601;
      v350 = v437 + 8;
      v440 = v616;
      v439 = v617;
      if (v617 != v616)
      {
        do
        {
          v441 = *((_QWORD *)v439 - 1);
          v439 -= 8;
          *((_QWORD *)v437 - 1) = v441;
          v437 -= 8;
        }
        while (v439 != v440);
        v439 = v616;
      }
      v616 = v437;
      v617 = v350;
      v618 = (unint64_t)v438;
      if (v439)
        operator delete(v439);
    }
    else
    {
      v349 = (char *)this + 23160;
      *(_QWORD *)v329 = v601;
      v350 = v329 + 8;
    }
    v617 = v350;
    if ((unint64_t)v350 < v618)
    {
      *(_QWORD *)v350 = v349;
      v304 = v350 + 8;
      goto LABEL_753;
    }
    v442 = (v350 - v616) >> 3;
    if ((unint64_t)(v442 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v443 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v443 <= v442 + 1)
      v443 = v442 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v444 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v444 = v443;
    if (v444)
      v445 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v444);
    else
      v445 = 0;
    v302 = &v445[8 * v442];
    v303 = &v445[8 * v444];
    *(_QWORD *)v302 = v349;
    v304 = v302 + 8;
    v446 = v616;
    v305 = v617;
    if (v617 != v616)
    {
      do
      {
        v447 = *((_QWORD *)v305 - 1);
        v305 -= 8;
        *((_QWORD *)v302 - 1) = v447;
        v302 -= 8;
      }
      while (v305 != v446);
      goto LABEL_750;
    }
LABEL_751:
    v616 = v302;
    v617 = v304;
    v618 = (unint64_t)v303;
    if (v305)
      operator delete(v305);
    goto LABEL_753;
  }
LABEL_754:
  v448 = v617;
  if ((unint64_t)v617 >= v618)
  {
    v451 = (v617 - v616) >> 3;
    v450 = (char *)this + 27976;
    if ((unint64_t)(v451 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v452 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v452 <= v451 + 1)
      v452 = v451 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v453 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v453 = v452;
    if (v453)
      v454 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v453);
    else
      v454 = 0;
    v455 = &v454[8 * v451];
    v456 = &v454[8 * v453];
    *(_QWORD *)v455 = v612;
    v449 = v455 + 8;
    v458 = v616;
    v457 = v617;
    if (v617 != v616)
    {
      do
      {
        v459 = *((_QWORD *)v457 - 1);
        v457 -= 8;
        *((_QWORD *)v455 - 1) = v459;
        v455 -= 8;
      }
      while (v457 != v458);
      v457 = v616;
    }
    v616 = v455;
    v617 = v449;
    v618 = (unint64_t)v456;
    if (v457)
      operator delete(v457);
  }
  else
  {
    *(_QWORD *)v617 = v612;
    v449 = v448 + 8;
    v450 = (char *)this + 27976;
  }
  v617 = v449;
  if ((unint64_t)v449 >= v618)
  {
    v461 = (v449 - v616) >> 3;
    if ((unint64_t)(v461 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v462 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v462 <= v461 + 1)
      v462 = v461 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v463 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v463 = v462;
    if (v463)
      v464 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v463);
    else
      v464 = 0;
    v465 = &v464[8 * v461];
    v466 = &v464[8 * v463];
    *(_QWORD *)v465 = v611;
    v460 = v465 + 8;
    v468 = v616;
    v467 = v617;
    if (v617 != v616)
    {
      do
      {
        v469 = *((_QWORD *)v467 - 1);
        v467 -= 8;
        *((_QWORD *)v465 - 1) = v469;
        v465 -= 8;
      }
      while (v467 != v468);
      v467 = v616;
    }
    v616 = v465;
    v617 = v460;
    v618 = (unint64_t)v466;
    if (v467)
      operator delete(v467);
  }
  else
  {
    *(_QWORD *)v449 = v611;
    v460 = v449 + 8;
  }
  v617 = v460;
  if ((unint64_t)v460 >= v618)
  {
    v471 = (v460 - v616) >> 3;
    if ((unint64_t)(v471 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v472 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v472 <= v471 + 1)
      v472 = v471 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v473 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v473 = v472;
    if (v473)
      v474 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v473);
    else
      v474 = 0;
    v475 = &v474[8 * v471];
    v476 = &v474[8 * v473];
    *(_QWORD *)v475 = v450;
    v470 = v475 + 8;
    v478 = v616;
    v477 = v617;
    if (v617 != v616)
    {
      do
      {
        v479 = *((_QWORD *)v477 - 1);
        v477 -= 8;
        *((_QWORD *)v475 - 1) = v479;
        v475 -= 8;
      }
      while (v477 != v478);
      v477 = v616;
    }
    v616 = v475;
    v617 = v470;
    v618 = (unint64_t)v476;
    if (v477)
      operator delete(v477);
  }
  else
  {
    *(_QWORD *)v460 = v450;
    v470 = v460 + 8;
  }
  v617 = v470;
  if ((unint64_t)v470 >= v618)
  {
    v481 = (v470 - v616) >> 3;
    if ((unint64_t)(v481 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v482 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v482 <= v481 + 1)
      v482 = v481 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v483 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v483 = v482;
    if (v483)
      v484 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v483);
    else
      v484 = 0;
    v485 = &v484[8 * v481];
    v486 = &v484[8 * v483];
    *(_QWORD *)v485 = v610;
    v480 = v485 + 8;
    v488 = v616;
    v487 = v617;
    if (v617 != v616)
    {
      do
      {
        v489 = *((_QWORD *)v487 - 1);
        v487 -= 8;
        *((_QWORD *)v485 - 1) = v489;
        v485 -= 8;
      }
      while (v487 != v488);
      v487 = v616;
    }
    v616 = v485;
    v617 = v480;
    v618 = (unint64_t)v486;
    if (v487)
      operator delete(v487);
  }
  else
  {
    *(_QWORD *)v470 = v610;
    v480 = v470 + 8;
  }
  v617 = v480;
  if ((unint64_t)v480 >= v618)
  {
    v491 = (v480 - v616) >> 3;
    if ((unint64_t)(v491 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v492 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
    if (v492 <= v491 + 1)
      v492 = v491 + 1;
    if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
      v493 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v493 = v492;
    if (v493)
      v494 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v493);
    else
      v494 = 0;
    v495 = &v494[8 * v491];
    v496 = &v494[8 * v493];
    *(_QWORD *)v495 = v609;
    v490 = v495 + 8;
    v498 = v616;
    v497 = v617;
    if (v617 != v616)
    {
      do
      {
        v499 = *((_QWORD *)v497 - 1);
        v497 -= 8;
        *((_QWORD *)v495 - 1) = v499;
        v495 -= 8;
      }
      while (v497 != v498);
      v497 = v616;
    }
    v616 = v495;
    v617 = v490;
    v618 = (unint64_t)v496;
    if (v497)
      operator delete(v497);
  }
  else
  {
    *(_QWORD *)v480 = v609;
    v490 = v480 + 8;
  }
  v617 = v490;
  if ((*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 216))(this) == 1
    && (OZChannelFolder::hasMoreThanOneKeypoint((OZChannelFolder *)((char *)this + 28128)) & 1) == 0)
  {
    v506 = v617;
  }
  else
  {
    v500 = v617;
    if ((unint64_t)v617 >= v618)
    {
      v502 = (v617 - v616) >> 3;
      if ((unint64_t)(v502 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v503 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v503 <= v502 + 1)
        v503 = v502 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v504 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v504 = v503;
      if (v504)
        v505 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v504);
      else
        v505 = 0;
      v507 = &v505[8 * v502];
      v508 = &v505[8 * v504];
      *(_QWORD *)v507 = v608;
      v501 = v507 + 8;
      v510 = v616;
      v509 = v617;
      if (v617 != v616)
      {
        do
        {
          v511 = *((_QWORD *)v509 - 1);
          v509 -= 8;
          *((_QWORD *)v507 - 1) = v511;
          v507 -= 8;
        }
        while (v509 != v510);
        v509 = v616;
      }
      v616 = v507;
      v617 = v501;
      v618 = (unint64_t)v508;
      if (v509)
        operator delete(v509);
    }
    else
    {
      *(_QWORD *)v617 = v608;
      v501 = v500 + 8;
    }
    v617 = v501;
    if ((unint64_t)v501 >= v618)
    {
      v513 = (v501 - v616) >> 3;
      if ((unint64_t)(v513 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v514 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v514 <= v513 + 1)
        v514 = v513 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v515 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v515 = v514;
      if (v515)
        v516 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v515);
      else
        v516 = 0;
      v517 = &v516[8 * v513];
      v518 = &v516[8 * v515];
      *(_QWORD *)v517 = v607;
      v512 = v517 + 8;
      v520 = v616;
      v519 = v617;
      if (v617 != v616)
      {
        do
        {
          v521 = *((_QWORD *)v519 - 1);
          v519 -= 8;
          *((_QWORD *)v517 - 1) = v521;
          v517 -= 8;
        }
        while (v519 != v520);
        v519 = v616;
      }
      v616 = v517;
      v617 = v512;
      v618 = (unint64_t)v518;
      if (v519)
        operator delete(v519);
    }
    else
    {
      *(_QWORD *)v501 = v607;
      v512 = v501 + 8;
    }
    v617 = v512;
    if ((unint64_t)v512 >= v618)
    {
      v523 = (v512 - v616) >> 3;
      if ((unint64_t)(v523 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v524 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v524 <= v523 + 1)
        v524 = v523 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v525 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v525 = v524;
      if (v525)
        v526 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v525);
      else
        v526 = 0;
      v527 = &v526[8 * v523];
      v528 = &v526[8 * v525];
      *(_QWORD *)v527 = v606;
      v522 = v527 + 8;
      v530 = v616;
      v529 = v617;
      if (v617 != v616)
      {
        do
        {
          v531 = *((_QWORD *)v529 - 1);
          v529 -= 8;
          *((_QWORD *)v527 - 1) = v531;
          v527 -= 8;
        }
        while (v529 != v530);
        v529 = v616;
      }
      v616 = v527;
      v617 = v522;
      v618 = (unint64_t)v528;
      if (v529)
        operator delete(v529);
    }
    else
    {
      *(_QWORD *)v512 = v606;
      v522 = v512 + 8;
    }
    v617 = v522;
    if ((unint64_t)v522 >= v618)
    {
      v533 = (v522 - v616) >> 3;
      if ((unint64_t)(v533 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v534 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v534 <= v533 + 1)
        v534 = v533 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v535 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v535 = v534;
      if (v535)
        v536 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v535);
      else
        v536 = 0;
      v537 = &v536[8 * v533];
      v538 = &v536[8 * v535];
      *(_QWORD *)v537 = v605;
      v532 = v537 + 8;
      v540 = v616;
      v539 = v617;
      if (v617 != v616)
      {
        do
        {
          v541 = *((_QWORD *)v539 - 1);
          v539 -= 8;
          *((_QWORD *)v537 - 1) = v541;
          v537 -= 8;
        }
        while (v539 != v540);
        v539 = v616;
      }
      v616 = v537;
      v617 = v532;
      v618 = (unint64_t)v538;
      if (v539)
        operator delete(v539);
    }
    else
    {
      *(_QWORD *)v522 = v605;
      v532 = v522 + 8;
    }
    v617 = v532;
    if ((unint64_t)v532 >= v618)
    {
      v543 = (v532 - v616) >> 3;
      if ((unint64_t)(v543 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v544 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v544 <= v543 + 1)
        v544 = v543 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v545 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v545 = v544;
      if (v545)
        v546 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v545);
      else
        v546 = 0;
      v547 = &v546[8 * v543];
      v548 = &v546[8 * v545];
      *(_QWORD *)v547 = v604;
      v542 = v547 + 8;
      v550 = v616;
      v549 = v617;
      if (v617 != v616)
      {
        do
        {
          v551 = *((_QWORD *)v549 - 1);
          v549 -= 8;
          *((_QWORD *)v547 - 1) = v551;
          v547 -= 8;
        }
        while (v549 != v550);
        v549 = v616;
      }
      v616 = v547;
      v617 = v542;
      v618 = (unint64_t)v548;
      if (v549)
        operator delete(v549);
    }
    else
    {
      *(_QWORD *)v532 = v604;
      v542 = v532 + 8;
    }
    v617 = v542;
    if ((unint64_t)v542 >= v618)
    {
      v552 = (v542 - v616) >> 3;
      if ((unint64_t)(v552 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v553 = (uint64_t)(v618 - (_QWORD)v616) >> 2;
      if (v553 <= v552 + 1)
        v553 = v552 + 1;
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFF8)
        v554 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v554 = v553;
      if (v554)
        v555 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v618, v554);
      else
        v555 = 0;
      v556 = &v555[8 * v552];
      v557 = &v555[8 * v554];
      *(_QWORD *)v556 = v603;
      v506 = v556 + 8;
      v559 = v616;
      v558 = v617;
      if (v617 != v616)
      {
        do
        {
          v560 = *((_QWORD *)v558 - 1);
          v558 -= 8;
          *((_QWORD *)v556 - 1) = v560;
          v556 -= 8;
        }
        while (v558 != v559);
        v558 = v616;
      }
      v616 = v556;
      v617 = v506;
      v618 = (unint64_t)v557;
      if (v558)
        operator delete(v558);
    }
    else
    {
      *(_QWORD *)v542 = v603;
      v506 = v542 + 8;
    }
    v617 = v506;
  }
  for (i = (OZChannelBase **)v616; i != (OZChannelBase **)v506; ++i)
  {
    v614 = *i;
    PSEmitter::updateChanHiddenFlag(this, v614, 0, a2);
    std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)&v619, (unint64_t *)&v614);
  }
  v562 = v619;
  if (v619 != (uint64_t *)v620)
  {
    do
    {
      PSEmitter::updateChanHiddenFlag(this, (OZChannelBase *)v562[4], 1, a2);
      v563 = (uint64_t *)v562[1];
      if (v563)
      {
        do
        {
          v564 = v563;
          v563 = (uint64_t *)*v563;
        }
        while (v563);
      }
      else
      {
        do
        {
          v564 = (uint64_t *)v562[2];
          v565 = *v564 == (_QWORD)v562;
          v562 = v564;
        }
        while (!v565);
      }
      v562 = v564;
    }
    while (v564 != (uint64_t *)v620);
  }
  PSEmitter::updatePropertiesChans(this, a2);
  if (v616)
  {
    v617 = v616;
    operator delete(v616);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v619, v620[0]);
}

void sub_1B2FA9A84(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 - 112, *(_QWORD **)(v1 - 104));
  _Unwind_Resume(a1);
}

void std::vector<OZChannelBase *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

OZChannelBase *PSEmitter::updatePropertiesChans(PSEmitter *this, char a2)
{
  int ValueAsInt;
  _BOOL4 v5;
  const PCString *v6;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0);
  v5 = ValueAsInt != 0;
  PSEmitter::updateChanHiddenFlag(this, (OZChannelBase *)((char *)this + 14768), v5, a2);
  PSEmitter::updateChanHiddenFlag(this, (OZChannelBase *)((char *)this + 17720), v5, a2);
  PSEmitter::updateChanHiddenFlag(this, (OZChannelBase *)((char *)this + 12872), v5, a2);
  if (ValueAsInt)
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6880), 2048, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7032), 2048, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14768), 2048, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8432), 2048, a2);
    return (OZChannelBase *)OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 200), v6);
  }
  else
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6880), 2048, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7032), 2048, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14768), 2048, a2);
    return OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8432), 2048, a2);
  }
}

void PSEmitter::getBirthRateFraction(PSEmitter *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28256), a2, 0.0);
}

void PSEmitter::getInitialNumFraction(PSEmitter *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28560), a2, 0.0);
}

void PSEmitter::tintColor(PSEmitter *this, const CMTime *a2, PCColor *a3)
{
  double v6;
  double v7;
  float v8;
  float Alpha;
  float v10;
  PCColor v11;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30920), a2, 0.0);
  v7 = v6;
  if (fabs(v6) >= 0.0000001)
  {
    PCColor::PCColor(&v11);
    OZChannelColor::getColor((PSEmitter *)((char *)this + 29760), a2, &v11);
    v8 = v7;
    PCColor::mix(a3, &v11, v8);
    Alpha = PCColor::getAlpha(a3);
    v10 = (1.0 - v7) * Alpha + v7 * PCColor::getAlpha(&v11);
    PCColor::setAlpha(a3, v10);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v11.var1._obj);
  }
}

void sub_1B2FAA00C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

double PSEmitter::getFrameRate(PSEmitter *this)
{
  return *(double *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200) + 368);
}

void PSEmitter::getPreviewTransformMatrix(OZChannel *a1, uint64_t a2, CMTime *a3)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  if (*(OZChannel **)&a3[2].timescale == (OZChannel *)&a1[1].var6)
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    v11 = 1.0;
  }
  else
  {
    OZChannel::getValueAsDouble(a1 + 212, a3, 0.0);
    v7 = v6;
    OZChannel::getValueAsDouble(a1 + 213, a3, 0.0);
    v9 = v8;
    v10 = *(double *)&a3[1].epoch;
    v11 = (*((double (**)(OZChannel *))a1->var0 + 44))(a1) / v10;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(double *)(a2 + 24) = v7 - v11 * 0.0;
    *(_QWORD *)(a2 + 56) = v9;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(double *)a2 = v11;
}

double PSEmitter::getInvPreviewTransformMatrix(OZChannel *a1, uint64_t a2, CMTime *a3)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double result;

  if (*(OZChannel **)&a3[2].timescale == (OZChannel *)&a1[1].var6)
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  else
  {
    OZChannel::getValueAsDouble(a1 + 212, a3, 0.0);
    v7 = v6;
    OZChannel::getValueAsDouble(a1 + 213, a3, 0.0);
    v9 = v8;
    v10 = *(double *)&a3[1].epoch;
    v11 = (*((double (**)(OZChannel *))a1->var0 + 44))(a1) / v10;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(double *)a2 = v11;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(double *)(a2 + 24) = v7 - v11 * 0.0;
    *(_QWORD *)(a2 + 56) = v9;
    *(_OWORD *)(a2 + 80) = xmmword_1B304EED0;
    PCMatrix44Tmpl<double>::invert((double *)a2, (double *)a2, 0.0);
  }
  return result;
}

void PSEmitter::initParticles(PSEmitter *this, uint64_t a2, PSParticleType *a3, uint64_t a4, void *a5, OZSimStateArray *a6)
{
  PSEmitter *v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  __n128 FrameDuration;
  double v12;
  uint64_t Seed;
  double v14;
  double v15;
  double v16;
  double Seconds;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  OZChannelDoubleOverRange *v24;
  OZChannelDoubleOverRange *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int v49;
  double v50;
  double v51;
  int v52;
  int v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  unsigned int v59;
  PSParticleType *v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  char *v64;
  unsigned int v65;
  unsigned int v66;
  double v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  CMTime *v73;
  int *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  double v79;
  double v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  double v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  double v93;
  double v94;
  double v95;
  float64x2_t v96;
  int8x16_t v97;
  float64x2_t v98;
  float64x2_t v99;
  double v100;
  double v101;
  double v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  double v107;
  double v108;
  double v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  double v114;
  double v115;
  __double2 v116;
  PSEmitter *v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  long double v122;
  __double2 v123;
  double v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  CMTimeEpoch epoch;
  uint64_t v130;
  double v131;
  int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  uint64_t v142;
  const void *v143;
  double *v144;
  unsigned int v145;
  unsigned int v146;
  double v147;
  double v148;
  float64x2_t v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  float64x2_t v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  double v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  double v164;
  double *v165;
  __double2 v166;
  double v167;
  __double2 v168;
  __double2 v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  float64x2_t v186;
  int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  double v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  double v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  double v201;
  unsigned int v202;
  int v203;
  int v204;
  unsigned int v205;
  CMTimeEpoch v206;
  Float64 v207;
  double v208;
  unsigned int v209;
  int v210;
  int v211;
  __int128 *v212;
  OZSimStateElement *v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  double v217;
  double v218;
  int v219;
  double v220;
  double v221;
  double v222;
  double v223;
  unsigned int v224;
  unsigned int v225;
  double v226;
  unsigned int v227;
  unsigned int v228;
  double v229;
  int ValueAsInt;
  double v231;
  double v232;
  double v233;
  double v234;
  int v235;
  unsigned int v236;
  double v237;
  OZChannelDoubleOverRange *v238;
  double v239;
  unsigned int v240;
  PSParticleType *v241;
  double v242;
  float64x2_t v243;
  float64x2_t v244;
  double v245;
  float64x2_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  unsigned int v253;
  double v254;
  double v255;
  float64x2_t v256;
  CMTime v257;
  CMTime v258;
  CMTime time1;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  double v268;
  double v269;
  double v270;
  double v271;
  CMTime v272;
  CMTime v273;
  CMTime v274;
  CMTime v275;
  __int128 v276;
  uint64_t v277;
  float64x2_t v278;
  double v279;
  float64x2_t v280;
  double v281;
  float64x2_t __x;
  double v283;
  char v284;
  CMTime v285;
  CMTime v286;
  float64x2_t v287;
  CMTimeEpoch v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  OZRenderState v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  float64x2_t v322;
  double v323;
  float64x2_t v324;
  double v325;
  float64x2_t v326;
  double v327;
  CMTime time;
  CMTime v329[2];
  CMTime v330;
  CMTime v331;
  CMTime time2;

  v253 = a4;
  v236 = a2;
  v7 = this;
  v8 = (unsigned int *)((char *)this + 28736);
  v331 = *(CMTime *)((_BYTE *)a6 + 1);
  memset(&v330, 0, sizeof(v330));
  v9 = (char *)this + 200;
  v10 = (*(uint64_t (**)(char *, uint64_t, PSParticleType *, uint64_t, void *))(*((_QWORD *)this + 25) + 272))((char *)this + 200, a2, a3, a4, a5);
  FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v330);
  v12 = *(double *)((*(uint64_t (**)(char *, __n128))(*(_QWORD *)v9 + 272))(v9, FrameDuration) + 368);
  Seed = PSParticleType::getSeed(a3);
  (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v9 + 1128))(v329, v9);
  v235 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)v7 + 168))(v7);
  v227 = *v8;
  v14 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v7 + 28712), &v331, 0.0);
  v16 = v15;
  if ((*(unsigned int (**)(PSParticleType *))(*(_QWORD *)a3 + 1576))(a3))
  {
    time = v329[1];
    Seconds = CMTimeGetSeconds(&time);
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 1576), &v331, 0.0);
    Seconds = v18;
    OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 1728), &v331, 0.0);
    v14 = v19;
  }
  v225 = v8[186];
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 1880), &v331, 0.0);
  v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 2032), &v331, 0.0);
  v23 = v22;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v7 + 29456), &v331, 0.0);
  v25 = v24;
  v228 = *((_DWORD *)a3 + 3758);
  v326 = 0uLL;
  v327 = 0.0;
  OZChannelRotation3D::getValueAsEulerAngles((uint64_t)a3 + 2336, &v331, &v326, 0.0);
  v324 = 0uLL;
  v325 = 0.0;
  OZChannelRotation3D::getValueAsEulerAngles((uint64_t)a3 + 3192, &v331, &v324, 0.0);
  v322 = 0uLL;
  v323 = 0.0;
  v241 = a3;
  OZChannelRotation3D::getValueAsEulerAngles((uint64_t)a3 + 4208, &v331, &v322, 0.0);
  if ((v235 & 1) == 0)
  {
    v326 = 0uLL;
    v324 = 0uLL;
    v322 = 0uLL;
  }
  v224 = v8[224];
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 5064), &v331, 0.0);
  v27 = v26;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 5216), &v331, 0.0);
  v254 = v28;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v7 + 29608), &v331, 0.0);
  v249 = v29;
  v240 = v8[38];
  v321 = 0.0;
  v320 = 0.0;
  v319 = 0.0;
  OZChannelScale3D::getValue((PSParticleType *)((char *)a3 + 8040), &v331, &v321, &v320, &v319, 0.0);
  v318 = 0.0;
  v317 = 0.0;
  v316 = 0.0;
  OZChannelScale3D::getValue((PSParticleType *)((char *)a3 + 8632), &v331, &v318, &v317, &v316, 0.0);
  v315 = 0.0;
  v314 = 0.0;
  v313 = 0.0;
  OZChannelScale3D::getValue((PSParticleType *)((char *)a3 + 9224), &v331, &v315, &v314, &v313, 0.0);
  v312 = 0.0;
  v311 = 0.0;
  v310 = 0.0;
  OZChannelScale3D::getValue((PSEmitter *)((char *)v7 + 28864), &v331, &v312, &v311, &v310, 0.0);
  v321 = v312 * v321;
  v320 = v311 * v320;
  v319 = v310 * v319;
  v315 = v312 * v315;
  v314 = v311 * v314;
  v313 = v310 * v313;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 13200), &v331, 0.0);
  v234 = v30;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 13352), &v331, 0.0);
  v233 = v31;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 13640), &v331, 0.0);
  v232 = v32;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 13792), &v331, 0.0);
  v231 = v33;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v7 + 27672), &v331, 0.0);
  v229 = v34;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v7 + 27824), &v331, 0.0);
  v247 = v35;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v7 + 27976), &v331, 0.0);
  v226 = v36;
  v245 = cos(v36 * 0.5);
  OZRenderState::OZRenderState(&v309);
  v309.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v331;
  v309.var8 = 0;
  v308 = 0x3FF0000000000000;
  v305 = 0x3FF0000000000000;
  v302 = 0x3FF0000000000000;
  v299 = 0x3FF0000000000000;
  v300 = 0u;
  v301 = 0u;
  v303 = 0u;
  v304 = 0u;
  v306 = 0u;
  v307 = 0u;
  v298 = 0x3FF0000000000000;
  v295 = 0x3FF0000000000000;
  v292 = 0x3FF0000000000000;
  v289 = 0x3FF0000000000000;
  v290 = 0u;
  v291 = 0u;
  v293 = 0u;
  v294 = 0u;
  v296 = 0u;
  v297 = 0u;
  if (v236 == 1)
  {
    v287 = 0uLL;
    *(double *)&v288 = 0.0;
    v37 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 272))(v9);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v37 + 336), (__n128 *)&v287);
    PSEmitter::getPreviewTransformMatrix((OZChannel *)v7, (uint64_t)&v299, (CMTime *)&v309);
    if ((*(unsigned int (**)(PSParticleType *))(*(_QWORD *)a3 + 1488))(a3))
    {
      time1 = v331;
      *(float64x2_t *)&time2.value = v287;
      time2.epoch = v288;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v286);
      time2 = v329[0];
      time1 = v286;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        time1 = v331;
        *(float64x2_t *)&time2.value = v287;
        time2.epoch = v288;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v286);
        v309.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v286;
      }
    }
    PSEmitter::getPreviewTransformMatrix((OZChannel *)v7, (uint64_t)&v289, (CMTime *)&v309);
  }
  else
  {
    v287 = 0uLL;
    *(double *)&v288 = 0.0;
    v38 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 272))(v9);
    v39 = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v38 + 336), (__n128 *)&v287);
    (*(void (**)(char *, uint64_t *, OZRenderState *, __n128))(*(_QWORD *)v9 + 1256))(v9, &v299, &v309, v39);
    if ((*(unsigned int (**)(PSParticleType *))(*(_QWORD *)a3 + 1488))(a3))
    {
      time1 = v331;
      *(float64x2_t *)&time2.value = v287;
      time2.epoch = v288;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v286);
      time2 = v329[0];
      time1 = v286;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        time1 = v331;
        *(float64x2_t *)&time2.value = v287;
        time2.epoch = v288;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v286);
        v309.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v286;
      }
    }
    (*(void (**)(char *, uint64_t *, OZRenderState *))(*(_QWORD *)v9 + 1256))(v9, &v289, &v309);
  }
  v287 = 0uLL;
  *(double *)&v288 = 0.0;
  memset(&v286, 0, sizeof(v286));
  PCMatrix44Tmpl<double>::transform<double>((double *)&v299, v287.f64, v287.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v289, (double *)&v286.value, (double *)&v286.value);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a3 + 10272), &v331, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 10424), &v331, 0.0);
  v218 = v40;
  v238 = v25;
  v242 = v21;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 10576), &v331, 0.0);
  v217 = v41;
  v42 = v16;
  v43 = v12;
  v219 = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)a3 + 1584))(a3);
  v44 = v23;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 10888), &v331, 0.0);
  v46 = v45;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 11040), &v331, 0.0);
  v48 = v47;
  v49 = OZChannel::getValueAsInt((OZChannel *)((char *)a3 + 10120), &v331, 0.0);
  if (v49)
    v50 = v46;
  else
    v50 = 0.0;
  v239 = v50;
  if (v49)
    v51 = v48;
  else
    v51 = 0.0;
  v223 = v51;
  v285 = *(CMTime *)((_BYTE *)a3 + 686);
  v284 = 0;
  v52 = OZChannel::getValueAsInt((OZChannel *)((char *)v7 + 19232), &v331, 0.0);
  if (v52 == 5)
    PSEmitter::getSrcImage(v7, v236, &v331);
  v216 = v52;
  if (v253)
  {
    v53 = 0;
    v54 = v43 * v42 * Seconds;
    v55 = v43 * v42 * v14;
    v56 = v242 * *(double *)&v238;
    v57 = v44 * *(double *)&v238;
    v58 = v27 * v249;
    v237 = v254 * v249;
    v222 = 1.0 - v245;
    v59 = -1108378657 * ((*((_QWORD *)a6 + 1) - *(_QWORD *)a6) >> 3) - v253;
    v60 = v241;
    v220 = v27 * v249;
    v221 = v44 * *(double *)&v238;
    do
    {
      v61 = *(_QWORD *)a6;
      v62 = *(_QWORD *)a6 + 248 * v59;
      v63 = *(const void **)(v62 + 232);
      if (v63)
      else
        v64 = 0;
      v65 = (*(uint64_t (**)(char *))(*(_QWORD *)v64 + 32))(v64);
      v66 = v65;
      v67 = v54;
      if (v55 > 0.0)
      {
        v68 = -32;
        v69 = -1640531527;
        v70 = v65;
        v71 = v227;
        do
        {
          v70 += (Seed + 16 * v71) ^ (v71 + v69) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                  + (v71 >> 5));
          v71 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v70) ^ (v69 + v70) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v70 >> 5));
          v69 -= 1640531527;
          _CF = __CFADD__(v68++, 1);
        }
        while (!_CF);
        v67 = v54 + v55 * ((double)(int)(v71 ^ v70) / 2147483650.0 * 0.5);
      }
      if (v67 < 0.0)
        v67 = 0.0;
      v73 = operator*(&v330, &time1, v67);
      *(CMTime *)(v64 + 32) = time1;
      v74 = PCColor::WHITE((PCColor *)v73);
      v75 = *(_OWORD *)v74;
      v76 = *((_OWORD *)v74 + 2);
      *((_OWORD *)v64 + 8) = *((_OWORD *)v74 + 1);
      *((_OWORD *)v64 + 9) = v76;
      *((_OWORD *)v64 + 7) = v75;
      PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)v64 + 20, (CGColorSpace **)v74 + 6);
      __x = (float64x2_t)0x3FF0000000000000uLL;
      v283 = 0.0;
      *(_QWORD *)v62 = 0;
      *(_QWORD *)(v62 + 8) = 0;
      *(_QWORD *)(v62 + 16) = 0;
      (*(void (**)(PSEmitter *, _QWORD, CMTime *, PSParticleType *, char *, uint64_t, float64x2_t *, char *))(*(_QWORD *)v7 + 648))(v7, v236, &v331, v60, v64, v62, &__x, &v284);
      v280 = *(float64x2_t *)v62;
      v281 = *(double *)(v62 + 16);
      v278 = *(float64x2_t *)v62;
      v279 = *(double *)(v62 + 16);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v299, v280.f64, v280.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v289, v278.f64, v278.f64);
      v276 = 0uLL;
      v277 = 0;
      v77 = *(_OWORD *)(v64 + 8);
      v274.epoch = *((_QWORD *)v64 + 3);
      *(_OWORD *)&v274.value = v77;
      v273 = v330;
      PC_CMTimeFloorToSampleDuration(&v274, &v273, (uint64_t)&v275);
      v78 = *(_OWORD *)(v64 + 8);
      time1.epoch = *((_QWORD *)v64 + 3);
      *(_OWORD *)&time1.value = v78;
      time2 = v275;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v276);
      operator/(&v276, (uint64_t)&v330, (uint64_t)&v272);
      v79 = CMTimeGetSeconds(&v272);
      v80 = v79 * v281 + (1.0 - v79) * v279;
      v255 = v79;
      v250 = 1.0 - v79;
      *(float64x2_t *)v62 = vaddq_f64(vmulq_n_f64(v280, v79), vmulq_n_f64(v278, 1.0 - v79));
      *(double *)(v62 + 16) = v80;
      *(_OWORD *)&v275.value = 0uLL;
      v271 = 0.0;
      v270 = 0.0;
      (*(void (**)(PSParticleType *, CMTime *, char *, uint64_t, CMTime *, double *))(*(_QWORD *)v60 + 1560))(v60, &v331, v64, Seed, &v275, &v270);
      *(_OWORD *)(v64 + 56) = *(_OWORD *)&v275.value;
      *((_QWORD *)v64 + 9) = 0x3FF0000000000000;
      v269 = 0.0;
      v268 = 0.0;
      OZChannel2DOverRange::getValueOverRange((PSParticleType *)((char *)v241 + 13944), &v331, *((Float64 *)v64 + 21), &v269, &v268);
      v81 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
      v82 = -32;
      v83 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
      v84 = -1640531527;
      v85 = v66;
      v86 = v240 + 10000;
      v87 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
      do
      {
        v85 += (Seed + 16 * v86) ^ (v84 + v86) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                + (v86 >> 5));
        v86 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v85) ^ (v84 + v85) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v85 >> 5));
        v84 -= 1640531527;
        _CF = __CFADD__(v82++, 1);
      }
      while (!_CF);
      v88 = (double)(int)(v86 ^ v85);
      v89 = -32;
      v90 = -1640531527;
      v91 = v66;
      v92 = v240 + 10001;
      do
      {
        v91 += (Seed + 16 * v92) ^ (v90 + v92) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                + (v92 >> 5));
        v92 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v91) ^ (v90 + v91) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v91 >> 5));
        v90 -= 1640531527;
        _CF = __CFADD__(v89++, 1);
      }
      while (!_CF);
      v93 = (v234 + (v232 + v269) * (v88 / 2147483650.0 * 0.5)) * v270;
      v94 = (v233 + (v231 + v268) * ((double)(int)(v92 ^ v91) / 2147483650.0 * 0.5)) * v271;
      if (v93 <= -0.0000001 || v93 >= 0.0000001 || v94 <= -0.0000001 || v94 >= 0.0000001)
      {
        v95 = v93 * 0.0 + v94 * v283;
        v96 = vmulq_n_f64(__x, v94);
        v97 = (int8x16_t)vmulq_n_f64(__x, v93);
        v98 = (float64x2_t)vextq_s8(v97, v97, 8uLL);
        *(_QWORD *)&v99.f64[0] = *(_OWORD *)&vsubq_f64(v96, v98);
        v99.f64[1] = vaddq_f64(v96, v98).f64[1];
        *(float64x2_t *)v62 = vaddq_f64(v99, *(float64x2_t *)v62);
        *(double *)(v62 + 16) = v95 + *(double *)(v62 + 16);
      }
      v100 = *(double *)&v288;
      v243 = *(float64x2_t *)&v286.value;
      v246 = v287;
      v101 = *(double *)&v286.epoch;
      memset(&time2, 0, sizeof(time2));
      if (v235)
      {
        v102 = v56;
        v103 = 538680;
        v104 = -32;
        v105 = -1640531527;
        v106 = v66;
        do
        {
          v106 += (Seed + 16 * v103) ^ (v103 + v105) ^ (v81 + (v103 >> 5));
          v103 += (v83 + 16 * v106) ^ (v105 + v106) ^ (v87 + (v106 >> 5));
          v105 -= 1640531527;
          _CF = __CFADD__(v104++, 1);
        }
        while (!_CF);
        v107 = v55;
        v108 = v54;
        v109 = (double)(v103 ^ v106);
        v110 = -32;
        v111 = -1640531527;
        v112 = v66;
        v113 = 230275;
        do
        {
          v112 += (Seed + 16 * v113) ^ (v111 + v113) ^ (v81 + (v113 >> 5));
          v113 += (v83 + 16 * v112) ^ (v111 + v112) ^ (v87 + (v112 >> 5));
          v111 -= 1640531527;
          _CF = __CFADD__(v110++, 1);
        }
        while (!_CF);
        v114 = v222 * (v109 / 4294967300.0) + -1.0;
        v115 = sqrt(1.0 - v114 * v114);
        v116 = __sincos_stret((double)(int)(v113 ^ v112) / 2147483650.0 * 6.28318531);
        *(double *)&time2.value = v115 * v116.__cosval;
        *(double *)&time2.timescale = v115 * v116.__sinval;
        *(double *)&time2.epoch = -v114;
        v267 = 0x3FF0000000000000;
        v264 = 0x3FF0000000000000;
        v261 = 0x3FF0000000000000;
        time1.value = 0x3FF0000000000000;
        *(_OWORD *)&time1.timescale = 0u;
        v260 = 0u;
        v262 = 0u;
        v263 = 0u;
        v265 = 0u;
        v266 = 0u;
        PCMatrix44Tmpl<double>::rightRotate((double *)&time1.value, 1, -v247);
        PCMatrix44Tmpl<double>::rightRotate((double *)&time1.value, 0, -v229);
        PCMatrix44Tmpl<double>::transform<double>((double *)&time1.value, (double *)&time2.value, (double *)&time2.value);
        v54 = v108;
        v55 = v107;
        v56 = v102;
        v58 = v220;
        v57 = v221;
      }
      else
      {
        v117 = v7;
        v118 = -32;
        v119 = -1640531527;
        v120 = v66;
        v121 = 230275;
        do
        {
          v120 += (Seed + 16 * v121) ^ (v119 + v121) ^ (v81 + (v121 >> 5));
          v121 += (v83 + 16 * v120) ^ (v119 + v120) ^ (v87 + (v120 >> 5));
          v119 -= 1640531527;
          _CF = __CFADD__(v118++, 1);
        }
        while (!_CF);
        v122 = atan2(__x.f64[1], __x.f64[0]);
        v123 = __sincos_stret(v229 + v122 + v226 * ((double)(int)(v121 ^ v120) / 2147483650.0 * 0.5));
        time2.value = *(_QWORD *)&v123.__cosval;
        *(double *)&time2.timescale = v123.__sinval;
        v7 = v117;
        v60 = v241;
      }
      v124 = v56;
      if (v57 > 0.0)
      {
        v125 = -32;
        v126 = -1640531527;
        v127 = v66;
        v128 = v225;
        do
        {
          v127 += (Seed + 16 * v128) ^ (v128 + v126) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v128 >> 5));
          v128 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v127) ^ (v126 + v127) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v127 >> 5));
          v126 -= 1640531527;
          _CF = __CFADD__(v125++, 1);
        }
        while (!_CF);
        v124 = v56 + v57 * ((double)(int)(v128 ^ v127) / 2147483650.0 * 0.5);
      }
      *(double *)&time2.value = v124 * *(double *)&time2.value;
      *(double *)&time2.timescale = v124 * *(double *)&time2.timescale;
      *(double *)&time2.epoch = v124 * *(double *)&time2.epoch;
      time1 = time2;
      PCMatrix44Tmpl<double>::transform<double>((double *)&v299, (double *)&time2.value, (double *)&time2.value);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v289, (double *)&time1.value, (double *)&time1.value);
      *(float64x2_t *)&time2.value = vaddq_f64(vmulq_n_f64(*(float64x2_t *)&time2.value, v255), vmulq_n_f64(*(float64x2_t *)&time1.value, v250));
      *(double *)&time2.epoch = v255 * *(double *)&time2.epoch + v250 * *(double *)&time1.epoch;
      epoch = time2.epoch;
      v130 = v61 + 248 * v59;
      *(float64x2_t *)(v130 + 56) = vsubq_f64(*(float64x2_t *)&time2.value, vaddq_f64(vmulq_n_f64(v246, v255), vmulq_n_f64(v243, v250)));
      *(double *)(v130 + 72) = *(double *)&epoch - (v255 * v100 + v250 * v101);
      v131 = v58;
      if (v237 > 0.0)
      {
        v132 = -32;
        v133 = -1640531527;
        v134 = v224;
        do
        {
          v66 += (Seed + 16 * v134) ^ (v134 + v133) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                     + (v134 >> 5));
          v134 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v66) ^ (v133 + v66) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v66 >> 5));
          v133 -= 1640531527;
          _CF = __CFADD__(v132++, 1);
        }
        while (!_CF);
        v131 = v58 + v237 * ((double)(int)(v134 ^ v66) / 2147483650.0 * 0.5);
      }
      v135 = v61 + 248 * v59;
      *(_QWORD *)(v135 + 80) = 0;
      *(_QWORD *)(v135 + 88) = 0;
      *(double *)(v135 + 96) = v131;
      *(_OWORD *)(v135 + 104) = *(_OWORD *)(v135 + 80);
      *(_QWORD *)(v135 + 120) = *(_QWORD *)(v135 + 96);
      (*(void (**)(PSParticleType *, CMTime *, char *, uint64_t, char *))(*(_QWORD *)v60 + 1552))(v60, &v331, v64, Seed, v64 + 112);
      ++v59;
      ++v53;
    }
    while (v53 != v253);
    if (!v284)
      PSEmitter::calcOrderIndexFromOrderFraction(v7, a6, v253);
    v136 = 0;
    v137 = -1108378657 * ((*((_QWORD *)a6 + 1) - *(_QWORD *)a6) >> 3) - v253;
    __asm { FMOV            V0.2D, #0.5 }
    v244 = _Q0;
    do
    {
      v142 = *(_QWORD *)a6;
      v143 = *(const void **)(*(_QWORD *)a6 + 248 * v137 + 232);
      if (v143)
      else
        v144 = 0;
      v145 = (*(uint64_t (**)(double *))(*(_QWORD *)v144 + 32))(v144);
      v146 = v145;
      v147 = v144[21];
      v148 = (1.0 - v147) * v327 + v147 * (v327 + v325);
      v149 = vaddq_f64(vmulq_n_f64(v326, 1.0 - v147), vmulq_n_f64(vaddq_f64(v326, v324), v147));
      v248 = v147;
      v251 = 1.0 - v147;
      if (vaddvq_f64(vmulq_f64(v322, v322)) + v323 * v323 <= 0.0)
      {
        v256 = v149;
      }
      else
      {
        v150 = -32;
        v151 = -1640531527;
        v152 = v145;
        v153 = v228 + 2;
        do
        {
          v152 += (Seed + 16 * v153) ^ (v151 + v153) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v153 >> 5));
          v153 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v152) ^ (v151 + v152) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v152 >> 5));
          v151 -= 1640531527;
          _CF = __CFADD__(v150++, 1);
        }
        while (!_CF);
        v154.f64[0] = (double)(int)(v153 ^ v152) / 2147483650.0;
        v155 = -32;
        v156 = -1640531527;
        v157 = v145;
        v158 = v228 + 1;
        do
        {
          v157 += (Seed + 16 * v158) ^ (v156 + v158) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v158 >> 5));
          v158 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v157) ^ (v156 + v157) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v157 >> 5));
          v156 -= 1640531527;
          _CF = __CFADD__(v155++, 1);
        }
        while (!_CF);
        v159 = (double)(int)(v158 ^ v157);
        v160 = -32;
        v161 = -1640531527;
        v162 = v145;
        v163 = v228;
        do
        {
          v162 += (Seed + 16 * v163) ^ (v163 + v161) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v163 >> 5));
          v163 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v162) ^ (v161 + v162) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v162 >> 5));
          v161 -= 1640531527;
          _CF = __CFADD__(v160++, 1);
        }
        while (!_CF);
        v154.f64[1] = v159 / 2147483650.0;
        v256 = vaddq_f64(v149, vmulq_f64(vmulq_f64(v322, v154), v244));
        v148 = v148 + v323 * ((double)(int)(v163 ^ v162) / 2147483650.0) * 0.5;
      }
      v164 = (*(double (**)(PSParticleType *, CMTime *, double *, uint64_t))(*(_QWORD *)v241 + 1568))(v241, &v331, v144, Seed);
      v165 = (double *)(v142 + 248 * v137);
      v166 = __sincos_stret((v148 + v164) * 0.5);
      v167 = v166.__sinval * 0.0;
      v168 = __sincos_stret(0.5 * v256.f64[0]);
      v169 = __sincos_stret(vmuld_lane_f64(0.5, v256, 1));
      v170 = v168.__cosval * (v169.__sinval * 0.0);
      v171 = v168.__sinval * 0.0 * v169.__sinval;
      v172 = v168.__sinval * 0.0 * (v169.__sinval * 0.0);
      v173 = v168.__sinval * v169.__cosval + v170 + v171 - v172;
      v174 = v173 * (v166.__sinval * 0.0);
      v175 = v168.__sinval * 0.0 * v169.__cosval;
      v176 = v168.__sinval * (v169.__sinval * 0.0);
      v177 = v175 + v168.__cosval * v169.__sinval + v176 - v172;
      v178 = v168.__cosval * v169.__cosval - (v172 + v171 + v176);
      v186.f64[0] = v172 - v168.__sinval * v169.__sinval + v175 + v170;
      v179 = v166.__sinval * v178 + v186.f64[0] * v166.__cosval + v173 * v167 - v177 * v167;
      v180 = v177 * v166.__cosval + v178 * v167 + v186.f64[0] * v167 - v173 * v166.__sinval;
      v181 = v173 * v166.__cosval + v178 * v167 + v177 * v166.__sinval - v186.f64[0] * v167;
      v186.f64[0] = v166.__cosval * v178 - (v186.f64[0] * v166.__sinval + v174 + v177 * (v166.__sinval * 0.0));
      v182 = v165[3];
      v183 = v165[4];
      v184 = v165[5];
      v185 = v165[6];
      v165[5] = v180 * v182 + v186.f64[0] * v184 + v181 * v185 - v179 * v183;
      v165[6] = v180 * v183 - v181 * v184 + v179 * v182 + v186.f64[0] * v185;
      v165[3] = v186.f64[0] * v182 - (v181 * v183 + v180 * v184 + v179 * v185);
      v165[4] = v181 * v182 + v186.f64[0] * v183 + v179 * v184 - v180 * v185;
      v186.f64[0] = v321 * (v251 + v248 * v318);
      if (v315 > 0.0)
      {
        v187 = -32;
        v188 = -1640531527;
        v189 = v146;
        v190 = v240;
        do
        {
          v189 += (Seed + 16 * v190) ^ (v190 + v188) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v190 >> 5));
          v190 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v189) ^ (v188 + v189) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v189 >> 5));
          v188 -= 1640531527;
          _CF = __CFADD__(v187++, 1);
        }
        while (!_CF);
        v186.f64[0] = v186.f64[0] + v315 * ((double)(int)(v190 ^ v189) / 2147483650.0 * 0.5);
        if (v186.f64[0] < 0.0)
          v186.f64[0] = 0.0;
      }
      v191 = v320 * (v251 + v248 * v317);
      if (v314 > 0.0)
      {
        v192 = -32;
        v193 = -1640531527;
        v194 = v146;
        v195 = v240;
        do
        {
          v194 += (Seed + 16 * v195) ^ (v195 + v193) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v195 >> 5));
          v195 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v194) ^ (v193 + v194) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v194 >> 5));
          v193 -= 1640531527;
          _CF = __CFADD__(v192++, 1);
        }
        while (!_CF);
        v191 = v191 + v314 * ((double)(int)(v195 ^ v194) / 2147483650.0 * 0.5);
        if (v191 < 0.0)
          v191 = 0.0;
      }
      v196 = v319 * (v251 + v248 * v316);
      if (v313 > 0.0)
      {
        v197 = -32;
        v198 = -1640531527;
        v199 = v146;
        v200 = v240;
        do
        {
          v199 += (Seed + 16 * v200) ^ (v200 + v198) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v200 >> 5));
          v200 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v199) ^ (v198 + v199) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v199 >> 5));
          v198 -= 1640531527;
          _CF = __CFADD__(v197++, 1);
        }
        while (!_CF);
        v196 = v196 + v313 * ((double)(int)(v200 ^ v199) / 2147483650.0 * 0.5);
        if (v196 < 0.0)
          v196 = 0.0;
      }
      v201 = v196 * v144[9];
      v186.f64[1] = v191;
      *(float64x2_t *)(v144 + 7) = vmulq_f64(v186, *(float64x2_t *)(v144 + 7));
      v144[9] = v201;
      if (ValueAsInt)
      {
        memset(&time1, 0, sizeof(time1));
        v202 = 945328649;
        v203 = -32;
        v204 = -1640531527;
        v205 = v146;
        do
        {
          v205 += (Seed + 16 * v202) ^ (v204 + v202) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v202 >> 5));
          v202 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v205) ^ (v204 + v205) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v205 >> 5));
          v204 -= 1640531527;
          _CF = __CFADD__(v203++, 1);
        }
        while (!_CF);
        operator*(&v285, &time1, (double)(v202 ^ v205) / 4294967300.0);
        v258 = time1;
        v257 = v330;
        PC_CMTimeFloorToSampleDuration(&v258, &v257, (uint64_t)&time2);
        *((_OWORD *)v144 + 5) = *(_OWORD *)&time2.value;
        v206 = time2.epoch;
      }
      else
      {
        if (v219)
        {
          OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)((char *)v60 + 10728), &v331, v144[21]);
          operator*(&v330, &time1, v207);
        }
        else
        {
          operator*(&v330, &time1, v218 + v217 * v144[22]);
        }
        *((_OWORD *)v144 + 5) = *(_OWORD *)&time1.value;
        v206 = time1.epoch;
      }
      *((_QWORD *)v144 + 12) = v206;
      v208 = v239;
      if (v239 > 0.0)
      {
        v209 = -2096987786;
        v210 = -32;
        v211 = -1640531527;
        do
        {
          v146 += (Seed + 16 * v209) ^ (v211 + v209) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                      + (v209 >> 5));
          v209 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v146) ^ (v211 + v146) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v146 >> 5));
          v211 -= 1640531527;
          _CF = __CFADD__(v210++, 1);
        }
        while (!_CF);
        v208 = v239 + v223 * ((double)(v209 ^ v146) / 4294967300.0);
        if (v208 < 1.0)
          v208 = 1.0;
      }
      v144[13] = v208;
      ++v137;
      ++v136;
    }
    while (v136 != v253);
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)v7 + 31632), MEMORY[0x1E0CA2E68], 0.0))
  {
    v212 = (__int128 *)*((_QWORD *)a6 + 1);
    v213 = (OZSimStateElement *)(*(_QWORD *)a6
                               + 248 * (0xEF7BDEF7BDEF7BDFLL * (((uint64_t)v212 - *(_QWORD *)a6) >> 3) - v253));
    v214 = 126 - 2 * __clz(0xEF7BDEF7BDEF7BDFLL * (((char *)v212 - (char *)v213) >> 3));
    time1.value = (CMTimeValue)lessThanOrderingSimElem;
    if (v212 == (__int128 *)v213)
      v215 = 0;
    else
      v215 = v214;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*,false>(v213, v212, (uint64_t (**)(__int128 *, const OZSimStateElement *))&time1, v215, 1);
  }
  if (v216 == 5)
  {
    std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)v7 + 4189);
    *((_QWORD *)v7 + 4191) = 0x3FF0000000000000;
    *((_OWORD *)v7 + 2096) = 0u;
  }
}

void PSEmitter::getSrcImage(PSEmitter *this, int a2, const CMTime *a3)
{
  double *v6;
  char *v7;
  void *ImageNode;
  void *v9;
  CMTimeEpoch epoch;
  void *v11;
  void *v12;
  double v18;
  char *v19;
  uint64_t v20;
  float v21;
  PGContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  OZChannelBase *FactoryForSerialization;
  OZChannelBase *v27;
  LiHelium *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  OZProcessControl *v35;
  int v36;
  const PCString *v37;
  uint64_t v38;
  __int128 v39;
  FxColorDescription v40;
  _QWORD v41[2];
  __int128 v42;
  uint64_t v43;
  double v44;
  double v45;
  __int128 v46;
  CMTimeEpoch v47;
  OZProcessControl *v48;
  OZChannelBase *v49;
  int v50;
  __int128 v51;
  __int128 v52;

  v6 = (double *)((char *)this + 33528);
  v7 = (char *)this + 33512;
  std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)this + 4189);
  v6[1] = 0.0;
  v6[2] = 0.0;
  *v6 = 1.0;
  ImageNode = (void *)OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 27512));
  if (ImageNode)
  {
    v9 = ImageNode;
    OZRenderParams::OZRenderParams((OZRenderParams *)&v46);
    v46 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    v51 = 0uLL;
    v47 = epoch;
    v44 = 1.0;
    v45 = 1.0;
    v43 = 0x3FF0000000000000;
    if (v11)
    {
      v12 = v11;
      *v6 = (*(double (**)(void *))(*(_QWORD *)v11 + 1328))(v11);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31936), MEMORY[0x1E0CA2E68], 0.0))
        (*(void (**)(void *, double *, double *, uint64_t *, __int128 *, _QWORD))(*(_QWORD *)v12 + 1312))(v12, &v45, &v44, &v43, &v46, 0);
    }
    v41[0] = 0;
    v41[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v42 = _Q0;
    (*(void (**)(void *, _QWORD *, __int128 *))(*(_QWORD *)v9 + 16))(v9, v41, &v46);
    v18 = v44 * *((double *)&v42 + 1);
    v6[1] = v45 * *(double *)&v42 * *v6;
    v6[2] = v18;
    if (a2 != 2 && (PSEmitter::needSourceBitmap(this, a3) & 1) != 0)
    {
      v20 = *((_QWORD *)this + 25);
      v19 = (char *)this + 200;
      (*(void (**)(FxColorDescription *__return_ptr, char *))(v20 + 288))(&v40, v19);
      OZRenderParams::setWorkingColorDescription((CGColorSpace **)&v46, &v40);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v40._pcColorDesc._colorSpaceRef._obj);
      v21 = (*(float (**)(char *))(*(_QWORD *)v19 + 296))(v19);
      OZRenderParams::setBlendingGamma((uint64_t)&v46, v21);
      v22 = (PGContext *)PGGetPerThreadContext();
      OZRenderParams::setImageContext((OZRenderParams *)&v46, v22);
      v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v19 + 272))(v19);
      v24 = v23;
      if (v23)
      {
        v25 = *(_QWORD *)(v23 + 1504);
        if (v25)
        {
          FactoryForSerialization = (OZChannelBase *)OZFactoryBase::getFactoryForSerialization(v25);
          v27 = 0;
        }
        else
        {
          FactoryForSerialization = (OZChannelBase *)operator new();
          OZChannelBase::setRangeName(FactoryForSerialization, (const PCString *)*(unsigned int *)(v24 + 344));
          v27 = FactoryForSerialization;
        }
        v49 = FactoryForSerialization;
        OZRenderParams::setImageType((uint64_t)&v46, 1);
        OZRenderParams::setWidth((OZRenderParams *)&v46, (int)*(double *)&v42);
        OZRenderParams::setHeight((OZRenderParams *)&v46, (int)*((double *)&v42 + 1));
        v50 = 3;
        v51 = 0u;
        v52 = 0u;
        LiHelium::getDefaultGPU(v28, &v39);
        *(_OWORD *)&v40._pcColorDesc._colorSpaceRef._obj = v39;
        v39 = 0uLL;
        OZRenderParams::setRenderDevice((uint64_t)&v46, (uint64_t *)&v40);
        v29 = *(std::__shared_weak_count **)&v40._pcColorDesc._dynamicRange;
        if (*(_QWORD *)&v40._pcColorDesc._dynamicRange)
        {
          v30 = (unint64_t *)(*(_QWORD *)&v40._pcColorDesc._dynamicRange + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = (OZProcessControl *)operator new();
        v36 = OZProcessControl::OZProcessControl(v35);
        v48 = v35;
        if (!PSEmitter::getSourceBitmap(v36, v9, (OZRenderParams *)&v46, 0, (uint64_t)v7))
        {
          OZRenderParams::deleteControl((OZRenderParams *)&v46);
          if (v27)
          {
            v38 = OZChannelBase::setRangeName(v27, v37);
            MEMORY[0x1B5E29170](v38, 0xC400A2AC0F1);
          }
        }
      }
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v46);
  }
}

void sub_1B2FAC198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  MEMORY[0x1B5E29170](v15, 0xC400A2AC0F1);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

double PCRandom::getRandTEAf(PCRandom *this, unsigned int a2, int a3)
{
  int v3;
  int v4;

  v3 = -32;
  v4 = -1640531527;
  do
  {
    LODWORD(this) = ((a3 + 16 * a2) ^ (v4 + a2) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                 + (a2 >> 5)))
                  + (_DWORD)this;
    a2 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * (_DWORD)this) ^ (v4 + (_DWORD)this) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (this >> 5));
    v4 -= 1640531527;
  }
  while (!__CFADD__(v3++, 1));
  return (double)(a2 ^ this) / 4294967300.0;
}

void PSEmitter::calcOrderIndexFromOrderFraction(PSEmitter *this, OZSimStateArray *a2, unsigned int a3)
{
  PSEmitter *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  double *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  char *v24;
  int ValueAsInt;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  const void *v29;
  double *v30;
  char *v31;
  uint64_t v32;
  double *v33;
  char *__p;
  char *v36;
  char *v37;
  uint64_t *v38;
  _QWORD *v39[2];

  v5 = this;
  v39[0] = 0;
  v39[1] = 0;
  v38 = (uint64_t *)v39;
  v6 = -1108378657 * ((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) - a3;
  if (a3)
  {
    v7 = a3;
    v8 = -1108378657 * ((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) - a3;
    do
    {
      v9 = *(double **)(*(_QWORD *)a2 + 248 * v8 + 232);
      if (v9)
      std::__tree<double,LessThanDouble,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(&v38, v9 + 21, (uint64_t *)v9 + 21);
      ++v8;
      --v7;
    }
    while (v7);
    v10 = v38;
    __p = 0;
    v36 = 0;
    v37 = 0;
    if (v38 == (uint64_t *)v39)
    {
      v24 = 0;
      v11 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        if (v11 >= v37)
        {
          v12 = __p;
          v13 = (v11 - __p) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v15 = v37 - __p;
          if ((v37 - __p) >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v37, v16);
            v12 = __p;
            v11 = v36;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * v13];
          *(_QWORD *)v18 = v10[4];
          v19 = v18 + 8;
          while (v11 != v12)
          {
            v20 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v18 - 1) = v20;
            v18 -= 8;
          }
          __p = v18;
          v37 = &v17[8 * v16];
          if (v12)
            operator delete(v12);
          v11 = v19;
        }
        else
        {
          *(_QWORD *)v11 = v10[4];
          v11 += 8;
        }
        v36 = v11;
        v21 = (uint64_t *)v10[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (uint64_t *)v10[2];
            v23 = *v22 == (_QWORD)v10;
            v10 = v22;
          }
          while (!v23);
        }
        v10 = v22;
      }
      while (v22 != (uint64_t *)v39);
      v5 = this;
      v24 = __p;
    }
  }
  else
  {
    v24 = 0;
    v11 = 0;
    __p = 0;
    v36 = 0;
    v37 = 0;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v5 + 23008), MEMORY[0x1E0CA2E68], 0.0);
  v26 = OZChannel::getValueAsInt((OZChannel *)((char *)v5 + 31784), MEMORY[0x1E0CA2E68], 0.0);
  if (!a3)
  {
    v31 = __p;
    if (!__p)
      goto LABEL_50;
    goto LABEL_49;
  }
  v27 = v26;
  v28 = 0;
  do
  {
    v29 = *(const void **)(*(_QWORD *)a2 + 248 * (v6 + v28) + 232);
    if (v29)
    else
      v30 = 0;
    v31 = __p;
    if (__p != v36)
    {
      v32 = 0;
      v33 = (double *)__p;
      while (vabdd_f64(*v33, v30[21]) >= 0.0000001)
      {
        ++v33;
        v32 = (v32 + 1);
        if (v33 == (double *)v36)
          goto LABEL_47;
      }
      if (ValueAsInt)
      {
        LODWORD(v32) = PSEmitter::shuffleOrder(this, v32, (unint64_t)(v11 - v24) >> 3, v27);
        v31 = __p;
      }
      v30[22] = (double)v32;
      v30[21] = *(double *)&v31[8 * v32];
    }
LABEL_47:
    ++v28;
  }
  while (v28 != a3);
  if (v31)
LABEL_49:
    operator delete(v31);
LABEL_50:
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v38, v39[0]);
}

void sub_1B2FAC5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL lessThanOrderingSimElem(const OZSimStateElement *a1, const OZSimStateElement *a2)
{
  const void *v3;
  double *v4;
  const void *v5;
  double *v6;
  double v7;
  double v8;
  unsigned int v9;

  v3 = (const void *)*((_QWORD *)a1 + 29);
  if (v3)
  else
    v4 = 0;
  v5 = (const void *)*((_QWORD *)a2 + 29);
  if (v5)
  else
    v6 = 0;
  v7 = v4[22];
  v8 = v6[22];
  if (vabdd_f64(v7, v8) >= 0.0000001)
    return v7 < v8;
  v9 = (*(uint64_t (**)(double *))(*(_QWORD *)v4 + 32))(v4);
  return v9 < (*(unsigned int (**)(double *))(*(_QWORD *)v6 + 32))(v6);
}

void PSEmitter::initPropertiesFromShape(uint64_t a1, int a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  unsigned int ValueAsInt;
  int v12;
  BOOL EmitAtPoints;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  _BOOL4 v19;
  _BOOL4 v22;
  int v23;
  double v24;
  unsigned int v25;
  double v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  __n128 v40;
  double v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int OrderLength;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  double v57;
  long double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float64_t v63;
  double v64;
  double v65;
  long double v66;
  __double2 v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  PCRandom *v79;
  int v80;
  double RandTEAf;
  PCRandom *v82;
  int v83;
  double v84;
  PCRandom *v85;
  int v86;
  double v87;
  _BOOL4 v88;
  double v89;
  double v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  signed int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  PCRandom *v108;
  int v109;
  int v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  int v116;
  unsigned int v117;
  int v118;
  PCRandom *v119;
  int v120;
  double v121;
  PCRandom *v122;
  int v123;
  double v124;
  int v125;
  uint64_t v126;
  PCRandom *v127;
  int v128;
  double v129;
  PCRandom *v130;
  int v131;
  double v132;
  PCRandom *v133;
  int v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  BOOL v141;
  double v142;
  double v143;
  double v144;
  double v145;
  float64_t v146;
  double v147;
  double v148;
  signed int v149;
  uint64_t v150;
  int v151;
  PCRandom *v152;
  double v153;
  int v154;
  double v155;
  double v156;
  int v157;
  PCRandom *v158;
  int v159;
  double v160;
  double v161;
  int v162;
  double v163;
  double v164;
  PCRandom *v165;
  int v166;
  double v167;
  double v168;
  long double v169;
  double v170;
  _BOOL4 isOrderByRowColStack;
  double v172;
  double v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  BOOL v180;
  int v181;
  uint64_t v182;
  int v183;
  PCRandom *v184;
  double v185;
  double v186;
  double v187;
  PCRandom *v188;
  int v189;
  double v190;
  int v191;
  double v192;
  long double v193;
  double v194;
  _BOOL4 isOrderByRowOrCol;
  double v196;
  int v197;
  int v198;
  double v199;
  _BOOL4 v200;
  double v201;
  double v202;
  int v203;
  int v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  double v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  double v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  BOOL v224;
  double v225;
  char v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  double v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  int v238;
  int v239;
  double v240;
  BOOL v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  BOOL v247;
  signed int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  int v252;
  int v253;
  BOOL v255;
  int v256;
  _BOOL4 v257;
  float64x2_t __y;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double cosval;
  double v271;
  double v272;
  double sinval;
  double v274;
  double v275;
  double v276;
  double v277;

  *a8 = 1;
  v275 = 0.0;
  v276 = 0.0;
  v277 = 1.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 19232), a3, 0.0);
  v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 19896), a3, 0.0);
  if (ValueAsInt == 4)
  {
    EmitAtPoints = PSEmitter::getEmitAtPoints((PSEmitter *)a1);
    v14 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31632), a3, 0.0) == 0;
    v15 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20152), a3, 0.0);
    v257 = 0;
    if (!EmitAtPoints)
    {
      v16 = 1;
      goto LABEL_41;
    }
    goto LABEL_24;
  }
  v17 = v12;
  v19 = ValueAsInt == 10 && v12 == 0;
  v16 = ((ValueAsInt & 0xFFFFFFFB) == 2 || ValueAsInt == 5) && v12 == 0 || v19;
  v22 = PSEmitter::getEmitAtPoints((PSEmitter *)a1);
  v23 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31632), a3, 0.0);
  v14 = v23 == 0;
  v257 = ValueAsInt == 9;
  if (ValueAsInt <= 9 && ((1 << ValueAsInt) & 0x213) != 0)
  {
    v24 = 0.0;
    v15 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20152), a3, 0.0);
    if (!ValueAsInt)
      goto LABEL_46;
    if (!v22)
      goto LABEL_41;
    goto LABEL_23;
  }
  if (ValueAsInt == 6 && !v17 || (ValueAsInt != 5 ? (v34 = ValueAsInt == 2) : (v34 = 1), v34 && !v17))
  {
    v15 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20152), a3, 0.0);
    if (!v22)
    {
LABEL_41:
      v35 = 923990407;
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
      v38 = -32;
      v39 = -1640531527;
      do
      {
        v36 += (v37 + 16 * v35) ^ (v39 + v35) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                               + (v35 >> 5));
        v35 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v36) ^ (v39 + v36) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v36 >> 5));
        v39 -= 1640531527;
        v33 = __CFADD__(v38++, 1);
      }
      while (!v33);
      v26 = (double)(v35 ^ v36);
      v27 = 4294967300.0;
LABEL_45:
      v24 = v26 / v27;
      goto LABEL_46;
    }
LABEL_23:
    if (!v16)
    {
      v25 = v15 - 1;
      if (v15 != 1)
        goto LABEL_25;
      goto LABEL_58;
    }
LABEL_24:
    v16 = 1;
    v25 = v15;
    if (v15)
    {
LABEL_25:
      if (v14 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) >= v15)
      {
        v28 = 923990407;
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
        v31 = -32;
        v32 = -1640531527;
        do
        {
          v29 += (v30 + 16 * v28) ^ (v32 + v28) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                 + (v28 >> 5));
          v28 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v29) ^ (v32 + v29) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v29 >> 5));
          v32 -= 1640531527;
          v33 = __CFADD__(v31++, 1);
        }
        while (!v33);
        v26 = floor((double)(v28 ^ v29) / 4294967300.0 * (double)v15 + 0.0000001);
        v27 = (float)v25;
      }
      else
      {
        v26 = (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
        v27 = (double)v25;
      }
      goto LABEL_45;
    }
LABEL_58:
    v24 = 0.5;
LABEL_46:
    PSEmitter::genOrderLinear((PSEmitter *)a1, v24, v16, v15, a3, (double *)(a5 + 168), (double *)(a5 + 176));
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 23160), a3, 0.0);
    v41 = v24 + v40.n128_f64[0];
    v42 = a6;
    if (v16)
    {
      __y.f64[0] = 0.0;
      modf(v41, (long double *)__y.f64);
      v41 = v41 - __y.f64[0];
      if (v41 < 0.0)
        v41 = v41 + 1.0;
    }
    switch(ValueAsInt)
    {
      case 1u:
        PSEmitter::genPosLine(a1, a3, (double *)a6, a7, v41);
        break;
      case 2u:
        PSEmitter::genPosCircle(a1, a3, a6, a7, v41);
        break;
      case 4u:
        PSEmitter::genPosGeometry(a1, a3, (double *)a6, (_QWORD *)a7, v41);
        break;
      case 5u:
        if (a2 == 2)
        {
          v43 = 0;
          v44 = 0;
        }
        else
        {
          v44 = OZChannel::getValueAsInt((OZChannel *)(a4 + 5368), a3, 0.0) == 4;
          v43 = 0;
          if (OZChannel::getValueAsInt((OZChannel *)(a1 + 27048), a3, 0.0))
          {
            OZChannel::getValueAsDouble((OZChannel *)(a1 + 27200), a3, 0.0);
            if (v40.n128_f64[0] > 0.0)
              v43 = 1;
          }
        }
        v40.n128_f64[0] = v41;
        PSEmitter::initPropertiesFromImageOutline(a1, a3, v43, v44, a5, (double *)a6, a7, v40);
        break;
      case 6u:
        __y.f64[0] = 0.0;
        cosval = 0.0;
        v274 = 0.0;
        OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 25392), a3, __y.f64, &cosval, &v274, 0.0);
        PSEmitter::genPosRect(v41, __y.f64[0], cosval, v45, v46, (double *)a6, a7);
        break;
      case 9u:
        PSEmitter::genPosWave(a1, a3, (double *)a6, (double *)a7, &v275, v41);
        break;
      default:
        goto LABEL_64;
    }
    goto LABEL_64;
  }
  if ((ValueAsInt & 0xFFFFFFFE) == 0xA && (v17 - 1) <= 1)
  {
    v251 = v23;
    v79 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v80 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
    RandTEAf = PCRandom::getRandTEAf(v79, 0x3712F987u, v80);
    v82 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v83 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
    v84 = PCRandom::getRandTEAf(v82, 0x83820093, v83);
    v85 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
    v87 = PCRandom::getRandTEAf(v85, 0x39002838u, v86);
    v88 = v17 != 2 && v22;
    v255 = v88;
    if (v17 != 1 && !v88)
    {
      v89 = v87;
      v90 = 0.0;
      v91 = 1;
      v92 = 1;
      v93 = 1;
      v42 = a6;
      goto LABEL_194;
    }
    v93 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20304), a3, 0.0);
    v116 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20456), a3, 0.0);
    v91 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20608), a3, 0.0);
    v117 = v116 * v93;
    v246 = v116 * v93 * v91;
    v249 = v116;
    v118 = v93 - 1;
    v84 = 0.5;
    RandTEAf = 0.5;
    if (v93 >= 2)
    {
      if (v251 && (*(int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) < v246)
      {
        RandTEAf = (double)((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) % v93) / (double)v118;
        if (v116 < 2)
        {
LABEL_154:
          v154 = v251;
          goto LABEL_155;
        }
        v243 = v116 - 1;
LABEL_148:
        if ((*(int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) < v246)
        {
          v155 = (double)((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) % v117 / v93);
          v156 = (double)v243;
LABEL_153:
          v84 = v155 / v156;
          goto LABEL_154;
        }
LABEL_150:
        v157 = v116;
        v158 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
        v159 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
        v160 = PCRandom::getRandTEAf(v158, 0x83820093, v159);
        if (vabdd_f64(1.0, v160) < 0.0000001)
          v160 = 0.0;
        v161 = (double)v157;
        v118 = v93 - 1;
        v155 = floor(v160 * v161 + 0.0000001);
        v156 = (float)v243;
        goto LABEL_153;
      }
      v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      v151 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
      v152 = (PCRandom *)v150;
      v116 = v249;
      v153 = PCRandom::getRandTEAf(v152, 0x3712F987u, v151);
      if (vabdd_f64(1.0, v153) < 0.0000001)
        v153 = 0.0;
      RandTEAf = floor(v153 * (double)v93 + 0.0000001) / (float)v118;
    }
    v154 = v251;
    if (v116 < 2)
    {
LABEL_155:
      v162 = v91 - 1;
      v89 = 0.5;
      if (v91 >= 2)
      {
        if (v154 && (*(int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) < v246)
        {
          v163 = (double)((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) / v117);
          v164 = (double)v162;
        }
        else
        {
          v165 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
          v166 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
          v167 = PCRandom::getRandTEAf(v165, 0x39002838u, v166);
          if (vabdd_f64(1.0, v167) < 0.0000001)
            v167 = 0.0;
          v163 = floor(v167 * (double)v91 + 0.0000001);
          v164 = (float)v162;
        }
        v89 = v163 / v164;
      }
      v90 = 0.0;
      if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19896), a3, 0.0) == 1)
      {
        v42 = a6;
        if (v93 >= 2)
        {
          OZChannel::getValueAsDouble((OZChannel *)(a1 + 21064), a3, 0.0);
          v169 = v84 * (double)v162 * v168;
          __y.f64[0] = 0.0;
          modf(v169, (long double *)__y.f64);
          v170 = v169 - __y.f64[0];
          isOrderByRowColStack = PSEmitter::isOrderByRowColStack((PSEmitter *)a1);
          v172 = v170 / (double)v118;
          if (isOrderByRowColStack)
            v90 = v170 / (double)v118;
          else
            v90 = 0.0;
          if (isOrderByRowColStack)
            v172 = -0.0;
          RandTEAf = RandTEAf + v172;
        }
      }
      else
      {
        v42 = a6;
      }
      v92 = v249;
LABEL_194:
      if (ValueAsInt == 11)
      {
        PSEmitter::genOrderFilledBox((PSEmitter *)a1, RandTEAf, v84, v89, v93, v92, v91, a3, (double *)(a5 + 168), (double *)(a5 + 176));
        if (*(double *)(a5 + 176) < 0.0)
          *a8 = 0;
        PSEmitter::genPosFilledBox(a1, a3, (float64x2_t *)v42, 0, 0, v90 + RandTEAf, v84, v89);
      }
      else if (ValueAsInt == 10)
      {
        __y = *(float64x2_t *)v42;
        v263 = *(double *)(v42 + 16);
        v180 = PSEmitter::genPosFilledSphere(a1, a3, &__y, &cosval, RandTEAf, v84, v89);
        if (!v255 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 584))(a1) & 1) == 0)
        {
          if (v180)
          {
            v180 = 1;
          }
          else
          {
            v206 = 1;
            do
            {
              v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
              v208 = v206 + 923990407;
              v209 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
              v210 = -32;
              v211 = -1640531527;
              do
              {
                v207 += (v209 + 16 * v208) ^ (v211 + v208) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                            + (v208 >> 5));
                v208 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v207) ^ (v211 + v207) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v207 >> 5));
                v211 -= 1640531527;
                v33 = __CFADD__(v210++, 1);
              }
              while (!v33);
              v212 = (double)(v208 ^ v207);
              v213 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
              v214 = v206 - 2088632173;
              v215 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
              v216 = -32;
              v217 = -1640531527;
              do
              {
                v213 += (v215 + 16 * v214) ^ (v217 + v214) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                            + (v214 >> 5));
                v214 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v213) ^ (v217 + v213) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v213 >> 5));
                v217 -= 1640531527;
                v33 = __CFADD__(v216++, 1);
              }
              while (!v33);
              v218 = (double)(v214 ^ v213);
              v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
              v220 = v206 + 956311608;
              v221 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
              v222 = -32;
              v223 = -1640531527;
              do
              {
                v219 += (v221 + 16 * v220) ^ (v223 + v220) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                            + (v220 >> 5));
                v220 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v219) ^ (v223 + v219) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v219 >> 5));
                v223 -= 1640531527;
                v33 = __CFADD__(v222++, 1);
              }
              while (!v33);
              RandTEAf = v212 / 4294967300.0;
              v84 = v218 / 4294967300.0;
              __y = *(float64x2_t *)a6;
              v263 = *(double *)(a6 + 16);
              v89 = (double)(v220 ^ v219) / 4294967300.0;
              v224 = PSEmitter::genPosFilledSphere(a1, a3, &__y, &cosval, RandTEAf, v84, v89);
              if (v224)
                break;
              v33 = v206++ >= 0x13;
            }
            while (!v33);
            if (v224)
            {
              v180 = 1;
            }
            else
            {
              fwrite("kMaxCirlceAttempts reached\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              v180 = 0;
            }
            v42 = a6;
          }
        }
        *(float64x2_t *)v42 = __y;
        *(double *)(v42 + 16) = v263;
        PSEmitter::genOrderFilledCircle((PSEmitter *)a1, RandTEAf, v84, v89, a3, (double *)(a5 + 168), (double *)(a5 + 176));
        if (*(double *)(a5 + 176) < 0.0)
          *a8 = 0;
        if (!v180)
        {
LABEL_278:
          v227 = MEMORY[0x1E0CA2E68];
          *(_OWORD *)(a5 + 32) = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)(a5 + 48) = *(_QWORD *)(v227 + 16);
        }
      }
      goto LABEL_64;
    }
    v243 = v116 - 1;
    if (!v251)
      goto LABEL_150;
    goto LABEL_148;
  }
  v42 = a6;
  if (ValueAsInt == 11 && !v17)
  {
    if (!v22)
    {
      v127 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      v128 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
      v129 = PCRandom::getRandTEAf(v127, 0x3712F987u, v128);
      v130 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      v131 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
      v132 = PCRandom::getRandTEAf(v130, 0x83820093, v131);
      v133 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      v134 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
      v135 = PCRandom::getRandTEAf(v133, 0x39002838u, v134);
      __y.f64[0] = 0.0;
      cosval = 0.0;
      v274 = 0.0;
      OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 25392), a3, __y.f64, &cosval, &v274, 0.0);
      v136 = (cosval + cosval) * v274;
      v137 = v274 * (__y.f64[0] + __y.f64[0]);
      v138 = cosval * (__y.f64[0] + __y.f64[0]);
      v139 = v136 + v137;
      v140 = v129 * (v138 + v136 + v137);
      v141 = v140 < v137 + v136 + v138 * 0.5;
      v142 = 1.0;
      if (v141)
        v143 = 0.0;
      else
        v143 = 1.0;
      if (v140 >= v136 + v137 * 0.5)
        v144 = 1.0;
      else
        v144 = 0.0;
      if (v140 < v139)
      {
        v145 = v135;
      }
      else
      {
        v144 = v135;
        v145 = v143;
      }
      if (v140 < v136 * 0.5)
        v142 = 0.0;
      if (v140 < v136)
        v146 = v142;
      else
        v146 = v132;
      if (v140 >= v136)
      {
        v132 = v144;
        v135 = v145;
      }
      PSEmitter::genPosFilledBox(a1, a3, (float64x2_t *)a6, (double *)a7, (uint64_t)&v275, v146, v132, v135);
      PSEmitter::genOrderFilledBox((PSEmitter *)a1, v146, v132, v135, 1, 1, 1, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      if (*(double *)(a5 + 176) >= 0.0)
        goto LABEL_64;
LABEL_272:
      *a8 = 0;
      goto LABEL_64;
    }
    v94 = v23;
    v95 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20304), a3, 0.0);
    v96 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20456), a3, 0.0);
    v97 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20608), a3, 0.0);
    if (v95 <= 1)
      v98 = 1;
    else
      v98 = v95;
    v99 = v98 - 1;
    if (v96 <= 1)
      v100 = 1;
    else
      v100 = v96;
    v252 = v99;
    v256 = v100 - 1;
    if (v97 <= 1)
      v101 = 1;
    else
      v101 = v97;
    v102 = v101 - 1;
    if (v95 <= 2)
      v103 = 2;
    else
      v103 = v95;
    v245 = v96 - 2;
    v248 = v102;
    v104 = v97 - 2;
    v105 = v96 * v95;
    v106 = v96 * v95 * v97 - ((v96 - 2) & ~((v96 - 2) >> 31)) * (v103 - 2) * (v104 & ~(v104 >> 31));
    v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    if (!v94 || v107 >= v106)
    {
      v108 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      v109 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
      v110 = (int)(PCRandom::getRandTEAf(v108, 0x3712F987u, v109) * (double)v106);
      if (v106 <= v110)
        v107 = 0;
      else
        v107 = v110;
    }
    v111 = (double)v252;
    v112 = (double)v256;
    if (v107 >= 2 * v105)
    {
      v173 = (double)v248;
      v174 = v104 * v95;
      v175 = (v174 & ~(v174 >> 31)) + v105;
      if (v107 >= 2 * v175)
      {
        v203 = v107 - 2 * v175;
        v204 = v104 * v245;
        v113 = 0.5;
        v115 = 0.5;
        if (v248)
          v115 = (double)(v203 % v104 + 1) / v173;
        v205 = v204 & ~(v204 >> 31);
        v42 = a6;
        if (v256)
        {
          if (v204 <= 1)
            v204 = 1;
          v113 = (double)(v203 % v204 / v104 + 1) / v112;
        }
        if (v203 >= v205)
          v114 = 1.0;
        else
          v114 = 0.0;
        goto LABEL_271;
      }
      v176 = v107 - 2 * v105;
      v115 = 0.5;
      v114 = 0.5;
      if (v252)
        v114 = (double)(v176 % v95) / v111;
      if (v248)
      {
        if (v174 <= 1)
          v177 = 1;
        else
          v177 = v104 * v95;
        v115 = (double)(v176 % v177 / v95 + 1) / v173;
      }
      if (v256)
      {
        if (v174 <= 1)
          v174 = 1;
        v113 = (double)(v176 / v174);
      }
      else
      {
        v113 = 0.5;
      }
    }
    else
    {
      v113 = 0.5;
      v114 = 0.5;
      if (v252)
        v114 = (double)(v107 % v95) / v111;
      if (v256)
        v113 = (double)(v107 % v105 / v95) / v112;
      if (v248)
        v115 = (double)(v107 / v105);
      else
        v115 = 0.5;
    }
    v42 = a6;
LABEL_271:
    PSEmitter::genPosFilledBox(a1, a3, (float64x2_t *)v42, (double *)a7, (uint64_t)&v275, v114, v113, v115);
    PSEmitter::genOrderFilledBox((PSEmitter *)a1, v114, v113, v115, 1, 1, 1, a3, (double *)(a5 + 168), (double *)(a5 + 176));
    goto LABEL_272;
  }
  v250 = ValueAsInt - 9;
  v253 = v23;
  v119 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
  v120 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
  v121 = PCRandom::getRandTEAf(v119, 0x3712F987u, v120);
  v122 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
  v123 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
  v124 = PCRandom::getRandTEAf(v122, 0x83820093, v123);
  if (!v22)
  {
    v147 = v124;
    v148 = 0.0;
    v125 = 1;
    v149 = 1;
    goto LABEL_225;
  }
  v247 = v22;
  if (v250 >= 0xFFFFFFFE)
  {
    v125 = OZChannel::getValueAsInt((OZChannel *)(a1 + 26136), a3, 0.0);
    v126 = 25984;
  }
  else
  {
    v125 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20304), a3, 0.0);
    v126 = 20456;
  }
  v149 = OZChannel::getValueAsInt((OZChannel *)(a1 + v126), a3, 0.0);
  v242 = v125 - 1;
  v244 = v149 * v125;
  if (v16)
    v178 = v125;
  else
    v178 = v125 - 1;
  v147 = 0.5;
  v121 = 0.5;
  if (v178 < 1)
  {
LABEL_206:
    v179 = (__PAIR64__(v149, v250) - 4294967294u) >> 32;
    if (v179 < 1)
      goto LABEL_214;
    if (!v253)
      goto LABEL_210;
    goto LABEL_208;
  }
  if (!v253 || (*(int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) >= v244)
  {
    v181 = v125;
    v182 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v183 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
    v184 = (PCRandom *)v182;
    v125 = v181;
    v185 = PCRandom::getRandTEAf(v184, 0x3712F987u, v183);
    if (vabdd_f64(1.0, v185) < 0.0000001)
      v185 = 0.0;
    v121 = floor(v185 * (double)v181 + 0.0000001) / (float)v178;
    goto LABEL_206;
  }
  v121 = (double)((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) % v125) / (double)v178;
  v179 = (__PAIR64__(v149, v250) - 4294967294u) >> 32;
  if (v179 >= 1)
  {
LABEL_208:
    if ((*(int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) < v244)
    {
      v186 = (double)((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) / v125);
      v187 = (double)v179;
LABEL_213:
      v147 = v186 / v187;
      goto LABEL_214;
    }
LABEL_210:
    v188 = (PCRandom *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v189 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
    v190 = PCRandom::getRandTEAf(v188, 0x83820093, v189);
    if (vabdd_f64(1.0, v190) < 0.0000001)
      v190 = 0.0;
    v186 = floor(v190 * (double)v149 + 0.0000001);
    v187 = (float)v179;
    goto LABEL_213;
  }
LABEL_214:
  v148 = 0.0;
  v42 = a6;
  if (ValueAsInt <= 6 && ((1 << ValueAsInt) & 0x64) != 0)
  {
    v191 = OZChannel::getValueAsInt((OZChannel *)(a1 + 19896), a3, 0.0);
    if (v125 >= 2 && v191 == 1)
    {
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 21064), a3, 0.0);
      v193 = v147 * (double)v179 * v192;
      __y.f64[0] = 0.0;
      modf(v193, (long double *)__y.f64);
      v194 = v193 - __y.f64[0];
      isOrderByRowOrCol = PSEmitter::isOrderByRowOrCol((PSEmitter *)a1);
      v196 = v194 / (double)v242;
      if (isOrderByRowOrCol)
        v148 = v194 / (double)v242;
      else
        v148 = 0.0;
      if (isOrderByRowOrCol)
        v196 = -0.0;
      v121 = v121 + v196;
    }
  }
  LOBYTE(v22) = v247;
LABEL_225:
  switch(ValueAsInt)
  {
    case 2u:
      __y = *(float64x2_t *)v42;
      v263 = *(double *)(v42 + 16);
      v197 = PSEmitter::genPosFilledCircle(a1, a3, &__y, a7, v121, v147);
      if (!v22)
      {
        v198 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 584))(a1);
        if (((v198 | v197) & 1) != 0)
        {
          LOBYTE(v197) = v198 ^ 1 | v197;
        }
        else
        {
          v228 = 1;
          do
          {
            v229 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
            v230 = v228 + 923990407;
            v231 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
            v232 = -32;
            v233 = -1640531527;
            do
            {
              v229 += (v231 + 16 * v230) ^ (v233 + v230) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                          + (v230 >> 5));
              v230 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v229) ^ (v233 + v229) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v229 >> 5));
              v233 -= 1640531527;
              v33 = __CFADD__(v232++, 1);
            }
            while (!v33);
            v234 = (double)(v230 ^ v229);
            v235 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
            v236 = v228 - 2088632173;
            v237 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, a4);
            v238 = -32;
            v239 = -1640531527;
            do
            {
              v235 += (v237 + 16 * v236) ^ (v239 + v236) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                          + (v236 >> 5));
              v236 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v235) ^ (v239 + v235) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v235 >> 5));
              v239 -= 1640531527;
              v33 = __CFADD__(v238++, 1);
            }
            while (!v33);
            v240 = (double)(v236 ^ v235);
            v121 = v234 / 4294967300.0;
            v42 = a6;
            __y = *(float64x2_t *)a6;
            v263 = *(double *)(a6 + 16);
            v147 = v240 / 4294967300.0;
            v241 = PSEmitter::genPosFilledCircle(a1, a3, &__y, a7, v121, v240 / 4294967300.0);
            if (v241)
              break;
            v33 = v228++ >= 0x13;
          }
          while (!v33);
          if (v241)
          {
            LOBYTE(v197) = 1;
          }
          else
          {
            fwrite("kMaxCirlceAttempts reached\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            LOBYTE(v197) = 0;
          }
        }
      }
      *(float64x2_t *)v42 = __y;
      *(double *)(v42 + 16) = v263;
      PSEmitter::genOrderFilledCircle((PSEmitter *)a1, v121, v147, 0.5, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      if (*(double *)(a5 + 176) < 0.0)
        *a8 = 0;
      if ((v197 & 1) == 0)
        goto LABEL_278;
      break;
    case 5u:
      PSEmitter::genOrderFilledRect((PSEmitter *)a1, v121, v147, v125, v149, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      if (*(double *)(a5 + 176) < 0.0)
        *a8 = 0;
      v199 = v148 + v121;
      if (a2 == 2)
      {
        v200 = 0;
      }
      else
      {
        v200 = OZChannel::getValueAsInt((OZChannel *)(a4 + 5368), a3, 0.0) == 4;
        if (OZChannel::getValueAsInt((OZChannel *)(a1 + 27048), a3, 0.0))
        {
          OZChannel::getValueAsDouble((OZChannel *)(a1 + 27200), a3, 0.0);
          if (v225 > 0.0)
          {
            v226 = 1;
            goto LABEL_268;
          }
        }
      }
      v226 = 0;
LABEL_268:
      PSEmitter::initPropertiesFromImage((CGColorSpace **)a1, v199, v147, a3, v226, v200, (PCColor *)a5, (float64x2_t *)v42);
      break;
    case 6u:
      PSEmitter::genOrderFilledRect((PSEmitter *)a1, v121, v147, v125, v149, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      if (*(double *)(a5 + 176) < 0.0)
        *a8 = 0;
      PSEmitter::genPosFilledRect(a1, a3, (float64x2_t *)v42, v148 + v121, v147);
      break;
    case 7u:
      PSEmitter::genOrderRadial((PSEmitter *)a1, v121, v125, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 23160), a3, 0.0);
      PSEmitter::genPosRadial(a1, a3, v42, a7, v121 + v201, v147);
      break;
    case 8u:
      PSEmitter::genOrderRadial((PSEmitter *)a1, v121, v125, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 23160), a3, 0.0);
      PSEmitter::genPosSpiral(a1, a3, (float64x2_t *)v42, a7, v121 + v202, v147);
      break;
    case 0xAu:
      PSEmitter::genPosSurfaceSphere(a1, a3, (float64x2_t *)v42, (float64x2_t *)a7, &v275, v121, v147);
      PSEmitter::genOrderLinear((PSEmitter *)a1, v121, v16, v125, a3, (double *)(a5 + 168), (double *)(a5 + 176));
      break;
    default:
      break;
  }
LABEL_64:
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 23008), a3, 0.0) && *a8)
  {
    OrderLength = PSEmitter::getOrderLength((PSEmitter *)a1, a3);
    v48 = (*(double *)(a5 + 168) * (double)OrderLength + 0.00001);
    v49 = OrderLength - 1;
    if (OrderLength - 1 >= v48)
      v50 = v48;
    else
      v50 = v49;
    v51 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31784), MEMORY[0x1E0CA2E68], 0.0);
    v52 = PSEmitter::shuffleOrder((PSEmitter *)a1, v50, OrderLength, v51);
    *(double *)(a5 + 168) = (double)v52 / (double)v49;
    *(double *)(a5 + 176) = (double)v52;
  }
  if (PSEmitter::canAlignRotation((PSEmitter *)a1, a3)
    && OZChannel::getValueAsInt((OZChannel *)(a4 + 2184), a3, 0.0))
  {
    cosval = 1.0;
    v271 = 0.0;
    v272 = 0.0;
    sinval = 0.0;
    if ((ValueAsInt & 0xFFFFFFFE) == 0xA)
    {
      v57 = *(double *)(a7 + 8);
      v53.i64[0] = *(_QWORD *)(a7 + 16);
      v58 = *(double *)a7;
      *(double *)v55.i64 = v276 * *(double *)v53.i64 - v277 * v57;
      v59 = v277 * *(double *)a7 - *(double *)v53.i64 * v275;
      v60 = v57 * v275 - v276 * *(double *)a7;
      v61 = -v275;
      *(double *)v54.i64 = -v276;
      *(double *)v56.i64 = -v277;
      __y.f64[0] = -v275;
      __y.f64[1] = *(double *)v55.i64;
      v267 = -v277;
      v268 = v60;
      v263 = v58;
      v264 = -v276;
      v265 = v59;
      v266 = v57;
      v269 = *(double *)v53.i64;
    }
    else
    {
      if (!v257)
      {
        v66 = atan2(*(long double *)a7, -*(double *)(a7 + 8));
        v67 = __sincos_stret(v66 * 0.5);
        cosval = v67.__cosval;
        v271 = v67.__sinval * 0.0;
        v272 = v67.__sinval * 0.0;
        sinval = v67.__sinval;
LABEL_78:
        if (&cosval != (double *)(v42 + 24))
        {
          v68 = *(double *)(v42 + 24);
          v69 = *(double *)(v42 + 32);
          v70 = *(double *)(v42 + 40);
          v71 = *(double *)(v42 + 48);
          v72 = v68 * cosval - (v69 * v271 + v70 * v272 + v71 * sinval);
          v73 = cosval * v69 + v68 * v271;
          v74 = cosval * v70 + v68 * v272;
          v75 = cosval * v71 + v68 * sinval;
          v76 = v70 * sinval - v272 * v71;
          v77 = v271 * v71 - v69 * sinval;
          v78 = v69 * v272 - v271 * v70;
          *(double *)(v42 + 40) = v74 + v77;
          *(double *)(v42 + 48) = v78 + v75;
          *(double *)(v42 + 24) = v72;
          *(double *)(v42 + 32) = v73 + v76;
        }
        return;
      }
      v62 = *(double *)(a7 + 8);
      v53.i64[0] = *(_QWORD *)(a7 + 16);
      v61 = v275;
      *(double *)v54.i64 = v276;
      *(double *)v56.i64 = v277;
      v63 = *(double *)a7;
      *(double *)v55.i64 = -(v276 * *(double *)v53.i64 - v277 * v62);
      v64 = -(v277 * *(double *)a7 - *(double *)v53.i64 * v275);
      v65 = -(v62 * v275 - v276 * *(double *)a7);
      __y.f64[0] = *(double *)v55.i64;
      __y.f64[1] = v63;
      v267 = v65;
      v268 = *(double *)v53.i64;
      v263 = v275;
      v264 = v64;
      v265 = v62;
      v266 = v276;
      v269 = v277;
    }
    PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)&__y, (uint64_t)&cosval, v53, v54, v61, v55, v56);
    goto LABEL_78;
  }
}

BOOL PSEmitter::getEmitAtPoints(PSEmitter *this)
{
  const CMTime *v2;
  int ValueAsInt;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  BOOL v7;
  int v8;

  v2 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19744), MEMORY[0x1E0CA2E68], 0.0);
  v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), v2, 0.0);
  v5 = v4;
  if (ValueAsInt)
  {
    result = 1;
    v7 = v5 > 6;
    v8 = (1 << v5) & 0x64;
    if (!v7 && v8 != 0)
      return OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) != 2;
  }
  else
  {
    return v4 <= 6
        && ((1 << v4) & 0x64) != 0
        && OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) == 1;
  }
  return result;
}

void PSEmitter::genOrderLinear(PSEmitter *this, double a2, int a3, unsigned int a4, const CMTime *a5, double *a6, double *a7)
{
  int v11;
  double v12;
  int ValueAsInt;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double __y;

  if (!a3)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22240), a5, 0.0);
    if (ValueAsInt == 2)
    {
      v17 = fabs(a2 + -0.5);
      v18 = v17 + v17;
      *a6 = v18;
      v19 = ceil((double)a4 * 0.5) + -1.0;
    }
    else
    {
      if (ValueAsInt != 1)
      {
        if (ValueAsInt)
          return;
        *a6 = a2;
        v14 = (double)(a4 - 1) * a2;
        goto LABEL_18;
      }
      v18 = 1.0 - a2;
      v19 = (double)(a4 - 1);
      *a6 = 1.0 - a2;
    }
    v14 = v18 * v19;
LABEL_18:
    __y = 0.0;
    modf(v14 + 0.0001, &__y);
    v16 = __y;
    goto LABEL_19;
  }
  v11 = OZChannel::getValueAsInt((OZChannel *)this + 148, a5, 0.0);
  if (v11)
  {
    if (v11 == 1)
    {
      *a6 = a2;
      if (a7)
      {
        v12 = (double)a4 * a2 + 0.5 + 0.0000001;
LABEL_14:
        v16 = (double)(int)vcvtmd_s64_f64(v12);
LABEL_19:
        *a7 = v16;
      }
    }
  }
  else
  {
    v15 = 1.0 - a2;
    if (vabdd_f64(1.0, 1.0 - a2) < 0.0000001)
      v15 = 0.0;
    *a6 = v15;
    if (a7)
    {
      v12 = v15 * (double)a4 + 0.5 + 0.0000001;
      goto LABEL_14;
    }
  }
}

float64x2_t PSEmitter::genPosCircle(uint64_t a1, const CMTime *a2, uint64_t a3, uint64_t a4, double a5)
{
  double v7;
  double v8;
  double v9;
  __double2 v10;
  float64x2_t result;

  v7 = a5 * -2.0 * 3.14159265;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23312), a2, 0.0);
  v9 = v8;
  v10 = __sincos_stret(v7);
  *(double *)a4 = v10.__cosval * v9;
  *(double *)(a4 + 8) = v10.__sinval * v9;
  *(_QWORD *)(a4 + 16) = 0;
  *(double *)a3 = v10.__cosval * v9 + *(double *)a3;
  result = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v10.__sinval * v9), *(float64x2_t *)(a3 + 8));
  *(float64x2_t *)(a3 + 8) = result;
  return result;
}

double PSEmitter::genPosLine(uint64_t a1, const CMTime *a2, double *a3, uint64_t a4, double a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double result;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23600), a2, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23752), a2, 0.0);
  v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24200), a2, 0.0);
  v15 = v14;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24488), a2, 0.0);
  v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24640), a2, 0.0);
  v19 = v18;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 25088), a2, 0.0);
  v21 = v20;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  if (v22)
    v23 = v21;
  else
    v23 = 0.0;
  if (!v22)
    v15 = 0.0;
  v24 = v17 - v11;
  v25 = v19 - v13;
  v26 = v23 - v15;
  v27 = v24 * v24 + v25 * v25 + v26 * v26;
  if (v27 <= -0.0000001 || v27 >= 0.0000001)
  {
    *(double *)a4 = v25;
    *(double *)(a4 + 8) = -v24;
    *(_QWORD *)(a4 + 16) = 0;
    PCVector3<double>::normalize((double *)a4, 0.000000100000001);
  }
  v28 = v13 + v25 * a5 + a3[1];
  *a3 = v11 + v24 * a5 + *a3;
  a3[1] = v28;
  result = v15 + v26 * a5 + a3[2];
  a3[2] = result;
  return result;
}

void PSEmitter::genPosGeometry(uint64_t a1, const CMTime *a2, double *a3, _QWORD *a4, long double a5)
{
  uint64_t v10;
  _QWORD *v11;
  double v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  OZRenderState v21;
  double v22;
  double i;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 616))(a1);
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v22 = 0.0;
    for (i = 0.0; a5 < 0.0; a5 = a5 + 1.0)
      ;
    for (; a5 > 1.0; a5 = a5 + -1.0)
      ;
    v12 = 0.0;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 31936), MEMORY[0x1E0CA2E68], 0.0))
    {
      OZRenderState::OZRenderState(&v21);
      *(_OWORD *)&v21.var0.var0 = *(_OWORD *)&a2->value;
      v21.var0.var3 = a2->epoch;
      v19 = 0;
      v20 = 0;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 608))(a1);
      OZRotoshape::getReparametrizedPointOnContour((uint64_t)v11, (__int128 *)&v21.var0.var0, &i, &v22, (double *)&v20, (double *)&v19, v13, 0, a5, 0);
      v14 = i;
      v15 = v14 * (*(double (**)(_QWORD *))(v11[25] + 1328))(v11 + 25);
      v16 = v19;
      *a4 = v20;
      a4[1] = v16;
      a4[2] = 0;
    }
    else
    {
      v17 = (_QWORD *)v11[2431];
      if (v17)
        v12 = (double)((int)((v17[1] - *v17) >> 3) / 2);
      OZChannelCurve::getCurveValueWithParameter((OZChannelCurve *)(v11 + 2398), a2, a5 * v12, &i, &v22);
      v15 = i;
    }
    v18 = a3[1] + v22;
    *a3 = *a3 + v15;
    a3[1] = v18;
  }
}

double PSEmitter::genPosRect(double a1, double a2, double a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  __int128 v17;
  double v18;
  double v19;
  double result;
  double v21;

  v7 = a2 / a3;
  v8 = v7 + v7 + 2.0;
  v9 = 1.0 / v8;
  if (1.0 / v8 <= a1)
  {
    v14 = v7 / v8;
    if (v9 + v14 <= a1)
    {
      v18 = v14 + v9 + v9;
      if (v18 > a1)
      {
        v19 = 1.0 - (a1 - (v9 + v14)) / v9;
        v11 = a2 * 0.5;
        v12 = (v19 + v19 + -1.0) * a3 * 0.5;
        *(_QWORD *)(a7 + 16) = 0;
        v13 = 0x3FF0000000000000;
        goto LABEL_7;
      }
      v11 = (1.0 - (a1 - v18) / v14 + 1.0 - (a1 - v18) / v14 + -1.0) * a2 * 0.5;
      v16 = -0.5;
      v17 = xmmword_1B305A270;
    }
    else
    {
      v15 = ((a1 - v9) / v14 + (a1 - v9) / v14 + -1.0) * a2;
      v16 = 0.5;
      v11 = v15 * 0.5;
      v17 = xmmword_1B304EEE0;
    }
    v12 = a3 * v16;
    *(_OWORD *)a7 = v17;
    *(_QWORD *)(a7 + 16) = 0;
    goto LABEL_10;
  }
  v10 = a1 / v9;
  v11 = a2 * -0.5;
  v12 = (v10 + v10 + -1.0) * a3 * 0.5;
  *(_QWORD *)(a7 + 16) = 0;
  v13 = 0xBFF0000000000000;
LABEL_7:
  *(_QWORD *)a7 = v13;
  *(_QWORD *)(a7 + 8) = 0;
LABEL_10:
  result = v11 + *a6;
  v21 = v12 + a6[1];
  *a6 = result;
  a6[1] = v21;
  return result;
}

double PSEmitter::initPropertiesFromImageOutline(uint64_t a1, const CMTime *a2, int a3, int a4, uint64_t a5, double *a6, uint64_t a7, __n128 a8)
{
  double *v8;
  double v9;
  double v10;
  char v15;
  double v17;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  signed int v29;
  uint64_t BytesPerRow;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  unint64_t v38;
  float v39;
  unint64_t v40;
  float v41;
  float v42;
  OZChannelBase v44;

  v8 = (double *)(a1 + 33512);
  v9 = *(double *)(a1 + 33536);
  if (v9 != 0.0)
  {
    v10 = *(double *)(a1 + 33544);
    if (v10 != 0.0)
    {
      v15 = a3;
      v17 = a8.n128_f64[0];
      if (a3)
      {
        v19 = *(_QWORD *)v8;
        if (!*(_QWORD *)v8)
          return a8.n128_f64[0];
      }
      else
      {
        if (!a4)
        {
          a8.n128_f64[0] = PSEmitter::genPosRect(a8.n128_f64[0], v9, v10, a1, (uint64_t)a2, a6, a7);
          return a8.n128_f64[0];
        }
        v19 = *(_QWORD *)v8;
      }
      memset(&v44.var1, 0, 24);
      v20 = (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v8 + 24))(*(_QWORD *)v8);
      v22 = (double)v21;
      PSEmitter::genPosRect(v17, v20, (double)v21, v21, v23, (double *)&v44.var1, a7);
      v24 = v20 * 0.5 + *(double *)&v44.var1;
      v25 = v22 * 0.5 + *(double *)&v44.var2;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 27200), a2, 0.0);
      v27 = vcvtmd_s64_f64(v26 * 255.0 + 0.5 + 0.0000001);
      v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v8 + 64) + 16))(*(_QWORD *)(*(_QWORD *)v8 + 64));
      v29 = (*(_DWORD *)(*(_QWORD *)v8 + 36) * *(_DWORD *)(*(_QWORD *)v8 + 40)) >> 3;
      BytesPerRow = PCBitmap::getBytesPerRow(*(PCBitmap **)v8);
      v32 = vcvtmd_s64_f64(v24 + 0.0000001);
      v33 = vcvtmd_s64_f64(v25 + 0.0000001);
      v34 = (unsigned __int8 *)(v28
                              + BytesPerRow * (uint64_t)(v33 - ((double)v33 == v22))
                              + v29 * (uint64_t)(v32 - ((double)v32 == v20)));
      if (v27 > *v34 && (v15 & 1) != 0)
      {
        v35 = MEMORY[0x1E0CA2E68];
        a8 = *(__n128 *)MEMORY[0x1E0CA2E68];
        *(_OWORD *)(a5 + 32) = *MEMORY[0x1E0CA2E68];
        *(_QWORD *)(a5 + 48) = *(_QWORD *)(v35 + 16);
      }
      else
      {
        a8.n128_f64[0] = PSEmitter::genPosRect(v17, v8[3], v8[4], BytesPerRow, v31, a6, a7);
        if (a4)
        {
          a8.n128_u8[0] = v34[1];
          *(double *)&v36 = (double)a8.n128_u64[0] / 255.0;
          v37 = *(double *)&v36;
          LOBYTE(v36) = v34[2];
          *(double *)&v38 = (double)v36 / 255.0;
          v39 = *(double *)&v38;
          LOBYTE(v38) = v34[3];
          *(double *)&v40 = (double)v38 / 255.0;
          v41 = *(double *)&v40;
          LOBYTE(v40) = *v34;
          v42 = (double)v40 / 255.0;
          PCImage::getColorSpace(*(PCImage **)v8, (CGColorSpace **)&v44);
          PCColor::setRGBA((PCColor *)(a5 + 112), v37, v39, v41, v42, &v44);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v44);
        }
      }
    }
  }
  return a8.n128_f64[0];
}

void sub_1B2FAEDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

BOOL PSEmitter::genPosWave(uint64_t a1, const CMTime *a2, double *a3, double *a4, double *a5, double a6)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  __double2 v50;
  double v51;
  double v52;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;

  v11 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23600), a2, 0.0);
  v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23752), a2, 0.0);
  v15 = v14;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24200), a2, 0.0);
  v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24488), a2, 0.0);
  v19 = v18;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24640), a2, 0.0);
  v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 25088), a2, 0.0);
  v23 = v22;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  if (v24)
    v25 = v23;
  else
    v25 = 0.0;
  if (v24)
    v26 = v17;
  else
    v26 = 0.0;
  v59 = v15;
  v60 = v13;
  v27 = v19 - v13;
  v28 = v21 - v15;
  v29 = v25 - v26;
  v30 = v27 * v27;
  v31 = v27 * v27 + v28 * v28;
  v32 = sqrt(v31 + v29 * v29);
  if (v32 <= -0.0000001 || (v33 = 1.0, v34 = 0.0, v35 = 0.0, v36 = 0.0, v32 >= 0.0000001))
  {
    v57 = v26;
    v37 = v31 <= 0.0;
    v38 = v29 - v28 * 0.0;
    if (v31 > 0.0)
    {
      v38 = 0.0 - v28;
      v39 = v27;
    }
    else
    {
      v30 = (v27 * 0.0 - v29 * 0.0) * (v27 * 0.0 - v29 * 0.0);
      v39 = v27 * 0.0 - v29 * 0.0;
    }
    if (v37)
      v34 = v28 * 0.0 - v27;
    else
      v34 = v28 * 0.0 - v27 * 0.0;
    v40 = sqrt(v38 * v38 + v30 + v34 * v34);
    if (v40 <= -0.000000100000001 || v40 >= 0.000000100000001)
    {
      v56 = v38 / v40;
      v58 = v39 / v40;
      v34 = v34 / v40;
    }
    else
    {
      v56 = v38;
      v58 = v39;
    }
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26592), a2, 0.0);
    v42 = v41;
    v55 = v41;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26440), a2, 0.0);
    v44 = v43;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26744), a2, 0.0);
    v54 = v45 + (v42 * a6 + v42 * a6) * 3.14159265;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26896), a2, 0.0);
    v47 = fabs(v46);
    if (v46 >= 0.0)
      v48 = a6;
    else
      v48 = 1.0 - a6;
    v49 = exp(-(v47 * v48));
    v50 = __sincos_stret(v54);
    v35 = v50.__sinval * (v44 * v49);
    v51 = v50.__cosval * (v44 * 6.28318531 * v49 / v32);
    v11 = v56;
    v36 = v55 * v51;
    v26 = v57;
    v33 = v58;
  }
  v52 = v59 + v28 * a6 + v33 * v35 + a3[1];
  *a3 = v60 + v27 * a6 + v11 * v35 + *a3;
  a3[1] = v52;
  a3[2] = v26 + v29 * a6 + v34 * v35 + a3[2];
  if (v32 <= -0.000000100000001 || v32 >= 0.000000100000001)
  {
    v27 = v27 / v32;
    v28 = v28 / v32;
    v29 = v29 / v32;
  }
  *a4 = v11 - v36 * v27;
  a4[1] = v33 - v36 * v28;
  a4[2] = v34 - v36 * v29;
  PCVector3<double>::normalize(a4, 0.000000100000001);
  *a5 = v34 * v28 - v33 * v29;
  a5[1] = v11 * v29 - v34 * v27;
  a5[2] = v33 * v27 - v11 * v28;
  return PCVector3<double>::normalize(a5, 0.000000100000001);
}

BOOL PSEmitter::isOrderByRowColStack(PSEmitter *this)
{
  const CMTime *v3;
  int ValueAsInt;
  unsigned int v5;
  BOOL v6;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), MEMORY[0x1E0CA2E68], 0.0) != 11
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) == 2)
  {
    return 0;
  }
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21984), MEMORY[0x1E0CA2E68], 0.0);
  v5 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21728), v3, 0.0);
  if (ValueAsInt)
    v6 = v5 >= 8;
  else
    v6 = 1;
  return !v6;
}

BOOL PSEmitter::genPosFilledSphere(uint64_t a1, const CMTime *a2, float64x2_t *a3, float64_t *a4, float64_t a5, float64_t a6, double a7)
{
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23312), a2, 0.0);
  v11 = v10 * v10;
  v12.f64[0] = a5;
  v12.f64[1] = a6;
  v13 = vaddq_f64(v12, v12);
  __asm { FMOV            V3.2D, #-1.0 }
  v19 = vmulq_n_f64(vaddq_f64(v13, _Q3), v10);
  v20 = (a7 + a7 + -1.0) * v10;
  v21 = v20 * v20 + vaddvq_f64(vmulq_f64(v19, v19));
  if (v21 <= v11)
  {
    *a3 = vaddq_f64(v19, *a3);
    a3[1].f64[0] = v20 + a3[1].f64[0];
    if (v21 <= -0.0000001 || v21 >= 0.0000001)
    {
      v22 = sqrt(v21);
      v23 = v19.f64[1];
      if (v22 <= -0.000000100000001 || v22 >= 0.000000100000001)
      {
        v19.f64[0] = v19.f64[0] / v22;
        v23 = v19.f64[1] / v22;
        v20 = v20 / v22;
      }
      *a4 = v19.f64[0];
      a4[1] = v23;
      a4[2] = v20;
    }
  }
  return v21 <= v11;
}

uint64_t PSEmitter::genOrderFilledCircle(PSEmitter *this, double a2, double a3, double a4, const CMTime *a5, double *a6, double *a7)
{
  double v9;
  uint64_t result;
  double v11;

  v9 = sqrt((a2 + a2 + -1.0) * (a2 + a2 + -1.0) + (a3 + a3 + -1.0) * (a3 + a3 + -1.0) + (a4 + a4 + -1.0)
                                                                                      * (a4 + a4 + -1.0));
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22752), a5, 0.0);
  v11 = 1.0 - v9;
  if ((_DWORD)result != 1)
    v11 = v9;
  *a6 = v11;
  if (a7)
    *a7 = -1.0;
  return result;
}

void PSEmitter::genOrderFilledBox(PSEmitter *this, double a2, double a3, double a4, int a5, int a6, int a7, const CMTime *a8, double *a9, double *a10)
{
  signed int ValueAsInt;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double __y;
  _DWORD v51[3];
  _DWORD v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21728), a8, 0.0);
  v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21984), a8, 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) == 2)
    v22 = 0;
  else
    v22 = v21;
  if (ValueAsInt == 14)
  {
    v23 = sqrt((a2 + -0.5 + a2 + -0.5) * (a2 + -0.5 + a2 + -0.5)+ (a3 + -0.5 + a3 + -0.5) * (a3 + -0.5 + a3 + -0.5)+ (a4 + -0.5 + a4 + -0.5) * (a4 + -0.5 + a4 + -0.5));
    v24 = 1.73205081;
LABEL_19:
    v30 = v23 / v24;
LABEL_20:
    *a9 = v30;
    if (a10)
      *a10 = -1.0;
    return;
  }
  if ((ValueAsInt - 15) <= 2)
  {
    v25 = a2 + -0.5 + a2 + -0.5;
    v26 = a3 + -0.5 + a3 + -0.5;
    v27 = a4 + -0.5 + a4 + -0.5;
    if (ValueAsInt == 16)
      v28 = 0.0;
    else
      v28 = a3 + -0.5 + a3 + -0.5;
    if (ValueAsInt == 16)
      v29 = a4 + -0.5 + a4 + -0.5;
    else
      v29 = 0.0;
    if (ValueAsInt == 15)
      v25 = 0.0;
    else
      v26 = v28;
    if (ValueAsInt != 15)
      v27 = v29;
    v23 = sqrt(v25 * v25 + v26 * v26 + v27 * v27);
    v24 = 1.41421356;
    goto LABEL_19;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(ValueAsInt), (int32x4_t)xmmword_1B3563600))) & 1) != 0
    || ValueAsInt == 8
    || (v22 ? (v31 = ValueAsInt == 13) : (v31 = 1), v31))
  {
    if (ValueAsInt > 0xD)
    {
      v43 = 1.0;
      v37 = 0.0;
      v38 = 0.0;
      v39 = 0.0;
      v40 = 0.0;
      v41 = 0.0;
      v42 = 0.0;
    }
    else
    {
      v37 = dbl_1B35640D8[ValueAsInt];
      v38 = dbl_1B3564148[ValueAsInt];
      v39 = dbl_1B35641B8[ValueAsInt];
      v40 = dbl_1B3564228[ValueAsInt];
      v41 = dbl_1B3564298[ValueAsInt];
      v42 = dbl_1B3564308[ValueAsInt];
      v43 = dbl_1B3564378[ValueAsInt];
    }
    v30 = ((a2 - v37) * v40 + (a3 - v38) * v41 + (a4 - v39) * v42) / v43;
    goto LABEL_20;
  }
  v32 = a5 - 1;
  v33 = vcvtmd_s64_f64((double)(a5 - 1) * a2 + 0.5 + 0.0000001);
  v34 = a6 - 1;
  v35 = vcvtmd_s64_f64((double)(a6 - 1) * a3 + 0.5 + 0.0000001);
  v36 = vcvtmd_s64_f64((double)(a7 - 1) * a4 + 0.5 + 0.0000001);
  switch(ValueAsInt)
  {
    case 0:
      goto LABEL_31;
    case 1:
      v33 = v32 - v33;
LABEL_31:
      v35 = v34 - v35;
      goto LABEL_39;
    case 2:
      goto LABEL_39;
    case 3:
      v33 = v32 - v33;
LABEL_39:
      v36 = a7 - 1 - v36;
      break;
    case 4:
      goto LABEL_37;
    case 5:
      v33 = v32 - v33;
LABEL_37:
      v35 = v34 - v35;
      break;
    case 7:
      v33 = v32 - v33;
      break;
    default:
      break;
  }
  v52[0] = a5;
  v52[1] = a6;
  v52[2] = a7;
  v51[0] = v33;
  v51[1] = v35;
  v44 = v22 - 1;
  v51[2] = v36;
  if ((v22 - 1) > 4)
  {
    v45 = 0;
    v47 = 2;
    v46 = 1;
  }
  else
  {
    v45 = qword_1B35643E8[v44];
    v46 = qword_1B3564410[v44];
    v47 = qword_1B3564438[v44];
  }
  v48 = (double)(a6 * a5 * a7 - 1);
  v49 = (double)(v51[v47] + (v51[v46] + v51[v45] * v52[v46]) * v52[v47]) / v48;
  *a9 = v49;
  if (a10)
  {
    __y = 0.0;
    modf(v49 * v48 + 0.0001, &__y);
    *a10 = __y;
  }
}

void PSEmitter::genPosFilledBox(uint64_t a1, const CMTime *a2, float64x2_t *a3, double *a4, uint64_t a5, float64_t a6, float64_t a7, double a8)
{
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  double v15;
  float64x2_t v21;
  float64_t v23;
  float64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v36;
  float64_t v37;
  float64_t v38;

  v37 = 0.0;
  v38 = 0.0;
  v36 = 0.0;
  OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 25392), a2, &v38, &v37, &v36, 0.0);
  v12.f64[0] = a6;
  v12.f64[1] = a7;
  v13 = a8 + a8 + -1.0;
  v14.f64[0] = v38;
  v15 = v13 * v36 * 0.5 + a3[1].f64[0];
  __asm { FMOV            V4.2D, #-1.0 }
  v21 = vaddq_f64(vaddq_f64(v12, v12), _Q4);
  v14.f64[1] = v37;
  __asm { FMOV            V4.2D, #0.5 }
  *a3 = vaddq_f64(vmulq_f64(vmulq_f64(v21, v14), _Q4), *a3);
  a3[1].f64[0] = v15;
  if (a4 && a5)
  {
    a4[1] = 0.0;
    *a4 = 0.0;
    a4[2] = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    if (vabdd_f64(1.0, fabs(v21.f64[0])) < 0.0000001)
    {
      *a4 = v21.f64[0];
      v24 = v21.f64[0];
      a4[1] = 0.0;
      a4[2] = 0.0;
    }
    if (vabdd_f64(1.0, fabs(v21.f64[1])) < 0.0000001)
    {
      *a4 = v24;
      a4[1] = v21.f64[1];
      v23 = v21.f64[1];
      a4[2] = 0.0;
    }
    if (vabdd_f64(1.0, fabs(v13)) < 0.0000001)
    {
      *a4 = v24;
      a4[1] = v23;
      a4[2] = v13;
    }
    PCVector3<double>::normalize(a4, 0.000000100000001);
    v26 = *a4;
    v25 = a4[1];
    v27 = a4[2];
    v28 = v25 * 0.0 - v27;
    v29 = v27 * 0.0 - *a4 * 0.0;
    v30 = *a4 - v25 * 0.0;
    if (v30 * v30 + v28 * v28 + v29 * v29 <= 0.0)
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0xBFF0000000000000;
    }
    else
    {
      v31 = v27 * v29 - v25 * v30;
      v32 = v26 * v30 - v27 * v28;
      v33 = v25 * v28 - v26 * v29;
      *(double *)a5 = v31;
      *(double *)(a5 + 8) = v32;
      *(double *)(a5 + 16) = v33;
      if (v32 < 0.0)
      {
        *(double *)a5 = -v31;
        *(double *)(a5 + 8) = -v32;
        *(double *)(a5 + 16) = -v33;
      }
      PCVector3<double>::normalize((double *)a5, 0.000000100000001);
    }
  }
}

BOOL PSEmitter::isOrderByRowOrCol(PSEmitter *this)
{
  const CMTime *v3;
  int ValueAsInt;
  unsigned int v5;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), MEMORY[0x1E0CA2E68], 0.0) - 7 < 0xFFFFFFFE
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) == 2)
  {
    return 0;
  }
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21472), MEMORY[0x1E0CA2E68], 0.0);
  v5 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21216), v3, 0.0);
  return (ValueAsInt - 1) < 2 && v5 < 4;
}

BOOL PSEmitter::genPosFilledCircle(uint64_t a1, const CMTime *a2, float64x2_t *a3, uint64_t a4, float64_t a5, float64_t a6)
{
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v17;
  double v18;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23312), a2, 0.0);
  v9 = v8 * v8;
  v10.f64[0] = a5;
  v10.f64[1] = a6;
  v11 = vaddq_f64(v10, v10);
  __asm { FMOV            V2.2D, #-1.0 }
  v17 = vmulq_n_f64(vaddq_f64(v11, _Q2), v8);
  v18 = vaddvq_f64(vmulq_f64(v17, v17));
  if (v18 <= v9)
  {
    *a3 = vaddq_f64(v17, *a3);
    a3[1].f64[0] = a3[1].f64[0] + 0.0;
    if (v18 <= -0.0000001 || v18 >= 0.0000001)
    {
      *(float64x2_t *)a4 = v17;
      *(_QWORD *)(a4 + 16) = 0;
      PCVector3<double>::normalize((double *)a4, 0.000000100000001);
    }
    else
    {
      *(_OWORD *)a4 = xmmword_1B304EEE0;
      *(_QWORD *)(a4 + 16) = 0;
    }
  }
  return v18 <= v9;
}

double PSEmitter::genPosSurfaceSphere(uint64_t a1, const CMTime *a2, float64x2_t *a3, float64x2_t *a4, double *a5, double a6, double a7)
{
  double v12;
  double v13;
  __double2 v14;
  double v15;
  double v16;
  double v17;
  double result;

  v12 = a7 + a7 + -1.0;
  v13 = sqrt(1.0 - v12 * v12);
  v14 = __sincos_stret(a6 * 6.28318531);
  a4->f64[0] = v14.__cosval * v13;
  a4->f64[1] = -v12;
  a4[1].f64[0] = v14.__sinval * v13;
  *a5 = v12 * -0.0 - v14.__sinval * v13;
  a5[1] = v14.__sinval * v13 * 0.0 + v14.__cosval * v13 * -0.0;
  a5[2] = v14.__cosval * v13 - v12 * -0.0;
  PCVector3<double>::normalize(a5, 0.000000100000001);
  v15 = sqrt(*a5 * *a5 + a5[1] * a5[1] + a5[2] * a5[2]);
  if (v15 > -0.0000001 && v15 < 0.0000001)
  {
    *a5 = -v14.__sinval;
    a5[1] = 0.0;
    a5[2] = v14.__cosval;
  }
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23312), a2, 0.0);
  v17 = v16 * a4[1].f64[0];
  *a3 = vaddq_f64(vmulq_n_f64(*a4, v16), *a3);
  result = v17 + a3[1].f64[0];
  a3[1].f64[0] = result;
  return result;
}

void PSEmitter::genOrderFilledRect(PSEmitter *this, double a2, double a3, unsigned int a4, unsigned int a5, const CMTime *a6, double *a7, double *a8)
{
  signed int ValueAsInt;
  int v17;
  double v18;
  BOOL v19;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  double v36;
  double v37;
  double __y;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21216), a6, 0.0);
  v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21472), a6, 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), MEMORY[0x1E0CA2E68], 0.0) == 2)
    v17 = 0;
  if (ValueAsInt == 4)
  {
    v18 = sqrt((a2 + -0.5 + a2 + -0.5) * (a2 + -0.5 + a2 + -0.5) + (a3 + -0.5 + a3 + -0.5) * (a3 + -0.5 + a3 + -0.5))
        / 1.41421356;
    goto LABEL_28;
  }
  if (v17)
    v19 = ValueAsInt == 5;
  else
    v19 = 1;
  if (v19 || ValueAsInt == 6 || ValueAsInt == 7 || ValueAsInt == 8)
  {
    if (ValueAsInt > 8)
    {
      v27 = 1.0;
      v23 = 0.0;
      v24 = 0.0;
      v25 = 0.0;
      v26 = 0.0;
    }
    else
    {
      v23 = dbl_1B3564460[ValueAsInt];
      v24 = dbl_1B35644A8[ValueAsInt];
      v25 = dbl_1B35644F0[ValueAsInt];
      v26 = dbl_1B3564538[ValueAsInt];
      v27 = dbl_1B3564580[ValueAsInt];
    }
    v18 = (v24 * (a3 - v25) + v23 * (a2 - v26)) / v27;
LABEL_28:
    *a7 = v18;
    v32 = -1.0;
    if (!a8)
      return;
LABEL_43:
    *a8 = v32;
    return;
  }
  v28 = a4 - 1;
  v29 = vcvtmd_s64_f64((double)(a4 - 1) * a2 + 0.5 + 0.0000001);
  v30 = a5 - 1;
  v31 = vcvtmd_s64_f64((double)(a5 - 1) * a3 + 0.5 + 0.0000001);
  switch(ValueAsInt)
  {
    case 3:
      v29 = v28 - v29;
      break;
    case 1:
      v29 = v28 - v29;
      v31 = v30 - v31;
      break;
    case 0:
      v31 = v30 - v31;
      if (v31 >= a5)
        fwrite("WTH\n", 4uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      break;
  }
  if (v17 == 1)
    v33 = a4;
  else
    v33 = a5;
  if (v17 == 1)
    v34 = v29;
  else
    v34 = v31;
  if (v17 == 1)
    v35 = v31;
  else
    v35 = v29;
  v36 = (double)(a5 * a4 - 1);
  v37 = (double)(v34 + v35 * v33) / v36;
  *a7 = v37;
  if (a8)
  {
    __y = 0.0;
    modf(v37 * v36 + 0.0001, &__y);
    v32 = __y;
    goto LABEL_43;
  }
}

CGColorSpace **PSEmitter::initPropertiesFromImage(CGColorSpace **this, float64_t a2, float64_t a3, const CMTime *a4, char a5, int a6, PCColor *a7, float64x2_t *a8)
{
  float64x2_t v8;
  _QWORD *v9;
  float64x2_t v10;
  float64x2_t v15;
  int64x2_t v21;
  int32x2_t v22;
  double v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  signed int v28;
  float64x2_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  float64x2_t v33;
  int32x2_t v34;
  int64x2_t v35;
  double v37;
  unint64_t v38;
  float v39;
  unint64_t v40;
  float v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  double v47;
  OZChannelBase v48;

  v8.f64[0] = a2;
  v9 = this + 4189;
  *(_QWORD *)&v10.f64[0] = this[4192];
  if (v10.f64[0] != 0.0 && *((double *)this + 4193) != 0.0)
  {
    if ((a5 & 1) == 0 && (a6 & 1) == 0)
    {
      *(_QWORD *)&v10.f64[1] = this[4193];
      v8.f64[1] = a3;
      v15 = vmulq_f64(v10, v8);
      __asm { FMOV            V2.2D, #-0.5 }
      *(int32x2_t *)&v15.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v15, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
      v21.i64[0] = SLODWORD(v15.f64[0]);
      v21.i64[1] = SHIDWORD(v15.f64[0]);
      v22 = vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvtq_f64_s64(v21), vmulq_f64(v10, _Q2))));
      v21.i64[0] = v22.i32[0];
      v21.i64[1] = v22.i32[1];
      *a8 = vaddq_f64(*a8, vcvtq_f64_s64(v21));
      a8[1].f64[0] = a8[1].f64[0] + 0.0;
      return this;
    }
    if (*v9)
    {
      v47 = v8.f64[0];
      OZChannel::getValueAsDouble((OZChannel *)(this + 3400), a4, 0.0);
      v24 = vcvtmd_s64_f64(v23 * 255.0 + 0.5 + 0.0000001);
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
      v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9);
      v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 64) + 16))(*(_QWORD *)(*v9 + 64));
      v28 = (*(_DWORD *)(*v9 + 36) * *(_DWORD *)(*v9 + 40)) >> 3;
      this = (CGColorSpace **)PCBitmap::getBytesPerRow((PCBitmap *)*v9);
      v29.f64[0] = v47;
      v30 = vcvtmd_s64_f64((double)v25 * v47 + 0.0000001);
      v31 = vcvtmd_s64_f64((double)v26 * a3 + 0.0000001);
      v32 = (unsigned __int8 *)(v27
                              + this * (uint64_t)(int)(v31 - (v26 == v31))
                              + v28 * (uint64_t)(int)(v30 - (v25 == v30)));
      if (v24 <= *v32 || (a5 & 1) == 0)
      {
        v29.f64[1] = a3;
        v33 = *(float64x2_t *)(v9 + 3);
        v34 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v33, v29), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
        v35.i64[0] = v34.i32[0];
        v35.i64[1] = v34.i32[1];
        __asm { FMOV            V2.2D, #-0.5 }
        *(int32x2_t *)&v33.f64[0] = vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvtq_f64_s64(v35), vmulq_f64(v33, _Q2))));
        v35.i64[0] = SLODWORD(v33.f64[0]);
        v35.i64[1] = SHIDWORD(v33.f64[0]);
        *a8 = vaddq_f64(*a8, vcvtq_f64_s64(v35));
        v37 = a8[1].f64[0] + 0.0;
        a8[1].f64[0] = v37;
        if (a6)
        {
          LOBYTE(v37) = v32[1];
          *(double *)&v38 = (double)*(unint64_t *)&v37 / 255.0;
          v39 = *(double *)&v38;
          LOBYTE(v38) = v32[2];
          *(double *)&v40 = (double)v38 / 255.0;
          v41 = *(double *)&v40;
          LOBYTE(v40) = v32[3];
          *(double *)&v42 = (double)v40 / 255.0;
          v43 = *(double *)&v42;
          LOBYTE(v42) = *v32;
          v44 = (double)v42 / 255.0;
          PCImage::getColorSpace((PCImage *)*v9, (CGColorSpace **)&v48);
          PCColor::setRGBA(a7 + 2, v39, v41, v43, v44, &v48);
          return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v48);
        }
        return this;
      }
    }
    else
    {
      this = (CGColorSpace **)OZChanObjectManipRef::getObjectID((OZChannel *)this + 181);
      if (!(_DWORD)this)
        return this;
    }
    v45 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)&a7->var0.var1[3] = *MEMORY[0x1E0CA2E68];
    a7->var1._obj = *(CGColorSpace **)(v45 + 16);
  }
  return this;
}

void sub_1B2FB0208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

float64x2_t PSEmitter::genPosFilledRect(uint64_t a1, const CMTime *a2, float64x2_t *a3, float64_t a4, float64_t a5)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v13;
  float64x2_t result;
  double v18;
  float64_t v19;
  float64_t v20;

  v19 = 0.0;
  v20 = 0.0;
  v18 = 0.0;
  OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 25392), a2, &v20, &v19, &v18, 0.0);
  v6.f64[0] = a4;
  v6.f64[1] = a5;
  v7 = vaddq_f64(v6, v6);
  v6.f64[0] = v20;
  __asm { FMOV            V2.2D, #-1.0 }
  v6.f64[1] = v19;
  v13 = vmulq_f64(vaddq_f64(v7, _Q2), v6);
  __asm { FMOV            V1.2D, #0.5 }
  result = vaddq_f64(*a3, vmulq_f64(v13, _Q1));
  *a3 = result;
  return result;
}

void PSEmitter::genOrderRadial(PSEmitter *this, double a2, int a3, const CMTime *a4, double *a5, double *a6)
{
  int ValueAsInt;
  double v11;
  double __y;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22752), a4, 0.0);
  v11 = 1.0 - a2;
  if (ValueAsInt != 1)
    v11 = a2;
  *a5 = v11;
  if (a6)
  {
    __y = 0.0;
    modf(v11 * (double)(a3 - 1) + 0.0001, &__y);
    *a6 = __y;
  }
}

float64x2_t PSEmitter::genPosRadial(uint64_t a1, const CMTime *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  double v12;
  double v13;
  int ValueAsInt;
  double v15;
  double v16;
  double v17;
  __double2 v18;
  float64x2_t result;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23312), a2, 0.0);
  v13 = v12;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 25984), a2, 0.0);
  v15 = floor((double)ValueAsInt * a6 + 0.01 + 0.0000001) / (double)ValueAsInt;
  v16 = v13 * a5;
  if (v15 <= (double)ValueAsInt)
    v17 = (v15 + v15) * 3.14159265;
  else
    v17 = 0.0;
  v18 = __sincos_stret(v17);
  *(double *)a4 = v16 * v18.__sinval;
  *(double *)(a4 + 8) = -(v16 * v18.__cosval);
  *(_QWORD *)(a4 + 16) = 0;
  PCVector3<double>::normalize((double *)a4, 0.000000100000001);
  *(double *)a3 = *(double *)a3 + v16 * v18.__cosval;
  result = vaddq_f64(*(float64x2_t *)(a3 + 8), (float64x2_t)COERCE_UNSIGNED_INT64(v16 * v18.__sinval));
  *(float64x2_t *)(a3 + 8) = result;
  return result;
}

float64x2_t PSEmitter::genPosSpiral(uint64_t a1, const CMTime *a2, float64x2_t *a3, uint64_t a4, double a5, double a6)
{
  double v12;
  double v13;
  double ValueAsInt;
  double v15;
  double v16;
  double v17;
  __double2 v18;
  float64x2_t v19;
  float64x2_t result;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23312), a2, 0.0);
  v13 = v12;
  ValueAsInt = (double)(int)OZChannel::getValueAsInt((OZChannel *)(a1 + 25984), a2, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 26288), a2, 0.0);
  v15 = floor(ValueAsInt * a6 + 0.01 + 0.0000001);
  v17 = v16 * 6.28318531 * a5;
  v18 = __sincos_stret(v17 + (v15 / ValueAsInt + v15 / ValueAsInt) * 3.14159265);
  *(double *)a4 = v13 * v18.__sinval + v17 * (v13 * v18.__cosval);
  *(double *)(a4 + 8) = -(v13 * v18.__cosval - v17 * (v13 * v18.__sinval));
  *(_QWORD *)(a4 + 16) = 0;
  PCVector3<double>::normalize((double *)a4, 0.000000100000001);
  v19.f64[0] = v18.__cosval;
  v19.f64[1] = v18.__sinval;
  result = vaddq_f64(*a3, vmulq_n_f64(v19, v13 * a5));
  *a3 = result;
  return result;
}

uint64_t PSEmitter::getOrderLength(PSEmitter *this, const CMTime *a2)
{
  _DWORD *v2;
  uint64_t v3;
  int ValueAsInt;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t NumEmissionPoints;
  uint64_t v14;
  int v16;
  int v17;
  PSEmitter *v18;
  unsigned int v19;
  PSEmitter *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  double v31;
  unsigned int v32;
  double v33;
  double v34;
  int v35;
  double v36;
  uint64_t v37;
  double *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  double v45;
  signed int v46;
  signed int v47;
  uint64_t v48;
  double v49;
  int v50;
  double v51;
  double v52;
  int v53;
  double v54;
  uint64_t v55;
  double *v56;
  unsigned int v57;
  double v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  int v65;
  double v66;
  double v67;
  int v68;
  double v69;
  double v70;
  double v71;
  char v72;
  uint64_t v73;
  double *v74;
  int v75;
  int v76;
  PSEmitter *v77;
  unsigned int v78;
  PSEmitter *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  double v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  double v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  double v95;
  double v96;
  double v97;
  double v98;
  int v99;
  double v100;
  uint64_t v101;
  double *v102;
  double v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  int v115;
  double v116;
  uint64_t v117;
  double *v118;
  uint64_t v119;
  double v120;
  _DWORD *v121;
  double v122;
  OZChannel *v123;
  OZChannel *v124;
  PSEmitter *v125;
  int v126;
  uint64_t v127;
  double v128;
  const CMTime *v129;
  uint64_t v130;
  double v131;
  float64_t v132[3];
  float64x2_t __y;
  uint64_t v134;

  v2 = (_DWORD *)((char *)this + 33584);
  v3 = *((unsigned int *)this + 8396);
  if ((v3 & 0x80000000) != 0)
  {
    *v2 = 0;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), a2, 0.0);
    v7 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), a2, 0.0);
    if (!ValueAsInt)
    {
      v3 = 1;
LABEL_19:
      *v2 = v3;
      return v3;
    }
    v8 = v7;
    v9 = ValueAsInt - 5;
    v10 = ValueAsInt != 2 && v9 >= 2;
    v11 = !v10;
    if (v11 == 1 && v7 == 0)
    {
      v14 = 20152;
LABEL_17:
      NumEmissionPoints = OZChannel::getValueAsInt((OZChannel *)((char *)this + v14), a2, 0.0);
      goto LABEL_18;
    }
    if (ValueAsInt == 4)
    {
      NumEmissionPoints = PSEmitter::getNumEmissionPoints(this, a2);
LABEL_18:
      v3 = NumEmissionPoints;
      goto LABEL_19;
    }
    if ((ValueAsInt & 0xFFFFFFF7) == 1)
    {
      v3 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 22240), a2, 0.0) == 2)
        LODWORD(v3) = vcvtpd_s64_f64((double)(int)v3 * 0.5);
      goto LABEL_19;
    }
    if (v7 != 2)
      v11 = 0;
    if (v11 == 1)
    {
      v121 = v2;
      v16 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
      v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31784), a2, 0.0);
      v127 = operator new[]();
      if (v16 < 1)
      {
        v3 = 0;
      }
      else
      {
        v18 = this;
        v19 = 0;
        v3 = 0;
        v20 = v18;
        v123 = (OZChannel *)((char *)v18 + 22752);
        do
        {
          v21 = 0;
          do
          {
            v22 = v21 + 923990407;
            v23 = -32;
            v24 = -1640531527;
            v25 = v19;
            do
            {
              v25 += (v17 + 16 * v22) ^ (v24 + v22) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                     + (v22 >> 5));
              v22 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v25) ^ (v24 + v25) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v25 >> 5));
              v24 -= 1640531527;
              v10 = __CFADD__(v23++, 1);
            }
            while (!v10);
            v26 = (double)(v22 ^ v25);
            v27 = v21 - 2088632173;
            v28 = -32;
            v29 = -1640531527;
            v30 = v19;
            do
            {
              v30 += (v17 + 16 * v27) ^ (v29 + v27) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                     + (v27 >> 5));
              v27 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v30) ^ (v29 + v30) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v30 >> 5));
              v29 -= 1640531527;
              v10 = __CFADD__(v28++, 1);
            }
            while (!v10);
            v31 = v26 / 4294967300.0;
            v32 = v27 ^ v30;
            v33 = (double)(v27 ^ v30) / 4294967300.0;
            if (ValueAsInt != 2)
            {
              __y.f64[0] = 0.0;
              PSEmitter::genOrderFilledRect(v20, v31, (double)v32 / 4294967300.0, 2u, 2u, a2, __y.f64, 0);
              v36 = __y.f64[0];
              goto LABEL_44;
            }
            __y = 0uLL;
            v134 = 0;
            memset(v132, 0, sizeof(v132));
            if (PSEmitter::genPosFilledCircle((uint64_t)v20, a2, &__y, (uint64_t)v132, v31, (double)v32 / 4294967300.0))
              break;
            v10 = v21++ >= 0x13;
          }
          while (!v10);
          v34 = sqrt((v31 + v31 + -1.0) * (v31 + v31 + -1.0) + (v33 + v33 + -1.0) * (v33 + v33 + -1.0));
          v35 = OZChannel::getValueAsInt(v123, a2, 0.0);
          v36 = 1.0 - v34;
          if (v35 != 1)
            v36 = v34;
LABEL_44:
          if ((int)v3 < 1)
          {
LABEL_48:
            *(double *)(v127 + 8 * (int)v3) = v36;
            v3 = (v3 + 1);
          }
          else
          {
            v37 = v3;
            v38 = (double *)v127;
            while (vabdd_f64(v36, *v38) >= 0.0000001)
            {
              ++v38;
              if (!--v37)
                goto LABEL_48;
            }
          }
          ++v19;
        }
        while (v19 != v16);
      }
      v44 = v127;
LABEL_62:
      MEMORY[0x1B5E2914C](v44, 0x1000C8000313F17);
      v2 = v121;
      goto LABEL_19;
    }
    if (v9 <= 1)
    {
      v39 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21216), a2, 0.0);
      if (PSEmitter::isOrderByRowOrCol(this))
      {
        v40 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
        v3 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0) * v40;
        goto LABEL_19;
      }
      if ((v39 - 5) > 1)
      {
        if ((v39 - 7) > 1)
        {
          v45 = 0.0;
          v46 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
          v47 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0);
          v48 = operator new[]();
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21064), a2, 0.0);
          v128 = v49;
          if (v47 < 1)
          {
            v3 = 0;
          }
          else
          {
            v50 = 0;
            v3 = 0;
            v51 = (double)(v46 - 1);
            do
            {
              v52 = 0.0;
              if (v8 == 1 && !PSEmitter::isOrderByRowOrCol(this))
              {
                __y.f64[0] = 0.0;
                modf(v128 * v45, (long double *)__y.f64);
                v52 = (v128 * v45 - __y.f64[0]) / v51;
              }
              if (v46 >= 1)
              {
                v53 = 0;
                v54 = 0.0;
                do
                {
                  __y.f64[0] = 0.0;
                  PSEmitter::genOrderFilledRect(this, v52 + v54 / v51, v45 / (double)(v47 - 1), v46, v47, a2, __y.f64, 0);
                  if ((int)v3 < 1)
                  {
LABEL_76:
                    *(float64_t *)(v48 + 8 * (int)v3) = __y.f64[0];
                    v3 = (v3 + 1);
                  }
                  else
                  {
                    v55 = v3;
                    v56 = (double *)v48;
                    while (vabdd_f64(__y.f64[0], *v56) >= 0.0000001)
                    {
                      ++v56;
                      if (!--v55)
                        goto LABEL_76;
                    }
                  }
                  v54 = v54 + 1.0;
                  ++v53;
                }
                while (v53 != v46);
              }
              v45 = v45 + 1.0;
              ++v50;
            }
            while (v50 != v47);
          }
          v119 = v48;
LABEL_171:
          MEMORY[0x1B5E2914C](v119, 0x1000C8000313F17);
          goto LABEL_19;
        }
LABEL_139:
        v14 = 20456;
        goto LABEL_17;
      }
      goto LABEL_160;
    }
    if ((ValueAsInt != 11 || v7 >= 2) && (ValueAsInt != 10 || v7 != 1))
    {
      if ((ValueAsInt & 0xFFFFFFFE) == 0xA && v7 == 2)
      {
        v75 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
        v76 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31784), a2, 0.0);
        v126 = v75;
        v130 = operator new[]();
        if (v75 < 1)
        {
          v3 = 0;
        }
        else
        {
          v77 = this;
          v78 = 0;
          v3 = 0;
          v79 = v77;
          v124 = (OZChannel *)((char *)v77 + 22752);
          do
          {
            v80 = 0;
            do
            {
              v81 = v80 + 923990407;
              v82 = -32;
              v83 = -1640531527;
              v84 = v78;
              do
              {
                v84 += (v76 + 16 * v81) ^ (v83 + v81) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                       + (v81 >> 5));
                v81 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v84) ^ (v83 + v84) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v84 >> 5));
                v83 -= 1640531527;
                v10 = __CFADD__(v82++, 1);
              }
              while (!v10);
              v85 = (double)(v81 ^ v84);
              v86 = v80 - 2088632173;
              v87 = -32;
              v88 = -1640531527;
              v89 = v78;
              do
              {
                v89 += (v76 + 16 * v86) ^ (v88 + v86) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                       + (v86 >> 5));
                v86 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v89) ^ (v88 + v89) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v89 >> 5));
                v88 -= 1640531527;
                v10 = __CFADD__(v87++, 1);
              }
              while (!v10);
              v90 = (double)(v86 ^ v89);
              v91 = v80 + 956311608;
              v92 = -32;
              v93 = -1640531527;
              v94 = v78;
              do
              {
                v94 += (v76 + 16 * v91) ^ (v93 + v91) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                       + (v91 >> 5));
                v91 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v94) ^ (v93 + v94) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v94 >> 5));
                v93 -= 1640531527;
                v10 = __CFADD__(v92++, 1);
              }
              while (!v10);
              v95 = v85 / 4294967300.0;
              v96 = v90 / 4294967300.0;
              v97 = (double)(v91 ^ v94) / 4294967300.0;
              if (ValueAsInt != 10)
              {
                __y.f64[0] = 0.0;
                PSEmitter::genOrderFilledBox(v79, v95, v90 / 4294967300.0, v97, 2, 2, 2, a2, __y.f64, 0);
                v100 = __y.f64[0];
                goto LABEL_132;
              }
              __y = 0uLL;
              v134 = 0;
              if (PSEmitter::genPosFilledSphere((uint64_t)v79, a2, &__y, v132, v95, v90 / 4294967300.0, v97))
                break;
              v10 = v80++ >= 0x13;
            }
            while (!v10);
            v98 = sqrt((v95 + v95 + -1.0) * (v95 + v95 + -1.0) + (v96 + v96 + -1.0) * (v96 + v96 + -1.0));
            v99 = OZChannel::getValueAsInt(v124, a2, 0.0);
            v100 = 1.0 - v98;
            if (v99 != 1)
              v100 = v98;
LABEL_132:
            if ((int)v3 < 1)
            {
LABEL_136:
              *(double *)(v130 + 8 * (int)v3) = v100;
              v3 = (v3 + 1);
            }
            else
            {
              v101 = v3;
              v102 = (double *)v130;
              while (vabdd_f64(v100, *v102) >= 0.0000001)
              {
                ++v102;
                if (!--v101)
                  goto LABEL_136;
              }
            }
            ++v78;
          }
          while (v78 != v126);
        }
        v119 = v130;
        goto LABEL_171;
      }
      if (ValueAsInt == 2 && v7 == 1)
      {
        v103 = 0.0;
        v104 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
        v105 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0);
        v106 = operator new[]();
        if (v104 < 1)
        {
          v3 = 0;
        }
        else
        {
          v107 = 0;
          v3 = 0;
          do
          {
            v131 = v103;
            if (v105 >= 1)
            {
              v108 = 0;
              v109 = v103 / (double)v104;
              v110 = v109 * v109;
              v111 = (v109 + v109 + -1.0) * (v109 + v109 + -1.0);
              v112 = 0.0;
              do
              {
                v113 = v112 / (double)v105;
                if (v110 + v113 * v113 <= 1.0)
                {
                  v114 = sqrt(v111 + (v113 + v113 + -1.0) * (v113 + v113 + -1.0));
                  v115 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22752), a2, 0.0);
                  v116 = 1.0 - v114;
                  if (v115 != 1)
                    v116 = v114;
                  if ((int)v3 < 1)
                  {
LABEL_153:
                    *(double *)(v106 + 8 * (int)v3) = v116;
                    v3 = (v3 + 1);
                  }
                  else
                  {
                    v117 = v3;
                    v118 = (double *)v106;
                    while (vabdd_f64(v116, *v118) >= 0.0000001)
                    {
                      ++v118;
                      if (!--v117)
                        goto LABEL_153;
                    }
                  }
                }
                v112 = v112 + 1.0;
                ++v108;
              }
              while (v108 != v105);
            }
            v103 = v131 + 1.0;
            ++v107;
          }
          while (v107 != v104);
        }
        v119 = v106;
        goto LABEL_171;
      }
      if (ValueAsInt != 10 || v7)
      {
        if ((ValueAsInt - 7) > 1)
        {
          v3 = 0;
          goto LABEL_19;
        }
        v14 = 26136;
        goto LABEL_17;
      }
      goto LABEL_160;
    }
    v41 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21728), a2, 0.0);
    if (PSEmitter::isOrderByRowColStack(this))
    {
      v42 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
      v43 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0) * v42;
      v3 = v43 * OZChannel::getValueAsInt((OZChannel *)((char *)this + 20608), a2, 0.0);
      goto LABEL_19;
    }
    v57 = v41 & 0xFFFFFFFE;
    if ((v41 & 0xFFFFFFFE) == 0xC)
    {
      v14 = 20608;
      goto LABEL_17;
    }
    if (v57 == 10)
      goto LABEL_139;
    if (v57 == 8)
    {
LABEL_160:
      v14 = 20304;
      goto LABEL_17;
    }
    v121 = v2;
    v58 = 0.0;
    v59 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
    v60 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0);
    v125 = this;
    v129 = a2;
    v61 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20608), a2, 0.0);
    v62 = operator new[]();
    if (v61 < 1)
    {
      v3 = 0;
LABEL_166:
      v44 = v62;
      goto LABEL_62;
    }
    v63 = 0;
    v3 = 0;
    v64 = v8 != 0;
    while (1)
    {
      v120 = v58;
      if (v60 >= 1)
        break;
LABEL_108:
      v58 = v120 + 1.0;
      if (++v63 == v61)
        goto LABEL_166;
    }
    v65 = 0;
    v66 = v58 / (double)(v61 - 1);
    v67 = 0.0;
    while (1)
    {
      v122 = v67;
      if (v59 >= 1)
        break;
LABEL_107:
      v67 = v122 + 1.0;
      if (++v65 == v60)
        goto LABEL_108;
    }
    v68 = 0;
    v69 = v67 / (double)(v60 - 1);
    v70 = 0.0;
    while (1)
    {
      v71 = v70 / (double)(v59 - 1);
      if (ValueAsInt == 10)
      {
        if (sqrt((v66 + v66 + -1.0) * (v66 + v66 + -1.0)+ (v69 + v69 + -1.0) * (v69 + v69 + -1.0)+ (v71 + v71 + -1.0) * (v71 + v71 + -1.0)) <= 1.0)goto LABEL_101;
      }
      else
      {
        if (v68)
          v72 = v64;
        else
          v72 = 1;
        if (!v63 || !v65 || (v72 & 1) != 0 || v59 - 1 == v68 || v60 - 1 == v65 || v61 - 1 == v63)
        {
LABEL_101:
          __y.f64[0] = 0.0;
          PSEmitter::genOrderFilledBox(v125, v71, v69, v66, v59, v60, v61, v129, __y.f64, 0);
          if ((int)v3 < 1)
          {
LABEL_105:
            *(float64_t *)(v62 + 8 * (int)v3) = __y.f64[0];
            v3 = (v3 + 1);
          }
          else
          {
            v73 = v3;
            v74 = (double *)v62;
            while (vabdd_f64(__y.f64[0], *v74) >= 0.0000001)
            {
              ++v74;
              if (!--v73)
                goto LABEL_105;
            }
          }
        }
      }
      v70 = v70 + 1.0;
      if (++v68 == v59)
        goto LABEL_107;
    }
  }
  return v3;
}

uint64_t PSEmitter::shuffleOrder(PSEmitter *this, uint64_t a2, unsigned int a3, unsigned int a4)
{
  char *v7;
  PCMutex *v8;
  _DWORD *v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v7 = (char *)this + 33664;
    v8 = (PCMutex *)((char *)this + 33592);
    PCMutex::lock((PCMutex *)((char *)this + 33592));
    if (*((_QWORD *)v7 + 1) == __PAIR64__(a4, a3))
    {
      v9 = *(_DWORD **)v7;
    }
    else
    {
      if (*(_QWORD *)v7)
        MEMORY[0x1B5E2914C](*(_QWORD *)v7, 0x1000C8052888210);
      *(_QWORD *)v7 = 0;
      v9 = (_DWORD *)operator new[]();
      v11 = 0;
      *(_QWORD *)v7 = v9;
      *((_DWORD *)v7 + 2) = a3;
      *((_DWORD *)v7 + 3) = a4;
      do
      {
        v9[v11] = v11;
        ++v11;
      }
      while (a3 != v11);
      v12 = 0;
LABEL_11:
      PCRandomShuffleUsingLRand48<int *>((uint64_t)v9, (uint64_t)&v9[a3], a4);
      v13 = 0;
      ++a4;
      v9 = *(_DWORD **)v7;
      while (v13 == v9[v13])
      {
        if (a3 == ++v13)
        {
          if (v12++ < 9)
            goto LABEL_11;
          *v9 = a3 - 1;
          v9[a3 - 1] = 0;
          break;
        }
      }
    }
    a2 = v9[a2];
    PCMutex::unlock(v8);
  }
  return a2;
}

uint64_t PSEmitter::canAlignRotation(PSEmitter *this, const CMTime *a2)
{
  unsigned int ValueAsInt;
  int v5;
  unsigned int v7;
  BOOL v8;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), a2, 0.0);
  v5 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), a2, 0.0);
  if (ValueAsInt == 1)
    return 1;
  v7 = (0x390u >> ValueAsInt) & 1;
  if (ValueAsInt > 9)
    v7 = 0;
  if (v5)
    v8 = 0;
  else
    v8 = ValueAsInt == 10;
  if (v8)
    v7 = 1;
  if (((ValueAsInt & 0xFFFFFFFB) == 2 || ValueAsInt == 5 || ValueAsInt == 11) && v5 == 0)
    return 1;
  else
    return v7;
}

uint64_t PSEmitter::getNumEmissionPoints(PSEmitter *this, const CMTime *a2)
{
  uint64_t result;
  unsigned int ValueAsInt;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  result = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 592))(this);
  if (!(_DWORD)result)
    return result;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), a2, 0.0);
  if (!ValueAsInt)
    return 1;
  v6 = ValueAsInt;
  v7 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), a2, 0.0);
  if ((v6 & 0xFFFFFFF7) == 1)
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
  if (v6 <= 6 && ((1 << v6) & 0x64) != 0)
  {
    if ((v7 & 0xFFFFFFFD) == 0)
      return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
  }
  else if (v6 - 7 <= 1)
  {
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 26136), a2, 0.0);
    v9 = 25984;
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + v9), a2, 0.0) * v8;
  }
  if (v6 == 4)
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
  if ((v6 & 0xFFFFFFFE) != 0xA)
  {
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
    v9 = 20456;
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + v9), a2, 0.0) * v8;
  }
  if (v7)
  {
    if (v7 == 2)
      return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20152), a2, 0.0);
    if (v7 == 1)
    {
      v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
      v11 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0) * v10;
      return v11 * OZChannel::getValueAsInt((OZChannel *)((char *)this + 20608), a2, 0.0);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v12 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
    v13 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20456), a2, 0.0);
    v14 = v13;
    if (v6 == 11)
    {
      v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20608), a2, 0.0);
      if (v12 <= 2)
        v16 = 2;
      else
        v16 = v12;
      v17 = v16 - 2;
      if (v14 <= 2)
        v18 = 2;
      else
        v18 = v14;
      v19 = v18 - 2;
      if (v15 <= 2)
        v20 = 2;
      else
        v20 = v15;
      return (v14 * v12 * v15 - v19 * v17 * (v20 - 2));
    }
    else
    {
      return (v13 * v12);
    }
  }
}

BOOL PSEmitter::shouldDrawEmissionPoints(PSEmitter *this)
{
  return PSEmitter::getEmitAtPoints(this)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), MEMORY[0x1E0CA2E68], 0.0) == 0;
}

uint64_t PSEmitter::getSourceBitmap(int a1, void *a2, OZRenderParams *a3, uint64_t a4, uint64_t a5)
{
  double v13;
  void *v14;
  LiSimpleCamera *v16;
  _QWORD *RenderNodeList;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  LiGroup *v26;
  int v27;
  PCShared_base *v28;
  float64x2_t v29;
  uint64_t WorkingColorDescription;
  float BlendingGamma;
  uint64_t v32;
  GLRenderer *v33;
  __int128 v34;
  __CFString *v35;
  HGRenderer *HeliumRenderer;
  uint64_t v37;
  uint64_t WorkingColorSpace;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _OWORD v50[3];
  uint64_t v51;
  _QWORD v52[20];
  _QWORD v53[31];
  PCSharedCount v54;
  PCSharedCount v55[2];
  PCSharedCount v56;
  void *v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  _OWORD v61[2];
  BOOL v62;
  CGColorSpace *v63;
  std::__shared_weak_count *v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  PCSharedCount v74;
  PCSharedCount v75;
  PCString v76;
  __int128 v77;
  char v78;
  LiImageSource *var0;
  PCSharedCount v80;
  HGRenderer *v81;
  std::__shared_weak_count *v82;
  PCSharedCount v83;
  PCSharedCount v84;
  _QWORD v85[2];
  __int128 v86;
  OZChannelBase v87;
  void *v88;
  char v89;
  __int128 v90;
  __int128 v91;

  OZRenderParams::OZRenderParams((OZRenderParams *)&v87, a3);
  OZRenderParams::setImageType((uint64_t)&v87, 1);
  v89 = 1;
  v90 = 0u;
  v91 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  v50[0] = _Q0;
  OZRenderParams::setResolution(&v87, v50);
  v88 = a2;
  v87.var5 = (PCString *)0x3FF0000000000000;
  v90 = 0u;
  v91 = 0u;
  v13 = 1.0;
  if (a2)
  {
    if (v14)
    {
      v87.var7 = (unint64_t)v14;
      v13 = (*(double (**)(void *))(*(_QWORD *)v14 + 1328))(v14);
    }
  }
  v85[1] = 0;
  v85[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v86 = _Q0;
  (*(void (**)(void *, _QWORD *, OZRenderParams *))(*(_QWORD *)a2 + 16))(a2, v85, a3);
  v16 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v16);
  v83.var0 = (PC_Sp_counted_base *)v16;
  PCSharedCount::PCSharedCount(&v84, (LiSimpleCamera *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  if (!v83.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v83.var0 + 640))(v83.var0, 1);
  if (!v83.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v83.var0 + 512))(v83.var0, 0.0);
  if (!v83.var0)
    throw_PCNullPointerException(1);
  v50[0] = v86;
  (*(void (**)(PC_Sp_counted_base *, _OWORD *))(*(_QWORD *)v83.var0 + 288))(v83.var0, v50);
  if (!v83.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v83.var0 + 696))(v83.var0, v13);
  OZRenderParams::setCamera((uint64_t)&v87, &v83);
  RenderNodeList = (_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)a3);
  PGHelium::acquireRenderer(RenderNodeList, v18, v19, v20, v21, v22, v23, &v81);
  var0 = 0;
  PCSharedCount::PCSharedCount(&v80);
  if (v24)
  {
    v25 = v24;
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v50);
    (*(void (**)(PCSharedCount *__return_ptr, void *, OZChannelBase *, _OWORD *, _QWORD))(*(_QWORD *)v25 + 1936))(&v54, v25, &v87, v50, 0);
    var0 = (LiImageSource *)v54.var0;
    PCSharedCount::PCSharedCount((PCSharedCount *)v65, v55);
    PCSharedCount::operator=((uint64_t *)&v80, (uint64_t *)v65);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v65);
    PCSharedCount::~PCSharedCount(v55);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v53);
    std::__list_imp<unsigned int>::clear(v52);
  }
  else
  {
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&v77, (OZImageNode *)a2, (OZRenderParams *)&v87);
    OZChannelBase::setRangeName(&v87, &v76);
    v26 = (LiGroup *)operator new();
    LiGroup::LiGroup(v26);
    *(_QWORD *)&v50[0] = v26;
    PCSharedCount::PCSharedCount((PCSharedCount *)v50 + 1, (LiGroup *)((char *)v26 + *(_QWORD *)(*(_QWORD *)v26 - 24)));
    LiGraphBuilder::LiGraphBuilder(&v54, v50, &v76);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v50 + 1);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v50);
    v53[9] = &v54;
    (*(void (**)(void *, OZChannelBase *, PCSharedCount *, _OWORD *))(*(_QWORD *)a2 + 184))(a2, &v87, &v54, v50);
    LiGraphBuilder::getLastChildInCurrentGroup((LiGraphBuilder *)&v54, &v74);
    if (v74.var0)
      goto LABEL_22;
    LiGraphBuilder::worldRoot(&v54, (PCSharedCount *)v65);
    if (!*(_QWORD *)v65)
      throw_PCNullPointerException(1);
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v65 + 136))(*(_QWORD *)v65);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v65[8]);
    if (v27 >= 1)
    {
      LiGraphBuilder::worldRoot(&v54, (PCSharedCount *)v65);
      if (!*(_QWORD *)v65)
        throw_PCNullPointerException(1);
      v28 = (PCShared_base *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v65 + 144))(*(_QWORD *)v65, 0);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v74, v28);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v65[8]);
    }
    if (v74.var0)
    {
LABEL_22:
      v73 = 0x3FF0000000000000;
      v70 = 0x3FF0000000000000;
      v67 = 0x3FF0000000000000;
      *(_QWORD *)v65 = 0x3FF0000000000000;
      *(_OWORD *)&v65[8] = 0u;
      v66 = 0u;
      v68 = 0u;
      v69 = 0u;
      v71 = 0u;
      v72 = 0u;
      v29 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v65, (float64x2_t)COERCE_UNSIGNED_INT64(-floor(*(double *)&v86 * 0.5 + 0.0000001)), -floor(*((double *)&v86 + 1) * 0.5 + 0.0000001), 0.0);
      if (!v74.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, _BYTE *, float64x2_t))(*(_QWORD *)v74.var0 + 16))(v74.var0, v65, v29);
    }
    LiGraphBuilder::render(&v54, (PCSharedCount *)v65);
    if (!*(_QWORD *)v65)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD, PC_Sp_counted_base *))(**(_QWORD **)v65 + 184))(*(_QWORD *)v65, v83.var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)&var0, (const PCSharedCount *)v65);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v65[8]);
    PCSharedCount::~PCSharedCount(&v75);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v53);
    std::__list_imp<unsigned int>::clear(v52);
    LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&v54);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&v77);
  }
  WorkingColorDescription = OZRenderParams::getWorkingColorDescription((OZRenderParams *)&v87);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)&v87);
  v32 = HGRenderJob::GetRenderNodeList((HGRenderJob *)&v87);
  v33 = (GLRenderer *)LiRenderParameters::LiRenderParameters(&v54, WorkingColorDescription, v32, BlendingGamma);
  v34 = *(_OWORD *)((char *)a3 + 1332);
  v60 = *(_OWORD *)((char *)a3 + 1316);
  v61[0] = v34;
  *(_OWORD *)((char *)v61 + 14) = *(_OWORD *)((char *)a3 + 1346);
  v62 = GLRenderer::inDesperationMode(v33);
  LiRenderParameters::setHeliumRenderer((uint64_t)&v54, v81);
  v76.var0 = 0;
  LiAgent::LiAgent((LiAgent *)v50, (const LiRenderParameters *)&v54, 1);
  LiAgent::getHelium((LiAgent *)v50, var0, (HGNode **)v65);
  v35 = *(__CFString **)v65;
  if (v76.var0 == *(__CFString **)v65)
  {
    if (v76.var0)
      (*((void (**)(void))v76.var0->isa + 3))();
  }
  else
  {
    if (v76.var0)
    {
      (*((void (**)(void))v76.var0->isa + 3))();
      v35 = *(__CFString **)v65;
    }
    v76.var0 = v35;
  }
  *(_OWORD *)v65 = xmmword_1B30503B0;
  v65[16] = 0;
  LiAgent::getDOD((uint64_t)v50, (uint64_t)&v77);
  *(_OWORD *)v65 = v77;
  v65[16] = v78;
  if (v78 || *(int *)&v65[8] >= 1 && *(int *)&v65[12] >= 1)
  {
    HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)v50);
    v37 = v51;
    WorkingColorSpace = OZRenderParams::getWorkingColorSpace((FxColorDescription *)&v87);
    PGHelium::renderNodeToBitmap(HeliumRenderer, (uint64_t *)&v76, (unsigned int *)v65, 3, WorkingColorSpace, (HGGLBlendingInfo *)(v37 + 80), (uint64_t *)&v77);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a5, &v77);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  LiAgent::~LiAgent((LiAgent *)v50);
  if (v76.var0)
    (*((void (**)(__CFString *))v76.var0->isa + 3))(v76.var0);
  v42 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v63);
  v57 = &unk_1E64FC2F8;
  if (v58 < 0)
    v45 = 1;
  else
    v45 = v58;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v57, 0, v45);
  if (v59)
    MEMORY[0x1B5E2914C](v59, 0x1000C8077774924);
  v59 = 0;
  v58 = 0;
  PCSharedCount::~PCSharedCount(&v56);
  PCSharedCount::~PCSharedCount(&v80);
  v46 = v82;
  if (v82)
  {
    v47 = (unint64_t *)&v82->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  PCSharedCount::~PCSharedCount(&v84);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v87);
  return 0;
}

void sub_1B2FB1F34(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  PCSharedCount *v68;
  PCSharedCount *v69;
  void *v72;

  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x340]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a37);
  std::__list_imp<unsigned int>::clear(&a17);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&a68);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x358]);
  PCSharedCount::~PCSharedCount(v69);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1)
    {
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3B0]);
      PCSharedCount::~PCSharedCount(v68);
      OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x3F0]);
      _Unwind_Resume(a1);
    }
    v72 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(_QWORD *)v72 + 40))(v72);
    __cxa_end_catch();
  }
  JUMPOUT(0x1B2FB1EC4);
}

void PSEmitter::buildLighting(PSEmitter *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  char *v8;
  char v9;
  int ValueAsInt;
  char v11;

  v8 = (char *)this + 33708;
  v9 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
  if (v8[4])
  {
    ValueAsInt = *(_DWORD *)v8;
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0);
    *(_DWORD *)v8 = ValueAsInt;
    v8[4] = 1;
  }
  if (ValueAsInt)
    v11 = v9;
  else
    v11 = 0;
  if ((v11 & 1) == 0)
    OZElement::buildLighting((OZElement *)((char *)this + 200), a2, a3, a4);
}

void `non-virtual thunk to'PSEmitter::buildLighting(PSEmitter *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  PSEmitter::buildLighting((PSEmitter *)((char *)this - 200), a2, a3, a4);
}

double PSEmitter::setShadowBounds(PSEmitter *this, const OZRenderState *a2, LiMaterialProperties *a3, const LiGeode *a4)
{
  char *v8;
  char v9;
  double result;
  int ValueAsInt;
  char v12;

  v8 = (char *)this + 33708;
  v9 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
  if (v8[4])
  {
    ValueAsInt = *(_DWORD *)v8;
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0);
    *(_DWORD *)v8 = ValueAsInt;
    v8[4] = 1;
  }
  if (ValueAsInt)
    v12 = 1;
  else
    v12 = v9;
  if ((v12 & 1) == 0)
    *(_QWORD *)&result = OZElement::setShadowBounds((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  return result;
}

double `non-virtual thunk to'PSEmitter::setShadowBounds(PSEmitter *this, const OZRenderState *a2, LiMaterialProperties *a3, const LiGeode *a4)
{
  return PSEmitter::setShadowBounds((PSEmitter *)((char *)this - 200), a2, a3, a4);
}

uint64_t PSEmitter::isValidLightClipPlane(PSEmitter *this)
{
  OZElement *v1;
  int v2;

  v1 = (OZElement *)((char *)this + 200);
  v2 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
  return OZElement::isValidLightClipPlane(v1) & (v2 ^ 1);
}

uint64_t `non-virtual thunk to'PSEmitter::isValidLightClipPlane(PSEmitter *this)
{
  int v2;

  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200);
  return OZElement::isValidLightClipPlane((OZElement *)this) & (v2 ^ 1);
}

uint64_t PSEmitter::isPrecomposed(PSEmitter *this, const CMTime *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 168))(this);
  if ((_DWORD)result)
    return PSEmitter::shouldPrecompose(this, a2);
  return result;
}

uint64_t `non-virtual thunk to'PSEmitter::isPrecomposed(PSEmitter *this, const CMTime *a2)
{
  PSEmitter *v3;
  uint64_t result;

  v3 = (PSEmitter *)((char *)this - 200);
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200);
  if ((_DWORD)result)
    return PSEmitter::shouldPrecompose(v3, a2);
  return result;
}

uint64_t PSEmitter::isFlattened(PSEmitter *this)
{
  return (*(unsigned int (**)(PSEmitter *))(*(_QWORD *)this + 168))(this) ^ 1;
}

uint64_t `non-virtual thunk to'PSEmitter::isFlattened(PSEmitter *this)
{
  return (*(unsigned int (**)(char *))(*((_QWORD *)this - 25) + 168))((char *)this - 200) ^ 1;
}

uint64_t PSEmitter::openMedia(PSEmitter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v3 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v2 != v3)
  {
    v4 = v3;
    do
    {
      (*(void (**)(void *))(*(_QWORD *)v5 + 104))(v5);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v4);
  }
  return 0;
}

uint64_t `non-virtual thunk to'PSEmitter::openMedia(PSEmitter *this)
{
  PSEmitter::openMedia((PSEmitter *)((char *)this - 200));
  return 0;
}

uint64_t PSEmitter::prerollBegin(_QWORD *a1, CMTime *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  unint64_t v13;
  char isKindOfClass;
  int ValueAsInt;
  double v16;
  CMTime v20;
  __int128 v21;

  OZSceneNode::prerollBegin((uint64_t)(a1 + 25), (uint64_t)a2, a3, a4, a5);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1);
  if (v8 != v9)
  {
    v10 = v9;
    do
    {
      v11 = *(const void **)(v8 + 16);
      if (v11)
      else
        v12 = 0;
      v13 = a1[26];
      v21 = xmmword_1B355CF50;
      isKindOfClass = OZFactory::isKindOfClass(v13, (int32x4_t *)&v21);
      v20 = *a2;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v12 + 10272), &v20, 0.0);
      v20 = *a2;
      OZChannel::getValueAsDouble((OZChannel *)(v12 + 10576), &v20, 0.0);
      if ((isKindOfClass & 1) == 0 && !ValueAsInt && v16 == 0.0)
        (*(void (**)(char *, CMTime *, uint64_t, uint64_t, double))(*(_QWORD *)v12 + 112))(v12, a2, a3, a4, a5);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v10);
  }
  return 0;
}

uint64_t `non-virtual thunk to'PSEmitter::prerollBegin(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4, double a5)
{
  PSEmitter::prerollBegin((_QWORD *)(a1 - 200), a2, a3, a4, a5);
  return 0;
}

uint64_t PSEmitter::prerollEnd(PSEmitter *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CMTime *v7;
  const void *v8;
  char *v9;
  unint64_t v10;
  char isKindOfClass;
  int ValueAsInt;
  double v13;
  __int128 v17;

  OZSceneNode::prerollEnd((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3);
  v4 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v5 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v4 != v5)
  {
    v6 = v5;
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v8 = *(const void **)(v4 + 16);
      if (v8)
      else
        v9 = 0;
      v10 = *((_QWORD *)this + 26);
      v17 = xmmword_1B355CF50;
      isKindOfClass = OZFactory::isKindOfClass(v10, (int32x4_t *)&v17);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 10272), v7, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)(v9 + 10576), v7, 0.0);
      if ((isKindOfClass & 1) == 0 && !ValueAsInt && v13 == 0.0)
        (*(void (**)(char *, const OZRenderParams *, PMFrameRequest *))(*(_QWORD *)v9 + 120))(v9, a2, a3);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v6);
  }
  return 0;
}

uint64_t `non-virtual thunk to'PSEmitter::prerollEnd(PSEmitter *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  PSEmitter::prerollEnd((PSEmitter *)((char *)this - 200), a2, a3);
  return 0;
}

uint64_t PSEmitter::setRate(PSEmitter *this, CMTime *a2, PMFrameRequest *a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  char *v11;
  unint64_t v12;
  char isKindOfClass;
  int ValueAsInt;
  double v15;
  CMTime v18;
  __int128 v19;

  OZSceneNode::setRate((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  v7 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v8 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v7 != v8)
  {
    v9 = v8;
    do
    {
      v10 = *(const void **)(v7 + 16);
      if (v10)
      else
        v11 = 0;
      v12 = *((_QWORD *)this + 26);
      v19 = xmmword_1B355CF50;
      isKindOfClass = OZFactory::isKindOfClass(v12, (int32x4_t *)&v19);
      v18 = *a2;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v11 + 10272), &v18, 0.0);
      v18 = *a2;
      OZChannel::getValueAsDouble((OZChannel *)(v11 + 10576), &v18, 0.0);
      if ((isKindOfClass & 1) == 0 && !ValueAsInt && v15 == 0.0)
        (*(void (**)(char *, CMTime *, PMFrameRequest *, double))(*(_QWORD *)v11 + 128))(v11, a2, a3, a4);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v9);
  }
  return 0;
}

uint64_t `non-virtual thunk to'PSEmitter::setRate(PSEmitter *this, CMTime *a2, PMFrameRequest *a3, double a4)
{
  PSEmitter::setRate((PSEmitter *)((char *)this - 200), a2, a3, a4);
  return 0;
}

uint64_t PSEmitter::scheduleTokens(_QWORD *a1, CMTime *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t i;
  const void *v11;
  char *v12;
  unint64_t v13;
  char isKindOfClass;
  int ValueAsInt;
  double v16;
  char v17;
  void *value;
  CMTime v20;
  int32x4_t v21;
  _QWORD v22[3];

  memset(v22, 0, sizeof(v22));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v22, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(_QWORD *, CMTime *, _QWORD *, uint64_t))(a1[25] + 184))(a1 + 25, a2, v22, a4);
  OZSceneNode::scheduleTokens((uint64_t)(a1 + 25), (uint64_t)a2, (uint64_t)v22, a4, a5);
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
  for (i = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1); v9 != i; v9 = *(_QWORD *)(v9 + 8))
  {
    v11 = *(const void **)(v9 + 16);
    if (v11)
    else
      v12 = 0;
    v13 = a1[26];
    v21 = (int32x4_t)xmmword_1B355CF50;
    isKindOfClass = OZFactory::isKindOfClass(v13, &v21);
    v20 = *a2;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v12 + 10272), &v20, 0.0);
    v20 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v12 + 10576), &v20, 0.0);
    if (ValueAsInt)
      v17 = 1;
    else
      v17 = isKindOfClass;
    if ((v17 & 1) == 0 && v16 == 0.0)
    {
      if (a5)
      {
        memset(&v20, 0, sizeof(v20));
        (*(void (**)(char *, CMTime *, _QWORD *, uint64_t, CMTime *))(*(_QWORD *)v12 + 136))(v12, a2, v22, a4, &v20);
        value = (void *)v20.value;
        if (v20.value != *(_QWORD *)&v20.timescale)
        {
          std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a5, *(_QWORD *)(a5 + 8), (char *)v20.value, *(char **)&v20.timescale, (*(_QWORD *)&v20.timescale - v20.value) >> 3);
          value = (void *)v20.value;
        }
        if (value)
        {
          *(_QWORD *)&v20.timescale = value;
          operator delete(value);
        }
      }
      else
      {
        (*(void (**)(char *, CMTime *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v12 + 136))(v12, a2, v22, a4, 0);
      }
    }
  }
  v20.value = (CMTimeValue)v22;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return 0;
}

void sub_1B2FB2BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  __p = &a20;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSEmitter::scheduleTokens(uint64_t a1, CMTime *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  PSEmitter::scheduleTokens((_QWORD *)(a1 - 200), a2, a3, a4, a5);
  return 0;
}

uint64_t PSEmitter::hintTokensWillImage(_QWORD *a1, CMTime *a2, __int128 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t i;
  const void *v10;
  char *v11;
  unint64_t v12;
  char isKindOfClass;
  int ValueAsInt;
  double v15;
  char v16;
  CMTime v18;
  int32x4_t v19;
  _QWORD v20[3];

  memset(v20, 0, sizeof(v20));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v20, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(_QWORD *, CMTime *, _QWORD *, uint64_t))(a1[25] + 184))(a1 + 25, a2, v20, a4);
  OZSceneNode::hintTokensWillImage((uint64_t)(a1 + 25), (uint64_t)a2, (uint64_t)a3, a4);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
  for (i = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1); v8 != i; v8 = *(_QWORD *)(v8 + 8))
  {
    v10 = *(const void **)(v8 + 16);
    if (v10)
    else
      v11 = 0;
    v12 = a1[26];
    v19 = (int32x4_t)xmmword_1B355CF50;
    isKindOfClass = OZFactory::isKindOfClass(v12, &v19);
    v18 = *a2;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v11 + 10272), &v18, 0.0);
    v18 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v11 + 10576), &v18, 0.0);
    if (ValueAsInt)
      v16 = 1;
    else
      v16 = isKindOfClass;
    if ((v16 & 1) == 0 && v15 == 0.0)
      (*(void (**)(char *, CMTime *, __int128 **, uint64_t))(*(_QWORD *)v11 + 144))(v11, a2, a3, a4);
  }
  v18.value = (CMTimeValue)v20;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return 0;
}

void sub_1B2FB2DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a13 = (void **)&a20;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSEmitter::hintTokensWillImage(uint64_t a1, CMTime *a2, __int128 **a3, uint64_t a4)
{
  PSEmitter::hintTokensWillImage((_QWORD *)(a1 - 200), a2, a3, a4);
  return 0;
}

uint64_t PSEmitter::getTokensImage(_QWORD *a1, CMTime *a2, __int128 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t i;
  const void *v10;
  char *v11;
  unint64_t v12;
  char isKindOfClass;
  int ValueAsInt;
  double v15;
  char v16;
  CMTime v18;
  int32x4_t v19;
  _QWORD v20[3];

  memset(v20, 0, sizeof(v20));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v20, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(_QWORD *, CMTime *, _QWORD *, uint64_t))(a1[25] + 184))(a1 + 25, a2, v20, a4);
  OZSceneNode::getTokensImage((uint64_t)(a1 + 25), (uint64_t)a2, (uint64_t)a3, a4);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
  for (i = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1); v8 != i; v8 = *(_QWORD *)(v8 + 8))
  {
    v10 = *(const void **)(v8 + 16);
    if (v10)
    else
      v11 = 0;
    v12 = a1[26];
    v19 = (int32x4_t)xmmword_1B355CF50;
    isKindOfClass = OZFactory::isKindOfClass(v12, &v19);
    v18 = *a2;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v11 + 10272), &v18, 0.0);
    v18 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v11 + 10576), &v18, 0.0);
    if (ValueAsInt)
      v16 = 1;
    else
      v16 = isKindOfClass;
    if ((v16 & 1) == 0 && v15 == 0.0)
      (*(void (**)(char *, CMTime *, __int128 **, uint64_t))(*(_QWORD *)v11 + 152))(v11, a2, a3, a4);
  }
  v18.value = (CMTimeValue)v20;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return 0;
}

void sub_1B2FB3010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a13 = (void **)&a20;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSEmitter::getTokensImage(uint64_t a1, CMTime *a2, __int128 **a3, uint64_t a4)
{
  PSEmitter::getTokensImage((_QWORD *)(a1 - 200), a2, a3, a4);
  return 0;
}

void PSEmitter::pruneTokensAtTime(PSEmitter *this, CMTime *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  char *v9;
  unint64_t v10;
  char isKindOfClass;
  int ValueAsInt;
  double v13;
  __int128 v15;
  CMTimeEpoch epoch;
  __int128 v17;
  CMTime v18;

  v18 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this + 200, &v18, a3);
  v5 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v6 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v5 != v6)
  {
    v7 = v6;
    do
    {
      v8 = *(const void **)(v5 + 16);
      if (v8)
      else
        v9 = 0;
      v10 = *((_QWORD *)this + 26);
      v17 = xmmword_1B355CF50;
      isKindOfClass = OZFactory::isKindOfClass(v10, (int32x4_t *)&v17);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 10272), a2, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)(v9 + 10576), a2, 0.0);
      if ((isKindOfClass & 1) == 0 && !ValueAsInt && v13 == 0.0)
      {
        v15 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        (*(void (**)(char *, __int128 *, const char *))(*(_QWORD *)v9 + 160))(v9, &v15, a3);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v7);
  }
}

void `non-virtual thunk to'PSEmitter::pruneTokensAtTime(PSEmitter *this, CMTime *a2, const char *a3)
{
  PSEmitter::pruneTokensAtTime((PSEmitter *)((char *)this - 200), a2, a3);
}

void PSEmitter::pruneTokensExceptAtTime(PSEmitter *this, CMTime *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  char *v9;
  unint64_t v10;
  char isKindOfClass;
  int ValueAsInt;
  double v13;
  __int128 v15;
  CMTimeEpoch epoch;
  __int128 v17;
  CMTime v18;

  v18 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this + 200, &v18, a3);
  v5 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v6 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v5 != v6)
  {
    v7 = v6;
    do
    {
      v8 = *(const void **)(v5 + 16);
      if (v8)
      else
        v9 = 0;
      v10 = *((_QWORD *)this + 26);
      v17 = xmmword_1B355CF50;
      isKindOfClass = OZFactory::isKindOfClass(v10, (int32x4_t *)&v17);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 10272), a2, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)(v9 + 10576), a2, 0.0);
      if ((isKindOfClass & 1) == 0 && !ValueAsInt && v13 == 0.0)
      {
        v15 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        (*(void (**)(char *, __int128 *, const char *))(*(_QWORD *)v9 + 168))(v9, &v15, a3);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v7);
  }
}

void `non-virtual thunk to'PSEmitter::pruneTokensExceptAtTime(PSEmitter *this, CMTime *a2, const char *a3)
{
  PSEmitter::pruneTokensExceptAtTime((PSEmitter *)((char *)this - 200), a2, a3);
}

void PSEmitter::pruneAllTokens(PSEmitter *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const CMTime *v6;
  const void *v7;
  char *v8;
  unint64_t v9;
  char isKindOfClass;
  int ValueAsInt;
  double v12;
  __int128 v14;

  OZSceneNode::pruneAllTokens((uint64_t)this + 200, a2);
  v3 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 256))(this);
  v4 = (*(uint64_t (**)(PSEmitter *))(*(_QWORD *)this + 264))(this);
  if (v3 != v4)
  {
    v5 = v4;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v7 = *(const void **)(v3 + 16);
      if (v7)
      else
        v8 = 0;
      v9 = *((_QWORD *)this + 26);
      v14 = xmmword_1B355CF50;
      isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v14);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v8 + 10272), v6, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)(v8 + 10576), v6, 0.0);
      if ((isKindOfClass & 1) == 0 && !ValueAsInt && v12 == 0.0)
        (*(void (**)(char *, const char *))(*(_QWORD *)v8 + 176))(v8, a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v5);
  }
}

void `non-virtual thunk to'PSEmitter::pruneAllTokens(PSEmitter *this, const char *a2)
{
  PSEmitter::pruneAllTokens((PSEmitter *)((char *)this - 200), a2);
}

PSEmitter::RenderParams *PSEmitter::RenderParams::RenderParams(PSEmitter::RenderParams *this, const OZRenderParams *a2)
{
  _OWORD *v3;
  __int128 v10;

  *((_QWORD *)this + 1) = a2;
  v3 = (_OWORD *)((char *)this + 16);
  OZRenderParams::OZRenderParams((PSEmitter::RenderParams *)((char *)this + 16), a2);
  LiClipSet::LiClipSet((PSEmitter::RenderParams *)((char *)this + 1440));
  *((_QWORD *)this + 203) = 0x3FF0000000000000;
  *((_QWORD *)this + 198) = 0x3FF0000000000000;
  *((_QWORD *)this + 193) = 0x3FF0000000000000;
  *((_QWORD *)this + 188) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *((_QWORD *)this + 219) = 0x3FF0000000000000;
  *((_QWORD *)this + 214) = 0x3FF0000000000000;
  *((_QWORD *)this + 209) = 0x3FF0000000000000;
  *((_QWORD *)this + 204) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *((_QWORD *)this + 228) = 0;
  *((_OWORD *)this + 113) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 110) = 0u;
  OZRenderParams::setImageType((uint64_t)v3, 2);
  *((_BYTE *)this + 376) = 1;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  v10 = _Q0;
  OZRenderParams::setResolution(v3, &v10);
  return this;
}

void sub_1B2FB355C(_Unwind_Exception *a1)
{
  OZRenderParams *v1;

  OZRenderParams::~OZRenderParams(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::getErrorDisplayName(PSEmitter *this)
{
  return OZObjectManipulator::getName((PSEmitter *)((char *)this + 216));
}

uint64_t PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(PSEmitter::PSEmitter_emitPatternChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(void)::PSEmitter_emitPatternChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(void)::PSEmitter_emitPatternChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_emitPatternChanImpl::_PSEmitter_emitPatternChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_emitPatternChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_emitPatternChanImpl *v0;

  if (!PSEmitter::PSEmitter_emitPatternChanImpl::_PSEmitter_emitPatternChan)
  {
    v0 = (PSEmitter::PSEmitter_emitPatternChanImpl *)operator new();
    PSEmitter::PSEmitter_emitPatternChanImpl::PSEmitter_emitPatternChanImpl(v0);
    PSEmitter::PSEmitter_emitPatternChanImpl::_PSEmitter_emitPatternChan = (uint64_t)v0;
  }
}

void sub_1B2FB3630(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_emitPatternChanImpl *PSEmitter::PSEmitter_emitPatternChanImpl::PSEmitter_emitPatternChanImpl(PSEmitter::PSEmitter_emitPatternChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_emitPatternChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DCBB8;
  *((_QWORD *)this + 5) = &unk_1E65DCBD8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB36E0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsChanImpl::getInstance(PSEmitter::PSEmitter_numPointsChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsChanImpl::getInstance(void)::PSEmitter_numPointsChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsChanImpl::getInstance(void)::PSEmitter_numPointsChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsChanImpl::_PSEmitter_numPointsChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!PSEmitter::PSEmitter_numPointsChanImpl::_PSEmitter_numPointsChan)
  {
    v0 = (OZChannelUint32 *)operator new();
    PSEmitter::PSEmitter_numPointsChanImpl::PSEmitter_numPointsChanImpl(v0);
    PSEmitter::PSEmitter_numPointsChanImpl::_PSEmitter_numPointsChan = (uint64_t)v0;
  }
}

void sub_1B2FB37AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *PSEmitter::PSEmitter_numPointsChanImpl::PSEmitter_numPointsChanImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 5.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DCC30;
  this->var5 = (PCString *)&unk_1E65DCC50;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB385C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsChanInfo::getInstance(PSEmitter::PSEmitter_numPointsChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsChanInfo::getInstance(void)::PSEmitter_numPointsChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsChanInfo::getInstance(void)::PSEmitter_numPointsChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsChanInfo::_PSEmitter_numPointsChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_numPointsChanInfo *v0;

  if (!PSEmitter::PSEmitter_numPointsChanInfo::_PSEmitter_numPointsChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_numPointsChanInfo *)operator new();
    PSEmitter::PSEmitter_numPointsChanInfo::PSEmitter_numPointsChanInfo(v0);
    PSEmitter::PSEmitter_numPointsChanInfo::_PSEmitter_numPointsChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB3928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_numPointsChanInfo *PSEmitter::PSEmitter_numPointsChanInfo::PSEmitter_numPointsChanInfo(PSEmitter::PSEmitter_numPointsChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 20.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_numPointsChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DCCA8;
  *((_QWORD *)this + 10) = &unk_1E65DCCC8;
  return this;
}

void sub_1B2FB39D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(PSEmitter::PSEmitter_numPointsUChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(void)::PSEmitter_numPointsUChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(void)::PSEmitter_numPointsUChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsUChanImpl::_PSEmitter_numPointsUChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsUChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!PSEmitter::PSEmitter_numPointsUChanImpl::_PSEmitter_numPointsUChan)
  {
    v0 = (OZChannelUint32 *)operator new();
    PSEmitter::PSEmitter_numPointsUChanImpl::PSEmitter_numPointsUChanImpl(v0);
    PSEmitter::PSEmitter_numPointsUChanImpl::_PSEmitter_numPointsUChan = (uint64_t)v0;
  }
}

void sub_1B2FB3A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *PSEmitter::PSEmitter_numPointsUChanImpl::PSEmitter_numPointsUChanImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 5.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DCD20;
  this->var5 = (PCString *)&unk_1E65DCD40;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB3B4C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(PSEmitter::PSEmitter_numPointsUChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(void)::PSEmitter_numPointsUChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(void)::PSEmitter_numPointsUChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsUChanInfo::_PSEmitter_numPointsUChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsUChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_numPointsUChanInfo *v0;

  if (!PSEmitter::PSEmitter_numPointsUChanInfo::_PSEmitter_numPointsUChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_numPointsUChanInfo *)operator new();
    PSEmitter::PSEmitter_numPointsUChanInfo::PSEmitter_numPointsUChanInfo(v0);
    PSEmitter::PSEmitter_numPointsUChanInfo::_PSEmitter_numPointsUChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB3C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_numPointsUChanInfo *PSEmitter::PSEmitter_numPointsUChanInfo::PSEmitter_numPointsUChanInfo(PSEmitter::PSEmitter_numPointsUChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 20.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_numPointsUChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DCD98;
  *((_QWORD *)this + 10) = &unk_1E65DCDB8;
  return this;
}

void sub_1B2FB3CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(PSEmitter::PSEmitter_numPointsVChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(void)::PSEmitter_numPointsVChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(void)::PSEmitter_numPointsVChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsVChanImpl::_PSEmitter_numPointsVChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsVChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!PSEmitter::PSEmitter_numPointsVChanImpl::_PSEmitter_numPointsVChan)
  {
    v0 = (OZChannelUint32 *)operator new();
    PSEmitter::PSEmitter_numPointsVChanImpl::PSEmitter_numPointsVChanImpl(v0);
    PSEmitter::PSEmitter_numPointsVChanImpl::_PSEmitter_numPointsVChan = (uint64_t)v0;
  }
}

void sub_1B2FB3D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *PSEmitter::PSEmitter_numPointsVChanImpl::PSEmitter_numPointsVChanImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 5.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DCE10;
  this->var5 = (PCString *)&unk_1E65DCE30;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB3E3C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(PSEmitter::PSEmitter_numPointsVChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(void)::PSEmitter_numPointsVChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(void)::PSEmitter_numPointsVChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsVChanInfo::_PSEmitter_numPointsVChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsVChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_numPointsVChanInfo *v0;

  if (!PSEmitter::PSEmitter_numPointsVChanInfo::_PSEmitter_numPointsVChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_numPointsVChanInfo *)operator new();
    PSEmitter::PSEmitter_numPointsVChanInfo::PSEmitter_numPointsVChanInfo(v0);
    PSEmitter::PSEmitter_numPointsVChanInfo::_PSEmitter_numPointsVChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB3F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_numPointsVChanInfo *PSEmitter::PSEmitter_numPointsVChanInfo::PSEmitter_numPointsVChanInfo(PSEmitter::PSEmitter_numPointsVChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 20.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_numPointsVChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DCE88;
  *((_QWORD *)this + 10) = &unk_1E65DCEA8;
  return this;
}

void sub_1B2FB3FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(PSEmitter::PSEmitter_numPointsWChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(void)::PSEmitter_numPointsWChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(void)::PSEmitter_numPointsWChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsWChanImpl::_PSEmitter_numPointsWChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsWChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!PSEmitter::PSEmitter_numPointsWChanImpl::_PSEmitter_numPointsWChan)
  {
    v0 = (OZChannelUint32 *)operator new();
    PSEmitter::PSEmitter_numPointsWChanImpl::PSEmitter_numPointsWChanImpl(v0);
    PSEmitter::PSEmitter_numPointsWChanImpl::_PSEmitter_numPointsWChan = (uint64_t)v0;
  }
}

void sub_1B2FB407C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *PSEmitter::PSEmitter_numPointsWChanImpl::PSEmitter_numPointsWChanImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 5.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DCF00;
  this->var5 = (PCString *)&unk_1E65DCF20;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB412C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(PSEmitter::PSEmitter_numPointsWChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(void)::PSEmitter_numPointsWChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(void)::PSEmitter_numPointsWChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numPointsWChanInfo::_PSEmitter_numPointsWChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numPointsWChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_numPointsWChanInfo *v0;

  if (!PSEmitter::PSEmitter_numPointsWChanInfo::_PSEmitter_numPointsWChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_numPointsWChanInfo *)operator new();
    PSEmitter::PSEmitter_numPointsWChanInfo::PSEmitter_numPointsWChanInfo(v0);
    PSEmitter::PSEmitter_numPointsWChanInfo::_PSEmitter_numPointsWChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB41F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_numPointsWChanInfo *PSEmitter::PSEmitter_numPointsWChanInfo::PSEmitter_numPointsWChanInfo(PSEmitter::PSEmitter_numPointsWChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 20.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_numPointsWChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DCF78;
  *((_QWORD *)this + 10) = &unk_1E65DCF98;
  return this;
}

void sub_1B2FB42A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(PSEmitter::PSEmitter_strokeWidthChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(void)::PSEmitter_strokeWidthChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(void)::PSEmitter_strokeWidthChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_strokeWidthChanImpl::_PSEmitter_strokeWidthChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_strokeWidthChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_strokeWidthChanImpl::_PSEmitter_strokeWidthChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_strokeWidthChanImpl::PSEmitter_strokeWidthChanImpl(v0);
    PSEmitter::PSEmitter_strokeWidthChanImpl::_PSEmitter_strokeWidthChan = (uint64_t)v0;
  }
}

void sub_1B2FB436C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_strokeWidthChanImpl::PSEmitter_strokeWidthChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DCFF0;
  this->var5 = (PCString *)&unk_1E65DD010;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FB441C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(PSEmitter::PSEmitter_strokeWidthChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(void)::PSEmitter_strokeWidthChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(void)::PSEmitter_strokeWidthChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_strokeWidthChanInfo::_PSEmitter_strokeWidthChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_strokeWidthChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_strokeWidthChanInfo *v0;

  if (!PSEmitter::PSEmitter_strokeWidthChanInfo::_PSEmitter_strokeWidthChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_strokeWidthChanInfo *)operator new();
    PSEmitter::PSEmitter_strokeWidthChanInfo::PSEmitter_strokeWidthChanInfo(v0);
    PSEmitter::PSEmitter_strokeWidthChanInfo::_PSEmitter_strokeWidthChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB44E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_strokeWidthChanInfo *PSEmitter::PSEmitter_strokeWidthChanInfo::PSEmitter_strokeWidthChanInfo(PSEmitter::PSEmitter_strokeWidthChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_strokeWidthChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD068;
  *((_QWORD *)this + 10) = &unk_1E65DD088;
  return this;
}

void sub_1B2FB459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(PSEmitter::PSEmitter_strokeWidthOSChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(void)::PSEmitter_strokeWidthOSChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(void)::PSEmitter_strokeWidthOSChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_strokeWidthOSChanImpl::_PSEmitter_strokeWidthOSChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_strokeWidthOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_strokeWidthOSChanImpl::_PSEmitter_strokeWidthOSChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_strokeWidthOSChanImpl::PSEmitter_strokeWidthOSChanImpl(v0);
    PSEmitter::PSEmitter_strokeWidthOSChanImpl::_PSEmitter_strokeWidthOSChan = (uint64_t)v0;
  }
}

void sub_1B2FB4668(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_strokeWidthOSChanImpl::PSEmitter_strokeWidthOSChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DD0E0;
  this->var5 = (PCString *)&unk_1E65DD100;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FB4718(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(PSEmitter::PSEmitter_strokeWidthOSChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(void)::PSEmitter_strokeWidthOSChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(void)::PSEmitter_strokeWidthOSChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_strokeWidthOSChanInfo::_PSEmitter_strokeWidthOSChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_strokeWidthOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_strokeWidthOSChanInfo *v0;

  if (!PSEmitter::PSEmitter_strokeWidthOSChanInfo::_PSEmitter_strokeWidthOSChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_strokeWidthOSChanInfo *)operator new();
    PSEmitter::PSEmitter_strokeWidthOSChanInfo::PSEmitter_strokeWidthOSChanInfo(v0);
    PSEmitter::PSEmitter_strokeWidthOSChanInfo::_PSEmitter_strokeWidthOSChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB47E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_strokeWidthOSChanInfo *PSEmitter::PSEmitter_strokeWidthOSChanInfo::PSEmitter_strokeWidthOSChanInfo(PSEmitter::PSEmitter_strokeWidthOSChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_strokeWidthOSChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD158;
  *((_QWORD *)this + 10) = &unk_1E65DD178;
  return this;
}

void sub_1B2FB4898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(PSEmitter::PSEmitter_tileOffsetChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(void)::PSEmitter_tileOffsetChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(void)::PSEmitter_tileOffsetChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_tileOffsetChanImpl::_PSEmitter_tileOffsetChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_tileOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_tileOffsetChanImpl::_PSEmitter_tileOffsetChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_tileOffsetChanImpl::PSEmitter_tileOffsetChanImpl(v0);
    PSEmitter::PSEmitter_tileOffsetChanImpl::_PSEmitter_tileOffsetChan = (uint64_t)v0;
  }
}

void sub_1B2FB4964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_tileOffsetChanImpl::PSEmitter_tileOffsetChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DD1D0;
  this->var5 = (PCString *)&unk_1E65DD1F0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FB4A18(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(PSEmitter::PSEmitter_tileOffsetChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(void)::PSEmitter_tileOffsetChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(void)::PSEmitter_tileOffsetChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_tileOffsetChanInfo::_PSEmitter_tileOffsetChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_tileOffsetChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_tileOffsetChanInfo *v0;

  if (!PSEmitter::PSEmitter_tileOffsetChanInfo::_PSEmitter_tileOffsetChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_tileOffsetChanInfo *)operator new();
    PSEmitter::PSEmitter_tileOffsetChanInfo::PSEmitter_tileOffsetChanInfo(v0);
    PSEmitter::PSEmitter_tileOffsetChanInfo::_PSEmitter_tileOffsetChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB4AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_tileOffsetChanInfo *PSEmitter::PSEmitter_tileOffsetChanInfo::PSEmitter_tileOffsetChanInfo(PSEmitter::PSEmitter_tileOffsetChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_tileOffsetChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD248;
  *((_QWORD *)this + 10) = &unk_1E65DD268;
  return this;
}

void sub_1B2FB4B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(PSEmitter::PSEmitter_rectBuildOriginChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(void)::PSEmitter_rectBuildOriginChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(void)::PSEmitter_rectBuildOriginChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_rectBuildOriginChanImpl::_PSEmitter_rectBuildOriginChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_rectBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_rectBuildOriginChanImpl *v0;

  if (!PSEmitter::PSEmitter_rectBuildOriginChanImpl::_PSEmitter_rectBuildOriginChan)
  {
    v0 = (PSEmitter::PSEmitter_rectBuildOriginChanImpl *)operator new();
    PSEmitter::PSEmitter_rectBuildOriginChanImpl::PSEmitter_rectBuildOriginChanImpl(v0);
    PSEmitter::PSEmitter_rectBuildOriginChanImpl::_PSEmitter_rectBuildOriginChan = (uint64_t)v0;
  }
}

void sub_1B2FB4C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_rectBuildOriginChanImpl *PSEmitter::PSEmitter_rectBuildOriginChanImpl::PSEmitter_rectBuildOriginChanImpl(PSEmitter::PSEmitter_rectBuildOriginChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 4.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 4.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_rectBuildOriginChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD2C0;
  *((_QWORD *)this + 5) = &unk_1E65DD2E0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB4D14(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(PSEmitter::PSEmitter_rectBuildStyleChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(void)::PSEmitter_rectBuildStyleChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(void)::PSEmitter_rectBuildStyleChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_rectBuildStyleChanImpl::_PSEmitter_rectBuildStyleChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_rectBuildStyleChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_rectBuildStyleChanImpl *v0;

  if (!PSEmitter::PSEmitter_rectBuildStyleChanImpl::_PSEmitter_rectBuildStyleChan)
  {
    v0 = (PSEmitter::PSEmitter_rectBuildStyleChanImpl *)operator new();
    PSEmitter::PSEmitter_rectBuildStyleChanImpl::PSEmitter_rectBuildStyleChanImpl(v0);
    PSEmitter::PSEmitter_rectBuildStyleChanImpl::_PSEmitter_rectBuildStyleChan = (uint64_t)v0;
  }
}

void sub_1B2FB4DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_rectBuildStyleChanImpl *PSEmitter::PSEmitter_rectBuildStyleChanImpl::PSEmitter_rectBuildStyleChanImpl(PSEmitter::PSEmitter_rectBuildStyleChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_rectBuildStyleChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD338;
  *((_QWORD *)this + 5) = &unk_1E65DD358;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB4E90(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(PSEmitter::PSEmitter_boxBuildOriginChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(void)::PSEmitter_boxBuildOriginChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(void)::PSEmitter_boxBuildOriginChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_boxBuildOriginChanImpl::_PSEmitter_boxBuildOriginChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_boxBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_boxBuildOriginChanImpl *v0;

  if (!PSEmitter::PSEmitter_boxBuildOriginChanImpl::_PSEmitter_boxBuildOriginChan)
  {
    v0 = (PSEmitter::PSEmitter_boxBuildOriginChanImpl *)operator new();
    PSEmitter::PSEmitter_boxBuildOriginChanImpl::PSEmitter_boxBuildOriginChanImpl(v0);
    PSEmitter::PSEmitter_boxBuildOriginChanImpl::_PSEmitter_boxBuildOriginChan = (uint64_t)v0;
  }
}

void sub_1B2FB4F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_boxBuildOriginChanImpl *PSEmitter::PSEmitter_boxBuildOriginChanImpl::PSEmitter_boxBuildOriginChanImpl(PSEmitter::PSEmitter_boxBuildOriginChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 14.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 14.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_boxBuildOriginChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD3B0;
  *((_QWORD *)this + 5) = &unk_1E65DD3D0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB500C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(PSEmitter::PSEmitter_boxBuildStyleChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(void)::PSEmitter_boxBuildStyleChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(void)::PSEmitter_boxBuildStyleChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_boxBuildStyleChanImpl::_PSEmitter_boxBuildStyleChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_boxBuildStyleChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_boxBuildStyleChanImpl *v0;

  if (!PSEmitter::PSEmitter_boxBuildStyleChanImpl::_PSEmitter_boxBuildStyleChan)
  {
    v0 = (PSEmitter::PSEmitter_boxBuildStyleChanImpl *)operator new();
    PSEmitter::PSEmitter_boxBuildStyleChanImpl::PSEmitter_boxBuildStyleChanImpl(v0);
    PSEmitter::PSEmitter_boxBuildStyleChanImpl::_PSEmitter_boxBuildStyleChan = (uint64_t)v0;
  }
}

void sub_1B2FB50D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_boxBuildStyleChanImpl *PSEmitter::PSEmitter_boxBuildStyleChanImpl::PSEmitter_boxBuildStyleChanImpl(PSEmitter::PSEmitter_boxBuildStyleChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_boxBuildStyleChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD428;
  *((_QWORD *)this + 5) = &unk_1E65DD448;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB5188(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(PSEmitter::PSEmitter_openBuildOriginChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(void)::PSEmitter_openBuildOriginChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(void)::PSEmitter_openBuildOriginChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_openBuildOriginChanImpl::_PSEmitter_openBuildOriginChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_openBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_openBuildOriginChanImpl *v0;

  if (!PSEmitter::PSEmitter_openBuildOriginChanImpl::_PSEmitter_openBuildOriginChan)
  {
    v0 = (PSEmitter::PSEmitter_openBuildOriginChanImpl *)operator new();
    PSEmitter::PSEmitter_openBuildOriginChanImpl::PSEmitter_openBuildOriginChanImpl(v0);
    PSEmitter::PSEmitter_openBuildOriginChanImpl::_PSEmitter_openBuildOriginChan = (uint64_t)v0;
  }
}

void sub_1B2FB5254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_openBuildOriginChanImpl *PSEmitter::PSEmitter_openBuildOriginChanImpl::PSEmitter_openBuildOriginChanImpl(PSEmitter::PSEmitter_openBuildOriginChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_openBuildOriginChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD4A0;
  *((_QWORD *)this + 5) = &unk_1E65DD4C0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB5304(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(PSEmitter::PSEmitter_closedBuildOriginChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(void)::PSEmitter_closedBuildOriginChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(void)::PSEmitter_closedBuildOriginChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_closedBuildOriginChanImpl::_PSEmitter_closedBuildOriginChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_closedBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_closedBuildOriginChanImpl *v0;

  if (!PSEmitter::PSEmitter_closedBuildOriginChanImpl::_PSEmitter_closedBuildOriginChan)
  {
    v0 = (PSEmitter::PSEmitter_closedBuildOriginChanImpl *)operator new();
    PSEmitter::PSEmitter_closedBuildOriginChanImpl::PSEmitter_closedBuildOriginChanImpl(v0);
    PSEmitter::PSEmitter_closedBuildOriginChanImpl::_PSEmitter_closedBuildOriginChan = (uint64_t)v0;
  }
}

void sub_1B2FB53D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_closedBuildOriginChanImpl *PSEmitter::PSEmitter_closedBuildOriginChanImpl::PSEmitter_closedBuildOriginChanImpl(PSEmitter::PSEmitter_closedBuildOriginChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_closedBuildOriginChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD518;
  *((_QWORD *)this + 5) = &unk_1E65DD538;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB5480(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(PSEmitter::PSEmitter_radialBuildOriginChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(void)::PSEmitter_radialBuildOriginChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(void)::PSEmitter_radialBuildOriginChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_radialBuildOriginChanImpl::_PSEmitter_radialBuildOriginChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_radialBuildOriginChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_radialBuildOriginChanImpl *v0;

  if (!PSEmitter::PSEmitter_radialBuildOriginChanImpl::_PSEmitter_radialBuildOriginChan)
  {
    v0 = (PSEmitter::PSEmitter_radialBuildOriginChanImpl *)operator new();
    PSEmitter::PSEmitter_radialBuildOriginChanImpl::PSEmitter_radialBuildOriginChanImpl(v0);
    PSEmitter::PSEmitter_radialBuildOriginChanImpl::_PSEmitter_radialBuildOriginChan = (uint64_t)v0;
  }
}

void sub_1B2FB554C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_radialBuildOriginChanImpl *PSEmitter::PSEmitter_radialBuildOriginChanImpl::PSEmitter_radialBuildOriginChanImpl(PSEmitter::PSEmitter_radialBuildOriginChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_radialBuildOriginChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD590;
  *((_QWORD *)this + 5) = &unk_1E65DD5B0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB55FC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(PSEmitter::PSEmitter_outlineOffsetChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(void)::PSEmitter_outlineOffsetChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(void)::PSEmitter_outlineOffsetChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_outlineOffsetChanImpl::_PSEmitter_outlineOffsetChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_outlineOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_outlineOffsetChanImpl::_PSEmitter_outlineOffsetChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_outlineOffsetChanImpl::PSEmitter_outlineOffsetChanImpl(v0);
    PSEmitter::PSEmitter_outlineOffsetChanImpl::_PSEmitter_outlineOffsetChan = (uint64_t)v0;
  }
}

void sub_1B2FB56C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_outlineOffsetChanImpl::PSEmitter_outlineOffsetChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DD608;
  this->var5 = (PCString *)&unk_1E65DD628;
  OZChannelImpl::setMin((OZChannelImpl *)this, -3.40282347e38);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FB577C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(PSEmitter::PSEmitter_outlineOffsetChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(void)::PSEmitter_outlineOffsetChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(void)::PSEmitter_outlineOffsetChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_outlineOffsetChanInfo::_PSEmitter_outlineOffsetChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_outlineOffsetChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_outlineOffsetChanInfo *v0;

  if (!PSEmitter::PSEmitter_outlineOffsetChanInfo::_PSEmitter_outlineOffsetChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_outlineOffsetChanInfo *)operator new();
    PSEmitter::PSEmitter_outlineOffsetChanInfo::PSEmitter_outlineOffsetChanInfo(v0);
    PSEmitter::PSEmitter_outlineOffsetChanInfo::_PSEmitter_outlineOffsetChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB5848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_outlineOffsetChanInfo *PSEmitter::PSEmitter_outlineOffsetChanInfo::PSEmitter_outlineOffsetChanInfo(PSEmitter::PSEmitter_outlineOffsetChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -2.0, 2.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_outlineOffsetChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD680;
  *((_QWORD *)this + 10) = &unk_1E65DD6A0;
  return this;
}

void sub_1B2FB58FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_radiusChanImpl::getInstance(PSEmitter::PSEmitter_radiusChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_radiusChanImpl::getInstance(void)::PSEmitter_radiusChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_radiusChanImpl::getInstance(void)::PSEmitter_radiusChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_radiusChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_radiusChanImpl::_PSEmitter_radiusChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_radiusChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_radiusChanImpl *v0;

  if (!PSEmitter::PSEmitter_radiusChanImpl::_PSEmitter_radiusChan)
  {
    v0 = (PSEmitter::PSEmitter_radiusChanImpl *)operator new();
    PSEmitter::PSEmitter_radiusChanImpl::PSEmitter_radiusChanImpl(v0);
    PSEmitter::PSEmitter_radiusChanImpl::_PSEmitter_radiusChan = (uint64_t)v0;
  }
}

void sub_1B2FB59C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_radiusChanImpl *PSEmitter::PSEmitter_radiusChanImpl::PSEmitter_radiusChanImpl(PSEmitter::PSEmitter_radiusChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 200.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 200.0, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_radiusChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD6F8;
  *((_QWORD *)this + 5) = &unk_1E65DD718;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FB5A88(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_radiusChanInfo::getInstance(PSEmitter::PSEmitter_radiusChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_radiusChanInfo::getInstance(void)::PSEmitter_radiusChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_radiusChanInfo::getInstance(void)::PSEmitter_radiusChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_radiusChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_radiusChanInfo::_PSEmitter_radiusChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_radiusChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_radiusChanInfo *v0;

  if (!PSEmitter::PSEmitter_radiusChanInfo::_PSEmitter_radiusChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_radiusChanInfo *)operator new();
    PSEmitter::PSEmitter_radiusChanInfo::PSEmitter_radiusChanInfo(v0);
    PSEmitter::PSEmitter_radiusChanInfo::_PSEmitter_radiusChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB5B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_radiusChanInfo *PSEmitter::PSEmitter_radiusChanInfo::PSEmitter_radiusChanInfo(PSEmitter::PSEmitter_radiusChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_radiusChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD770;
  *((_QWORD *)this + 10) = &unk_1E65DD790;
  return this;
}

void sub_1B2FB5C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(PSEmitter::PSEmitter_rectWidthChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(void)::PSEmitter_rectWidthChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(void)::PSEmitter_rectWidthChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_rectWidthChanImpl::_PSEmitter_rectWidthChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_rectWidthChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_rectWidthChanImpl *v0;

  if (!PSEmitter::PSEmitter_rectWidthChanImpl::_PSEmitter_rectWidthChan)
  {
    v0 = (PSEmitter::PSEmitter_rectWidthChanImpl *)operator new();
    PSEmitter::PSEmitter_rectWidthChanImpl::PSEmitter_rectWidthChanImpl(v0);
    PSEmitter::PSEmitter_rectWidthChanImpl::_PSEmitter_rectWidthChan = (uint64_t)v0;
  }
}

void sub_1B2FB5CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_rectWidthChanImpl *PSEmitter::PSEmitter_rectWidthChanImpl::PSEmitter_rectWidthChanImpl(PSEmitter::PSEmitter_rectWidthChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 200.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 200.0, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_rectWidthChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD7E8;
  *((_QWORD *)this + 5) = &unk_1E65DD808;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FB5D94(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(PSEmitter::PSEmitter_rectSizeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(void)::PSEmitter_rectSizeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(void)::PSEmitter_rectSizeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_rectSizeChanImpl::_PSEmitter_rectSizeChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_rectSizeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_rectSizeChanImpl *v0;

  if (!PSEmitter::PSEmitter_rectSizeChanImpl::_PSEmitter_rectSizeChan)
  {
    v0 = (PSEmitter::PSEmitter_rectSizeChanImpl *)operator new();
    PSEmitter::PSEmitter_rectSizeChanImpl::PSEmitter_rectSizeChanImpl(v0);
    PSEmitter::PSEmitter_rectSizeChanImpl::_PSEmitter_rectSizeChan = (uint64_t)v0;
  }
}

void sub_1B2FB5E60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_rectSizeChanImpl *PSEmitter::PSEmitter_rectSizeChanImpl::PSEmitter_rectSizeChanImpl(PSEmitter::PSEmitter_rectSizeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 300.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 300.0, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_rectSizeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DD860;
  *((_QWORD *)this + 5) = &unk_1E65DD880;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FB5F20(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(PSEmitter::PSEmitter_rectSizeChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(void)::PSEmitter_rectSizeChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(void)::PSEmitter_rectSizeChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_rectSizeChanInfo::_PSEmitter_rectSizeChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_rectSizeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_rectSizeChanInfo *v0;

  if (!PSEmitter::PSEmitter_rectSizeChanInfo::_PSEmitter_rectSizeChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_rectSizeChanInfo *)operator new();
    PSEmitter::PSEmitter_rectSizeChanInfo::PSEmitter_rectSizeChanInfo(v0);
    PSEmitter::PSEmitter_rectSizeChanInfo::_PSEmitter_rectSizeChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB5FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_rectSizeChanInfo *PSEmitter::PSEmitter_rectSizeChanInfo::PSEmitter_rectSizeChanInfo(PSEmitter::PSEmitter_rectSizeChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_rectSizeChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD8D8;
  *((_QWORD *)this + 10) = &unk_1E65DD8F8;
  return this;
}

void sub_1B2FB609C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(PSEmitter::PSEmitter_numRadialArmsChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(void)::PSEmitter_numRadialArmsChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(void)::PSEmitter_numRadialArmsChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numRadialArmsChanImpl::_PSEmitter_numRadialArmsChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numRadialArmsChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!PSEmitter::PSEmitter_numRadialArmsChanImpl::_PSEmitter_numRadialArmsChan)
  {
    v0 = (OZChannelUint32 *)operator new();
    PSEmitter::PSEmitter_numRadialArmsChanImpl::PSEmitter_numRadialArmsChanImpl(v0);
    PSEmitter::PSEmitter_numRadialArmsChanImpl::_PSEmitter_numRadialArmsChan = (uint64_t)v0;
  }
}

void sub_1B2FB6168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *PSEmitter::PSEmitter_numRadialArmsChanImpl::PSEmitter_numRadialArmsChanImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 3.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 3.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DD950;
  this->var5 = (PCString *)&unk_1E65DD970;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB6218(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(PSEmitter::PSEmitter_numRadialArmsChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(void)::PSEmitter_numRadialArmsChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(void)::PSEmitter_numRadialArmsChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_numRadialArmsChanInfo::_PSEmitter_numRadialArmsChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_numRadialArmsChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_numRadialArmsChanInfo *v0;

  if (!PSEmitter::PSEmitter_numRadialArmsChanInfo::_PSEmitter_numRadialArmsChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_numRadialArmsChanInfo *)operator new();
    PSEmitter::PSEmitter_numRadialArmsChanInfo::PSEmitter_numRadialArmsChanInfo(v0);
    PSEmitter::PSEmitter_numRadialArmsChanInfo::_PSEmitter_numRadialArmsChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB62E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_numRadialArmsChanInfo *PSEmitter::PSEmitter_numRadialArmsChanInfo::PSEmitter_numRadialArmsChanInfo(PSEmitter::PSEmitter_numRadialArmsChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_numRadialArmsChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DD9C8;
  *((_QWORD *)this + 10) = &unk_1E65DD9E8;
  return this;
}

void sub_1B2FB638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(PSEmitter::PSEmitter_pointsPerArmChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(void)::PSEmitter_pointsPerArmChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(void)::PSEmitter_pointsPerArmChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_pointsPerArmChanImpl::_PSEmitter_pointsPerArmChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_pointsPerArmChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!PSEmitter::PSEmitter_pointsPerArmChanImpl::_PSEmitter_pointsPerArmChan)
  {
    v0 = (OZChannelUint32 *)operator new();
    PSEmitter::PSEmitter_pointsPerArmChanImpl::PSEmitter_pointsPerArmChanImpl(v0);
    PSEmitter::PSEmitter_pointsPerArmChanImpl::_PSEmitter_pointsPerArmChan = (uint64_t)v0;
  }
}

void sub_1B2FB6458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *PSEmitter::PSEmitter_pointsPerArmChanImpl::PSEmitter_pointsPerArmChanImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 10.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 10.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DDA40;
  this->var5 = (PCString *)&unk_1E65DDA60;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB6508(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(PSEmitter::PSEmitter_pointsPerArmChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(void)::PSEmitter_pointsPerArmChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(void)::PSEmitter_pointsPerArmChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_pointsPerArmChanInfo::_PSEmitter_pointsPerArmChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_pointsPerArmChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_pointsPerArmChanInfo *v0;

  if (!PSEmitter::PSEmitter_pointsPerArmChanInfo::_PSEmitter_pointsPerArmChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_pointsPerArmChanInfo *)operator new();
    PSEmitter::PSEmitter_pointsPerArmChanInfo::PSEmitter_pointsPerArmChanInfo(v0);
    PSEmitter::PSEmitter_pointsPerArmChanInfo::_PSEmitter_pointsPerArmChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB65D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_pointsPerArmChanInfo *PSEmitter::PSEmitter_pointsPerArmChanInfo::PSEmitter_pointsPerArmChanInfo(PSEmitter::PSEmitter_pointsPerArmChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 25.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_pointsPerArmChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DDAB8;
  *((_QWORD *)this + 10) = &unk_1E65DDAD8;
  return this;
}

void sub_1B2FB667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(PSEmitter::PSEmitter_spiralCoeffChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(void)::PSEmitter_spiralCoeffChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(void)::PSEmitter_spiralCoeffChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_spiralCoeffChanImpl::_PSEmitter_spiralCoeffChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_spiralCoeffChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_spiralCoeffChanImpl *v0;

  if (!PSEmitter::PSEmitter_spiralCoeffChanImpl::_PSEmitter_spiralCoeffChan)
  {
    v0 = (PSEmitter::PSEmitter_spiralCoeffChanImpl *)operator new();
    PSEmitter::PSEmitter_spiralCoeffChanImpl::PSEmitter_spiralCoeffChanImpl(v0);
    PSEmitter::PSEmitter_spiralCoeffChanImpl::_PSEmitter_spiralCoeffChan = (uint64_t)v0;
  }
}

void sub_1B2FB6748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_spiralCoeffChanImpl *PSEmitter::PSEmitter_spiralCoeffChanImpl::PSEmitter_spiralCoeffChanImpl(PSEmitter::PSEmitter_spiralCoeffChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.25);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.25, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_spiralCoeffChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DDB30;
  *((_QWORD *)this + 5) = &unk_1E65DDB50;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FB67FC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(PSEmitter::PSEmitter_spiralCoeffChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(void)::PSEmitter_spiralCoeffChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(void)::PSEmitter_spiralCoeffChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_spiralCoeffChanInfo::_PSEmitter_spiralCoeffChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_spiralCoeffChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_spiralCoeffChanInfo *v0;

  if (!PSEmitter::PSEmitter_spiralCoeffChanInfo::_PSEmitter_spiralCoeffChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_spiralCoeffChanInfo *)operator new();
    PSEmitter::PSEmitter_spiralCoeffChanInfo::PSEmitter_spiralCoeffChanInfo(v0);
    PSEmitter::PSEmitter_spiralCoeffChanInfo::_PSEmitter_spiralCoeffChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB68C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_spiralCoeffChanInfo *PSEmitter::PSEmitter_spiralCoeffChanInfo::PSEmitter_spiralCoeffChanInfo(PSEmitter::PSEmitter_spiralCoeffChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -2.0, 2.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_spiralCoeffChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DDBA8;
  *((_QWORD *)this + 10) = &unk_1E65DDBC8;
  return this;
}

void sub_1B2FB6974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(PSEmitter::PSEmitter_waveAmplitudeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(void)::PSEmitter_waveAmplitudeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(void)::PSEmitter_waveAmplitudeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_waveAmplitudeChanImpl::_PSEmitter_waveAmplitudeChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_waveAmplitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_waveAmplitudeChanImpl *v0;

  if (!PSEmitter::PSEmitter_waveAmplitudeChanImpl::_PSEmitter_waveAmplitudeChan)
  {
    v0 = (PSEmitter::PSEmitter_waveAmplitudeChanImpl *)operator new();
    PSEmitter::PSEmitter_waveAmplitudeChanImpl::PSEmitter_waveAmplitudeChanImpl(v0);
    PSEmitter::PSEmitter_waveAmplitudeChanImpl::_PSEmitter_waveAmplitudeChan = (uint64_t)v0;
  }
}

void sub_1B2FB6A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_waveAmplitudeChanImpl *PSEmitter::PSEmitter_waveAmplitudeChanImpl::PSEmitter_waveAmplitudeChanImpl(PSEmitter::PSEmitter_waveAmplitudeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 50.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 50.0, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_waveAmplitudeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DDC20;
  *((_QWORD *)this + 5) = &unk_1E65DDC40;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FB6B04(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(PSEmitter::PSEmitter_waveFrequencyChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(void)::PSEmitter_waveFrequencyChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(void)::PSEmitter_waveFrequencyChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_waveFrequencyChanImpl::_PSEmitter_waveFrequencyChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_waveFrequencyChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_waveFrequencyChanImpl *v0;

  if (!PSEmitter::PSEmitter_waveFrequencyChanImpl::_PSEmitter_waveFrequencyChan)
  {
    v0 = (PSEmitter::PSEmitter_waveFrequencyChanImpl *)operator new();
    PSEmitter::PSEmitter_waveFrequencyChanImpl::PSEmitter_waveFrequencyChanImpl(v0);
    PSEmitter::PSEmitter_waveFrequencyChanImpl::_PSEmitter_waveFrequencyChan = (uint64_t)v0;
  }
}

void sub_1B2FB6BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_waveFrequencyChanImpl *PSEmitter::PSEmitter_waveFrequencyChanImpl::PSEmitter_waveFrequencyChanImpl(PSEmitter::PSEmitter_waveFrequencyChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_waveFrequencyChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DDC98;
  *((_QWORD *)this + 5) = &unk_1E65DDCB8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FB6C80(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(PSEmitter::PSEmitter_waveFrequencyChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(void)::PSEmitter_waveFrequencyChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(void)::PSEmitter_waveFrequencyChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_waveFrequencyChanInfo::_PSEmitter_waveFrequencyChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_waveFrequencyChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_waveFrequencyChanInfo *v0;

  if (!PSEmitter::PSEmitter_waveFrequencyChanInfo::_PSEmitter_waveFrequencyChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_waveFrequencyChanInfo *)operator new();
    PSEmitter::PSEmitter_waveFrequencyChanInfo::PSEmitter_waveFrequencyChanInfo(v0);
    PSEmitter::PSEmitter_waveFrequencyChanInfo::_PSEmitter_waveFrequencyChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB6D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_waveFrequencyChanInfo *PSEmitter::PSEmitter_waveFrequencyChanInfo::PSEmitter_waveFrequencyChanInfo(PSEmitter::PSEmitter_waveFrequencyChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_waveFrequencyChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DDD10;
  *((_QWORD *)this + 10) = &unk_1E65DDD30;
  return this;
}

void sub_1B2FB6DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(PSEmitter::PSEmitter_wavePhaseChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(void)::PSEmitter_wavePhaseChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(void)::PSEmitter_wavePhaseChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_wavePhaseChanInfo::_PSEmitter_wavePhaseChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_wavePhaseChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_wavePhaseChanInfo *v0;

  if (!PSEmitter::PSEmitter_wavePhaseChanInfo::_PSEmitter_wavePhaseChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_wavePhaseChanInfo *)operator new();
    PSEmitter::PSEmitter_wavePhaseChanInfo::PSEmitter_wavePhaseChanInfo(v0);
    PSEmitter::PSEmitter_wavePhaseChanInfo::_PSEmitter_wavePhaseChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB6EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_wavePhaseChanInfo *PSEmitter::PSEmitter_wavePhaseChanInfo::PSEmitter_wavePhaseChanInfo(PSEmitter::PSEmitter_wavePhaseChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "°");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.40282347e38, 360.0, 0.0174532925, 0.000174532925, 57.2957795, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_wavePhaseChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DDD88;
  *((_QWORD *)this + 10) = &unk_1E65DDDA8;
  return this;
}

void sub_1B2FB6F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(PSEmitter::PSEmitter_waveDampingChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(void)::PSEmitter_waveDampingChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(void)::PSEmitter_waveDampingChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_waveDampingChanImpl::_PSEmitter_waveDampingChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_waveDampingChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_waveDampingChanImpl *v0;

  if (!PSEmitter::PSEmitter_waveDampingChanImpl::_PSEmitter_waveDampingChan)
  {
    v0 = (PSEmitter::PSEmitter_waveDampingChanImpl *)operator new();
    PSEmitter::PSEmitter_waveDampingChanImpl::PSEmitter_waveDampingChanImpl(v0);
    PSEmitter::PSEmitter_waveDampingChanImpl::_PSEmitter_waveDampingChan = (uint64_t)v0;
  }
}

void sub_1B2FB704C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_waveDampingChanImpl *PSEmitter::PSEmitter_waveDampingChanImpl::PSEmitter_waveDampingChanImpl(PSEmitter::PSEmitter_waveDampingChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_waveDampingChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DDE00;
  *((_QWORD *)this + 5) = &unk_1E65DDE20;
  OZChannelImpl::setMin((OZChannelImpl *)this, -100.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 100.0);
  return this;
}

void sub_1B2FB7100(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(PSEmitter::PSEmitter_waveDampingChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(void)::PSEmitter_waveDampingChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(void)::PSEmitter_waveDampingChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_waveDampingChanInfo::_PSEmitter_waveDampingChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_waveDampingChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_waveDampingChanInfo *v0;

  if (!PSEmitter::PSEmitter_waveDampingChanInfo::_PSEmitter_waveDampingChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_waveDampingChanInfo *)operator new();
    PSEmitter::PSEmitter_waveDampingChanInfo::PSEmitter_waveDampingChanInfo(v0);
    PSEmitter::PSEmitter_waveDampingChanInfo::_PSEmitter_waveDampingChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB71CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_waveDampingChanInfo *PSEmitter::PSEmitter_waveDampingChanInfo::PSEmitter_waveDampingChanInfo(PSEmitter::PSEmitter_waveDampingChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -10.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_waveDampingChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DDE78;
  *((_QWORD *)this + 10) = &unk_1E65DDE98;
  return this;
}

void sub_1B2FB7278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(PSEmitter::PSEmitter_emissionLatitudeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(void)::PSEmitter_emissionLatitudeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(void)::PSEmitter_emissionLatitudeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_emissionLatitudeChanImpl::_PSEmitter_emissionLatitudeChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_emissionLatitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!PSEmitter::PSEmitter_emissionLatitudeChanImpl::_PSEmitter_emissionLatitudeChan)
  {
    v0 = (OZChannelAngle *)operator new();
    PSEmitter::PSEmitter_emissionLatitudeChanImpl::PSEmitter_emissionLatitudeChanImpl(v0);
    PSEmitter::PSEmitter_emissionLatitudeChanImpl::_PSEmitter_emissionLatitudeChan = (uint64_t)v0;
  }
}

void sub_1B2FB7344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *PSEmitter::PSEmitter_emissionLatitudeChanImpl::PSEmitter_emissionLatitudeChanImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DDEF0;
  this->var5 = (PCString *)&unk_1E65DDF10;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 6.28318531);
  return this;
}

void sub_1B2FB73F4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(PSEmitter::PSEmitter_emissionLongitudeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(void)::PSEmitter_emissionLongitudeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(void)::PSEmitter_emissionLongitudeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_emissionLongitudeChanImpl::_PSEmitter_emissionLongitudeChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_emissionLongitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!PSEmitter::PSEmitter_emissionLongitudeChanImpl::_PSEmitter_emissionLongitudeChan)
  {
    v0 = (OZChannelAngle *)operator new();
    PSEmitter::PSEmitter_emissionLongitudeChanImpl::PSEmitter_emissionLongitudeChanImpl(v0);
    PSEmitter::PSEmitter_emissionLongitudeChanImpl::_PSEmitter_emissionLongitudeChan = (uint64_t)v0;
  }
}

void sub_1B2FB74C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *PSEmitter::PSEmitter_emissionLongitudeChanImpl::PSEmitter_emissionLongitudeChanImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, 4.71238898);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, 4.71238898, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DDF68;
  this->var5 = (PCString *)&unk_1E65DDF88;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 6.28318531);
  return this;
}

void sub_1B2FB7580(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(PSEmitter::PSEmitter_emissionRangeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(void)::PSEmitter_emissionRangeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(void)::PSEmitter_emissionRangeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_emissionRangeChanImpl::_PSEmitter_emissionRangeChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_emissionRangeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!PSEmitter::PSEmitter_emissionRangeChanImpl::_PSEmitter_emissionRangeChan)
  {
    v0 = (OZChannelAngle *)operator new();
    PSEmitter::PSEmitter_emissionRangeChanImpl::PSEmitter_emissionRangeChanImpl(v0);
    PSEmitter::PSEmitter_emissionRangeChanImpl::_PSEmitter_emissionRangeChan = (uint64_t)v0;
  }
}

void sub_1B2FB764C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *PSEmitter::PSEmitter_emissionRangeChanImpl::PSEmitter_emissionRangeChanImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, 6.28318531);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, 6.28318531, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DDFE0;
  this->var5 = (PCString *)&unk_1E65DE000;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 6.28318531);
  return this;
}

void sub_1B2FB7708(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_birthRateChanImpl::getInstance(PSEmitter::PSEmitter_birthRateChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_birthRateChanImpl::getInstance(void)::PSEmitter_birthRateChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_birthRateChanImpl::getInstance(void)::PSEmitter_birthRateChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_birthRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_birthRateChanImpl::_PSEmitter_birthRateChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_birthRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_birthRateChanImpl::_PSEmitter_birthRateChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_birthRateChanImpl::PSEmitter_birthRateChanImpl(v0);
    PSEmitter::PSEmitter_birthRateChanImpl::_PSEmitter_birthRateChan = (uint64_t)v0;
  }
}

void sub_1B2FB77D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_birthRateChanImpl::PSEmitter_birthRateChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DE058;
  this->var5 = (PCString *)&unk_1E65DE078;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 50.0);
  return this;
}

void sub_1B2FB7884(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_birthRateChanInfo::getInstance(PSEmitter::PSEmitter_birthRateChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_birthRateChanInfo::getInstance(void)::PSEmitter_birthRateChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_birthRateChanInfo::getInstance(void)::PSEmitter_birthRateChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_birthRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_birthRateChanInfo::_PSEmitter_birthRateChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_birthRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_birthRateChanInfo *v0;

  if (!PSEmitter::PSEmitter_birthRateChanInfo::_PSEmitter_birthRateChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_birthRateChanInfo *)operator new();
    PSEmitter::PSEmitter_birthRateChanInfo::PSEmitter_birthRateChanInfo(v0);
    PSEmitter::PSEmitter_birthRateChanInfo::_PSEmitter_birthRateChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB7950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_birthRateChanInfo *PSEmitter::PSEmitter_birthRateChanInfo::PSEmitter_birthRateChanInfo(PSEmitter::PSEmitter_birthRateChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_birthRateChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DE0D0;
  *((_QWORD *)this + 10) = &unk_1E65DE0F0;
  return this;
}

void sub_1B2FB7A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_initialNumChanImpl::getInstance(PSEmitter::PSEmitter_initialNumChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_initialNumChanImpl::getInstance(void)::PSEmitter_initialNumChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_initialNumChanImpl::getInstance(void)::PSEmitter_initialNumChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_initialNumChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_initialNumChanImpl::_PSEmitter_initialNumChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_initialNumChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_initialNumChanImpl::_PSEmitter_initialNumChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_initialNumChanImpl::PSEmitter_initialNumChanImpl(v0);
    PSEmitter::PSEmitter_initialNumChanImpl::_PSEmitter_initialNumChan = (uint64_t)v0;
  }
}

void sub_1B2FB7AD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_initialNumChanImpl::PSEmitter_initialNumChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DE148;
  this->var5 = (PCString *)&unk_1E65DE168;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2FB7B7C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(PSEmitter::PSEmitter_lifetimeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(void)::PSEmitter_lifetimeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(void)::PSEmitter_lifetimeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_lifetimeChanImpl::_PSEmitter_lifetimeChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_lifetimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_lifetimeChanImpl::_PSEmitter_lifetimeChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_lifetimeChanImpl::PSEmitter_lifetimeChanImpl(v0);
    PSEmitter::PSEmitter_lifetimeChanImpl::_PSEmitter_lifetimeChan = (uint64_t)v0;
  }
}

void sub_1B2FB7C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_lifetimeChanImpl::PSEmitter_lifetimeChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DE1C0;
  this->var5 = (PCString *)&unk_1E65DE1E0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 50.0);
  return this;
}

void sub_1B2FB7CF8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(PSEmitter::PSEmitter_lifetimeChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(void)::PSEmitter_lifetimeChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(void)::PSEmitter_lifetimeChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_lifetimeChanInfo::_PSEmitter_lifetimeChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_lifetimeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_lifetimeChanInfo *v0;

  if (!PSEmitter::PSEmitter_lifetimeChanInfo::_PSEmitter_lifetimeChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_lifetimeChanInfo *)operator new();
    PSEmitter::PSEmitter_lifetimeChanInfo::PSEmitter_lifetimeChanInfo(v0);
    PSEmitter::PSEmitter_lifetimeChanInfo::_PSEmitter_lifetimeChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB7DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_lifetimeChanInfo *PSEmitter::PSEmitter_lifetimeChanInfo::PSEmitter_lifetimeChanInfo(PSEmitter::PSEmitter_lifetimeChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_lifetimeChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DE238;
  *((_QWORD *)this + 10) = &unk_1E65DE258;
  return this;
}

void sub_1B2FB7E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_speedChanImpl::getInstance(PSEmitter::PSEmitter_speedChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_speedChanImpl::getInstance(void)::PSEmitter_speedChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_speedChanImpl::getInstance(void)::PSEmitter_speedChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_speedChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_speedChanImpl::_PSEmitter_speedChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_speedChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_speedChanImpl::_PSEmitter_speedChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_speedChanImpl::PSEmitter_speedChanImpl(v0);
    PSEmitter::PSEmitter_speedChanImpl::_PSEmitter_speedChan = (uint64_t)v0;
  }
}

void sub_1B2FB7F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_speedChanImpl::PSEmitter_speedChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DE2B0;
  this->var5 = (PCString *)&unk_1E65DE2D0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 50.0);
  return this;
}

void sub_1B2FB7FF4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_speedChanInfo::getInstance(PSEmitter::PSEmitter_speedChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_speedChanInfo::getInstance(void)::PSEmitter_speedChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_speedChanInfo::getInstance(void)::PSEmitter_speedChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_speedChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_speedChanInfo::_PSEmitter_speedChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_speedChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_speedChanInfo *v0;

  if (!PSEmitter::PSEmitter_speedChanInfo::_PSEmitter_speedChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_speedChanInfo *)operator new();
    PSEmitter::PSEmitter_speedChanInfo::PSEmitter_speedChanInfo(v0);
    PSEmitter::PSEmitter_speedChanInfo::_PSEmitter_speedChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB80C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_speedChanInfo *PSEmitter::PSEmitter_speedChanInfo::PSEmitter_speedChanInfo(PSEmitter::PSEmitter_speedChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_speedChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DE328;
  *((_QWORD *)this + 10) = &unk_1E65DE348;
  return this;
}

void sub_1B2FB8174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_spinChanImpl::getInstance(PSEmitter::PSEmitter_spinChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_spinChanImpl::getInstance(void)::PSEmitter_spinChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_spinChanImpl::getInstance(void)::PSEmitter_spinChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_spinChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_spinChanImpl::_PSEmitter_spinChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_spinChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_spinChanImpl::_PSEmitter_spinChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_spinChanImpl::PSEmitter_spinChanImpl(v0);
    PSEmitter::PSEmitter_spinChanImpl::_PSEmitter_spinChan = (uint64_t)v0;
  }
}

void sub_1B2FB8240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_spinChanImpl::PSEmitter_spinChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DE3A0;
  this->var5 = (PCString *)&unk_1E65DE3C0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 50.0);
  return this;
}

void sub_1B2FB82F0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_spinChanInfo::getInstance(PSEmitter::PSEmitter_spinChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_spinChanInfo::getInstance(void)::PSEmitter_spinChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_spinChanInfo::getInstance(void)::PSEmitter_spinChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_spinChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_spinChanInfo::_PSEmitter_spinChanInfo;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_spinChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_spinChanInfo *v0;

  if (!PSEmitter::PSEmitter_spinChanInfo::_PSEmitter_spinChanInfo)
  {
    v0 = (PSEmitter::PSEmitter_spinChanInfo *)operator new();
    PSEmitter::PSEmitter_spinChanInfo::PSEmitter_spinChanInfo(v0);
    PSEmitter::PSEmitter_spinChanInfo::_PSEmitter_spinChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FB83BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_spinChanInfo *PSEmitter::PSEmitter_spinChanInfo::PSEmitter_spinChanInfo(PSEmitter::PSEmitter_spinChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_spinChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DE418;
  *((_QWORD *)this + 10) = &unk_1E65DE438;
  return this;
}

void sub_1B2FB8470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(PSEmitter::PSEmitter_tintAmountChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(void)::PSEmitter_tintAmountChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(void)::PSEmitter_tintAmountChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_tintAmountChanImpl::_PSEmitter_tintAmountChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_tintAmountChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSEmitter::PSEmitter_tintAmountChanImpl::_PSEmitter_tintAmountChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSEmitter::PSEmitter_tintAmountChanImpl::PSEmitter_tintAmountChanImpl(v0);
    PSEmitter::PSEmitter_tintAmountChanImpl::_PSEmitter_tintAmountChan = (uint64_t)v0;
  }
}

void sub_1B2FB853C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSEmitter::PSEmitter_tintAmountChanImpl::PSEmitter_tintAmountChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DE490;
  this->var5 = (PCString *)&unk_1E65DE4B0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 0.0);
  return this;
}

void sub_1B2FB85E8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(PSEmitter::PSEmitter_renderSpaceChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(void)::PSEmitter_renderSpaceChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(void)::PSEmitter_renderSpaceChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter::PSEmitter_renderSpaceChanImpl::_PSEmitter_renderSpaceChan;
}

void std::__call_once_param<std::tuple<PSEmitter::PSEmitter_renderSpaceChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter::PSEmitter_renderSpaceChanImpl *v0;

  if (!PSEmitter::PSEmitter_renderSpaceChanImpl::_PSEmitter_renderSpaceChan)
  {
    v0 = (PSEmitter::PSEmitter_renderSpaceChanImpl *)operator new();
    PSEmitter::PSEmitter_renderSpaceChanImpl::PSEmitter_renderSpaceChanImpl(v0);
    PSEmitter::PSEmitter_renderSpaceChanImpl::_PSEmitter_renderSpaceChan = (uint64_t)v0;
  }
}

void sub_1B2FB86B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSEmitter::PSEmitter_renderSpaceChanImpl *PSEmitter::PSEmitter_renderSpaceChanImpl::PSEmitter_renderSpaceChanImpl(PSEmitter::PSEmitter_renderSpaceChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PSEmitter::PSEmitter_renderSpaceChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DE508;
  *((_QWORD *)this + 5) = &unk_1E65DE528;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FB8764(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  char v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  if ((_OWORD *)result != a2)
  {
    v25 = v3;
    v26 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = v10[1];
          v21 = *v10;
          v22 = v12;
          v13 = v10[3];
          v23 = v10[2];
          v24 = v13;
          v14 = v9;
          while (1)
          {
            v15 = (_OWORD *)((char *)v6 + v14);
            v16 = *(_OWORD *)((char *)v6 + v14 + 16);
            v15[4] = *(_OWORD *)((char *)v6 + v14);
            v15[5] = v16;
            v17 = *(_OWORD *)((char *)v6 + v14 + 48);
            v15[6] = *(_OWORD *)((char *)v6 + v14 + 32);
            v15[7] = v17;
            if (!v14)
              break;
            v14 -= 64;
            result = (*a3)(&v21, (char *)v6 + v14);
            if ((result & 1) == 0)
            {
              v18 = (_OWORD *)((char *)v6 + v14 + 64);
              goto LABEL_10;
            }
          }
          v18 = v6;
LABEL_10:
          v19 = v22;
          *v18 = v21;
          v18[1] = v19;
          v20 = v24;
          v18[2] = v23;
          v18[3] = v20;
        }
        v7 = v10 + 4;
        v9 += 64;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if ((_OWORD *)result != a2)
  {
    v22 = v3;
    v23 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      v9 = (_OWORD *)(result - 64);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v11 = v6[1];
          v18 = *v6;
          v19 = v11;
          v12 = v6[3];
          v20 = v6[2];
          v21 = v12;
          v13 = v9;
          do
          {
            v14 = v13[5];
            v13[8] = v13[4];
            v13[9] = v14;
            v15 = v13[7];
            v13[10] = v13[6];
            v13[11] = v15;
            result = (*a3)(&v18, v13);
            v13 -= 4;
          }
          while ((result & 1) != 0);
          v16 = v19;
          v13[8] = v18;
          v13[9] = v16;
          v17 = v21;
          v13[10] = v20;
          v13[11] = v17;
        }
        v7 = v6 + 4;
        v9 += 4;
      }
      while (v6 + 4 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v11 = a1[2];
      v10 = a1[3];
      v13 = *a1;
      v12 = a1[1];
      v14 = a3[3];
      v16 = *a3;
      v15 = a3[1];
      a1[2] = a3[2];
      a1[3] = v14;
      *a1 = v16;
      a1[1] = v15;
      *a3 = v13;
      a3[1] = v12;
      result = 1;
LABEL_9:
      a3[2] = v11;
      a3[3] = v10;
      return result;
    }
    v32 = a1[2];
    v31 = a1[3];
    v34 = *a1;
    v33 = a1[1];
    v35 = a2[3];
    v37 = *a2;
    v36 = a2[1];
    a1[2] = a2[2];
    a1[3] = v35;
    *a1 = v37;
    a1[1] = v36;
    *a2 = v34;
    a2[1] = v33;
    a2[2] = v32;
    a2[3] = v31;
    if ((*a4)(a3, a2))
    {
      v11 = a2[2];
      v10 = a2[3];
      v39 = *a2;
      v38 = a2[1];
      v40 = a3[3];
      v42 = *a3;
      v41 = a3[1];
      a2[2] = a3[2];
      a2[3] = v40;
      *a2 = v42;
      a2[1] = v41;
      *a3 = v39;
      a3[1] = v38;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v18 = a2[2];
    v17 = a2[3];
    v20 = *a2;
    v19 = a2[1];
    v21 = a3[3];
    v23 = *a3;
    v22 = a3[1];
    a2[2] = a3[2];
    a2[3] = v21;
    *a2 = v23;
    a2[1] = v22;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    a3[3] = v17;
    if ((*a4)(a2, a1))
    {
      v25 = a1[2];
      v24 = a1[3];
      v27 = *a1;
      v26 = a1[1];
      v28 = a2[3];
      v30 = *a2;
      v29 = a2[1];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v30;
      a1[1] = v29;
      *a2 = v27;
      a2[1] = v26;
      result = 2;
      a2[2] = v25;
      a2[3] = v24;
      return result;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PSEmitter::RenderEntry *,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = a2;
  v6 = a1[1];
  v28 = *a1;
  v29 = v6;
  v7 = a1[3];
  v30 = a1[2];
  v31 = v7;
  if (((*a3)(&v28, a2 - 4) & 1) != 0)
  {
    v8 = a1;
    do
      v8 += 4;
    while (((*a3)(&v28, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 4;
    do
    {
      v8 = v9;
      if (v9 >= v4)
        break;
      v10 = (*a3)(&v28, v9);
      v9 = v8 + 4;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 4;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    v12 = v8[1];
    v13 = v8[3];
    v34 = v8[2];
    v35 = v13;
    v32 = v11;
    v33 = v12;
    v14 = *v4;
    v15 = v4[1];
    v16 = v4[3];
    v8[2] = v4[2];
    v8[3] = v16;
    *v8 = v14;
    v8[1] = v15;
    v17 = v32;
    v18 = v33;
    v19 = v35;
    v4[2] = v34;
    v4[3] = v19;
    *v4 = v17;
    v4[1] = v18;
    do
      v8 += 4;
    while (!(*a3)(&v28, v8));
    do
      v4 -= 4;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  v20 = v8 - 4;
  if (v8 - 4 != a1)
  {
    v21 = *v20;
    v22 = *(v8 - 3);
    v23 = *(v8 - 1);
    a1[2] = *(v8 - 2);
    a1[3] = v23;
    *a1 = v21;
    a1[1] = v22;
  }
  v24 = v28;
  v25 = v29;
  v26 = v31;
  *(v8 - 2) = v30;
  *(v8 - 1) = v26;
  *v20 = v24;
  *(v8 - 3) = v25;
  return v8;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PSEmitter::RenderEntry *,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = 0;
  v7 = a1[1];
  v27 = *a1;
  v28 = v7;
  v8 = a1[3];
  v29 = a1[2];
  v30 = v8;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v27) & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 4];
  if (v6 == 4)
  {
    do
    {
      if (v9 >= a2)
        break;
      a2 -= 4;
    }
    while (((*a3)(a2, &v27) & 1) == 0);
  }
  else
  {
    do
      a2 -= 4;
    while (!(*a3)(a2, &v27));
  }
  if (v9 < a2)
  {
    v11 = &a1[v6];
    v12 = a2;
    do
    {
      v14 = v11[1];
      v31 = *v11;
      v13 = v31;
      v32 = v14;
      v16 = v11[3];
      v33 = v11[2];
      v15 = v33;
      v34 = v16;
      v18 = v12[2];
      v17 = v12[3];
      v19 = v12[1];
      *v11 = *v12;
      v11[1] = v19;
      v11[2] = v18;
      v11[3] = v17;
      v12[2] = v15;
      v12[3] = v16;
      *v12 = v13;
      v12[1] = v14;
      do
        v11 += 4;
      while (((*a3)(v11, &v27) & 1) != 0);
      do
        v12 -= 4;
      while (!(*a3)(v12, &v27));
    }
    while (v11 < v12);
    v10 = v11 - 4;
  }
  if (v10 != a1)
  {
    v20 = *v10;
    v21 = v10[1];
    v22 = v10[3];
    a1[2] = v10[2];
    a1[3] = v22;
    *a1 = v20;
    a1[1] = v21;
  }
  v23 = v27;
  v24 = v28;
  v25 = v30;
  v10[2] = v29;
  v10[3] = v25;
  *v10 = v23;
  v10[1] = v24;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v6 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 4;
      if (!(*a3)(a2 - 4, a1))
        return 1;
      v10 = a1[2];
      v9 = a1[3];
      v12 = *a1;
      v11 = a1[1];
      v13 = *(a2 - 1);
      v15 = *v8;
      v14 = *(a2 - 3);
      a1[2] = *(a2 - 2);
      a1[3] = v13;
      *a1 = v15;
      a1[1] = v14;
      *v8 = v12;
      *(a2 - 3) = v11;
      result = 1;
      *(a2 - 2) = v10;
      *(a2 - 1) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      v16 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(a1, a1 + 4, a1 + 8, a3);
      v17 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v17, v16))
    {
      v20 = v17[1];
      v29 = *v17;
      v30 = v20;
      v21 = v17[3];
      v31 = v17[2];
      v32 = v21;
      v22 = v18;
      while (1)
      {
        v23 = (__int128 *)((char *)a1 + v22);
        v24 = *(__int128 *)((char *)a1 + v22 + 144);
        v23[12] = *(__int128 *)((char *)a1 + v22 + 128);
        v23[13] = v24;
        v25 = *(__int128 *)((char *)a1 + v22 + 176);
        v23[14] = *(__int128 *)((char *)a1 + v22 + 160);
        v23[15] = v25;
        if (v22 == -128)
          break;
        v22 -= 64;
        if (((*a3)(&v29, v23 + 4) & 1) == 0)
        {
          v26 = (__int128 *)((char *)a1 + v22 + 192);
          goto LABEL_12;
        }
      }
      v26 = a1;
LABEL_12:
      v27 = v30;
      *v26 = v29;
      v26[1] = v27;
      v28 = v32;
      v26[2] = v31;
      v26[3] = v28;
      if (++v19 == 8)
        return v17 + 4 == a2;
    }
    v16 = v17;
    v18 += 64;
    v17 += 4;
    if (v17 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((__int128 *)a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v12 = a3[2];
    v11 = a3[3];
    v14 = *a3;
    v13 = a3[1];
    v15 = a4[3];
    v17 = *a4;
    v16 = a4[1];
    a3[2] = a4[2];
    a3[3] = v15;
    *a3 = v17;
    a3[1] = v16;
    *a4 = v14;
    a4[1] = v13;
    a4[2] = v12;
    a4[3] = v11;
    if ((*a5)(a3, a2))
    {
      v19 = a2[2];
      v18 = a2[3];
      v21 = *a2;
      v20 = a2[1];
      v22 = a3[3];
      v24 = *a3;
      v23 = a3[1];
      a2[2] = a3[2];
      a2[3] = v22;
      *a2 = v24;
      a2[1] = v23;
      *a3 = v21;
      a3[1] = v20;
      a3[2] = v19;
      a3[3] = v18;
      if ((*a5)(a2, (__int128 *)a1))
      {
        v25 = *(_OWORD *)(a1 + 32);
        result = *(__n128 *)(a1 + 48);
        v27 = *(_OWORD *)a1;
        v26 = *(_OWORD *)(a1 + 16);
        v28 = a2[3];
        v30 = *a2;
        v29 = a2[1];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v28;
        *(_OWORD *)a1 = v30;
        *(_OWORD *)(a1 + 16) = v29;
        *a2 = v27;
        a2[1] = v26;
        a2[2] = v25;
        a2[3] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a6)(a5, a4, v12))
  {
    v15 = a4[2];
    v14 = a4[3];
    v17 = *a4;
    v16 = a4[1];
    v18 = a5[3];
    v20 = *a5;
    v19 = a5[1];
    a4[2] = a5[2];
    a4[3] = v18;
    *a4 = v20;
    a4[1] = v19;
    *a5 = v17;
    a5[1] = v16;
    a5[2] = v15;
    a5[3] = v14;
    if ((*a6)(a4, a3))
    {
      v22 = a3[2];
      v21 = a3[3];
      v24 = *a3;
      v23 = a3[1];
      v25 = a4[3];
      v27 = *a4;
      v26 = a4[1];
      a3[2] = a4[2];
      a3[3] = v25;
      *a3 = v27;
      a3[1] = v26;
      *a4 = v24;
      a4[1] = v23;
      a4[2] = v22;
      a4[3] = v21;
      if ((*a6)(a3, a2))
      {
        v29 = a2[2];
        v28 = a2[3];
        v31 = *a2;
        v30 = a2[1];
        v32 = a3[3];
        v34 = *a3;
        v33 = a3[1];
        a2[2] = a3[2];
        a2[3] = v32;
        *a2 = v34;
        a2[1] = v33;
        *a3 = v31;
        a3[1] = v30;
        a3[2] = v29;
        a3[3] = v28;
        if ((*a6)(a2, (__int128 *)a1))
        {
          v35 = *(_OWORD *)(a1 + 32);
          result = *(__n128 *)(a1 + 48);
          v37 = *(_OWORD *)a1;
          v36 = *(_OWORD *)(a1 + 16);
          v38 = a2[3];
          v40 = *a2;
          v39 = a2[1];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v38;
          *(_OWORD *)a1 = v40;
          *(_OWORD *)(a1 + 16) = v39;
          *a2 = v37;
          a2[1] = v36;
          a2[2] = v35;
          a2[3] = (__int128)result;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,PSEmitter::RenderEntry*>(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, __n128 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 *v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) >> 6;
    if ((uint64_t)a2 - a1 >= 65)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)(a1 + (v11 << 6));
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(a1, a4, v10, v13);
        v13 -= 4;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          v17 = v15[2];
          v16 = v15[3];
          v19 = *v15;
          v18 = v15[1];
          v20 = *(__n128 *)(a1 + 48);
          v22 = *(__n128 *)a1;
          v21 = *(__n128 *)(a1 + 16);
          v15[2] = *(__n128 *)(a1 + 32);
          v15[3] = v20;
          *v15 = v22;
          v15[1] = v21;
          *(__n128 *)a1 = v19;
          *(__n128 *)(a1 + 16) = v18;
          *(__n128 *)(a1 + 32) = v17;
          *(__n128 *)(a1 + 48) = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(a1, a4, v10, (__n128 *)a1);
        }
        v15 += 4;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 65)
    {
      return v14;
    }
    else
    {
      v37 = v14;
      v23 = (unint64_t)v9 >> 6;
      do
      {
        v24 = 0;
        v38 = *(__n128 *)a1;
        v39 = *(__n128 *)(a1 + 16);
        v40 = *(__n128 *)(a1 + 32);
        v41 = *(__n128 *)(a1 + 48);
        v25 = (_OWORD *)a1;
        do
        {
          v26 = (__n128 *)&v25[4 * v24 + 4];
          v27 = (2 * v24) | 1;
          v28 = 2 * v24 + 2;
          if (v28 < v23 && (*a4)((__n128 *)&v25[4 * v24 + 4], (__n128 *)&v25[4 * v24 + 8]))
          {
            v26 += 4;
            v27 = v28;
          }
          v29 = *v26;
          v30 = v26[1];
          v31 = v26[3];
          v25[2] = v26[2];
          v25[3] = v31;
          *v25 = v29;
          v25[1] = v30;
          v25 = v26;
          v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
        v7 -= 4;
        if (v26 == v7)
        {
          v26[2] = v40;
          v26[3] = v41;
          *v26 = v38;
          v26[1] = v39;
        }
        else
        {
          v32 = *v7;
          v33 = v7[1];
          v34 = v7[3];
          v26[2] = v7[2];
          v26[3] = v34;
          *v26 = v32;
          v26[1] = v33;
          *v7 = v38;
          v7[1] = v39;
          v7[2] = v40;
          v7[3] = v41;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(a1, (uint64_t)&v26[4], (uint64_t (**)(__int128 *, __int128 *))a4, ((uint64_t)&v26[4] - a1) >> 6);
        }
      }
      while (v23-- > 2);
      return v37;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(uint64_t a1, unsigned int (**a2)(__n128 *, __n128 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 result;
  __n128 v17;
  __n128 v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v31 = v4;
    v32 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 6)
    {
      v12 = ((uint64_t)a4 - a1) >> 5;
      v13 = v12 + 1;
      v14 = (__n128 *)(a1 + ((v12 + 1) << 6));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 4))
      {
        v14 += 4;
        v13 = v15;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v14, v7) & 1) == 0)
      {
        v17 = v7[1];
        v27 = *v7;
        v28 = v17;
        v18 = v7[3];
        v29 = v7[2];
        v30 = v18;
        do
        {
          v19 = v14;
          v20 = *v14;
          v21 = v14[1];
          v22 = v14[3];
          v7[2] = v14[2];
          v7[3] = v22;
          *v7 = v20;
          v7[1] = v21;
          if (v9 < v13)
            break;
          v23 = (2 * v13) | 1;
          v14 = (__n128 *)(a1 + (v23 << 6));
          v24 = 2 * v13 + 2;
          if (v24 < a3)
          {
            if ((*a2)((__n128 *)(a1 + (v23 << 6)), v14 + 4))
            {
              v14 += 4;
              v23 = v24;
            }
          }
          v7 = v19;
          v13 = v23;
        }
        while (!(*a2)(v14, &v27));
        result = v27;
        v25 = v28;
        v26 = v30;
        v19[2] = v29;
        v19[3] = v26;
        *v19 = result;
        v19[1] = v25;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v25 = v4;
    v26 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + (v6 >> 1 << 6));
    v11 = (__int128 *)(a2 - 64);
    if ((*a3)(v10, (__int128 *)(a2 - 64)))
    {
      v13 = v11[1];
      v21 = *v11;
      v22 = v13;
      v14 = v11[3];
      v23 = v11[2];
      v24 = v14;
      do
      {
        v15 = v10;
        v16 = *v10;
        v17 = v10[1];
        v18 = v10[3];
        v11[2] = v10[2];
        v11[3] = v18;
        *v11 = v16;
        v11[1] = v17;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + (v9 << 6));
        v11 = v15;
      }
      while (((*a3)(v10, &v21) & 1) != 0);
      v19 = v22;
      *v15 = v21;
      v15[1] = v19;
      result = *(double *)&v23;
      v20 = v24;
      v15[2] = v23;
      v15[3] = v20;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*,false>(OZSimStateElement *a1, __int128 *a2, uint64_t (**a3)(__int128 *, const OZSimStateElement *), uint64_t a4, char a5)
{
  const OZSimStateElement *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  char v17;
  __int128 *v18;
  char v19;
  int v20;
  uint64_t (*v21)(__int128 *, const OZSimStateElement *);
  __int128 *v22;
  __int128 *v23;
  OZSimStateElement *v24;

  v7 = (const OZSimStateElement *)a2;
  v8 = (__int128 *)a1;
  v23 = a2;
  v24 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - (const OZSimStateElement *)v8;
    v11 = 0xEF7BDEF7BDEF7BDFLL * ((v7 - (const OZSimStateElement *)v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *a3;
        v23 = (__int128 *)((char *)v7 - 248);
        if (((unsigned int (*)(void))v21)())
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v24, &v23);
        return;
      case 3uLL:
        v23 = (__int128 *)((char *)v7 - 248);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)v8, (__int128 *)((char *)v8 + 248), (__int128 *)((char *)v7 - 248), a3);
        return;
      case 4uLL:
        v23 = (__int128 *)((char *)v7 - 248);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)v8, (__int128 *)((char *)v8 + 248), v8 + 31, (__int128 *)((char *)v7 - 248), a3);
        return;
      case 5uLL:
        v23 = (__int128 *)((char *)v7 - 248);
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)v8, (__int128 *)((char *)v8 + 248), v8 + 31, (__int128 *)((char *)v8 + 744), (__int128 *)((char *)v7 - 248), a3);
        return;
      default:
        if (v10 <= 5951)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)v8, v7, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(v8, v7, (uint64_t (**)(__int128 *, __int128 *))a3);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != (__int128 *)v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*,OZSimStateElement*>((OZSimStateElement *)v8, v7, v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (__int128 *)((char *)v7 - 248);
        if ((unint64_t)v10 < 0x7C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)((char *)v8 + 248 * v12), v8, v13, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = (const OZSimStateElement *)v23;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)v8, (__int128 *)((char *)v8 + 248 * (v11 >> 1)), v13, a3);
          v14 = 248 * v12;
          v15 = 248 * v12 - 248;
          v16 = v23;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((OZSimStateElement *)((char *)v24 + 248), (__int128 *)((char *)v24 + v15), v23 - 31, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((OZSimStateElement *)((char *)v24 + 496), (__int128 *)((char *)v24 + v14 + 248), (__int128 *)((char *)v16 - 744), a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((OZSimStateElement *)((char *)v24 + v15), (__int128 *)((char *)v24 + v14), (__int128 *)((char *)v24 + v14 + 248), a3);
          v22 = (__int128 *)((char *)v24 + v14);
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *>(&v24, &v22);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = ((uint64_t (*)(char *))*a3)((char *)v24 - 248);
        v7 = (const OZSimStateElement *)v23;
        if ((v17 & 1) == 0)
        {
          v8 = (__int128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OZSimStateElement *,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&)>(v24, v23, (unsigned int (**)(__int128 *))a3);
          goto LABEL_20;
        }
LABEL_12:
        v18 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OZSimStateElement *,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&)>(v24, (__int128 *)v7, (uint64_t (**)(void))a3);
        if ((v19 & 1) == 0)
          goto LABEL_19;
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((__int128 *)v24, v18, a3);
        v8 = (__int128 *)((char *)v18 + 248);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((__int128 *)((char *)v18 + 248), (__int128 *)v7, a3))
        {
          if (v20)
          {
            v24 = (OZSimStateElement *)((char *)v18 + 248);
            goto LABEL_18;
          }
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*,false>(v24, v18, a3, -v9, a5 & 1);
          v8 = (__int128 *)((char *)v18 + 248);
LABEL_20:
          a5 = 0;
          v24 = (OZSimStateElement *)v8;
          a4 = -v9;
          continue;
        }
        if ((v20 & 1) == 0)
        {
          v23 = v18;
          v8 = (__int128 *)v24;
          v7 = (const OZSimStateElement *)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(const OZSimStateElement **a1, __int128 **a2)
{
  const OZSimStateElement *v2;
  __int128 *v3;
  __int128 v4[15];

  v2 = *a1;
  v3 = *a2;
  OZSimStateElement::OZSimStateElement((OZSimStateElement *)v4, *a1);
  OZSimStateElement::operator=((uint64_t)v2, v3);
  OZSimStateElement::operator=((uint64_t)v3, v4);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v4);
}

void sub_1B2FB9C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(const OZSimStateElement *a1, const OZSimStateElement *a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  const OZSimStateElement *v5;
  uint64_t v7;
  const OZSimStateElement *v8;
  const OZSimStateElement *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13[15];

  if (a1 != a2)
  {
    v5 = (const OZSimStateElement *)((char *)a1 + 248);
    if ((const OZSimStateElement *)((char *)a1 + 248) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8;
        v8 = v5;
        if ((*a3)((__int128 *)v5, (uint64_t)v9))
        {
          OZSimStateElement::OZSimStateElement((OZSimStateElement *)v13, v8);
          v10 = v7;
          while (1)
          {
            OZSimStateElement::operator=((uint64_t)a1 + v10 + 248, (__int128 *)((char *)a1 + v10));
            if (!v10)
              break;
            v11 = (*a3)(v13, (uint64_t)a1 + v10 - 248);
            v10 -= 248;
            if ((v11 & 1) == 0)
            {
              v12 = (uint64_t)a1 + v10 + 248;
              goto LABEL_10;
            }
          }
          v12 = (uint64_t)a1;
LABEL_10:
          OZSimStateElement::operator=(v12, v13);
          OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v13);
        }
        v5 = (const OZSimStateElement *)((char *)v8 + 248);
        v7 += 248;
      }
      while ((const OZSimStateElement *)((char *)v8 + 248) != a2);
    }
  }
}

void sub_1B2FB9D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(__int128 *a1, const OZSimStateElement *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  const OZSimStateElement *v5;
  const OZSimStateElement *v7;
  __int128 v8[15];

  if (a1 != (__int128 *)a2)
  {
    v4 = a1;
    v5 = (const OZSimStateElement *)((char *)a1 + 248);
    if ((const OZSimStateElement *)((char *)a1 + 248) != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)((__int128 *)v5, v4))
        {
          OZSimStateElement::OZSimStateElement((OZSimStateElement *)v8, v7);
          do
          {
            OZSimStateElement::operator=((uint64_t)v4 + 248, v4);
            v4 = (__int128 *)((char *)v4 - 248);
          }
          while (((*a3)(v8, v4) & 1) != 0);
          OZSimStateElement::operator=((uint64_t)v4 + 248, v8);
          OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v8);
        }
        v5 = (const OZSimStateElement *)((char *)v7 + 248);
        v4 = (__int128 *)v7;
      }
      while ((const OZSimStateElement *)((char *)v7 + 248) != a2);
    }
  }
}

void sub_1B2FB9DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(const OZSimStateElement *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, const OZSimStateElement *))
{
  char v7;
  uint64_t result;
  const OZSimStateElement **v9;
  __int128 **v10;
  __int128 *v11;
  __int128 *v12;
  const OZSimStateElement *v13;

  v12 = a2;
  v13 = a1;
  v11 = a3;
  v7 = (*a4)(a2, a1);
  result = (*a4)(a3, (const OZSimStateElement *)a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>((const OZSimStateElement **)&v12, &v11);
    if (!(*a4)(v12, v13))
      return 1;
    v9 = &v13;
    v10 = &v12;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v13, &v12);
    if (!(*a4)(v11, (const OZSimStateElement *)v12))
      return 1;
    v9 = (const OZSimStateElement **)&v12;
    v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v13, &v11);
  return 1;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *>(const OZSimStateElement **a1, __int128 **a2)
{
  const OZSimStateElement *v2;
  __int128 *v3;
  __int128 v4[15];

  v2 = *a1;
  v3 = *a2;
  OZSimStateElement::OZSimStateElement((OZSimStateElement *)v4, *a1);
  OZSimStateElement::operator=((uint64_t)v2, v3);
  OZSimStateElement::operator=((uint64_t)v3, v4);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v4);
}

void sub_1B2FB9F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

const OZSimStateElement *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OZSimStateElement *,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&)>(OZSimStateElement *a1, __int128 *a2, unsigned int (**a3)(__int128 *))
{
  const OZSimStateElement *v6;
  const OZSimStateElement *v7;
  int v8;
  __int128 *v9;
  const OZSimStateElement *v10;
  __int128 v12[15];
  const OZSimStateElement *v13;
  const OZSimStateElement *v14;

  v13 = (const OZSimStateElement *)a2;
  v14 = a1;
  OZSimStateElement::OZSimStateElement((OZSimStateElement *)v12, a1);
  if ((((uint64_t (*)(__int128 *, uint64_t))*a3)(v12, (uint64_t)a2 - 248) & 1) != 0)
  {
    v6 = a1;
    do
    {
      v6 = (const OZSimStateElement *)((char *)v6 + 248);
      v14 = v6;
    }
    while ((((uint64_t (*)(__int128 *, const OZSimStateElement *))*a3)(v12, v6) & 1) == 0);
  }
  else
  {
    v7 = (OZSimStateElement *)((char *)a1 + 248);
    do
    {
      v6 = v7;
      v14 = v7;
      if (v7 >= v13)
        break;
      v8 = ((uint64_t (*)(__int128 *, const OZSimStateElement *))*a3)(v12, v7);
      v7 = (const OZSimStateElement *)((char *)v6 + 248);
    }
    while (!v8);
  }
  v9 = (__int128 *)v13;
  if (v6 < v13)
  {
    do
    {
      v9 = (__int128 *)((char *)v9 - 248);
      v13 = (const OZSimStateElement *)v9;
    }
    while ((((uint64_t (*)(__int128 *, __int128 *))*a3)(v12, v9) & 1) != 0);
    v6 = v14;
  }
  if (v6 < (const OZSimStateElement *)v9)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v14, (__int128 **)&v13);
      do
        v14 = (const OZSimStateElement *)((char *)v14 + 248);
      while (!(*a3)(v12));
      do
        v13 = (const OZSimStateElement *)((char *)v13 - 248);
      while ((((uint64_t (*)(__int128 *))*a3)(v12) & 1) != 0);
      v6 = v14;
    }
    while (v14 < v13);
  }
  if ((const OZSimStateElement *)((char *)v6 - 248) != a1)
    OZSimStateElement::operator=((uint64_t)a1, (__int128 *)((char *)v6 - 248));
  OZSimStateElement::operator=((uint64_t)v6 - 248, v12);
  v10 = v14;
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v12);
  return v10;
}

void sub_1B2FBA0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OZSimStateElement *,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&)>(OZSimStateElement *a1, __int128 *a2, uint64_t (**a3)(void))
{
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  const OZSimStateElement *v9;
  uint64_t (*v10)(void);
  const OZSimStateElement *v11;
  uint64_t v12;
  __int128 v14[15];
  const OZSimStateElement *v15;
  const OZSimStateElement *v16;

  v15 = (const OZSimStateElement *)a2;
  OZSimStateElement::OZSimStateElement((OZSimStateElement *)v14, a1);
  v5 = 0;
  do
  {
    v16 = (OZSimStateElement *)((char *)a1 + v5 + 248);
    v5 += 248;
  }
  while (((*a3)() & 1) != 0);
  v6 = (__int128 *)v15;
  if (v5 == 248)
  {
    v9 = (OZSimStateElement *)((char *)a1 + 248);
    do
    {
      if (v9 >= (const OZSimStateElement *)v6)
        break;
      v10 = *a3;
      v6 = (__int128 *)((char *)v6 - 248);
      v15 = (const OZSimStateElement *)v6;
    }
    while ((((uint64_t (*)(__int128 *, __int128 *))v10)(v6, v14) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)((char *)v15 - 248);
    do
    {
      v15 = (const OZSimStateElement *)v7;
      v8 = ((uint64_t (*)(__int128 *, __int128 *))*a3)(v7, v14);
      v7 = (__int128 *)((char *)v7 - 248);
    }
    while (!v8);
    v9 = v16;
  }
  v11 = v9;
  if (v9 < v15)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v16, (__int128 **)&v15);
      do
        v16 = (const OZSimStateElement *)((char *)v16 + 248);
      while (((*a3)() & 1) != 0);
      do
        v15 = (const OZSimStateElement *)((char *)v15 - 248);
      while (!(*a3)());
      v11 = v16;
    }
    while (v16 < v15);
  }
  v12 = (uint64_t)v11 - 248;
  if ((const OZSimStateElement *)((char *)v11 - 248) != a1)
    OZSimStateElement::operator=((uint64_t)a1, (__int128 *)((char *)v11 - 248));
  OZSimStateElement::operator=(v12, v14);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v14);
  return v12;
}

void sub_1B2FBA23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, const OZSimStateElement *))
{
  _BOOL8 v6;
  uint64_t (*v7)(__int128 *, const OZSimStateElement *);
  __int128 *v8;
  __int128 *v9;
  int v10;
  uint64_t v11;
  __int128 v13[15];
  __int128 *v14;
  const OZSimStateElement *v15;

  v14 = a2;
  v15 = (const OZSimStateElement *)a1;
  v6 = 1;
  switch(0xEF7BDEF7BDEF7BDFLL * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      v7 = *a3;
      v14 = (__int128 *)((char *)a2 - 248);
      if (((unsigned int (*)(void))v7)())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v15, &v14);
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)a1, (__int128 *)((char *)a1 + 248), (__int128 *)((char *)a2 - 248), a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)a1, (__int128 *)((char *)a1 + 248), a1 + 31, (__int128 *)((char *)a2 - 248), a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)a1, (__int128 *)((char *)a1 + 248), a1 + 31, (__int128 *)((char *)a1 + 744), (__int128 *)((char *)a2 - 248), a3);
      return v6;
    default:
      v8 = a1 + 31;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((const OZSimStateElement *)a1, (__int128 *)((char *)a1 + 248), a1 + 31, a3);
      v9 = (__int128 *)((char *)a1 + 744);
      if (v9 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (!(*a3)(v9, (const OZSimStateElement *)v8))
  {
LABEL_12:
    v8 = v9;
    v9 = (__int128 *)((char *)v9 + 248);
    if (v9 == v14)
      return 1;
  }
  OZSimStateElement::OZSimStateElement((OZSimStateElement *)v13, (const OZSimStateElement *)v9);
  do
  {
    v11 = (uint64_t)v8;
    OZSimStateElement::operator=((uint64_t)v8 + 248, v8);
    if (v8 == (__int128 *)v15)
      break;
    v8 = (__int128 *)((char *)v8 - 248);
  }
  while (((*a3)(v13, (const OZSimStateElement *)(v11 - 248)) & 1) != 0);
  OZSimStateElement::operator=(v11, v13);
  if (++v10 != 8)
  {
    OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v13);
    goto LABEL_12;
  }
  v6 = (__int128 *)((char *)v9 + 248) == v14;
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v13);
  return v6;
}

void sub_1B2FBA43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(const OZSimStateElement *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, const OZSimStateElement *))
{
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  const OZSimStateElement *v13;

  v12 = a2;
  v13 = a1;
  v10 = a4;
  v11 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(a1, a2, a3, a5);
  if ((*a5)(a4, (const OZSimStateElement *)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>((const OZSimStateElement **)&v11, &v10);
    if ((*a5)(v11, (const OZSimStateElement *)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>((const OZSimStateElement **)&v12, &v11);
      if ((*a5)(v12, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v13, &v12);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(const OZSimStateElement *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, const OZSimStateElement *))
{
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  const OZSimStateElement *v16;

  v15 = a2;
  v16 = a1;
  v13 = a4;
  v14 = a3;
  v12 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, (const OZSimStateElement *)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>((const OZSimStateElement **)&v13, &v12);
    if ((*a6)(v13, (const OZSimStateElement *)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>((const OZSimStateElement **)&v14, &v13);
      if ((*a6)(v14, (const OZSimStateElement *)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>((const OZSimStateElement **)&v15, &v14);
        if ((*a6)(v15, a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v16, &v15);
      }
    }
  }
}

const OZSimStateElement *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*,OZSimStateElement*>(OZSimStateElement *a1, const OZSimStateElement *a2, const OZSimStateElement *a3, uint64_t (**a4)(__int128 *, const OZSimStateElement *))
{
  OZSimStateElement *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const OZSimStateElement *v11;
  const OZSimStateElement *v12;
  const OZSimStateElement *v14;
  const OZSimStateElement *v15;

  v15 = a1;
  if (a1 != a2)
  {
    v7 = a1;
    v8 = (a2 - a1) / 248;
    if (a2 - a1 >= 249)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9 + 1;
      v11 = (OZSimStateElement *)((char *)a1 + 248 * v9);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((uint64_t)v7, a4, v8, v11);
        v11 = (const OZSimStateElement *)((char *)v11 - 248);
        --v10;
      }
      while (v10);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v12 = a2;
      do
      {
        if ((*a4)((__int128 *)v12, v15))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<OZSimStateElement *&,OZSimStateElement *&>(&v14, (__int128 **)&v15);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((uint64_t)v15, a4, v8, v15);
        }
        v12 = (const OZSimStateElement *)((char *)v14 + 248);
        v14 = v12;
      }
      while (v12 != a3);
      v7 = v15;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(v7, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a4);
    return v14;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(uint64_t a1, uint64_t (**a2)(__int128 *, const OZSimStateElement *), uint64_t a3, const OZSimStateElement *a4)
{
  unint64_t v4;
  const OZSimStateElement *v5;
  int64_t v7;
  int64_t v10;
  __int128 *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[16];

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xEF7BDEF7BDEF7BDFLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = (0xDEF7BDEF7BDEF7BELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v11 = (__int128 *)(a1 + 248 * v10);
      v12 = 0xDEF7BDEF7BDEF7BELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)((__int128 *)(a1 + 248 * v10), (const OZSimStateElement *)((char *)v11 + 248)))
      {
        v11 = (__int128 *)((char *)v11 + 248);
        v10 = v12;
      }
      if (((*a2)(v11, v5) & 1) == 0)
      {
        OZSimStateElement::OZSimStateElement((OZSimStateElement *)v15, v5);
        do
        {
          v13 = (uint64_t)v11;
          OZSimStateElement::operator=((uint64_t)v5, v11);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = (__int128 *)(a1 + 248 * v14);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v14;
          }
          else if ((*a2)((__int128 *)(a1 + 248 * v14), (const OZSimStateElement *)((char *)v11 + 248)))
          {
            v11 = (__int128 *)((char *)v11 + 248);
          }
          else
          {
            v10 = v14;
          }
          v5 = (const OZSimStateElement *)v13;
        }
        while (!(*a2)(v11, (const OZSimStateElement *)v15));
        OZSimStateElement::operator=(v13, v15);
        OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v15);
      }
    }
  }
}

void sub_1B2FBA874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)&a9);
  _Unwind_Resume(a1);
}

void std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(OZSimStateElement *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  __int128 v12[15];

  if (a2 - (uint64_t)a1 >= 249)
  {
    v5 = (a2 - (uint64_t)a1) / 0xF8uLL;
    v6 = (__int128 *)(a2 - 248);
    do
    {
      OZSimStateElement::OZSimStateElement((OZSimStateElement *)v12, a1);
      v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((uint64_t)a1, a3, v5);
      v8 = v7;
      if (v6 == v7)
      {
        OZSimStateElement::operator=((uint64_t)v7, v12);
      }
      else
      {
        OZSimStateElement::operator=((uint64_t)v7, v6);
        OZSimStateElement::operator=((uint64_t)v6, v12);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>((uint64_t)a1, (uint64_t)v8 + 248, (uint64_t (**)(__int128 *, __int128 *))a3, 0xEF7BDEF7BDEF7BDFLL * (((char *)v8 + 248 - (char *)a1) >> 3));
      }
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v12);
      v6 = (__int128 *)((char *)v6 - 248);
      v11 = __OFSUB__(v5, 2);
      v9 = v5 == 2;
      v10 = (uint64_t)(v5 - 2) < 0;
      --v5;
    }
    while (!(v10 ^ v11 | v9));
  }
}

void sub_1B2FBA990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 248 * v6 + 248);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 248 * v6 + 248, a1 + 248 * v6 + 496))
    {
      v9 = (__int128 *)((char *)v9 + 248);
      v10 = v11;
    }
    OZSimStateElement::operator=(a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZSimStateElement const&,OZSimStateElement const&),OZSimStateElement*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  const OZSimStateElement *v9;
  uint64_t v10;
  __int128 v11[15];

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 248 * (v4 >> 1));
    v9 = (const OZSimStateElement *)(a2 - 248);
    if ((*a3)(v8, (__int128 *)(a2 - 248)))
    {
      OZSimStateElement::OZSimStateElement((OZSimStateElement *)v11, v9);
      do
      {
        v10 = (uint64_t)v8;
        OZSimStateElement::operator=((uint64_t)v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 248 * v7);
        v9 = (const OZSimStateElement *)v10;
      }
      while (((*a3)(v8, v11) & 1) != 0);
      OZSimStateElement::operator=(v10, v11);
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)v11);
    }
  }
}

void sub_1B2FBAB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZSimStateElement::~OZSimStateElement((OZSimStateElement *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<double,LessThanDouble,std::allocator<double>>::__emplace_unique_key_args<double,double const&>(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<double,LessThanDouble,std::allocator<double>>::__find_equal<double>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<double,LessThanDouble,std::allocator<double>>::__find_equal<double>(uint64_t a1, _QWORD *a2, double *a3)
{
  _QWORD *result;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  _QWORD *v7;
  double v8;

  v5 = *(uint64_t **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = *((double *)v4 + 4);
        if (v6 >= v8 || vabdd_f64(v6, v8) < 0.0000001)
          break;
        v4 = (uint64_t *)*v4;
        result = v7;
        if (!*v7)
          goto LABEL_12;
      }
      if (v8 >= v6)
        break;
      if (vabdd_f64(v8, v6) < 0.0000001)
        break;
      result = v4 + 1;
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
  }
  else
  {
    v7 = result;
  }
LABEL_12:
  *a2 = v7;
  return result;
}

void PSParticle::PSParticle(PSParticle *this)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  PCColor *v11;
  CGColorSpace *v12;

  *(_QWORD *)this = &off_1E65DE580;
  v2 = (__int128 *)MEMORY[0x1E0CA2E68];
  v3 = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 3) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)((char *)this + 8) = v3;
  v4 = *v2;
  *((_OWORD *)this + 2) = *v2;
  v5 = *((_QWORD *)v2 + 2);
  *((_QWORD *)this + 6) = v5;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 56) = _Q1;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_OWORD *)this + 5) = v4;
  *((_QWORD *)this + 12) = v5;
  *((_QWORD *)this + 13) = 0;
  v11 = (PCColor *)((char *)this + 112);
  PCInfo::getDefaultRGBColorSpace(&v12);
  PCColor::PCColor(v11, 1.0, 1.0, 1.0, 1.0, (OZChannelBase *)&v12);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_DWORD *)this + 56) = 0;
}

void sub_1B2FBACF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSParticle::PSParticle(PSParticle *this, int a2, const CMTime *a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  PCColor *v14;
  CGColorSpace *v15;

  *(_QWORD *)this = &off_1E65DE580;
  v5 = *(_OWORD *)&a3->value;
  *((_QWORD *)this + 3) = a3->epoch;
  *(_OWORD *)((char *)this + 8) = v5;
  v6 = MEMORY[0x1E0CA2E68];
  v7 = *MEMORY[0x1E0CA2E68];
  *((_OWORD *)this + 2) = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(v6 + 16);
  *((_QWORD *)this + 6) = v8;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 56) = _Q1;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_OWORD *)this + 5) = v7;
  *((_QWORD *)this + 12) = v8;
  *((_QWORD *)this + 13) = 0;
  v14 = (PCColor *)((char *)this + 112);
  PCInfo::getDefaultRGBColorSpace(&v15);
  PCColor::PCColor(v14, 1.0, 1.0, 1.0, 1.0, (OZChannelBase *)&v15);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_DWORD *)this + 56) = a2;
}

void sub_1B2FBADCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSParticle::~PSParticle(CGColorSpace **this)
{
  *this = (CGColorSpace *)&off_1E65DE580;
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 20);
}

{
  *this = (CGColorSpace *)&off_1E65DE580;
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 20);
  JUMPOUT(0x1B5E29170);
}

uint64_t PSParticle::simulationIsObjectAlive(PSParticle *this, CMTime *a2)
{
  CMTime v4;
  CMTime time2;
  CMTime time1;

  time1 = *(CMTime *)((char *)this + 8);
  time2 = *(CMTime *)((char *)this + 32);
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v4);
  time1 = *a2;
  time2 = v4;
  return CMTimeCompare(&time1, &time2) >> 31;
}

uint64_t PSParticle::getID(PSParticle *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t PSParticle::clone(PSParticle *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  CGColorSpace *v6;
  __int128 v7;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E65DE580;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)this + 56);
  *(_QWORD *)(v2 + 72) = *((_QWORD *)this + 9);
  v3 = *((_OWORD *)this + 6);
  *(_OWORD *)(v2 + 80) = *((_OWORD *)this + 5);
  *(_OWORD *)(v2 + 96) = v3;
  v4 = *((_OWORD *)this + 7);
  v5 = *((_OWORD *)this + 9);
  *(_OWORD *)(v2 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(v2 + 144) = v5;
  *(_OWORD *)(v2 + 112) = v4;
  v6 = (CGColorSpace *)*((_QWORD *)this + 20);
  *(_QWORD *)(v2 + 160) = v6;
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)((char *)this + 168);
  *(_BYTE *)(v2 + 184) = *((_BYTE *)this + 184);
  v7 = *((_OWORD *)this + 13);
  *(_OWORD *)(v2 + 192) = *((_OWORD *)this + 12);
  *(_OWORD *)(v2 + 208) = v7;
  *(_DWORD *)(v2 + 224) = *((_DWORD *)this + 56);
  return v2;
}

void sub_1B2FBAF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40AE952B93);
  _Unwind_Resume(a1);
}

void PSParticleType::PSParticleType(PSParticleType *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PSParticleType::PSParticleType_birthRateChanImpl *v6;
  PSParticleType::PSParticleType_birthRateChanInfo *Instance;
  OZChannelInfo *v8;
  PCURL *v9;
  PSParticleType::PSParticleType_birthRateVarChanImpl *v10;
  OZChannelImpl *v11;
  PCURL *v12;
  PSParticleType::PSParticleType_initialNumChanImpl *v13;
  OZChannelImpl *v14;
  PCURL *v15;
  PSParticleType::PSParticleType_lifetimeChanImpl *v16;
  PSParticleType::PSParticleType_lifetimeChanInfo *v17;
  OZChannelInfo *v18;
  PCURL *v19;
  PSParticleType::PSParticleType_lifetimeVarChanImpl *v20;
  OZChannelImpl *v21;
  PCURL *v22;
  PSParticleType::PSParticleType_speedChanImpl *v23;
  PSParticleType::PSParticleType_speedChanInfo *v24;
  OZChannelInfo *v25;
  PCURL *v26;
  PSParticleType::PSParticleType_speedVarChanImpl *v27;
  PSParticleType::PSParticleType_speedVarChanInfo *v28;
  OZChannelInfo *v29;
  PCURL *v30;
  PCURL *v31;
  PCURL *v32;
  PCURL *v33;
  PCURL *v34;
  PSParticleType::PSParticleType_rotVarChanInfo *v35;
  OZChannelInfo *v36;
  PCURL *v37;
  PSParticleType::PSParticleType_spinChanInfo *v38;
  OZChannelInfo *v39;
  PCURL *v40;
  PSParticleType::PSParticleType_spinVarChanImpl *v41;
  PSParticleType::PSParticleType_spinVarChanInfo *v42;
  OZChannelInfo *v43;
  PCURL *v44;
  PSParticleType::PSParticleType_colorModeChanImpl *v45;
  OZChannelImpl *v46;
  PCURL *v47;
  PCURL *v48;
  PCURL *v49;
  PCURL *v50;
  PSParticleType::PSParticleType_colorRepetitionsChanInfo *v51;
  OZChannelInfo *v52;
  PCURL *v53;
  PCURL *v54;
  PCURL *v55;
  PCURL *v56;
  PSParticleType::PSParticleType_scaleVarChanImpl *v57;
  PSParticleType::PSParticleType_scaleVarChanInfo *v58;
  OZChannelInfo *v59;
  PCURL *v60;
  PCURL *v61;
  PCURL *v62;
  PCURL *v63;
  PCURL *v64;
  PSParticleType::PSParticleType_sourceStartFrameChanImpl *v65;
  PSParticleType::PSParticleType_sourceStartFrameChanInfo *v66;
  OZChannelInfo *v67;
  PCURL *v68;
  PCURL *v69;
  PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *v70;
  PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *v71;
  OZChannelInfo *v72;
  PCURL *v73;
  PSParticleType::PSParticleType_sourceHoldFramesChanImpl *v74;
  OZChannelImpl *v75;
  PCURL *v76;
  PCURL *v77;
  PCURL *v78;
  PSParticleType::PSParticleType_shapeChanImpl *v79;
  OZChannelImpl *v80;
  PCURL *v81;
  PCURL *v82;
  PSParticleType::PSParticleType_pointSizeChanImpl *v83;
  PSParticleType::PSParticleType_pointSizeChanInfo *v84;
  OZChannelInfo *v85;
  PCURL *v86;
  PCString *v87;
  PCURL *v88;
  PSParticleType::PSParticleType_pointSpacingChanImpl *v89;
  PSParticleType::PSParticleType_pointSpacingChanInfo *v90;
  OZChannelInfo *v91;
  PCURL *v92;
  PSParticleType::PSParticleType_pointSpacingOSChanImpl *v93;
  PSParticleType::PSParticleType_pointSpacingOSChanInfo *v94;
  OZChannelInfo *v95;
  PCURL *v96;
  PSParticleType::PSParticleType_strokeWidthOSChanImpl *v97;
  PSParticleType::PSParticleType_strokeWidthOSChanInfo *v98;
  OZChannelInfo *v99;
  PCURL *v100;
  PCURL *v101;
  PSParticleType::PSParticleType_anchorDabsToChanImpl *v102;
  OZChannelImpl *v103;
  PCURL *v104;
  PCURL *v105;
  PSParticleType::PSParticleType_posOffsetVarChanImpl *v106;
  OZChannelImpl *v107;
  PCURL *v108;
  PCURL *v109;
  PCString *v110;
  PCString *v111;
  PSParticleType::PSParticleType_versionChanImpl *v112;
  OZChannelImpl *v113;
  PCString *v114;
  PCString *v115;
  PCString *v116;
  PCString *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  PCURL *v121;
  PCURL *v122;
  PCURL *v123;
  PCURL *v124;
  PCURL *v125;
  PCURL *v126;
  PCURL *v127;
  const void *Behavior;
  char *v129;
  unsigned int v130;
  CMTime v131;
  PCString v132;

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1088));
  *(_QWORD *)this = &off_1E65DE5D0;
  *((_QWORD *)this + 2) = &unk_1E65DEC50;
  *((_QWORD *)this + 6) = &unk_1E65DEEA8;
  *((_QWORD *)this + 136) = &unk_1E65DEF00;
  *((_QWORD *)this + 139) = &unk_1E65DEFD8;
  PCURL::PCURL((PCURL *)&v131, CFSTR("Particle Type Birth Rate"));
  Instance = (PSParticleType::PSParticleType_birthRateChanInfo *)PSParticleType::PSParticleType_birthRateChanImpl::getInstance(v6);
  v8 = (OZChannelInfo *)PSParticleType::PSParticleType_birthRateChanInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 1120), 30.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, (OZChannelImpl *)Instance, v8);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v9, CFSTR("Particle Type Birth Rate Variance "));
  v11 = (OZChannelImpl *)PSParticleType::PSParticleType_birthRateVarChanImpl::getInstance(v10);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 1272), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, v11, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v12, CFSTR("Particle Type Initial Num"));
  v14 = (OZChannelImpl *)PSParticleType::PSParticleType_initialNumChanImpl::getInstance(v13);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 1424), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, v14, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v15, CFSTR("Particle Type Lifetime"));
  v17 = (PSParticleType::PSParticleType_lifetimeChanInfo *)PSParticleType::PSParticleType_lifetimeChanImpl::getInstance(v16);
  v18 = (OZChannelInfo *)PSParticleType::PSParticleType_lifetimeChanInfo::getInstance(v17);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 1576), 5.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, (OZChannelImpl *)v17, v18);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v19, CFSTR("Particle Type Lifetime Variance"));
  v21 = (OZChannelImpl *)PSParticleType::PSParticleType_lifetimeVarChanImpl::getInstance(v20);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 1728), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, v21, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v22, CFSTR("Emitter Speed"));
  v24 = (PSParticleType::PSParticleType_speedChanInfo *)PSParticleType::PSParticleType_speedChanImpl::getInstance(v23);
  v25 = (OZChannelInfo *)PSParticleType::PSParticleType_speedChanInfo::getInstance(v24);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 1880), 100.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x6Au, 0, (OZChannelImpl *)v24, v25);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v26, CFSTR("Particle Type Speed Variance"));
  v28 = (PSParticleType::PSParticleType_speedVarChanInfo *)PSParticleType::PSParticleType_speedVarChanImpl::getInstance(v27);
  v29 = (OZChannelInfo *)PSParticleType::PSParticleType_speedVarChanInfo::getInstance(v28);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 2032), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x6Bu, 0, (OZChannelImpl *)v28, v29);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v30, CFSTR("Particle Type Align Rotation"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2184), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x84u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v31, CFSTR("Particle Type Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((PSParticleType *)((char *)this + 2336), 0.0, 0.0, 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x92u, 0, 4u, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v32, CFSTR("Particle Type Rotation End"));
  OZChannelRotation3D::OZChannelRotation3D((PSParticleType *)((char *)this + 3192), 0.0, 0.0, 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x93u, 0, 4u, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v33, CFSTR("Particle Type Rotation Over Stroke"));
  OZChannelAngleOverRange::OZChannelAngleOverRange((PSParticleType *)((char *)this + 4048), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x91u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v34, CFSTR("Particle Type Rotation Variance"));
  v36 = (OZChannelInfo *)PSParticleType::PSParticleType_rotVarChanInfo::getInstance(v35);
  OZChannelRotation3D::OZChannelRotation3D((PSParticleType *)((char *)this + 4208), 0.0, 0.0, 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x94u, 0, 4u, 0, v36);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v37, CFSTR("Particle Type Spin"));
  v39 = (OZChannelInfo *)PSParticleType::PSParticleType_spinChanInfo::getInstance(v38);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 5064), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x6Eu, 0, 0, v39);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v40, CFSTR("Particle Type Spin Variance"));
  v42 = (PSParticleType::PSParticleType_spinVarChanInfo *)PSParticleType::PSParticleType_spinVarChanImpl::getInstance(v41);
  v43 = (OZChannelInfo *)PSParticleType::PSParticleType_spinVarChanInfo::getInstance(v42);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 5216), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x6Fu, 0, (OZChannelImpl *)v42, v43);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v44, CFSTR("Particle Type Color Mode Enum"));
  PCURL::PCURL((PCURL *)&v132, CFSTR("Particle Type Color Mode"));
  v46 = (OZChannelImpl *)PSParticleType::PSParticleType_colorModeChanImpl::getInstance(v45);
  OZChannelEnum::OZChannelEnum((PSParticleType *)((char *)this + 5368), 0, (const PCString *)&v131, &v132, (OZChannelFolder *)((char *)this + 448), 0x81u, 0, v46, 0);
  PCString::~PCString(&v132);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v47, CFSTR("Particle Type Solid Color"));
  OZChannelColor::OZChannelColor((PSParticleType *)((char *)this + 5624), 1.0, 1.0, 1.0, 1.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x82u, 0, 6u);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v48, CFSTR("Particle Type Color Over Life"));
  OZChannelGradient::OZChannelGradient((PSParticleType *)((char *)this + 6784), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x70u, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v49, CFSTR("Particle Type Random Color"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7584), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x72u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v50, CFSTR("Particle Type Color Repetitions"));
  v52 = (OZChannelInfo *)PSParticleType::PSParticleType_colorRepetitionsChanInfo::getInstance(v51);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 7736), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x71u, 0, 0, v52);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v53, CFSTR("Particle Type Take Image Color"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7888), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x73u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v54, CFSTR("Particle Type Scale"));
  OZChannelScale3D::OZChannelScale3D((PSParticleType *)((char *)this + 8040), 1.0, 1.0, 1.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x74u, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v55, CFSTR("Particle Type Scale End"));
  OZChannelScale3D::OZChannelScale3D((PSParticleType *)((char *)this + 8632), 1.0, 1.0, 1.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x85u, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v56, CFSTR("Particle Type Scale Variance"));
  v58 = (PSParticleType::PSParticleType_scaleVarChanInfo *)PSParticleType::PSParticleType_scaleVarChanImpl::getInstance(v57);
  v59 = (OZChannelInfo *)PSParticleType::PSParticleType_scaleVarChanInfo::getInstance(v58);
  OZChannel3D::OZChannel3D((PSParticleType *)((char *)this + 9224), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x75u, 0, 2u, (OZChannelImpl *)v58, v59);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v60, CFSTR("Particle Type Is Premultiplied"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 9816), 0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x77u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v61, CFSTR("Particle Type Is Additive Blend"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 9968), 0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x78u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v62, CFSTR("Particle Type Animate Image"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 10120), 1, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x79u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v63, CFSTR("Particle Type Random Source Start Frame"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 10272), 1, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x7Au, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v64, CFSTR("Particle Type Source Start Frame"));
  v66 = (PSParticleType::PSParticleType_sourceStartFrameChanInfo *)PSParticleType::PSParticleType_sourceStartFrameChanImpl::getInstance(v65);
  v67 = (OZChannelInfo *)PSParticleType::PSParticleType_sourceStartFrameChanInfo::getInstance(v66);
  OZChannelFrame::OZChannelFrame((OZChannelFrame *)((char *)this + 10424), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x7Bu, 0, (OZChannelImpl *)v66, v67);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v68, CFSTR("Particle Type Source Start Frame Offset"));
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 10576), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x87u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v69, CFSTR("Particle Type Source Start Frame OS"));
  v71 = (PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *)PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::getInstance(v70);
  v72 = (OZChannelInfo *)PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::getInstance(v71);
  OZChannelDoubleOverRange::OZChannelDoubleOverRange((PSParticleType *)((char *)this + 10728), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x95u, 2u, (OZChannelImpl *)v71, v72);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v73, CFSTR("Particle Type Hold Frames"));
  v75 = (OZChannelImpl *)PSParticleType::PSParticleType_sourceHoldFramesChanImpl::getInstance(v74);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 10888), 1, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x7Cu, 0, v75, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v76, CFSTR("Particle Type Hold Frames Variance"));
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 11040), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x7Du, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v77, CFSTR("Particle Type Attach To Emitter"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 11192), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x7Eu, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v78, CFSTR("Particle Type Shape Enum"));
  PCURL::PCURL((PCURL *)&v132, CFSTR("Particle Type Shape"));
  v80 = (OZChannelImpl *)PSParticleType::PSParticleType_shapeChanImpl::getInstance(v79);
  OZChannelEnum::OZChannelEnum((PSParticleType *)((char *)this + 11344), 3u, (const PCString *)&v131, &v132, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, v80, 0);
  PCString::~PCString(&v132);
  PCString::~PCString((PCString *)&v131);
  LODWORD(v71) = *((_DWORD *)this + 20);
  PCURL::PCURL(v81, CFSTR("Particle Type Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 11600), v71, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x83u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v82, CFSTR("Particle Type Point Size"));
  v84 = (PSParticleType::PSParticleType_pointSizeChanInfo *)PSParticleType::PSParticleType_pointSizeChanImpl::getInstance(v83);
  v85 = (OZChannelInfo *)PSParticleType::PSParticleType_pointSizeChanInfo::getInstance(v84);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 11752), 2.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x7Fu, 0, (OZChannelImpl *)v84, v85);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v86, CFSTR("Particle Type Simulation Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 11904), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x89u, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCString::PCString(v87, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 12032), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 11904), 1u, 2, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v88, CFSTR("Particle Type Point Spacing"));
  v90 = (PSParticleType::PSParticleType_pointSpacingChanInfo *)PSParticleType::PSParticleType_pointSpacingChanImpl::getInstance(v89);
  v91 = (OZChannelInfo *)PSParticleType::PSParticleType_pointSpacingChanInfo::getInstance(v90);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 12184), 0.25, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x8Au, 0, (OZChannelImpl *)v90, v91);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v92, CFSTR("Particle Type Point Spacing OS"));
  v94 = (PSParticleType::PSParticleType_pointSpacingOSChanInfo *)PSParticleType::PSParticleType_pointSpacingOSChanImpl::getInstance(v93);
  v95 = (OZChannelInfo *)PSParticleType::PSParticleType_pointSpacingOSChanInfo::getInstance(v94);
  OZChannelPercentOverRange::OZChannelPercentOverRange((PSParticleType *)((char *)this + 12336), 1.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x8Bu, 0, (OZChannelImpl *)v94, v95);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v96, CFSTR("Particle Type Stroke Width OS"));
  v98 = (PSParticleType::PSParticleType_strokeWidthOSChanInfo *)PSParticleType::PSParticleType_strokeWidthOSChanImpl::getInstance(v97);
  v99 = (OZChannelInfo *)PSParticleType::PSParticleType_strokeWidthOSChanInfo::getInstance(v98);
  OZChannelPercentOverRange::OZChannelPercentOverRange((PSParticleType *)((char *)this + 12496), 1.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x8Cu, 0, (OZChannelImpl *)v98, v99);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v100, CFSTR("Particle Type Is Constant Num Dabs"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 12656), 1, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x8Du, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v101, CFSTR("Particle Type Anchor Dabs To Enum"));
  PCURL::PCURL((PCURL *)&v132, CFSTR("Particle Type Anchor Dabs To"));
  v103 = (OZChannelImpl *)PSParticleType::PSParticleType_anchorDabsToChanImpl::getInstance(v102);
  OZChannelEnum::OZChannelEnum((PSParticleType *)((char *)this + 12808), 1u, (const PCString *)&v131, &v132, (OZChannelFolder *)((char *)this + 448), 0x97u, 0, v103, 0);
  PCString::~PCString(&v132);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v104, CFSTR("Particle Type Position Offset"));
  OZChannel2D::OZChannel2D((PSParticleType *)((char *)this + 13064), 0.0, 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x8Eu, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v105, CFSTR("Particle Type Position Offset Variance"));
  v107 = (OZChannelImpl *)PSParticleType::PSParticleType_posOffsetVarChanImpl::getInstance(v106);
  OZChannelScale::OZChannelScale((PSParticleType *)((char *)this + 13504), 0.0, 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x8Fu, 0, 2u, v107, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v108, CFSTR("Particle Type Position Offset Variance OS"));
  OZChannelScaleOverRange::OZChannelScaleOverRange((PSParticleType *)((char *)this + 13944), 0.0, 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x90u, 0, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v109, CFSTR("Particle Type Image Node Ref"));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((PSParticleType *)((char *)this + 14392), (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x80u, 0);
  PCString::~PCString((PCString *)&v131);
  PCString::PCString(v110, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14552), 0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x88u, 2u, 0, 0);
  PCString::~PCString((PCString *)&v131);
  v112 = (PSParticleType::PSParticleType_versionChanImpl *)PCString::PCString(v111, "Hidden Channel");
  v113 = (OZChannelImpl *)PSParticleType::PSParticleType_versionChanImpl::getInstance(v112);
  OZChannelDouble::OZChannelDouble((PSParticleType *)((char *)this + 14704), 5, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x96u, 2, v113, 0);
  PCString::~PCString((PCString *)&v131);
  PCString::PCString(v114, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14856), 0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x98u, 2u, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCString::PCString(v115, "Obsolete Rotation");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 15008), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x6Cu, 2, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCString::PCString(v116, "Obsolete Rotation End");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 15160), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x86u, 2, 0, 0);
  PCString::~PCString((PCString *)&v131);
  PCString::PCString(v117, "Obsolete Rotational Variance");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 15312), 0.0, (const PCString *)&v131, (OZChannelFolder *)((char *)this + 448), 0x6Du, 2, 0, 0);
  PCString::~PCString((PCString *)&v131);
  *((_BYTE *)this + 15464) = 1;
  *((_QWORD *)this + 1936) = 0;
  *((_QWORD *)this + 1935) = 0;
  *((_QWORD *)this + 1934) = (char *)this + 15480;
  *((_QWORD *)this + 1939) = 0;
  *((_QWORD *)this + 1938) = 0;
  *((_QWORD *)this + 1937) = (char *)this + 15504;
  OZSystemSimulator::OZSystemSimulator((char *)this + 15520, (char *)this + 1112);
  OZSystemSimulator::OZSystemSimulator((char *)this + 15800, (char *)this + 1112);
  OZSystemSimulator::OZSystemSimulator((char *)this + 16080, (char *)this + 1112);
  *(_OWORD *)((char *)this + 16408) = 0u;
  *(_OWORD *)((char *)this + 16424) = 0u;
  *(_OWORD *)((char *)this + 16376) = 0u;
  *(_OWORD *)((char *)this + 16392) = 0u;
  *(_OWORD *)((char *)this + 16360) = 0u;
  v118 = MEMORY[0x1E0CA2E68];
  v119 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 16440) = *MEMORY[0x1E0CA2E68];
  v120 = *(_QWORD *)(v118 + 16);
  *((_QWORD *)this + 2057) = v120;
  *((_OWORD *)this + 1029) = v119;
  *((_QWORD *)this + 2060) = v120;
  *((_BYTE *)this + 16544) = 0;
  *((_BYTE *)this + 16560) = 0;
  *((_OWORD *)this + 1036) = 0u;
  *(_OWORD *)((char *)this + 16488) = 0u;
  *((_QWORD *)this + 2063) = 0;
  *((_QWORD *)this + 2071) = (char *)this + 16576;
  *((_QWORD *)this + 2076) = 0;
  *((_QWORD *)this + 2075) = 0;
  *((_QWORD *)this + 2074) = (char *)this + 16600;
  PCSharedMutex::PCSharedMutex((PSParticleType *)((char *)this + 16616));
  *((_QWORD *)this + 2092) = 0;
  *((_QWORD *)this + 2091) = 0;
  *((_QWORD *)this + 2090) = (char *)this + 16728;
  PCSharedMutex::PCSharedMutex((PSParticleType *)((char *)this + 16744));
  *((_QWORD *)this + 2108) = 0;
  *((_OWORD *)this + 1053) = 0u;
  PCSharedMutex::PCSharedMutex((PSParticleType *)((char *)this + 16872));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9816), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 9816));
  OZChannel::setMin((OZChannel *)((char *)this + 4344), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 4496), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 4648), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 12336), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 12336), 0.05);
  OZChannel::setMax((OZChannel *)((char *)this + 12336), 3.40282347e38);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 12336), 4.0);
  OZChannel::setMax((OZChannel *)((char *)this + 12496), 3.40282347e38);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 12496), 4.0);
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 14392, 0);
  OZChanObjectManipRef::setAlwaysUpdateDefaultValue((uint64_t)this + 14392, 1);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 4048), MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v131, 1.0, 0x40000);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 4048), &v131);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 12336), MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v131, 1.0, 0x40000);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 12336), &v131);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 12496), MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v131, 1.0, 0x40000);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 12496), &v131);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 10728), MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v131, 1.0, 0x40000);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)((char *)this + 10728), &v131);
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 1760) + 728))((char *)this + 14080, MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v131, 1.0, 0x40000);
  (*(void (**)(char *, CMTime *))(*((_QWORD *)this + 1760) + 728))((char *)this + 14080, &v131);
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 1779) + 728))((char *)this + 14232, MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v131, 1.0, 0x40000);
  (*(void (**)(char *, CMTime *))(*((_QWORD *)this + 1779) + 728))((char *)this + 14232, &v131);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1728), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1728));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1272), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1272));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1424), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1424));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2032), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2032));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2184), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2184));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2336), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2336));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3192), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3192));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4048), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4048));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4208), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 4208));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5216), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5216));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5368), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5368));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5624), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 5624));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6784), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 6784));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7584), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7584));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7736), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7736));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7888), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7888));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8040), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8040));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8632), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8632));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9816), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 9816));
  OZChannelBase::resetFlag((OZChannelBase *)this + 89, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 89);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10120), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10120));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10272), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10272));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10424), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10424));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10576), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10576));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10888), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10888));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11040), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11040));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11192), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11192));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11600), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11600));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11752), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11752));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11904), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 11904));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12184), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 12184));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12336), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 12336));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12496), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 12496));
  OZChannelBase::resetFlag((OZChannelBase *)this + 113, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 113);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12808), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 12808));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 13064), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 13064));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 13504), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 13504));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 13944), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 13944));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14392), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 14392));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14552), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 14552));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14704), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 14704));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14856), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 14856));
  PCURL::PCURL((PCURL *)&v131, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 525, (const PCString *)&v131);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v121, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1561, (const PCString *)&v131);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v122, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1581, (const PCString *)&v131);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v123, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1798, (const PCString *)&v131);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v124, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1360, (const PCString *)&v131);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v125, CFSTR("Particle Type Rotation"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), (const PCString *)&v131, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v126, CFSTR("Particle Type Rotation End"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 3632), (const PCString *)&v131, 0);
  PCString::~PCString((PCString *)&v131);
  PCURL::PCURL(v127, CFSTR("Particle Type Rotation Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), (const PCString *)&v131, 0);
  PCString::~PCString((PCString *)&v131);
  (*(void (**)(PSParticleType *, uint64_t))(*(_QWORD *)this + 1528))(this, 1);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 11904), 8519684);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 11904));
  *(_OWORD *)&v131.value = xmmword_1B35645F0;
  Behavior = (const void *)OZApplication::createBehavior(theApp, (unsigned int *)&v131);
  if (Behavior)
  else
    v129 = 0;
  (*(void (**)(PSParticleType *, char *, _QWORD))(*(_QWORD *)this + 360))(this, v129, 0);
  v130 = OZSimulationBehavior::_MTF_IDGenerator--;
  OZChannelBase::setID((OZChannelBase *)(v129 + 56), v130);
}

void sub_1B2FBCA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, std::mutex *a12, _QWORD **a13, std::mutex *a14, OZSystemSimulator *a15, OZChannelBase *a16, OZSystemSimulator *a17, OZSystemSimulator *a18, _QWORD **a19, _QWORD **a20,OZChannel *a21,OZChannel *a22,OZChannel *a23,OZChannel *a24,OZChannel *a25,OZChannelEnum *a26,OZChannel3D *a27,OZChannel *a28,OZChannel *a29,OZChannel *a30,OZChannel *a31,OZChannelBool *a32,PCString *a33,OZChannel2D *a34,OZChannel2D *a35,OZChannelEnum *a36,OZChannelBool *a37,OZChannelPercent *a38,OZChannel *a39,OZChannel *a40,OZChannelPercent *a41,OZChannel *a42,OZChannel *a43,OZChannel *a44,OZChannel *a45,OZChannelBool *a46,OZChannelBool *a47,OZChannelBool *a48,OZChannelScale3D *a49,OZChannelScale3D *a50,OZChannelBool *a51,OZChannel *a52,OZChannelBool *a53,PCString *a54)
{
  uint64_t v54;
  OZChannelBool *v55;
  OZChannelFolder *v56;
  PCString *v57;
  OZChanElementOrFootageRef *v58;
  PCString *v59;
  void **v60;
  uint64_t v61;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  const PCString *v67;

  PCSharedMutex::~PCSharedMutex(a11);
  v63 = *(void **)(v54 + 16848);
  if (v63)
  {
    *(_QWORD *)(v54 + 16856) = v63;
    operator delete(v63);
  }
  PCSharedMutex::~PCSharedMutex(a12);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v54 + 16720, *a13);
  PCSharedMutex::~PCSharedMutex(a14);
  std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy(v54 + 16592, *(PCSharedCount **)(v54 + 16600));
  std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy(v54 + 16568, *(_QWORD **)(v54 + 16576));
  v64 = *(void **)(v54 + 16408);
  if (v64)
  {
    *(_QWORD *)(v54 + 16416) = v64;
    operator delete(v64);
  }
  v65 = *(void **)(v54 + 0x4000);
  if (v65)
  {
    *(_QWORD *)(v54 + 16392) = v65;
    operator delete(v65);
  }
  v66 = *v60;
  if (*v60)
  {
    *(_QWORD *)(v54 + 16368) = v66;
    operator delete(v66);
  }
  OZSystemSimulator::~OZSystemSimulator(a15);
  OZSystemSimulator::~OZSystemSimulator(a17);
  OZSystemSimulator::~OZSystemSimulator(a18);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v54 + 15496, *a19);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v54 + 15472, *a20);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a23);
  OZChannel::~OZChannel(a24);
  OZChannelBool::~OZChannelBool(v55);
  OZChannel::~OZChannel(a31);
  OZChannelBool::~OZChannelBool(a32);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(v58);
  OZChannelScaleOverRange::~OZChannelScaleOverRange(a33);
  OZChannel2D::~OZChannel2D(a34);
  OZChannel2D::~OZChannel2D(a35);
  OZChannelEnum::~OZChannelEnum(a36);
  OZChannelBool::~OZChannelBool(a37);
  OZChannelPercentOverRange::~OZChannelPercentOverRange(v59);
  OZChannelPercentOverRange::~OZChannelPercentOverRange(v57);
  OZChannelPercent::~OZChannelPercent(a38);
  OZChannel::~OZChannel(a25);
  OZChannelFolder::~OZChannelFolder(v56);
  OZChannel::~OZChannel(a39);
  OZChannel::~OZChannel(a40);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannelPercent::~OZChannelPercent(a41);
  OZChannel::~OZChannel(a42);
  OZChannel::~OZChannel(a43);
  OZChannelDoubleOverRange::~OZChannelDoubleOverRange(a54);
  OZChannel::~OZChannel(a44);
  OZChannel::~OZChannel(a45);
  OZChannelBool::~OZChannelBool(a46);
  OZChannelBool::~OZChannelBool(a47);
  OZChannelBool::~OZChannelBool(a48);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v61 - 160));
  OZChannel3D::~OZChannel3D(a27);
  OZChannelScale3D::~OZChannelScale3D(a49);
  OZChannelScale3D::~OZChannelScale3D(a50);
  OZChannelBool::~OZChannelBool(a51);
  OZChannel::~OZChannel(a52);
  OZChannelBool::~OZChannelBool(a53);
  OZChannelGradient::~OZChannelGradient(*(OZChannelGradient **)(v61 - 256));
  OZChannelColor::~OZChannelColor(*(OZChannelColor **)(v61 - 248));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v61 - 240));
  OZChannel::~OZChannel(*(OZChannel **)(v61 - 232));
  OZChannel::~OZChannel(a28);
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v61 - 224));
  OZChannelAngleOverRange::~OZChannelAngleOverRange(*(PCString **)(v61 - 152));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v61 - 216));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v61 - 208));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v61 - 200));
  OZChannel::~OZChannel(*(OZChannel **)(v61 - 192));
  OZChannel::~OZChannel(a29);
  OZChannel::~OZChannel(*(OZChannel **)(v61 - 184));
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(*(OZChannel **)(v61 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v61 - 168));
  OZChannel::~OZChannel(a22);
  OZChannelBase::setRangeName(a16, v67);
  OZSceneNode::~OZSceneNode((OZSceneNode *)v54);
  _Unwind_Resume(a1);
}

void PSParticleType::PSParticleType(PSParticleType *this, PSParticleType *a2, char a3)
{
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  PCURL *v9;
  PCURL *v10;
  PCURL *v11;
  PCURL *v12;
  PCURL *v13;
  PCURL *v14;
  PCString v15;

  OZSceneNode::OZSceneNode(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1088));
  *(_QWORD *)this = &off_1E65DE5D0;
  *((_QWORD *)this + 2) = &unk_1E65DEC50;
  *((_QWORD *)this + 6) = &unk_1E65DEEA8;
  *((_QWORD *)this + 136) = &unk_1E65DEF00;
  *((_QWORD *)this + 139) = &unk_1E65DEFD8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1120), (const OZChannelBase *)a2 + 10, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 140) = &off_1E6551358;
  *((_QWORD *)this + 142) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1272), (const OZChannelBase *)((char *)a2 + 1272), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 159) = &off_1E6551358;
  *((_QWORD *)this + 161) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1424), (const OZChannelBase *)((char *)a2 + 1424), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 178) = &off_1E6551358;
  *((_QWORD *)this + 180) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1576), (const OZChannelBase *)((char *)a2 + 1576), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 197) = &off_1E6551358;
  *((_QWORD *)this + 199) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1728), (const OZChannelBase *)((char *)a2 + 1728), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 216) = &off_1E6551358;
  *((_QWORD *)this + 218) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1880), (const OZChannelBase *)((char *)a2 + 1880), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 235) = &off_1E6551358;
  *((_QWORD *)this + 237) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2032), (const OZChannelBase *)((char *)a2 + 2032), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 254) = &off_1E6551358;
  *((_QWORD *)this + 256) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2184), (const OZChannelBase *)((char *)a2 + 2184), (OZChannelFolder *)((char *)this + 448));
  OZChannelRotation3D::OZChannelRotation3D((PSParticleType *)((char *)this + 2336), (PSParticleType *)((char *)a2 + 2336), (OZChannelFolder *)((char *)this + 448));
  OZChannelRotation3D::OZChannelRotation3D((PSParticleType *)((char *)this + 3192), (PSParticleType *)((char *)a2 + 3192), (OZChannelFolder *)((char *)this + 448));
  OZChannelAngleOverRange::OZChannelAngleOverRange((PSParticleType *)((char *)this + 4048), (PSParticleType *)((char *)a2 + 4048), (OZChannelFolder *)((char *)this + 448));
  OZChannelRotation3D::OZChannelRotation3D((PSParticleType *)((char *)this + 4208), (PSParticleType *)((char *)a2 + 4208), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5064), (const OZChannelBase *)((char *)a2 + 5064), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 633) = &off_1E6551728;
  *((_QWORD *)this + 635) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5216), (const OZChannelBase *)((char *)a2 + 5216), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 652) = &off_1E6551728;
  *((_QWORD *)this + 654) = &unk_1E6551A88;
  OZChannelEnum::OZChannelEnum((PSParticleType *)((char *)this + 5368), (PSParticleType *)((char *)a2 + 5368), (OZChannelFolder *)((char *)this + 448));
  OZChannelColor::OZChannelColor((PSParticleType *)((char *)this + 5624), (PSParticleType *)((char *)a2 + 5624), (OZChannelFolder *)((char *)this + 448));
  OZChannelGradient::OZChannelGradient((PSParticleType *)((char *)this + 6784), (PSParticleType *)((char *)a2 + 6784), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7584), (const OZChannelBase *)((char *)a2 + 7584), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7736), (const OZChannelBase *)((char *)a2 + 7736), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 967) = &off_1E6551358;
  *((_QWORD *)this + 969) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7888), (const OZChannelBase *)((char *)a2 + 7888), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale3D::OZChannelScale3D((PSParticleType *)((char *)this + 8040), (PSParticleType *)((char *)a2 + 8040), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale3D::OZChannelScale3D((PSParticleType *)((char *)this + 8632), (PSParticleType *)((char *)a2 + 8632), (OZChannelFolder *)((char *)this + 448));
  OZChannel3D::OZChannel3D((PSParticleType *)((char *)this + 9224), (PSParticleType *)((char *)a2 + 9224), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 9816), (const OZChannelBase *)((char *)a2 + 9816), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 9968), (const OZChannelBase *)a2 + 89, (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 10120), (const OZChannelBase *)((char *)a2 + 10120), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 10272), (const OZChannelBase *)((char *)a2 + 10272), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10424), (const OZChannelBase *)((char *)a2 + 10424), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1303) = &off_1E6553978;
  *((_QWORD *)this + 1305) = &unk_1E6553CD8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10576), (const OZChannelBase *)((char *)a2 + 10576), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1322) = &off_1E6551358;
  *((_QWORD *)this + 1324) = &unk_1E65516B8;
  OZChannelDoubleOverRange::OZChannelDoubleOverRange((PSParticleType *)((char *)this + 10728), (PSParticleType *)((char *)a2 + 10728), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10888), (const OZChannelBase *)((char *)a2 + 10888), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1361) = &off_1E6551358;
  *((_QWORD *)this + 1363) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 11040), (const OZChannelBase *)((char *)a2 + 11040), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1380) = &off_1E6551358;
  *((_QWORD *)this + 1382) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 11192), (const OZChannelBase *)((char *)a2 + 11192), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((PSParticleType *)((char *)this + 11344), (PSParticleType *)((char *)a2 + 11344), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 11600), (const OZChannelBase *)((char *)a2 + 11600), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1450) = &off_1E65531D8;
  *((_QWORD *)this + 1452) = &unk_1E6553538;
  OZChannel::OZChannel((OZChannel *)((char *)this + 11752), (const OZChannelBase *)((char *)a2 + 11752), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1469) = &off_1E6551358;
  *((_QWORD *)this + 1471) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 11904), (const OZChannelFolder *)((char *)a2 + 11904), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 12032), (const OZChannelBase *)((char *)a2 + 12032), (OZChannelFolder *)((char *)this + 11904));
  *((_QWORD *)this + 1504) = &off_1E6551358;
  *((_QWORD *)this + 1506) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 12184), (const OZChannelBase *)((char *)a2 + 12184), (OZChannelFolder *)((char *)this + 448));
  OZChannelPercentOverRange::OZChannelPercentOverRange((PSParticleType *)((char *)this + 12336), (PSParticleType *)((char *)a2 + 12336), (OZChannelFolder *)((char *)this + 448));
  OZChannelPercentOverRange::OZChannelPercentOverRange((PSParticleType *)((char *)this + 12496), (PSParticleType *)((char *)a2 + 12496), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 12656), (const OZChannelBase *)a2 + 113, (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((PSParticleType *)((char *)this + 12808), (PSParticleType *)((char *)a2 + 12808), (OZChannelFolder *)((char *)this + 448));
  OZChannel2D::OZChannel2D((PSParticleType *)((char *)this + 13064), (PSParticleType *)((char *)a2 + 13064), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale::OZChannelScale((PSParticleType *)((char *)this + 13504), (PSParticleType *)((char *)a2 + 13504), (OZChannelFolder *)((char *)this + 448));
  OZChannelScaleOverRange::OZChannelScaleOverRange((PSParticleType *)((char *)this + 13944), (PSParticleType *)((char *)a2 + 13944), (OZChannelFolder *)((char *)this + 448));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((PSParticleType *)((char *)this + 14392), (PSParticleType *)((char *)a2 + 14392), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14552), (const OZChannelBase *)((char *)a2 + 14552), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 14704), (const OZChannelBase *)((char *)a2 + 14704), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1838) = &off_1E6551358;
  *((_QWORD *)this + 1840) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14856), (const OZChannelBase *)((char *)a2 + 14856), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 15008), (const OZChannelBase *)a2 + 134, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1876) = &off_1E6551728;
  *((_QWORD *)this + 1878) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 15160), (const OZChannelBase *)((char *)a2 + 15160), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1895) = &off_1E6551728;
  *((_QWORD *)this + 1897) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 15312), (const OZChannelBase *)((char *)a2 + 15312), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1914) = &off_1E6551728;
  *((_QWORD *)this + 1916) = &unk_1E6551A88;
  *((_BYTE *)this + 15464) = 1;
  *((_QWORD *)this + 1936) = 0;
  *((_QWORD *)this + 1935) = 0;
  *((_QWORD *)this + 1934) = (char *)this + 15480;
  *((_QWORD *)this + 1939) = 0;
  *((_QWORD *)this + 1938) = 0;
  *((_QWORD *)this + 1937) = (char *)this + 15504;
  OZSystemSimulator::OZSystemSimulator((char *)this + 15520, (char *)this + 1112);
  OZSystemSimulator::OZSystemSimulator((char *)this + 15800, (char *)this + 1112);
  OZSystemSimulator::OZSystemSimulator((char *)this + 16080, (char *)this + 1112);
  *(_OWORD *)((char *)this + 16424) = 0u;
  v6 = (__int128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 16392) = 0u;
  *(_OWORD *)((char *)this + 16408) = 0u;
  v7 = *v6;
  *(_OWORD *)((char *)this + 16440) = *v6;
  *(_OWORD *)((char *)this + 16360) = 0u;
  *(_OWORD *)((char *)this + 16376) = 0u;
  v8 = *((_QWORD *)v6 + 2);
  *((_QWORD *)this + 2057) = v8;
  *((_OWORD *)this + 1029) = v7;
  *((_QWORD *)this + 2060) = v8;
  *(_OWORD *)((char *)this + 16488) = 0u;
  *((_BYTE *)this + 16544) = *((_BYTE *)a2 + 16544);
  *((_BYTE *)this + 16560) = *((_BYTE *)a2 + 16560);
  *((_QWORD *)this + 2073) = 0;
  *((_QWORD *)this + 2072) = 0;
  *((_QWORD *)this + 2071) = (char *)this + 16576;
  *((_QWORD *)this + 2076) = 0;
  *((_QWORD *)this + 2075) = 0;
  *((_QWORD *)this + 2074) = (char *)this + 16600;
  PCSharedMutex::PCSharedMutex((PSParticleType *)((char *)this + 16616));
  *((_QWORD *)this + 2092) = 0;
  *((_QWORD *)this + 2091) = 0;
  *((_QWORD *)this + 2090) = (char *)this + 16728;
  PCSharedMutex::PCSharedMutex((PSParticleType *)((char *)this + 16744));
  *((_QWORD *)this + 2108) = 0;
  *((_OWORD *)this + 1053) = 0u;
  PCSharedMutex::PCSharedMutex((PSParticleType *)((char *)this + 16872));
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 14392, 0);
  OZChanObjectManipRef::setAlwaysUpdateDefaultValue((uint64_t)this + 14392, 1);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 525, &v15);
  PCString::~PCString(&v15);
  PCURL::PCURL(v9, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1561, &v15);
  PCString::~PCString(&v15);
  PCURL::PCURL(v10, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1581, &v15);
  PCString::~PCString(&v15);
  PCURL::PCURL(v11, CFSTR("Particle Type Stroke Range"));
  PCString::set((PCString *)this + 1798, &v15);
  PCString::~PCString(&v15);
  PCURL::PCURL(v12, CFSTR("Particle Type Rotation"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), &v15, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL(v13, CFSTR("Particle Type Rotation End"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 3632), &v15, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL(v14, CFSTR("Particle Type Rotation Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v15, 0);
  PCString::~PCString(&v15);
}

void sub_1B2FBDCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZSystemSimulator *a11, OZChannel *a12, _QWORD **a13, _QWORD **a14, OZChannel *a15, OZChannel *a16, OZChannelBool *a17, OZChannel *a18, OZChannelBool *a19, PCString *a20,OZChannel2D *a21,OZChannel2D *a22,OZChannelEnum *a23,OZChannelBool *a24,PCString *a25,PCString *a26,OZChannelPercent *a27,OZChannel *a28,OZChannelFolder *a29,OZChannel *a30,OZChannel *a31,OZChannelEnum *a32,OZChannelPercent *a33,OZChannel *a34,OZChannel *a35,PCString *a36,OZChannel *a37,OZChannel *a38,OZChannelBool *a39,OZChannelBool *a40,OZChannelBool *a41,OZChannelBool *a42,OZChannel3D *a43,OZChannelScale3D *a44,OZChannelScale3D *a45,OZChannelBool *a46)
{
  uint64_t v46;
  std::mutex *v47;
  void **v48;
  OZChanElementOrFootageRef *v49;
  std::mutex *v50;
  _QWORD **v51;
  OZSystemSimulator *v52;
  OZSystemSimulator *v53;
  std::mutex *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  const PCString *v60;

  PCString::~PCString((PCString *)(v55 - 96));
  PCSharedMutex::~PCSharedMutex(v47);
  v56 = *(void **)(v46 + 16848);
  if (v56)
  {
    *(_QWORD *)(v46 + 16856) = v56;
    operator delete(v56);
  }
  PCSharedMutex::~PCSharedMutex(v54);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v46 + 16720, *v51);
  PCSharedMutex::~PCSharedMutex(v50);
  std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy(v46 + 16592, *(PCSharedCount **)(v46 + 16600));
  std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy(v46 + 16568, *(_QWORD **)(v46 + 16576));
  v57 = *(void **)(v46 + 16408);
  if (v57)
  {
    *(_QWORD *)(v46 + 16416) = v57;
    operator delete(v57);
  }
  v58 = *(void **)(v46 + 0x4000);
  if (v58)
  {
    *(_QWORD *)(v46 + 16392) = v58;
    operator delete(v58);
  }
  v59 = *v48;
  if (*v48)
  {
    *(_QWORD *)(v46 + 16368) = v59;
    operator delete(v59);
  }
  OZSystemSimulator::~OZSystemSimulator(v53);
  OZSystemSimulator::~OZSystemSimulator(a11);
  OZSystemSimulator::~OZSystemSimulator(v52);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v46 + 15496, *a13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v46 + 15472, *a14);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannel::~OZChannel(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(v49);
  OZChannelScaleOverRange::~OZChannelScaleOverRange(a20);
  OZChannel2D::~OZChannel2D(a21);
  OZChannel2D::~OZChannel2D(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannelPercentOverRange::~OZChannelPercentOverRange(a25);
  OZChannelPercentOverRange::~OZChannelPercentOverRange(a26);
  OZChannelPercent::~OZChannelPercent(a27);
  OZChannel::~OZChannel(a28);
  OZChannelFolder::~OZChannelFolder(a29);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  OZChannelPercent::~OZChannelPercent(a33);
  OZChannel::~OZChannel(a34);
  OZChannel::~OZChannel(a35);
  OZChannelDoubleOverRange::~OZChannelDoubleOverRange(a36);
  OZChannel::~OZChannel(a37);
  OZChannel::~OZChannel(a38);
  OZChannelBool::~OZChannelBool(a39);
  OZChannelBool::~OZChannelBool(a40);
  OZChannelBool::~OZChannelBool(a41);
  OZChannelBool::~OZChannelBool(a42);
  OZChannel3D::~OZChannel3D(a43);
  OZChannelScale3D::~OZChannelScale3D(a44);
  OZChannelScale3D::~OZChannelScale3D(a45);
  OZChannelBool::~OZChannelBool(a46);
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 256));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v55 - 248));
  OZChannelGradient::~OZChannelGradient(*(OZChannelGradient **)(v55 - 240));
  OZChannelColor::~OZChannelColor(*(OZChannelColor **)(v55 - 232));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v55 - 224));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 216));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 208));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v55 - 200));
  OZChannelAngleOverRange::~OZChannelAngleOverRange(*(PCString **)(v55 - 192));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v55 - 184));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v55 - 176));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v55 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 144));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 128));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 120));
  OZChannel::~OZChannel(*(OZChannel **)(v55 - 112));
  OZChannelBase::setRangeName(*(OZChannelBase **)(v55 - 104), v60);
  OZSceneNode::~OZSceneNode((OZSceneNode *)v46);
  _Unwind_Resume(a1);
}

void PSParticleType::~PSParticleType(PSParticleType *this)
{
  OZSystemSimulator *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const PCString *v7;

  *(_QWORD *)this = &off_1E65DE5D0;
  *((_QWORD *)this + 2) = &unk_1E65DEC50;
  *((_QWORD *)this + 6) = &unk_1E65DEEA8;
  *((_QWORD *)this + 136) = &unk_1E65DEF00;
  *((_QWORD *)this + 139) = &unk_1E65DEFD8;
  v2 = (PSParticleType *)((char *)this + 15520);
  OZSystemSimulator::flushCache((PSParticleType *)((char *)this + 15520), 1, 0);
  OZSystemSimulator::flushCache((PSParticleType *)((char *)this + 15800), 1, 0);
  OZSystemSimulator::flushCache((PSParticleType *)((char *)this + 16080), 1, 0);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 16872));
  v3 = (void *)*((_QWORD *)this + 2106);
  if (v3)
  {
    *((_QWORD *)this + 2107) = v3;
    operator delete(v3);
  }
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 16744));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 16720, *((_QWORD **)this + 2091));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 16616));
  std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy((uint64_t)this + 16592, *((PCSharedCount **)this + 2075));
  std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy((uint64_t)this + 16568, *((_QWORD **)this + 2072));
  v4 = (void *)*((_QWORD *)this + 2051);
  if (v4)
  {
    *((_QWORD *)this + 2052) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2048);
  if (v5)
  {
    *((_QWORD *)this + 2049) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2045);
  if (v6)
  {
    *((_QWORD *)this + 2046) = v6;
    operator delete(v6);
  }
  OZSystemSimulator::~OZSystemSimulator((PSParticleType *)((char *)this + 16080));
  OZSystemSimulator::~OZSystemSimulator((PSParticleType *)((char *)this + 15800));
  OZSystemSimulator::~OZSystemSimulator(v2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 15496, *((_QWORD **)this + 1938));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 15472, *((_QWORD **)this + 1935));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 15312));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 15160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 15008));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 14856));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 14704));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 14552));
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef((PSParticleType *)((char *)this + 14392));
  *((_QWORD *)this + 1743) = &off_1E655E880;
  *((_QWORD *)this + 1745) = &unk_1E655EBF8;
  PCString::~PCString((PCString *)this + 1798);
  OZChannel2D::~OZChannel2D((PSParticleType *)((char *)this + 13944));
  OZChannel2D::~OZChannel2D((PSParticleType *)((char *)this + 13504));
  OZChannel2D::~OZChannel2D((PSParticleType *)((char *)this + 13064));
  OZChannelEnum::~OZChannelEnum((PSParticleType *)((char *)this + 12808));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 12656));
  *((_QWORD *)this + 1562) = &off_1E655E0A8;
  *((_QWORD *)this + 1564) = &unk_1E655E458;
  PCString::~PCString((PCString *)this + 1581);
  OZChanObjectRef::~OZChanObjectRef((PSParticleType *)((char *)this + 12496));
  *((_QWORD *)this + 1542) = &off_1E655E0A8;
  *((_QWORD *)this + 1544) = &unk_1E655E458;
  PCString::~PCString((PCString *)this + 1561);
  OZChanObjectRef::~OZChanObjectRef((PSParticleType *)((char *)this + 12336));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 12184));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 12032));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 11904));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 11752));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 11600));
  OZChannelEnum::~OZChannelEnum((PSParticleType *)((char *)this + 11344));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 11192));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 11040));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10888));
  *((_QWORD *)this + 1341) = &off_1E655D898;
  *((_QWORD *)this + 1343) = &unk_1E655DC48;
  PCString::~PCString((PCString *)this + 1360);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10728));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10424));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 10272));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 10120));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 9968));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 9816));
  *((_QWORD *)this + 1153) = &off_1E65568E0;
  *((_QWORD *)this + 1155) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 9664));
  OZChannel2D::~OZChannel2D((PSParticleType *)((char *)this + 9224));
  *((_QWORD *)this + 1079) = &off_1E6560F48;
  *((_QWORD *)this + 1081) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 9072));
  OZChannel2D::~OZChannel2D((PSParticleType *)((char *)this + 8632));
  *((_QWORD *)this + 1005) = &off_1E6560F48;
  *((_QWORD *)this + 1007) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8480));
  OZChannel2D::~OZChannel2D((PSParticleType *)((char *)this + 8040));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7736));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7584));
  OZChannelGradient::~OZChannelGradient((PSParticleType *)((char *)this + 6784));
  *((_QWORD *)this + 703) = &off_1E6557D88;
  *((_QWORD *)this + 705) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6632));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((PSParticleType *)((char *)this + 5624));
  OZChannelEnum::~OZChannelEnum((PSParticleType *)((char *)this + 5368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5216));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5064));
  OZChannelRotation3D::~OZChannelRotation3D((PSParticleType *)((char *)this + 4208));
  *((_QWORD *)this + 506) = &off_1E655DCA0;
  *((_QWORD *)this + 508) = &unk_1E655E050;
  PCString::~PCString((PCString *)this + 525);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4048));
  OZChannelRotation3D::~OZChannelRotation3D((PSParticleType *)((char *)this + 3192));
  OZChannelRotation3D::~OZChannelRotation3D((PSParticleType *)((char *)this + 2336));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2184));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1880));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1728));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1272));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1120));
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 1088), v7);
  OZSceneNode::~OZSceneNode(this);
}

{
  PSParticleType::~PSParticleType(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSParticleType::~PSParticleType(PSParticleType *this)
{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 16));
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 48));
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 1088));
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 1112));
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 1088));
  JUMPOUT(0x1B5E29170);
}

{
  PSParticleType::~PSParticleType((PSParticleType *)((char *)this - 1112));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSParticleType::createParticleType(PSParticleType *this, const PCString *a2)
{
  __int128 v3;

  v3 = xmmword_1B355E430;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3, (uint64_t)this, (uint64_t)a2);
}

uint64_t PSParticleType::operator=(uint64_t a1, const void *a2)
{
  char *v4;
  const PCString *v5;
  _BYTE *v6;
  _BYTE *v7;
  char v8;
  uint64_t result;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = (const PCString *)v4;
  v6 = v4 + 16544;
  v7 = v4 + 6624;
  OZChannelBase::operator=(a1 + 11344, (uint64_t)(v4 + 11344));
  OZChannelBase::operator=(a1 + 1120, (uint64_t)&v5[140]);
  OZChannelBase::operator=(a1 + 1272, (uint64_t)&v5[159]);
  OZChannelBase::operator=(a1 + 1424, (uint64_t)&v5[178]);
  OZChannelBase::operator=(a1 + 1576, (uint64_t)&v5[197]);
  OZChannelBase::operator=(a1 + 1728, (uint64_t)&v5[216]);
  OZChannelBase::operator=(a1 + 1880, (uint64_t)&v5[235]);
  OZChannelBase::operator=(a1 + 2032, (uint64_t)&v5[254]);
  OZChannelPosition::operator=(a1 + 2336, (uint64_t)&v5[292]);
  OZChannelPosition::operator=(a1 + 3192, (uint64_t)&v5[399]);
  OZChannelBase::operator=(a1 + 4048, (uint64_t)&v5[506]);
  PCString::set((PCString *)(a1 + 4200), v5 + 525);
  OZChannelPosition::operator=(a1 + 4208, (uint64_t)&v5[526]);
  OZChannelBase::operator=(a1 + 5064, (uint64_t)&v5[633]);
  OZChannelBase::operator=(a1 + 5216, (uint64_t)&v5[652]);
  OZChannelBase::operator=(a1 + 5368, (uint64_t)&v5[671]);
  OZChannelFolder::operator=(a1 + 5624);
  OZChannelBase::operator=(a1 + 5760, (uint64_t)&v5[720]);
  OZChannelBase::operator=(a1 + 5912, (uint64_t)&v5[739]);
  OZChannelBase::operator=(a1 + 6064, (uint64_t)&v5[758]);
  OZChannelBase::operator=(a1 + 6216, (uint64_t)&v5[777]);
  OZChannelBase::operator=(a1 + 6368, (uint64_t)&v5[796]);
  *(_BYTE *)(a1 + 6624) = *v7;
  OZChannelBase::operator=(a1 + 6632, (uint64_t)&v5[829]);
  OZChannelFolder::operator=(a1 + 6784);
  OZChannelFolder::operator=(a1 + 6912);
  OZChannelFolder::operator=(a1 + 7040);
  OZChannelBase::operator=(a1 + 7168, (uint64_t)&v5[896]);
  OZChannelBase::operator=(a1 + 7320, (uint64_t)&v5[915]);
  v8 = BYTE4(v5[947].var0);
  *(_DWORD *)(a1 + 7576) = v5[947].var0;
  *(_BYTE *)(a1 + 7580) = v8;
  OZChannelBase::operator=(a1 + 7584, (uint64_t)&v5[948]);
  OZChannelBase::operator=(a1 + 7736, (uint64_t)&v5[967]);
  OZChannelBase::operator=(a1 + 7888, (uint64_t)&v5[986]);
  OZChannelFolder::operator=(a1 + 8040);
  OZChannelBase::operator=(a1 + 8176, (uint64_t)&v5[1022]);
  OZChannelBase::operator=(a1 + 8328, (uint64_t)&v5[1041]);
  OZChannelBase::operator=(a1 + 8480, (uint64_t)&v5[1060]);
  OZChannelFolder::operator=(a1 + 8632);
  OZChannelBase::operator=(a1 + 8768, (uint64_t)&v5[1096]);
  OZChannelBase::operator=(a1 + 8920, (uint64_t)&v5[1115]);
  OZChannelBase::operator=(a1 + 9072, (uint64_t)&v5[1134]);
  OZChannelFolder::operator=(a1 + 9224);
  OZChannelBase::operator=(a1 + 9360, (uint64_t)&v5[1170]);
  OZChannelBase::operator=(a1 + 9512, (uint64_t)&v5[1189]);
  OZChannelBase::operator=(a1 + 9664, (uint64_t)&v5[1208]);
  OZChannelBase::operator=(a1 + 9816, (uint64_t)&v5[1227]);
  OZChannelBase::operator=(a1 + 9968, (uint64_t)&v5[1246]);
  OZChannelBase::operator=(a1 + 10120, (uint64_t)&v5[1265]);
  OZChannelBase::operator=(a1 + 10272, (uint64_t)&v5[1284]);
  OZChannelBase::operator=(a1 + 10424, (uint64_t)&v5[1303]);
  OZChannelBase::operator=(a1 + 10576, (uint64_t)&v5[1322]);
  OZChannelBase::operator=(a1 + 10728, (uint64_t)&v5[1341]);
  PCString::set((PCString *)(a1 + 10880), v5 + 1360);
  OZChannelBase::operator=(a1 + 10888, (uint64_t)&v5[1361]);
  OZChannelBase::operator=(a1 + 11040, (uint64_t)&v5[1380]);
  OZChannelBase::operator=(a1 + 11192, (uint64_t)&v5[1399]);
  OZChannelBase::operator=(a1 + 11600, (uint64_t)&v5[1450]);
  OZChannelBase::operator=(a1 + 11752, (uint64_t)&v5[1469]);
  OZChannelFolder::operator=(a1 + 11904);
  OZChannelBase::operator=(a1 + 12032, (uint64_t)&v5[1504]);
  OZChannelFolder::operator=(a1 + 13064);
  OZChannelBase::operator=(a1 + 13200, (uint64_t)&v5[1650]);
  OZChannelBase::operator=(a1 + 13352, (uint64_t)&v5[1669]);
  OZChannelFolder::operator=(a1 + 13504);
  OZChannelBase::operator=(a1 + 13640, (uint64_t)&v5[1705]);
  OZChannelBase::operator=(a1 + 13792, (uint64_t)&v5[1724]);
  OZChannelFolder::operator=(a1 + 13944);
  OZChannelBase::operator=(a1 + 14080, (uint64_t)&v5[1760]);
  OZChannelBase::operator=(a1 + 14232, (uint64_t)&v5[1779]);
  PCString::set((PCString *)(a1 + 14384), v5 + 1798);
  OZChanSceneNodeRef::operator=(a1 + 14392, (uint64_t)&v5[1799]);
  OZChannelBase::operator=(a1 + 14552, (uint64_t)&v5[1819]);
  OZChannelBase::operator=(a1 + 14704, (uint64_t)&v5[1838]);
  OZChannelBase::operator=(a1 + 14856, (uint64_t)&v5[1857]);
  OZChannelBase::operator=(a1 + 15008, (uint64_t)&v5[1876]);
  OZChannelBase::operator=(a1 + 15160, (uint64_t)&v5[1895]);
  OZChannelBase::operator=(a1 + 15312, (uint64_t)&v5[1914]);
  *(_BYTE *)(a1 + 15464) = 1;
  OZSystemSimulator::flushCache((OZSystemSimulator *)(a1 + 15520), 1, 1);
  OZSystemSimulator::flushCache((OZSystemSimulator *)(a1 + 15800), 1, 1);
  result = OZSystemSimulator::flushCache((OZSystemSimulator *)(a1 + 16080), 1, 1);
  *(_BYTE *)(a1 + 16544) = *v6;
  *(_BYTE *)(a1 + 16560) = v6[16];
  return result;
}

__n128 PSParticleType::getBounds(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
  if (v5)
  {
    (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2, a3);
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = result;
  }
  return result;
}

__n128 `non-virtual thunk to'PSParticleType::getBounds(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 1088) + 1336))(a1 - 1088);
  if (v5)
  {
    (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2, a3);
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = result;
  }
  return result;
}

uint64_t PSParticleType::getDimensions(PSParticleType *this, float *a2, float *a3, const OZRenderState *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t, float *, float *, const OZRenderState *))(*(_QWORD *)result + 96))(result, a2, a3, a4);
  *a2 = 0.0;
  *a3 = 0.0;
  return result;
}

uint64_t `non-virtual thunk to'PSParticleType::getDimensions(PSParticleType *this, float *a2, float *a3, const OZRenderState *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 136) + 1336))((char *)this - 1088);
  if (result)
    return (*(uint64_t (**)(uint64_t, float *, float *, const OZRenderState *))(*(_QWORD *)result + 96))(result, a2, a3, a4);
  *a2 = 0.0;
  *a3 = 0.0;
  return result;
}

uint64_t PSParticleType::getState(PSParticleType *this, int a2, const CMTime *a3, OZSimStateArray **a4, BOOL *a5)
{
  uint64_t result;
  uint64_t v11;

  result = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1640))(this);
  if (a2 == 2)
  {
    v11 = 16080;
  }
  else if (a2 == 1)
  {
    v11 = 15800;
  }
  else
  {
    if (a2)
      return result;
    v11 = 15520;
  }
  return OZSystemSimulator::getState((PSParticleType *)((char *)this + v11), a3, a4, a5);
}

void PSParticleType::getSourceImageBounds(uint64_t a1, const OZRenderState *a2, _OWORD *a3)
{
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  float64x2_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[40];
  OZRenderState time1;
  CMTime v38;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v39;
  __n128 v40;
  CMTimeEpoch v41;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  float64x2_t v43;
  __int128 v44;

  v43 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v44 = _Q0;
  var0 = a2->var0;
  v40 = 0uLL;
  v41 = 0;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v40);
  v39 = var0;
  *(__n128 *)&v38.value = v40;
  v38.epoch = v41;
  PC_CMTimeFloorToSampleDuration((CMTime *)&v39, &v38, (uint64_t)&var0);
  PCSharedMutex::lock((std::mutex *)(a1 + 16872));
  v12 = *(__int128 **)(a1 + 16848);
  v13 = *(__int128 **)(a1 + 16856);
  while (v12 != v13)
  {
    time1.var0 = var0;
    v14 = *((_QWORD *)v12 + 2);
    v35 = *v12;
    *(_QWORD *)v36 = v14;
    if (!CMTimeCompare((CMTime *)&time1, (CMTime *)&v35))
    {
      v15 = *(__int128 *)((char *)v12 + 40);
      *a3 = *(__int128 *)((char *)v12 + 24);
      a3[1] = v15;
      goto LABEL_27;
    }
    v12 = (__int128 *)((char *)v12 + 56);
  }
  OZRenderState::OZRenderState(&time1, a2);
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 14552), MEMORY[0x1E0CA2E68], 0.0)
    || (v16 = *(_QWORD *)(a1 + 16504)) == 0)
  {
    (*(void (**)(_QWORD, float64x2_t *, OZRenderState *))(**(_QWORD **)(a1 + 16488) + 16))(*(_QWORD *)(a1 + 16488), &v43, &time1);
  }
  else
  {
    OZElement::getImageBoundsWithDropShadow(v16, &v43, (const CMTime *)&time1);
  }
  v17 = v43;
  v18 = v44;
  *a3 = v43;
  a3[1] = v18;
  v35 = *(_OWORD *)&var0.var0;
  *(_QWORD *)v36 = var0.var3;
  *(float64x2_t *)&v36[8] = v17;
  *(_OWORD *)&v36[24] = v18;
  v19 = *(_QWORD *)(a1 + 16856);
  v20 = *(_QWORD *)(a1 + 16864);
  if (v19 >= v20)
  {
    v22 = *(_QWORD *)(a1 + 16848);
    v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v19 - v22) >> 3);
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) > 0x492492492492492)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - v22) >> 3);
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x249249249249249)
      v26 = 0x492492492492492;
    else
      v26 = v24;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSParticleType::SourceBoundsCacheEntry>>(a1 + 16864, v26);
    else
      v27 = 0;
    v28 = &v27[56 * v23];
    v29 = &v27[56 * v26];
    *(_OWORD *)v28 = v35;
    *((_OWORD *)v28 + 1) = *(_OWORD *)v36;
    *((_OWORD *)v28 + 2) = *(_OWORD *)&v36[16];
    *((_QWORD *)v28 + 6) = *(_QWORD *)&v36[32];
    v21 = v28 + 56;
    v30 = *(char **)(a1 + 16856);
    v31 = *(char **)(a1 + 16848);
    if (v30 != v31)
    {
      do
      {
        v32 = *(_OWORD *)(v30 - 56);
        v33 = *(_OWORD *)(v30 - 40);
        v34 = *(_OWORD *)(v30 - 24);
        *((_QWORD *)v28 - 1) = *((_QWORD *)v30 - 1);
        *(_OWORD *)(v28 - 24) = v34;
        *(_OWORD *)(v28 - 40) = v33;
        *(_OWORD *)(v28 - 56) = v32;
        v28 -= 56;
        v30 -= 56;
      }
      while (v30 != v31);
      v30 = *(char **)(a1 + 16848);
    }
    *(_QWORD *)(a1 + 16848) = v28;
    *(_QWORD *)(a1 + 16856) = v21;
    *(_QWORD *)(a1 + 16864) = v29;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_OWORD *)v19 = v35;
    *(_OWORD *)(v19 + 16) = *(_OWORD *)v36;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)&v36[16];
    *(_QWORD *)(v19 + 48) = *(_QWORD *)&v36[32];
    v21 = (char *)(v19 + 56);
  }
  *(_QWORD *)(a1 + 16856) = v21;
LABEL_27:
  PCSharedMutex::unlock((std::mutex *)(a1 + 16872));
}

float64x2_t PSParticleType::getPointParticleBounds(uint64_t a1, float64x2_t *a2, CMTime *a3, float64x2_t *a4)
{
  uint64_t v6;
  float64x2_t result;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 11752), a3, 0.0);
  a4[1].f64[0] = *(double *)&v6 + *(double *)&v6;
  a4[1].f64[1] = *(double *)&v6 + *(double *)&v6;
  result = vsubq_f64(a2[11], (float64x2_t)vdupq_lane_s64(v6, 0));
  *a4 = result;
  return result;
}

CGColorSpace **PSParticleType::addProjectedPointParticleBounds(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  uint64_t v8;
  CMTimeEpoch v9;
  double v10;
  double v11;
  const void *v12;
  void *v13;
  PCArray_base *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  float64x2_t v20;
  uint64_t v21;
  double *v22;
  float64x2_t v24;
  float64x2_t v25;
  _BYTE v26[80];
  CGColorSpace *v27[6];
  float64x2_t v28;
  CMTime v29;
  double v30[13];

  v30[12] = *(double *)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)&v29.value = *(_OWORD *)v8;
  v29.epoch = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 11752), &v29, 0.0);
  v11 = v10;
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)v26);
  v12 = *(const void **)(a3 + 232);
  if (v12)
  else
    v13 = 0;
  v14 = (PCArray_base *)(*(uint64_t (**)(uint64_t, CMTime *, void *, _BYTE *))(*(_QWORD *)a1 + 1616))(a1, &v29, v13, v26);
  v15 = *(double *)(a3 + 176) + *(double *)&v27[5];
  v24 = vaddq_f64(*(float64x2_t *)(a3 + 184), v28);
  v16 = *(unsigned int *)(a2 + 1452);
  if ((int)v16 < 1)
  {
LABEL_10:
    v21 = 0;
    v30[0] = v15 - v11;
    v30[1] = v24.f64[0] - v11;
    v30[2] = v24.f64[1] + 0.0;
    v30[3] = v11 + v15;
    v30[4] = v24.f64[0] - v11;
    v30[5] = v24.f64[1] + 0.0;
    v30[6] = v11 + v15;
    v30[7] = v11 + v24.f64[0];
    v30[8] = v24.f64[1] + 0.0;
    v30[9] = v15 - v11;
    v30[10] = v11 + v24.f64[0];
    v30[11] = v24.f64[1] + 0.0;
    v22 = (double *)(a2 + 1632);
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(v22, &v30[v21], &v30[v21]);
      v25 = *(float64x2_t *)&v30[v21];
      PCRect<double>::operator|=(a4, &v25);
      v21 += 3;
    }
    while (v21 != 12);
  }
  else
  {
    v17 = 0;
    v18 = 24;
    while (1)
    {
      if (v17 >= *(int *)(a2 + 1452))
        PCArray_base::badIndex(v14);
      v19 = (double *)(*(_QWORD *)(a2 + 1456) + v18);
      v20 = vmulq_f64(v24, *(float64x2_t *)(v19 - 2));
      if (*v19 + v15 * *(v19 - 3) + v20.f64[0] + v20.f64[1] < 0.0)
        break;
      ++v17;
      v18 += 32;
      if (v16 == v17)
        goto LABEL_10;
    }
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(v27);
}

void sub_1B2FBF4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

float64x2_t PSParticleType::getLineParticleBounds(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  double v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float64x2_t v9;
  float64x2_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  float64x2_t v21;
  double v22;

  v5 = *(double *)(a2 + 16) + *(double *)(a2 + 72);
  v21 = vaddq_f64(*(float64x2_t *)a2, *(float64x2_t *)(a2 + 56));
  v22 = v5;
  v20 = 0x3FF0000000000000;
  v17 = 0x3FF0000000000000;
  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v12 = 0u;
  v13 = 0u;
  v15 = 0u;
  v16 = 0u;
  v18 = 0u;
  v19 = 0u;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1416))(a1, a1 + 15520, &v11, a3);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v11, v21.f64, v21.f64);
  v6 = vbicq_s8((int8x16_t)v21, (int8x16_t)vcltzq_f64(v21));
  v7 = (int8x16_t)vminnmq_f64(v21, (float64x2_t)0);
  v8 = (int8x16_t)vcgtq_f64((float64x2_t)v7, (float64x2_t)v6);
  v9 = (float64x2_t)vbslq_s8(v8, v7, v6);
  result = (float64x2_t)vbslq_s8(v8, v6, v7);
  *a4 = result;
  a4[1] = vsubq_f64(v9, result);
  return result;
}

CGColorSpace **PSParticleType::addProjectedLineParticleBounds(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  __int128 *v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  double v12;
  double v13;
  double *v14;
  float64x2_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  _BYTE v55[80];
  CGColorSpace *v56;
  float64x2_t v57;
  double v58;
  __int128 v59;
  uint64_t v60;

  v8 = *(__int128 **)(a2 + 8);
  v9 = *((_QWORD *)v8 + 2);
  v59 = *v8;
  v60 = v9;
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)v55);
  v10 = *(const void **)(a3 + 232);
  if (v10)
  else
    v11 = 0;
  (*(void (**)(uint64_t, __int128 *, void *, _BYTE *))(*(_QWORD *)a1 + 1616))(a1, &v59, v11, v55);
  v12 = *(double *)(a3 + 192) + v58;
  v39 = vaddq_f64(*(float64x2_t *)(a3 + 176), v57);
  v53 = v39;
  v54 = v12;
  v13 = *(double *)(a3 + 16) + *(double *)(a3 + 72);
  v51 = vaddq_f64(*(float64x2_t *)a3, *(float64x2_t *)(a3 + 56));
  v52 = v13;
  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, __int128 *))(*(_QWORD *)a1 + 1416))(a1, a1 + 15520, &v41, &v59);
  v14 = PCMatrix44Tmpl<double>::transform<double>((double *)&v41, v51.f64, v51.f64);
  v15 = vaddq_f64(v57, v51);
  v51 = v15;
  v16 = v58 + v52;
  v52 = v58 + v52;
  v17 = *(unsigned int *)(a2 + 1452);
  if ((int)v17 < 1)
  {
LABEL_21:
    v37 = (double *)(a2 + 1632);
    PCMatrix44Tmpl<double>::transform<double>(v37, v53.f64, v53.f64);
    v40 = v53;
    PCRect<double>::operator|=(a4, &v40);
    PCMatrix44Tmpl<double>::transform<double>(v37, v51.f64, v51.f64);
    v40 = v51;
    PCRect<double>::operator|=(a4, &v40);
  }
  else
  {
    v18 = 0;
    v19 = v15.f64[1];
    v20 = v39.f64[1];
    v21 = 16;
    while (1)
    {
      if (v18 >= *(int *)(a2 + 1452))
        PCArray_base::badIndex((PCArray_base *)v14);
      v22 = (double *)(*(_QWORD *)(a2 + 1456) + v21);
      v24 = *(v22 - 2);
      v23 = *(v22 - 1);
      v26 = *v22;
      v25 = v22[1];
      v27 = v24 * v39.f64[0] + v23 * v20 + *v22 * v12;
      v28 = v24 * v15.f64[0] + v23 * v19 + *v22 * v16;
      v29 = v25 + v28;
      if (v25 + v27 < 0.0 && v29 < 0.0)
        break;
      if (v25 + v27 < 0.0)
      {
        v35 = v24 * (v39.f64[0] - v15.f64[0]) + v23 * (v20 - v19) + v26 * (v12 - v16);
        if (v35 > -0.0000001 && v35 < 0.0000001)
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v56);
        v36 = (-v28 - v25) / v35;
        if (v36 <= 0.0)
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v56);
        v20 = v19 + (v20 - v19) * v36;
        v12 = v16 + (v12 - v16) * v36;
        v39.f64[0] = v15.f64[0] + (v39.f64[0] - v15.f64[0]) * v36;
        v53.f64[0] = v39.f64[0];
        v53.f64[1] = v20;
        v54 = v12;
      }
      else if (v29 < 0.0)
      {
        v30 = v15.f64[0] - v39.f64[0];
        v31 = v19 - v20;
        v32 = v16 - v12;
        v33 = v24 * v30 + v23 * v31 + v26 * v32;
        if (v33 > -0.0000001 && v33 < 0.0000001)
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v56);
        v34 = (-v27 - v25) / v33;
        if (v34 <= 0.0)
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v56);
        v15.f64[0] = v39.f64[0] + v30 * v34;
        v19 = v20 + v31 * v34;
        v16 = v12 + v32 * v34;
        v51.f64[0] = v15.f64[0];
        v51.f64[1] = v19;
        v52 = v16;
      }
      ++v18;
      v21 += 32;
      if (v17 == v18)
        goto LABEL_21;
    }
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v56);
}

void sub_1B2FBF900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,CGColorSpace *a46)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a46);
  _Unwind_Resume(a1);
}

float64x2_t PSParticleType::getImageParticleBounds(uint64_t a1, uint64_t a2, OZRenderState *a3, float64x2_t *a4)
{
  const void *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int8x16_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float64x2_t v38;
  float64x2_t result;
  int8x16_t v40;
  double v41;
  double v42;
  CMTime v43;
  __int128 v44;
  float64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  double v51;
  __int128 v52;
  __int128 v53;
  OZRenderState v54;
  __int128 v55;
  int64_t var3;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  CMTime v62;
  CMTime v63;

  if (*(_QWORD *)(a1 + 16488)
    || ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1), *(_QWORD *)(a1 + 16488)))
  {
    v8 = *(const void **)(a2 + 232);
    if (v8)
    else
      v9 = 0;
    var0 = *($3CC8671D27C23BF42ADDB32F2B5E48AE *)(v9 + 80);
    if (*((double *)v9 + 13) > 0.0)
    {
      v59 = 0uLL;
      v60 = 0;
      v54.var0.var3 = a3->var0.var3;
      *(_OWORD *)&v54.var0.var0 = *(_OWORD *)&a3->var0.var0;
      v10 = *(_OWORD *)(v9 + 8);
      v43.epoch = *((_QWORD *)v9 + 3);
      *(_OWORD *)&v43.value = v10;
      PC_CMTimeSaferSubtract((CMTime *)&v54, &v43, (uint64_t)&v59);
      operator/(&v59, (uint64_t)&v52, *((double *)v9 + 13));
      v54.var0 = var0;
      *(_OWORD *)&v43.value = v52;
      v43.epoch = v53;
      PC_CMTimeSaferAdd((CMTime *)&v54, &v43, (uint64_t)&var0);
      v57 = *(_OWORD *)(a1 + 16464);
      v58 = *(_QWORD *)(a1 + 16480);
      v55 = 0uLL;
      var3 = 0;
      operator/((__int128 *)&var0.var0, (uint64_t)&v57, (uint64_t)&v55);
      CMTimeMake(&v62, 1, 1);
      *(_OWORD *)&v54.var0.var0 = v55;
      v54.var0.var3 = var3;
      v43 = v62;
      PC_CMTimeFloorToSampleDuration((CMTime *)&v54, &v43, (uint64_t)&v63);
      *(_OWORD *)&v54.var0.var0 = v55;
      v54.var0.var3 = var3;
      v43 = v63;
      PC_CMTimeSaferSubtract((CMTime *)&v54, &v43, (uint64_t)&v52);
      operator*(&v52, (uint64_t)&v57, (uint64_t)&v54);
      var3 = v54.var0.var3;
      v55 = *(_OWORD *)&v54.var0.var0;
      var0 = v54.var0;
    }
    v11 = *(_OWORD *)(a1 + 16440);
    *(_QWORD *)&v53 = *(_QWORD *)(a1 + 16456);
    v52 = v11;
    v43 = (CMTime)var0;
    PC_CMTimeSaferAdd(&v43, (CMTime *)&v52, (uint64_t)&v54);
    var0 = v54.var0;
    OZRenderState::OZRenderState(&v54, a3);
    v54.var0 = var0;
    v52 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v53 = _Q0;
    PSParticleType::getSourceImageBounds(a1, &v54, &v52);
    v42 = *((double *)&v52 + 1) + *((double *)&v53 + 1);
    v40 = (int8x16_t)v52;
    v41 = *(double *)&v52 + *(double *)&v53;
    v51 = 1.0;
    v48 = 0x3FF0000000000000;
    v45 = 1.0;
    v43.value = 0x3FF0000000000000;
    *(_OWORD *)&v43.timescale = 0u;
    v44 = 0u;
    v46 = 0u;
    v47 = 0u;
    v49 = 0u;
    v50 = 0u;
    PSParticleType::getImageParticleMatrix((CGColorSpace **)a1, (CMTime *)a3, (uint64_t)v9, (double *)a2, (uint64_t)&v43, 0);
    v17 = vmuld_lane_f64(*(double *)&v50, (float64x2_t)v40, 1);
    v19.f64[0] = *(float64_t *)&v43.timescale;
    *(_QWORD *)&v18.f64[0] = v43.value;
    *(_QWORD *)&v20.f64[0] = v44;
    v21.f64[0] = *(float64_t *)&v43.timescale;
    v21.f64[1] = *((float64_t *)&v44 + 1);
    v22 = vmulq_f64((float64x2_t)vextq_s8(v40, v40, 8uLL), v21);
    *(_QWORD *)&v21.f64[0] = v43.value;
    v21.f64[1] = v45;
    v23 = vmulq_f64((float64x2_t)v40, v21);
    v20.f64[1] = *((float64_t *)&v46 + 1);
    v24 = (int8x16_t)vdivq_f64(vaddq_f64(v20, vaddq_f64(v22, v23)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + *((double *)&v49 + 1) * *(double *)v40.i64 + v17), 0));
    v18.f64[1] = *((float64_t *)&v44 + 1);
    v25 = vmulq_n_f64(v18, v41);
    v26.f64[0] = v22.f64[0];
    v26.f64[1] = v23.f64[1];
    v27 = (int8x16_t)vdivq_f64(vaddq_f64(v20, vaddq_f64(v25, v26)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + v41 * *((double *)&v49 + 1) + v17), 0));
    v19.f64[1] = v45;
    v28 = vmulq_n_f64(v19, v42);
    v23.f64[1] = v22.f64[1];
    v29 = (int8x16_t)vdivq_f64(vaddq_f64(v20, vaddq_f64(v28, v25)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + v41 * *((double *)&v49 + 1) + v42 * *(double *)&v50), 0));
    v30 = (int8x16_t)vdivq_f64(vaddq_f64(v20, vaddq_f64(v23, v28)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + *((double *)&v49 + 1) * *(double *)v40.i64+ v42 * *(double *)&v50), 0));
    v31 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v27, (float64x2_t)v24), v27, v24);
    v32 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v30, (float64x2_t)v29), v30, v29);
    v33 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v32, (float64x2_t)v31), v32, v31);
    v34 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v24, (float64x2_t)v27), v27, v24);
    v35 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v29, (float64x2_t)v30), v30, v29);
    v36 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v34, (float64x2_t)v35), v35, v34);
    v37 = (int8x16_t)vcgtq_f64((float64x2_t)v36, (float64x2_t)v33);
    v38 = (float64x2_t)vbslq_s8(v37, v36, v33);
    result = (float64x2_t)vbslq_s8(v37, v33, v36);
    *a4 = result;
    a4[1] = vsubq_f64(v38, result);
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a4[1] = result;
  }
  return result;
}

CGColorSpace **PSParticleType::getImageParticleMatrix(CGColorSpace **result, CMTime *a2, uint64_t a3, double *a4, uint64_t a5, int a6)
{
  CGColorSpace **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  OZTransformNode *v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  __double2 v59;
  double v60;
  double v61;
  CMTimeEpoch epoch;
  __int128 v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  __double2 v69;
  __double2 v70;
  __double2 v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  CMTime v88;
  double v89;
  double v90;
  OZRenderState v91;
  CMTime v92;
  __int128 v93;
  int64_t v94;
  __int128 v95;
  double v96;
  CMTime v97;
  Float64 v98;
  BOOL v99;
  double v100;
  float64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  CMTime v108;
  double v109;
  CGColorSpace *v110;
  float64x2_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  float64x2_t v116;
  double v117;
  __n128 v118;
  uint64_t v119;
  _QWORD v120[3];
  CMTime v121;
  CMTime v122;
  _BYTE v123[32];
  __int128 v124;
  int v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  if (result[2061])
  {
    v11 = result;
    v122 = *a2;
    v121 = *a2;
    memset(v120, 0, sizeof(v120));
    v12 = a3 + 8;
    *(_OWORD *)&v91.var0.var0 = *(_OWORD *)&a2->value;
    v91.var0.var3 = a2->epoch;
    v108 = *(CMTime *)(a3 + 8);
    v13 = PC_CMTimeSaferSubtract((CMTime *)&v91, &v108, (uint64_t)v120);
    v118 = 0uLL;
    v119 = 0;
    v14 = (*(uint64_t (**)(uint64_t, double))(*((_QWORD *)v11[2054] + 25) + 272))((uint64_t)v11[2054] + 200, v13);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v14 + 336), &v118);
    __asm { FMOV            V0.2D, #1.0 }
    v116 = _Q0;
    v117 = 1.0;
    (*((void (**)(CGColorSpace **, _QWORD *, uint64_t, uint64_t, float64x2_t *))*v11 + 201))(v11, v120, a3 + 32, v12, &v116);
    PSSequencedValues::PSSequencedValues((PSSequencedValues *)&v108);
    (*((void (**)(CGColorSpace **, CMTime *, uint64_t, CMTime *))*v11 + 202))(v11, &v121, a3, &v108);
    v116 = vmulq_f64(vmulq_f64(*(float64x2_t *)(a3 + 56), v116), v111);
    v117 = *(double *)(a3 + 72) * v117 * v112;
    v87 = (*(double (**)(CGColorSpace *))(*(_QWORD *)v11[2054] + 352))(v11[2054]);
    v107 = 1.0;
    v106 = 1.0;
    v105 = 1.0;
    v104 = 0.0;
    v103 = 0.0;
    v102 = 0.0;
    v101 = 0.0;
    v100 = 0.0;
    v25 = 0.0;
    v26 = 1.0;
    v27 = (OZTransformNode *)v11[2062];
    if (!v27)
    {
      v29 = 0;
      v28 = 1.0;
      goto LABEL_7;
    }
    v28 = *((double *)v11 + 2065);
    if (!*((_BYTE *)v11 + 16512)
      || (OZTransformNode::getPivot(v27, &v104, &v103, &v102, &v122),
          OZChannel::getValueAsInt((OZChannel *)(v11 + 1819), MEMORY[0x1E0CA2E68], 0.0)))
    {
      v29 = 0;
LABEL_7:
      v30 = 0.0;
      v31 = 0.0;
      v32 = 0.0;
      v33 = 0.0;
      v34 = 0.0;
      goto LABEL_8;
    }
    v99 = 0;
    v98 = 0.0;
    PSParticleType::getSequenceCompletion((PSParticleType *)v11, &v121, *(double *)(a3 + 176), &v99, &v98);
    if (v99)
    {
      memset(&v97, 0, sizeof(v97));
      *(_OWORD *)&v91.var0.var0 = *((_OWORD *)v11 + 1029);
      v91.var0.var3 = (int64_t)v11[2060];
      *(__n128 *)v123 = v118;
      *(_QWORD *)&v123[16] = v119;
      PC_CMTimeSaferSubtract((CMTime *)&v91, (CMTime *)v123, (uint64_t)&v97);
      v93 = *(_OWORD *)(v11 + 2055);
      v94 = (int64_t)v11[2057];
      operator*(&v97, &v92, v98);
      *(_OWORD *)&v91.var0.var0 = v93;
      v91.var0.var3 = v94;
      *(CMTime *)v123 = v92;
      PC_CMTimeSaferAdd((CMTime *)&v91, (CMTime *)v123, (uint64_t)&v95);
      *(_OWORD *)&v88.value = v95;
      epoch = *(_QWORD *)&v96;
    }
    else
    {
      *(_OWORD *)&v88.value = *(_OWORD *)&v121.value;
      epoch = v121.epoch;
    }
    v88.epoch = epoch;
    v63 = *(_OWORD *)(v11 + 2055);
    *(_QWORD *)&v123[16] = v11[2057];
    *(_OWORD *)v123 = v63;
    memset(&v97, 0, sizeof(v97));
    OZTransformNode::getTranslation((uint64_t)v11[2062], &v97, (CMTime *)v123);
    OZRenderState::OZRenderState(&v91, (const OZRenderState *)a2);
    v91.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v88;
    v95 = 0uLL;
    v96 = 0.0;
    OZTransformNode::getTranslation((uint64_t)v11[2062], &v95, &v88);
    v65 = *((double *)&v95 + 1);
    v64 = *(double *)&v95;
    v66 = *(double *)&v97.timescale;
    v85 = *(double *)&v97.value;
    v86 = v96;
    v84 = *(double *)&v97.epoch;
    (*(void (**)(CGColorSpace *, double *, double *, double *, OZRenderState *, _QWORD))(*(_QWORD *)v11[2062]
                                                                                                  + 1312))(v11[2062], &v107, &v106, &v105, &v91, 0);
    *(_QWORD *)&v93 = 0;
    v92.value = 0;
    v90 = 0.0;
    if (a6)
    {
      OZTransformNode::getRotationX((OZTransformNode *)v11[2062], (double *)&v93, &v88);
      OZTransformNode::getRotationY((OZTransformNode *)v11[2062], (double *)&v92.value, &v88);
    }
    OZTransformNode::getRotationZ((OZTransformNode *)v11[2062], &v90, &v88);
    v83 = v66;
    v67 = *(double *)&v92.value;
    if (*(double *)&v93 <= -0.0000001 || *(double *)&v93 >= 0.0000001)
    {
      v68 = v90;
    }
    else
    {
      v68 = v90;
      if (*(double *)&v92.value > -0.0000001
        && *(double *)&v92.value < 0.0000001
        && v90 > -0.0000001
        && v90 < 0.0000001)
      {
        v29 = 0;
        v30 = 0.0;
        v31 = 0.0;
LABEL_43:
        OZTransformNode::getShear((OZTransformNode *)v11[2062], &v101, &v100, &v88);
        v32 = v64 - v85;
        v33 = v65 - v83;
        v34 = v86 - v84;
LABEL_8:
        v35 = v107 * (v28 * v116.f64[0] / v87);
        v36 = v116.f64[1] * v106;
        v37 = v117 * v105;
        v38 = a4[23];
        v39 = a4[22] + v113;
        v116.f64[0] = v35;
        v116.f64[1] = v116.f64[1] * v106;
        v117 = v117 * v105;
        v40 = v38 + v114;
        if ((a6 & 1) != 0)
        {
          v41 = v34 + a4[24] + v115;
        }
        else
        {
          v102 = 0.0;
          v41 = 0.0;
        }
        v42 = v32 + v39;
        v43 = v33 + v40;
        if (v29)
        {
          v44 = *(double *)&v108.epoch;
          v45 = v109;
        }
        else
        {
          v44 = *(double *)&v108.epoch;
          v45 = v109;
          v46 = *(double *)&v108.timescale * *(double *)&v108.timescale + v44 * v44 + v45 * v45;
          if (v46 > -0.0000001 && v46 < 0.0000001)
          {
            v47 = a4[4] * a4[4] + a4[5] * a4[5] + a4[6] * a4[6];
            if (v47 > -0.0000001
              && v47 < 0.0000001
              && v101 > -0.0000001
              && v101 < 0.0000001
              && v100 > -0.0000001
              && v100 < 0.0000001)
            {
              *(_QWORD *)(a5 + 120) = 0x3FF0000000000000;
              *(_OWORD *)(a5 + 8) = 0u;
              *(_OWORD *)(a5 + 24) = 0u;
              *(_OWORD *)(a5 + 48) = 0u;
              *(_OWORD *)(a5 + 64) = 0u;
              *(_OWORD *)(a5 + 88) = 0u;
              *(_OWORD *)(a5 + 104) = 0u;
              *(double *)a5 = v35;
              *(double *)(a5 + 40) = v36;
              *(double *)(a5 + 80) = v37;
              PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a5, (float64x2_t)*(unint64_t *)&v42, v43, v41);
              if (v87 != 1.0)
              {
                *(double *)(a5 + 32) = v87 * *(double *)(a5 + 32);
                *(double *)(a5 + 64) = v87 * *(double *)(a5 + 64);
                *(float64x2_t *)(a5 + 8) = vdivq_f64(*(float64x2_t *)(a5 + 8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v87, 0));
              }
              PCMatrix44Tmpl<double>::rightTranslate((double *)a5, -v104, -v103, -v102);
              return PCCFRef<CGColorSpace *>::~PCCFRef(&v110);
            }
          }
        }
        v48 = v26 * *(double *)&v108.value - (v31 * *(double *)&v108.timescale + v30 * v44 + v25 * v45);
        v49 = v30 * *(double *)&v108.value + v26 * v44;
        v50 = v25 * *(double *)&v108.value + v26 * v45;
        v51 = v30 * *(double *)&v108.timescale - v31 * v44;
        v52 = v31 * *(double *)&v108.value + v26 * *(double *)&v108.timescale + v25 * v44 - v30 * v45;
        v53 = v49 + v31 * v45 - v25 * *(double *)&v108.timescale;
        v54 = v51 + v50;
        v55 = a4[3];
        v56 = a4[4];
        v57 = a4[5];
        v58 = a4[6];
        *(double *)&v88.value = v55 * v48 - (v52 * v56 + v53 * v57 + v54 * v58);
        *(double *)&v88.timescale = v55 * v52 + v48 * v56 + v53 * v58 - v54 * v57;
        *(double *)&v88.epoch = v55 * v53 + v48 * v57 + v56 * v54 - v52 * v58;
        v89 = v52 * v57 - v56 * v53 + v55 * v54 + v48 * v58;
        if ((a6 & 1) == 0)
        {
          v91.var7.var0[1][2] = 1.0;
          v91.var7.var0[0][1] = 1.0;
          v91.var3 = 1.0;
          v91.var0.var0 = 0x3FF0000000000000;
          memset(&v91.var0.var1, 0, 32);
          memset(&v91.var4, 0, 32);
          memset(&v91.var7.var0[0][2], 0, 32);
          PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v91, (double *)&v88.value);
          v124 = 0u;
          memset(v123, 0, sizeof(v123));
          v126 = 0u;
          v127 = 0u;
          v128 = 0;
          v125 = 4;
          PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v91.var0.var0, (uint64_t)v123);
          v59 = __sincos_stret(*(double *)&v127 * 0.5);
          v60 = v59.__sinval * 0.0 * 0.0;
          v61 = v59.__sinval * 0.0 + v59.__cosval * 0.0;
          *(double *)&v88.epoch = v61 + v60 - v59.__sinval * 0.0;
          v89 = v59.__sinval + v59.__cosval * 0.0 + v60 - v60;
          *(double *)&v88.value = v59.__cosval - (v59.__sinval * 0.0 + v60 + v60);
          *(double *)&v88.timescale = v61 + v59.__sinval * 0.0 - v60;
          v36 = v116.f64[1];
          v35 = v116.f64[0];
          v37 = v117;
        }
        PCMatrix44Tmpl<double>::setTransformation(a5, (double *)&v88.value, 0, v42, v43, v41, v35, v36, v37, v101, v100, v20, v21, v22, v23, v24, v104, v103, v102,
          *(uint64_t *)&v87);
        return PCCFRef<CGColorSpace *>::~PCCFRef(&v110);
      }
    }
    v69 = __sincos_stret(*(double *)&v93 * 0.5);
    v70 = __sincos_stret(v67 * 0.5);
    v71 = __sincos_stret(v68 * 0.5);
    v72 = v69.__sinval * 0.0 * (v70.__sinval * 0.0);
    v73 = v69.__cosval * v70.__cosval - (v72 + v69.__sinval * 0.0 * v70.__sinval + v69.__sinval * (v70.__sinval * 0.0));
    v74 = v69.__sinval * 0.0 * v70.__cosval;
    v75 = v69.__cosval * (v70.__sinval * 0.0);
    v76 = v69.__sinval * v70.__cosval + v75 + v69.__sinval * 0.0 * v70.__sinval - v72;
    v77 = v74 + v69.__cosval * v70.__sinval + v69.__sinval * (v70.__sinval * 0.0) - v72;
    v78 = v72 - v69.__sinval * v70.__sinval + v74 + v75;
    v79 = v71.__sinval * 0.0 * v76;
    v80 = v71.__sinval * 0.0 * v77;
    v26 = v71.__cosval * v73 - (v71.__sinval * v78 + v79 + v80);
    v81 = v71.__sinval * 0.0 * v73;
    v82 = v71.__sinval * 0.0 * v78;
    v31 = v71.__sinval * v77 - v82 + v71.__cosval * v76 + v81;
    v30 = v82 - v71.__sinval * v76 + v71.__cosval * v77 + v81;
    v25 = v79 - v80 + v71.__cosval * v78 + v71.__sinval * v73;
    v29 = 1;
    goto LABEL_43;
  }
  return result;
}

void sub_1B2FC065C(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void PSParticleType::addProjectedImageParticleBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  char *v9;
  const OZRenderState *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v19;
  __int128 v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t i;
  float64x2_t v28;
  uint64_t k;
  PCArray_base *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v39[32];
  $3CC8671D27C23BF42ADDB32F2B5E48AE v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  CMTime v56;
  OZRenderState v57;
  CMTime v58;
  CMTime v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 16488)
    || ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1), *(_QWORD *)(a1 + 16488)))
  {
    v8 = *(const void **)(a3 + 232);
    if (v8)
    else
      v9 = 0;
    v10 = *(const OZRenderState **)(a2 + 8);
    OZRenderState::OZRenderState(&v57, v10);
    if (!*(_BYTE *)(a1 + 16529))
    {
      v56 = *(CMTime *)(v9 + 80);
      if (*((double *)v9 + 13) > 0.0)
      {
        v54 = 0uLL;
        v55 = 0;
        v11 = *(_OWORD *)&v10->var0.var0;
        v40.var3 = v10->var0.var3;
        *(_OWORD *)&v40.var0 = v11;
        v12 = *(_OWORD *)(v9 + 8);
        v59.epoch = *((_QWORD *)v9 + 3);
        *(_OWORD *)&v59.value = v12;
        PC_CMTimeSaferSubtract((CMTime *)&v40, &v59, (uint64_t)&v54);
        operator/(&v54, (uint64_t)v39, *((double *)v9 + 13));
        v59 = v56;
        v49 = *(_OWORD *)v39;
        *(_QWORD *)&v50 = *(_QWORD *)&v39[16];
        PC_CMTimeSaferAdd(&v59, (CMTime *)&v49, (uint64_t)&v40);
        v56 = (CMTime)v40;
        v52 = *(_OWORD *)(a1 + 16464);
        v53 = *(_QWORD *)(a1 + 16480);
        memset(&v51, 0, sizeof(v51));
        operator/((__int128 *)&v56.value, (uint64_t)&v52, (uint64_t)&v51);
        CMTimeMake(&v58, 1, 1);
        v40 = v51;
        v59 = v58;
        PC_CMTimeFloorToSampleDuration((CMTime *)&v40, &v59, (uint64_t)v39);
        v40 = v51;
        v59 = *(CMTime *)v39;
        PC_CMTimeSaferSubtract((CMTime *)&v40, &v59, (uint64_t)&v49);
        operator*(&v49, (uint64_t)&v52, (uint64_t)&v40);
        v56 = (CMTime)v40;
      }
      v13 = *(_OWORD *)(a1 + 16440);
      *(_QWORD *)&v50 = *(_QWORD *)(a1 + 16456);
      v49 = v13;
      v59 = v56;
      PC_CMTimeSaferAdd(&v59, (CMTime *)&v49, (uint64_t)&v40);
      v57.var0 = v40;
    }
    v49 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v50 = _Q0;
    PSParticleType::getSourceImageBounds(a1, &v57, &v49);
    v19 = v49;
    v20 = v50;
    v48 = 0x3FF0000000000000;
    v45 = 0x3FF0000000000000;
    v42 = 0x3FF0000000000000;
    v40.var0 = 0x3FF0000000000000;
    *(_OWORD *)&v40.var1 = 0u;
    v41 = 0u;
    v43 = 0u;
    v44 = 0u;
    v46 = 0u;
    v47 = 0u;
    PSParticleType::getImageParticleMatrix3D((CGColorSpace **)a1, a2, (uint64_t)v9, (double *)a3, (uint64_t)&v40);
    v22 = *((double *)&v19 + 1) + *((double *)&v20 + 1);
    v23 = *(double *)&v19 + *(double *)&v20;
    *(_OWORD *)&v59.value = v19;
    v59.epoch = 0;
    v60 = *(double *)&v19 + *(double *)&v20;
    v61 = *((_QWORD *)&v19 + 1);
    v62 = 0;
    v63 = *(double *)&v19 + *(double *)&v20;
    v64 = *((double *)&v19 + 1) + *((double *)&v20 + 1);
    v65 = 0;
    v66 = v19;
    v67 = *((double *)&v19 + 1) + *((double *)&v20 + 1);
    v68 = 0;
    v24 = *(unsigned int *)(a2 + 1452);
    if ((int)v24 >= 1)
    {
      v25 = 0;
      v26 = 0uLL;
      while (2)
      {
        *(_OWORD *)v39 = v26;
        *(_OWORD *)&v39[16] = v26;
        if (v25 >= *(int *)(a2 + 1452))
          PCArray_base::badIndex((PCArray_base *)v21);
        v21 = PCMatrix44Tmpl<double>::transform_row<double>((double *)&v40.var0, (double *)(*(_QWORD *)(a2 + 1456) + 32 * v25), (double *)v39);
        for (i = 0; i != 96; i += 24)
        {
          v28 = vmulq_f64(*(float64x2_t *)((char *)&v59.timescale + i), *(float64x2_t *)&v39[8]);
          if (*(double *)&v39[24] + *(double *)((char *)&v59.value + i) * *(double *)v39 + v28.f64[0] + v28.f64[1] < 0.0)
          {
            LiImagePolygon::LiImagePolygon((LiImagePolygon *)&v59);
            std::vector<LiPolygon::PosEdge>::resize(v68, 4uLL);
            v31 = v68;
            v32 = *v68;
            *(_OWORD *)v32 = v19;
            *(_QWORD *)(v32 + 16) = 0;
            *(double *)(v32 + 32) = v23;
            *(_QWORD *)(v32 + 40) = *((_QWORD *)&v19 + 1);
            *(_QWORD *)(v32 + 48) = 0;
            *(double *)(v32 + 64) = v23;
            *(double *)(v32 + 72) = v22;
            *(_QWORD *)(v32 + 80) = 0;
            *(_QWORD *)(v32 + 96) = v19;
            *(double *)(v32 + 104) = v22;
            *(_QWORD *)(v32 + 112) = 0;
            v33 = *(unsigned int *)(a2 + 1452);
            if ((int)v33 >= 1)
            {
              for (j = 0; j != v33; ++j)
              {
                memset(v39, 0, sizeof(v39));
                if (j >= *(int *)(a2 + 1452))
                  PCArray_base::badIndex(v30);
                PCMatrix44Tmpl<double>::transform_row<double>((double *)&v40.var0, (double *)(*(_QWORD *)(a2 + 1456) + 32 * j), (double *)v39);
                v30 = (PCArray_base *)LiImagePolygon::clip((uint64_t **)&v59, (float64x2_t *)v39, 0);
              }
              v31 = v68;
              v32 = *v68;
            }
            if ((int)((unint64_t)(v31[1] - v32) >> 5) >= 3)
            {
              PCMatrix44Tmpl<double>::leftMult((uint64_t)&v40, (double *)(a2 + 1632));
              v35 = *v68;
              if ((int)((unint64_t)(v68[1] - *v68) >> 5) >= 1)
              {
                v36 = 0;
                v37 = 0;
                do
                {
                  *(_OWORD *)v39 = *(_OWORD *)(v35 + v36);
                  *(_QWORD *)&v39[16] = 0;
                  PCMatrix44Tmpl<double>::transform<double>((double *)&v40.var0, (double *)v39, (double *)v39);
                  *(_OWORD *)&v58.value = *(_OWORD *)v39;
                  PCRect<double>::operator|=((float64x2_t *)a4, (float64x2_t *)&v58);
                  ++v37;
                  v35 = *v68;
                  v36 += 32;
                }
                while (v37 < (int)((unint64_t)(v68[1] - *v68) >> 5));
              }
            }
            LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&v59);
            return;
          }
        }
        ++v25;
        v26 = 0uLL;
        if (v25 != v24)
          continue;
        break;
      }
    }
    PCMatrix44Tmpl<double>::leftMult((uint64_t)&v40, (double *)(a2 + 1632));
    for (k = 0; k != 96; k += 24)
    {
      *(_OWORD *)v39 = *(_OWORD *)((char *)&v59.value + k);
      *(_QWORD *)&v39[16] = *(CMTimeEpoch *)((char *)&v59.epoch + k);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v40.var0, (double *)v39, (double *)v39);
      *(_OWORD *)&v58.value = *(_OWORD *)v39;
      PCRect<double>::operator|=((float64x2_t *)a4, (float64x2_t *)&v58);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 16) = _Q0;
  }
}

void sub_1B2FC0BF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double PSParticleType::getImageParticleMatrix3D(CGColorSpace **a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  double result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  PSParticleType::getImageParticleMatrix(a1, *(CMTime **)(a2 + 8), a3, a4, a5, *(unsigned __int8 *)(a2 + 1497));
  if (*(_BYTE *)(a2 + 1498))
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 242))
    {
      return adjustImageParticleMatrixForFacingCameraEquirectRender((double *)a2, (double *)a5);
    }
    else
    {
      v8 = *(_QWORD *)(a5 + 24);
      v9 = *(_QWORD *)(a5 + 56);
      v10 = *(_QWORD *)(a5 + 88);
      v11 = *(_QWORD *)(a5 + 120);
      *(_QWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 56) = 0;
      *(_QWORD *)(a5 + 88) = 0;
      *(_QWORD *)(a5 + 120) = 0x3FF0000000000000;
      v19 = 0x3FF0000000000000;
      v15 = 0x3FF0000000000000;
      v12 = 0x3FF0000000000000;
      v13 = 0u;
      v16 = 0;
      v18 = 0u;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      v14 = v8;
      v17 = v9;
      v20 = v10;
      v24 = v11;
      PCMatrix44Tmpl<double>::leftMult(a5, (double *)(a2 + 1504));
      return PCMatrix44Tmpl<double>::leftMult(a5, (double *)&v12);
    }
  }
  return result;
}

uint64_t PSParticleType::willGetParticleBounds(PSParticleType *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (result != *((_QWORD *)this + 2061))
    return (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1640))(this);
  return result;
}

float64_t PSParticleType::getParticleBounds(uint64_t a1, float64x2_t *a2, OZRenderState *a3, float64x2_t *a4)
{
  int ValueAsInt;
  float64x2_t v9;
  int v10;
  uint64_t v11;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;

  var0 = a3->var0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 11344), (const CMTime *)&var0, 0.0);
  if (*(_QWORD *)(a1 + 16488))
    v10 = ValueAsInt;
  else
    v10 = 0;
  if ((v10 - 2) < 2)
  {
    *(_QWORD *)&v9.f64[0] = *(_OWORD *)&PSParticleType::getImageParticleBounds(a1, (uint64_t)a2, a3, a4);
  }
  else if (v10 == 1)
  {
    *(_QWORD *)&v9.f64[0] = *(_OWORD *)&PSParticleType::getLineParticleBounds(a1, (uint64_t)a2, (uint64_t)&var0, a4);
  }
  else if (!v10)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 11752), (const CMTime *)&var0, 0.0);
    a4[1].f64[0] = *(double *)&v11 + *(double *)&v11;
    a4[1].f64[1] = *(double *)&v11 + *(double *)&v11;
    v9 = vsubq_f64(a2[11], (float64x2_t)vdupq_lane_s64(v11, 0));
    *a4 = v9;
  }
  return v9.f64[0];
}

void PSParticleType::addProjectedParticleBounds(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  uint64_t v8;
  CMTimeEpoch v9;
  int ValueAsInt;
  int v11;
  CMTime v12;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)&v12.value = *(_OWORD *)v8;
  v12.epoch = v9;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 11344), &v12, 0.0);
  if (*(_QWORD *)(a1 + 16488))
    v11 = ValueAsInt;
  else
    v11 = 0;
  if ((v11 - 2) < 2)
  {
    PSParticleType::addProjectedImageParticleBounds(a1, a2, a3, (uint64_t)a4);
  }
  else if (v11 == 1)
  {
    PSParticleType::addProjectedLineParticleBounds(a1, a2, a3, a4);
  }
  else if (!v11)
  {
    PSParticleType::addProjectedPointParticleBounds(a1, a2, a3, a4);
  }
}

unint64_t PSParticleType::estimateRenderMemoryImageParticle(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  char *v10;
  unint64_t v11;
  const OZRenderState *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v20;
  double v21;
  uint64_t v22;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  _BYTE v30[40];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  CMTime v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  CMTime v43;
  OZRenderState v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMTime v48[173];
  uint64_t v49;

  v1 = MEMORY[0x1E0C80A78](a1);
  v49 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(v1 + 16488))
    return 0;
  v5 = v4;
  v6 = (double *)v3;
  v7 = v2;
  v8 = v1;
  v9 = *(const void **)(v3 + 232);
  if (v9)
  else
    v10 = 0;
  v12 = *(const OZRenderState **)(v7 + 8);
  OZRenderState::OZRenderState(&v44, v12);
  if (!*(_BYTE *)(v8 + 16529))
  {
    v43 = *(CMTime *)(v10 + 80);
    if (*((double *)v10 + 13) > 0.0)
    {
      v41 = 0uLL;
      v42 = 0;
      v13 = *(_OWORD *)&v12->var0.var0;
      v48[0].epoch = v12->var0.var3;
      *(_OWORD *)&v48[0].value = v13;
      v14 = *(_OWORD *)(v10 + 8);
      *(_QWORD *)&v30[16] = *((_QWORD *)v10 + 3);
      *(_OWORD *)v30 = v14;
      PC_CMTimeSaferSubtract(v48, (CMTime *)v30, (uint64_t)&v41);
      operator/(&v41, (uint64_t)&v46, *((double *)v10 + 13));
      *(CMTime *)v30 = v43;
      v47 = v46;
      PC_CMTimeSaferAdd((CMTime *)v30, &v47, (uint64_t)v48);
      v43 = v48[0];
      v39 = *(_OWORD *)(v8 + 16464);
      v40 = *(_QWORD *)(v8 + 16480);
      memset(&v38, 0, sizeof(v38));
      operator/((__int128 *)&v43.value, (uint64_t)&v39, (uint64_t)&v38);
      CMTimeMake(&v45, 1, 1);
      v48[0] = v38;
      *(CMTime *)v30 = v45;
      PC_CMTimeFloorToSampleDuration(v48, (CMTime *)v30, (uint64_t)&v46);
      v48[0] = v38;
      *(CMTime *)v30 = v46;
      PC_CMTimeSaferSubtract(v48, (CMTime *)v30, (uint64_t)&v47);
      operator*((__int128 *)&v47.value, (uint64_t)&v39, (uint64_t)v48);
      v43 = v48[0];
    }
    v15 = *(_OWORD *)(v8 + 16440);
    v47.epoch = *(_QWORD *)(v8 + 16456);
    *(_OWORD *)&v47.value = v15;
    *(CMTime *)v30 = v43;
    PC_CMTimeSaferAdd((CMTime *)v30, &v47, (uint64_t)v48);
    v44.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v48[0];
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&v47.value = _Q0;
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v48);
  PCHashWriteStream::writeValue((int8x8_t *)v48, *(const void **)(v8 + 16488));
  PCHashWriteStream::writeValue((int8x8_t *)v48, (const CMTime *)&v44);
  v20 = 1.0;
  v21 = 1.0;
  if (OZRenderParams::getDoHighQualityResampling(*(OZRenderParams **)(v7 + 8)))
  {
    v37 = 0x3FF0000000000000;
    v34 = 0x3FF0000000000000;
    v31 = 0x3FF0000000000000;
    *(_QWORD *)v30 = 0x3FF0000000000000;
    memset(&v30[8], 0, 32);
    v32 = 0u;
    v33 = 0u;
    v35 = 0u;
    v36 = 0u;
    PSParticleType::getImageParticleMatrix3D((CGColorSpace **)v8, v7, (uint64_t)v10, v6, (uint64_t)v30);
    PSParticleType::getSourceScaleFactor(v22, v7, (__int128 *)v30, (float64x2_t *)&v47);
    v21 = *(double *)&v47.value;
    PCHashWriteStream::writeValue((int8x8_t *)v48, *(double *)&v47.value);
    v20 = *(double *)&v47.timescale;
    PCHashWriteStream::writeValue((int8x8_t *)v48, *(double *)&v47.timescale);
  }
  *(_OWORD *)&v46.value = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v48)->i8;
  if ((_QWORD *)(v5 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v5, (const PCHash128 *)&v46))
  {
    std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v5, (const PCHash128 *)&v46, &v46);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v30[16] = _Q0;
    PSParticleType::getSourceImageBounds(v8, &v44, v30);
    v11 = 0;
    v24 = *(double *)&v30[16];
    if (*(double *)&v30[16] > 0.0)
    {
      v25 = *(double *)&v30[24];
      if (*(double *)&v30[24] > 0.0)
      {
        v26 = PCPixelFormat::getBitsPerPixel(*(_DWORD *)(*(_QWORD *)(v7 + 8) + 340)) >> 3;
        v27 = 0.0;
        if (v25 >= 0.0 && v24 >= 0.0)
          v27 = v24 * v25;
        v11 = vcvtpd_u64_f64(v27 * v21 * v20) * v26;
      }
    }
  }
  else
  {
    v11 = 0;
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v48);
  return v11;
}

void sub_1B2FC12F4(_Unwind_Exception *a1)
{
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::getSourceScaleFactor(uint64_t a1, uint64_t a2, __int128 *a3, float64x2_t *a4)
{
  uint64_t result;
  int8x16_t v11;
  float64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  uint64_t v25;

  __asm { FMOV            V0.2D, #1.0 }
  *a4 = _Q0;
  result = PCMatrix44Tmpl<double>::operator*(a2 + 1632, a3, (uint64_t)&v20);
  v11 = (int8x16_t)vmulq_f64(v24, (float64x2_t)0);
  v12 = (float64x2_t)vextq_s8(v11, v11, 8uLL);
  *(double *)v11.i64 = *(double *)&v25 + vaddvq_f64((float64x2_t)v11);
  v13 = (int8x16_t)vmulq_f64(v20, (float64x2_t)0);
  v14 = (int8x16_t)vmulq_f64(v22, (float64x2_t)0);
  v15 = vaddq_f64((float64x2_t)vdupq_lane_s64(v25, 0), vaddq_f64(v24, v12));
  v16 = vsubq_f64(vdivq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(v21, 0), vaddq_f64(v20, (float64x2_t)vextq_s8(v13, v13, 8uLL))), v15), (float64x2_t)vdupq_lane_s64(COERCE__INT64((*(double *)&v21 + vaddvq_f64((float64x2_t)v13)) / *(double *)v11.i64), 0));
  v17 = vsubq_f64(vdivq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(v23, 0), vaddq_f64(v22, (float64x2_t)vextq_s8(v14, v14, 8uLL))), v15), (float64x2_t)vdupq_lane_s64(COERCE__INT64((*(double *)&v23 + vaddvq_f64((float64x2_t)v14)) / *(double *)v11.i64), 0));
  v18 = vsqrtq_f64(vaddq_f64(vmulq_f64(v16, v16), vmulq_f64(v17, v17)));
  __asm { FMOV            V2.2D, #0.5 }
  *(int32x2_t *)&v16.f64[0] = vmovn_s64(vcgtq_f64(_Q2, vabsq_f64(v18)));
  if ((LODWORD(v16.f64[0]) & HIDWORD(v16.f64[0]) & 1) != 0)
    *a4 = v18;
  return result;
}

unint64_t PSParticleType::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CMTimeEpoch v4;
  CMTime v6;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)&v6.value = *(_OWORD *)v3;
  v6.epoch = v4;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 11344), &v6, 0.0) == 3)
    return PSParticleType::estimateRenderMemoryImageParticle(a1);
  else
    return 0;
}

unint64_t PSParticleType::estimateRenderMemoryImageBallpark(PSParticleType *this, const OZRenderParams *a2, BOOL *a3)
{
  uint64_t v6;
  unint64_t result;
  double v13;
  double Seconds;
  BOOL v16;
  double v17;
  __int128 v18;
  __int128 v19;
  CMTime time;
  OZRenderState v21;

  v6 = PCPixelFormat::getBitsPerPixel(*((_DWORD *)a2 + 85)) >> 3;
  if (*((_BYTE *)this + 16529))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v21.var0.var3 = _Q0;
    PSParticleType::getSourceImageBounds((uint64_t)this, (const OZRenderState *)a2, &v21);
    result = 0;
    *a3 = 1;
    if (*(double *)&v21.var0.var3 > 0.0 && v21.var1 > 0.0)
    {
      _NF = v21.var1 < 0.0 || *(double *)&v21.var0.var3 < 0.0;
      v13 = *(double *)&v21.var0.var3 * v21.var1;
      if (_NF)
        v13 = 0.0;
      return vcvtpd_u64_f64(v13) * v6;
    }
  }
  else
  {
    OZRenderState::OZRenderState(&v21, (const OZRenderState *)a2);
    time = *(CMTime *)((_BYTE *)this + 686);
    Seconds = CMTimeGetSeconds(&time);
    *a3 = 0;
    *(_OWORD *)&v21.var0.var0 = *(_OWORD *)((char *)this + 16440);
    v21.var0.var3 = *((_QWORD *)this + 2057);
    __asm { FMOV            V0.2D, #-1.0 }
    v19 = _Q0;
    PSParticleType::getSourceImageBounds((uint64_t)this, &v21, &v18);
    result = 0;
    if (*(double *)&v19 > 0.0 && *((double *)&v19 + 1) > 0.0)
    {
      v16 = *((double *)&v19 + 1) < 0.0 || *(double *)&v19 < 0.0;
      v17 = *(double *)&v19 * *((double *)&v19 + 1);
      if (v16)
        v17 = 0.0;
      return vcvtpd_u64_f64(Seconds) * v6 * vcvtpd_u64_f64(v17);
    }
  }
  return result;
}

unint64_t PSParticleType::estimateRenderMemoryBallpark(PSParticleType *this, const OZRenderParams *a2, BOOL *a3)
{
  int ValueAsInt;
  CMTime v8;

  v8 = *(CMTime *)a2;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 11344), &v8, 0.0);
  *a3 = 1;
  if (ValueAsInt == 3 && *((_QWORD *)this + 2061))
    return PSParticleType::estimateRenderMemoryImageBallpark(this, a2, a3);
  else
    return 0;
}

CGColorSpace **PSParticleType::getInitialParticleColor(PSParticleType *this, const CMTime *a2, PSParticle *a3, int a4, PCColor *a5)
{
  unsigned int v10;
  CGColorSpace **result;
  __int128 v12;
  unsigned int v13;
  int v14;
  int v15;
  double v17;
  float Alpha;
  __int128 v19;
  PCColor v20;

  v10 = *((_DWORD *)this + 1902);
  result = (CGColorSpace **)OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), a2, 0.0);
  if ((_DWORD)result == 3)
  {
    v13 = (*(uint64_t (**)(PSParticle *))(*(_QWORD *)a3 + 32))(a3);
    v14 = -32;
    v15 = -1640531527;
    do
    {
      v13 += (a4 + 16 * v10) ^ (v10 + v15) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1 + (v10 >> 5));
      v10 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v13) ^ (v15 + v13) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v13 >> 5));
      v15 -= 1640531527;
    }
    while (!__CFADD__(v14++, 1));
    v17 = (double)(v10 ^ v13) / 4294967300.0;
    Alpha = PCColor::getAlpha(a5);
    PCColor::PCColor(&v20);
    OZChannelGradient::getColor((uint64_t **)this + 848, a2, v17, &v20);
    v19 = *(_OWORD *)&v20.var0.var1[1];
    *(_OWORD *)&a5->var0.var0 = *(_OWORD *)&v20.var0.var0;
    *(_OWORD *)&a5->var0.var1[1] = v19;
    *(_OWORD *)&a5->var0.var1[3] = *(_OWORD *)&v20.var0.var1[3];
    PCCFRef<CGColorSpace *>::operator=(&a5->var1._obj, &v20.var1._obj);
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 14552), MEMORY[0x1E0CA2E68], 0.0))
      PCColor::setAlpha(a5, Alpha);
  }
  else
  {
    if ((_DWORD)result != 1)
      return result;
    PCColor::PCColor(&v20);
    OZChannelColor::getColor((PSParticleType *)((char *)this + 5624), a2, &v20);
    v12 = *(_OWORD *)&v20.var0.var1[1];
    *(_OWORD *)&a5->var0.var0 = *(_OWORD *)&v20.var0.var0;
    *(_OWORD *)&a5->var0.var1[1] = v12;
    *(_OWORD *)&a5->var0.var1[3] = *(_OWORD *)&v20.var0.var1[3];
    PCCFRef<CGColorSpace *>::operator=(&a5->var1._obj, &v20.var1._obj);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v20.var1._obj);
}

void sub_1B2FC1868(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

__n128 PSParticleType::getInitialParticleScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5, __n128 *a6)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  *a5 = result;
  *a6 = result;
  return result;
}

double PSParticleType::getInitialParticleRotation(PSParticleType *this, const CMTime *a2, PSParticle *a3)
{
  return 0.0;
}

BOOL PSParticleType::shouldDoLocalParticleRender(PSParticleType *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 11344), MEMORY[0x1E0CA2E68], 0.0) != 3
      || (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this) == 0;
}

CGColorSpace **PSParticleType::getParticleColor(PSParticleType *this, const CMTime *a2, PSParticle *a3, PSEmitter *a4, PCWorkingColor *a5)
{
  double Seconds;
  int ValueAsInt;
  int v12;
  const CMTime *v13;
  char hasMoreThanOneKeypoint;
  double v15;
  double v16;
  int v17;
  double v18;
  __n128 v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  CGColorSpace *ColorSpace;
  float Alpha;
  __int128 v27;
  char *v28;
  float v29;
  float v30;
  CGColorSpace *v31;
  float v32;
  uint64_t v33;
  double v34;
  double v35;
  PCColor v37;
  CMTime time;
  __int128 v39;
  uint64_t v40;
  CMTime __y;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  CGColorSpace *v45[10];
  _DWORD v46[4];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v39 = 0uLL;
  v40 = 0;
  __y = *a2;
  *(_OWORD *)&v37.var0.var0 = *(_OWORD *)((char *)a3 + 8);
  v37.var0.var1[1] = *((double *)a3 + 3);
  PC_CMTimeSaferSubtract(&__y, (CMTime *)&v37, (uint64_t)&v39);
  operator/(&v39, (uint64_t)a3 + 32, (uint64_t)&time);
  Seconds = CMTimeGetSeconds(&time);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), a2, 0.0);
  v12 = ValueAsInt;
  v13 = (const CMTime *)((char *)a3 + 8);
  if (*((_BYTE *)this + 15464))
  {
    if (ValueAsInt == 2)
      hasMoreThanOneKeypoint = OZChannelFolder::hasMoreThanOneKeypoint((OZChannelFolder *)((char *)this + 6784));
    else
      hasMoreThanOneKeypoint = (*(uint64_t (**)(char *))(*((_QWORD *)this + 880) + 560))((char *)this + 7040);
    *((_BYTE *)this + 15465) = hasMoreThanOneKeypoint ^ 1;
    if ((hasMoreThanOneKeypoint & 1) == 0)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 15472, *((_QWORD **)this + 1935));
      *((_QWORD *)this + 1934) = (char *)this + 15480;
      *((_QWORD *)this + 1936) = 0;
      *((_QWORD *)this + 1935) = 0;
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 15496, *((_QWORD **)this + 1938));
      *((_QWORD *)this + 1937) = (char *)this + 15504;
      v13 = (const CMTime *)((char *)a3 + 8);
      *((_QWORD *)this + 1939) = 0;
      *((_QWORD *)this + 1938) = 0;
      (*(void (**)(char *, char *, char *))(*((_QWORD *)this + 880) + 728))((char *)this + 7040, (char *)a3 + 8, (char *)this + 15472);
      (*(void (**)(char *, char *, char *))(*((_QWORD *)this + 864) + 728))((char *)this + 6912, (char *)a3 + 8, (char *)this + 15496);
    }
    *((_BYTE *)this + 15464) = 0;
  }
  PCColor::PCColor(&v37);
  if (v12 == 2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7736), a2, 0.0);
    v16 = v15 + 1.0;
    v17 = *((unsigned __int8 *)this + 16544);
    if (*((_BYTE *)this + 16544))
    {
      __y.value = 0;
      modf(v16, (long double *)&__y.value);
      v16 = *(double *)&__y.value;
    }
    if (v16 < 1.0)
      v16 = 1.0;
    v18 = Seconds * v16;
    __y.value = 0;
    modf(Seconds * v16 + -0.0001, (long double *)&__y.value);
    v20 = v18 - *(double *)&__y.value;
    if (*((_BYTE *)this + 15465))
    {
      if (v17)
        v19.n128_f64[0] = v20;
      else
        v19.n128_f64[0] = Seconds;
      (*(void (**)(char *, CMTime *, char *, __n128))(*((_QWORD *)this + 880) + 736))((char *)this + 7040, &__y, (char *)this + 15472, v19);
      (*(void (**)(char *, _DWORD *, char *, double))(*((_QWORD *)this + 864) + 736))((char *)this + 6912, v46, (char *)this + 15496, v20);
      v21 = *(float *)&v46[1];
      v22 = *(float *)&v46[2];
      v23 = *(float *)&v46[3];
      v24 = *(float *)&__y.value;
      ColorSpace = (CGColorSpace *)OZChannelGradient::getColorSpace((PSParticleType *)((char *)this + 6784));
      PCColor::setRGBA(&v37, v21, v22, v23, v24, ColorSpace);
      Alpha = *(float *)&__y.value;
    }
    else
    {
      OZChannelGradient::getColor((uint64_t **)this + 848, v13, v20, &v37);
      Alpha = PCColor::getAlpha(&v37);
    }
  }
  else
  {
    v27 = *((_OWORD *)a3 + 8);
    *(_OWORD *)&v37.var0.var0 = *((_OWORD *)a3 + 7);
    *(_OWORD *)&v37.var0.var1[1] = v27;
    *(_OWORD *)&v37.var0.var1[3] = *((_OWORD *)a3 + 9);
    PCCFRef<CGColorSpace *>::operator=(&v37.var1._obj, (CGColorSpace **)a3 + 20);
    v28 = (char *)this + 7040;
    if (*((_BYTE *)this + 15465))
    {
      (*(void (**)(char *, _DWORD *, char *, double))(*((_QWORD *)this + 880) + 736))((char *)this + 7040, v46, (char *)this + 15472, Seconds);
      v29 = *(float *)v46;
      Alpha = v29 * PCColor::getAlpha(&v37);
    }
    else
    {
      *(_QWORD *)&__y.timescale = 0;
      __y.epoch = 0;
      __y.value = (CMTimeValue)&__y.timescale;
      (*(void (**)(char *, const CMTime *, CMTime *))(*(_QWORD *)v28 + 728))((char *)this + 7040, v13, &__y);
      (*(void (**)(char *, _DWORD *, CMTime *, double))(*(_QWORD *)v28 + 736))((char *)this + 7040, v46, &__y, Seconds);
      v30 = *(float *)v46;
      Alpha = v30 * PCColor::getAlpha(&v37);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&__y, *(_QWORD **)&__y.timescale);
    }
  }
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)&__y);
  v42 = *(_OWORD *)&v37.var0.var0;
  v43 = *(_OWORD *)&v37.var0.var1[1];
  v44 = *(_OWORD *)&v37.var0.var1[3];
  PCCFRef<CGColorSpace *>::operator=(v45, &v37.var1._obj);
  (*(void (**)(PSParticleType *, const CMTime *, PSParticle *, CMTime *))(*(_QWORD *)this + 1616))(this, a2, a3, &__y);
  *(_OWORD *)&v37.var0.var0 = v42;
  *(_OWORD *)&v37.var0.var1[1] = v43;
  *(_OWORD *)&v37.var0.var1[3] = v44;
  PCCFRef<CGColorSpace *>::operator=(&v37.var1._obj, v45);
  v31 = v45[1];
  PSEmitter::tintColor(a4, a2, &v37);
  v32 = *(double *)&v31 * Alpha;
  v33 = *((_QWORD *)this + 2063);
  if (v33)
  {
    OZChannel::getValueAsDouble((OZChannel *)(v33 + 6680), a2, 0.0);
    v35 = 1.0;
    if (*((double *)this + 2069) < 3.0)
      v35 = v34;
    v32 = v34 * v35 * v32;
  }
  PCColor::setAlpha(&v37, v32);
  PCWorkingColor::operator=((uint64_t)a5, &v37.var0.var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(v45);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v37.var1._obj);
}

void sub_1B2FC1DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSParticleType::getSequenceCompletion(PSParticleType *this, const CMTime *a2, double a3, BOOL *a4, double *a5)
{
  char *FirstRemapTimeBehavior;

  *a4 = 0;
  FirstRemapTimeBehavior = PSParticleType::getFirstRemapTimeBehavior((uint64_t)this, (uint64_t *)this + 125);
  if ((FirstRemapTimeBehavior
     || (FirstRemapTimeBehavior = PSParticleType::getFirstRemapTimeBehavior(0, (uint64_t *)(*((_QWORD *)this + 2054) + 1200))) != 0)&& !OZChannel::getValueAsInt((OZChannel *)(FirstRemapTimeBehavior + 4640), MEMORY[0x1E0CA2E68], 0.0))
  {
    *a4 = 1;
    *a5 = PSSequenceBehavior::getCompletion((PSSequenceBehavior *)FirstRemapTimeBehavior, a2, a3);
  }
}

double adjustImageParticleMatrixForFacingCameraEquirectRender(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22[14];
  __int128 v23;

  v2 = a1[223];
  v3 = a1[224];
  v4 = a1[220] - a2[3];
  v5 = a1[221] - a2[7];
  v6 = a1[222] - a2[11];
  v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 < 0.000000100000001 && v7 > -0.000000100000001)
    v7 = 1.0;
  v9 = v4 / v7;
  v10 = v5 / v7;
  v11 = v6 / v7;
  if (fabs(a1[225] * v11 + v2 * v9 + v3 * v10) < 1.0)
  {
    v12 = a1[225];
  }
  else
  {
    v2 = a1[226];
    v3 = a1[227];
    v12 = a1[228];
  }
  v13 = v11 * v3 - v10 * v12;
  v14 = v9 * v12 - v11 * v2;
  v15 = v10 * v2 - v9 * v3;
  v16 = v10 * v15 - v11 * v14;
  v17 = v11 * v13 - v9 * v15;
  v18 = v9 * v14 - v10 * v13;
  v19 = sqrt(v15 * v15 + v13 * v13 + v14 * v14);
  if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
  {
    v13 = v13 / v19;
    v14 = v14 / v19;
    v15 = v15 / v19;
  }
  v20 = sqrt(v18 * v18 + v16 * v16 + v17 * v17);
  if (v20 <= -0.000000100000001 || v20 >= 0.000000100000001)
  {
    v16 = v16 / v20;
    v17 = v17 / v20;
    v18 = v18 / v20;
  }
  v22[3] = 0.0;
  v22[7] = 0.0;
  v22[0] = v13;
  v22[1] = v16;
  v22[4] = v14;
  v22[5] = v17;
  v22[8] = v15;
  v22[9] = v18;
  memset(&v22[11], 0, 24);
  v22[2] = v9;
  v22[6] = v10;
  v22[10] = v11;
  v23 = xmmword_1B304EEE0;
  return PCMatrix44Tmpl<double>::rightMult((uint64_t)a2, v22);
}

CGColorSpace **PSParticleType::addPointSprite(PSParticleType *this, PSEmitter::RenderParams *a2, PSParticle *a3, float64x2_t *a4, PSHeliumNode *a5)
{
  __int128 *v10;
  uint64_t v11;
  double v12;
  CGColorSpace *WorkingColorSpace;
  double v14;
  float v15;
  __n128 v17;
  __n128 v18;
  CGColorSpace *v19;
  float64x2_t v20;
  double v21;
  _BYTE v22[80];
  CGColorSpace *v23;
  float64x2_t v24;
  double v25;
  __int128 v26;
  uint64_t v27;

  v10 = (__int128 *)*((_QWORD *)a2 + 1);
  v11 = *((_QWORD *)v10 + 2);
  v26 = *v10;
  v27 = v11;
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)v22);
  (*(void (**)(PSParticleType *, __int128 *, PSParticle *, _BYTE *))(*(_QWORD *)this + 1616))(this, &v26, a3, v22);
  v12 = a4[12].f64[0] + v25;
  v20 = vaddq_f64(a4[11], v24);
  v21 = v12;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*((FxColorDescription **)a2 + 1));
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v18, 0.0, 0.0, 0.0, 0.0, WorkingColorSpace);
  (*(void (**)(PSParticleType *, __int128 *, PSParticle *, _QWORD, __n128 *))(*(_QWORD *)this + 1600))(this, &v26, a3, *(_QWORD *)a2, &v18);
  v14 = *((double *)this + 2067);
  PCWorkingColor::operator=(&v17, &v18);
  v15 = v14;
  PSHeliumNode::addPointParticle((uint64_t)a5, v20.f64, &v17, *((_BYTE *)this + 16528), v15);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v19);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
}

void sub_1B2FC21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CGColorSpace *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,CGColorSpace *a30)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a30);
  _Unwind_Resume(a1);
}

CGColorSpace **PSParticleType::addLineSprite(PSParticleType *this, PSEmitter::RenderParams *a2, PSParticle *a3, OZSimStateElement *a4, PSHeliumNode *a5)
{
  FxColorDescription *v10;
  uint64_t v11;
  CGColorSpace *WorkingColorSpace;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  __n128 v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  float64x2_t v34;
  double v35;
  _BYTE v36[80];
  CGColorSpace *v37;
  double v38;
  double v39;
  double v40;
  __n128 v41;
  CGColorSpace *v42;
  __int128 v43;
  uint64_t v44;

  v10 = (FxColorDescription *)*((_QWORD *)a2 + 1);
  v11 = *(_QWORD *)&v10->_pcColorDesc._toneMapMethod._gain;
  v43 = *(_OWORD *)&v10->_pcColorDesc._colorSpaceRef._obj;
  v44 = v11;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(v10);
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v41, 0.0, 0.0, 0.0, 0.0, WorkingColorSpace);
  (*(void (**)(PSParticleType *, __int128 *, PSParticle *, _QWORD, __n128 *))(*(_QWORD *)this + 1600))(this, &v43, a3, *(_QWORD *)a2, &v41);
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)v36);
  (*(void (**)(PSParticleType *, __int128 *, PSParticle *, _BYTE *))(*(_QWORD *)this + 1616))(this, &v43, a3, v36);
  v13 = *((double *)a4 + 2) + *((double *)a4 + 9);
  v34 = vaddq_f64(*(float64x2_t *)a4, *(float64x2_t *)((char *)a4 + 56));
  v35 = v13;
  v33 = 0x3FF0000000000000;
  v30 = 0x3FF0000000000000;
  v27 = 0x3FF0000000000000;
  v24 = 0x3FF0000000000000;
  v25 = 0u;
  v26 = 0u;
  v28 = 0u;
  v29 = 0u;
  v31 = 0u;
  v32 = 0u;
  (*(void (**)(PSParticleType *, char *, uint64_t *, __int128 *))(*(_QWORD *)this + 1416))(this, (char *)this + 15520, &v24, &v43);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v24, v34.f64, v34.f64);
  v34.f64[0] = v38 + v34.f64[0];
  v34.f64[1] = v39 + v34.f64[1];
  v14 = *((double *)a4 + 23);
  v15 = v38 + *((double *)a4 + 22);
  v35 = v40 + v35;
  v16 = v40 + *((double *)a4 + 24);
  v21 = v15;
  v22 = v39 + v14;
  v23 = v16;
  if ((v34.f64[0] - v15) * (v34.f64[0] - v15) + (v34.f64[1] - v22) * (v34.f64[1] - v22) + (v35 - v16) * (v35 - v16) <= 1.0)
  {
    v17 = *((double *)this + 2067);
    PCWorkingColor::operator=(&v20, &v41);
    v18 = v17;
    PSHeliumNode::addPointParticle((uint64_t)a5, &v21, &v20, *((_BYTE *)this + 16528), v18);
  }
  else
  {
    PCWorkingColor::operator=(&v20, &v41);
    PSHeliumNode::addLineParticle((uint64_t)a5, &v21, v34.f64, &v20, *((_BYTE *)this + 16528));
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v37);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v42);
}

void sub_1B2FC240C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CGColorSpace *a45)
{
  uint64_t v45;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a45);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v45 - 136));
  _Unwind_Resume(a1);
}

CGColorSpace **PSParticleType::addOutlineSprite(CGColorSpace **this, PSEmitter::RenderParams *a2, PSParticle *a3, OZSimStateElement *a4, PSHeliumNode *a5)
{
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  double v11;
  __int128 v12;
  CGColorSpace *WorkingColorSpace;
  CMTime v19[2];
  __int128 v20;
  __int128 v21;
  OZRenderState v22;
  __int128 v23;
  int64_t var3;
  __int128 v25;
  uint64_t v26;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  int64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  CMTime v42;
  __n128 v43;
  CMTimeEpoch v44;

  if (this[2061])
  {
    v8 = (uint64_t)this;
    v41 = 0x3FF0000000000000;
    v38 = 0x3FF0000000000000;
    v35 = 0x3FF0000000000000;
    v32 = 0x3FF0000000000000;
    v33 = 0u;
    v34 = 0u;
    v36 = 0u;
    v37 = 0u;
    v39 = 0u;
    v40 = 0u;
    PSParticleType::getImageParticleMatrix3D(this, (uint64_t)a2, (uint64_t)a3, (double *)a4, (uint64_t)&v32);
    v9 = (__int128 *)*((_QWORD *)a2 + 1);
    v10 = *v9;
    v31 = *((_QWORD *)v9 + 2);
    v30 = v10;
    v28 = 0uLL;
    v29 = 0;
    *(_OWORD *)&v22.var0.var0 = v10;
    v22.var0.var3 = v31;
    v19[0] = *(CMTime *)((char *)a3 + 8);
    PC_CMTimeSaferSubtract((CMTime *)&v22, v19, (uint64_t)&v28);
    var0 = *($3CC8671D27C23BF42ADDB32F2B5E48AE *)((char *)a3 + 80);
    v11 = *((double *)a3 + 13);
    if (v11 > 0.0)
    {
      operator/(&v28, (uint64_t)&v20, v11);
      v22.var0 = var0;
      *(_OWORD *)&v19[0].value = v20;
      v19[0].epoch = v21;
      PC_CMTimeSaferAdd((CMTime *)&v22, v19, (uint64_t)&var0);
      v25 = *(_OWORD *)(v8 + 16464);
      v26 = *(_QWORD *)(v8 + 16480);
      v23 = 0uLL;
      var3 = 0;
      operator/((__int128 *)&var0.var0, (uint64_t)&v25, (uint64_t)&v23);
      CMTimeMake(&v42, 1, 1);
      *(_OWORD *)&v22.var0.var0 = v23;
      v22.var0.var3 = var3;
      v19[0] = v42;
      PC_CMTimeFloorToSampleDuration((CMTime *)&v22, v19, (uint64_t)&v43);
      *(_OWORD *)&v22.var0.var0 = v23;
      v22.var0.var3 = var3;
      *(__n128 *)&v19[0].value = v43;
      v19[0].epoch = v44;
      PC_CMTimeSaferSubtract((CMTime *)&v22, v19, (uint64_t)&v20);
      operator*(&v20, (uint64_t)&v25, (uint64_t)&v22);
      var3 = v22.var0.var3;
      v23 = *(_OWORD *)&v22.var0.var0;
      var0 = v22.var0;
    }
    v12 = *(_OWORD *)(v8 + 16440);
    *(_QWORD *)&v21 = *(_QWORD *)(v8 + 16456);
    v20 = v12;
    v19[0] = (CMTime)var0;
    PC_CMTimeSaferAdd(v19, (CMTime *)&v20, (uint64_t)&v22);
    var0 = v22.var0;
    OZRenderState::OZRenderState(&v22, *((const OZRenderState **)a2 + 1));
    v22.var0 = var0;
    v20 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v21 = _Q0;
    PSParticleType::getSourceImageBounds(v8, &v22, &v20);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*((FxColorDescription **)a2 + 1));
    PCWorkingColor::PCWorkingColor((PCWorkingColor *)v19, 0.0, 0.0, 0.0, 0.0, WorkingColorSpace);
    (*(void (**)(uint64_t, __int128 *, PSParticle *, _QWORD, CMTime *))(*(_QWORD *)v8 + 1600))(v8, &v30, a3, *(_QWORD *)a2, v19);
    PCWorkingColor::operator=(&v43, (__n128 *)v19);
    PSHeliumNode::addOutlineParticle((uint64_t)a5, (double *)&v32, (double *)&v20, &v43, *(_BYTE *)(v8 + 16528));
    return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v19[0].epoch);
  }
  return this;
}

void sub_1B2FC2718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSParticleType::addImageSprite(PSParticleType *this, PSEmitter::RenderParams *a2, PSParticle *a3, OZSimStateElement *a4, PSHeliumNode *a5)
{
  uint64_t v9;
  CMTimeEpoch v10;
  __int128 v11;
  int v12;
  BOOL v14;
  uint64_t *v15;
  BOOL v16;
  CMTime *v21;
  CGColorSpace *WorkingColorSpace;
  OZScene *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  __int128 v41;
  __int128 v42;
  CMTime v43[2];
  __int128 v44;
  __int128 v45;
  CMTime v46;
  __int128 v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  CMTime v51;
  CMTime v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  CMTime v63;
  CMTime v64;
  CMTime v65;

  v62 = 0x3FF0000000000000;
  v59 = 0x3FF0000000000000;
  v56 = 0x3FF0000000000000;
  v53 = 0x3FF0000000000000;
  v54 = 0u;
  v55 = 0u;
  v57 = 0u;
  v58 = 0u;
  v60 = 0u;
  v61 = 0u;
  PSParticleType::getImageParticleMatrix3D((CGColorSpace **)this, (uint64_t)a2, (uint64_t)a3, (double *)a4, (uint64_t)&v53);
  v9 = *((_QWORD *)a2 + 1);
  v10 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)&v52.value = *(_OWORD *)v9;
  v52.epoch = v10;
  v51 = *(CMTime *)((char *)a3 + 80);
  if (*((double *)a3 + 13) > 0.0)
  {
    v49 = 0uLL;
    v50 = 0;
    v43[0] = v52;
    v44 = *(_OWORD *)((char *)a3 + 8);
    *(_QWORD *)&v45 = *((_QWORD *)a3 + 3);
    PC_CMTimeSaferSubtract(v43, (CMTime *)&v44, (uint64_t)&v49);
    operator/((__int128 *)&v49, (uint64_t)&v64, *((double *)a3 + 13));
    v44 = *(_OWORD *)&v51.value;
    *(_QWORD *)&v45 = v51.epoch;
    v65 = v64;
    PC_CMTimeSaferAdd((CMTime *)&v44, &v65, (uint64_t)v43);
    v51 = v43[0];
    v47 = *((_OWORD *)this + 1029);
    v48 = *((_QWORD *)this + 2060);
    memset(&v46, 0, sizeof(v46));
    operator/((__int128 *)&v51.value, (uint64_t)&v47, (uint64_t)&v46);
    CMTimeMake(&v63, 1, 1);
    v43[0] = v46;
    v44 = *(_OWORD *)&v63.value;
    *(_QWORD *)&v45 = v63.epoch;
    PC_CMTimeFloorToSampleDuration(v43, (CMTime *)&v44, (uint64_t)&v64);
    v43[0] = v46;
    v44 = *(_OWORD *)&v64.value;
    *(_QWORD *)&v45 = v64.epoch;
    PC_CMTimeSaferSubtract(v43, (CMTime *)&v44, (uint64_t)&v65);
    operator*((__int128 *)&v65.value, (uint64_t)&v47, (uint64_t)v43);
    v51 = v43[0];
  }
  v11 = *(_OWORD *)((char *)this + 16440);
  v65.epoch = *((_QWORD *)this + 2057);
  *(_OWORD *)&v65.value = v11;
  v44 = *(_OWORD *)&v51.value;
  *(_QWORD *)&v45 = v51.epoch;
  PC_CMTimeSaferAdd((CMTime *)&v44, &v65, (uint64_t)v43);
  v51 = v43[0];
  v12 = *(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList(*((HGRenderJob **)a2 + 1)) + 8);
  _ZF = v12 == 0;
  v14 = v12 != 0;
  v15 = (uint64_t *)&v47;
  if (!_ZF)
    v15 = 0;
  v16 = v14 && *((_BYTE *)a5 + 864) != 0;
  v44 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v45 = _Q0;
  *(_OWORD *)&v65.value = 0uLL;
  *(_OWORD *)&v64.value = 0uLL;
  v63.value = 0;
  *(_QWORD *)&v63.timescale = 0;
  *(_QWORD *)&v47 = 0;
  if (_ZF)
    v21 = 0;
  else
    v21 = &v64;
  PSParticleType::getSourceOutput((uint64_t)this, (uint64_t)a2, (uint64_t)&v51, (uint64_t)&v53, (uint64_t)&v44, (uint64_t)&v65, (uint64_t)v21, (uint64_t)&v63, v15);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*((FxColorDescription **)a2 + 1));
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)v43, 0.0, 0.0, 0.0, 0.0, WorkingColorSpace);
  (*(void (**)(PSParticleType *, CMTime *, PSParticle *, _QWORD, CMTime *))(*(_QWORD *)this + 1600))(this, &v52, a3, *(_QWORD *)a2, v43);
  if ((_QWORD)v47)
  {
    PCWorkingColor::operator=(&v49, (__n128 *)v43);
    PSHeliumNode::addImageParticle((uint64_t)a5, (double *)&v53, (unint64_t *)&v47, (double *)&v44, &v49, *((_BYTE *)this + 16528));
    goto LABEL_10;
  }
  if (v64.value)
  {
    v42 = *(_OWORD *)&v64.value;
    if (*(_QWORD *)&v64.timescale)
    {
      v33 = (unint64_t *)(*(_QWORD *)&v64.timescale + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    PCWorkingColor::operator=(&v49, (__n128 *)v43);
    PSHeliumNode::addImageParticle((uint64_t)a5, (double *)&v53, &v42, (double *)&v44, &v49, *((_BYTE *)this + 16528));
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_46;
    }
  }
  else if (v65.value)
  {
    v41 = *(_OWORD *)&v65.value;
    if (*(_QWORD *)&v65.timescale)
    {
      v38 = (unint64_t *)(*(_QWORD *)&v65.timescale + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    PCWorkingColor::operator=(&v49, (__n128 *)v43);
    PSHeliumNode::addImageParticle((uint64_t)a5, (double *)&v53, &v41, (double *)&v44, &v49, *((_BYTE *)this + 16528));
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v37 = __ldaxr(v40);
      while (__stlxr(v37 - 1, v40));
LABEL_46:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else if (v63.value)
  {
    PCWorkingColor::operator=(&v49, (__n128 *)v43);
    PSHeliumNode::addImageParticle((uint64_t)a5, (double *)&v53, &v63, (double *)&v44, &v49, *((_BYTE *)this + 16528));
  }
LABEL_10:
  v23 = (OZScene *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this);
  if (!v16 && v23 != 0 && OZScene::inDesperationMode(v23))
  {
    PSHeliumNode::convertTexturesToBitmaps(a5);
    PCSharedMutex::lock((std::mutex *)((char *)this + 16616));
    std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy((uint64_t)this + 16568, *((_QWORD **)this + 2072));
    *((_QWORD *)this + 2071) = (char *)this + 16576;
    *((_QWORD *)this + 2073) = 0;
    *((_QWORD *)this + 2072) = 0;
    PCSharedMutex::unlock((std::mutex *)((char *)this + 16616));
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v43[0].epoch);
  if ((_QWORD)v47)
    (*(void (**)(_QWORD))(*(_QWORD *)v47 + 24))(v47);
  v24 = *(std::__shared_weak_count **)&v63.timescale;
  if (*(_QWORD *)&v63.timescale)
  {
    v25 = (unint64_t *)(*(_QWORD *)&v63.timescale + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)&v64.timescale;
  if (*(_QWORD *)&v64.timescale)
  {
    v28 = (unint64_t *)(*(_QWORD *)&v64.timescale + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(std::__shared_weak_count **)&v65.timescale;
  if (*(_QWORD *)&v65.timescale)
  {
    v31 = (unint64_t *)(*(_QWORD *)&v65.timescale + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1B2FC2CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CGColorSpace *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a17);
  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 24))(a29);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v29 - 128);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v29 - 104);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v29 - 80);
  _Unwind_Resume(a1);
}

void PSParticleType::getSourceOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  CMTime *v11;
  __int128 *v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  OZRenderParams *v22;
  uint64_t v23;
  CMTime *v24;
  uint64_t v25;
  uint64_t DoHighQualityResampling;
  int v32;
  double v33;
  double v34;
  int EnableMetalRendering;
  std::mutex *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int RenderQuality;
  int TextRenderQuality;
  char v48;
  char DoShapeAntialiasing;
  char Do3DIntersectionAntialiasing;
  const FxColorDescription *WorkingColorDescription;
  int8x8_t *Hash;
  int8x8_t *v53;
  char ReducedResolutionMedia;
  int8x8_t *v55;
  int v56;
  int8x8_t *v57;
  PSTextureCache *v58;
  uint64_t v59;
  OZCacheManager *v60;
  char v61;
  PGTextureCache *v62;
  float64x2_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  float64_t v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  OZMetalTextureCache *v71;
  const void *v72;
  HGGPURenderer *v73;
  float64x2_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  float64_t v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  int v82;
  std::mutex *v83;
  std::mutex *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  CGColorSpace *v100;
  uint64_t v101;
  float BlendingGamma;
  uint64_t RenderNodeList;
  OZRenderParams *v104;
  GLRenderer *v105;
  __int128 *v106;
  __int128 v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  float64_t v114;
  int v115;
  int v116;
  const void *v117;
  void *v118;
  uint64_t v119;
  int v120;
  int v122;
  int v123;
  char v124;
  int v125;
  uint64_t *v126;
  const void *v127;
  HGBitmap *v128;
  uint64_t *v129;
  const void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  const void *HeliumRenderer;
  void *v135;
  unint64_t *v136;
  unint64_t v137;
  float64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  int64x2_t v142;
  char *v143;
  uint64_t v144;
  float64_t v145;
  float64x2_t v146;
  std::mutex *v147;
  uint64_t **v148;
  uint64_t *v149;
  float64x2_t *v150;
  float64x2_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  float64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *p_shared_owners;
  unint64_t v169;
  int v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  float64_t v177;
  CGColorSpace *CGColorSpace;
  OZCacheManager *RenderGPU;
  PGTextureCache *v180;
  _BOOL8 v181;
  uint64_t v182;
  const void *v183;
  void *v184;
  OZCacheManager *v185;
  OZMetalTextureCache *v186;
  __int128 *v187;
  PSTextureCache *v188;
  uint64_t v189;
  HGBitmap *v190;
  HGBitmapLoader *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  HGBitmapLoader *v195;
  int v196;
  float64_t v197;
  std::mutex *v198;
  HGGLBlendingInfo *v199;
  uint64_t **v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t *v203;
  float64x2_t v204;
  float64x2_t v205;
  __int128 v206;
  std::__shared_weak_count *v207;
  float64x2_t v208;
  float64x2_t v209;
  float64_t v210;
  __int128 *v211[2];
  uint64_t MetalContext;
  _QWORD *v213;
  std::__shared_weak_count *v214;
  __int128 *v215;
  __int128 *v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  uint64_t v230;
  PCSharedCount v231;
  std::__shared_weak_count *v232;
  PCSharedCount v233;
  void *v234;
  int v235;
  uint64_t v236;
  char v237;
  char v238;
  __int128 v239;
  _OWORD v240[2];
  char v241;
  BOOL v242;
  CGColorSpace *v243;
  std::__shared_weak_count *v244;
  FxColorDescription v245;
  LiImageSource *v246;
  PCSharedCount v247;
  float64x2_t v248;
  float64x2_t v249;
  _QWORD v250[3];
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  float64x2_t v254;
  float64x2_t v255;
  CMTime v256;
  CMTime v257;
  __int128 v258;
  uint64_t v259;
  __n128 __y;
  CMTimeEpoch v261;
  uint64_t v262;

  v14 = MEMORY[0x1E0C80A78](a1);
  v201 = v16;
  v202 = v15;
  v203 = v17;
  v262 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(v9 + 16488))
    return;
  v18 = v13;
  v19 = v12;
  v20 = v10;
  v21 = v9;
  if (*(_BYTE *)(v9 + 16529))
  {
    v22 = *(OZRenderParams **)(v10 + 8);
    v23 = *((_QWORD *)v22 + 2);
    v258 = *(_OWORD *)v22;
    v259 = v23;
  }
  else
  {
    v24 = v11;
    __y = 0uLL;
    v261 = 0;
    v25 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(*(_QWORD *)(v9 + 16432) + 200) + 272))(*(_QWORD *)(v9 + 16432) + 200, v14);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v25 + 336), &__y);
    v257 = *v24;
    *(__n128 *)&v256.value = __y;
    v256.epoch = v261;
    PC_CMTimeFloorToSampleDuration(&v257, &v256, (uint64_t)&v226);
    v258 = v226;
    v259 = v227;
    v22 = *(OZRenderParams **)(v20 + 8);
  }
  __asm { FMOV            V0.2D, #1.0 }
  v255 = _Q0;
  DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(v22);
  v32 = DoHighQualityResampling;
  v33 = 1.0;
  v34 = 1.0;
  if ((_DWORD)DoHighQualityResampling)
  {
    PSParticleType::getSourceScaleFactor(DoHighQualityResampling, v20, v19, &v255);
    __y.n128_u64[0] = 0;
    modf(v255.f64[0] * 100000.003, __y.n128_f64);
    v34 = __y.n128_f64[0] * 0.00000999999975;
    v255.f64[0] = __y.n128_f64[0] * 0.00000999999975;
    __y.n128_u64[0] = 0;
    modf(v255.f64[1] * 100000.003, __y.n128_f64);
    v33 = __y.n128_f64[0] * 0.00000999999975;
    v255.f64[1] = __y.n128_f64[0] * 0.00000999999975;
    PCMatrix44Tmpl<double>::rightScale((double *)v19, 1.0 / v34, 1.0 / (__y.n128_f64[0] * 0.00000999999975), 1.0);
    if (v34 > -0.0000001 && v34 < 0.0000001)
      goto LABEL_10;
    if (v33 > -0.0000001 && v33 < 0.0000001)
    {
LABEL_10:
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(v18 + 16) = _Q0;
      return;
    }
  }
  v199 = (HGGLBlendingInfo *)(v20 + 1332);
  EnableMetalRendering = LiRenderingTechnology::getEnableMetalRendering((LiRenderingTechnology *)(v20 + 1332));
  v254 = v255;
  v252 = v258;
  v253 = v259;
  v37 = (std::mutex *)(v21 + 16616);
  PCSharedMutex::lock_shared((std::mutex *)(v21 + 16616));
  v200 = (uint64_t **)(v21 + 16568);
  v38 = std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::find<PSParticleType::HGNodeCacheEntryKey>(v21 + 16568, (uint64_t)&v252);
  v39 = v38;
  if (v21 + 16576 != v38)
  {
    v40 = *(_OWORD *)(v38 + 144);
    *(_OWORD *)v18 = *(_OWORD *)(v38 + 128);
    *(_OWORD *)(v18 + 16) = v40;
    if (v203 && *(_QWORD *)(v38 + 112))
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v203, (uint64_t *)(v38 + 112));
    }
    else
    {
      if (*(_QWORD *)(v38 + 80))
        v41 = EnableMetalRendering;
      else
        v41 = 1;
      if ((v41 & 1) != 0)
      {
        if (*(_QWORD *)(v38 + 96))
          v42 = EnableMetalRendering;
        else
          v42 = 0;
        if (v42 != 1)
        {
          v43 = 0;
LABEL_26:
          if (a9)
          {
            v44 = *(_QWORD *)(v39 + 72);
            if (v44)
            {
              v45 = *a9;
              if (*a9 != v44)
              {
                if (v45)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(*a9);
                  v44 = *(_QWORD *)(v39 + 72);
                  *a9 = v44;
                  if (!v44)
                    goto LABEL_145;
                }
                else
                {
                  *a9 = v44;
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
              }
LABEL_145:
              PCSharedMutex::unlock_shared((std::mutex *)(v21 + 16616));
              return;
            }
          }
          if ((v43 & 1) != 0)
            goto LABEL_145;
          goto LABEL_33;
        }
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v201, (uint64_t *)(v38 + 96));
      }
      else
      {
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v202, (uint64_t *)(v38 + 80));
      }
    }
    v43 = 1;
    goto LABEL_26;
  }
LABEL_33:
  PCSharedMutex::unlock_shared((std::mutex *)(v21 + 16616));
  *(_OWORD *)(v20 + 16) = v258;
  *(_QWORD *)(v20 + 32) = v259;
  *(_QWORD *)(v20 + 408) = 0;
  *(_QWORD *)(v20 + 416) = 0;
  *(_QWORD *)(v20 + 224) = *(_QWORD *)(v21 + 16488);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v251);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&__y);
  v250[0] = v250;
  v250[1] = v250;
  v250[2] = 0;
  (*(void (**)(__int128 *__return_ptr, _QWORD, __n128 *, uint64_t, _QWORD *))(**(_QWORD **)(v21 + 16488) + 48))(&v226, *(_QWORD *)(v21 + 16488), &__y, v20 + 16, v250);
  v251 = v226;
  PCHashWriteStream::reset((uint64_t)&__y);
  RenderQuality = OZRenderParams::getRenderQuality((OZRenderParams *)(v20 + 16));
  PCHashWriteStream::writeValue((int8x8_t *)&__y, RenderQuality);
  TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(v20 + 16));
  PCHashWriteStream::writeValue((int8x8_t *)&__y, TextRenderQuality);
  v48 = OZRenderParams::getDoHighQualityResampling((OZRenderParams *)(v20 + 16));
  PCHashWriteStream::writeValue((int8x8_t *)&__y, v48);
  DoShapeAntialiasing = OZRenderParams::getDoShapeAntialiasing((OZRenderParams *)(v20 + 16));
  PCHashWriteStream::writeValue((int8x8_t *)&__y, DoShapeAntialiasing);
  Do3DIntersectionAntialiasing = OZRenderParams::getDo3DIntersectionAntialiasing((OZRenderParams *)(v20 + 16));
  PCHashWriteStream::writeValue((int8x8_t *)&__y, Do3DIntersectionAntialiasing);
  WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)(v20 + 16));
  FxHashColorDescription((int8x8_t *)&__y, WorkingColorDescription);
  Hash = PCHashWriteStream::getHash((int8x8_t *)&__y);
  PCHash128::operator+=((int *)&v251, (int *)Hash);
  if (v32)
  {
    PCHashWriteStream::reset((uint64_t)&__y);
    PCHashWriteStream::writeValue((int8x8_t *)&__y, v34);
    PCHashWriteStream::writeValue((int8x8_t *)&__y, v33);
    v53 = PCHashWriteStream::getHash((int8x8_t *)&__y);
    PCHash128::operator+=((int *)&v251, (int *)v53);
  }
  PCHashWriteStream::reset((uint64_t)&__y);
  ReducedResolutionMedia = OZRenderParams::getReducedResolutionMedia((OZRenderParams *)(v20 + 16));
  PCHashWriteStream::writeValue((int8x8_t *)&__y, ReducedResolutionMedia);
  v55 = PCHashWriteStream::getHash((int8x8_t *)&__y);
  PCHash128::operator+=((int *)&v251, (int *)v55);
  v56 = *(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList(*(HGRenderJob **)(v20 + 8)) + 8);
  PCHashWriteStream::reset((uint64_t)&__y);
  PCHashWriteStream::writeValue((int8x8_t *)&__y, v56 == 0);
  v57 = PCHashWriteStream::getHash((int8x8_t *)&__y);
  PCHash128::operator+=((int *)&v251, (int *)v57);
  v249 = 0uLL;
  v248 = 0uLL;
  if (!v56)
  {
LABEL_104:
    v246 = 0;
    PCSharedCount::PCSharedCount(&v247);
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, __int128 *, uint64_t))(*(_QWORD *)v21 + 1632))(&v226, v21, *(_QWORD *)(v20 + 8), &v258, 1);
    v246 = (LiImageSource *)v226;
    PCSharedCount::PCSharedCount(&v231, (const PCSharedCount *)&v226 + 1);
    PCSharedCount::operator=((uint64_t *)&v247, (uint64_t *)&v231);
    PCSharedCount::~PCSharedCount(&v231);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v226 + 1);
    v99 = OZRenderParams::getWorkingColorDescription(*(OZRenderParams **)(v20 + 8));
    v100 = *(CGColorSpace **)v99;
    v245._pcColorDesc._colorSpaceRef._obj = v100;
    if (v100)
      PCCFRefTraits<CGColorSpace *>::retain(v100);
    v101 = *(_QWORD *)(v99 + 8);
    v245._pcColorDesc._toneMapMethod._gain = *(float *)(v99 + 16);
    *(_QWORD *)&v245._pcColorDesc._dynamicRange = v101;
    v245._isPremultiplied = *(_BYTE *)(v99 + 24);
    BlendingGamma = OZRenderParams::getBlendingGamma(*(OZRenderParams **)(v20 + 8));
    RenderNodeList = HGRenderJob::GetRenderNodeList(*(HGRenderJob **)(v20 + 8));
    LiRenderParameters::LiRenderParameters(&v231, &v245, RenderNodeList, BlendingGamma);
    v237 = OZRenderParams::getDo3DIntersectionAntialiasing(*(OZRenderParams **)(v20 + 8));
    v104 = *(OZRenderParams **)(v20 + 8);
    v238 = *((_BYTE *)v104 + 516);
    v105 = (GLRenderer *)OZRenderParams::getDoHighQualityResampling(v104);
    v241 = (char)v105;
    v242 = GLRenderer::inDesperationMode(v105);
    LiRenderParameters::setHeliumRenderer((uint64_t)&v231, *(HGRenderer **)(v20 + 1488));
    v106 = (__int128 *)(*(_QWORD *)(v20 + 8) + 1316);
    v107 = *(_OWORD *)(*(_QWORD *)(v20 + 8) + 1332);
    v239 = *v106;
    v240[0] = v107;
    *(_OWORD *)((char *)v240 + 14) = *(__int128 *)((char *)v106 + 30);
    v230 = 0;
    LiAgent::LiAgent((LiAgent *)&v226, (const LiRenderParameters *)&v231, 1);
    v108 = *(float64x2_t *)(v229 + 48);
    v110 = *(float64x2_t *)v229;
    v109 = *(float64x2_t *)(v229 + 16);
    v220 = *(float64x2_t *)(v229 + 32);
    v221 = v108;
    v218 = v110;
    v219 = v109;
    v111 = *(_OWORD *)(v229 + 112);
    v113 = *(_OWORD *)(v229 + 64);
    v112 = *(_OWORD *)(v229 + 80);
    v224 = *(_OWORD *)(v229 + 96);
    v225 = v111;
    v222 = v113;
    v223 = v112;
    if (v255.f64[0] != 1.0)
    {
      v218 = vmulq_n_f64(v218, v255.f64[0]);
      v219 = vmulq_n_f64(v219, v255.f64[0]);
    }
    if (v255.f64[1] != 1.0)
    {
      v220 = vmulq_n_f64(v220, v255.f64[1]);
      v221 = vmulq_n_f64(v221, v255.f64[1]);
    }
    LiAgent::setPixelTransform((uint64_t)&v226, (uint64_t)&v218);
    LiAgent::getHelium((LiAgent *)&v226, v246, (HGNode **)&v204);
    v114 = v204.f64[0];
    if (v230 == *(_QWORD *)&v204.f64[0])
    {
      if (v230)
        (*(void (**)(void))(*(_QWORD *)v230 + 24))();
    }
    else
    {
      if (v230)
      {
        (*(void (**)(void))(*(_QWORD *)v230 + 24))();
        v114 = v204.f64[0];
      }
      v230 = *(_QWORD *)&v114;
    }
    v198 = v37;
    LiAgent::getDOD((uint64_t)&v226, (uint64_t)&v204);
    v115 = LODWORD(v204.f64[0]);
    v116 = LOBYTE(v205.f64[0]);
    v217 = v204;
    v196 = HIDWORD(v204.f64[0]);
    v197 = v204.f64[1];
    v117 = *(const void **)(v20 + 1488);
    if (v117)
    {
      if (v118)
      {
        v119 = (uint64_t)v118;
        v120 = PGHelium::convertBitsPerChannel((PGHelium *)4, *(_DWORD *)(*(_QWORD *)(v20 + 8) + 332), 0);
        if (!HGGPURenderer::ShouldAllocateGLTexture(v119, LODWORD(v217.f64[1]), HIDWORD(v217.f64[1]), v120))goto LABEL_217;
      }
    }
    if (v116)
    {
      v204 = 0uLL;
      __asm { FMOV            V0.2D, #-1.0 }
      v205 = _Q0;
      (*(void (**)(uint64_t, float64x2_t *, uint64_t))(*(_QWORD *)v21 + 1200))(v21, &v204, v20 + 16);
      *(int32x2_t *)&v217.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v204, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
      *(int32x2_t *)&v217.f64[1] = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v204, v205)))), *(int32x2_t *)&v217.f64[0]);
      v122 = HIDWORD(v217.f64[1]);
      v123 = LODWORD(v217.f64[1]);
    }
    else
    {
      v123 = LODWORD(v217.f64[1]);
      v122 = HIDWORD(v217.f64[1]);
    }
    if (v123 < 1 || v122 <= 0)
    {
      *(double *)v18 = (double)v115;
      *(double *)(v18 + 8) = (double)v196;
      *(double *)(v18 + 16) = (double)SLODWORD(v197);
      *(double *)(v18 + 24) = (double)SHIDWORD(v197);
LABEL_217:
      LiAgent::~LiAgent((LiAgent *)&v226);
      if (v230)
        (*(void (**)(uint64_t))(*(_QWORD *)v230 + 24))(v230);
      v167 = v244;
      if (v244)
      {
        p_shared_owners = (unint64_t *)&v244->__shared_owners_;
        do
          v169 = __ldaxr(p_shared_owners);
        while (__stlxr(v169 - 1, p_shared_owners));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v243);
      v234 = &unk_1E64FC2F8;
      if (v235 < 0)
        v170 = 1;
      else
        v170 = v235;
      PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v234, 0, v170);
      if (v236)
        MEMORY[0x1B5E2914C](v236, 0x1000C8077774924);
      v236 = 0;
      v235 = 0;
      PCSharedCount::~PCSharedCount(&v233);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v245._pcColorDesc._colorSpaceRef._obj);
      PCSharedCount::~PCSharedCount(&v247);
      goto LABEL_230;
    }
    v215 = 0;
    v216 = 0;
    v213 = 0;
    v214 = 0;
    if (*(_QWORD *)&v249.f64[0])
      v124 = EnableMetalRendering;
    else
      v124 = 1;
    if ((v124 & 1) == 0)
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v215, (uint64_t *)&v249);
      v126 = a9;
      if (a9)
      {
        v130 = *(const void **)(v20 + 1488);
        if (v130)
        else
          v131 = 0;
        v204 = v249;
        v129 = v203;
        if (*(_QWORD *)&v249.f64[1])
        {
          v136 = (unint64_t *)(*(_QWORD *)&v249.f64[1] + 8);
          do
            v137 = __ldxr(v136);
          while (__stxr(v137 + 1, v136));
        }
        MetalContext = *(_QWORD *)&v217.f64[0];
        PGHelium::createTextureNode(&v204, (uint64_t)v131, (unsigned int *)&MetalContext, 0, 0, (HGBitmapLoader **)v211);
        v195 = (HGBitmapLoader *)v211[0];
        if (v211[0])
          v211[0] = 0;
        v138 = v204.f64[1];
        if (*(_QWORD *)&v204.f64[1])
        {
          v139 = (unint64_t *)(*(_QWORD *)&v204.f64[1] + 8);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v138 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v138));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v138);
          }
        }
        goto LABEL_172;
      }
LABEL_170:
      v195 = 0;
LABEL_171:
      v129 = v203;
      goto LABEL_172;
    }
    if (*(_QWORD *)&v248.f64[0])
      v125 = EnableMetalRendering;
    else
      v125 = 0;
    if (v125 == 1)
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v213, (uint64_t *)&v248);
      v126 = a9;
      if (a9)
      {
        v127 = *(const void **)(v20 + 1488);
        if (v127)
        v128 = (HGBitmap *)v213[8];
        if (v128)
          (*(void (**)(_QWORD))(*(_QWORD *)v128 + 16))(v213[8]);
        v129 = v203;
        v195 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v195, v128);
        if (v128)
          (*(void (**)(HGBitmap *))(*(_QWORD *)v128 + 24))(v128);
        goto LABEL_172;
      }
      goto LABEL_170;
    }
    v132 = v230;
    v195 = (HGBitmapLoader *)v230;
    if (v230)
      (*(void (**)(uint64_t))(*(_QWORD *)v230 + 16))(v230);
    if (!v56)
    {
      v126 = a9;
      if (!a9)
        goto LABEL_171;
      v141 = *a9;
      if (*a9 == v132)
        goto LABEL_171;
      if (v141)
        (*(void (**)(uint64_t))(*(_QWORD *)v141 + 24))(v141);
      v126 = a9;
      *a9 = v132;
      if (v132)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
        v129 = v203;
        v126 = a9;
        goto LABEL_172;
      }
      goto LABEL_170;
    }
    v133 = *(unsigned int *)(*(_QWORD *)(v20 + 8) + 340);
    HeliumRenderer = (const void *)LiAgent::getHeliumRenderer((LiRenderParameters **)&v226);
    if (HeliumRenderer)
    else
      v135 = 0;
    if (EnableMetalRendering)
    {
      v211[0] = 0;
      FxColorDescription::getCGColorSpace(&v245);
      PGHelium::renderNodeToMetalTexture(v135, &v230, (unsigned int *)&v217, v133, v199, &v204);
      v177 = v204.f64[0];
      if (v211[0] == *(__int128 **)&v204.f64[0])
      {
        v126 = a9;
        if (v211[0])
          (*(void (**)(void))(*(_QWORD *)v211[0] + 24))();
      }
      else
      {
        v126 = a9;
        if (v211[0])
        {
          (*(void (**)(void))(*(_QWORD *)v211[0] + 24))();
          v177 = v204.f64[0];
        }
        v211[0] = *(__int128 **)&v177;
      }
      MetalContext = HGGPURenderer::GetMetalContext((HGGPURenderer *)v135);
      std::allocate_shared[abi:ne180100]<PGMetalTexture,std::allocator<PGMetalTexture>,HGRef<HGMetalTexture> &,HGMetalContext *,void>((uint64_t *)v211, &MetalContext, &v204);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)&v213, (__int128 *)&v204);
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
      if (v211[0])
        (*(void (**)(__int128 *))(*(_QWORD *)v211[0] + 24))(v211[0]);
    }
    else
    {
      CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v245);
      PGHelium::renderNodeToTexture((HGRenderer *)v135, &v230, (uint64_t)&v217, v133, CGColorSpace, v199, 1, &v204);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)&v215, (__int128 *)&v204);
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
      v126 = a9;
    }
    if (v215)
    {
      if (v203)
      {
        (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)v215 + 72))(&v204);
        v129 = v203;
LABEL_259:
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v129, (__int128 *)&v204);
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
        goto LABEL_172;
      }
      RenderGPU = (OZCacheManager *)OZRenderParams::getRenderGPU(v20 + 16, (void (****)(HGGPUComputeDevice *__hidden))&v204);
      v180 = (PGTextureCache *)OZCacheManager::Instance(RenderGPU);
      v181 = OZCacheManager::addTexture(v180, (uint64_t *)&v215, (HGGPUComputeDevice **)&v204, (PCHash128 *)&v251);
      v182 = PSTextureCache::Instance((PSTextureCache *)v181);
      PSTextureCache::addTexture(v182, (uint64_t *)&v215, (uint64_t)&v204, (uint64_t *)&v251);
      v183 = *(const void **)(v20 + 1488);
      if (v183)
      else
        v184 = 0;
      v129 = 0;
      v211[0] = v215;
      v211[1] = v216;
      if (v216)
      {
        v192 = (unint64_t *)v216 + 1;
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
      }
      v210 = v217.f64[0];
      PGHelium::createTextureNode(v211, (uint64_t)v184, (unsigned int *)&v210, 0, 0, (HGBitmapLoader **)&MetalContext);
      v194 = MetalContext;
      if (v195 == (HGBitmapLoader *)MetalContext)
      {
        if (v195)
          (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v195 + 24))(v195);
        else
          v195 = 0;
      }
      else
      {
        if (v195)
        {
          (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v195 + 24))(v195);
          v194 = MetalContext;
        }
        v195 = (HGBitmapLoader *)v194;
        MetalContext = 0;
      }
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v211);
    }
    else
    {
      if (!v213)
        goto LABEL_171;
      v129 = v203;
      if (v203)
      {
        (*(void (**)(float64x2_t *__return_ptr))(*v213 + 72))(&v204);
        goto LABEL_259;
      }
      v185 = (OZCacheManager *)OZRenderParams::getRenderGPU(v20 + 16, (void (****)(HGGPUComputeDevice *__hidden))&v204);
      v186 = (OZMetalTextureCache *)OZCacheManager::Instance(v185);
      v187 = (__int128 *)v213[8];
      v211[0] = v187;
      if (v187)
        (*(void (**)(__int128 *))(*(_QWORD *)v187 + 16))(v187);
      OZCacheManager::addMetalTexture(v186, (uint64_t *)v211, *(void **)(*(_QWORD *)&v204.f64[0] + 120), (PCHash128 *)&v251);
      v188 = (PSTextureCache *)v211[0];
      if (v211[0])
        v188 = (PSTextureCache *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v211[0] + 24))(v211[0]);
      v189 = PSTextureCache::Instance(v188);
      PSTextureCache::addTexture(v189, (uint64_t *)&v213, (uint64_t)&v204, (uint64_t *)&v251);
      v190 = (HGBitmap *)v213[8];
      if (v190)
        (*(void (**)(_QWORD))(*(_QWORD *)v190 + 16))(v213[8]);
      v191 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v191, v190);
      if (v195 == v191)
      {
        if (v195)
          (*(void (**)(void))(*(_QWORD *)v195 + 24))();
        else
          v195 = 0;
      }
      else
      {
        if (v195)
          (*(void (**)(void))(*(_QWORD *)v195 + 24))();
        v195 = v191;
      }
      if (v190)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v190 + 24))(v190);
    }
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
LABEL_172:
    v207 = 0;
    v205 = 0u;
    v206 = 0u;
    v204 = 0u;
    v142.i64[0] = SLODWORD(v217.f64[0]);
    v142.i64[1] = SHIDWORD(v217.f64[0]);
    v208 = vcvtq_f64_s64(v142);
    v142.i64[0] = SLODWORD(v217.f64[1]);
    v142.i64[1] = SHIDWORD(v217.f64[1]);
    v209 = vcvtq_f64_s64(v142);
    if (v126 && v195)
    {
      *(_QWORD *)&v204.f64[0] = v195;
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v195 + 16))(v195);
    }
    if (v129)
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)&v206 + 1, v129);
    }
    else
    {
      if (v215)
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v204.f64[1], (uint64_t *)&v215);
      if (v213)
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v205.f64[1], (uint64_t *)&v213);
    }
    PCSharedMutex::lock(v198);
    v211[0] = &v252;
    v143 = std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::__emplace_unique_key_args<PSParticleType::HGNodeCacheEntryKey,std::piecewise_construct_t const&,std::tuple<PSParticleType::HGNodeCacheEntryKey const&>,std::tuple<>>(v200, (uint64_t)&v252, (uint64_t)&std::piecewise_construct, v211);
    v144 = *((_QWORD *)v143 + 9);
    v145 = v204.f64[0];
    if (v144 != *(_QWORD *)&v204.f64[0])
    {
      if (v144)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v144 + 24))(v144);
        v145 = v204.f64[0];
      }
      *((float64_t *)v143 + 9) = v145;
      if (v145 != 0.0)
        (*(void (**)(float64_t))(**(_QWORD **)&v145 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v145));
    }
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v143 + 10, (uint64_t *)&v204.f64[1]);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v143 + 12, (uint64_t *)&v205.f64[1]);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v143 + 14, (uint64_t *)&v206 + 1);
    v146 = v209;
    *((float64x2_t *)v143 + 8) = v208;
    *((float64x2_t *)v143 + 9) = v146;
    PCSharedMutex::unlock(v198);
    v147 = (std::mutex *)(v21 + 16744);
    PCSharedMutex::lock((std::mutex *)(v21 + 16744));
    v148 = (uint64_t **)(v21 + 16720);
    if (*(_QWORD *)(v21 + 16736) >= 0x400uLL)
    {
      v149 = *v148;
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v148, *v148);
      operator delete(v149);
    }
    v211[0] = &v251;
    v150 = (float64x2_t *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(v148, (const PCHash128 *)&v251, (uint64_t)&std::piecewise_construct, (_DWORD **)v211);
    v151 = v209;
    v150[3] = v208;
    v150[4] = v151;
    PCSharedMutex::unlock(v147);
    *(double *)v18 = (double)v115;
    *(double *)(v18 + 8) = (double)v196;
    *(double *)(v18 + 16) = (double)SLODWORD(v197);
    *(double *)(v18 + 24) = (double)SHIDWORD(v197);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v202, (uint64_t *)&v215);
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v201, (uint64_t *)&v213);
    v152 = v207;
    if (v207)
    {
      v153 = (unint64_t *)&v207->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v155 = (std::__shared_weak_count *)v206;
    if ((_QWORD)v206)
    {
      v156 = (unint64_t *)(v206 + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v158 = v205.f64[0];
    if (*(_QWORD *)&v205.f64[0])
    {
      v159 = (unint64_t *)(*(_QWORD *)&v205.f64[0] + 8);
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v158 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v158));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v158);
      }
    }
    if (*(_QWORD *)&v204.f64[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v204.f64[0] + 24))(*(_QWORD *)&v204.f64[0]);
    v161 = v214;
    if (v214)
    {
      v162 = (unint64_t *)&v214->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v164 = (std::__shared_weak_count *)v216;
    if (v216)
    {
      v165 = (unint64_t *)v216 + 1;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    if (v195)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v195 + 24))(v195);
    goto LABEL_217;
  }
  v58 = (PSTextureCache *)OZRenderParams::getRenderGPU(v20 + 16, (void (****)(HGGPUComputeDevice *__hidden))&v231);
  v59 = PSTextureCache::Instance(v58);
  PSTextureCache::getTextureForKey(v59, (uint64_t)&v231, (const PCHash128 *)&v251, (uint64_t)&v226);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v249, (uint64_t *)&v226);
  v60 = (OZCacheManager *)std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v248, &v227);
  if (*(_QWORD *)&v249.f64[0])
    v61 = 1;
  else
    v61 = EnableMetalRendering;
  if ((v61 & 1) == 0)
  {
    v62 = (PGTextureCache *)OZCacheManager::Instance(v60);
    OZCacheManager::getTextureForKey(v62, (HGGPUComputeDevice **)&v231, (const PCHash128 *)&v251, 0, &v218);
    v63 = v218;
    v218 = 0uLL;
    v64 = *(std::__shared_weak_count **)&v249.f64[1];
    v249 = v63;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v218.f64[1];
    if (*(_QWORD *)&v218.f64[1])
    {
      v68 = (unint64_t *)(*(_QWORD *)&v218.f64[1] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v67 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v67));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v67);
      }
    }
  }
  if (*(_QWORD *)&v248.f64[0])
    v70 = 0;
  else
    v70 = EnableMetalRendering;
  if (v70 == 1)
  {
    v71 = (OZMetalTextureCache *)OZCacheManager::Instance(v60);
    OZCacheManager::getMetalTextureForKey(v71, *((void **)v231.var0 + 15), (const PCHash128 *)&v251, &v204);
    if (*(_QWORD *)&v204.f64[0])
    {
      v245._pcColorDesc._colorSpaceRef._obj = 0;
      v72 = *(const void **)(v20 + 1488);
      if (v72)
      {
        if (v73)
          v245._pcColorDesc._colorSpaceRef._obj = (CGColorSpace *)HGGPURenderer::GetMetalContext(v73);
      }
      std::allocate_shared[abi:ne180100]<PGMetalTexture,std::allocator<PGMetalTexture>,HGRef<HGMetalTexture> &,HGMetalContext *&,void>((uint64_t *)&v204, (uint64_t *)&v245, &v218);
      v74 = v218;
      v218 = 0uLL;
      v75 = *(std::__shared_weak_count **)&v248.f64[1];
      v248 = v74;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v218.f64[1];
      if (*(_QWORD *)&v218.f64[1])
      {
        v79 = (unint64_t *)(*(_QWORD *)&v218.f64[1] + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v78 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v78));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v78);
        }
      }
      if (*(_QWORD *)&v204.f64[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&v204.f64[0] + 24))(*(_QWORD *)&v204.f64[0]);
    }
  }
  if (*(_QWORD *)&v249.f64[0])
    v81 = EnableMetalRendering;
  else
    v81 = 1;
  if (v81 == 1)
  {
    if (*(_QWORD *)&v248.f64[0])
      v82 = EnableMetalRendering;
    else
      v82 = 0;
  }
  else
  {
    v82 = 1;
  }
  if (a9 || !v82)
  {
LABEL_89:
    v90 = v228;
    if (v228)
    {
      v91 = (unint64_t *)&v228->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    if (*((_QWORD *)&v226 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v96 = v232;
    if (v232)
    {
      v97 = (unint64_t *)&v232->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    goto LABEL_104;
  }
  v83 = (std::mutex *)(v21 + 16616);
  v84 = (std::mutex *)(v21 + 16744);
  PCSharedMutex::lock_shared((std::mutex *)(v21 + 16744));
  v85 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(v21 + 16720, (const PCHash128 *)&v251);
  if ((_QWORD *)(v21 + 16728) == v85)
  {
    PCSharedMutex::unlock_shared((std::mutex *)(v21 + 16744));
    v37 = (std::mutex *)(v21 + 16616);
    goto LABEL_89;
  }
  PCSharedMutex::lock(v83);
  *(_QWORD *)&v218.f64[0] = &v252;
  v86 = std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::__emplace_unique_key_args<PSParticleType::HGNodeCacheEntryKey,std::piecewise_construct_t const&,std::tuple<PSParticleType::HGNodeCacheEntryKey const&>,std::tuple<>>(v200, (uint64_t)&v252, (uint64_t)&std::piecewise_construct, (__int128 **)&v218);
  v87 = v86;
  v88 = *((_OWORD *)v85 + 4);
  *((_OWORD *)v86 + 8) = *((_OWORD *)v85 + 3);
  *((_OWORD *)v86 + 9) = v88;
  if (*(_QWORD *)&v249.f64[0])
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v86 + 10, (uint64_t *)&v249);
  if (*(_QWORD *)&v248.f64[0])
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v87 + 12, (uint64_t *)&v248);
  PCSharedMutex::unlock(v83);
  v89 = *((_OWORD *)v85 + 4);
  *(_OWORD *)v18 = *((_OWORD *)v85 + 3);
  *(_OWORD *)(v18 + 16) = v89;
  if (EnableMetalRendering)
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v201, (uint64_t *)&v248);
  else
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v202, (uint64_t *)&v249);
  PCSharedMutex::unlock_shared(v84);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v227);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v226);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v231);
LABEL_230:
  v171 = *(std::__shared_weak_count **)&v248.f64[1];
  if (*(_QWORD *)&v248.f64[1])
  {
    v172 = (unint64_t *)(*(_QWORD *)&v248.f64[1] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = *(std::__shared_weak_count **)&v249.f64[1];
  if (*(_QWORD *)&v249.f64[1])
  {
    v175 = (unint64_t *)(*(_QWORD *)&v249.f64[1] + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  std::__list_imp<unsigned int>::clear(v250);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&__y);
}

void sub_1B2FC4360(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

CGColorSpace **PSParticleType::buildParticleRenderGraph(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double *a5, PCSharedCount *a6, const OZRenderGraphState *a7)
{
  uint64_t v13;
  CMTimeEpoch v14;
  __int128 v15;
  const void *v16;
  char *v17;
  CGColorSpace *WorkingColorSpace;
  _BOOL4 v19;
  int v20;
  float v21;
  int v22;
  LiGroup *v23;
  __n128 *v24;
  __n128 v25;
  PCSharedCount *p_timescale;
  LiGeode *v27;
  CMTimeValue value;
  PSImageTint *v29;
  PC_Sp_counted_base *var0;
  int v31;
  CMTimeValue v32;
  PCSharedCount v34;
  PCSharedCount v35;
  CMTime v36[3];
  CMTime v37;
  __int16 v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  CMTime v43[2];
  uint64_t v44[20];
  _BYTE v45[36];
  int v46;
  CMTime v47;
  CMTime v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  CMTime v57;
  __n128 v58;
  uint64_t v59;
  PCSharedCount v60[3];
  CMTime v61;
  CMTime v62;

  v13 = *((_QWORD *)a3 + 1);
  v14 = *(_QWORD *)(v13 + 16);
  *(_OWORD *)&v62.value = *(_OWORD *)v13;
  v62.epoch = v14;
  v61 = *(CMTime *)(a4 + 80);
  if (*(double *)(a4 + 104) > 0.0)
  {
    memset(v60, 0, sizeof(v60));
    v37 = v62;
    v43[0] = *(CMTime *)(a4 + 8);
    PC_CMTimeSaferSubtract(&v37, v43, (uint64_t)v60);
    operator/((__int128 *)v60, (uint64_t)v36, *(double *)(a4 + 104));
    v43[0] = v61;
    v48 = v36[0];
    PC_CMTimeSaferAdd(v43, &v48, (uint64_t)&v37);
    v61 = v37;
    v58 = *(__n128 *)(a1 + 16464);
    v59 = *(_QWORD *)(a1 + 16480);
    memset(&v57, 0, sizeof(v57));
    operator/((__int128 *)&v61.value, (uint64_t)&v58, (uint64_t)&v57);
    CMTimeMake(&v47, 1, 1);
    v37 = v57;
    v43[0] = v47;
    PC_CMTimeFloorToSampleDuration(&v37, v43, (uint64_t)v36);
    v37 = v57;
    v43[0] = v36[0];
    PC_CMTimeSaferSubtract(&v37, v43, (uint64_t)&v48);
    operator*((__int128 *)&v48.value, (uint64_t)&v58, (uint64_t)&v37);
    v57 = v37;
    v61 = v37;
  }
  v15 = *(_OWORD *)(a1 + 16440);
  v48.epoch = *(_QWORD *)(a1 + 16456);
  *(_OWORD *)&v48.value = v15;
  v43[0] = v61;
  PC_CMTimeSaferAdd(v43, &v48, (uint64_t)&v37);
  v61 = v37;
  v16 = *(const void **)(a1 + 16488);
  if (v16)
  else
    v17 = 0;
  v56 = 0x3FF0000000000000;
  v53 = 0x3FF0000000000000;
  v50 = 0x3FF0000000000000;
  v48.value = 0x3FF0000000000000;
  *(_OWORD *)&v48.timescale = 0u;
  v49 = 0u;
  v51 = 0u;
  v52 = 0u;
  v54 = 0u;
  v55 = 0u;
  if (v17 && (*(unsigned int (**)(char *))(*(_QWORD *)v17 + 248))(v17))
  {
    PSParticleType::getImageParticleMatrix3D((CGColorSpace **)a1, (uint64_t)a3, a4, a5, (uint64_t)&v48);
  }
  else
  {
    PSParticleType::getImageParticleMatrix((CGColorSpace **)a1, *((CMTime **)a3 + 1), a4, a5, (uint64_t)&v48, *((unsigned __int8 *)a3 + 1497));
    if (*((_BYTE *)a3 + 1498) && *(_BYTE *)(*((_QWORD *)a3 + 1) + 242))
      adjustImageParticleMatrixForFacingCameraEquirectRender(a3, (double *)&v48.value);
  }
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*((FxColorDescription **)a3 + 1));
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v47, 0.0, 0.0, 0.0, 0.0, WorkingColorSpace);
  (*(void (**)(uint64_t, CMTime *, uint64_t, _QWORD, CMTime *))(*(_QWORD *)a1 + 1600))(a1, &v62, a4, *(_QWORD *)a3, &v47);
  v19 = vabds_f32(1.0, *(float *)&v47.value) >= 0.00001
     || vabds_f32(1.0, *((float *)&v47.value + 1)) >= 0.00001
     || vabds_f32(1.0, *(float *)&v47.timescale) >= 0.00001;
  v20 = *(unsigned __int8 *)(a1 + 16528);
  v21 = *(float *)&v47.flags;
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v43, a7);
  v22 = 8 * v20;
  v45[34] = 1;
  v46 = v22;
  if (v17 && (*(unsigned int (**)(char *))(*(_QWORD *)v17 + 248))(v17))
  {
    v23 = (LiGroup *)operator new();
    LiGroup::LiGroup(v23);
    v60[0].var0 = (PC_Sp_counted_base *)v23;
    PCSharedCount::PCSharedCount(&v60[1], (LiGroup *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
    if (!v60[0].var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, CMTime *))(*(_QWORD *)v60[0].var0 + 16))(v60[0].var0, &v48);
    if (v19 || fabsf(v21 + -1.0) >= 0.00001)
    {
      LOBYTE(v37.value) = 0;
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)&v37.value + 4));
      HIDWORD(v37.epoch) = 1065353216;
      v38 = 257;
      v39 = 0;
      LOBYTE(v37.value) = 1;
      v25 = PCWorkingColor::operator=(v24, (__n128 *)&v47);
      *((float *)&v37.epoch + 1) = v21;
      if (!v60[0].var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, CMTime *, __n128))(*(_QWORD *)v60[0].var0 + 256))(v60[0].var0, &v37, v25);
    }
    LiGraphBuilder::addGroupAndMakeCurrent(a6, v60);
    OZRenderParams::OZRenderParams((OZRenderParams *)&v37, *((const OZRenderParams **)a3 + 1));
    v37 = v61;
    v40 = v17;
    v41 = 0;
    v42 = 0;
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v36, (OZImageNode *)(v17 + 6528), (OZRenderParams *)&v37);
    (*(void (**)(char *, CMTime *, PCSharedCount *, CMTime *))(*(_QWORD *)v17 + 2016))(v17, &v37, a6, v43);
    LiGraphBuilder::endInsertingIntoGroup((LiGraphBuilder *)a6);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v36);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v37);
    p_timescale = &v60[1];
  }
  else
  {
    v37.value = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v37.timescale);
    (*(void (**)(CMTime *__return_ptr, uint64_t, _QWORD, CMTime *, uint64_t))(*(_QWORD *)a1 + 1632))(v36, a1, *((_QWORD *)a3 + 1), &v61, 1);
    v37.value = v36[0].value;
    PCSharedCount::PCSharedCount(v60, (const PCSharedCount *)&v36[0].timescale);
    PCSharedCount::operator=((uint64_t *)&v37.timescale, (uint64_t *)v60);
    PCSharedCount::~PCSharedCount(v60);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v36[0].timescale);
    if (v37.value)
    {
      v27 = (LiGeode *)operator new();
      LiGeode::LiGeode(v27, (LiImageSource *)v37.value);
      v36[0].value = (CMTimeValue)v27;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v36[0].timescale, (LiGeode *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
      value = v36[0].value;
      if (!v36[0].value)
        throw_PCNullPointerException(1);
      *(_DWORD *)(v36[0].value + 520) = *(_DWORD *)(a1 + 80);
      *(double *)(value + 544) = v21;
      if (v19)
      {
        v47.flags = 1065353216;
        v29 = (PSImageTint *)operator new();
        PSImageTint::PSImageTint(v29);
        v60[0].var0 = (PC_Sp_counted_base *)v29;
        PCSharedCount::PCSharedCount(&v60[1], (PSImageTint *)((char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24)));
        var0 = v60[0].var0;
        if (!v60[0].var0)
          throw_PCNullPointerException(1);
        PCWorkingColor::operator=(&v58, (__n128 *)&v47);
        LiImageAlphaFill::setColor((LiImageAlphaFill *)var0, &v58);
        if (!v36[0].value)
          throw_PCNullPointerException(1);
        LiImageFilterChain::append((LiImageFilterChain *)(v36[0].value + 608), (LiImageFilter *)v60[0].var0);
        PCSharedCount::~PCSharedCount(&v60[1]);
        value = v36[0].value;
        if (!v36[0].value)
          throw_PCNullPointerException(1);
      }
      v34.var0 = 0;
      PCSharedCount::PCSharedCount(&v35);
      LiSceneObject::setBlendMode(value, v22, &v34);
      PCSharedCount::~PCSharedCount(&v35);
      if (!v36[0].value)
        throw_PCNullPointerException(1);
      (*(void (**)(CMTimeValue, CMTime *))(*(_QWORD *)v36[0].value + 16))(v36[0].value, &v48);
      if (*((_BYTE *)a3 + 1498))
      {
        if (*(_BYTE *)(*((_QWORD *)a3 + 1) + 242))
        {
          if (!v36[0].value)
            throw_PCNullPointerException(1);
          *(_BYTE *)(v36[0].value + 556) = 1;
        }
        else
        {
          if (!v36[0].value)
            throw_PCNullPointerException(1);
          *(_DWORD *)(v36[0].value + 560) = 2;
        }
      }
      v31 = LiGraphBuilder::getAndIncrementCompositeOrder((LiGraphBuilder *)a6);
      v32 = v36[0].value;
      if (!v36[0].value)
        throw_PCNullPointerException(1);
      *(_DWORD *)(v36[0].value + 528) = v31;
      *(_DWORD *)(v32 + 524) = v31;
      PSParticleType::setGeodeProperties(a1, (uint64_t)a3, (uint64_t)v43, v32);
      if (!v36[0].value)
        throw_PCNullPointerException(1);
      *(_DWORD *)(v36[0].value + 700) = 1;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(v60, (const PCSharedCount *)v36);
      LiGraphBuilder::add2d(a6, v60);
      PCSharedCount::~PCSharedCount(&v60[1]);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v36[0].timescale);
    }
    p_timescale = (PCSharedCount *)&v37.timescale;
  }
  PCSharedCount::~PCSharedCount(p_timescale);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v45);
  std::__list_imp<unsigned int>::clear(v44);
  return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v47.epoch);
}

void sub_1B2FC4F0C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  MEMORY[0x1B5E29170](v3, 0x10A1C40063EAE96);
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6D0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x630]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x738]);
  _Unwind_Resume(a1);
}

void PSParticleType::setGeodeProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OZRenderParams *v7;
  double v8;
  uint64_t DoHighQualityResampling;
  double v10;
  uint64_t v11;
  char v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  LiImageProjection *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  PCShared_base *v21;
  __int128 v26;
  OZRenderState v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  PCSharedCount v32;
  __int128 v33;
  uint64_t v34;

  v8 = *(double *)a2;
  v7 = *(OZRenderParams **)(a2 + 8);
  DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 280))(a4, DoHighQualityResampling);
  if (!*(_BYTE *)a3)
  {
    v10 = 0.0;
    goto LABEL_8;
  }
  v10 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v8 + 32792), MEMORY[0x1E0CA2E68], 0.0))
  {
LABEL_8:
    v11 = 24;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, double))(*(_QWORD *)a4 + 192))(a4, *(double *)(a3 + 8));
  *(_DWORD *)(a4 + 680) = *(_DWORD *)(a3 + 48);
  if (*(_BYTE *)(a3 + 16))
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)a4 + 208))(a4, *(double *)(a3 + 24));
    (*(void (**)(uint64_t, double))(*(_QWORD *)a4 + 224))(a4, *(double *)(a3 + 32));
    (*(void (**)(uint64_t, double))(*(_QWORD *)a4 + 240))(a4, *(double *)(a3 + 40));
  }
  v10 = *(double *)(a3 + 56);
  if (v10 > 0.0)
  {
    v11 = 32;
LABEL_9:
    (*(void (**)(uint64_t, double))(*(_QWORD *)a4 + 8 * v11))(a4, v10);
  }
  if (*(_BYTE *)(a4 + 552))
    _ZF = *(_BYTE *)(a3 + 288) == 0;
  else
    _ZF = 1;
  v13 = !_ZF;
  *(_BYTE *)(a4 + 552) = v13;
  if (*(_BYTE *)(a4 + 553))
    v14 = *(_BYTE *)(a3 + 289) == 0;
  else
    v14 = 1;
  v15 = !v14;
  *(_BYTE *)(a4 + 553) = v15;
  *(_BYTE *)(a4 + 696) = *(_BYTE *)(a3 + 88);
  v16 = *(_QWORD *)(a3 + 72);
  if (v16 != a3 + 64)
  {
    v17 = (LiImageProjection *)operator new();
    LiImageProjection::LiImageProjection(v17);
    LiImageFilterChain::append((LiImageFilterChain *)(a4 + 608), v17);
    do
    {
      v18 = *(_QWORD *)(v16 + 16);
      v19 = *((_QWORD *)v7 + 2);
      v33 = *(_OWORD *)v7;
      v34 = v19;
      if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 280))(v18, &v33, 0, 1, 1))
      {
        (*(void (**)(OZRenderState *__return_ptr, _QWORD, OZRenderParams *))(**(_QWORD **)(v16 + 16) + 648))(&v28, *(_QWORD *)(v16 + 16), v7);
        if (v28.var0.var0)
        {
          OZLiFilter::setFilmSpace((OZLiFilter *)v28.var0.var0, 1);
          LiImageFilterChain::append((LiImageFilterChain *)(a4 + 608), (LiImageFilter *)v28.var0.var0);
        }
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v28.var0.var1);
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != a3 + 64);
  }
  v20 = (_QWORD *)*((_QWORD *)v7 + 160);
  v31 = v20;
  if (v20)
    v21 = (PCShared_base *)((char *)v20 + *(_QWORD *)(*v20 - 24));
  else
    v21 = 0;
  PCSharedCount::PCSharedCount(&v32, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, OZRenderParams *))(*(_QWORD *)(*(_QWORD *)&v8 + 200) + 2152))(*(_QWORD *)&v8 + 200, a3 + 224, v7))
  {
    v29 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v30 = _Q0;
    OZRenderState::OZRenderState(&v28, (const OZRenderState *)v7);
    v28.var9 = 1;
    (*(void (**)(_QWORD, __int128 *, OZRenderState *))(**(_QWORD **)(a1 + 16488) + 88))(*(_QWORD *)(a1 + 16488), &v29, &v28);
    v26 = v30;
    *(_OWORD *)(a4 + 704) = v29;
    *(_OWORD *)(a4 + 720) = v26;
  }
  (*(void (**)(double, OZRenderParams *, uint64_t, uint64_t))(**(_QWORD **)&v8 + 144))(COERCE_DOUBLE(*(_QWORD *)&v8), v7, a3, a4);
  PSParticleType::buildLighting(a1, a4, a3 + 224, (double *)a2);
  PCSharedCount::~PCSharedCount(&v32);
}

void sub_1B2FC5344(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void PSParticleType::buildRenderGraph(PSParticleType *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  LiGeode *v7;
  __int128 v8;
  uint64_t v9;
  PCSharedCount v10;
  PCSharedCount v11;
  LiImageSource *var0;
  PCSharedCount v13;
  PCSharedCount v14;

  *((_QWORD *)this + 2061) = (*(uint64_t (**)(PSParticleType *, OZRenderParams *, PCSharedCount *, const OZRenderGraphState *))(*(_QWORD *)this + 1336))(this, a2, a3, a4);
  var0 = 0;
  PCSharedCount::PCSharedCount(&v13);
  v8 = *(_OWORD *)a2;
  v9 = *((_QWORD *)a2 + 2);
  (*(void (**)(PCSharedCount *__return_ptr, PSParticleType *, OZRenderParams *, __int128 *, _QWORD))(*(_QWORD *)this + 1632))(&v10, this, a2, &v8, 0);
  var0 = (LiImageSource *)v10.var0;
  PCSharedCount::PCSharedCount(&v14, &v11);
  PCSharedCount::operator=((uint64_t *)&v13, (uint64_t *)&v14);
  PCSharedCount::~PCSharedCount(&v14);
  PCSharedCount::~PCSharedCount(&v11);
  if (var0)
  {
    v7 = (LiGeode *)operator new();
    LiGeode::LiGeode(v7, var0);
    *(_QWORD *)&v8 = v7;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v8 + 1, (LiGeode *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v10, (const PCSharedCount *)&v8);
    LiGraphBuilder::add2d(a3, &v10);
    PCSharedCount::~PCSharedCount(&v11);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v8 + 1);
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2FC54D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16)
{
  PCSharedCount *v16;
  PCSharedCount *v17;
  PCSharedCount *v18;

  PCSharedCount::~PCSharedCount(v18 + 1);
  PCSharedCount::~PCSharedCount(v17);
  PCSharedCount::~PCSharedCount(v16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSParticleType::buildRenderGraph(PSParticleType *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  PSParticleType::buildRenderGraph((PSParticleType *)((char *)this - 1088), a2, a3, a4);
}

void PSParticleType::getHeliumGraph(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'PSParticleType::getHeliumGraph(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void PSParticleType::addSprite(PSParticleType *this, PSEmitter::RenderParams *a2, PSParticle *a3, float64x2_t *a4, PSHeliumNode *a5)
{
  int v5;

  v5 = *((_DWORD *)this + 4133);
  if (!*((_QWORD *)this + 2061))
    v5 = 0;
  switch(v5)
  {
    case 0:
      PSParticleType::addPointSprite(this, a2, a3, a4, a5);
      break;
    case 1:
      PSParticleType::addLineSprite(this, a2, a3, (OZSimStateElement *)a4, a5);
      break;
    case 2:
      PSParticleType::addOutlineSprite((CGColorSpace **)this, a2, a3, (OZSimStateElement *)a4, a5);
      break;
    case 3:
      PSParticleType::addImageSprite(this, a2, a3, (OZSimStateElement *)a4, a5);
      break;
    default:
      return;
  }
}

void PSParticleType::preRenderFrame(PSParticleType *this, const OZRenderParams *a2)
{
  BOOL *v4;
  const CMTime *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  CMTime v10;
  __n128 v11;

  v4 = (BOOL *)this + 16528;
  (*(void (**)(PSParticleType *))(*(_QWORD *)this + 1640))(this);
  v4[1] = PSParticleType::isSourceSingleFrame(this);
  v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
  *((_DWORD *)v4 + 1) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 11344), MEMORY[0x1E0CA2E68], 0.0);
  *v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 9968), v5, 0.0) != 0;
  v4[16] = OZChannel::getValueAsInt((OZChannel *)((char *)this + 14552), v5, 0.0) != 0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 14704), v5, 0.0);
  *((_QWORD *)this + 2069) = v6;
  v10 = *(CMTime *)a2;
  v7 = 1.0;
  if (!*((_DWORD *)v4 + 1))
  {
    OZRenderParams::getResolution(a2, &v11);
    if (v11.n128_f64[0] >= v11.n128_f64[1])
      v8 = v11.n128_f64[0];
    else
      v8 = v11.n128_f64[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 11752), &v10, 0.0);
    v7 = v8 * v9;
  }
  *((double *)this + 2067) = v7;
}

BOOL PSParticleType::isSourceSingleFrame(PSParticleType *this)
{
  const void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __n128 v7;
  CMTimeEpoch v8;
  CMTime v9;
  CMTime time2;
  CMTime time1;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 11344), MEMORY[0x1E0CA2E68], 0.0) != 3)
    return 1;
  v2 = (const void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (!v2)
    return 1;
  if (!v3)
    return 1;
  v4 = v3;
  if (!(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 264))(v3))
    return 1;
  memset(&v9, 0, sizeof(v9));
  (*(void (**)(CMTime *__return_ptr, void *))(*(_QWORD *)v4 + 280))(&v9, v4);
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 264))(v4);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), &v7);
  time1 = v9;
  *(__n128 *)&time2.value = v7;
  time2.epoch = v8;
  return CMTimeCompare(&time1, &time2) < 1;
}

uint64_t PSParticleType::preRenderFrame(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
}

void PSParticleType::postRenderFrame(PSParticleType *this, const OZRenderParams *a2)
{
  std::mutex *v3;

  v3 = (std::mutex *)((char *)this + 16616);
  PCSharedMutex::lock((std::mutex *)((char *)this + 16616));
  std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy((uint64_t)this + 16568, *((_QWORD **)this + 2072));
  *((_QWORD *)this + 2071) = (char *)this + 16576;
  *((_QWORD *)this + 2073) = 0;
  *((_QWORD *)this + 2072) = 0;
  std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy((uint64_t)this + 16592, *((PCSharedCount **)this + 2075));
  *((_QWORD *)this + 2074) = (char *)this + 16600;
  *((_QWORD *)this + 2076) = 0;
  *((_QWORD *)this + 2075) = 0;
  PCSharedMutex::unlock(v3);
  PCSharedMutex::lock((std::mutex *)((char *)this + 16872));
  *((_QWORD *)this + 2107) = *((_QWORD *)this + 2106);
  PCSharedMutex::unlock((std::mutex *)((char *)this + 16872));
}

uint64_t PSParticleType::setImageNode(PSParticleType *this, OZImageNode *lpsrc)
{
  double v3;
  _DWORD *v4;
  unint64_t v5;

  v3 = 0.0;
  if (lpsrc)
  {
    if (v4)
    {
      LODWORD(v5) = v4[20];
      v3 = (double)v5;
    }
  }
  OZChanSceneNodeRef::setValue((OZChannelBase *)((char *)this + 14392), MEMORY[0x1E0CA2E68], v3, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 14392), v3);
  return (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1640))(this);
}

uint64_t `non-virtual thunk to'PSParticleType::setImageNode(PSParticleType *this, OZImageNode *a2)
{
  return PSParticleType::setImageNode((PSParticleType *)((char *)this - 16), a2);
}

const void *PSParticleType::getImageNode(PSParticleType *this)
{
  return OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 14392));
}

const void *`non-virtual thunk to'PSParticleType::getImageNode(PSParticleType *this)
{
  return OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 14376));
}

uint64_t *PSParticleType::markFactoriesForSerialization(PSParticleType *this, PCSerializerWriteStream *a2)
{
  OZSceneNode::markFactoriesForSerialization((OZFactory **)this, a2);
  return OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 6784), a2, 0);
}

uint64_t *`non-virtual thunk to'PSParticleType::markFactoriesForSerialization(PSParticleType *this, PCSerializerWriteStream *a2)
{
  OZSceneNode::markFactoriesForSerialization((OZFactory **)this - 6, a2);
  return OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 6736), a2, 0);
}

OZChannelBase *PSParticleType::didCreateCopyForCopyOnWrite(PSParticleType *this, double a2)
{
  OZChannel *v2;

  v2 = (OZChannel *)((char *)this + 11600);
  LODWORD(a2) = *((_DWORD *)this + 20);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 11600), (double)*(unint64_t *)&a2);
  OZChannel::resetCurve(v2);
  return OZChannelBase::resetFlag((OZChannelBase *)v2, 0x100000000, 1);
}

uint64_t PSParticleType::didAddToScene(PSParticleType *this, OZScene *a2)
{
  OZSceneNode::didAddToScene(this, a2);
  OZSystemSimulator::didAddToScene((PSParticleType *)((char *)this + 15520), a2);
  OZSystemSimulator::didAddToScene((PSParticleType *)((char *)this + 16080), a2);
  return (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1640))(this);
}

_QWORD *PSParticleType::willRemoveFromScene(PSParticleType *this, OZScene *a2)
{
  OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);
  OZSystemSimulator::willRemoveFromScene((PSParticleType *)((char *)this + 15520), a2);
  return OZSystemSimulator::willRemoveFromScene((PSParticleType *)((char *)this + 16080), a2);
}

_QWORD *PSParticleType::simGetForceBehaviors(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  _QWORD *k;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
  std::list<OZSimulationBehavior *>::list(&v22, v5 + 224);
  for (i = v23; (uint64_t *)i != &v22; i = *(_QWORD *)(i + 8))
  {
    v7 = *(_QWORD *)(i + 16);
    if (!v7
    {
      v20 = *a3;
      v21 = *((_QWORD *)a3 + 2);
      if (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, &v20, 0, 1, 1) & 1) != 0)
      {
        v8 = operator new(0x18uLL);
        v8[1] = a2;
        v8[2] = v7;
        v9 = *a2;
        *v8 = *a2;
        *(_QWORD *)(v9 + 8) = v8;
        *a2 = (uint64_t)v8;
        ++a2[2];
      }
    }
  }
  for (j = *(_QWORD *)(v5 + 48); j; j = *(_QWORD *)(j + 48))
  {
    if ((*(_BYTE *)(j + 57) & 0x20) != 0)
    {
      if (v11)
      {
        std::list<OZSimulationBehavior *>::list(v19, (uint64_t)v11 + 224);
        for (k = (_QWORD *)v19[1]; k != v19; k = (_QWORD *)k[1])
        {
          v13 = (const void *)k[2];
          if (((*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 656))(v13) & 1) == 0
          {
            v17 = *a3;
            v18 = *((_QWORD *)a3 + 2);
            if (((*(uint64_t (**)(const void *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 296))(v13, &v17, 0, 1, 1) & 1) != 0)
            {
              v14 = operator new(0x18uLL);
              v14[1] = a2;
              v14[2] = v13;
              v15 = *a2;
              *v14 = *a2;
              *(_QWORD *)(v15 + 8) = v14;
              *a2 = (uint64_t)v14;
              ++a2[2];
            }
          }
        }
        std::__list_imp<unsigned int>::clear(v19);
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v22);
}

void sub_1B2FC5C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'PSParticleType::simGetForceBehaviors(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  return PSParticleType::simGetForceBehaviors(a1 - 1112, a2, a3);
}

_QWORD *PSParticleType::simGetCollisionBehaviors(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  uint64_t k;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
  std::list<OZSimulationBehavior *>::list(&v22, v5 + 224);
  for (i = v23; (uint64_t *)i != &v22; i = *(_QWORD *)(i + 8))
  {
    v7 = *(_QWORD *)(i + 16);
    if (v7)
    {
      {
        v20 = *a3;
        v21 = *((_QWORD *)a3 + 2);
        if (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 296))(v7, &v20, 0, 1, 1) & 1) != 0)
        {
          v8 = operator new(0x18uLL);
          v8[1] = a2;
          v8[2] = v7;
          v9 = *a2;
          *v8 = *a2;
          *(_QWORD *)(v9 + 8) = v8;
          *a2 = (uint64_t)v8;
          ++a2[2];
        }
      }
    }
  }
  for (j = *(_QWORD *)(v5 + 48); j; j = *(_QWORD *)(j + 48))
  {
    if ((*(_BYTE *)(j + 57) & 0x20) != 0)
    {
      if (v11)
      {
        std::list<OZSimulationBehavior *>::list(v19, (uint64_t)v11 + 224);
        for (k = v19[1]; (_QWORD *)k != v19; k = *(_QWORD *)(k + 8))
        {
          v13 = *(_QWORD *)(k + 16);
          if (v13
          {
            v17 = *a3;
            v18 = *((_QWORD *)a3 + 2);
            if (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 296))(v13, &v17, 0, 1, 1) & 1) != 0)
            {
              v14 = operator new(0x18uLL);
              v14[1] = a2;
              v14[2] = v13;
              v15 = *a2;
              *v14 = *a2;
              *(_QWORD *)(v15 + 8) = v14;
              *a2 = (uint64_t)v14;
              ++a2[2];
            }
          }
        }
        std::__list_imp<unsigned int>::clear(v19);
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v22);
}

void sub_1B2FC5EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'PSParticleType::simGetCollisionBehaviors(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  return PSParticleType::simGetCollisionBehaviors(a1 - 1112, a2, a3);
}

uint64_t PSParticleType::simAnyCollisionBehaviors(PSParticleType *this)
{
  uint64_t v1;
  uint64_t *i;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *j;
  _QWORD *v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t *v11;

  v1 = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 640))(this);
  std::list<OZSimulationBehavior *>::list(&v10, v1 + 224);
  for (i = v11; i != &v10; i = (uint64_t *)i[1])
  {
    v3 = (_QWORD *)i[2];
    if (((*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v3[2] + 24))(v3 + 2, 0, 1) & 1) != 0)
    {
      {
        goto LABEL_18;
      }
    }
  }
  v4 = *(_QWORD *)(v1 + 48);
  if (v4)
  {
    while (1)
    {
      if ((*(_BYTE *)(v4 + 57) & 0x20) != 0)
      {
        if (v5)
          break;
      }
LABEL_15:
      v4 = *(_QWORD *)(v4 + 48);
      if (!v4)
        goto LABEL_19;
    }
    std::list<OZSimulationBehavior *>::list(v9, (uint64_t)v5 + 224);
    for (j = (_QWORD *)v9[1]; ; j = (_QWORD *)j[1])
    {
      if (j == v9)
      {
        std::__list_imp<unsigned int>::clear(v9);
        goto LABEL_15;
      }
      v7 = (_QWORD *)j[2];
      if (((*(uint64_t (**)(_QWORD *))(*v7 + 656))(v7) & 1) == 0
        && (*(unsigned int (**)(_QWORD *, _QWORD, uint64_t))(v7[2] + 24))(v7 + 2, 0, 1)
      {
        break;
      }
    }
    std::__list_imp<unsigned int>::clear(v9);
LABEL_18:
    v4 = 1;
  }
LABEL_19:
  std::__list_imp<unsigned int>::clear(&v10);
  return v4;
}

void sub_1B2FC6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSParticleType::simAnyCollisionBehaviors(PSParticleType *this)
{
  return PSParticleType::simAnyCollisionBehaviors((PSParticleType *)((char *)this - 1112));
}

_QWORD *PSParticleType::simGetAllBehaviors(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  _QWORD *j;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t *v18;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
  std::list<OZSimulationBehavior *>::list(&v17, v3 + 224);
  v4 = v18;
  if (v18 != &v17)
  {
    v5 = (_QWORD *)*a2;
    v6 = a2[2] + 1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = v4[2];
      v7[1] = a2;
      v7[2] = v8;
      *v7 = v5;
      v5[1] = v7;
      *a2 = v7;
      a2[2] = v6;
      v4 = (uint64_t *)v4[1];
      ++v6;
      v5 = v7;
    }
    while (v4 != &v17);
  }
  for (i = *(_QWORD *)(v3 + 48); i; i = *(_QWORD *)(i + 48))
  {
    if ((*(_BYTE *)(i + 57) & 0x20) != 0)
    {
      if (v10)
      {
        std::list<OZSimulationBehavior *>::list(v16, (uint64_t)v10 + 224);
        for (j = (_QWORD *)v16[1]; j != v16; j = (_QWORD *)j[1])
        {
          v12 = j[2];
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 656))(v12) & 1) == 0)
          {
            v13 = operator new(0x18uLL);
            v13[1] = a2;
            v13[2] = v12;
            v14 = (_QWORD *)*a2;
            *v13 = *a2;
            v14[1] = v13;
            *a2 = v13;
            ++a2[2];
          }
        }
        std::__list_imp<unsigned int>::clear(v16);
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v17);
}

void sub_1B2FC621C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'PSParticleType::simGetAllBehaviors(uint64_t a1, _QWORD *a2)
{
  return PSParticleType::simGetAllBehaviors(a1 - 1112, a2);
}

uint64_t PSParticleType::simAnythingToSimulate(PSParticleType *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'PSParticleType::simAnythingToSimulate(PSParticleType *this)
{
  return 1;
}

uint64_t PSParticleType::areAnyLinkBehaviorsSourcingObjectsInSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  const void *v6;
  char *v7;
  uint64_t Object;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == a2)
    return 0;
  v5 = (_QWORD *)(a3 + 8);
  while (1)
  {
    v6 = *(const void **)(v3 + 16);
    if (v6)
    {
      if (v7)
      {
        Object = OZChanObjectManipRef::getObject((OZChannelBase *)(v7 + 1064));
        if (Object)
        {
          v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Object + 256))(Object);
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v11 = *v5;
          if (*v5)
          {
            v12 = v5;
            do
            {
              v13 = *(_DWORD *)(v11 + 28);
              v14 = v13 >= v10;
              if (v13 >= v10)
                v15 = (uint64_t *)v11;
              else
                v15 = (uint64_t *)(v11 + 8);
              if (v14)
                v12 = (_QWORD *)v11;
              v11 = *v15;
            }
            while (*v15);
            if (v12 != v5 && v10 >= *((_DWORD *)v12 + 7))
              break;
          }
        }
      }
    }
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == a2)
      return 0;
  }
  return 1;
}

uint64_t PSParticleType::simDoesDependOnSceneNodes(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  OZBehavior *v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  void *v28;
  const void *v29;
  void *v30;
  _QWORD *i;
  OZBehavior *v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t *v44;

  v3 = (const void *)a1;
  if (!a1)
  {
LABEL_18:
    v12 = (*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 640))(v3);
    std::list<OZSimulationBehavior *>::list(&v43, v12 + 224);
    v14 = v44;
    if (v44 == &v43)
    {
LABEL_37:
      v25 = *(_QWORD *)(v12 + 48);
      if (!v25)
      {
LABEL_72:
        std::__list_imp<unsigned int>::clear(&v43);
        return v25;
      }
      v26 = (uint64_t *)(a2 + 8);
      while (1)
      {
        if ((*(_BYTE *)(v25 + 57) & 0x20) != 0)
        {
          if (v27)
            break;
        }
LABEL_67:
        v25 = *(_QWORD *)(v25 + 48);
        if (!v25)
          goto LABEL_72;
      }
      v28 = v27;
      v29 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 840))(v27);
      if (v29)
      else
        v30 = 0;
      std::list<OZSimulationBehavior *>::list(v42, (uint64_t)v28 + 224);
      for (i = (_QWORD *)v42[1]; ; i = (_QWORD *)i[1])
      {
        if (i == v42)
        {
          std::__list_imp<unsigned int>::clear(v42);
          goto LABEL_67;
        }
        v32 = (OZBehavior *)i[2];
        if (OZBehavior::isEnabledAndUseBehaviors(v32)
          && ((*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v32 + 656))(v32) & 1) == 0)
        {
          v33 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v32 + 664))(v32);
          if ((void *)v33 != v30 && v33 != 0)
            break;
        }
LABEL_65:
        ;
      }
      v35 = *(_DWORD *)(v33 + 80);
      while (1)
      {
        if (*v26)
        {
          v36 = a2 + 8;
          v37 = *v26;
          do
          {
            v38 = *(_DWORD *)(v37 + 28);
            v39 = v38 >= v35;
            if (v38 >= v35)
              v40 = (uint64_t *)v37;
            else
              v40 = (uint64_t *)(v37 + 8);
            if (v39)
              v36 = v37;
            v37 = *v40;
          }
          while (*v40);
          if ((uint64_t *)v36 != v26 && v35 >= *(_DWORD *)(v36 + 28))
            break;
        }
        v33 = *(_QWORD *)(v33 + 960);
        if (!v33)
          goto LABEL_65;
      }
      std::__list_imp<unsigned int>::clear(v42);
    }
    else
    {
      v15 = (uint64_t *)(a2 + 8);
      while (1)
      {
        v16 = (OZBehavior *)v14[2];
        if ((OZBehavior::isEnabledAndUseBehaviors(v16) & 1) != 0)
        {
          v17 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v16 + 664))(v16);
          if ((void *)v17 != v13 && v17 != 0)
          {
            v19 = *v15;
            if (*v15)
            {
              v20 = *(_DWORD *)(v17 + 80);
              v21 = a2 + 8;
              do
              {
                v22 = *(_DWORD *)(v19 + 28);
                v23 = v22 >= v20;
                if (v22 >= v20)
                  v24 = (uint64_t *)v19;
                else
                  v24 = (uint64_t *)(v19 + 8);
                if (v23)
                  v21 = v19;
                v19 = *v24;
              }
              while (*v24);
              if ((uint64_t *)v21 != v15 && v20 >= *(_DWORD *)(v21 + 28))
                break;
            }
          }
        }
        v14 = (uint64_t *)v14[1];
        if (v14 == &v43)
          goto LABEL_37;
      }
    }
    v25 = 1;
    goto LABEL_72;
  }
  v4 = a1;
  while (1)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      v5 = *(_DWORD *)(v4 + 80);
      v6 = a2 + 8;
      v7 = *(_QWORD *)(a2 + 8);
      do
      {
        v8 = *(_DWORD *)(v7 + 28);
        v9 = v8 >= v5;
        if (v8 >= v5)
          v10 = (uint64_t *)v7;
        else
          v10 = (uint64_t *)(v7 + 8);
        if (v9)
          v6 = v7;
        v7 = *v10;
      }
      while (*v10);
      if (v6 != a2 + 8 && v5 >= *(_DWORD *)(v6 + 28))
        return 1;
    }
    v4 = *(_QWORD *)(v4 + 960);
    if (!v4)
    {
      v11 = a1;
      while (1)
      {
        a1 = PSParticleType::areAnyLinkBehaviorsSourcingObjectsInSet(a1, v11 + 1000, a2);
        if ((a1 & 1) != 0)
          return 1;
        v11 = *(_QWORD *)(v11 + 960);
        if (!v11)
          goto LABEL_18;
      }
    }
  }
}

void sub_1B2FC6624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSParticleType::simDoesDependOnSceneNodes(uint64_t a1, uint64_t a2)
{
  return PSParticleType::simDoesDependOnSceneNodes(a1 - 1112, a2);
}

uint64_t PSParticleType::simGetTransformNode(PSParticleType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2054);
  if (v1)
    return v1 + 200;
  else
    return 0;
}

uint64_t `non-virtual thunk to'PSParticleType::simGetTransformNode(PSParticleType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1915);
  if (v1)
    return v1 + 200;
  else
    return 0;
}

void PSParticleType::simGetTransformMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OZChannel *v8;
  OZRenderState v9;

  OZRenderState::OZRenderState(&v9);
  *(_OWORD *)&v9.var0.var0 = *(_OWORD *)a4;
  v9.var0.var3 = *(_QWORD *)(a4 + 16);
  v9.var8 = 0;
  v8 = *(OZChannel **)(a1 + 16432);
  if (a1 + 15800 == a2)
    PSEmitter::getPreviewTransformMatrix(v8, a3, (CMTime *)&v9);
  else
    (*((void (**)(OZChannelFolder **, uint64_t, OZRenderState *))v8[1].var6 + 157))(&v8[1].var6, a3, &v9);
}

void `non-virtual thunk to'PSParticleType::simGetTransformMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  PSParticleType::simGetTransformMatrix(a1 - 1112, a2, a3, a4);
}

double PSParticleType::simGetInvTransformMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OZChannel *v8;
  double result;
  OZRenderState v10;

  OZRenderState::OZRenderState(&v10);
  *(_OWORD *)&v10.var0.var0 = *(_OWORD *)a4;
  v10.var0.var3 = *(_QWORD *)(a4 + 16);
  v10.var8 = 0;
  v8 = *(OZChannel **)(a1 + 16432);
  if (a1 + 15800 == a2)
    return PSEmitter::getInvPreviewTransformMatrix(v8, a3, (CMTime *)&v10);
  (*((void (**)(OZChannelFolder **, uint64_t, OZRenderState *))v8[1].var6 + 158))(&v8[1].var6, a3, &v10);
  return result;
}

double `non-virtual thunk to'PSParticleType::simGetInvTransformMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PSParticleType::simGetInvTransformMatrix(a1 - 1112, a2, a3, a4);
}

double PSParticleType::simGetScenePixelAspectRatio(PSParticleType *this)
{
  return *(double *)((*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this) + 384);
}

double `non-virtual thunk to'PSParticleType::simGetScenePixelAspectRatio(PSParticleType *this)
{
  return *(double *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 139) + 272))((char *)this - 1112) + 384);
}

double PSParticleType::simGetSceneFrameDuration@<D0>(PSParticleType *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this);
  *(_QWORD *)&result = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), a2).n128_u64[0];
  return result;
}

double `non-virtual thunk to'PSParticleType::simGetSceneFrameDuration@<D0>(PSParticleType *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 139) + 272))((char *)this - 1112);
  *(_QWORD *)&result = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), a2).n128_u64[0];
  return result;
}

double PSParticleType::simGetFirstFrame@<D0>(PSParticleType *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 1128))(&v5);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

double `non-virtual thunk to'PSParticleType::simGetFirstFrame@<D0>(PSParticleType *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;

  (*(void (**)(__int128 *__return_ptr))(*((_QWORD *)this - 139) + 1128))(&v5);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

char *PSParticleType::getParticlesForSimStyleType(PSParticleType *this, int a2)
{
  char *v2;
  char *v3;

  v2 = (char *)this + 0x4000;
  v3 = (char *)this + 16360;
  if (a2)
    v3 = 0;
  if (a2 != 1)
    v2 = v3;
  if (a2 == 2)
    return (char *)this + 16408;
  else
    return v2;
}

uint64_t PSParticleType::simAddObjects(PSParticleType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  double FrameRate;
  int ValueAsInt;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  Float64 Seconds;
  unsigned int v20;
  unsigned int ValueAsUint;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  double v32;
  double v33;
  double v34;
  uint64_t Particles;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime time1;
  CMTime v42;
  CMTime time;
  CMTime v44;
  CMTime v45;
  CMTime time2;

  if ((PSParticleType *)((char *)this + 15800) == a2)
    v6 = 1;
  else
    v6 = 2;
  if ((PSParticleType *)((char *)this + 15520) == a2)
    v7 = 0;
  else
    v7 = v6;
  v45 = *(CMTime *)((_BYTE *)a3 + 1);
  memset(&v44, 0, sizeof(v44));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v44);
  FrameRate = PSEmitter::getFrameRate(*((PSEmitter **)this + 2054));
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 2054) + 28408), &v45, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1120), &v45, 0.0);
  v12 = v11;
  PSEmitter::getBirthRateFraction(*((PSEmitter **)this + 2054), &v45);
  v14 = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1272), &v45, 0.0);
  v16 = 25.0;
  if (!ValueAsInt)
    v16 = FrameRate;
  v17 = v12 / v16 * v14;
  v18 = v15 / v16;
  if (v15 / v16 > 0.0)
  {
    time = v45;
    Seconds = CMTimeGetSeconds(&time);
    v20 = (FrameRate * (Seconds + Seconds));
    ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 11600), MEMORY[0x1E0CA2E68], 0.0);
    v22 = -32;
    v23 = -1640531527;
    v24 = v20;
    do
    {
      v24 += (v20 + 16 * ValueAsUint) ^ (ValueAsUint + v23) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                             + (ValueAsUint >> 5));
      ValueAsUint += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v24) ^ (v23 + v24) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v24 >> 5));
      v23 -= 1640531527;
    }
    while (!__CFADD__(v22++, 1));
    v17 = v17 + v18 * ((double)(ValueAsUint ^ v24) / 4294967300.0);
  }
  memset(&v42, 0, sizeof(v42));
  operator*(&v44, &v42, -1.0);
  (*(void (**)(CMTime *__return_ptr, PSParticleType *))(*(_QWORD *)this + 1128))(&time1, this);
  time2 = time1;
  time1 = v45;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v40);
  time1 = v40;
  time2 = v44;
  v26 = (uint64_t)&off_1B304E000;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    goto LABEL_15;
  v29 = (uint64_t *)*((_QWORD *)this + 2045);
  if (v29 == *((uint64_t **)this + 2046))
    goto LABEL_20;
  v30 = *v29;
  time1 = v45;
  time2 = v42;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v39);
  v31 = *(_OWORD *)(v30 + 8);
  time1.epoch = *(_QWORD *)(v30 + 24);
  *(_OWORD *)&time1.value = v31;
  time2 = v39;
  if (!CMTimeCompare(&time1, &time2))
  {
LABEL_20:
    v28 = 1;
  }
  else
  {
LABEL_15:
    v27 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 139) + 80))((char *)this + 1112);
    v28 = v27 ^ 1;
    if (fabs(v17) < 0.0000001 && (v27 & 1) != 0)
      return 0;
  }
  LODWORD(v26) = vcvtmd_s64_f64(v17 + 0.0000001);
  v32 = v17 - (double)(int)v26;
  if (v32 > 0.0)
  {
    if (*((_BYTE *)this + 16560))
    {
      v38 = v45;
      v33 = FrameRate * CMTimeGetSeconds(&v38);
    }
    else
    {
      operator/((__int128 *)&v45.value, (uint64_t)&v44, (uint64_t)&v37);
      v33 = CMTimeGetSeconds(&v37);
    }
    if (v32 * v33 - floor(v32 * v33 + 0.0000001) >= v32 * 0.9)
      v26 = v26;
    else
      v26 = (v26 + 1);
  }
  if (v28)
  {
    PSEmitter::getInitialNumFraction(*((PSEmitter **)this + 2054), &v45);
    v26 = v26
        + vcvtmd_s64_f64(v34 * (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 1424), &v45, 0.0) + 0.0000001);
  }
  if ((int)v26 < 1)
    return 0;
  Particles = PSParticleType::findOrCreateParticles(this, v7, v26, a3);
  PSEmitter::initParticles(*((PSEmitter **)this + 2054), v7, this, Particles, 0, a3);
  return Particles;
}

uint64_t PSParticleType::getSeed(PSParticleType *this)
{
  return OZChannel::getValueAsUint((OZChannel *)((char *)this + 11600), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t PSParticleType::findOrCreateParticles(PSParticleType *this, int a2, uint64_t a3, OZSimStateArray *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  int32_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CMTime v25;
  __n128 v26;
  CMTimeEpoch v27;
  CMTime v28;
  CMTime time2;
  CMTime time1;

  v7 = (uint64_t **)((char *)this + 0x4000);
  v8 = (uint64_t **)((char *)this + 16360);
  if (a2)
    v8 = 0;
  if (a2 != 1)
    v7 = v8;
  if (a2 == 2)
    v9 = (uint64_t **)((char *)this + 16408);
  else
    v9 = v7;
  if (!(*(unsigned int (**)(char *))(*((_QWORD *)this + 139) + 80))((char *)this + 1112))
    v9 = 0;
  v28 = *(CMTime *)((_BYTE *)a4 + 1);
  v26 = 0uLL;
  v27 = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v26);
  if (v9)
    v11 = (unint64_t)((char *)v9[1] - (char *)*v9) >> 3;
  else
    LODWORD(v11) = 0;
  v12 = -1108378657 * ((*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3);
  std::vector<OZSimStateElement>::resize((uint64_t *)a4, (v12 + a3));
  if (!(_DWORD)v11)
    goto LABEL_19;
  v13 = (*v9)[(v11 - 1)];
  time1 = v28;
  *(__n128 *)&time2.value = v26;
  time2.epoch = v27;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
  v14 = *(_OWORD *)(v13 + 8);
  time1.epoch = *(_QWORD *)(v13 + 24);
  *(_OWORD *)&time1.value = v14;
  time2 = v25;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
LABEL_19:
    PSParticleType::createParticles((uint64_t)this, v9, a3, (uint64_t *)a4);
  }
  else
  {
    v16 = *v9;
    v15 = v9[1];
    while (1)
    {
      if (v16 == v15)
        goto LABEL_28;
      v17 = *v16;
      time1 = v28;
      *(__n128 *)&time2.value = v26;
      time2.epoch = v27;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
      v18 = *(_OWORD *)(v17 + 8);
      time1.epoch = *(_QWORD *)(v17 + 24);
      *(_OWORD *)&time1.value = v18;
      time2 = v25;
      v19 = CMTimeCompare(&time1, &time2);
      v15 = v9[1];
      if ((v19 & 0x80000000) == 0)
        break;
      ++v16;
    }
    if (v16 == v15)
    {
LABEL_28:
      v20 = 0;
      goto LABEL_29;
    }
    v20 = 0;
    do
    {
      v21 = *(_OWORD *)(*v16 + 8);
      time1.epoch = *(_QWORD *)(*v16 + 24);
      *(_OWORD *)&time1.value = v21;
      time2 = v28;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        v22 = *(_OWORD *)(*v16 + 8);
        time1.epoch = *(_QWORD *)(*v16 + 24);
        *(_OWORD *)&time1.value = v22;
        time2 = v28;
        if (CMTimeCompare(&time1, &time2) > 0
          || ((*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1488))(this) & 1) != 0)
        {
          break;
        }
      }
      if (v20 >= a3)
        break;
      v23 = *v16++;
      *(_QWORD *)(*(_QWORD *)a4 + 248 * (v12 + v20) + 232) = v23;
      v20 = (v20 + 1);
    }
    while (v16 != v9[1]);
LABEL_29:
    if ((_DWORD)v20 != (_DWORD)a3)
    {
      std::vector<OZSimStateElement>::resize((uint64_t *)a4, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) + (int)v20 - (int)a3);
      return v20;
    }
  }
  return a3;
}

uint64_t `non-virtual thunk to'PSParticleType::simAddObjects(PSParticleType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  return PSParticleType::simAddObjects((PSParticleType *)((char *)this - 1112), a2, a3, a4);
}

void PSParticleType::createParticles(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  __n128 FrameDuration;
  int v14;
  int v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  CMTime v24;
  CMTime v25;
  __int128 v26;
  uint64_t v27;
  CMTime v28;
  CMTime v29;
  __int128 v30;
  uint64_t v31;

  v26 = *(_OWORD *)(a4 + 3);
  v27 = a4[5];
  v9 = *a4;
  v8 = a4[1];
  if (a2)
  {
    v10 = (uint64_t)(a2[1] - *a2) >> 3;
    std::vector<TXParagraphStyle *>::resize((uint64_t)a2, v10 + a3);
  }
  else
  {
    v10 = 0;
  }
  v11 = 1.0 / (double)a3;
  memset(&v25, 0, sizeof(v25));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v25);
  v14 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 1488))(a1, FrameDuration);
  if (!v14)
    v11 = 0.0;
  if (a3)
  {
    v15 = -1108378657 * ((unint64_t)(v8 - v9) >> 3);
    if (v14)
      v16 = 0.0;
    else
      v16 = 1.0;
    v17 = -a3;
    do
    {
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 1480))(a1, v10, &v26);
      v19 = v18;
      if (a2)
        *(_QWORD *)(*a2 + 8 * v10) = v18;
      operator*(&v25, &v24, 1.0 - v16);
      v20 = *(_OWORD *)(v19 + 8);
      v29.epoch = *(_QWORD *)(v19 + 24);
      *(_OWORD *)&v29.value = v20;
      v28 = v24;
      PC_CMTimeSaferSubtract(&v29, &v28, (uint64_t)&v30);
      v21 = v30;
      *(_QWORD *)(v19 + 24) = v31;
      *(_OWORD *)(v19 + 8) = v21;
      v22 = *a4 + 248 * (v15 + v17);
      *(_QWORD *)(v22 + 232) = v19;
      *(_BYTE *)(v22 + 240) = a2 == 0;
      v10 = (v10 + 1);
      v16 = v11 + v16;
    }
    while (!__CFADD__(v17++, 1));
  }
}

void PSParticleType::simFlushedCache(PSParticleType *this, OZSystemSimulator *a2)
{
  OZSystemSimulator *v4;
  char *v5;
  char *v6;
  _QWORD *v7;

  v4 = (PSParticleType *)((char *)this + 15520);
  v5 = (char *)this + 16408;
  if ((PSParticleType *)((char *)this + 15800) == a2)
    v5 = (char *)this + 0x4000;
  if (v4 == a2)
    v6 = (char *)this + 16360;
  else
    v6 = v5;
  v7 = *(_QWORD **)v6;
  if (*(_QWORD *)v6 != *((_QWORD *)v6 + 1))
  {
    do
    {
      if (*v7)
        (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 8))(*v7);
      *v7++ = 0;
    }
    while (v7 != *((_QWORD **)v6 + 1));
    v7 = *(_QWORD **)v6;
  }
  *((_QWORD *)v6 + 1) = v7;
  (*(void (**)(PSParticleType *))(*(_QWORD *)this + 1640))(this);
  if (v4 == a2)
  {
    *((_BYTE *)this + 15464) = 1;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 15472, *((_QWORD **)this + 1935));
    *((_QWORD *)this + 1934) = (char *)this + 15480;
    *((_QWORD *)this + 1936) = 0;
    *((_QWORD *)this + 1935) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 15496, *((_QWORD **)this + 1938));
    *((_QWORD *)this + 1937) = (char *)this + 15504;
    *((_QWORD *)this + 1939) = 0;
    *((_QWORD *)this + 1938) = 0;
  }
}

void `non-virtual thunk to'PSParticleType::simFlushedCache(PSParticleType *this, OZSystemSimulator *a2)
{
  PSParticleType::simFlushedCache((PSParticleType *)((char *)this - 1112), a2);
}

_QWORD *PSParticleType::setEmitter(_QWORD *this, PSEmitter *a2)
{
  OZTransformNode *v3;

  this[2054] = a2;
  if (this[127])
  {
    this = *(_QWORD **)(this[125] + 16);
    if (this)
    {
      if (this)
      {
        if (a2)
          v3 = (OZTransformNode *)((char *)a2 + 200);
        else
          v3 = 0;
        return (_QWORD *)OZSimSystemMoToFoBehavior::updateTransformNode((OZSimSystemMoToFoBehavior *)this, v3);
      }
    }
  }
  return this;
}

PSParticle *PSParticleType::createParticle(PSParticleType *this, unsigned int a2, const CMTime *a3)
{
  PSParticle *v5;

  v5 = (PSParticle *)operator new();
  PSParticle::PSParticle(v5, a2, a3);
  return v5;
}

void sub_1B2FC73E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40AE952B93);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::getPreviewSceneNode(PSParticleType *this)
{
  uint64_t v1;
  OZChannelBase *v2;
  uint64_t NextUniqueID;
  uint64_t SceneNode;
  PCString v6;
  __int128 v7;

  v1 = theApp;
  v7 = xmmword_1B3561450;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Emitter Preview Emitter Name"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v2);
  SceneNode = OZApplication::createSceneNode(v1, (unsigned int *)&v7, (uint64_t)&v6, NextUniqueID);
  PCString::~PCString(&v6);
  return SceneNode;
}

void sub_1B2FC7480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelBase *PSParticleType::getChannelFromRefAndVersion(PSParticleType *this, OZChannelRef *a2, double a3)
{
  OZChannelBase *ChannelFromRefAndVersion;
  OZChannelBase *v5;
  OZChannelBase *v6;

  ChannelFromRefAndVersion = OZObjectManipulator::getChannelFromRefAndVersion((PSParticleType *)((char *)this + 16), a2, a3);
  if (ChannelFromRefAndVersion == (OZChannelBase *)((char *)this + 15312))
    v5 = (OZChannelBase *)((char *)this + 4648);
  else
    v5 = ChannelFromRefAndVersion;
  if (ChannelFromRefAndVersion == (OZChannelBase *)((char *)this + 15160))
    v6 = (OZChannelBase *)((char *)this + 3632);
  else
    v6 = v5;
  if (ChannelFromRefAndVersion == (OZChannelBase *)((char *)this + 15008))
    return (OZChannelBase *)((char *)this + 2776);
  else
    return v6;
}

OZChannelBase *`non-virtual thunk to'PSParticleType::getChannelFromRefAndVersion(PSParticleType *this, OZChannelRef *a2, double a3)
{
  OZChannelBase *ChannelFromRefAndVersion;
  OZChannelBase *v5;
  OZChannelBase *v6;

  ChannelFromRefAndVersion = OZObjectManipulator::getChannelFromRefAndVersion(this, a2, a3);
  if (ChannelFromRefAndVersion == (OZChannelBase *)((char *)this + 15296))
    v5 = (OZChannelBase *)((char *)this + 4632);
  else
    v5 = ChannelFromRefAndVersion;
  if (ChannelFromRefAndVersion == (OZChannelBase *)((char *)this + 15144))
    v6 = (OZChannelBase *)((char *)this + 3616);
  else
    v6 = v5;
  if (ChannelFromRefAndVersion == (OZChannelBase *)((char *)this + 14992))
    return (OZChannelBase *)((char *)this + 2760);
  else
    return v6;
}

uint64_t PSParticleType::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  OZSceneNode::updateReferenceIDs(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1);
}

uint64_t `non-virtual thunk to'PSParticleType::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a1 - 16;
  OZSceneNode::updateReferenceIDs(a1 - 16, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 1640))(v3);
}

_QWORD *PSParticleType::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3, int a4)
{
  OZSceneNode::calcStaticHash(a1, a2, a3, a4);
  return OZSystemSimulator::calcStaticHash(a1 + 15520, a2, a3, a1);
}

_QWORD *PSParticleType::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4, int a5)
{
  OZSceneNode::calcHashForState(a1, a2, a3, a4, a5);
  return OZSystemSimulator::calcHashForState(a1 + 15520, a2, (OZRenderParams *)a3, a4, a1);
}

void PSParticleType::allowDrag(PSParticleType *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, int a7)
{
  void *v14;
  unint64_t v15;
  __int128 v16;

  if (lpsrc
  {
    if (*((_QWORD *)this + 2054)
      && (OZChannelBase *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 640))(this) == a3)
    {
      (*(void (**)(_QWORD, OZFactoryBase *, OZChannelBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(**((_QWORD **)this + 2054) + 392))(*((_QWORD *)this + 2054), lpsrc, a3, a4, a5, a6, 1);
      return;
    }
  }
  else if (a7 != 1)
  {
LABEL_10:
    OZSceneNode::allowDrag(this, lpsrc, a3, a4, a5, a6, a7);
    return;
  }
  v15 = *((_QWORD *)lpsrc + 1);
  v16 = xmmword_1B3555900;
  if (!OZFactory::isKindOfClass(v15, (int32x4_t *)&v16)
    || (OZChannelBase *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 640))(this) != a3)
  {
    goto LABEL_10;
  }
  *a5 = a4 & 1;
  *a6 = 1;
}

void `non-virtual thunk to'PSParticleType::allowDrag(PSParticleType *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, int a7)
{
  PSParticleType::allowDrag((PSParticleType *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

void PSParticleType::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Particles/PSParticleType.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2FC77DC()
{
  return 0;
}

void `non-virtual thunk to'PSParticleType::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Particles/PSParticleType.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2FC7824()
{
  return 0;
}

uint64_t PSParticleType::performDragOperation(PSParticleType *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const CMTime *a8)
{
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  OZChannelBase *v20;
  int var1;
  OZScene *v22;
  uint64_t v23;
  CMTime v24;

  if (a6 != 1)
    return OZSceneNode::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  if (lpsrc)
  {
    v16 = *((_QWORD *)this + 2054);
    if (v16)
    {
      {
        return (*(uint64_t (**)(uint64_t, OZFactoryBase *, OZChannelBase *, uint64_t, uint64_t, uint64_t, uint64_t, const CMTime *))(*(_QWORD *)v16 + 408))(v16, lpsrc, a3, a4, a5, 1, a7, a8);
      }
    }
  }
  v18 = *((_QWORD *)lpsrc + 1);
  *(_OWORD *)&v24.value = xmmword_1B3555900;
  if (!OZFactory::isKindOfClass(v18, (int32x4_t *)&v24))
    return OZSceneNode::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  if ((OZChannelBase *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 640))(this) != a3)
  {
    v19 = *((_QWORD *)this + 2054);
    if (!v19 || (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 + 200) + 640))(v19 + 200) != a3)
      return OZSceneNode::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v24);
  OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 6784), (const PCString *)&v24);
  PCString::~PCString((PCString *)&v24);
  if ((a7 & 2) != 0)
  {
    v22 = (OZScene *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this);
    OZScene::getCurrentTime(v22, (__n128 *)&v24);
    OZChannelFolder::copyKeyframesFromChannel((OZChannelFolder *)((char *)this + 6784), &v24, v20);
  }
  else
  {
    OZChannelFolder::operator=((uint64_t)this + 6784);
    OZChannelFolder::operator=((uint64_t)this + 6912);
    OZChannelFolder::operator=((uint64_t)this + 7040);
    OZChannelBase::operator=((uint64_t)this + 7168, (uint64_t)&v20[3].var6);
    OZChannelBase::operator=((uint64_t)this + 7320, (uint64_t)&v20[4].var11);
    var1 = (int)v20[7].var1;
    *((_BYTE *)this + 7580) = BYTE4(v20[7].var1);
    *((_DWORD *)this + 1894) = var1;
  }
  (*(void (**)(PSParticleType *, _QWORD))(*(_QWORD *)this + 1528))(this, 0);
  (*(void (**)(PSParticleType *))(*(_QWORD *)this + 496))(this);
  v23 = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this);
  OZDocument::postNotification(*(OZDocument **)(v23 + 1584), 8);
  return 1;
}

void sub_1B2FC7AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSParticleType::performDragOperation(PSParticleType *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const CMTime *a8)
{
  return PSParticleType::performDragOperation((PSParticleType *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void PSParticleType::getAttachToEmitter(PSParticleType *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 11192), a2, 0.0);
}

uint64_t PSParticleType::writeBody(PSParticleType *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10;
  OZChannelBase *v11;

  v10 = *((_DWORD *)this + 20);
  v11 = (OZChannelBase *)((char *)this + 11600);
  if (v10 != OZChannel::getValueAsInt((OZChannel *)((char *)this + 11600), MEMORY[0x1E0CA2E68], 0.0))
    OZChannelBase::setFlag(v11, 0x100000000, 1);
  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'PSParticleType::writeBody(PSParticleType *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return PSParticleType::writeBody((PSParticleType *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t PSParticleType::parseBegin(PSParticleType *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 14552), MEMORY[0x1E0CA2E68], 1.0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 11600), 1);
  return OZSceneNode::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'PSParticleType::parseBegin(PSParticleType *this, PCSerializerReadStream *a2)
{
  return PSParticleType::parseBegin((PSParticleType *)((char *)this - 48), a2);
}

uint64_t PSParticleType::parseEnd(PSParticleType *this, PCSerializerReadStream *a2)
{
  BOOL *v4;
  int ValueAsInt;
  unsigned int v6;

  v4 = (BOOL *)this + 16544;
  (*(void (**)(PSParticleType *, uint64_t))(*(_QWORD *)this + 1528))(this, 1);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 14552), MEMORY[0x1E0CA2E68], 0.0);
  *v4 = ValueAsInt != 0;
  if (!ValueAsInt)
    OZChannel::setKeyframable((OZChannel *)((char *)this + 11600), 0);
  v6 = *((_DWORD *)a2 + 26);
  OZChannel::setValue((OZChannel *)((char *)this + 14704), MEMORY[0x1E0CA2E68], (double)v6, 0);
  if (v6 > 2)
  {
    if (v6 == 5 && *((_DWORD *)a2 + 27) <= 6u)
      OZChannel::setValue((OZChannel *)((char *)this + 14856), MEMORY[0x1E0CA2E68], 1.0, 0);
  }
  else
  {
    OZChannelBase::operator=((uint64_t)this + 2776, (uint64_t)this + 15008);
    OZChannelBase::operator=((uint64_t)this + 3632, (uint64_t)this + 15160);
    OZChannelBase::operator=((uint64_t)this + 4648, (uint64_t)this + 15312);
  }
  v4[16] = OZChannel::getValueAsInt((OZChannel *)((char *)this + 14856), MEMORY[0x1E0CA2E68], 0.0) != 0;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 11904), 0x800000);
  OZChannelBase::setFlag((OZChannelBase *)this + 134, 2, 1);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 134);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 15160), 2, 1);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 15160));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 15312), 2, 1);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 15312));
  OZChannelBase::resetFlag((OZChannelBase *)this + 134, 16, 1);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 134);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 15160), 16, 1);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 15160));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 15312), 16, 1);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 15312));
  return OZSceneNode::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'PSParticleType::parseEnd(PSParticleType *this, PCSerializerReadStream *a2)
{
  return PSParticleType::parseEnd((PSParticleType *)((char *)this - 48), a2);
}

void PSParticleType::updateGradientStringName(PSParticleType *this, char a2)
{
  uint64_t v4;
  OZNotificationManager *v5;
  PCSharedCount v6;

  if ((a2 & 1) == 0)
  {
    if ((*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this))
    {
      v4 = *(_QWORD *)((*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this) + 1584);
      if (v4)
      {
        v5 = *(OZNotificationManager **)(v4 + 168);
        if (!v5 || !OZNotificationManager::wasChannelModified(v5, (const OZChannelBase *)((char *)this + 6784)))
        {
          PCSharedCount::PCSharedCount(&v6);
          OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6);
          PCString::~PCString((PCString *)&v6);
        }
      }
    }
  }
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
    case 1u:
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6912), 2, a2);
      PCURL::PCURL((PCURL *)&v6, CFSTR("Emitter Opacity Over Life"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6, 0);
      goto LABEL_11;
    case 2u:
      PCURL::PCURL((PCURL *)&v6, CFSTR("Emitter Color Over Life"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6, 0);
      goto LABEL_11;
    case 3u:
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6912), 2, a2);
      PCURL::PCURL((PCURL *)&v6, CFSTR("Emitter Color Range"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6, 0);
LABEL_11:
      PCString::~PCString((PCString *)&v6);
      break;
    default:
      return;
  }
}

void sub_1B2FC7FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSParticleType::updateRotationStringNames(PSParticleType *this)
{
  OZChannelBase *v2;
  PCString v3;

  v2 = (OZChannelBase *)((char *)this + 2776);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Particle Type Rotation"));
  OZChannelBase::setName(v2, &v3, 1);
  PCString::~PCString(&v3);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Particle Type Rotation End"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 3632), &v3, 1);
  PCString::~PCString(&v3);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Particle Type Rotation Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v3, 1);
  PCString::~PCString(&v3);
}

void sub_1B2FC80E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

__n128 PSParticleType::getNaturalDuration@<Q0>(PSParticleType *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  if ((*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this))
  {
    v4 = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'PSParticleType::getNaturalDuration@<D0>(PSParticleType *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = PSParticleType::getNaturalDuration((PSParticleType *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

void PSParticleType::getSourceRender(PSParticleType *this@<X0>, const OZRenderParams *a2@<X1>, const CMTime *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  CMTimeEpoch epoch;
  uint64_t v11;
  const PCSharedCount *v12;
  const void *v18;
  void *v19;
  double v20;
  double v21;
  uint64_t v22;
  OZImageElement *v23;
  OZImageElement *v24;
  void *Footage;
  int32x2_t v28;
  LiSimpleCamera *v29;
  LiGroup *v30;
  int v31;
  PCShared_base *v32;
  std::mutex *v33;
  uint64_t *v34;
  PCSharedCount v35;
  PCSharedCount v36;
  PCSharedCount v37;
  PCSharedCount v38;
  CMTime v39[3];
  CMTime v40[2];
  _QWORD v41[20];
  _QWORD v42[10];
  CMTime v43[8];
  PCString v44;
  PCSharedCount v45;
  PCSharedCount v46;
  _QWORD v47[2];
  float64x2_t v48;
  OZChannelBase v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;

  if (!*((_QWORD *)this + 2061))
  {
    a5->var0 = 0;
    PCSharedCount::PCSharedCount(a5 + 1);
    return;
  }
  if (*((_BYTE *)this + 16529))
  {
    *(_OWORD *)&v56.value = *(_OWORD *)a2;
    epoch = *((_QWORD *)a2 + 2);
  }
  else
  {
    memset(&v49, 0, 24);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), (__n128 *)&v49);
    v55 = *a3;
    *(_OWORD *)&v54.value = *(_OWORD *)&v49.var0;
    v54.epoch = (CMTimeEpoch)v49.var2;
    PC_CMTimeFloorToSampleDuration(&v55, &v54, (uint64_t)v40);
    *(_OWORD *)&v56.value = *(_OWORD *)&v40[0].value;
    epoch = v40[0].epoch;
  }
  v56.epoch = epoch;
  if (a4)
  {
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 16616));
    v12 = (const PCSharedCount *)std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::find<CMTime>((uint64_t)this + 16592, &v56);
    if ((const PCSharedCount *)((char *)this + 16600) != v12)
    {
      a5->var0 = v12[7].var0;
      PCSharedCount::PCSharedCount(a5 + 1, v12 + 8);
      PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 16616));
      return;
    }
    PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 16616));
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v49, a2);
  *(_OWORD *)&v49.var0 = *(_OWORD *)&v56.value;
  v49.var2 = (void **)v56.epoch;
  v52 = 0uLL;
  OZRenderParams::setImageType((uint64_t)&v49, 1);
  v51 = 1;
  v52 = 0u;
  v53 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&v40[0].value = _Q0;
  OZRenderParams::setResolution(&v49, v40);
  v50 = *((_QWORD *)this + 2061);
  v49.var5 = (PCString *)0x3FF0000000000000;
  v52 = 0u;
  v53 = 0u;
  if (*((_QWORD *)this + 2062))
    v49.var7 = *((_QWORD *)this + 2062);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 10120), MEMORY[0x1E0CA2E68], 0.0))
  {
    if ((*(unsigned int (**)(PSParticleType *))(*(_QWORD *)this + 1592))(this))
    {
      v18 = (const void *)*((_QWORD *)this + 2061);
      if (v18)
      {
        if (v19)
        {
          v20 = (*(double (**)(void *))(*(_QWORD *)v19 + 1328))(v19);
          goto LABEL_17;
        }
        if (v23)
        {
          v24 = v23;
          if (OZImageElement::getFootage(v23))
          {
            Footage = OZImageElement::getFootage(v24);
            (*(void (**)(void *))(*(_QWORD *)Footage + 1328))(Footage);
LABEL_17:
            v21 = v20;
            if (v20 > 0.0)
            {
              v39[0] = *(CMTime *)((_BYTE *)this + 685);
              v43[0] = v56;
              PC_CMTimeSaferSubtract(v43, v39, (uint64_t)v40);
              v56 = v40[0];
              v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
              operator*(&v56, v40, *(double *)(v22 + 368) / v21);
              v56 = v40[0];
              v39[0] = *(CMTime *)((_BYTE *)this + 685);
              v43[0] = v40[0];
              PC_CMTimeSaferAdd(v43, v39, (uint64_t)v40);
              v56 = v40[0];
              *(_OWORD *)&v49.var0 = *(_OWORD *)&v40[0].value;
              v49.var2 = (void **)v40[0].epoch;
              v52 = 0uLL;
            }
          }
        }
      }
    }
  }
  v47[1] = 0;
  v47[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v48 = _Q0;
  (*(void (**)(_QWORD, _QWORD *, const OZRenderParams *))(**((_QWORD **)this + 2061) + 16))(*((_QWORD *)this + 2061), v47, a2);
  OZRenderParams::getResolution(a2, (__n128 *)v40);
  __asm { FMOV            V1.2D, #0.5 }
  v28 = vcgt_s32((int32x2_t)0x100000001, vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vmulq_f64(*(float64x2_t *)&v40[0].value, v48), _Q1), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL))))));
  if (((v28.i32[0] | v28.i32[1]) & 1) != 0)
  {
    a5->var0 = 0;
    PCSharedCount::PCSharedCount(a5 + 1);
  }
  else
  {
    v29 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v29);
    v45.var0 = (PC_Sp_counted_base *)v29;
    PCSharedCount::PCSharedCount(&v46, (LiSimpleCamera *)((char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24)));
    if (!v45.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v45.var0 + 640))(v45.var0, 1);
    if (!v45.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v45.var0 + 512))(v45.var0, 0.0);
    if (!v45.var0)
      throw_PCNullPointerException(1);
    *(float64x2_t *)&v40[0].value = v48;
    (*(void (**)(PC_Sp_counted_base *, CMTime *))(*(_QWORD *)v45.var0 + 288))(v45.var0, v40);
    if (!v45.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v45.var0 + 696))(v45.var0, *((double *)this + 2065));
    OZRenderParams::setCamera((uint64_t)&v49, &v45);
    a5->var0 = 0;
    PCSharedCount::PCSharedCount(a5 + 1);
    OZChannelBase::setRangeName(&v49, &v44);
    v30 = (LiGroup *)operator new();
    LiGroup::LiGroup(v30);
    v40[0].value = (CMTimeValue)v30;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v40[0].timescale, (LiGroup *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
    LiGraphBuilder::LiGraphBuilder(v43, v40, &v44);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v40[0].timescale);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v40);
    v42[9] = v43;
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v39, *((OZImageNode **)this + 2061), (OZRenderParams *)&v49);
    (*(void (**)(_QWORD, OZChannelBase *, CMTime *, CMTime *))(**((_QWORD **)this + 2061) + 184))(*((_QWORD *)this + 2061), &v49, v43, v40);
    LiGraphBuilder::getLastChildInCurrentGroup((LiGraphBuilder *)v43, &v37);
    if (!v37.var0)
    {
      LiGraphBuilder::worldRoot((const PCSharedCount *)v43, &v35);
      if (!v35.var0)
        throw_PCNullPointerException(1);
      v31 = (*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)v35.var0 + 136))(v35.var0);
      PCSharedCount::~PCSharedCount(&v36);
      if (v31 >= 1)
      {
        LiGraphBuilder::worldRoot((const PCSharedCount *)v43, &v35);
        if (!v35.var0)
          throw_PCNullPointerException(1);
        v32 = (PCShared_base *)(*(uint64_t (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v35.var0 + 144))(v35.var0, 0);
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v37, v32);
        PCSharedCount::~PCSharedCount(&v36);
      }
    }
    LiGraphBuilder::render2d((const PCSharedCount *)v43, &v35);
    if (!v35.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v35.var0 + 184))(v35.var0, v45.var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a5->var0, &v35);
    PCSharedCount::~PCSharedCount(&v36);
    PCSharedCount::~PCSharedCount(&v38);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v39);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v42);
    std::__list_imp<unsigned int>::clear(v41);
    LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v43);
    if (a4)
    {
      v33 = (std::mutex *)((char *)this + 16616);
      PCSharedMutex::lock((std::mutex *)((char *)this + 16616));
      v40[0].value = (CMTimeValue)&v56;
      v34 = std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this + 2074, &v56, (uint64_t)&std::piecewise_construct, v40);
      v34[7] = (uint64_t)a5->var0;
      PCSharedCount::PCSharedCount((PCSharedCount *)v40, a5 + 1);
      PCSharedCount::operator=(v34 + 8, &v40[0].value);
      PCSharedCount::~PCSharedCount((PCSharedCount *)v40);
      PCSharedMutex::unlock(v33);
    }
    PCSharedCount::~PCSharedCount(&v46);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v49);
}

void sub_1B2FC8894(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void PSParticleType::HGNodeCacheEntryValue::~HGNodeCacheEntryValue(PSParticleType::HGNodeCacheEntryValue *this)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  if (*(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
}

BOOL PSParticleType::CompareHGNodeCacheEntries::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  _BOOL4 v8;
  CMTime v9;
  CMTime time1;

  time1 = *(CMTime *)a2;
  v9 = *(CMTime *)a3;
  if (CMTimeCompare(&time1, &v9))
  {
    time1 = *(CMTime *)a2;
    v9 = *(CMTime *)a3;
    return CMTimeCompare(&time1, &v9) >> 31;
  }
  else
  {
    v6 = *(double *)(a2 + 24) - *(double *)(a3 + 24);
    if (v6 <= -0.0075 || v6 >= 0.0075)
    {
      return v6 < 0.0;
    }
    else
    {
      v7 = *(double *)(a2 + 32) - *(double *)(a3 + 32);
      v8 = v7 <= -0.0075;
      if (v7 >= 0.0075)
        v8 = 1;
      return v7 < 0.0 && v8;
    }
  }
}

char *PSParticleType::cacheSourceNode(PSParticleType *this)
{
  char *result;
  __n128 *v3;
  OZSceneSettings *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  void *v8;
  __n128 *v9;
  double Seconds;
  void *v11;
  OZBehavior *v12;
  char IsChannelAffectedByBehaviors;
  OZBehavior *v14;
  OZBehavior *v15;
  OZBehavior *v16;
  OZBehavior *v17;
  __n128 v18;
  CMTime time;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;

  result = (char *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 272))(this);
  if (result)
  {
    v3 = (__n128 *)((char *)this + 16440);
    v4 = (OZSceneSettings *)(result + 336);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(result + 336), &v20);
    *((__n128 *)this + 1029) = v20;
    *((_QWORD *)this + 2060) = v21;
    v5 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)((char *)this + 16440) = *MEMORY[0x1E0CA2E68];
    *((_QWORD *)this + 2057) = *(_QWORD *)(v5 + 16);
    v6 = (const void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
    v7 = v6;
    if (v6)
    {
      if (v8)
      {
        v9 = (__n128 *)((char *)this + 16464);
        (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v8 + 1128))(&v20);
        if (v3 != &v20)
        {
          *v3 = v20;
          *((_QWORD *)this + 2057) = v21;
          *v9 = v22;
          *((_QWORD *)this + 2060) = v23;
        }
        v20 = *v9;
        v21 = *((_QWORD *)this + 2060);
        OZSceneSettings::getFrameDuration(v4, &v18);
        operator/((__int128 *)&v20, (uint64_t)&v18, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        OZChannel::setMax((OZChannel *)((char *)this + 10424), Seconds);
        OZChannel::setMax((OZChannel *)((char *)this + 10728), Seconds);
      }
      *((_QWORD *)this + 2061) = v7;
      *((_QWORD *)this + 2062) = v11;
      if (v11)
      {
        *((double *)this + 2065) = (*(double (**)(void *))(*(_QWORD *)v11 + 1328))(v11);
        v12 = (OZBehavior *)(*((_QWORD *)this + 2062) + 1216);
        IsChannelAffectedByBehaviors = 1;
        if (((*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v12 + 560))(v12) & 1) == 0
          && (OZBehavior::IsChannelAffectedByBehaviors(v12, (const OZChannelBase *)1) & 1) == 0)
        {
          v14 = (OZBehavior *)(*((_QWORD *)this + 2062) + 2104);
          if (((*(uint64_t (**)(OZBehavior *, uint64_t))(*(_QWORD *)v14 + 496))(v14, 1) & 1) == 0
            && (OZBehavior::IsChannelAffectedByBehaviors(v14, (const OZChannelBase *)1) & 1) == 0)
          {
            v15 = (OZBehavior *)(*((_QWORD *)this + 2062) + 5032);
            if (((*(uint64_t (**)(OZBehavior *, uint64_t))(*(_QWORD *)v15 + 496))(v15, 1) & 1) == 0
              && (OZBehavior::IsChannelAffectedByBehaviors(v15, (const OZChannelBase *)1) & 1) == 0)
            {
              v16 = (OZBehavior *)(*((_QWORD *)this + 2062) + 4440);
              if (((*(uint64_t (**)(OZBehavior *, uint64_t))(*(_QWORD *)v16 + 496))(v16, 1) & 1) == 0
                && (OZBehavior::IsChannelAffectedByBehaviors(v16, (const OZChannelBase *)1) & 1) == 0)
              {
                v17 = (OZBehavior *)(*((_QWORD *)this + 2062) + 5472);
                if (((*(uint64_t (**)(OZBehavior *, uint64_t))(*(_QWORD *)v17 + 496))(v17, 1) & 1) == 0)
                  IsChannelAffectedByBehaviors = OZBehavior::IsChannelAffectedByBehaviors(v17, (const OZChannelBase *)1);
              }
            }
          }
        }
        *((_BYTE *)this + 16512) = IsChannelAffectedByBehaviors;
        v7 = (const void *)*((_QWORD *)this + 2061);
        if (!v7)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    else
    {
      *(_OWORD *)((char *)this + 16488) = 0u;
    }
    *((_QWORD *)this + 2065) = 0x3FF0000000000000;
    *((_BYTE *)this + 16512) = 0;
    if (!v7)
    {
LABEL_19:
      result = 0;
LABEL_23:
      *((_QWORD *)this + 2063) = result;
      return result;
    }
LABEL_22:
    goto LABEL_23;
  }
  return result;
}

void PSParticleType::applyAllScaleOverLifeBehaviors(uint64_t *a1, CMTime *a2, CMTime *a3, CMTime *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CMTime v13;

  memset(&v13, 0, sizeof(v13));
  v10 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v13);
  PSParticleType::applyScaleOverLifeBehaviors(v11, a1 + 125, a2, a3, a4, &v13, a5);
  PSParticleType::applyScaleOverLifeBehaviors(v12, (uint64_t *)(a1[2054] + 1200), a2, a3, a4, &v13, a5);
}

void PSParticleType::applyScaleOverLifeBehaviors(uint64_t a1, uint64_t *a2, CMTime *a3, CMTime *a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v13;
  _QWORD *v14;
  void *v15;
  double v16;
  _BYTE v17[24];
  CMTime v18;
  CMTime v19;

  v7 = (uint64_t *)a2[1];
  if (v7 != a2)
  {
    v13 = a2;
    do
    {
      v14 = *(_QWORD **)(*v13 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v14[1] + 8), (int32x4_t)xmmword_1B3564600)))) & 1) == 0)
      {
        v19 = *a5;
        v18 = *a6;
        v16 = PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)v17);
        if ((*(unsigned int (**)(void *, _BYTE *, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)v15 + 296))(v15, v17, 0, 1, 1, v16))
        {
          PSScaleOverLifeBehavior::getScale((uint64_t)v15, a3, a4, a7);
        }
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13 != v7);
  }
}

void PSParticleType::applyAllSequenceBehaviors(PSParticleType *this, CMTime *a2, const PSParticle *a3, PSSequencedValues *a4)
{
  double v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *((double *)a3 + 22);
  PSParticleType::applySequenceBehaviors(v7, (uint64_t)this, (uint64_t *)this + 125, a2, (uint64_t)a4, a4);
  PSParticleType::applySequenceBehaviors(v7, v8, (uint64_t *)(*((_QWORD *)this + 2054) + 1200), a2, v9, a4);
}

void PSParticleType::applySequenceBehaviors(double a1, uint64_t a2, uint64_t *a3, CMTime *a4, uint64_t a5, PSSequencedValues *a6)
{
  uint64_t *v6;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  PSSequenceBehavior *v13;
  __int128 v14;
  CMTimeEpoch epoch;
  __int128 v16;

  v6 = (uint64_t *)a3[1];
  if (v6 != a3)
  {
    v10 = a3;
    do
    {
      v11 = *(_QWORD **)(*v10 + 16);
      v12 = v11[1];
      v16 = xmmword_1B3562C00;
      if (OZFactory::isKindOfClass(v12, (int32x4_t *)&v16))
      {
        v14 = *(_OWORD *)&a4->value;
        epoch = a4->epoch;
        if ((*(unsigned int (**)(PSSequenceBehavior *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 296))(v13, &v14, 0, 1, 1))
        {
          PSSequenceBehavior::getValues(v13, a4, a1, a6);
        }
      }
      v10 = (uint64_t *)*v10;
    }
    while (v10 != v6);
  }
}

void PSParticleType::getAllSequenceBehaviors(uint64_t a1, __int128 *a2, void **a3)
{
  uint64_t v6;

  PSParticleType::getSequenceBehaviors(a1, (uint64_t *)(a1 + 1000), a2, a3);
  PSParticleType::getSequenceBehaviors(v6, (uint64_t *)(*(_QWORD *)(a1 + 16432) + 1200), a2, a3);
}

void PSParticleType::getSequenceBehaviors(uint64_t a1, uint64_t *a2, __int128 *a3, void **a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v4 = (uint64_t *)a2[1];
  if (v4 != a2)
  {
    v7 = a2;
    v8 = (uint64_t)(a4 + 2);
    do
    {
      v9 = *(_QWORD **)(*v7 + 16);
      v10 = v9[1];
      v26 = xmmword_1B3562C00;
      if (OZFactory::isKindOfClass(v10, (int32x4_t *)&v26))
      {
        v24 = *a3;
        v25 = *((_QWORD *)a3 + 2);
        if ((*(unsigned int (**)(void *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 296))(v11, &v24, 0, 1, 1))
        {
          v13 = a4[1];
          v12 = (unint64_t)a4[2];
          if ((unint64_t)v13 >= v12)
          {
            v15 = ((char *)v13 - (_BYTE *)*a4) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v16 = v12 - (_QWORD)*a4;
            v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1))
              v17 = v15 + 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v18);
            else
              v19 = 0;
            v20 = &v19[8 * v15];
            *(_QWORD *)v20 = v11;
            v14 = v20 + 8;
            v22 = (char *)*a4;
            v21 = (char *)a4[1];
            if (v21 != *a4)
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v20 - 1) = v23;
                v20 -= 8;
              }
              while (v21 != v22);
              v21 = (char *)*a4;
            }
            *a4 = v20;
            a4[1] = v14;
            a4[2] = &v19[8 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v13 = v11;
            v14 = v13 + 1;
          }
          a4[1] = v14;
        }
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v4);
  }
}

char *PSParticleType::getFirstRemapTimeBehavior(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  const CMTime *v4;
  _QWORD *v5;
  char *v6;

  v2 = (uint64_t *)a2[1];
  if (v2 == a2)
    return 0;
  v3 = a2;
  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v5 = *(_QWORD **)(*v3 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v5[1] + 8), (int32x4_t)xmmword_1B3562C00)))) & 1) == 0)
    {
      if ((*(unsigned int (**)(char *, _QWORD, uint64_t))(*((_QWORD *)v6 + 2) + 24))(v6 + 16, 0, 1))
      {
        if (OZChannel::getValueAsInt((OZChannel *)(v6 + 4384), v4, 0.0) == 4)
          break;
      }
    }
    v3 = (uint64_t *)*v3;
    if (v3 == v2)
      return 0;
  }
  return v6;
}

BOOL PSParticleType::variesOverTime(PSParticleType *this)
{
  const void *v2;
  void *v3;

  v2 = (const void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  return v2
}

PCShared_base *PSParticleType::buildLighting(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8;
  double v9;
  CMTimeEpoch v10;
  int ValueAsInt;
  PCShared_base *LightFilter;
  double v14;
  PCShared_base *v15;
  PCShared_base *v16;
  double *v17;
  uint64_t i;
  double *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  PCShared_base *v27;
  __int128 v28;
  PCShared_base *result;
  uint64_t j;
  _OWORD *v31;
  __int128 v32;
  __int128 v34;
  _BYTE v35[128];
  CMTime v36;
  __int128 v37;
  __int128 v38;

  v9 = *a4;
  v8 = *((_QWORD *)a4 + 1);
  v10 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)&v36.value = *(_OWORD *)v8;
  v36.epoch = v10;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v9 + 32792), &v36, 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)&v9 + 32944), &v36, 0.0) == 1
    && ValueAsInt != 0)
  {
    return (PCShared_base *)LiGeode::setLit(a2, 0);
  }
  (*(void (**)(double, uint64_t, uint64_t, uint64_t))(**(_QWORD **)&v9 + 544))(COERCE_DOUBLE(*(_QWORD *)&v9), a2, a3, *((_QWORD *)a4 + 1));
  if (!ValueAsInt || !LiGeode::needsLights((LiGeode *)a2))
    return (PCShared_base *)LiGeode::setLit(a2, 0);
  LightFilter = LiGeode::getLightFilter((LiGeode *)a2);
  PCMatrix44Tmpl<double>::operator*((uint64_t)LightFilter + 472, (__int128 *)(a2 + 8), (uint64_t)v35);
  v14 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)&v9 + 200) + 2144))(*(_QWORD *)&v9 + 200, *((_QWORD *)a4 + 1));
  if (*((_BYTE *)a4 + 1498))
    PCMatrix44Tmpl<double>::leftMult((uint64_t)v35, a4 + 188);
  v15 = LiGeode::getLightFilter((LiGeode *)a2);
  v16 = v15;
  v17 = (double *)((char *)v15 + 472);
  if ((char *)v15 + 472 != v35)
  {
    for (i = 0; i != 16; i += 4)
    {
      v19 = &v17[i];
      v20 = *(_OWORD *)&v35[i * 8 + 16];
      *(_OWORD *)v19 = *(_OWORD *)&v35[i * 8];
      *((_OWORD *)v19 + 1) = v20;
    }
  }
  if (fabs(PCMatrix44Tmpl<double>::determinant((double *)v15 + 59)) < 0.0000001)
  {
    v37 = 0uLL;
    v38 = xmmword_1B304EED0;
    liFindMatrixPlane(v17, (double *)&v37);
    v21 = *((_QWORD *)&v37 + 1);
    *((_QWORD *)v16 + 61) = v37;
    *((_QWORD *)v16 + 65) = v21;
    v22 = *((_QWORD *)&v38 + 1);
    *((_QWORD *)v16 + 69) = v38;
    *((_QWORD *)v16 + 73) = v22;
  }
  *((double *)LiGeode::getLightFilter((LiGeode *)a2) + 23) = v14;
  if (*((_BYTE *)LiGeode::getLightFilter((LiGeode *)a2) + 174))
  {
    v37 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v38 = _Q0;
    PSParticleType::getSourceImageBounds(a1, *((const OZRenderState **)a4 + 1), &v37);
    v27 = LiGeode::getLightFilter((LiGeode *)a2);
    v28 = v38;
    *(_OWORD *)((char *)v27 + 200) = v37;
    *(_OWORD *)((char *)v27 + 216) = v28;
    result = LiGeode::getLightFilter((LiGeode *)a2);
    if ((char *)result + 344 != v35)
    {
      for (j = 0; j != 128; j += 32)
      {
        v31 = (_OWORD *)((char *)result + j + 344);
        v32 = *(_OWORD *)&v35[j + 16];
        *v31 = *(_OWORD *)&v35[j];
        v31[1] = v32;
      }
    }
  }
  else
  {
    result = LiGeode::getLightFilter((LiGeode *)a2);
    if (*((_BYTE *)result + 173))
    {
      v37 = 0uLL;
      __asm { FMOV            V0.2D, #-1.0 }
      v38 = _Q0;
      PSParticleType::getSourceImageBounds(a1, *((const OZRenderState **)a4 + 1), &v37);
      result = LiGeode::getLightFilter((LiGeode *)a2);
      v34 = v38;
      *(_OWORD *)((char *)result + 200) = v37;
      *(_OWORD *)((char *)result + 216) = v34;
    }
  }
  return result;
}

void PSParticleType::globalToParticleTime(PSParticleType *this@<X0>, const CMTime *a2@<X1>, double a3@<D0>, CMTime *a4@<X8>)
{
  int v7;
  __int128 v9;
  uint64_t v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  *a4 = *a2;
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 10120), MEMORY[0x1E0CA2E68], 0.0))
  {
    v7 = (*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1592))(this);
    if (a3 > 0.0 && v7 != 0)
    {
      v9 = *(_OWORD *)((char *)this + 16440);
      v11.epoch = *((_QWORD *)this + 2057);
      *(_OWORD *)&v11.value = v9;
      v12 = *a4;
      PC_CMTimeSaferSubtract(&v12, &v11, (uint64_t)&v13);
      *a4 = v13;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
      operator*(a4, &v13, *(double *)(v10 + 368) / a3);
      *a4 = v13;
      v11 = *(CMTime *)((_BYTE *)this + 685);
      v12 = *a4;
      PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v13);
      *a4 = v13;
    }
  }
}

uint64_t PSParticleType::openMedia(PSParticleType *this)
{
  const void *v1;
  const void *v2;
  void *v3;
  void *v4;

  v1 = (const void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (v1
    && ((v2 = v1,
  {
    return (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 104))(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t PSParticleType::prerollBegin(PSParticleType *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v10;
  void *v11;
  void *v12;
  double v13;
  char v14;
  void *Footage;
  uint64_t v16;
  CMTime v18;
  CMTime v19;
  CMTime v20[16];
  uint64_t v21;
  uint64_t v22;

  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  v10 = (void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)a1 + 1336))(a1);
  v11 = v10;
  if (!v10)
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v20, a2);
    v12 = 0;
    v13 = 30.0;
LABEL_9:
    v14 = 1;
    goto LABEL_10;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v20, a2);
  if (!v12)
  {
    v13 = 30.0;
    if (v11 && OZImageElement::getFootage((OZImageElement *)v11))
    {
      Footage = OZImageElement::getFootage((OZImageElement *)v11);
      v13 = (*(double (**)(void *))(*(_QWORD *)Footage + 1328))(Footage);
    }
    v12 = 0;
    goto LABEL_9;
  }
  v13 = (*(double (**)(void *))(*(_QWORD *)v12 + 1328))(v12);
  v14 = 0;
LABEL_10:
  memset(&v19, 0, sizeof(v19));
  v18 = *(CMTime *)a2;
  PSParticleType::globalToParticleTime(a1, &v18, v13, &v19);
  v20[0] = v19;
  v21 = 0;
  v22 = 0;
  if ((v14 & 1) != 0 && (v12 = v11) == 0)
    v16 = 0;
  else
    v16 = (*(uint64_t (**)(void *, CMTime *, uint64_t, uint64_t, double))(*(_QWORD *)v12 + 112))(v12, v20, a3, a4, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v20);
  return v16;
}

void sub_1B2FC9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::prerollEnd(PSParticleType *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  void *v6;
  void *v7;
  void *v8;
  double v9;
  char v10;
  void *Footage;
  uint64_t v12;
  CMTime v14;
  CMTime v15;
  CMTime v16[16];
  uint64_t v17;
  uint64_t v18;

  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  v6 = (void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  v7 = v6;
  if (!v6)
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v16, a2);
    v8 = 0;
    v9 = 30.0;
LABEL_9:
    v10 = 1;
    goto LABEL_10;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v16, a2);
  if (!v8)
  {
    v9 = 30.0;
    if (v7 && OZImageElement::getFootage((OZImageElement *)v7))
    {
      Footage = OZImageElement::getFootage((OZImageElement *)v7);
      v9 = (*(double (**)(void *))(*(_QWORD *)Footage + 1328))(Footage);
    }
    v8 = 0;
    goto LABEL_9;
  }
  v9 = (*(double (**)(void *))(*(_QWORD *)v8 + 1328))(v8);
  v10 = 0;
LABEL_10:
  memset(&v15, 0, sizeof(v15));
  v14 = *(CMTime *)a2;
  PSParticleType::globalToParticleTime(this, &v14, v9, &v15);
  v16[0] = v15;
  v17 = 0;
  v18 = 0;
  if ((v10 & 1) != 0 && (v8 = v7) == 0)
    v12 = 0;
  else
    v12 = (*(uint64_t (**)(void *, CMTime *, PMFrameRequest *))(*(_QWORD *)v8 + 120))(v8, v16, a3);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v16);
  return v12;
}

void sub_1B2FC9C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::setRate(PSParticleType *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  void *v8;
  void *v9;
  void *v10;
  double v11;
  char v12;
  void *Footage;
  uint64_t v14;
  CMTime v16;
  CMTime v17;
  CMTime v18[16];
  uint64_t v19;
  uint64_t v20;

  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  v8 = (void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  v9 = v8;
  if (!v8)
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v18, a2);
    v10 = 0;
    v11 = 30.0;
LABEL_9:
    v12 = 1;
    goto LABEL_10;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v18, a2);
  if (!v10)
  {
    v11 = 30.0;
    if (v9 && OZImageElement::getFootage((OZImageElement *)v9))
    {
      Footage = OZImageElement::getFootage((OZImageElement *)v9);
      v11 = (*(double (**)(void *))(*(_QWORD *)Footage + 1328))(Footage);
    }
    v10 = 0;
    goto LABEL_9;
  }
  v11 = (*(double (**)(void *))(*(_QWORD *)v10 + 1328))(v10);
  v12 = 0;
LABEL_10:
  memset(&v17, 0, sizeof(v17));
  v16 = *(CMTime *)a2;
  PSParticleType::globalToParticleTime(this, &v16, v11, &v17);
  v18[0] = v17;
  v19 = 0;
  v20 = 0;
  if ((v12 & 1) != 0 && (v10 = v9) == 0)
    v14 = 0;
  else
    v14 = (*(uint64_t (**)(void *, CMTime *, PMFrameRequest *, double))(*(_QWORD *)v10 + 128))(v10, v18, a3, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v18);
  return v14;
}

void sub_1B2FC9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::scheduleTokens(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  const void *v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[3];
  void **v16;

  memset(v15, 0, sizeof(v15));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v15, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v15, a4);
  OZSceneNode::scheduleTokens(a1, a2, (uint64_t)v15, a4, a5);
  v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
  v10 = v9;
  if (v9
  {
    v13 = (*(uint64_t (**)(void *, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v11 + 136))(v11, a2, v15, a4, a5);
  }
  else
  {
    v13 = 0;
  }
  v16 = (void **)v15;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  return v13;
}

void sub_1B2FC9F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::hintTokensWillImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[3];
  void **v14;

  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v13, a4);
  OZSceneNode::hintTokensWillImage(a1, a2, (uint64_t)v13, a4);
  v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
  v8 = v7;
  if (v7
  {
    v11 = (*(uint64_t (**)(void *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v9 + 144))(v9, a2, v13, a4);
  }
  else
  {
    v11 = 0;
  }
  v14 = (void **)v13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  return v11;
}

void sub_1B2FCA0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::getTokensImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[3];
  void **v14;

  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v13, a4);
  OZSceneNode::getTokensImage(a1, a2, (uint64_t)v13, a4);
  v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
  v8 = v7;
  if (v7
  {
    v11 = (*(uint64_t (**)(void *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v9 + 152))(v9, a2, v13, a4);
  }
  else
  {
    v11 = 0;
  }
  v14 = (void **)v13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  return v11;
}

void sub_1B2FCA20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void PSParticleType::remapTokens(PSParticleType *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  const void *v6;
  double v7;
  const void *v8;
  void *Footage;
  OZImageElement *v10;
  OZImageElement *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  CMTime v26;
  CMTime v27;

  OZSceneNode::remapTokens((uint64_t)a1, a2, (uint64_t)a3, a4);
  v6 = (const void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)a1 + 1336))(a1);
  v7 = 30.0;
  if (v6)
  {
    v8 = v6;
    if (Footage)
    {
LABEL_6:
      v7 = (*(double (**)(void *))(*(_QWORD *)Footage + 1328))(Footage);
      goto LABEL_7;
    }
    v11 = v10;
    if (v10 && OZImageElement::getFootage(v10))
    {
      Footage = OZImageElement::getFootage(v11);
      goto LABEL_6;
    }
  }
LABEL_7:
  v13 = *a3;
  v12 = a3[1];
  if (v12 != *a3)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v13 + 48 * v14;
      v19 = *(_QWORD *)(v16 + 24);
      v18 = (uint64_t *)(v16 + 24);
      v17 = v19;
      if (v18[1] != v19)
      {
        v20 = 0;
        v21 = 1;
        do
        {
          v22 = 3 * v20;
          v27 = *(CMTime *)(v17 + 24 * v20);
          memset(&v26, 0, sizeof(v26));
          PSParticleType::globalToParticleTime(a1, &v27, v7, &v26);
          v23 = *(_QWORD *)(*a3 + 48 * v14 + 24) + 8 * v22;
          v24 = *(_OWORD *)&v26.value;
          *(_QWORD *)(v23 + 16) = v26.epoch;
          *(_OWORD *)v23 = v24;
          v20 = v21;
          v17 = *v18;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) > v21++);
        v13 = *a3;
        v12 = a3[1];
      }
      v14 = ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 4) > v15);
  }
}

void *PSParticleType::pruneTokensAtTime(PSParticleType *this, CMTime *a2, const char *a3)
{
  void *result;
  const void *v7;
  void *v8;
  __int128 v9;
  CMTimeEpoch v10;
  __int128 v11;
  CMTimeEpoch epoch;
  CMTime v13;

  v13 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v13, a3);
  result = (void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (result)
  {
    v7 = result;
    if (v8)
    {
      v11 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)v8 + 160))(v8, &v11, a3);
    }
    else
    {
      if (result)
      {
        v9 = *(_OWORD *)&a2->value;
        v10 = a2->epoch;
        return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 160))(result, &v9, a3);
      }
    }
  }
  return result;
}

void *PSParticleType::pruneTokensExceptAtTime(PSParticleType *this, CMTime *a2, const char *a3)
{
  void *result;
  const void *v7;
  void *v8;
  __int128 v9;
  CMTimeEpoch v10;
  __int128 v11;
  CMTimeEpoch epoch;
  CMTime v13;

  v13 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v13, a3);
  result = (void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (result)
  {
    v7 = result;
    if (v8)
    {
      v11 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)v8 + 168))(v8, &v11, a3);
    }
    else
    {
      if (result)
      {
        v9 = *(_OWORD *)&a2->value;
        v10 = a2->epoch;
        return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 168))(result, &v9, a3);
      }
    }
  }
  return result;
}

void *PSParticleType::pruneAllTokens(PSParticleType *this, const char *a2)
{
  void *result;
  const void *v5;

  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  result = (void *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)this + 1336))(this);
  if (result)
  {
    v5 = result;
    if (result)
      return (void *)(*(uint64_t (**)(void *, const char *))(*(_QWORD *)result + 176))(result, a2);
    if (result)
      return (void *)(*(uint64_t (**)(void *, const char *))(*(_QWORD *)result + 176))(result, a2);
  }
  return result;
}

uint64_t PSParticleType::getSystemSimulator(PSParticleType *this)
{
  return (uint64_t)this + 15520;
}

uint64_t `non-virtual thunk to'PSParticleType::getSystemSimulator(PSParticleType *this)
{
  return (uint64_t)this + 14408;
}

uint64_t PSParticleType::PSParticleType_birthRateChanImpl::getInstance(PSParticleType::PSParticleType_birthRateChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_birthRateChanImpl::getInstance(void)::PSParticleType_birthRateChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_birthRateChanImpl::getInstance(void)::PSParticleType_birthRateChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_birthRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_birthRateChanImpl::_PSParticleType_birthRateChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_birthRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_birthRateChanImpl *v0;

  if (!PSParticleType::PSParticleType_birthRateChanImpl::_PSParticleType_birthRateChan)
  {
    v0 = (PSParticleType::PSParticleType_birthRateChanImpl *)operator new();
    PSParticleType::PSParticleType_birthRateChanImpl::PSParticleType_birthRateChanImpl(v0);
    PSParticleType::PSParticleType_birthRateChanImpl::_PSParticleType_birthRateChan = (uint64_t)v0;
  }
}

void sub_1B2FCA700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_birthRateChanImpl *PSParticleType::PSParticleType_birthRateChanImpl::PSParticleType_birthRateChanImpl(PSParticleType::PSParticleType_birthRateChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 30.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 30.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_birthRateChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF0E8;
  *((_QWORD *)this + 5) = &unk_1E65DF108;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCA7B0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_birthRateChanInfo::getInstance(PSParticleType::PSParticleType_birthRateChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_birthRateChanInfo::getInstance(void)::PSParticleType_birthRateChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_birthRateChanInfo::getInstance(void)::PSParticleType_birthRateChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_birthRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_birthRateChanInfo::_PSParticleType_birthRateChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_birthRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_birthRateChanInfo *v0;

  if (!PSParticleType::PSParticleType_birthRateChanInfo::_PSParticleType_birthRateChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_birthRateChanInfo *)operator new();
    PSParticleType::PSParticleType_birthRateChanInfo::PSParticleType_birthRateChanInfo(v0);
    PSParticleType::PSParticleType_birthRateChanInfo::_PSParticleType_birthRateChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCA87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_birthRateChanInfo *PSParticleType::PSParticleType_birthRateChanInfo::PSParticleType_birthRateChanInfo(PSParticleType::PSParticleType_birthRateChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 300.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_birthRateChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF160;
  *((_QWORD *)this + 10) = &unk_1E65DF180;
  return this;
}

void sub_1B2FCA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_birthRateVarChanImpl::getInstance(PSParticleType::PSParticleType_birthRateVarChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_birthRateVarChanImpl::getInstance(void)::PSParticleType_birthRateVarChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_birthRateVarChanImpl::getInstance(void)::PSParticleType_birthRateVarChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_birthRateVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_birthRateVarChanImpl::_PSParticleType_birthRateVarChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_birthRateVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_birthRateVarChanImpl *v0;

  if (!PSParticleType::PSParticleType_birthRateVarChanImpl::_PSParticleType_birthRateVarChan)
  {
    v0 = (PSParticleType::PSParticleType_birthRateVarChanImpl *)operator new();
    PSParticleType::PSParticleType_birthRateVarChanImpl::PSParticleType_birthRateVarChanImpl(v0);
    PSParticleType::PSParticleType_birthRateVarChanImpl::_PSParticleType_birthRateVarChan = (uint64_t)v0;
  }
}

void sub_1B2FCA9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_birthRateVarChanImpl *PSParticleType::PSParticleType_birthRateVarChanImpl::PSParticleType_birthRateVarChanImpl(PSParticleType::PSParticleType_birthRateVarChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_birthRateVarChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF1D8;
  *((_QWORD *)this + 5) = &unk_1E65DF1F8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCAAA8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_initialNumChanImpl::getInstance(PSParticleType::PSParticleType_initialNumChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_initialNumChanImpl::getInstance(void)::PSParticleType_initialNumChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_initialNumChanImpl::getInstance(void)::PSParticleType_initialNumChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_initialNumChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_initialNumChanImpl::_PSParticleType_initialNumChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_initialNumChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_initialNumChanImpl *v0;

  if (!PSParticleType::PSParticleType_initialNumChanImpl::_PSParticleType_initialNumChan)
  {
    v0 = (PSParticleType::PSParticleType_initialNumChanImpl *)operator new();
    PSParticleType::PSParticleType_initialNumChanImpl::PSParticleType_initialNumChanImpl(v0);
    PSParticleType::PSParticleType_initialNumChanImpl::_PSParticleType_initialNumChan = (uint64_t)v0;
  }
}

void sub_1B2FCAB74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_initialNumChanImpl *PSParticleType::PSParticleType_initialNumChanImpl::PSParticleType_initialNumChanImpl(PSParticleType::PSParticleType_initialNumChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_initialNumChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF250;
  *((_QWORD *)this + 5) = &unk_1E65DF270;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCAC24(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_lifetimeChanImpl::getInstance(PSParticleType::PSParticleType_lifetimeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_lifetimeChanImpl::getInstance(void)::PSParticleType_lifetimeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_lifetimeChanImpl::getInstance(void)::PSParticleType_lifetimeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_lifetimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_lifetimeChanImpl::_PSParticleType_lifetimeChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_lifetimeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_lifetimeChanImpl *v0;

  if (!PSParticleType::PSParticleType_lifetimeChanImpl::_PSParticleType_lifetimeChan)
  {
    v0 = (PSParticleType::PSParticleType_lifetimeChanImpl *)operator new();
    PSParticleType::PSParticleType_lifetimeChanImpl::PSParticleType_lifetimeChanImpl(v0);
    PSParticleType::PSParticleType_lifetimeChanImpl::_PSParticleType_lifetimeChan = (uint64_t)v0;
  }
}

void sub_1B2FCACF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_lifetimeChanImpl *PSParticleType::PSParticleType_lifetimeChanImpl::PSParticleType_lifetimeChanImpl(PSParticleType::PSParticleType_lifetimeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_lifetimeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF2C8;
  *((_QWORD *)this + 5) = &unk_1E65DF2E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCADA0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_lifetimeChanInfo::getInstance(PSParticleType::PSParticleType_lifetimeChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_lifetimeChanInfo::getInstance(void)::PSParticleType_lifetimeChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_lifetimeChanInfo::getInstance(void)::PSParticleType_lifetimeChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_lifetimeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_lifetimeChanInfo::_PSParticleType_lifetimeChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_lifetimeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_lifetimeChanInfo *v0;

  if (!PSParticleType::PSParticleType_lifetimeChanInfo::_PSParticleType_lifetimeChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_lifetimeChanInfo *)operator new();
    PSParticleType::PSParticleType_lifetimeChanInfo::PSParticleType_lifetimeChanInfo(v0);
    PSParticleType::PSParticleType_lifetimeChanInfo::_PSParticleType_lifetimeChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCAE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_lifetimeChanInfo *PSParticleType::PSParticleType_lifetimeChanInfo::PSParticleType_lifetimeChanInfo(PSParticleType::PSParticleType_lifetimeChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_lifetimeChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF340;
  *((_QWORD *)this + 10) = &unk_1E65DF360;
  return this;
}

void sub_1B2FCAF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_lifetimeVarChanImpl::getInstance(PSParticleType::PSParticleType_lifetimeVarChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_lifetimeVarChanImpl::getInstance(void)::PSParticleType_lifetimeVarChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_lifetimeVarChanImpl::getInstance(void)::PSParticleType_lifetimeVarChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_lifetimeVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_lifetimeVarChanImpl::_PSParticleType_lifetimeVarChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_lifetimeVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_lifetimeVarChanImpl *v0;

  if (!PSParticleType::PSParticleType_lifetimeVarChanImpl::_PSParticleType_lifetimeVarChan)
  {
    v0 = (PSParticleType::PSParticleType_lifetimeVarChanImpl *)operator new();
    PSParticleType::PSParticleType_lifetimeVarChanImpl::PSParticleType_lifetimeVarChanImpl(v0);
    PSParticleType::PSParticleType_lifetimeVarChanImpl::_PSParticleType_lifetimeVarChan = (uint64_t)v0;
  }
}

void sub_1B2FCAFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_lifetimeVarChanImpl *PSParticleType::PSParticleType_lifetimeVarChanImpl::PSParticleType_lifetimeVarChanImpl(PSParticleType::PSParticleType_lifetimeVarChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_lifetimeVarChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF3B8;
  *((_QWORD *)this + 5) = &unk_1E65DF3D8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCB094(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_speedChanImpl::getInstance(PSParticleType::PSParticleType_speedChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_speedChanImpl::getInstance(void)::PSParticleType_speedChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_speedChanImpl::getInstance(void)::PSParticleType_speedChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_speedChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_speedChanImpl::_PSParticleType_speedChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_speedChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_speedChanImpl *v0;

  if (!PSParticleType::PSParticleType_speedChanImpl::_PSParticleType_speedChan)
  {
    v0 = (PSParticleType::PSParticleType_speedChanImpl *)operator new();
    PSParticleType::PSParticleType_speedChanImpl::PSParticleType_speedChanImpl(v0);
    PSParticleType::PSParticleType_speedChanImpl::_PSParticleType_speedChan = (uint64_t)v0;
  }
}

void sub_1B2FCB160(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_speedChanImpl *PSParticleType::PSParticleType_speedChanImpl::PSParticleType_speedChanImpl(PSParticleType::PSParticleType_speedChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 100.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 100.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_speedChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF430;
  *((_QWORD *)this + 5) = &unk_1E65DF450;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCB224(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_speedChanInfo::getInstance(PSParticleType::PSParticleType_speedChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_speedChanInfo::getInstance(void)::PSParticleType_speedChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_speedChanInfo::getInstance(void)::PSParticleType_speedChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_speedChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_speedChanInfo::_PSParticleType_speedChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_speedChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_speedChanInfo *v0;

  if (!PSParticleType::PSParticleType_speedChanInfo::_PSParticleType_speedChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_speedChanInfo *)operator new();
    PSParticleType::PSParticleType_speedChanInfo::PSParticleType_speedChanInfo(v0);
    PSParticleType::PSParticleType_speedChanInfo::_PSParticleType_speedChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCB2F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_speedChanInfo *PSParticleType::PSParticleType_speedChanInfo::PSParticleType_speedChanInfo(PSParticleType::PSParticleType_speedChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_speedChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF4A8;
  *((_QWORD *)this + 10) = &unk_1E65DF4C8;
  return this;
}

void sub_1B2FCB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_speedVarChanImpl::getInstance(PSParticleType::PSParticleType_speedVarChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_speedVarChanImpl::getInstance(void)::PSParticleType_speedVarChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_speedVarChanImpl::getInstance(void)::PSParticleType_speedVarChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_speedVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_speedVarChanImpl::_PSParticleType_speedVarChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_speedVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_speedVarChanImpl *v0;

  if (!PSParticleType::PSParticleType_speedVarChanImpl::_PSParticleType_speedVarChan)
  {
    v0 = (PSParticleType::PSParticleType_speedVarChanImpl *)operator new();
    PSParticleType::PSParticleType_speedVarChanImpl::PSParticleType_speedVarChanImpl(v0);
    PSParticleType::PSParticleType_speedVarChanImpl::_PSParticleType_speedVarChan = (uint64_t)v0;
  }
}

void sub_1B2FCB46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_speedVarChanImpl *PSParticleType::PSParticleType_speedVarChanImpl::PSParticleType_speedVarChanImpl(PSParticleType::PSParticleType_speedVarChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_speedVarChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF520;
  *((_QWORD *)this + 5) = &unk_1E65DF540;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCB51C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_speedVarChanInfo::getInstance(PSParticleType::PSParticleType_speedVarChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_speedVarChanInfo::getInstance(void)::PSParticleType_speedVarChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_speedVarChanInfo::getInstance(void)::PSParticleType_speedVarChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_speedVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_speedVarChanInfo::_PSParticleType_speedVarChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_speedVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_speedVarChanInfo *v0;

  if (!PSParticleType::PSParticleType_speedVarChanInfo::_PSParticleType_speedVarChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_speedVarChanInfo *)operator new();
    PSParticleType::PSParticleType_speedVarChanInfo::PSParticleType_speedVarChanInfo(v0);
    PSParticleType::PSParticleType_speedVarChanInfo::_PSParticleType_speedVarChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCB5E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_speedVarChanInfo *PSParticleType::PSParticleType_speedVarChanInfo::PSParticleType_speedVarChanInfo(PSParticleType::PSParticleType_speedVarChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_speedVarChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF598;
  *((_QWORD *)this + 10) = &unk_1E65DF5B8;
  return this;
}

void sub_1B2FCB698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_rotVarChanInfo::getInstance(PSParticleType::PSParticleType_rotVarChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_rotVarChanInfo::getInstance(void)::PSParticleType_rotVarChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_rotVarChanInfo::getInstance(void)::PSParticleType_rotVarChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_rotVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_rotVarChanInfo::_PSParticleType_rotVarChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_rotVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_rotVarChanInfo *v0;

  if (!PSParticleType::PSParticleType_rotVarChanInfo::_PSParticleType_rotVarChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_rotVarChanInfo *)operator new();
    PSParticleType::PSParticleType_rotVarChanInfo::PSParticleType_rotVarChanInfo(v0);
    PSParticleType::PSParticleType_rotVarChanInfo::_PSParticleType_rotVarChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCB764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_rotVarChanInfo *PSParticleType::PSParticleType_rotVarChanInfo::PSParticleType_rotVarChanInfo(PSParticleType::PSParticleType_rotVarChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "°");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 3.40282347e38, 0.0174532925, 0.000174532925, 57.2957795, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_rotVarChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF610;
  *((_QWORD *)this + 10) = &unk_1E65DF630;
  return this;
}

void sub_1B2FCB81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_spinChanInfo::getInstance(PSParticleType::PSParticleType_spinChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_spinChanInfo::getInstance(void)::PSParticleType_spinChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_spinChanInfo::getInstance(void)::PSParticleType_spinChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_spinChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_spinChanInfo::_PSParticleType_spinChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_spinChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_spinChanInfo *v0;

  if (!PSParticleType::PSParticleType_spinChanInfo::_PSParticleType_spinChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_spinChanInfo *)operator new();
    PSParticleType::PSParticleType_spinChanInfo::PSParticleType_spinChanInfo(v0);
    PSParticleType::PSParticleType_spinChanInfo::_PSParticleType_spinChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCB8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_spinChanInfo *PSParticleType::PSParticleType_spinChanInfo::PSParticleType_spinChanInfo(PSParticleType::PSParticleType_spinChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "°");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -12.5663706, 12.5663706, 0.0174532925, 0.000174532925, 57.2957795, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_spinChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF688;
  *((_QWORD *)this + 10) = &unk_1E65DF6A8;
  return this;
}

void sub_1B2FCB9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_spinVarChanImpl::getInstance(PSParticleType::PSParticleType_spinVarChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_spinVarChanImpl::getInstance(void)::PSParticleType_spinVarChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_spinVarChanImpl::getInstance(void)::PSParticleType_spinVarChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_spinVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_spinVarChanImpl::_PSParticleType_spinVarChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_spinVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!PSParticleType::PSParticleType_spinVarChanImpl::_PSParticleType_spinVarChan)
  {
    v0 = (OZChannelAngle *)operator new();
    PSParticleType::PSParticleType_spinVarChanImpl::PSParticleType_spinVarChanImpl(v0);
    PSParticleType::PSParticleType_spinVarChanImpl::_PSParticleType_spinVarChan = (uint64_t)v0;
  }
}

void sub_1B2FCBA70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *PSParticleType::PSParticleType_spinVarChanImpl::PSParticleType_spinVarChanImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DF700;
  this->var5 = (PCString *)&unk_1E65DF720;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCBB20(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_spinVarChanInfo::getInstance(PSParticleType::PSParticleType_spinVarChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_spinVarChanInfo::getInstance(void)::PSParticleType_spinVarChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_spinVarChanInfo::getInstance(void)::PSParticleType_spinVarChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_spinVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_spinVarChanInfo::_PSParticleType_spinVarChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_spinVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_spinVarChanInfo *v0;

  if (!PSParticleType::PSParticleType_spinVarChanInfo::_PSParticleType_spinVarChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_spinVarChanInfo *)operator new();
    PSParticleType::PSParticleType_spinVarChanInfo::PSParticleType_spinVarChanInfo(v0);
    PSParticleType::PSParticleType_spinVarChanInfo::_PSParticleType_spinVarChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCBBEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_spinVarChanInfo *PSParticleType::PSParticleType_spinVarChanInfo::PSParticleType_spinVarChanInfo(PSParticleType::PSParticleType_spinVarChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "°");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.40282347e38, 20.0, 0.0174532925, 0.000174532925, 57.2957795, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_spinVarChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF778;
  *((_QWORD *)this + 10) = &unk_1E65DF798;
  return this;
}

void sub_1B2FCBCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_colorModeChanImpl::getInstance(PSParticleType::PSParticleType_colorModeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_colorModeChanImpl::getInstance(void)::PSParticleType_colorModeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_colorModeChanImpl::getInstance(void)::PSParticleType_colorModeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_colorModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_colorModeChanImpl::_PSParticleType_colorModeChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_colorModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_colorModeChanImpl *v0;

  if (!PSParticleType::PSParticleType_colorModeChanImpl::_PSParticleType_colorModeChan)
  {
    v0 = (PSParticleType::PSParticleType_colorModeChanImpl *)operator new();
    PSParticleType::PSParticleType_colorModeChanImpl::PSParticleType_colorModeChanImpl(v0);
    PSParticleType::PSParticleType_colorModeChanImpl::_PSParticleType_colorModeChan = (uint64_t)v0;
  }
}

void sub_1B2FCBD70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_colorModeChanImpl *PSParticleType::PSParticleType_colorModeChanImpl::PSParticleType_colorModeChanImpl(PSParticleType::PSParticleType_colorModeChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_colorModeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF7F0;
  *((_QWORD *)this + 5) = &unk_1E65DF810;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FCBE20(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_colorRepetitionsChanInfo::getInstance(PSParticleType::PSParticleType_colorRepetitionsChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_colorRepetitionsChanInfo::getInstance(void)::PSParticleType_colorRepetitionsChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_colorRepetitionsChanInfo::getInstance(void)::PSParticleType_colorRepetitionsChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_colorRepetitionsChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_colorRepetitionsChanInfo::_PSParticleType_colorRepetitionsChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_colorRepetitionsChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_colorRepetitionsChanInfo *v0;

  if (!PSParticleType::PSParticleType_colorRepetitionsChanInfo::_PSParticleType_colorRepetitionsChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_colorRepetitionsChanInfo *)operator new();
    PSParticleType::PSParticleType_colorRepetitionsChanInfo::PSParticleType_colorRepetitionsChanInfo(v0);
    PSParticleType::PSParticleType_colorRepetitionsChanInfo::_PSParticleType_colorRepetitionsChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCBEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_colorRepetitionsChanInfo *PSParticleType::PSParticleType_colorRepetitionsChanInfo::PSParticleType_colorRepetitionsChanInfo(PSParticleType::PSParticleType_colorRepetitionsChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_colorRepetitionsChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF868;
  *((_QWORD *)this + 10) = &unk_1E65DF888;
  return this;
}

void sub_1B2FCBF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_scaleVarChanImpl::getInstance(PSParticleType::PSParticleType_scaleVarChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_scaleVarChanImpl::getInstance(void)::PSParticleType_scaleVarChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_scaleVarChanImpl::getInstance(void)::PSParticleType_scaleVarChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_scaleVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_scaleVarChanImpl::_PSParticleType_scaleVarChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_scaleVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_scaleVarChanImpl *v0;

  if (!PSParticleType::PSParticleType_scaleVarChanImpl::_PSParticleType_scaleVarChan)
  {
    v0 = (PSParticleType::PSParticleType_scaleVarChanImpl *)operator new();
    PSParticleType::PSParticleType_scaleVarChanImpl::PSParticleType_scaleVarChanImpl(v0);
    PSParticleType::PSParticleType_scaleVarChanImpl::_PSParticleType_scaleVarChan = (uint64_t)v0;
  }
}

void sub_1B2FCC064(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_scaleVarChanImpl *PSParticleType::PSParticleType_scaleVarChanImpl::PSParticleType_scaleVarChanImpl(PSParticleType::PSParticleType_scaleVarChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_scaleVarChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF8E0;
  *((_QWORD *)this + 5) = &unk_1E65DF900;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCC114(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_scaleVarChanInfo::getInstance(PSParticleType::PSParticleType_scaleVarChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_scaleVarChanInfo::getInstance(void)::PSParticleType_scaleVarChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_scaleVarChanInfo::getInstance(void)::PSParticleType_scaleVarChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_scaleVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_scaleVarChanInfo::_PSParticleType_scaleVarChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_scaleVarChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_scaleVarChanInfo *v0;

  if (!PSParticleType::PSParticleType_scaleVarChanInfo::_PSParticleType_scaleVarChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_scaleVarChanInfo *)operator new();
    PSParticleType::PSParticleType_scaleVarChanInfo::PSParticleType_scaleVarChanInfo(v0);
    PSParticleType::PSParticleType_scaleVarChanInfo::_PSParticleType_scaleVarChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCC1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_scaleVarChanInfo *PSParticleType::PSParticleType_scaleVarChanInfo::PSParticleType_scaleVarChanInfo(PSParticleType::PSParticleType_scaleVarChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_scaleVarChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DF958;
  *((_QWORD *)this + 10) = &unk_1E65DF978;
  return this;
}

void sub_1B2FCC294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_sourceStartFrameChanImpl::getInstance(PSParticleType::PSParticleType_sourceStartFrameChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_sourceStartFrameChanImpl::getInstance(void)::PSParticleType_sourceStartFrameChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_sourceStartFrameChanImpl::getInstance(void)::PSParticleType_sourceStartFrameChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_sourceStartFrameChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_sourceStartFrameChanImpl::_PSParticleType_sourceStartFrameChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_sourceStartFrameChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_sourceStartFrameChanImpl *v0;

  if (!PSParticleType::PSParticleType_sourceStartFrameChanImpl::_PSParticleType_sourceStartFrameChan)
  {
    v0 = (PSParticleType::PSParticleType_sourceStartFrameChanImpl *)operator new();
    PSParticleType::PSParticleType_sourceStartFrameChanImpl::PSParticleType_sourceStartFrameChanImpl(v0);
    PSParticleType::PSParticleType_sourceStartFrameChanImpl::_PSParticleType_sourceStartFrameChan = (uint64_t)v0;
  }
}

void sub_1B2FCC360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_sourceStartFrameChanImpl *PSParticleType::PSParticleType_sourceStartFrameChanImpl::PSParticleType_sourceStartFrameChanImpl(PSParticleType::PSParticleType_sourceStartFrameChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_sourceStartFrameChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DF9D0;
  *((_QWORD *)this + 5) = &unk_1E65DF9F0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCC410(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_sourceStartFrameChanInfo::getInstance(PSParticleType::PSParticleType_sourceStartFrameChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_sourceStartFrameChanInfo::getInstance(void)::PSParticleType_sourceStartFrameChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_sourceStartFrameChanInfo::getInstance(void)::PSParticleType_sourceStartFrameChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_sourceStartFrameChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_sourceStartFrameChanInfo::_PSParticleType_sourceStartFrameChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_sourceStartFrameChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_sourceStartFrameChanInfo *v0;

  if (!PSParticleType::PSParticleType_sourceStartFrameChanInfo::_PSParticleType_sourceStartFrameChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_sourceStartFrameChanInfo *)operator new();
    PSParticleType::PSParticleType_sourceStartFrameChanInfo::PSParticleType_sourceStartFrameChanInfo(v0);
    PSParticleType::PSParticleType_sourceStartFrameChanInfo::_PSParticleType_sourceStartFrameChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCC4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_sourceStartFrameChanInfo *PSParticleType::PSParticleType_sourceStartFrameChanInfo::PSParticleType_sourceStartFrameChanInfo(PSParticleType::PSParticleType_sourceStartFrameChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_sourceStartFrameChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DFA48;
  *((_QWORD *)this + 10) = &unk_1E65DFA68;
  return this;
}

void sub_1B2FCC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::getInstance(PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::getInstance(void)::PSParticleType_sourceStartFrameOSChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::getInstance(void)::PSParticleType_sourceStartFrameOSChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::_PSParticleType_sourceStartFrameOSChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *v0;

  if (!PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::_PSParticleType_sourceStartFrameOSChan)
  {
    v0 = (PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *)operator new();
    PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::PSParticleType_sourceStartFrameOSChanImpl(v0);
    PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::_PSParticleType_sourceStartFrameOSChan = (uint64_t)v0;
  }
}

void sub_1B2FCC658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *PSParticleType::PSParticleType_sourceStartFrameOSChanImpl::PSParticleType_sourceStartFrameOSChanImpl(PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_sourceStartFrameOSChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DFAC0;
  *((_QWORD *)this + 5) = &unk_1E65DFAE0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FCC708(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::getInstance(PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::getInstance(void)::PSParticleType_sourceStartFrameOSChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::getInstance(void)::PSParticleType_sourceStartFrameOSChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::_PSParticleType_sourceStartFrameOSChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *v0;

  if (!PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::_PSParticleType_sourceStartFrameOSChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *)operator new();
    PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::PSParticleType_sourceStartFrameOSChanInfo(v0);
    PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::_PSParticleType_sourceStartFrameOSChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCC7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *PSParticleType::PSParticleType_sourceStartFrameOSChanInfo::PSParticleType_sourceStartFrameOSChanInfo(PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 25.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_sourceStartFrameOSChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DFB38;
  *((_QWORD *)this + 10) = &unk_1E65DFB58;
  return this;
}

void sub_1B2FCC880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_sourceHoldFramesChanImpl::getInstance(PSParticleType::PSParticleType_sourceHoldFramesChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_sourceHoldFramesChanImpl::getInstance(void)::PSParticleType_sourceHoldFramesChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_sourceHoldFramesChanImpl::getInstance(void)::PSParticleType_sourceHoldFramesChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_sourceHoldFramesChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_sourceHoldFramesChanImpl::_PSParticleType_sourceHoldFramesChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_sourceHoldFramesChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_sourceHoldFramesChanImpl *v0;

  if (!PSParticleType::PSParticleType_sourceHoldFramesChanImpl::_PSParticleType_sourceHoldFramesChan)
  {
    v0 = (PSParticleType::PSParticleType_sourceHoldFramesChanImpl *)operator new();
    PSParticleType::PSParticleType_sourceHoldFramesChanImpl::PSParticleType_sourceHoldFramesChanImpl(v0);
    PSParticleType::PSParticleType_sourceHoldFramesChanImpl::_PSParticleType_sourceHoldFramesChan = (uint64_t)v0;
  }
}

void sub_1B2FCC94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_sourceHoldFramesChanImpl *PSParticleType::PSParticleType_sourceHoldFramesChanImpl::PSParticleType_sourceHoldFramesChanImpl(PSParticleType::PSParticleType_sourceHoldFramesChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_sourceHoldFramesChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DFBB0;
  *((_QWORD *)this + 5) = &unk_1E65DFBD0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 1.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCC9FC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_shapeChanImpl::getInstance(PSParticleType::PSParticleType_shapeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_shapeChanImpl::getInstance(void)::PSParticleType_shapeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_shapeChanImpl::getInstance(void)::PSParticleType_shapeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_shapeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_shapeChanImpl::_PSParticleType_shapeChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_shapeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_shapeChanImpl *v0;

  if (!PSParticleType::PSParticleType_shapeChanImpl::_PSParticleType_shapeChan)
  {
    v0 = (PSParticleType::PSParticleType_shapeChanImpl *)operator new();
    PSParticleType::PSParticleType_shapeChanImpl::PSParticleType_shapeChanImpl(v0);
    PSParticleType::PSParticleType_shapeChanImpl::_PSParticleType_shapeChan = (uint64_t)v0;
  }
}

void sub_1B2FCCAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_shapeChanImpl *PSParticleType::PSParticleType_shapeChanImpl::PSParticleType_shapeChanImpl(PSParticleType::PSParticleType_shapeChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 3.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 3.0, 0, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_shapeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DFC28;
  *((_QWORD *)this + 5) = &unk_1E65DFC48;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FCCB78(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_pointSizeChanImpl::getInstance(PSParticleType::PSParticleType_pointSizeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_pointSizeChanImpl::getInstance(void)::PSParticleType_pointSizeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_pointSizeChanImpl::getInstance(void)::PSParticleType_pointSizeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_pointSizeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_pointSizeChanImpl::_PSParticleType_pointSizeChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_pointSizeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_pointSizeChanImpl *v0;

  if (!PSParticleType::PSParticleType_pointSizeChanImpl::_PSParticleType_pointSizeChan)
  {
    v0 = (PSParticleType::PSParticleType_pointSizeChanImpl *)operator new();
    PSParticleType::PSParticleType_pointSizeChanImpl::PSParticleType_pointSizeChanImpl(v0);
    PSParticleType::PSParticleType_pointSizeChanImpl::_PSParticleType_pointSizeChan = (uint64_t)v0;
  }
}

void sub_1B2FCCC44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_pointSizeChanImpl *PSParticleType::PSParticleType_pointSizeChanImpl::PSParticleType_pointSizeChanImpl(PSParticleType::PSParticleType_pointSizeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 2.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 2.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_pointSizeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65DFCA0;
  *((_QWORD *)this + 5) = &unk_1E65DFCC0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 1.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 64.0);
  return this;
}

void sub_1B2FCCCF4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_pointSizeChanInfo::getInstance(PSParticleType::PSParticleType_pointSizeChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_pointSizeChanInfo::getInstance(void)::PSParticleType_pointSizeChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_pointSizeChanInfo::getInstance(void)::PSParticleType_pointSizeChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_pointSizeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_pointSizeChanInfo::_PSParticleType_pointSizeChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_pointSizeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_pointSizeChanInfo *v0;

  if (!PSParticleType::PSParticleType_pointSizeChanInfo::_PSParticleType_pointSizeChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_pointSizeChanInfo *)operator new();
    PSParticleType::PSParticleType_pointSizeChanInfo::PSParticleType_pointSizeChanInfo(v0);
    PSParticleType::PSParticleType_pointSizeChanInfo::_PSParticleType_pointSizeChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCCDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_pointSizeChanInfo *PSParticleType::PSParticleType_pointSizeChanInfo::PSParticleType_pointSizeChanInfo(PSParticleType::PSParticleType_pointSizeChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_pointSizeChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DFD18;
  *((_QWORD *)this + 10) = &unk_1E65DFD38;
  return this;
}

void sub_1B2FCCE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_pointSpacingChanImpl::getInstance(PSParticleType::PSParticleType_pointSpacingChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_pointSpacingChanImpl::getInstance(void)::PSParticleType_pointSpacingChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_pointSpacingChanImpl::getInstance(void)::PSParticleType_pointSpacingChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_pointSpacingChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_pointSpacingChanImpl::_PSParticleType_pointSpacingChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_pointSpacingChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSParticleType::PSParticleType_pointSpacingChanImpl::_PSParticleType_pointSpacingChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSParticleType::PSParticleType_pointSpacingChanImpl::PSParticleType_pointSpacingChanImpl(v0);
    PSParticleType::PSParticleType_pointSpacingChanImpl::_PSParticleType_pointSpacingChan = (uint64_t)v0;
  }
}

void sub_1B2FCCF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSParticleType::PSParticleType_pointSpacingChanImpl::PSParticleType_pointSpacingChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.25);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.25, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DFD90;
  this->var5 = (PCString *)&unk_1E65DFDB0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.01);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FCCFEC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_pointSpacingChanInfo::getInstance(PSParticleType::PSParticleType_pointSpacingChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_pointSpacingChanInfo::getInstance(void)::PSParticleType_pointSpacingChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_pointSpacingChanInfo::getInstance(void)::PSParticleType_pointSpacingChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_pointSpacingChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_pointSpacingChanInfo::_PSParticleType_pointSpacingChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_pointSpacingChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_pointSpacingChanInfo *v0;

  if (!PSParticleType::PSParticleType_pointSpacingChanInfo::_PSParticleType_pointSpacingChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_pointSpacingChanInfo *)operator new();
    PSParticleType::PSParticleType_pointSpacingChanInfo::PSParticleType_pointSpacingChanInfo(v0);
    PSParticleType::PSParticleType_pointSpacingChanInfo::_PSParticleType_pointSpacingChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCD0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_pointSpacingChanInfo *PSParticleType::PSParticleType_pointSpacingChanInfo::PSParticleType_pointSpacingChanInfo(PSParticleType::PSParticleType_pointSpacingChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.05, 2.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_pointSpacingChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DFE08;
  *((_QWORD *)this + 10) = &unk_1E65DFE28;
  return this;
}

void sub_1B2FCD170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_pointSpacingOSChanImpl::getInstance(PSParticleType::PSParticleType_pointSpacingOSChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_pointSpacingOSChanImpl::getInstance(void)::PSParticleType_pointSpacingOSChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_pointSpacingOSChanImpl::getInstance(void)::PSParticleType_pointSpacingOSChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_pointSpacingOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_pointSpacingOSChanImpl::_PSParticleType_pointSpacingOSChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_pointSpacingOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSParticleType::PSParticleType_pointSpacingOSChanImpl::_PSParticleType_pointSpacingOSChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSParticleType::PSParticleType_pointSpacingOSChanImpl::PSParticleType_pointSpacingOSChanImpl(v0);
    PSParticleType::PSParticleType_pointSpacingOSChanImpl::_PSParticleType_pointSpacingOSChan = (uint64_t)v0;
  }
}

void sub_1B2FCD23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSParticleType::PSParticleType_pointSpacingOSChanImpl::PSParticleType_pointSpacingOSChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DFE80;
  this->var5 = (PCString *)&unk_1E65DFEA0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.01);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FCD2F0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_pointSpacingOSChanInfo::getInstance(PSParticleType::PSParticleType_pointSpacingOSChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_pointSpacingOSChanInfo::getInstance(void)::PSParticleType_pointSpacingOSChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_pointSpacingOSChanInfo::getInstance(void)::PSParticleType_pointSpacingOSChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_pointSpacingOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_pointSpacingOSChanInfo::_PSParticleType_pointSpacingOSChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_pointSpacingOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_pointSpacingOSChanInfo *v0;

  if (!PSParticleType::PSParticleType_pointSpacingOSChanInfo::_PSParticleType_pointSpacingOSChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_pointSpacingOSChanInfo *)operator new();
    PSParticleType::PSParticleType_pointSpacingOSChanInfo::PSParticleType_pointSpacingOSChanInfo(v0);
    PSParticleType::PSParticleType_pointSpacingOSChanInfo::_PSParticleType_pointSpacingOSChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCD3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_pointSpacingOSChanInfo *PSParticleType::PSParticleType_pointSpacingOSChanInfo::PSParticleType_pointSpacingOSChanInfo(PSParticleType::PSParticleType_pointSpacingOSChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.05, 4.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_pointSpacingOSChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DFEF8;
  *((_QWORD *)this + 10) = &unk_1E65DFF18;
  return this;
}

void sub_1B2FCD474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_strokeWidthOSChanImpl::getInstance(PSParticleType::PSParticleType_strokeWidthOSChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_strokeWidthOSChanImpl::getInstance(void)::PSParticleType_strokeWidthOSChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_strokeWidthOSChanImpl::getInstance(void)::PSParticleType_strokeWidthOSChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_strokeWidthOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_strokeWidthOSChanImpl::_PSParticleType_strokeWidthOSChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_strokeWidthOSChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!PSParticleType::PSParticleType_strokeWidthOSChanImpl::_PSParticleType_strokeWidthOSChan)
  {
    v0 = (OZChannelPercent *)operator new();
    PSParticleType::PSParticleType_strokeWidthOSChanImpl::PSParticleType_strokeWidthOSChanImpl(v0);
    PSParticleType::PSParticleType_strokeWidthOSChanImpl::_PSParticleType_strokeWidthOSChan = (uint64_t)v0;
  }
}

void sub_1B2FCD540(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *PSParticleType::PSParticleType_strokeWidthOSChanImpl::PSParticleType_strokeWidthOSChanImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65DFF70;
  this->var5 = (PCString *)&unk_1E65DFF90;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2FCD5F0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_strokeWidthOSChanInfo::getInstance(PSParticleType::PSParticleType_strokeWidthOSChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_strokeWidthOSChanInfo::getInstance(void)::PSParticleType_strokeWidthOSChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_strokeWidthOSChanInfo::getInstance(void)::PSParticleType_strokeWidthOSChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_strokeWidthOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_strokeWidthOSChanInfo::_PSParticleType_strokeWidthOSChanInfo;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_strokeWidthOSChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_strokeWidthOSChanInfo *v0;

  if (!PSParticleType::PSParticleType_strokeWidthOSChanInfo::_PSParticleType_strokeWidthOSChanInfo)
  {
    v0 = (PSParticleType::PSParticleType_strokeWidthOSChanInfo *)operator new();
    PSParticleType::PSParticleType_strokeWidthOSChanInfo::PSParticleType_strokeWidthOSChanInfo(v0);
    PSParticleType::PSParticleType_strokeWidthOSChanInfo::_PSParticleType_strokeWidthOSChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FCD6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_strokeWidthOSChanInfo *PSParticleType::PSParticleType_strokeWidthOSChanInfo::PSParticleType_strokeWidthOSChanInfo(PSParticleType::PSParticleType_strokeWidthOSChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_strokeWidthOSChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65DFFE8;
  *((_QWORD *)this + 10) = &unk_1E65E0008;
  return this;
}

void sub_1B2FCD770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_anchorDabsToChanImpl::getInstance(PSParticleType::PSParticleType_anchorDabsToChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_anchorDabsToChanImpl::getInstance(void)::PSParticleType_anchorDabsToChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_anchorDabsToChanImpl::getInstance(void)::PSParticleType_anchorDabsToChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_anchorDabsToChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_anchorDabsToChanImpl::_PSParticleType_anchorDabsToChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_anchorDabsToChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_anchorDabsToChanImpl *v0;

  if (!PSParticleType::PSParticleType_anchorDabsToChanImpl::_PSParticleType_anchorDabsToChan)
  {
    v0 = (PSParticleType::PSParticleType_anchorDabsToChanImpl *)operator new();
    PSParticleType::PSParticleType_anchorDabsToChanImpl::PSParticleType_anchorDabsToChanImpl(v0);
    PSParticleType::PSParticleType_anchorDabsToChanImpl::_PSParticleType_anchorDabsToChan = (uint64_t)v0;
  }
}

void sub_1B2FCD83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_anchorDabsToChanImpl *PSParticleType::PSParticleType_anchorDabsToChanImpl::PSParticleType_anchorDabsToChanImpl(PSParticleType::PSParticleType_anchorDabsToChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_anchorDabsToChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65E0060;
  *((_QWORD *)this + 5) = &unk_1E65E0080;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FCD8EC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_posOffsetVarChanImpl::getInstance(PSParticleType::PSParticleType_posOffsetVarChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_posOffsetVarChanImpl::getInstance(void)::PSParticleType_posOffsetVarChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_posOffsetVarChanImpl::getInstance(void)::PSParticleType_posOffsetVarChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_posOffsetVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_posOffsetVarChanImpl::_PSParticleType_posOffsetVarChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_posOffsetVarChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_posOffsetVarChanImpl *v0;

  if (!PSParticleType::PSParticleType_posOffsetVarChanImpl::_PSParticleType_posOffsetVarChan)
  {
    v0 = (PSParticleType::PSParticleType_posOffsetVarChanImpl *)operator new();
    PSParticleType::PSParticleType_posOffsetVarChanImpl::PSParticleType_posOffsetVarChanImpl(v0);
    PSParticleType::PSParticleType_posOffsetVarChanImpl::_PSParticleType_posOffsetVarChan = (uint64_t)v0;
  }
}

void sub_1B2FCD9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_posOffsetVarChanImpl *PSParticleType::PSParticleType_posOffsetVarChanImpl::PSParticleType_posOffsetVarChanImpl(PSParticleType::PSParticleType_posOffsetVarChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_posOffsetVarChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65E00D8;
  *((_QWORD *)this + 5) = &unk_1E65E00F8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCDA68(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSParticleType::PSParticleType_versionChanImpl::getInstance(PSParticleType::PSParticleType_versionChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType::PSParticleType_versionChanImpl::getInstance(void)::PSParticleType_versionChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType::PSParticleType_versionChanImpl::getInstance(void)::PSParticleType_versionChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType::PSParticleType_versionChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType::PSParticleType_versionChanImpl::_PSParticleType_versionChan;
}

void std::__call_once_param<std::tuple<PSParticleType::PSParticleType_versionChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType::PSParticleType_versionChanImpl *v0;

  if (!PSParticleType::PSParticleType_versionChanImpl::_PSParticleType_versionChan)
  {
    v0 = (PSParticleType::PSParticleType_versionChanImpl *)operator new();
    PSParticleType::PSParticleType_versionChanImpl::PSParticleType_versionChanImpl(v0);
    PSParticleType::PSParticleType_versionChanImpl::_PSParticleType_versionChan = (uint64_t)v0;
  }
}

void sub_1B2FCDB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSParticleType::PSParticleType_versionChanImpl *PSParticleType::PSParticleType_versionChanImpl::PSParticleType_versionChanImpl(PSParticleType::PSParticleType_versionChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 1, 1);
  PCSingleton::PCSingleton((PSParticleType::PSParticleType_versionChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65E0150;
  *((_QWORD *)this + 5) = &unk_1E65E0170;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FCDBE8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PSParticleType::HGNodeCacheEntryKey const,PSParticleType::HGNodeCacheEntryValue>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<PSParticleType::HGNodeCacheEntryKey const,PSParticleType::HGNodeCacheEntryValue>,0>(uint64_t a1)
{
  uint64_t result;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1 + 80);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1 + 48);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::destroy(a1, a2[1].var0);
    PCSharedCount::~PCSharedCount(a2 + 8);
    operator delete(a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PSParticleType::SourceBoundsCacheEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::find<CMTime>(uint64_t a1, CMTime *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = PSParticleType::LessThanFigTime::operator()(v5, (CMTime *)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || PSParticleType::LessThanFigTime::operator()(v5, a2, (CMTime *)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t PSParticleType::LessThanFigTime::operator()(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t result;
  CMTime v6;
  CMTime time1;

  time1 = *a2;
  v6 = *a3;
  result = CMTimeCompare(&time1, &v6);
  if ((_DWORD)result)
  {
    time1 = *a2;
    v6 = *a3;
    return CMTimeCompare(&time1, &v6) >> 31;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::__find_equal<CMTime>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<CMTime,PCPtr<LiImageSource>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<CMTime,PCPtr<LiImageSource>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::__find_equal<CMTime>(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  CMTime *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (CMTime *)(v4 + 32);
        if (!PSParticleType::LessThanFigTime::operator()(v7, a3, (CMTime *)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!PSParticleType::LessThanFigTime::operator()(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<CMTime,PCPtr<LiImageSource>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCPtr<LiImageSource>>,PSParticleType::LessThanFigTime,true>,std::allocator<std::__value_type<CMTime,PCPtr<LiImageSource>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *((_QWORD *)*a2 + 2);
  *((_OWORD *)v6 + 2) = **a2;
  *((_QWORD *)v6 + 6) = v7;
  *((_QWORD *)v6 + 7) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)v6 + 8);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2FCDFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<CMTime,PCPtr<LiImageSource>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<CMTime,PCPtr<LiImageSource>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<CMTime,PCPtr<LiImageSource>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<CMTime,PCPtr<LiImageSource>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCSharedCount *v2;

  v2 = *(PCSharedCount **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCSharedCount::~PCSharedCount(v2 + 8);
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::find<PSParticleType::HGNodeCacheEntryKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = a1 + 8;
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    a1 = PSParticleType::CompareHGNodeCacheEntries::operator()(a1, (uint64_t)(v3 + 4), a2);
    v6 = v3 + 1;
    if (!(_DWORD)a1)
    {
      v6 = v3;
      v5 = (uint64_t)v3;
    }
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v5 == v2 || PSParticleType::CompareHGNodeCacheEntries::operator()(a1, a2, v5 + 32))
    return v2;
  return v5;
}

void std::allocate_shared[abi:ne180100]<PGMetalTexture,std::allocator<PGMetalTexture>,HGRef<HGMetalTexture> &,HGMetalContext *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x68uLL);
  std::__shared_ptr_emplace<PGMetalTexture>::__shared_ptr_emplace[abi:ne180100]<HGRef<HGMetalTexture> &,HGMetalContext *&,std::allocator<PGMetalTexture>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2FCE110(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PGMetalTexture>::__shared_ptr_emplace[abi:ne180100]<HGRef<HGMetalTexture> &,HGMetalContext *&,std::allocator<PGMetalTexture>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E65E01C8;
  PGMetalTexture::PGMetalTexture((PCImage *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1B2FCE160(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PGMetalTexture>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65E01C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PGMetalTexture>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65E01C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PGMetalTexture>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

PCImage *PGMetalTexture::PGMetalTexture(PCImage *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  PCImage::PCImage(a1);
  *v6 = &off_1E6584700;
  v7 = *a2;
  *((_QWORD *)a1 + 8) = *a2;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  *((_QWORD *)a1 + 9) = a3;
  return a1;
}

void sub_1B2FCE22C(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCImage::~PCImage(v1);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::__emplace_unique_key_args<PSParticleType::HGNodeCacheEntryKey,std::piecewise_construct_t const&,std::tuple<PSParticleType::HGNodeCacheEntryKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v17[2];
  char v18;
  uint64_t v19;

  v6 = (void **)std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::__find_equal<PSParticleType::HGNodeCacheEntryKey>((uint64_t)a1, &v19, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0xA0uLL);
    v17[1] = a1 + 1;
    v9 = *a4;
    v10 = **a4;
    *((_QWORD *)v7 + 6) = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *(_OWORD *)(v7 + 56) = *(__int128 *)((char *)v9 + 24);
    *((_QWORD *)v7 + 17) = 0;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)v7 + 9) = _Q0;
    v18 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v19, v8, (uint64_t *)v7);
    v17[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v17, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,std::__map_value_compare<PSParticleType::HGNodeCacheEntryKey,std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,PSParticleType::CompareHGNodeCacheEntries,true>,std::allocator<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>>>::__find_equal<PSParticleType::HGNodeCacheEntryKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        a1 = PSParticleType::CompareHGNodeCacheEntries::operator()(a1, a3, (uint64_t)(v4 + 4));
        if (!(_DWORD)a1)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      a1 = PSParticleType::CompareHGNodeCacheEntries::operator()(a1, v8, a3);
      if (!(_DWORD)a1)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PSParticleType::HGNodeCacheEntryKey,PSParticleType::HGNodeCacheEntryValue>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<PSParticleType::HGNodeCacheEntryKey const,PSParticleType::HGNodeCacheEntryValue>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::allocate_shared[abi:ne180100]<PGMetalTexture,std::allocator<PGMetalTexture>,HGRef<HGMetalTexture> &,HGMetalContext *,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x68uLL);
  std::__shared_ptr_emplace<PGMetalTexture>::__shared_ptr_emplace[abi:ne180100]<HGRef<HGMetalTexture> &,HGMetalContext *&,std::allocator<PGMetalTexture>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2FCE444(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PSReplicator::PSReplicator(PSReplicator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PSReplicator *v5;

  PSEmitter::PSEmitter(this, a2, a3, a4);
  *(_QWORD *)v5 = off_1E65E0218;
  *((_QWORD *)v5 + 25) = &unk_1E65E04B8;
  *((_QWORD *)v5 + 27) = &unk_1E65E0D90;
  *((_QWORD *)v5 + 31) = &unk_1E65E0FE8;
  *((_QWORD *)v5 + 841) = &unk_1E65E1040;
  PSReplicator::initChannels(v5);
  (*(void (**)(PSReplicator *, uint64_t))(*(_QWORD *)this + 448))(this, 1);
}

void sub_1B2FCE4C0(_Unwind_Exception *a1)
{
  PSEmitter *v1;

  PSEmitter::~PSEmitter(v1);
  _Unwind_Resume(a1);
}

uint64_t PSReplicator::initChannels(PSReplicator *this)
{
  OZChannelBase *v2;
  PCString v4;

  v2 = (OZChannelBase *)((char *)this + 19488);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Shape Anim"));
  OZChannelBase::setName(v2, &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Shape Anim Enum"));
  OZChannelEnum::setStrings((const PCString *)v2, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Emit Pattern Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 19896), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Emit Pattern Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2487, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Num Points"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 20152), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Num Points U"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 20304), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Num Points V"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 20456), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Tile Offset"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21064), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Build Origin Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21216), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Build Origin Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2652, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Build Style Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21472), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Build Style Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2684, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Box Build Origin Type"));
  OZChannelBase::setName((OZChannelBase *)this + 194, &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Box Build Origin Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2716, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Box Build Style Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21984), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Box Build Style Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2748, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Open Build Origin Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 22240), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Open Build Origin Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2780, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Closed Build Origin Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 22496), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Closed Build Origin Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2812, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Radial Build Origin Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 22752), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Radial Build Origin Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 22752), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Radial Build Origin Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 2844, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Build Randomly"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 23008), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Outline Offset"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 23160), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Radius"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 23312), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Point 1"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 23464), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Point 2"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 24352), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25240), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Size"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25392), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Size Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25528), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Rect Size Height"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 25680), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Num Radial Arms"));
  OZChannelBase::setName((OZChannelBase *)this + 232, &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Points Per Arm"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26136), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Spiral Twists"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26288), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Wave Amplitude"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26440), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Wave Frequency"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26592), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Wave Phase"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26744), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Emit At Alpha"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 27048), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Emit Alpha Cutoff"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 27200), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Geometry Node Ref"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 27352), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Image Node Ref"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 27512), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Multiplier Properties"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 28128), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Scale"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 28864), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Tint Color"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 29760), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Tint Amount"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 30920), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Render Order"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 31072), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Render Order Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 3884, &v4, 1);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Reverse Stacking"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 31328), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Fill Points"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 31632), &v4, 0);
  PCString::~PCString(&v4);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Random Fill Seed"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 31784), &v4, 0);
  PCString::~PCString(&v4);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 19232), 6.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 19744), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 28256), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 31632), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 29456), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 32792), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 32944), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 33200), 0.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 19232), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 19744), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 28256), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 31632), 0);
  OZChannelBase::reset((OZChannelBase *)this + 263, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 32792), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 32944), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 33200), 0);
  PCURL::PCURL((PCURL *)&v4, CFSTR("Replicator Shape Type"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 19232), &v4, 0);
  PCString::~PCString(&v4);
  PSReplicator::updateReplicatorShapeEnum(this, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19232), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19232));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19896), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19896));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19744), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19744));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 28128), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 28128));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27672), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 27672));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27976), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 27976));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31072), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 31072));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31632), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 31632));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 32944), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 32944));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6880), 16, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 860) + 128))((char *)this + 6880);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7032), 16, 0);
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 879) + 128))((char *)this + 7032);
}

void sub_1B2FCF340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void PSReplicator::PSReplicator(PSReplicator *this, const PSReplicator *a2, uint64_t a3)
{
  _QWORD *v3;

  PSEmitter::PSEmitter(this, a2, a3);
  *v3 = off_1E65E0218;
  v3[25] = &unk_1E65E04B8;
  v3[27] = &unk_1E65E0D90;
  v3[31] = &unk_1E65E0FE8;
  v3[841] = &unk_1E65E1040;
}

uint64_t `non-virtual thunk to'PSReplicator::operator=(uint64_t a1, const void *a2)
{
  return PSEmitter::operator=(a1 - 200, a2);
}

void `non-virtual thunk to'PSReplicator::~PSReplicator(PSReplicator *this)
{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 200));
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 216));
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 248));
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 6728));
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  PSEmitter::~PSEmitter((PSReplicator *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

void PSReplicator::~PSReplicator(PSReplicator *this)
{
  PSEmitter::~PSEmitter(this);
  JUMPOUT(0x1B5E29170);
}

void PSReplicator::updateReplicatorShapeEnum(PSReplicator *this, int a2)
{
  int ValueAsInt;
  OZChannelEnum *v5;
  int v6;
  double v7;
  PCString v8;
  PCSharedCount v9[2];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    PCSharedCount::PCSharedCount(v9);
    OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 19232), (const PCString *)v9);
    PCString::~PCString((PCString *)v9);
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0);
  v5 = (PSReplicator *)((char *)this + 19232);
  if (ValueAsInt)
  {
    v11 = 0xA0000000BLL;
    *(_OWORD *)&v9[0].var0 = xmmword_1B3564E34;
    v10 = unk_1B3564E44;
    OZChannelEnum::setTags(v5, (char *)v9, 10);
    PCURL::PCURL((PCURL *)&v8, CFSTR("Replicator Shape Enum 3D"));
    OZChannelEnum::setStrings((const PCString *)v5, &v8, 1);
    PCString::~PCString(&v8);
    return;
  }
  *(_OWORD *)&v9[0].var0 = xmmword_1B3564E5C;
  v10 = unk_1B3564E6C;
  OZChannelEnum::setTags(v5, (char *)v9, 8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Replicator Shape Enum 2D"));
  OZChannelEnum::setStrings((const PCString *)v5, &v8, 1);
  PCString::~PCString(&v8);
  if (a2)
  {
    v6 = OZChannel::getValueAsInt((OZChannel *)v5, MEMORY[0x1E0CA2E68], 0.0);
    if (v6 == 10)
    {
      v7 = 2.0;
    }
    else
    {
      if (v6 != 11)
        return;
      v7 = 6.0;
    }
    OZChannel::setValue((OZChannel *)v5, MEMORY[0x1E0CA2E68], v7, 0);
  }
}

void sub_1B2FCF710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSReplicator::getIconName(PSReplicator *this@<X0>, PCURL *a2@<X8>)
{
  OZScene *v4;
  CMTime v5;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0)
    && (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200)
    && (v4 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200),
        OZScene::getCurrentTime(v4, (__n128 *)&v5),
        PSEmitter::shouldPrecompose(this, &v5)))
  {
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconColor-ReplicatorRasterized"));
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
  }
}

void `non-virtual thunk to'PSReplicator::getIconName(PSReplicator *this@<X0>, PCURL *a2@<X8>)
{
  PSReplicator::getIconName((PSReplicator *)((char *)this - 200), a2);
}

void PSReplicator::getIconNameBW(PSReplicator *this@<X0>, PCURL *a2@<X8>)
{
  OZScene *v4;
  CMTime v5;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0)
    && (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200)
    && (v4 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200),
        OZScene::getCurrentTime(v4, (__n128 *)&v5),
        PSEmitter::shouldPrecompose(this, &v5)))
  {
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconGrey-ReplicatorRasterized"));
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 88))(*((_QWORD *)this + 26));
  }
}

void `non-virtual thunk to'PSReplicator::getIconNameBW(PSReplicator *this@<X0>, PCURL *a2@<X8>)
{
  PSReplicator::getIconNameBW((PSReplicator *)((char *)this - 200), a2);
}

uint64_t PSReplicator::getIconID(PSReplicator *this)
{
  OZScene *v2;
  CMTime v4;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0)
    && (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200)
    && (v2 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200),
        OZScene::getCurrentTime(v2, (__n128 *)&v4),
        (PSEmitter::shouldPrecompose(this, &v4) & 1) != 0))
  {
    return 30;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 96))(*((_QWORD *)this + 26));
  }
}

uint64_t `non-virtual thunk to'PSReplicator::getIconID(PSReplicator *this)
{
  return PSReplicator::getIconID((PSReplicator *)((char *)this - 200));
}

void PSReplicator::updateEmitterHiddenFlags(PSReplicator *this, char a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  OZChannel *v8;
  char *v9;
  char *v10;
  int ValueAsInt;
  int v12;
  char *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  OZChannel **v21;
  OZChannel *v22;
  char *v23;
  char *v24;
  OZChannel *v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  OZChannel *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  OZChannel *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  OZChannel **v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  OZChannel **v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  OZChannel **v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  OZChannel **v142;
  char *v143;
  char *v144;
  char *v145;
  OZChannel *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  OZChannel **v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  OZChannel **v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  _QWORD *v250;
  OZChannel *v251;
  _QWORD *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  OZChannel **v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  OZChannel *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  OZChannel **v284;
  char *v285;
  char *v286;
  char *v287;
  OZChannel *v288;
  unsigned int v289;
  unint64_t v290;
  OZChannel **v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  char *v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  char *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  OZChannel **v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  char *v370;
  OZChannel **v371;
  char *v372;
  char *v373;
  char *v374;
  OZChannel *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  OZChannel **v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  char *v400;
  OZChannel **v401;
  char *v402;
  char *v403;
  char *v404;
  OZChannel *v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  char *v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  OZChannel *v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  OZChannel **v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  char *v439;
  OZChannel **v440;
  char *v441;
  char *v442;
  char *v443;
  OZChannel *v444;
  char *v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  char *v449;
  OZChannel **v450;
  char *v451;
  char *v452;
  char *v453;
  OZChannel *v454;
  char *v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  uint64_t v464;
  char *v465;
  char *v466;
  char *v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  uint64_t v478;
  OZChannel **v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  char *v484;
  char *v485;
  char *v486;
  char *v487;
  char *v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  OZChannel **v495;
  char *v496;
  char *v497;
  char *v498;
  OZChannel *v499;
  uint64_t v500;
  unint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  uint64_t v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  uint64_t v510;
  char *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  char *v516;
  OZChannel **v517;
  char *v518;
  char *v519;
  char *v520;
  OZChannel *v521;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  char *v525;
  char *v526;
  uint64_t v527;
  char *v528;
  char *v529;
  char *v530;
  char *v531;
  uint64_t v532;
  char *v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  char *v537;
  char *v538;
  char *v539;
  char *v540;
  char *v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  char *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  uint64_t v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  char *v559;
  char *v560;
  char *v561;
  char *v562;
  char *v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  char *v568;
  char *v569;
  char *v570;
  char *v571;
  char *v572;
  uint64_t v573;
  OZChannel **v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  char *v579;
  char *v580;
  char *v581;
  char *v582;
  char *v583;
  uint64_t v584;
  char *v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  char *v589;
  OZChannel **v590;
  char *v591;
  char *v592;
  char *v593;
  OZChannel *v594;
  uint64_t v595;
  unint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  uint64_t v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  uint64_t v605;
  char *v606;
  uint64_t v607;
  unint64_t v608;
  unint64_t v609;
  char *v610;
  char *v611;
  char *v612;
  char *v613;
  char *v614;
  uint64_t v615;
  _QWORD *v616;
  uint64_t v617;
  unint64_t v618;
  unint64_t v619;
  char *v620;
  char *v621;
  char *v622;
  char *v623;
  char *v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  unint64_t v628;
  char *v629;
  char *v630;
  uint64_t v631;
  char *v632;
  char *v633;
  char *v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  char *v640;
  char *v641;
  char *v642;
  char *v643;
  char *v644;
  uint64_t v645;
  char *v646;
  uint64_t v647;
  unint64_t v648;
  unint64_t v649;
  char *v650;
  char *v651;
  char *v652;
  char *v653;
  char *v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  unint64_t v658;
  char *v659;
  char *v660;
  char *v661;
  char *v662;
  char *v663;
  uint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  char *v669;
  char *v670;
  char *v671;
  char *v672;
  char *v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t v676;
  unint64_t v677;
  char *v678;
  char *v679;
  uint64_t v680;
  char *v681;
  char *v682;
  char *v683;
  char *v684;
  uint64_t v685;
  char *v686;
  uint64_t v687;
  unint64_t v688;
  unint64_t v689;
  char *v690;
  OZChannel **v691;
  char *v692;
  char *v693;
  char *v694;
  OZChannel *v695;
  uint64_t v696;
  unint64_t v697;
  unint64_t v698;
  char *v699;
  char *v700;
  char *v701;
  char *v702;
  char *v703;
  uint64_t v704;
  OZChannel **v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  char *v709;
  char *v710;
  uint64_t v711;
  char *v712;
  char *v713;
  char *v714;
  char *v715;
  uint64_t v716;
  OZChannel **v717;
  uint64_t v718;
  unint64_t v719;
  unint64_t v720;
  char *v721;
  char *v722;
  uint64_t v723;
  char *v724;
  char *v725;
  char *v726;
  char v727;
  uint64_t v728;
  unint64_t v729;
  unint64_t v730;
  char *v731;
  char *v732;
  char *v733;
  char *v734;
  char *v735;
  uint64_t v736;
  OZChannelBase **i;
  uint64_t *v738;
  uint64_t *v739;
  uint64_t *v740;
  BOOL v741;
  char *v742;
  char *v743;
  char *v744;
  char *v745;
  uint64_t v746;
  char *v747;
  uint64_t v748;
  unint64_t v749;
  unint64_t v750;
  char *v751;
  char *v752;
  char *v753;
  char *v754;
  char *v755;
  char *v756;
  uint64_t v757;
  char *v758;
  char *v759;
  char *v760;
  char *v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t v764;
  unint64_t v765;
  char *v766;
  char *v767;
  char *v768;
  char *v769;
  char *v770;
  uint64_t v771;
  _QWORD *v772;
  uint64_t v773;
  unint64_t v774;
  unint64_t v775;
  char *v776;
  OZChannel **v777;
  char *v778;
  char *v779;
  char *v780;
  OZChannel *v781;
  char *v782;
  char *v783;
  char *v784;
  char *v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t v788;
  unint64_t v789;
  char *v790;
  char *v791;
  char *v792;
  char *v793;
  char *v794;
  uint64_t v795;
  char *v796;
  uint64_t v797;
  unint64_t v798;
  unint64_t v799;
  char *v800;
  char *v801;
  char *v802;
  char *v803;
  char *v804;
  uint64_t v805;
  char *v806;
  uint64_t v807;
  unint64_t v808;
  unint64_t v809;
  char *v810;
  char *v811;
  uint64_t v812;
  char *v813;
  char *v814;
  char *v815;
  char *v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  unint64_t v820;
  char *v821;
  OZChannel **v822;
  char *v823;
  char *v824;
  char *v825;
  OZChannel *v826;
  char *v827;
  uint64_t v828;
  char *v829;
  char *v830;
  char *v831;
  char *v832;
  char *v833;
  char *v834;
  char *v835;
  char *v836;
  char *v837;
  char *v838;
  OZChannel *v839;
  OZChannel *v840;
  char *v841;
  char *v842;
  char *v843;
  char *v844;
  OZChannel *v845;
  char *v846;
  char *v847;
  OZChannel *v848;
  char *v849;
  int v850;
  OZChannel *v851;
  char v852;
  OZChannel *v853;
  OZChannelBase *v854;
  CMTime v855;
  char *v856;
  char *v857;
  unint64_t v858;
  uint64_t *v859;
  _QWORD *v860[3];

  v860[0] = 0;
  v860[1] = 0;
  v859 = (uint64_t *)v860;
  v853 = (OZChannel *)((char *)this + 19744);
  v856 = (char *)this + 19744;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v4 = (char *)this + 19896;
  v856 = (char *)this + 19896;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v848 = (OZChannel *)((char *)this + 20152);
  v856 = (char *)this + 20152;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v845 = (OZChannel *)((char *)this + 20304);
  v856 = (char *)this + 20304;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v844 = (char *)this + 20456;
  v856 = (char *)this + 20456;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v838 = (char *)this + 21064;
  v856 = (char *)this + 21064;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v839 = (OZChannel *)((char *)this + 21216);
  v856 = (char *)this + 21216;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v856 = (char *)this + 21472;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v856 = (char *)this + 22240;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v840 = (OZChannel *)((char *)this + 22496);
  v856 = (char *)this + 22496;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v856 = (char *)this + 22752;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v856 = (char *)this + 23008;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v847 = (char *)this + 23160;
  v856 = (char *)this + 23160;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v846 = (char *)this + 23312;
  v856 = (char *)this + 23312;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v5 = (char *)this + 23464;
  v856 = (char *)this + 23464;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v837 = (char *)this + 24352;
  v856 = (char *)this + 24352;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v843 = (char *)this + 25392;
  v856 = (char *)this + 25392;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v842 = (char *)this + 25528;
  v856 = (char *)this + 25528;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v841 = (char *)this + 25680;
  v856 = (char *)this + 25680;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v836 = (char *)this + 25832;
  v856 = (char *)this + 25832;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v834 = (char *)this + 25984;
  v856 = (char *)this + 25984;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v832 = (char *)this + 26136;
  v833 = (char *)this + 21472;
  v856 = (char *)this + 26136;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v6 = (char *)this + 26288;
  v856 = (char *)this + 26288;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v831 = (char *)this + 26440;
  v856 = (char *)this + 26440;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v830 = (char *)this + 26592;
  v856 = (char *)this + 26592;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v835 = (char *)this + 22752;
  v852 = a2;
  v856 = (char *)this + 26744;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v829 = (char *)this + 26744;
  v7 = (char *)this + 27200;
  v856 = (char *)this + 27200;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v8 = (OZChannel *)((char *)this + 22240);
  v9 = (char *)this + 27352;
  v856 = (char *)this + 27352;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v10 = (char *)this + 27512;
  v856 = (char *)this + 27512;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v851 = (OZChannel *)((char *)this + 23008);
  v849 = (char *)this + 31784;
  v856 = (char *)this + 31784;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v859, (unint64_t *)&v856, (uint64_t *)&v856);
  v856 = 0;
  v857 = 0;
  v858 = 0;
  v855 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19232), &v855, 0.0);
  v12 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19896), &v855, 0.0);
  v850 = OZChannel::getValueAsInt(v853, &v855, 0.0);
  switch(ValueAsInt)
  {
    case 1:
      v30 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v63 = (v857 - v856) >> 3;
        v32 = (OZChannel *)((char *)this + 23008);
        if ((unint64_t)(v63 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v64 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v64 <= v63 + 1)
          v64 = v63 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v65);
        else
          v66 = 0;
        v132 = &v66[8 * v63];
        v133 = &v66[8 * v65];
        *(_QWORD *)v132 = v5;
        v31 = v132 + 8;
        v135 = v856;
        v134 = v857;
        if (v857 != v856)
        {
          do
          {
            v136 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            *((_QWORD *)v132 - 1) = v136;
            v132 -= 8;
          }
          while (v134 != v135);
          v134 = v856;
        }
        v856 = v132;
        v857 = (char *)v31;
        v858 = (unint64_t)v133;
        if (v134)
          operator delete(v134);
      }
      else
      {
        *(_QWORD *)v857 = v5;
        v31 = v30 + 8;
        v32 = (OZChannel *)((char *)this + 23008);
      }
      v857 = (char *)v31;
      if ((unint64_t)v31 >= v858)
      {
        v138 = ((char *)v31 - v856) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v139 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v139 <= v138 + 1)
          v139 = v138 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v140 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v140 = v139;
        if (v140)
          v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v140);
        else
          v141 = 0;
        v187 = &v141[8 * v138];
        v188 = &v141[8 * v140];
        *(_QWORD *)v187 = v837;
        v137 = (OZChannel **)(v187 + 8);
        v190 = v856;
        v189 = v857;
        if (v857 != v856)
        {
          do
          {
            v191 = *((_QWORD *)v189 - 1);
            v189 -= 8;
            *((_QWORD *)v187 - 1) = v191;
            v187 -= 8;
          }
          while (v189 != v190);
          v189 = v856;
        }
        v856 = v187;
        v857 = (char *)v137;
        v858 = (unint64_t)v188;
        if (v189)
          operator delete(v189);
      }
      else
      {
        *v31 = v837;
        v137 = (OZChannel **)(v31 + 1);
      }
      v857 = (char *)v137;
      v192 = v858;
      if (v850)
      {
        if ((unint64_t)v137 >= v858)
        {
          v194 = ((char *)v137 - v856) >> 3;
          if ((unint64_t)(v194 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v195 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v195 <= v194 + 1)
            v195 = v194 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v196 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v196 = v195;
          if (v196)
            v197 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v196);
          else
            v197 = 0;
          v341 = &v197[8 * v194];
          v342 = &v197[8 * v196];
          *(_QWORD *)v341 = v848;
          v193 = v341 + 8;
          v344 = v856;
          v343 = v857;
          if (v857 != v856)
          {
            do
            {
              v345 = *((_QWORD *)v343 - 1);
              v343 -= 8;
              *((_QWORD *)v341 - 1) = v345;
              v341 -= 8;
            }
            while (v343 != v344);
            v343 = v856;
          }
          v856 = v341;
          v857 = (char *)v193;
          v858 = (unint64_t)v342;
          if (v343)
            operator delete(v343);
        }
        else
        {
          *v137 = v848;
          v193 = v137 + 1;
        }
        v857 = (char *)v193;
        if ((unint64_t)v193 >= v858)
        {
          v346 = ((char *)v193 - v856) >> 3;
          if ((unint64_t)(v346 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v347 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v347 <= v346 + 1)
            v347 = v346 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v348 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v348 = v347;
          if (v348)
            v349 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v348);
          else
            v349 = 0;
          v380 = &v349[8 * v346];
          v381 = &v349[8 * v348];
          *(_QWORD *)v380 = v847;
          v137 = (OZChannel **)(v380 + 8);
          v383 = v856;
          v382 = v857;
          if (v857 != v856)
          {
            do
            {
              v384 = *((_QWORD *)v382 - 1);
              v382 -= 8;
              *((_QWORD *)v380 - 1) = v384;
              v380 -= 8;
            }
            while (v382 != v383);
            v382 = v856;
          }
          v856 = v380;
          v857 = (char *)v137;
          v858 = (unint64_t)v381;
          if (v382)
            operator delete(v382);
        }
        else
        {
          *v193 = v847;
          v137 = (OZChannel **)(v193 + 1);
        }
        v857 = (char *)v137;
        v192 = v858;
      }
      if ((unint64_t)v137 >= v192)
      {
        v386 = ((char *)v137 - v856) >> 3;
        if ((unint64_t)(v386 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v387 = v192 - (_QWORD)v856;
        v388 = v387 >> 2;
        if (v387 >> 2 <= (unint64_t)(v386 + 1))
          v388 = v386 + 1;
        if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFF8)
          v389 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v389 = v388;
        if (v389)
          v390 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v389);
        else
          v390 = 0;
        v391 = &v390[8 * v386];
        v392 = &v390[8 * v389];
        *(_QWORD *)v391 = v8;
        v385 = (OZChannel **)(v391 + 8);
        v394 = v856;
        v393 = v857;
        if (v857 != v856)
        {
          do
          {
            v395 = *((_QWORD *)v393 - 1);
            v393 -= 8;
            *((_QWORD *)v391 - 1) = v395;
            v391 -= 8;
          }
          while (v393 != v394);
          v393 = v856;
        }
        v856 = v391;
        v857 = (char *)v385;
        v858 = (unint64_t)v392;
        if (v393)
          operator delete(v393);
      }
      else
      {
        *v137 = v8;
        v385 = v137 + 1;
      }
      v857 = (char *)v385;
      if ((unint64_t)v385 >= v858)
      {
        v397 = ((char *)v385 - v856) >> 3;
        if ((unint64_t)(v397 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v398 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v398 <= v397 + 1)
          v398 = v397 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v399 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v399 = v398;
        if (v399)
          v400 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v399);
        else
          v400 = 0;
        v401 = (OZChannel **)&v400[8 * v397];
        v402 = &v400[8 * v399];
        *v401 = v32;
        v396 = (char *)(v401 + 1);
        v404 = v856;
        v403 = v857;
        if (v857 != v856)
        {
          do
          {
            v405 = (OZChannel *)*((_QWORD *)v403 - 1);
            v403 -= 8;
            *--v401 = v405;
          }
          while (v403 != v404);
          v403 = v856;
        }
        v856 = (char *)v401;
        v857 = v396;
        v858 = (unint64_t)v402;
        if (v403)
          operator delete(v403);
      }
      else
      {
        *v385 = v32;
        v396 = (char *)(v385 + 1);
      }
      v857 = v396;
      if (OZChannel::getValueAsInt(v32, MEMORY[0x1E0CA2E68], 0.0))
      {
        v117 = v857;
        if ((unint64_t)v857 < v858)
          goto LABEL_1141;
        v406 = (v857 - v856) >> 3;
        if ((unint64_t)(v406 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v407 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v407 <= v406 + 1)
          v407 = v406 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v408 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v408 = v407;
        if (v408)
          v409 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v408);
        else
          v409 = 0;
        v410 = &v409[8 * v406];
        v411 = &v409[8 * v408];
        *(_QWORD *)v410 = v849;
        v412 = v410 + 8;
        v416 = v856;
        v413 = v857;
        if (v857 != v856)
        {
          do
          {
            v417 = *((_QWORD *)v413 - 1);
            v413 -= 8;
            *((_QWORD *)v410 - 1) = v417;
            v410 -= 8;
          }
          while (v413 != v416);
          goto LABEL_1192;
        }
        goto LABEL_1193;
      }
      goto LABEL_1196;
    case 2:
      v23 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v51 = (v857 - v856) >> 3;
        v25 = (OZChannel *)((char *)this + 23008);
        if ((unint64_t)(v51 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v52 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v52 <= v51 + 1)
          v52 = v51 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v53);
        else
          v54 = 0;
        v102 = &v54[8 * v51];
        v103 = &v54[8 * v53];
        *(_QWORD *)v102 = v4;
        v24 = v102 + 8;
        v105 = v856;
        v104 = v857;
        if (v857 != v856)
        {
          do
          {
            v106 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *((_QWORD *)v102 - 1) = v106;
            v102 -= 8;
          }
          while (v104 != v105);
          v104 = v856;
        }
        v856 = v102;
        v857 = v24;
        v858 = (unint64_t)v103;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *(_QWORD *)v857 = v4;
        v24 = v23 + 8;
        v25 = (OZChannel *)((char *)this + 23008);
      }
      v857 = v24;
      if ((unint64_t)v24 >= v858)
      {
        v108 = (v24 - v856) >> 3;
        if ((unint64_t)(v108 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v109 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v109 <= v108 + 1)
          v109 = v108 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
          v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v110);
        else
          v111 = 0;
        v153 = &v111[8 * v108];
        v154 = &v111[8 * v110];
        *(_QWORD *)v153 = v846;
        v107 = v153 + 8;
        v156 = v856;
        v155 = v857;
        if (v857 != v856)
        {
          do
          {
            v157 = *((_QWORD *)v155 - 1);
            v155 -= 8;
            *((_QWORD *)v153 - 1) = v157;
            v153 -= 8;
          }
          while (v155 != v156);
          v155 = v856;
        }
        v856 = v153;
        v857 = v107;
        v858 = (unint64_t)v154;
        if (v155)
          operator delete(v155);
      }
      else
      {
        *(_QWORD *)v24 = v846;
        v107 = v24 + 8;
      }
      v857 = v107;
      switch(v12)
      {
        case 2:
          if (v850)
          {
            v854 = (OZChannelBase *)((char *)this + 20152);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            v107 = v857;
          }
          if ((unint64_t)v107 >= v858)
          {
            v316 = (v107 - v856) >> 3;
            if ((unint64_t)(v316 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v317 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v317 <= v316 + 1)
              v317 = v316 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v318 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v318 = v317;
            if (v318)
              v319 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v318);
            else
              v319 = 0;
            v651 = &v319[8 * v316];
            v652 = &v319[8 * v318];
            *(_QWORD *)v651 = v835;
            v159 = (OZChannel **)(v651 + 8);
            v654 = v856;
            v653 = v857;
            if (v857 != v856)
            {
              do
              {
                v655 = *((_QWORD *)v653 - 1);
                v653 -= 8;
                *((_QWORD *)v651 - 1) = v655;
                v651 -= 8;
              }
              while (v653 != v654);
              v653 = v856;
            }
            v856 = v651;
            v857 = (char *)v159;
            v858 = (unint64_t)v652;
            if (v653)
              operator delete(v653);
          }
          else
          {
            *(_QWORD *)v107 = v835;
            v159 = (OZChannel **)(v107 + 8);
          }
          v857 = (char *)v159;
          if ((unint64_t)v159 >= v858)
          {
            v656 = ((char *)v159 - v856) >> 3;
            if ((unint64_t)(v656 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v657 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v657 <= v656 + 1)
              v657 = v656 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v658 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v658 = v657;
            if (v658)
              v659 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v658);
            else
              v659 = 0;
            v691 = (OZChannel **)&v659[8 * v656];
            v692 = &v659[8 * v658];
            *v691 = v25;
            v117 = (char *)(v691 + 1);
            v694 = v856;
            v693 = v857;
            if (v857 != v856)
            {
              do
              {
                v695 = (OZChannel *)*((_QWORD *)v693 - 1);
                v693 -= 8;
                *--v691 = v695;
              }
              while (v693 != v694);
              v693 = v856;
            }
            v856 = (char *)v691;
            v857 = v117;
            v858 = (unint64_t)v692;
            if (v693)
              operator delete(v693);
          }
          else
          {
            *v159 = v25;
            v117 = (char *)(v159 + 1);
          }
          v857 = v117;
          if ((unint64_t)v117 < v858)
            goto LABEL_1141;
          v696 = (v117 - v856) >> 3;
          if ((unint64_t)(v696 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v697 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v697 <= v696 + 1)
            v697 = v696 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v698 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v698 = v697;
          if (v698)
            v699 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v698);
          else
            v699 = 0;
          v410 = &v699[8 * v696];
          v411 = &v699[8 * v698];
          *(_QWORD *)v410 = v849;
          v412 = v410 + 8;
          v722 = v856;
          v413 = v857;
          if (v857 != v856)
          {
            do
            {
              v723 = *((_QWORD *)v413 - 1);
              v413 -= 8;
              *((_QWORD *)v410 - 1) = v723;
              v410 -= 8;
            }
            while (v413 != v722);
            goto LABEL_1192;
          }
          goto LABEL_1193;
        case 1:
          if ((unint64_t)v107 >= v858)
          {
            v300 = (v107 - v856) >> 3;
            if ((unint64_t)(v300 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v301 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v301 <= v300 + 1)
              v301 = v300 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v302 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v302 = v301;
            if (v302)
              v303 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v302);
            else
              v303 = 0;
            v611 = &v303[8 * v300];
            v612 = &v303[8 * v302];
            *(_QWORD *)v611 = v845;
            v158 = v611 + 8;
            v614 = v856;
            v613 = v857;
            if (v857 != v856)
            {
              do
              {
                v615 = *((_QWORD *)v613 - 1);
                v613 -= 8;
                *((_QWORD *)v611 - 1) = v615;
                v611 -= 8;
              }
              while (v613 != v614);
              v613 = v856;
            }
            v856 = v611;
            v857 = (char *)v158;
            v858 = (unint64_t)v612;
            if (v613)
              operator delete(v613);
          }
          else
          {
            *(_QWORD *)v107 = v845;
            v158 = v107 + 8;
          }
          v857 = (char *)v158;
          if ((unint64_t)v158 >= v858)
          {
            v617 = ((char *)v158 - v856) >> 3;
            if ((unint64_t)(v617 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v618 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v618 <= v617 + 1)
              v618 = v617 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v619 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v619 = v618;
            if (v619)
              v620 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v619);
            else
              v620 = 0;
            v660 = &v620[8 * v617];
            v661 = &v620[8 * v619];
            *(_QWORD *)v660 = v844;
            v616 = v660 + 8;
            v663 = v856;
            v662 = v857;
            if (v857 != v856)
            {
              do
              {
                v664 = *((_QWORD *)v662 - 1);
                v662 -= 8;
                *((_QWORD *)v660 - 1) = v664;
                v660 -= 8;
              }
              while (v662 != v663);
              v662 = v856;
            }
            v856 = v660;
            v857 = (char *)v616;
            v858 = (unint64_t)v661;
            if (v662)
              operator delete(v662);
          }
          else
          {
            *v158 = v844;
            v616 = v158 + 1;
          }
          v857 = (char *)v616;
          if ((unint64_t)v616 >= v858)
          {
            v666 = ((char *)v616 - v856) >> 3;
            if ((unint64_t)(v666 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v667 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v667 <= v666 + 1)
              v667 = v666 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v668 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v668 = v667;
            if (v668)
              v669 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v668);
            else
              v669 = 0;
            v700 = &v669[8 * v666];
            v701 = &v669[8 * v668];
            *(_QWORD *)v700 = v838;
            v665 = v700 + 8;
            v703 = v856;
            v702 = v857;
            if (v857 != v856)
            {
              do
              {
                v704 = *((_QWORD *)v702 - 1);
                v702 -= 8;
                *((_QWORD *)v700 - 1) = v704;
                v700 -= 8;
              }
              while (v702 != v703);
              v702 = v856;
            }
            v856 = v700;
            v857 = (char *)v665;
            v858 = (unint64_t)v701;
            if (v702)
              operator delete(v702);
          }
          else
          {
            *v616 = v838;
            v665 = v616 + 1;
          }
          v857 = (char *)v665;
          if ((unint64_t)v665 >= v858)
          {
            v706 = ((char *)v665 - v856) >> 3;
            if ((unint64_t)(v706 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v707 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v707 <= v706 + 1)
              v707 = v706 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v708 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v708 = v707;
            if (v708)
              v709 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v708);
            else
              v709 = 0;
            v742 = &v709[8 * v706];
            v743 = &v709[8 * v708];
            *(_QWORD *)v742 = v835;
            v705 = (OZChannel **)(v742 + 8);
            v745 = v856;
            v744 = v857;
            if (v857 != v856)
            {
              do
              {
                v746 = *((_QWORD *)v744 - 1);
                v744 -= 8;
                *((_QWORD *)v742 - 1) = v746;
                v742 -= 8;
              }
              while (v744 != v745);
              v744 = v856;
            }
            v856 = v742;
            v857 = (char *)v705;
            v858 = (unint64_t)v743;
            if (v744)
              operator delete(v744);
          }
          else
          {
            *v665 = v835;
            v705 = (OZChannel **)(v665 + 1);
          }
          v857 = (char *)v705;
          if ((unint64_t)v705 >= v858)
          {
            v748 = ((char *)v705 - v856) >> 3;
            if ((unint64_t)(v748 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v749 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v749 <= v748 + 1)
              v749 = v748 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v750 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v750 = v749;
            if (v750)
              v751 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v750);
            else
              v751 = 0;
            v777 = (OZChannel **)&v751[8 * v748];
            v778 = &v751[8 * v750];
            *v777 = v25;
            v747 = (char *)(v777 + 1);
            v780 = v856;
            v779 = v857;
            if (v857 != v856)
            {
              do
              {
                v781 = (OZChannel *)*((_QWORD *)v779 - 1);
                v779 -= 8;
                *--v777 = v781;
              }
              while (v779 != v780);
              v779 = v856;
            }
            v856 = (char *)v777;
            v857 = v747;
            v858 = (unint64_t)v778;
            if (v779)
              operator delete(v779);
          }
          else
          {
            *v705 = v25;
            v747 = (char *)(v705 + 1);
          }
          v857 = v747;
          if (OZChannel::getValueAsInt(v25, MEMORY[0x1E0CA2E68], 0.0))
            goto LABEL_1361;
          break;
        case 0:
          if (v850)
          {
            v854 = (OZChannelBase *)((char *)this + 20152);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            v854 = (OZChannelBase *)((char *)this + 23160);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            v854 = (OZChannelBase *)((char *)this + 22496);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            v854 = (OZChannelBase *)v25;
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            if (OZChannel::getValueAsInt(v25, MEMORY[0x1E0CA2E68], 0.0))
              goto LABEL_1361;
          }
          break;
      }
      goto LABEL_1196;
    case 4:
      v20 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v47 = (v857 - v856) >> 3;
        v22 = (OZChannel *)((char *)this + 23008);
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v48 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v48 <= v47 + 1)
          v48 = v47 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v49);
        else
          v50 = 0;
        v92 = &v50[8 * v47];
        v93 = &v50[8 * v49];
        *(_QWORD *)v92 = v9;
        v21 = (OZChannel **)(v92 + 8);
        v95 = v856;
        v94 = v857;
        if (v857 != v856)
        {
          do
          {
            v96 = *((_QWORD *)v94 - 1);
            v94 -= 8;
            *((_QWORD *)v92 - 1) = v96;
            v92 -= 8;
          }
          while (v94 != v95);
          v94 = v856;
        }
        v856 = v92;
        v857 = (char *)v21;
        v858 = (unint64_t)v93;
        if (v94)
          operator delete(v94);
      }
      else
      {
        *(_QWORD *)v857 = v9;
        v21 = (OZChannel **)(v20 + 8);
        v22 = (OZChannel *)((char *)this + 23008);
      }
      v857 = (char *)v21;
      if ((unint64_t)v21 >= v858)
      {
        v98 = ((char *)v21 - v856) >> 3;
        if ((unint64_t)(v98 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v99 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v99 <= v98 + 1)
          v99 = v98 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v100 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v100 = v99;
        if (v100)
          v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v100);
        else
          v101 = 0;
        v142 = (OZChannel **)&v101[8 * v98];
        v143 = &v101[8 * v100];
        *v142 = v853;
        v97 = v142 + 1;
        v145 = v856;
        v144 = v857;
        if (v857 != v856)
        {
          do
          {
            v146 = (OZChannel *)*((_QWORD *)v144 - 1);
            v144 -= 8;
            *--v142 = v146;
          }
          while (v144 != v145);
          v144 = v856;
        }
        v856 = (char *)v142;
        v857 = (char *)v97;
        v858 = (unint64_t)v143;
        if (v144)
          operator delete(v144);
      }
      else
      {
        *v21 = v853;
        v97 = v21 + 1;
      }
      v857 = (char *)v97;
      v147 = v858;
      if (v850)
      {
        if ((unint64_t)v97 >= v858)
        {
          v149 = ((char *)v97 - v856) >> 3;
          if ((unint64_t)(v149 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v150 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v150 <= v149 + 1)
            v150 = v149 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v151 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v151 = v150;
          if (v151)
            v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v151);
          else
            v152 = 0;
          v332 = &v152[8 * v149];
          v333 = &v152[8 * v151];
          *(_QWORD *)v332 = v848;
          v148 = v332 + 8;
          v335 = v856;
          v334 = v857;
          if (v857 != v856)
          {
            do
            {
              v336 = *((_QWORD *)v334 - 1);
              v334 -= 8;
              *((_QWORD *)v332 - 1) = v336;
              v332 -= 8;
            }
            while (v334 != v335);
            v334 = v856;
          }
          v856 = v332;
          v857 = (char *)v148;
          v858 = (unint64_t)v333;
          if (v334)
            operator delete(v334);
        }
        else
        {
          *v97 = v848;
          v148 = v97 + 1;
        }
        v857 = (char *)v148;
        if ((unint64_t)v148 >= v858)
        {
          v337 = ((char *)v148 - v856) >> 3;
          if ((unint64_t)(v337 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v338 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v338 <= v337 + 1)
            v338 = v337 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v339 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v339 = v338;
          if (v339)
            v340 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v339);
          else
            v340 = 0;
          v350 = &v340[8 * v337];
          v351 = &v340[8 * v339];
          *(_QWORD *)v350 = v847;
          v97 = (OZChannel **)(v350 + 8);
          v353 = v856;
          v352 = v857;
          if (v857 != v856)
          {
            do
            {
              v354 = *((_QWORD *)v352 - 1);
              v352 -= 8;
              *((_QWORD *)v350 - 1) = v354;
              v350 -= 8;
            }
            while (v352 != v353);
            v352 = v856;
          }
          v856 = v350;
          v857 = (char *)v97;
          v858 = (unint64_t)v351;
          if (v352)
            operator delete(v352);
        }
        else
        {
          *v148 = v847;
          v97 = (OZChannel **)(v148 + 1);
        }
        v857 = (char *)v97;
        v147 = v858;
      }
      if ((unint64_t)v97 >= v147)
      {
        v356 = ((char *)v97 - v856) >> 3;
        if ((unint64_t)(v356 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v357 = v147 - (_QWORD)v856;
        v358 = v357 >> 2;
        if (v357 >> 2 <= (unint64_t)(v356 + 1))
          v358 = v356 + 1;
        if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8)
          v359 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v359 = v358;
        if (v359)
          v360 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v359);
        else
          v360 = 0;
        v361 = &v360[8 * v356];
        v362 = &v360[8 * v359];
        *(_QWORD *)v361 = v840;
        v355 = (OZChannel **)(v361 + 8);
        v364 = v856;
        v363 = v857;
        if (v857 != v856)
        {
          do
          {
            v365 = *((_QWORD *)v363 - 1);
            v363 -= 8;
            *((_QWORD *)v361 - 1) = v365;
            v361 -= 8;
          }
          while (v363 != v364);
          v363 = v856;
        }
        v856 = v361;
        v857 = (char *)v355;
        v858 = (unint64_t)v362;
        if (v363)
          operator delete(v363);
      }
      else
      {
        *v97 = v840;
        v355 = v97 + 1;
      }
      v857 = (char *)v355;
      if ((unint64_t)v355 >= v858)
      {
        v367 = ((char *)v355 - v856) >> 3;
        if ((unint64_t)(v367 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v368 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v368 <= v367 + 1)
          v368 = v367 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v369 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v369 = v368;
        if (v369)
          v370 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v369);
        else
          v370 = 0;
        v371 = (OZChannel **)&v370[8 * v367];
        v372 = &v370[8 * v369];
        *v371 = v22;
        v366 = (char *)(v371 + 1);
        v374 = v856;
        v373 = v857;
        if (v857 != v856)
        {
          do
          {
            v375 = (OZChannel *)*((_QWORD *)v373 - 1);
            v373 -= 8;
            *--v371 = v375;
          }
          while (v373 != v374);
          v373 = v856;
        }
        v856 = (char *)v371;
        v857 = v366;
        v858 = (unint64_t)v372;
        if (v373)
          operator delete(v373);
      }
      else
      {
        *v355 = v22;
        v366 = (char *)(v355 + 1);
      }
      v857 = v366;
      if (OZChannel::getValueAsInt(v22, MEMORY[0x1E0CA2E68], 0.0))
      {
        v117 = v857;
        if ((unint64_t)v857 < v858)
          goto LABEL_1141;
        v376 = (v857 - v856) >> 3;
        if ((unint64_t)(v376 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v377 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v377 <= v376 + 1)
          v377 = v376 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v378 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v378 = v377;
        if (v378)
          v379 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v378);
        else
          v379 = 0;
        v410 = &v379[8 * v376];
        v411 = &v379[8 * v378];
        *(_QWORD *)v410 = v849;
        v412 = v410 + 8;
        v414 = v856;
        v413 = v857;
        if (v857 != v856)
        {
          do
          {
            v415 = *((_QWORD *)v413 - 1);
            v413 -= 8;
            *((_QWORD *)v410 - 1) = v415;
            v410 -= 8;
          }
          while (v413 != v414);
          goto LABEL_1192;
        }
        goto LABEL_1193;
      }
      goto LABEL_1196;
    case 5:
    case 6:
    case 12:
      v13 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v16 = (v857 - v856) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v17 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v18);
        else
          v19 = 0;
        v35 = &v19[8 * v16];
        v36 = &v19[8 * v18];
        *(_QWORD *)v35 = v4;
        v14 = v35 + 8;
        v38 = v856;
        v37 = v857;
        v15 = v12;
        if (v857 != v856)
        {
          do
          {
            v39 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v35 - 1) = v39;
            v35 -= 8;
          }
          while (v37 != v38);
          v37 = v856;
        }
        v856 = v35;
        v857 = (char *)v14;
        v858 = (unint64_t)v36;
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_QWORD *)v857 = v4;
        v14 = v13 + 8;
        v15 = v12;
      }
      v857 = (char *)v14;
      if (ValueAsInt == 12 || ValueAsInt == 5)
      {
        if ((unint64_t)v14 >= v858)
        {
          v42 = ((char *)v14 - v856) >> 3;
          v41 = (OZChannel *)((char *)this + 23008);
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v43 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v43 <= v42 + 1)
            v43 = v42 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v44);
          else
            v45 = 0;
          v73 = &v45[8 * v42];
          v74 = &v45[8 * v44];
          *(_QWORD *)v73 = v10;
          v40 = v73 + 8;
          v76 = v856;
          v75 = v857;
          if (v857 != v856)
          {
            do
            {
              v77 = *((_QWORD *)v75 - 1);
              v75 -= 8;
              *((_QWORD *)v73 - 1) = v77;
              v73 -= 8;
            }
            while (v75 != v76);
            v75 = v856;
          }
          v856 = v73;
          v857 = (char *)v40;
          v858 = (unint64_t)v74;
          if (v75)
            operator delete(v75);
        }
        else
        {
          *v14 = v10;
          v40 = v14 + 1;
          v41 = (OZChannel *)((char *)this + 23008);
        }
        v857 = (char *)v40;
        if ((unint64_t)v40 < v858)
        {
          *v40 = v7;
          v78 = (OZChannel **)(v40 + 1);
          goto LABEL_341;
        }
        v79 = ((char *)v40 - v856) >> 3;
        if ((unint64_t)(v79 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v80 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v80 <= v79 + 1)
          v80 = v79 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        if (v81)
          v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v81);
        else
          v82 = 0;
        v83 = &v82[8 * v79];
        v84 = &v82[8 * v81];
        *(_QWORD *)v83 = v7;
        v78 = (OZChannel **)(v83 + 8);
        v86 = v856;
        v85 = v857;
        if (v857 != v856)
        {
          do
          {
            v87 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *((_QWORD *)v83 - 1) = v87;
            v83 -= 8;
          }
          while (v85 != v86);
LABEL_338:
          v85 = v856;
        }
      }
      else
      {
        if ((unint64_t)v14 >= v858)
        {
          v69 = ((char *)v14 - v856) >> 3;
          if ((unint64_t)(v69 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v70 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v70 <= v69 + 1)
            v70 = v69 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v70;
          v41 = (OZChannel *)((char *)this + 23008);
          if (v71)
            v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v71);
          else
            v72 = 0;
          v160 = &v72[8 * v69];
          v161 = &v72[8 * v71];
          *(_QWORD *)v160 = v843;
          v46 = v160 + 8;
          v163 = v856;
          v162 = v857;
          if (v857 != v856)
          {
            do
            {
              v164 = *((_QWORD *)v162 - 1);
              v162 -= 8;
              *((_QWORD *)v160 - 1) = v164;
              v160 -= 8;
            }
            while (v162 != v163);
            v162 = v856;
          }
          v856 = v160;
          v857 = (char *)v46;
          v858 = (unint64_t)v161;
          if (v162)
            operator delete(v162);
        }
        else
        {
          *v14 = v843;
          v46 = v14 + 1;
          v41 = (OZChannel *)((char *)this + 23008);
        }
        v857 = (char *)v46;
        if ((unint64_t)v46 >= v858)
        {
          v166 = ((char *)v46 - v856) >> 3;
          if ((unint64_t)(v166 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v167 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v167 <= v166 + 1)
            v167 = v166 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v168 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v168 = v167;
          if (v168)
            v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v168);
          else
            v169 = 0;
          v198 = &v169[8 * v166];
          v199 = &v169[8 * v168];
          *(_QWORD *)v198 = v842;
          v165 = v198 + 8;
          v201 = v856;
          v200 = v857;
          if (v857 != v856)
          {
            do
            {
              v202 = *((_QWORD *)v200 - 1);
              v200 -= 8;
              *((_QWORD *)v198 - 1) = v202;
              v198 -= 8;
            }
            while (v200 != v201);
            v200 = v856;
          }
          v856 = v198;
          v857 = (char *)v165;
          v858 = (unint64_t)v199;
          if (v200)
            operator delete(v200);
        }
        else
        {
          *v46 = v842;
          v165 = v46 + 1;
        }
        v857 = (char *)v165;
        if ((unint64_t)v165 < v858)
        {
          *v165 = v841;
          v78 = (OZChannel **)(v165 + 1);
          goto LABEL_341;
        }
        v203 = ((char *)v165 - v856) >> 3;
        if ((unint64_t)(v203 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v204 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v204 <= v203 + 1)
          v204 = v203 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v205 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v205 = v204;
        if (v205)
          v206 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v205);
        else
          v206 = 0;
        v83 = &v206[8 * v203];
        v84 = &v206[8 * v205];
        *(_QWORD *)v83 = v841;
        v78 = (OZChannel **)(v83 + 8);
        v217 = v856;
        v85 = v857;
        if (v857 != v856)
        {
          do
          {
            v218 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *((_QWORD *)v83 - 1) = v218;
            v83 -= 8;
          }
          while (v85 != v217);
          goto LABEL_338;
        }
      }
      v856 = v83;
      v857 = (char *)v78;
      v858 = (unint64_t)v84;
      if (v85)
        operator delete(v85);
LABEL_341:
      v857 = (char *)v78;
      if (v15)
      {
        if (v15 == 2)
        {
          v220 = v858;
          if (v850)
          {
            if ((unint64_t)v78 >= v858)
            {
              v227 = ((char *)v78 - v856) >> 3;
              if ((unint64_t)(v227 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v228 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
              if (v228 <= v227 + 1)
                v228 = v227 + 1;
              if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
                v229 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v229 = v228;
              if (v229)
                v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v229);
              else
                v230 = 0;
              v429 = &v230[8 * v227];
              v430 = &v230[8 * v229];
              *(_QWORD *)v429 = v848;
              v78 = (OZChannel **)(v429 + 8);
              v432 = v856;
              v431 = v857;
              if (v857 != v856)
              {
                do
                {
                  v433 = *((_QWORD *)v431 - 1);
                  v431 -= 8;
                  *((_QWORD *)v429 - 1) = v433;
                  v429 -= 8;
                }
                while (v431 != v432);
                v431 = v856;
              }
              v856 = v429;
              v857 = (char *)v78;
              v858 = (unint64_t)v430;
              if (v431)
                operator delete(v431);
            }
            else
            {
              *v78++ = v848;
            }
            v857 = (char *)v78;
            v220 = v858;
          }
          if ((unint64_t)v78 >= v220)
          {
            v435 = ((char *)v78 - v856) >> 3;
            if ((unint64_t)(v435 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v436 = v220 - (_QWORD)v856;
            v437 = v436 >> 2;
            if (v436 >> 2 <= (unint64_t)(v435 + 1))
              v437 = v435 + 1;
            if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFF8)
              v438 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v438 = v437;
            if (v438)
              v439 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v438);
            else
              v439 = 0;
            v440 = (OZChannel **)&v439[8 * v435];
            v441 = &v439[8 * v438];
            *v440 = v839;
            v434 = v440 + 1;
            v443 = v856;
            v442 = v857;
            if (v857 != v856)
            {
              do
              {
                v444 = (OZChannel *)*((_QWORD *)v442 - 1);
                v442 -= 8;
                *--v440 = v444;
              }
              while (v442 != v443);
              v442 = v856;
            }
            v856 = (char *)v440;
            v857 = (char *)v434;
            v858 = (unint64_t)v441;
            if (v442)
              operator delete(v442);
          }
          else
          {
            *v78 = v839;
            v434 = v78 + 1;
          }
          v857 = (char *)v434;
          if ((unint64_t)v434 >= v858)
          {
            v446 = ((char *)v434 - v856) >> 3;
            if ((unint64_t)(v446 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v447 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v447 <= v446 + 1)
              v447 = v446 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v448 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v448 = v447;
            if (v448)
              v449 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v448);
            else
              v449 = 0;
            v450 = (OZChannel **)&v449[8 * v446];
            v451 = &v449[8 * v448];
            *v450 = v41;
            v445 = (char *)(v450 + 1);
            v453 = v856;
            v452 = v857;
            if (v857 != v856)
            {
              do
              {
                v454 = (OZChannel *)*((_QWORD *)v452 - 1);
                v452 -= 8;
                *--v450 = v454;
              }
              while (v452 != v453);
              v452 = v856;
            }
            v856 = (char *)v450;
            v857 = v445;
            v858 = (unint64_t)v451;
            if (v452)
              operator delete(v452);
          }
          else
          {
            *v434 = v41;
            v445 = (char *)(v434 + 1);
          }
          v857 = v445;
          if ((unint64_t)v445 >= v858)
          {
            v456 = (v445 - v856) >> 3;
            if ((unint64_t)(v456 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v457 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v457 <= v456 + 1)
              v457 = v456 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v458 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v458 = v457;
            if (v458)
              v459 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v458);
            else
              v459 = 0;
            v460 = &v459[8 * v456];
            v461 = &v459[8 * v458];
            *(_QWORD *)v460 = v849;
            v455 = v460 + 8;
            v463 = v856;
            v462 = v857;
            if (v857 != v856)
            {
              do
              {
                v464 = *((_QWORD *)v462 - 1);
                v462 -= 8;
                *((_QWORD *)v460 - 1) = v464;
                v460 -= 8;
              }
              while (v462 != v463);
              v462 = v856;
            }
            v856 = v460;
            v857 = v455;
            v858 = (unint64_t)v461;
            if (v462)
              operator delete(v462);
          }
          else
          {
            *(_QWORD *)v445 = v849;
            v455 = v445 + 8;
          }
          v857 = v455;
        }
        else if (v15 == 1)
        {
          if ((unint64_t)v78 >= v858)
          {
            v223 = ((char *)v78 - v856) >> 3;
            if ((unint64_t)(v223 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v224 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v224 <= v223 + 1)
              v224 = v223 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v225 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v225 = v224;
            if (v225)
              v226 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v225);
            else
              v226 = 0;
            v253 = &v226[8 * v223];
            v254 = &v226[8 * v225];
            *(_QWORD *)v253 = v845;
            v219 = v253 + 8;
            v256 = v856;
            v255 = v857;
            if (v857 != v856)
            {
              do
              {
                v257 = *((_QWORD *)v255 - 1);
                v255 -= 8;
                *((_QWORD *)v253 - 1) = v257;
                v253 -= 8;
              }
              while (v255 != v256);
              v255 = v856;
            }
            v856 = v253;
            v857 = (char *)v219;
            v858 = (unint64_t)v254;
            if (v255)
              operator delete(v255);
          }
          else
          {
            *v78 = v845;
            v219 = v78 + 1;
          }
          v857 = (char *)v219;
          if ((unint64_t)v219 >= v858)
          {
            v259 = ((char *)v219 - v856) >> 3;
            if ((unint64_t)(v259 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v260 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v260 <= v259 + 1)
              v260 = v259 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v261 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v261 = v260;
            if (v261)
              v262 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v261);
            else
              v262 = 0;
            v263 = &v262[8 * v259];
            v264 = &v262[8 * v261];
            *(_QWORD *)v263 = v844;
            v258 = v263 + 8;
            v266 = v856;
            v265 = v857;
            if (v857 != v856)
            {
              do
              {
                v267 = *((_QWORD *)v265 - 1);
                v265 -= 8;
                *((_QWORD *)v263 - 1) = v267;
                v263 -= 8;
              }
              while (v265 != v266);
              v265 = v856;
            }
            v856 = v263;
            v857 = (char *)v258;
            v858 = (unint64_t)v264;
            if (v265)
              operator delete(v265);
          }
          else
          {
            *v219 = v844;
            v258 = v219 + 1;
          }
          v857 = (char *)v258;
          if ((unint64_t)v258 >= v858)
          {
            v269 = ((char *)v258 - v856) >> 3;
            if ((unint64_t)(v269 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v270 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v270 <= v269 + 1)
              v270 = v269 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v271 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v271 = v270;
            if (v271)
              v272 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v271);
            else
              v272 = 0;
            v273 = &v272[8 * v269];
            v274 = &v272[8 * v271];
            *(_QWORD *)v273 = v838;
            v268 = (OZChannel **)(v273 + 8);
            v276 = v856;
            v275 = v857;
            if (v857 != v856)
            {
              do
              {
                v277 = *((_QWORD *)v275 - 1);
                v275 -= 8;
                *((_QWORD *)v273 - 1) = v277;
                v273 -= 8;
              }
              while (v275 != v276);
              v275 = v856;
            }
            v856 = v273;
            v857 = (char *)v268;
            v858 = (unint64_t)v274;
            if (v275)
              operator delete(v275);
          }
          else
          {
            *v258 = v838;
            v268 = (OZChannel **)(v258 + 1);
          }
          v857 = (char *)v268;
          if ((unint64_t)v268 >= v858)
          {
            v280 = ((char *)v268 - v856) >> 3;
            if ((unint64_t)(v280 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v281 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v281 <= v280 + 1)
              v281 = v280 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v282 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v282 = v281;
            if (v282)
              v283 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v282);
            else
              v283 = 0;
            v284 = (OZChannel **)&v283[8 * v280];
            v285 = &v283[8 * v282];
            *v284 = v839;
            v279 = (char *)(v284 + 1);
            v287 = v856;
            v286 = v857;
            if (v857 != v856)
            {
              do
              {
                v288 = (OZChannel *)*((_QWORD *)v286 - 1);
                v286 -= 8;
                *--v284 = v288;
              }
              while (v286 != v287);
              v286 = v856;
            }
            v856 = (char *)v284;
            v857 = v279;
            v858 = (unint64_t)v285;
            if (v286)
              operator delete(v286);
            v278 = (OZChannel *)((char *)this + 21216);
          }
          else
          {
            v278 = (OZChannel *)((char *)this + 21216);
            *v268 = v839;
            v279 = (char *)(v268 + 1);
          }
          v857 = v279;
          v289 = OZChannel::getValueAsInt(v278, &v855, 0.0);
          v291 = (OZChannel **)v857;
          v290 = v858;
          if (v289 <= 3)
          {
            if ((unint64_t)v857 >= v858)
            {
              v292 = (v857 - v856) >> 3;
              if ((unint64_t)(v292 + 1) >> 61)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v293 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
              if (v293 <= v292 + 1)
                v293 = v292 + 1;
              if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v293;
              if (v294)
                v295 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v294);
              else
                v295 = 0;
              v506 = &v295[8 * v292];
              v507 = &v295[8 * v294];
              *(_QWORD *)v506 = v833;
              v291 = (OZChannel **)(v506 + 8);
              v509 = v856;
              v508 = v857;
              if (v857 != v856)
              {
                do
                {
                  v510 = *((_QWORD *)v508 - 1);
                  v508 -= 8;
                  *((_QWORD *)v506 - 1) = v510;
                  v506 -= 8;
                }
                while (v508 != v509);
                v508 = v856;
              }
              v856 = v506;
              v857 = (char *)v291;
              v858 = (unint64_t)v507;
              if (v508)
                operator delete(v508);
            }
            else
            {
              *(_QWORD *)v857 = v833;
              ++v291;
            }
            v857 = (char *)v291;
            v290 = v858;
          }
          if ((unint64_t)v291 >= v290)
          {
            v512 = ((char *)v291 - v856) >> 3;
            if ((unint64_t)(v512 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v513 = v290 - (_QWORD)v856;
            v514 = v513 >> 2;
            if (v513 >> 2 <= (unint64_t)(v512 + 1))
              v514 = v512 + 1;
            if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFF8)
              v515 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v515 = v514;
            if (v515)
              v516 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v515);
            else
              v516 = 0;
            v517 = (OZChannel **)&v516[8 * v512];
            v518 = &v516[8 * v515];
            *v517 = v41;
            v511 = (char *)(v517 + 1);
            v520 = v856;
            v519 = v857;
            if (v857 != v856)
            {
              do
              {
                v521 = (OZChannel *)*((_QWORD *)v519 - 1);
                v519 -= 8;
                *--v517 = v521;
              }
              while (v519 != v520);
              v519 = v856;
            }
            v856 = (char *)v517;
            v857 = v511;
            v858 = (unint64_t)v518;
            if (v519)
              operator delete(v519);
          }
          else
          {
            *v291 = v41;
            v511 = (char *)(v291 + 1);
          }
          v857 = v511;
          if (OZChannel::getValueAsInt(v41, MEMORY[0x1E0CA2E68], 0.0))
          {
            v117 = v857;
            if ((unint64_t)v857 < v858)
              goto LABEL_1141;
            v522 = (v857 - v856) >> 3;
            if ((unint64_t)(v522 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v523 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v523 <= v522 + 1)
              v523 = v522 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v524 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v524 = v523;
            if (v524)
              v525 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v524);
            else
              v525 = 0;
            v410 = &v525[8 * v522];
            v411 = &v525[8 * v524];
            *(_QWORD *)v410 = v849;
            v412 = v410 + 8;
            v526 = v856;
            v413 = v857;
            if (v857 != v856)
            {
              do
              {
                v527 = *((_QWORD *)v413 - 1);
                v413 -= 8;
                *((_QWORD *)v410 - 1) = v527;
                v410 -= 8;
              }
              while (v413 != v526);
              goto LABEL_1192;
            }
            goto LABEL_1193;
          }
        }
      }
      else
      {
        v221 = v858;
        if (v850)
        {
          if ((unint64_t)v78 >= v858)
          {
            v231 = ((char *)v78 - v856) >> 3;
            if ((unint64_t)(v231 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v232 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v232 <= v231 + 1)
              v232 = v231 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v233 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v233 = v232;
            if (v233)
              v234 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v233);
            else
              v234 = 0;
            v465 = &v234[8 * v231];
            v466 = &v234[8 * v233];
            *(_QWORD *)v465 = v848;
            v222 = v465 + 8;
            v468 = v856;
            v467 = v857;
            if (v857 != v856)
            {
              do
              {
                v469 = *((_QWORD *)v467 - 1);
                v467 -= 8;
                *((_QWORD *)v465 - 1) = v469;
                v465 -= 8;
              }
              while (v467 != v468);
              v467 = v856;
            }
            v856 = v465;
            v857 = (char *)v222;
            v858 = (unint64_t)v466;
            if (v467)
              operator delete(v467);
          }
          else
          {
            *v78 = v848;
            v222 = v78 + 1;
          }
          v857 = (char *)v222;
          if ((unint64_t)v222 >= v858)
          {
            v470 = ((char *)v222 - v856) >> 3;
            if ((unint64_t)(v470 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v471 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v471 <= v470 + 1)
              v471 = v470 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v472 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v472 = v471;
            if (v472)
              v473 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v472);
            else
              v473 = 0;
            v474 = &v473[8 * v470];
            v475 = &v473[8 * v472];
            *(_QWORD *)v474 = v847;
            v78 = (OZChannel **)(v474 + 8);
            v477 = v856;
            v476 = v857;
            if (v857 != v856)
            {
              do
              {
                v478 = *((_QWORD *)v476 - 1);
                v476 -= 8;
                *((_QWORD *)v474 - 1) = v478;
                v474 -= 8;
              }
              while (v476 != v477);
              v476 = v856;
            }
            v856 = v474;
            v857 = (char *)v78;
            v858 = (unint64_t)v475;
            if (v476)
              operator delete(v476);
          }
          else
          {
            *v222 = v847;
            v78 = (OZChannel **)(v222 + 1);
          }
          v857 = (char *)v78;
          v221 = v858;
        }
        if ((unint64_t)v78 >= v221)
        {
          v480 = ((char *)v78 - v856) >> 3;
          if ((unint64_t)(v480 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v481 = v221 - (_QWORD)v856;
          v482 = v481 >> 2;
          if (v481 >> 2 <= (unint64_t)(v480 + 1))
            v482 = v480 + 1;
          if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFF8)
            v483 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v483 = v482;
          if (v483)
            v484 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v483);
          else
            v484 = 0;
          v485 = &v484[8 * v480];
          v486 = &v484[8 * v483];
          *(_QWORD *)v485 = v840;
          v479 = (OZChannel **)(v485 + 8);
          v488 = v856;
          v487 = v857;
          if (v857 != v856)
          {
            do
            {
              v489 = *((_QWORD *)v487 - 1);
              v487 -= 8;
              *((_QWORD *)v485 - 1) = v489;
              v485 -= 8;
            }
            while (v487 != v488);
            v487 = v856;
          }
          v856 = v485;
          v857 = (char *)v479;
          v858 = (unint64_t)v486;
          if (v487)
            operator delete(v487);
        }
        else
        {
          *v78 = v840;
          v479 = v78 + 1;
        }
        v857 = (char *)v479;
        if ((unint64_t)v479 >= v858)
        {
          v491 = ((char *)v479 - v856) >> 3;
          if ((unint64_t)(v491 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v492 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v492 <= v491 + 1)
            v492 = v491 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v493 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v493 = v492;
          if (v493)
            v494 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v493);
          else
            v494 = 0;
          v495 = (OZChannel **)&v494[8 * v491];
          v496 = &v494[8 * v493];
          *v495 = v41;
          v490 = (char *)(v495 + 1);
          v498 = v856;
          v497 = v857;
          if (v857 != v856)
          {
            do
            {
              v499 = (OZChannel *)*((_QWORD *)v497 - 1);
              v497 -= 8;
              *--v495 = v499;
            }
            while (v497 != v498);
            v497 = v856;
          }
          v856 = (char *)v495;
          v857 = v490;
          v858 = (unint64_t)v496;
          if (v497)
            operator delete(v497);
        }
        else
        {
          *v479 = v41;
          v490 = (char *)(v479 + 1);
        }
        v857 = v490;
        if (OZChannel::getValueAsInt(v41, MEMORY[0x1E0CA2E68], 0.0))
        {
          v117 = v857;
          if ((unint64_t)v857 < v858)
            goto LABEL_1141;
          v500 = (v857 - v856) >> 3;
          if ((unint64_t)(v500 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v501 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v501 <= v500 + 1)
            v501 = v500 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v502 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v502 = v501;
          if (v502)
            v503 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v502);
          else
            v503 = 0;
          v410 = &v503[8 * v500];
          v411 = &v503[8 * v502];
          *(_QWORD *)v410 = v849;
          v412 = v410 + 8;
          v504 = v856;
          v413 = v857;
          if (v857 != v856)
          {
            do
            {
              v505 = *((_QWORD *)v413 - 1);
              v413 -= 8;
              *((_QWORD *)v410 - 1) = v505;
              v410 -= 8;
            }
            while (v413 != v504);
            goto LABEL_1192;
          }
          goto LABEL_1193;
        }
      }
LABEL_1196:
      v724 = (char *)this + 31328;
      v725 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v728 = (v857 - v856) >> 3;
        v727 = v852;
        if ((unint64_t)(v728 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v729 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v729 <= v728 + 1)
          v729 = v728 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v730 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v730 = v729;
        if (v730)
          v731 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v730);
        else
          v731 = 0;
        v732 = &v731[8 * v728];
        v733 = &v731[8 * v730];
        *(_QWORD *)v732 = v724;
        v726 = v732 + 8;
        v735 = v856;
        v734 = v857;
        if (v857 != v856)
        {
          do
          {
            v736 = *((_QWORD *)v734 - 1);
            v734 -= 8;
            *((_QWORD *)v732 - 1) = v736;
            v732 -= 8;
          }
          while (v734 != v735);
          v734 = v856;
        }
        v856 = v732;
        v857 = v726;
        v858 = (unint64_t)v733;
        if (v734)
          operator delete(v734);
      }
      else
      {
        *(_QWORD *)v857 = v724;
        v726 = v725 + 8;
        v727 = v852;
      }
      v857 = v726;
      for (i = (OZChannelBase **)v856; i != (OZChannelBase **)v726; ++i)
      {
        v854 = *i;
        PSEmitter::updateChanHiddenFlag(this, v854, 0, v727);
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)&v859, (unint64_t *)&v854);
      }
      v738 = v859;
      if (v859 != (uint64_t *)v860)
      {
        do
        {
          PSEmitter::updateChanHiddenFlag(this, (OZChannelBase *)v738[4], 1, v727);
          v739 = (uint64_t *)v738[1];
          if (v739)
          {
            do
            {
              v740 = v739;
              v739 = (uint64_t *)*v739;
            }
            while (v739);
          }
          else
          {
            do
            {
              v740 = (uint64_t *)v738[2];
              v741 = *v740 == (_QWORD)v738;
              v738 = v740;
            }
            while (!v741);
          }
          v738 = v740;
        }
        while (v740 != (uint64_t *)v860);
      }
      PSEmitter::updatePropertiesChans(this, v727);
      if (v856)
      {
        v857 = v856;
        operator delete(v856);
      }
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v859, v860[0]);
      return;
    case 10:
      v26 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v55 = (v857 - v856) >> 3;
        if ((unint64_t)(v55 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v56 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v56 <= v55 + 1)
          v56 = v55 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        if (v57)
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v57);
        else
          v58 = 0;
        v112 = &v58[8 * v55];
        v113 = &v58[8 * v57];
        *(_QWORD *)v112 = v4;
        v27 = v112 + 8;
        v115 = v856;
        v114 = v857;
        if (v857 != v856)
        {
          do
          {
            v116 = *((_QWORD *)v114 - 1);
            v114 -= 8;
            *((_QWORD *)v112 - 1) = v116;
            v112 -= 8;
          }
          while (v114 != v115);
          v114 = v856;
        }
        v856 = v112;
        v857 = v27;
        v858 = (unint64_t)v113;
        if (v114)
          operator delete(v114);
      }
      else
      {
        *(_QWORD *)v857 = v4;
        v27 = v26 + 8;
      }
      v857 = v27;
      if ((unint64_t)v27 >= v858)
      {
        v118 = (v27 - v856) >> 3;
        if ((unint64_t)(v118 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v119 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v119 <= v118 + 1)
          v119 = v118 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v120 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v120 = v119;
        if (v120)
          v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v120);
        else
          v121 = 0;
        v170 = &v121[8 * v118];
        v171 = &v121[8 * v120];
        *(_QWORD *)v170 = v846;
        v117 = v170 + 8;
        v173 = v856;
        v172 = v857;
        if (v857 != v856)
        {
          do
          {
            v174 = *((_QWORD *)v172 - 1);
            v172 -= 8;
            *((_QWORD *)v170 - 1) = v174;
            v170 -= 8;
          }
          while (v172 != v173);
          v172 = v856;
        }
        v856 = v170;
        v857 = v117;
        v858 = (unint64_t)v171;
        if (v172)
          operator delete(v172);
      }
      else
      {
        *(_QWORD *)v27 = v846;
        v117 = v27 + 8;
      }
      v857 = v117;
      switch(v12)
      {
        case 2:
          if ((unint64_t)v117 < v858)
          {
            v176 = (char *)this + 20152;
            goto LABEL_1142;
          }
          v308 = (v117 - v856) >> 3;
          if ((unint64_t)(v308 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v309 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v309 <= v308 + 1)
            v309 = v308 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v310 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v310 = v309;
          if (v310)
            v311 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v310);
          else
            v311 = 0;
          v410 = &v311[8 * v308];
          v411 = &v311[8 * v310];
          *(_QWORD *)v410 = v848;
          v412 = v410 + 8;
          v630 = v856;
          v413 = v857;
          if (v857 != v856)
          {
            do
            {
              v631 = *((_QWORD *)v413 - 1);
              v413 -= 8;
              *((_QWORD *)v410 - 1) = v631;
              v410 -= 8;
            }
            while (v413 != v630);
            goto LABEL_1192;
          }
          goto LABEL_1193;
        case 1:
          if ((unint64_t)v117 >= v858)
          {
            v304 = (v117 - v856) >> 3;
            if ((unint64_t)(v304 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v305 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v305 <= v304 + 1)
              v305 = v304 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v306 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v306 = v305;
            if (v306)
              v307 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v306);
            else
              v307 = 0;
            v621 = &v307[8 * v304];
            v622 = &v307[8 * v306];
            *(_QWORD *)v621 = v845;
            v175 = v621 + 8;
            v624 = v856;
            v623 = v857;
            if (v857 != v856)
            {
              do
              {
                v625 = *((_QWORD *)v623 - 1);
                v623 -= 8;
                *((_QWORD *)v621 - 1) = v625;
                v621 -= 8;
              }
              while (v623 != v624);
              v623 = v856;
            }
            v856 = v621;
            v857 = v175;
            v858 = (unint64_t)v622;
            if (v623)
              operator delete(v623);
          }
          else
          {
            *(_QWORD *)v117 = v845;
            v175 = v117 + 8;
          }
          v857 = v175;
          if ((unint64_t)v175 >= v858)
          {
            v626 = (v175 - v856) >> 3;
            if ((unint64_t)(v626 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v627 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v627 <= v626 + 1)
              v627 = v626 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v628 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v628 = v627;
            if (v628)
              v629 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v628);
            else
              v629 = 0;
            v670 = &v629[8 * v626];
            v671 = &v629[8 * v628];
            *(_QWORD *)v670 = v844;
            v117 = v670 + 8;
            v673 = v856;
            v672 = v857;
            if (v857 != v856)
            {
              do
              {
                v674 = *((_QWORD *)v672 - 1);
                v672 -= 8;
                *((_QWORD *)v670 - 1) = v674;
                v670 -= 8;
              }
              while (v672 != v673);
              v672 = v856;
            }
            v856 = v670;
            v857 = v117;
            v858 = (unint64_t)v671;
            if (v672)
              operator delete(v672);
          }
          else
          {
            *(_QWORD *)v175 = v844;
            v117 = v175 + 8;
          }
          v857 = v117;
          if ((unint64_t)v117 < v858)
          {
            v176 = (char *)this + 21064;
            goto LABEL_1142;
          }
          v675 = (v117 - v856) >> 3;
          if ((unint64_t)(v675 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v676 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v676 <= v675 + 1)
            v676 = v675 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v677 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v677 = v676;
          if (v677)
            v678 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v677);
          else
            v678 = 0;
          v410 = &v678[8 * v675];
          v411 = &v678[8 * v677];
          *(_QWORD *)v410 = v838;
          v412 = v410 + 8;
          v710 = v856;
          v413 = v857;
          if (v857 != v856)
          {
            do
            {
              v711 = *((_QWORD *)v413 - 1);
              v413 -= 8;
              *((_QWORD *)v410 - 1) = v711;
              v410 -= 8;
            }
            while (v413 != v710);
            goto LABEL_1192;
          }
          goto LABEL_1193;
        case 0:
          if ((unint64_t)v117 >= v858)
          {
            v312 = (v117 - v856) >> 3;
            if ((unint64_t)(v312 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v313 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v313 <= v312 + 1)
              v313 = v312 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v314 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v314 = v313;
            if (v314)
              v315 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v314);
            else
              v315 = 0;
            v632 = &v315[8 * v312];
            v633 = &v315[8 * v314];
            *(_QWORD *)v632 = v845;
            v117 = v632 + 8;
            v635 = v856;
            v634 = v857;
            if (v857 != v856)
            {
              do
              {
                v636 = *((_QWORD *)v634 - 1);
                v634 -= 8;
                *((_QWORD *)v632 - 1) = v636;
                v632 -= 8;
              }
              while (v634 != v635);
              v634 = v856;
            }
            v856 = v632;
            v857 = v117;
            v858 = (unint64_t)v633;
            if (v634)
              operator delete(v634);
          }
          else
          {
            *(_QWORD *)v117 = v845;
            v117 += 8;
          }
          v857 = v117;
          if ((unint64_t)v117 < v858)
          {
            v176 = (char *)this + 20456;
            goto LABEL_1142;
          }
          v637 = (v117 - v856) >> 3;
          if ((unint64_t)(v637 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v638 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v638 <= v637 + 1)
            v638 = v637 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v639 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v639 = v638;
          if (v639)
            v640 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v639);
          else
            v640 = 0;
          v410 = &v640[8 * v637];
          v411 = &v640[8 * v639];
          *(_QWORD *)v410 = v844;
          v412 = v410 + 8;
          v679 = v856;
          v413 = v857;
          if (v857 != v856)
          {
            do
            {
              v680 = *((_QWORD *)v413 - 1);
              v413 -= 8;
              *((_QWORD *)v410 - 1) = v680;
              v410 -= 8;
            }
            while (v413 != v679);
            goto LABEL_1192;
          }
          goto LABEL_1193;
      }
      goto LABEL_1196;
    case 11:
      v28 = v857;
      if ((unint64_t)v857 >= v858)
      {
        v59 = (v857 - v856) >> 3;
        if ((unint64_t)(v59 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v60 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v60 <= v59 + 1)
          v60 = v59 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v61);
        else
          v62 = 0;
        v122 = &v62[8 * v59];
        v123 = &v62[8 * v61];
        *(_QWORD *)v122 = v4;
        v29 = v122 + 8;
        v125 = v856;
        v124 = v857;
        if (v857 != v856)
        {
          do
          {
            v126 = *((_QWORD *)v124 - 1);
            v124 -= 8;
            *((_QWORD *)v122 - 1) = v126;
            v122 -= 8;
          }
          while (v124 != v125);
          v124 = v856;
        }
        v856 = v122;
        v857 = (char *)v29;
        v858 = (unint64_t)v123;
        if (v124)
          operator delete(v124);
      }
      else
      {
        *(_QWORD *)v857 = v4;
        v29 = v28 + 8;
      }
      v857 = (char *)v29;
      if ((unint64_t)v29 >= v858)
      {
        v128 = ((char *)v29 - v856) >> 3;
        if ((unint64_t)(v128 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v129 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v129 <= v128 + 1)
          v129 = v128 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
          v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v130);
        else
          v131 = 0;
        v177 = &v131[8 * v128];
        v178 = &v131[8 * v130];
        *(_QWORD *)v177 = v843;
        v127 = v177 + 8;
        v180 = v856;
        v179 = v857;
        if (v857 != v856)
        {
          do
          {
            v181 = *((_QWORD *)v179 - 1);
            v179 -= 8;
            *((_QWORD *)v177 - 1) = v181;
            v177 -= 8;
          }
          while (v179 != v180);
          v179 = v856;
        }
        v856 = v177;
        v857 = (char *)v127;
        v858 = (unint64_t)v178;
        if (v179)
          operator delete(v179);
      }
      else
      {
        *v29 = v843;
        v127 = v29 + 1;
      }
      v857 = (char *)v127;
      if ((unint64_t)v127 >= v858)
      {
        v183 = ((char *)v127 - v856) >> 3;
        if ((unint64_t)(v183 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v184 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v184 <= v183 + 1)
          v184 = v183 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
          v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v185);
        else
          v186 = 0;
        v207 = &v186[8 * v183];
        v208 = &v186[8 * v185];
        *(_QWORD *)v207 = v842;
        v182 = v207 + 8;
        v210 = v856;
        v209 = v857;
        if (v857 != v856)
        {
          do
          {
            v211 = *((_QWORD *)v209 - 1);
            v209 -= 8;
            *((_QWORD *)v207 - 1) = v211;
            v207 -= 8;
          }
          while (v209 != v210);
          v209 = v856;
        }
        v856 = v207;
        v857 = (char *)v182;
        v858 = (unint64_t)v208;
        if (v209)
          operator delete(v209);
      }
      else
      {
        *v127 = v842;
        v182 = v127 + 1;
      }
      v857 = (char *)v182;
      if ((unint64_t)v182 >= v858)
      {
        v213 = ((char *)v182 - v856) >> 3;
        if ((unint64_t)(v213 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v214 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v214 <= v213 + 1)
          v214 = v213 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v215 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v215 = v214;
        if (v215)
          v216 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v215);
        else
          v216 = 0;
        v235 = &v216[8 * v213];
        v236 = &v216[8 * v215];
        *(_QWORD *)v235 = v841;
        v212 = v235 + 8;
        v238 = v856;
        v237 = v857;
        if (v857 != v856)
        {
          do
          {
            v239 = *((_QWORD *)v237 - 1);
            v237 -= 8;
            *((_QWORD *)v235 - 1) = v239;
            v235 -= 8;
          }
          while (v237 != v238);
          v237 = v856;
        }
        v856 = v235;
        v857 = (char *)v212;
        v858 = (unint64_t)v236;
        if (v237)
          operator delete(v237);
      }
      else
      {
        *v182 = v841;
        v212 = v182 + 1;
      }
      v857 = (char *)v212;
      if ((unint64_t)v212 >= v858)
      {
        v241 = ((char *)v212 - v856) >> 3;
        if ((unint64_t)(v241 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v242 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
        if (v242 <= v241 + 1)
          v242 = v241 + 1;
        if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
          v243 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v243 = v242;
        if (v243)
          v244 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v243);
        else
          v244 = 0;
        v245 = &v244[8 * v241];
        v246 = &v244[8 * v243];
        *(_QWORD *)v245 = v836;
        v240 = (OZChannel **)(v245 + 8);
        v248 = v856;
        v247 = v857;
        if (v857 != v856)
        {
          do
          {
            v249 = *((_QWORD *)v247 - 1);
            v247 -= 8;
            *((_QWORD *)v245 - 1) = v249;
            v245 -= 8;
          }
          while (v247 != v248);
          v247 = v856;
        }
        v856 = v245;
        v857 = (char *)v240;
        v858 = (unint64_t)v246;
        if (v247)
          operator delete(v247);
      }
      else
      {
        *v212 = v836;
        v240 = (OZChannel **)(v212 + 1);
      }
      v857 = (char *)v240;
      if (v12)
      {
        if (v12 != 2)
        {
          if (v12 != 1)
            goto LABEL_1196;
          if ((unint64_t)v240 >= v858)
          {
            v328 = ((char *)v240 - v856) >> 3;
            if ((unint64_t)(v328 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v329 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v329 <= v328 + 1)
              v329 = v328 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v330 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v330 = v329;
            if (v330)
              v331 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v330);
            else
              v331 = 0;
            v767 = &v331[8 * v328];
            v768 = &v331[8 * v330];
            *(_QWORD *)v767 = v845;
            v250 = v767 + 8;
            v770 = v856;
            v769 = v857;
            if (v857 != v856)
            {
              do
              {
                v771 = *((_QWORD *)v769 - 1);
                v769 -= 8;
                *((_QWORD *)v767 - 1) = v771;
                v767 -= 8;
              }
              while (v769 != v770);
              v769 = v856;
            }
            v856 = v767;
            v857 = (char *)v250;
            v858 = (unint64_t)v768;
            if (v769)
              operator delete(v769);
          }
          else
          {
            *v240 = v845;
            v250 = v240 + 1;
          }
          v857 = (char *)v250;
          if ((unint64_t)v250 >= v858)
          {
            v773 = ((char *)v250 - v856) >> 3;
            if ((unint64_t)(v773 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v774 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v774 <= v773 + 1)
              v774 = v773 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v775 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v775 = v774;
            if (v775)
              v776 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v775);
            else
              v776 = 0;
            v791 = &v776[8 * v773];
            v792 = &v776[8 * v775];
            *(_QWORD *)v791 = v844;
            v772 = v791 + 8;
            v794 = v856;
            v793 = v857;
            if (v857 != v856)
            {
              do
              {
                v795 = *((_QWORD *)v793 - 1);
                v793 -= 8;
                *((_QWORD *)v791 - 1) = v795;
                v791 -= 8;
              }
              while (v793 != v794);
              v793 = v856;
            }
            v856 = v791;
            v857 = (char *)v772;
            v858 = (unint64_t)v792;
            if (v793)
              operator delete(v793);
          }
          else
          {
            *v250 = v844;
            v772 = v250 + 1;
          }
          v857 = (char *)v772;
          v796 = (char *)this + 20608;
          if ((unint64_t)v772 >= v858)
          {
            v797 = ((char *)v772 - v856) >> 3;
            if ((unint64_t)(v797 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v798 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v798 <= v797 + 1)
              v798 = v797 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v799 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v799 = v798;
            if (v799)
              v800 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v799);
            else
              v800 = 0;
            v813 = &v800[8 * v797];
            v814 = &v800[8 * v799];
            *(_QWORD *)v813 = v796;
            v240 = (OZChannel **)(v813 + 8);
            v816 = v856;
            v815 = v857;
            if (v857 != v856)
            {
              do
              {
                v817 = *((_QWORD *)v815 - 1);
                v815 -= 8;
                *((_QWORD *)v813 - 1) = v817;
                v813 -= 8;
              }
              while (v815 != v816);
              v815 = v856;
            }
            v856 = v813;
            v857 = (char *)v240;
            v858 = (unint64_t)v814;
            if (v815)
              operator delete(v815);
          }
          else
          {
            *v772 = v796;
            v240 = (OZChannel **)(v772 + 1);
          }
          v857 = (char *)v240;
          if ((unint64_t)v240 < v858)
          {
            v251 = (OZChannel *)((char *)this + 21064);
            goto LABEL_1345;
          }
          v818 = ((char *)v240 - v856) >> 3;
          if ((unint64_t)(v818 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v819 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v819 <= v818 + 1)
            v819 = v818 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v820 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v820 = v819;
          if (v820)
            v821 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v820);
          else
            v821 = 0;
          v752 = &v821[8 * v818];
          v753 = &v821[8 * v820];
          *(_QWORD *)v752 = v838;
          v754 = v752 + 8;
          v827 = v856;
          v755 = v857;
          if (v857 == v856)
          {
LABEL_1366:
            v856 = v752;
            v857 = v754;
            v858 = (unint64_t)v753;
            if (v755)
              operator delete(v755);
            goto LABEL_1368;
          }
          do
          {
            v828 = *((_QWORD *)v755 - 1);
            v755 -= 8;
            *((_QWORD *)v752 - 1) = v828;
            v752 -= 8;
          }
          while (v755 != v827);
LABEL_1365:
          v755 = v856;
          goto LABEL_1366;
        }
        if ((unint64_t)v240 >= v858)
        {
          v320 = ((char *)v240 - v856) >> 3;
          if ((unint64_t)(v320 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v321 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v321 <= v320 + 1)
            v321 = v320 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v322 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v322 = v321;
          if (v322)
            v323 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v322);
          else
            v323 = 0;
          v752 = &v323[8 * v320];
          v753 = &v323[8 * v322];
          *(_QWORD *)v752 = v848;
          v754 = v752 + 8;
          v756 = v856;
          v755 = v857;
          if (v857 == v856)
            goto LABEL_1366;
          do
          {
            v757 = *((_QWORD *)v755 - 1);
            v755 -= 8;
            *((_QWORD *)v752 - 1) = v757;
            v752 -= 8;
          }
          while (v755 != v756);
          goto LABEL_1365;
        }
        v251 = (OZChannel *)((char *)this + 20152);
      }
      else
      {
        if ((unint64_t)v240 >= v858)
        {
          v324 = ((char *)v240 - v856) >> 3;
          if ((unint64_t)(v324 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v325 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v325 <= v324 + 1)
            v325 = v324 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v326 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v326 = v325;
          if (v326)
            v327 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v326);
          else
            v327 = 0;
          v758 = &v327[8 * v324];
          v759 = &v327[8 * v326];
          *(_QWORD *)v758 = v845;
          v252 = v758 + 8;
          v761 = v856;
          v760 = v857;
          if (v857 != v856)
          {
            do
            {
              v762 = *((_QWORD *)v760 - 1);
              v760 -= 8;
              *((_QWORD *)v758 - 1) = v762;
              v758 -= 8;
            }
            while (v760 != v761);
            v760 = v856;
          }
          v856 = v758;
          v857 = (char *)v252;
          v858 = (unint64_t)v759;
          if (v760)
            operator delete(v760);
        }
        else
        {
          *v240 = v845;
          v252 = v240 + 1;
        }
        v857 = (char *)v252;
        if ((unint64_t)v252 >= v858)
        {
          v763 = ((char *)v252 - v856) >> 3;
          if ((unint64_t)(v763 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v764 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v764 <= v763 + 1)
            v764 = v763 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v765 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v765 = v764;
          if (v765)
            v766 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v765);
          else
            v766 = 0;
          v782 = &v766[8 * v763];
          v783 = &v766[8 * v765];
          *(_QWORD *)v782 = v844;
          v240 = (OZChannel **)(v782 + 8);
          v785 = v856;
          v784 = v857;
          if (v857 != v856)
          {
            do
            {
              v786 = *((_QWORD *)v784 - 1);
              v784 -= 8;
              *((_QWORD *)v782 - 1) = v786;
              v782 -= 8;
            }
            while (v784 != v785);
            v784 = v856;
          }
          v856 = v782;
          v857 = (char *)v240;
          v858 = (unint64_t)v783;
          if (v784)
            operator delete(v784);
        }
        else
        {
          *v252 = v844;
          v240 = (OZChannel **)(v252 + 1);
        }
        v857 = (char *)v240;
        if ((unint64_t)v240 >= v858)
        {
          v787 = ((char *)v240 - v856) >> 3;
          if ((unint64_t)(v787 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v788 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v788 <= v787 + 1)
            v788 = v787 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v789 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v789 = v788;
          if (v789)
            v790 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v789);
          else
            v790 = 0;
          v752 = &v790[8 * v787];
          v753 = &v790[8 * v789];
          *(_QWORD *)v752 = v847;
          v754 = v752 + 8;
          v811 = v856;
          v755 = v857;
          if (v857 == v856)
            goto LABEL_1366;
          do
          {
            v812 = *((_QWORD *)v755 - 1);
            v755 -= 8;
            *((_QWORD *)v752 - 1) = v812;
            v752 -= 8;
          }
          while (v755 != v811);
          goto LABEL_1365;
        }
        v251 = (OZChannel *)((char *)this + 23160);
      }
LABEL_1345:
      *v240 = v251;
      v754 = (char *)(v240 + 1);
LABEL_1368:
      v857 = v754;
      goto LABEL_1196;
    default:
      if ((ValueAsInt - 7) > 1)
      {
        if (ValueAsInt == 9)
        {
          v67 = v857;
          if ((unint64_t)v857 >= v858)
          {
            v296 = (v857 - v856) >> 3;
            if ((unint64_t)(v296 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v297 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v297 <= v296 + 1)
              v297 = v296 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v298 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v298 = v297;
            if (v298)
              v299 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v298);
            else
              v299 = 0;
            v528 = &v299[8 * v296];
            v529 = &v299[8 * v298];
            *(_QWORD *)v528 = v5;
            v68 = v528 + 8;
            v531 = v856;
            v530 = v857;
            if (v857 != v856)
            {
              do
              {
                v532 = *((_QWORD *)v530 - 1);
                v530 -= 8;
                *((_QWORD *)v528 - 1) = v532;
                v528 -= 8;
              }
              while (v530 != v531);
              v530 = v856;
            }
            v856 = v528;
            v857 = v68;
            v858 = (unint64_t)v529;
            if (v530)
              operator delete(v530);
          }
          else
          {
            *(_QWORD *)v857 = v5;
            v68 = v67 + 8;
          }
          v857 = v68;
          if ((unint64_t)v68 >= v858)
          {
            v534 = (v68 - v856) >> 3;
            if ((unint64_t)(v534 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v535 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v535 <= v534 + 1)
              v535 = v534 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v536 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v536 = v535;
            if (v536)
              v537 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v536);
            else
              v537 = 0;
            v601 = &v537[8 * v534];
            v602 = &v537[8 * v536];
            *(_QWORD *)v601 = v837;
            v533 = v601 + 8;
            v604 = v856;
            v603 = v857;
            if (v857 != v856)
            {
              do
              {
                v605 = *((_QWORD *)v603 - 1);
                v603 -= 8;
                *((_QWORD *)v601 - 1) = v605;
                v601 -= 8;
              }
              while (v603 != v604);
              v603 = v856;
            }
            v856 = v601;
            v857 = v533;
            v858 = (unint64_t)v602;
            if (v603)
              operator delete(v603);
          }
          else
          {
            *(_QWORD *)v68 = v837;
            v533 = v68 + 8;
          }
          v857 = v533;
          if ((unint64_t)v533 >= v858)
          {
            v607 = (v533 - v856) >> 3;
            if ((unint64_t)(v607 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v608 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v608 <= v607 + 1)
              v608 = v607 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v609 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v609 = v608;
            if (v609)
              v610 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v609);
            else
              v610 = 0;
            v641 = &v610[8 * v607];
            v642 = &v610[8 * v609];
            *(_QWORD *)v641 = v831;
            v606 = v641 + 8;
            v644 = v856;
            v643 = v857;
            if (v857 != v856)
            {
              do
              {
                v645 = *((_QWORD *)v643 - 1);
                v643 -= 8;
                *((_QWORD *)v641 - 1) = v645;
                v641 -= 8;
              }
              while (v643 != v644);
              v643 = v856;
            }
            v856 = v641;
            v857 = v606;
            v858 = (unint64_t)v642;
            if (v643)
              operator delete(v643);
          }
          else
          {
            *(_QWORD *)v533 = v831;
            v606 = v533 + 8;
          }
          v857 = v606;
          if ((unint64_t)v606 >= v858)
          {
            v647 = (v606 - v856) >> 3;
            if ((unint64_t)(v647 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v648 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v648 <= v647 + 1)
              v648 = v647 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v649 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v649 = v648;
            if (v649)
              v650 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v649);
            else
              v650 = 0;
            v681 = &v650[8 * v647];
            v682 = &v650[8 * v649];
            *(_QWORD *)v681 = v830;
            v646 = v681 + 8;
            v684 = v856;
            v683 = v857;
            if (v857 != v856)
            {
              do
              {
                v685 = *((_QWORD *)v683 - 1);
                v683 -= 8;
                *((_QWORD *)v681 - 1) = v685;
                v681 -= 8;
              }
              while (v683 != v684);
              v683 = v856;
            }
            v856 = v681;
            v857 = v646;
            v858 = (unint64_t)v682;
            if (v683)
              operator delete(v683);
          }
          else
          {
            *(_QWORD *)v606 = v830;
            v646 = v606 + 8;
          }
          v857 = v646;
          if ((unint64_t)v646 >= v858)
          {
            v687 = (v646 - v856) >> 3;
            if ((unint64_t)(v687 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v688 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v688 <= v687 + 1)
              v688 = v687 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v689 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v689 = v688;
            if (v689)
              v690 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v689);
            else
              v690 = 0;
            v712 = &v690[8 * v687];
            v713 = &v690[8 * v689];
            *(_QWORD *)v712 = v829;
            v686 = v712 + 8;
            v715 = v856;
            v714 = v857;
            if (v857 != v856)
            {
              do
              {
                v716 = *((_QWORD *)v714 - 1);
                v714 -= 8;
                *((_QWORD *)v712 - 1) = v716;
                v712 -= 8;
              }
              while (v714 != v715);
              v714 = v856;
            }
            v856 = v712;
            v857 = v686;
            v858 = (unint64_t)v713;
            if (v714)
              operator delete(v714);
          }
          else
          {
            *(_QWORD *)v646 = v829;
            v686 = v646 + 8;
          }
          v857 = v686;
          if (v850)
          {
            v854 = (OZChannelBase *)((char *)this + 20152);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            v854 = (OZChannelBase *)((char *)this + 23160);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
            v686 = v857;
          }
          if ((unint64_t)v686 >= v858)
          {
            v718 = (v686 - v856) >> 3;
            if ((unint64_t)(v718 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v719 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v719 <= v718 + 1)
              v719 = v718 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v720 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v720 = v719;
            if (v720)
              v721 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v720);
            else
              v721 = 0;
            v801 = &v721[8 * v718];
            v802 = &v721[8 * v720];
            *(_QWORD *)v801 = v8;
            v717 = (OZChannel **)(v801 + 8);
            v804 = v856;
            v803 = v857;
            if (v857 != v856)
            {
              do
              {
                v805 = *((_QWORD *)v803 - 1);
                v803 -= 8;
                *((_QWORD *)v801 - 1) = v805;
                v801 -= 8;
              }
              while (v803 != v804);
              v803 = v856;
            }
            v856 = v801;
            v857 = (char *)v717;
            v858 = (unint64_t)v802;
            if (v803)
              operator delete(v803);
          }
          else
          {
            *(_QWORD *)v686 = v8;
            v717 = (OZChannel **)(v686 + 8);
          }
          v857 = (char *)v717;
          if ((unint64_t)v717 >= v858)
          {
            v807 = ((char *)v717 - v856) >> 3;
            if ((unint64_t)(v807 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v808 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v808 <= v807 + 1)
              v808 = v807 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v809 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v809 = v808;
            if (v809)
              v810 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v809);
            else
              v810 = 0;
            v822 = (OZChannel **)&v810[8 * v807];
            v823 = &v810[8 * v809];
            *v822 = v851;
            v806 = (char *)(v822 + 1);
            v825 = v856;
            v824 = v857;
            if (v857 != v856)
            {
              do
              {
                v826 = (OZChannel *)*((_QWORD *)v824 - 1);
                v824 -= 8;
                *--v822 = v826;
              }
              while (v824 != v825);
              v824 = v856;
            }
            v856 = (char *)v822;
            v857 = v806;
            v858 = (unint64_t)v823;
            if (v824)
              operator delete(v824);
          }
          else
          {
            *v717 = v851;
            v806 = (char *)(v717 + 1);
          }
          v857 = v806;
          if (OZChannel::getValueAsInt(v851, MEMORY[0x1E0CA2E68], 0.0))
          {
LABEL_1361:
            v854 = (OZChannelBase *)((char *)this + 31784);
            std::vector<OZChannelBase *>::push_back[abi:ne180100]((void **)&v856, &v854);
          }
        }
      }
      else
      {
        v33 = v857;
        if ((unint64_t)v857 >= v858)
        {
          v88 = (v857 - v856) >> 3;
          if ((unint64_t)(v88 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v89 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v89 <= v88 + 1)
            v89 = v88 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          if (v90)
            v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v90);
          else
            v91 = 0;
          v418 = &v91[8 * v88];
          v419 = &v91[8 * v90];
          *(_QWORD *)v418 = v846;
          v34 = v418 + 8;
          v421 = v856;
          v420 = v857;
          if (v857 != v856)
          {
            do
            {
              v422 = *((_QWORD *)v420 - 1);
              v420 -= 8;
              *((_QWORD *)v418 - 1) = v422;
              v418 -= 8;
            }
            while (v420 != v421);
            v420 = v856;
          }
          v856 = v418;
          v857 = (char *)v34;
          v858 = (unint64_t)v419;
          if (v420)
            operator delete(v420);
        }
        else
        {
          *(_QWORD *)v857 = v846;
          v34 = v33 + 8;
        }
        v857 = (char *)v34;
        v423 = v858;
        if (ValueAsInt == 8)
        {
          v424 = (OZChannel *)((char *)this + 23008);
          if ((unint64_t)v34 >= v858)
          {
            v425 = ((char *)v34 - v856) >> 3;
            if ((unint64_t)(v425 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v426 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v426 <= v425 + 1)
              v426 = v425 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v427 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v427 = v426;
            if (v427)
              v428 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v427);
            else
              v428 = 0;
            v538 = &v428[8 * v425];
            v539 = &v428[8 * v427];
            *(_QWORD *)v538 = v6;
            v34 = v538 + 8;
            v541 = v856;
            v540 = v857;
            if (v857 != v856)
            {
              do
              {
                v542 = *((_QWORD *)v540 - 1);
                v540 -= 8;
                *((_QWORD *)v538 - 1) = v542;
                v538 -= 8;
              }
              while (v540 != v541);
              v540 = v856;
            }
            v856 = v538;
            v857 = (char *)v34;
            v858 = (unint64_t)v539;
            if (v540)
              operator delete(v540);
          }
          else
          {
            *v34++ = v6;
          }
          v857 = (char *)v34;
          v423 = v858;
        }
        else
        {
          v424 = (OZChannel *)((char *)this + 23008);
        }
        if ((unint64_t)v34 >= v423)
        {
          v544 = ((char *)v34 - v856) >> 3;
          if ((unint64_t)(v544 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v545 = v423 - (_QWORD)v856;
          v546 = v545 >> 2;
          if (v545 >> 2 <= (unint64_t)(v544 + 1))
            v546 = v544 + 1;
          if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFF8)
            v547 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v547 = v546;
          if (v547)
            v548 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v547);
          else
            v548 = 0;
          v549 = &v548[8 * v544];
          v550 = &v548[8 * v547];
          *(_QWORD *)v549 = v834;
          v543 = v549 + 8;
          v552 = v856;
          v551 = v857;
          if (v857 != v856)
          {
            do
            {
              v553 = *((_QWORD *)v551 - 1);
              v551 -= 8;
              *((_QWORD *)v549 - 1) = v553;
              v549 -= 8;
            }
            while (v551 != v552);
            v551 = v856;
          }
          v856 = v549;
          v857 = (char *)v543;
          v858 = (unint64_t)v550;
          if (v551)
            operator delete(v551);
        }
        else
        {
          *v34 = v834;
          v543 = v34 + 1;
        }
        v857 = (char *)v543;
        v554 = v858;
        if (v850)
        {
          if ((unint64_t)v543 >= v858)
          {
            v556 = ((char *)v543 - v856) >> 3;
            if ((unint64_t)(v556 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v557 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v557 <= v556 + 1)
              v557 = v556 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v558 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v558 = v557;
            if (v558)
              v559 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v558);
            else
              v559 = 0;
            v560 = &v559[8 * v556];
            v561 = &v559[8 * v558];
            *(_QWORD *)v560 = v832;
            v555 = v560 + 8;
            v563 = v856;
            v562 = v857;
            if (v857 != v856)
            {
              do
              {
                v564 = *((_QWORD *)v562 - 1);
                v562 -= 8;
                *((_QWORD *)v560 - 1) = v564;
                v560 -= 8;
              }
              while (v562 != v563);
              v562 = v856;
            }
            v856 = v560;
            v857 = (char *)v555;
            v858 = (unint64_t)v561;
            if (v562)
              operator delete(v562);
          }
          else
          {
            *v543 = v832;
            v555 = v543 + 1;
          }
          v857 = (char *)v555;
          if ((unint64_t)v555 >= v858)
          {
            v565 = ((char *)v555 - v856) >> 3;
            if ((unint64_t)(v565 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v566 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v566 <= v565 + 1)
              v566 = v565 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v567 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v567 = v566;
            if (v567)
              v568 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v567);
            else
              v568 = 0;
            v569 = &v568[8 * v565];
            v570 = &v568[8 * v567];
            *(_QWORD *)v569 = v847;
            v543 = v569 + 8;
            v572 = v856;
            v571 = v857;
            if (v857 != v856)
            {
              do
              {
                v573 = *((_QWORD *)v571 - 1);
                v571 -= 8;
                *((_QWORD *)v569 - 1) = v573;
                v569 -= 8;
              }
              while (v571 != v572);
              v571 = v856;
            }
            v856 = v569;
            v857 = (char *)v543;
            v858 = (unint64_t)v570;
            if (v571)
              operator delete(v571);
          }
          else
          {
            *v555 = v847;
            v543 = v555 + 1;
          }
          v857 = (char *)v543;
          v554 = v858;
        }
        if ((unint64_t)v543 >= v554)
        {
          v575 = ((char *)v543 - v856) >> 3;
          if ((unint64_t)(v575 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v576 = v554 - (_QWORD)v856;
          v577 = v576 >> 2;
          if (v576 >> 2 <= (unint64_t)(v575 + 1))
            v577 = v575 + 1;
          if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF8)
            v578 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v578 = v577;
          if (v578)
            v579 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v578);
          else
            v579 = 0;
          v580 = &v579[8 * v575];
          v581 = &v579[8 * v578];
          *(_QWORD *)v580 = v835;
          v574 = (OZChannel **)(v580 + 8);
          v583 = v856;
          v582 = v857;
          if (v857 != v856)
          {
            do
            {
              v584 = *((_QWORD *)v582 - 1);
              v582 -= 8;
              *((_QWORD *)v580 - 1) = v584;
              v580 -= 8;
            }
            while (v582 != v583);
            v582 = v856;
          }
          v856 = v580;
          v857 = (char *)v574;
          v858 = (unint64_t)v581;
          if (v582)
            operator delete(v582);
        }
        else
        {
          *v543 = v835;
          v574 = (OZChannel **)(v543 + 1);
        }
        v857 = (char *)v574;
        if ((unint64_t)v574 >= v858)
        {
          v586 = ((char *)v574 - v856) >> 3;
          if ((unint64_t)(v586 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v587 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
          if (v587 <= v586 + 1)
            v587 = v586 + 1;
          if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
            v588 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v588 = v587;
          if (v588)
            v589 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v588);
          else
            v589 = 0;
          v590 = (OZChannel **)&v589[8 * v586];
          v591 = &v589[8 * v588];
          *v590 = v424;
          v585 = (char *)(v590 + 1);
          v593 = v856;
          v592 = v857;
          if (v857 != v856)
          {
            do
            {
              v594 = (OZChannel *)*((_QWORD *)v592 - 1);
              v592 -= 8;
              *--v590 = v594;
            }
            while (v592 != v593);
            v592 = v856;
          }
          v856 = (char *)v590;
          v857 = v585;
          v858 = (unint64_t)v591;
          if (v592)
            operator delete(v592);
        }
        else
        {
          *v574 = v424;
          v585 = (char *)(v574 + 1);
        }
        v857 = v585;
        if (OZChannel::getValueAsInt(v424, MEMORY[0x1E0CA2E68], 0.0))
        {
          v117 = v857;
          if ((unint64_t)v857 < v858)
          {
LABEL_1141:
            v176 = (char *)this + 31784;
LABEL_1142:
            *(_QWORD *)v117 = v176;
            v412 = v117 + 8;
          }
          else
          {
            v595 = (v857 - v856) >> 3;
            if ((unint64_t)(v595 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v596 = (uint64_t)(v858 - (_QWORD)v856) >> 2;
            if (v596 <= v595 + 1)
              v596 = v595 + 1;
            if (v858 - (unint64_t)v856 >= 0x7FFFFFFFFFFFFFF8)
              v597 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v597 = v596;
            if (v597)
              v598 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v858, v597);
            else
              v598 = 0;
            v410 = &v598[8 * v595];
            v411 = &v598[8 * v597];
            *(_QWORD *)v410 = v849;
            v412 = v410 + 8;
            v599 = v856;
            v413 = v857;
            if (v857 != v856)
            {
              do
              {
                v600 = *((_QWORD *)v413 - 1);
                v413 -= 8;
                *((_QWORD *)v410 - 1) = v600;
                v410 -= 8;
              }
              while (v413 != v599);
LABEL_1192:
              v413 = v856;
            }
LABEL_1193:
            v856 = v410;
            v857 = v412;
            v858 = (unint64_t)v411;
            if (v413)
              operator delete(v413);
          }
          v857 = v412;
        }
      }
      goto LABEL_1196;
  }
}

void sub_1B2FD3B6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1 - 112, *(_QWORD **)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t PSReplicator::createParticleType(PSReplicator *this, OZImageNode *a2)
{
  OZChannelBase *v3;
  const PCString *Name;
  const PCString *NextUniqueID;
  uint64_t ReplicatorPType;
  PCString v8;

  PCURL::PCURL((PCURL *)&v8, CFSTR("Particle Type Default Name"));
  if (a2)
  {
    if (v3)
    {
      Name = (const PCString *)OZObjectManipulator::getName((OZObjectManipulator *)&v3->var2);
      PCString::set(&v8, Name);
    }
  }
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v3);
  ReplicatorPType = PSReplicatorPType::createReplicatorPType((PSReplicatorPType *)&v8, NextUniqueID);
  (*(void (**)(uint64_t, PCString *, _QWORD))(*(_QWORD *)(ReplicatorPType + 16) + 120))(ReplicatorPType + 16, &v8, 0);
  PCString::~PCString(&v8);
  return ReplicatorPType;
}

void sub_1B2FD3E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL PSReplicator::isRenderingOldestParticleFirst(PSReplicator *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 31328), MEMORY[0x1E0CA2E68], 0.0) == 0;
}

uint64_t PSReplicator::shouldDrawEmissionPoints(PSReplicator *this)
{
  return 1;
}

uint64_t PSReplicator::getFillSeed(PSReplicator *this, PSParticleType *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 31784), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t PSReplicator::parseEnd(PSReplicator *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  OZChannel *v4;

  v3 = PSEmitter::parseEnd(this, a2);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 664))((char *)this + 200)+ 8)+ 8), (int32x4_t)xmmword_1B3561460)))) & 1) == 0)
  {
    v4 = (OZChannel *)((char *)this + 32944);
    if (OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0))
    {
      OZChannel::setDefaultValue(v4, 0.0);
      OZChannelBase::reset((OZChannelBase *)v4, 0);
    }
  }
  return v3;
}

uint64_t `non-virtual thunk to'PSReplicator::parseEnd(PSReplicator *this, PCSerializerReadStream *a2)
{
  return PSReplicator::parseEnd((PSReplicator *)((char *)this - 200), a2);
}

{
  return PSReplicator::parseEnd((PSReplicator *)((char *)this - 248), a2);
}

void PSReplicatorPType::PSReplicatorPType(PSReplicatorPType *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;

  PSParticleType::PSParticleType(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65E1130;
  *(_QWORD *)(v5 + 16) = &unk_1E65E17C0;
  *(_QWORD *)(v5 + 48) = &unk_1E65E1A18;
  *(_QWORD *)(v5 + 1088) = &unk_1E65E1A70;
  *(_QWORD *)(v5 + 1112) = &unk_1E65E1B48;
  *(_BYTE *)(v5 + 16976) = 0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Align Rotation"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2184), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Rotation"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2336), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Rotation End"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 3192), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Rotation Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 4208), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Color Mode Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 671, &v6, 1);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Color Over Order"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Solid Color"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 5624), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Random Color"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 7584), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Color Repetitions"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 7736), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Take Image Color"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 7888), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Scale"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 8040), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Scale End"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 8632), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Scale Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 9224), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Is Additive Blend"));
  OZChannelBase::setName((OZChannelBase *)this + 89, &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Animate Image"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10120), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Random Source Start Frame"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10272), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Source Start Frame"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10424), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Source Start Frame Offset"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10576), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Hold Frames"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10888), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Hold Frames Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11040), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Shape"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11344), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Shape Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 1418, &v6, 1);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Seed"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11600), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Point Size"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11752), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Image Node Ref"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 14392), &v6, 0);
  PCString::~PCString(&v6);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1120), 0.0);
  OZChannelBase::reset((OZChannelBase *)this + 10, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 8768), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 8920), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 9072), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 8632), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1576), 10000.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1576), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 10272), 0.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10272), 0);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Color Mode Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 671, &v6, 1);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Color Over Order"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), &v6, 0);
  PCString::~PCString(&v6);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11344), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11344));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1576), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1576));
  OZChannelBase::resetFlag((OZChannelBase *)this + 10, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 10);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1880), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1880));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5064), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5064));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8040), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8040));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8632), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8632));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9224), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9224));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2336), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2336));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3192), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3192));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4208), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 4208));
  OZChannelBase::setFlag((OZChannelBase *)this + 10, 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 10);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1272), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1272));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1424), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1424));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1576), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1576));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1728), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1728));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1880), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1880));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2032), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2032));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5064), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5064));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5216), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5216));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9816), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 9816));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11192), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11192));
  (*(void (**)(PSReplicatorPType *, uint64_t))(*(_QWORD *)this + 1528))(this, 1);
  PCString::PCString(&v6, "Channel Z", "com.apple.prochannel.framework");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), &v6, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Channel Z", "com.apple.prochannel.framework");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 3632), &v6, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Channel Z", "com.apple.prochannel.framework");
  OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v6, 0);
  PCString::~PCString(&v6);
}

void sub_1B2FD495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PSParticleType *v14;

  PCString::~PCString(&a14);
  PSParticleType::~PSParticleType(v14);
  _Unwind_Resume(a1);
}

void PSReplicatorPType::PSReplicatorPType(PSReplicatorPType *this, PSReplicatorPType *a2, char a3)
{
  uint64_t v4;

  PSParticleType::PSParticleType(this, a2, a3);
  *(_QWORD *)v4 = &off_1E65E1130;
  *(_QWORD *)(v4 + 16) = &unk_1E65E17C0;
  *(_QWORD *)(v4 + 48) = &unk_1E65E1A18;
  *(_QWORD *)(v4 + 1088) = &unk_1E65E1A70;
  *(_QWORD *)(v4 + 1112) = &unk_1E65E1B48;
  *(_BYTE *)(v4 + 16976) = *((_BYTE *)a2 + 16976);
}

void PSReplicatorPType::~PSReplicatorPType(PSReplicatorPType *this)
{
  *(_QWORD *)this = &off_1E65E1130;
  *((_QWORD *)this + 2) = &unk_1E65E17C0;
  *((_QWORD *)this + 6) = &unk_1E65E1A18;
  *((_QWORD *)this + 136) = &unk_1E65E1A70;
  *((_QWORD *)this + 139) = &unk_1E65E1B48;
  OZSystemSimulator::flushCache((PSReplicatorPType *)((char *)this + 15520), 1, 0);
  OZSystemSimulator::flushCache((PSReplicatorPType *)((char *)this + 15800), 1, 0);
  PSParticleType::~PSParticleType(this);
}

{
  PSReplicatorPType::~PSReplicatorPType(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSReplicatorPType::~PSReplicatorPType(PSReplicatorPType *this)
{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 16));
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 48));
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 1088));
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 1112));
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 1088));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicatorPType::~PSReplicatorPType((PSReplicatorPType *)((char *)this - 1112));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSReplicatorPType::createReplicatorPType(PSReplicatorPType *this, const PCString *a2)
{
  __int128 v3;

  v3 = xmmword_1B3564E90;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3, (uint64_t)this, (uint64_t)a2);
}

PSParticle *PSReplicatorPType::createParticle(PSReplicatorPType *this, unsigned int a2, const CMTime *a3)
{
  PSParticle *v5;
  CMTime v7;

  v5 = (PSParticle *)operator new();
  PSParticleType::simGetFirstFrame(this, (uint64_t)&v7);
  PSParticle::PSParticle(v5, a2, &v7);
  return v5;
}

void sub_1B2FD4CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40AE952B93);
  _Unwind_Resume(a1);
}

uint64_t PSReplicatorPType::getPreviewSceneNode(PSReplicatorPType *this)
{
  uint64_t v1;
  OZChannelBase *v2;
  uint64_t NextUniqueID;
  uint64_t SceneNode;
  PCString v6;
  __int128 v7;

  v1 = theApp;
  v7 = xmmword_1B3561460;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Name"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v2);
  SceneNode = OZApplication::createSceneNode(v1, (unsigned int *)&v7, (uint64_t)&v6, NextUniqueID);
  PCString::~PCString(&v6);
  return SceneNode;
}

void sub_1B2FD4D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t PSReplicatorPType::simAnythingToSimulate(PSReplicatorPType *this)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  void *v5;
  _QWORD *i;
  _QWORD *v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t *v11;

  v1 = (*(uint64_t (**)(PSReplicatorPType *))(*(_QWORD *)this + 640))(this);
  std::list<OZSimulationBehavior *>::list(&v10, v1 + 224);
  v2 = v11;
  if (v11 != &v10)
  {
    v3 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2[2] + 16) + 24))(v2[2] + 16, 0, 1))
      {
        if (v3 > 0)
          goto LABEL_19;
        ++v3;
      }
      v2 = (uint64_t *)v2[1];
    }
    while (v2 != &v10);
  }
  v4 = *(_QWORD *)(v1 + 48);
  if (v4)
  {
    while (1)
    {
      if ((*(_BYTE *)(v4 + 57) & 0x20) != 0)
      {
        if (v5)
          break;
      }
LABEL_16:
      v4 = *(_QWORD *)(v4 + 48);
      if (!v4)
        goto LABEL_20;
    }
    std::list<OZSimulationBehavior *>::list(v9, (uint64_t)v5 + 224);
    for (i = (_QWORD *)v9[1]; ; i = (_QWORD *)i[1])
    {
      if (i == v9)
      {
        std::__list_imp<unsigned int>::clear(v9);
        goto LABEL_16;
      }
      v7 = (_QWORD *)i[2];
      if (((*(uint64_t (**)(_QWORD *))(*v7 + 656))(v7) & 1) == 0
        && ((*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v7[2] + 24))(v7 + 2, 0, 1) & 1) != 0)
      {
        break;
      }
    }
    std::__list_imp<unsigned int>::clear(v9);
LABEL_19:
    v4 = 1;
  }
LABEL_20:
  std::__list_imp<unsigned int>::clear(&v10);
  return v4;
}

void sub_1B2FD4EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSReplicatorPType::simAnythingToSimulate(PSReplicatorPType *this)
{
  return PSReplicatorPType::simAnythingToSimulate((PSReplicatorPType *)((char *)this - 1112));
}

uint64_t PSReplicatorPType::simShouldCache(PSReplicatorPType *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'PSReplicatorPType::simShouldCache(PSReplicatorPType *this)
{
  return 1;
}

uint64_t PSReplicatorPType::simShouldStepFromCache(PSReplicatorPType *this)
{
  return *((unsigned __int8 *)this + 16976);
}

uint64_t `non-virtual thunk to'PSReplicatorPType::simShouldStepFromCache(PSReplicatorPType *this)
{
  return *((unsigned __int8 *)this + 15864);
}

void PSReplicatorPType::simGetFirstFrame(PSReplicatorPType *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTimeEpoch epoch;
  __int128 v5;
  CMTimeEpoch v6;

  if (*((_BYTE *)this + 16976))
  {
    PSParticleType::simGetFirstFrame(this, (uint64_t)&v5);
    *(_OWORD *)a3 = v5;
    epoch = v6;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
  }
  *(_QWORD *)(a3 + 16) = epoch;
}

void `non-virtual thunk to'PSReplicatorPType::simGetFirstFrame(PSReplicatorPType *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTimeEpoch epoch;
  __int128 v5;
  CMTimeEpoch v6;

  if (*((_BYTE *)this + 15864))
  {
    PSParticleType::simGetFirstFrame((PSReplicatorPType *)((char *)this - 1112), (uint64_t)&v5);
    *(_OWORD *)a3 = v5;
    epoch = v6;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
  }
  *(_QWORD *)(a3 + 16) = epoch;
}

PSEmitter *PSReplicatorPType::simFlushedCache(PSEmitter **this, OZSystemSimulator *a2)
{
  PSEmitter *result;

  PSParticleType::simFlushedCache((PSParticleType *)this, a2);
  result = this[2054];
  if (result
  {
    result = (PSEmitter *)PSEmitter::simulatingAnyParticleTypes(result);
    *((_BYTE *)this + 16976) = (_BYTE)result;
  }
  else
  {
    *((_BYTE *)this + 16976) = 0;
  }
  return result;
}

PSEmitter *`non-virtual thunk to'PSReplicatorPType::simFlushedCache(PSEmitter **this, OZSystemSimulator *a2)
{
  return PSReplicatorPType::simFlushedCache(this - 139, a2);
}

void PSReplicatorPType::updateGradientStringName(PSReplicatorPType *this, char a2)
{
  uint64_t v4;
  OZNotificationManager *v5;
  PCSharedCount v6;

  if ((a2 & 1) == 0)
  {
    if ((*(uint64_t (**)(PSReplicatorPType *))(*(_QWORD *)this + 272))(this))
    {
      v4 = *(_QWORD *)((*(uint64_t (**)(PSReplicatorPType *))(*(_QWORD *)this + 272))(this) + 1584);
      if (v4)
      {
        v5 = *(OZNotificationManager **)(v4 + 168);
        if (!v5 || !OZNotificationManager::wasChannelModified(v5, (const OZChannelBase *)((char *)this + 6784)))
        {
          PCSharedCount::PCSharedCount(&v6);
          OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6);
          PCString::~PCString((PCString *)&v6);
        }
      }
    }
  }
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
    case 1u:
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6912), 2, a2);
      PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Opacity Over Order"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6, 0);
      goto LABEL_11;
    case 2u:
      PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator PType Color Over Order"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6, 0);
      goto LABEL_11;
    case 3u:
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6912), 2, a2);
      PCURL::PCURL((PCURL *)&v6, CFSTR("Emitter Color Range"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v6, 0);
LABEL_11:
      PCString::~PCString((PCString *)&v6);
      break;
    default:
      return;
  }
}

void sub_1B2FD5268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSReplicatorPType::updateRotationStringNames(PSReplicatorPType *this)
{
  uint64_t v2;
  PCString v3;

  v2 = *((_QWORD *)this + 2054);
  if (v2 && !OZChannel::getValueAsInt((OZChannel *)(v2 + 32792), MEMORY[0x1E0CA2E68], 0.0))
  {
    PCURL::PCURL((PCURL *)&v3, CFSTR("Particle Type Rotation"));
    OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), &v3, 1);
    PCString::~PCString(&v3);
    PCURL::PCURL((PCURL *)&v3, CFSTR("Particle Type Rotation End"));
    OZChannelBase::setName((OZChannelBase *)((char *)this + 3632), &v3, 1);
    PCString::~PCString(&v3);
    PCURL::PCURL((PCURL *)&v3, CFSTR("Particle Type Rotation Variance"));
    OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v3, 1);
  }
  else
  {
    PCString::PCString(&v3, "Channel Z", "com.apple.prochannel.framework");
    OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), &v3, 1);
    PCString::~PCString(&v3);
    PCString::PCString(&v3, "Channel Z", "com.apple.prochannel.framework");
    OZChannelBase::setName((OZChannelBase *)((char *)this + 3632), &v3, 1);
    PCString::~PCString(&v3);
    PCString::PCString(&v3, "Channel Z", "com.apple.prochannel.framework");
    OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v3, 1);
  }
  PCString::~PCString(&v3);
}

void sub_1B2FD542C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSReplicatorPType::getInitialParticleColor(PSReplicatorPType *this, const CMTime *a2, PSParticle *a3, int a4, PCColor *a5)
{
  unsigned int ValueAsInt;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  float Alpha;
  __int128 v23;
  float v24;
  float v25;
  PCColor v26;
  float v27[4];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), a2, 0.0);
  v11 = ValueAsInt;
  if (ValueAsInt == 3)
  {
    v17 = *((_DWORD *)this + 1902);
    v18 = (*(uint64_t (**)(PSParticle *))(*(_QWORD *)a3 + 32))(a3);
    v19 = -32;
    v20 = -1640531527;
    do
    {
      v18 += (a4 + 16 * v17) ^ (v17 + v20) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1 + (v17 >> 5));
      v17 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v18) ^ (v20 + v18) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v18 >> 5));
      v20 -= 1640531527;
    }
    while (!__CFADD__(v19++, 1));
    Alpha = PCColor::getAlpha(a5);
    PCColor::PCColor(&v26);
    OZChannelGradient::getColor((uint64_t **)this + 848, a2, (double)(v17 ^ v18) / 4294967300.0, &v26);
    v23 = *(_OWORD *)&v26.var0.var1[1];
    *(_OWORD *)&a5->var0.var0 = *(_OWORD *)&v26.var0.var0;
    *(_OWORD *)&a5->var0.var1[1] = v23;
    *(_OWORD *)&a5->var0.var1[3] = *(_OWORD *)&v26.var0.var1[3];
    PCCFRef<CGColorSpace *>::operator=(&a5->var1._obj, &v26.var1._obj);
    if ((int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 14704), MEMORY[0x1E0CA2E68], 0.0) <= 2)
      PCColor::setAlpha(a5, Alpha);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v26.var1._obj);
  }
  else
  {
    if (ValueAsInt == 2)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7736), a2, 0.0);
      v13 = v12 + 1.0;
      if (v13 < 1.0)
        v13 = 1.0;
      v14 = *((double *)a3 + 21) * v13;
      *(_QWORD *)&v26.var0.var0 = 0;
      modf(v14 + -0.0001, (long double *)&v26.var0.var0);
      v15 = *(double *)&v26.var0.var0;
      PCColor::PCColor(&v26);
      OZChannelGradient::getColor((uint64_t **)this + 848, a2, v14 - v15, &v26);
      v16 = *(_OWORD *)&v26.var0.var1[1];
      *(_OWORD *)&a5->var0.var0 = *(_OWORD *)&v26.var0.var0;
      *(_OWORD *)&a5->var0.var1[1] = v16;
      *(_OWORD *)&a5->var0.var1[3] = *(_OWORD *)&v26.var0.var1[3];
      PCCFRef<CGColorSpace *>::operator=(&a5->var1._obj, &v26.var1._obj);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v26.var1._obj);
      return;
    }
    PSParticleType::getInitialParticleColor(this, a2, a3, a4, a5);
  }
  if (v11 <= 1)
  {
    v26.var0.var1[1] = 0.0;
    *(_OWORD *)&v26.var0.var0 = (unint64_t)v26.var0.var1;
    (*(void (**)(char *, const CMTime *, PCColor *))(*((_QWORD *)this + 880) + 728))((char *)this + 7040, a2, &v26);
    (*(void (**)(char *, float *, PCColor *, double))(*((_QWORD *)this + 880) + 736))((char *)this + 7040, v27, &v26, *((double *)a3 + 21));
    v24 = v27[0];
    v25 = PCColor::getAlpha(a5);
    PCColor::setAlpha(a5, v24 * v25);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v26, *(_QWORD **)&v26.var0.var1[0]);
  }
}

void sub_1B2FD5740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

CGColorSpace **PSReplicatorPType::getParticleColor(PSReplicatorPType *this, const CMTime *a2, PSParticle *a3, PSEmitter *a4, PCWorkingColor *a5)
{
  __int128 v10;
  float Alpha;
  CGColorSpace *v12;
  float v13;
  uint64_t v14;
  double v15;
  _BYTE v17[32];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGColorSpace *v21[9];
  PCColor v22;

  PCColor::PCColor(&v22);
  v10 = *((_OWORD *)a3 + 8);
  *(_OWORD *)&v22.var0.var0 = *((_OWORD *)a3 + 7);
  *(_OWORD *)&v22.var0.var1[1] = v10;
  *(_OWORD *)&v22.var0.var1[3] = *((_OWORD *)a3 + 9);
  PCCFRef<CGColorSpace *>::operator=(&v22.var1._obj, (CGColorSpace **)a3 + 20);
  Alpha = PCColor::getAlpha(&v22);
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)v17);
  v18 = *(_OWORD *)&v22.var0.var0;
  v19 = *(_OWORD *)&v22.var0.var1[1];
  v20 = *(_OWORD *)&v22.var0.var1[3];
  PCCFRef<CGColorSpace *>::operator=(v21, &v22.var1._obj);
  (*(void (**)(PSReplicatorPType *, const CMTime *, PSParticle *, _BYTE *))(*(_QWORD *)this + 1616))(this, a2, a3, v17);
  *(_OWORD *)&v22.var0.var0 = v18;
  *(_OWORD *)&v22.var0.var1[1] = v19;
  *(_OWORD *)&v22.var0.var1[3] = v20;
  PCCFRef<CGColorSpace *>::operator=(&v22.var1._obj, v21);
  v12 = v21[1];
  PSEmitter::tintColor(a4, a2, &v22);
  v13 = *(double *)&v12 * Alpha;
  v14 = *((_QWORD *)this + 2063);
  if (v14)
  {
    OZChannel::getValueAsDouble((OZChannel *)(v14 + 6680), a2, 0.0);
    v13 = v15 * v13;
  }
  PCColor::setAlpha(&v22, v13);
  PCWorkingColor::operator=((uint64_t)a5, &v22.var0.var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(v21);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v22.var1._obj);
}

void sub_1B2FD58EC(_Unwind_Exception *a1)
{
  CGColorSpace **v1;
  CGColorSpace **v2;

  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t PSReplicatorPType::simAddObjects(PSReplicatorPType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  uint64_t v7;
  int32_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t NumEmissionPoints;
  unsigned int v14;
  uint64_t v15;
  char *ParticlesForSimStyleType;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  CMTime v22;
  __n128 v23;
  CMTimeEpoch v24;
  CMTime time1;
  CMTime v26;
  CMTime v27;
  CMTime time2;

  v27 = *(CMTime *)((_BYTE *)a3 + 1);
  if (!(*(unsigned int (**)(PSReplicatorPType *))(*(_QWORD *)this + 1656))(this))
    goto LABEL_7;
  (*(void (**)(CMTime *__return_ptr, PSReplicatorPType *))(*(_QWORD *)this + 1128))(&time1, this);
  v26 = time1;
  v23 = 0uLL;
  v24 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), &v23);
  time1 = v27;
  time2 = v26;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
  time1 = v22;
  *(__n128 *)&time2.value = v23;
  time2.epoch = v24;
  v8 = CMTimeCompare(&time1, &time2);
  v9 = (uint64_t *)*((_QWORD *)this + 2045);
  v10 = (uint64_t *)*((_QWORD *)this + 2046);
  if (v8 < 0 && v9 == v10)
    goto LABEL_7;
  if (v9 == v10)
    return 0;
  v11 = *v9;
  v12 = *(_OWORD *)(v11 + 8);
  time1.epoch = *(_QWORD *)(v11 + 24);
  *(_OWORD *)&time1.value = v12;
  time2 = v27;
  if (CMTimeCompare(&time1, &time2))
    return 0;
LABEL_7:
  NumEmissionPoints = PSEmitter::getNumEmissionPoints(*((PSEmitter **)this + 2054), &v27);
  if ((int)NumEmissionPoints >= 1)
  {
    if ((PSReplicatorPType *)((char *)this + 15800) == a2)
      v14 = 1;
    else
      v14 = 2;
    if ((PSReplicatorPType *)((char *)this + 15520) == a2)
      v15 = 0;
    else
      v15 = v14;
    ParticlesForSimStyleType = PSParticleType::getParticlesForSimStyleType(this, v15);
    if (!(*(unsigned int (**)(PSReplicatorPType *))(*(_QWORD *)this + 1656))(this))
      ParticlesForSimStyleType = 0;
    std::vector<OZSimStateElement>::resize((uint64_t *)a3, NumEmissionPoints - 1108378657 * ((*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 3));
    if (!ParticlesForSimStyleType
      || (v18 = *(uint64_t **)ParticlesForSimStyleType,
          v17 = (uint64_t *)*((_QWORD *)ParticlesForSimStyleType + 1),
          v17 == *(uint64_t **)ParticlesForSimStyleType))
    {
      PSParticleType::createParticles((uint64_t)this, ParticlesForSimStyleType, NumEmissionPoints, (uint64_t *)a3);
    }
    else
    {
      v19 = (_QWORD *)(*(_QWORD *)a3 + 232);
      do
      {
        v20 = *v18++;
        *v19 = v20;
        v19 += 31;
      }
      while (v18 != v17);
    }
    PSEmitter::initParticles(*((PSEmitter **)this + 2054), v15, this, NumEmissionPoints, 0, a3);
  }
  return NumEmissionPoints;
}

uint64_t `non-virtual thunk to'PSReplicatorPType::simAddObjects(PSReplicatorPType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  return PSReplicatorPType::simAddObjects((PSReplicatorPType *)((char *)this - 1112), a2, a3, a4);
}

void PSEmitterMoToFoBehavior::PSEmitterMoToFoBehavior(PSEmitterMoToFoBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E65E1C18;
  *(_QWORD *)(v4 + 16) = &unk_1E65E1F10;
  *(_QWORD *)(v4 + 48) = &unk_1E65E2168;
  OZChannelBase::setFlag((OZChannelBase *)(v4 + 56), 10, 0);
}

void sub_1B2FD5BAC(_Unwind_Exception *a1)
{
  OZSimSystemMoToFoBehavior *v1;

  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(v1);
  _Unwind_Resume(a1);
}

void PSEmitterMoToFoBehavior::PSEmitterMoToFoBehavior(PSEmitterMoToFoBehavior *this, PSEmitterMoToFoBehavior *a2, char a3)
{
  _QWORD *v5;
  unsigned int v6;

  OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(this, a2, a3);
  *v5 = &off_1E65E1C18;
  v5[2] = &unk_1E65E1F10;
  v5[6] = &unk_1E65E2168;
  if ((a3 & 0x20) != 0)
  {
    v6 = OZSimulationBehavior::_MTF_IDGenerator--;
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), v6);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
}

void sub_1B2FD5C38(_Unwind_Exception *a1)
{
  OZSimSystemMoToFoBehavior *v1;

  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSEmitterMoToFoBehavior::~PSEmitterMoToFoBehavior(PSEmitterMoToFoBehavior *this)
{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((PSEmitterMoToFoBehavior *)((char *)this - 16));
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((PSEmitterMoToFoBehavior *)((char *)this - 48));
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((PSEmitterMoToFoBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((PSEmitterMoToFoBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

void PSEmitterMoToFoBehavior::~PSEmitterMoToFoBehavior(PSEmitterMoToFoBehavior *this)
{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PSEmitterMoToFoBehavior::operator=(uint64_t a1)
{
  uint64_t result;

  result = OZSimSystemMoToFoBehavior::operator=(a1);
  *(_QWORD *)(a1 + 1088) = 0;
  return result;
}

uint64_t PSEmitterMoToFoBehavior::didAddToNode(PSEmitterMoToFoBehavior *this, OZSceneNode *lpsrc)
{
  void *v4;

  if (lpsrc)
  else
    v4 = 0;
  *((_QWORD *)this + 136) = v4;
  return OZSimSystemMoToFoBehavior::didAddToNode(this, lpsrc);
}

void *PSEmitterMoToFoBehavior::getParentTransformNode(PSEmitterMoToFoBehavior *this)
{
  uint64_t v1;
  const void *v2;

  v1 = (*(uint64_t (**)(PSEmitterMoToFoBehavior *))(*(_QWORD *)this + 320))(this);
  if (v1 && (v2 = *(const void **)(v1 + 960)) != 0)
  else
    return 0;
}

void PSEmitterMoToFoBehavior::getAttachToParentFraction(PSParticleType **this, CMTime *a2)
{
  PSParticleType::getAttachToEmitter(this[136], a2);
}

void PSScaleOverLifeBehavior::PSScaleOverLifeBehavior(PSScaleOverLifeBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *v6;
  OZChannelImpl *Instance;
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *v8;
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *v9;
  OZChannelInfo *v10;
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *v11;
  OZChannelInfo *v12;
  CMTime v13;
  PCString v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  OZBehavior::OZBehavior(this, a2, a3, a4);
  *v5 = &off_1E65E21D8;
  v5[2] = &unk_1E65E2458;
  v5[6] = &unk_1E65E26B0;
  PCURL::PCURL((PCURL *)&v13, CFSTR("Scale Over Life Behavior Increment Type Enum"));
  PCURL::PCURL((PCURL *)v14, CFSTR("Scale Over Life Behavior Increment Type"));
  Instance = (OZChannelImpl *)PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::getInstance(v6);
  OZChannelEnum::OZChannelEnum((PSScaleOverLifeBehavior *)((char *)this + 336), 3u, (const PCString *)&v13, v14, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, Instance, 0);
  PCString::~PCString(v14);
  PCString::~PCString((PCString *)&v13);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Scale Over Life Behavior Scale Rate"));
  v9 = (PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *)PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::getInstance(v8);
  v10 = (OZChannelInfo *)PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::getInstance(v9);
  OZChannel3D::OZChannel3D((PSScaleOverLifeBehavior *)((char *)this + 592), 0.2, 0.2, 0.2, (const PCString *)&v13, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 2u, (OZChannelImpl *)v9, v10);
  PCString::~PCString((PCString *)&v13);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Scale Over Life Behavior Begin Scale"));
  OZChannelScale3D::OZChannelScale3D((PSScaleOverLifeBehavior *)((char *)this + 1184), 0.0, 0.0, 0.0, (const PCString *)&v13, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0);
  PCString::~PCString((PCString *)&v13);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Scale Over Life Behavior End Scale"));
  OZChannelScale3D::OZChannelScale3D((PSScaleOverLifeBehavior *)((char *)this + 1776), 1.0, 1.0, 1.0, (const PCString *)&v13, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0);
  PCString::~PCString((PCString *)&v13);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Scale Over Life Behavior Custom Scale"));
  v12 = (OZChannelInfo *)PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::getInstance(v11);
  OZChannelScaleOverRange::OZChannelScaleOverRange((PSScaleOverLifeBehavior *)((char *)this + 2368), (const PCString *)&v13, (OZChannelFolder *)((char *)this + 56), 0xC8u, 2u, 0, v12);
  PCString::~PCString((PCString *)&v13);
  *(_OWORD *)&v14[0].var0 = xmmword_1B3054280;
  OZChannelEnum::setTags((PSScaleOverLifeBehavior *)((char *)this + 336), (char *)v14, 4);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2368), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2368));
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 313) + 728))((char *)this + 2504, MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v13, 1.0, 0x40000);
  (*(void (**)(char *, CMTime *))(*((_QWORD *)this + 313) + 728))((char *)this + 2504, &v13);
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 332) + 728))((char *)this + 2656, MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v13, 1.0, 0x40000);
  (*(void (**)(char *, CMTime *))(*((_QWORD *)this + 332) + 728))((char *)this + 2656, &v13);
  PCURL::PCURL((PCURL *)&v13, CFSTR("Scale Over Life Behavior Over Life"));
  PCString::set((PCString *)this + 351, (const PCString *)&v13);
  PCString::~PCString((PCString *)&v13);
  OZChannelScaleOverRange::setValueOverRange((PSScaleOverLifeBehavior *)((char *)this + 2368), 0.0, 0.0, 0.0, 0.0);
}

void sub_1B2FD60FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, PCString a13)
{
  OZBehavior *v13;
  OZChannelEnum *v14;
  OZChannel3D *v15;
  OZChannelScale3D *v16;
  OZChannelScale3D *v17;
  PCString *v18;

  PCString::~PCString(&a10);
  OZChannelScaleOverRange::~OZChannelScaleOverRange(v18);
  OZChannelScale3D::~OZChannelScale3D(v17);
  OZChannelScale3D::~OZChannelScale3D(v16);
  OZChannel3D::~OZChannel3D(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZBehavior::~OZBehavior(v13);
  _Unwind_Resume(a1);
}

void PSScaleOverLifeBehavior::PSScaleOverLifeBehavior(PSScaleOverLifeBehavior *this, const PSScaleOverLifeBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelEnum *v6;
  OZChannelFolder *v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZBehavior::OZBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65E21D8;
  *(_QWORD *)(v5 + 16) = &unk_1E65E2458;
  *(_QWORD *)(v5 + 48) = &unk_1E65E26B0;
  v6 = (OZChannelEnum *)(v5 + 336);
  v7 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 336), (const PSScaleOverLifeBehavior *)((char *)a2 + 336), (OZChannelFolder *)(v5 + 56));
  OZChannel3D::OZChannel3D((PSScaleOverLifeBehavior *)((char *)this + 592), (const PSScaleOverLifeBehavior *)((char *)a2 + 592), v7);
  OZChannelScale3D::OZChannelScale3D((PSScaleOverLifeBehavior *)((char *)this + 1184), (const PSScaleOverLifeBehavior *)((char *)a2 + 1184), v7);
  OZChannelScale3D::OZChannelScale3D((PSScaleOverLifeBehavior *)((char *)this + 1776), (const PSScaleOverLifeBehavior *)((char *)a2 + 1776), v7);
  OZChannelScaleOverRange::OZChannelScaleOverRange((PSScaleOverLifeBehavior *)((char *)this + 2368), (const PSScaleOverLifeBehavior *)((char *)a2 + 2368), v7);
  v8 = xmmword_1B3054280;
  OZChannelEnum::setTags(v6, (char *)&v8, 4);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2368), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2368));
}

void sub_1B2FD6310(_Unwind_Exception *a1)
{
  OZBehavior *v1;
  OZChannelEnum *v2;
  OZChannel3D *v3;
  OZChannelScale3D *v4;
  OZChannelScale3D *v5;

  OZChannelScale3D::~OZChannelScale3D(v5);
  OZChannelScale3D::~OZChannelScale3D(v4);
  OZChannel3D::~OZChannel3D(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior(PSScaleOverLifeBehavior *this)
{
  OZChannel2D *v2;

  *(_QWORD *)this = &off_1E65E21D8;
  *((_QWORD *)this + 2) = &unk_1E65E2458;
  *((_QWORD *)this + 6) = &unk_1E65E26B0;
  v2 = (PSScaleOverLifeBehavior *)((char *)this + 2368);
  *((_QWORD *)this + 296) = &off_1E655E880;
  *((_QWORD *)this + 298) = &unk_1E655EBF8;
  PCString::~PCString((PCString *)this + 351);
  OZChannel2D::~OZChannel2D(v2);
  *((_QWORD *)this + 222) = &off_1E6560F48;
  *((_QWORD *)this + 224) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2216));
  OZChannel2D::~OZChannel2D((PSScaleOverLifeBehavior *)((char *)this + 1776));
  *((_QWORD *)this + 148) = &off_1E6560F48;
  *((_QWORD *)this + 150) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1624));
  OZChannel2D::~OZChannel2D((PSScaleOverLifeBehavior *)((char *)this + 1184));
  *((_QWORD *)this + 74) = &off_1E65568E0;
  *((_QWORD *)this + 76) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1032));
  OZChannel2D::~OZChannel2D((PSScaleOverLifeBehavior *)((char *)this + 592));
  OZChannelEnum::~OZChannelEnum((PSScaleOverLifeBehavior *)((char *)this + 336));
  OZBehavior::~OZBehavior(this);
}

{
  PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior(PSScaleOverLifeBehavior *this)
{
  PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior((PSScaleOverLifeBehavior *)((char *)this - 16));
}

{
  PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior((PSScaleOverLifeBehavior *)((char *)this - 48));
}

{
  PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior((PSScaleOverLifeBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSScaleOverLifeBehavior::~PSScaleOverLifeBehavior((PSScaleOverLifeBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

void PSScaleOverLifeBehavior::operator=(PCString *a1, const void *a2)
{
  const PCString *v4;
  const PCString *v5;

  OZBehavior::operator=((uint64_t)a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=((uint64_t)&a1[42], (uint64_t)&v4[42]);
  OZChannelFolder::operator=((uint64_t)&a1[74]);
  OZChannelBase::operator=((uint64_t)&a1[91], (uint64_t)&v5[91]);
  OZChannelBase::operator=((uint64_t)&a1[110], (uint64_t)&v5[110]);
  OZChannelBase::operator=((uint64_t)&a1[129], (uint64_t)&v5[129]);
  OZChannelFolder::operator=((uint64_t)&a1[148]);
  OZChannelBase::operator=((uint64_t)&a1[165], (uint64_t)&v5[165]);
  OZChannelBase::operator=((uint64_t)&a1[184], (uint64_t)&v5[184]);
  OZChannelBase::operator=((uint64_t)&a1[203], (uint64_t)&v5[203]);
  OZChannelFolder::operator=((uint64_t)&a1[222]);
  OZChannelBase::operator=((uint64_t)&a1[239], (uint64_t)&v5[239]);
  OZChannelBase::operator=((uint64_t)&a1[258], (uint64_t)&v5[258]);
  OZChannelBase::operator=((uint64_t)&a1[277], (uint64_t)&v5[277]);
  OZChannelFolder::operator=((uint64_t)&a1[296]);
  OZChannelBase::operator=((uint64_t)&a1[313], (uint64_t)&v5[313]);
  OZChannelBase::operator=((uint64_t)&a1[332], (uint64_t)&v5[332]);
  PCString::set(a1 + 351, v5 + 351);
}

unint64_t PSScaleOverLifeBehavior::canAddToSceneNode(PSScaleOverLifeBehavior *this, OZSceneNode *a2)
{
  unint64_t v3;
  unint64_t result;
  char *v5;
  OZChannel *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = *(_QWORD *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2) + 8);
  v11 = xmmword_1B355E430;
  if (OZFactory::isKindOfClass(v3, (int32x4_t *)&v11))
  {
    v10 = xmmword_1B3564E90;
    if (!OZFactory::isKindOfClass(v3, (int32x4_t *)&v10))
      return 1;
  }
  v9 = xmmword_1B3561450;
  if (OZFactory::isKindOfClass(v3, (int32x4_t *)&v9))
  {
    v8 = xmmword_1B3561460;
    if (!OZFactory::isKindOfClass(v3, (int32x4_t *)&v8))
      return 1;
  }
  v7 = xmmword_1B355CCA0;
  result = OZFactory::isKindOfClass(v3, (int32x4_t *)&v7);
  if (!(_DWORD)result)
    return result;
  if (!OZChannelBase::isEnabled((OZChannelBase *)(v5 + 25776), 0, 1)
    || (OZChannelBase::isEnabled((OZChannelBase *)(v5 + 21760), 0, 1) & 1) != 0)
  {
    return 0;
  }
  v6 = (OZChannel *)(v5 + 25904);
  result = OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result == 1)
    return result;
  return OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 2;
}

BOOL PSScaleOverLifeBehavior::isRebuildUIChannel(PSScaleOverLifeBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 336) == a2;
}

OZChannelBase *PSScaleOverLifeBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  const CMTime *v6;
  char *v7;
  int v8;
  uint64_t i;
  const void *v10;
  char *v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;

  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 336), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v7 = *(char **)(v4 + 16);
      if (v7)
      result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 336), v6, 0.0);
      v8 = (int)result;
      if (v5 != (_DWORD)result)
        break;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      v10 = *(const void **)(i + 16);
      if (v10)
      else
        v11 = 0;
      v12 = (OZChannelBase *)(v11 + 592);
      OZChannelBase::resetFlag((OZChannelBase *)(v11 + 592), 2, 1);
      v13 = (OZChannelBase *)(v11 + 1184);
      OZChannelBase::resetFlag((OZChannelBase *)(v11 + 1184), 2, 1);
      v14 = (OZChannelBase *)(v11 + 1776);
      OZChannelBase::resetFlag((OZChannelBase *)(v11 + 1776), 2, 1);
      v15 = (OZChannelBase *)(v11 + 2368);
      result = OZChannelBase::resetFlag(v15, 2, 1);
      if (v5 == v8)
      {
        if (!v5)
        {
          OZChannelBase::resetFlag(v12, 0x400000, 1);
          OZChannelBase::setFlag(v13, 0x400000, 1);
          OZChannelBase::setFlag(v14, 0x400000, 1);
          goto LABEL_18;
        }
        if ((v5 & 0xFFFFFFFD) == 1)
        {
          OZChannelBase::setFlag(v12, 0x400000, 1);
          OZChannelBase::resetFlag(v13, 0x400000, 1);
          OZChannelBase::resetFlag(v14, 0x400000, 1);
LABEL_18:
          result = OZChannelBase::setFlag(v15, 0x400000, 1);
          continue;
        }
        if (v5 != 2)
          continue;
        OZChannelBase::setFlag(v12, 0x400000, 1);
        OZChannelBase::setFlag(v13, 0x400000, 1);
        OZChannelBase::setFlag(v14, 0x400000, 1);
      }
      else
      {
        OZChannelBase::resetFlag(v12, 0x400000, 1);
        OZChannelBase::resetFlag(v13, 0x400000, 1);
        OZChannelBase::resetFlag(v14, 0x400000, 1);
      }
      result = OZChannelBase::resetFlag(v15, 0x400000, 1);
    }
  }
  return result;
}

uint64_t PSScaleOverLifeBehavior::parseBegin(PSScaleOverLifeBehavior *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 2504), 0.2);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 2656), 0.2);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 2368), 0);
  }
  return OZBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'PSScaleOverLifeBehavior::parseBegin(PSScaleOverLifeBehavior *this, PCSerializerReadStream *a2)
{
  return PSScaleOverLifeBehavior::parseBegin((PSScaleOverLifeBehavior *)((char *)this - 48), a2);
}

uint64_t PSScaleOverLifeBehavior::parseEnd(PSScaleOverLifeBehavior *this, PCSerializerReadStream *a2)
{
  double v4;
  uint64_t v5;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime time2;
  CMTime time1;

  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    (*(void (**)(CMTime *__return_ptr, PSScaleOverLifeBehavior *))(*(_QWORD *)this + 608))(&v11, this);
    time1 = v12;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2) < 1)
    {
      v4 = 1.0;
    }
    else
    {
      v10 = v12;
      v9 = *(CMTime *)((char *)a2 + 112);
      v4 = 1.0 / (double)PC_CMTimeGetSampleNumber(&v10, &v9);
    }
    v5 = (*(uint64_t (**)(PSScaleOverLifeBehavior *))(*(_QWORD *)this + 312))(this);
    (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v5 + 320))(&v7);
    time2 = v11;
    time1 = v7;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
    operator*(&v8, &time1, v4);
    v8 = time1;
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 2504), v4, &v8);
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 2656), v4, &v8);
  }
  return OZBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'PSScaleOverLifeBehavior::parseEnd(PSScaleOverLifeBehavior *this, PCSerializerReadStream *a2)
{
  return PSScaleOverLifeBehavior::parseEnd((PSScaleOverLifeBehavior *)((char *)this - 48), a2);
}

void PSScaleOverLifeBehavior::getScale(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t a4)
{
  double v8;
  double v9;
  double v10;
  Float64 Seconds;
  Float64 v12;
  Float64 v13;
  double v18;
  double v19;
  const CMTime *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v31;
  double v32;
  double v33;
  long double v34;
  long double v35;
  long double v36;
  long double v37;
  long double v38;
  long double v39;
  long double v40;
  double v41;
  const CMTime *v42;
  double v43;
  double v44;
  CMTime v45;
  double v46;
  CMTimeValue v47;
  CMTimeValue v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  CMTime time;
  double v53;
  CMTime time2;
  CMTime time1;

  time1 = *a3;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    *(_QWORD *)(a4 + 16) = 0x3FF0000000000000;
  }
  else
  {
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    switch(OZChannel::getValueAsInt((OZChannel *)(a1 + 336), MEMORY[0x1E0CA2E68], 0.0))
    {
      case 0u:
        time1.value = 0;
        v53 = 0.0;
        time2.value = 0;
        OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 592), MEMORY[0x1E0CA2E68], (double *)&time1.value, (double *)&time2.value, &v53, 0.0);
        time = *a2;
        Seconds = CMTimeGetSeconds(&time);
        v10 = fmax(Seconds * *(double *)&time1.value + 1.0, 0.0);
        v51 = *a2;
        v12 = CMTimeGetSeconds(&v51);
        v9 = fmax(v12 * *(double *)&time2.value + 1.0, 0.0);
        v50 = *a2;
        v13 = CMTimeGetSeconds(&v50);
        v8 = fmax(v13 * v53 + 1.0, 0.0);
        break;
      case 1u:
        operator/((__int128 *)&a2->value, (uint64_t)a3, (uint64_t)&v49);
        v41 = CMTimeGetSeconds(&v49);
        time1.value = 0;
        v53 = 0.0;
        time2.value = 0;
        v42 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 1184), MEMORY[0x1E0CA2E68], (double *)&time1.value, (double *)&time2.value, &v53, 0.0);
        *(double *)&v47 = 0.0;
        *(double *)&v48 = 0.0;
        v46 = 0.0;
        OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 1776), v42, (double *)&v48, (double *)&v47, &v46, 0.0);
        v10 = *(double *)&time1.value + v41 * (*(double *)&v48 - *(double *)&time1.value);
        v9 = *(double *)&time2.value + v41 * (*(double *)&v47 - *(double *)&time2.value);
        v8 = v53 + v41 * (v46 - v53);
        break;
      case 2u:
        memset(&time1, 0, sizeof(time1));
        operator/((__int128 *)&a2->value, (uint64_t)a3, (uint64_t)&time1);
        OZChannel::getValueAsDouble((OZChannel *)(a1 + 2504), &time1, 0.0);
        v10 = v18;
        OZChannel::getValueAsDouble((OZChannel *)(a1 + 2656), &time1, 0.0);
        v9 = v19;
        v8 = 1.0;
        break;
      case 3u:
        time1.value = 0;
        v53 = 0.0;
        time2.value = 0;
        v20 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 1184), MEMORY[0x1E0CA2E68], (double *)&time1.value, (double *)&time2.value, &v53, 0.0);
        *(double *)&v47 = 0.0;
        *(double *)&v48 = 0.0;
        v46 = 0.0;
        OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 1776), v20, (double *)&v48, (double *)&v47, &v46, 0.0);
        v21 = *(double *)&v48 - *(double *)&time1.value;
        v22 = *(double *)&v47 - *(double *)&time2.value;
        v23 = v46 - v53;
        if (*(double *)&v48 - *(double *)&time1.value <= 0.0)
          v24 = -1.0;
        else
          v24 = 1.0;
        if (v22 <= 0.0)
          v25 = -1.0;
        else
          v25 = 1.0;
        if (v23 <= 0.0)
          v26 = -1.0;
        else
          v26 = 1.0;
        operator/((__int128 *)&a2->value, (uint64_t)a3, (uint64_t)&v45);
        v27 = CMTimeGetSeconds(&v45);
        v28 = v27;
        _NF = v24 < 0.0;
        v29 = v27;
        if (_NF)
        {
          time1.value = v48;
          v29 = 1.0 - v27;
        }
        if (v25 < 0.0)
        {
          time2.value = v47;
          v28 = 1.0 - v27;
        }
        _NF = v26 < 0.0;
        v31 = &v53;
        if (v26 < 0.0)
          v31 = &v46;
        v32 = *v31;
        if (_NF)
          v33 = 1.0 - v27;
        else
          v33 = v27;
        v34 = log(fabs(v21) + 1.0);
        v35 = fabs(v22) + 1.0;
        v36 = v34 / 0.693147181;
        v37 = log(v35) / 0.693147181;
        v38 = log(fabs(v23) + 1.0) / 0.693147181;
        v39 = exp2(v36 * v29);
        v10 = v39 + -1.0 + *(double *)&time1.value;
        v40 = exp2(v37 * v28);
        v9 = v40 + -1.0 + *(double *)&time2.value;
        v8 = exp2(v38 * v33) + -1.0 + v32;
        break;
      default:
        break;
    }
    v43 = v9 * *(double *)(a4 + 8);
    v44 = v8 * *(double *)(a4 + 16);
    *(double *)a4 = v10 * *(double *)a4;
    *(double *)(a4 + 8) = v43;
    *(double *)(a4 + 16) = v44;
  }
}

uint64_t PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::getInstance(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::getInstance(void)::PSScaleOverLifeBehavior_incrementTypeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::getInstance(void)::PSScaleOverLifeBehavior_incrementTypeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::_PSScaleOverLifeBehavior_incrementTypeChan;
}

void std::__call_once_param<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *v0;

  if (!PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::_PSScaleOverLifeBehavior_incrementTypeChan)
  {
    v0 = (PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *)operator new();
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::PSScaleOverLifeBehavior_incrementTypeChanImpl(v0);
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::_PSScaleOverLifeBehavior_incrementTypeChan = (uint64_t)v0;
  }
}

void sub_1B2FD709C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl::PSScaleOverLifeBehavior_incrementTypeChanImpl(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 3.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 3.0, 0, 1);
  PCSingleton::PCSingleton((PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_incrementTypeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65E2720;
  *((_QWORD *)this + 5) = &unk_1E65E2740;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2FD714C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::getInstance(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::getInstance(void)::PSScaleOverLifeBehavior_scaleRateChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::getInstance(void)::PSScaleOverLifeBehavior_scaleRateChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::_PSScaleOverLifeBehavior_scaleRateChan;
}

void std::__call_once_param<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *v0;

  if (!PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::_PSScaleOverLifeBehavior_scaleRateChan)
  {
    v0 = (PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *)operator new();
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::PSScaleOverLifeBehavior_scaleRateChanImpl(v0);
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::_PSScaleOverLifeBehavior_scaleRateChan = (uint64_t)v0;
  }
}

void sub_1B2FD7218(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl::PSScaleOverLifeBehavior_scaleRateChanImpl(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.2);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.2, 0, 1);
  PCSingleton::PCSingleton((PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65E2798;
  *((_QWORD *)this + 5) = &unk_1E65E27B8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2FD72DC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::getInstance(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::getInstance(void)::PSScaleOverLifeBehavior_scaleRateChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::getInstance(void)::PSScaleOverLifeBehavior_scaleRateChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::_PSScaleOverLifeBehavior_scaleRateChanInfo;
}

void std::__call_once_param<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *v0;

  if (!PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::_PSScaleOverLifeBehavior_scaleRateChanInfo)
  {
    v0 = (PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *)operator new();
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::PSScaleOverLifeBehavior_scaleRateChanInfo(v0);
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::_PSScaleOverLifeBehavior_scaleRateChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FD73A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo::PSScaleOverLifeBehavior_scaleRateChanInfo(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 1.0, 0.01, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_scaleRateChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65E2810;
  *((_QWORD *)this + 10) = &unk_1E65E2830;
  return this;
}

void sub_1B2FD7458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::getInstance(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::getInstance(void)::PSScaleOverLifeBehavior_customScaleChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::getInstance(void)::PSScaleOverLifeBehavior_customScaleChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::_PSScaleOverLifeBehavior_customScaleChanInfo;
}

void std::__call_once_param<std::tuple<PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *v0;

  if (!PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::_PSScaleOverLifeBehavior_customScaleChanInfo)
  {
    v0 = (PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *)operator new();
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::PSScaleOverLifeBehavior_customScaleChanInfo(v0);
    PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::_PSScaleOverLifeBehavior_customScaleChanInfo = (uint64_t)v0;
  }
}

void sub_1B2FD7524(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo::PSScaleOverLifeBehavior_customScaleChanInfo(PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -5.0, 5.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((PSScaleOverLifeBehavior::PSScaleOverLifeBehavior_customScaleChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65E2888;
  *((_QWORD *)this + 10) = &unk_1E65E28A8;
  return this;
}

void sub_1B2FD75D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void PSSequencedValues::PSSequencedValues(PSSequencedValues *this)
{
  int *v2;
  __int128 v3;
  __int128 v4;
  CGColorSpace *v5;

  *(_QWORD *)this = 0x3FF0000000000000;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v2 = PCColor::WHITE((PCColor *)this);
  v3 = *((_OWORD *)v2 + 2);
  v4 = *(_OWORD *)v2;
  *((_OWORD *)this + 3) = *((_OWORD *)v2 + 1);
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 2) = v4;
  v5 = (CGColorSpace *)*((_QWORD *)v2 + 6);
  *((_QWORD *)this + 10) = v5;
  if (v5)
    PCCFRefTraits<CGColorSpace *>::retain(v5);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  *(_OWORD *)((char *)this + 104) = _Q0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0x3FF0000000000000;
}

void PSSequenceBehavior::PSSequenceBehavior(PSSequenceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  _BYTE v7[28];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OZBehavior::OZBehavior(this, a2, a3, a4);
  *v5 = &off_1E65E2900;
  v5[2] = &unk_1E65E2BD0;
  v5[6] = &unk_1E65E2E28;
  v5[42] = &unk_1E65E2E80;
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((PSSequenceBehavior *)((char *)this + 352), 0.0, 0.0, 0.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xCEu, 2u, 4u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((PSSequenceBehavior *)((char *)this + 1208), 1.0, 1.0, 1.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 2u, 5u);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2216), 1.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 2u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Scale"));
  OZChannelScale3D::OZChannelScale3D((PSSequenceBehavior *)((char *)this + 2368), 1.0, 1.0, 1.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 2u);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Width"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2960), 1.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 2u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Pos"));
  OZChannelPosition3D::OZChannelPosition3D((PSSequenceBehavior *)((char *)this + 3112), 0.0, 0.0, 0.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 2u, 3u);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Sequence Root"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 4000), (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Map Animation Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior Map Animation"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4128), 1u, (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3EEu, 2, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Sequencing Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior Sequencing"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4384), (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3F3u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Source Anim Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior Source Anim"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4640), (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3F4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Units Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior Units"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4896), (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3F2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Start"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5152), 0.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 4000), 0x3E9u, 0x400002u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior End"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5304), 0.1, (const PCString *)v7, (OZChannelFolder *)((char *)this + 4000), 0x3EAu, 0x400002u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Spread"));
  OZChannelDouble::OZChannelDouble((PSSequenceBehavior *)((char *)this + 5456), 1.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 4000), 0x3EBu, 0, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Offset Direction Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior Offset Direction"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 5608), (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3ECu, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Offset Behavior Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior Offset Behavior"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 5864), (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3EFu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Offset"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6120), 0.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 4000), 0x3F0u, 0x400002u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior Loops"));
  OZChannelDouble::OZChannelDouble((PSSequenceBehavior *)((char *)this + 6272), 1.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 4000), 0x3F1u, 16, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCURL::PCURL((PCURL *)v7, CFSTR("Replicator Sequence Behavior End Condition Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Sequence Behavior End Condition"));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 6424), 0, (const PCString *)v7, &v6, (OZChannelFolder *)((char *)this + 4000), 0x3EDu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString((PCString *)v7);
  PCString::PCString((PCString *)v7, "Use Quadratic Ease");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 6680), 1, (const PCString *)v7, (OZChannelFolder *)((char *)this + 4000), 0x3F5u, 2u, 0, 0);
  PCString::~PCString((PCString *)v7);
  PCString::PCString((PCString *)v7, "Obsolete Rotation");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 6832), 0.0, (const PCString *)v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 2, 0, 0);
  PCString::~PCString((PCString *)v7);
  *(_OWORD *)v7 = xmmword_1B3565038;
  *(_OWORD *)&v7[12] = *(__int128 *)((char *)&xmmword_1B3565038 + 12);
  OZChannelEnum::setTags((PSSequenceBehavior *)((char *)this + 5864), v7, 7);
  OZChannel::setMin((OZChannel *)((char *)this + 6120), -1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 6120), -1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 6272), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 6272), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 5456), 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 5456), 0.0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4640), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4640));
  OZChannelBase::resetFlag((OZChannelBase *)this + 46, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 46);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5304), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5304));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6120), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6120));
  *((_BYTE *)this + 3552) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 352), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 352));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1208), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1208));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2216), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2216));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2368), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2368));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2960), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2960));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3112), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3112));
}

void sub_1B2FD7FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannelEnum *a11, OZChannelEnum *a12, OZChannelEnum *a13, OZChannelEnum *a14, OZChannelPercent *a15, OZChannelPercent *a16, OZChannelPosition3D *a17, OZChannelPercent *a18, OZChannelEnum *a19, OZChannelScale3D *a20,OZChannelPercent *a21,OZChannelColorNoAlpha *a22,OZChannelRotation3D *a23,PCString a24,PCString a25)
{
  OZBehavior *v25;
  OZChannelBool *v26;
  OZChannel *v27;
  OZChannelPercent *v28;
  OZChannelEnum *v29;
  OZChannel *v30;
  OZChannelFolder *v31;
  OZChannelEnum *v32;

  PCString::~PCString(&a25);
  OZChannelBool::~OZChannelBool(v26);
  OZChannelEnum::~OZChannelEnum(v32);
  OZChannel::~OZChannel(v30);
  OZChannelPercent::~OZChannelPercent(v28);
  OZChannelEnum::~OZChannelEnum(v29);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(v27);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelFolder::~OZChannelFolder(v31);
  OZChannelPosition3D::~OZChannelPosition3D(a17);
  OZChannelPercent::~OZChannelPercent(a18);
  OZChannelScale3D::~OZChannelScale3D(a20);
  OZChannelPercent::~OZChannelPercent(a21);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a22);
  OZChannelRotation3D::~OZChannelRotation3D(a23);
  OZBehavior::~OZBehavior(v25);
  _Unwind_Resume(a1);
}

void PSSequenceBehavior::PSSequenceBehavior(PSSequenceBehavior *this, const PSSequenceBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZBehavior::OZBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65E2900;
  *(_QWORD *)(v5 + 16) = &unk_1E65E2BD0;
  *(_QWORD *)(v5 + 48) = &unk_1E65E2E28;
  *(_QWORD *)(v5 + 336) = &unk_1E65E2E80;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelRotation3D::OZChannelRotation3D((OZChannelRotation3D *)(v5 + 352), (const PSSequenceBehavior *)((char *)a2 + 352), (OZChannelFolder *)(v5 + 56));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((PSSequenceBehavior *)((char *)this + 1208), (const PSSequenceBehavior *)((char *)a2 + 1208), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2216), (const OZChannelBase *)((char *)a2 + 2216), v6);
  OZChannelScale3D::OZChannelScale3D((PSSequenceBehavior *)((char *)this + 2368), (const PSSequenceBehavior *)((char *)a2 + 2368), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2960), (const OZChannelBase *)((char *)a2 + 2960), v6);
  OZChannelPosition3D::OZChannelPosition3D((PSSequenceBehavior *)((char *)this + 3112), (const PSSequenceBehavior *)((char *)a2 + 3112), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 4000), (const OZChannelFolder *)((char *)a2 + 4000), v6);
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4128), (const PSSequenceBehavior *)((char *)a2 + 4128), (OZChannelFolder *)((char *)this + 4000));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4384), (const PSSequenceBehavior *)((char *)a2 + 4384), (OZChannelFolder *)((char *)this + 4000));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4640), (const PSSequenceBehavior *)((char *)a2 + 4640), (OZChannelFolder *)((char *)this + 4000));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 4896), (const PSSequenceBehavior *)((char *)a2 + 4896), (OZChannelFolder *)((char *)this + 4000));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5152), (const OZChannelBase *)a2 + 46, (OZChannelFolder *)((char *)this + 4000));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5304), (const OZChannelBase *)((char *)a2 + 5304), (OZChannelFolder *)((char *)this + 4000));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5456), (const OZChannelBase *)((char *)a2 + 5456), (OZChannelFolder *)((char *)this + 4000));
  *((_QWORD *)this + 682) = &off_1E6551358;
  *((_QWORD *)this + 684) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 5608), (const PSSequenceBehavior *)((char *)a2 + 5608), (OZChannelFolder *)((char *)this + 4000));
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 5864), (const PSSequenceBehavior *)((char *)a2 + 5864), (OZChannelFolder *)((char *)this + 4000));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6120), (const OZChannelBase *)((char *)a2 + 6120), (OZChannelFolder *)((char *)this + 4000));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6272), (const OZChannelBase *)a2 + 56, (OZChannelFolder *)((char *)this + 4000));
  *((_QWORD *)this + 784) = &off_1E6551358;
  *((_QWORD *)this + 786) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((PSSequenceBehavior *)((char *)this + 6424), (const PSSequenceBehavior *)((char *)a2 + 6424), (OZChannelFolder *)((char *)this + 4000));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 6680), (const OZChannelBase *)((char *)a2 + 6680), (OZChannelFolder *)((char *)this + 4000));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6832), (const OZChannelBase *)a2 + 61, v6);
  *((_QWORD *)this + 854) = &off_1E6551728;
  *((_QWORD *)this + 856) = &unk_1E6551A88;
}

void sub_1B2FD85C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannelPercent *a11, OZChannelPercent *a12, OZChannelEnum *a13, OZChannelEnum *a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelPosition3D *a17, OZChannelPercent *a18, OZChannelScale3D *a19, OZChannelPercent *a20,OZChannelColorNoAlpha *a21)
{
  OZBehavior *v21;
  OZChannelEnum *v22;
  OZChannelPercent *v23;
  OZChannel *v24;
  OZChannelEnum *v25;
  OZChannelFolder *v26;
  OZChannelBool *v27;
  OZChannelEnum *v28;
  uint64_t v29;

  OZChannelBool::~OZChannelBool(v27);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannel::~OZChannel(v24);
  OZChannelPercent::~OZChannelPercent(v23);
  OZChannelEnum::~OZChannelEnum(v22);
  OZChannelEnum::~OZChannelEnum(v28);
  OZChannel::~OZChannel(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelFolder::~OZChannelFolder(v26);
  OZChannelPosition3D::~OZChannelPosition3D(a17);
  OZChannelPercent::~OZChannelPercent(a18);
  OZChannelScale3D::~OZChannelScale3D(a19);
  OZChannelPercent::~OZChannelPercent(a20);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a21);
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v29 - 88));
  OZBehavior::~OZBehavior(v21);
  _Unwind_Resume(a1);
}

void sub_1B2FD869C()
{
  JUMPOUT(0x1B2FD8614);
}

void sub_1B2FD86A4()
{
  JUMPOUT(0x1B2FD861CLL);
}

void sub_1B2FD86AC()
{
  JUMPOUT(0x1B2FD8624);
}

void sub_1B2FD86B4()
{
  JUMPOUT(0x1B2FD862CLL);
}

void sub_1B2FD86BC()
{
  JUMPOUT(0x1B2FD8634);
}

void sub_1B2FD86C4()
{
  JUMPOUT(0x1B2FD863CLL);
}

void sub_1B2FD86CC()
{
  JUMPOUT(0x1B2FD8644);
}

void sub_1B2FD86D4()
{
  JUMPOUT(0x1B2FD864CLL);
}

void sub_1B2FD86DC()
{
  JUMPOUT(0x1B2FD8654);
}

void sub_1B2FD86E4()
{
  JUMPOUT(0x1B2FD865CLL);
}

void sub_1B2FD86EC()
{
  JUMPOUT(0x1B2FD8664);
}

void sub_1B2FD86F4()
{
  JUMPOUT(0x1B2FD866CLL);
}

void sub_1B2FD86FC()
{
  JUMPOUT(0x1B2FD8674);
}

void sub_1B2FD8704()
{
  JUMPOUT(0x1B2FD867CLL);
}

void sub_1B2FD870C()
{
  JUMPOUT(0x1B2FD8684);
}

void sub_1B2FD8714()
{
  JUMPOUT(0x1B2FD868CLL);
}

void PSSequenceBehavior::~PSSequenceBehavior(PSSequenceBehavior *this)
{
  *(_QWORD *)this = &off_1E65E2900;
  *((_QWORD *)this + 2) = &unk_1E65E2BD0;
  *((_QWORD *)this + 6) = &unk_1E65E2E28;
  *((_QWORD *)this + 42) = &unk_1E65E2E80;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6832));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 6680));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 6424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6272));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 6120));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 5864));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 5608));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5456));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 5304));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 5152));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 4896));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 4640));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 4384));
  OZChannelEnum::~OZChannelEnum((PSSequenceBehavior *)((char *)this + 4128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 4000));
  OZChannelPosition3D::~OZChannelPosition3D((PSSequenceBehavior *)((char *)this + 3112));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 2960));
  *((_QWORD *)this + 296) = &off_1E6560F48;
  *((_QWORD *)this + 298) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2808));
  OZChannel2D::~OZChannel2D((PSSequenceBehavior *)((char *)this + 2368));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 2216));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((PSSequenceBehavior *)((char *)this + 1208));
  OZChannelRotation3D::~OZChannelRotation3D((PSSequenceBehavior *)((char *)this + 352));
  OZBehavior::~OZBehavior(this);
}

{
  PSSequenceBehavior::~PSSequenceBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSSequenceBehavior::~PSSequenceBehavior(PSSequenceBehavior *this)
{
  PSSequenceBehavior::~PSSequenceBehavior((PSSequenceBehavior *)((char *)this - 16));
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSSequenceBehavior *)((char *)this - 48));
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSSequenceBehavior *)((char *)this - 336));
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSSequenceBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSSequenceBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSSequenceBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSSequenceBehavior::operator=(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  _BYTE *v5;

  OZBehavior::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelPosition::operator=(a1 + 352, (uint64_t)(v4 + 352));
  OZChannelFolder::operator=(a1 + 1208);
  OZChannelBase::operator=(a1 + 1344, (uint64_t)(v5 + 1344));
  OZChannelBase::operator=(a1 + 1496, (uint64_t)(v5 + 1496));
  OZChannelBase::operator=(a1 + 1648, (uint64_t)(v5 + 1648));
  OZChannelBase::operator=(a1 + 1800, (uint64_t)(v5 + 1800));
  OZChannelBase::operator=(a1 + 1952, (uint64_t)(v5 + 1952));
  *(_BYTE *)(a1 + 2208) = v5[2208];
  OZChannelBase::operator=(a1 + 2216, (uint64_t)(v5 + 2216));
  OZChannelFolder::operator=(a1 + 2368);
  OZChannelBase::operator=(a1 + 2504, (uint64_t)(v5 + 2504));
  OZChannelBase::operator=(a1 + 2656, (uint64_t)(v5 + 2656));
  OZChannelBase::operator=(a1 + 2808, (uint64_t)(v5 + 2808));
  OZChannelBase::operator=(a1 + 2960, (uint64_t)(v5 + 2960));
  OZChannelPosition::operator=(a1 + 3112, (uint64_t)(v5 + 3112));
  OZChannelFolder::operator=(a1 + 4000);
  OZChannelBase::operator=(a1 + 5864, (uint64_t)(v5 + 5864));
  OZChannelBase::operator=(a1 + 6120, (uint64_t)(v5 + 6120));
  OZChannelBase::operator=(a1 + 5608, (uint64_t)(v5 + 5608));
  OZChannelBase::operator=(a1 + 6424, (uint64_t)(v5 + 6424));
  OZChannelBase::operator=(a1 + 6680, (uint64_t)(v5 + 6680));
  OZChannelBase::operator=(a1 + 6272, (uint64_t)(v5 + 6272));
  OZChannelBase::operator=(a1 + 4384, (uint64_t)(v5 + 4384));
  OZChannelBase::operator=(a1 + 4640, (uint64_t)(v5 + 4640));
  OZChannelBase::operator=(a1 + 4896, (uint64_t)(v5 + 4896));
  OZChannelBase::operator=(a1 + 5152, (uint64_t)(v5 + 5152));
  OZChannelBase::operator=(a1 + 5304, (uint64_t)(v5 + 5304));
  OZChannelBase::operator=(a1 + 5456, (uint64_t)(v5 + 5456));
  OZChannelBase::operator=(a1 + 4128, (uint64_t)(v5 + 4128));
  return OZChannelBase::operator=(a1 + 6832, (uint64_t)(v5 + 6832));
}

uint64_t PSSequenceBehavior::didAddToNode(PSSequenceBehavior *this, OZSceneNode *a2)
{
  *((_QWORD *)this + 41) = a2;
  return (*(uint64_t (**)(PSSequenceBehavior *))(*(_QWORD *)this + 696))(this);
}

uint64_t PSSequenceBehavior::didInsert(PSSequenceBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  *((_QWORD *)this + 41) = a2;
  return (*(uint64_t (**)(PSSequenceBehavior *))(*(_QWORD *)this + 696))(this);
}

uint64_t PSSequenceBehavior::didAddSceneNodeToScene(PSSequenceBehavior *this, OZScene *a2)
{
  uint64_t result;
  BOOL v4;

  result = (*(uint64_t (**)(PSSequenceBehavior *, OZScene *))(*(_QWORD *)this + 320))(this, a2);
  if (*((_QWORD *)this + 43))
    v4 = 1;
  else
    v4 = result == 0;
  if (!v4)
    return (*(uint64_t (**)(PSSequenceBehavior *, uint64_t))(*(_QWORD *)this + 696))(this, result);
  return result;
}

void *PSSequenceBehavior::findEmitter(PSSequenceBehavior *this, OZSceneNode *lpsrc)
{
  _QWORD *v4;
  void *result;

  if (lpsrc)
  {
    if (v4)
      result = (void *)v4[2054];
    else
  }
  else
  {
    result = 0;
  }
  *((_QWORD *)this + 43) = result;
  return result;
}

uint64_t PSSequenceBehavior::willRemove(uint64_t this)
{
  *(_QWORD *)(this + 344) = 0;
  *(_QWORD *)(this + 328) = 0;
  return this;
}

BOOL PSSequenceBehavior::canAddToSceneNode(PSSequenceBehavior *this, OZSceneNode *lpsrc)
{
  if (!lpsrc)
    return 0;
  {
    return 1;
  }
}

BOOL PSSequenceBehavior::isRebuildUIChannel(PSSequenceBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 4384) == a2
      || (OZChannelBase *)((char *)this + 4896) == a2
      || (OZChannelBase *)((char *)this + 5864) == a2;
}

OZChannelBase *PSSequenceBehavior::updateHiddenFlags(uint64_t a1)
{
  int ValueAsInt;
  OZChannelBase *v3;
  int v4;
  OZChannelBase *v5;
  int v6;
  OZChannelBase *v7;
  OZChannelBase *v8;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 4384), MEMORY[0x1E0CA2E68], 0.0);
  v3 = (OZChannelBase *)(a1 + 4640);
  if (ValueAsInt == 4)
    OZChannelBase::resetFlag(v3, 4194306, 1);
  else
    OZChannelBase::setFlag(v3, 4194306, 1);
  v4 = OZChannel::getValueAsInt((OZChannel *)(a1 + 4896), MEMORY[0x1E0CA2E68], 0.0);
  v5 = (OZChannelBase *)(a1 + 5152);
  if (v4 == 2)
  {
    OZChannelBase::resetFlag(v5, 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 5304), 4194306, 1);
  }
  else
  {
    OZChannelBase::setFlag(v5, 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 5304), 4194306, 1);
    if (v4 == 1)
    {
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 5456), 4227072, 1);
      goto LABEL_9;
    }
  }
  OZChannelBase::resetFlag((OZChannelBase *)(a1 + 5456), 4227072, 1);
LABEL_9:
  v6 = OZChannel::getValueAsInt((OZChannel *)(a1 + 5864), MEMORY[0x1E0CA2E68], 0.0);
  v7 = (OZChannelBase *)(a1 + 6120);
  v8 = (OZChannelBase *)(a1 + 6272);
  if (v6 == 4)
  {
    OZChannelBase::resetFlag(v7, 4194306, 1);
    return OZChannelBase::setFlag(v8, 0x400000, 1);
  }
  else
  {
    OZChannelBase::setFlag(v7, 4194306, 1);
    return OZChannelBase::resetFlag(v8, 4227072, 1);
  }
}

uint64_t PSSequenceBehavior::parseBegin(PSSequenceBehavior *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 6680), MEMORY[0x1E0CA2E68], 0.0, 0);
  return OZBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'PSSequenceBehavior::parseBegin(PSSequenceBehavior *this, PCSerializerReadStream *a2)
{
  return PSSequenceBehavior::parseBegin((PSSequenceBehavior *)((char *)this - 48), a2);
}

uint64_t PSSequenceBehavior::parseEnd(PSSequenceBehavior *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 3552) = (*((_QWORD *)this + 396) & 2) == 0;
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 4000), 0x20000);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 4128), MEMORY[0x1E0CA2E68], 0.0))
  {
    OZChannel::setValue((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 4.0, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4384), 4194306, 0);
    OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4384));
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4128), 2, 0);
    OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4128));
  }
  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    OZChannelBase::operator=((uint64_t)this + 792, (uint64_t)this + 6832);
    if (!OZChannelBase::testFlag((OZChannelBase *)this + 61, 2))
    {
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 352), 2, 0);
      OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 352));
      OZChannelBase::setFlag((OZChannelBase *)this + 61, 2, 0);
      OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 61);
    }
  }
  return OZBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'PSSequenceBehavior::parseEnd(PSSequenceBehavior *this, PCSerializerReadStream *a2)
{
  return PSSequenceBehavior::parseEnd((PSSequenceBehavior *)((char *)this - 48), a2);
}

uint64_t PSSequenceBehavior::getNumObjects(PSSequenceBehavior *this, const CMTime *a2)
{
  PSEmitter *v3;
  uint64_t result;

  v3 = (PSEmitter *)*((_QWORD *)this + 43);
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4896), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 1)
    return PSEmitter::getOrderLength(v3, a2);
  return result;
}

void PSSequenceBehavior::getInfluence(PSSequenceBehavior *this, const CMTime *a2, double a3)
{
  CMTime *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unsigned int ValueAsInt;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  __n128 v17;
  CMTimeEpoch v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22[2];
  CMTime v23;
  CMTime v24;
  CMTime time2;
  CMTime time1;

  v23 = *a2;
  if ((*(unsigned int (**)(PSSequenceBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v23, 0, 1, 1)&& OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0) != 4)
  {
    (*(void (**)(CMTime *__return_ptr, PSSequenceBehavior *, double))(*(_QWORD *)this + 608))(v22, this, 1.0);
    memset(&v21, 0, sizeof(v21));
    v20 = v22[0];
    OZBehavior::getFrameDuration(this, &v17);
    time1 = v22[0];
    time2 = v22[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v24);
    time1 = v24;
    *(__n128 *)&time2.value = v17;
    time2.epoch = v18;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    time1 = *a2;
    time2 = v20;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v6 = &v20;
    }
    else
    {
      time1 = *a2;
      time2 = v19;
      v6 = CMTimeCompare(&time1, &time2) <= 0 ? (CMTime *)a2 : &v19;
    }
    v21 = *v6;
    v7 = (*(double (**)(PSSequenceBehavior *, CMTime *, double))(*(_QWORD *)this + 688))(this, &v21, a3);
    time1.value = 0;
    LOBYTE(time2.value) = 0;
    (*(void (**)(PSSequenceBehavior *, CMTime *, CMTime *, CMTime *))(*(_QWORD *)this + 680))(this, &v21, &time1, &time2);
    v8 = *(double *)&time1.value;
    v9 = v8 + PSSequenceBehavior::getStart(this, &v21);
    v10 = *(double *)&time1.value;
    v11 = v10 + (*(double (**)(PSSequenceBehavior *, CMTime *))(*(_QWORD *)this + 672))(this, &v21);
    if (v9 <= v11)
    {
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), &v21, 0.0);
      v13 = (*(uint64_t (**)(PSSequenceBehavior *, CMTime *))(*(_QWORD *)this + 664))(this, &v21);
      if (v13)
        v14 = (double)v13;
      else
        v14 = 1.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5456), &v21, 0.0);
      if (ValueAsInt >= 2)
        v16 = v15 / v14;
      else
        v16 = 0.0;
      trapezoid(v7, v9, v11, v15 / v14, v16, time2.value);
    }
  }
}

double PSSequenceBehavior::getStart(PSSequenceBehavior *this, const CMTime *a2)
{
  double result;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4896), a2, 0.0) != 2)
    return 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5152), a2, 0.0);
  return result;
}

double trapezoid(double a1, double a2, double a3, double a4, double a5, unsigned __int8 a6)
{
  double v6;
  double v7;
  double v8;
  BOOL v9;
  char v10;
  double v11;
  double v12;

  v6 = a2 - a4;
  v7 = 0.0;
  if (a2 - a4 <= a1)
  {
    v8 = a3 + a5;
    while (1)
    {
      if (a1 < a2)
        return (a1 - v6) / (a2 - v6) + 0.0;
      if (a1 <= a3)
        break;
      if (v8 >= a1)
      {
        v7 = 1.0 - (a1 - a3) / (v8 - a3);
        if ((a6 & 1) != 0)
        {
          trapezoid(a1 + -1.0, a2, a3, a4, a5, 0);
          if (v7 < v12)
            return v12;
        }
        return v7;
      }
      v9 = v6 + 1.0 < a1;
      a1 = a1 + -1.0;
      if (v6 > a1)
        v9 = 0;
      v10 = v9 & a6;
      a6 = 0;
      if ((v10 & 1) == 0)
        return v7;
    }
    v7 = 1.0;
    if (((a5 == 0.0) & a6) != 0)
    {
      trapezoid(a1 + -1.0, a2, a3, a4, a5, 0);
      if (v11 <= 0.0)
        return 1.0;
      else
        return v11;
    }
  }
  return v7;
}

void PSSequenceBehavior::getValuesWithInfluence(PSSequenceBehavior *this, CMTime *a2, double a3, PSSequencedValues *a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __double2 v15;
  double v16;
  __double2 v17;
  double v18;
  __double2 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v40;
  float64_t v41;
  double v42;
  float64_t v43;
  PCColor v44;
  double v45;
  __int128 v46;
  uint64_t v47;
  double v48[4];
  double v49;

  PSSequenceBehavior::getInfluence(this, a2, a3);
  v49 = v8;
  if ((*((_BYTE *)this + 408) & 2) == 0)
  {
    v9 = v8;
    if (OZChannelRotation3D::isQuaternionMode((PSSequenceBehavior *)((char *)this + 352)))
    {
      *(_QWORD *)&v44.var0.var0 = 0x3FF0000000000000;
      memset(v44.var0.var1, 0, 24);
      v48[0] = 1.0;
      memset(&v48[1], 0, 24);
      OZChannelRotation3D::getValueAsQuatd((uint64_t)this + 352, v48, a2, 0.0);
      slerp<double>((double *)&v44.var0.var0, v48, &v49, (uint64_t)&v45);
      if (&v45 != (double *)a4)
      {
        *(double *)a4 = v45;
        *(_OWORD *)((char *)a4 + 8) = v46;
        *((_QWORD *)a4 + 3) = v47;
      }
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 488), a2, 0.0);
      v11 = v9 * v10;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 640), a2, 0.0);
      v13 = v9 * v12;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), a2, 0.0);
      v42 = v9 * v14;
      v15 = __sincos_stret(v11 * 0.5);
      v16 = v15.__sinval * 0.0;
      v17 = __sincos_stret(v13 * 0.5);
      v18 = v17.__sinval * 0.0;
      v19 = __sincos_stret(v42 * 0.5);
      v20 = v15.__cosval * v17.__cosval - (v16 * v18 + v16 * v17.__sinval + v15.__sinval * v18);
      v21 = v15.__sinval * v17.__cosval + v15.__cosval * v18 + v16 * v17.__sinval - v16 * v18;
      v22 = v16 * v17.__cosval + v15.__cosval * v17.__sinval + v15.__sinval * v18 - v16 * v18;
      v23 = v16 * v18 - v15.__sinval * v17.__sinval + v16 * v17.__cosval + v15.__cosval * v18;
      v24 = v19.__sinval * 0.0 * v21;
      v25 = v19.__sinval * 0.0 * v22;
      v26 = v19.__sinval * 0.0 * v20;
      v27 = v19.__sinval * 0.0 * v23;
      *((double *)a4 + 2) = v27 - v19.__sinval * v21 + v19.__cosval * v22 + v26;
      *((double *)a4 + 3) = v24 - v25 + v19.__cosval * v23 + v19.__sinval * v20;
      *(double *)a4 = v19.__cosval * v20 - (v19.__sinval * v23 + v24 + v25);
      *((double *)a4 + 1) = v19.__sinval * v22 - v27 + v19.__cosval * v21 + v26;
    }
  }
  if ((*((_BYTE *)this + 1264) & 2) == 0)
  {
    PCColor::PCColor(&v44);
    OZChannelColorNoAlpha::getColor((PSSequenceBehavior *)((char *)this + 1208), a2, &v44, a3);
    v28 = v49;
    PCColor::mix((PCColor *)((char *)a4 + 32), &v44, v28);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v44.var1._obj);
  }
  if ((*((_BYTE *)this + 2272) & 2) == 0)
  {
    v29 = v49;
    v30 = *((double *)a4 + 11);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2216), a2, a3);
    *((double *)a4 + 11) = v30 + v29 * (v31 - v30);
  }
  if ((*((_BYTE *)this + 2424) & 2) == 0 || (*((_BYTE *)this + 3016) & 2) == 0)
  {
    *(_QWORD *)&v44.var0.var0 = 0;
    v48[0] = 0.0;
    v45 = 0.0;
    OZChannelScale3D::getValue((PSSequenceBehavior *)((char *)this + 2368), a2, (double *)&v44.var0.var0, v48, &v45, a3);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2960), a2, a3);
    v33.f64[0] = *(float64_t *)&v44.var0.var0;
    v34 = v49;
    v35 = *((double *)a4 + 14) + v49 * (v45 - *((double *)a4 + 14));
    v33.f64[1] = v48[0];
    *((float64x2_t *)a4 + 6) = vaddq_f64(*((float64x2_t *)a4 + 6), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v33, v32), *((float64x2_t *)a4 + 6)), v49));
    *((double *)a4 + 14) = v35;
    if ((*((_BYTE *)this + 3016) & 2) == 0)
      *((double *)a4 + 18) = *((double *)a4 + 18) + v34 * (v32 - *((double *)a4 + 18));
  }
  if ((*((_BYTE *)this + 3168) & 2) == 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3248), a2, a3);
    v43 = v36;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3400), a2, a3);
    v41 = v37;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3848), a2, a3);
    v39 = v38 * v49;
    v40.f64[0] = v43;
    v40.f64[1] = v41;
    *(float64x2_t *)((char *)a4 + 120) = vaddq_f64(vmulq_n_f64(v40, v49), *(float64x2_t *)((char *)a4 + 120));
    *((double *)a4 + 17) = v39 + *((double *)a4 + 17);
  }
}

void sub_1B2FD97C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

double PSSequenceBehavior::getCompletion(PSSequenceBehavior *this, const CMTime *a2, double a3)
{
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  const CMTime *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __n128 v16;
  CMTimeEpoch v17;
  CMTime v18;
  CMTime v19;
  __int128 v20;
  CMTimeEpoch epoch;
  CMTime v22[2];
  _QWORD v23[6];
  CMTime v24;
  CMTime time2;
  CMTime time1;

  v6 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    (*(void (**)(_QWORD *__return_ptr, PSSequenceBehavior *))(*(_QWORD *)this + 608))(v23, this);
    v7 = (*(uint64_t (**)(PSSequenceBehavior *, const CMTime *))(*(_QWORD *)this + 664))(this, a2);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5456), a2, 0.0);
    v9 = v8;
    (*(void (**)(CMTime *__return_ptr, PSSequenceBehavior *))(*(_QWORD *)this + 608))(v22, this);
    v20 = 0uLL;
    epoch = 0;
    v19 = v22[0];
    OZBehavior::getFrameDuration(this, &v16);
    time1 = v22[0];
    time2 = v22[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v24);
    time1 = v24;
    *(__n128 *)&time2.value = v16;
    time2.epoch = v17;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    time1 = *a2;
    time2 = v19;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v10 = &v19;
    }
    else
    {
      time1 = *a2;
      time2 = v18;
      v10 = CMTimeCompare(&time1, &time2) <= 0 ? a2 : &v18;
    }
    v20 = *(_OWORD *)&v10->value;
    epoch = v10->epoch;
    v11 = (*(double (**)(PSSequenceBehavior *, __int128 *, double))(*(_QWORD *)this + 688))(this, &v20, a3);
    time1.value = 0;
    LOBYTE(time2.value) = 0;
    (*(void (**)(PSSequenceBehavior *, __int128 *, CMTime *, CMTime *))(*(_QWORD *)this + 680))(this, &v20, &time1, &time2);
    v6 = 1.0;
    if (v11 > *(double *)&time1.value)
    {
      v12 = v9 / (double)v7;
      if (v12 + *(double *)&time1.value >= v11)
      {
        v14 = v11 - *(double *)&time1.value;
        return 1.0 - v14 / v12;
      }
      if (!LOBYTE(time2.value))
        return 0.0;
      v13 = v11 + -1.0;
      if (v11 + -1.0 > *(double *)&time1.value)
      {
        v6 = 0.0;
        if (v12 + *(double *)&time1.value >= v13)
        {
          v14 = v13 - *(double *)&time1.value;
          return 1.0 - v14 / v12;
        }
      }
    }
  }
  return v6;
}

void PSSequenceBehavior::getValuesRemapTime(uint64_t a1, CMTime *a2, uint64_t a3, double a4)
{
  double Completion;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24[2];
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)a1 + 608))(v24);
  v23 = v24[1];
  PSSequenceBehavior::getKeyframeExtent((PSSequenceBehavior *)a1, &time2, &time1);
  memset(&v22, 0, sizeof(v22));
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  time2 = v22;
  if (!CMTimeCompare(&time1, &time2))
    v22 = v23;
  Completion = PSSequenceBehavior::getCompletion((PSSequenceBehavior *)a1, a2, a4);
  memset(&v21, 0, sizeof(v21));
  operator*(&v22, &v20, Completion);
  time2 = v24[0];
  time1 = v20;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v21);
  if ((*(_BYTE *)(a1 + 408) & 2) == 0)
    OZChannelRotation3D::getValueAsQuatd(a1 + 352, (double *)a3, a2, 0.0);
  if ((*(_BYTE *)(a1 + 1264) & 2) == 0)
  {
    OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(a1 + 1208), &v21, (PCColor *)(a3 + 32), a4);
    PCColor::setAlpha((PCColor *)(a3 + 32), 1.0);
  }
  if ((*(_BYTE *)(a1 + 2272) & 2) == 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 2216), &v21, a4);
    *(double *)(a3 + 88) = v9 * *(double *)(a3 + 88);
  }
  if ((*(_BYTE *)(a1 + 2424) & 2) == 0 || (*(_BYTE *)(a1 + 3016) & 2) == 0)
  {
    time1.value = 0;
    time2.value = 0;
    v20.value = 0;
    OZChannelScale3D::getValue((OZChannelScale3D *)(a1 + 2368), &v21, (double *)&time1.value, (double *)&time2.value, (double *)&v20.value, a4);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 2960), &v21, a4);
    v11 = v10 * *(double *)&time1.value;
    v12.f64[0] = v10 * *(double *)&time2.value;
    v13 = *(float64x2_t *)(a3 + 104);
    *(_QWORD *)&v12.f64[1] = v20.value;
    *(double *)(a3 + 96) = v11 * v13.f64[0];
    *(float64x2_t *)(a3 + 104) = vmulq_f64(v12, v13);
  }
  if ((*(_BYTE *)(a1 + 3168) & 2) == 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 3248), &v21, a4);
    v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 3400), &v21, a4);
    v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 3848), &v21, a4);
    v18 = v17 + *(double *)(a3 + 128);
    *(double *)(a3 + 120) = v15 + *(double *)(a3 + 120);
    *(double *)(a3 + 128) = v18;
    *(double *)(a3 + 136) = v19 + *(double *)(a3 + 136);
  }
}

void PSSequenceBehavior::getKeyframeExtent(PSSequenceBehavior *this, CMTime *a2, CMTime *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  __int128 *v71;
  char v72;
  const void *v73;
  OZChannel *v74;
  int32_t v75;
  CMTime *v76;
  __int128 v77;
  int32_t v78;
  CMTime *v79;
  __int128 v80;
  char *v81;
  void *v82;
  const void **v83;
  const void **v84;
  OZChannel *v85;
  int32_t v86;
  CMTime *v87;
  __int128 v88;
  int32_t v89;
  CMTime *v90;
  __int128 v91;
  CMTime *v92;
  CMTime *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  CMTime *v98;
  CMTime *v99;
  const void **v100;
  const void **v101;
  uint64_t v102;
  CMTime v103;
  CMTime v104;
  CMTime v105;
  CMTime v106;
  void *__p;
  char *v108;
  char *v109;
  CMTime time2;
  CMTime time1;

  __p = 0;
  v108 = 0;
  v109 = 0;
  v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v109, 1uLL);
  v8 = &v7[8 * v6];
  *(_QWORD *)v7 = (char *)this + 352;
  v9 = v7 + 8;
  v11 = (char *)__p;
  v10 = v108;
  v12 = v7;
  if (v108 != __p)
  {
    do
    {
      v13 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v12 - 1) = v13;
      v12 -= 8;
    }
    while (v10 != v11);
    v10 = (char *)__p;
  }
  __p = v12;
  v108 = v7 + 8;
  v109 = &v7[8 * v6];
  if (v10)
  {
    operator delete(v10);
    v8 = v109;
  }
  v108 = v7 + 8;
  v14 = (char *)this + 1208;
  if (v9 >= v8)
  {
    v16 = (v9 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v17 = v8 - (_BYTE *)__p;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v109, v19);
    else
      v20 = 0;
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    *(_QWORD *)v21 = v14;
    v15 = v21 + 8;
    v24 = (char *)__p;
    v23 = v108;
    if (v108 != __p)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)__p;
    }
    __p = v21;
    v108 = v15;
    v109 = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *((_QWORD *)v7 + 1) = v14;
    v15 = v7 + 16;
  }
  v108 = v15;
  v26 = (char *)this + 2216;
  if (v15 >= v109)
  {
    v28 = (v15 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v29 = (v109 - (_BYTE *)__p) >> 2;
    if (v29 <= v28 + 1)
      v29 = v28 + 1;
    if ((unint64_t)(v109 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v109, v30);
    else
      v31 = 0;
    v32 = &v31[8 * v28];
    v33 = &v31[8 * v30];
    *(_QWORD *)v32 = v26;
    v27 = v32 + 8;
    v35 = (char *)__p;
    v34 = v108;
    if (v108 != __p)
    {
      do
      {
        v36 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *((_QWORD *)v32 - 1) = v36;
        v32 -= 8;
      }
      while (v34 != v35);
      v34 = (char *)__p;
    }
    __p = v32;
    v108 = v27;
    v109 = v33;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_QWORD *)v15 = v26;
    v27 = v15 + 8;
  }
  v108 = v27;
  v37 = (char *)this + 2368;
  if (v27 >= v109)
  {
    v39 = (v27 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v40 = (v109 - (_BYTE *)__p) >> 2;
    if (v40 <= v39 + 1)
      v40 = v39 + 1;
    if ((unint64_t)(v109 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    if (v41)
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v109, v41);
    else
      v42 = 0;
    v43 = &v42[8 * v39];
    v44 = &v42[8 * v41];
    *(_QWORD *)v43 = v37;
    v38 = v43 + 8;
    v46 = (char *)__p;
    v45 = v108;
    if (v108 != __p)
    {
      do
      {
        v47 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *((_QWORD *)v43 - 1) = v47;
        v43 -= 8;
      }
      while (v45 != v46);
      v45 = (char *)__p;
    }
    __p = v43;
    v108 = v38;
    v109 = v44;
    if (v45)
      operator delete(v45);
  }
  else
  {
    *(_QWORD *)v27 = v37;
    v38 = v27 + 8;
  }
  v108 = v38;
  v48 = (char *)this + 2960;
  if (v38 >= v109)
  {
    v50 = (v38 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v50 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v51 = (v109 - (_BYTE *)__p) >> 2;
    if (v51 <= v50 + 1)
      v51 = v50 + 1;
    if ((unint64_t)(v109 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v109, v52);
    else
      v53 = 0;
    v54 = &v53[8 * v50];
    v55 = &v53[8 * v52];
    *(_QWORD *)v54 = v48;
    v49 = v54 + 8;
    v57 = (char *)__p;
    v56 = v108;
    if (v108 != __p)
    {
      do
      {
        v58 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *((_QWORD *)v54 - 1) = v58;
        v54 -= 8;
      }
      while (v56 != v57);
      v56 = (char *)__p;
    }
    __p = v54;
    v108 = v49;
    v109 = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(_QWORD *)v38 = v48;
    v49 = v38 + 8;
  }
  v108 = v49;
  v59 = (char *)this + 3112;
  v99 = a2;
  if (v49 >= v109)
  {
    v61 = (v49 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v62 = (v109 - (_BYTE *)__p) >> 2;
    if (v62 <= v61 + 1)
      v62 = v61 + 1;
    if ((unint64_t)(v109 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v109, v63);
    else
      v64 = 0;
    v65 = &v64[8 * v61];
    v66 = &v64[8 * v63];
    *(_QWORD *)v65 = v59;
    v60 = v65 + 8;
    v68 = (char *)__p;
    v67 = v108;
    if (v108 != __p)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *((_QWORD *)v65 - 1) = v69;
        v65 -= 8;
      }
      while (v67 != v68);
      v67 = (char *)__p;
    }
    __p = v65;
    v108 = v60;
    v109 = v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *(_QWORD *)v49 = v59;
    v60 = v49 + 8;
  }
  v108 = v60;
  v70 = (char *)__p;
  v71 = (__int128 *)MEMORY[0x1E0CA2E68];
  if (v60 == __p)
  {
    v96 = *MEMORY[0x1E0CA2E68];
    a2->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_OWORD *)&a2->value = v96;
    v97 = *v71;
    a3->epoch = *((_QWORD *)v71 + 2);
    *(_OWORD *)&a3->value = v97;
LABEL_123:
    v108 = v60;
    operator delete(v60);
    return;
  }
  v98 = a3;
  v72 = 0;
  v106 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v105 = v106;
  do
  {
    v73 = *(const void **)v70;
    if ((*(_BYTE *)(*(_QWORD *)v70 + 57) & 0x10) != 0)
    {
      v81 = v60;
      v100 = 0;
      v101 = 0;
      v102 = 0;
      OZChannelFolder::getAllDescendantsFlattened((uint64_t)v82, (void **)&v100, 0, 0);
      v83 = v100;
      v84 = v101;
      if (v100 != v101)
      {
        do
        {
          if (*v83)
          else
            v85 = 0;
          if (((*((uint64_t (**)(OZChannel *, _QWORD))v85->var0 + 69))(v85, 0) & 1) != 0)
          {
            OZChannel::getKeyframeMinTime(v85, (uint64_t)&time1);
            v104 = time1;
            OZChannel::getKeyframeMaxTime(v85, (uint64_t)&time1);
            v103 = time1;
            if ((v72 & 1) != 0)
            {
              time1 = v106;
              time2 = v104;
              v86 = CMTimeCompare(&time1, &time2);
              v87 = &v106;
              if (v86 > 0)
                v87 = &v104;
              v88 = *(_OWORD *)&v87->value;
              v106.epoch = v87->epoch;
              *(_OWORD *)&v106.value = v88;
              time1 = v105;
              time2 = v103;
              v89 = CMTimeCompare(&time1, &time2);
              v90 = &v105;
              if (v89 < 0)
                v90 = &v103;
              v91 = *(_OWORD *)&v90->value;
              v105.epoch = v90->epoch;
              *(_OWORD *)&v105.value = v91;
            }
            else
            {
              v106 = v104;
              v105 = v103;
            }
            v72 = 1;
          }
          ++v83;
        }
        while (v83 != v84);
        v83 = v100;
      }
      v60 = v81;
      if (v83)
      {
        v101 = v83;
        operator delete(v83);
      }
    }
    else
    {
      if (((*((uint64_t (**)(OZChannel *, _QWORD))v74->var0 + 69))(v74, 0) & 1) != 0)
      {
        OZChannel::getKeyframeMinTime(v74, (uint64_t)&time1);
        v104 = time1;
        OZChannel::getKeyframeMaxTime(v74, (uint64_t)&time1);
        v103 = time1;
        if ((v72 & 1) != 0)
        {
          time1 = v106;
          time2 = v104;
          v75 = CMTimeCompare(&time1, &time2);
          v76 = &v106;
          if (v75 > 0)
            v76 = &v104;
          v77 = *(_OWORD *)&v76->value;
          v106.epoch = v76->epoch;
          *(_OWORD *)&v106.value = v77;
          time1 = v105;
          time2 = v103;
          v78 = CMTimeCompare(&time1, &time2);
          v79 = &v105;
          if (v78 < 0)
            v79 = &v103;
          v80 = *(_OWORD *)&v79->value;
          v105.epoch = v79->epoch;
          *(_OWORD *)&v105.value = v80;
        }
        else
        {
          v106 = v104;
          v105 = v103;
        }
        v72 = 1;
      }
    }
    v70 += 8;
  }
  while (v70 != v60);
  v92 = &v106;
  if ((v72 & 1) == 0)
    v92 = (CMTime *)MEMORY[0x1E0CA2E68];
  v93 = &v105;
  if ((v72 & 1) == 0)
    v93 = (CMTime *)MEMORY[0x1E0CA2E68];
  v94 = *(_OWORD *)&v92->value;
  v99->epoch = v92->epoch;
  *(_OWORD *)&v99->value = v94;
  v95 = *(_OWORD *)&v93->value;
  v98->epoch = v93->epoch;
  *(_OWORD *)&v98->value = v95;
  v60 = (char *)__p;
  if (__p)
    goto LABEL_123;
}

void sub_1B2FDA49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PSSequenceBehavior::getValues(PSSequenceBehavior *this, CMTime *a2, double a3, PSSequencedValues *a4)
{
  CMTime v8;

  v8 = *a2;
  if ((*(unsigned int (**)(PSSequenceBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v8, 0, 1, 1))
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0) == 4)
      PSSequenceBehavior::getValuesRemapTime((uint64_t)this, a2, (uint64_t)a4, a3);
    else
      PSSequenceBehavior::getValuesWithInfluence(this, a2, a3, a4);
  }
}

uint64_t PSSequenceBehavior::arAddToUndo(PSSequenceBehavior *this, const PCString *a2)
{
  return (*(uint64_t (**)(char *, const PCString *))(*((_QWORD *)this + 2) + 176))((char *)this + 16, a2);
}

uint64_t `non-virtual thunk to'PSSequenceBehavior::arAddToUndo(PSSequenceBehavior *this, const PCString *a2)
{
  return (*(uint64_t (**)(char *, const PCString *))(*((_QWORD *)this - 40) + 176))((char *)this - 320, a2);
}

void PSSequenceBehavior::arAddChannel(PSSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelFolder *var6;
  OZChannelBase *v4;
  uint64_t ObjectManipulator;
  uint64_t v6;

  OZChannelBase::resetFlag(a2, 2, 0);
  var6 = a2->var6;
  if (var6)
    OZChannelBase::resetFlag((OZChannelBase *)var6, 2, 0);
  if (v4)
  {
    LOBYTE(v4[3].var13) = 1;
    ObjectManipulator = OZChannelBase::getObjectManipulator(v4);
    if (ObjectManipulator)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
      if (v6)
        OZDocument::postNotification(*(OZDocument **)(v6 + 1584), 32);
    }
  }
}

void PSSequenceBehavior::arRemoveChannel(PSSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelBase *v3;
  uint64_t ObjectManipulator;
  uint64_t v5;

  OZChannelBase::setFlag(a2, 2, 0);
  if (a2)
  {
    if (v3)
    {
      LOBYTE(v3[3].var13) = 0;
      ObjectManipulator = OZChannelBase::getObjectManipulator(v3);
      if (ObjectManipulator)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
        if (v5)
          OZDocument::postNotification(*(OZDocument **)(v5 + 1584), 32);
      }
    }
  }
}

void PSSequenceBehavior::arGetChannelList(uint64_t a1, void **a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;

  v4 = a1 + 352;
  v6 = (uint64_t)(a2 + 2);
  v5 = (unint64_t)a2[2];
  v7 = a2[1];
  if ((unint64_t)v7 >= v5)
  {
    v9 = ((char *)v7 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_82;
    v10 = v5 - (_QWORD)*a2;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v8 = v14 + 8;
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a2[1] = v8;
  v19 = a1 + 1208;
  v20 = (unint64_t)a2[2];
  if ((unint64_t)v8 >= v20)
  {
    v22 = ((char *)v8 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      goto LABEL_82;
    v23 = v20 - (_QWORD)*a2;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v25);
    else
      v26 = 0;
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = v19;
    v21 = v27 + 8;
    v30 = (char *)*a2;
    v29 = (char *)a2[1];
    if (v29 != *a2)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v27 - 1) = v31;
        v27 -= 8;
      }
      while (v29 != v30);
      v29 = (char *)*a2;
    }
    *a2 = v27;
    a2[1] = v21;
    a2[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v8 = v19;
    v21 = v8 + 1;
  }
  a2[1] = v21;
  v32 = a1 + 2216;
  v33 = (unint64_t)a2[2];
  if ((unint64_t)v21 >= v33)
  {
    v35 = ((char *)v21 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v35 + 1) >> 61)
      goto LABEL_82;
    v36 = v33 - (_QWORD)*a2;
    v37 = v36 >> 2;
    if (v36 >> 2 <= (unint64_t)(v35 + 1))
      v37 = v35 + 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v38);
    else
      v39 = 0;
    v40 = &v39[8 * v35];
    v41 = &v39[8 * v38];
    *(_QWORD *)v40 = v32;
    v34 = v40 + 8;
    v43 = (char *)*a2;
    v42 = (char *)a2[1];
    if (v42 != *a2)
    {
      do
      {
        v44 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v40 - 1) = v44;
        v40 -= 8;
      }
      while (v42 != v43);
      v42 = (char *)*a2;
    }
    *a2 = v40;
    a2[1] = v34;
    a2[2] = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *v21 = v32;
    v34 = v21 + 1;
  }
  a2[1] = v34;
  v45 = a1 + 2368;
  v46 = (unint64_t)a2[2];
  if ((unint64_t)v34 >= v46)
  {
    v48 = ((char *)v34 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v48 + 1) >> 61)
      goto LABEL_82;
    v49 = v46 - (_QWORD)*a2;
    v50 = v49 >> 2;
    if (v49 >> 2 <= (unint64_t)(v48 + 1))
      v50 = v48 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v51);
    else
      v52 = 0;
    v53 = &v52[8 * v48];
    v54 = &v52[8 * v51];
    *(_QWORD *)v53 = v45;
    v47 = v53 + 8;
    v56 = (char *)*a2;
    v55 = (char *)a2[1];
    if (v55 != *a2)
    {
      do
      {
        v57 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *((_QWORD *)v53 - 1) = v57;
        v53 -= 8;
      }
      while (v55 != v56);
      v55 = (char *)*a2;
    }
    *a2 = v53;
    a2[1] = v47;
    a2[2] = v54;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *v34 = v45;
    v47 = v34 + 1;
  }
  a2[1] = v47;
  v58 = a1 + 3112;
  v59 = (unint64_t)a2[2];
  if ((unint64_t)v47 < v59)
  {
    *v47 = v58;
    v60 = v47 + 1;
    goto LABEL_81;
  }
  v61 = ((char *)v47 - (_BYTE *)*a2) >> 3;
  if ((unint64_t)(v61 + 1) >> 61)
LABEL_82:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v62 = v59 - (_QWORD)*a2;
  v63 = v62 >> 2;
  if (v62 >> 2 <= (unint64_t)(v61 + 1))
    v63 = v61 + 1;
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v64 = v63;
  if (v64)
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v64);
  else
    v65 = 0;
  v66 = &v65[8 * v61];
  v67 = &v65[8 * v64];
  *(_QWORD *)v66 = v58;
  v60 = v66 + 8;
  v69 = (char *)*a2;
  v68 = (char *)a2[1];
  if (v68 != *a2)
  {
    do
    {
      v70 = *((_QWORD *)v68 - 1);
      v68 -= 8;
      *((_QWORD *)v66 - 1) = v70;
      v66 -= 8;
    }
    while (v68 != v69);
    v68 = (char *)*a2;
  }
  *a2 = v66;
  a2[1] = v60;
  a2[2] = v67;
  if (v68)
    operator delete(v68);
LABEL_81:
  a2[1] = v60;
}

void `non-virtual thunk to'PSSequenceBehavior::arGetChannelList(uint64_t a1, void **a2)
{
  PSSequenceBehavior::arGetChannelList(a1 - 336, a2);
}

uint64_t PSSequenceBehavior::arGetObjectManipulator(PSSequenceBehavior *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)(*(uint64_t (**)(PSSequenceBehavior *))(*(_QWORD *)this + 312))(this);
  return OZChannelBase::getObjectManipulator(v1);
}

uint64_t `non-virtual thunk to'PSSequenceBehavior::arGetObjectManipulator(PSSequenceBehavior *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this - 42) + 312))((char *)this - 336);
  return OZChannelBase::getObjectManipulator(v1);
}

uint64_t PSSequenceBehavior::getOffsetAndDoWrap(PSSequenceBehavior *this, const CMTime *a2, double *a3, BOOL *a4)
{
  unsigned int ValueAsInt;
  int v9;
  int v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  uint64_t v20;
  double Seconds;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  BOOL v36;
  double v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  double *v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  double v58;
  double v59;
  double v60;
  _BYTE v61[24];
  __int128 v62;
  CMTime time;
  __n128 v64;
  CMTimeEpoch v65;
  CMTime v66;
  CMTime v67;
  CMTime v68;
  CMTime time2;
  CMTime time1;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5864), a2, 0.0);
  v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), a2, 0.0);
  *a4 = 0;
  if (ValueAsInt > 6 || ValueAsInt == 4)
  {
    v26 = 1.0
        / (double)(*(unsigned int (**)(PSSequenceBehavior *, const CMTime *))(*(_QWORD *)this + 664))(this, a2);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5456), a2, 0.0);
    v28 = v27 * v26 + 1.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6120), a2, 0.0);
    v30 = v29;
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5608), a2, 0.0);
    v31 = 1.0 - v30;
    if ((_DWORD)result != 1)
      v31 = v30;
    v32 = v28 * v31 + 0.0;
  }
  else
  {
    v11 = v9;
    (*(void (**)(CMTime *__return_ptr, PSSequenceBehavior *))(*(_QWORD *)this + 608))(&v67, this);
    v66 = v68;
    time1 = v68;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    result = CMTimeCompare(&time1, &time2);
    if ((int)result <= 0)
    {
      *a3 = 0.0;
      return result;
    }
    v13 = v11 & 0xFFFFFFFE;
    v14 = (*(uint64_t (**)(PSSequenceBehavior *, const CMTime *))(*(_QWORD *)this + 664))(this, a2);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5456), a2, 0.0);
    v16 = v15;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6272), a2, 0.0);
    v18 = v17;
    v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6424), a2, 0.0);
    v64 = 0uLL;
    v65 = 0;
    v20 = (*(uint64_t (**)(PSSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v20 + 336), &v64);
    time2 = v67;
    time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v62);
    time1 = v66;
    *(__n128 *)&time2.value = v64;
    time2.epoch = v65;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v61);
    operator/(&v62, (uint64_t)v61, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 5608), a2, 0.0) == 1)
      Seconds = 1.0 - Seconds;
    if (v19 == 1)
    {
      v22 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0);
      v23 = (double)v14;
      v24 = v18 * (double)v14;
      if (v22 == 4)
      {
        v25 = v16 + v24;
      }
      else if (v13 == 2)
      {
        v25 = v16 + v16 + v24;
      }
      else
      {
        v25 = v16 + v24 + -1.0;
      }
    }
    else
    {
      v23 = (double)v14;
      v25 = v18 * (double)v14;
    }
    v33 = (Seconds * v25 + 0.0) / v23;
    time1.value = 0;
    modf(v33 + -0.000001, (long double *)&time1.value);
    if (*(double *)&time1.value <= v18 + -1.0)
      v34 = *(double *)&time1.value;
    else
      v34 = v18 + -1.0;
    v36 = v34 > 0.0 && v19 == 1;
    *a4 = v36;
    v37 = 1.0 / v23;
    v38 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0);
    v39 = v37 * 0.5;
    v40 = v37 * -0.5;
    v41 = v16 * v37;
    v42 = v40 - v41;
    if (v13 != 2)
      v42 = v39;
    if (v38 == 4)
      v43 = v39 - v41;
    else
      v43 = v42;
    v44 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0);
    v45 = v41 + 1.0 + v40;
    if (v44 == 4)
      v45 = v40 + 1.0;
    v46 = v39 + 1.0;
    if (v13 == 2)
      v46 = 1.0 - v39 - v41;
    if (v44 == 4)
      v46 = 1.0 - v39;
    if (v19 == 1)
      v47 = v46;
    else
      v47 = v45;
    v48 = v33 - v34;
    v49 = v47 - v43;
    v50 = v43 + v48 * (v47 - v43);
    *(double *)&time1.value = v50;
    switch(ValueAsInt)
    {
      case 1u:
        v51 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6680), MEMORY[0x1E0CA2E68], 0.0);
        v53 = *(double *)&time1.value;
        if (v51)
        {
          v54 = 1.0;
          v55 = 0.0;
          goto LABEL_49;
        }
        v60 = cos((*(double *)&time1.value - v43) * 3.14159265 / v49 * 0.5);
        v59 = 1.0;
        goto LABEL_55;
      case 2u:
        v56 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6680), MEMORY[0x1E0CA2E68], 0.0);
        v53 = *(double *)&time1.value;
        if (v56)
        {
          v54 = 0.0;
          v55 = 1.0;
          goto LABEL_49;
        }
        v58 = sin((*(double *)&time1.value - v43) * 3.14159265 / v49 * 0.5);
        goto LABEL_58;
      case 3u:
        v57 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6680), MEMORY[0x1E0CA2E68], 0.0);
        v53 = *(double *)&time1.value;
        if (v57)
        {
          v54 = 0.5;
          v55 = 0.5;
LABEL_49:
          PCMath::easeInOut((double *)&time1.value, v53, v54, v55, v43, v47, 0, v52);
        }
        else
        {
          v58 = sin((*(double *)&time1.value - v43) * 3.14159265 / v49 + -1.57079633) * 0.5 + 0.5;
LABEL_58:
          *(double *)&time1.value = v43 + v49 * v58;
        }
LABEL_59:
        result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6424), a2, 0.0);
        if ((_DWORD)result == 2)
        {
          v32 = *(double *)&time1.value;
          if (((int)v34 & 0x80000001) == 1)
            v32 = v47 + v43 - *(double *)&time1.value;
        }
        else
        {
          v32 = *(double *)&time1.value;
        }
        break;
      case 5u:
        if (v49 <= 0.0)
          goto LABEL_59;
        v58 = (v50 - v43) / v49 * ((v50 - v43) / v49);
        goto LABEL_58;
      case 6u:
        if (v49 <= 0.0)
          goto LABEL_59;
        v59 = 1.0;
        v60 = (1.0 - (v50 - v43) / v49) * (1.0 - (v50 - v43) / v49);
LABEL_55:
        v58 = v59 - v60;
        goto LABEL_58;
      default:
        goto LABEL_59;
    }
  }
  *a3 = v32;
  return result;
}

uint64_t PSSequenceBehavior::normalizeIndex(PSSequenceBehavior *this, double a2, const CMTime *a3)
{
  return (*(uint64_t (**)(PSSequenceBehavior *, const CMTime *))(*(_QWORD *)this + 664))(this, a3);
}

double PSSequenceBehavior::getEnd(PSSequenceBehavior *this, const CMTime *a2)
{
  int ValueAsInt;
  double result;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), a2, 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4896), a2, 0.0) == 2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5304), a2, 0.0);
  }
  else
  {
    result = 1.0;
    if ((ValueAsInt & 0xFFFFFFFE) == 2)
      return 1.0
           / (double)(*(unsigned int (**)(PSSequenceBehavior *, const CMTime *, double))(*(_QWORD *)this
                                                                                                  + 664))(this, a2, 1.0);
  }
  return result;
}

void PSPaintSequenceBehavior::PSPaintSequenceBehavior(PSPaintSequenceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  char v7[40];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  PSSequenceBehavior::PSSequenceBehavior(this, a2, a3, a4);
  *v5 = &off_1E65E2F18;
  v5[2] = &unk_1E65E31E8;
  v5[6] = &unk_1E65E3440;
  v5[42] = &unk_1E65E3498;
  *(_OWORD *)v7 = xmmword_1B3565038;
  *(_OWORD *)&v7[12] = *(__int128 *)((char *)&xmmword_1B3565038 + 12);
  OZChannelEnum::setTags((OZChannelEnum *)(v5 + 733), v7, 7);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Particle Paint Sequence Behavior Units Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 612, &v6, 1);
  PCString::~PCString(&v6);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4640), 4194306, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4640));
  OZChannel::setScale((OZChannel *)((char *)this + 5456), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 5456), "%");
  OZChannel::setMin((OZChannel *)((char *)this + 5456), 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 5456), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 5456), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 5456), *(double *)(*((_QWORD *)this + 698) + 32) / 100.0);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 5456), *(double *)(*((_QWORD *)this + 698) + 24) / 100.0);
}

void sub_1B2FDB31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PSSequenceBehavior *v10;

  PCString::~PCString(&a10);
  PSSequenceBehavior::~PSSequenceBehavior(v10);
  _Unwind_Resume(a1);
}

void PSPaintSequenceBehavior::PSPaintSequenceBehavior(PSPaintSequenceBehavior *this, const PSPaintSequenceBehavior *a2, char a3)
{
  _QWORD *v3;

  PSSequenceBehavior::PSSequenceBehavior(this, a2, a3);
  *v3 = &off_1E65E2F18;
  v3[2] = &unk_1E65E31E8;
  v3[6] = &unk_1E65E3440;
  v3[42] = &unk_1E65E3498;
}

OZChannelBase *PSPaintSequenceBehavior::updateHiddenFlags(uint64_t a1)
{
  OZChannelBase *v2;
  int ValueAsInt;
  int v4;
  int v5;
  OZChannelBase *v6;
  OZChannelBase *v7;

  v2 = (OZChannelBase *)(a1 + 5152);
  OZChannelBase::setFlag((OZChannelBase *)(a1 + 5152), 4194306, 1);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 4896), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 2)
  {
    OZChannelBase::resetFlag(v2, 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 5304), 4194306, 1);
  }
  else
  {
    v4 = ValueAsInt;
    OZChannelBase::setFlag(v2, 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 5304), 4194306, 1);
    if (v4 == 1)
    {
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 5456), 4227072, 1);
      goto LABEL_6;
    }
  }
  OZChannelBase::resetFlag((OZChannelBase *)(a1 + 5456), 4227072, 1);
LABEL_6:
  v5 = OZChannel::getValueAsInt((OZChannel *)(a1 + 5864), MEMORY[0x1E0CA2E68], 0.0);
  v6 = (OZChannelBase *)(a1 + 6120);
  v7 = (OZChannelBase *)(a1 + 6272);
  if (v5 == 4)
  {
    OZChannelBase::resetFlag(v6, 4194306, 1);
    return OZChannelBase::setFlag(v7, 0x400000, 1);
  }
  else
  {
    OZChannelBase::setFlag(v6, 4194306, 1);
    return OZChannelBase::resetFlag(v7, 4227072, 1);
  }
}

BOOL PSPaintSequenceBehavior::isAffectingWidth(PSPaintSequenceBehavior *this)
{
  return (*((_BYTE *)this + 3016) & 2) == 0;
}

CGColorSpace **PSPaintSequenceBehavior::getWidthSamples(CGColorSpace **this, CMTime *a2, int a3, double *a4)
{
  PSSequenceBehavior *v7;
  uint64_t v8;
  _BYTE v9[80];
  CGColorSpace *v10;
  double v11;

  if (a3)
  {
    v7 = (PSSequenceBehavior *)this;
    PSSequencedValues::PSSequencedValues((PSSequencedValues *)v9);
    if (a3 == 1)
    {
      PSSequenceBehavior::getValues(v7, a2, 0.5, (PSSequencedValues *)v9);
      *a4 = v11;
    }
    else
    {
      v8 = 0;
      do
      {
        v11 = 1.0;
        PSSequenceBehavior::getValues(v7, a2, 1.0 / (double)(a3 - 1) * (double)v8, (PSSequencedValues *)v9);
        a4[v8++] = v11;
      }
      while (a3 != (_DWORD)v8);
    }
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  }
  return this;
}

void sub_1B2FDB5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSPaintSequenceBehavior::arGetChannelList(uint64_t a1, void **a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;

  v4 = a1 + 352;
  v6 = (uint64_t)(a2 + 2);
  v5 = (unint64_t)a2[2];
  v7 = a2[1];
  if ((unint64_t)v7 >= v5)
  {
    v9 = ((char *)v7 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_98;
    v10 = v5 - (_QWORD)*a2;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v8 = v14 + 8;
    v17 = (char *)*a2;
    v16 = (char *)a2[1];
    if (v16 != *a2)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a2[1] = v8;
  v19 = a1 + 1208;
  v20 = (unint64_t)a2[2];
  if ((unint64_t)v8 >= v20)
  {
    v22 = ((char *)v8 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      goto LABEL_98;
    v23 = v20 - (_QWORD)*a2;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v25);
    else
      v26 = 0;
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = v19;
    v21 = v27 + 8;
    v30 = (char *)*a2;
    v29 = (char *)a2[1];
    if (v29 != *a2)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v27 - 1) = v31;
        v27 -= 8;
      }
      while (v29 != v30);
      v29 = (char *)*a2;
    }
    *a2 = v27;
    a2[1] = v21;
    a2[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v8 = v19;
    v21 = v8 + 1;
  }
  a2[1] = v21;
  v32 = a1 + 2216;
  v33 = (unint64_t)a2[2];
  if ((unint64_t)v21 >= v33)
  {
    v35 = ((char *)v21 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v35 + 1) >> 61)
      goto LABEL_98;
    v36 = v33 - (_QWORD)*a2;
    v37 = v36 >> 2;
    if (v36 >> 2 <= (unint64_t)(v35 + 1))
      v37 = v35 + 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v38);
    else
      v39 = 0;
    v40 = &v39[8 * v35];
    v41 = &v39[8 * v38];
    *(_QWORD *)v40 = v32;
    v34 = v40 + 8;
    v43 = (char *)*a2;
    v42 = (char *)a2[1];
    if (v42 != *a2)
    {
      do
      {
        v44 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v40 - 1) = v44;
        v40 -= 8;
      }
      while (v42 != v43);
      v42 = (char *)*a2;
    }
    *a2 = v40;
    a2[1] = v34;
    a2[2] = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *v21 = v32;
    v34 = v21 + 1;
  }
  a2[1] = v34;
  v45 = a1 + 2368;
  v46 = (unint64_t)a2[2];
  if ((unint64_t)v34 >= v46)
  {
    v48 = ((char *)v34 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v48 + 1) >> 61)
      goto LABEL_98;
    v49 = v46 - (_QWORD)*a2;
    v50 = v49 >> 2;
    if (v49 >> 2 <= (unint64_t)(v48 + 1))
      v50 = v48 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v51);
    else
      v52 = 0;
    v53 = &v52[8 * v48];
    v54 = &v52[8 * v51];
    *(_QWORD *)v53 = v45;
    v47 = v53 + 8;
    v56 = (char *)*a2;
    v55 = (char *)a2[1];
    if (v55 != *a2)
    {
      do
      {
        v57 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *((_QWORD *)v53 - 1) = v57;
        v53 -= 8;
      }
      while (v55 != v56);
      v55 = (char *)*a2;
    }
    *a2 = v53;
    a2[1] = v47;
    a2[2] = v54;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *v34 = v45;
    v47 = v34 + 1;
  }
  a2[1] = v47;
  v58 = a1 + 2960;
  v59 = (unint64_t)a2[2];
  if ((unint64_t)v47 >= v59)
  {
    v61 = ((char *)v47 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      goto LABEL_98;
    v62 = v59 - (_QWORD)*a2;
    v63 = v62 >> 2;
    if (v62 >> 2 <= (unint64_t)(v61 + 1))
      v63 = v61 + 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    if (v64)
      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v64);
    else
      v65 = 0;
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    *(_QWORD *)v66 = v58;
    v60 = v66 + 8;
    v69 = (char *)*a2;
    v68 = (char *)a2[1];
    if (v68 != *a2)
    {
      do
      {
        v70 = *((_QWORD *)v68 - 1);
        v68 -= 8;
        *((_QWORD *)v66 - 1) = v70;
        v66 -= 8;
      }
      while (v68 != v69);
      v68 = (char *)*a2;
    }
    *a2 = v66;
    a2[1] = v60;
    a2[2] = v67;
    if (v68)
      operator delete(v68);
  }
  else
  {
    *v47 = v58;
    v60 = v47 + 1;
  }
  a2[1] = v60;
  v71 = a1 + 3112;
  v72 = (unint64_t)a2[2];
  if ((unint64_t)v60 < v72)
  {
    *v60 = v71;
    v73 = v60 + 1;
    goto LABEL_97;
  }
  v74 = ((char *)v60 - (_BYTE *)*a2) >> 3;
  if ((unint64_t)(v74 + 1) >> 61)
LABEL_98:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v75 = v72 - (_QWORD)*a2;
  v76 = v75 >> 2;
  if (v75 >> 2 <= (unint64_t)(v74 + 1))
    v76 = v74 + 1;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v77 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v77 = v76;
  if (v77)
    v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v77);
  else
    v78 = 0;
  v79 = &v78[8 * v74];
  v80 = &v78[8 * v77];
  *(_QWORD *)v79 = v71;
  v73 = v79 + 8;
  v82 = (char *)*a2;
  v81 = (char *)a2[1];
  if (v81 != *a2)
  {
    do
    {
      v83 = *((_QWORD *)v81 - 1);
      v81 -= 8;
      *((_QWORD *)v79 - 1) = v83;
      v79 -= 8;
    }
    while (v81 != v82);
    v81 = (char *)*a2;
  }
  *a2 = v79;
  a2[1] = v73;
  a2[2] = v80;
  if (v81)
    operator delete(v81);
LABEL_97:
  a2[1] = v73;
}

void `non-virtual thunk to'PSPaintSequenceBehavior::arGetChannelList(uint64_t a1, void **a2)
{
  PSPaintSequenceBehavior::arGetChannelList(a1 - 336, a2);
}

uint64_t PSPaintSequenceBehavior::getNumObjects(PSPaintSequenceBehavior *this, const CMTime *a2)
{
  return 1;
}

uint64_t PSPaintSequenceBehavior::getOffsetAndDoWrap(PSPaintSequenceBehavior *this, const CMTime *a2, double *a3, BOOL *a4)
{
  unsigned int ValueAsInt;
  int v9;
  int v11;
  uint64_t result;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  double Seconds;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25;
  BOOL v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _BYTE v45[24];
  __int128 v46;
  CMTime time;
  __n128 v48;
  CMTimeEpoch v49;
  CMTime v50;
  CMTime v51;
  CMTime v52;
  CMTime time2;
  CMTime time1;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5864), a2, 0.0);
  v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), a2, 0.0);
  *a4 = 0;
  if (ValueAsInt > 6 || ValueAsInt == 4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5456), a2, 0.0);
    v40 = v39 + 1.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6120), a2, 0.0);
    v42 = v41;
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5608), a2, 0.0);
    v43 = 1.0 - v42;
    if ((_DWORD)result != 1)
      v43 = v42;
    v36 = v40 * v43 + 0.0;
  }
  else
  {
    v11 = v9;
    (*(void (**)(CMTime *__return_ptr, PSPaintSequenceBehavior *))(*(_QWORD *)this + 608))(&v51, this);
    v50 = v52;
    time1 = v52;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    result = CMTimeCompare(&time1, &time2);
    if ((int)result <= 0)
    {
      *a3 = 0.0;
      return result;
    }
    v13 = v11 & 0xFFFFFFFE;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5456), a2, 0.0);
    v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6272), a2, 0.0);
    v17 = v16;
    v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6424), a2, 0.0);
    v48 = 0uLL;
    v49 = 0;
    v19 = (*(uint64_t (**)(PSPaintSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v19 + 336), &v48);
    time2 = v51;
    time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v46);
    time1 = v50;
    *(__n128 *)&time2.value = v48;
    time2.epoch = v49;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v45);
    operator/(&v46, (uint64_t)v45, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 5608), a2, 0.0) == 1)
      Seconds = 1.0 - Seconds;
    v21 = v17;
    if (v18 == 1)
    {
      v22 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0);
      v21 = v15 + v17;
      v23 = v15 + v17 + -1.0;
      if (v13 == 2)
        v23 = v17 + v15 + v15;
      if (v22 != 4)
        v21 = v23;
    }
    v24 = Seconds * v21 + 0.0;
    time1.value = 0;
    modf(v24 + -0.000001, (long double *)&time1.value);
    if (*(double *)&time1.value <= v17 + -1.0)
      v25 = *(double *)&time1.value;
    else
      v25 = v17 + -1.0;
    v27 = v25 > 0.0 && v18 == 1;
    *a4 = v27;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0) == 4)
    {
      v28 = -v15;
    }
    else
    {
      v28 = 0.0;
      if (v13 == 2)
      {
        v28 = -v15;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4896), a2, 0.0) == 2)
        {
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5304), a2, 0.0);
          v28 = v28 - v29;
        }
      }
    }
    v30 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), MEMORY[0x1E0CA2E68], 0.0);
    v31 = 1.0;
    v32 = v15 + 1.0;
    if (v30 == 4)
      v32 = 1.0;
    v33 = 1.0 - v15;
    if (v13 != 2)
      v33 = 1.0;
    if (v30 != 4)
      v31 = v33;
    if (v18 == 1)
      v34 = v31;
    else
      v34 = v32;
    v35 = v34 - v28;
    v36 = v28 + (v24 - v25) * (v34 - v28);
    switch(ValueAsInt)
    {
      case 1u:
        v37 = cos((v36 - v28) * 3.14159265 / v35 * 0.5);
        v38 = 1.0;
        goto LABEL_48;
      case 2u:
        v44 = sin((v36 - v28) * 3.14159265 / v35 * 0.5);
        break;
      case 3u:
        v44 = sin((v36 - v28) * 3.14159265 / v35 + -1.57079633) * 0.5 + 0.5;
        break;
      case 5u:
        if (v35 <= 0.0)
          goto LABEL_50;
        v44 = (v36 - v28) / v35 * ((v36 - v28) / v35);
        break;
      case 6u:
        if (v35 <= 0.0)
          goto LABEL_50;
        v38 = 1.0;
        v37 = (1.0 - (v36 - v28) / v35) * (1.0 - (v36 - v28) / v35);
LABEL_48:
        v44 = v38 - v37;
        break;
      default:
        goto LABEL_50;
    }
    v36 = v28 + v35 * v44;
LABEL_50:
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6424), a2, 0.0);
    if ((_DWORD)result == 2 && ((int)v25 & 0x80000001) == 1)
      v36 = v34 + v28 - v36;
  }
  *a3 = v36;
  return result;
}

uint64_t PSPaintSequenceBehavior::normalizeIndex(PSPaintSequenceBehavior *this, double a2, const CMTime *a3)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 4896), MEMORY[0x1E0CA2E68], 0.0);
}

void PSPaintSequenceBehavior::getEnd(PSPaintSequenceBehavior *this, const CMTime *a2)
{
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 4384), a2, 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4896), a2, 0.0) == 2)
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5304), a2, 0.0);
}

uint64_t PSPaintSequenceBehavior::findEmitter(uint64_t this, OZSceneNode *a2)
{
  *(_QWORD *)(this + 344) = 0;
  return this;
}

void PSPaintSequenceBehavior::~PSPaintSequenceBehavior(PSPaintSequenceBehavior *this)
{
  PSSequenceBehavior::~PSSequenceBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSPaintSequenceBehavior::~PSPaintSequenceBehavior(PSPaintSequenceBehavior *this)
{
  PSSequenceBehavior::~PSSequenceBehavior((PSPaintSequenceBehavior *)((char *)this - 16));
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSPaintSequenceBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSPaintSequenceBehavior *)((char *)this - 48));
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSPaintSequenceBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSPaintSequenceBehavior *)((char *)this - 336));
}

{
  PSSequenceBehavior::~PSSequenceBehavior((PSPaintSequenceBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSEmitter_Factory::getInstance(PSEmitter_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitter_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitter_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitter_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitter_Factory::_instance;
}

uint64_t PSParticleType_Factory::getInstance(PSParticleType_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSParticleType_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSParticleType_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSParticleType_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSParticleType_Factory::_instance;
}

uint64_t PSReplicator_Factory::getInstance(PSReplicator_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSReplicator_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSReplicator_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSReplicator_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSReplicator_Factory::_instance;
}

uint64_t PSReplicatorPType_Factory::getInstance(PSReplicatorPType_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSReplicatorPType_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSReplicatorPType_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSReplicatorPType_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSReplicatorPType_Factory::_instance;
}

uint64_t PSPaint_Factory::getInstance(PSPaint_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPaint_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPaint_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPaint_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPaint_Factory::_instance;
}

uint64_t PSPaintPType_Factory::getInstance(PSPaintPType_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPaintPType_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPaintPType_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPaintPType_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPaintPType_Factory::_instance;
}

uint64_t PSEmitterMoToFoBehavior_Factory::getInstance(PSEmitterMoToFoBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSEmitterMoToFoBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSEmitterMoToFoBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSEmitterMoToFoBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSEmitterMoToFoBehavior_Factory::_instance;
}

uint64_t PSScaleOverLifeBehavior_Factory::getInstance(PSScaleOverLifeBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSScaleOverLifeBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSScaleOverLifeBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSScaleOverLifeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSScaleOverLifeBehavior_Factory::_instance;
}

uint64_t PSSequenceBehavior_Factory::getInstance(PSSequenceBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSSequenceBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSSequenceBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSSequenceBehavior_Factory::_instance;
}

uint64_t PSPaintSequenceBehavior_Factory::getInstance(PSPaintSequenceBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPaintSequenceBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPaintSequenceBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPaintSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPaintSequenceBehavior_Factory::_instance;
}

uint64_t PSSpinOverLifeBehavior_Factory::getInstance(PSSpinOverLifeBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSSpinOverLifeBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSSpinOverLifeBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSSpinOverLifeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSSpinOverLifeBehavior_Factory::_instance;
}

uint64_t PSPenPropertyBehavior_Factory::getInstance(PSPenPropertyBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPenPropertyBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPenPropertyBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPenPropertyBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPenPropertyBehavior_Factory::_instance;
}

uint64_t PSPenPressureBehavior_Factory::getInstance(PSPenPressureBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPenPressureBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPenPressureBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPenPressureBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPenPressureBehavior_Factory::_instance;
}

uint64_t PSPenSpeedBehavior_Factory::getInstance(PSPenSpeedBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPenSpeedBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPenSpeedBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPenSpeedBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPenSpeedBehavior_Factory::_instance;
}

uint64_t PSPenTiltBehavior_Factory::getInstance(PSPenTiltBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PSPenTiltBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PSPenTiltBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<PSPenTiltBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return PSPenTiltBehavior_Factory::_instance;
}

void sub_1B2FDC990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<PSEmitter_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitter_Factory *v0;

  v0 = (PSEmitter_Factory *)operator new();
  PSEmitter_Factory::PSEmitter_Factory(v0);
  PSEmitter_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDCA18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void PSEmitter_Factory::PSEmitter_Factory(PSEmitter_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B3561450;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65E3510;
  *((_QWORD *)this + 16) = &unk_1E65E35E0;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2FDCAB8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void PSEmitter_Factory::~PSEmitter_Factory(PSEmitter_Factory *this)
{
  PSEmitter_Factory::~PSEmitter_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65E3510;
  *((_QWORD *)this + 16) = &unk_1E65E35E0;
  v2 = (PSEmitter_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *PSEmitter_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  PSEmitter *v6;
  const PCString *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  const PCString *v13;
  char v15;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (PSEmitter *)operator new();
    PSEmitter::PSEmitter(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(_QWORD *))(*((_QWORD *)v6 + 25) + 88))((_QWORD *)v6 + 25);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v15, (const PCString *)CFSTR("Motion Effect"));
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v9, 40);
  v11 = v10;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v10);
  OZChannelBase::setID((OZChannelBase *)&v11->var7, NextUniqueID);
  v12 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v11->var0 + 80))(v11);
  OZChannelBase::setName(v12, a2, 0);
  (*((void (**)(OZChannelBase *))v11->var0 + 115))(v11);
  OZChannelBase::setRangeName((OZChannelBase *)&v15, v13);
  return v11;
}

void sub_1B2FDCC44(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C408C860A13, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *PSEmitter_Factory::createCopy(PSEmitter_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  PSEmitter *v5;
  const PSEmitter *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (PSEmitter *)operator new();
  PSEmitter::PSEmitter(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B2FDCD38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C860A13);
  _Unwind_Resume(a1);
}

void PSEmitter_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Emitter Short Desc", "com.apple.ozone.framework");
}

PCString *PSEmitter_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Emitter Short Desc");
}

PCString *PSEmitter_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ParticleEmitter");
}

PCString *PSEmitter_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ParticleEmitter");
}

uint64_t PSEmitter_Factory::getIconIDInternal(PSEmitter_Factory *this)
{
  return 8;
}

PCString *PSEmitter_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Emitter_Icon");
}

uint64_t PSEmitter_Factory::createNodeCopy(PSEmitter_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  PSEmitter *v5;
  const PSEmitter *v6;

  v5 = (PSEmitter *)operator new();
  PSEmitter::PSEmitter(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B2FDCE30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C860A13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSEmitter_Factory::~PSEmitter_Factory(PSEmitter_Factory *this)
{
  PSEmitter_Factory::~PSEmitter_Factory((PSEmitter_Factory *)((char *)this - 128));
}

{
  PSEmitter_Factory::~PSEmitter_Factory((PSEmitter_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<PSParticleType_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSParticleType_Factory *v0;

  v0 = (PSParticleType_Factory *)operator new();
  PSParticleType_Factory::PSParticleType_Factory(v0);
  PSParticleType_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDCF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void PSParticleType_Factory::PSParticleType_Factory(PSParticleType_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B355E430;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65E3638;
  *((_QWORD *)this + 16) = &unk_1E65E3708;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2FDCFC8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void PSParticleType_Factory::~PSParticleType_Factory(PSParticleType_Factory *this)
{
  PSParticleType_Factory::~PSParticleType_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65E3638;
  *((_QWORD *)this + 16) = &unk_1E65E3708;
  v2 = (PSParticleType_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *PSParticleType_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  PSParticleType *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (PSParticleType *)operator new();
    PSParticleType::PSParticleType(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(PSParticleType *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2FDD148(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C409CD462B0, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

PSParticleType *PSParticleType_Factory::createCopy(PSParticleType_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  PSParticleType *v5;
  PSParticleType *v6;
  void *v7;

  v5 = (PSParticleType *)operator new();
  PSParticleType::PSParticleType(v5, v6, a3);
  (*(void (**)(PSParticleType *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2FDD230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409CD462B0);
  _Unwind_Resume(a1);
}

void PSParticleType_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Particle Type Name", "com.apple.ozone.framework");
}

PCString *PSParticleType_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Particle Type Name");
}

PCString *PSParticleType_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ParticleCell");
}

PCString *PSParticleType_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ParticleCell");
}

uint64_t PSParticleType_Factory::getIconIDInternal(PSParticleType_Factory *this)
{
  return 7;
}

PSParticleType *PSParticleType_Factory::createNodeCopy(PSParticleType_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  PSParticleType *v5;
  PSParticleType *v6;

  v5 = (PSParticleType *)operator new();
  PSParticleType::PSParticleType(v5, v6, a3);
  return v5;
}

void sub_1B2FDD318(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409CD462B0);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSParticleType_Factory::~PSParticleType_Factory(PSParticleType_Factory *this)
{
  PSParticleType_Factory::~PSParticleType_Factory((PSParticleType_Factory *)((char *)this - 128));
}

{
  PSParticleType_Factory::~PSParticleType_Factory((PSParticleType_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<PSReplicator_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSReplicator_Factory *v0;

  v0 = (PSReplicator_Factory *)operator new();
  PSReplicator_Factory::PSReplicator_Factory(v0);
  PSReplicator_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDD410(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void PSReplicator_Factory::PSReplicator_Factory(PSReplicator_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3561450;
  v4 = xmmword_1B3561460;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65E3760;
  *((_QWORD *)this + 16) = &unk_1E65E3830;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2FDD4B0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void PSReplicator_Factory::~PSReplicator_Factory(PSReplicator_Factory *this)
{
  PSReplicator_Factory::~PSReplicator_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65E3760;
  *((_QWORD *)this + 16) = &unk_1E65E3830;
  v2 = (PSReplicator_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *PSReplicator_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  PSReplicator *v6;
  const PCString *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  const PCString *v13;
  char v15;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (PSReplicator *)operator new();
    PSReplicator::PSReplicator(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(_QWORD *))(*((_QWORD *)v6 + 25) + 88))((_QWORD *)v6 + 25);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v15, (const PCString *)CFSTR("Motion Effect"));
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v9, 40);
  v11 = v10;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v10);
  OZChannelBase::setID((OZChannelBase *)&v11->var7, NextUniqueID);
  v12 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v11->var0 + 80))(v11);
  OZChannelBase::setName(v12, a2, 0);
  (*((void (**)(OZChannelBase *))v11->var0 + 115))(v11);
  OZChannelBase::setRangeName((OZChannelBase *)&v15, v13);
  return v11;
}

void sub_1B2FDD63C(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C408C860A13, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *PSReplicator_Factory::createCopy(PSReplicator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  PSReplicator *v5;
  const PSReplicator *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (PSReplicator *)operator new();
  PSReplicator::PSReplicator(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B2FDD730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C860A13);
  _Unwind_Resume(a1);
}

void PSReplicator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Replicator Short Desc", "com.apple.ozone.framework");
}

PCString *PSReplicator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Replicator Short Desc");
}

PCString *PSReplicator_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Replicator");
}

PCString *PSReplicator_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Replicator");
}

uint64_t PSReplicator_Factory::getIconIDInternal(PSReplicator_Factory *this)
{
  return 19;
}

PCString *PSReplicator_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Replicator_Icon");
}

uint64_t PSReplicator_Factory::createNodeCopy(PSReplicator_Factory *this, OZSceneNode *a2, uint64_t a3)
{
  PSReplicator *v5;
  const PSReplicator *v6;

  v5 = (PSReplicator *)operator new();
  PSReplicator::PSReplicator(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B2FDD828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C860A13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSReplicator_Factory::~PSReplicator_Factory(PSReplicator_Factory *this)
{
  PSReplicator_Factory::~PSReplicator_Factory((PSReplicator_Factory *)((char *)this - 128));
}

{
  PSReplicator_Factory::~PSReplicator_Factory((PSReplicator_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<PSReplicatorPType_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSReplicatorPType_Factory *v0;

  v0 = (PSReplicatorPType_Factory *)operator new();
  PSReplicatorPType_Factory::PSReplicatorPType_Factory(v0);
  PSReplicatorPType_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDD920(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void PSReplicatorPType_Factory::PSReplicatorPType_Factory(PSReplicatorPType_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E430;
  v4 = xmmword_1B3564E90;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65E3888;
  *((_QWORD *)this + 16) = &unk_1E65E3958;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2FDD9C0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void PSReplicatorPType_Factory::~PSReplicatorPType_Factory(PSReplicatorPType_Factory *this)
{
  PSReplicatorPType_Factory::~PSReplicatorPType_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65E3888;
  *((_QWORD *)this + 16) = &unk_1E65E3958;
  v2 = (PSReplicatorPType_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *PSReplicatorPType_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  PSReplicatorPType *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (PSReplicatorPType *)operator new();
    PSReplicatorPType::PSReplicatorPType(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(PSReplicatorPType *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2FDDB40(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4095359925, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

PSReplicatorPType *PSReplicatorPType_Factory::createCopy(PSReplicatorPType_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  PSReplicatorPType *v5;
  PSReplicatorPType *v6;
  void *v7;

  v5 = (PSReplicatorPType *)operator new();
  PSReplicatorPType::PSReplicatorPType(v5, v6, a3);
  (*(void (**)(PSReplicatorPType *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2FDDC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4095359925);
  _Unwind_Resume(a1);
}

void PSReplicatorPType_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Replicator PType Name", "com.apple.ozone.framework");
}

PCString *PSReplicatorPType_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Replicator PType Name");
}

PCString *PSReplicatorPType_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ReplicatorCell");
}

PCString *PSReplicatorPType_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ReplicatorCell");
}

uint64_t PSReplicatorPType_Factory::getIconIDInternal(PSReplicatorPType_Factory *this)
{
  return 20;
}

PSReplicatorPType *PSReplicatorPType_Factory::createNodeCopy(PSReplicatorPType_Factory *this, OZSceneNode *a2, char a3)
{
  PSReplicatorPType *v5;
  PSReplicatorPType *v6;

  v5 = (PSReplicatorPType *)operator new();
  PSReplicatorPType::PSReplicatorPType(v5, v6, a3);
  return v5;
}

void sub_1B2FDDD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4095359925);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSReplicatorPType_Factory::~PSReplicatorPType_Factory(PSReplicatorPType_Factory *this)
{
  PSReplicatorPType_Factory::~PSReplicatorPType_Factory((PSReplicatorPType_Factory *)((char *)this - 128));
}

{
  PSReplicatorPType_Factory::~PSReplicatorPType_Factory((PSReplicatorPType_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<PSPaint_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPaint_Factory *v0;

  v0 = (PSPaint_Factory *)operator new();
  PSPaint_Factory::PSPaint_Factory(v0);
  PSPaint_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDDE08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void PSPaint_Factory::PSPaint_Factory(PSPaint_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3561460;
  v4 = xmmword_1B355CF50;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65E39B0;
  *((_QWORD *)this + 16) = &unk_1E65E3A80;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2FDDEA8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void PSPaint_Factory::~PSPaint_Factory(PSPaint_Factory *this)
{
  PSPaint_Factory::~PSPaint_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65E39B0;
  *((_QWORD *)this + 16) = &unk_1E65E3A80;
  v2 = (PSPaint_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *PSPaint_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  PSPaint *v6;
  const PCString *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  const PCString *v13;
  char v15;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (PSPaint *)operator new();
    PSPaint::PSPaint(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(_QWORD *))(*((_QWORD *)v6 + 25) + 88))((_QWORD *)v6 + 25);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v15, (const PCString *)CFSTR("Motion Effect"));
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v9, 40);
  v11 = v10;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v10);
  OZChannelBase::setID((OZChannelBase *)&v11->var7, NextUniqueID);
  v12 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v11->var0 + 80))(v11);
  OZChannelBase::setName(v12, a2, 0);
  (*((void (**)(OZChannelBase *))v11->var0 + 115))(v11);
  OZChannelBase::setRangeName((OZChannelBase *)&v15, v13);
  return v11;
}

void sub_1B2FDE034(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40637A83DELL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *PSPaint_Factory::createCopy(PSPaint_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  PSPaint *v5;
  const PSPaint *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (PSPaint *)operator new();
  PSPaint::PSPaint(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B2FDE128(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40637A83DELL);
  _Unwind_Resume(a1);
}

uint64_t PSPaint_Factory::createNodeCopy(PSPaint_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  PSPaint *v5;
  const PSPaint *v6;

  v5 = (PSPaint *)operator new();
  PSPaint::PSPaint(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B2FDE1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40637A83DELL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSPaint_Factory::~PSPaint_Factory(PSPaint_Factory *this)
{
  PSPaint_Factory::~PSPaint_Factory((PSPaint_Factory *)((char *)this - 128));
}

{
  PSPaint_Factory::~PSPaint_Factory((PSPaint_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<PSPaintPType_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPaintPType_Factory *v0;

  v0 = (PSPaintPType_Factory *)operator new();
  PSPaintPType_Factory::PSPaintPType_Factory(v0);
  PSPaintPType_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDE2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void PSPaintPType_Factory::PSPaintPType_Factory(PSPaintPType_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3564E90;
  v4 = xmmword_1B355E440;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65E3AD8;
  *((_QWORD *)this + 16) = &unk_1E65E3BA8;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2FDE358(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void PSPaintPType_Factory::~PSPaintPType_Factory(PSPaintPType_Factory *this)
{
  PSPaintPType_Factory::~PSPaintPType_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65E3AD8;
  *((_QWORD *)this + 16) = &unk_1E65E3BA8;
  v2 = (PSPaintPType_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *PSPaintPType_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  PSPaintPType *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (PSPaintPType *)operator new();
    PSPaintPType::PSPaintPType(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(PSPaintPType *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2FDE4D8(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4086FB70F7, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

PSPaintPType *PSPaintPType_Factory::createCopy(PSPaintPType_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  PSPaintPType *v5;
  PSPaintPType *v6;
  void *v7;

  v5 = (PSPaintPType *)operator new();
  PSPaintPType::PSPaintPType(v5, v6, a3);
  (*(void (**)(PSPaintPType *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2FDE5C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4086FB70F7);
  _Unwind_Resume(a1);
}

PSPaintPType *PSPaintPType_Factory::createNodeCopy(PSPaintPType_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  PSPaintPType *v5;
  PSPaintPType *v6;

  v5 = (PSPaintPType *)operator new();
  PSPaintPType::PSPaintPType(v5, v6, a3);
  return v5;
}

void sub_1B2FDE658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4086FB70F7);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSPaintPType_Factory::~PSPaintPType_Factory(PSPaintPType_Factory *this)
{
  PSPaintPType_Factory::~PSPaintPType_Factory((PSPaintPType_Factory *)((char *)this - 128));
}

{
  PSPaintPType_Factory::~PSPaintPType_Factory((PSPaintPType_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<PSEmitterMoToFoBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSEmitterMoToFoBehavior_Factory *v0;

  v0 = (PSEmitterMoToFoBehavior_Factory *)operator new();
  PSEmitterMoToFoBehavior_Factory::PSEmitterMoToFoBehavior_Factory(v0);
  PSEmitterMoToFoBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDE750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSEmitterMoToFoBehavior_Factory::PSEmitterMoToFoBehavior_Factory(PSEmitterMoToFoBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD70;
  v4 = xmmword_1B35645F0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E3C00;
  *((_QWORD *)this + 18) = &unk_1E65E3CE0;
}

void sub_1B2FDE800(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSEmitterMoToFoBehavior *PSEmitterMoToFoBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSEmitterMoToFoBehavior *v6;

  v6 = (PSEmitterMoToFoBehavior *)operator new();
  PSEmitterMoToFoBehavior::PSEmitterMoToFoBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2FDE870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40EF478AE9);
  _Unwind_Resume(a1);
}

PSEmitterMoToFoBehavior *PSEmitterMoToFoBehavior_Factory::createCopy(PSEmitterMoToFoBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  PSEmitterMoToFoBehavior *v5;
  PSEmitterMoToFoBehavior *v6;

  v5 = (PSEmitterMoToFoBehavior *)operator new();
  PSEmitterMoToFoBehavior::PSEmitterMoToFoBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDE908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40EF478AE9);
  _Unwind_Resume(a1);
}

void PSEmitterMoToFoBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Emitter Motion To Forces Behavior", "com.apple.ozone.framework");
}

PCString *PSEmitterMoToFoBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Emitter Motion To Forces Behavior");
}

PSEmitterMoToFoBehavior *PSEmitterMoToFoBehavior_Factory::createBehaviorCopy(PSEmitterMoToFoBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  PSEmitterMoToFoBehavior *v5;
  PSEmitterMoToFoBehavior *v6;

  v5 = (PSEmitterMoToFoBehavior *)operator new();
  PSEmitterMoToFoBehavior::PSEmitterMoToFoBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDE9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40EF478AE9);
  _Unwind_Resume(a1);
}

void PSEmitterMoToFoBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Emitter Motion To Forces Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSScaleOverLifeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSScaleOverLifeBehavior_Factory *v0;

  v0 = (PSScaleOverLifeBehavior_Factory *)operator new();
  PSScaleOverLifeBehavior_Factory::PSScaleOverLifeBehavior_Factory(v0);
  PSScaleOverLifeBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDEA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSScaleOverLifeBehavior_Factory::PSScaleOverLifeBehavior_Factory(PSScaleOverLifeBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFF0;
  v4 = xmmword_1B3564600;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355DCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E3D38;
  *((_QWORD *)this + 18) = &unk_1E65E3E18;
}

void sub_1B2FDEAFC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSScaleOverLifeBehavior *PSScaleOverLifeBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSScaleOverLifeBehavior *v6;

  v6 = (PSScaleOverLifeBehavior *)operator new();
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior(v6, this, a2, a3);
  (*(void (**)(PSScaleOverLifeBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FDEB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EBEA7F86);
  _Unwind_Resume(a1);
}

PSScaleOverLifeBehavior *PSScaleOverLifeBehavior_Factory::createCopy(PSScaleOverLifeBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  PSScaleOverLifeBehavior *v5;
  const PSScaleOverLifeBehavior *v6;

  v5 = (PSScaleOverLifeBehavior *)operator new();
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDEC14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EBEA7F86);
  _Unwind_Resume(a1);
}

void PSScaleOverLifeBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Scale Over Life Behavior", "com.apple.ozone.framework");
}

PCString *PSScaleOverLifeBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Scale Over Life Behavior");
}

void PSScaleOverLifeBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Particle Behavior Category", "com.apple.ozone.framework");
}

PCString *PSScaleOverLifeBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Particles");
}

PSScaleOverLifeBehavior *PSScaleOverLifeBehavior_Factory::createBehaviorCopy(PSScaleOverLifeBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  PSScaleOverLifeBehavior *v5;
  const PSScaleOverLifeBehavior *v6;

  v5 = (PSScaleOverLifeBehavior *)operator new();
  PSScaleOverLifeBehavior::PSScaleOverLifeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDECFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EBEA7F86);
  _Unwind_Resume(a1);
}

void PSScaleOverLifeBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Scale Over Life Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSSequenceBehavior_Factory *v0;

  v0 = (PSSequenceBehavior_Factory *)operator new();
  PSSequenceBehavior_Factory::PSSequenceBehavior_Factory(v0);
  PSSequenceBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDED80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSSequenceBehavior_Factory::PSSequenceBehavior_Factory(PSSequenceBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFF0;
  v4 = xmmword_1B3562C00;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355DCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E3E70;
  *((_QWORD *)this + 18) = &unk_1E65E3F50;
}

void sub_1B2FDEE30(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSSequenceBehavior *PSSequenceBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSSequenceBehavior *v6;

  v6 = (PSSequenceBehavior *)operator new();
  PSSequenceBehavior::PSSequenceBehavior(v6, this, a2, a3);
  (*(void (**)(PSSequenceBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FDEEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406AA8EC51);
  _Unwind_Resume(a1);
}

PSSequenceBehavior *PSSequenceBehavior_Factory::createCopy(PSSequenceBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  PSSequenceBehavior *v5;
  const PSSequenceBehavior *v6;

  v5 = (PSSequenceBehavior *)operator new();
  PSSequenceBehavior::PSSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDEF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406AA8EC51);
  _Unwind_Resume(a1);
}

void PSSequenceBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Replicator Sequence Behavior", "com.apple.ozone.framework");
}

PCString *PSSequenceBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Replicator Sequence Behavior");
}

void PSSequenceBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Replicator Behavior Category", "com.apple.ozone.framework");
}

PCString *PSSequenceBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Replicator");
}

PSSequenceBehavior *PSSequenceBehavior_Factory::createBehaviorCopy(PSSequenceBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  PSSequenceBehavior *v5;
  const PSSequenceBehavior *v6;

  v5 = (PSSequenceBehavior *)operator new();
  PSSequenceBehavior::PSSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406AA8EC51);
  _Unwind_Resume(a1);
}

void PSSequenceBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Replicator Sequence Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSPaintSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPaintSequenceBehavior_Factory *v0;

  v0 = (PSPaintSequenceBehavior_Factory *)operator new();
  PSPaintSequenceBehavior_Factory::PSPaintSequenceBehavior_Factory(v0);
  PSPaintSequenceBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDF0B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSPaintSequenceBehavior_Factory::PSPaintSequenceBehavior_Factory(PSPaintSequenceBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3562C00;
  v4 = xmmword_1B3565070;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E3FA8;
  *((_QWORD *)this + 18) = &unk_1E65E4088;
}

void sub_1B2FDF164(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSPaintSequenceBehavior *PSPaintSequenceBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSPaintSequenceBehavior *v6;

  v6 = (PSPaintSequenceBehavior *)operator new();
  PSPaintSequenceBehavior::PSPaintSequenceBehavior(v6, this, a2, a3);
  (*(void (**)(PSPaintSequenceBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FDF1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406AA8EC51);
  _Unwind_Resume(a1);
}

PSPaintSequenceBehavior *PSPaintSequenceBehavior_Factory::createCopy(PSPaintSequenceBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  PSPaintSequenceBehavior *v5;
  const PSPaintSequenceBehavior *v6;

  v5 = (PSPaintSequenceBehavior *)operator new();
  PSPaintSequenceBehavior::PSPaintSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406AA8EC51);
  _Unwind_Resume(a1);
}

void PSPaintSequenceBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Particle Paint Sequence Behavior", "com.apple.ozone.framework");
}

PCString *PSPaintSequenceBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Particle Paint Sequence Behavior");
}

PSPaintSequenceBehavior *PSPaintSequenceBehavior_Factory::createBehaviorCopy(PSPaintSequenceBehavior_Factory *this, OZBehavior *a2, char a3)
{
  PSPaintSequenceBehavior *v5;
  const PSPaintSequenceBehavior *v6;

  v5 = (PSPaintSequenceBehavior *)operator new();
  PSPaintSequenceBehavior::PSPaintSequenceBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C406AA8EC51);
  _Unwind_Resume(a1);
}

void PSPaintSequenceBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Particle Paint Sequence Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSSpinOverLifeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSSpinOverLifeBehavior_Factory *v0;

  v0 = (PSSpinOverLifeBehavior_Factory *)operator new();
  PSSpinOverLifeBehavior_Factory::PSSpinOverLifeBehavior_Factory(v0);
  PSSpinOverLifeBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDF3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSSpinOverLifeBehavior_Factory::PSSpinOverLifeBehavior_Factory(PSSpinOverLifeBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B3565080;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E40E0;
  *((_QWORD *)this + 18) = &unk_1E65E41C0;
}

void sub_1B2FDF470(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSSpinOverLifeBehavior *PSSpinOverLifeBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSSpinOverLifeBehavior *v6;

  v6 = (PSSpinOverLifeBehavior *)operator new();
  PSSpinOverLifeBehavior::PSSpinOverLifeBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2FDF4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A49BEE3BLL);
  _Unwind_Resume(a1);
}

PSSpinOverLifeBehavior *PSSpinOverLifeBehavior_Factory::createCopy(PSSpinOverLifeBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  PSSpinOverLifeBehavior *v5;
  PSSpinOverLifeBehavior *v6;

  v5 = (PSSpinOverLifeBehavior *)operator new();
  PSSpinOverLifeBehavior::PSSpinOverLifeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF578(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A49BEE3BLL);
  _Unwind_Resume(a1);
}

void PSSpinOverLifeBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Spin Over Life Behavior", "com.apple.ozone.framework");
}

PCString *PSSpinOverLifeBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Spin Over Life Behavior");
}

PSSpinOverLifeBehavior *PSSpinOverLifeBehavior_Factory::createBehaviorCopy(PSSpinOverLifeBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  PSSpinOverLifeBehavior *v5;
  PSSpinOverLifeBehavior *v6;

  v5 = (PSSpinOverLifeBehavior *)operator new();
  PSSpinOverLifeBehavior::PSSpinOverLifeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A49BEE3BLL);
  _Unwind_Resume(a1);
}

void PSSpinOverLifeBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Spin Over Life Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSPenPropertyBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPenPropertyBehavior_Factory *v0;

  v0 = (PSPenPropertyBehavior_Factory *)operator new();
  PSPenPropertyBehavior_Factory::PSPenPropertyBehavior_Factory(v0);
  PSPenPropertyBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDF6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSPenPropertyBehavior_Factory::PSPenPropertyBehavior_Factory(PSPenPropertyBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B3565090;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E4218;
  *((_QWORD *)this + 18) = &unk_1E65E42F8;
}

void sub_1B2FDF76C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSPenPropertyBehavior *PSPenPropertyBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSPenPropertyBehavior *v6;

  v6 = (PSPenPropertyBehavior *)operator new();
  PSPenPropertyBehavior::PSPenPropertyBehavior(v6, this, a2, a3);
  (*(void (**)(PSPenPropertyBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FDF7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40824AFB14);
  _Unwind_Resume(a1);
}

PSPenPropertyBehavior *PSPenPropertyBehavior_Factory::createCopy(PSPenPropertyBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  PSPenPropertyBehavior *v5;
  const PSPenPropertyBehavior *v6;

  v5 = (PSPenPropertyBehavior *)operator new();
  PSPenPropertyBehavior::PSPenPropertyBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40824AFB14);
  _Unwind_Resume(a1);
}

void PSPenPropertyBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Property Behavior", "com.apple.ozone.framework");
}

PCString *PSPenPropertyBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Pen Property Behavior");
}

PSPenPropertyBehavior *PSPenPropertyBehavior_Factory::createBehaviorCopy(PSPenPropertyBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  PSPenPropertyBehavior *v5;
  const PSPenPropertyBehavior *v6;

  v5 = (PSPenPropertyBehavior *)operator new();
  PSPenPropertyBehavior::PSPenPropertyBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDF944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40824AFB14);
  _Unwind_Resume(a1);
}

void PSPenPropertyBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Property Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSPenPressureBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPenPressureBehavior_Factory *v0;

  v0 = (PSPenPressureBehavior_Factory *)operator new();
  PSPenPressureBehavior_Factory::PSPenPressureBehavior_Factory(v0);
  PSPenPressureBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDF9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSPenPressureBehavior_Factory::PSPenPressureBehavior_Factory(PSPenPressureBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3565090;
  v4 = xmmword_1B35650A0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E4350;
  *((_QWORD *)this + 18) = &unk_1E65E4430;
}

void sub_1B2FDFA78(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSPenPressureBehavior *PSPenPressureBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSPenPressureBehavior *v6;

  v6 = (PSPenPressureBehavior *)operator new();
  PSPenPressureBehavior::PSPenPressureBehavior(v6, this, a2, a3);
  (*(void (**)(PSPenPressureBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FDFAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072E4963BLL);
  _Unwind_Resume(a1);
}

PSPenPressureBehavior *PSPenPressureBehavior_Factory::createCopy(PSPenPressureBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  PSPenPressureBehavior *v5;
  const PSPenPressureBehavior *v6;

  v5 = (PSPenPressureBehavior *)operator new();
  PSPenPressureBehavior::PSPenPressureBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDFB90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072E4963BLL);
  _Unwind_Resume(a1);
}

void PSPenPressureBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Pressure Behavior", "com.apple.ozone.framework");
}

PCString *PSPenPressureBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Pen Pressure Behavior");
}

PSPenPressureBehavior *PSPenPressureBehavior_Factory::createBehaviorCopy(PSPenPressureBehavior_Factory *this, OZBehavior *a2, char a3)
{
  PSPenPressureBehavior *v5;
  const PSPenPressureBehavior *v6;

  v5 = (PSPenPressureBehavior *)operator new();
  PSPenPressureBehavior::PSPenPressureBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDFC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4072E4963BLL);
  _Unwind_Resume(a1);
}

void PSPenPressureBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Pressure Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSPenSpeedBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPenSpeedBehavior_Factory *v0;

  v0 = (PSPenSpeedBehavior_Factory *)operator new();
  PSPenSpeedBehavior_Factory::PSPenSpeedBehavior_Factory(v0);
  PSPenSpeedBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDFCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSPenSpeedBehavior_Factory::PSPenSpeedBehavior_Factory(PSPenSpeedBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3565090;
  v4 = xmmword_1B35650B0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E4488;
  *((_QWORD *)this + 18) = &unk_1E65E4568;
}

void sub_1B2FDFD84(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSPenSpeedBehavior *PSPenSpeedBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSPenSpeedBehavior *v6;

  v6 = (PSPenSpeedBehavior *)operator new();
  PSPenSpeedBehavior::PSPenSpeedBehavior(v6, this, a2, a3);
  (*(void (**)(PSPenSpeedBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FDFE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C1ED5FCBLL);
  _Unwind_Resume(a1);
}

PSPenSpeedBehavior *PSPenSpeedBehavior_Factory::createCopy(PSPenSpeedBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  PSPenSpeedBehavior *v5;
  const PSPenSpeedBehavior *v6;

  v5 = (PSPenSpeedBehavior *)operator new();
  PSPenSpeedBehavior::PSPenSpeedBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDFE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C1ED5FCBLL);
  _Unwind_Resume(a1);
}

void PSPenSpeedBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Speed Behavior", "com.apple.ozone.framework");
}

PCString *PSPenSpeedBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Pen Speed Behavior");
}

PSPenSpeedBehavior *PSPenSpeedBehavior_Factory::createBehaviorCopy(PSPenSpeedBehavior_Factory *this, OZBehavior *a2, char a3)
{
  PSPenSpeedBehavior *v5;
  const PSPenSpeedBehavior *v6;

  v5 = (PSPenSpeedBehavior *)operator new();
  PSPenSpeedBehavior::PSPenSpeedBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FDFF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40C1ED5FCBLL);
  _Unwind_Resume(a1);
}

void PSPenSpeedBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Speed Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<PSPenTiltBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  PSPenTiltBehavior_Factory *v0;

  v0 = (PSPenTiltBehavior_Factory *)operator new();
  PSPenTiltBehavior_Factory::PSPenTiltBehavior_Factory(v0);
  PSPenTiltBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2FDFFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void PSPenTiltBehavior_Factory::PSPenTiltBehavior_Factory(PSPenTiltBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3565090;
  v4 = xmmword_1B35650C0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65E45C0;
  *((_QWORD *)this + 18) = &unk_1E65E46A0;
}

void sub_1B2FE0090(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PSPenTiltBehavior *PSPenTiltBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  PSPenTiltBehavior *v6;

  v6 = (PSPenTiltBehavior *)operator new();
  PSPenTiltBehavior::PSPenTiltBehavior(v6, this, a2, a3);
  (*(void (**)(PSPenTiltBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2FE0110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4084311906);
  _Unwind_Resume(a1);
}

PSPenTiltBehavior *PSPenTiltBehavior_Factory::createCopy(PSPenTiltBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  PSPenTiltBehavior *v5;
  const PSPenTiltBehavior *v6;

  v5 = (PSPenTiltBehavior *)operator new();
  PSPenTiltBehavior::PSPenTiltBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FE01A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4084311906);
  _Unwind_Resume(a1);
}

void PSPenTiltBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Tilt Behavior", "com.apple.ozone.framework");
}

PCString *PSPenTiltBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Pen Tilt Behavior");
}

PSPenTiltBehavior *PSPenTiltBehavior_Factory::createBehaviorCopy(PSPenTiltBehavior_Factory *this, OZBehavior *a2, char a3)
{
  PSPenTiltBehavior *v5;
  const PSPenTiltBehavior *v6;

  v5 = (PSPenTiltBehavior *)operator new();
  PSPenTiltBehavior::PSPenTiltBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2FE0268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4084311906);
  _Unwind_Resume(a1);
}

void PSPenTiltBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Pen Tilt Behavior Desc", "com.apple.ozone.framework");
}

void PSSpinOverLifeBehavior::PSSpinOverLifeBehavior(PSSpinOverLifeBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  CMTime v6;
  PCString v7;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65E46F8;
  v5[2] = &unk_1E65E49E0;
  v5[6] = &unk_1E65E4C38;
  v5[42] = &unk_1E65E4C90;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Over Life Behavior Increment Type Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Spin Over Life Behavior Increment Type"));
  OZChannelEnum::OZChannelEnum((PSSpinOverLifeBehavior *)((char *)this + 504), (const PCString *)&v6, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Over Life Behavior Spin Rate"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 5, 1.57079633, (const PCString *)&v6, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString((PCString *)&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Over Life Behavior Begin Spin"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 6, 0.0, (const PCString *)&v6, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString((PCString *)&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Over Life Behavior End Spin"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)this + 7, 1.57079633, (const PCString *)&v6, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString((PCString *)&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Over Life Behavior Custom Spin"));
  OZChannelAngleOverRange::OZChannelAngleOverRange((PSSpinOverLifeBehavior *)((char *)this + 1216), (const PCString *)&v6, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString((PCString *)&v6);
  OZReflexiveBehavior::setAffectsLeafNodes(this, 1u);
  OZReflexiveBehavior::hideAffectsLeafNodes(this, 1);
  OZChannel::setSliderMin((OZChannel *)this + 5, -6.28318531);
  OZChannel::setSliderMax((OZChannel *)this + 5, 6.28318531);
  OZChannel::setSliderMin((OZChannel *)this + 6, -6.28318531);
  OZChannel::setSliderMax((OZChannel *)this + 6, 6.28318531);
  OZChannel::setSliderMin((OZChannel *)this + 7, -6.28318531);
  OZChannel::setSliderMax((OZChannel *)this + 7, 6.28318531);
  OZChannel::setSliderMin((OZChannel *)this + 8, -6.28318531);
  OZChannel::setSliderMax((OZChannel *)this + 8, 6.28318531);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1216), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1216));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Spin Over Life Behavior Over Life"));
  PCString::set((PCString *)this + 171, (const PCString *)&v6);
  PCString::~PCString((PCString *)&v6);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)this + 8, MEMORY[0x1E0CA2E68]);
  OZFigTimeForChannelSeconds(&v6, 1.0, 0x40000);
  OZChannel::setValueAndIgnoreRecordOption((OZChannel *)this + 8, &v6);
  OZChannelAngleOverRange::setValueOverRange((OZChannel *)this + 8, 0.0, 1.0, 1.57079633);
}

void sub_1B2FE05DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  OZReflexiveBehavior *v12;
  OZChannelEnum *v13;
  OZChannel *v14;
  OZChannel *v15;
  OZChannel *v16;
  PCString *v17;

  PCString::~PCString((PCString *)&a9);
  OZChannelAngleOverRange::~OZChannelAngleOverRange(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void PSSpinOverLifeBehavior::PSSpinOverLifeBehavior(PSSpinOverLifeBehavior *this, PSSpinOverLifeBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65E46F8;
  *(_QWORD *)(v5 + 16) = &unk_1E65E49E0;
  *(_QWORD *)(v5 + 48) = &unk_1E65E4C38;
  *(_QWORD *)(v5 + 336) = &unk_1E65E4C90;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (PSSpinOverLifeBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)this + 5, (const OZChannelBase *)((char *)a2 + 760), v6);
  *((_QWORD *)this + 95) = &off_1E6551728;
  *((_QWORD *)this + 97) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)this + 6, (const OZChannelBase *)((char *)a2 + 912), v6);
  *((_QWORD *)this + 114) = &off_1E6551728;
  *((_QWORD *)this + 116) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)this + 7, (const OZChannelBase *)((char *)a2 + 1064), v6);
  *((_QWORD *)this + 133) = &off_1E6551728;
  *((_QWORD *)this + 135) = &unk_1E6551A88;
  OZChannelAngleOverRange::OZChannelAngleOverRange((PSSpinOverLifeBehavior *)((char *)this + 1216), (PSSpinOverLifeBehavior *)((char *)a2 + 1216), v6);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1216), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1216));
}

void sub_1B2FE07D8(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannelEnum *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior(PSSpinOverLifeBehavior *this)
{
  OZChannel *v2;

  *(_QWORD *)this = &off_1E65E46F8;
  *((_QWORD *)this + 2) = &unk_1E65E49E0;
  *((_QWORD *)this + 6) = &unk_1E65E4C38;
  *((_QWORD *)this + 42) = &unk_1E65E4C90;
  v2 = (OZChannel *)((char *)this + 1216);
  *((_QWORD *)this + 152) = &off_1E655DCA0;
  *((_QWORD *)this + 154) = &unk_1E655E050;
  PCString::~PCString((PCString *)this + 171);
  OZChannel::~OZChannel(v2);
  OZChannel::~OZChannel((OZChannel *)this + 7);
  OZChannel::~OZChannel((OZChannel *)this + 6);
  OZChannel::~OZChannel((OZChannel *)this + 5);
  OZChannelEnum::~OZChannelEnum((PSSpinOverLifeBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior(PSSpinOverLifeBehavior *this)
{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior((PSSpinOverLifeBehavior *)((char *)this - 16));
}

{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior((PSSpinOverLifeBehavior *)((char *)this - 48));
}

{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior((PSSpinOverLifeBehavior *)((char *)this - 336));
}

{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior((PSSpinOverLifeBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior((PSSpinOverLifeBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSSpinOverLifeBehavior::~PSSpinOverLifeBehavior((PSSpinOverLifeBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void PSSpinOverLifeBehavior::operator=(PCString *a1, const void *a2)
{
  const PCString *v4;
  const PCString *v5;

  OZReflexiveBehavior::operator=((uint64_t)a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=((uint64_t)&a1[63], (uint64_t)&v4[63]);
  OZChannelBase::operator=((uint64_t)&a1[95], (uint64_t)&v5[95]);
  OZChannelBase::operator=((uint64_t)&a1[114], (uint64_t)&v5[114]);
  OZChannelBase::operator=((uint64_t)&a1[133], (uint64_t)&v5[133]);
  OZChannelBase::operator=((uint64_t)&a1[152], (uint64_t)&v5[152]);
  PCString::set(a1 + 171, v5 + 171);
}

unint64_t PSSpinOverLifeBehavior::canAddToSceneNode(PSSpinOverLifeBehavior *this, OZSceneNode *a2)
{
  unint64_t v3;
  unint64_t result;
  char *v5;
  OZChannel *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = *(_QWORD *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2) + 8);
  v11 = xmmword_1B355E430;
  if (OZFactory::isKindOfClass(v3, (int32x4_t *)&v11))
  {
    v10 = xmmword_1B3564E90;
    if (!OZFactory::isKindOfClass(v3, (int32x4_t *)&v10))
      return 1;
  }
  v9 = xmmword_1B3561450;
  if (OZFactory::isKindOfClass(v3, (int32x4_t *)&v9))
  {
    v8 = xmmword_1B3561460;
    if (!OZFactory::isKindOfClass(v3, (int32x4_t *)&v8))
      return 1;
  }
  v7 = xmmword_1B355CCA0;
  result = OZFactory::isKindOfClass(v3, (int32x4_t *)&v7);
  if (!(_DWORD)result)
    return result;
  if (!OZChannelBase::isEnabled((OZChannelBase *)(v5 + 25776), 0, 1)
    || (OZChannelBase::isEnabled((OZChannelBase *)(v5 + 21760), 0, 1) & 1) != 0)
  {
    return 0;
  }
  v6 = (OZChannel *)(v5 + 25904);
  result = OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result == 1)
    return result;
  return OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 2;
}

BOOL PSSpinOverLifeBehavior::isRebuildUIChannel(PSSpinOverLifeBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 504) == a2;
}

OZChannelBase *PSSpinOverLifeBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  const CMTime *v6;
  char *v7;
  int v8;
  uint64_t v9;
  const void *v10;
  char *v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;

  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 504), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v7 = *(char **)(v4 + 16);
      if (v7)
      result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 504), v6, 0.0);
      v8 = (int)result;
      if (v5 != (_DWORD)result)
        break;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    v9 = *(_QWORD *)(a2 + 8);
    if (v9 != a2)
    {
      while (1)
      {
        v10 = *(const void **)(v9 + 16);
        v11 = v10
        v12 = (OZChannelBase *)(v11 + 760);
        OZChannelBase::resetFlag((OZChannelBase *)(v11 + 760), 2, 1);
        v13 = (OZChannelBase *)(v11 + 912);
        OZChannelBase::resetFlag((OZChannelBase *)(v11 + 912), 2, 1);
        v14 = (OZChannelBase *)(v11 + 1064);
        OZChannelBase::resetFlag((OZChannelBase *)(v11 + 1064), 2, 1);
        v15 = (OZChannelBase *)(v11 + 1216);
        result = OZChannelBase::resetFlag(v15, 2, 1);
        if (v5 != v8)
          break;
        switch(v5)
        {
          case 2:
            OZChannelBase::setFlag(v12, 0x400000, 1);
            OZChannelBase::setFlag(v13, 0x400000, 1);
            OZChannelBase::setFlag(v14, 0x400000, 1);
            goto LABEL_17;
          case 1:
            OZChannelBase::setFlag(v12, 0x400000, 1);
            OZChannelBase::resetFlag(v13, 0x400000, 1);
            OZChannelBase::resetFlag(v14, 0x400000, 1);
            goto LABEL_19;
          case 0:
            OZChannelBase::resetFlag(v12, 0x400000, 1);
            OZChannelBase::setFlag(v13, 0x400000, 1);
            OZChannelBase::setFlag(v14, 0x400000, 1);
LABEL_19:
            result = OZChannelBase::setFlag(v15, 0x400000, 1);
            break;
        }
LABEL_20:
        v9 = *(_QWORD *)(v9 + 8);
        if (v9 == a2)
          return result;
      }
      OZChannelBase::resetFlag(v12, 0x400000, 1);
      OZChannelBase::resetFlag(v13, 0x400000, 1);
      OZChannelBase::resetFlag(v14, 0x400000, 1);
LABEL_17:
      result = OZChannelBase::resetFlag(v15, 0x400000, 1);
      goto LABEL_20;
    }
  }
  return result;
}

void PSSpinOverLifeBehavior::accumForcesRate(OZChannel *this, OZSimStateArray *a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  CMTime v6;

  v6 = *(CMTime *)((_BYTE *)a2 + 1);
  OZChannel::getValueAsDouble(this + 5, &v6, 0.0);
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(float64x2_t *)(v4 + 152) = vaddq_f64(*(float64x2_t *)(v4 + 152), (float64x2_t)0);
      *(double *)(v4 + 168) = v3 + *(double *)(v4 + 168);
      v4 += 248;
    }
    while (v4 != v5);
  }
}

void PSSpinOverLifeBehavior::accumForcesDestination(OZChannel *this, OZSimStateArray *a2)
{
  OZChannel *v4;
  OZChannel *v5;
  uint64_t v6;
  OZChannel *v7;
  CMTime *v8;
  const void *v9;
  char *v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  Float64 Seconds;
  CMTime *v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  char *v23;
  Float64 v24;
  CMTime v25;
  CMTime time;
  CMTime v27;
  CMTime time2;
  CMTime time1;

  v4 = this + 6;
  if (OZChannel::hasMoreThanOneKeypoint(this + 6)
    || (v5 = this + 7, OZChannel::hasMoreThanOneKeypoint(this + 7))
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)v4, (const OZChannelBase *)1) & 1) != 0
    || OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)&this[7], (const OZChannelBase *)1))
  {
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
    {
      v7 = this + 7;
      v8 = (CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v9 = *(const void **)(v6 + 232);
        if (v9)
        else
          v10 = 0;
        v27 = *(CMTime *)(v10 + 32);
        time1 = *(CMTime *)(v10 + 32);
        time2 = *v8;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          v11 = *(_OWORD *)(v10 + 8);
          time1.epoch = *((_QWORD *)v10 + 3);
          *(_OWORD *)&time1.value = v11;
          OZChannel::getValueAsDouble(v4, &time1, 0.0);
          v13 = v12;
          OZChannel::getValueAsDouble(v7, &time1, 0.0);
          v15 = v14 - v13;
          time = v27;
          Seconds = CMTimeGetSeconds(&time);
          *(float64x2_t *)(v6 + 152) = vaddq_f64(*(float64x2_t *)(v6 + 152), (float64x2_t)0);
          *(double *)(v6 + 168) = v15 * (1.0 / Seconds) + *(double *)(v6 + 168);
        }
        v6 += 248;
      }
      while (v6 != *((_QWORD *)a2 + 1));
    }
  }
  else
  {
    v17 = (CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble(v4, MEMORY[0x1E0CA2E68], 0.0);
    v19 = v18;
    OZChannel::getValueAsDouble(v5, v17, 0.0);
    v21 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
    {
      v22 = v20 - v19;
      do
      {
        v23 = *(char **)(v21 + 232);
        if (v23)
        v27 = *(CMTime *)(v23 + 32);
        time1 = *(CMTime *)(v23 + 32);
        time2 = *v17;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          v25 = v27;
          v24 = CMTimeGetSeconds(&v25);
          *(float64x2_t *)(v21 + 152) = vaddq_f64(*(float64x2_t *)(v21 + 152), (float64x2_t)0);
          *(double *)(v21 + 168) = v22 * (1.0 / v24) + *(double *)(v21 + 168);
        }
        v21 += 248;
      }
      while (v21 != *((_QWORD *)a2 + 1));
    }
  }
}

void PSSpinOverLifeBehavior::accumForcesCustom(OZChannel *this, OZSimStateArray *a2)
{
  OZChannel *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  CMTime *v10;
  _BYTE **v11;
  uint64_t v12;
  Float64 Seconds;
  double v14;
  double v15;
  Float64 v16;
  unint64_t v17;
  double v18;
  unsigned int v19;
  int v20;
  int v21;
  double v22;
  _QWORD v23[1024];
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  __n128 v28;
  CMTimeEpoch v29;
  CMTime v30;
  CMTime v31;
  double *v32;
  double *v33;
  unsigned int v34;
  CMTime v35;
  CMTime time2;
  CMTime time1;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = this + 8;
  if (OZChannel::hasMoreThanOneKeypoint(this + 8)
    || OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)v4, (const OZChannelBase *)1))
  {
    v5 = (*((uint64_t (**)(OZChannel *))this->var0 + 42))(this);
    v6 = *(double *)(v5 + 368);
    v35 = *(CMTime *)((_BYTE *)a2 + 1);
    v34 = 512;
    v7 = ((uint64_t (*)(uint64_t))MEMORY[0x1E0C80A78])(v5);
    MEMORY[0x1E0C80A78](v7);
    v32 = (double *)v23;
    v33 = v8;
    OZChannel::getSamples(v4, 0.0, 0.001953125, &v34, &v33, &v32, 0.0);
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
    {
      v10 = (CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v11 = *(_BYTE ***)(v9 + 232);
        if (v11)
        v31 = *(CMTime *)(v11 + 1);
        v30 = *(CMTime *)(v11 + 4);
        v28 = 0uLL;
        v29 = 0;
        v12 = (*((uint64_t (**)(OZChannel *))this->var0 + 42))(this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v28);
        time1 = v35;
        time2 = v31;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        time1 = v27;
        *(__n128 *)&time2.value = v28;
        time2.epoch = v29;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          time1 = v30;
          time2 = *v10;
          if (CMTimeCompare(&time1, &time2) >= 1)
          {
            v26 = v30;
            Seconds = CMTimeGetSeconds(&v26);
            time1 = v35;
            time2 = v31;
            v14 = 1.0 / Seconds;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v25);
            v15 = v14 * CMTimeGetSeconds(&v25);
            time1 = v35;
            *(__n128 *)&time2.value = v28;
            time2.epoch = v29;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
            time1 = v27;
            time2 = v31;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
            v16 = CMTimeGetSeconds(&v24);
            LODWORD(v17) = v34;
            v18 = (double)v17;
            v19 = vcvtmd_s64_f64(v15 * v18 + 0.5 + 0.0000001);
            v20 = vcvtmd_s64_f64(v14 * v16 * v18 + 0.5 + 0.0000001);
            v21 = v20 & ~(v20 >> 31);
            if (v21 != v19)
            {
              v22 = v6 * (*(double *)&v23[v19] - *(double *)&v23[v21]);
              *(float64x2_t *)(v9 + 152) = vaddq_f64(*(float64x2_t *)(v9 + 152), (float64x2_t)0);
              *(double *)(v9 + 168) = v22 + *(double *)(v9 + 168);
            }
          }
        }
        v9 += 248;
      }
      while (v9 != *((_QWORD *)a2 + 1));
    }
  }
}

void PSSpinOverLifeBehavior::accumForces(PSSpinOverLifeBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  int ValueAsInt;

  if ((*(uint64_t (**)(PSSpinOverLifeBehavior *, OZSimStateArray *, OZTransformNode *))(*(_QWORD *)this
                                                                                                 + 336))(this, a2, a3))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), MEMORY[0x1E0CA2E68], 0.0);
    switch(ValueAsInt)
    {
      case 2:
        PSSpinOverLifeBehavior::accumForcesCustom((OZChannel *)this, a2);
        break;
      case 1:
        PSSpinOverLifeBehavior::accumForcesDestination((OZChannel *)this, a2);
        break;
      case 0:
        PSSpinOverLifeBehavior::accumForcesRate((OZChannel *)this, a2);
        break;
    }
  }
}

void PSSpinOverLifeBehavior::accumInitialValues(PSSpinOverLifeBehavior *this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  int ValueAsInt;
  double v8;
  float64x2_t *v9;
  uint64_t v10;
  BOOL v11;
  float64x2_t *v12;
  int v13;
  double v14;
  float64x2_t v15;
  CMTime v16;

  v16 = *(CMTime *)((_BYTE *)a2 + 1);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 2)
  {
    OZChannelAngleOverRange::getValueOverRangeAsDouble((OZChannel *)this + 8, 0.0, 0.0);
  }
  else
  {
    v8 = 0.0;
    if (ValueAsInt == 1)
      OZChannel::getValueAsDouble((OZChannel *)this + 6, &v16, 0.0);
  }
  v9 = *(float64x2_t **)a2;
  v10 = *((_QWORD *)a2 + 1);
  v11 = v10 == *(_QWORD *)a2 || a3 < 1;
  if (!v11)
  {
    v12 = (float64x2_t *)(v10 - 248);
    v13 = 1;
    do
    {
      v14 = v8 + v12[7].f64[1];
      v12[7].f64[0] = v12[7].f64[0] + 0.0;
      v12[7].f64[1] = v14;
      v15 = vaddq_f64((float64x2_t)*(unint64_t *)&v8, v12[6]);
      v12[5] = vaddq_f64(v12[5], (float64x2_t)0);
      v12[6] = v15;
      if (v12 == v9)
        break;
      v12 = (float64x2_t *)((char *)v12 - 248);
      v11 = v13++ < a3;
    }
    while (v11);
  }
}

void PSPaint::PSPaint(PSPaint *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PSPaint *v5;

  PSReplicator::PSReplicator(this, a2, a3, a4);
  *(_QWORD *)v5 = off_1E65E4CD0;
  *((_QWORD *)v5 + 25) = &unk_1E65E5008;
  *((_QWORD *)v5 + 27) = &unk_1E65E58E0;
  *((_QWORD *)v5 + 31) = &unk_1E65E5B38;
  *((_QWORD *)v5 + 841) = &unk_1E65E5B90;
  *((_QWORD *)v5 + 4215) = &unk_1E65E5C68;
  PSPaint::initPaintChannels(v5);
  (*(void (**)(PSPaint *, uint64_t))(*(_QWORD *)this + 448))(this, 1);
  PSEmitter::addNewParticleType(this, 0);
}

void sub_1B2FE16A0(_Unwind_Exception *a1)
{
  PSReplicator *v1;

  PSReplicator::~PSReplicator(v1);
  _Unwind_Resume(a1);
}

OZChannelBase *PSPaint::initPaintChannels(PSPaint *this)
{
  PSPaint *v1;
  OZChannelBase *v2;
  OZChannelBase *v3;
  OZChannelBase *v4;
  PCString v6;

  v1 = this;
  v2 = (OZChannelBase *)((char *)this + 19488);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Shape Anim"));
  OZChannelBase::setName(v2, &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Replicator Shape Anim Enum"));
  OZChannelEnum::setStrings((const PCString *)v2, &v6, 1);
  PCString::~PCString(&v6);
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 19896), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 19896));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 20152), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 20152));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 20304), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 20304));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 20456), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 20456));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 21064), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 21064));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 21216), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 21216));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 21472), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 21472));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 22240), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 22240));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 22496), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 22496));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 22752), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 22752));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 23008), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 23008));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 23160), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 23160));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 23312), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 23312));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 23464), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 23464));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 24352), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 24352));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 25240), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 25240));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 25392), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 25392));
  OZChannelBase::setFlag((OZChannelBase *)v1 + 232, 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)v1 + 232);
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 26136), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 26136));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 26288), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 26288));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 26440), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 26440));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 26592), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 26592));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 26744), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 26744));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 27048), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 27048));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 27200), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 27200));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 27352), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 27352));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 27512), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 27512));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 28128), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 28128));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 28864), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 28864));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 29760), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 29760));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 30920), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 30920));
  v3 = (OZChannelBase *)((char *)v1 + 31072);
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 31072), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 31072));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 31328), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 31328));
  v4 = (OZChannelBase *)((char *)v1 + 31632);
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 31632), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 31632));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 31784), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 31784));
  OZChannel::setDefaultValue((OZChannel *)((char *)v1 + 19232), 4.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 19232), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 19232));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 27352), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 27352));
  OZChannel::setDefaultValue((OZChannel *)((char *)v1 + 28256), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)v1 + 31632), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)v1 + 29456), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)v1 + 32792), 0.0);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Paint Is 3D"));
  OZChannelBase::setName((OZChannelBase *)((char *)v1 + 32792), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Paint Is Depth Ordered"));
  OZChannelBase::setName((OZChannelBase *)((char *)v1 + 33352), &v6, 0);
  PCString::~PCString(&v6);
  OZChannel::setDefaultValue((OZChannel *)((char *)v1 + 32944), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)v1 + 19232), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)v1 + 19744), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)v1 + 28256), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)v1 + 31632), 0);
  OZChannelBase::reset((OZChannelBase *)v1 + 263, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)v1 + 32792), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)v1 + 32944), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 19232), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 19232));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 19896), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 19896));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 19744), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 19744));
  OZChannelBase::setFlag((OZChannelBase *)((char *)v1 + 28128), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)v1 + 28128));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)v1 + 27672), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)v1 + 27672));
  v1 = (PSPaint *)((char *)v1 + 27976);
  OZChannelBase::resetFlag((OZChannelBase *)v1, 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)v1);
  OZChannelBase::setFlag(v3, 2, 0);
  OZChannelBase::saveStateAsDefault(v3);
  OZChannelBase::setFlag(v4, 2, 0);
  return OZChannelBase::saveStateAsDefault(v4);
}

void sub_1B2FE1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSPaint::PSPaint(PSPaint *this, const PSPaint *a2, uint64_t a3)
{
  char v3;
  _QWORD *v5;
  OZChannelBase *PaintPType;
  OZChannelBase *v7;
  unsigned int NextUniqueID;

  v3 = a3;
  PSReplicator::PSReplicator(this, a2, a3);
  *v5 = off_1E65E4CD0;
  v5[25] = &unk_1E65E5008;
  v5[27] = &unk_1E65E58E0;
  v5[31] = &unk_1E65E5B38;
  v5[841] = &unk_1E65E5B90;
  v5[4215] = &unk_1E65E5C68;
  if ((v3 & 0x60) == 0x20)
  {
    PaintPType = (OZChannelBase *)PSPaint::getPaintPType(this);
    v7 = PaintPType;
    if (PaintPType)
    {
      NextUniqueID = OZChannelBase::getNextUniqueID(PaintPType);
      OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
    }
  }
}

void sub_1B2FE1ED4(_Unwind_Exception *a1)
{
  PSReplicator *v1;

  PSReplicator::~PSReplicator(v1);
  _Unwind_Resume(a1);
}

void *PSPaint::getPaintPType(PSPaint *this)
{
  const void *v2;

  if ((*(unsigned int (**)(PSPaint *))(*(_QWORD *)this + 216))(this) == 1
    && (v2 = (const void *)(*(uint64_t (**)(PSPaint *, _QWORD))(*(_QWORD *)this + 224))(this, 0)) != 0)
  {
  }
  else
  {
    return 0;
  }
}

uint64_t `non-virtual thunk to'PSPaint::operator=(uint64_t a1)
{
  return PSReplicator::operator=(a1 - 200);
}

void `non-virtual thunk to'PSPaint::~PSPaint(PSPaint *this)
{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 200));
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 216));
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 248));
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 6728));
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 33720));
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  PSReplicator::~PSReplicator((PSPaint *)((char *)this - 33720));
  JUMPOUT(0x1B5E29170);
}

void PSPaint::~PSPaint(PSPaint *this)
{
  PSReplicator::~PSReplicator(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *PSPaint::didCreateCopyForCopyOnWrite(PSPaint *this, double a2)
{
  OZChannelBase *result;
  OZChannelBase *updated;
  unsigned int NextUniqueID;
  OZChannelBase *v6;
  unsigned int v7;

  PSEmitter::didCreateCopyForCopyOnWrite(this, a2);
  result = (OZChannelBase *)*((_QWORD *)this + 145);
  if (result)
  {
    if (result)
    {
      result = (OZChannelBase *)LODWORD(result[2].var7);
      if (result >= *((_DWORD *)this + 70))
      {
        updated = OZChannelBase::updateIDGenerator(result);
        NextUniqueID = OZChannelBase::getNextUniqueID(updated);
        OZChannelBase::setID((OZChannelBase *)((char *)this + 256), NextUniqueID);
        result = (OZChannelBase *)PSPaint::getPaintPType(this);
        if (result)
        {
          v6 = result;
          v7 = OZChannelBase::getNextUniqueID(result);
          return OZChannelBase::setID((OZChannelBase *)&v6->var7, v7);
        }
      }
    }
  }
  return result;
}

void *PSPaint::getRotoshape(PSPaint *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 145);
  if (result)
  return result;
}

OZChannelBase *`non-virtual thunk to'PSPaint::didCreateCopyForCopyOnWrite(PSPaint *this, double a2)
{
  return PSPaint::didCreateCopyForCopyOnWrite((PSPaint *)((char *)this - 200), a2);
}

CGColorSpace **PSPaint::getOriginalBounds(_QWORD *a1, float64x2_t *a2, uint64_t a3)
{
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t CurrentRenderParams;
  _OWORD v11[5];
  CGColorSpaceRef v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGColorSpaceRef space;
  int v20;

  v6 = (const void *)a1[145];
  if (!v6)
    return (CGColorSpace **)(*(uint64_t (**)(_QWORD *, float64x2_t *, uint64_t))(*a1 + 688))(a1, a2, a3);
  if (!v7)
    return (CGColorSpace **)(*(uint64_t (**)(_QWORD *, float64x2_t *, uint64_t))(*a1 + 688))(a1, a2, a3);
  v8 = (uint64_t)v7;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v14);
  *(_QWORD *)&v15 = *(_QWORD *)(a3 + 16);
  v14 = *(_OWORD *)a3;
  BYTE8(v15) = *(_BYTE *)(a3 + 202);
  BYTE10(v15) = *(_BYTE *)(a3 + 220);
  v16 = *(_OWORD *)(a3 + 24);
  LODWORD(v17) = 1;
  v11[3] = v17;
  v11[4] = v18;
  v11[0] = v14;
  v11[1] = v15;
  v11[2] = v16;
  v12 = space;
  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v13 = v20;
  CurrentRenderParams = OZShape::getCurrentRenderParams(v8 + 18976, (uint64_t)v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
  OZRotoshape::getOriginalBoundsNoLock(v8, a2, (__int128 *)a3, CurrentRenderParams);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&space);
}

void sub_1B2FE2290(_Unwind_Exception *a1)
{
  CGColorSpace **v1;
  CGColorSpace **v2;

  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'PSPaint::getOriginalBounds(uint64_t a1, float64x2_t *a2, uint64_t a3)
{
  return PSPaint::getOriginalBounds((_QWORD *)(a1 - 200), a2, a3);
}

void `non-virtual thunk to'PSPaint::getPaintOriginalBounds(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
  PSEmitter::getOriginalBounds((Li3DEngineScene *)(a1 - 33720), a2, a3);
}

uint64_t PSPaint::getPaintProjectedBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t `non-virtual thunk to'PSPaint::getPaintProjectedBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 33720) + 184))(a1 - 33720);
}

BOOL PSPaint::getIsPaint3D(PSPaint *this)
{
  char *v1;
  _BOOL8 result;

  v1 = (char *)this + 33728;
  if (*((_BYTE *)this + 33729))
    return *v1 != 0;
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32792), MEMORY[0x1E0CA2E68], 0.0) != 0;
  *v1 = result;
  v1[1] = 1;
  return result;
}

BOOL `non-virtual thunk to'PSPaint::getIsPaint3D(PSPaint *this)
{
  return PSPaint::getIsPaint3D((PSPaint *)((char *)this - 33720));
}

BOOL PSPaint::getIsFacingCamera(PSPaint *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 33200), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL `non-virtual thunk to'PSPaint::getIsFacingCamera(PSPaint *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this - 520), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL PSPaint::getIsSimulatingOrSequencing(PSPaint *this, const CMTime *a2)
{
  void *PaintPType;
  void *v4;
  _BOOL8 v5;
  void *v7;
  void *v8;
  uint64_t v9;

  PaintPType = PSPaint::getPaintPType(this);
  if (!PaintPType)
    return 0;
  v4 = PaintPType;
  if (((*(uint64_t (**)(void *))(*(_QWORD *)PaintPType + 1384))(PaintPType) & 1) != 0)
    return 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(void *, const CMTime *, void **))(*(_QWORD *)v4 + 1624))(v4, a2, &v7);
  v5 = v8 != v7;
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  return v5;
}

void sub_1B2FE2444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `non-virtual thunk to'PSPaint::getIsSimulatingOrSequencing(PSPaint *this, const CMTime *a2)
{
  return PSPaint::getIsSimulatingOrSequencing((PSPaint *)((char *)this - 33720), a2);
}

_QWORD *PSPaint::calcHashForSourceOnly(PSPaint *this, PCSerializerWriteStream *a2, OZRenderParams *a3)
{
  _QWORD *result;
  _QWORD *v7;
  OZMoShape *v8;
  uint64_t StrokeWidthOSChan;
  uint64_t StrokeSpacingOSChan;
  uint64_t StrokeJitterOSChan;
  uint64_t StrokeRotationOSChan;
  PSParticleType *v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  result = (_QWORD *)*((_QWORD *)this + 145);
  if (result)
  {
    if (result)
    {
      v7 = result;
      v8 = (OZMoShape *)(result + 2372);
      StrokeWidthOSChan = OZMoShape::getStrokeWidthOSChan((OZMoShape *)(result + 2372));
      (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)StrokeWidthOSChan
                                                                                           + 408))(StrokeWidthOSChan, a2, 0, 1, 1);
      StrokeSpacingOSChan = OZMoShape::getStrokeSpacingOSChan(v8);
      (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)StrokeSpacingOSChan
                                                                                           + 408))(StrokeSpacingOSChan, a2, 0, 1, 1);
      StrokeJitterOSChan = OZMoShape::getStrokeJitterOSChan(v8);
      (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)StrokeJitterOSChan
                                                                                           + 408))(StrokeJitterOSChan, a2, 0, 1, 1);
      StrokeRotationOSChan = OZMoShape::getStrokeRotationOSChan(v8);
      (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)StrokeRotationOSChan
                                                                                           + 408))(StrokeRotationOSChan, a2, 0, 1, 1);
      result = PSPaint::getPaintPType(this);
      if (result)
      {
        v13 = (PSParticleType *)result;
        result = (_QWORD *)OZChannel::getValueAsInt((OZChannel *)(v7 + 3238), MEMORY[0x1E0CA2E68], 0.0);
        if ((_DWORD)result == 2)
        {
          result = (_QWORD *)(*(uint64_t (**)(PSParticleType *))(*(_QWORD *)v13 + 1336))(v13);
          if (result)
          {
            if (result)
            {
              v14 = result;
              v23[0] = v23;
              v23[1] = v23;
              v23[2] = 0;
              if (PSParticleType::isSourceSingleFrame(v13))
              {
                OZRenderParams::OZRenderParams((OZRenderParams *)&v19, a3);
                (*(void (**)(__int128 *__return_ptr, const void *))(*(_QWORD *)v14 + 1128))(&v17, v14);
                v19 = v17;
                v21 = 0;
                v22 = 0;
                v20 = v18;
                (*(void (**)(const void *, PCSerializerWriteStream *, __int128 *, _QWORD *))(*(_QWORD *)v14 + 520))(v14, a2, &v19, v23);
                if (v15)
                {
                  v17 = *(_OWORD *)a3;
                  v18 = *((_QWORD *)a3 + 2);
                  (*(void (**)(_QWORD *, PCSerializerWriteStream *, __int128 *))(v15[136] + 448))(v15 + 136, a2, &v17);
                }
                if (v16)
                {
                  v17 = *(_OWORD *)a3;
                  v18 = *((_QWORD *)a3 + 2);
                  (*(void (**)(_QWORD *, PCSerializerWriteStream *, __int128 *))(v16[835] + 448))(v16 + 835, a2, &v17);
                }
                OZRenderParams::~OZRenderParams((OZRenderParams *)&v19);
              }
              else
              {
                (*(void (**)(const void *, PCSerializerWriteStream *, OZRenderParams *, _QWORD *))(*(_QWORD *)v14 + 520))(v14, a2, a3, v23);
              }
              return std::__list_imp<unsigned int>::clear(v23);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B2FE2700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  std::__list_imp<unsigned int>::clear((_QWORD *)(v7 - 72));
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'PSPaint::calcHashForSourceOnly(PSPaint *this, PCSerializerWriteStream *a2, OZRenderParams *a3)
{
  return PSPaint::calcHashForSourceOnly((PSPaint *)((char *)this - 33720), a2, a3);
}

uint64_t PSPaint::assignPaintIncludingDescendants(PSPaint *this, const OZElement *a2)
{
  PSPaint *v4;
  PSPaint *v5;
  void *PaintPType;
  void *v7;

  PSReplicator::operator=(this);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  PaintPType = PSPaint::getPaintPType(this);
  v7 = PSPaint::getPaintPType(v5);
  return (*(uint64_t (**)(void *, void *))(*(_QWORD *)PaintPType + 80))(PaintPType, v7);
}

uint64_t `non-virtual thunk to'PSPaint::assignPaintIncludingDescendants(PSPaint *this, const OZElement *a2)
{
  return PSPaint::assignPaintIncludingDescendants((PSPaint *)((char *)this - 33720), a2);
}

OZChannelBase *PSPaint::updateEmitterHiddenFlags(PSPaint *this, char a2)
{
  PSReplicator::updateEmitterHiddenFlags(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19232), 2, 0);
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27352), 2, 0);
}

uint64_t PSPaint::createParticleType(PSPaint *this, OZImageNode *a2)
{
  OZChannelBase *v3;
  const PCString *Name;
  const PCString *NextUniqueID;
  uint64_t PaintPType;
  PCString v8;

  PCURL::PCURL((PCURL *)&v8, CFSTR("Particle Type Default Name"));
  if (a2)
  {
    if (v3)
    {
      Name = (const PCString *)OZObjectManipulator::getName((OZObjectManipulator *)&v3->var2);
      PCString::set(&v8, Name);
    }
  }
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v3);
  PaintPType = PSPaintPType::createPaintPType((PSPaintPType *)&v8, NextUniqueID);
  (*(void (**)(uint64_t, PCString *, _QWORD))(*(_QWORD *)(PaintPType + 16) + 120))(PaintPType + 16, &v8, 0);
  PCString::~PCString(&v8);
  return PaintPType;
}

void sub_1B2FE28B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void *PSPaint::getGeometryNode(PSPaint *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 145);
  if (result)
  return result;
}

void PSPaint::initPropertiesFromShape(int a1, int a2, CMTime *a3, uint64_t a4, uint64_t a5, float64x2_t *a6, uint64_t a7, _BYTE *a8)
{
  long double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  *a8 = 1;
  *a6 = vaddq_f64(*(float64x2_t *)(a5 + 192), *a6);
  a6[1].f64[0] = a6[1].f64[0] + 0.0;
  *(_OWORD *)a7 = *(_OWORD *)(a5 + 208);
  *(_QWORD *)(a7 + 16) = 0;
  if (OZChannel::getValueAsInt((OZChannel *)(a4 + 2184), a3, 0.0))
  {
    v10 = atan2(*(long double *)a7, -*(double *)(a7 + 8));
    v11 = __sincos_stret(v10 * 0.5);
    v12 = a6[1].f64[1];
    v13 = a6[2].f64[0];
    v14 = v13 * (v11.__sinval * 0.0);
    v15 = a6[2].f64[1];
    v16 = a6[3].f64[0];
    v17 = v15 * (v11.__sinval * 0.0);
    v18 = v12 * (v11.__sinval * 0.0);
    v19 = v11.__sinval * 0.0 * v16;
    a6[2].f64[1] = v11.__cosval * v15 + v18 + v19 - v13 * v11.__sinval;
    a6[3].f64[0] = v14 - v17 + v12 * v11.__sinval + v11.__cosval * v16;
    a6[1].f64[1] = v12 * v11.__cosval - (v14 + v17 + v11.__sinval * v16);
    a6[2].f64[0] = v11.__cosval * v13 + v18 + v11.__sinval * v15 - v19;
  }
}

uint64_t PSPaint::parseBegin(PSPaint *this, PCSerializerReadStream *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = (char *)this + 1200;
  v5 = (char *)*((_QWORD *)this + 151);
  v17 = &v17;
  v18 = &v17;
  v19 = 0;
  if (v5 != (char *)this + 1200)
  {
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 8);
      v16 = (int32x4_t)xmmword_1B3565090;
      if (OZFactory::isKindOfClass(v6, &v16))
      {
        v7 = operator new(0x18uLL);
        v8 = *((_QWORD *)v5 + 2);
        v7[1] = &v17;
        v7[2] = v8;
        v9 = v17;
        *v7 = v17;
        v9[1] = v7;
        v17 = v7;
        ++v19;
      }
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
    for (i = v18; i != &v17; i = (_QWORD *)i[1])
    {
      v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)i[2] + 312))(i[2]);
      (*(void (**)(PSPaint *, uint64_t))(*(_QWORD *)this + 416))(this, v11);
    }
  }
  v12 = (*(uint64_t (**)(PSPaint *, _QWORD))(*(_QWORD *)this + 224))(this, 0);
  if (v12)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 216))(v12);
    (*(void (**)(PSPaint *, uint64_t))(*(_QWORD *)this + 416))(this, v13);
  }
  v14 = PSEmitter::parseBegin(this, a2);
  std::__list_imp<unsigned int>::clear(&v17);
  return v14;
}

void sub_1B2FE2B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PSPaint::parseBegin(PSPaint *this, PCSerializerReadStream *a2)
{
  return PSPaint::parseBegin((PSPaint *)((char *)this - 200), a2);
}

{
  return PSPaint::parseBegin((PSPaint *)((char *)this - 248), a2);
}

uint64_t PSPaint::parseEnd(PSPaint *this, PCSerializerReadStream *a2)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 664))((char *)this + 200)+ 8)+ 8), (int32x4_t)xmmword_1B355CF50)))) & 1) == 0&& OZChannel::getValueAsInt((OZChannel *)((char *)this + 32944), MEMORY[0x1E0CA2E68], 0.0) != 1)
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 32944), 1.0);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 32944), 0);
  }
  return PSReplicator::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'PSPaint::parseEnd(PSPaint *this, PCSerializerReadStream *a2)
{
  return PSPaint::parseEnd((PSPaint *)((char *)this - 200), a2);
}

{
  return PSPaint::parseEnd((PSPaint *)((char *)this - 248), a2);
}

double PSPaint::calcHashForState(PSEmitter *a1, const void *a2, __int128 *a3, uint64_t a4)
{
  const void *v5;
  char *v9;
  double result;
  char *v11;
  OZChannel *v12;

  v5 = (const void *)*((_QWORD *)a1 + 145);
  if (v5)
  {
    if (v9)
    {
      v11 = v9;
      if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 25776), 0, 1))
      {
        if ((OZChannelBase::isEnabled((OZChannelBase *)(v11 + 21760), 0, 1) & 1) == 0)
        {
          v12 = (OZChannel *)(v11 + 25904);
          if (OZChannel::getValueAsInt(v12, MEMORY[0x1E0CA2E68], 0.0) == 1
            || OZChannel::getValueAsInt(v12, MEMORY[0x1E0CA2E68], 0.0) == 2)
          {
            return PSEmitter::calcHashForState(a1, a2, a3, a4);
          }
        }
      }
    }
  }
  return result;
}

double `non-virtual thunk to'PSPaint::calcHashForState(uint64_t a1, const void *a2, __int128 *a3, uint64_t a4)
{
  return PSPaint::calcHashForState((PSEmitter *)(a1 - 200), a2, a3, a4);
}

{
  return PSPaint::calcHashForState((PSEmitter *)(a1 - 216), a2, a3, a4);
}

void PSPaint::addPenPropertyBehaviors(PSPaint *this)
{
  char *v1;
  char *v2;
  char *v3;
  int v4;
  char v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v14;
  _BOOL4 v18;
  uint64_t v19;
  OZChannelBase *v20;
  uint64_t NextUniqueID;
  const void *Behavior;
  _QWORD *v23;
  PSPenSpeedBehavior *v24;
  int DefaultApplyTo;
  unsigned int v26;
  uint64_t v27;
  OZChannelBase *v28;
  uint64_t v29;
  const void *v30;
  _QWORD *v31;
  PSPenPressureBehavior *v32;
  int v33;
  char *v34;
  PCString v35;
  PCString v36[2];

  v1 = (char *)this + 200;
  v2 = (char *)this + 1200;
  v3 = (char *)*((_QWORD *)this + 151);
  if (v3 == (char *)this + 1200)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    v34 = (char *)this + 200;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)v3 + 2);
      v7 = *(_DWORD **)(v6 + 8);
      v8 = v7[2];
      v9 = v7[3];
      v10 = v7[4];
      v11 = v7[5];
      v14 = v8 == 86313994 && v9 == -1831908132 && v10 == -2092803630 && v11 == -1221222574;
      if (!v14 || (v5 & 1) != 0)
      {
        v18 = v8 != 1704547312 || v9 != -1174322166 || v10 != -1352090407 || v11 != 1680446981;
        if (((v18 | v4) & 1) == 0)
        {
          PCURL::PCURL((PCURL *)v36, CFSTR("PPaint Pen Pressure"));
          (*(void (**)(uint64_t, PCString *, _QWORD))(*(_QWORD *)(v6 + 16) + 120))(v6 + 16, v36, 0);
          PCString::~PCString(v36);
          v4 = 1;
        }
      }
      else
      {
        PCURL::PCURL((PCURL *)v36, CFSTR("PPaint Pen Speed"));
        (*(void (**)(uint64_t, PCString *, _QWORD))(*(_QWORD *)(v6 + 16) + 120))(v6 + 16, v36, 0);
        PCString::~PCString(v36);
        v5 = 1;
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
    if ((v5 & 1) != 0)
    {
      v1 = v34;
      if ((v4 & 1) != 0)
        return;
      goto LABEL_44;
    }
    v1 = v34;
  }
  v19 = theApp;
  *(_OWORD *)&v36[0].var0 = xmmword_1B35650B0;
  PCURL::PCURL((PCURL *)&v35, CFSTR("PPaint Pen Speed"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v20);
  Behavior = (const void *)OZApplication::createBehavior(v19, (unsigned int *)v36, (uint64_t)&v35, NextUniqueID);
  if (Behavior)
  else
    v23 = 0;
  PCString::~PCString(&v35);
  DefaultApplyTo = PSPenSpeedBehavior::getDefaultApplyTo(v24);
  if (DefaultApplyTo <= 0)
  {
    (*(void (**)(_QWORD *, _QWORD))(v23[2] + 40))(v23 + 2, 0);
  }
  else
  {
    v26 = DefaultApplyTo;
    (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v23[67] + 712))(v23 + 67, MEMORY[0x1E0CA2E68], 0, (double)(DefaultApplyTo - 1));
    if (v26 <= 2)
      (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v23[245] + 712))(v23 + 245, MEMORY[0x1E0CA2E68], 0, 1.0);
  }
  (*(void (**)(char *, _QWORD *, _QWORD))(*(_QWORD *)v1 + 360))(v1, v23, 0);
  if ((v4 & 1) == 0)
  {
LABEL_44:
    v27 = theApp;
    *(_OWORD *)&v36[0].var0 = xmmword_1B35650A0;
    PCURL::PCURL((PCURL *)&v35, CFSTR("PPaint Pen Pressure"));
    v29 = OZChannelBase::getNextUniqueID(v28);
    v30 = (const void *)OZApplication::createBehavior(v27, (unsigned int *)v36, (uint64_t)&v35, v29);
    if (v30)
    else
      v31 = 0;
    PCString::~PCString(&v35);
    v33 = PSPenPressureBehavior::getDefaultApplyTo(v32);
    if (v33 < 1)
      (*(void (**)(_QWORD *, _QWORD))(v31[2] + 40))(v31 + 2, 0);
    else
      (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v31[67] + 712))(v31 + 67, MEMORY[0x1E0CA2E68], 0, (double)(v33 - 1));
    (*(void (**)(char *, _QWORD *, _QWORD))(*(_QWORD *)v1 + 360))(v1, v31, 0);
  }
}

void sub_1B2FE308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PSPaint::addPenPropertyBehaviors(PSPaint *this)
{
  PSPaint::addPenPropertyBehaviors((PSPaint *)((char *)this - 33720));
}

_QWORD *PSPaint::initPenPropertyBehaviors(__n128 *this)
{
  __n128 TimeOffset;
  __int8 *v3;
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  _QWORD *v18;
  PSPenPressureBehavior *v19;
  int DefaultApplyTo;
  int v21;
  PSPenSpeedBehavior *v22;
  int v23;
  int v24;
  unsigned int v25;
  CMTime v26;
  CMTime v27;
  _QWORD v28[6];
  __n128 v29;
  CMTimeEpoch v30;

  v29 = 0uLL;
  v30 = 0;
  TimeOffset = OZChannelObjectRootBase::getTimeOffset(this + 16, &v29);
  v4 = this[12].n128_u64[1];
  v3 = &this[12].n128_i8[8];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, __int8 *, __n128))(v4 + 1128))(v28, v3, TimeOffset);
  v6 = *((_QWORD *)v3 + 126);
  if ((__int8 *)v6 != v3 + 1000)
  {
    while (1)
    {
      result = *(_QWORD **)(v6 + 16);
      v7 = (_DWORD *)result[1];
      v8 = v7[2];
      v9 = v7[3];
      v10 = v7[4];
      v11 = v7[5];
      v12 = v8 == 86313994 && v9 == -1831908132;
      v13 = v12 && v10 == -2092803630;
      if (v13 && v11 == -1221222574)
        break;
      if (v8 != 1704547312 || v9 != -1174322166 || v10 != -1352090407 || v11 != 1680446981)
        goto LABEL_29;
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v18 + 7), (const PCTimeRange *)v28, 0);
      *(__n128 *)&v26.value = v29;
      v26.epoch = v30;
      OZChannelObjectRootBase::setTimeOffset((__n128 *)(v18 + 7), &v26, 0);
      DefaultApplyTo = PSPenPressureBehavior::getDefaultApplyTo(v19);
      v21 = DefaultApplyTo - 1;
      if (DefaultApplyTo < 1)
        goto LABEL_28;
      (*(void (**)(_QWORD *, _QWORD))(v18[2] + 32))(v18 + 2, 0);
      (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v18[67] + 712))(v18 + 67, MEMORY[0x1E0CA2E68], 0, (double)v21);
      result = (_QWORD *)PSPenPropertyBehavior::updateApplyTo((PSPenPropertyBehavior *)v18);
LABEL_29:
      v6 = *(_QWORD *)(v6 + 8);
      if ((__int8 *)v6 == v3 + 1000)
        return result;
    }
    OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v18 + 7), (const PCTimeRange *)v28, 0);
    *(__n128 *)&v27.value = v29;
    v27.epoch = v30;
    OZChannelObjectRootBase::setTimeOffset((__n128 *)(v18 + 7), &v27, 0);
    v23 = PSPenSpeedBehavior::getDefaultApplyTo(v22);
    v24 = v23 - 1;
    if (v23 >= 1)
    {
      v25 = v23;
      (*(void (**)(_QWORD *, _QWORD))(v18[2] + 32))(v18 + 2, 0);
      (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v18[67] + 712))(v18 + 67, MEMORY[0x1E0CA2E68], 0, (double)v24);
      result = (_QWORD *)PSPenPropertyBehavior::updateApplyTo((PSPenPropertyBehavior *)v18);
      if (v25 <= 2)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(v18[245] + 712))(v18 + 245, MEMORY[0x1E0CA2E68], 0, 1.0);
      goto LABEL_29;
    }
LABEL_28:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(v18[2] + 40))(v18 + 2, 0);
    goto LABEL_29;
  }
  return result;
}

_QWORD *`non-virtual thunk to'PSPaint::initPenPropertyBehaviors(PSPaint *this)
{
  return PSPaint::initPenPropertyBehaviors((__n128 *)((char *)this - 33720));
}

void PSPaint::didApplyStyle(PSPaint *this)
{
  char *PaintPType;
  const void *v3;
  char *v4;
  OZChannel *v5;

  PaintPType = (char *)PSPaint::getPaintPType(this);
  v3 = (const void *)*((_QWORD *)this + 145);
  if (v3)
  else
    v4 = 0;
  (*(void (**)(PSPaint *))(*(_QWORD *)this + 656))(this);
  if (PaintPType && v4)
  {
    if (OZChannel::getValueAsInt((OZChannel *)(v4 + 25904), MEMORY[0x1E0CA2E68], 0.0) != 2)
      OZChannelBase::reset((OZChannelBase *)(PaintPType + 14392), 0);
    v5 = (OZChannel *)(PaintPType + 11192);
    OZChannel::setDefaultValue(v5, 1.0);
    OZChannelBase::reset((OZChannelBase *)v5, 0);
  }
}

void `non-virtual thunk to'PSPaint::didApplyStyle(PSPaint *this)
{
  PSPaint::didApplyStyle((PSPaint *)((char *)this - 33720));
}

PSPaintPType *PSPaint::disableSourceNode(PSPaint *this)
{
  PSPaintPType *result;

  result = (PSPaintPType *)PSPaint::getPaintPType(this);
  if (result)
    return (PSPaintPType *)PSPaintPType::disableSourceNode(result);
  return result;
}

PSPaintPType *`non-virtual thunk to'PSPaint::disableSourceNode(PSPaint *this)
{
  PSPaintPType *result;

  result = (PSPaintPType *)PSPaint::getPaintPType((PSPaint *)((char *)this - 33720));
  if (result)
    return (PSPaintPType *)PSPaintPType::disableSourceNode(result);
  return result;
}

_QWORD *PSPaint::beginInteractive(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = this + 150;
  v2 = (_QWORD *)this[151];
  if (v2 != this + 150)
  {
    do
    {
      this = (_QWORD *)v2[2];
      if (this)
      {
        if (this)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*this + 672))(this, 1);
      }
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
  }
  return this;
}

_QWORD *`non-virtual thunk to'PSPaint::beginInteractive(PSPaint *this)
{
  return PSPaint::beginInteractive((_QWORD *)this - 4215);
}

_QWORD *PSPaint::endInteractive(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = this + 150;
  v2 = (_QWORD *)this[151];
  if (v2 != this + 150)
  {
    do
    {
      this = (_QWORD *)v2[2];
      if (this)
      {
        if (this)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 672))(this, 0);
      }
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
  }
  return this;
}

_QWORD *`non-virtual thunk to'PSPaint::endInteractive(PSPaint *this)
{
  return PSPaint::endInteractive((_QWORD *)this - 4215);
}

uint64_t PSPaint::getStrokeWidthOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType(this) + 12496;
}

uint64_t `non-virtual thunk to'PSPaint::getStrokeWidthOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType((PSPaint *)((char *)this - 33720)) + 12496;
}

uint64_t PSPaint::getStrokeSpacingOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType(this) + 12336;
}

uint64_t `non-virtual thunk to'PSPaint::getStrokeSpacingOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType((PSPaint *)((char *)this - 33720)) + 12336;
}

uint64_t PSPaint::getStrokeJitterOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType(this) + 13944;
}

uint64_t `non-virtual thunk to'PSPaint::getStrokeJitterOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType((PSPaint *)((char *)this - 33720)) + 13944;
}

uint64_t PSPaint::getStrokeRotationOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType(this) + 4048;
}

uint64_t `non-virtual thunk to'PSPaint::getStrokeRotationOSChan(PSPaint *this)
{
  return (uint64_t)PSPaint::getPaintPType((PSPaint *)((char *)this - 33720)) + 4048;
}

unint64_t PSPaint::getIsSimulationEnabled(PSPaint *this)
{
  char *PaintPType;

  PaintPType = (char *)PSPaint::getPaintPType(this);
  return OZChannelBase::isEnabled((OZChannelBase *)(PaintPType + 11904), 0, 1);
}

unint64_t `non-virtual thunk to'PSPaint::getIsSimulationEnabled(PSPaint *this)
{
  char *PaintPType;

  PaintPType = (char *)PSPaint::getPaintPType((PSPaint *)((char *)this - 33720));
  return OZChannelBase::isEnabled((OZChannelBase *)(PaintPType + 11904), 0, 1);
}

uint64_t PSPaint::dirtyPaintCache(PSPaint *this)
{
  void *PaintPType;
  OZSystemSimulator *v2;

  PaintPType = PSPaint::getPaintPType(this);
  v2 = (OZSystemSimulator *)(*(uint64_t (**)(void *))(*(_QWORD *)PaintPType + 1344))(PaintPType);
  return OZSystemSimulator::dirtyCache(v2);
}

uint64_t `non-virtual thunk to'PSPaint::dirtyPaintCache(PSPaint *this)
{
  void *PaintPType;
  OZSystemSimulator *v2;

  PaintPType = PSPaint::getPaintPType((PSPaint *)((char *)this - 33720));
  v2 = (OZSystemSimulator *)(*(uint64_t (**)(void *))(*(_QWORD *)PaintPType + 1344))(PaintPType);
  return OZSystemSimulator::dirtyCache(v2);
}

uint64_t PSPaint::getErrorDisplayName(PSPaint *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 145);
  if (v1)
    return OZObjectManipulator::getName((OZObjectManipulator *)(v1 + 16));
  else
    return OZObjectManipulator::getName((PSPaint *)((char *)this + 216));
}

double PSPaint::getPixelAspectRatio(PSPaint *this)
{
  return *((double *)this + 820);
}

void PSPaintPType::PSPaintPType(PSPaintPType *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  PSReplicatorPType::PSReplicatorPType(this, a2, a3, a4);
  *v5 = &off_1E65E5D58;
  v5[2] = &unk_1E65E63F0;
  v5[6] = &unk_1E65E6648;
  v5[136] = &unk_1E65E66A0;
  v5[139] = &unk_1E65E6778;
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Brush Profile"));
  OZChannelGradient::OZChannelGradient((PSPaintPType *)((char *)this + 16984), &v7, (OZChannelFolder *)((char *)this + 448), 0xC8u, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Hidden Opacity Over Stroke");
  OZChannelPercentOverRange::OZChannelPercentOverRange((PSPaintPType *)((char *)this + 17784), 1.0, &v7, (OZChannelFolder *)((char *)this + 448), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  *((_QWORD *)this + 2245) = 0;
  *(_OWORD *)((char *)this + 17944) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 17968));
  *((_QWORD *)this + 2260) = 0;
  *((_DWORD *)this + 4522) = 0;
  *((_BYTE *)this + 18092) = 0;
  *(_OWORD *)((char *)this + 18040) = 0u;
  *(_OWORD *)((char *)this + 18056) = 0u;
  *((_DWORD *)this + 4518) = 0;
  *((_QWORD *)this + 2262) = 0xBFF0000000000000;
  *((_QWORD *)this + 2264) = 0;
  *((_DWORD *)this + 4530) = 0;
  OZChannelBase::enable((OZChannelBase *)((char *)this + 11904), 0, 1);
  (*(void (**)(PSPaintPType *))(*(_QWORD *)this + 1536))(this);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Align Rotation"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2184), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Rotation"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2336), &v7, 0);
  PCString::~PCString(&v7);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3192), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3192));
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Rotation Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 4208), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Color Over Stroke"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Random Color"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 7584), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Color Repetitions"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 7736), &v7, 0);
  PCString::~PCString(&v7);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7888), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7888));
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Scale"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 8040), &v7, 0);
  PCString::~PCString(&v7);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8632), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8632));
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Scale Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 9224), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Is Additive Blend"));
  OZChannelBase::setName((OZChannelBase *)this + 89, &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Animate Image"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10120), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Random Source Start Frame"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10272), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Source Start Frame"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10424), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Source Start Frame Offset"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10576), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Source Start Frame OS"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10728), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Hold Frames"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 10888), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Hold Frames Variance"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11040), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Shape"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11344), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Shape Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 1418, &v7, 1);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Seed"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11600), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Point Size"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 11752), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Image Node Ref"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 14392), &v7, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 525, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1561, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1581, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1798, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 2242, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1360, &v7);
  PCString::~PCString(&v7);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10728), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10728));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1576), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1576));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1728), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1728));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1880), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1880));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2032), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2032));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5064), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5064));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5216), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 5216));
  v8 = 3;
  v7.var0 = (__CFString *)0x200000001;
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 5368), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 5368), 0);
  OZChannelEnum::setTags((PSPaintPType *)((char *)this + 5368), (char *)&v7, 3);
  PCURL::PCURL((PCURL *)&v6, CFSTR("PPaint PType Color Mode Enum"));
  OZChannelEnum::setStrings((const PCString *)this + 671, &v6, 1);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("PPaint PType Color Mode"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 5368), &v6, 0);
  PCString::~PCString(&v6);
  (*(void (**)(PSPaintPType *, uint64_t))(*(_QWORD *)this + 1528))(this, 1);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 11192), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 11192), 0);
  *((_DWORD *)this + 4444) = 3;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17112), 2, 1);
  (*(void (**)(char *))(*((_QWORD *)this + 2139) + 128))((char *)this + 17112);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 16984), 0);
  *((_WORD *)this + 9062) = 0;
}

void sub_1B2FE40E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PSReplicatorPType *v10;
  OZChannelGradient *v11;
  PCString *v12;
  PCMutex *v13;

  PCString::~PCString((PCString *)&a9);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  PCMutex::~PCMutex(v13);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelPercentOverRange::~OZChannelPercentOverRange(v12);
  OZChannelGradient::~OZChannelGradient(v11);
  PSReplicatorPType::~PSReplicatorPType(v10);
  _Unwind_Resume(a1);
}

void PSPaintPType::PSPaintPType(PSPaintPType *this, PSPaintPType *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  PCString v7;

  PSReplicatorPType::PSReplicatorPType(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65E5D58;
  *(_QWORD *)(v5 + 16) = &unk_1E65E63F0;
  *(_QWORD *)(v5 + 48) = &unk_1E65E6648;
  *(_QWORD *)(v5 + 1088) = &unk_1E65E66A0;
  *(_QWORD *)(v5 + 1112) = &unk_1E65E6778;
  v6 = (OZChannelFolder *)(v5 + 448);
  OZChannelGradient::OZChannelGradient((OZChannelGradient *)(v5 + 16984), (PSPaintPType *)((char *)a2 + 16984), (OZChannelFolder *)(v5 + 448));
  OZChannelPercentOverRange::OZChannelPercentOverRange((PSPaintPType *)((char *)this + 17784), (PSPaintPType *)((char *)a2 + 17784), v6);
  *((_QWORD *)this + 2245) = 0;
  *(_OWORD *)((char *)this + 17944) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 17968));
  *((_QWORD *)this + 2260) = 0;
  *((_DWORD *)this + 4522) = 0;
  *((_BYTE *)this + 18092) = 0;
  *(_OWORD *)((char *)this + 18040) = 0u;
  *(_OWORD *)((char *)this + 18056) = 0u;
  *((_DWORD *)this + 4518) = 0;
  *((_QWORD *)this + 2262) = 0xBFF0000000000000;
  *((_QWORD *)this + 2264) = 0;
  *((_DWORD *)this + 4530) = 0;
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 525, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1561, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1581, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1798, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 2242, &v7);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Stroke Range"));
  PCString::set((PCString *)this + 1360, &v7);
  PCString::~PCString(&v7);
  *((_WORD *)this + 9062) = 0;
}

void sub_1B2FE44AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PSReplicatorPType *v10;
  OZChannelGradient *v11;
  PCString *v12;
  PCMutex *v13;

  PCString::~PCString(&a10);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  PCMutex::~PCMutex(v13);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelPercentOverRange::~OZChannelPercentOverRange(v12);
  OZChannelGradient::~OZChannelGradient(v11);
  PSReplicatorPType::~PSReplicatorPType(v10);
  _Unwind_Resume(a1);
}

void sub_1B2FE4528()
{
  JUMPOUT(0x1B2FE44FCLL);
}

void sub_1B2FE4530()
{
  JUMPOUT(0x1B2FE4510);
}

void sub_1B2FE4538()
{
  JUMPOUT(0x1B2FE4518);
}

void PSPaintPType::~PSPaintPType(PSPaintPType *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4[4];

  *(_QWORD *)this = &off_1E65E5D58;
  *((_QWORD *)this + 2) = &unk_1E65E63F0;
  *((_QWORD *)this + 6) = &unk_1E65E6648;
  *((_QWORD *)this + 136) = &unk_1E65E66A0;
  *((_QWORD *)this + 139) = &unk_1E65E6778;
  OZSystemSimulator::flushCache((PSPaintPType *)((char *)this + 15520), 1, 0);
  OZSystemSimulator::flushCache((PSPaintPType *)((char *)this + 15800), 1, 0);
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v4);
  v2 = (_QWORD *)*((_QWORD *)this + 2243);
  v3 = (_QWORD *)*((_QWORD *)this + 2244);
  while (v2 != v3)
  {
    if (!*v2)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
    v2 += 2;
  }
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v4);
  v4[0] = (void **)((char *)this + 18040);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100](v4);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 17968));
  v4[0] = (void **)((char *)this + 17944);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100](v4);
  *((_QWORD *)this + 2223) = &off_1E655E0A8;
  *((_QWORD *)this + 2225) = &unk_1E655E458;
  PCString::~PCString((PCString *)this + 2242);
  OZChanObjectRef::~OZChanObjectRef((PSPaintPType *)((char *)this + 17784));
  OZChannelGradient::~OZChannelGradient((PSPaintPType *)((char *)this + 16984));
  PSReplicatorPType::~PSReplicatorPType(this);
}

{
  PSPaintPType::~PSPaintPType(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSPaintPType::~PSPaintPType(PSPaintPType *this)
{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 16));
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 48));
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 1088));
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 1112));
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 1088));
  JUMPOUT(0x1B5E29170);
}

{
  PSPaintPType::~PSPaintPType((PSPaintPType *)((char *)this - 1112));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSPaintPType::createPaintPType(PSPaintPType *this, const PCString *a2)
{
  __int128 v3;

  v3 = xmmword_1B355E440;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3, (uint64_t)this, (uint64_t)a2);
}

void PSPaintPType::getBounds(PSPaintPType *this, uint64_t a2, uint64_t a3)
{
  char *v6;
  unsigned int IsImageBrush;

  v6 = (char *)this + 18124;
  __asm { FMOV            V0.2D, #-18.0 }
  *(_OWORD *)a2 = _Q0;
  *(int64x2_t *)(a2 + 16) = vdupq_n_s64(0x4042000000000000uLL);
  if (*((_BYTE *)this + 18125))
  {
    if (!*v6)
      return;
    goto LABEL_3;
  }
  IsImageBrush = PSPaintPType::getIsImageBrush(this);
  *v6 = IsImageBrush;
  v6[1] = 1;
  if (IsImageBrush)
LABEL_3:
    PSParticleType::getBounds((uint64_t)this, (__n128 *)a2, a3);
}

void `non-virtual thunk to'PSPaintPType::getBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PSPaintPType::getBounds((PSPaintPType *)(a1 - 1088), a2, a3);
}

uint64_t PSPaintPType::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  uint64_t result;
  uint64_t v9;
  OZChannel *v10;

  result = *(_QWORD *)(a1 + 16432);
  if (result)
  {
    if (result)
    {
      result = (uint64_t)PSPaint::getRotoshape((PSPaint *)result);
      if (result)
      {
        v9 = result;
        result = OZChannelBase::isEnabled((OZChannelBase *)(result + 25776), 0, 1);
        if ((_DWORD)result)
        {
          result = OZChannelBase::isEnabled((OZChannelBase *)(v9 + 21760), 0, 1);
          if ((result & 1) == 0)
          {
            v10 = (OZChannel *)(v9 + 25904);
            if (OZChannel::getValueAsInt(v10, MEMORY[0x1E0CA2E68], 0.0) == 1)
              return (uint64_t)PSParticleType::calcHashForState(a1, a2, a3, a4, 1);
            result = OZChannel::getValueAsInt(v10, MEMORY[0x1E0CA2E68], 0.0);
            if ((_DWORD)result == 2)
              return (uint64_t)PSParticleType::calcHashForState(a1, a2, a3, a4, 1);
          }
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'PSPaintPType::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return PSPaintPType::calcHashForState(a1 - 16, a2, a3, a4);
}

void PSPaintPType::cacheSourceNode(PSPaintPType *this)
{
  CMTimeEpoch v2;
  CMTimeEpoch v3;
  float v4;
  const void *v5;
  uint64_t v6;
  __n128 v7;
  CMTimeEpoch v8;
  __int128 v9;
  int64_t v10;
  CMTime v11;
  __int128 v12;
  int64_t v13;
  CMTime time;
  uint64_t v15;
  OZRenderState v16;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;

  PSParticleType::cacheSourceNode(this);
  if (PSPaintPType::getIsImageBrush(this))
  {
    v2 = *((_QWORD *)this + 2057);
    *(_OWORD *)&v17.var0 = *(_OWORD *)((char *)this + 16440);
    *(_OWORD *)&v18.value = *((_OWORD *)this + 1029);
    v3 = *((_QWORD *)this + 2060);
    v17.var3 = v2;
    v18.epoch = v3;
    OZRenderState::OZRenderState(&v16);
    v16.var0 = v17;
    v15 = 0;
    (*(void (**)(_QWORD, char *, uint64_t *, OZRenderState *))(**((_QWORD **)this + 2061) + 96))(*((_QWORD *)this + 2061), (char *)&v15 + 4, &v15, &v16);
    v4 = *(float *)&v15;
    time = v18;
    if (CMTimeGetSeconds(&time) > 3.0)
    {
      v5 = (const void *)*((_QWORD *)this + 2061);
      if (!v5
      {
        v12 = 0uLL;
        v13 = 0;
        v11 = v18;
        PC_CMTimeHalve(&v11, (uint64_t)&v19);
        v21 = (CMTime)v17;
        v20 = v19;
        PC_CMTimeSaferAdd(&v21, &v20, (uint64_t)&v12);
        *(_OWORD *)&v16.var0.var0 = v12;
        v16.var0.var3 = v13;
        (*(void (**)(_QWORD, char *, uint64_t *, OZRenderState *))(**((_QWORD **)this + 2061) + 96))(*((_QWORD *)this + 2061), (char *)&v15 + 4, &v15, &v16);
        if (v4 < *(float *)&v15)
          v4 = *(float *)&v15;
        v6 = (*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 272))(this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v7);
        v21 = (CMTime)v17;
        v20 = v18;
        PC_CMTimeSaferAdd(&v21, &v20, (uint64_t)&v19);
        v21 = v19;
        *(__n128 *)&v20.value = v7;
        v20.epoch = v8;
        PC_CMTimeSaferSubtract(&v21, &v20, (uint64_t)&v9);
        *(_OWORD *)&v16.var0.var0 = v9;
        v16.var0.var3 = v10;
        (*(void (**)(_QWORD, char *, uint64_t *, OZRenderState *))(**((_QWORD **)this + 2061) + 96))(*((_QWORD *)this + 2061), (char *)&v15 + 4, &v15, &v16);
        if (v4 < *(float *)&v15)
          v4 = *(float *)&v15;
      }
    }
    *((float *)this + 4526) = v4;
  }
}

char *PSPaintPType::getIsImageBrush(PSPaintPType *this)
{
  char *result;

  result = (char *)*((_QWORD *)this + 2054);
  if (result)
  {
    if (result)
    {
      result = (char *)PSPaint::getRotoshape((PSPaint *)result);
      if (result)
      {
        if (*((_QWORD *)this + 2061))
          return (char *)(OZChannel::getValueAsInt((OZChannel *)(result + 25904), MEMORY[0x1E0CA2E68], 0.0) == 2);
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t PSPaintPType::willGetParticleBounds(PSPaintPType *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 1336))(this);
  if (result != *((_QWORD *)this + 2061) || *((float *)this + 4526) < 0.0)
    return (*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 1640))(this);
  return result;
}

double PSPaintPType::getParticleBounds(PSPaintPType *this, float64x2_t *a2, OZRenderState *a3, float64x2_t *a4)
{
  char *v8;
  double result;
  unsigned int IsImageBrush;

  v8 = (char *)this + 18124;
  if (*((_BYTE *)this + 18125))
  {
    if (*v8)
      goto LABEL_3;
LABEL_6:
    *(_QWORD *)&result = *(_OWORD *)&PSPaintPType::getGradientParticleBounds((_QWORD **)this, (uint64_t)a2, (__int128 *)&a3->var0.var0, a4);
    return result;
  }
  IsImageBrush = PSPaintPType::getIsImageBrush(this);
  *v8 = IsImageBrush;
  v8[1] = 1;
  if (!IsImageBrush)
    goto LABEL_6;
LABEL_3:
  if (*((_QWORD *)this + 2061))
    *(_QWORD *)&result = *(_OWORD *)&PSParticleType::getImageParticleBounds((uint64_t)this, (uint64_t)a2, a3, a4);
  else
    *(_QWORD *)&result = *(_OWORD *)&PSParticleType::getPointParticleBounds((uint64_t)this, a2, (CMTime *)a3, a4);
  return result;
}

float64x2_t PSPaintPType::getGradientParticleBounds(_QWORD **a1, uint64_t a2, __int128 *a3, float64x2_t *a4)
{
  __int128 v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v20;
  float64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float64x2_t v31;
  float64x2_t result;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[3];
  __int128 v44;
  float64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  double v51;

  (*(void (**)(_QWORD *))(*a1[2054] + 616))(a1[2054]);
  v51 = 1.0;
  v48 = 0x3FF0000000000000;
  v45 = 1.0;
  v43[0] = 0x3FF0000000000000;
  v8 = 0uLL;
  *(_OWORD *)&v43[1] = 0u;
  v44 = 0u;
  v46 = 0u;
  v47 = 0u;
  v49 = 0u;
  v50 = 0u;
  v9 = *(const void **)(a2 + 232);
  if (v9)
  {
    v8 = 0uLL;
    v11 = (uint64_t)v10;
  }
  else
  {
    v11 = 0;
  }
  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v33 = 0x3FF0000000000000;
  v34 = v8;
  v35 = v8;
  v37 = v8;
  v38 = v8;
  v40 = v8;
  v41 = v8;
  PSPaintPType::getRadialParticleMatrix(a1, a3, v11, (double *)a2, (double *)&v33, (uint64_t)v43, 0);
  *(_QWORD *)&v13.f64[0] = v43[1];
  *(_QWORD *)&v12.f64[0] = v43[0];
  v12.f64[1] = *((float64_t *)&v44 + 1);
  *(_QWORD *)&v14.f64[0] = v44;
  __asm { FMOV            V1.2D, #0.5 }
  v20 = vmulq_f64(v12, _Q1);
  v13.f64[1] = v45;
  __asm { FMOV            V5.2D, #-0.5 }
  v22 = vmulq_f64(v13, _Q5);
  v14.f64[1] = *((float64_t *)&v46 + 1);
  v23 = (int8x16_t)vdivq_f64(vaddq_f64(v14, vsubq_f64(v22, v20)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + *(double *)&v50 * -0.5 - *((double *)&v49 + 1) * 0.5), 0));
  v24 = (int8x16_t)vdivq_f64(vaddq_f64(v14, vaddq_f64(v22, v20)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + *((double *)&v49 + 1) * 0.5 + *(double *)&v50 * -0.5), 0));
  v25 = (int8x16_t)vdivq_f64(vaddq_f64(v14, vaddq_f64(v20, vmulq_f64(v13, _Q1))), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v51 + *((double *)&v49 + 1) * 0.5 + *(double *)&v50 * 0.5), 0));
  v26 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v24, (float64x2_t)v23), v24, v23);
  v27 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v25, (float64x2_t)v26), v25, v26);
  v28 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v23, (float64x2_t)v24), v24, v23);
  v29 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v28, (float64x2_t)v25), v25, v28);
  v30 = (int8x16_t)vcgtq_f64((float64x2_t)v29, (float64x2_t)v27);
  v31 = (float64x2_t)vbslq_s8(v30, v29, v27);
  result = (float64x2_t)vbslq_s8(v30, v27, v29);
  *a4 = result;
  a4[1] = vsubq_f64(v31, result);
  return result;
}

void PSPaintPType::addProjectedParticleBounds(PSPaintPType *this, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  char *v8;
  unsigned int IsImageBrush;

  v8 = (char *)this + 18124;
  if (*((_BYTE *)this + 18125))
  {
    if (*v8)
      goto LABEL_3;
LABEL_6:
    PSPaintPType::addProjectedGradientParticleBounds((_QWORD **)this, a2, a3, a4);
    return;
  }
  IsImageBrush = PSPaintPType::getIsImageBrush(this);
  *v8 = IsImageBrush;
  v8[1] = 1;
  if (!IsImageBrush)
    goto LABEL_6;
LABEL_3:
  if (*((_QWORD *)this + 2061))
    PSParticleType::addProjectedImageParticleBounds((uint64_t)this, a2, a3, (uint64_t)a4);
  else
    PSParticleType::addProjectedPointParticleBounds((uint64_t)this, a2, a3, a4);
}

void PSPaintPType::addProjectedGradientParticleBounds(_QWORD **a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  __int128 *v8;
  const void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t i;
  float64x2_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  double v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[6];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v8 = *(__int128 **)(a2 + 8);
  (*(void (**)(_QWORD *))(*a1[2054] + 616))(a1[2054]);
  __asm { FMOV            V0.2D, #-0.5 }
  v43[0] = _Q0;
  v43[1] = xmmword_1B35652A0;
  __asm { FMOV            V1.2D, #0.5 }
  v43[2] = xmmword_1B35652B0;
  v43[3] = _Q1;
  v43[4] = xmmword_1B35652C0;
  v43[5] = xmmword_1B304F7A0;
  v15 = *(const void **)(a3 + 232);
  if (v15)
  else
    v16 = 0;
  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v33 = 1.0;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  v40 = 0u;
  v41 = 0u;
  if (*(_BYTE *)(a2 + 1498) && (double *)(a2 + 1504) != &v33)
  {
    v17 = 0;
    v18 = a2 + 1504;
    do
    {
      v19 = (_OWORD *)((char *)&v33 + v17);
      v20 = *(_OWORD *)(v18 + v17 + 16);
      *v19 = *(_OWORD *)(v18 + v17);
      v19[1] = v20;
      v17 += 32;
    }
    while (v17 != 128);
  }
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v23 = 0x3FF0000000000000;
  v24 = 0uLL;
  v25 = 0uLL;
  v27 = 0uLL;
  v28 = 0uLL;
  v30 = 0uLL;
  v31 = 0uLL;
  PSPaintPType::getRadialParticleMatrix(a1, v8, (uint64_t)v16, (double *)a3, &v33, (uint64_t)&v23, *(unsigned __int8 *)(a2 + 1497));
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v23, (double *)(a2 + 1632));
  for (i = 0; i != 96; i += 24)
  {
    PCMatrix44Tmpl<double>::transform<double>((double *)&v23, (double *)((char *)v43 + i), (double *)((char *)v43 + i));
    v22 = *(float64x2_t *)((char *)v43 + i);
    PCRect<double>::operator|=(a4, &v22);
  }
}

unint64_t PSPaintPType::estimateRenderMemory(PSPaintPType *a1)
{
  if (PSPaintPType::getIsImageBrush(a1))
    return PSParticleType::estimateRenderMemoryImageParticle((uint64_t)a1);
  else
    return 0;
}

unint64_t PSPaintPType::estimateRenderMemoryBallpark(PSPaintPType *this, const OZRenderParams *a2, BOOL *a3)
{
  if (PSPaintPType::getIsImageBrush(this))
    return PSParticleType::estimateRenderMemoryImageBallpark(this, a2, a3);
  else
    return 0;
}

void PSPaintPType::addSprite(PSPaintPType *this, PSEmitter::RenderParams *a2, PSParticle *a3, float64x2_t *a4, PSHeliumNode *a5)
{
  char *v10;
  unsigned int IsImageBrush;

  v10 = (char *)this + 18124;
  if (*((_BYTE *)this + 18125))
  {
    if (*v10)
    {
LABEL_3:
      PSParticleType::addSprite(this, a2, a3, a4, a5);
      return;
    }
  }
  else
  {
    IsImageBrush = PSPaintPType::getIsImageBrush(this);
    *v10 = IsImageBrush;
    v10[1] = 1;
    if (IsImageBrush)
      goto LABEL_3;
  }
  PSPaintPType::addRadialSprite(this, a2, a3, (OZSimStateElement *)a4, a5);
}

void PSPaintPType::addRadialSprite(PSPaintPType *this, PSEmitter::RenderParams *a2, PSParticle *a3, OZSimStateElement *a4, PSHeliumNode *a5)
{
  double v9;
  OZRenderParams *v10;
  uint64_t v11;
  OZEaseInInterpolator *WorkingColorDescription;
  CGColorSpaceRef *v13;
  CGColorSpaceRef *v14;
  int DynamicRange;
  PCToneMapMethod *ToneMapMethod;
  __n128 v23;
  _OWORD v24[2];
  __n128 v25;
  CGColorSpace *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = 0x3FF0000000000000;
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  v36 = 0u;
  v37 = 0u;
  PSPaintPType::getRadialParticleMatrix((_QWORD **)this, *((__int128 **)a2 + 1), (uint64_t)a3, (double *)a4, (double *)a2 + 188, (uint64_t)&v29, *((unsigned __int8 *)a2 + 1497));
  v9 = PCMatrix44Tmpl<double>::determinant((double *)&v29);
  if (v9 <= -0.0000001 || v9 >= 0.0000001)
  {
    v10 = (OZRenderParams *)*((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)v10 + 2);
    v27 = *(_OWORD *)v10;
    v28 = v11;
    WorkingColorDescription = (OZEaseInInterpolator *)OZRenderParams::getWorkingColorDescription(v10);
    OZEaseInInterpolator::~OZEaseInInterpolator(WorkingColorDescription);
    v14 = v13;
    DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)WorkingColorDescription);
    ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)WorkingColorDescription);
    PCWorkingColor::PCWorkingColor((uint64_t)&v25, v14, DynamicRange, ToneMapMethod, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(PSPaintPType *, __int128 *, PSParticle *, _QWORD, __n128 *))(*(_QWORD *)this + 1600))(this, &v27, a3, *(_QWORD *)a2, &v25);
    __asm
    {
      FMOV            V0.2D, #-0.5
      FMOV            V1.2D, #1.0
    }
    v24[0] = _Q0;
    v24[1] = _Q1;
    PCWorkingColor::operator=(&v23, &v25);
    PSHeliumNode::addRadialParticle((uint64_t)a5, (double *)&v29, (double *)v24, &v23, *((_BYTE *)this + 16528));
    PCCFRef<CGColorSpace *>::~PCCFRef(&v26);
  }
}

void sub_1B2FE546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSPaintPType::getSourceRender(PSPaintPType *this@<X0>, const OZRenderParams *a2@<X1>, const CMTime *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  const void *v10;
  PSPaint *v11;
  void *v12;
  char *Rotoshape;
  int ValueAsInt;
  PSSolidDabRender *v15;
  PCSharedCount *v16;
  PCShared_base *v17;
  PSGradDabRender *v18;
  PCSharedCount *v19;

  v10 = (const void *)*((_QWORD *)this + 2054);
  if (!v10)
    goto LABEL_10;
  if (!v11 || !PSPaint::getRotoshape(v11))
    goto LABEL_10;
  v12 = (void *)*((_QWORD *)this + 2054);
  if (v12)
  Rotoshape = (char *)PSPaint::getRotoshape((PSPaint *)v12);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(Rotoshape + 25904), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 2)
  {
LABEL_10:
    PSParticleType::getSourceRender(this, a2, a3, a4, a5);
    return;
  }
  if (ValueAsInt == 1)
  {
    v18 = (PSGradDabRender *)operator new();
    PSGradDabRender::PSGradDabRender(v18, (PSPaintPType *)((char *)this + 16984), a2);
    a5->var0 = (PC_Sp_counted_base *)v18;
    v16 = a5 + 1;
    v17 = (PSGradDabRender *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24));
  }
  else
  {
    if (ValueAsInt)
    {
      a5->var0 = 0;
      v19 = a5 + 1;
      v17 = 0;
      goto LABEL_14;
    }
    v15 = (PSSolidDabRender *)operator new();
    PSSolidDabRender::PSSolidDabRender(v15, a2);
    a5->var0 = (PC_Sp_counted_base *)v15;
    v16 = a5 + 1;
    v17 = (PSSolidDabRender *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24));
  }
  v19 = v16;
LABEL_14:
  PCSharedCount::PCSharedCount(v19, v17);
}

void sub_1B2FE55F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C408EE2B4E3);
  _Unwind_Resume(a1);
}

void PSPaintPType::updateGradientStringName(PSPaintPType *this, char a2)
{
  uint64_t v4;
  OZNotificationManager *v5;
  int ValueAsInt;
  PCSharedCount v7;

  if ((a2 & 1) == 0)
  {
    if ((*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 272))(this))
    {
      v4 = *(_QWORD *)((*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 272))(this) + 1584);
      if (v4)
      {
        v5 = *(OZNotificationManager **)(v4 + 168);
        if (!v5 || !OZNotificationManager::wasChannelModified(v5, (const OZChannelBase *)((char *)this + 6784)))
        {
          PCSharedCount::PCSharedCount(&v7);
          OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 6784), (const PCString *)&v7);
          PCString::~PCString((PCString *)&v7);
        }
      }
    }
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), MEMORY[0x1E0CA2E68], 0.0);
  switch(ValueAsInt)
  {
    case 3:
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6912), 2, a2);
      PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Color Range"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v7, 0);
      break;
    case 2:
      PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Color Over Stroke"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v7, 0);
      break;
    case 1:
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6912), 2, a2);
      PCURL::PCURL((PCURL *)&v7, CFSTR("PPaint PType Opacity Over Stroke"));
      OZChannelBase::setName((OZChannelBase *)((char *)this + 6784), (const PCString *)&v7, 0);
      break;
    default:
      return;
  }
  PCString::~PCString((PCString *)&v7);
}

void sub_1B2FE57DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PSPaintPType::updateRotationStringNames(PSPaintPType *this)
{
  uint64_t v2;
  PCString v3;

  v2 = *((_QWORD *)this + 2054);
  if (v2 && !OZChannel::getValueAsInt((OZChannel *)(v2 + 32792), MEMORY[0x1E0CA2E68], 0.0))
  {
    PCURL::PCURL((PCURL *)&v3, CFSTR("PPaint PType Rotation"));
    OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), &v3, 0);
    PCString::~PCString(&v3);
    PCURL::PCURL((PCURL *)&v3, CFSTR("PPaint PType Rotation Variance"));
    OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v3, 0);
  }
  else
  {
    PCString::PCString(&v3, "Channel Z", "com.apple.prochannel.framework");
    OZChannelBase::setName((OZChannelBase *)((char *)this + 2776), &v3, 0);
    PCString::~PCString(&v3);
    PCString::PCString(&v3, "Channel Z", "com.apple.prochannel.framework");
    OZChannelBase::setName((OZChannelBase *)((char *)this + 4648), &v3, 0);
  }
  PCString::~PCString(&v3);
}

void sub_1B2FE5930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double PSPaintPType::getInitialParticleColor(PSPaintPType *this, const CMTime *a2, Float64 *a3, int a4, PCColor *a5)
{
  uint64_t v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  float v15;
  float v16;
  double result;
  double v18;
  float v19;
  _QWORD **v20;
  _QWORD *v21[2];
  PCColor v22;
  float v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 5368), a2, 0.0) == 1)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
    PCColor::PCColor(&v22);
    (*(void (**)(uint64_t, const CMTime *, PCColor *))(*(_QWORD *)(v10 + 26160) + 832))(v10 + 26160, a2, &v22);
    v11 = *(_OWORD *)&v22.var0.var1[1];
    *(_OWORD *)&a5->var0.var0 = *(_OWORD *)&v22.var0.var0;
    *(_OWORD *)&a5->var0.var1[1] = v11;
    *(_OWORD *)&a5->var0.var1[3] = *(_OWORD *)&v22.var0.var1[3];
    PCCFRef<CGColorSpace *>::operator=(&a5->var1._obj, &v22.var1._obj);
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 27168), a2, 0.0);
    *(float *)&v12 = v12;
    PCColor::setAlpha(a5, *(float *)&v12);
    OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)this + 117, a2, a3[21]);
    v14 = v13;
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    (*(void (**)(char *, const CMTime *, _QWORD ***))(*((_QWORD *)this + 880) + 728))((char *)this + 7040, a2, &v20);
    (*(void (**)(char *, float *, _QWORD ***, Float64))(*((_QWORD *)this + 880) + 736))((char *)this + 7040, v23, &v20, a3[21]);
    v15 = v23[0];
    v16 = v14 * v15 * PCColor::getAlpha(a5);
    PCColor::setAlpha(a5, v16);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v22.var1._obj);
  }
  else
  {
    PSReplicatorPType::getInitialParticleColor(this, a2, (PSParticle *)a3, a4, a5);
    OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)this + 117, a2, a3[21]);
    v19 = v18 * PCColor::getAlpha(a5);
    return PCColor::setAlpha(a5, v19);
  }
  return result;
}

void sub_1B2FE5B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

double PSPaintPType::getInitialParticleScale(PSPaintPType *this, const CMTime *a2, uint64_t a3, uint64_t a4, double *a5, double *a6)
{
  float *v11;
  double v12;
  unsigned int IsImageBrush;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double result;

  v11 = (float *)((char *)this + 18104);
  if (*((_BYTE *)this + 18125))
  {
    if (!*((_BYTE *)this + 18124))
    {
      v12 = 1.0;
      goto LABEL_6;
    }
  }
  else
  {
    IsImageBrush = PSPaintPType::getIsImageBrush(this);
    *((_BYTE *)v11 + 20) = IsImageBrush;
    *((_BYTE *)v11 + 21) = 1;
    v12 = 1.0;
    if (!IsImageBrush)
      goto LABEL_6;
  }
  v12 = *v11;
LABEL_6:
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
  OZChannel::getValueAsDouble((OZChannel *)(v14 + 27320), a2, 0.0);
  if (v15 >= 3.0)
    v16 = v15;
  else
    v16 = 3.0;
  OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)((char *)this + 12496), a2, *(Float64 *)(a3 + 168));
  v18 = v17 * (v16 / v12);
  *a5 = v18;
  a5[1] = v18;
  result = v17 * v16;
  *a6 = result;
  a6[1] = result;
  return result;
}

void PSPaintPType::getInitialParticleRotation(PSPaintPType *this, const CMTime *a2, Float64 *a3)
{
  OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)((char *)this + 4048), a2, a3[21]);
}

uint64_t PSPaintPType::areParticlesImmortal(PSPaintPType *this)
{
  return OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 11904), 0, 1) ^ 1;
}

void PSPaintPType::applyAllScaleOverLifeBehaviors(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CMTime v13;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16432) + 616))(*(_QWORD *)(a1 + 16432));
  if (v10)
  {
    v11 = v10;
    memset(&v13, 0, sizeof(v13));
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16432) + 200) + 272))(*(_QWORD *)(a1 + 16432) + 200);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v13);
    PSParticleType::applyScaleOverLifeBehaviors(a1, (uint64_t *)(v11 + 1200), a2, a3, a4, &v13, a5);
  }
}

void PSPaintPType::applyAllSequenceBehaviors(PSPaintPType *this, CMTime *a2, const PSParticle *a3, PSSequencedValues *a4)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
  if (v8)
    PSParticleType::applySequenceBehaviors(*((double *)a3 + 21), (uint64_t)this, (uint64_t *)(v8 + 1200), a2, (uint64_t)this, a4);
}

void PSPaintPType::getAllSequenceBehaviors(uint64_t a1, __int128 *a2, void **a3)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16432) + 616))(*(_QWORD *)(a1 + 16432));
  if (v6)
    PSParticleType::getSequenceBehaviors(a1, (uint64_t *)(v6 + 1200), a2, a3);
}

_QWORD *PSPaintPType::disableSourceNode(PSPaintPType *this)
{
  _QWORD *result;

  result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 14392));
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(result[2] + 40))(result + 2, 0);
  return result;
}

unint64_t PSPaintPType::simAnythingToSimulate(PSPaintPType *this)
{
  return OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 11904), 0, 1);
}

unint64_t `non-virtual thunk to'PSPaintPType::simAnythingToSimulate(PSPaintPType *this)
{
  return OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 10792), 0, 1);
}

BOOL PSPaintPType::simShouldCache(PSPaintPType *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
  if (v1 && (v2 = v1, !OZChannel::getValueAsInt((OZChannel *)(v1 + 33256), MEMORY[0x1E0CA2E68], 0.0)))
    return OZMoShape::getFreehandPaintVertices((OZMoShape *)(v2 + 18976)) == 0;
  else
    return 1;
}

BOOL `non-virtual thunk to'PSPaintPType::simShouldCache(PSPaintPType *this)
{
  return PSPaintPType::simShouldCache((PSPaintPType *)((char *)this - 1112));
}

uint64_t PSPaintPType::simAddObjects(PSPaintPType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  uint64_t v7;
  unsigned int *v8;
  int v9;
  PSParticle *v10;
  uint64_t v11;
  unsigned int v12;
  double v13;
  int v14;
  unsigned int v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  CMTime v38;
  __n128 v39;
  CMTimeEpoch v40;
  unsigned int v41;
  PSParticle *v42;
  CMTime v43;
  CMTime v44;
  CMTime __y;

  v7 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054), a4);
  if (!OZChannel::getValueAsInt((OZChannel *)(v7 + 33256), MEMORY[0x1E0CA2E68], 0.0)
    && OZMoShape::getFreehandPaintVertices((OZMoShape *)(v7 + 18976)))
  {
    PSPaintPType::interactiveSimAddObjects(this, a2, a3, v13);
    return 0;
  }
  v8 = (unsigned int *)((char *)this + 18072);
  v43 = *(CMTime *)((_BYTE *)a3 + 1);
  if ((PSPaintPType *)((char *)this + 15520) == a2)
  {
    v9 = 0;
    v12 = 0;
    v10 = (PSParticle *)*((_QWORD *)this + 2258);
    v42 = v10;
    v11 = *v8;
    v41 = *v8;
  }
  else if ((PSPaintPType *)((char *)this + 15800) == a2)
  {
    v10 = (PSParticle *)*((_QWORD *)this + 2260);
    v42 = v10;
    v11 = *((unsigned int *)this + 4522);
    v41 = *((_DWORD *)this + 4522);
    v9 = 1;
    v12 = 1;
  }
  else
  {
    v9 = 0;
    v10 = (PSParticle *)*((_QWORD *)this + 2258);
    v42 = v10;
    v11 = *v8;
    v41 = *v8;
    v12 = 2;
  }
  v14 = (*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 1656))(this);
  v16 = v14;
  if (!v10)
  {
    __y = v43;
    if (v14)
    {
      (*(void (**)(CMTime *__return_ptr, PSPaintPType *, CMTime *))(*(_QWORD *)this + 1440))(&v44, this, &v43);
      __y = v44;
      PSPaintPType::initAllEmissionPoints(this, &__y, v24, &v42, &v41);
    }
    else
    {
      PSPaintPType::initAllEmissionPoints(this, &__y, v15, &v42, &v41);
      if (!PSPaintPType::getIsSpacingConstantOverTime(this)
      {
        v27 = operator new();
        v10 = v42;
        *(_BYTE *)(v27 + 32) = 1;
        *(_QWORD *)(v27 + 16) = &unk_1E65E6880;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)v27 = &unk_1E65E6850;
        *(_QWORD *)(v27 + 8) = v10;
        OZSimStateArray::setOwnedObject((PCShared_base **)a3, (PCShared *)v27);
        v11 = v41;
        goto LABEL_10;
      }
    }
    v10 = v42;
    if (v9)
    {
      *((_QWORD *)this + 2260) = v42;
      v11 = v41;
      *((_DWORD *)this + 4522) = v41;
    }
    else
    {
      *((_QWORD *)this + 2258) = v42;
      v11 = v41;
      *v8 = v41;
    }
  }
LABEL_10:
  if ((_DWORD)v11)
  {
    OZChannel::getValueAsDouble((OZChannel *)(v7 + 28952), &v43, 0.0);
    v18 = v17;
    OZChannel::getValueAsDouble((OZChannel *)(v7 + 29104), &v43, 0.0);
    v20 = v19;
    OZChannel::getValueAsDouble((OZChannel *)(v7 + 29568), &v43, 0.0);
    if (v18 >= v20)
      return 0;
    v22 = v21;
    if (vabdd_f64(v18, v20) < 0.0000001)
      return 0;
    __y.value = 0;
    modf(v21, (long double *)&__y.value);
    v28 = v22 - *(double *)&__y.value;
    if (v22 - *(double *)&__y.value < 0.0)
      v28 = v28 + 1.0;
    v29 = v18 + v28;
    v30 = v20 + v28;
    if (OZChannel::getValueAsInt((OZChannel *)(v7 + 20304), MEMORY[0x1E0CA2E68], 0.0))
    {
      if (v29 > 1.0)
        v29 = v29 + -1.0;
      v31 = v30 <= 1.0;
      v32 = v30 + -1.0;
    }
    else
    {
      if (v29 > 1.0)
        return 0;
      v32 = 1.0;
      v31 = v30 <= 1.0;
    }
    if (!v31)
      v30 = v32;
    if ((v16 & 1) != 0)
    {
      if (*((_BYTE *)this + 18092))
      {
        v33 = v12;
      }
      else
      {
        v39 = 0uLL;
        v40 = 0;
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v34 + 336), &v39);
        memset(&v38, 0, sizeof(v38));
        __y = v43;
        *(__n128 *)&v44.value = v39;
        v44.epoch = v40;
        PC_CMTimeSaferSubtract(&__y, &v44, (uint64_t)&v38);
        OZChannel::getValueAsDouble((OZChannel *)(v7 + 28952), &v38, 0.0);
        v36 = v35;
        OZChannel::getValueAsDouble((OZChannel *)(v7 + 29104), &v38, 0.0);
        if (v29 <= -0.0000001
          || v29 >= 0.0000001
          || fabs(v30 + -1.0) >= 0.0000001
          || v36 <= -0.0000001
          || v36 >= 0.0000001
          || fabs(v37 + -1.0) >= 0.0000001)
        {
          PSPaintPType::birthParticlesInStroke(this, v29, v30, v36, v37, a3, v10, v11);
        }
        else
        {
          PSPaintPType::birthAllParticles(this, a3, v10, v11);
        }
        v33 = v12;
        v10 = v42;
      }
      v11 = PSPaintPType::addBornParticlesToSim(this, a3, v10, v11);
    }
    else
    {
      if (v29 <= -0.0000001 || v29 >= 0.0000001 || fabs(v30 + -1.0) >= 0.0000001)
        v11 = PSPaintPType::birthAndAddParticlesInStroke(this, v29, v30, a3, v10, v11);
      else
        PSPaintPType::birthAndAddAllParticles(this, a3, v10, v11);
      v33 = v12;
    }
    PSEmitter::initParticles(*((PSEmitter **)this + 2054), v33, this, v11, 0, a3);
  }
  return v11;
}

uint64_t PSPaintPType::interactiveSimAddObjects(PSPaintPType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *FreehandPaintVertices;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  int v29;
  float64x2_t v30;
  OZChannel *v31;
  OZChannel *v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  int v37;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  double v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  float64x2_t v77;
  double v78;
  double v79;
  int v80;
  unsigned int v81;
  double v82;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  CMTime v86;
  __int128 v87;
  uint64_t v88;
  CMTime v89;
  CMTime v90;
  CMTime v91;
  CMTime __y;

  v7 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054), a4);
  if ((PSPaintPType *)((char *)this + 15800) == a2)
    v8 = 1;
  else
    v8 = 2;
  if ((PSPaintPType *)((char *)this + 15520) == a2)
    v9 = 0;
  else
    v9 = v8;
  v90 = *(CMTime *)((_BYTE *)a3 + 1);
  memset(&v89, 0, sizeof(v89));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v89);
  FreehandPaintVertices = (_QWORD *)OZMoShape::getFreehandPaintVertices((OZMoShape *)(v7 + 18976));
  v12 = FreehandPaintVertices[1] - *FreehandPaintVertices;
  if (v12)
  {
    v13 = FreehandPaintVertices;
    v14 = (_QWORD *)*((_QWORD *)this + 2258);
    if (!v14)
    {
      v15 = FreehandPaintVertices;
      v16 = (v12 >> 3) & 0xFFFFFFFE;
      if ((int)v16 <= 0x4000)
        v17 = 0x4000;
      else
        v17 = v16;
      v18 = (_QWORD *)operator new[]();
      v19 = 0;
      *v18 = 232;
      v18[1] = v17;
      do
      {
        PSParticle::PSParticle((PSParticle *)&v18[v19 + 2]);
        v19 += 29;
      }
      while (29 * v17 != v19);
      v14 = v18 + 2;
      *((_QWORD *)this + 2258) = v18 + 2;
      v13 = v15;
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 12184), &v90, 0.0);
    v21 = v20;
    OZChannel::getValueAsDouble((OZChannel *)(v7 + 27320), &v90, 0.0);
    if (v22 < 3.0)
      v22 = 3.0;
    v23 = v21 * v22;
    if (v23 <= -0.0000001 || v23 >= 0.0000001)
    {
      v73 = v9;
      v74 = (uint64_t *)a3;
      v24 = 0;
      v25 = v13[1] - *v13;
      v26 = *((int *)this + 4530);
      v27 = *((double *)this + 2264);
      v70 = v14;
      v71 = (unint64_t)v25 >> 4;
      v72 = (unsigned int *)((char *)this + 18072);
      if ((int)v26 < (int)((unint64_t)v25 >> 4))
      {
        v28 = *((_DWORD *)this + 4518);
        if (v28 < 0x4000)
        {
          v24 = 0;
          if ((int)v26 <= 1)
            v29 = 1;
          else
            v29 = *((_DWORD *)this + 4530);
          v30 = *(float64x2_t *)(*v13 + 16 * (v29 - 1));
          v31 = (OZChannel *)((char *)this + 12336);
          v32 = (OZChannel *)((char *)this + 12496);
          v33 = (int)(v25 >> 4);
          v78 = 1.0 / v23;
          v75 = v33;
          v76 = v13;
          do
          {
            v34 = *(float64x2_t *)(*v13 + 16 * v26);
            v35 = vsubq_f64(v34, v30);
            v36 = sqrt(vaddvq_f64(vmulq_f64(v35, v35)));
            v83 = ceil(v36);
            if (v83 <= 0.0)
            {
              ++v26;
            }
            else
            {
              v77 = *(float64x2_t *)(*v13 + 16 * v26);
              v84 = v35;
              v85 = v30;
              v37 = 0;
              v82 = (double)(int)v26++;
              v38 = v36 >= 0.000000100000001 || v36 <= -0.000000100000001;
              v39 = 1.0;
              if (v38)
                v39 = v36;
              v40 = v35.f64[0] / v39;
              v41 = 0.0;
              v42 = -v35.f64[1] / v39;
              do
              {
                v43 = v41 / v36 + v82;
                OZChannelDoubleOverRange::getValueOverRangeAsDouble(v31, &v90, v43);
                v45 = v44;
                OZChannelDoubleOverRange::getValueOverRangeAsDouble(v32, &v90, v43);
                if ((v46 <= -0.0000001 || v46 >= 0.0000001) && (v45 <= -0.0000001 || v45 >= 0.0000001))
                {
                  v47 = v27 + v78 * (1.0 / (v45 * v46));
                  __y.value = 0;
                  modf(v47, (long double *)&__y.value);
                  v48 = *(double *)&__y.value;
                  __y.value = 0;
                  modf(v27, (long double *)&__y.value);
                  v49 = (int)(v48 - *(double *)&__y.value);
                  __y.value = 0;
                  modf(v27, (long double *)&__y.value);
                  if (v49 >= 1)
                  {
                    v81 = v24;
                    v50 = 0;
                    v79 = v47;
                    v51 = v47 - v27;
                    v52 = *(double *)&__y.value - v27;
                    v53 = v28;
                    v54 = v28;
                    v80 = v28;
                    v55 = (uint64_t)&v14[29 * v28 + 21];
                    v56 = 1.0;
                    do
                    {
                      *(_DWORD *)(v55 + 56) = v26;
                      *(double *)v55 = v43;
                      *(double *)(v55 + 8) = (double)(v54 + (int)v50);
                      *(float64x2_t *)(v55 + 24) = vaddq_f64(v85, vmulq_n_f64(v84, (v41 + (v52 + v56) / v51) / v36));
                      v57 = v50 + 1;
                      *(double *)(v55 + 40) = v42;
                      *(double *)(v55 + 48) = v40;
                      operator*(&v89, &v86, 0.01);
                      __y = v90;
                      v91 = v86;
                      PC_CMTimeSaferSubtract(&__y, &v91, (uint64_t)&v87);
                      v58 = v87;
                      *(_QWORD *)(v55 - 144) = v88;
                      *(_OWORD *)(v55 - 160) = v58;
                      *(_BYTE *)(v55 + 16) = 1;
                      if ((int)v50 + 1 >= v49)
                        break;
                      v59 = v53 + v50;
                      v56 = v56 + 1.0;
                      v55 += 232;
                      ++v50;
                    }
                    while (v59 < 0x3FFF);
                    v28 = v80 + v57;
                    v24 = v81 + v57;
                    v47 = v79;
                    v32 = (OZChannel *)((char *)this + 12496);
                    v31 = (OZChannel *)((char *)this + 12336);
                  }
                }
                else
                {
                  v47 = v27;
                }
                v41 = (double)++v37;
                if (v83 <= (double)v37)
                  break;
                v27 = v47;
              }
              while (v28 < 0x4000);
              v27 = v47;
              v33 = v75;
              v13 = v76;
              v34 = v77;
            }
            if (v26 >= v33)
              break;
            v30 = v34;
          }
          while (v28 < 0x4000);
        }
      }
      v60 = (*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 1656))(this);
      v61 = *v72 + v24;
      if (v60)
        v62 = *v72;
      else
        v62 = 0;
      if (v60)
        v63 = v24;
      else
        v63 = v61;
      *v72 = v61;
      v64 = (unint64_t)(v74[1] - *v74) >> 3;
      v65 = -1108378657 * v64;
      std::vector<OZSimStateElement>::resize(v74, (v63 - 1108378657 * v64));
      v66 = *v72 - v62;
      if (*v72 > v62)
      {
        v67 = &v70[29 * (int)v62];
        v68 = *v74;
        do
        {
          *(_QWORD *)(v68 + 248 * v65++ + 232) = v67;
          v67 += 29;
          --v66;
        }
        while (v66);
      }
      PSEmitter::initParticles(*((PSEmitter **)this + 2054), v73, this, v63, 0, (OZSimStateArray *)v74);
      *((double *)this + 2264) = v27;
      *((_DWORD *)this + 4530) = v71;
    }
  }
  return 0;
}

void sub_1B2FE69F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  for (; v1; v1 -= 232)
    PSParticle::~PSParticle((CGColorSpace **)(v2 - 216 + v1));
  MEMORY[0x1B5E2914C](v2, 0x10A1C80AE952B93);
  _Unwind_Resume(a1);
}

void PSPaintPType::initAllEmissionPoints(PSPaintPType *this, CMTime *a2, unsigned int a3, PSParticle **a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  int ValueAsInt;
  uint64_t v16;
  long double *v17;
  double v18;
  uint64_t v19;
  long double v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  long double *v26;
  double v27;
  long double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  OZRenderState v35;
  double *v36;
  double *v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  LODWORD(v9) = PSPaintPType::getNumEmissionPointsAndOrders((uint64_t)this, a2, (uint64_t)&v36);
  if ((_DWORD)v9)
  {
    OZRenderState::OZRenderState(&v35);
    *(_OWORD *)&v35.var0.var0 = *(_OWORD *)&a2->value;
    v35.var0.var3 = a2->epoch;
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
    v11 = v10;
    if (v10)
    {
      if (OZShape::isGeometricShape((OZShape *)(v10 + 18976))
        || OZDynamicCurve::getNumberOfValidKeypoints((os_unfair_lock_s *)(v11 + 19472), a2))
      {
        v12 = (_QWORD *)operator new[]();
        v13 = 0;
        *v12 = 232;
        v12[1] = v9;
        do
        {
          PSParticle::PSParticle((PSParticle *)&v12[v13 + 2]);
          v13 += 29;
        }
        while (29 * v9 != v13);
        *a4 = (PSParticle *)(v12 + 2);
        *a5 = v9;
        if (v37 == v36)
        {
          v23 = v9;
          if (v9 >= 2)
            v23 = (__PAIR64__(v9, OZChannel::getValueAsInt((OZChannel *)(v11 + 20304), MEMORY[0x1E0CA2E68], 0.0)) - 1) >> 32;
          v24 = 0;
          v25 = 1.0 / (double)v23;
          if (v9 <= 1)
            v9 = 1;
          else
            v9 = v9;
          v26 = (long double *)(v12 + 30);
          do
          {
            v27 = (double)v24;
            v28 = v25 * (double)v24++;
            *(_DWORD *)v26 = v24;
            *(v26 - 7) = v28;
            *(v26 - 6) = v27;
            v33 = 0;
            v34 = 0;
            v31 = 0;
            v32 = 0;
            OZRotoshape::getReparametrizedPointOnContour(v11, (__int128 *)&v35.var0.var0, (double *)&v34, (double *)&v33, (double *)&v32, (double *)&v31, 1, 0, v28, 0);
            v29 = v33;
            *((_QWORD *)v26 - 4) = v34;
            *((_QWORD *)v26 - 3) = v29;
            v30 = v31;
            *((_QWORD *)v26 - 2) = v32;
            *((_QWORD *)v26 - 1) = v30;
            v26 += 29;
          }
          while (v9 != v24);
        }
        else
        {
          v14 = 1.0;
          if (v9 >= 2
            && (OZChannel::getValueAsInt((OZChannel *)((char *)this + 12808), MEMORY[0x1E0CA2E68], 0.0) == 1
             || OZChannel::getValueAsInt((OZChannel *)((char *)this + 12656), MEMORY[0x1E0CA2E68], 0.0)))
          {
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v11 + 20304), MEMORY[0x1E0CA2E68], 0.0);
            v14 = v36[(v9 - 1)];
            if (ValueAsInt)
              v14 = v14 + v14 - v36[(v9 - 2)];
          }
          v16 = 0;
          if (v9 <= 1)
            v9 = 1;
          else
            v9 = v9;
          v17 = (long double *)(v12 + 30);
          do
          {
            v18 = v36[v16];
            v19 = v16 + 1;
            *(_DWORD *)v17 = v16 + 1;
            v20 = v18 / v14;
            *(v17 - 7) = v20;
            *(v17 - 6) = (double)v16;
            v33 = 0;
            v34 = 0;
            v31 = 0;
            v32 = 0;
            OZRotoshape::getReparametrizedPointOnContour(v11, (__int128 *)&v35.var0.var0, (double *)&v34, (double *)&v33, (double *)&v32, (double *)&v31, 1, 0, v20, 0);
            v21 = v33;
            *((_QWORD *)v17 - 4) = v34;
            *((_QWORD *)v17 - 3) = v21;
            v22 = v31;
            *((_QWORD *)v17 - 2) = v32;
            *((_QWORD *)v17 - 1) = v22;
            v17 += 29;
            v16 = v19;
          }
          while (v9 != v19);
        }
      }
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1B2FE6D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PSPaintPType::getIsSpacingConstantOverTime(PSPaintPType *this)
{
  uint64_t v2;
  OZBehavior *v3;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
  if (OZChannel::hasMoreThanOneKeypoint((OZChannel *)((char *)this + 12184)))
    return 0;
  v3 = (OZBehavior *)(v2 + 27320);
  if (((*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v3 + 560))(v3) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((PSPaintPType *)((char *)this + 12184), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors(v3, (const OZChannelBase *)1) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return PSPaintPType::getIsWidthSequenced(this, MEMORY[0x1E0CA2E68], 0) ^ 1;
  }
}

uint64_t PSPaintPType::birthAndAddAllParticles(PSPaintPType *this, OZSimStateArray *a2, PSParticle *a3, uint64_t a4)
{
  double FirstFrame;
  uint64_t v9;
  unsigned int v10;
  int v11;
  __int128 v13;
  uint64_t v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  memset(&v16, 0, sizeof(v16));
  v18 = *(CMTime *)((_BYTE *)a2 + 1);
  FirstFrame = PSParticleType::simGetFirstFrame(this, (uint64_t)&v16);
  memset(&v15, 0, sizeof(v15));
  v9 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200, FirstFrame);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v18);
  operator*(&v18, &v15, 0.01);
  v10 = -1108378657 * ((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  std::vector<OZSimStateElement>::resize((uint64_t *)a2, v10 + a4);
  if ((_DWORD)a4)
  {
    v11 = a4;
    do
    {
      v18 = v16;
      v17 = v15;
      PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v13);
      *(_OWORD *)((char *)a3 + 8) = v13;
      *((_QWORD *)a3 + 3) = v14;
      *((_BYTE *)a3 + 184) = 1;
      *(_QWORD *)(*(_QWORD *)a2 + 248 * v10++ + 232) = a3;
      a3 = (PSParticle *)((char *)a3 + 232);
      --v11;
    }
    while (v11);
  }
  return a4;
}

uint64_t PSPaintPType::birthAndAddParticlesInStroke(PSPaintPType *this, double a2, double a3, OZSimStateArray *a4, PSParticle *a5, unsigned int a6)
{
  double FirstFrame;
  uint64_t v13;
  unint64_t v14;
  PSParticle *v15;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  double v19;
  PSParticle *v20;
  PSParticle *v21;
  unint64_t v22;
  double *v23;
  double v24;
  PSParticle *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  int v38;
  __int128 v40;
  uint64_t v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;

  memset(&v43, 0, sizeof(v43));
  v45 = *(CMTime *)((_BYTE *)a4 + 1);
  FirstFrame = PSParticleType::simGetFirstFrame(this, (uint64_t)&v43);
  memset(&v42, 0, sizeof(v42));
  v13 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200, FirstFrame);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), (__n128 *)&v45);
  operator*(&v45, &v42, 0.01);
  if (a6)
  {
    v14 = a6;
    v15 = a5;
    v16 = a6;
    do
    {
      v17 = v16 >> 1;
      v18 = (double *)((char *)v15 + 232 * (v16 >> 1));
      v19 = v18[21];
      v20 = (PSParticle *)(v18 + 29);
      v16 += ~(v16 >> 1);
      if (v19 < a2)
        v15 = v20;
      else
        v16 = v17;
    }
    while (v16);
    v21 = a5;
    do
    {
      v22 = v14 >> 1;
      v23 = (double *)((char *)v21 + 232 * (v14 >> 1));
      v24 = v23[21];
      v25 = (PSParticle *)(v23 + 29);
      v14 += ~(v14 >> 1);
      if (v24 < a3)
        v21 = v25;
      else
        v14 = v22;
    }
    while (v14);
  }
  else
  {
    v15 = a5;
    v21 = a5;
  }
  v26 = 0x34F72C234F72C235 * ((v15 - a5) >> 3);
  if (*((double *)a5 + 29 * (int)v26 + 21) >= a2)
    v27 = v26;
  else
    v27 = v26 + 1;
  if (v27 >= (int)(a6 - 1))
    v28 = a6 - 1;
  else
    v28 = v27;
  if ((int)(1332920885 * ((unint64_t)(v21 - a5) >> 3)) >= (int)(a6 - 1))
    v29 = a6 - 1;
  else
    v29 = 1332920885 * ((unint64_t)(v21 - a5) >> 3);
  if (v29 >= v28)
    v30 = 0;
  else
    v30 = a6;
  v31 = v29 - v28 + v30 + 1;
  v32 = (*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3;
  v33 = -1108378657 * v32;
  std::vector<OZSimStateElement>::resize((uint64_t *)a4, (v31 - 1108378657 * v32));
  if (v29 >= v28)
  {
    v37 = (char *)a5 + 232 * v28;
    v38 = v29 - v28 + 1;
    do
    {
      v45 = v43;
      v44 = v42;
      PC_CMTimeSaferSubtract(&v45, &v44, (uint64_t)&v40);
      *(_OWORD *)(v37 + 8) = v40;
      *((_QWORD *)v37 + 3) = v41;
      v37[184] = 1;
      *(_QWORD *)(*(_QWORD *)a4 + 248 * v33++ + 232) = v37;
      v37 += 232;
      --v38;
    }
    while (v38);
  }
  else
  {
    if (v28 < (int)a6)
    {
      v34 = (char *)a5 + 232 * v28;
      v35 = a6 - v28;
      do
      {
        v45 = v43;
        v44 = v42;
        PC_CMTimeSaferSubtract(&v45, &v44, (uint64_t)&v40);
        *(_OWORD *)(v34 + 8) = v40;
        *((_QWORD *)v34 + 3) = v41;
        v34[184] = 1;
        *(_QWORD *)(*(_QWORD *)a4 + 248 * v33++ + 232) = v34;
        v34 += 232;
        --v35;
      }
      while (v35);
    }
    if ((v29 & 0x80000000) == 0)
    {
      v36 = (v29 + 1);
      do
      {
        v45 = v43;
        v44 = v42;
        PC_CMTimeSaferSubtract(&v45, &v44, (uint64_t)&v40);
        *(_OWORD *)((char *)a5 + 8) = v40;
        *((_QWORD *)a5 + 3) = v41;
        *((_BYTE *)a5 + 184) = 1;
        *(_QWORD *)(*(_QWORD *)a4 + 248 * v33++ + 232) = a5;
        a5 = (PSParticle *)((char *)a5 + 232);
        --v36;
      }
      while (v36);
    }
  }
  return v31;
}

void PSPaintPType::birthParticlesInStroke(PSPaintPType *this, double a2, double a3, double a4, double a5, OZSimStateArray *a6, PSParticle *a7, unsigned int a8)
{
  uint64_t v14;
  unint64_t v15;
  PSParticle *v16;
  PSParticle *v17;
  PSParticle *v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double v22;
  PSParticle *v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  double v27;
  PSParticle *v28;
  uint64_t v29;
  int v30;
  double v31;
  _BOOL4 v32;
  int v33;
  int v34;
  double v35;
  BOOL v36;
  double v37;
  int v38;
  PSParticle *v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  double v43;
  PSParticle *v44;
  uint64_t v45;
  unint64_t v46;
  double *v47;
  double v48;
  PSParticle *v49;
  int v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  int v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE *i;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  int v69;
  double v70;
  double v71;
  int v73;
  CMTime v74;
  __int128 v75;
  uint64_t v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;
  CMTime v80[2];

  if (vabdd_f64(a2, a3) < 0.0000001)
    return;
  v78 = *(CMTime *)((_BYTE *)a6 + 1);
  memset(&v77, 0, sizeof(v77));
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v14 + 336), (__n128 *)&v77);
  v15 = a8;
  v16 = (PSParticle *)((char *)a7 + 232 * a8);
  v17 = v16;
  v18 = v16;
  if (a8)
  {
    v17 = a7;
    v19 = a8;
    do
    {
      v20 = v19 >> 1;
      v21 = (double *)((char *)v17 + 232 * (v19 >> 1));
      v22 = v21[21];
      v23 = (PSParticle *)(v21 + 29);
      v19 += ~(v19 >> 1);
      if (v22 < a2)
        v17 = v23;
      else
        v19 = v20;
    }
    while (v19);
    v18 = a7;
    v24 = a8;
    do
    {
      v25 = v24 >> 1;
      v26 = (double *)((char *)v18 + 232 * (v24 >> 1));
      v27 = v26[21];
      v28 = (PSParticle *)(v26 + 29);
      v24 += ~(v24 >> 1);
      if (v27 < a3)
        v18 = v28;
      else
        v24 = v25;
    }
    while (v24);
  }
  v29 = 0x34F72C234F72C235 * ((v17 - a7) >> 3);
  v30 = 1332920885 * ((unint64_t)(v18 - a7) >> 3);
  v31 = *((double *)a7 + 29 * (int)v29 + 21);
  v32 = v31 < a2;
  if (v31 >= a2)
    v33 = v29;
  else
    v33 = v29 + 1;
  if (v30 >= (int)(a8 - 1))
    v34 = a8 - 1;
  else
    v34 = v30;
  v35 = 0.0;
  v36 = a2 < a4;
  v37 = 0.0;
  v38 = v33;
  if (v36)
  {
    v39 = (PSParticle *)((char *)a7 + 232 * a8);
    if (a8)
    {
      v39 = a7;
      v40 = a8;
      do
      {
        v41 = v40 >> 1;
        v42 = (double *)((char *)v39 + 232 * (v40 >> 1));
        v43 = v42[21];
        v44 = (PSParticle *)(v42 + 29);
        v40 += ~(v40 >> 1);
        if (v43 < a4)
          v39 = v44;
        else
          v40 = v41;
      }
      while (v40);
    }
    v45 = 0x34F72C234F72C235 * ((v39 - a7) >> 3);
    if (*((double *)a7 + 29 * (int)v45 + 21) >= a4)
      v38 = v45;
    else
      v38 = v45 + 1;
    if (v38 <= v33)
      v37 = 0.0;
    else
      v37 = 1.0 / (double)(v38 - v33);
  }
  if (a3 <= a5)
  {
    v50 = v34;
  }
  else
  {
    if (a8)
    {
      v16 = a7;
      do
      {
        v46 = v15 >> 1;
        v47 = (double *)((char *)v16 + 232 * (v15 >> 1));
        v48 = v47[21];
        v49 = (PSParticle *)(v47 + 29);
        v15 += ~(v15 >> 1);
        if (v48 < a5)
          v16 = v49;
        else
          v15 = v46;
      }
      while (v15);
    }
    if ((int)(1332920885 * ((unint64_t)(v16 - a7) >> 3)) >= (int)(a8 - 1))
      v50 = a8 - 1;
    else
      v50 = 1332920885 * ((unint64_t)(v16 - a7) >> 3);
    if (v34 > v50)
      v35 = 1.0 / (double)(v34 - v50);
  }
  if (v34 >= v33)
  {
    v63 = v33;
    v64 = v50;
    v65 = v38;
    v66 = v34;
    v67 = (char *)a7 + 232 * v33 + 184;
    v68 = ~v50 + v32 + v29;
    v69 = ~v33 + v38;
    while (*v67)
    {
LABEL_76:
      v67 += 232;
      ++v68;
      --v69;
      if (v63++ >= v66)
        return;
    }
    if (v63 >= v65)
    {
      v71 = 0.01;
      if (v63 <= v64)
      {
LABEL_75:
        operator*(&v77, &v74, v71);
        v80[0] = v78;
        v79 = v74;
        PC_CMTimeSaferSubtract(v80, &v79, (uint64_t)&v75);
        *((_OWORD *)v67 - 11) = v75;
        *((_QWORD *)v67 - 20) = v76;
        *v67 = 1;
        goto LABEL_76;
      }
      v70 = v35 * (double)v68;
    }
    else
    {
      v70 = v37 * (double)v69;
    }
    v71 = 1.0 - v70;
    goto LABEL_75;
  }
  v73 = v34;
  if (v33 < (int)a8)
  {
    v51 = v33;
    v52 = (char *)a7 + 232 * v33 + 184;
    v53 = ~v50 + v32 + v29;
    v54 = ~v33 + v38;
    while (*v52)
    {
LABEL_56:
      ++v51;
      v52 += 232;
      ++v53;
      --v54;
      if (v51 >= (int)a8)
        goto LABEL_57;
    }
    if (v51 >= v38)
    {
      v56 = 0.01;
      if (v51 <= v50)
      {
LABEL_55:
        operator*(&v77, &v74, v56);
        v80[0] = v78;
        v79 = v74;
        PC_CMTimeSaferSubtract(v80, &v79, (uint64_t)&v75);
        *((_OWORD *)v52 - 11) = v75;
        *((_QWORD *)v52 - 20) = v76;
        *v52 = 1;
        goto LABEL_56;
      }
      v55 = v35 * (double)v53;
    }
    else
    {
      v55 = v37 * (double)v54;
    }
    v56 = 1.0 - v55;
    goto LABEL_55;
  }
LABEL_57:
  if ((v73 & 0x80000000) == 0)
  {
    v57 = 0;
    v58 = v38;
    v59 = v38 - 1;
    for (i = (char *)a7 + 184; *i; i += 232)
    {
LABEL_66:
      ++v57;
      --v59;
      if (v73 + 1 == v57)
        return;
    }
    if (v57 <= v50)
    {
      v62 = 0.01;
      if (v57 >= v58)
      {
LABEL_65:
        operator*(&v77, &v74, v62);
        v80[0] = v78;
        v79 = v74;
        PC_CMTimeSaferSubtract(v80, &v79, (uint64_t)&v75);
        *((_OWORD *)i - 11) = v75;
        *((_QWORD *)i - 20) = v76;
        *i = 1;
        goto LABEL_66;
      }
      v61 = v37 * (double)v59;
    }
    else
    {
      v61 = v35 * (double)(~v50 + (int)v57);
    }
    v62 = 1.0 - v61;
    goto LABEL_65;
  }
}

void PSPaintPType::birthAllParticles(PSPaintPType *this, OZSimStateArray *a2, PSParticle *a3, int a4)
{
  double FirstFrame;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  memset(&v13, 0, sizeof(v13));
  v15 = *(CMTime *)((_BYTE *)a2 + 1);
  FirstFrame = PSParticleType::simGetFirstFrame(this, (uint64_t)&v13);
  memset(&v12, 0, sizeof(v12));
  v8 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200, FirstFrame);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v15);
  operator*(&v15, &v12, 0.01);
  if (a4)
  {
    v9 = (char *)a3 + 184;
    do
    {
      if (!*v9)
      {
        v15 = v13;
        v14 = v12;
        PC_CMTimeSaferSubtract(&v15, &v14, (uint64_t)&v10);
        *((_OWORD *)v9 - 11) = v10;
        *((_QWORD *)v9 - 20) = v11;
        *v9 = 1;
      }
      v9 += 232;
      --a4;
    }
    while (a4);
  }
  *((_BYTE *)this + 18092) = 1;
}

uint64_t PSPaintPType::addBornParticlesToSim(PSPaintPType *this, OZSimStateArray *a2, PSParticle *a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  CMTime v18;
  __n128 v19;
  CMTimeEpoch v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;

  v21 = *(CMTime *)((_BYTE *)a2 + 1);
  v19 = 0uLL;
  v20 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2054) + 200) + 272))(*((_QWORD *)this + 2054) + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v19);
  memset(&v18, 0, sizeof(v18));
  time1 = v21;
  *(__n128 *)&time2.value = v19;
  time2.epoch = v20;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
  if (a4)
  {
    v9 = 0;
    v10 = 0;
    v11 = (char *)a3 + 184;
    v12 = a4;
    v13 = (char *)a3 + 184;
    do
    {
      v14 = *v13;
      v13 += 232;
      if (v14)
      {
        ++v9;
        time1 = *(CMTime *)(v11 - 176);
        time2 = v21;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time1 = *(CMTime *)(v11 - 176);
          time2 = v18;
          v10 = v10 + (CMTimeCompare(&time1, &time2) >= 0);
        }
      }
      v11 = v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  if (v9 == a4)
    *((_BYTE *)this + 18092) = 1;
  v15 = (*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3;
  v16 = -1108378657 * v15;
  std::vector<OZSimStateElement>::resize((uint64_t *)a2, (v10 - 1108378657 * v15));
  for (; a4; --a4)
  {
    if (*((_BYTE *)a3 + 184))
    {
      time1 = *(CMTime *)((char *)a3 + 8);
      time2 = v21;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        time1 = *(CMTime *)((char *)a3 + 8);
        time2 = v18;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          *(_QWORD *)(*(_QWORD *)a2 + 248 * v16++ + 232) = a3;
      }
    }
    a3 = (PSParticle *)((char *)a3 + 232);
  }
  return v10;
}

uint64_t `non-virtual thunk to'PSPaintPType::simAddObjects(PSPaintPType *this, OZSystemSimulator *a2, OZSimStateArray *a3, double a4)
{
  return PSPaintPType::simAddObjects((PSPaintPType *)((char *)this - 1112), a2, a3, a4);
}

uint64_t PSPaintPType::getNumEmissionPointsAndOrders(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  double ReparametrizedContourLength;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  int v17;
  double *v18;
  double *v19;
  double *v20;
  double Seconds;
  double v22;
  unint64_t v23;
  double *v24;
  _QWORD *v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  int64_t var0;
  int v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  double v48;
  unint64_t v49;
  double *v50;
  double *v51;
  double *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  double *v58;
  uint64_t v59;
  double *v61;
  double *v62;
  double v63;
  int v64;
  CMTime v65;
  CMTime time;
  double *v67;
  unsigned int v68;
  OZRenderState __y;
  double *v70[2];
  int64_t v71;
  double *v72[2];
  int64_t v73;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16432) + 616))(*(_QWORD *)(a1 + 16432));
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 12656), a2, 0.0)
    && PSPaintPType::getIsSpacingConstantOverTime((PSPaintPType *)a1))
  {
    ReparametrizedContourLength = *(double *)(a1 + 18096);
    if (ReparametrizedContourLength < 0.0)
    {
      (*(void (**)(double **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1128))(v72, a1);
      *(_OWORD *)v70 = *(_OWORD *)v72;
      v71 = v73;
      OZRenderState::OZRenderState(&__y);
      *(_OWORD *)&__y.var0.var0 = *(_OWORD *)v70;
      __y.var0.var3 = v71;
      ReparametrizedContourLength = OZRotoshape::getReparametrizedContourLength(v7, (__int128 *)&__y.var0.var0, 1, 0);
      *(double *)(a1 + 18096) = ReparametrizedContourLength;
    }
  }
  else
  {
    OZRenderState::OZRenderState(&__y);
    *(_OWORD *)&__y.var0.var0 = *(_OWORD *)&a2->value;
    __y.var0.var3 = a2->epoch;
    ReparametrizedContourLength = OZRotoshape::getReparametrizedContourLength(v7, (__int128 *)&__y.var0.var0, 1, 0);
  }
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 12184), a2, 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 27320), a2, 0.0);
  if (v11 < 3.0)
    v11 = 3.0;
  v12 = v10 * v11;
  if (v12 > -0.0000001 && v12 < 0.0000001)
    return 0;
  v63 = 1.0 / v12;
  if ((OZChannel::getValueAsInt((OZChannel *)(a1 + 12808), MEMORY[0x1E0CA2E68], 0.0) == 1
     || OZChannel::getValueAsInt((OZChannel *)(a1 + 12656), MEMORY[0x1E0CA2E68], 0.0))
    && PSPaintPType::getIsSpacingEven((PSPaintPType *)a1, a2))
  {
    OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)(a1 + 12336), a2, 0.0);
    v15 = v14;
    OZChannelDoubleOverRange::getValueOverRangeAsDouble((OZChannel *)(a1 + 12496), a2, 0.0);
    if ((v15 <= -0.0000001 || v15 >= 0.0000001) && (v16 <= -0.0000001 || v16 >= 0.0000001))
      v17 = (int)(ReparametrizedContourLength * (v63 * (1.0 / v15) * (1.0 / v16))) + 1;
    else
      v17 = 0;
  }
  else
  {
    LODWORD(v3) = vcvtpd_u64_f64(ReparametrizedContourLength);
    v68 = v3;
    v18 = (double *)operator new[]();
    v19 = (double *)operator new[]();
    v20 = (double *)operator new[]();
    v72[0] = v18;
    v70[0] = v19;
    v67 = v20;
    time = *a2;
    Seconds = CMTimeGetSeconds(&time);
    OZChannel::getSamples((OZChannel *)(a1 + 12336), 0.0, 1.0 / (double)v3, &v68, v72, v70, Seconds);
    v65 = *a2;
    v22 = CMTimeGetSeconds(&v65);
    OZChannel::getSamples((OZChannel *)(a1 + 12496), 0.0, 1.0 / (double)v3, &v68, v72, &v67, v22);
    v62 = v20;
    PSPaintPType::getWidthOverStrokeSamples(a1, a2, v68, v20);
    if (a3)
    {
      v23 = *(_QWORD *)(a3 + 16);
      v24 = *(double **)(a3 + 8);
      if ((unint64_t)v24 >= v23)
      {
        v26 = *(double **)a3;
        v27 = ((uint64_t)v24 - *(_QWORD *)a3) >> 3;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
LABEL_81:
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v29 = v23 - (_QWORD)v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v30);
          v26 = *(double **)a3;
          v24 = *(double **)(a3 + 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[8 * v27];
        v33 = &v31[8 * v30];
        *(_QWORD *)v32 = 0;
        v25 = v32 + 8;
        while (v24 != v26)
        {
          v34 = *((_QWORD *)v24-- - 1);
          *((_QWORD *)v32 - 1) = v34;
          v32 -= 8;
        }
        *(_QWORD *)a3 = v32;
        *(_QWORD *)(a3 + 8) = v25;
        *(_QWORD *)(a3 + 16) = v33;
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v24 = 0.0;
        v25 = v24 + 1;
      }
      *(_QWORD *)(a3 + 8) = v25;
    }
    v61 = v18;
    if ((_DWORD)v3)
    {
      v35 = 0;
      v64 = 1;
      v36 = 0.0;
      v37 = v62;
      do
      {
        v38 = v19[v35];
        if (v38 <= -0.0000001 || v38 >= 0.0000001)
        {
          v39 = v37[v35];
          if (v39 <= -0.0000001 || v39 >= 0.0000001)
          {
            v40 = v36 + v63 * (1.0 / (v38 * v39));
            __y.var0.var0 = 0;
            modf(v40, (long double *)&__y.var0.var0);
            var0 = __y.var0.var0;
            __y.var0.var0 = 0;
            modf(v36, (long double *)&__y.var0.var0);
            v42 = (int)(*(double *)&var0 - *(double *)&__y.var0.var0);
            __y.var0.var0 = 0;
            modf(v36, (long double *)&__y.var0.var0);
            if (v42 < 1)
            {
              v36 = v40;
            }
            else
            {
              v43 = v40 - v36;
              v44 = *(double *)&__y.var0.var0 - v36;
              v64 += v42;
              v45 = 1;
              do
              {
                if (a3)
                {
                  v46 = ((v44 + (double)v45) / v43 + (double)v35) / ReparametrizedContourLength;
                  if (v46 <= 1.0)
                    v47 = ((v44 + (double)v45) / v43 + (double)v35) / ReparametrizedContourLength;
                  else
                    v47 = 1.0;
                  if (v46 >= 0.0)
                    v48 = v47;
                  else
                    v48 = 0.0;
                  v50 = *(double **)(a3 + 8);
                  v49 = *(_QWORD *)(a3 + 16);
                  if ((unint64_t)v50 >= v49)
                  {
                    v52 = *(double **)a3;
                    v53 = ((uint64_t)v50 - *(_QWORD *)a3) >> 3;
                    v54 = v53 + 1;
                    if ((unint64_t)(v53 + 1) >> 61)
                      goto LABEL_81;
                    v55 = v49 - (_QWORD)v52;
                    if (v55 >> 2 > v54)
                      v54 = v55 >> 2;
                    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                      v56 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v56 = v54;
                    if (v56)
                    {
                      v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v56);
                      v52 = *(double **)a3;
                      v50 = *(double **)(a3 + 8);
                    }
                    else
                    {
                      v57 = 0;
                    }
                    v58 = (double *)&v57[8 * v53];
                    *v58 = v48;
                    v51 = v58 + 1;
                    while (v50 != v52)
                    {
                      v59 = *((_QWORD *)v50-- - 1);
                      *((_QWORD *)v58-- - 1) = v59;
                    }
                    *(_QWORD *)a3 = v58;
                    *(_QWORD *)(a3 + 8) = v51;
                    *(_QWORD *)(a3 + 16) = &v57[8 * v56];
                    if (v52)
                      operator delete(v52);
                  }
                  else
                  {
                    *v50 = v48;
                    v51 = v50 + 1;
                  }
                  *(_QWORD *)(a3 + 8) = v51;
                }
              }
              while (v45++ != v42);
              v36 = v40;
              v37 = v62;
            }
          }
        }
        ++v35;
      }
      while (v35 != v3);
    }
    else
    {
      v64 = 1;
      v37 = v62;
    }
    MEMORY[0x1B5E2914C](v61, 0x1000C8000313F17);
    MEMORY[0x1B5E2914C](v19, 0x1000C8000313F17);
    MEMORY[0x1B5E2914C](v37, 0x1000C8000313F17);
    v17 = v64;
  }
  if (v17 >= 100000)
    return 100000;
  else
    return v17;
}

uint64_t PSPaintPType::getIsSpacingEven(PSPaintPType *this, const CMTime *a2)
{
  OZChannel *v4;
  double KeyframeMinValue;
  double KeyframeMaxValue;
  double v7;
  double v8;

  v4 = (OZChannel *)((char *)this + 12336);
  KeyframeMinValue = OZChannel::getKeyframeMinValue((OZChannel *)((char *)this + 12336), 1);
  KeyframeMaxValue = OZChannel::getKeyframeMaxValue(v4, 1);
  v7 = OZChannel::getKeyframeMinValue((OZChannel *)((char *)this + 12496), 1);
  v8 = OZChannel::getKeyframeMaxValue((OZChannel *)((char *)this + 12496), 1);
  if (vabdd_f64(KeyframeMinValue, KeyframeMaxValue) >= 0.0000001
    || vabdd_f64(v7, v8) >= 0.0000001
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)v4, (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((PSPaintPType *)((char *)this + 12496), (const OZChannelBase *)1) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return PSPaintPType::getIsWidthSequenced(this, a2, 1) ^ 1;
  }
}

uint64_t PSPaintPType::getWidthOverStrokeSamples(uint64_t this, CMTime *a2, unsigned int a3, double *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *i;
  _QWORD *v11;
  unint64_t v12;
  CGColorSpace **v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  __int128 v18;
  CMTimeEpoch epoch;
  __int128 v20;

  if (a3)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 16432) + 616))(*(_QWORD *)(this + 16432));
    v8 = v7 + 1200;
    v9 = *(_QWORD *)(v7 + 1208);
    for (i = (double *)operator new[](); v8 != v9; v8 = *(_QWORD *)v8)
    {
      v11 = *(_QWORD **)(*(_QWORD *)v8 + 16);
      v12 = v11[1];
      v20 = xmmword_1B3565070;
      if (OZFactory::isKindOfClass(v12, (int32x4_t *)&v20))
      {
        v18 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        if ((*((unsigned int (**)(CGColorSpace **, __int128 *, _QWORD, uint64_t, uint64_t))*v13 + 37))(v13, &v18, 0, 1, 1))
        {
          PSPaintSequenceBehavior::getWidthSamples(v13, a2, a3, i);
          v14 = a3;
          v15 = a4;
          v16 = i;
          do
          {
            v17 = *v16++;
            *v15 = v17 * *v15;
            ++v15;
            --v14;
          }
          while (v14);
        }
      }
    }
    return MEMORY[0x1B5E2914C](i, 0x1000C8000313F17);
  }
  return this;
}

uint64_t PSPaintPType::simIsFlushingSuppressed(PSPaintPType *this)
{
  uint64_t result;
  uint64_t v2;

  result = *((_QWORD *)this + 2054);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 616))(result);
    if (result)
    {
      v2 = result;
      return !OZChannel::getValueAsInt((OZChannel *)(result + 33256), MEMORY[0x1E0CA2E68], 0.0)
          && OZMoShape::getFreehandPaintVertices((OZMoShape *)(v2 + 18976)) != 0;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'PSPaintPType::simIsFlushingSuppressed(PSPaintPType *this)
{
  return PSPaintPType::simIsFlushingSuppressed((PSPaintPType *)((char *)this - 1112));
}

PSEmitter *PSPaintPType::simFlushedCache(PSPaintPType *this, OZSystemSimulator *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (char *)this + 18072;
  if ((PSPaintPType *)((char *)this + 15800) == a2)
  {
    v11 = *((_QWORD *)this + 2260);
    if (v11)
    {
      v12 = v11 - 16;
      v13 = *(_QWORD *)(v11 - 8);
      if (v13)
      {
        v14 = 232 * v13;
        v15 = v11 - 232;
        do
        {
          PSParticle::~PSParticle((CGColorSpace **)(v15 + v14));
          v14 -= 232;
        }
        while (v14);
      }
      MEMORY[0x1B5E2914C](v12, 0x10A1C80AE952B93);
    }
    *((_QWORD *)this + 2260) = 0;
    v10 = v4 + 16;
  }
  else
  {
    v5 = *((_QWORD *)this + 2258);
    if (v5)
    {
      v6 = v5 - 16;
      v7 = *(_QWORD *)(v5 - 8);
      if (v7)
      {
        v8 = 232 * v7;
        v9 = v5 - 232;
        do
        {
          PSParticle::~PSParticle((CGColorSpace **)(v9 + v8));
          v8 -= 232;
        }
        while (v8);
      }
      MEMORY[0x1B5E2914C](v6, 0x10A1C80AE952B93);
    }
    *((_QWORD *)this + 2258) = 0;
    v10 = v4;
  }
  *v10 = 0;
  v4[20] = 0;
  *((_QWORD *)this + 2262) = 0xBFF0000000000000;
  *((_QWORD *)this + 2264) = 0;
  *((_DWORD *)v4 + 12) = 0;
  return PSReplicatorPType::simFlushedCache((PSEmitter **)this, a2);
}

PSEmitter *`non-virtual thunk to'PSPaintPType::simFlushedCache(PSPaintPType *this, OZSystemSimulator *a2)
{
  return PSPaintPType::simFlushedCache((PSPaintPType *)((char *)this - 1112), a2);
}

uint64_t PSPaintPType::performDragOperation(PSPaintPType *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const CMTime *a8)
{
  uint64_t v10;

  v10 = PSParticleType::performDragOperation(this, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v10 && (OZChannelBase *)((char *)this + 16984) == a3)
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17112), 2, 0);
  return v10;
}

uint64_t `non-virtual thunk to'PSPaintPType::performDragOperation(PSPaintPType *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const CMTime *a8)
{
  return PSPaintPType::performDragOperation((PSPaintPType *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t PSPaintPType::parseEnd(PSPaintPType *this, PCSerializerReadStream *a2)
{
  OZChannelBase *v4;
  OZChannelBase *v5;

  v4 = (OZChannelBase *)(*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 640))(this);
  OZChannelBase::resetFlag(v4, 1, 1);
  v5 = (OZChannelBase *)(*(uint64_t (**)(PSPaintPType *))(*(_QWORD *)this + 640))(this);
  OZChannelBase::resetFlag(v5, 0x10000000, 1);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 11192), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 11192), 0);
  return PSParticleType::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'PSPaintPType::parseEnd(PSPaintPType *this, PCSerializerReadStream *a2)
{
  return PSPaintPType::parseEnd((PSPaintPType *)((char *)this - 48), a2);
}

CGColorSpace **PSPaintPType::getRadialParticleMatrix(_QWORD **a1, __int128 *a2, uint64_t a3, double *a4, double *a5, uint64_t a6, int a7)
{
  uint64_t v13;
  double v19;
  float64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  CMTime v45;
  double v46;
  CGColorSpace *v47;
  float64x2_t v48;
  double v49;
  double v50;
  double v51;
  float64x2_t v52;
  uint64_t v53;
  _QWORD v54[3];
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  int v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  CMTime v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v55 = *a2;
  v56 = *((_QWORD *)a2 + 2);
  memset(v54, 0, sizeof(v54));
  v13 = a3 + 8;
  v45 = *(CMTime *)a2;
  v62 = *(CMTime *)(a3 + 8);
  PC_CMTimeSaferSubtract(&v45, &v62, (uint64_t)v54);
  __asm { FMOV            V0.2D, #1.0 }
  v52 = _Q0;
  v53 = 0x3FF0000000000000;
  ((void (*)(_QWORD **, _QWORD *, uint64_t, uint64_t, float64x2_t *))(*a1)[201])(a1, v54, a3 + 32, v13, &v52);
  PSSequencedValues::PSSequencedValues((PSSequencedValues *)&v45);
  ((void (*)(_QWORD **, __int128 *, uint64_t, CMTime *))(*a1)[202])(a1, &v55, a3, &v45);
  v52 = vmulq_f64(vmulq_f64(*(float64x2_t *)(a3 + 56), v52), v48);
  v19 = (*(double (**)(_QWORD *))(*a1[2054] + 352))(a1[2054]);
  v20 = v52.f64[1];
  v21 = v52.f64[0] / v19;
  v52.f64[0] = v52.f64[0] / v19;
  v23 = a4[22];
  v22 = a4[23];
  v24 = a4[24];
  v25 = v50;
  v26 = v51;
  *(_QWORD *)(a6 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a6 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a6 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a6 = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  v27 = v49;
  v28 = *(double *)&v45.timescale * *(double *)&v45.timescale
      + *(double *)&v45.epoch * *(double *)&v45.epoch
      + v46 * v46;
  v29 = a4[4];
  if (v28 <= -0.0000001 || v28 >= 0.0000001)
  {
    v30 = a4[5];
    v31 = a4[6];
  }
  else
  {
    v30 = a4[5];
    v31 = a4[6];
    v32 = v29 * v29 + v30 * v30 + v31 * v31;
    if (v32 > -0.0000001 && v32 < 0.0000001)
    {
      *(double *)a6 = v21;
      *(float64_t *)(a6 + 40) = v20;
      goto LABEL_10;
    }
  }
  v40 = v19;
  v33 = a4[3];
  v41 = *(double *)&v45.value * v33 - (*(double *)&v45.timescale * v29 + *(double *)&v45.epoch * v30 + v46 * v31);
  v42 = *(double *)&v45.timescale * v33 + *(double *)&v45.value * v29 + *(double *)&v45.epoch * v31 - v30 * v46;
  v43 = v33 * *(double *)&v45.epoch + *(double *)&v45.value * v30 + v29 * v46 - *(double *)&v45.timescale * v31;
  v44 = *(double *)&v45.timescale * v30 - v29 * *(double *)&v45.epoch + v33 * v46 + *(double *)&v45.value * v31;
  if ((a7 & 1) == 0)
  {
    v70 = 0x3FF0000000000000;
    v67 = 0x3FF0000000000000;
    v64 = 0x3FF0000000000000;
    v62.value = 0x3FF0000000000000;
    *(_OWORD *)&v62.timescale = 0u;
    v63 = 0u;
    v65 = 0u;
    v66 = 0u;
    v68 = 0u;
    v69 = 0u;
    PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v62, &v41);
    memset(v57, 0, sizeof(v57));
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v58 = 4;
    PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v62.value, (uint64_t)v57);
    v34 = __sincos_stret(*(double *)&v60 * 0.5);
    v35 = v34.__sinval * 0.0 * 0.0;
    v36 = v34.__sinval * 0.0 + v34.__cosval * 0.0;
    v43 = v36 + v35 - v34.__sinval * 0.0;
    v44 = v34.__sinval + v34.__cosval * 0.0 + v35 - v35;
    v41 = v34.__cosval - (v34.__sinval * 0.0 + v35 + v35);
    v42 = v36 + v34.__sinval * 0.0 - v35;
  }
  PCMatrix44Tmpl<double>::rightRotate(a6, &v41);
  PCMatrix44Tmpl<double>::rightScale((double *)a6, v52.f64[0], v52.f64[1], 1.0);
  v19 = v40;
LABEL_10:
  if (v19 != 1.0)
  {
    *(double *)(a6 + 32) = v19 * *(double *)(a6 + 32);
    *(double *)(a6 + 64) = v19 * *(double *)(a6 + 64);
    *(float64x2_t *)(a6 + 8) = vdivq_f64(*(float64x2_t *)(a6 + 8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19, 0));
  }
  if (a7)
    v37 = v24 + v26;
  else
    v37 = 0.0;
  PCMatrix44Tmpl<double>::leftMult(a6, a5);
  v38.f64[0] = v23 + v27;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a6, v38, v22 + v25, v37);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v47);
}

void sub_1B2FE8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PSPaintPType::preRenderFrame(PSPaintPType *this, FxColorDescription *a2, PSHeliumNode *a3)
{
  CGColorSpace *WorkingColorSpace;
  CGColorSpace *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  PCSharedCount v12;
  PCSharedCount v13;
  CMTime pcColorDesc;

  *((_WORD *)this + 9062) = 0;
  PSParticleType::preRenderFrame((uint64_t)this);
  if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)a2) + 8))
  {
    if (LiRenderingTechnology::getEnableMetalRendering((LiRenderingTechnology *)((char *)&a2[41]._pcColorDesc._colorSpaceRef._obj
                                                                                              + 4)))
    {
      WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a2);
      PSPaintPType::getAvailableMetalBrushGradient(this, WorkingColorSpace, &v12);
      if (!v12.var0)
        throw_PCNullPointerException(1);
      v10 = *(_OWORD *)&a2->_pcColorDesc._colorSpaceRef._obj;
      v11 = *(_QWORD *)&a2->_pcColorDesc._toneMapMethod._gain;
      (*(void (**)(PC_Sp_counted_base *, __int128 *))(*(_QWORD *)v12.var0 + 24))(v12.var0, &v10);
      PSHeliumNode::setMetalGradient((uint64_t)a3, &v12);
    }
    else
    {
      v7 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a2);
      PSPaintPType::getAvailableBrushGradient(this, v7, &v12);
      if (!v12.var0)
        throw_PCNullPointerException(1);
      v8 = *(_OWORD *)&a2->_pcColorDesc._colorSpaceRef._obj;
      v9 = *(_QWORD *)&a2->_pcColorDesc._toneMapMethod._gain;
      (*(void (**)(PC_Sp_counted_base *, __int128 *))(*(_QWORD *)v12.var0 + 56))(v12.var0, &v8);
      PSHeliumNode::setGradient((uint64_t)a3, &v12);
    }
    PCSharedCount::~PCSharedCount(&v13);
  }
  else
  {
    pcColorDesc = (CMTime)a2->_pcColorDesc;
    PSHeliumNode::initGradient(a3, (uint64_t **)this + 2123, &pcColorDesc);
  }
}

void sub_1B2FE8BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

PCMutex *PSPaintPType::getAvailableMetalBrushGradient@<X0>(PSPaintPType *this@<X0>, CGColorSpace *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t *v6;
  PCSharedCount *v7;
  PCSharedCount *v8;
  PCSharedCount *v9;
  uint64_t v10;
  PCMutex *result;
  PCSharedCount v12;
  PCSharedCount v13;
  PCMutex *v14;
  char v15;
  PCSharedCount v16;

  a3->var0 = 0;
  v6 = (uint64_t *)&a3[1];
  PCSharedCount::PCSharedCount(a3 + 1);
  v14 = (PCMutex *)((char *)this + 17968);
  PCMutex::lock((PCMutex *)((char *)this + 17968));
  v15 = 1;
  v7 = (PCSharedCount *)*((_QWORD *)this + 2255);
  v8 = (PCSharedCount *)*((_QWORD *)this + 2256);
  while (v7 != v8)
  {
    if (PCSharedCount::unique(v7 + 1))
    {
      a3->var0 = v7->var0;
      PCSharedCount::PCSharedCount(&v12, v7 + 1);
      PCSharedCount::operator=(v6, (uint64_t *)&v12);
      PCSharedCount::~PCSharedCount(&v12);
      goto LABEL_11;
    }
    v7 += 2;
  }
  PSPaintPType::createMetalBrushGradient(this, a2, &v12);
  a3->var0 = v12.var0;
  PCSharedCount::PCSharedCount(&v16, &v13);
  PCSharedCount::operator=(v6, (uint64_t *)&v16);
  PCSharedCount::~PCSharedCount(&v16);
  PCSharedCount::~PCSharedCount(&v13);
  v9 = (PCSharedCount *)*((_QWORD *)this + 2256);
  if ((unint64_t)v9 - *((_QWORD *)this + 2255) <= 0x2F)
  {
    if ((unint64_t)v9 >= *((_QWORD *)this + 2257))
    {
      v10 = std::vector<PCPtr<OZMetalGradientRadial>>::__push_back_slow_path<PCPtr<OZMetalGradientRadial> const&>((uint64_t *)this + 2255, a3);
    }
    else
    {
      v9->var0 = a3->var0;
      PCSharedCount::PCSharedCount(v9 + 1, (const PCSharedCount *)v6);
      v10 = (uint64_t)&v9[2];
      *((_QWORD *)this + 2256) = v9 + 2;
    }
    *((_QWORD *)this + 2256) = v10;
  }
LABEL_11:
  result = v14;
  if (v14)
  {
    if (v15)
      return (PCMutex *)PCMutex::unlock(v14);
  }
  return result;
}

void sub_1B2FE8D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, PCSharedCount a14)
{
  PCSharedCount *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 18048) = v16;
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a12);
  PCSharedCount::~PCSharedCount(v14);
  _Unwind_Resume(a1);
}

PCMutex *PSPaintPType::getAvailableBrushGradient@<X0>(PSPaintPType *this@<X0>, CGColorSpace *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t *v6;
  PCSharedCount *v7;
  PCSharedCount *v8;
  PCSharedCount *v9;
  uint64_t v10;
  PCMutex *result;
  PCSharedCount v12;
  PCSharedCount v13;
  PCMutex *v14;
  char v15;
  PCSharedCount v16;

  a3->var0 = 0;
  v6 = (uint64_t *)&a3[1];
  PCSharedCount::PCSharedCount(a3 + 1);
  v14 = (PCMutex *)((char *)this + 17968);
  PCMutex::lock((PCMutex *)((char *)this + 17968));
  v15 = 1;
  v7 = (PCSharedCount *)*((_QWORD *)this + 2243);
  v8 = (PCSharedCount *)*((_QWORD *)this + 2244);
  while (v7 != v8)
  {
    if (PCSharedCount::unique(v7 + 1))
    {
      a3->var0 = v7->var0;
      PCSharedCount::PCSharedCount(&v12, v7 + 1);
      PCSharedCount::operator=(v6, (uint64_t *)&v12);
      PCSharedCount::~PCSharedCount(&v12);
      goto LABEL_11;
    }
    v7 += 2;
  }
  PSPaintPType::createBrushGradient(this, a2, &v12);
  a3->var0 = v12.var0;
  PCSharedCount::PCSharedCount(&v16, &v13);
  PCSharedCount::operator=(v6, (uint64_t *)&v16);
  PCSharedCount::~PCSharedCount(&v16);
  PCSharedCount::~PCSharedCount(&v13);
  v9 = (PCSharedCount *)*((_QWORD *)this + 2244);
  if ((unint64_t)v9 - *((_QWORD *)this + 2243) <= 0x2F)
  {
    if ((unint64_t)v9 >= *((_QWORD *)this + 2245))
    {
      v10 = std::vector<PCPtr<OZGLGradientRadial>>::__push_back_slow_path<PCPtr<OZGLGradientRadial> const&>((uint64_t *)this + 2243, a3);
    }
    else
    {
      v9->var0 = a3->var0;
      PCSharedCount::PCSharedCount(v9 + 1, (const PCSharedCount *)v6);
      v10 = (uint64_t)&v9[2];
      *((_QWORD *)this + 2244) = v9 + 2;
    }
    *((_QWORD *)this + 2244) = v10;
  }
LABEL_11:
  result = v14;
  if (v14)
  {
    if (v15)
      return (PCMutex *)PCMutex::unlock(v14);
  }
  return result;
}

void sub_1B2FE8F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, PCSharedCount a14)
{
  PCSharedCount *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 17952) = v16;
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a12);
  PCSharedCount::~PCSharedCount(v14);
  _Unwind_Resume(a1);
}

uint64_t PSPaintPType::getIsWidthSequenced(PSPaintPType *this, const CMTime *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  PSPaintSequenceBehavior *v10;
  __int128 v12;
  CMTimeEpoch epoch;
  __int128 v14;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2054) + 616))(*((_QWORD *)this + 2054));
  v6 = v5 + 1200;
  v7 = *(_QWORD *)(v5 + 1208);
  if (v5 + 1200 == v7)
    return 0;
  while (1)
  {
    v8 = *(_QWORD **)(*(_QWORD *)v6 + 16);
    v9 = v8[1];
    v14 = xmmword_1B3565070;
    if (OZFactory::isKindOfClass(v9, (int32x4_t *)&v14))
    {
      v12 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      if (((*(unsigned int (**)(PSPaintSequenceBehavior *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 296))(v10, &v12, 0, 1, 1) | a3 ^ 1) == 1&& PSPaintSequenceBehavior::isAffectingWidth(v10))
      {
        break;
      }
    }
    v6 = *(_QWORD *)v6;
    if (v6 == v7)
      return 0;
  }
  return 1;
}

CGColorSpace **PSPaintPType::createBrushGradient@<X0>(PSPaintPType *this@<X0>, CGColorSpace *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZGLGradientRadial *v6;
  PC_Sp_counted_base *var0;
  PCColor *v8;
  PC_Sp_counted_base *v9;
  int *v10;
  CGColorSpace *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGColorSpace *v16[2];

  v6 = (OZGLGradientRadial *)operator new();
  OZGLGradientRadial::OZGLGradientRadial(v6, (PSPaintPType *)((char *)this + 16984), (CGColorSpace *)0x100, a2, 0);
  a3->var0 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(a3 + 1, (OZGLGradientRadial *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  var0 = a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)var0 + 416) = 0;
  OZGLGradientRadial::setTransparentBeyondEdge((OZChannelBase ***)var0);
  v9 = a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *(_OWORD *)((char *)v9 + 24) = xmmword_1B304EFF0;
  *(_WORD *)((char *)v9 + 417) = 257;
  v10 = PCColor::CLEAR(v8);
  v14 = *((_OWORD *)v10 + 1);
  v15 = *((_OWORD *)v10 + 2);
  v13 = *(_OWORD *)v10;
  v11 = (CGColorSpace *)*((_QWORD *)v10 + 6);
  v16[0] = v11;
  if (v11)
    PCCFRefTraits<CGColorSpace *>::retain(v11);
  *(_OWORD *)((char *)v9 + 424) = v13;
  *(_OWORD *)((char *)v9 + 440) = v14;
  *(_OWORD *)((char *)v9 + 456) = v15;
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)v9 + 59, v16);
  *((_BYTE *)v9 + 419) = 1;
  return PCCFRef<CGColorSpace *>::~PCCFRef(v16);
}

void sub_1B2FE91C8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  CGColorSpace **v2;
  CGColorSpace **v3;

  v3 = v2;
  PCCFRef<CGColorSpace *>::~PCCFRef(v3);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **PSPaintPType::createMetalBrushGradient@<X0>(PSPaintPType *this@<X0>, CGColorSpace *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZMetalGradientRadial *v6;
  PCColor *v7;
  PC_Sp_counted_base *var0;
  int *v9;
  CGColorSpace *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGColorSpace *v15[2];

  v6 = (OZMetalGradientRadial *)operator new();
  OZMetalGradientRadial::OZMetalGradientRadial(v6, (PSPaintPType *)((char *)this + 16984), (CGColorSpace *)0x100, a2);
  a3->var0 = (PC_Sp_counted_base *)v6;
  v7 = (PCColor *)PCSharedCount::PCSharedCount(a3 + 1, (OZMetalGradientRadial *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  var0 = a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *((_OWORD *)var0 + 1) = xmmword_1B304EFF0;
  *((_BYTE *)var0 + 236) = 1;
  v9 = PCColor::CLEAR(v7);
  v13 = *((_OWORD *)v9 + 1);
  v14 = *((_OWORD *)v9 + 2);
  v12 = *(_OWORD *)v9;
  v10 = (CGColorSpace *)*((_QWORD *)v9 + 6);
  v15[0] = v10;
  if (v10)
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  *((_OWORD *)var0 + 15) = v12;
  *((_OWORD *)var0 + 16) = v13;
  *((_OWORD *)var0 + 17) = v14;
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)var0 + 36, v15);
  *((_BYTE *)var0 + 237) = 1;
  return PCCFRef<CGColorSpace *>::~PCCFRef(v15);
}

void sub_1B2FE9310(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  CGColorSpace **v2;
  CGColorSpace **v3;

  v3 = v2;
  PCCFRef<CGColorSpace *>::~PCCFRef(v3);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void PSOwnedObjectWrapper::~PSOwnedObjectWrapper(PSOwnedObjectWrapper *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = &off_1E65EB048;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 24));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = &off_1E65EB048;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 24));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PSOwnedObjectWrapper::~PSOwnedObjectWrapper(PSOwnedObjectWrapper *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = &off_1E65EB048;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 24));
}

{
  PSOwnedObjectWrapper::~PSOwnedObjectWrapper((PSOwnedObjectWrapper *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void PSOwnedObjectWrapper::~PSOwnedObjectWrapper(PSOwnedObjectWrapper *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = v4 - 16;
    v6 = *(_QWORD *)(v4 - 8);
    if (v6)
    {
      v7 = 232 * v6;
      v8 = v4 - 232;
      do
      {
        PSParticle::~PSParticle((CGColorSpace **)(v8 + v7));
        v7 -= 232;
      }
      while (v7);
    }
    MEMORY[0x1B5E2914C](v5, 0x10A1C80AE952B93);
  }
  *((_QWORD *)this + 1) = 0;
}

uint64_t std::vector<PCPtr<OZGLGradientRadial>>::__push_back_slow_path<PCPtr<OZGLGradientRadial> const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  PCSharedCount *v11;
  uint64_t v12;
  _QWORD v14[2];
  PCSharedCount *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  else
    v10 = 0;
  v11 = (PCSharedCount *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[16 * v9];
  v11->var0 = a2->var0;
  PCSharedCount::PCSharedCount(v11 + 1, a2 + 1);
  v15 += 2;
  std::vector<PCPtr<OZGLGradientRadial>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2FE95A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<OZGLGradientRadial>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<OZGLGradientRadial>>,std::reverse_iterator<PCPtr<OZGLGradientRadial>*>,std::reverse_iterator<PCPtr<OZGLGradientRadial>*>,std::reverse_iterator<PCPtr<OZGLGradientRadial>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<OZGLGradientRadial>>,std::reverse_iterator<PCPtr<OZGLGradientRadial>*>,std::reverse_iterator<PCPtr<OZGLGradientRadial>*>,std::reverse_iterator<PCPtr<OZGLGradientRadial>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  PCSharedCount *v13;

  for (i = 24; ; i -= 16)
  {
    v12 = a3 + i;
    if (a3 + i - 24 == a5)
      break;
    *(_QWORD *)(a7 + i - 40) = *(_QWORD *)(v12 - 40);
    v13 = (PCSharedCount *)(a7 + i - 32);
    PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(v12 - 32));
  }
  return a6;
}

uint64_t std::vector<PCPtr<OZMetalGradientRadial>>::__push_back_slow_path<PCPtr<OZMetalGradientRadial> const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  PCSharedCount *v11;
  uint64_t v12;
  _QWORD v14[2];
  PCSharedCount *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  else
    v10 = 0;
  v11 = (PCSharedCount *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[16 * v9];
  v11->var0 = a2->var0;
  PCSharedCount::PCSharedCount(v11 + 1, a2 + 1);
  v15 += 2;
  std::vector<PCPtr<OZMetalGradientRadial>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2FE97A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<OZMetalGradientRadial>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<OZMetalGradientRadial>>,std::reverse_iterator<PCPtr<OZMetalGradientRadial>*>,std::reverse_iterator<PCPtr<OZMetalGradientRadial>*>,std::reverse_iterator<PCPtr<OZMetalGradientRadial>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<OZMetalGradientRadial>>,std::reverse_iterator<PCPtr<OZMetalGradientRadial>*>,std::reverse_iterator<PCPtr<OZMetalGradientRadial>*>,std::reverse_iterator<PCPtr<OZMetalGradientRadial>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  PCSharedCount *v13;

  for (i = 24; ; i -= 16)
  {
    v12 = a3 + i;
    if (a3 + i - 24 == a5)
      break;
    *(_QWORD *)(a7 + i - 40) = *(_QWORD *)(v12 - 40);
    v13 = (PCSharedCount *)(a7 + i - 32);
    PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(v12 - 32));
  }
  return a6;
}

void PSPenPropertyCurveNode::~PSPenPropertyCurveNode(PSPenPropertyCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

void PSPenPropertyCurveNode::solveNode(OZBehavior **this, const CMTime *a2, double a3, double a4)
{
  PSPenPropertyBehavior *v8;
  double Seconds;
  CMTime v10;
  CMTime v11;
  __n128 v12;
  uint64_t v13;

  v12 = 0uLL;
  v13 = 0;
  OZBehavior::getFrameDuration(this[4], &v12);
  memset(&v11, 0, sizeof(v11));
  PC_CMTimeMakeWithSecondsRoundToNearest(v12.n128_i32[2], &v11, a3);
  v8 = this[4];
  v10 = *a2;
  Seconds = CMTimeGetSeconds(&v10);
  PSPenPropertyBehavior::solveNode(v8, &v11, Seconds, a4);
}

double PSPenPropertyBehavior::solveNode(PSPenPropertyBehavior *this, const CMTime *a2, double a3, double a4)
{
  double v7;
  _BOOL8 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  OZChannel *v16;
  double v17;
  CMTime v19;
  CMTime v20;

  if (*((_QWORD *)this + 267))
  {
    memset(&v20, 0, sizeof(v20));
    (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v20);
    v19 = v20;
    if (!(*(unsigned int (**)(PSPenPropertyBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v19, 0, 1, 1))return a4;
    v7 = 0.0;
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1960), &v20, 0.0) != 0;
    v9 = (*(double (**)(PSPenPropertyBehavior *, _BOOL8, double))(*(_QWORD *)this + 680))(this, v8, a3);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1200), &v20, 0.0);
    v11 = v10;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1352), &v20, 0.0);
    if (v9 >= v11)
    {
      if (v12 <= v11)
        v12 = v11 + 0.01;
      v13 = (v9 - v11) / (v12 - v11);
      v14 = *((_DWORD *)this + 529);
      switch(v14)
      {
        case 2:
          v16 = (OZChannel *)((char *)this + 1808);
          break;
        case 1:
          v16 = (OZChannel *)((char *)this + 1656);
          break;
        case 0:
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), &v20, 0.0);
          return v13 * (v15 * a4);
        default:
          return v7;
      }
      OZChannel::getValueAsDouble(v16, &v20, 0.0);
      return v13 * v17 + a4;
    }
    return v7;
  }
  return a4;
}

void PSPenPropertyCurveNode::solveNode(OZBehavior **this, OZCurveNodeParam *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  PSPenPropertyBehavior *v7;
  double Seconds;
  CMTime v9;
  CMTime v10;
  __n128 v11;
  uint64_t v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  v4 = *((_QWORD *)a2 + 19);
  v5 = *((_QWORD *)a2 + 10);
  v14 = *(CMTime *)((_BYTE *)a2 + 5);
  v13 = *(CMTime *)((_BYTE *)a2 + 4);
  v11 = 0uLL;
  v12 = 0;
  OZBehavior::getFrameDuration(this[4], &v11);
  memset(&v10, 0, sizeof(v10));
  PC_CMTimeMakeWithSecondsRoundToNearest(v11.n128_i32[2], &v10, *((double *)a2 + 1));
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = this[4];
      v9 = v13;
      Seconds = CMTimeGetSeconds(&v9);
      *(double *)(v4 + 8 * v6) = PSPenPropertyBehavior::solveNode(v7, &v10, Seconds, *(double *)(v5 + 8 * v6));
      v16 = v13;
      v15 = v14;
      PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)&v13);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

__n128 PSPenPropertyCurveNode::getNeededRange(PSPenPropertyCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

OZBehaviorCurveNode *PSPenPropertyCurveNode::cloneNode(PSPenPropertyCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E65E6940;
  return v2;
}

void sub_1B2FE9C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t PSPenPropertyCurveNode::compare(PSPenPropertyCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

void PSPenPropertyBehavior::PSPenPropertyBehavior(PSPenPropertyBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65E6A38;
  v5[2] = &unk_1E65E6CF8;
  v5[6] = &unk_1E65E6F50;
  v5[42] = &unk_1E65E6FA8;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Apply To Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Property Behavior Apply To"));
  OZChannelEnum::OZChannelEnum((PSPenPropertyBehavior *)((char *)this + 536), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Calc Tilt Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Property Behavior Calc Tilt"));
  OZChannelEnum::OZChannelEnum((PSPenPropertyBehavior *)((char *)this + 792), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 2, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Tilt Axis"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1048), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 2, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Pen Min Input"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1200), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Pen Max Input"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1352), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Scale Multiply"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1504), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Scale Offset"));
  OZChannelDouble::OZChannelDouble((PSPenPropertyBehavior *)((char *)this + 1656), 10.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Scale Angle"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 1808), 0.785398163, &v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Pen Property Behavior Invert"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1960), &v7, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v7);
  *((_BYTE *)this + 2112) = 0;
  *((_DWORD *)this + 529) = 0;
  *((_BYTE *)this + 2120) = 0;
  *((_QWORD *)this + 267) = 0;
  OZChannel::setMax((OZChannel *)((char *)this + 1504), 3.40282347e38);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1504), 4.0);
}

void sub_1B2FEA09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, PCString a11, PCString a12)
{
  OZChannelBehavior *v12;
  OZChannelEnum *v13;
  OZChannel *v14;
  OZChannelPercent *v15;
  OZChannelPercent *v16;
  OZChannelPercent *v17;
  OZChannel *v18;
  OZChannel *v19;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannelPercent::~OZChannelPercent(v17);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannel::~OZChannel(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBehavior::~OZChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void PSPenPropertyBehavior::PSPenPropertyBehavior(PSPenPropertyBehavior *this, const PSPenPropertyBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65E6A38;
  *(_QWORD *)(v5 + 16) = &unk_1E65E6CF8;
  *(_QWORD *)(v5 + 48) = &unk_1E65E6F50;
  *(_QWORD *)(v5 + 336) = &unk_1E65E6FA8;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 536), (const PSPenPropertyBehavior *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((PSPenPropertyBehavior *)((char *)this + 792), (const PSPenPropertyBehavior *)((char *)a2 + 792), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1048), (const OZChannelBase *)((char *)a2 + 1048), v6);
  *((_QWORD *)this + 131) = &off_1E6551728;
  *((_QWORD *)this + 133) = &unk_1E6551A88;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1200), (const OZChannelBase *)((char *)a2 + 1200), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1352), (const OZChannelBase *)((char *)a2 + 1352), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1504), (const OZChannelBase *)((char *)a2 + 1504), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1656), (const OZChannelBase *)((char *)a2 + 1656), v6);
  *((_QWORD *)this + 207) = &off_1E6551358;
  *((_QWORD *)this + 209) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1808), (const OZChannelBase *)((char *)a2 + 1808), v6);
  *((_QWORD *)this + 226) = &off_1E6551728;
  *((_QWORD *)this + 228) = &unk_1E6551A88;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1960), (const OZChannelBase *)((char *)a2 + 1960), v6);
  *((_BYTE *)this + 2112) = 0;
  *((_DWORD *)this + 529) = 0;
  *((_BYTE *)this + 2120) = 0;
  *((_QWORD *)this + 267) = 0;
}

void sub_1B2FEA370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelEnum *a10)
{
  OZChannelBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannelPercent *v13;
  OZChannelPercent *v14;
  OZChannelPercent *v15;
  OZChannel *v16;

  OZChannel::~OZChannel(v11);
  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannel::~OZChannel(v12);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2FEA3E4()
{
  JUMPOUT(0x1B2FEA3BCLL);
}

void sub_1B2FEA3EC()
{
  JUMPOUT(0x1B2FEA3C4);
}

void sub_1B2FEA3F4()
{
  JUMPOUT(0x1B2FEA3CCLL);
}

void sub_1B2FEA3FC()
{
  JUMPOUT(0x1B2FEA3D4);
}

void PSPenPropertyBehavior::~PSPenPropertyBehavior(PSPenPropertyBehavior *this)
{
  *(_QWORD *)this = &off_1E65E6A38;
  *((_QWORD *)this + 2) = &unk_1E65E6CF8;
  *((_QWORD *)this + 6) = &unk_1E65E6F50;
  *((_QWORD *)this + 42) = &unk_1E65E6FA8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1808));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1656));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1504));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1352));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1200));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1048));
  OZChannelEnum::~OZChannelEnum((PSPenPropertyBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((PSPenPropertyBehavior *)((char *)this + 536));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'PSPenPropertyBehavior::~PSPenPropertyBehavior(PSPenPropertyBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPropertyBehavior *)((char *)this - 16));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPropertyBehavior *)((char *)this - 48));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPropertyBehavior *)((char *)this - 336));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPropertyBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPropertyBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPropertyBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSPenPropertyBehavior::operator=(PSPenPropertyBehavior *a1, const void *a2)
{
  void *v4;
  void *v5;
  uint64_t result;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=((uint64_t)a1 + 536, (uint64_t)v4 + 536);
  OZChannelBase::operator=((uint64_t)a1 + 792, (uint64_t)v5 + 792);
  OZChannelBase::operator=((uint64_t)a1 + 1048, (uint64_t)v5 + 1048);
  OZChannelBase::operator=((uint64_t)a1 + 1200, (uint64_t)v5 + 1200);
  OZChannelBase::operator=((uint64_t)a1 + 1352, (uint64_t)v5 + 1352);
  OZChannelBase::operator=((uint64_t)a1 + 1504, (uint64_t)v5 + 1504);
  OZChannelBase::operator=((uint64_t)a1 + 1656, (uint64_t)v5 + 1656);
  OZChannelBase::operator=((uint64_t)a1 + 1808, (uint64_t)v5 + 1808);
  *((_BYTE *)a1 + 2120) = 0;
  result = (*(uint64_t (**)(PSPenPropertyBehavior *))(*(_QWORD *)a1 + 336))(a1);
  if (result)
    return PSPenPropertyBehavior::updateApplyTo(a1);
  *((_BYTE *)a1 + 2112) = 0;
  *((_DWORD *)a1 + 529) = 0;
  return result;
}

uint64_t PSPenPropertyBehavior::updateApplyTo(PSPenPropertyBehavior *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  PCString v8;

  v2 = (*(uint64_t (**)(PSPenPropertyBehavior *))(*(_QWORD *)this + 320))(this);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Pen Property Behavior Undo Applied To"));
  (*(void (**)(char *, PCString *, _QWORD))(*((_QWORD *)this + 2) + 176))((char *)this + 16, &v8, 0);
  PCString::~PCString(&v8);
  (*(void (**)(PSPenPropertyBehavior *))(*(_QWORD *)this + 120))(this);
  v3 = v2 + 1000;
  for (i = *(_QWORD *)(v2 + 1008); i != v3; i = *(_QWORD *)(i + 8))
  {
    if (*(PSPenPropertyBehavior **)(i + 16) == this)
      goto LABEL_6;
  }
  i = v2 + 1000;
LABEL_6:
  v5 = *(_QWORD *)(i + 8);
  if (v5 == v3)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v5 + 16);
  return (*(uint64_t (**)(PSPenPropertyBehavior *, uint64_t, uint64_t))(*(_QWORD *)this + 104))(this, v2, v6);
}

void sub_1B2FEA704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t PSPenPropertyBehavior::canAddToSceneNode(PSPenPropertyBehavior *this, OZSceneNode *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  const void *v7;

  result = OZBehavior::canAddToSceneNode(this, a2);
  if ((_DWORD)result)
    result = a2
  return result;
}

void PSPenPropertyBehavior::addPenPropertyNodes(PSPenPropertyBehavior *this, OZSceneNode *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  OZChannel *v12;
  int v13;
  OZBehaviorCurveNode *v14;

  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      v10 = *((_QWORD *)this + 268);
      v11 = 12496;
      goto LABEL_6;
    case 1u:
      v10 = *((_QWORD *)this + 268);
      v11 = 17784;
      goto LABEL_6;
    case 2u:
      v10 = *((_QWORD *)this + 268);
      v11 = 12336;
LABEL_6:
      v12 = (OZChannel *)(v10 + v11);
      *((_DWORD *)this + 529) = 0;
      goto LABEL_10;
    case 3u:
      v12 = (OZChannel *)(*((_QWORD *)this + 268) + 4048);
      v13 = 2;
      goto LABEL_9;
    case 4u:
      v12 = (OZChannel *)(*((_QWORD *)this + 268) + 14080);
      v13 = 1;
LABEL_9:
      *((_DWORD *)this + 529) = v13;
LABEL_10:
      v14 = (OZBehaviorCurveNode *)operator new();
      OZBehaviorCurveNode::OZBehaviorCurveNode(v14, this, v12);
      *(_QWORD *)v14 = &off_1E65E6940;
      *((_QWORD *)v14 + 4) = this;
      OZChannel::appendCurveProcessingNode(v12, v14);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v14);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v12);
      return;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", v3, v4, v5, v6, v7, v8, v9, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Particles/PSPenPropertyBehavior.cpp");
      pcAbortImpl();
  }
}

void sub_1B2FEA964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void PSPenPropertyBehavior::didAddToNode(PSPenPropertyBehavior *this, OZSceneNode *a2)
{
  _QWORD *v4;
  void *v5;
  PSPaint *v6;
  _QWORD *v7;
  void *v8;
  OZSceneNode *v9;

  OZChannelBehavior::didAddToNode(this, a2);
  if (a2)
  {
    *((_QWORD *)this + 267) = v4;
    if (v4)
    {
      v5 = (void *)v4[4732];
      if (v5)
      *((_QWORD *)this + 268) = PSPaint::getPaintPType((PSPaint *)v5);
      goto LABEL_11;
    }
    v7 = (_QWORD *)((char *)this + 2136);
  }
  else
  {
    v6 = 0;
    v7 = (_QWORD *)((char *)this + 2136);
    *((_QWORD *)this + 267) = 0;
  }
  *((_QWORD *)this + 268) = PSPaint::getPaintPType(v6);
  v8 = (void *)*((_QWORD *)v6 + 145);
  if (v8)
  *v7 = v8;
LABEL_11:
  if (!*((_BYTE *)this + 2112)
    && (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2)
    && !*(_BYTE *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2) + 1576))
  {
    PSPenPropertyBehavior::addPenPropertyNodes(this, v9);
    *((_BYTE *)this + 2112) = 1;
  }
}

void PSPenPropertyBehavior::didAddSceneNodeToScene(PSPenPropertyBehavior *this, OZScene *a2)
{
  void *v3;
  OZSceneNode *v4;

  OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((_QWORD *)this + 267))
  {
    v3 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 268) + 16432) + 1160);
    if (v3)
    *((_QWORD *)this + 267) = v3;
  }
  if (!*((_BYTE *)this + 2112))
  {
    (*(void (**)(PSPenPropertyBehavior *))(*(_QWORD *)this + 320))(this);
    PSPenPropertyBehavior::addPenPropertyNodes(this, v4);
    *((_BYTE *)this + 2112) = 1;
  }
}

void PSPenPropertyBehavior::willRemove(PSPenPropertyBehavior *this)
{
  OZChannelBehavior::willRemove(this);
  *((_BYTE *)this + 2112) = 0;
}

void PSPenPropertyBehavior::sceneNodeDidLoad(PSPenPropertyBehavior *this)
{
  OZSceneNode *v2;

  if (!*((_BYTE *)this + 2112))
  {
    (*(void (**)(PSPenPropertyBehavior *))(*(_QWORD *)this + 320))(this);
    PSPenPropertyBehavior::addPenPropertyNodes(this, v2);
    *((_BYTE *)this + 2112) = 1;
  }
}

BOOL PSPenPropertyBehavior::isRebuildUIChannel(PSPenPropertyBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2;
}

OZChannelBase *PSPenPropertyBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  OZChannelBase *v5;
  OZChannelBase *result;
  int v7;

  v4 = a2;
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == a2)
      break;
    {
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1504), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1656), 0x400000, 1);
      v5 = (OZChannelBase *)(a1 + 1808);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1808), 0x400000, 1);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 1504), 16, 1);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 1656), 16, 1);
      return OZChannelBase::setFlag(v5, 16, 1);
    }
  }
  v5 = (OZChannelBase *)(a1 + 1504);
  OZChannelBase::setFlag((OZChannelBase *)(a1 + 1504), 0x400000, 1);
  OZChannelBase::setFlag((OZChannelBase *)(a1 + 1656), 0x400000, 1);
  OZChannelBase::setFlag((OZChannelBase *)(a1 + 1808), 0x400000, 1);
  OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1504), 16, 1);
  OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1656), 16, 1);
  result = OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1808), 16, 1);
  v7 = *(_DWORD *)(a1 + 2116);
  if (v7 == 2)
  {
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1808), 0x400000, 1);
    v5 = (OZChannelBase *)(a1 + 1808);
  }
  else if (v7 == 1)
  {
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1656), 0x400000, 1);
    v5 = (OZChannelBase *)(a1 + 1656);
  }
  else
  {
    if (v7)
      return result;
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1504), 0x400000, 1);
  }
  return OZChannelBase::setFlag(v5, 16, 1);
}

uint64_t PSPenPropertyBehavior::setIsInteractive(PSPenPropertyBehavior *this, int a2)
{
  uint64_t result;

  *((_BYTE *)this + 2120) = a2;
  if (a2)
    result = OZMoShape::getPaintInteractiveValuesLock((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
  else
    result = 0;
  *((_QWORD *)this + 266) = result;
  return result;
}

void PSPenPressureBehavior::PSPenPressureBehavior(PSPenPressureBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;

  PSPenPropertyBehavior::PSPenPropertyBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65E6FE8;
  *(_QWORD *)(v5 + 16) = &unk_1E65E72A8;
  *(_QWORD *)(v5 + 48) = &unk_1E65E7500;
  *(_QWORD *)(v5 + 336) = &unk_1E65E7558;
  *(_QWORD *)(v5 + 2152) = 0;
  *(_BYTE *)(v5 + 2160) = 1;
  *(_QWORD *)(v5 + 2168) = 0;
  *(_QWORD *)(v5 + 2176) = 0x3FF0000000000000;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Pressure Behavior Min Pressure"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1200), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Pressure Behavior Max Pressure"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1352), &v6, 0);
  PCString::~PCString(&v6);
}

void sub_1B2FEAE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PSPenPropertyBehavior *v10;

  PCString::~PCString(&a10);
  PSPenPropertyBehavior::~PSPenPropertyBehavior(v10);
  _Unwind_Resume(a1);
}

void PSPenPressureBehavior::PSPenPressureBehavior(PSPenPressureBehavior *this, const PSPenPressureBehavior *a2, char a3)
{
  uint64_t v4;

  PSPenPropertyBehavior::PSPenPropertyBehavior(this, a2, a3);
  *(_QWORD *)v4 = &off_1E65E6FE8;
  *(_QWORD *)(v4 + 16) = &unk_1E65E72A8;
  *(_QWORD *)(v4 + 48) = &unk_1E65E7500;
  *(_QWORD *)(v4 + 336) = &unk_1E65E7558;
  *(_QWORD *)(v4 + 2152) = 0;
  *(_BYTE *)(v4 + 2160) = *((_BYTE *)a2 + 2160);
  *(_QWORD *)(v4 + 2168) = *((_QWORD *)a2 + 271);
  *(_QWORD *)(v4 + 2176) = *((_QWORD *)a2 + 272);
}

void `non-virtual thunk to'PSPenPressureBehavior::~PSPenPressureBehavior(PSPenPressureBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPressureBehavior *)((char *)this - 16));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPressureBehavior *)((char *)this - 48));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPressureBehavior *)((char *)this - 336));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPressureBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPressureBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenPressureBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void PSPenPressureBehavior::~PSPenPressureBehavior(PSPenPressureBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PSPenPressureBehavior::setIsInteractive(PSPenPressureBehavior *this, int a2)
{
  uint64_t result;

  *((_BYTE *)this + 2120) = a2;
  if (a2)
  {
    *((_QWORD *)this + 266) = OZMoShape::getPaintInteractiveValuesLock((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
    result = OZMoShape::getFreehandPaintPressures((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
  }
  else
  {
    result = 0;
    *((_QWORD *)this + 266) = 0;
  }
  *((_QWORD *)this + 269) = result;
  return result;
}

double PSPenPressureBehavior::getPenProperty(PSPenPressureBehavior *this, Float64 a2, int a3)
{
  PCMutex *v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  OZChannel *v11;
  double v12;
  double KeyframeMaxValue;

  if (*((_BYTE *)this + 2120))
  {
    v6 = (PCMutex *)*((_QWORD *)this + 266);
    PCMutex::lock(v6);
    v7 = **((_QWORD **)this + 269);
    v8 = ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 269) + 8) - v7) >> 3) - 1;
    v9 = vcvtmd_s64_f64(a2 + 0.0000001);
    if (v9 >= v8)
      v9 = ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 269) + 8) - v7) >> 3) - 1;
    if (v9 + 1 < v8)
      v8 = v9 + 1;
    if (a3)
      v10 = 1.0
          - (*(double *)(v7 + 8 * v9)
           + (*(double *)(v7 + 8 * v8) - *(double *)(v7 + 8 * v9)) * (a2 - (double)v9));
    else
      v10 = *(double *)(v7 + 8 * v9) + (*(double *)(v7 + 8 * v8) - *(double *)(v7 + 8 * v9)) * (a2 - (double)v9);
    if (v6)
      PCMutex::unlock(v6);
  }
  else
  {
    v11 = (OZChannel *)(*((_QWORD *)this + 267) + 29720);
    OZChannelAngleOverRange::getValueOverRangeAsDouble(v11, 0.0, a2);
    v10 = v12;
    if (a3)
    {
      if (*((_BYTE *)this + 2160))
      {
        *((double *)this + 271) = OZChannel::getKeyframeMinValue(v11, 0);
        KeyframeMaxValue = OZChannel::getKeyframeMaxValue(v11, 0);
        *((double *)this + 272) = KeyframeMaxValue;
        *((_BYTE *)this + 2160) = 0;
      }
      else
      {
        KeyframeMaxValue = *((double *)this + 272);
      }
      return KeyframeMaxValue - (v10 - *((double *)this + 271));
    }
  }
  return v10;
}

void PSPenSpeedBehavior::PSPenSpeedBehavior(PSPenSpeedBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;

  PSPenPropertyBehavior::PSPenPropertyBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65E7580;
  *(_QWORD *)(v5 + 16) = &unk_1E65E7840;
  *(_QWORD *)(v5 + 48) = &unk_1E65E7A98;
  *(_QWORD *)(v5 + 336) = &unk_1E65E7AF0;
  *(_OWORD *)(v5 + 2152) = 0u;
  *(_BYTE *)(v5 + 2168) = 1;
  *(_OWORD *)(v5 + 2176) = xmmword_1B304EEE0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Speed Behavior Min Speed"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1200), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Speed Behavior Max Speed"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1352), &v6, 0);
  PCString::~PCString(&v6);
}

void sub_1B2FEB220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PSPenPropertyBehavior *v10;

  PCString::~PCString(&a10);
  PSPenPropertyBehavior::~PSPenPropertyBehavior(v10);
  _Unwind_Resume(a1);
}

void PSPenSpeedBehavior::PSPenSpeedBehavior(PSPenSpeedBehavior *this, const PSPenSpeedBehavior *a2, char a3)
{
  uint64_t v4;

  PSPenPropertyBehavior::PSPenPropertyBehavior(this, a2, a3);
  *(_QWORD *)v4 = &off_1E65E7580;
  *(_QWORD *)(v4 + 16) = &unk_1E65E7840;
  *(_QWORD *)(v4 + 48) = &unk_1E65E7A98;
  *(_QWORD *)(v4 + 336) = &unk_1E65E7AF0;
  *(_OWORD *)(v4 + 2152) = 0u;
  *(_BYTE *)(v4 + 2168) = *((_BYTE *)a2 + 2168);
  *(_OWORD *)(v4 + 2176) = *((_OWORD *)a2 + 136);
}

void `non-virtual thunk to'PSPenSpeedBehavior::~PSPenSpeedBehavior(PSPenSpeedBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenSpeedBehavior *)((char *)this - 16));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenSpeedBehavior *)((char *)this - 48));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenSpeedBehavior *)((char *)this - 336));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenSpeedBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenSpeedBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenSpeedBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void PSPenSpeedBehavior::~PSPenSpeedBehavior(PSPenSpeedBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PSPenSpeedBehavior::setIsInteractive(PSPenSpeedBehavior *this, int a2)
{
  uint64_t result;

  *((_BYTE *)this + 2120) = a2;
  if (a2)
  {
    *((_QWORD *)this + 266) = OZMoShape::getPaintInteractiveValuesLock((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
    *((_QWORD *)this + 269) = OZMoShape::getFreehandPaintLengthAccums((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
    result = OZMoShape::getFreehandPaintTimes((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
  }
  else
  {
    result = 0;
    *((_QWORD *)this + 266) = 0;
    *((_QWORD *)this + 269) = 0;
  }
  *((_QWORD *)this + 270) = result;
  return result;
}

double PSPenSpeedBehavior::getPenProperty(PSPenSpeedBehavior *this, Float64 a2, int a3)
{
  signed int v6;
  signed int v7;
  int v8;
  PCMutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  char v20;
  OZChannel *v21;
  double v22;
  double KeyframeMaxValue;
  uint64_t v24;
  double v25;
  double v26;
  double v27;

  if (!*((_BYTE *)this + 2120))
  {
    v21 = (OZChannel *)(*((_QWORD *)this + 267) + 30328);
    OZChannelAngleOverRange::getValueOverRangeAsDouble(v21, 0.0, a2);
    v18 = v22;
    if (a3)
    {
      if (*((_BYTE *)this + 2168))
      {
        *((double *)this + 272) = OZChannel::getKeyframeMinValue(v21, 0);
        KeyframeMaxValue = OZChannel::getKeyframeMaxValue(v21, 0);
        *((double *)this + 273) = KeyframeMaxValue;
        *((_BYTE *)this + 2168) = 0;
      }
      else
      {
        KeyframeMaxValue = *((double *)this + 273);
      }
      return KeyframeMaxValue - (v18 - *((double *)this + 272));
    }
    return v18;
  }
  v6 = ((*(_QWORD *)(*((_QWORD *)this + 270) + 8) - **((_QWORD **)this + 270)) >> 3) - 1;
  v7 = vcvtmd_s64_f64(a2 + 0.0000001);
  if (v7 >= v6)
    v8 = ((*(_QWORD *)(*((_QWORD *)this + 270) + 8) - **((_QWORD **)this + 270)) >> 3) - 1;
  else
    v8 = v7;
  if (v8)
  {
    v9 = (PCMutex *)*((_QWORD *)this + 266);
    PCMutex::lock(v9);
    v10 = **((_QWORD **)this + 270);
    v11 = 8 * v8 - 8;
    v12 = **((_QWORD **)this + 269);
    v13 = *(double *)(v10 + 8 * v8) - *(double *)(v10 + v11);
    v14 = 0.001;
    if (v13 < 0.001)
      v13 = 0.001;
    v15 = (*(double *)(v12 + 8 * v8) - *(double *)(v12 + v11)) / v13;
    if (v15 <= 500.0)
      v16 = v15 / 500.0;
    else
      v16 = 1.0;
    if (v8 + 1 < v6)
      v17 = v8 + 1;
    else
      v17 = v6;
    v18 = 0.0;
    if (v17 == v8 || (v19 = a2 - (double)v8, v19 > -0.0000001) && v19 < 0.0000001)
    {
      v20 = 0;
      if (!v9)
        goto LABEL_33;
    }
    else
    {
      v24 = 8 * v17 - 8;
      if (*(double *)(v10 + 8 * v17) - *(double *)(v10 + v24) >= 0.001)
        v14 = *(double *)(v10 + 8 * v17) - *(double *)(v10 + v24);
      v25 = (*(double *)(v12 + 8 * v17) - *(double *)(v12 + v24)) / v14;
      if (v25 <= 500.0)
        v26 = v25 / 500.0;
      else
        v26 = 1.0;
      v27 = v16 + v19 * (v26 - v16);
      if (a3)
        v18 = 1.0 - v27;
      else
        v18 = v27;
      v20 = 1;
      if (!v9)
      {
LABEL_33:
        if ((v20 & 1) == 0)
          return v16;
        return v18;
      }
    }
    PCMutex::unlock(v9);
    goto LABEL_33;
  }
  return 1.0;
}

void PSPenTiltBehavior::PSPenTiltBehavior(PSPenTiltBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  PSPenPropertyBehavior::PSPenPropertyBehavior(this, a2, a3, a4);
  *v5 = &off_1E65E7B18;
  v5[2] = &unk_1E65E7DD8;
  v5[6] = &unk_1E65E8030;
  v5[42] = &unk_1E65E8088;
  v5[269] = 0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Tilt Behavior Min Tilt"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1200), &v6, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Pen Tilt Behavior Max Tilt"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1352), &v6, 0);
  PCString::~PCString(&v6);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 792), 2, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 99) + 128))((char *)this + 792);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1048), 2, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 131) + 128))((char *)this + 1048);
}

void sub_1B2FEB6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PSPenPropertyBehavior *v10;

  PCString::~PCString(&a10);
  PSPenPropertyBehavior::~PSPenPropertyBehavior(v10);
  _Unwind_Resume(a1);
}

void PSPenTiltBehavior::PSPenTiltBehavior(PSPenTiltBehavior *this, const PSPenTiltBehavior *a2, char a3)
{
  _QWORD *v3;

  PSPenPropertyBehavior::PSPenPropertyBehavior(this, a2, a3);
  *v3 = &off_1E65E7B18;
  v3[2] = &unk_1E65E7DD8;
  v3[6] = &unk_1E65E8030;
  v3[42] = &unk_1E65E8088;
  v3[269] = 0;
}

void `non-virtual thunk to'PSPenTiltBehavior::~PSPenTiltBehavior(PSPenTiltBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenTiltBehavior *)((char *)this - 16));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenTiltBehavior *)((char *)this - 48));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenTiltBehavior *)((char *)this - 336));
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenTiltBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenTiltBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  PSPenPropertyBehavior::~PSPenPropertyBehavior((PSPenTiltBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void PSPenTiltBehavior::~PSPenTiltBehavior(PSPenTiltBehavior *this)
{
  PSPenPropertyBehavior::~PSPenPropertyBehavior(this);
  JUMPOUT(0x1B5E29170);
}

BOOL PSPenTiltBehavior::isRebuildUIChannel(PSPenTiltBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2 || (OZChannelBase *)((char *)this + 792) == a2;
}

OZChannelBase *PSPenTiltBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  const CMTime *v4;
  uint64_t v5;
  char *v6;

  PSPenPropertyBehavior::updateHiddenFlags(a1, a2);
  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v5 = a2;
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == a2)
      break;
    v6 = *(char **)(v5 + 16);
    if (v6)
    if (OZChannel::getValueAsInt((OZChannel *)(v6 + 792), v4, 0.0) == 3)
      return OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1048), 0x400000, 1);
  }
  return OZChannelBase::setFlag((OZChannelBase *)(a1 + 1048), 0x400000, 1);
}

uint64_t PSPenTiltBehavior::setIsInteractive(PSPenTiltBehavior *this, int a2)
{
  uint64_t result;

  *((_BYTE *)this + 2120) = a2;
  if (a2)
  {
    *((_QWORD *)this + 266) = OZMoShape::getPaintInteractiveValuesLock((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
    result = OZMoShape::getFreehandPaintTilts((OZMoShape *)(*((_QWORD *)this + 267) + 18976));
  }
  else
  {
    result = 0;
    *((_QWORD *)this + 266) = 0;
  }
  *((_QWORD *)this + 269) = result;
  return result;
}

void PSPenTiltBehavior::getPenProperty(PSPenTiltBehavior *this, double a2)
{
  double v4;
  uint64_t v5;
  double v6;

  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 792), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      PSPenTiltBehavior::getAbsoluteTilt(this, a2);
      break;
    case 1u:
    case 2u:
      v5 = 0;
      v6 = 0.0;
      PSPenTiltBehavior::getPenTilt(this, v4, a2, &v6, (double *)&v5);
      break;
    case 3u:
      PSPenTiltBehavior::getTiltAlongAxis(this, a2);
      break;
    case 4u:
      PSPenTiltBehavior::getTiltPolar(this, a2);
      break;
    default:
      return;
  }
}

void PSPenTiltBehavior::getAbsoluteTilt(PSPenTiltBehavior *this, double a2)
{
  long double v2;
  long double v3;
  long double v4;
  double v5;
  double v6;
  long double v7;

  v6 = 0.0;
  v7 = 0.0;
  PSPenTiltBehavior::getPenTilt(this, a2, a2, &v7, &v6);
  v3 = v6;
  v2 = v7;
  if (v7 <= -0.0000001 || v7 >= 0.0000001 || v6 <= -0.0000001 || v6 >= 0.0000001)
  {
    hypot(v7, v6);
    v4 = atan2(v3, v2);
    v5 = fmod(v4, 1.57079633);
    if (v5 > 0.785398163)
      v5 = 1.57079633 - v5;
    cos(v5);
  }
}

void PSPenTiltBehavior::getPenTilt(PSPenTiltBehavior *this, double a2, Float64 a3, double *a4, double *a5)
{
  PCMutex *v9;
  uint64_t v10;
  int v11;
  int v12;
  double *v13;
  double v14;
  double *v15;
  double v16;
  Float64 v17;

  if (*((_BYTE *)this + 2120))
  {
    v9 = (PCMutex *)*((_QWORD *)this + 266);
    PCMutex::lock(v9);
    v10 = **((_QWORD **)this + 269);
    v11 = ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 269) + 8) - v10) >> 4) - 1;
    v12 = vcvtmd_s64_f64(a3 + 0.0000001);
    if (v12 >= v11)
      v12 = ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 269) + 8) - v10) >> 4) - 1;
    if (v12 + 1 < v11)
      v11 = v12 + 1;
    v13 = (double *)(v10 + 16 * v12);
    v14 = v13[1];
    v15 = (double *)(v10 + 16 * v11);
    v16 = v15[1];
    v17 = a3 - (double)v12;
    *a4 = *v13 + (*v15 - *v13) * v17;
    *a5 = v14 + (v16 - v14) * v17;
    if (v9)
      PCMutex::unlock(v9);
  }
  else
  {
    OZChannel2DOverRange::getValueOverRange((OZChannel2DOverRange *)(*((_QWORD *)this + 267) + 29880), 0.0, a3, a4, a5);
  }
}

void PSPenTiltBehavior::getTiltAlongAxis(PSPenTiltBehavior *this, double a2)
{
  double v3;
  long double v4;
  long double v5;
  long double v6;
  long double v7;
  double v8;
  double v9;
  long double v10;

  v9 = 0.0;
  v10 = 0.0;
  PSPenTiltBehavior::getPenTilt(this, a2, a2, &v10, &v9);
  if (v10 <= -0.0000001 || v10 >= 0.0000001 || v9 <= -0.0000001 || v9 >= 0.0000001)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1048), MEMORY[0x1E0CA2E68], 0.0);
    v4 = v3;
    v5 = v9;
    v6 = v10;
    v7 = atan2(v9, v10);
    cos(v7 - v4);
    hypot(v6, v5);
    v8 = fmod(v4, 1.57079633);
    if (v8 > 0.785398163)
      v8 = 1.57079633 - v8;
    cos(v8);
  }
}

double PSPenTiltBehavior::getTiltPolar(PSPenTiltBehavior *this, double a2)
{
  double v2;
  double v3;
  double v5;
  long double v6;

  v5 = 0.0;
  v6 = 0.0;
  PSPenTiltBehavior::getPenTilt(this, a2, a2, &v6, &v5);
  v2 = 0.0;
  if (v6 * v6 + v5 * v5 >= 0.01)
  {
    v3 = atan2(v5, v6);
    if (v3 < 0.0)
      v3 = v3 + 6.28318531;
    return v3 / 6.28318531;
  }
  return v2;
}

uint64_t PSPenPressureBehavior::getDefaultApplyTo(PSPenPressureBehavior *this)
{
  OZPreferenceManager *v1;

  v1 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  return OZPreferenceManager::getStrokeApplyPenPressureTo(v1);
}

uint64_t PSPenSpeedBehavior::getDefaultApplyTo(PSPenSpeedBehavior *this)
{
  OZPreferenceManager *v1;

  v1 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  return OZPreferenceManager::getStrokeApplyPenSpeedTo(v1);
}

void PSEmitterRender::PSEmitterRender(PSEmitterRender *this, PSEmitter *a2, const OZRenderParams *a3)
{
  *((_QWORD *)this + 184) = &off_1E65EB048;
  *((_QWORD *)this + 185) = 0;
  *((_BYTE *)this + 1488) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65E81E8);
  *(_QWORD *)this = &off_1E65E8100;
  *((_QWORD *)this + 184) = &unk_1E65E81C8;
  *((_QWORD *)this + 2) = a2;
  OZRenderParams::OZRenderParams((PSEmitterRender *)((char *)this + 24), a3);
  *((_QWORD *)this + 182) = 0;
  *((_BYTE *)this + 1464) = 0;
  *((_BYTE *)this + 1448) = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 2) + 32792), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

void sub_1B2FEBE2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZRenderParams *v2;
  uint64_t v3;
  OZRenderParams *v4;

  v4 = v2;
  OZRenderParams::~OZRenderParams(v4);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65E81E8);
  *(_QWORD *)(v1 + 1472) = v3 + 16;
  *(_BYTE *)(v1 + 1488) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1480));
  _Unwind_Resume(a1);
}

uint64_t PSEmitterRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _BYTE v7[40];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 1448))
  {
    (*(void (**)(_BYTE *__return_ptr))(***(_QWORD ***)(a2 + 48) + 280))(v7);
    v4 = *(_OWORD *)&v7[16];
    *(_OWORD *)a3 = *(_OWORD *)v7;
    *(_OWORD *)(a3 + 16) = v4;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v14 = 0x3FF0000000000000;
    v11 = 0x3FF0000000000000;
    v8 = 0x3FF0000000000000;
    *(_QWORD *)v7 = 0x3FF0000000000000;
    memset(&v7[8], 0, 32);
    v9 = 0u;
    v10 = 0u;
    v12 = 0u;
    v13 = 0u;
    PSEmitter::getRenderBounds(v5, (float64x2_t *)a3, (CMTime *)(a1 + 24), v7);
  }
  return 1;
}

double PSEmitterRender::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  double result;
  __n128 v10;

  if (*(_BYTE *)(a1 + 1448) || !OZRenderParams::getDoHighQualityResampling((OZRenderParams *)(a1 + 24)))
    return LiImageSource::fixPixelTransform(a1, a2, a3, a4);
  OZRenderParams::getResolution((OZRenderParams *)(a1 + 24), &v10);
  v8 = v10.n128_u64[1];
  *(_QWORD *)a3 = v10.n128_u64[0];
  result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)(a3 + 40) = v8;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  return result;
}

uint64_t PSEmitterRender::pixelTransformSupport(PSEmitterRender *this, const LiRenderParameters *a2)
{
  uint64_t v2;

  v2 = 6;
  if (!*((_BYTE *)this + 1448))
  {
    if (OZRenderParams::getDoHighQualityResampling((PSEmitterRender *)((char *)this + 24)))
      return 0;
    else
      return 6;
  }
  return v2;
}

CGColorSpace **PSEmitterRender::getHelium@<X0>(PSEmitterRender *this@<X0>, LiAgent *a2@<X1>, PSHeliumNode **a3@<X8>)
{
  const FxColorDescription *RequestedColorDescription;
  CGColorSpace *WorkingColorSpace;
  FxColorDescription v9;

  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)((char *)this + 24));
  FxColorDescription::FxColorDescription(&v9, RequestedColorDescription, WorkingColorSpace);
  OZRenderParams::setWorkingColorDescription((CGColorSpace **)this + 3, &v9);
  PSEmitter::getHelium(*((PSEmitter **)this + 2), (CMTime *)this + 1, a2, a3);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v9._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2FEC090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t PSEmitterRender::estimateRenderMemory(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 1464))
    return *(_QWORD *)(a1 + 1456);
  v12 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v6 = 0x3FF0000000000000;
  v3 = 0x3FF0000000000000;
  v4 = 0u;
  v5 = 0u;
  v7 = 0u;
  v8 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = PSEmitter::estimateRenderMemory(*(_QWORD *)(a1 + 16), (CMTime *)(a1 + 24), &v3);
  *(_QWORD *)(a1 + 1456) = result;
  *(_BYTE *)(a1 + 1464) = 1;
  return result;
}

void PSEmitterRender::~PSEmitterRender(PSEmitterRender *this)
{
  *(_QWORD *)this = &off_1E65E8100;
  *((_QWORD *)this + 184) = &unk_1E65E81C8;
  OZRenderParams::~OZRenderParams((PSEmitterRender *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65E81E8);
  *((_QWORD *)this + 184) = &off_1E65EB048;
  *((_BYTE *)this + 1488) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 185);
}

{
  *(_QWORD *)this = &off_1E65E8100;
  *((_QWORD *)this + 184) = &unk_1E65E81C8;
  OZRenderParams::~OZRenderParams((PSEmitterRender *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65E81E8);
  *((_QWORD *)this + 184) = &off_1E65EB048;
  *((_BYTE *)this + 1488) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 185);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PSEmitterRender::~PSEmitterRender(PSEmitterRender *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65E8100;
  *((_QWORD *)v1 + 184) = &unk_1E65E81C8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65E81E8);
  *((_QWORD *)v1 + 184) = &off_1E65EB048;
  v1[1488] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 185);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65E8100;
  *((_QWORD *)v1 + 184) = &unk_1E65E81C8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65E81E8);
  *((_QWORD *)v1 + 184) = &off_1E65EB048;
  v1[1488] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 185);
  JUMPOUT(0x1B5E29170);
}

void PSImageTint::PSImageTint(PSImageTint *this)
{
  *((_QWORD *)this + 7) = &off_1E65EB048;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E65E84A0);
  *(_QWORD *)this = &off_1E65E8398;
  *((_QWORD *)this + 7) = &unk_1E65E8480;
  PCWorkingColorVector::PCWorkingColorVector((PSImageTint *)((char *)this + 36));
}

void sub_1B2FEC358(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E65E84A0);
  *(_QWORD *)(v1 + 56) = v3 + 16;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void PSImageTint::~PSImageTint(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E65E84F0;
  this[7].var0 = (PC_Sp_counted_base *)off_1E65E85D8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65E84A8);
  this[7].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[9].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[8].var0);
}

{
  PSImageTint::~PSImageTint(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PSImageTint::~PSImageTint(PSImageTint *this)
{
  PSImageTint::~PSImageTint((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  PSImageTint::~PSImageTint((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

void PSImageTint::clone(PSImageTint *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t *v4;
  PCSharedCount v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = (uint64_t *)operator new();
  PSImageTint::PSImageTint((PSImageTint *)v4);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (PCShared_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((_QWORD *)v5.var0 + 2) = *((_QWORD *)this + 2);
  PCSharedCount::PCSharedCount(&v7, (const PCSharedCount *)this + 3);
  PCSharedCount::operator=(v4 + 3, (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  if (!v5.var0)
    throw_PCNullPointerException(1);
  *(_OWORD *)((char *)v5.var0 + 36) = *(_OWORD *)((char *)this + 36);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2FEC538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

void PSImageTint::getHelium(PSImageTint *this@<X0>, LiAgent *a2@<X1>, HgcPSImageTint **a3@<X8>)
{
  LiImageSource *v6;
  CGColorSpace *CGColorSpace;
  HgcPSImageTint *v8;
  HGNode *v9;

  *((_DWORD *)a2 + 8) = 2;
  v6 = (LiImageSource *)*((_QWORD *)this + 2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  LiAgent::getHeliumInColorSpace(a2, v6, CGColorSpace, &v9);
  if (v9)
  {
    v8 = (HgcPSImageTint *)HGObject::operator new(0x200uLL);
    HgcPSImageTint::HgcPSImageTint(v8);
    (*(void (**)(HgcPSImageTint *, _QWORD, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 0, *((float *)this + 9), *((float *)this + 10), *((float *)this + 11), *((float *)this + 12));
    (*(void (**)(HgcPSImageTint *, _QWORD, HGNode *))(*(_QWORD *)v8 + 120))(v8, 0, v9);
    *a3 = v8;
    if (v9)
      (*(void (**)(HGNode *))(*(_QWORD *)v9 + 24))(v9);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_1B2FEC64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void PSGradDabRender::PSGradDabRender(PSGradDabRender *this, OZChannelGradient *a2, const OZRenderParams *a3)
{
  PSHeliumNode *v6;
  PSHeliumNode *v7;
  OZMetalGradientRadial *v8;
  CGColorSpace *WorkingColorSpace;
  OZGLGradientRadial *v10;
  PSHeliumNode *v11;
  OZGLGradientRadial *v12;
  CGColorSpace *v13;
  OZChannelBase ***v14;
  OZGLGradientRadial *v15;
  int v16;
  double v17;
  _OWORD v24[2];
  __int128 v25;
  OZGLGradientRadial *v26;
  _OWORD v27[2];
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  CMTime v41;

  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_QWORD *)this + 182) = 0;
  *((_BYTE *)this + 1464) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65E8860);
  *(_QWORD *)this = &off_1E65E8778;
  *((_QWORD *)this + 181) = &unk_1E65E8840;
  OZRenderParams::OZRenderParams((PSGradDabRender *)((char *)this + 16), a3);
  *((_QWORD *)this + 180) = 0;
  v6 = (PSHeliumNode *)HGObject::operator new(0x390uLL);
  PSHeliumNode::PSHeliumNode(v6, a3);
  v7 = (PSHeliumNode *)*((_QWORD *)this + 180);
  if (v7 == v6)
  {
    if (v6)
      (*(void (**)(PSHeliumNode *))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    if (v7)
      (*(void (**)(PSHeliumNode *))(*(_QWORD *)v7 + 24))(v7);
    *((_QWORD *)this + 180) = v6;
  }
  if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)a3) + 8))
  {
    if (LiRenderingTechnology::getEnableMetalRendering((const OZRenderParams *)((char *)a3 + 1316)))
    {
      v26 = 0;
      PCSharedCount::PCSharedCount((PCSharedCount *)v27);
      v8 = (OZMetalGradientRadial *)operator new();
      WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
      OZMetalGradientRadial::OZMetalGradientRadial(v8, a2, (CGColorSpace *)0x100, WorkingColorSpace);
      PCPtr<LiImageSource>::operator=<LiImageSource>(&v26, v8);
      v10 = v26;
      if (!v26)
        throw_PCNullPointerException(1);
      *((_OWORD *)v26 + 1) = xmmword_1B304EFF0;
      *((_BYTE *)v10 + 236) = 1;
      v39 = *(_OWORD *)a3;
      v40 = *((_QWORD *)a3 + 2);
      (*(void (**)(OZGLGradientRadial *, __int128 *))(*(_QWORD *)v10 + 24))(v10, &v39);
      PSHeliumNode::setMetalGradient(*((_QWORD *)this + 180), (const PCSharedCount *)&v26);
    }
    else
    {
      v26 = 0;
      PCSharedCount::PCSharedCount((PCSharedCount *)v27);
      v12 = (OZGLGradientRadial *)operator new();
      v13 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
      OZGLGradientRadial::OZGLGradientRadial(v12, a2, (CGColorSpace *)0x100, v13, 0);
      PCPtr<LiImageSource>::operator=<LiImageSource>(&v26, v12);
      v14 = (OZChannelBase ***)v26;
      if (!v26)
        throw_PCNullPointerException(1);
      *((_BYTE *)v26 + 416) = 0;
      OZGLGradientRadial::setTransparentBeyondEdge(v14);
      v15 = v26;
      if (!v26)
        throw_PCNullPointerException(1);
      *(_OWORD *)((char *)v26 + 24) = xmmword_1B304EFF0;
      *(_WORD *)((char *)v15 + 417) = 257;
      v37 = *(_OWORD *)a3;
      v38 = *((_QWORD *)a3 + 2);
      (*(void (**)(OZGLGradientRadial *, __int128 *))(*(_QWORD *)v15 + 56))(v15, &v37);
      PSHeliumNode::setGradient(*((_QWORD *)this + 180), (const PCSharedCount *)&v26);
    }
    PCSharedCount::~PCSharedCount((PCSharedCount *)v27);
  }
  else
  {
    v11 = (PSHeliumNode *)*((_QWORD *)this + 180);
    v41 = *(CMTime *)a3;
    PSHeliumNode::initGradient(v11, (uint64_t **)a2, &v41);
  }
  v16 = *((unsigned __int8 *)a3 + 202);
  v36 = 0x3FF0000000000000;
  v32 = 0;
  v33 = 0x3FF0000000000000;
  v30 = 0;
  v31 = 0;
  v34 = 0u;
  v35 = 0u;
  v17 = 36.0;
  if (!v16)
    v17 = 256.0;
  v26 = *(OZGLGradientRadial **)&v17;
  memset(v27, 0, sizeof(v27));
  v28 = v17;
  v29 = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v25, 1.0, 1.0, 1.0, 1.0);
  __asm
  {
    FMOV            V0.2D, #-0.5
    FMOV            V1.2D, #1.0
  }
  v24[0] = _Q0;
  v24[1] = _Q1;
  PSHeliumNode::addRadialParticle(*((_QWORD *)this + 180), (double *)&v26, (double *)v24, &v25, 0);
}

void sub_1B2FEC9E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZRenderParams *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 1440);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  OZRenderParams::~OZRenderParams(v2);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65E8860);
  *(_QWORD *)(v1 + 1448) = v3 + 16;
  *(_BYTE *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
  _Unwind_Resume(a1);
}

void PSGradDabRender::~PSGradDabRender(OZChannelBase *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *var12;

  var0 = a2->var0;
  this->var0 = (void **)a2->var0;
  *(PCString *)((char *)&this->var0 + var0[-1].info) = a2[5];
  var12 = this[12].var12;
  if (var12)
    (*((void (**)(__CFString *))var12->isa + 3))(var12);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this->var2);
  OZChannelBase::setRangeName(this, a2 + 1);
}

void PSGradDabRender::~PSGradDabRender(OZChannelBase *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1448) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 1448) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PSGradDabRender::~PSGradDabRender(PSGradDabRender *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1448) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
}

{
  PSGradDabRender::~PSGradDabRender((OZChannelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t PSGradDabRender::getBoundary(uint64_t a1, uint64_t a2, double *a3)
{
  BOOL v3;
  double v4;
  double v5;
  double v6;

  v3 = *(_BYTE *)(a1 + 218) == 0;
  v4 = 128.0;
  if (*(_BYTE *)(a1 + 218))
    v4 = 18.0;
  v5 = -v4;
  *a3 = v5;
  a3[1] = v5;
  v6 = 36.0;
  if (v3)
    v6 = 256.0;
  a3[2] = v6;
  a3[3] = v6;
  return 1;
}

uint64_t PSGradDabRender::getHelium@<X0>(PSHeliumNode **this@<X0>, LiAgent *a2@<X1>, PSHeliumNode **a3@<X8>)
{
  PSHeliumNode *v6;
  PSHeliumNode *v7;
  CGColorSpace *CGColorSpace;

  PSHeliumNode::preRender(this[180]);
  v6 = this[180];
  *a3 = v6;
  if (v6)
  {
    (*(void (**)(PSHeliumNode *))(*(_QWORD *)v6 + 16))(v6);
    v7 = this[180];
    if (v7)
      (*(void (**)(PSHeliumNode *))(*(_QWORD *)v7 + 24))(v7);
  }
  this[180] = 0;
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  return LiAgent::setActualColorSpace(a2, CGColorSpace);
}

void sub_1B2FECCDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t PSGradDabRender::estimateRenderMemory()
{
  return 0;
}

void PSSolidDabRender::PSSolidDabRender(PSSolidDabRender *this, const OZRenderParams *a2)
{
  *((_QWORD *)this + 180) = &off_1E65EB048;
  *((_QWORD *)this + 181) = 0;
  *((_BYTE *)this + 1456) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65E8AF8);
  *(_QWORD *)this = &off_1E65E8A10;
  *((_QWORD *)this + 180) = &unk_1E65E8AD8;
  OZRenderParams::OZRenderParams((PSSolidDabRender *)((char *)this + 16), a2);
}

void sub_1B2FECD84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65E8AF8);
  *(_QWORD *)(v1 + 1440) = v2 + 16;
  *(_BYTE *)(v1 + 1456) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1448));
  _Unwind_Resume(a1);
}

void PSSolidDabRender::~PSSolidDabRender(PSSolidDabRender *this)
{
  *(_QWORD *)this = &off_1E65E8A10;
  *((_QWORD *)this + 180) = &unk_1E65E8AD8;
  OZRenderParams::~OZRenderParams((PSSolidDabRender *)((char *)this + 16));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65E8AF8);
  *((_QWORD *)this + 180) = &off_1E65EB048;
  *((_BYTE *)this + 1456) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 181);
}

{
  PSSolidDabRender::~PSSolidDabRender(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PSSolidDabRender::~PSSolidDabRender(PSSolidDabRender *this)
{
  PSSolidDabRender::~PSSolidDabRender((PSSolidDabRender *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  PSSolidDabRender::~PSSolidDabRender((PSSolidDabRender *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

uint64_t PSSolidDabRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { FMOV            V0.2D, #-18.0 }
  *(_OWORD *)a3 = _Q0;
  *(int64x2_t *)(a3 + 16) = vdupq_n_s64(0x4042000000000000uLL);
  return 1;
}

uint64_t PSSolidDabRender::getHelium@<X0>(PSSolidDabRender *this@<X0>, LiAgent *a2@<X1>, PSHeliumNode **a3@<X8>)
{
  const OZRenderParams *v6;
  PSHeliumNode *v7;
  int v8;
  double v9;
  CGColorSpace *CGColorSpace;
  uint64_t result;
  _OWORD v18[2];
  __int128 v19;
  __n128 v20;
  double v21;
  __int128 v22;
  __int128 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v6 = (PSSolidDabRender *)((char *)this + 16);
  v7 = (PSHeliumNode *)HGObject::operator new(0x390uLL);
  PSHeliumNode::PSHeliumNode(v7, v6);
  OZRenderParams::getResolution(v6, &v20);
  v8 = *((unsigned __int8 *)this + 218);
  v30 = 0x3FF0000000000000;
  v26 = 0;
  v27 = 0x3FF0000000000000;
  v28 = 0u;
  v29 = 0u;
  v9 = v20.n128_f64[0] * 36.0;
  if (!v8)
    v9 = 256.0;
  v21 = 0.0;
  v20 = (__n128)0x3FF0000000000000uLL;
  v22 = xmmword_1B304F7A0;
  v23 = xmmword_1B304EED0;
  v24 = 0.5;
  v25 = 0;
  if (v9 != 1.0)
  {
    v20.n128_f64[0] = v9;
    v20.n128_f64[1] = v9 * 0.0;
    v21 = v9 * 0.0;
    *(double *)&v22 = v9 * 0.5;
    *((double *)&v22 + 1) = v9 * 0.0;
    *(double *)&v23 = v9;
    *((double *)&v23 + 1) = v9 * 0.0;
    v24 = v9 * 0.5;
  }
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v19, 1.0, 1.0, 1.0, 1.0);
  __asm
  {
    FMOV            V0.2D, #-0.5
    FMOV            V1.2D, #1.0
  }
  v18[0] = _Q0;
  v18[1] = _Q1;
  PSHeliumNode::addCircleParticle((uint64_t)v7, v20.n128_f64, (double *)v18, &v19, 0);
  PSHeliumNode::preRender(v7);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  result = LiAgent::setActualColorSpace(a2, CGColorSpace);
  *a3 = v7;
  return result;
}

void sub_1B2FECFF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t PSSolidDabRender::estimateRenderMemory()
{
  return 0;
}

void QuadNode::~QuadNode(QuadNode *this)
{
  uint64_t i;
  QuadNode *v3;
  void *v4;

  for (i = 8; i != 40; i += 8)
  {
    v3 = *(QuadNode **)((char *)this + i);
    if (v3)
    {
      QuadNode::~QuadNode(v3);
      MEMORY[0x1B5E29170]();
    }
    *(_QWORD *)((char *)this + i) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
}

void QuadNode::insert(uint64_t a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double v6;
  double v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = (double *)(a1 + 40);
  v5 = (double *)(a2 + 160);
  if (PCRect<double>::intersects((double *)(a1 + 40), (double *)(a2 + 160)))
  {
    if (PCRect<double>::contains(v5, v4)
      || (v6 = *(double *)(a1 + 56), v6 < 64.0)
      || (v7 = *(double *)(a1 + 64), v7 < 64.0))
    {
      v8 = *(_QWORD *)(a1 + 88);
      v9 = *(_QWORD **)(a1 + 80);
      if ((unint64_t)v9 >= v8)
      {
        v11 = *(_QWORD *)(a1 + 72);
        v12 = ((uint64_t)v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v13 = v8 - v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 88, v15);
        else
          v16 = 0;
        v17 = &v16[8 * v12];
        v18 = &v16[8 * v15];
        *(_QWORD *)v17 = a2;
        v10 = v17 + 8;
        v20 = *(char **)(a1 + 72);
        v19 = *(char **)(a1 + 80);
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v17 - 1) = v21;
            v17 -= 8;
          }
          while (v19 != v20);
          v19 = *(char **)(a1 + 72);
        }
        *(_QWORD *)(a1 + 72) = v17;
        *(_QWORD *)(a1 + 80) = v10;
        *(_QWORD *)(a1 + 88) = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v9 = a2;
        v10 = v9 + 1;
      }
      *(_QWORD *)(a1 + 80) = v10;
    }
    else
    {
      if (!*(_QWORD *)(a1 + 8))
      {
        v22 = v6 * 0.5;
        v23 = v7 * 0.5;
        v24 = *(double *)(a1 + 40);
        v25 = *(double *)(a1 + 48);
        v26 = operator new();
        *(_QWORD *)v26 = a1;
        *(double *)(v26 + 40) = v24;
        *(double *)(v26 + 48) = v25;
        *(double *)(v26 + 56) = v22;
        *(double *)(v26 + 64) = v23;
        *(_QWORD *)(v26 + 80) = 0;
        *(_QWORD *)(v26 + 88) = 0;
        *(_QWORD *)(v26 + 72) = 0;
        *(_OWORD *)(v26 + 8) = 0u;
        *(_OWORD *)(v26 + 24) = 0u;
        *(_QWORD *)(a1 + 8) = v26;
        v27 = operator new();
        *(_QWORD *)v27 = a1;
        *(double *)(v27 + 40) = v22 + v24;
        *(double *)(v27 + 48) = v25;
        *(double *)(v27 + 56) = v22;
        *(double *)(v27 + 64) = v23;
        *(_QWORD *)(v27 + 80) = 0;
        *(_QWORD *)(v27 + 88) = 0;
        *(_QWORD *)(v27 + 72) = 0;
        *(_OWORD *)(v27 + 8) = 0u;
        *(_OWORD *)(v27 + 24) = 0u;
        *(_QWORD *)(a1 + 16) = v27;
        v28 = operator new();
        *(_QWORD *)v28 = a1;
        v29 = v23 + v25;
        *(double *)(v28 + 40) = v22 + v24;
        *(double *)(v28 + 48) = v29;
        *(double *)(v28 + 56) = v22;
        *(double *)(v28 + 64) = v23;
        *(_QWORD *)(v28 + 80) = 0;
        *(_QWORD *)(v28 + 88) = 0;
        *(_QWORD *)(v28 + 72) = 0;
        *(_OWORD *)(v28 + 8) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_QWORD *)(a1 + 24) = v28;
        v30 = operator new();
        *(_QWORD *)v30 = a1;
        *(double *)(v30 + 40) = v24;
        *(double *)(v30 + 48) = v29;
        *(double *)(v30 + 56) = v22;
        *(double *)(v30 + 64) = v23;
        *(_QWORD *)(v30 + 80) = 0;
        *(_QWORD *)(v30 + 88) = 0;
        *(_QWORD *)(v30 + 72) = 0;
        *(_OWORD *)(v30 + 8) = 0u;
        *(_OWORD *)(v30 + 24) = 0u;
        *(_QWORD *)(a1 + 32) = v30;
      }
      v31 = 0;
      v32 = a1 + 8;
      do
      {
        QuadNode::insert(*(_QWORD *)(v32 + v31), a2);
        v31 += 8;
      }
      while (v31 != 32);
    }
  }
}

uint64_t *QuadNode::getSprites(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;

  result = (uint64_t *)PCRect<double>::intersects((double *)(a1 + 40), a2);
  if ((_DWORD)result)
  {
    v7 = *(uint64_t **)(a1 + 72);
    for (i = *(uint64_t **)(a1 + 80); v7 != i; ++v7)
      result = std::__tree<PSHeliumNode::Sprite *,PSHeliumNode::lessThanSprite,std::allocator<PSHeliumNode::Sprite *>>::__emplace_hint_unique_key_args<PSHeliumNode::Sprite *,PSHeliumNode::Sprite * const&>((uint64_t **)a3, (_QWORD *)(a3 + 8), (uint64_t)v7, v7);
    if (*(_QWORD *)(a1 + 8))
    {
      v9 = 0;
      v10 = a1 + 8;
      do
      {
        result = (uint64_t *)QuadNode::getSprites(*(_QWORD *)(v10 + v9), a2, a3);
        v9 += 8;
      }
      while (v9 != 32);
    }
  }
  return result;
}

void PSHeliumNode::PSHeliumNode(PSHeliumNode *this, HGRenderJob *a2)
{
  PCSharedCount *v4;

  HGNode::HGNode((HGNode *)this);
  v4->var0 = (PC_Sp_counted_base *)off_1E65E8CA0;
  v4[55].var0 = 0;
  PCSharedCount::PCSharedCount(v4 + 56);
  *((_QWORD *)this + 57) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 58);
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 66) = (char *)this + 536;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 69) = (char *)this + 560;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 73) = (char *)this + 592;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = 0;
  LiClipSet::LiClipSet((PSHeliumNode *)((char *)this + 632));
  *((_QWORD *)this + 100) = 0x3FF0000000000000;
  *((_QWORD *)this + 95) = 0x3FF0000000000000;
  *((_QWORD *)this + 90) = 0x3FF0000000000000;
  *((_QWORD *)this + 85) = 0x3FF0000000000000;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_QWORD *)this + 103) = 0xBFF0000000000000;
  *((_QWORD *)this + 104) = 0xBFF0000000000000;
  *((_DWORD *)this + 3) = 72886678;
  (*(void (**)(PSHeliumNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 33);
  (*(void (**)(PSHeliumNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(PSHeliumNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 512);
  *((_QWORD *)this + 51) = operator new();
  *((_BYTE *)this + 416) = *(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList(a2) + 8) == 0;
  *((_BYTE *)this + 417) = OZRenderParams::getDoHighQualityResampling((OZRenderParams *)a2);
  *((_BYTE *)this + 418) = 0;
  *((_DWORD *)this + 144) = 0;
  *(_WORD *)((char *)this + 419) = 0;
  *((_DWORD *)this + 106) = -1;
  *((_WORD *)this + 214) = 0;
  *((_DWORD *)this + 108) = 1065353216;
  PCPtr<LiImageSource>::reset((_QWORD *)this + 55);
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 107) = 0;
  *((_QWORD *)this + 106) = 0;
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 111) = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  *((_DWORD *)this + 224) = 0;
}

void sub_1B2FED59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  PCSharedCount *v11;
  PCSharedCount *v12;
  void *v14;

  a10 = (void **)(v10 + 608);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::shared_ptr<PCImage>>::destroy(v10 + 584, *(_QWORD **)(v10 + 592));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v10 + 552, *(_QWORD **)(v10 + 560));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v10 + 528, *(_QWORD **)(v10 + 536));
  v14 = *(void **)(v10 + 504);
  if (v14)
  {
    *(_QWORD *)(v10 + 512) = v14;
    operator delete(v14);
  }
  a10 = (void **)(v10 + 480);
  std::vector<PSHeliumNode::Sprite>::__destroy_vector::operator()[abi:ne180100](&a10);
  PCSharedCount::~PCSharedCount(v12);
  PCSharedCount::~PCSharedCount(v11);
  HGNode::~HGNode((HGNode *)v10);
  _Unwind_Resume(a1);
}

void PSHeliumNode::~PSHeliumNode(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v3;
  QuadNode *v4;
  PC_Sp_counted_base *v5;
  unint64_t v6;
  uint64_t v7;
  GLuint v8;
  PC_Sp_counted_base *v9;
  PCSharedCount *v10;

  this->var0 = (PC_Sp_counted_base *)off_1E65E8CA0;
  var0 = this[51].var0;
  if (var0)
    MEMORY[0x1B5E29170](var0, 0xC400A2AC0F1);
  v3 = this[59].var0;
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8052888210);
  this[59].var0 = 0;
  v4 = (QuadNode *)this[105].var0;
  if (v4)
  {
    QuadNode::~QuadNode(v4);
    v4 = (QuadNode *)MEMORY[0x1B5E29170]();
  }
  this[105].var0 = 0;
  v5 = this[109].var0;
  if (v5)
  {
    do
      v6 = __ldaxr(&gBitmapCacheSize);
    while (__stlxr(v6 - (_QWORD)v5, &gBitmapCacheSize));
  }
  v7 = PSTextureCache::Instance(v4);
  PSTextureCache::removeTextures(v7, &this[73].var0);
  v8 = (GLuint)this[110].var0;
  if (v8)
    glDeleteProgram(v8);
  LiClipSet::~LiClipSet((LiClipSet *)&this[79]);
  v10 = this + 76;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  std::__tree<std::shared_ptr<PCImage>>::destroy((uint64_t)&this[73], this[74].var0);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[69], this[70].var0);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[66], this[67].var0);
  v9 = this[63].var0;
  if (v9)
  {
    this[64].var0 = v9;
    operator delete(v9);
  }
  v10 = this + 60;
  std::vector<PSHeliumNode::Sprite>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  PCSharedCount::~PCSharedCount(this + 58);
  PCSharedCount::~PCSharedCount(this + 56);
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  PSHeliumNode::~PSHeliumNode(this);
  HGObject::operator delete(v1);
}

void PSHeliumNode::initProgram(PSHeliumNode *this)
{
  GLuint Shader;
  GLuint v3;
  GLuint Program;
  GLsizei length;
  GLchar infolog[2048];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  Shader = glCreateShader(0x8B31u);
  glShaderSource(Shader, 1, (const GLchar *const *)vertexShaderSrc, 0);
  glCompileShader(Shader);
  v3 = glCreateShader(0x8B30u);
  glShaderSource(v3, 1, (const GLchar *const *)&fragmentShaderSrc, 0);
  glCompileShader(v3);
  Program = glCreateProgram();
  *((_DWORD *)this + 220) = Program;
  glAttachShader(Program, Shader);
  glAttachShader(*((_DWORD *)this + 220), v3);
  glBindAttribLocation(*((_DWORD *)this + 220), 0, "a_position");
  glBindAttribLocation(*((_DWORD *)this + 220), 1u, "a_texCoord");
  glBindAttribLocation(*((_DWORD *)this + 220), 2u, "a_partColor");
  glLinkProgram(*((_DWORD *)this + 220));
  length = 0;
  glGetShaderInfoLog(Shader, 2048, &length, infolog);
  if (length)
    printf("Vert Shader log:%s\n", infolog);
  length = 0;
  glGetShaderInfoLog(v3, 2048, &length, infolog);
  if (length)
    printf("Frag Shader log:%s\n", infolog);
  length = 0;
  glGetProgramInfoLog(*((_DWORD *)this + 220), 2048, &length, infolog);
  if (length)
    printf("Program log:%s\n", infolog);
  glDetachShader(*((_DWORD *)this + 220), Shader);
  glDeleteShader(Shader);
  glDetachShader(*((_DWORD *)this + 220), v3);
  glDeleteShader(v3);
}

uint64_t PSHeliumNode::RenderTile(PSHeliumNode *this, HGTile *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t Stack;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HGRect v21;
  int64x2_t v22;
  float64x2_t v23;
  _QWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  BOOL v28;
  uint64_t v29;
  _QWORD **v31;
  _QWORD *v32[2];
  _OWORD v33[2];
  HGRect v34[6];
  uint64_t v35;
  int v36;
  HGRect v37;
  HGRect v38;
  uint64_t v39;

  v5 = (uint64_t *)((char *)a2 + 16);
  v4 = *((_QWORD *)a2 + 2);
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a2 + 3);
  v8 = *(_DWORD *)a2;
  v9 = *((_DWORD *)a2 + 1);
  v10 = v6 - *(_DWORD *)a2;
  v11 = *((_DWORD *)a2 + 6);
  v12 = v7 - v9;
  if (v7 - v9 >= 1)
  {
    v13 = 0;
    do
    {
      if (v6 != v8)
      {
        v14 = 0;
        do
        {
          v15 = (_QWORD *)(v4 + 16 * v14);
          *v15 = 0;
          v15[1] = 0;
          ++v14;
        }
        while (v10 > (unint64_t)v14);
        v7 = *((_DWORD *)a2 + 3);
        v9 = *((_DWORD *)a2 + 1);
      }
      ++v13;
      v12 = v7 - v9;
      v4 += 16 * v11;
    }
    while (v13 < v7 - v9);
    v11 = *((_DWORD *)a2 + 6);
    v4 = *((_QWORD *)a2 + 2);
    v10 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
  }
  v16 = v10 * v12;
  Stack = HGExecutionUnit::GetStack(*((uint64_t *****)a2 + 42), 0);
  v18 = *((_QWORD *)a2 + 42);
  if (v4 != Stack)
  {
    HGExecutionUnit::SwapStack(v18);
    v19 = *((_QWORD *)a2 + 2);
    if (v19 != HGExecutionUnit::GetStack(*((uint64_t *****)a2 + 42), 0))
      goto LABEL_13;
    v18 = *((_QWORD *)a2 + 42);
  }
  HGExecutionUnit::CommitStack(v18, *v5, v11 * v12);
LABEL_13:
  HGExecutionUnit::SwapStack(*((_QWORD *)a2 + 42));
  v20 = HGExecutionUnit::GetStack(*((uint64_t *****)a2 + 42), v16);
  HGExecutionUnit::CommitStack(*((_QWORD *)a2 + 42), v20, v16);
  v21 = *(HGRect *)v5;
  v34[0] = *(HGRect *)a2;
  v34[1] = v21;
  v34[5] = v21;
  v35 = v20;
  v36 = v10;
  v37 = v34[0];
  v38 = v34[0];
  v39 = *((_QWORD *)a2 + 42);
  Effect_toPCRecti((const HGRect *)a2, (uint64_t)&v31);
  v22.i64[0] = (int)v31;
  v22.i64[1] = SHIDWORD(v31);
  v23 = vcvtq_f64_s64(v22);
  v22.i64[0] = SLODWORD(v32[0]);
  v22.i64[1] = SHIDWORD(v32[0]);
  v33[0] = v23;
  v33[1] = vcvtq_f64_s64(v22);
  v32[0] = 0;
  v32[1] = 0;
  v31 = v32;
  QuadNode::getSprites(*((_QWORD *)this + 105), (double *)v33, (uint64_t)&v31);
  v24 = v31;
  if (v31 != v32)
  {
    do
    {
      v25 = (_DWORD *)v24[4];
      switch(*v25)
      {
        case 0:
          PSHeliumNode::renderPointParticleTile((uint64_t)this, v34, (uint64_t)v25);
          break;
        case 1:
          PSHeliumNode::renderLineParticleTile((uint64_t)this, v34, (uint64_t)v25);
          break;
        case 2:
          PSHeliumNode::renderOutlineParticleTile((uint64_t)this, v34, (uint64_t)v25);
          break;
        case 3:
        case 4:
          PSHeliumNode::renderImageParticleTile((HGNode *)this, (uint64_t)v34, (uint64_t)v25);
          break;
        case 5:
          PSHeliumNode::renderRadialParticleTile((HGNode *)this, (uint64_t)v34, (uint64_t)v25);
          break;
        default:
          break;
      }
      v26 = (_QWORD *)v24[1];
      if (v26)
      {
        do
        {
          v27 = (_QWORD **)v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD **)v24[2];
          v28 = *v27 == v24;
          v24 = v27;
        }
        while (!v28);
      }
      v24 = v27;
    }
    while (v27 != v32);
  }
  v29 = HGNode::RenderTile((HGNode *)this, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v31, v32[0]);
  return v29;
}

void sub_1B2FEDBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void PSHeliumNode::renderPointParticleTile(uint64_t a1, HGRect *a2, uint64_t a3)
{
  int v5;
  __n128 v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;

  v8 = *(float64x2_t *)(a3 + 256);
  v9 = *(_QWORD *)(a3 + 272);
  v5 = PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 680), v8.f64, v8.f64);
  v6 = *(__n128 *)(a3 + 8);
  v7 = v8;
  PSHeliumNode::drawPoint(v5, a2, *(long double *)(a3 + 248), v6, &v7);
}

BOOL PSHeliumNode::renderLineParticleTile(uint64_t a1, HGRect *a2, uint64_t a3)
{
  double *v5;
  int v6;
  __n128 v7;
  __int128 v9;
  float64x2_t v10;
  __int128 v11;
  uint64_t v12;
  float64x2_t v13;
  uint64_t v14;

  v13 = *(float64x2_t *)(a3 + 256);
  v14 = *(_QWORD *)(a3 + 272);
  v11 = *(_OWORD *)(a3 + 280);
  v12 = *(_QWORD *)(a3 + 296);
  v5 = (double *)(a1 + 680);
  PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 680), v13.f64, v13.f64);
  v6 = PCMatrix44Tmpl<double>::transform<double>(v5, (double *)&v11, (double *)&v11);
  v7 = *(__n128 *)(a3 + 8);
  v9 = v11;
  v10 = v13;
  return PSHeliumNode::drawLine(v6, a2, v7, &v10, &v9);
}

BOOL PSHeliumNode::renderOutlineParticleTile(uint64_t a1, HGRect *a2, uint64_t a3)
{
  __n128 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;

  v4 = *(__n128 *)(a3 + 8);
  v5 = *(double *)(a3 + 216);
  v6 = *(double *)(a3 + 224);
  v7 = v5 + *(double *)(a3 + 232);
  v8 = v6 + *(double *)(a3 + 240);
  v9 = *(_OWORD *)(a1 + 760);
  v30 = *(_OWORD *)(a1 + 744);
  v31 = v9;
  v10 = *(_OWORD *)(a1 + 792);
  v32 = *(_OWORD *)(a1 + 776);
  v33 = v10;
  v11 = *(_OWORD *)(a1 + 696);
  v25 = v4;
  v26 = *(_OWORD *)(a1 + 680);
  v12 = *(_OWORD *)(a1 + 712);
  v13 = *(_OWORD *)(a1 + 728);
  v27 = v11;
  v28 = v12;
  v29 = v13;
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v26, (double *)(a3 + 32));
  v14 = *((double *)&v33 + 1) + v5 * *(double *)&v32 + v6 * *((double *)&v32 + 1);
  v37.f64[0] = (*((double *)&v27 + 1) + v5 * *(double *)&v26 + v6 * *((double *)&v26 + 1)) / v14;
  v37.f64[1] = (*((double *)&v29 + 1) + v5 * *(double *)&v28 + v6 * *((double *)&v28 + 1)) / v14;
  v15 = *((double *)&v33 + 1) + v7 * *(double *)&v32 + v6 * *((double *)&v32 + 1);
  v36.f64[0] = (*((double *)&v27 + 1) + v7 * *(double *)&v26 + v6 * *((double *)&v26 + 1)) / v15;
  v36.f64[1] = (*((double *)&v29 + 1) + v7 * *(double *)&v28 + v6 * *((double *)&v28 + 1)) / v15;
  v16 = *((double *)&v33 + 1) + v7 * *(double *)&v32 + v8 * *((double *)&v32 + 1);
  v35.f64[0] = (*((double *)&v27 + 1) + v7 * *(double *)&v26 + v8 * *((double *)&v26 + 1)) / v16;
  v35.f64[1] = (*((double *)&v29 + 1) + v7 * *(double *)&v28 + v8 * *((double *)&v28 + 1)) / v16;
  v17 = *((double *)&v33 + 1) + v5 * *(double *)&v32 + v8 * *((double *)&v32 + 1);
  v34.f64[0] = (*((double *)&v27 + 1) + v5 * *(double *)&v26 + v8 * *((double *)&v26 + 1)) / v17;
  v34.f64[1] = (*((double *)&v29 + 1) + v5 * *(double *)&v28 + v8 * *((double *)&v28 + 1)) / v17;
  v19 = PSHeliumNode::drawLine(v18, a2, v25, &v37, (__int128 *)&v36);
  v20 = PSHeliumNode::drawLine(v19, a2, v25, &v36, (__int128 *)&v35);
  v21 = PSHeliumNode::drawLine(v20, a2, v25, &v35, (__int128 *)&v34);
  v22 = PSHeliumNode::drawLine(v21, a2, v25, &v34, (__int128 *)&v37);
  v23 = PSHeliumNode::drawLine(v22, a2, v25, &v37, (__int128 *)&v35);
  return PSHeliumNode::drawLine(v23, a2, v25, &v34, (__int128 *)&v36);
}

void PSHeliumNode::renderImageParticleTile(HGNode *a1, uint64_t a2, uint64_t a3)
{
  HGRenderer *v6;
  HGNode *Input;
  uint64_t ROI;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double Matrixd;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38[17];

  v6 = *(HGRenderer **)(*(_QWORD *)(a2 + 336) + 152);
  Input = HGRenderer::GetInput(v6, a1, *(_DWORD *)(a3 + 200));
  ROI = HGRenderer::GetROI(v6, Input);
  v10 = v9;
  if (((*(uint64_t (**)(HGNode *, _QWORD))(*(_QWORD *)a1 + 152))(a1, *(unsigned int *)(a3 + 200)) & 2) != 0)
  {
    HGRenderer::RenderInput((uint64_t)v6, *(_QWORD *)(a2 + 336), (uint64_t)a1, *(_DWORD *)(a3 + 200), (uint64_t)&v28, ROI, v10, 0);
    v14 = v29;
    v12 = HGObject::operator new(0x80uLL);
    HGBitmap::HGBitmap(v12, ROI, v10, 28, v28, 16 * v14);
  }
  else
  {
    v11 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v6 + 128))(v6, 19);
    v12 = HGObject::operator new(0x90uLL);
    v13 = *(_QWORD *)(a2 + 336);
    HGBuffer::HGBuffer((uint64_t)v12, ROI, v10, v11, 0);
    *v12 = off_1E65E8FA8;
    v12[16] = Input;
    v12[17] = v13;
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)a1 + 680, (__int128 *)(a3 + 32), (uint64_t)v38);
  v15 = *(_OWORD *)((char *)a1 + 760);
  v34 = *(_OWORD *)((char *)a1 + 744);
  v35 = v15;
  v16 = *(_OWORD *)((char *)a1 + 792);
  v36 = *(_OWORD *)((char *)a1 + 776);
  v37 = v16;
  v17 = *(_OWORD *)((char *)a1 + 696);
  v30 = *(_OWORD *)((char *)a1 + 680);
  v31 = v17;
  v18 = *(_OWORD *)((char *)a1 + 728);
  v32 = *(_OWORD *)((char *)a1 + 712);
  v33 = v18;
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v30, (double *)(a3 + 32));
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v30, v38, 0.0))
  {
    v19 = *((_QWORD *)&v30 + 1);
    v20 = v31;
    v21 = *((_QWORD *)&v34 + 1);
    *((_QWORD *)&v30 + 1) = v32;
    *(_QWORD *)&v31 = v34;
    v22 = *((_QWORD *)&v35 + 1);
    *((_QWORD *)&v31 + 1) = v36;
    *(_QWORD *)&v32 = v19;
    v23 = *((_QWORD *)&v33 + 1);
    *(_QWORD *)&v34 = v20;
    *((_QWORD *)&v34 + 1) = v33;
    *(_QWORD *)&v33 = v21;
    *((_QWORD *)&v33 + 1) = *((_QWORD *)&v36 + 1);
    *((_QWORD *)&v35 + 1) = v37;
    *(_QWORD *)&v36 = *((_QWORD *)&v20 + 1);
    *((_QWORD *)&v36 + 1) = v23;
    *(_QWORD *)&v37 = v22;
    HGTransform::HGTransform((HGTransform *)&v28);
    Matrixd = HGTransform::LoadMatrixd((HGTransform *)&v28, (double *)&v30);
    *(_DWORD *)(*(_QWORD *)(a2 + 336) + 36) = 1;
    v25 = (*(uint64_t (**)(HGRenderer *, uint64_t, double))(*(_QWORD *)v6 + 128))(v6, 4, Matrixd);
    v26 = *(_QWORD *)(a2 + 336);
    *(_DWORD *)(v26 + 112) = v25;
    HGSampler::ReadTile(v26);
    v27 = *(_OWORD *)(a3 + 8);
    PCWorkingColorVector::operator*=((float32x2_t *)&v27, *((float *)&v27 + 3));
    OZTileBlend::renderTile(a2, (PCWorkingColor *)&v27, *(unsigned __int8 *)(a3 + 24));
    HGTransform::~HGTransform((HGTransform *)&v28);
  }
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 24))(v12);
}

void sub_1B2FEE140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  _Unwind_Resume(exception_object);
}

void PSHeliumNode::renderRadialParticleTile(HGNode *a1, uint64_t a2, uint64_t a3)
{
  HGRenderer *v6;
  HGNode *Input;
  uint64_t ROI;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float32x2_t v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  int8x16_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[8];
  double v47[16];
  _QWORD v48[18];
  long double __y[2];

  v6 = *(HGRenderer **)(*(_QWORD *)(a2 + 336) + 152);
  Input = HGRenderer::GetInput(v6, a1, *(_DWORD *)(a3 + 200));
  ROI = HGRenderer::GetROI(v6, Input);
  v10 = v9;
  v11 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)v6 + 128))(v6, 19);
  v12 = *(_QWORD *)(a2 + 336);
  HGBuffer::HGBuffer((uint64_t)v48, ROI, v10, v11, 0);
  v48[0] = off_1E65E8FA8;
  v48[16] = Input;
  v48[17] = v12;
  PSHeliumNode::unbindSurface((PSHeliumNode *)a1);
  PCMatrix44Tmpl<double>::operator*((uint64_t)a1 + 680, (__int128 *)(a3 + 32), (uint64_t)v47);
  v13 = *(_OWORD *)((char *)a1 + 760);
  v46[4] = *(_OWORD *)((char *)a1 + 744);
  v46[5] = v13;
  v14 = *(_OWORD *)((char *)a1 + 792);
  v46[6] = *(_OWORD *)((char *)a1 + 776);
  v46[7] = v14;
  v15 = *(_OWORD *)((char *)a1 + 696);
  v46[0] = *(_OWORD *)((char *)a1 + 680);
  v46[1] = v15;
  v16 = *(_OWORD *)((char *)a1 + 728);
  v46[2] = *(_OWORD *)((char *)a1 + 712);
  v46[3] = v16;
  PCMatrix44Tmpl<double>::rightMult((uint64_t)v46, (double *)(a3 + 32));
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v46, v47, 0.0);
  v17 = *(_DWORD *)(a2 + 4);
  v18 = *(_DWORD *)(a2 + 12);
  if (v17 < v18)
  {
    v19 = *(_DWORD *)a2;
    v20 = *(_DWORD *)(a2 + 8);
    v42 = *(int *)(a2 + 24);
    v21 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v19 < v20)
      {
        v22 = v19;
        v23 = v21;
        do
        {
          v43 = (double)v22 + 0.5;
          v44 = (double)v17 + 0.5;
          v45 = 0.0;
          PCMatrix44Tmpl<double>::transform<double>((double *)v46, &v43, &v43);
          v24 = v43 * v43 + v44 * v44 + v45 * v45;
          if (v24 <= 0.25)
          {
            v25 = sqrt(v24);
            v26 = (v25 + v25) * 255.0;
            __y[0] = 0.0;
            modf(v26, __y);
            v29 = __y[0];
            if ((int)(__y[0] + 1) < 255)
              v30 = v29 + 1;
            else
              v30 = 255;
            *(double *)v27.i64 = v26 - (float)v29;
            *(float *)v27.i32 = *(double *)v27.i64;
            v31 = *((_QWORD *)a1 + 59);
            v32 = (float *)(v31 + 16 * v29);
            v33 = (float *)(v31 + 4 * (4 * v30));
            v34 = vmul_n_f32(*(float32x2_t *)(a3 + 12), v32[2] + (float)((float)(v33[2] - v32[2]) * *(float *)v27.i32));
            v35 = (float)(*v32 + (float)((float)(*v33 - *v32) * *(float *)v27.i32)) * *(float *)(a3 + 20);
            v36 = 1.0 - v35;
            v37 = *(float *)v23;
            if (*(_BYTE *)(a3 + 24))
            {
              v38 = vmul_n_f32(v34, v35);
              v39 = *(float32x2_t *)(v23 + 4);
            }
            else
            {
              v37 = v36 * v37;
              v38 = vmul_n_f32(v34, v35);
              v39 = vmul_n_f32(*(float32x2_t *)(v23 + 4), v36);
            }
            *(float32x2_t *)v28.i8 = vadd_f32(v38, v39);
            *(float *)v27.i32 = (float)((float)((float)(v32[1] + (float)((float)(v33[1] - v32[1]) * *(float *)v27.i32))
                                              * *(float *)(a3 + 8))
                                      * v35)
                              + v37;
            v40 = v35 + (float)(v36 * *(float *)(v23 + 12));
            if (v40 > 1.0)
              v40 = 1.0;
            v41 = vextq_s8(vextq_s8(v27, v27, 4uLL), v28, 0xCuLL);
            *(float *)&v41.i32[3] = v40;
            *(int8x16_t *)v23 = v41;
          }
          v23 += 16;
          ++v22;
        }
        while (v20 != v22);
      }
      v21 += 16 * v42;
      ++v17;
    }
    while (v17 != v18);
  }
  HGBuffer::~HGBuffer((HGBuffer *)v48);
}

void sub_1B2FEE49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  HGBuffer::~HGBuffer((HGBuffer *)&a45);
  _Unwind_Resume(a1);
}

uint64_t PSHeliumNode::SetParameter(PSHeliumNode *this, float a2, float a3, float a4, float a5)
{
  return 0;
}

uint64_t PSHeliumNode::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, a3);
  return HGRenderer::GetDOD(a2, Input);
}

uint64_t PSHeliumNode::GetDOD(PSHeliumNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return HGRectMake4i(vcvtmd_s64_f64(*((double *)this + 101) + 0.000000999999997 + 0.0000001), vcvtmd_s64_f64(*((double *)this + 102) + 0.000000999999997 + 0.0000001), vcvtpd_s64_f64(*((double *)this + 101) + *((double *)this + 103) + -0.000000999999997), vcvtpd_s64_f64(*((double *)this + 102) + *((double *)this + 104) + -0.000000999999997));
}

uint64_t PSHeliumNode::RenderPage(PSHeliumNode *this, HGPage *a2)
{
  HGGPURenderer *v4;
  char *v5;
  _anonymous_namespace_ *CGColorSpace;
  int var8_high;
  char *v8;
  _anonymous_namespace_ *v9;
  char *Buffer;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  HGRect v14;
  _anonymous_namespace_ *v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int v22;
  unsigned int v23;
  GLenum v24;
  GLenum v25;
  int v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  char isObjectRef;
  uint64_t v35;
  char *v36;
  OZChannelBase v37;

  v4 = *(HGGPURenderer **)a2;
  v5 = (char *)*((_QWORD *)a2 + 1);
  memset((char *)&v37.var8 + 4, 0, 20);
  if (!v5)
  {
    *((_QWORD *)a2 + 1) = 0;
LABEL_7:
    v12 = *((_DWORD *)this + 4);
    if ((v12 & 0x1000) != 0)
    {
      v13 = HGRectMake4i(*((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 4) + ((*((_DWORD *)a2 + 6) + ~*((_DWORD *)a2 + 4)) & 0xFFFFFFE0) + 32, *((_DWORD *)a2 + 5) + ((*((_DWORD *)a2 + 7) + ~*((_DWORD *)a2 + 5)) & 0xFFFFFFE0) + 32);
      *(_QWORD *)&v14.var2 = *(_QWORD *)&v14.var0;
      *((_QWORD *)a2 + 2) = v13;
      *((_QWORD *)a2 + 3) = *(_QWORD *)&v14.var0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 2);
      *(_QWORD *)&v14.var2 = *((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v14.var0 = v13;
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v4, v14, *((unsigned int *)a2 + 8), 0, (v12 >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    *((_QWORD *)a2 + 1) = Buffer;
    if (!Buffer)
      goto LABEL_5;
    goto LABEL_11;
  }
  (*(void (**)(HGGPURenderer *, char *))(*(_QWORD *)v4 + 144))(v4, v5);
  HGGPURenderer::GetCurrentContext(v4, (uint64_t *)&v37.var6);
  CGColorSpace = (_anonymous_namespace_ *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v37.var6);
  ProGL::findContext(CGColorSpace, &v37.var1);
  ProGL::ContextHandle::operator=(&v37.var9, (uint64_t *)&v37.var1);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&v37.var1);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v37.var6);
  glGetIntegerv(0xBE2u, (GLint *)&v37.var8 + 1);
  glDisable(0xBE2u);
  var8_high = HIDWORD(v37.var8);
  *((_QWORD *)a2 + 1) = v5;
  v8 = v5;
  if (var8_high)
  {
    (*(void (**)(HGGPURenderer *, char *))(*(_QWORD *)v4 + 144))(v4, v5);
    HGGPURenderer::GetCurrentContext(v4, (uint64_t *)&v37.var6);
    v9 = (_anonymous_namespace_ *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v37.var6);
    ProGL::findContext(v9, &v37.var1);
    ProGL::ContextHandle::operator=(&v37.var9, (uint64_t *)&v37.var1);
    ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&v37.var1);
    PCSharedCount::PCSharedCount((PCSharedCount *)&v37.var6);
    glEnable(0xBE2u);
    v8 = (char *)*((_QWORD *)a2 + 1);
    if (!v8)
      goto LABEL_7;
  }
  (*(void (**)(char *))(*(_QWORD *)v8 + 16))(v8);
  Buffer = (char *)*((_QWORD *)a2 + 1);
  if (!Buffer)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_15;
  }
LABEL_11:
  if ((Buffer[12] & 1) != 0
    && (unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(*((_QWORD *)this + 61) - *((_QWORD *)this + 60)) >> 3)) >= 0x15)
  {
    v11 = HGGPURenderer::CreateBuffer((uint64_t)v4, *(HGRect *)(Buffer + 20), *((unsigned int *)Buffer + 4), 0, 0, *((unsigned __int8 *)a2 + 248));
    *((_QWORD *)a2 + 1) = v11;
    v5 = v11;
  }
  else
  {
    v11 = Buffer;
    Buffer = 0;
  }
LABEL_15:
  (*(void (**)(HGGPURenderer *, char *))(*(_QWORD *)v4 + 144))(v4, v11);
  HGGPURenderer::GetCurrentContext(v4, (uint64_t *)&v37.var6);
  v15 = (_anonymous_namespace_ *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v37.var6);
  ProGL::findContext(v15, &v37.var1);
  ProGL::ContextHandle::operator=(&v37.var9, (uint64_t *)&v37.var1);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&v37.var1);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v37.var6);
  HGGPURenderer::Clear(v4, *((HGRect *)a2 + 1), v16, v17);
  glActiveTexture(0x84C0u);
  v18 = (*(uint64_t (**)(HGGPURenderer *, _QWORD, PSHeliumNode *))(*(_QWORD *)v4 + 368))(v4, *((_QWORD *)this + 8), this);
  (*(void (**)(PSHeliumNode *, HGPage *, _QWORD, uint64_t))(*(_QWORD *)this + 488))(this, a2, 0, v18);
  ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)&v37.var6, (const ProGL::ContextHandle *)&v37.var9);
  ProGL::GL::GL((ProGL::GL *)&v37.var1);
  v35 = v18;
  PSHeliumNode::initProgram(this);
  v36 = v5;
  v19 = *((_QWORD *)this + 55);
  if (v19)
    *(_BYTE *)(v19 + 361) = 0;
  v20 = *((_QWORD *)this + 60);
  for (i = *((_QWORD *)this + 61); v20 != i; v20 += 312)
  {
    v22 = *(_DWORD *)v20 - 3;
    if (v22 > 2)
    {
      glDisable(0xBE2u);
      *((_BYTE *)this + 419) = 0;
    }
    else
    {
      v23 = (3u >> (v22 & 7)) & 1;
      if (*(_BYTE *)(v20 + 24))
      {
        if (*((_BYTE *)this + 419) && *((_BYTE *)this + 420) && *((unsigned __int8 *)this + 421) == v23)
          goto LABEL_36;
        if (v23)
          v24 = 1;
        else
          v24 = 770;
        glBlendFuncSeparate(v24, 1u, 1u, 0x303u);
        glEnable(0xBE2u);
        *(_WORD *)((char *)this + 419) = 257;
      }
      else
      {
        if (*((_BYTE *)this + 419) && !*((_BYTE *)this + 420) && *((unsigned __int8 *)this + 421) == v23)
          goto LABEL_36;
        if (v23)
          v25 = 1;
        else
          v25 = 770;
        glBlendFuncSeparate(v25, 0x303u, 1u, 0x303u);
        glEnable(0xBE2u);
        *(_WORD *)((char *)this + 419) = 1;
      }
      *((_BYTE *)this + 421) = v23;
    }
LABEL_36:
    PSHeliumNode::renderParticle(this, (HGGPURenderer **)a2, (uint64_t)&v37.var1, v20);
  }
  glDisable(0xBE2u);
  *((_BYTE *)this + 419) = 0;
  if (*((_DWORD *)this + 106) != -1)
    *((_DWORD *)this + 106) = -1;
  PSHeliumNode::unbindSurface(this);
  glDisable(0xC11u);
  glFlush();
  ProGL::GL::~GL((ProGL::GL *)&v37.var1);
  ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)&v37.var6);
  if (*((_QWORD *)this + 107))
  {
    v26 = *((_DWORD *)this + 22);
    if (v26 >= 1)
    {
      for (j = 0; j < v26; ++j)
      {
        v28 = *(_QWORD *)(*((_QWORD *)this + 107) + 8 * j);
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
          v26 = *((_DWORD *)this + 22);
        }
      }
    }
  }
  v29 = *((_QWORD *)this + 106);
  if (v29)
    MEMORY[0x1B5E2914C](v29, 0x1000C80451B5BE8);
  *((_QWORD *)this + 106) = 0;
  v30 = *((_QWORD *)this + 107);
  if (v30)
    MEMORY[0x1B5E2914C](v30, 0x20C8093837F09);
  *((_QWORD *)this + 107) = 0;
  (*(void (**)(PSHeliumNode *, HGPage *, _QWORD, uint64_t))(*(_QWORD *)this + 496))(this, a2, 0, v35);
  if (Buffer)
  {
    HGGPURenderer::BufferCopyOpenGL(v4, (HGBuffer *)Buffer, *(HGRect *)(v36 + 20), (HGBitmap *)v36);
    (*(void (**)(char *))(*(_QWORD *)v36 + 24))(v36);
    *((_QWORD *)a2 + 1) = Buffer;
    {
      HGGLGetCurrentContext();
      isObjectRef = OZChannelBase::isObjectRef(&v37);
      PCSharedCount::PCSharedCount((PCSharedCount *)&v37);
      PSHeliumNode::RenderPage(HGPage *)::isIntel = isObjectRef;
    }
    if (PSHeliumNode::RenderPage(HGPage *)::isIntel
      && (*((_DWORD *)Buffer + 8) - *((_DWORD *)Buffer + 6)) * (*((_DWORD *)Buffer + 7) - *((_DWORD *)Buffer + 5)) >= 0x100000)
    {
      glFinish();
    }
  }
  v32 = *((_QWORD *)a2 + 1);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&v37.var9);
  return v32;
}

void sub_1B2FEEB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount a18, uint64_t a19, uint64_t a20,char a21)
{
  PCSharedCount::PCSharedCount(&a12);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&a21);
  _Unwind_Resume(a1);
}

void PSHeliumNode::renderParticle(PSHeliumNode *this, HGGPURenderer **a2, uint64_t a3, uint64_t a4)
{
  int v8;
  float v9;
  __int128 v10;

  v10 = *(_OWORD *)(a4 + 8);
  v8 = *(_DWORD *)a4;
  if ((*(_DWORD *)a4 - 3) <= 1)
  {
    PCWorkingColorVector::operator*=((float32x2_t *)&v10, *((float *)&v10 + 3));
    v8 = *(_DWORD *)a4;
  }
  switch(v8)
  {
    case 0:
      if (*((_DWORD *)this + 106) != -1)
        *((_DWORD *)this + 106) = -1;
      PSHeliumNode::unbindSurface(this);
      v9 = *(double *)(a4 + 248);
      if (*((float *)this + 108) != v9)
        *((float *)this + 108) = v9;
      break;
    case 1:
    case 2:
      if (*((_DWORD *)this + 106) != -1)
        *((_DWORD *)this + 106) = -1;
      PSHeliumNode::unbindSurface(this);
      break;
    case 3:
      PSHeliumNode::renderImageParticlePage((uint64_t)this, a2, a3, a4);
      break;
    case 4:
      PSHeliumNode::renderBitmapParticlePage((uint64_t)this, a2, a3, a4);
      break;
    case 5:
      PSHeliumNode::renderRadialParticlePage(this);
      break;
    default:
      return;
  }
}

void PSHeliumNode::unbindSurface(PSHeliumNode *this)
{
  os_unfair_lock_s *Instance;
  uint64_t Shader;
  OZPolygonAA *v4;
  OZPolygonAA *v5;
  uint64_t EdgeAATexture;
  uint64_t v7;
  GLenum Target;
  uint64_t v9;

  if (*((_BYTE *)this + 428))
  {
    Instance = (os_unfair_lock_s *)OZShaderManager::getInstance(this);
    Shader = OZShaderManager::getShader(Instance, "bilinearMaskEdgeAA");
    v4 = (OZPolygonAA *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Shader + 24))(Shader);
    v5 = (OZPolygonAA *)OZPolygonAA::getInstance(v4);
    EdgeAATexture = OZPolygonAA::getEdgeAATexture(v5);
    if (EdgeAATexture)
    {
      v7 = EdgeAATexture;
      glActiveTexture(0x84C2u);
      Target = ProGL::TextureHandle::getTarget((ProGL::Private::TextureImpl **)(v7 + 64));
      glBindTexture(Target, 0);
    }
    glActiveTexture(0x84C0u);
    *((_BYTE *)this + 428) = 0;
  }
  else if (*((_BYTE *)this + 429))
  {
    v9 = *((_QWORD *)this + 55);
    if (!v9)
      throw_PCNullPointerException(1);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    *((_BYTE *)this + 429) = 0;
  }
}

uint64_t PSHeliumNode::RenderPageMetal(PSHeliumNode *this, HGPage *a2)
{
  HGGPURenderer *v4;
  char *Buffer;
  char *v6;
  std::string *v7;
  uint64_t *TextureMetalShaderText;
  const void *v9;
  std::string *v10;
  std::string *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string __p;
  uint64_t v17;
  std::string *p_p;
  HGRect v19;

  v4 = *(HGGPURenderer **)a2;
  Buffer = (char *)*((_QWORD *)a2 + 1);
  if (Buffer)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*((_QWORD *)a2 + 1));
  }
  else
  {
    *(_QWORD *)&v19.var0 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v19.var2 = *((_QWORD *)a2 + 3);
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v4, v19, *((unsigned int *)a2 + 8), 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    *((_QWORD *)a2 + 1) = Buffer;
  }
  v7 = HGGPURenderer::ClearMetal(v4, (HGBitmap *)Buffer, *((HGRect *)a2 + 1), v6);
  v9 = (const void *)(*(uint64_t (**)(HGGPURenderer *, uint64_t *, PSHeliumNode *))(*(_QWORD *)v4 + 376))(v4, TextureMetalShaderText, this);
  if (v9)
  {
    if (v10)
    {
      v11 = v10;
      *((_DWORD *)this + 224) = 4;
      v12 = (char *)(*(uint64_t (**)(PSHeliumNode *))(*(_QWORD *)this + 48))(this);
      std::string::basic_string[abi:ne180100]<0>(&__p, v12);
      HGMetalHandler::SetDebugLabel(v11, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      HGMetalHandler::BindBuffer((HGMetalHandler *)v11, (HGBitmap *)Buffer);
      (*(void (**)(PSHeliumNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)this + 488))(this, a2, 0, v11);
      HGMetalHandler::SetScissorRect((HGMetalHandler *)v11, (__n128 *)a2 + 1);
      HGMetalHandler::SetScissorTest((uint64_t)v11, 1);
      PSHeliumNode::SpriteBatchController::SpriteBatchController((PSHeliumNode::SpriteBatchController *)&__p, a2, (HGMetalHandler *)v11, this);
      v13 = *((_QWORD *)this + 60);
      v14 = *((_QWORD *)this + 61);
      while (v13 != v14)
      {
        if (!PSHeliumNode::SpriteBatchController::add((uint64_t)&__p, v13))
        {
          if (v17)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
            v17 = 0;
          }
          PSHeliumNode::renderParticleMetal((uint64_t)this, (HGGPURenderer **)a2, (HGMetalHandler *)v11, v13);
        }
        v13 += 312;
      }
      if (v17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
        v17 = 0;
      }
      HGMetalHandler::SetScissorTest((uint64_t)v11, 0);
      (*(void (**)(PSHeliumNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)this + 496))(this, a2, 0, v11);
      HGMetalHandler::BindBuffer((HGMetalHandler *)v11, 0);
      p_p = &__p;
      std::vector<std::unique_ptr<PSHeliumNode::BatcherBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    }
  }
  return *((_QWORD *)a2 + 1);
}

void sub_1B2FEEF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *`anonymous namespace'::getTextureMetalShaderText(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
      "                out.color0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy) * hg_Params[0];\n"
      "                return out;\n"
      "            }\n"
      "        ");
  }
  if (byte_1EF07681F >= 0)
  else
}

void sub_1B2FEF054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL PSHeliumNode::SpriteBatchController::add(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v4)
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 16))(*v3, a2))
    {
      if (++v3 == v4)
        goto LABEL_4;
    }
    v6 = *v3;
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 != v6 && v7 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  *(_QWORD *)(a1 + 24) = v6;
  return v6 != 0;
}

void PSHeliumNode::renderParticleMetal(uint64_t a1, HGGPURenderer **a2, HGMetalHandler *a3, uint64_t a4)
{
  uint64_t v8;

  if (PSHeliumNode::bindMetalProgramForSprite(a1, a2, (uint64_t)a3, (_DWORD *)a4))
  {
    switch(*(_DWORD *)a4)
    {
      case 1:
        PSHeliumNode::renderLineParticlePageMetal(a1, v8, a3, a4);
        break;
      case 2:
        PSHeliumNode::renderOutlineParticlePageMetal(a1, v8, a3, a4);
        break;
      case 3:
        PSHeliumNode::commonRenderMetalTexture(a1, v8, (HGMetalTexture ***)a3, a4, (HGBitmap **)(a4 + 208));
        break;
      case 4:
        PSHeliumNode::renderBitmapParticlePageMetal(a1, a2, (HGMetalTexture ***)a3, a4);
        break;
      case 5:
        PSHeliumNode::renderRadialParticlePageMetal(a1, a2, a3, a4);
        break;
      case 6:
        PSHeliumNode::renderCircleParticlePageMetal(a1, v8, (uint64_t)a3, a4);
        break;
      default:
        return;
    }
  }
}

uint64_t PSHeliumNode::setClip(PSHeliumNode *this, const LiClipSet *a2)
{
  return LiClipSet::operator=((uint64_t)this + 632, (uint64_t)a2);
}

uint64_t PSHeliumNode::setObjectToFilmMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 680;
  if (result + 680 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  return result;
}

void PSHeliumNode::setGradient(uint64_t a1, const PCSharedCount *a2)
{
  uint64_t *v2;
  PCSharedCount v3;

  *(PCSharedCount *)(a1 + 440) = (PCSharedCount)a2->var0;
  v2 = (uint64_t *)(a1 + 448);
  PCSharedCount::PCSharedCount(&v3, a2 + 1);
  PCSharedCount::operator=(v2, (uint64_t *)&v3);
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2FEF2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

double PSHeliumNode::initGradient(PSHeliumNode *this, uint64_t **a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  double result;

  v6 = operator new[]();
  *((_QWORD *)this + 59) = v6;
  OZChannelGradient::getGradient(a2, a3, *((CGColorSpace **)this + 111), v6, 0x100u, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
  v7 = 0;
  v8 = *((_QWORD *)this + 59);
  __asm { FMOV            V0.2S, #1.0 }
  do
  {
    v14 = v8 + v7;
    *(_QWORD *)(v14 + 4) = _D0;
    *(_DWORD *)(v14 + 12) = 1065353216;
    v7 += 16;
  }
  while ((_DWORD)v7 != 4096);
  result = 0.0;
  *(_OWORD *)(v8 + 4080) = 0u;
  return result;
}

void PSHeliumNode::setMetalGradient(uint64_t a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *v3;
  PC_Sp_counted_base *var0;
  BOOL v5;
  PCSharedCount v6;

  v3 = *(PC_Sp_counted_base **)(a1 + 456);
  var0 = a2->var0;
  if (!v3)
  {
    if (!var0)
      return;
    goto LABEL_9;
  }
  if (var0)
    v5 = v3 == var0;
  else
    v5 = 0;
  if (!v5)
  {
LABEL_9:
    *(_QWORD *)(a1 + 456) = var0;
    PCSharedCount::PCSharedCount(&v6, a2 + 1);
    PCSharedCount::operator=((uint64_t *)(a1 + 464), (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
    *(_DWORD *)(a1 + 896) = 0;
  }
}

void sub_1B2FEF3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void **PSHeliumNode::setNumberOfParticles(PSHeliumNode *this, unsigned int a2)
{
  return std::vector<PSHeliumNode::Sprite>::reserve((uint64_t *)this + 60, a2);
}

void **std::vector<PSHeliumNode::Sprite>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6F96F96F96F96F97 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xD20D20D20D20D3)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::Sprite>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 312 * v6;
    std::vector<PSHeliumNode::Sprite>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<PSHeliumNode::Sprite>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B2FEF488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PSHeliumNode::Sprite>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t PSHeliumNode::addPointParticle(uint64_t a1, double *a2, _OWORD *a3, char a4, float a5)
{
  PCArray_base *v10;
  int v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  float64x2_t v26;
  int8x16_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int8x16_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t result;
  int8x16_t v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[48];
  __int128 v47;
  __int128 v48;
  _BYTE v49[48];
  int8x16_t v50;
  _OWORD v51[2];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  double v60[13];

  v60[12] = *(double *)MEMORY[0x1E0C80C00];
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)&v44 + 8));
  *(_QWORD *)&v49[40] = 0x3FF0000000000000;
  v50 = 0uLL;
  *(_QWORD *)v49 = 0x3FF0000000000000;
  *(_QWORD *)&v46[40] = 0x3FF0000000000000;
  *(_QWORD *)v46 = 0x3FF0000000000000;
  memset(&v46[8], 0, 32);
  v47 = 0u;
  v48 = 0u;
  memset(&v49[8], 0, 32);
  __asm { FMOV            V0.2D, #-1.0 }
  v51[0] = _Q0;
  v53 = 0uLL;
  v52 = 0;
  v54 = _Q0;
  v16 = -1762037865 * ((*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3);
  LODWORD(v44) = 0;
  DWORD1(v44) = v16;
  v58 = 0uLL;
  v57 = *((unint64_t *)a2 + 2);
  v56 = *(_OWORD *)a2;
  *(_OWORD *)v10 = *a3;
  BYTE8(v45) = a4;
  v17 = a5;
  v55 = a5;
  v18 = *(unsigned int *)(a1 + 644);
  if ((int)v18 <= 0)
  {
    v22 = *a2;
    v21 = a2[1];
    v23 = a2[2];
LABEL_9:
    v24 = 0;
    v25 = (float)-a5;
    v60[0] = v22 + v25;
    v60[1] = v21 + v25;
    v60[2] = v23 + 0.0;
    v60[3] = v22 + v17;
    v60[4] = v21 + v25;
    v60[5] = v23 + 0.0;
    v60[6] = v22 + v17;
    v60[7] = v21 + v17;
    v60[8] = v23 + 0.0;
    v60[9] = v22 + v25;
    v60[10] = v21 + v17;
    v60[11] = v23 + 0.0;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 680), &v60[v24], &v60[v24]);
      v43 = *(int8x16_t *)&v60[v24];
      PCRect<double>::operator|=((float64x2_t *)(a1 + 808), (float64x2_t *)&v43);
      v26.f64[0] = *(float64_t *)v51;
      if (*(double *)v51 >= 0.0 && *((double *)v51 + 1) >= 0.0)
      {
        v26.f64[1] = *((float64_t *)v51 + 1);
        v27 = (int8x16_t)vaddq_f64(v26, (float64x2_t)v50);
        v50 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v50, (float64x2_t)v43), v43, v50);
        v51[0] = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v43, (float64x2_t)v27), v43, v27), (float64x2_t)v50);
      }
      else
      {
        v50 = v43;
        v51[0] = 0uLL;
      }
      v24 += 3;
    }
    while (v24 != 12);
    v28 = *(_QWORD *)(a1 + 488);
    if (v28 >= *(_QWORD *)(a1 + 496))
    {
      v41 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)&v44);
    }
    else
    {
      *(_OWORD *)v28 = v44;
      v29 = v45;
      v30 = *(_OWORD *)v46;
      v31 = *(_OWORD *)&v46[32];
      *(_OWORD *)(v28 + 48) = *(_OWORD *)&v46[16];
      *(_OWORD *)(v28 + 64) = v31;
      *(_OWORD *)(v28 + 16) = v29;
      *(_OWORD *)(v28 + 32) = v30;
      v32 = v47;
      v33 = v48;
      v34 = *(_OWORD *)&v49[16];
      *(_OWORD *)(v28 + 112) = *(_OWORD *)v49;
      *(_OWORD *)(v28 + 128) = v34;
      *(_OWORD *)(v28 + 80) = v32;
      *(_OWORD *)(v28 + 96) = v33;
      v35 = *(_OWORD *)&v49[32];
      v36 = v50;
      v37 = v51[0];
      *(_OWORD *)(v28 + 188) = *(_OWORD *)((char *)v51 + 12);
      *(int8x16_t *)(v28 + 160) = v36;
      *(_OWORD *)(v28 + 176) = v37;
      *(_OWORD *)(v28 + 144) = v35;
      v38 = v52;
      *(_QWORD *)(v28 + 208) = v52;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      v39 = v53;
      v40 = v54;
      *(double *)(v28 + 248) = v55;
      *(_OWORD *)(v28 + 232) = v40;
      *(_OWORD *)(v28 + 216) = v39;
      *(_OWORD *)(v28 + 256) = v56;
      *(_OWORD *)(v28 + 272) = v57;
      *(_OWORD *)(v28 + 288) = v58;
      *(_BYTE *)(v28 + 304) = v59;
      v41 = v28 + 312;
      *(_QWORD *)(a1 + 488) = v28 + 312;
    }
    *(_QWORD *)(a1 + 488) = v41;
  }
  else
  {
    v19 = 0;
    v20 = 16;
    while (1)
    {
      if (v19 >= *(int *)(a1 + 644))
        PCArray_base::badIndex(v10);
      v22 = *a2;
      v21 = a2[1];
      v23 = a2[2];
      if (*(double *)(*(_QWORD *)(a1 + 648) + v20 + 8)
         + *(double *)(*(_QWORD *)(a1 + 648) + v20 - 16) * *a2
         + *(double *)(*(_QWORD *)(a1 + 648) + v20 - 8) * v21
         + *(double *)(*(_QWORD *)(a1 + 648) + v20) * v23 < 0.0)
        break;
      ++v19;
      v20 += 32;
      if (v18 == v19)
        goto LABEL_9;
    }
  }
  result = v52;
  if (v52)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
  return result;
}

void sub_1B2FEF7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v37 + 488) = v38;
  if (a37)
    (*(void (**)(uint64_t))(*(_QWORD *)a37 + 24))(a37);
  _Unwind_Resume(exception_object);
}

uint64_t PSHeliumNode::addLineParticle(uint64_t a1, double *a2, double *a3, _OWORD *a4, char a5)
{
  PCArray_base *v10;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  int8x16_t v42;
  float64x2_t v43;
  int8x16_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int8x16_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t result;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  double v63;
  int8x16_t v64;
  double v65;
  _BYTE v66[32];
  _BYTE v67[48];
  __int128 v68;
  __int128 v69;
  _BYTE v70[48];
  int8x16_t v71;
  _BYTE v72[28];
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  _BYTE v78[32];
  char v79;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v66[8]);
  *(_QWORD *)&v70[40] = 0x3FF0000000000000;
  v71 = 0uLL;
  *(_QWORD *)v70 = 0x3FF0000000000000;
  *(_QWORD *)&v67[40] = 0x3FF0000000000000;
  *(_QWORD *)v67 = 0x3FF0000000000000;
  memset(&v67[8], 0, 32);
  v68 = 0u;
  v69 = 0u;
  memset(&v70[8], 0, 32);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v72 = _Q0;
  v73 = 0;
  v74 = 0uLL;
  v75 = _Q0;
  v16 = -1762037865 * ((*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3);
  *(_DWORD *)v66 = 1;
  *(_DWORD *)&v66[4] = v16;
  *(double *)v78 = a2[2];
  v77 = *(_OWORD *)a2;
  *(_OWORD *)&v78[8] = *(_OWORD *)a3;
  *(double *)&v78[24] = a3[2];
  *(_OWORD *)&v66[8] = *a4;
  v66[24] = a5;
  v17 = *a2;
  v18 = a2[1];
  v64.i64[0] = *(uint64_t *)a2;
  *(double *)&v64.i64[1] = v18;
  v19 = a2[2];
  v65 = v19;
  v20 = *a3;
  v21 = a3[1];
  v62.i64[0] = *(uint64_t *)a3;
  *(double *)&v62.i64[1] = v21;
  v22 = a3[2];
  v63 = v22;
  v23 = *(unsigned int *)(a1 + 644);
  if ((int)v23 < 1)
  {
LABEL_18:
    PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 680), (double *)v64.i64, (double *)v64.i64);
    v61 = v64;
    PCRect<double>::operator|=((float64x2_t *)(a1 + 808), (float64x2_t *)&v61);
    v41.f64[0] = *(float64_t *)v72;
    if (*(double *)v72 >= 0.0 && *(double *)&v72[8] >= 0.0)
    {
      v41.f64[1] = *(float64_t *)&v72[8];
      v42 = (int8x16_t)vaddq_f64(v41, (float64x2_t)v71);
      v71 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v71, (float64x2_t)v61), v61, v71);
      *(float64x2_t *)v72 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v61, (float64x2_t)v42), v61, v42), (float64x2_t)v71);
    }
    else
    {
      v71 = v61;
      *(_QWORD *)v72 = 0;
      *(_QWORD *)&v72[8] = 0;
    }
    PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 680), (double *)v62.i64, (double *)v62.i64);
    v60 = v62;
    PCRect<double>::operator|=((float64x2_t *)(a1 + 808), (float64x2_t *)&v60);
    v43.f64[0] = *(float64_t *)v72;
    if (*(double *)v72 >= 0.0 && *(double *)&v72[8] >= 0.0)
    {
      v43.f64[1] = *(float64_t *)&v72[8];
      v44 = (int8x16_t)vaddq_f64(v43, (float64x2_t)v71);
      v71 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v71, (float64x2_t)v60), v60, v71);
      *(float64x2_t *)v72 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v60, (float64x2_t)v44), v60, v44), (float64x2_t)v71);
    }
    else
    {
      v71 = v60;
      *(_QWORD *)v72 = 0;
      *(_QWORD *)&v72[8] = 0;
    }
    v45 = *(_QWORD *)(a1 + 488);
    if (v45 >= *(_QWORD *)(a1 + 496))
    {
      v58 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)v66);
    }
    else
    {
      *(_OWORD *)v45 = *(_OWORD *)v66;
      v46 = *(_OWORD *)&v66[16];
      v47 = *(_OWORD *)v67;
      v48 = *(_OWORD *)&v67[32];
      *(_OWORD *)(v45 + 48) = *(_OWORD *)&v67[16];
      *(_OWORD *)(v45 + 64) = v48;
      *(_OWORD *)(v45 + 16) = v46;
      *(_OWORD *)(v45 + 32) = v47;
      v49 = v68;
      v50 = v69;
      v51 = *(_OWORD *)&v70[16];
      *(_OWORD *)(v45 + 112) = *(_OWORD *)v70;
      *(_OWORD *)(v45 + 128) = v51;
      *(_OWORD *)(v45 + 80) = v49;
      *(_OWORD *)(v45 + 96) = v50;
      v52 = *(_OWORD *)&v70[32];
      v53 = v71;
      v54 = *(_OWORD *)v72;
      *(_OWORD *)(v45 + 188) = *(_OWORD *)&v72[12];
      *(int8x16_t *)(v45 + 160) = v53;
      *(_OWORD *)(v45 + 176) = v54;
      *(_OWORD *)(v45 + 144) = v52;
      v55 = v73;
      *(_QWORD *)(v45 + 208) = v73;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
      v56 = v74;
      v57 = v75;
      *(_QWORD *)(v45 + 248) = v76;
      *(_OWORD *)(v45 + 232) = v57;
      *(_OWORD *)(v45 + 216) = v56;
      *(_OWORD *)(v45 + 256) = v77;
      *(_OWORD *)(v45 + 272) = *(_OWORD *)v78;
      *(_OWORD *)(v45 + 288) = *(_OWORD *)&v78[16];
      *(_BYTE *)(v45 + 304) = v79;
      v58 = v45 + 312;
      *(_QWORD *)(a1 + 488) = v45 + 312;
    }
    *(_QWORD *)(a1 + 488) = v58;
  }
  else
  {
    v24 = 0;
    v25 = 16;
    while (1)
    {
      if (v24 >= *(int *)(a1 + 644))
        PCArray_base::badIndex(v10);
      v26 = (double *)(*(_QWORD *)(a1 + 648) + v25);
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v30 = *v26;
      v29 = v26[1];
      v31 = v28 * v17 + v27 * v18 + *v26 * v19;
      v32 = v28 * v20 + v27 * v21 + *v26 * v22;
      v33 = v29 + v32;
      if (v29 + v31 < 0.0 && v33 < 0.0)
        break;
      if (v29 + v31 < 0.0)
      {
        v36 = v17 - v20;
        v37 = v18 - v21;
        v38 = v19 - v22;
        v39 = v28 * v36 + v27 * v37 + v30 * v38;
        if (v39 > -0.0000001 && v39 < 0.0000001)
          break;
        v40 = (-v32 - v29) / v39;
        if (v40 <= 0.0)
          break;
        v17 = v20 + v36 * v40;
        v18 = v21 + v37 * v40;
        v19 = v22 + v38 * v40;
        *(double *)v64.i64 = v17;
        *(double *)&v64.i64[1] = v18;
        v65 = v19;
      }
      else if (v33 < 0.0)
      {
        v34 = v28 * (v20 - v17) + v27 * (v21 - v18) + v30 * (v22 - v19);
        if (v34 > -0.0000001 && v34 < 0.0000001)
          break;
        v35 = (-v31 - v29) / v34;
        if (v35 <= 0.0)
          break;
        v20 = v17 + (v20 - v17) * v35;
        v21 = v18 + (v21 - v18) * v35;
        v22 = v19 + (v22 - v19) * v35;
        *(double *)v62.i64 = v20;
        *(double *)&v62.i64[1] = v21;
        v63 = v22;
      }
      ++v24;
      v25 += 32;
      if (v23 == v24)
        goto LABEL_18;
    }
  }
  result = v73;
  if (v73)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
  return result;
}

void sub_1B2FEFC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)(v46 + 488) = v47;
  if (a46)
    (*(void (**)(uint64_t))(*(_QWORD *)a46 + 24))(a46);
  _Unwind_Resume(exception_object);
}

uint64_t PSHeliumNode::addOutlineParticle(uint64_t a1, double *a2, double *a3, _OWORD *a4, char a5)
{
  _OWORD *v10;
  int v16;
  uint64_t i;
  _OWORD *v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  PCArray_base *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  int8x16_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t result;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  float64x2_t v52[8];
  uint64_t *v53[11];
  uint64_t *v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[48];
  __int128 v58;
  __int128 v59;
  _BYTE v60[48];
  int8x16_t v61;
  _BYTE v62[28];
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)&v55 + 8));
  *(_QWORD *)&v60[40] = 0x3FF0000000000000;
  v61 = 0uLL;
  *(_QWORD *)v60 = 0x3FF0000000000000;
  *(_QWORD *)&v57[40] = 0x3FF0000000000000;
  *(_QWORD *)v57 = 0x3FF0000000000000;
  memset(&v57[8], 0, 32);
  v58 = 0u;
  v59 = 0u;
  memset(&v60[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v62 = _Q1;
  v63 = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v16 = -1762037865 * ((*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3);
  LODWORD(v55) = 2;
  DWORD1(v55) = v16;
  if (v57 != (_BYTE *)a2)
  {
    for (i = 0; i != 16; i += 4)
    {
      v18 = &v57[i * 8];
      v19 = *(_OWORD *)&a2[i + 2];
      *v18 = *(_OWORD *)&a2[i];
      v18[1] = v19;
    }
  }
  *v10 = *a4;
  BYTE8(v56) = a5;
  v64 = *(_OWORD *)a3;
  v65 = *((_OWORD *)a3 + 1);
  v20 = *a3;
  v21 = a3[1];
  v23 = a3[2];
  v22 = a3[3];
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v53);
  std::vector<LiPolygon::PosEdge>::resize(v54, 4uLL);
  v25 = v54;
  v26 = *v54;
  *(double *)v26 = v20;
  *(double *)(v26 + 8) = v21;
  *(_QWORD *)(v26 + 16) = 0;
  *(double *)(v26 + 32) = v20 + v23;
  *(double *)(v26 + 40) = v21;
  *(_QWORD *)(v26 + 48) = 0;
  *(double *)(v26 + 64) = v20 + v23;
  *(double *)(v26 + 72) = v21 + v22;
  *(_QWORD *)(v26 + 80) = 0;
  *(double *)(v26 + 96) = v20;
  *(double *)(v26 + 104) = v21 + v22;
  *(_QWORD *)(v26 + 112) = 0;
  v27 = *(unsigned int *)(a1 + 644);
  if ((int)v27 >= 1)
  {
    for (j = 0; j != v27; ++j)
    {
      memset(v52, 0, 32);
      if (j >= *(int *)(a1 + 644))
        PCArray_base::badIndex(v24);
      PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)(*(_QWORD *)(a1 + 648) + 32 * j), v52[0].f64);
      v24 = (PCArray_base *)LiImagePolygon::clip(v53, v52, 0);
    }
    v25 = v54;
    v26 = *v54;
  }
  if ((int)((unint64_t)(v25[1] - v26) >> 5) >= 3)
  {
    PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)a2, (uint64_t)v52);
    v29 = *v54;
    if ((int)((unint64_t)(v54[1] - *v54) >> 5) >= 1)
    {
      v30 = 0;
      v31 = 0;
      do
      {
        v50 = *(int8x16_t *)(v29 + v30);
        v51 = 0;
        PCMatrix44Tmpl<double>::transform<double>(v52[0].f64, (double *)v50.i64, (double *)v50.i64);
        v49 = v50;
        PCRect<double>::operator|=((float64x2_t *)(a1 + 808), (float64x2_t *)&v49);
        v32.f64[0] = *(float64_t *)v62;
        if (*(double *)v62 >= 0.0 && *(double *)&v62[8] >= 0.0)
        {
          v32.f64[1] = *(float64_t *)&v62[8];
          v33 = (int8x16_t)vaddq_f64(v32, (float64x2_t)v61);
          v61 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v61, (float64x2_t)v49), v49, v61);
          *(float64x2_t *)v62 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v49, (float64x2_t)v33), v49, v33), (float64x2_t)v61);
        }
        else
        {
          v61 = v49;
          *(_QWORD *)v62 = 0;
          *(_QWORD *)&v62[8] = 0;
        }
        ++v31;
        v29 = *v54;
        v30 += 32;
      }
      while (v31 < (int)((unint64_t)(v54[1] - *v54) >> 5));
    }
    v34 = *(_QWORD *)(a1 + 488);
    if (v34 >= *(_QWORD *)(a1 + 496))
    {
      v47 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)&v55);
    }
    else
    {
      *(_OWORD *)v34 = v55;
      v35 = v56;
      v36 = *(_OWORD *)v57;
      v37 = *(_OWORD *)&v57[32];
      *(_OWORD *)(v34 + 48) = *(_OWORD *)&v57[16];
      *(_OWORD *)(v34 + 64) = v37;
      *(_OWORD *)(v34 + 16) = v35;
      *(_OWORD *)(v34 + 32) = v36;
      v38 = v58;
      v39 = v59;
      v40 = *(_OWORD *)&v60[16];
      *(_OWORD *)(v34 + 112) = *(_OWORD *)v60;
      *(_OWORD *)(v34 + 128) = v40;
      *(_OWORD *)(v34 + 80) = v38;
      *(_OWORD *)(v34 + 96) = v39;
      v41 = *(_OWORD *)&v60[32];
      v42 = v61;
      v43 = *(_OWORD *)v62;
      *(_OWORD *)(v34 + 188) = *(_OWORD *)&v62[12];
      *(int8x16_t *)(v34 + 160) = v42;
      *(_OWORD *)(v34 + 176) = v43;
      *(_OWORD *)(v34 + 144) = v41;
      v44 = v63;
      *(_QWORD *)(v34 + 208) = v63;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      v45 = v64;
      v46 = v65;
      *(_QWORD *)(v34 + 248) = v66;
      *(_OWORD *)(v34 + 232) = v46;
      *(_OWORD *)(v34 + 216) = v45;
      *(_OWORD *)(v34 + 256) = v67;
      *(_OWORD *)(v34 + 272) = v68;
      *(_OWORD *)(v34 + 288) = v69;
      *(_BYTE *)(v34 + 304) = v70;
      v47 = v34 + 312;
      *(_QWORD *)(a1 + 488) = v34 + 312;
    }
    *(_QWORD *)(a1 + 488) = v47;
  }
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v53);
  result = v63;
  if (v63)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
  return result;
}

void sub_1B2FF004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;

  *(_QWORD *)(v72 + 488) = v73;
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a32);
  if (a72)
    (*(void (**)(uint64_t))(*(_QWORD *)a72 + 24))(a72);
  _Unwind_Resume(a1);
}

void PSHeliumNode::commonImageSpriteSetup(double *a1, uint64_t a2, double *a3, double *a4, _OWORD *a5, char a6)
{
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t i;
  __int128 v14;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  PCArray_base *v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  __int128 v39;
  uint64_t *v40[8];
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  double v45[14];

  v9 = a1;
  *(_DWORD *)a2 = 3;
  *(_DWORD *)(a2 + 4) = -1762037865 * ((*((_QWORD *)a1 + 61) - *((_QWORD *)a1 + 60)) >> 3);
  v10 = a2 + 32;
  if ((double *)(a2 + 32) != a3)
  {
    v11 = 0;
    v12 = a3;
    do
    {
      for (i = 0; i != 4; ++i)
        *(double *)(v10 + i * 8) = v12[i];
      ++v11;
      v10 += 32;
      v12 += 4;
    }
    while (v11 != 4);
  }
  *(_OWORD *)(a2 + 8) = *a5;
  *(_BYTE *)(a2 + 24) = a6;
  v14 = *(_OWORD *)a4;
  *(_OWORD *)(a2 + 232) = *((_OWORD *)a4 + 1);
  *(_OWORD *)(a2 + 216) = v14;
  *(_BYTE *)(a2 + 304) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 176) = _Q0;
  v20 = *((unsigned int *)a1 + 161);
  if ((int)v20 >= 1)
  {
    v21 = 0;
    do
    {
      v44 = 0u;
      *(_OWORD *)v45 = 0u;
      if (v21 >= *((int *)v9 + 161))
        PCArray_base::badIndex((PCArray_base *)a1);
      a1 = PCMatrix44Tmpl<double>::transform_row<double>(a3, (double *)(*((_QWORD *)v9 + 81) + 32 * v21), (double *)&v44);
      v22 = v44;
      v23 = -0.0;
      v24 = a4[2];
      if (*(double *)&v44 > 0.0)
        v24 = -0.0;
      v25 = *a4 + v24;
      if (*((double *)&v44 + 1) <= 0.0)
        v23 = a4[3];
      v26 = *(double *)&v44 * v25 + *((double *)&v44 + 1) * (a4[1] + v23);
      v27 = v45[1];
      v28 = v45[0] * 0.0;
      if (v45[1] + v45[0] * 0.0 + v26 < 0.0)
      {
        *(_BYTE *)(a2 + 304) = 1;
        v29 = -0.0;
        v30 = a4[2];
        if (*(double *)&v22 <= 0.0)
          v30 = -0.0;
        v31 = *a4 + v30;
        if (*((double *)&v22 + 1) > 0.0)
          v29 = a4[3];
        if (v27 + v28 + *(double *)&v22 * v31 + *((double *)&v22 + 1) * (a4[1] + v29) <= 0.0)
          return;
      }
    }
    while (++v21 != v20);
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)(v9 + 85), (__int128 *)a3, (uint64_t)&v44);
  if (!*(_BYTE *)(a2 + 304))
  {
    PCMatrix44Tmpl<double>::transformRect<double>((double *)&v44, a4, a2 + 160);
LABEL_34:
    PCRect<double>::operator|=((float64x2_t *)(v9 + 101), (float64x2_t *)(a2 + 160));
    return;
  }
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v40);
  LiImagePolygon::set((uint64_t)v40, a4, 0);
  if ((int)v20 >= 1)
  {
    for (j = 0; j != v20; ++j)
    {
      v38 = 0u;
      v39 = 0u;
      if (j >= *((int *)v9 + 161))
        PCArray_base::badIndex(v32);
      PCMatrix44Tmpl<double>::transform_row<double>(a3, (double *)(*((_QWORD *)v9 + 81) + 32 * j), v38.f64);
      v32 = (PCArray_base *)LiImagePolygon::clip(v40, &v38, 0);
    }
  }
  if ((int)((unint64_t)(v42 - v41) >> 5) >= 1)
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v38 = 0uLL;
      *(_QWORD *)&v39 = 0;
      PCMatrix44Tmpl<double>::transform<double>((double *)&v44, (double *)(*v43 + v34), v38.f64);
      v37 = v38;
      PCRect<double>::operator|=((float64x2_t *)(a2 + 160), &v37);
      ++v35;
      v34 += 32;
    }
    while (v35 < (int)((unint64_t)(v42 - v41) >> 5));
  }
  if (*(double *)(a2 + 176) < 0.0)
  {
    LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v40);
    return;
  }
  v36 = *(double *)(a2 + 184);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v40);
  if (v36 >= 0.0)
    goto LABEL_34;
}

void sub_1B2FF03A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)va);
  _Unwind_Resume(a1);
}

uint64_t PSHeliumNode::addImageParticle(uint64_t a1, double *a2, _QWORD *a3, double *a4, _OWORD *a5, char a6)
{
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _OWORD v40[2];
  _BYTE v41[48];
  __int128 v42;
  __int128 v43;
  _BYTE v44[48];
  __int128 v45;
  _BYTE v46[28];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)v40 + 8));
  *(_QWORD *)&v44[40] = 0x3FF0000000000000;
  v45 = 0uLL;
  *(_QWORD *)v44 = 0x3FF0000000000000;
  *(_QWORD *)&v41[40] = 0x3FF0000000000000;
  *(_QWORD *)v41 = 0x3FF0000000000000;
  memset(&v41[8], 0, 32);
  v42 = 0u;
  v43 = 0u;
  memset(&v44[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v46 = _Q1;
  v48 = 0uLL;
  v47 = 0;
  v49 = _Q1;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  PSHeliumNode::commonImageSpriteSetup((double *)a1, (uint64_t)v40, a2, a4, a5, a6);
  *(_DWORD *)&v46[24] = ProGL::TextureHandle::getName((HGGLBlendingInfo **)(*a3 + 64));
  v17 = (std::__shared_weak_count *)a3[1];
  v38 = *a3;
  v39 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  std::__tree<std::shared_ptr<PCImage>>::__emplace_unique_key_args<std::shared_ptr<PCImage>,std::shared_ptr<PCImage>>((uint64_t **)(a1 + 584), &v38, (uint64_t)&v38);
  v20 = v39;
  if (v39)
  {
    v21 = (unint64_t *)&v39->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_QWORD *)(a1 + 488);
  if (v23 >= *(_QWORD *)(a1 + 496))
  {
    v36 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)v40);
  }
  else
  {
    *(_OWORD *)v23 = v40[0];
    v24 = v40[1];
    v25 = *(_OWORD *)v41;
    v26 = *(_OWORD *)&v41[32];
    *(_OWORD *)(v23 + 48) = *(_OWORD *)&v41[16];
    *(_OWORD *)(v23 + 64) = v26;
    *(_OWORD *)(v23 + 16) = v24;
    *(_OWORD *)(v23 + 32) = v25;
    v27 = v42;
    v28 = v43;
    v29 = *(_OWORD *)&v44[16];
    *(_OWORD *)(v23 + 112) = *(_OWORD *)v44;
    *(_OWORD *)(v23 + 128) = v29;
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = v28;
    v30 = *(_OWORD *)&v44[32];
    v31 = v45;
    v32 = *(_OWORD *)v46;
    *(_OWORD *)(v23 + 188) = *(_OWORD *)&v46[12];
    *(_OWORD *)(v23 + 160) = v31;
    *(_OWORD *)(v23 + 176) = v32;
    *(_OWORD *)(v23 + 144) = v30;
    v33 = v47;
    *(_QWORD *)(v23 + 208) = v47;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
    v34 = v48;
    v35 = v49;
    *(_QWORD *)(v23 + 248) = v50;
    *(_OWORD *)(v23 + 232) = v35;
    *(_OWORD *)(v23 + 216) = v34;
    *(_OWORD *)(v23 + 256) = v51;
    *(_OWORD *)(v23 + 272) = v52;
    *(_OWORD *)(v23 + 288) = v53;
    *(_BYTE *)(v23 + 304) = v54;
    v36 = v23 + 312;
    *(_QWORD *)(a1 + 488) = v23 + 312;
  }
  *(_QWORD *)(a1 + 488) = v36;
  result = v47;
  if (v47)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
  return result;
}

{
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  std::__shared_weak_count *v41;
  _OWORD v42[2];
  _BYTE v43[48];
  __int128 v44;
  __int128 v45;
  _BYTE v46[48];
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)v42 + 8));
  *(_QWORD *)&v46[40] = 0x3FF0000000000000;
  v47 = 0uLL;
  *(_QWORD *)v46 = 0x3FF0000000000000;
  *(_QWORD *)&v43[40] = 0x3FF0000000000000;
  *(_QWORD *)v43 = 0x3FF0000000000000;
  memset(&v43[8], 0, 32);
  v44 = 0u;
  v45 = 0u;
  memset(&v46[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  v48[0] = _Q1;
  v50 = 0uLL;
  v49 = 0;
  v51 = _Q1;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  PSHeliumNode::commonImageSpriteSetup((double *)a1, (uint64_t)v42, a2, a4, a5, a6);
  v17 = *(_QWORD *)(*a3 + 64);
  if (v17)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v17 + 16))(*(_QWORD *)(*a3 + 64));
    v18 = v49;
    if (v49 == v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      goto LABEL_8;
    }
  }
  else
  {
    v18 = v49;
    if (!v49)
      goto LABEL_8;
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  v49 = v17;
LABEL_8:
  v19 = (std::__shared_weak_count *)a3[1];
  v40 = *a3;
  v41 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::__tree<std::shared_ptr<PCImage>>::__emplace_unique_key_args<std::shared_ptr<PCImage>,std::shared_ptr<PCImage>>((uint64_t **)(a1 + 584), &v40, (uint64_t)&v40);
  v22 = v41;
  if (v41)
  {
    v23 = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(_QWORD *)(a1 + 488);
  if (v25 >= *(_QWORD *)(a1 + 496))
  {
    v38 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)v42);
  }
  else
  {
    *(_OWORD *)v25 = v42[0];
    v26 = v42[1];
    v27 = *(_OWORD *)v43;
    v28 = *(_OWORD *)&v43[32];
    *(_OWORD *)(v25 + 48) = *(_OWORD *)&v43[16];
    *(_OWORD *)(v25 + 64) = v28;
    *(_OWORD *)(v25 + 16) = v26;
    *(_OWORD *)(v25 + 32) = v27;
    v29 = v44;
    v30 = v45;
    v31 = *(_OWORD *)&v46[16];
    *(_OWORD *)(v25 + 112) = *(_OWORD *)v46;
    *(_OWORD *)(v25 + 128) = v31;
    *(_OWORD *)(v25 + 80) = v29;
    *(_OWORD *)(v25 + 96) = v30;
    v32 = *(_OWORD *)&v46[32];
    v33 = v47;
    v34 = v48[0];
    *(_OWORD *)(v25 + 188) = *(_OWORD *)((char *)v48 + 12);
    *(_OWORD *)(v25 + 160) = v33;
    *(_OWORD *)(v25 + 176) = v34;
    *(_OWORD *)(v25 + 144) = v32;
    v35 = v49;
    *(_QWORD *)(v25 + 208) = v49;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
    v36 = v50;
    v37 = v51;
    *(_QWORD *)(v25 + 248) = v52;
    *(_OWORD *)(v25 + 232) = v37;
    *(_OWORD *)(v25 + 216) = v36;
    *(_OWORD *)(v25 + 256) = v53;
    *(_OWORD *)(v25 + 272) = v54;
    *(_OWORD *)(v25 + 288) = v55;
    *(_BYTE *)(v25 + 304) = v56;
    v38 = v25 + 312;
    *(_QWORD *)(a1 + 488) = v25 + 312;
  }
  *(_QWORD *)(a1 + 488) = v38;
  result = v49;
  if (v49)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
  return result;
}

void sub_1B2FF0600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v38 + 488) = v39;
  if (a38)
    (*(void (**)(uint64_t))(*(_QWORD *)a38 + 24))(a38);
  _Unwind_Resume(exception_object);
}

uint64_t PSHeliumNode::addImageParticle(uint64_t a1, double *a2, __int128 *a3, double *a4, _OWORD *a5, char a6)
{
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  _OWORD v39[2];
  _BYTE v40[48];
  __int128 v41;
  __int128 v42;
  _BYTE v43[48];
  __int128 v44;
  _BYTE v45[28];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  unint64_t *v54;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)v39 + 8));
  *(_QWORD *)&v43[40] = 0x3FF0000000000000;
  v44 = 0uLL;
  *(_QWORD *)v43 = 0x3FF0000000000000;
  *(_QWORD *)&v40[40] = 0x3FF0000000000000;
  *(_QWORD *)v40 = 0x3FF0000000000000;
  memset(&v40[8], 0, 32);
  v41 = 0u;
  v42 = 0u;
  memset(&v43[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v45 = _Q1;
  v47 = 0uLL;
  v46 = 0;
  v48 = _Q1;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  PSHeliumNode::commonImageSpriteSetup((double *)a1, (uint64_t)v39, a2, a4, a5, a6);
  LODWORD(v39[0]) = 4;
  v16 = *(_QWORD **)(a1 + 560);
  if (!v16)
    goto LABEL_12;
  v17 = *(_QWORD *)a3;
  v18 = (_QWORD *)(a1 + 560);
  do
  {
    v19 = v16[4];
    _CF = v19 >= v17;
    if (v19 >= v17)
      v21 = v16;
    else
      v21 = v16 + 1;
    if (_CF)
      v18 = v16;
    v16 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 != (_QWORD *)(a1 + 560) && v17 >= v18[4])
  {
    *(_DWORD *)&v45[24] = *((_DWORD *)v18 + 10);
  }
  else
  {
LABEL_12:
    std::vector<std::shared_ptr<std::vector<unsigned char>>>::push_back[abi:ne180100]((char **)(a1 + 608), a3);
    v22 = *(_DWORD *)(a1 + 576);
    v38 = *(_QWORD *)a3;
    v54 = &v38;
    *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)(a1 + 552), &v38, (uint64_t)&std::piecewise_construct, &v54)+ 10) = v22;
    *(_DWORD *)&v45[24] = *(_DWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 576) = *(_DWORD *)&v45[24] + 1;
  }
  v23 = *(_QWORD *)(a1 + 488);
  if (v23 >= *(_QWORD *)(a1 + 496))
  {
    v36 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)v39);
  }
  else
  {
    *(_OWORD *)v23 = v39[0];
    v24 = v39[1];
    v25 = *(_OWORD *)v40;
    v26 = *(_OWORD *)&v40[32];
    *(_OWORD *)(v23 + 48) = *(_OWORD *)&v40[16];
    *(_OWORD *)(v23 + 64) = v26;
    *(_OWORD *)(v23 + 16) = v24;
    *(_OWORD *)(v23 + 32) = v25;
    v27 = v41;
    v28 = v42;
    v29 = *(_OWORD *)&v43[16];
    *(_OWORD *)(v23 + 112) = *(_OWORD *)v43;
    *(_OWORD *)(v23 + 128) = v29;
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = v28;
    v30 = *(_OWORD *)&v43[32];
    v31 = v44;
    v32 = *(_OWORD *)v45;
    *(_OWORD *)(v23 + 188) = *(_OWORD *)&v45[12];
    *(_OWORD *)(v23 + 160) = v31;
    *(_OWORD *)(v23 + 176) = v32;
    *(_OWORD *)(v23 + 144) = v30;
    v33 = v46;
    *(_QWORD *)(v23 + 208) = v46;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
    v34 = v47;
    v35 = v48;
    *(_QWORD *)(v23 + 248) = v49;
    *(_OWORD *)(v23 + 232) = v35;
    *(_OWORD *)(v23 + 216) = v34;
    *(_OWORD *)(v23 + 256) = v50;
    *(_OWORD *)(v23 + 272) = v51;
    *(_OWORD *)(v23 + 288) = v52;
    *(_BYTE *)(v23 + 304) = v53;
    v36 = v23 + 312;
    *(_QWORD *)(a1 + 488) = v23 + 312;
  }
  *(_QWORD *)(a1 + 488) = v36;
  result = v46;
  if (v46)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
  return result;
}

void sub_1B2FF088C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v36 + 488) = v37;
  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 24))(a36);
  _Unwind_Resume(exception_object);
}

uint64_t PSHeliumNode::addImageParticle(uint64_t a1, double *a2, unint64_t *a3, double *a4, _OWORD *a5, char a6)
{
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  _OWORD v44[2];
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  __int128 v49;
  _BYTE v50[28];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  unint64_t *v59;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)v44 + 8));
  *(_QWORD *)&v48[40] = 0x3FF0000000000000;
  v49 = 0uLL;
  *(_QWORD *)v48 = 0x3FF0000000000000;
  *(_QWORD *)&v45[40] = 0x3FF0000000000000;
  *(_QWORD *)v45 = 0x3FF0000000000000;
  memset(&v45[8], 0, 32);
  v46 = 0u;
  v47 = 0u;
  memset(&v48[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v50 = _Q1;
  v52 = 0uLL;
  v51 = 0;
  v53 = _Q1;
  v56 = 0u;
  v57 = 0u;
  v55 = 0u;
  PSHeliumNode::commonImageSpriteSetup((double *)a1, (uint64_t)v44, a2, a4, a5, a6);
  v16 = *a3;
  v17 = *(_QWORD **)(a1 + 536);
  if (!v17)
    goto LABEL_12;
  v18 = (_QWORD *)(a1 + 536);
  do
  {
    v19 = v17[4];
    _CF = v19 >= v16;
    if (v19 >= v16)
      v21 = v17;
    else
      v21 = v17 + 1;
    if (_CF)
      v18 = v17;
    v17 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 != (_QWORD *)(a1 + 536) && v16 >= v18[4])
  {
    *(_DWORD *)&v50[24] = *((_DWORD *)v18 + 10);
  }
  else
  {
LABEL_12:
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)a1 + 120))(a1, *(unsigned int *)(a1 + 576), v16);
    if (*(_BYTE *)(a1 + 416))
    {
      if ((v22 & 1) == 0
      {
        PSHeliumNode::addImageParticle(PCMatrix44Tmpl<double> *,HGRef<HGNode> const&,PCRect<double> const&,PCWorkingColorVector const&,BOOL)::maxBitmapCacheSize = (uint64_t)((double)(unint64_t)getPhysicalMemory() * 0.01);
      }
      v23 = vcvtd_n_s64_f64(a4[2] * a4[3] * 4.0, 2uLL);
      v24 = atomic_load(&gBitmapCacheSize);
      if ((uint64_t)(v24 + v23) >= PSHeliumNode::addImageParticle(PCMatrix44Tmpl<double> *,HGRef<HGNode> const&,PCRect<double> const&,PCWorkingColorVector const&,BOOL)::maxBitmapCacheSize)
      {
        v26 = 16;
      }
      else
      {
        do
          v25 = __ldaxr(&gBitmapCacheSize);
        while (__stlxr(v25 + v23, &gBitmapCacheSize));
        *(_QWORD *)(a1 + 872) += v23;
        v26 = 2;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 136))(a1, *(unsigned int *)(a1 + 576), v26);
    }
    v27 = *(_DWORD *)(a1 + 576);
    v43 = *a3;
    v59 = &v43;
    *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)(a1 + 528), &v43, (uint64_t)&std::piecewise_construct, &v59)+ 10) = v27;
    *(_DWORD *)&v50[24] = *(_DWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 576) = *(_DWORD *)&v50[24] + 1;
  }
  v28 = *(_QWORD *)(a1 + 488);
  if (v28 >= *(_QWORD *)(a1 + 496))
  {
    v41 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)v44);
  }
  else
  {
    *(_OWORD *)v28 = v44[0];
    v29 = v44[1];
    v30 = *(_OWORD *)v45;
    v31 = *(_OWORD *)&v45[32];
    *(_OWORD *)(v28 + 48) = *(_OWORD *)&v45[16];
    *(_OWORD *)(v28 + 64) = v31;
    *(_OWORD *)(v28 + 16) = v29;
    *(_OWORD *)(v28 + 32) = v30;
    v32 = v46;
    v33 = v47;
    v34 = *(_OWORD *)&v48[16];
    *(_OWORD *)(v28 + 112) = *(_OWORD *)v48;
    *(_OWORD *)(v28 + 128) = v34;
    *(_OWORD *)(v28 + 80) = v32;
    *(_OWORD *)(v28 + 96) = v33;
    v35 = *(_OWORD *)&v48[32];
    v36 = v49;
    v37 = *(_OWORD *)v50;
    *(_OWORD *)(v28 + 188) = *(_OWORD *)&v50[12];
    *(_OWORD *)(v28 + 160) = v36;
    *(_OWORD *)(v28 + 176) = v37;
    *(_OWORD *)(v28 + 144) = v35;
    v38 = v51;
    *(_QWORD *)(v28 + 208) = v51;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
    v39 = v52;
    v40 = v53;
    *(_QWORD *)(v28 + 248) = v54;
    *(_OWORD *)(v28 + 232) = v40;
    *(_OWORD *)(v28 + 216) = v39;
    *(_OWORD *)(v28 + 256) = v55;
    *(_OWORD *)(v28 + 272) = v56;
    *(_OWORD *)(v28 + 288) = v57;
    *(_BYTE *)(v28 + 304) = v58;
    v41 = v28 + 312;
    *(_QWORD *)(a1 + 488) = v28 + 312;
  }
  *(_QWORD *)(a1 + 488) = v41;
  result = v51;
  if (v51)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
  return result;
}

void sub_1B2FF0BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 24))(a36);
  _Unwind_Resume(a1);
}

uint64_t getPhysicalMemory(void)
{
  unint64_t *v1;
  uint64_t v2;

  v2 = 0;
  PCInfo::getMemoryInfo((PCInfo *)&v2, 0, 0, 0, 0, 0, 0, 0, v1);
  return v2;
}

void sub_1B2FF0EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v38 + 488) = v39;
  if (a38)
    (*(void (**)(uint64_t))(*(_QWORD *)a38 + 24))(a38);
  _Unwind_Resume(exception_object);
}

uint64_t PSHeliumNode::addRadialParticle(uint64_t a1, double *a2, double *a3, _OWORD *a4, char a5)
{
  _OWORD *v10;
  int v16;
  uint64_t i;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  PCArray_base *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  int8x16_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int8x16_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t result;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  float64x2_t v53[8];
  uint64_t *v54[11];
  uint64_t *v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[48];
  __int128 v59;
  __int128 v60;
  _BYTE v61[48];
  int8x16_t v62;
  _BYTE v63[28];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)&v56 + 8));
  *(_QWORD *)&v61[40] = 0x3FF0000000000000;
  v62 = 0uLL;
  *(_QWORD *)v61 = 0x3FF0000000000000;
  *(_QWORD *)&v58[40] = 0x3FF0000000000000;
  *(_QWORD *)v58 = 0x3FF0000000000000;
  memset(&v58[8], 0, 32);
  v59 = 0u;
  v60 = 0u;
  memset(&v61[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v63 = _Q1;
  v64 = 0;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v16 = -1762037865 * ((*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3);
  LODWORD(v56) = 5;
  DWORD1(v56) = v16;
  if (v58 != (_BYTE *)a2)
  {
    for (i = 0; i != 16; i += 4)
    {
      v18 = &v58[i * 8];
      v19 = *(_OWORD *)&a2[i + 2];
      *v18 = *(_OWORD *)&a2[i];
      v18[1] = v19;
    }
  }
  *v10 = *a4;
  BYTE8(v57) = a5;
  v20 = *((_OWORD *)a3 + 1);
  v65 = *(_OWORD *)a3;
  v66 = v20;
  *(_BYTE *)(a1 + 418) = 1;
  v21 = *a3;
  v22 = a3[1];
  v24 = a3[2];
  v23 = a3[3];
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v54);
  std::vector<LiPolygon::PosEdge>::resize(v55, 4uLL);
  v26 = v55;
  v27 = *v55;
  *(double *)v27 = v21;
  *(double *)(v27 + 8) = v22;
  *(_QWORD *)(v27 + 16) = 0;
  *(double *)(v27 + 32) = v21 + v24;
  *(double *)(v27 + 40) = v22;
  *(_QWORD *)(v27 + 48) = 0;
  *(double *)(v27 + 64) = v21 + v24;
  *(double *)(v27 + 72) = v22 + v23;
  *(_QWORD *)(v27 + 80) = 0;
  *(double *)(v27 + 96) = v21;
  *(double *)(v27 + 104) = v22 + v23;
  *(_QWORD *)(v27 + 112) = 0;
  v28 = *(unsigned int *)(a1 + 644);
  if ((int)v28 >= 1)
  {
    for (j = 0; j != v28; ++j)
    {
      memset(v53, 0, 32);
      if (j >= *(int *)(a1 + 644))
        PCArray_base::badIndex(v25);
      PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)(*(_QWORD *)(a1 + 648) + 32 * j), v53[0].f64);
      v25 = (PCArray_base *)LiImagePolygon::clip(v54, v53, 0);
    }
    v26 = v55;
    v27 = *v55;
  }
  if ((int)((unint64_t)(v26[1] - v27) >> 5) >= 3)
  {
    PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)a2, (uint64_t)v53);
    v30 = *v55;
    if ((int)((unint64_t)(v55[1] - *v55) >> 5) >= 1)
    {
      v31 = 0;
      v32 = 0;
      do
      {
        v51 = *(int8x16_t *)(v30 + v31);
        v52 = 0;
        PCMatrix44Tmpl<double>::transform<double>(v53[0].f64, (double *)v51.i64, (double *)v51.i64);
        v50 = v51;
        PCRect<double>::operator|=((float64x2_t *)(a1 + 808), (float64x2_t *)&v50);
        v33.f64[0] = *(float64_t *)v63;
        if (*(double *)v63 >= 0.0 && *(double *)&v63[8] >= 0.0)
        {
          v33.f64[1] = *(float64_t *)&v63[8];
          v34 = (int8x16_t)vaddq_f64(v33, (float64x2_t)v62);
          v62 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v62, (float64x2_t)v50), v50, v62);
          *(float64x2_t *)v63 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v50, (float64x2_t)v34), v50, v34), (float64x2_t)v62);
        }
        else
        {
          v62 = v50;
          *(_QWORD *)v63 = 0;
          *(_QWORD *)&v63[8] = 0;
        }
        ++v32;
        v30 = *v55;
        v31 += 32;
      }
      while (v32 < (int)((unint64_t)(v55[1] - *v55) >> 5));
    }
    v35 = *(_QWORD *)(a1 + 488);
    if (v35 >= *(_QWORD *)(a1 + 496))
    {
      v48 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)&v56);
    }
    else
    {
      *(_OWORD *)v35 = v56;
      v36 = v57;
      v37 = *(_OWORD *)v58;
      v38 = *(_OWORD *)&v58[32];
      *(_OWORD *)(v35 + 48) = *(_OWORD *)&v58[16];
      *(_OWORD *)(v35 + 64) = v38;
      *(_OWORD *)(v35 + 16) = v36;
      *(_OWORD *)(v35 + 32) = v37;
      v39 = v59;
      v40 = v60;
      v41 = *(_OWORD *)&v61[16];
      *(_OWORD *)(v35 + 112) = *(_OWORD *)v61;
      *(_OWORD *)(v35 + 128) = v41;
      *(_OWORD *)(v35 + 80) = v39;
      *(_OWORD *)(v35 + 96) = v40;
      v42 = *(_OWORD *)&v61[32];
      v43 = v62;
      v44 = *(_OWORD *)v63;
      *(_OWORD *)(v35 + 188) = *(_OWORD *)&v63[12];
      *(int8x16_t *)(v35 + 160) = v43;
      *(_OWORD *)(v35 + 176) = v44;
      *(_OWORD *)(v35 + 144) = v42;
      v45 = v64;
      *(_QWORD *)(v35 + 208) = v64;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      v46 = v65;
      v47 = v66;
      *(_QWORD *)(v35 + 248) = v67;
      *(_OWORD *)(v35 + 232) = v47;
      *(_OWORD *)(v35 + 216) = v46;
      *(_OWORD *)(v35 + 256) = v68;
      *(_OWORD *)(v35 + 272) = v69;
      *(_OWORD *)(v35 + 288) = v70;
      *(_BYTE *)(v35 + 304) = v71;
      v48 = v35 + 312;
      *(_QWORD *)(a1 + 488) = v35 + 312;
    }
    *(_QWORD *)(a1 + 488) = v48;
  }
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v54);
  result = v64;
  if (v64)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  return result;
}

void sub_1B2FF12E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;

  *(_QWORD *)(v72 + 488) = v73;
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a32);
  if (a72)
    (*(void (**)(uint64_t))(*(_QWORD *)a72 + 24))(a72);
  _Unwind_Resume(a1);
}

uint64_t PSHeliumNode::addCircleParticle(uint64_t a1, double *a2, double *a3, _OWORD *a4, char a5)
{
  _OWORD *v10;
  int v16;
  uint64_t i;
  _OWORD *v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  PCArray_base *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  int8x16_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t result;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  float64x2_t v52[8];
  uint64_t *v53[11];
  uint64_t *v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[48];
  __int128 v58;
  __int128 v59;
  _BYTE v60[48];
  int8x16_t v61;
  _BYTE v62[28];
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;

  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)&v55 + 8));
  *(_QWORD *)&v60[40] = 0x3FF0000000000000;
  v61 = 0uLL;
  *(_QWORD *)v60 = 0x3FF0000000000000;
  *(_QWORD *)&v57[40] = 0x3FF0000000000000;
  *(_QWORD *)v57 = 0x3FF0000000000000;
  memset(&v57[8], 0, 32);
  v58 = 0u;
  v59 = 0u;
  memset(&v60[8], 0, 32);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v62 = _Q1;
  v63 = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v16 = -1762037865 * ((*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3);
  LODWORD(v55) = 6;
  DWORD1(v55) = v16;
  if (v57 != (_BYTE *)a2)
  {
    for (i = 0; i != 16; i += 4)
    {
      v18 = &v57[i * 8];
      v19 = *(_OWORD *)&a2[i + 2];
      *v18 = *(_OWORD *)&a2[i];
      v18[1] = v19;
    }
  }
  *v10 = *a4;
  BYTE8(v56) = a5;
  v64 = *(_OWORD *)a3;
  v65 = *((_OWORD *)a3 + 1);
  v20 = *a3;
  v21 = a3[1];
  v23 = a3[2];
  v22 = a3[3];
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v53);
  std::vector<LiPolygon::PosEdge>::resize(v54, 4uLL);
  v25 = v54;
  v26 = *v54;
  *(double *)v26 = v20;
  *(double *)(v26 + 8) = v21;
  *(_QWORD *)(v26 + 16) = 0;
  *(double *)(v26 + 32) = v20 + v23;
  *(double *)(v26 + 40) = v21;
  *(_QWORD *)(v26 + 48) = 0;
  *(double *)(v26 + 64) = v20 + v23;
  *(double *)(v26 + 72) = v21 + v22;
  *(_QWORD *)(v26 + 80) = 0;
  *(double *)(v26 + 96) = v20;
  *(double *)(v26 + 104) = v21 + v22;
  *(_QWORD *)(v26 + 112) = 0;
  v27 = *(unsigned int *)(a1 + 644);
  if ((int)v27 >= 1)
  {
    for (j = 0; j != v27; ++j)
    {
      memset(v52, 0, 32);
      if (j >= *(int *)(a1 + 644))
        PCArray_base::badIndex(v24);
      PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)(*(_QWORD *)(a1 + 648) + 32 * j), v52[0].f64);
      v24 = (PCArray_base *)LiImagePolygon::clip(v53, v52, 0);
    }
    v25 = v54;
    v26 = *v54;
  }
  if ((int)((unint64_t)(v25[1] - v26) >> 5) >= 3)
  {
    PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)a2, (uint64_t)v52);
    v29 = *v54;
    if ((int)((unint64_t)(v54[1] - *v54) >> 5) >= 1)
    {
      v30 = 0;
      v31 = 0;
      do
      {
        v50 = *(int8x16_t *)(v29 + v30);
        v51 = 0;
        PCMatrix44Tmpl<double>::transform<double>(v52[0].f64, (double *)v50.i64, (double *)v50.i64);
        v49 = v50;
        PCRect<double>::operator|=((float64x2_t *)(a1 + 808), (float64x2_t *)&v49);
        v32.f64[0] = *(float64_t *)v62;
        if (*(double *)v62 >= 0.0 && *(double *)&v62[8] >= 0.0)
        {
          v32.f64[1] = *(float64_t *)&v62[8];
          v33 = (int8x16_t)vaddq_f64(v32, (float64x2_t)v61);
          v61 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v61, (float64x2_t)v49), v49, v61);
          *(float64x2_t *)v62 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v49, (float64x2_t)v33), v49, v33), (float64x2_t)v61);
        }
        else
        {
          v61 = v49;
          *(_QWORD *)v62 = 0;
          *(_QWORD *)&v62[8] = 0;
        }
        ++v31;
        v29 = *v54;
        v30 += 32;
      }
      while (v31 < (int)((unint64_t)(v54[1] - *v54) >> 5));
    }
    v34 = *(_QWORD *)(a1 + 488);
    if (v34 >= *(_QWORD *)(a1 + 496))
    {
      v47 = std::vector<PSHeliumNode::Sprite>::__push_back_slow_path<PSHeliumNode::Sprite const&>((uint64_t *)(a1 + 480), (uint64_t)&v55);
    }
    else
    {
      *(_OWORD *)v34 = v55;
      v35 = v56;
      v36 = *(_OWORD *)v57;
      v37 = *(_OWORD *)&v57[32];
      *(_OWORD *)(v34 + 48) = *(_OWORD *)&v57[16];
      *(_OWORD *)(v34 + 64) = v37;
      *(_OWORD *)(v34 + 16) = v35;
      *(_OWORD *)(v34 + 32) = v36;
      v38 = v58;
      v39 = v59;
      v40 = *(_OWORD *)&v60[16];
      *(_OWORD *)(v34 + 112) = *(_OWORD *)v60;
      *(_OWORD *)(v34 + 128) = v40;
      *(_OWORD *)(v34 + 80) = v38;
      *(_OWORD *)(v34 + 96) = v39;
      v41 = *(_OWORD *)&v60[32];
      v42 = v61;
      v43 = *(_OWORD *)v62;
      *(_OWORD *)(v34 + 188) = *(_OWORD *)&v62[12];
      *(int8x16_t *)(v34 + 160) = v42;
      *(_OWORD *)(v34 + 176) = v43;
      *(_OWORD *)(v34 + 144) = v41;
      v44 = v63;
      *(_QWORD *)(v34 + 208) = v63;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      v45 = v64;
      v46 = v65;
      *(_QWORD *)(v34 + 248) = v66;
      *(_OWORD *)(v34 + 232) = v46;
      *(_OWORD *)(v34 + 216) = v45;
      *(_OWORD *)(v34 + 256) = v67;
      *(_OWORD *)(v34 + 272) = v68;
      *(_OWORD *)(v34 + 288) = v69;
      *(_BYTE *)(v34 + 304) = v70;
      v47 = v34 + 312;
      *(_QWORD *)(a1 + 488) = v34 + 312;
    }
    *(_QWORD *)(a1 + 488) = v47;
  }
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v53);
  result = v63;
  if (v63)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
  return result;
}

void sub_1B2FF16C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;

  *(_QWORD *)(v72 + 488) = v73;
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a32);
  if (a72)
    (*(void (**)(uint64_t))(*(_QWORD *)a72 + 24))(a72);
  _Unwind_Resume(a1);
}

void PSHeliumNode::convertTexturesToBitmaps(PSHeliumNode *this)
{
  PSHeliumNode *v1;
  char *v2;
  char *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  uint64_t *v37;
  _QWORD *v38[2];
  uint64_t *v39;
  _QWORD *v40[2];
  unint64_t *v41;

  v1 = this;
  v40[0] = 0;
  v40[1] = 0;
  v38[1] = 0;
  v39 = (uint64_t *)v40;
  v37 = (uint64_t *)v38;
  v38[0] = 0;
  v2 = (char *)*((_QWORD *)this + 73);
  v3 = (char *)this + 592;
  if (v2 != (char *)this + 592)
  {
    do
    {
      v36 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v2 + 4) + 72))(&v35);
      v4 = v35;
      v35 = 0uLL;
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      v36 = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      std::vector<std::shared_ptr<std::vector<unsigned char>>>::push_back[abi:ne180100]((char **)v1 + 76, &v36);
      v11 = *((_DWORD *)v1 + 144);
      v33 = v36;
      *(_QWORD *)&v35 = &v33;
      *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)v1 + 69, &v33, (uint64_t)&std::piecewise_construct, (_QWORD **)&v35)+ 10) = v11;
      v12 = *((_QWORD *)v2 + 5);
      *(_QWORD *)&v35 = *((_QWORD *)v2 + 4);
      *((_QWORD *)&v35 + 1) = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      PCDynamicCast<PGTexture,PCImage>((uint64_t)&v35, &v33);
      v15 = *((_DWORD *)v1 + 144);
      if (v33)
      {
        LODWORD(v32) = ProGL::TextureHandle::getName((HGGLBlendingInfo **)(v33 + 64));
        v41 = &v32;
        this = (PSHeliumNode *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(&v37, (unsigned int *)&v32, (uint64_t)&std::piecewise_construct, (unsigned int **)&v41);
        *((_DWORD *)this + 8) = v15;
      }
      else
      {
        v32 = v35;
        v41 = &v32;
        this = (PSHeliumNode *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(&v39, &v32, (uint64_t)&std::piecewise_construct, &v41);
        *((_DWORD *)this + 10) = v15;
      }
      ++*((_DWORD *)v1 + 144);
      v16 = v34;
      if (v34)
      {
        v17 = (unint64_t *)&v34->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (char *)*((_QWORD *)v2 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (char *)*((_QWORD *)v2 + 2);
          v27 = *(_QWORD *)v26 == (_QWORD)v2;
          v2 = v26;
        }
        while (!v27);
      }
      v2 = v26;
    }
    while (v26 != v3);
  }
  v28 = *((_QWORD *)v1 + 60);
  for (i = *((_QWORD *)v1 + 61); v28 != i; v28 += 312)
  {
    if (*(_DWORD *)v28 == 3)
    {
      *(_DWORD *)v28 = 4;
      if (*(_QWORD *)(v28 + 208))
      {
        *(_QWORD *)&v35 = *(_QWORD *)(v28 + 208);
        *(_QWORD *)&v36 = &v35;
        this = (PSHeliumNode *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(&v39, (unint64_t *)&v35, (uint64_t)&std::piecewise_construct, (_QWORD **)&v36);
        v30 = *((_DWORD *)this + 10);
      }
      else
      {
        LODWORD(v35) = *(_DWORD *)(v28 + 200);
        *(_QWORD *)&v36 = &v35;
        this = (PSHeliumNode *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(&v37, (unsigned int *)&v35, (uint64_t)&std::piecewise_construct, (unsigned int **)&v36);
        v30 = *((_DWORD *)this + 8);
      }
      *(_DWORD *)(v28 + 200) = v30;
    }
  }
  v31 = PSTextureCache::Instance(this);
  PSTextureCache::removeTextures(v31, (_QWORD *)v1 + 73);
  std::__tree<std::shared_ptr<PCImage>>::destroy((uint64_t)v1 + 584, *((_QWORD **)v1 + 74));
  *((_QWORD *)v1 + 73) = v3;
  *((_OWORD *)v1 + 37) = 0u;
  *((_BYTE *)v1 + 864) = 1;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v37, v38[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v39, v40[0]);
}

void sub_1B2FF1AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20,_QWORD *a21)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a17, a18);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void PSHeliumNode::preRender(PSHeliumNode *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 416))
  {
    v2 = operator new();
    v3 = *(_OWORD *)((char *)this + 824);
    *(_OWORD *)(v2 + 40) = *(_OWORD *)((char *)this + 808);
    *(_QWORD *)v2 = 0;
    *(_OWORD *)(v2 + 56) = v3;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *((_QWORD *)this + 105) = v2;
    v4 = *((_QWORD *)this + 60);
    v5 = *((_QWORD *)this + 61);
    while (v4 != v5)
    {
      QuadNode::insert(*((_QWORD *)this + 105), v4);
      v4 += 312;
    }
  }
}

void PSHeliumNode::renderImageParticlePage(uint64_t a1, HGGPURenderer **a2, uint64_t a3, uint64_t a4)
{
  GLuint v7;
  uint64_t v8;

  v7 = *(_DWORD *)(a4 + 200);
  glActiveTexture(0x84C0u);
  if (*(_DWORD *)(a1 + 424) != v7)
  {
    glBindTexture(0xDE1u, v7);
    *(_DWORD *)(a1 + 424) = v7;
  }
  PSHeliumNode::commonRenderTextureParticlePage(a1, a2, v8, a4);
}

void PSHeliumNode::renderBitmapParticlePage(uint64_t a1, HGGPURenderer **a2, uint64_t a3, uint64_t a4)
{
  __n128 v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  CGColorSpace *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  PGTexture *v27;
  std::__shared_weak_count *v28;
  _DWORD v29[3];
  uint64_t v30;
  int v31;
  CGColorSpaceRef space;
  int v33;
  uint64_t v34;
  __n128 v35;

  *(_DWORD *)(a1 + 424) = -1;
  v7 = *(__n128 *)(*(_QWORD *)(a1 + 608) + 16 * *(int *)(a4 + 200));
  v35 = v7;
  if (v7.n128_u64[1])
  {
    v8 = (unint64_t *)(v7.n128_u64[1] + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 16))(v7.n128_u64[0], v7);
  v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v35.n128_u64[0] + 24))(v35.n128_u64[0]);
  v12 = *(_QWORD *)(v35.n128_u64[0] + 36);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35.n128_u64[0] + 64) + 48))(*(_QWORD *)(v35.n128_u64[0] + 64));
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)v29);
  v29[0] = 2;
  v29[1] = v10;
  v29[2] = v11;
  v30 = v12;
  v31 = v13;
  PCImage::getColorSpace((PCImage *)v35.n128_u64[0], &v27);
  v14 = v27;
  if (space && space != v27)
  {
    PCCFRefTraits<CGColorSpace *>::release(space);
    v14 = v27;
  }
  space = v14;
  v27 = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v27);
  v33 = 3553;
  v34 = 0;
  PGCreateImage((const PCImageAttributes *)v29, &v25);
  PCDynamicCast<PGTexture2D,PCImage>((uint64_t)&v25, &v27);
  v15 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  PGTexture2D::setBitmapRef((ProGL::Private::TextureImpl **)v27, (PCImage **)&v35);
  glActiveTexture(0x84C0u);
  PGTexture::bind((ProGL::Private::TextureImpl **)v27);
  PSHeliumNode::commonRenderTextureParticlePage(a1, a2, v18, a4);
  PGTexture::unbind((OZChannelBase **)v27);
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&space);
  v22 = (std::__shared_weak_count *)v35.n128_u64[1];
  if (v35.n128_u64[1])
  {
    v23 = (unint64_t *)(v35.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1B2FF1E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  CGColorSpace *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, CGColorSpace *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v4 - 80);
  _Unwind_Resume(a1);
}

PSHeliumNode *PSHeliumNode::renderRadialParticlePage(PSHeliumNode *result)
{
  PSHeliumNode *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 429))
  {
    v1 = result;
    PSHeliumNode::unbindSurface(result);
    v2 = *((_QWORD *)v1 + 55);
    if (!v2)
      throw_PCNullPointerException(1);
    result = (PSHeliumNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    *((_BYTE *)v1 + 429) = 1;
  }
  return result;
}

void PSHeliumNode::commonRenderTextureParticlePage(uint64_t a1, HGGPURenderer **a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  GLuint AttribLocation;
  GLuint v12;
  GLuint v13;
  GLint UniformLocation;
  GLint v15;
  PGHelium *ProjectionMatrix;
  const HGTransform *v17;
  uint64_t i;
  GLfloat v19;
  _OWORD v20[8];
  _BYTE v21[128];
  __int128 v22;
  GLfloat value[32];
  float v24;
  float v25;
  float v26;
  float v27[13];
  _OWORD v28[2];
  float ptr[2];
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  PSHeliumNode::bindImageSurface((PSHeliumNode *)a1, *(double *)(a4 + 192));
  if (!(*(unsigned __int8 *)(a1 + 417) | *(unsigned __int8 *)(a4 + 304)))
  {
    v7 = (int)*(double *)(a4 + 240);
    v8 = (int)*(double *)(a4 + 232);
    v9 = (int)*(double *)(a4 + 224);
    v10 = (int)*(double *)(a4 + 216);
    ptr[0] = (float)v10;
    ptr[1] = (float)v9;
    v30 = (float)(v10 + v8);
    v31 = (float)v9;
    v32 = (float)v10;
    v33 = (float)(v9 + v7);
    v34 = v30;
    v35 = v33;
    v28[0] = xmmword_1B3565408;
    v28[1] = unk_1B3565418;
    v22 = *(_OWORD *)(a4 + 8);
    if ((*(_DWORD *)a4 - 3) <= 1)
      PCWorkingColorVector::operator*=((float32x2_t *)&v22, *((float *)&v22 + 3));
    PCWorkingColor::getRGBA((PCWorkingColor *)&v22, &v24, &v25, &v26, v27);
    v27[9] = v24;
    v27[10] = v25;
    v27[5] = v24;
    v27[6] = v25;
    v27[1] = v24;
    v27[2] = v25;
    v27[11] = v26;
    v27[12] = v27[0];
    v27[7] = v26;
    v27[8] = v27[0];
    v27[3] = v26;
    v27[4] = v27[0];
    AttribLocation = glGetAttribLocation(*(_DWORD *)(a1 + 880), "a_position");
    v12 = glGetAttribLocation(*(_DWORD *)(a1 + 880), "a_texCoord");
    v13 = glGetAttribLocation(*(_DWORD *)(a1 + 880), "a_partColor");
    UniformLocation = glGetUniformLocation(*(_DWORD *)(a1 + 880), "u_objectToFilmMatrix");
    v15 = glGetUniformLocation(*(_DWORD *)(a1 + 880), "s_texture");
    glUseProgram(*(_DWORD *)(a1 + 880));
    glVertexAttribPointer(AttribLocation, 2, 0x1406u, 0, 0, ptr);
    glEnableVertexAttribArray(AttribLocation);
    glVertexAttribPointer(v12, 2, 0x1406u, 0, 0, v28);
    glEnableVertexAttribArray(v12);
    glVertexAttribPointer(v13, 4, 0x1406u, 0, 0, &v24);
    glEnableVertexAttribArray(v13);
    ProjectionMatrix = (PGHelium *)HGGPURenderer::GetProjectionMatrix(*a2);
    PGHelium::convertHGTransform(ProjectionMatrix, v17, (uint64_t)v21);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v21, (__int128 *)(a1 + 680), (uint64_t)value);
    PCMatrix44Tmpl<double>::operator*((uint64_t)value, (__int128 *)(a4 + 32), (uint64_t)v20);
    for (i = 0; i != 16; ++i)
    {
      v19 = *((double *)&v20[2 * (i & 3)] + (i >> 2));
      value[i] = v19;
    }
    glUniformMatrix4fv(UniformLocation, 1, 0, value);
    glActiveTexture(0x84C0u);
    glUniform1i(v15, 0);
    glDrawArrays(5u, 0, 4);
  }
}

void PSHeliumNode::bindImageSurface(PSHeliumNode *this, double a2)
{
  OZShaderManager *v4;
  os_unfair_lock_s *Instance;
  PGProgram *Shader;
  OZPolygonAA *v7;
  OZPolygonAA *v8;
  ProGL::Private::TextureImpl **EdgeAATexture;
  GLenum Target;
  GLuint Name;
  GLenum v12;

  if (a2 != -1.0 || *((_BYTE *)this + 428) == 0)
  {
    PSHeliumNode::unbindSurface(this);
    Instance = (os_unfair_lock_s *)OZShaderManager::getInstance(v4);
    Shader = (PGProgram *)OZShaderManager::getShader(Instance, "bilinearMaskEdgeAA");
    (*(void (**)(PGProgram *))(*(_QWORD *)Shader + 16))(Shader);
    if (*((_BYTE *)this + 417))
    {
      PGProgram::setLocalParameter(Shader, 0.0, 0.0, 1.0, 0.0);
      v8 = (OZPolygonAA *)OZPolygonAA::getInstance(v7);
      EdgeAATexture = (ProGL::Private::TextureImpl **)OZPolygonAA::getEdgeAATexture(v8);
      glActiveTexture(0x84C2u);
      EdgeAATexture += 8;
      Target = ProGL::TextureHandle::getTarget(EdgeAATexture);
      Name = ProGL::TextureHandle::getName(EdgeAATexture);
      glBindTexture(Target, Name);
      v12 = ProGL::TextureHandle::getTarget(EdgeAATexture);
      glEnable(v12);
    }
    else
    {
      PGProgram::setLocalParameter(Shader, 1.0, 0.0, 0.0, 0.0);
    }
    *((_BYTE *)this + 428) = 1;
  }
}

void *PCDynamicCast<PGTexture2D,PCImage>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void PSHeliumNode::drawPoint(int a1, HGRect *a2, long double a3, __n128 a4, float64x2_t *a5)
{
  int64x2_t v8;
  float64x2_t v9;
  int v10;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t var2;
  double v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  __n128 *v28;
  int v29;
  double v30;
  float64x2_t __x;
  float64x2_t __y;
  double v34;
  double v35;
  float64x2_t v36[2];
  double v37;

  Effect_toPCRecti(a2, (uint64_t)&__y);
  v8.i64[0] = SLODWORD(__y.f64[0]);
  v8.i64[1] = SHIDWORD(__y.f64[0]);
  v9 = vcvtq_f64_s64(v8);
  v8.i64[0] = SLODWORD(__y.f64[1]);
  v8.i64[1] = SHIDWORD(__y.f64[1]);
  v36[0] = v9;
  v36[1] = vcvtq_f64_s64(v8);
  __y.f64[0] = 0.0;
  modf(a3, (long double *)__y.f64);
  v10 = (int)__y.f64[0];
  __asm { FMOV            V2.2D, #0.5 }
  __y = vaddq_f64(vaddq_f64(*a5, _Q2), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)-vcvtmd_s64_f64(a3 * 0.5 + 0.5 + 0.0000001)), 0));
  v34 = (double)v10;
  v35 = (double)v10;
  PCRect<double>::operator&=(&__y, v36);
  v16 = v34;
  if (v34 >= 0.0)
  {
    v17 = v35;
    if (v35 >= 0.0)
    {
      v18 = *(_QWORD *)&a2[1].var0;
      var2 = a2[1].var2;
      __x = vsubq_f64(__y, v36[0]);
      __y = __x;
      v37 = 0.0;
      v20 = __x.f64[1];
      modf(__x.f64[1], &v37);
      v21 = (int)v37;
      v22 = (double)(int)v37;
      v37 = 0.0;
      modf(__x.f64[1] + v17, &v37);
      if (v37 > v22)
      {
        v23 = v21;
        v24 = v18 + 16 * (int)var2 * (uint64_t)v21;
        v25 = 16 * var2;
        do
        {
          v37 = 0.0;
          modf(__x.f64[0], &v37);
          v26 = (int)v37;
          v27 = (double)(int)v37;
          v37 = 0.0;
          modf(__x.f64[0] + v16, &v37);
          if (v37 > v27)
          {
            v28 = (__n128 *)(v24 + 16 * v26);
            v29 = v26 + 1;
            do
            {
              *v28++ = a4;
              v30 = (double)v29;
              v16 = v34;
              __x.f64[0] = __y.f64[0];
              v37 = 0.0;
              modf(__y.f64[0] + v34, &v37);
              ++v29;
            }
            while (v37 > v30);
            v20 = __y.f64[1];
            v17 = v35;
          }
          ++v23;
          v37 = 0.0;
          modf(v20 + v17, &v37);
          v24 += v25;
        }
        while (v37 > (double)(int)v23);
      }
    }
  }
}

BOOL PSHeliumNode::drawLine(int a1, HGRect *a2, __n128 a3, float64x2_t *a4, __int128 *a5)
{
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  _BOOL8 result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  double v26;
  int v27;
  double v28;
  uint64_t var2;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __n128 *v40;
  _DWORD v42[4];
  float64x2_t v43;
  float64x2_t v44;
  __int128 v45;
  float64x2_t v46;

  v6 = *a4;
  v45 = *a5;
  v46 = v6;
  Effect_toPCRecti(a2, (uint64_t)v42);
  v7.i64[0] = v42[0];
  v7.i64[1] = v42[1];
  v8 = vcvtq_f64_s64(v7);
  v7.i64[0] = v42[2];
  v7.i64[1] = v42[3];
  v43 = v8;
  v44 = vcvtq_f64_s64(v7);
  result = PCRect<double>::clipLine(v43.f64, &v46, (double *)&v45);
  if (result)
  {
    v10 = v46.f64[0] - v43.f64[0];
    v11 = *(double *)&v45 - v43.f64[0];
    v12 = v44.f64[0];
    v13 = vabdd_f64(*(double *)&v45 - v43.f64[0], v46.f64[0] - v43.f64[0]);
    v14 = vabdd_f64(*((double *)&v45 + 1) - v43.f64[1], v46.f64[1] - v43.f64[1]);
    if (v14 <= v13)
    {
      v15 = v46.f64[0] - v43.f64[0];
      v10 = v46.f64[1] - v43.f64[1];
      v16 = *(double *)&v45 - v43.f64[0];
      v11 = *((double *)&v45 + 1) - v43.f64[1];
      v12 = v44.f64[1];
      v17 = v44.f64[0];
      v18 = v13;
      v19 = v14;
    }
    else
    {
      v15 = v46.f64[1] - v43.f64[1];
      v16 = *((double *)&v45 + 1) - v43.f64[1];
      v17 = v44.f64[1];
      v18 = v14;
      v19 = v13;
    }
    if (v15 > v16)
      v20 = v16;
    else
      v20 = v15;
    if (v15 > v16)
      v21 = v11;
    else
      v21 = v10;
    if (v15 > v16)
    {
      v16 = v15;
      v11 = v10;
    }
    v22 = floor(v20 + 0.0000001);
    v23 = floor(v16 + 0.0000001);
    v24 = floor(v17 + 0.0000001) + -1.0;
    if (v20 >= v17)
      v22 = v24;
    v25 = (int)v22;
    if (v16 >= v17)
      v26 = v24;
    else
      v26 = v23;
    v27 = (int)v26;
    if (v21 >= v11)
      v28 = -1.0;
    else
      v28 = 1.0;
    if (v25 <= v27)
    {
      var2 = a2[1].var2;
      v30 = *(_QWORD *)&a2[1].var0;
      v31 = v19 / v18;
      v32 = floor(v21 + 0.0000001);
      v33 = floor(v12 + 0.0000001) + -1.0;
      if (v21 >= v12)
        v34 = v33;
      else
        v34 = v32;
      v35 = (int)v34;
      v36 = v21 - (double)(int)v34 - v31 * (v28 * (v20 - (double)v25));
      if (v28 < 0.0)
        v36 = 1.0 - v36;
      v37 = v30 + 16 * v25;
      v38 = v30 + 16 * (int)var2 * (uint64_t)v25;
      v39 = v27 - v25 + 1;
      do
      {
        v40 = (__n128 *)(v37 + 16 * v35 * (int)var2);
        if (v14 > v13)
          v40 = (__n128 *)(v38 + 16 * v35);
        *v40 = a3;
        v36 = v31 + v36;
        if (v36 >= 1.0)
        {
          v36 = v36 + -1.0;
          v35 = (int)(v28 + (double)v35);
        }
        v37 += 16;
        v38 += 16 * var2;
        --v39;
      }
      while (v39);
    }
  }
  return result;
}

uint64_t PSHeliumNode::bindMetalProgramForSprite(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4)
{
  int v6;
  int v7;
  _BOOL8 v8;
  unsigned __int8 v9;
  __int128 *v10;
  std::string *v11;
  __int128 v12;
  __guard *v13;
  unsigned __int8 v14;
  void *p_p;
  std::string *v16;
  __int128 v17;
  OZMetalGradientRadial *v18;
  const std::string::value_type *FragmentProgramText;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  void *v24;
  int v25;
  uint64_t v26;
  std::string *v28;
  __int128 v29;
  void *__p;
  __int128 v31;
  std::string v32;
  std::string v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v6 = *a4 - 1;
  if (v6 > 5)
    v7 = 0;
  else
    v7 = dword_1B35655B4[v6];
  if (*(_DWORD *)(a1 + 896) == v7)
    return 1;
  __p = 0;
  v31 = 0uLL;
  switch(v7)
  {
    case 1:
      if ((v9 & 1) != 0
      {
        goto LABEL_13;
      }
      HGMetalUtils::stringForMetalHeader((uint64_t)&v33);
      v11 = std::string::append(&v33, "\n            struct VertexInOut\n            {\n                float4 _position  [[ position ]];\n"
              "            };\n"
              "            struct FragmentOut\n"
              "            {\n"
              "                float4 color0     [[ color(0) ]];\n"
              "            };\n"
              "        \n"
              "            vertex VertexInOut vertexFunc(constant float4x4 *matrices [[ buffer(0) ]],\n"
              "                                          const device float4 *positions [[ buffer(1) ]],\n"
              "                                          uint vid [[ vertex_id ]])\n"
              "            {\n"
              "                constant float4x4 *projectionMatrix = matrices;\n"
              "                VertexInOut vert;\n"
              "                vert._position = *projectionMatrix * positions[vid];\n"
              "                return vert;\n"
              "            }\n"
              "        \n"
              "            fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
              "                                              const constant float4* hg_Params [[ buffer(0) ]])\n"
              "            {\n"
              "                FragmentOut out;\n"
              "                out.color0 = hg_Params[0];\n"
              "                return out;\n"
              "            }\n"
              "        ");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      qword_1EF076838 = v11->__r_.__value_.__r.__words[2];
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      goto LABEL_42;
    case 2:
      HGMetalUtils::stringForMetalHeader((uint64_t)&v32);
      v16 = std::string::append(&v32, "\n            struct VertexInOut\n            {\n                float4 _position  [[ position ]];\n"
              "                float4 _texCoord0 [[ user(texcoord0) ]];\n"
              "            };\n"
              "            struct FragmentOut\n"
              "            {\n"
              "                float4 color0     [[ color(0) ]];\n"
              "            };\n"
              "        \n"
              "            vertex VertexInOut vertexFunc(constant float4x4 *matrices [[ buffer(0) ]],\n"
              "                                          const device float4 *positions [[ buffer(1) ]],\n"
              "                                          const device float4 *texCoords0 [[ buffer(3) ]],\n"
              "                                          uint vid [[ vertex_id ]])\n"
              "            {\n"
              "                constant float4x4 *projectionMatrix = matrices;\n"
              "                constant float4x4 *textureMatrices = matrices + 1;\n"
              "                VertexInOut vert;\n"
              "                vert._position = *projectionMatrix * positions[vid];\n"
              "                vert._texCoord0 = textureMatrices[0] * texCoords0[vid];\n"
              "                return vert;\n"
              "            }\n"
              "        ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = *(OZMetalGradientRadial **)(a1 + 456);
      if (!v18)
        throw_PCNullPointerException(1);
      FragmentProgramText = (const std::string::value_type *)OZMetalGradientRadial::getFragmentProgramText(v18);
      v20 = FragmentProgramText[23];
      if (v20 >= 0)
        v21 = FragmentProgramText;
      else
        v21 = *(const std::string::value_type **)FragmentProgramText;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)FragmentProgramText + 23);
      else
        v22 = *((_QWORD *)FragmentProgramText + 1);
      v23 = std::string::append(&v33, v21, v22);
      v24 = (void *)v23->__r_.__value_.__r.__words[0];
      v34[0] = v23->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      v25 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      __p = v24;
      *(_QWORD *)&v31 = v34[0];
      *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)((char *)v34 + 7);
      HIBYTE(v31) = v25;
      if (v25 >= 0)
        p_p = &__p;
      else
        p_p = v24;
      break;
    case 3:
      if ((v14 & 1) == 0
      {
        HGMetalUtils::stringForMetalHeader((uint64_t)&v33);
        v28 = std::string::append(&v33, "\n            struct VertexInOut\n            {\n                float4 _position  [[ position ]];\n"
                "                float4 _colorFromTexCoord  [[ user(texcoord0) ]];\n"
                "            };\n"
                "            struct FragmentOut\n"
                "            {\n"
                "                float4 color0     [[ color(0) ]];\n"
                "            };\n"
                "        \n"
                "            vertex VertexInOut vertexFunc(constant float4x4 *matrices [[ buffer(0) ]],\n"
                "                                          const device float4 *positions [[ buffer(1) ]],\n"
                "                                          const device float4 *texCoords0 [[ buffer(3) ]],\n"
                "                                          uint vid [[ vertex_id ]])\n"
                "            {\n"
                "                constant float4x4 *projectionMatrix = matrices;\n"
                "                VertexInOut vert;\n"
                "                vert._position = *projectionMatrix * positions[vid];\n"
                "                vert._colorFromTexCoord = texCoords0[vid];\n"
                "                return vert;\n"
                "            }\n"
                "        \n"
                "            fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
                "                                              const constant float4* hg_Params [[ buffer(0) ]])\n"
                "            {\n"
                "                FragmentOut out;\n"
                "                out.color0 = frag._colorFromTexCoord;\n"
                "                return out;\n"
                "            }\n"
                "        ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        unk_1EF076858 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
LABEL_42:
        __cxa_guard_release(v13);
      }
LABEL_13:
      if (*((char *)v10 + 23) >= 0)
        p_p = v10;
      else
        p_p = *(void **)v10;
      break;
    case 4:
      break;
    default:
      p_p = 0;
      break;
  }
  v26 = (*(uint64_t (**)(_QWORD, void *, uint64_t))(*(_QWORD *)*a2 + 376))(*a2, p_p, a1);
  v8 = v26 != 0;
  if (v26)
    *(_DWORD *)(a1 + 896) = v7;
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  return v8;
}

void sub_1B2FF2A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

__n128 PSHeliumNode::renderLineParticlePageMetal(uint64_t a1, uint64_t a2, HGMetalHandler *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  _OWORD v14[4];
  _OWORD v15[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)(a4 + 32), (uint64_t)v15);
  *(double *)&v6 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)v15);
  v14[0] = v6;
  v14[1] = v7;
  v14[2] = v8;
  v14[3] = v9;
  v10 = (*(uint64_t (**)(HGMetalHandler *, _OWORD *))(*(_QWORD *)a3 + 176))(a3, v14);
  PSHeliumNode::updateHandlerWithSprite(v10, a3, a4);
  *(float32x2_t *)&v11 = vcvt_f32_f64(*(float64x2_t *)(a4 + 256));
  *((_QWORD *)&v11 + 1) = 0x3F80000000000000;
  *(float32x2_t *)&v12 = vcvt_f32_f64(*(float64x2_t *)(a4 + 280));
  *((_QWORD *)&v12 + 1) = 0x3F80000000000000;
  v15[0] = v11;
  v15[1] = v12;
  HGMetalHandler::PrimitivesDraw((uint64_t)a3, 1u, v15, 2u, 0);
  return result;
}

double PSHeliumNode::renderOutlineParticlePageMetal(uint64_t a1, uint64_t a2, HGMetalHandler *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  double v11;
  double v12;
  float v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  _OWORD v20[4];
  _OWORD v21[12];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)(a4 + 32), (uint64_t)v21);
  *(double *)&v6 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)v21);
  v20[0] = v6;
  v20[1] = v7;
  v20[2] = v8;
  v20[3] = v9;
  v10 = (*(uint64_t (**)(HGMetalHandler *, _OWORD *))(*(_QWORD *)a3 + 176))(a3, v20);
  PSHeliumNode::updateHandlerWithSprite(v10, a3, a4);
  v11 = *(double *)(a4 + 216);
  v12 = *(double *)(a4 + 224);
  v13 = v11;
  *(float *)&v11 = v11 + *(double *)(a4 + 232);
  v14 = v12 + *(double *)(a4 + 240);
  *(float *)&v12 = v12;
  v15 = xmmword_1B304EFF0;
  v16 = xmmword_1B304EFF0;
  *(float *)&v16 = v13;
  v17 = v16;
  DWORD1(v17) = LODWORD(v12);
  LODWORD(v15) = LODWORD(v11);
  v18 = v15;
  DWORD1(v18) = LODWORD(v12);
  *((float *)&v16 + 1) = v14;
  *((float *)&v15 + 1) = v14;
  v21[0] = v17;
  v21[1] = v18;
  v21[2] = v18;
  v21[3] = v15;
  v21[4] = v15;
  v21[5] = v16;
  v21[6] = v16;
  v21[7] = v17;
  v21[8] = v17;
  v21[9] = v15;
  v21[10] = v18;
  v21[11] = v16;
  HGMetalHandler::PrimitivesDraw((uint64_t)a3, 1u, v21, 0xCu, 0);
  return result;
}

void PSHeliumNode::renderBitmapParticlePageMetal(uint64_t a1, HGGPURenderer **a2, HGMetalTexture ***a3, uint64_t a4)
{
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  HGMetalTexture *MetalContext;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  HGBitmap *v16;
  HGMetalContext *v17;
  __int128 v18;
  HGRect v19;

  v8 = *(_OWORD *)(*(_QWORD *)(a1 + 608) + 16 * *(int *)(a4 + 200));
  v18 = v8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if ((_QWORD)v8)
  {
    v16 = 0;
    FxSupport::pcBitmapToHGBitmap((PCBitmap **)&v18, (unsigned int *)&v16, (HGBitmap **)&v17);
    MetalContext = (HGMetalTexture *)HGGPURenderer::GetMetalContext(*a2);
    *(_QWORD *)&v19.var0 = *(_QWORD *)((char *)v17 + 28);
    *(_QWORD *)&v19.var2 = 0;
    HGMetalTexture::createFromBitmap(MetalContext, v17, *(HGBitmap **)((char *)v17 + 20), v19, 1, (HGMetalContext **)&v16);
    PSHeliumNode::commonRenderMetalTexture(a1, v13, a3, a4, &v16);
    if (v16)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v16 + 24))(v16);
    if (v17)
      (*(void (**)(HGMetalContext *))(*(_QWORD *)v17 + 24))(v17);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  }
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B2FF2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

HGBitmap *PSHeliumNode::renderRadialParticlePageMetal(uint64_t a1, HGGPURenderer **a2, HGMetalHandler *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  OZMetalGradientRadial *v13;
  HGMetalContext *MetalContext;
  HGBitmap *result;
  HGBitmap *v16;
  _OWORD v17[8];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)(a4 + 32), (uint64_t)v17);
  *(double *)&v8 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)v17);
  v18 = v8;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  (*(void (**)(HGMetalHandler *, __int128 *))(*(_QWORD *)a3 + 176))(a3, &v18);
  (*(void (**)(HGMetalHandler *, _QWORD))(*(_QWORD *)a3 + 80))(a3, 0);
  v12 = (*(uint64_t (**)(HGMetalHandler *))(*(_QWORD *)a3 + 88))(a3);
  PSHeliumNode::updateHandlerWithSprite(v12, a3, a4);
  v13 = *(OZMetalGradientRadial **)(a1 + 456);
  if (!v13)
    throw_PCNullPointerException(1);
  MetalContext = (HGMetalContext *)HGGPURenderer::GetMetalContext(*a2);
  OZMetalGradientRadial::getTexture(v13, MetalContext, (HGMetalContext **)&v16);
  HGMetalHandler::BindTexture((HGMetalTexture ***)a3, 0, v16);
  v17[0] = xmmword_1B3565470;
  v17[1] = unk_1B3565480;
  v17[2] = xmmword_1B3565490;
  v17[3] = unk_1B35654A0;
  v18 = xmmword_1B35654B0;
  v19 = unk_1B35654C0;
  v20 = xmmword_1B35654D0;
  v21 = unk_1B35654E0;
  HGMetalHandler::PrimitivesDraw((uint64_t)a3, 4u, v17, 4u, &v18);
  result = v16;
  if (v16)
    return (HGBitmap *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v16 + 24))(v16);
  return result;
}

void sub_1B2FF2F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PSHeliumNode::renderCircleParticlePageMetal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  int v61;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  float64x2_t v73;
  __double2 v74;
  __int128 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  _OWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  __int128 v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  _OWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  __int128 v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  __int128 v150;
  int v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  float64x2_t v162;
  __double2 v163;
  __int128 v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  __int128 v173;
  float64x2_t v174;
  __double2 v175;
  __int128 v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  double v187;
  __int128 v188;
  __int128 v189;
  float64x2_t v190;
  __int128 v191;
  float64x2_t v192;
  void *v193;
  void *v194;
  uint64_t v195;
  void *v196;
  char *v197;
  char *v198;
  __int128 v199;
  void *__p;
  char *v201;
  _QWORD v202[14];
  __int128 v203;
  _OWORD v204[3];

  PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)(a4 + 32), (uint64_t)&__p);
  *(double *)&v6 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&__p);
  v203 = v6;
  v204[0] = v7;
  v204[1] = v8;
  v204[2] = v9;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a3 + 176))(a3, &v203);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 80))(a3, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3);
  v10 = *(double *)(a4 + 176);
  __p = 0;
  v201 = 0;
  v202[0] = 0;
  v203 = 0uLL;
  *(_QWORD *)&v204[0] = 0;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, 0x44uLL);
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm((void **)&v203, 0x44uLL);
  __asm { FMOV            V0.4S, #1.0 }
  v199 = _Q0;
  v16 = *((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1) >= *(_QWORD *)&v204[0])
  {
    v18 = (uint64_t)(*((_QWORD *)&v203 + 1) - v203) >> 4;
    if ((unint64_t)(v18 + 1) >> 60)
      goto LABEL_260;
    v19 = (uint64_t)(*(_QWORD *)&v204[0] - v203) >> 3;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if (*(_QWORD *)&v204[0] - (_QWORD)v203 >= 0x7FFFFFFFFFFFFFF0uLL)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v204, v20);
    else
      v21 = 0;
    v22 = &v21[16 * v18];
    v23 = &v21[16 * v20];
    *(_OWORD *)v22 = xmmword_1B3051560;
    v17 = v22 + 16;
    v24 = (char *)*((_QWORD *)&v203 + 1);
    v25 = (char *)v203;
    if (*((_QWORD *)&v203 + 1) != (_QWORD)v203)
    {
      do
      {
        v26 = *((_OWORD *)v24 - 1);
        v24 -= 16;
        *((_OWORD *)v22 - 1) = v26;
        v22 -= 16;
      }
      while (v24 != v25);
      v24 = (char *)v203;
    }
    *(_QWORD *)&v203 = v22;
    *((_QWORD *)&v203 + 1) = v17;
    *(_QWORD *)&v204[0] = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    **((_OWORD **)&v203 + 1) = xmmword_1B3051560;
    v17 = (_OWORD *)(v16 + 16);
  }
  v187 = 1.0 / v10 + 0.375;
  *(float *)&v27 = v187;
  DWORD1(v27) = 0;
  DWORD2(v27) = 0;
  HIDWORD(v27) = 1.0;
  *((_QWORD *)&v203 + 1) = v17;
  v28 = v201;
  v185 = v27;
  if ((unint64_t)v201 >= v202[0])
  {
    v30 = (v201 - (_BYTE *)__p) >> 4;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v31 = (uint64_t)(v202[0] - (_QWORD)__p) >> 3;
    if (v31 <= v30 + 1)
      v31 = v30 + 1;
    if (v202[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v202, v32);
    else
      v33 = 0;
    v34 = &v33[16 * v30];
    v35 = &v33[16 * v32];
    *(_OWORD *)v34 = v185;
    v29 = v34 + 16;
    v37 = (char *)__p;
    v36 = v201;
    if (v201 != __p)
    {
      do
      {
        v38 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v34 - 1) = v38;
        v34 -= 16;
      }
      while (v36 != v37);
      v36 = (char *)__p;
    }
    __p = v34;
    v201 = v29;
    v202[0] = v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_OWORD *)v201 = v27;
    v29 = v28 + 16;
  }
  v201 = v29;
  v39 = *((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1) >= *(_QWORD *)&v204[0])
  {
    v41 = (uint64_t)(*((_QWORD *)&v203 + 1) - v203) >> 4;
    if ((unint64_t)(v41 + 1) >> 60)
      goto LABEL_260;
    v42 = (uint64_t)(*(_QWORD *)&v204[0] - v203) >> 3;
    if (v42 <= v41 + 1)
      v42 = v41 + 1;
    if (*(_QWORD *)&v204[0] - (_QWORD)v203 >= 0x7FFFFFFFFFFFFFF0uLL)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v204, v43);
    else
      v44 = 0;
    v45 = &v44[16 * v41];
    v46 = &v44[16 * v43];
    *(_OWORD *)v45 = v199;
    v40 = v45 + 16;
    v47 = (char *)*((_QWORD *)&v203 + 1);
    v48 = (char *)v203;
    if (*((_QWORD *)&v203 + 1) != (_QWORD)v203)
    {
      do
      {
        v49 = *((_OWORD *)v47 - 1);
        v47 -= 16;
        *((_OWORD *)v45 - 1) = v49;
        v45 -= 16;
      }
      while (v47 != v48);
      v47 = (char *)v203;
    }
    *(_QWORD *)&v203 = v45;
    *((_QWORD *)&v203 + 1) = v40;
    *(_QWORD *)&v204[0] = v46;
    if (v47)
      operator delete(v47);
  }
  else
  {
    **((_OWORD **)&v203 + 1) = v199;
    v40 = (_OWORD *)(v39 + 16);
  }
  *((_QWORD *)&v203 + 1) = v40;
  v50 = v201;
  if ((unint64_t)v201 >= v202[0])
  {
    v52 = (v201 - (_BYTE *)__p) >> 4;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v53 = (uint64_t)(v202[0] - (_QWORD)__p) >> 3;
    if (v53 <= v52 + 1)
      v53 = v52 + 1;
    if (v202[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    if (v54)
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v202, v54);
    else
      v55 = 0;
    v56 = &v55[16 * v52];
    v57 = &v55[16 * v54];
    *(_OWORD *)v56 = xmmword_1B35655D0;
    v51 = v56 + 16;
    v59 = (char *)__p;
    v58 = v201;
    if (v201 != __p)
    {
      do
      {
        v60 = *((_OWORD *)v58 - 1);
        v58 -= 16;
        *((_OWORD *)v56 - 1) = v60;
        v56 -= 16;
      }
      while (v58 != v59);
      v58 = (char *)__p;
    }
    __p = v56;
    v201 = v51;
    v202[0] = v57;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_OWORD *)v201 = xmmword_1B35655D0;
    v51 = v50 + 16;
  }
  v61 = 0;
  v201 = v51;
  __asm { FMOV            V0.2D, #0.375 }
  v192 = _Q0;
  do
  {
    v63 = *((_QWORD *)&v203 + 1);
    if (*((_QWORD *)&v203 + 1) >= *(_QWORD *)&v204[0])
    {
      v65 = (uint64_t)(*((_QWORD *)&v203 + 1) - v203) >> 4;
      if ((unint64_t)(v65 + 1) >> 60)
        goto LABEL_254;
      v66 = (uint64_t)(*(_QWORD *)&v204[0] - v203) >> 3;
      if (v66 <= v65 + 1)
        v66 = v65 + 1;
      if (*(_QWORD *)&v204[0] - (_QWORD)v203 >= 0x7FFFFFFFFFFFFFF0uLL)
        v67 = 0xFFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v204, v67);
      else
        v68 = 0;
      v69 = &v68[16 * v65];
      *(_OWORD *)v69 = xmmword_1B3051560;
      v64 = v69 + 16;
      v70 = (char *)*((_QWORD *)&v203 + 1);
      v71 = (char *)v203;
      if (*((_QWORD *)&v203 + 1) != (_QWORD)v203)
      {
        do
        {
          v72 = *((_OWORD *)v70 - 1);
          v70 -= 16;
          *((_OWORD *)v69 - 1) = v72;
          v69 -= 16;
        }
        while (v70 != v71);
        v70 = (char *)v203;
      }
      *(_QWORD *)&v203 = v69;
      *((_QWORD *)&v203 + 1) = v64;
      *(_QWORD *)&v204[0] = &v68[16 * v67];
      if (v70)
        operator delete(v70);
    }
    else
    {
      **((_OWORD **)&v203 + 1) = xmmword_1B3051560;
      v64 = (_OWORD *)(v63 + 16);
    }
    *((_QWORD *)&v203 + 1) = v64;
    v74 = __sincos_stret(((double)v61 * 0.03125 + (double)v61 * 0.03125) * 3.14159265);
    v73.f64[0] = v74.__cosval;
    v73.f64[1] = v74.__sinval;
    v190 = v73;
    *(float32x2_t *)&v75 = vcvt_f32_f64(vmulq_n_f64(v73, v187));
    *((_QWORD *)&v75 + 1) = 0x3F80000000000000;
    v76 = v201;
    if ((unint64_t)v201 >= v202[0])
    {
      v186 = v75;
      v78 = (v201 - (_BYTE *)__p) >> 4;
      if ((unint64_t)(v78 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v79 = (uint64_t)(v202[0] - (_QWORD)__p) >> 3;
      if (v79 <= v78 + 1)
        v79 = v78 + 1;
      if (v202[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
        v80 = 0xFFFFFFFFFFFFFFFLL;
      else
        v80 = v79;
      if (v80)
        v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v202, v80);
      else
        v81 = 0;
      v82 = &v81[16 * v78];
      *(_OWORD *)v82 = v186;
      v77 = v82 + 16;
      v84 = (char *)__p;
      v83 = v201;
      if (v201 != __p)
      {
        do
        {
          v85 = *((_OWORD *)v83 - 1);
          v83 -= 16;
          *((_OWORD *)v82 - 1) = v85;
          v82 -= 16;
        }
        while (v83 != v84);
        v83 = (char *)__p;
      }
      __p = v82;
      v201 = v77;
      v202[0] = &v81[16 * v80];
      if (v83)
        operator delete(v83);
    }
    else
    {
      *(_OWORD *)v201 = v75;
      v77 = v76 + 16;
    }
    v201 = v77;
    v86 = *((_QWORD *)&v203 + 1);
    if (*((_QWORD *)&v203 + 1) >= *(_QWORD *)&v204[0])
    {
      v88 = (uint64_t)(*((_QWORD *)&v203 + 1) - v203) >> 4;
      if ((unint64_t)(v88 + 1) >> 60)
LABEL_254:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v89 = (uint64_t)(*(_QWORD *)&v204[0] - v203) >> 3;
      if (v89 <= v88 + 1)
        v89 = v88 + 1;
      if (*(_QWORD *)&v204[0] - (_QWORD)v203 >= 0x7FFFFFFFFFFFFFF0uLL)
        v90 = 0xFFFFFFFFFFFFFFFLL;
      else
        v90 = v89;
      if (v90)
        v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v204, v90);
      else
        v91 = 0;
      v92 = &v91[16 * v88];
      *(_OWORD *)v92 = v199;
      v87 = v92 + 16;
      v93 = (char *)*((_QWORD *)&v203 + 1);
      v94 = (char *)v203;
      if (*((_QWORD *)&v203 + 1) != (_QWORD)v203)
      {
        do
        {
          v95 = *((_OWORD *)v93 - 1);
          v93 -= 16;
          *((_OWORD *)v92 - 1) = v95;
          v92 -= 16;
        }
        while (v93 != v94);
        v93 = (char *)v203;
      }
      *(_QWORD *)&v203 = v92;
      *((_QWORD *)&v203 + 1) = v87;
      *(_QWORD *)&v204[0] = &v91[16 * v90];
      if (v93)
        operator delete(v93);
    }
    else
    {
      **((_OWORD **)&v203 + 1) = v199;
      v87 = (_OWORD *)(v86 + 16);
    }
    *((_QWORD *)&v203 + 1) = v87;
    *(float32x2_t *)&v96 = vcvt_f32_f64(vmulq_f64(v190, v192));
    *((_QWORD *)&v96 + 1) = 0x3F80000000000000;
    v97 = v201;
    if ((unint64_t)v201 >= v202[0])
    {
      v191 = v96;
      v99 = (v201 - (_BYTE *)__p) >> 4;
      if ((unint64_t)(v99 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v100 = (uint64_t)(v202[0] - (_QWORD)__p) >> 3;
      if (v100 <= v99 + 1)
        v100 = v99 + 1;
      if (v202[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
        v101 = 0xFFFFFFFFFFFFFFFLL;
      else
        v101 = v100;
      if (v101)
        v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v202, v101);
      else
        v102 = 0;
      v103 = &v102[16 * v99];
      *(_OWORD *)v103 = v191;
      v98 = v103 + 16;
      v105 = (char *)__p;
      v104 = v201;
      if (v201 != __p)
      {
        do
        {
          v106 = *((_OWORD *)v104 - 1);
          v104 -= 16;
          *((_OWORD *)v103 - 1) = v106;
          v103 -= 16;
        }
        while (v104 != v105);
        v104 = (char *)__p;
      }
      __p = v103;
      v201 = v98;
      v202[0] = &v102[16 * v101];
      if (v104)
        operator delete(v104);
    }
    else
    {
      *(_OWORD *)v201 = v96;
      v98 = v97 + 16;
    }
    v201 = v98;
    ++v61;
  }
  while (v61 != 32);
  v107 = *((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1) >= *(_QWORD *)&v204[0])
  {
    v109 = (uint64_t)(*((_QWORD *)&v203 + 1) - v203) >> 4;
    if ((unint64_t)(v109 + 1) >> 60)
      goto LABEL_260;
    v110 = (uint64_t)(*(_QWORD *)&v204[0] - v203) >> 3;
    if (v110 <= v109 + 1)
      v110 = v109 + 1;
    if (*(_QWORD *)&v204[0] - (_QWORD)v203 >= 0x7FFFFFFFFFFFFFF0uLL)
      v111 = 0xFFFFFFFFFFFFFFFLL;
    else
      v111 = v110;
    if (v111)
      v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v204, v111);
    else
      v112 = 0;
    v113 = &v112[16 * v109];
    v114 = &v112[16 * v111];
    *(_OWORD *)v113 = xmmword_1B3051560;
    v108 = v113 + 16;
    v115 = (char *)*((_QWORD *)&v203 + 1);
    v116 = (char *)v203;
    if (*((_QWORD *)&v203 + 1) != (_QWORD)v203)
    {
      do
      {
        v117 = *((_OWORD *)v115 - 1);
        v115 -= 16;
        *((_OWORD *)v113 - 1) = v117;
        v113 -= 16;
      }
      while (v115 != v116);
      v115 = (char *)v203;
    }
    *(_QWORD *)&v203 = v113;
    *((_QWORD *)&v203 + 1) = v108;
    *(_QWORD *)&v204[0] = v114;
    if (v115)
      operator delete(v115);
  }
  else
  {
    **((_OWORD **)&v203 + 1) = xmmword_1B3051560;
    v108 = (_OWORD *)(v107 + 16);
  }
  *((_QWORD *)&v203 + 1) = v108;
  v118 = v201;
  if ((unint64_t)v201 >= v202[0])
  {
    v120 = (v201 - (_BYTE *)__p) >> 4;
    if ((unint64_t)(v120 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v121 = (uint64_t)(v202[0] - (_QWORD)__p) >> 3;
    if (v121 <= v120 + 1)
      v121 = v120 + 1;
    if (v202[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
      v122 = 0xFFFFFFFFFFFFFFFLL;
    else
      v122 = v121;
    if (v122)
      v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v202, v122);
    else
      v123 = 0;
    v124 = &v123[16 * v120];
    v125 = &v123[16 * v122];
    *(_OWORD *)v124 = v185;
    v119 = v124 + 16;
    v127 = (char *)__p;
    v126 = v201;
    if (v201 != __p)
    {
      do
      {
        v128 = *((_OWORD *)v126 - 1);
        v126 -= 16;
        *((_OWORD *)v124 - 1) = v128;
        v124 -= 16;
      }
      while (v126 != v127);
      v126 = (char *)__p;
    }
    __p = v124;
    v201 = v119;
    v202[0] = v125;
    if (v126)
      operator delete(v126);
  }
  else
  {
    *(_OWORD *)v201 = v185;
    v119 = v118 + 16;
  }
  v201 = v119;
  v129 = *((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1) < *(_QWORD *)&v204[0])
  {
    **((_OWORD **)&v203 + 1) = v199;
    v130 = (_OWORD *)(v129 + 16);
    goto LABEL_179;
  }
  v131 = (uint64_t)(*((_QWORD *)&v203 + 1) - v203) >> 4;
  if ((unint64_t)(v131 + 1) >> 60)
LABEL_260:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v132 = (uint64_t)(*(_QWORD *)&v204[0] - v203) >> 3;
  if (v132 <= v131 + 1)
    v132 = v131 + 1;
  if (*(_QWORD *)&v204[0] - (_QWORD)v203 >= 0x7FFFFFFFFFFFFFF0uLL)
    v133 = 0xFFFFFFFFFFFFFFFLL;
  else
    v133 = v132;
  if (v133)
    v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v204, v133);
  else
    v134 = 0;
  v135 = &v134[16 * v131];
  v136 = &v134[16 * v133];
  *(_OWORD *)v135 = v199;
  v130 = v135 + 16;
  v137 = (char *)*((_QWORD *)&v203 + 1);
  v138 = (char *)v203;
  if (*((_QWORD *)&v203 + 1) != (_QWORD)v203)
  {
    do
    {
      v139 = *((_OWORD *)v137 - 1);
      v137 -= 16;
      *((_OWORD *)v135 - 1) = v139;
      v135 -= 16;
    }
    while (v137 != v138);
    v137 = (char *)v203;
  }
  *(_QWORD *)&v203 = v135;
  *((_QWORD *)&v203 + 1) = v130;
  *(_QWORD *)&v204[0] = v136;
  if (v137)
    operator delete(v137);
LABEL_179:
  *((_QWORD *)&v203 + 1) = v130;
  v140 = v201;
  if ((unint64_t)v201 >= v202[0])
  {
    v142 = (v201 - (_BYTE *)__p) >> 4;
    if ((unint64_t)(v142 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v143 = (uint64_t)(v202[0] - (_QWORD)__p) >> 3;
    if (v143 <= v142 + 1)
      v143 = v142 + 1;
    if (v202[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
      v144 = 0xFFFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
      v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v202, v144);
    else
      v145 = 0;
    v146 = &v145[16 * v142];
    v147 = &v145[16 * v144];
    *(_OWORD *)v146 = xmmword_1B35655D0;
    v141 = v146 + 16;
    v149 = (char *)__p;
    v148 = v201;
    if (v201 != __p)
    {
      do
      {
        v150 = *((_OWORD *)v148 - 1);
        v148 -= 16;
        *((_OWORD *)v146 - 1) = v150;
        v146 -= 16;
      }
      while (v148 != v149);
      v148 = (char *)__p;
    }
    __p = v146;
    v201 = v141;
    v202[0] = v147;
    if (v148)
      operator delete(v148);
  }
  else
  {
    *(_OWORD *)v201 = xmmword_1B35655D0;
    v141 = v140 + 16;
  }
  v201 = v141;
  HGMetalHandler::PrimitivesDraw(a3, 4u, __p, (unint64_t)(v141 - (_BYTE *)__p) >> 4, (void *)v203);
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&v196, 0x60uLL);
  v151 = 0;
  v152 = v197;
  do
  {
    if (v152 >= v198)
    {
      v154 = (v152 - (_BYTE *)v196) >> 4;
      if ((unint64_t)(v154 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v155 = (v198 - (_BYTE *)v196) >> 3;
      if (v155 <= v154 + 1)
        v155 = v154 + 1;
      if ((unint64_t)(v198 - (_BYTE *)v196) >= 0x7FFFFFFFFFFFFFF0)
        v156 = 0xFFFFFFFFFFFFFFFLL;
      else
        v156 = v155;
      if (v156)
        v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v198, v156);
      else
        v157 = 0;
      v158 = &v157[16 * v154];
      *(_OWORD *)v158 = xmmword_1B304EFF0;
      v153 = v158 + 16;
      v160 = (char *)v196;
      v159 = v197;
      if (v197 != v196)
      {
        do
        {
          v161 = *((_OWORD *)v159 - 1);
          v159 -= 16;
          *((_OWORD *)v158 - 1) = v161;
          v158 -= 16;
        }
        while (v159 != v160);
        v159 = (char *)v196;
      }
      v196 = v158;
      v197 = v153;
      v198 = &v157[16 * v156];
      if (v159)
        operator delete(v159);
    }
    else
    {
      *(_OWORD *)v152 = xmmword_1B304EFF0;
      v153 = v152 + 16;
    }
    v197 = v153;
    v163 = __sincos_stret(((double)v151 * 0.03125 + (double)v151 * 0.03125) * 3.14159265);
    v162.f64[0] = v163.__cosval;
    v162.f64[1] = v163.__sinval;
    *(float32x2_t *)&v164 = vcvt_f32_f64(vmulq_f64(v162, v192));
    *((_QWORD *)&v164 + 1) = 0x3F80000000000000;
    if (v153 >= v198)
    {
      v188 = v164;
      v166 = (v153 - (_BYTE *)v196) >> 4;
      if ((unint64_t)(v166 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v167 = (v198 - (_BYTE *)v196) >> 3;
      if (v167 <= v166 + 1)
        v167 = v166 + 1;
      if ((unint64_t)(v198 - (_BYTE *)v196) >= 0x7FFFFFFFFFFFFFF0)
        v168 = 0xFFFFFFFFFFFFFFFLL;
      else
        v168 = v167;
      if (v168)
        v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v198, v168);
      else
        v169 = 0;
      v170 = &v169[16 * v166];
      *(_OWORD *)v170 = v188;
      v165 = v170 + 16;
      v172 = (char *)v196;
      v171 = v197;
      if (v197 != v196)
      {
        do
        {
          v173 = *((_OWORD *)v171 - 1);
          v171 -= 16;
          *((_OWORD *)v170 - 1) = v173;
          v170 -= 16;
        }
        while (v171 != v172);
        v171 = (char *)v196;
      }
      v196 = v170;
      v197 = v165;
      v198 = &v169[16 * v168];
      if (v171)
        operator delete(v171);
    }
    else
    {
      *(_OWORD *)v153 = v164;
      v165 = v153 + 16;
    }
    ++v151;
    v197 = v165;
    v175 = __sincos_stret(((double)v151 * 0.03125 + (double)v151 * 0.03125) * 3.14159265);
    v174.f64[0] = v175.__cosval;
    v174.f64[1] = v175.__sinval;
    *(float32x2_t *)&v176 = vcvt_f32_f64(vmulq_f64(v174, v192));
    *((_QWORD *)&v176 + 1) = 0x3F80000000000000;
    if (v165 >= v198)
    {
      v189 = v176;
      v177 = (v165 - (_BYTE *)v196) >> 4;
      if ((unint64_t)(v177 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v178 = (v198 - (_BYTE *)v196) >> 3;
      if (v178 <= v177 + 1)
        v178 = v177 + 1;
      if ((unint64_t)(v198 - (_BYTE *)v196) >= 0x7FFFFFFFFFFFFFF0)
        v179 = 0xFFFFFFFFFFFFFFFLL;
      else
        v179 = v178;
      if (v179)
        v180 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v198, v179);
      else
        v180 = 0;
      v181 = &v180[16 * v177];
      *(_OWORD *)v181 = v189;
      v152 = v181 + 16;
      v183 = (char *)v196;
      v182 = v197;
      if (v197 != v196)
      {
        do
        {
          v184 = *((_OWORD *)v182 - 1);
          v182 -= 16;
          *((_OWORD *)v181 - 1) = v184;
          v181 -= 16;
        }
        while (v182 != v183);
        v182 = (char *)v196;
      }
      v196 = v181;
      v197 = v152;
      v198 = &v180[16 * v179];
      if (v182)
        operator delete(v182);
    }
    else
    {
      *(_OWORD *)v165 = v176;
      v152 = v165 + 16;
    }
    v197 = v152;
  }
  while (v151 != 32);
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE6resizeEmRKS1_((uint64_t)&v193, (v152 - (_BYTE *)v196) >> 4, &v199);
  HGMetalHandler::PrimitivesDraw(a3, 3u, v196, (unint64_t)(v197 - (_BYTE *)v196) >> 4, v193);
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = (char *)v196;
    operator delete(v196);
  }
  if ((_QWORD)v203)
  {
    *((_QWORD *)&v203 + 1) = v203;
    operator delete((void *)v203);
  }
  if (__p)
  {
    v201 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B2FF3D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  void *v34;

  v34 = *(void **)(v32 - 160);
  if (v34)
  {
    *(_QWORD *)(v32 - 152) = v34;
    operator delete(v34);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PSHeliumNode::updateHandlerWithSprite(int a1, HGMetalHandler *this, uint64_t a3)
{
  unsigned int v5;
  int v6;
  int v7;
  _OWORD v9[2];

  v5 = *(_DWORD *)a3 - 3;
  if (v5 >= 3)
  {
    HGMetalHandler::DisableBlending((uint64_t)this);
    v9[0] = *(_OWORD *)(a3 + 8);
  }
  else
  {
    HGMetalHandler::EnableBlending((uint64_t)this);
    if (v5 == 2)
      v6 = 4;
    else
      v6 = 1;
    if (*(_BYTE *)(a3 + 24))
      v7 = 1;
    else
      v7 = 5;
    *(_QWORD *)&v9[0] = 0;
    *((_QWORD *)&v9[0] + 1) = __PAIR64__(v7, v6);
    v9[1] = xmmword_1B35655E0;
    HGMetalHandler::SetBlendingInfo(this, (const HGBlendingInfo *)v9);
    v9[0] = *(_OWORD *)(a3 + 8);
    if (v5 != 2)
      PCWorkingColorVector::operator*=((float32x2_t *)v9, *((float *)v9 + 3));
  }
  return (*(uint64_t (**)(HGMetalHandler *, _QWORD, float, float, float, float))(*(_QWORD *)this + 136))(this, 0, *(float *)v9, *((float *)v9 + 1), *((float *)v9 + 2), *((float *)v9 + 3));
}

void PSHeliumNode::commonRenderMetalTexture(uint64_t a1, int a2, HGMetalTexture ***this, uint64_t a4, HGBitmap **a5)
{
  __n128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _BYTE v22[20];
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  _OWORD v26[8];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*a5)
  {
    v8 = HGMetalHandler::BindTexture(this, 0, *a5);
    ((void (*)(HGMetalTexture ***, _QWORD, _QWORD, __n128))(*this)[9])(this, 0, 0, v8);
    ((void (*)(HGMetalTexture ***, uint64_t, uint64_t))(*this)[6])(this, 1, 1);
    ((void (*)(HGMetalTexture ***, _QWORD))(*this)[10])(this, 0);
    ((void (*)(HGMetalTexture ***))(*this)[11])(this);
    v9 = *(double *)(a4 + 216);
    v10 = *(double *)(a4 + 224);
    v12 = *(double *)(a4 + 232);
    v11 = *(double *)(a4 + 240);
    PCMatrix44Tmpl<double>::operator*(a1 + 680, (__int128 *)(a4 + 32), (uint64_t)v26);
    *(double *)&v13 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)v26);
    v27 = v13;
    v28 = v14;
    v29 = v15;
    v30 = v16;
    v17 = ((uint64_t (*)(HGMetalTexture ***, __int128 *))(*this)[22])(this, &v27);
    PSHeliumNode::updateHandlerWithSprite(v17, (HGMetalHandler *)this, a4);
    OZGetCornersFromBounds3d((float)(int)v9, (float)((int)v12 + (int)v9), (float)(int)v10, (float)((int)v11 + (int)v10), (uint64_t)&v20);
    *(_QWORD *)&v18 = *(_QWORD *)v22;
    *((_QWORD *)&v18 + 1) = __PAIR64__(1.0, *(unsigned int *)&v22[8]);
    *(_QWORD *)&v19 = *(_QWORD *)&v22[12];
    *((_QWORD *)&v19 + 1) = __PAIR64__(1.0, v23);
    v26[0] = v18;
    v26[1] = v19;
    *(_QWORD *)&v18 = v20;
    DWORD2(v18) = v21;
    *(_QWORD *)&v19 = v24;
    *((_QWORD *)&v19 + 1) = __PAIR64__(1.0, v25);
    v26[2] = v18;
    v26[3] = v19;
    v27 = xmmword_1B3565430;
    v28 = unk_1B3565440;
    v29 = xmmword_1B3565450;
    v30 = unk_1B3565460;
    HGMetalHandler::PrimitivesDraw((uint64_t)this, 4u, v26, 4u, &v27);
  }
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE6resizeEmRKS1_(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE8__appendEmRKS1_((void **)a1, a2 - v3, a3);
  }
}

uint64_t PSHeliumNode::TextureSpriteBatcher::add(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  char **v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  float v128[3];
  _BYTE v129[32];
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2 != 3 || *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 417) | *(unsigned __int8 *)(a2 + 304))
    return 0;
  if (*(unsigned __int8 *)(a2 + 24) != *(unsigned __int8 *)(a1 + 40) || *(_QWORD *)(a2 + 208) != *(_QWORD *)(a1 + 32))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a2 + 208);
    if (v4 != v5)
    {
      if (v4)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a1 + 32));
        v5 = *(_QWORD *)(a2 + 208);
      }
      *(_QWORD *)(a1 + 32) = v5;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 24);
  PCMatrix44Tmpl<double>::operator*(*(_QWORD *)(a1 + 24) + 680, (__int128 *)(a2 + 32), (uint64_t)v128);
  *(double *)&v6 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)v128);
  v123 = v6;
  v124 = v7;
  v125 = v8;
  v126 = v9;
  v127 = *(_OWORD *)(a2 + 8);
  PCWorkingColorVector::operator*=((float32x2_t *)&v127, *((float *)&v127 + 3));
  v122 = v127;
  OZGetCornersFromBounds3d((float)(int)*(double *)(a2 + 216), (float)((int)*(double *)(a2 + 232) + (int)*(double *)(a2 + 216)), (float)(int)*(double *)(a2 + 224), (float)((int)*(double *)(a2 + 240) + (int)*(double *)(a2 + 224)), (uint64_t)v128);
  *(_QWORD *)&v10 = *(_QWORD *)v128;
  *((_QWORD *)&v10 + 1) = __PAIR64__(1.0, LODWORD(v128[2]));
  v11 = *(_OWORD *)v129;
  DWORD2(v11) = *(_DWORD *)&v129[8];
  v118 = v11;
  v12 = *(_OWORD *)&v129[12];
  DWORD2(v12) = *(_DWORD *)&v129[20];
  v120 = v12;
  *(_QWORD *)&v12 = *(_QWORD *)&v129[24];
  DWORD2(v12) = v130;
  v115 = v10;
  v116 = v12;
  v13 = *(_QWORD *)(a1 + 64);
  v14 = (char **)(a1 + 48);
  v15 = *(_OWORD **)(a1 + 56);
  if ((unint64_t)v15 >= v13)
  {
    v18 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - *v14) >> 4);
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x249249249249249)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (_QWORD)*v14) >> 4);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x124924924924924)
      v21 = 0x249249249249249;
    else
      v21 = v19;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>(a1 + 64, v21);
    else
      v22 = 0;
    v23 = &v22[112 * v18];
    v24 = &v22[112 * v21];
    *(_OWORD *)v23 = v115;
    *((_OWORD *)v23 + 1) = xmmword_1B304EFF0;
    *((_OWORD *)v23 + 2) = v122;
    *((_OWORD *)v23 + 3) = v123;
    *((_OWORD *)v23 + 4) = v124;
    *((_OWORD *)v23 + 5) = v125;
    *((_OWORD *)v23 + 6) = v126;
    v16 = v23 + 112;
    v26 = *(char **)(a1 + 48);
    v25 = *(char **)(a1 + 56);
    if (v25 != v26)
    {
      do
      {
        v27 = *((_OWORD *)v25 - 7);
        v28 = *((_OWORD *)v25 - 5);
        *((_OWORD *)v23 - 6) = *((_OWORD *)v25 - 6);
        *((_OWORD *)v23 - 5) = v28;
        *((_OWORD *)v23 - 7) = v27;
        v29 = *((_OWORD *)v25 - 4);
        v30 = *((_OWORD *)v25 - 3);
        v31 = *((_OWORD *)v25 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v25 - 2);
        *((_OWORD *)v23 - 1) = v31;
        *((_OWORD *)v23 - 4) = v29;
        *((_OWORD *)v23 - 3) = v30;
        v23 -= 112;
        v25 -= 112;
      }
      while (v25 != v26);
      v25 = *v14;
    }
    *(_QWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v10;
    v15[1] = xmmword_1B304EFF0;
    v15[2] = v122;
    v15[3] = v123;
    v15[4] = v124;
    v15[5] = v125;
    v15[6] = v126;
    v16 = v15 + 7;
  }
  v32 = v118;
  HIDWORD(v32) = 1.0;
  *(_QWORD *)(a1 + 56) = v16;
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v16 >= v33)
  {
    v119 = v32;
    v35 = 0x6DB6DB6DB6DB6DB7 * (((char *)v16 - *v14) >> 4);
    if ((unint64_t)(v35 + 1) > 0x249249249249249)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v33 - (_QWORD)*v14) >> 4);
    v37 = 2 * v36;
    if (2 * v36 <= v35 + 1)
      v37 = v35 + 1;
    if (v36 >= 0x124924924924924)
      v38 = 0x249249249249249;
    else
      v38 = v37;
    if (v38)
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>(a1 + 64, v38);
    else
      v39 = 0;
    v40 = &v39[112 * v35];
    v41 = &v39[112 * v38];
    *(_OWORD *)v40 = v119;
    *((_OWORD *)v40 + 1) = xmmword_1B304FAB0;
    *((_OWORD *)v40 + 2) = v122;
    *((_OWORD *)v40 + 3) = v123;
    *((_OWORD *)v40 + 4) = v124;
    *((_OWORD *)v40 + 5) = v125;
    *((_OWORD *)v40 + 6) = v126;
    v34 = v40 + 112;
    v43 = *(char **)(a1 + 48);
    v42 = *(char **)(a1 + 56);
    if (v42 != v43)
    {
      do
      {
        v44 = *((_OWORD *)v42 - 7);
        v45 = *((_OWORD *)v42 - 5);
        *((_OWORD *)v40 - 6) = *((_OWORD *)v42 - 6);
        *((_OWORD *)v40 - 5) = v45;
        *((_OWORD *)v40 - 7) = v44;
        v46 = *((_OWORD *)v42 - 4);
        v47 = *((_OWORD *)v42 - 3);
        v48 = *((_OWORD *)v42 - 1);
        *((_OWORD *)v40 - 2) = *((_OWORD *)v42 - 2);
        *((_OWORD *)v40 - 1) = v48;
        *((_OWORD *)v40 - 4) = v46;
        *((_OWORD *)v40 - 3) = v47;
        v40 -= 112;
        v42 -= 112;
      }
      while (v42 != v43);
      v42 = *v14;
    }
    *(_QWORD *)(a1 + 48) = v40;
    *(_QWORD *)(a1 + 56) = v34;
    *(_QWORD *)(a1 + 64) = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *v16 = v32;
    v16[1] = xmmword_1B304FAB0;
    v16[2] = v122;
    v16[3] = v123;
    v16[4] = v124;
    v16[5] = v125;
    v16[6] = v126;
    v34 = v16 + 7;
  }
  v49 = v120;
  HIDWORD(v49) = 1.0;
  *(_QWORD *)(a1 + 56) = v34;
  v50 = *(_QWORD *)(a1 + 64);
  v121 = v49;
  if ((unint64_t)v34 >= v50)
  {
    v52 = 0x6DB6DB6DB6DB6DB7 * (((char *)v34 - *v14) >> 4);
    if ((unint64_t)(v52 + 1) > 0x249249249249249)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v53 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v50 - (_QWORD)*v14) >> 4);
    v54 = 2 * v53;
    if (2 * v53 <= v52 + 1)
      v54 = v52 + 1;
    if (v53 >= 0x124924924924924)
      v55 = 0x249249249249249;
    else
      v55 = v54;
    if (v55)
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>(a1 + 64, v55);
    else
      v56 = 0;
    v57 = &v56[112 * v52];
    v58 = &v56[112 * v55];
    *(_OWORD *)v57 = v121;
    *((_OWORD *)v57 + 1) = xmmword_1B3051310;
    *((_OWORD *)v57 + 2) = v122;
    *((_OWORD *)v57 + 3) = v123;
    *((_OWORD *)v57 + 4) = v124;
    *((_OWORD *)v57 + 5) = v125;
    *((_OWORD *)v57 + 6) = v126;
    v51 = v57 + 112;
    v60 = *(char **)(a1 + 48);
    v59 = *(char **)(a1 + 56);
    if (v59 != v60)
    {
      do
      {
        v61 = *((_OWORD *)v59 - 7);
        v62 = *((_OWORD *)v59 - 5);
        *((_OWORD *)v57 - 6) = *((_OWORD *)v59 - 6);
        *((_OWORD *)v57 - 5) = v62;
        *((_OWORD *)v57 - 7) = v61;
        v63 = *((_OWORD *)v59 - 4);
        v64 = *((_OWORD *)v59 - 3);
        v65 = *((_OWORD *)v59 - 1);
        *((_OWORD *)v57 - 2) = *((_OWORD *)v59 - 2);
        *((_OWORD *)v57 - 1) = v65;
        *((_OWORD *)v57 - 4) = v63;
        *((_OWORD *)v57 - 3) = v64;
        v57 -= 112;
        v59 -= 112;
      }
      while (v59 != v60);
      v59 = *v14;
    }
    *(_QWORD *)(a1 + 48) = v57;
    *(_QWORD *)(a1 + 56) = v51;
    *(_QWORD *)(a1 + 64) = v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v34 = v49;
    v34[1] = xmmword_1B3051310;
    v34[2] = v122;
    v34[3] = v123;
    v34[4] = v124;
    v34[5] = v125;
    v34[6] = v126;
    v51 = v34 + 7;
  }
  *(_QWORD *)(a1 + 56) = v51;
  v66 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v51 >= v66)
  {
    v68 = 0x6DB6DB6DB6DB6DB7 * (((char *)v51 - *v14) >> 4);
    if ((unint64_t)(v68 + 1) > 0x249249249249249)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v69 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66 - (_QWORD)*v14) >> 4);
    v70 = 2 * v69;
    if (2 * v69 <= v68 + 1)
      v70 = v68 + 1;
    if (v69 >= 0x124924924924924)
      v71 = 0x249249249249249;
    else
      v71 = v70;
    if (v71)
      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>(a1 + 64, v71);
    else
      v72 = 0;
    v73 = &v72[112 * v68];
    v74 = &v72[112 * v71];
    *(_OWORD *)v73 = v115;
    *((_OWORD *)v73 + 1) = xmmword_1B304EFF0;
    *((_OWORD *)v73 + 2) = v122;
    *((_OWORD *)v73 + 3) = v123;
    *((_OWORD *)v73 + 4) = v124;
    *((_OWORD *)v73 + 5) = v125;
    *((_OWORD *)v73 + 6) = v126;
    v67 = v73 + 112;
    v76 = *(char **)(a1 + 48);
    v75 = *(char **)(a1 + 56);
    if (v75 != v76)
    {
      do
      {
        v77 = *((_OWORD *)v75 - 7);
        v78 = *((_OWORD *)v75 - 5);
        *((_OWORD *)v73 - 6) = *((_OWORD *)v75 - 6);
        *((_OWORD *)v73 - 5) = v78;
        *((_OWORD *)v73 - 7) = v77;
        v79 = *((_OWORD *)v75 - 4);
        v80 = *((_OWORD *)v75 - 3);
        v81 = *((_OWORD *)v75 - 1);
        *((_OWORD *)v73 - 2) = *((_OWORD *)v75 - 2);
        *((_OWORD *)v73 - 1) = v81;
        *((_OWORD *)v73 - 4) = v79;
        *((_OWORD *)v73 - 3) = v80;
        v73 -= 112;
        v75 -= 112;
      }
      while (v75 != v76);
      v75 = *v14;
    }
    *(_QWORD *)(a1 + 48) = v73;
    *(_QWORD *)(a1 + 56) = v67;
    *(_QWORD *)(a1 + 64) = v74;
    if (v75)
      operator delete(v75);
  }
  else
  {
    *v51 = v115;
    v51[1] = xmmword_1B304EFF0;
    v51[2] = v122;
    v51[3] = v123;
    v51[4] = v124;
    v51[5] = v125;
    v51[6] = v126;
    v67 = v51 + 7;
  }
  *(_QWORD *)(a1 + 56) = v67;
  v82 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v67 >= v82)
  {
    v84 = 0x6DB6DB6DB6DB6DB7 * (((char *)v67 - *v14) >> 4);
    if ((unint64_t)(v84 + 1) > 0x249249249249249)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v85 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v82 - (_QWORD)*v14) >> 4);
    v86 = 2 * v85;
    if (2 * v85 <= v84 + 1)
      v86 = v84 + 1;
    if (v85 >= 0x124924924924924)
      v87 = 0x249249249249249;
    else
      v87 = v86;
    if (v87)
      v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>(a1 + 64, v87);
    else
      v88 = 0;
    v89 = &v88[112 * v84];
    v90 = &v88[112 * v87];
    *(_OWORD *)v89 = v121;
    *((_OWORD *)v89 + 1) = xmmword_1B3051310;
    *((_OWORD *)v89 + 2) = v122;
    *((_OWORD *)v89 + 3) = v123;
    *((_OWORD *)v89 + 4) = v124;
    *((_OWORD *)v89 + 5) = v125;
    *((_OWORD *)v89 + 6) = v126;
    v83 = v89 + 112;
    v92 = *(char **)(a1 + 48);
    v91 = *(char **)(a1 + 56);
    if (v91 != v92)
    {
      do
      {
        v93 = *((_OWORD *)v91 - 7);
        v94 = *((_OWORD *)v91 - 5);
        *((_OWORD *)v89 - 6) = *((_OWORD *)v91 - 6);
        *((_OWORD *)v89 - 5) = v94;
        *((_OWORD *)v89 - 7) = v93;
        v95 = *((_OWORD *)v91 - 4);
        v96 = *((_OWORD *)v91 - 3);
        v97 = *((_OWORD *)v91 - 1);
        *((_OWORD *)v89 - 2) = *((_OWORD *)v91 - 2);
        *((_OWORD *)v89 - 1) = v97;
        *((_OWORD *)v89 - 4) = v95;
        *((_OWORD *)v89 - 3) = v96;
        v89 -= 112;
        v91 -= 112;
      }
      while (v91 != v92);
      v91 = *v14;
    }
    *(_QWORD *)(a1 + 48) = v89;
    *(_QWORD *)(a1 + 56) = v83;
    *(_QWORD *)(a1 + 64) = v90;
    if (v91)
      operator delete(v91);
  }
  else
  {
    *v67 = v121;
    v67[1] = xmmword_1B3051310;
    v67[2] = v122;
    v67[3] = v123;
    v67[4] = v124;
    v67[5] = v125;
    v67[6] = v126;
    v83 = v67 + 7;
  }
  v98 = v116;
  HIDWORD(v98) = 1.0;
  *(_QWORD *)(a1 + 56) = v83;
  v99 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v83 >= v99)
  {
    v117 = v98;
    v101 = 0x6DB6DB6DB6DB6DB7 * (((char *)v83 - *v14) >> 4);
    if ((unint64_t)(v101 + 1) > 0x249249249249249)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v102 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v99 - (_QWORD)*v14) >> 4);
    v103 = 2 * v102;
    if (2 * v102 <= v101 + 1)
      v103 = v101 + 1;
    if (v102 >= 0x124924924924924)
      v104 = 0x249249249249249;
    else
      v104 = v103;
    if (v104)
      v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>(a1 + 64, v104);
    else
      v105 = 0;
    v106 = &v105[112 * v101];
    v107 = &v105[112 * v104];
    *(_OWORD *)v106 = v117;
    *((_OWORD *)v106 + 1) = xmmword_1B3050190;
    *((_OWORD *)v106 + 2) = v122;
    *((_OWORD *)v106 + 3) = v123;
    *((_OWORD *)v106 + 4) = v124;
    *((_OWORD *)v106 + 5) = v125;
    *((_OWORD *)v106 + 6) = v126;
    v100 = v106 + 112;
    v109 = *(char **)(a1 + 48);
    v108 = *(char **)(a1 + 56);
    if (v108 != v109)
    {
      do
      {
        v110 = *((_OWORD *)v108 - 7);
        v111 = *((_OWORD *)v108 - 5);
        *((_OWORD *)v106 - 6) = *((_OWORD *)v108 - 6);
        *((_OWORD *)v106 - 5) = v111;
        *((_OWORD *)v106 - 7) = v110;
        v112 = *((_OWORD *)v108 - 4);
        v113 = *((_OWORD *)v108 - 3);
        v114 = *((_OWORD *)v108 - 1);
        *((_OWORD *)v106 - 2) = *((_OWORD *)v108 - 2);
        *((_OWORD *)v106 - 1) = v114;
        *((_OWORD *)v106 - 4) = v112;
        *((_OWORD *)v106 - 3) = v113;
        v106 -= 112;
        v108 -= 112;
      }
      while (v108 != v109);
      v108 = *v14;
    }
    *(_QWORD *)(a1 + 48) = v106;
    *(_QWORD *)(a1 + 56) = v100;
    *(_QWORD *)(a1 + 64) = v107;
    if (v108)
      operator delete(v108);
  }
  else
  {
    *v83 = v98;
    v83[1] = xmmword_1B3050190;
    v83[2] = v122;
    v83[3] = v123;
    v83[4] = v124;
    v83[5] = v125;
    v83[6] = v126;
    v100 = v83 + 7;
  }
  *(_QWORD *)(a1 + 56) = v100;
  return 1;
}

void PSHeliumNode::TextureSpriteBatcher::flush(PSHeliumNode::TextureSpriteBatcher *this)
{
  uint64_t v1;
  unsigned __int8 v3;
  __int128 *v4;
  HGHandler *v5;
  int v6;
  HGMetalHandler *v7;
  __n128 v8;
  std::string *v9;
  __int128 v10;
  void *__p;
  int v12;
  int v13;
  __int128 v14;

  v1 = *((_QWORD *)this + 6);
  if (v1 != *((_QWORD *)this + 7))
  {
    if (*((_QWORD *)this + 4))
    {
      if ((v3 & 1) == 0
      {
        HGMetalUtils::stringForMetalHeader((uint64_t)&__p);
        v9 = std::string::append((std::string *)&__p, "\n        struct Vertex\n        {\n            float4 position;\n"
               "            float4 texCoord;\n"
               "            float4 color;\n"
               "            float4x4 mv;\n"
               "        };\n"
               "\n"
               "        struct VertexInOut\n"
               "        {\n"
               "            float4 _position  [[ position ]];\n"
               "            float4 _texCoord;\n"
               "            float4 _color;\n"
               "        };\n"
               "    \n"
               "        struct FragmentOut\n"
               "        {\n"
               "            float4 color0     [[ color(0) ]];\n"
               "        };\n"
               "    \n"
               "        vertex VertexInOut vertexFunc(constant float4x4 *matrices [[ buffer(0) ]],\n"
               "                                      const device Vertex *vertices [[ buffer(1) ]],\n"
               "                                      uint vid [[ vertex_id ]])\n"
               "        {\n"
               "            constant float4x4 *projectionMatrix = matrices;\n"
               "            VertexInOut vert;\n"
               "            vert._position = *projectionMatrix * vertices[vid].mv * vertices[vid].position;\n"
               "            vert._texCoord = vertices[vid].texCoord;\n"
               "            vert._color = vertices[vid].color;\n"
               "            return vert;\n"
               "        }\n"
               "    \n"
               "        fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
               "                                          texture2d< float > hg_Texture0 [[ texture(0) ]],\n"
               "                                          sampler hg_Sampler0 [[ sampler(0) ]])\n"
               "        {\n"
               "            FragmentOut out;\n"
               "            out.color0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord.xy) * frag._color;\n"
               "            return out;\n"
               "        }\n"
               "    ");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        unk_1EF0767D0 = *((_QWORD *)&v9->__r_.__value_.__l + 2);
        PSHeliumNode::TextureSpriteBatcher::flush(void)::shaderText = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v14) < 0)
          operator delete(__p);
        __cxa_atexit(MEMORY[0x1E0DE44D0], &PSHeliumNode::TextureSpriteBatcher::flush(void)::shaderText, &dword_1B2737000);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 3) + 896) != 6)
      {
        if (byte_1EF0767D7 >= 0)
          v4 = &PSHeliumNode::TextureSpriteBatcher::flush(void)::shaderText;
        else
          v4 = (__int128 *)PSHeliumNode::TextureSpriteBatcher::flush(void)::shaderText;
        (*(void (**)(_QWORD, __int128 *))(***((_QWORD ***)this + 1) + 376))(**((_QWORD **)this + 1), v4);
        *(_DWORD *)(*((_QWORD *)this + 3) + 896) = 6;
      }
      v5 = (HGHandler *)*((_QWORD *)this + 2);
      if (v5)
      {
        HGHandler::LoadIdentityModelViewMatrix(v5);
        HGMetalHandler::EnableBlending(*((_QWORD *)this + 2));
        if (*((_BYTE *)this + 40))
          v6 = 1;
        else
          v6 = 5;
        v7 = (HGMetalHandler *)*((_QWORD *)this + 2);
        __p = 0;
        v12 = 1;
        v13 = v6;
        v14 = xmmword_1B35655E0;
        HGMetalHandler::SetBlendingInfo(v7, (const HGBlendingInfo *)&__p);
        v8 = HGMetalHandler::BindTexture((HGMetalTexture ***)*((_QWORD *)this + 2), 0, (HGBitmap *)*((_QWORD *)this + 4));
        (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2), 0, 0, v8);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), 1, 1);
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), 0);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2));
        HGMetalHandler::SetVertices(*((HGMetalHandler **)this + 2), *((const void **)this + 6), 112, -1227133513 * ((*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4));
        HGMetalHandler::PrimitivesStart(*((HGMetalHandler **)this + 2));
        HGMetalHandler::Primitives(*((_QWORD *)this + 2), 3);
        HGMetalHandler::PrimitivesEnd(*((HGMetalHandler **)this + 2));
      }
      v1 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v1;
  }
}

void sub_1B2FF4C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL PSHeliumNode::PointSpriteBatcher::add(_QWORD *a1, __int128 *a2)
{
  int v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  __int128 v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float64_t v38[16];

  v2 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    PCMatrix44Tmpl<double>::operator*(a1[3] + 680, a2 + 2, (uint64_t)v38);
    *(double *)&v5 = PCMatrix44Tmpl<double>::toSimdFloat(v38);
    v9 = *(__int128 *)((char *)a2 + 8);
    *(float32x2_t *)&v11 = vcvt_f32_f64(*((float64x2_t *)a2 + 16));
    *(float *)&v10 = *((double *)a2 + 34);
    *((_QWORD *)&v11 + 1) = __PAIR64__(1.0, v10);
    v12 = *((double *)a2 + 31);
    v13 = a1[6];
    v14 = a1[5];
    if (v14 >= v13)
    {
      v16 = a1[4];
      v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - v16) >> 4);
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) > 0x249249249249249)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - v16) >> 4);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x124924924924924)
        v20 = 0x249249249249249;
      else
        v20 = v18;
      if (v20)
      {
        v36 = v7;
        v37 = v8;
        v34 = v5;
        v35 = v6;
        v32 = v11;
        v33 = *(__int128 *)((char *)a2 + 8);
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PSHeliumNode::TextureSpriteBatcher::Vertex>>((uint64_t)(a1 + 6), v20);
        v11 = v32;
        v9 = v33;
        v5 = v34;
        v6 = v35;
        v7 = v36;
        v8 = v37;
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[112 * v17];
      v23 = &v21[112 * v20];
      *(_OWORD *)v22 = v11;
      *((_OWORD *)v22 + 1) = v9;
      *((_OWORD *)v22 + 2) = v5;
      *((_OWORD *)v22 + 3) = v6;
      *((_OWORD *)v22 + 4) = v7;
      *((_OWORD *)v22 + 5) = v8;
      *((float *)v22 + 24) = v12;
      *(_QWORD *)(v22 + 100) = 0;
      *((_DWORD *)v22 + 27) = 0;
      v15 = v22 + 112;
      v25 = (char *)a1[4];
      v24 = (char *)a1[5];
      if (v24 != v25)
      {
        do
        {
          v26 = *((_OWORD *)v24 - 7);
          v27 = *((_OWORD *)v24 - 5);
          *((_OWORD *)v22 - 6) = *((_OWORD *)v24 - 6);
          *((_OWORD *)v22 - 5) = v27;
          *((_OWORD *)v22 - 7) = v26;
          v28 = *((_OWORD *)v24 - 4);
          v29 = *((_OWORD *)v24 - 3);
          v30 = *((_OWORD *)v24 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v24 - 2);
          *((_OWORD *)v22 - 1) = v30;
          *((_OWORD *)v22 - 4) = v28;
          *((_OWORD *)v22 - 3) = v29;
          v22 -= 112;
          v24 -= 112;
        }
        while (v24 != v25);
        v24 = (char *)a1[4];
      }
      a1[4] = v22;
      a1[5] = v15;
      a1[6] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_OWORD *)v14 = v11;
      *(_OWORD *)(v14 + 16) = v9;
      *(_OWORD *)(v14 + 32) = v5;
      *(_OWORD *)(v14 + 48) = v6;
      *(_OWORD *)(v14 + 64) = v7;
      *(_OWORD *)(v14 + 80) = v8;
      *(float *)(v14 + 96) = v12;
      *(_QWORD *)(v14 + 100) = 0;
      v15 = (char *)(v14 + 112);
      *(_DWORD *)(v14 + 108) = 0;
    }
    a1[5] = v15;
  }
  return v2 == 0;
}

