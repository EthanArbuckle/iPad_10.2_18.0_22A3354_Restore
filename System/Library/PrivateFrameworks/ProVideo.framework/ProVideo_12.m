float LiFilteredPolygon_State::unfilter(uint64_t a1, double *a2, float64_t *a3)
{
  double v3;
  float64x2_t v4;
  double v5;
  double v6;
  float v7;
  float32x2_t v8;
  float v9;
  double v10;
  double v11;
  float v12;
  float64x2_t v13;
  float v14;
  float result;

  v3 = a2[10];
  v4.f64[0] = *a3;
  v5 = -0.0;
  if (*a3 <= 0.0)
    v3 = -0.0;
  v6 = a2[8] + v3;
  v7 = 1.0;
  if (*a3 <= 0.0)
    v8.f32[0] = 1.0;
  else
    v8.f32[0] = -1.0;
  v9 = v6;
  *(float *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v8.i32[0];
  v10 = a3[1];
  if (v10 > 0.0)
    v5 = a2[11];
  v11 = a2[9] + v5;
  if (v10 > 0.0)
    v7 = -1.0;
  v12 = v11;
  *(float *)(a1 + 4) = v12;
  *(float *)(a1 + 12) = v7;
  v4.f64[1] = v10;
  v13 = vnegq_f64(v4);
  v14 = a2[6];
  v8.f32[1] = v7;
  *(float32x2_t *)&v13.f64[0] = vcvt_f32_f64(vmulq_f64(v13, vcvtq_f64_f32(v8)));
  *(int8x8_t *)(a1 + 16) = vbic_s8(*(int8x8_t *)&v13.f64[0], (int8x8_t)vcltz_f32(*(float32x2_t *)&v13.f64[0]));
  result = v7 / v14;
  *(float *)(a1 + 8) = v8.f32[0] / v14;
  *(float *)(a1 + 12) = v7 / v14;
  return result;
}

void *LiFilteredPolygon::makeGeometry(uint64_t a1, LiFilteredPolygon_Geometry *a2, _QWORD *a3, uint64_t *a4, int a5, int a6)
{
  void *result;
  double v10;
  unint64_t v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  float64x2_t *v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  double v51;
  int v52;
  __int16 v53;
  __n128 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  float64x2_t v62;
  double v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int128 v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float64x2_t v73;
  double v74;
  PCString v75;
  double v76;
  __int16 v77;
  __int16 v78;
  __int16 v79;
  int i;
  int v81;
  _DWORD *v82;
  int v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  PCException *v89;
  PCException *v90;
  PCException *exception;
  PCException *v92;
  double v93;
  double v94;
  _QWORD *v96;
  double *v97;
  double v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  float64_t v104;
  double v105;
  double v106;
  float64x2_t v107;
  PCString v108[2];
  double v109;
  HGArrayData *v110;
  int v111;
  _OWORD v112[2];
  float64x2_t v113;
  double v114;
  _OWORD v115[2];
  __int128 v116;
  double v117;
  double v118;
  double v119;
  double v120;
  _QWORD v121[2];
  uint64_t v122;
  double v123;
  double v124[3];

  result = (void *)LiEdgeTexture::getDefaultResolution((LiEdgeTexture *)a1);
  v10 = (double)(int)result;
  v124[0] = 0.501;
  v123 = (double)(int)result + -0.501;
  if (a6)
  {
    v123 = ((double)(int)result + -0.501) / v10;
    v124[0] = 0.501 / v10;
  }
  v96 = a3;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  v121[0] = 0;
  v121[1] = 0;
  v122 = 0;
  if (!*(_BYTE *)(a1 + 56))
  {
    if ((int)v11 >= 3)
    {
      v85 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *))a2)(a2, v121);
      (**(void (***)(LiFilteredPolygon_Geometry *, _QWORD *, uint64_t, double *, double *))a2)(a2, v121, *a3 + 24, &v123, &v123);
      v86 = 0;
      v87 = v11 - 2;
      v88 = 48;
      do
      {
        (**(void (***)(LiFilteredPolygon_Geometry *, _QWORD *, uint64_t, double *, double *))a2)(a2, v121, *v96 + v88, &v123, &v123);
        result = LiFilteredPolygon_Geometry::tri(a2, v85, v85 + (unsigned __int16)v86 + 1, v85 + (unsigned __int16)v86 + 2);
        ++v86;
        v88 += 24;
      }
      while (v87 != v86);
    }
    return result;
  }
  if ((int)v11 < 1)
    return result;
  v12 = *(double *)(a1 + 48);
  v118 = 0.0;
  v119 = 0.0;
  v120 = 0.0;
  v116 = 0uLL;
  v117 = 0.0;
  memset(v115, 0, 24);
  v113 = 0uLL;
  v114 = 0.0;
  memset(v112, 0, 24);
  HGArray<int,(HGFormat)34>::HGArray((uint64_t)&v110);
  HGArray<int,(HGFormat)34>::reserve((uint64_t *)&v110, v11);
  v13 = 0;
  v100 = v12 * 0.5;
  do
  {
    if ((_DWORD)v11 == v13)
      v14 = 0;
    else
      v14 = v13;
    v15 = v13 + 1;
    v16 = ((int)(v13 + 1) % (int)v11);
    v17 = *a4;
    if (((a4[1] - *a4) & 0x3FFFFFFFCLL) != 0)
    {
      v18 = *(_DWORD *)(v17 + 4 * v14);
      v19 = *(_DWORD *)(v17 + 4 * v16);
      if (!*(_BYTE *)(a1 + 57))
      {
        if (v18 == 1)
          v18 = 2;
        if (v19 == 1)
          v19 = 2;
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v20 = *v96 + 24 * v16;
    v21 = (int)(v13 + 2) % (int)v11;
    v22 = *(double *)v20;
    v23 = (float64x2_t *)(v20 + 8);
    v24 = *(float64x2_t *)(v20 + 8);
    v25 = *(double *)(*v96 + 24 * v21) - *(double *)v20;
    v26 = vsubq_f64(*(float64x2_t *)(*v96 + 24 * v21 + 8), v24);
    v27 = sqrt(v25 * v25 + vmulq_f64(v26, v26).f64[0]);
    v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0);
    v28.f64[0] = *(float64_t *)v20;
    v29 = vsubq_f64(v28, *(float64x2_t *)(*v96 + 24 * v14));
    v30 = sqrt(vaddvq_f64(vmulq_f64(v29, v29)));
    v31 = vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v30, 0));
    v32 = v25 / v27;
    v33 = vdivq_f64(v26, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0));
    v34 = v31.f64[1];
    v35 = v31.f64[0] + v25 / v27;
    v36 = -v33.f64[0] - v31.f64[1];
    v37 = 1.0 / (v35 * v31.f64[0] - vmuld_lane_f64(v36, v31, 1));
    v101 = v33;
    v102 = v25 / v27;
    v103 = v31;
    v38 = 1.0 / (vmuld_lane_f64(v25 / v27, v31, 1) - vmulq_f64(v31, v33).f64[0]);
    if (v38 > 6.0)
      v38 = 6.0;
    if (v38 < -6.0)
      v38 = -6.0;
    v39 = v36 * (v100 * v37);
    v40 = v35 * (v100 * v37);
    v41 = v100 * v37 * 0.0;
    v42 = v41 * v41 + v39 * v39 + v40 * v40;
    if (v30 >= v27)
      v43 = v27;
    else
      v43 = v30;
    if (v42 > v43 * v43)
    {
      v44 = v43 / sqrt(v42);
      v39 = v39 * v44;
      v40 = v40 * v44;
      v41 = v41 * v44;
    }
    v45 = (double *)(v20 + 16);
    v46 = (v24.f64[1] - *(double *)(*v96 + 24 * v14 + 16)) / v30;
    v93 = v46;
    v94 = -v33.f64[0];
    v97 = (double *)(v20 + 16);
    if (v18)
    {
      if (v18 == 2)
      {
        if (v19 >= 2)
        {
          if (v19 != 2)
          {
            exception = (PCException *)__cxa_allocate_exception(0x40uLL);
            PCString::PCString(v108, "unknown edge type");
            PCException::PCException(exception, v108);
          }
          v68 = *(_OWORD *)v20;
          *(_QWORD *)&v112[1] = *(_QWORD *)(v20 + 16);
          v112[0] = v68;
          v69 = *(double *)(v20 + 16);
          v113 = *(float64x2_t *)v20;
          v114 = v69;
          v51 = v69;
          v104 = v113.f64[1];
          v105 = v113.f64[0];
          v115[0] = v113;
          *(double *)&v115[1] = v69;
        }
        else
        {
          v24.f64[0] = v100 * v38;
          if (v30 * 0.5 < v100 * v38)
            v24.f64[0] = v30 * 0.5;
          v51 = v24.f64[1] - v46 * v24.f64[0];
          v112[0] = vaddq_f64(v28, vmulq_n_f64(vmulq_n_f64(v31, v38), v100));
          *(double *)&v112[1] = v24.f64[1] + v100 * (v46 * v38);
          v115[0] = vsubq_f64(v28, vmulq_n_f64(v31, v24.f64[0]));
          *(double *)&v115[1] = v51;
          v114 = v51;
          v113 = (float64x2_t)v115[0];
          v104 = *((double *)v115 + 1);
          v105 = *(double *)v115;
        }
      }
      else
      {
        if (v18 != 1)
        {
          v89 = (PCException *)__cxa_allocate_exception(0x40uLL);
          PCString::PCString(v108, "unknown edge type");
          PCException::PCException(v89, v108);
        }
        if (v19 < 2)
        {
LABEL_38:
          v51 = v24.f64[1] - v41;
          *(double *)v115 = v22 - v39;
          *((double *)v115 + 1) = v24.f64[0] - v40;
          *(double *)&v115[1] = v24.f64[1] - v41;
          v24.f64[0] = *(float64_t *)(a1 + 48);
          v113.f64[0] = v22 - v39 - v31.f64[1] * v24.f64[0];
          v113.f64[1] = *((double *)v115 + 1) + v31.f64[0] * v24.f64[0];
          v114 = v24.f64[0] * 0.0 + v24.f64[1] - v41;
          v104 = *((double *)v115 + 1);
          v105 = v22 - v39;
          *(double *)v112 = v22 - v39 - v33.f64[0] * v24.f64[0];
          *((double *)v112 + 1) = *((double *)v115 + 1) + v32 * v24.f64[0];
          *(double *)&v112[1] = v114;
          goto LABEL_39;
        }
        if (v19 != 2)
        {
          v90 = (PCException *)__cxa_allocate_exception(0x40uLL);
          PCString::PCString(v108, "unknown edge type");
          PCException::PCException(v90, v108);
        }
        v47 = v22 + v100 * (v32 * v38);
        *(double *)v115 = v47;
        v48 = vmulq_n_f64(vmulq_n_f64(v33, v38), v100);
        *(float64x2_t *)((char *)v115 + 8) = vaddq_f64(v24, v48);
        v49 = *v45 - v48.f64[1];
        v50 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48.f64[0], 0);
        v50.f64[0] = v100 * (v32 * v38);
        v113 = vsubq_f64(*(float64x2_t *)v20, v50);
        v114 = v49;
        v104 = *((double *)v115 + 1);
        v105 = v47;
        *(double *)v112 = v47;
        *(_OWORD *)((char *)v112 + 8) = *(_OWORD *)((char *)v115 + 8);
        v51 = *(double *)&v115[1];
      }
    }
    else
    {
      if (v19 < 2)
        goto LABEL_38;
      if (v19 != 2)
      {
        v92 = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(v108, "unknown edge type");
        PCException::PCException(v92, v108);
      }
      v70 = v100 * v38;
      v71 = v27 * 0.5;
      if (v71 < v100 * v38)
        v70 = v71;
      v72 = v22 + v32 * v70;
      *(double *)v115 = v72;
      *(float64x2_t *)((char *)v115 + 8) = vaddq_f64(v24, vmulq_n_f64(v33, v70));
      v73 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33.f64[0], 0);
      v74 = *v45 - v100 * vmuld_lane_f64(v38, v33, 1);
      v73.f64[0] = v32;
      v113 = vsubq_f64(*(float64x2_t *)v20, vmulq_n_f64(vmulq_n_f64(v73, v38), v100));
      v114 = v74;
      v104 = *((double *)v115 + 1);
      v105 = v72;
      *(double *)v112 = v72;
      *(_OWORD *)((char *)v112 + 8) = *(_OWORD *)((char *)v115 + 8);
      v51 = *(double *)&v115[1];
    }
LABEL_39:
    v52 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, _OWORD *, double *, double *))a2)(a2, v121, v115, &v123, &v123);
    if (v13)
    {
      v53 = v52;
      *(_DWORD *)HGArray<int,(HGFormat)34>::append((HGArrayDataRef *)&v110) = v52;
      if (v18 == 2)
      {
        v54.n128_f64[0] = v118;
        if (v118 != *(double *)&v116
          || (v54.n128_f64[0] = v119, v119 != *((double *)&v116 + 1))
          || (v54.n128_f64[0] = v120, v120 != v117))
        {
          v55 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, double *, double *, double *, __n128))a2)(a2, v121, &v118, &v123, &v123, v54);
          v56 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, __int128 *, double *, double *))a2)(a2, v121, &v116, &v123, &v123);
          LiFilteredPolygon_Geometry::tri(a2, v55, v56, v53);
        }
        v54.n128_u64[0] = *(_QWORD *)&v115[0];
        if (*(double *)v115 != v113.f64[0]
          || (v54.n128_u64[0] = *((_QWORD *)&v115[0] + 1), *((double *)v115 + 1) != v113.f64[1])
          || (v54.n128_u64[0] = *(_QWORD *)&v115[1], *(double *)&v115[1] != v114))
        {
          v57 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, __int128 *, double *, double *, __n128))a2)(a2, v121, &v116, &v123, &v123, v54);
          v58 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, float64x2_t *, double *, double *))a2)(a2, v121, &v113, &v123, &v123);
          LiFilteredPolygon_Geometry::tri(a2, v57, v58, v53);
        }
      }
      else
      {
        if (a5)
        {
          *(double *)&v108[0].var0 = -v34;
          v108[1] = *(PCString *)&v103.f64[0];
          v54.n128_f32[0] = LiFilteredPolygon_State::unfilter((uint64_t)v121, (double *)a1, (float64_t *)v108);
        }
        v59 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, double *, double *, double *, __n128))a2)(a2, v121, &v118, &v123, &v123, v54);
        v60 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, __int128 *, double *, double *))a2)(a2, v121, &v116, v124, &v123);
        v61 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, float64x2_t *, double *, double *))a2)(a2, v121, &v113, v124, &v123);
        LiFilteredPolygon_Geometry::tri(a2, v59, v60, v53);
        LiFilteredPolygon_Geometry::tri(a2, v60, v61, v53);
        if (v19 != 2)
        {
          if (a5)
          {
            v108[0] = *(PCString *)&v36;
            v108[1] = *(PCString *)&v35;
            LiFilteredPolygon_State::unfilter((uint64_t)v121, (double *)a1, (float64_t *)v108);
          }
          if (v37 <= 1.0)
          {
            *(double *)&v75.var0 = v40 + v23->f64[0];
            v76 = v41 + *v97;
            *(double *)&v108[0].var0 = v39 + *(double *)v20;
            v108[1] = v75;
            v109 = v76;
            v77 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, float64x2_t *, double *, double *))a2)(a2, v121, &v113, v124, &v123);
            v78 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, PCString *, double *, double *))a2)(a2, v121, v108, v124, v124);
            v79 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, _OWORD *, double *, double *))a2)(a2, v121, v112, &v123, v124);
            LiFilteredPolygon_Geometry::tri(a2, v77, v78, v53);
            LiFilteredPolygon_Geometry::tri(a2, v53, v78, v79);
          }
          else
          {
            v62 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v103, 1);
            v63 = v100 * (v93 + 0.0) + *v97;
            *(float64x2_t *)&v108[0].var0 = vaddq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v103, v62), (int64x2_t)vaddq_f64(v103, v62)), v100), *(float64x2_t *)v20);
            v109 = v63;
            v106 = v100 * (v94 - v102) + *(double *)v20;
            v107 = vaddq_f64(vmulq_n_f64(vsubq_f64((float64x2_t)*(unint64_t *)&v102, v101), v100), *v23);
            v64 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, float64x2_t *, double *, double *))a2)(a2, v121, &v113, v124, &v123);
            v65 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, PCString *, double *, double *))a2)(a2, v121, v108, v124, v124);
            v66 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, double *, double *, double *))a2)(a2, v121, &v106, v124, v124);
            v67 = (**(uint64_t (***)(LiFilteredPolygon_Geometry *, _QWORD *, _OWORD *, double *, double *))a2)(a2, v121, v112, &v123, v124);
            LiFilteredPolygon_Geometry::tri(a2, v64, v65, v53);
            LiFilteredPolygon_Geometry::tri(a2, v53, v65, v66);
            LiFilteredPolygon_Geometry::tri(a2, v53, v66, v67);
          }
        }
      }
      if (a5)
        v122 = 0;
    }
    v118 = v105;
    v119 = v104;
    v120 = v51;
    v116 = v112[0];
    v117 = *(double *)&v112[1];
    v13 = v15;
  }
  while ((_DWORD)v11 + 1 != v15);
  v122 = 0;
  for (i = 2; ; ++i)
  {
    result = v110;
    if (!v110)
      break;
    v81 = i - 1;
    if (i - 1 >= *((_DWORD *)v110 + 2) - 1)
      return (void *)HGArrayData::Release((uint64_t)v110);
    v82 = (_DWORD *)(*((_QWORD *)v110 + 2) + v111);
    v83 = *((_DWORD *)v110 + 1);
    v84 = *(_DWORD *)((char *)v82 + v83 * i);
    LiFilteredPolygon_Geometry::tri(a2, *v82, *(_DWORD *)((char *)v82 + v83 * v81), v84);
  }
  return result;
}

void sub_1B2D48F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCString a33,uint64_t a34,uint64_t a35,uint64_t a36,HGArrayData *a37)
{
  PCString::~PCString(&a33);
  if (a37)
    HGArrayData::Release((uint64_t)a37);
  _Unwind_Resume(a1);
}

uint64_t *LiFilteredPolygon_Geometry::tri(LiFilteredPolygon_Geometry *this, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *((_QWORD *)this + 1);
  v8 = (uint64_t *)((char *)this + 8);
  v9 = v10;
  if (v10)
    v11 = *(_DWORD *)(v9 + 8);
  else
    v11 = 0;
  result = HGArray<short,(HGFormat)3>::resize(v8, v11 + 3);
  v13 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(int *)(v13 + 4);
  v16 = *((int *)this + 4);
  *(_WORD *)(v14 + (int)v15 * (uint64_t)v11 + v16) = a2;
  *(_WORD *)(v14 + v15 + (int)v15 * (uint64_t)v11 + v16) = a3;
  *(_WORD *)(v14 + v15 * (v11 + 2) + v16) = a4;
  return result;
}

uint64_t *HGArray<int,(HGFormat)34>::reserve(uint64_t *result, int a2)
{
  if (*result)
  {
    if (*(_DWORD *)(*result + 12) < a2)
      return (uint64_t *)HGArrayData::allocate(*result, a2);
  }
  else if (a2 > 0)
  {
    return (uint64_t *)HGArrayDataRef::allocate((HGArrayDataRef *)result, 4, a2, a2);
  }
  return result;
}

HGArrayData *LiFilteredPolygon::makeRasterizer@<X0>(LiFilteredPolygon *this@<X0>, HGTransform *a2@<X1>, HGGLNode **a3@<X8>)
{
  HGGLNode *v7;
  char *v8;
  HGArrayData *result;
  PCException *exception;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  PCString v17;
  HGArrayData *v18;
  HGArrayData *v19;
  HGArrayData *v20;
  HGArrayData *v21;
  HGArrayData *v22;
  HGArrayData *v23;

  if (!(-1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "empty vertex channel");
    PCException::PCException(exception, &v17);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  LiFilteredPolygon_GeometryGL::LiFilteredPolygon_GeometryGL((LiFilteredPolygon_GeometryGL *)&v17);
  if (signed_area((uint64_t *)this) >= 0.0)
  {
    LiFilteredPolygon::makeGeometry((uint64_t)this, (LiFilteredPolygon_Geometry *)&v17, this, (uint64_t *)this + 3, 0, 0);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    std::vector<PCVector3<double>>::__init_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>((char *)&v14, *(_QWORD *)this, *((_QWORD *)this + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
    __p = 0;
    v12 = 0;
    v13 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2);
    make_clockwise(&v14, (char *)&__p);
    LiFilteredPolygon::makeGeometry((uint64_t)this, (LiFilteredPolygon_Geometry *)&v17, &v14, (uint64_t *)&__p, 0, 0);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
  }
  v7 = (HGGLNode *)HGObject::operator new(0x1B0uLL);
  HGGLNode::HGGLNode(v7, 0);
  *a3 = v7;
  HGGLNode::hglClearToBlack(v7);
  if (a2)
  {
    HGGLNode::hglMatrixMode(v7, 5890);
    HGGLNode::hglActiveTexture(v7, 192);
    HGGLNode::hglLoadTransform(v7, a2);
    HGGLNode::hglTexParameteri((const char **)v7, (const char *)0xDE1, (char *)0x2800, 9729.0);
    HGGLNode::hglTexParameteri((const char **)v7, (const char *)0xDE1, (char *)0x2801, 9729.0);
  }
  HGGLNode::hglEnableTexCoordGen(v7, 33984);
  HGGLNode::hglEnableClientState((const char **)v7, 32884);
  HGGLNode::hglVertexArray(v7, (const HGArrayDataRef *)&v19, v8);
  HGGLNode::hglActiveTexture(v7, 192);
  HGGLNode::hglActiveTexture(v7, 193);
  HGGLNode::hglEnableClientState((const char **)v7, 32888);
  HGGLNode::hglTexCoordArray((HGArrayDataRef **)v7, (const HGArrayDataRef *)&v20);
  HGGLNode::hglDrawElements(v7, 4, (unsigned int **)&v18);
  v17.var0 = (__CFString *)&unk_1E65727A0;
  if (v23)
    HGArrayData::Release((uint64_t)v23);
  if (v22)
    HGArrayData::Release((uint64_t)v22);
  if (v21)
    HGArrayData::Release((uint64_t)v21);
  if (v20)
    HGArrayData::Release((uint64_t)v20);
  if (v19)
    HGArrayData::Release((uint64_t)v19);
  v17.var0 = (__CFString *)&unk_1E65727E8;
  result = v18;
  if (v18)
    return (HGArrayData *)HGArrayData::Release((uint64_t)v18);
  return result;
}

void sub_1B2D493B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, PCString a16)
{
  PCString::~PCString(&a16);
  _Unwind_Resume(a1);
}

void make_clockwise(_QWORD *a1, char *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *begin;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<int> v18;

  v3 = -1431655765 * ((uint64_t)(a1[1] - *a1) >> 3);
  if (v3 >= 2)
  {
    v4 = 0;
    v5 = v3 - 1;
    v6 = 24 * v3;
    v7 = 1;
    do
    {
      v8 = (__int128 *)(*a1 + v4);
      v9 = *a1 + v6;
      v10 = *((_QWORD *)v8 + 2);
      v11 = *v8;
      v12 = *(_QWORD *)(v9 - 8);
      *v8 = *(_OWORD *)(v9 - 24);
      *((_QWORD *)v8 + 2) = v12;
      *(_OWORD *)(v9 - 24) = v11;
      *(_QWORD *)(v9 - 8) = v10;
      --v5;
      v6 -= 24;
      v4 += 24;
    }
    while (v7++ < v5);
  }
  if (((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) & 0x3FFFFFFFCLL) != 0)
  {
    memset(&v18, 0, sizeof(v18));
    std::vector<unsigned int>::resize(&v18, v3);
    begin = (char *)v18.__begin_;
    if (v3 >= 1)
    {
      v15 = v3 - 1;
      v16 = *(_QWORD *)a2;
      v17 = 4 * (v3 - 1);
      do
      {
        *(_DWORD *)&begin[4 * (v15 % v3)] = *(_DWORD *)(v16 + v17);
        ++v15;
        v17 -= 4;
      }
      while (v17 != -4);
    }
    if (&v18 != (std::vector<int> *)a2)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, begin, (uint64_t)v18.__end_, ((char *)v18.__end_ - begin) >> 2);
      begin = (char *)v18.__begin_;
    }
    if (begin)
    {
      v18.__end_ = (std::vector<int>::pointer)begin;
      operator delete(begin);
    }
  }
}

void sub_1B2D49598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LiFilteredPolygon_GeometryGL::~LiFilteredPolygon_GeometryGL(LiFilteredPolygon_GeometryGL *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &unk_1E65727A0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
    HGArrayData::Release(v2);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    HGArrayData::Release(v3);
  v4 = *((_QWORD *)this + 7);
  if (v4)
    HGArrayData::Release(v4);
  v5 = *((_QWORD *)this + 5);
  if (v5)
    HGArrayData::Release(v5);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    HGArrayData::Release(v6);
  *(_QWORD *)this = &unk_1E65727E8;
  v7 = *((_QWORD *)this + 1);
  if (v7)
    HGArrayData::Release(v7);
}

HGArrayData *LiFilteredPolygon::makeEdge@<X0>(LiFilteredPolygon *this@<X0>, uint64_t *a2@<X8>)
{
  LiHeEdge *v4;
  unsigned __int8 v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  double *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  double v33;
  float v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  HGArrayData *result;
  uint64_t v57;
  HGArrayData *v58;
  int v59;
  HGArrayData *v60;
  int v61;

  v4 = (LiHeEdge *)HGObject::operator new(0x1D0uLL);
  LiHeEdge::LiHeEdge(v4);
  *a2 = (uint64_t)v4;
  {
    LiEdgeTexture::createArray(0, (LiEdgeTexture *)3, LiFilteredPolygon::makeEdge(void)::filter);
    __cxa_atexit((void (*)(void *))HGArray<float,(HGFormat)7>::~HGArray, LiFilteredPolygon::makeEdge(void)::filter, &dword_1B2737000);
  }
  v57 = *a2;
  LiHeEdge::setFilter(*a2, (uint64_t)LiFilteredPolygon::makeEdge(void)::filter);
  v6 = signed_area((uint64_t *)this);
  v7 = 0.0;
  if (v6 < -1.0e-11)
    v7 = -1.0;
  if (v6 <= 1.0e-11)
    v8 = v7;
  else
    v8 = 1.0;
  v10 = *(_QWORD *)this;
  v9 = *((_QWORD *)this + 1);
  HGArray<PCVector3<float>,(HGFormat)21>::HGArray((uint64_t)&v60);
  HGArray<float,(HGFormat)7>::HGArray((uint64_t)&v58);
  v11 = -1431655765 * ((v9 - v10) >> 3);
  HGArray<HGVec3f,(HGFormat)21>::resize((uint64_t *)&v60, v11);
  HGArray<float,(HGFormat)7>::resize((uint64_t *)&v58, v11);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = v11;
    v15 = v11;
    do
    {
      if (v13 == v15)
      {
        HGArray<HGVec3f,(HGFormat)21>::resize((uint64_t *)&v60, v14);
        HGArray<float,(HGFormat)7>::resize((uint64_t *)&v58, v14);
        v15 = v14;
      }
      v16 = *(_QWORD *)this;
      v17 = (double *)(*(_QWORD *)this + 24 * v12);
      v18 = v12 + 1;
      v19 = (v12 + 1);
      if (v12 + 1 == v11)
        v19 = 0;
      v20 = *((_QWORD *)this + 3);
      v21 = *(_DWORD *)(v20 + 4 * v12);
      v22 = (double *)(v16 + 24 * v19);
      v23 = *(_DWORD *)(v20 + 4 * v19);
      v24 = *((_QWORD *)v60 + 2);
      v25 = *((_DWORD *)v60 + 1);
      v26 = v61;
      v27 = (_DWORD *)(v24 + v25 * (uint64_t)v13 + v61);
      v28 = v22[1];
      v29 = *v17;
      v30 = v17[1];
      v31 = v28 - v30;
      v32 = v28 - v30;
      v33 = *v22;
      v34 = *v17 - *v22;
      v35 = v32;
      v36 = v34;
      *(float *)&v30 = *v17 * v35 + v30 * v36;
      *(float *)&v35 = v8 * v35;
      *(float *)&v36 = v8 * v36;
      *v27 = LODWORD(v35);
      v27[1] = LODWORD(v36);
      *(float *)&v30 = v8 * (float)-*(float *)&v30;
      v27[2] = LODWORD(v30);
      if (v21)
      {
        v37 = 0.0;
        v38 = 1;
      }
      else
      {
        v38 = v23 != 0;
        v37 = *((double *)this + 6);
      }
      v39 = *((_QWORD *)v58 + 2);
      v40 = *((_DWORD *)v58 + 1);
      v41 = v59;
      v42 = v37;
      *(float *)(v39 + v40 * (uint64_t)v13 + v59) = v42;
      v43 = v13 + 1;
      if (!v38)
      {
        v44 = v33 - v29;
        v45 = sqrt(v31 * v31 + v44 * v44);
        if (v45 <= -0.000000100000001 || v45 >= 0.000000100000001)
        {
          v44 = v44 / v45;
          v31 = v31 / v45;
        }
        v46 = (double *)(v16 + 24 * (((int)v12 + 2) % v11));
        v47 = v33 - *v46;
        v48 = v28 - v46[1];
        v49 = sqrt(v47 * v47 + v48 * v48);
        if (v49 <= -0.000000100000001 || v49 >= 0.000000100000001)
        {
          v47 = v47 / v49;
          v48 = v48 / v49;
        }
        if (v31 * v48 + v44 * v47 > 0.2)
        {
          ++v14;
          if ((_DWORD)v43 == v15)
          {
            HGArray<HGVec3f,(HGFormat)21>::resize((uint64_t *)&v60, v14);
            HGArray<float,(HGFormat)7>::resize((uint64_t *)&v58, v14);
            v24 = *((_QWORD *)v60 + 2);
            v25 = *((_DWORD *)v60 + 1);
            v26 = v61;
            v33 = *v22;
            v28 = v22[1];
            v39 = *((_QWORD *)v58 + 2);
            v40 = *((_DWORD *)v58 + 1);
            v41 = v59;
            v15 = v14;
          }
          v50 = (float *)(v24 + v25 * v43 + v26);
          v51 = v44 + v47;
          v52 = -v51;
          v53 = v31 + v48;
          *v50 = v52;
          v50[1] = -v53;
          v54 = v33 * v52 - v28 * v53;
          v50[2] = -v54;
          v55 = *((double *)this + 6);
          *(float *)(v39 + v40 * (int)v43 + v41) = v55;
          LODWORD(v43) = v13 + 2;
        }
      }
      ++v12;
      v13 = v43;
    }
    while (v18 != v11);
  }
  LiHeEdge::setLines(v57, (int *)&v60);
  LiHeEdge::setThickness(v57, (uint64_t)&v58);
  if (v58)
    HGArrayData::Release((uint64_t)v58);
  result = v60;
  if (v60)
    return (HGArrayData *)HGArrayData::Release((uint64_t)v60);
  return result;
}

void sub_1B2D49A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HGArrayData *a11, uint64_t a12, HGArrayData *a13)
{
  _QWORD *v13;

  if (*v13)
    (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
  _Unwind_Resume(a1);
}

uint64_t *HGArray<float,(HGFormat)7>::~HGArray(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    HGArrayData::Release(v2);
  return a1;
}

double signed_area(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;

  v1 = *a1;
  if ((int)(-1431655765 * ((a1[1] - *a1) >> 3)) < 1)
  {
    v5 = 0.0;
  }
  else
  {
    v2 = 0;
    v3 = -1431655765 * ((a1[1] - *a1) >> 3);
    v4 = (double *)(v1 + 8);
    v5 = 0.0;
    do
    {
      if (v3 - 1 == v2)
        v6 = 0;
      else
        v6 = v2 + 1;
      v7 = *(v4 - 1);
      v8 = *(double *)(v1 + 24 * v6);
      if (v7 != v8)
        v5 = v5 + (v8 - v7) * (*(double *)(v1 + 24 * v6 + 8) + *v4);
      ++v2;
      v4 += 3;
    }
    while (v3 != v2);
  }
  return v5 * 0.5;
}

uint64_t *HGArray<HGVec3f,(HGFormat)21>::resize(uint64_t *result, int a2)
{
  uint64_t v3;

  v3 = *result;
  if (*result)
  {
    if (*(_DWORD *)(v3 + 12) < a2)
      result = (uint64_t *)HGArrayData::allocate(*result, a2);
    *(_DWORD *)(v3 + 8) = a2;
  }
  else if (a2 > 0)
  {
    return (uint64_t *)HGArrayDataRef::allocate((HGArrayDataRef *)result, 12, a2, a2);
  }
  return result;
}

double PCMatrix44Tmpl<double>::toSimdFloat(float64_t *a1)
{
  float64x2_t v1;
  float64x2_t v2;
  double result;

  v1.f64[0] = a1[8];
  v1.f64[1] = a1[12];
  v2.f64[0] = *a1;
  v2.f64[1] = a1[4];
  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2), v1).u64[0];
  return result;
}

uint64_t *HGArray<short,(HGFormat)3>::resize(uint64_t *result, int a2)
{
  uint64_t v3;

  v3 = *result;
  if (*result)
  {
    if (*(_DWORD *)(v3 + 12) < a2)
      result = (uint64_t *)HGArrayData::allocate(*result, a2);
    *(_DWORD *)(v3 + 8) = a2;
  }
  else if (a2 > 0)
  {
    return (uint64_t *)HGArrayDataRef::allocate((HGArrayDataRef *)result, 2, a2, a2);
  }
  return result;
}

void LiFilteredPolygon_GeometryGL::LiFilteredPolygon_GeometryGL(LiFilteredPolygon_GeometryGL *this)
{
  *(_QWORD *)this = &unk_1E65727E8;
  HGArray<short,(HGFormat)3>::HGArray((uint64_t)this + 8);
  *(_QWORD *)this = &unk_1E65727A0;
  HGArray<PCVector3<float>,(HGFormat)21>::HGArray((uint64_t)this + 24);
  HGArray<PCVector2<float>,(HGFormat)13>::HGArray((uint64_t)this + 40);
  HGArray<PCVector2<float>,(HGFormat)13>::HGArray((uint64_t)this + 56);
  HGArray<PCVector2<float>,(HGFormat)13>::HGArray((uint64_t)this + 72);
  HGArray<PCVector2<float>,(HGFormat)13>::HGArray((uint64_t)this + 88);
}

void sub_1B2D49D70(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;

  v7 = v3;
  if (*v7)
    HGArrayData::Release(*v7);
  if (*v5)
    HGArrayData::Release(*v5);
  if (*v4)
    HGArrayData::Release(*v4);
  if (*v2)
    HGArrayData::Release(*v2);
  *v1 = v6 + 16;
  v9 = v1[1];
  if (v9)
    HGArrayData::Release(v9);
  _Unwind_Resume(exception_object);
}

uint64_t LiFilteredPolygon_GeometryGL::add(uint64_t a1, _QWORD *a2, float64x2_t *a3, double *a4, double *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float v17;

  v11 = *(_QWORD *)(a1 + 24);
  v9 = a1 + 24;
  v10 = v11;
  if (v11)
    v12 = *(unsigned int *)(v10 + 8);
  else
    v12 = 0;
  v13 = vcvt_f32_f64(*a3);
  v14 = HGArray<PCVector3<float>,(HGFormat)21>::append(v9);
  *(float32x2_t *)v14 = v13;
  *(_DWORD *)(v14 + 8) = 1056964608;
  v15 = (float *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 40);
  v16 = *a4;
  v17 = *a5;
  *v15 = v16;
  v15[1] = v17;
  *(_QWORD *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 56) = *a2;
  *(_QWORD *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 72) = a2[1];
  *(_QWORD *)HGArray<PCVector2<float>,(HGFormat)13>::append(a1 + 88) = a2[2];
  return v12;
}

uint64_t *LiFilteredPolygon_GeometryGL::reserveImpl(LiFilteredPolygon_GeometryGL *this, int a2)
{
  HGArray<PCVector3<float>,(HGFormat)21>::reserve((uint64_t *)this + 3, a2);
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 5, a2);
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 7, a2);
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 9, a2);
  return HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)this + 11, a2);
}

uint64_t HGArray<short,(HGFormat)3>::HGArray(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 3;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1, 2, 0, 0);
  return a1;
}

void sub_1B2D49F30(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    HGArrayData::Release(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGArray<PCVector3<float>,(HGFormat)21>::HGArray(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 21;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1, 12, 0, 0);
  return a1;
}

void sub_1B2D49F84(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    HGArrayData::Release(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGArray<PCVector2<float>,(HGFormat)13>::HGArray(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 13;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1, 8, 0, 0);
  return a1;
}

void sub_1B2D49FD8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    HGArrayData::Release(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t HGArray<PCVector2<float>,(HGFormat)13>::append(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_DWORD *)(v2 + 8);
    v4 = v3 + 1;
    if (v3 < *(_DWORD *)(v2 + 12))
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    v4 = 1;
  }
  HGArray<PCVector2<float>,(HGFormat)13>::reserve((uint64_t *)a1, 2 * v4);
LABEL_6:
  HGArray<PCVector2<float>,(HGFormat)13>::resize((uint64_t *)a1, v4);
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v6 = *(_QWORD *)(v5 + 16)) != 0)
    return v6 + *(int *)(v5 + 4) * (uint64_t)v3 + *(int *)(a1 + 8);
  else
    return 0;
}

uint64_t HGArray<PCVector3<float>,(HGFormat)21>::append(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_DWORD *)(v2 + 8);
    v4 = v3 + 1;
    if (v3 < *(_DWORD *)(v2 + 12))
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    v4 = 1;
  }
  HGArray<PCVector3<float>,(HGFormat)21>::reserve((uint64_t *)a1, 2 * v4);
LABEL_6:
  HGArray<HGVec3f,(HGFormat)21>::resize((uint64_t *)a1, v4);
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v6 = *(_QWORD *)(v5 + 16)) != 0)
    return v6 + *(int *)(v5 + 4) * (uint64_t)v3 + *(int *)(a1 + 8);
  else
    return 0;
}

uint64_t *HGArray<PCVector3<float>,(HGFormat)21>::reserve(uint64_t *result, int a2)
{
  if (*result)
  {
    if (*(_DWORD *)(*result + 12) < a2)
      return (uint64_t *)HGArrayData::allocate(*result, a2);
  }
  else if (a2 > 0)
  {
    return (uint64_t *)HGArrayDataRef::allocate((HGArrayDataRef *)result, 12, a2, a2);
  }
  return result;
}

uint64_t *HGArray<PCVector2<float>,(HGFormat)13>::reserve(uint64_t *result, int a2)
{
  if (*result)
  {
    if (*(_DWORD *)(*result + 12) < a2)
      return (uint64_t *)HGArrayData::allocate(*result, a2);
  }
  else if (a2 > 0)
  {
    return (uint64_t *)HGArrayDataRef::allocate((HGArrayDataRef *)result, 8, a2, a2);
  }
  return result;
}

uint64_t *HGArray<PCVector2<float>,(HGFormat)13>::resize(uint64_t *result, int a2)
{
  uint64_t v3;

  v3 = *result;
  if (*result)
  {
    if (*(_DWORD *)(v3 + 12) < a2)
      result = (uint64_t *)HGArrayData::allocate(*result, a2);
    *(_DWORD *)(v3 + 8) = a2;
  }
  else if (a2 > 0)
  {
    return (uint64_t *)HGArrayDataRef::allocate((HGArrayDataRef *)result, 8, a2, a2);
  }
  return result;
}

char *std::vector<PCVector3<double>>::__init_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
      v7 += 24;
      a2 += 24;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B2D4A23C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t HGArray<int,(HGFormat)34>::HGArray(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 34;
  HGArrayDataRef::allocate((HGArrayDataRef *)a1, 4, 0, 0);
  return a1;
}

void sub_1B2D4A328(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    HGArrayData::Release(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t LiHeEdgeNode::BindTexture(LiHeEdgeNode *this, HGHandler *a2, uint64_t a3)
{
  HGHandler::TexCoord(a2, a3, 0, 0, 0);
  (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
  if ((_DWORD)a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1, 1);
  }
  else if (!(_DWORD)a3)
  {
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
  }
  return 0;
}

void LiHeEdgeNode::~LiHeEdgeNode(LiHeEdgeNode *this)
{
  void *v1;

  LiHeEdgeNodeFragment::~LiHeEdgeNodeFragment(this);
  HGObject::operator delete(v1);
}

void LiSceneObject::LiSceneObject(LiSceneObject *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v10;
  unsigned int v11;

  v3 = a2[1];
  *(_QWORD *)this = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[2];
  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 32) = 0x3FF0000000000000;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_BYTE *)this + 264) = 0;
  *((_QWORD *)this + 49) = 0x3FF0000000000000;
  *((_QWORD *)this + 44) = 0x3FF0000000000000;
  *((_QWORD *)this + 39) = 0x3FF0000000000000;
  *((_QWORD *)this + 34) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 480) = 0;
  *((_DWORD *)this + 121) = 0;
  *((_QWORD *)this + 61) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_BYTE *)this + 424) = 0;
  *((_BYTE *)this + 448) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_BYTE *)this + 472) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 62);
  *((_BYTE *)this + 504) = 0;
  *((_OWORD *)this + 32) = 0u;
  do
  {
    v10 = __ldaxr((unsigned int *)&serial_compositeOrder);
    v11 = v10 + 1;
  }
  while (__stlxr(v11, (unsigned int *)&serial_compositeOrder));
  *((_DWORD *)this + 132) = v11;
  *((_WORD *)this + 270) = 0;
  *(_QWORD *)((char *)this + 532) = 0;
  *((_QWORD *)this + 68) = 0x3FF0000000000000;
  *((_DWORD *)this + 138) = 257;
  *((_BYTE *)this + 556) = 0;
  *((_DWORD *)this + 140) = 0;
  *((_BYTE *)this + 564) = 0;
}

void LiSceneObject::~LiSceneObject(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  PC_Sp_counted_base *v3;

  v3 = *a2;
  this->var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)v3 - 3)) = a2[3];
  LiString::dec((LiString *)&this[64]);
  PCSharedCount::~PCSharedCount(this + 62);
}

uint64_t LiSceneObject::setTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 8;
  if (result + 8 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  return result;
}

uint64_t LiSceneObject::setPlacementTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 136;
  if (result + 136 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  *(_BYTE *)(result + 264) = 1;
  return result;
}

uint64_t LiSceneObject::setPlacementBoundsTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 272;
  if (result + 272 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  *(_BYTE *)(result + 400) = 1;
  return result;
}

__n128 LiSceneObject::setPlacementJitterX(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)(a1 + 408) = *a2;
  *(_BYTE *)(a1 + 424) = 1;
  return result;
}

__n128 LiSceneObject::setPlacementJitterY(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[27] = *a2;
  a1[28].n128_u8[0] = 1;
  return result;
}

__n128 LiSceneObject::setPlacementJitterZ(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)(a1 + 456) = *a2;
  *(_BYTE *)(a1 + 472) = 1;
  return result;
}

uint64_t LiSceneObject::setIndex(uint64_t this, int a2)
{
  *(_DWORD *)(this + 476) = a2;
  *(_BYTE *)(this + 480) = 1;
  return this;
}

uint64_t LiSceneObject::index(LiSceneObject *this)
{
  return (uint64_t)this + 476;
}

double *LiSceneObject::boundingBox(uint64_t a1, double *a2, double *a3)
{
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __int128 *v12;
  double v13;
  __int128 *v14;
  double v15;
  __int128 *v16;
  double v17;
  double *result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  double v24;

  v20 = xmmword_1B304F270;
  v21 = xmmword_1B304F270;
  v19 = xmmword_1B304F270;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, &v19);
  v5 = 0;
  v6 = -1.0;
  v7 = 1.0;
  v8 = 1.0;
  v9 = -1.0;
  v10 = 1.0;
  v11 = -1.0;
  do
  {
    v12 = (__int128 *)((char *)&v19 + 8);
    if ((v5 & 1) != 0)
      v12 = &v19;
    v13 = *(double *)v12;
    v14 = (__int128 *)((char *)&v20 + 8);
    if ((v5 & 2) != 0)
      v14 = &v20;
    v15 = *(double *)v14;
    v16 = (__int128 *)((char *)&v21 + 8);
    if ((v5 & 4) != 0)
      v16 = &v21;
    v17 = *(double *)v16;
    v22 = v13;
    v23 = v15;
    v24 = v17;
    result = PCMatrix44Tmpl<double>::transform<double>(a3, &v22, &v22);
    if (v5)
    {
      if (v7 >= v22)
        v7 = v22;
      if (v6 <= v22)
        v6 = v22;
      if (v8 >= v23)
        v8 = v23;
      if (v9 <= v23)
        v9 = v23;
      if (v10 >= v24)
        v10 = v24;
      if (v11 <= v24)
        v11 = v24;
    }
    else
    {
      v9 = v23;
      v11 = v24;
      v6 = v22;
      v7 = v22;
      v8 = v23;
      v10 = v24;
    }
    ++v5;
  }
  while (v5 != 8);
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  return result;
}

uint64_t LiSceneObject::blendMode(LiSceneObject *this)
{
  return *((unsigned int *)this + 121);
}

void LiSceneObject::blendOptions(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this[61].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 62);
}

void LiSceneObject::setBlendMode(uint64_t a1, int a2, PCSharedCount *a3)
{
  uint64_t *v3;
  PCSharedCount v4;

  *(_DWORD *)(a1 + 484) = a2;
  *(PCSharedCount *)(a1 + 488) = (PCSharedCount)a3->var0;
  v3 = (uint64_t *)(a1 + 496);
  PCSharedCount::PCSharedCount(&v4, a3 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D4A880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiSceneObject::preserveOpacity(LiSceneObject *this)
{
  return *((unsigned __int8 *)this + 504);
}

uint64_t LiSceneObject::setPreserveOpacity(uint64_t this, char a2)
{
  *(_BYTE *)(this + 504) = a2;
  return this;
}

uint64_t LiSceneObject::findBounds(_BOOL8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v5 = a1;
  v20 = 0x3FF0000000000000;
  v17 = 0x3FF0000000000000;
  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v12 = 0u;
  v13 = 0u;
  v15 = 0u;
  v16 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = *(unsigned int *)(a2 + 12);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 24;
    do
    {
      if (v7 >= *(int *)(a2 + 12))
        PCArray_base::badIndex((PCArray_base *)a1);
      a1 = PCVector3<double>::normalize((double *)(*(_QWORD *)(a2 + 16) + v8), 0.000000100000001);
      ++v7;
      v8 += 48;
    }
    while (v6 != v7);
  }
  v10 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, &v11, &v10, a3);
  return v10;
}

double *LiSceneObject::widenBounds(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, char a5)
{
  double *result;
  int v11;
  uint64_t v12;
  __int128 *v13;
  double v14;
  __int128 *v15;
  double v16;
  __int128 *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v34 = xmmword_1B304F270;
  v35 = xmmword_1B304F270;
  v33 = xmmword_1B304F270;
  result = (double *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, &v33);
  if (*(double *)&v33 <= *((double *)&v33 + 1)
    && *(double *)&v34 <= *((double *)&v34 + 1)
    && *(double *)&v35 <= *((double *)&v35 + 1)
    && ((a5 & 1) != 0
     || sqrt((*((double *)&v33 + 1) - *(double *)&v33) * (*((double *)&v33 + 1) - *(double *)&v33)+ (*((double *)&v34 + 1) - *(double *)&v34) * (*((double *)&v34 + 1) - *(double *)&v34)+ (*((double *)&v35 + 1) - *(double *)&v35) * (*((double *)&v35 + 1) - *(double *)&v35)) != 0.0))
  {
    PCMatrix44Tmpl<double>::operator*(a3, (__int128 *)(a1 + 8), (uint64_t)v32);
    v11 = 0;
    v12 = *(unsigned int *)(a2 + 12);
    do
    {
      v13 = (__int128 *)((char *)&v33 + 8);
      if ((v11 & 1) != 0)
        v13 = &v33;
      v14 = *(double *)v13;
      v15 = &v34;
      if ((v11 & 2) == 0)
        v15 = (__int128 *)((char *)&v34 + 8);
      v16 = *(double *)v15;
      v17 = &v35;
      if ((v11 & 4) == 0)
        v17 = (__int128 *)((char *)&v35 + 8);
      v18 = *(double *)v17;
      v29 = v14;
      v30 = v16;
      v31 = v18;
      result = PCMatrix44Tmpl<double>::transform<double>(v32, &v29, &v29);
      if ((int)v12 >= 1)
      {
        v19 = 0;
        v20 = 24;
        do
        {
          if (v19 >= *(int *)(a2 + 12))
            PCArray_base::badIndex((PCArray_base *)result);
          v21 = (double *)(*(_QWORD *)(a2 + 16) + v20);
          v23 = *(v21 - 3);
          v22 = *(v21 - 2);
          v24 = *(v21 - 1);
          v25 = v21[1];
          v26 = v21[2];
          v27 = (v29 - v23) * *v21 + (v30 - v22) * v25 + (v31 - v24) * v26;
          if (v27 < 0.0 || *a4 == 0)
          {
            *(v21 - 3) = v23 + *v21 * v27;
            *(v21 - 2) = v22 + v25 * v27;
            *(v21 - 1) = v24 + v26 * v27;
          }
          ++v19;
          v20 += 48;
        }
        while (v12 != v19);
      }
      *a4 = 1;
      ++v11;
    }
    while (v11 != 8);
  }
  return result;
}

uint64_t LiSceneObject::print(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  std::locale v12;

  LiImageSource::printIndent(a2, a3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LiSceneObject(\"", 15);
  if (*(_QWORD *)(a1 + 512))
    v7 = *(const char **)(a1 + 512);
  else
    v7 = "";
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\", compositeOrder=", 18);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 532) || *(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
    if (*(_BYTE *)(a1 + 540))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(r)", 3);
  }
  if (*(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  if (!*(_BYTE *)(a1 + 552))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", doesReflect=false", 19);
  if (!*(_BYTE *)(a1 + 553))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", visibleOutsideReflection=false", 32);
  if (*(double *)(a1 + 544) != 1.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", opacity=", 10);
    std::ostream::operator<<();
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v12, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, a3);
}

void sub_1B2D4AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void LiSceneObject::printTransform(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = a1 + 8;
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)(a1 + 8)))
    PCMatrix44Tmpl<double>::print(v5, a2, a3 + 2);
}

void ShadowMap::ShadowMap(ShadowMap *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 13) = 0x3FF0000000000000;
  *((_QWORD *)this + 8) = 0x3FF0000000000000;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 29) = 0x3FF0000000000000;
  *((_QWORD *)this + 24) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 9) = _Q0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 50) = 0x3FF0000000000000;
  *((_QWORD *)this + 45) = 0x3FF0000000000000;
  *((_QWORD *)this + 40) = 0x3FF0000000000000;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 17) = _Q0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 55) = 0xBFF0000000000000;
  *((_QWORD *)this + 56) = 0xBFF0000000000000;
  LiPolygon::LiPolygon((ShadowMap *)((char *)this + 456));
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = _Q0;
  *((_BYTE *)this + 592) = 0;
}

void sub_1B2D4AE88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

BOOL ShadowMap::operator*=(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t i;
  _OWORD *v10;
  __int128 v11;
  uint64_t j;
  _OWORD *v13;
  __int128 v14;
  uint64_t k;
  _OWORD *v16;
  __int128 v17;
  _BYTE v18[128];
  __int128 v19[8];

  result = PCMatrix44Tmpl<double>::isIdentity((double *)a2);
  if (!result)
  {
    v5 = *(_OWORD *)(a2 + 80);
    v19[4] = *(_OWORD *)(a2 + 64);
    v19[5] = v5;
    v6 = *(_OWORD *)(a2 + 112);
    v19[6] = *(_OWORD *)(a2 + 96);
    v19[7] = v6;
    v7 = *(_OWORD *)(a2 + 16);
    v19[0] = *(_OWORD *)a2;
    v19[1] = v7;
    v8 = *(_OWORD *)(a2 + 48);
    v19[2] = *(_OWORD *)(a2 + 32);
    v19[3] = v8;
    PCMatrix44Tmpl<double>::invert((double *)v19, (double *)v19, 0.0);
    PCMatrix44Tmpl<double>::operator*(a2, (__int128 *)(a1 + 24), (uint64_t)v18);
    if (v18 != (_BYTE *)(a1 + 24))
    {
      for (i = 0; i != 128; i += 32)
      {
        v10 = (_OWORD *)(a1 + 24 + i);
        v11 = *(_OWORD *)&v18[i + 16];
        *v10 = *(_OWORD *)&v18[i];
        v10[1] = v11;
      }
    }
    PCMatrix44Tmpl<double>::operator*(a1 + 152, v19, (uint64_t)v18);
    if (v18 != (_BYTE *)(a1 + 152))
    {
      for (j = 0; j != 128; j += 32)
      {
        v13 = (_OWORD *)(a1 + 152 + j);
        v14 = *(_OWORD *)&v18[j + 16];
        *v13 = *(_OWORD *)&v18[j];
        v13[1] = v14;
      }
    }
    PCMatrix44Tmpl<double>::operator*(a1 + 280, v19, (uint64_t)v18);
    if (v18 != (_BYTE *)(a1 + 280))
    {
      for (k = 0; k != 128; k += 32)
      {
        v16 = (_OWORD *)(a1 + 280 + k);
        v17 = *(_OWORD *)&v18[k + 16];
        *v16 = *(_OWORD *)&v18[k];
        v16[1] = v17;
      }
    }
    return transformPlane<double>((_OWORD *)a2, (double *)(a1 + 472), a1 + 472);
  }
  return result;
}

void ShadowCubeMap::ShadowCubeMap(ShadowCubeMap *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD v6[3];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E6572AB0;
  v6[2] = 0;
  v6[0] = &unk_1E6572B00;
  v6[1] = 0;
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize((uint64_t)this, 1, 3);
  v2 = *((_QWORD *)this + 2) + 24 * *((int *)this + 3);
  v3 = v2 - 24;
  v4 = *(_DWORD *)(v2 - 16);
  if (v4 >= 0)
    v5 = v4;
  else
    v5 = 1;
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(v3, 0, v5);
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray((uint64_t)v6);
}

void sub_1B2D4B0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray((uint64_t)va);
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::~PCArray(v2);
  _Unwind_Resume(a1);
}

uint64_t PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E6572B70;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void ShadowCubeMap::~ShadowCubeMap(ShadowCubeMap *this)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6572B70;
  if (*((int *)this + 2) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)this + 2);
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize((uint64_t)this, 0, v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

{
  ShadowCubeMap::~ShadowCubeMap(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t ShadowCubeMap::operator*=(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      v6 = *(_QWORD *)(v4 + 16) + 24 * i;
      if (*(int *)(v6 + 12) >= 1)
      {
        v7 = 0;
        v8 = 0;
        do
        {
          result = ShadowMap::operator*=(*(_QWORD *)(v6 + 16) + v7, a2);
          ++v8;
          v7 += 600;
        }
        while (v8 < *(int *)(v6 + 12));
        v2 = *(_DWORD *)(v4 + 12);
      }
    }
  }
  return result;
}

void ShadowMapsLazy::~ShadowMapsLazy(ShadowMapsLazy *this)
{
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray((uint64_t)this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E6572B50;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E6572B50;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t ShadowMap::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t k;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4 != v5)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v5 = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)(a1 + 16) = v5;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  if (a2 != a1)
  {
    v6 = 0;
    v7 = a1 + 24;
    v8 = a2 + 24;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v7 + i) = *(_QWORD *)(v8 + i);
      ++v6;
      v7 += 32;
      v8 += 32;
    }
    while (v6 != 4);
    if (a2 != a1)
    {
      v10 = 0;
      v11 = a1 + 152;
      v12 = a2 + 152;
      do
      {
        for (j = 0; j != 32; j += 8)
          *(_QWORD *)(v11 + j) = *(_QWORD *)(v12 + j);
        ++v10;
        v11 += 32;
        v12 += 32;
      }
      while (v10 != 4);
      if (a2 != a1)
      {
        v14 = 0;
        v15 = a1 + 280;
        v16 = a2 + 280;
        do
        {
          for (k = 0; k != 32; k += 8)
            *(_QWORD *)(v15 + k) = *(_QWORD *)(v16 + k);
          ++v14;
          v15 += 32;
          v16 += 32;
        }
        while (v14 != 4);
      }
    }
  }
  v18 = *(_OWORD *)(a2 + 408);
  v19 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v19;
  *(_OWORD *)(a1 + 408) = v18;
  LiPolygon::operator=(a1 + 456, a2 + 456);
  v20 = *(_BYTE *)(a2 + 592);
  v21 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v21;
  *(_BYTE *)(a1 + 592) = v20;
  return a1;
}

void PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  ShadowMap *v16;
  uint64_t v17;
  uint64_t v18;
  PCException *exception;
  PCString v20;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v20, "PCArray::resize");
    PCException::PCException(exception, &v20);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(_DWORD *)(a1 + 12);
    if (a2 >= v6)
    {
      if (a2 > v6)
      {
        v10 = 600 * v6;
        v11 = a2 - v6;
        do
        {
          ShadowMap::ShadowMap((ShadowMap *)(*(_QWORD *)(a1 + 16) + v10));
          v10 += 600;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = 600 * a2;
      do
      {
        ShadowMap::~ShadowMap((ShadowMap *)(*(_QWORD *)(a1 + 16) + v8));
        ++v7;
        v8 += 600;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 600 * v3);
    }
    else
    {
      v9 = 0;
    }
    v12 = *(_DWORD *)(a1 + 12);
    if (a2 >= v12)
      v13 = *(_DWORD *)(a1 + 12);
    else
      v13 = a2;
    if (v13 < 1)
    {
      v13 = 0;
    }
    else
    {
      v14 = 0;
      do
      {
        ShadowMap::ShadowMap((ShadowMap *)&v9[v14], (const ShadowMap *)(*(_QWORD *)(a1 + 16) + v14));
        ShadowMap::~ShadowMap((ShadowMap *)(*(_QWORD *)(a1 + 16) + v14));
        v14 += 600;
      }
      while (600 * v13 != v14);
      v12 = *(_DWORD *)(a1 + 12);
    }
    if (v13 < v12)
    {
      v15 = 600 * v13;
      do
      {
        ShadowMap::~ShadowMap((ShadowMap *)(*(_QWORD *)(a1 + 16) + v15));
        v15 += 600;
        ++v13;
      }
      while (*(_DWORD *)(a1 + 12) > v13);
    }
    if (v13 < a2)
    {
      v16 = (ShadowMap *)&v9[600 * v13];
      do
      {
        ShadowMap::ShadowMap(v16);
        v16 = (ShadowMap *)(v17 + 600);
        ++v13;
      }
      while (v13 < a2);
    }
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
      MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2D4B710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void ShadowMap::ShadowMap(ShadowMap *this, const ShadowMap *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  memcpy((char *)this + 24, (char *)a2 + 24, 0x1B0uLL);
  LiPolygon::LiPolygon((ShadowMap *)((char *)this + 456), (const ShadowMap *)((char *)a2 + 456));
  v5 = *((_OWORD *)a2 + 35);
  v6 = *((_OWORD *)a2 + 36);
  *((_BYTE *)this + 592) = *((_BYTE *)a2 + 592);
  *((_OWORD *)this + 35) = v5;
  *((_OWORD *)this + 36) = v6;
}

void sub_1B2D4B7B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

void ShadowMap::~ShadowMap(ShadowMap *this)
{
  uint64_t v2;

  LiPolygon::~LiPolygon((ShadowMap *)((char *)this + 456));
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E6572B70;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  PCException *exception;
  int v25;
  PCString v26;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "PCArray::resize");
    PCException::PCException(exception, &v26);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v4 = a2;
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if ((int)v6 <= a2)
    {
      if ((int)v6 < a2)
      {
        v10 = 24 * v6;
        v11 = a2 - v6;
        do
        {
          v12 = (_QWORD *)(*(_QWORD *)(result + 16) + v10);
          v12[1] = 0;
          v12[2] = 0;
          *v12 = &unk_1E6572B00;
          v10 += 24;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = 24 * a2;
      do
      {
        result = (**(uint64_t (***)(uint64_t))(*(_QWORD *)(v5 + 16) + v8))(*(_QWORD *)(v5 + 16) + v8);
        ++v7;
        v8 += 24;
      }
      while (v7 < *(int *)(v5 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 24 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(v5 + 12);
    if (v4 >= v13)
      v14 = v13;
    else
      v14 = v4;
    if ((int)v14 < 1)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      v25 = v4;
      for (i = 0; i != v14; ++i)
      {
        v16 = &v9[24 * i];
        v17 = *(_QWORD *)(v5 + 16) + 24 * i;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        *(_QWORD *)v16 = &unk_1E6572B50;
        v18 = *(_DWORD *)(v17 + 12);
        if (v18 <= 0)
          v19 = 0;
        else
          v19 = (2 * v18) | 1;
        PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize((uint64_t)&v9[24 * i], v18, v19);
        if (*(int *)(v17 + 12) >= 1)
        {
          v20 = 0;
          v21 = 0;
          do
          {
            ShadowMap::operator=(*((_QWORD *)v16 + 2) + v20, *(_QWORD *)(v17 + 16) + v20);
            ++v21;
            v20 += 600;
          }
          while (v21 < *(int *)(v17 + 12));
        }
        *(_QWORD *)v16 = &unk_1E6572B00;
        (**(void (***)(uint64_t))(*(_QWORD *)(v5 + 16) + 24 * i))(*(_QWORD *)(v5 + 16) + 24 * i);
      }
      v13 = *(_DWORD *)(v5 + 12);
      v4 = v25;
    }
    if ((int)v14 < v13)
    {
      v22 = 24 * v14;
      do
      {
        (**(void (***)(uint64_t))(*(_QWORD *)(v5 + 16) + v22))(*(_QWORD *)(v5 + 16) + v22);
        v22 += 24;
        LODWORD(v14) = v14 + 1;
      }
      while (*(_DWORD *)(v5 + 12) > (int)v14);
    }
    if ((int)v14 < v4)
    {
      v23 = &v9[24 * v14 + 8];
      do
      {
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 - 1) = &unk_1E6572B00;
        v23 += 24;
        LODWORD(v14) = v14 + 1;
      }
      while ((int)v14 < v4);
    }
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v9;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = v4;
  return result;
}

void sub_1B2D4BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

BOOL liDebug(const char *a1)
{
  unsigned __int8 v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  const char *i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  const char *v21;
  int v22;
  int v23;
  unsigned int *v24;
  const char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL8 v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  char *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  _BYTE *v53;
  const char *v54;
  const char *v55;
  const char *v56;

  {
    v48 = getenv("LITHIUM_DEBUG");
    LiString::LiString((LiString *)&v56, v48);
    LiString::trim((LiString *)&v56, (LiString *)&liDebug(char const*)::dbg);
    if (v56)
    {
      v49 = (unsigned int *)(v56 - 12);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        *v56 = 0;
        if (v56)
          v52 = (char *)(v56 - 12);
        else
          v52 = 0;
        free(v52);
      }
    }
    __cxa_atexit((void (*)(void *))LiString::~LiString, &liDebug(char const*)::dbg, &dword_1B2737000);
  }
  v56 = (const char *)liDebug(char const*)::dbg;
  if (liDebug(char const*)::dbg)
  {
    v3 = (unsigned int *)(liDebug(char const*)::dbg - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  LiString::LiString((LiString *)&v54, a1);
  LiString::trim((LiString *)&v54, (LiString *)&v55);
  if (v54)
  {
    v5 = (unsigned int *)(v54 - 12);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      *v54 = 0;
      if (v54)
        v8 = (char *)(v54 - 12);
      else
        v8 = 0;
      free(v8);
    }
  }
  for (i = v56; v56; i = v56)
  {
    v10 = *((unsigned int *)i - 2);
    if ((int)v10 < 1)
      break;
    v11 = 0;
    while (i[v11] != 44)
    {
      if (v10 == ++v11)
        goto LABEL_60;
    }
    if ((_DWORD)v11 == -1)
      break;
    LiString::to(&v56, v11 - 1, (LiString *)&v53);
    LiString::trim((LiString *)&v53, (LiString *)&v54);
    v12 = LiString::operator==(&v54, &v55);
    if (v54)
    {
      v13 = (unsigned int *)(v54 - 12);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        *v54 = 0;
        if (v54)
          v16 = (char *)(v54 - 12);
        else
          v16 = 0;
        free(v16);
        v54 = 0;
      }
    }
    if (v53)
    {
      v17 = (unsigned int *)(v53 - 12);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        *v53 = 0;
        if (v53)
          v20 = v53 - 12;
        else
          v20 = 0;
        free(v20);
      }
    }
    if (v12)
    {
      v34 = 1;
      goto LABEL_68;
    }
    v21 = v56;
    if (!v56)
    {
      v56 = 0;
      break;
    }
    v22 = *((_DWORD *)v56 - 2);
    if (v22 <= (int)v11 + 1 || (v23 = ~(_DWORD)v11 + v22, v23 < 1))
    {
      v25 = 0;
    }
    else
    {
      v24 = (unsigned int *)malloc_type_malloc((~(_DWORD)v11 + v22) + 13, 0x8903763CuLL);
      v24[1] = v23;
      v24[2] = v22 - v11;
      atomic_store(1u, v24);
      v25 = (const char *)(v24 + 3);
      memcpy(v24 + 3, &v21[v11 + 1], v23);
      v25[v23] = 0;
      v21 = v56;
      if (!v56)
      {
        v56 = v25;
        goto LABEL_51;
      }
    }
    v26 = (unsigned int *)(v21 - 12);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      *v56 = 0;
      if (v56)
        v29 = (char *)(v56 - 12);
      else
        v29 = 0;
      free(v29);
    }
    v56 = v25;
    if (!v25)
      break;
LABEL_51:
    v30 = (unsigned int *)(v25 - 12);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    do
    {
      v32 = __ldaxr(v30);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v30));
    if (!v33)
    {
      *v25 = 0;
      free(v30);
    }
  }
LABEL_60:
  LiString::trim((LiString *)&v56, (LiString *)&v54);
  v34 = LiString::operator==(&v54, &v55);
  if (v54)
  {
    v35 = (unsigned int *)(v54 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v54 = 0;
      if (v54)
        v38 = (char *)(v54 - 12);
      else
        v38 = 0;
      free(v38);
    }
  }
LABEL_68:
  if (v55)
  {
    v39 = (unsigned int *)(v55 - 12);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      *v55 = 0;
      if (v55)
        v42 = (char *)(v55 - 12);
      else
        v42 = 0;
      free(v42);
    }
  }
  if (v56)
  {
    v43 = (unsigned int *)(v56 - 12);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      *v56 = 0;
      if (v56)
        v46 = (char *)(v56 - 12);
      else
        v46 = 0;
      free(v46);
    }
  }
  return v34;
}

void sub_1B2D4BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a12)
  {
    v13 = (unsigned int *)(a12 - 12);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(a1);
}

void LiString::trim(LiString *this@<X0>, LiString *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  const char *v7;

  LiString::ltrim(this, (LiString *)&v7);
  LiString::rtrim(&v7, a2);
  if (v7)
  {
    v3 = (unsigned int *)(v7 - 12);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      *v7 = 0;
      if (v7)
        v6 = (char *)(v7 - 12);
      else
        v6 = 0;
      free(v6);
    }
  }
}

void sub_1B2D4C224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    LiGeode::print(a10, (_BYTE **)&a10);
  _Unwind_Resume(exception_object);
}

void LiString::~LiString(LiString *this)
{
  LiString::dec(this);
}

void LiString::format(LiString *this@<X0>, LiString *a2@<X8>, ...)
{
  char __str[2048];
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v5 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x800uLL, (const char *)this, va);
  LiString::LiString(a2, __str);
}

void LiString::format(LiString *this@<X0>, LiString *a2@<X8>)
{
  LiString::format((LiString *)"%d", a2, this);
}

void LiString::format(double a1@<D0>, LiString *a2@<X8>)
{
  LiString::format((LiString *)"%lg", a2, *(_QWORD *)&a1);
}

uint64_t LiString::contains(char **this, const char **a2)
{
  char *v2;
  const char *v3;
  uint64_t result;

  v2 = *this;
  if (!*this)
    return 0;
  v3 = *a2;
  if (!v3)
    return 1;
  result = (uint64_t)strstr(*this, v3);
  if (result)
    return (_DWORD)result - (_DWORD)v2 != -1;
  return result;
}

void LiString::ltrim(LiString *this@<X0>, LiString *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  if (*(_QWORD *)this)
  {
    v4 = *(unsigned int *)(*(_QWORD *)this - 8);
    if ((int)v4 < 1)
    {
      LODWORD(v5) = 0;
    }
    else
    {
      v5 = 0;
      v6 = MEMORY[0x1E0C80978];
      do
      {
        v7 = *(char *)(*(_QWORD *)this + v5);
        if ((v7 & 0x80000000) != 0)
        {
          if (!__maskrune(v7, 0x4000uLL))
            goto LABEL_12;
        }
        else if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) == 0)
        {
          goto LABEL_12;
        }
        ++v5;
      }
      while (v4 != v5);
      LODWORD(v5) = v4;
    }
LABEL_12:
    LiString::from(this, v5, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
}

void LiString::rtrim(const char **this@<X0>, LiString *a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  if (*this)
  {
    v4 = *((_DWORD *)*this - 2);
    v5 = MEMORY[0x1E0C80978];
    while (1)
    {
      v6 = v4;
      if (v4 < 1)
        break;
      --v4;
      v7 = (*this)[v6 - 1];
      if ((v7 & 0x80000000) != 0)
      {
        if (!__maskrune(v7, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    LiString::to(this, v6 - 1, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
}

void LiString::to(const char **this@<X0>, int a2@<W1>, LiString *a3@<X8>)
{
  const char *v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *this;
  if (!*this)
  {
LABEL_5:
    *(_QWORD *)a3 = 0;
    return;
  }
  if (*((_DWORD *)v4 - 2) > a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      LiString::LiString(a3, v4, a2 + 1);
      return;
    }
    goto LABEL_5;
  }
  v5 = (unsigned int *)(v4 - 12);
  *(_QWORD *)a3 = v4;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
}

void DiffuseMaterialLayer::setBlendMode(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    switch(a2)
    {
      case 0:
        PCPtr<LiImageSource>::reset((_QWORD *)(a1 + 40));
        break;
      case 1:
        v3 = operator new();
        *(_BYTE *)(v3 + 32) = 1;
        *(_QWORD *)(v3 + 16) = &unk_1E6573068;
        *(_QWORD *)(v3 + 24) = 0;
        *(_QWORD *)v3 = &off_1E6573020;
        *(_QWORD *)(v3 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v3);
        break;
      case 2:
        v4 = operator new();
        *(_BYTE *)(v4 + 32) = 1;
        *(_QWORD *)(v4 + 16) = &unk_1E65730F8;
        *(_QWORD *)(v4 + 24) = 0;
        *(_QWORD *)v4 = &off_1E65730B0;
        *(_QWORD *)(v4 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v4);
        break;
      case 3:
        v5 = operator new();
        *(_BYTE *)(v5 + 32) = 1;
        *(_QWORD *)(v5 + 16) = &unk_1E6573188;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)v5 = &off_1E6573140;
        *(_QWORD *)(v5 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v5);
        break;
      case 4:
        v6 = operator new();
        *(_BYTE *)(v6 + 32) = 1;
        *(_QWORD *)(v6 + 16) = &unk_1E6573218;
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)v6 = &off_1E65731D0;
        *(_QWORD *)(v6 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v6);
        break;
      case 5:
        v7 = operator new();
        *(_BYTE *)(v7 + 32) = 1;
        *(_QWORD *)(v7 + 16) = &unk_1E65732A8;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)v7 = &off_1E6573260;
        *(_QWORD *)(v7 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v7);
        break;
      case 6:
        v8 = operator new();
        *(_BYTE *)(v8 + 32) = 1;
        *(_QWORD *)(v8 + 16) = &unk_1E6573338;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)v8 = &off_1E65732F0;
        *(_QWORD *)(v8 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v8);
        break;
      case 7:
        v9 = operator new();
        *(_BYTE *)(v9 + 32) = 1;
        *(_QWORD *)(v9 + 16) = &unk_1E65733C8;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)v9 = &off_1E6573380;
        *(_QWORD *)(v9 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v9);
        break;
      case 8:
        v10 = operator new();
        *(_BYTE *)(v10 + 32) = 1;
        *(_QWORD *)(v10 + 16) = &unk_1E6573458;
        *(_QWORD *)(v10 + 24) = 0;
        *(_QWORD *)v10 = &off_1E6573410;
        *(_QWORD *)(v10 + 8) = a1;
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 40), (PCShared_base *)v10);
        break;
      default:
        return;
    }
  }
}

void DiffuseMaterialLayer::ReplaceDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  void *v9;
  PCSharedCount v10;
  PCSharedCount v11;
  PCSharedCount v12[3];
  PCSharedCount v13;
  PCSharedCount v14;
  char v15;
  uint64_t v16;
  PCSharedCount v17;
  PCSharedCount v18;
  char v19;
  uint64_t v20;
  PCSharedCount v21;
  _QWORD v22[3];
  PCSharedCount v23;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)v22);
  v9 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v10, v8 + 22);
  ProShade::operator*(v12, v22, &v9);
  ProShade::Vec4::Vec4(&v14, v12);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v19 = v15;
  v20 = v16;
  PCSharedCount::PCSharedCount(&v21, &v17);
  v14.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v12[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v9 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v18);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
}

void sub_1B2D4C904(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  uint64_t v3;

  PCSharedCount::~PCSharedCount(v1);
  *(_QWORD *)(v3 - 80) = v2 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v3 - 56));
  _Unwind_Resume(a1);
}

void DiffuseMaterialLayer::OverDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  PCSharedCount *v9;
  ProShade::ConstVector *v10;
  _QWORD v11[3];
  PCSharedCount v12;
  void *v13;
  PCSharedCount v14;
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  _QWORD v20[2];
  PCSharedCount v21;
  PCSharedCount v22;
  PCSharedCount v23[3];
  PCSharedCount v24;
  PCSharedCount v25;
  char v26;
  uint64_t v27;
  PCSharedCount v28;
  void *v29;
  char v30;
  uint64_t v31;
  PCSharedCount v32;
  void *v33;
  uint64_t v34;
  PCSharedCount v35;
  PCSharedCount v36;
  char v37;
  uint64_t v38;
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)&v33);
  ProShade::operator*(&v36, &v33, a3 + 608);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v33, &v36);
  v36.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v36.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v37 = *(_BYTE *)(a3 + 520);
  v38 = *(_QWORD *)(a3 + 528);
  PCSharedCount::PCSharedCount(v9, (const PCSharedCount *)(a3 + 536));
  v20[0] = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v21, v8 + 22);
  ProShade::operator*(v23, &v33, v20);
  ProShade::Vec4::Vec4(&v25, v23);
  v29 = &unk_1E6569AC8;
  v30 = v26;
  v31 = v27;
  PCSharedCount::PCSharedCount(&v32, &v28);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v18[0] = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 1.0);
  v18[2] = v10;
  PCSharedCount::PCSharedCount(&v19, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v13 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v14, v8 + 22);
  ProShade::Selector_base::_select((uint64_t)&v34, (const PCString *)0x19, &v40);
  v11[0] = &unk_1E6569AC8;
  v11[2] = v40.var0;
  PCSharedCount::PCSharedCount(&v12, &v41);
  PCSharedCount::~PCSharedCount(&v41);
  ProShade::operator*(v16, &v13, v11);
  ProShade::operator-(v20, v18, v16);
  ProShade::operator*(v23, v20, &v36);
  ProShade::operator+(&v25, &v29, v23);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v25);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v11[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  v13 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v29 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v36.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v33 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v35);
}

void sub_1B2D4CC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,PCSharedCount a32,uint64_t a33)
{
  PCSharedCount *v33;
  PCSharedCount *v34;
  PCSharedCount *v35;
  PCSharedCount *v36;
  PCSharedCount *v37;
  uint64_t v38;
  uint64_t v39;

  a33 = v38 + 16;
  PCSharedCount::~PCSharedCount(v37 + 3);
  a29 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a32);
  a25 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a28);
  a17 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a20);
  PCSharedCount::~PCSharedCount(v36);
  PCSharedCount::~PCSharedCount(&a16);
  a21 = v38 + 16;
  PCSharedCount::~PCSharedCount(v35);
  *(_QWORD *)(v39 - 176) = v38 + 16;
  PCSharedCount::~PCSharedCount(v34);
  *(_QWORD *)(v39 - 112) = v38 + 16;
  PCSharedCount::~PCSharedCount(v33);
  *(_QWORD *)(v39 - 144) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 120));
  _Unwind_Resume(a1);
}

void DiffuseMaterialLayer::AddDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  PC_Sp_counted_base *v9;
  PCSharedCount v10;
  void *v11;
  PC_Sp_counted_base *var0;
  PCSharedCount v13;
  PCSharedCount v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  _QWORD v20[3];
  PCSharedCount v21;
  PCSharedCount v22[2];
  PCSharedCount v23;
  PCSharedCount v24;
  void *v25;
  char v26[8];
  PC_Sp_counted_base *v27;
  PCSharedCount v28;
  void *v29;
  char v30[8];
  uint64_t v31;
  PCSharedCount v32;
  _QWORD v33[3];
  PCSharedCount v34;
  PCSharedCount v35[3];
  PCSharedCount v36;
  PCSharedCount v37;
  PCSharedCount v38;
  PC_Sp_counted_base *v39;
  PCSharedCount v40[2];

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)v33);
  ProShade::operator*(&v37, v33, a3 + 608);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v33, &v37);
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v40);
  v29 = &unk_1E6569AC8;
  v30[0] = *(_BYTE *)(a3 + 520);
  v31 = *(_QWORD *)(a3 + 528);
  PCSharedCount::PCSharedCount(&v32, (const PCSharedCount *)(a3 + 536));
  v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v23, v8 + 22);
  ProShade::operator*(v35, v33, v22);
  ProShade::Vec4::Vec4(&v37, v35);
  v25 = &unk_1E6569AC8;
  v26[0] = (char)v38.var0;
  v27 = v39;
  PCSharedCount::PCSharedCount(&v28, v40);
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v40);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  ProShade::Selector_base::_select((uint64_t)v30, (const PCString *)0x1D, &v37);
  v18[0] = &unk_1E6569AC8;
  v18[2] = v37.var0;
  PCSharedCount::PCSharedCount(&v19, &v38);
  PCSharedCount::~PCSharedCount(&v38);
  ProShade::Selector_base::_select((uint64_t)v26, (const PCString *)0x1D, &v37);
  v16[0] = &unk_1E6569AC8;
  v16[2] = v37.var0;
  PCSharedCount::PCSharedCount(&v17, &v38);
  PCSharedCount::~PCSharedCount(&v38);
  ProShade::operator+(v20, v18, v16);
  ProShade::Selector_base::_select(a3 + 520, (const PCString *)0x19, &v37);
  v11 = &unk_1E6569AC8;
  var0 = v37.var0;
  PCSharedCount::PCSharedCount(&v13, &v38);
  PCSharedCount::~PCSharedCount(&v38);
  ProShade::Selector_base::_select((uint64_t)v26, (const PCString *)0x19, &v37);
  v9 = v37.var0;
  PCSharedCount::PCSharedCount(&v10, &v38);
  PCSharedCount::~PCSharedCount(&v38);
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v39 = var0;
  PCSharedCount::PCSharedCount(v40, &v13);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v35[2].var0 = v9;
  PCSharedCount::PCSharedCount(&v36, &v10);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v37, (uint64_t)v35, v14);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v40);
  ProShade::Vec4::Vec4(v22, v20, v14);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, v22);
  v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  PCSharedCount::~PCSharedCount(&v10);
  v11 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v25 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
}

void sub_1B2D4D1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  PCSharedCount *v38;
  PCSharedCount *v39;
  PCSharedCount *v40;
  PCSharedCount *v41;
  PCSharedCount *v42;
  PCSharedCount *v43;
  uint64_t v44;
  uint64_t v45;

  a34 = v44 + 16;
  PCSharedCount::~PCSharedCount(v43 + 3);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a21);
  PCSharedCount::~PCSharedCount(v42);
  PCSharedCount::~PCSharedCount(v41);
  a30 = v44 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a33);
  a22 = v44 + 16;
  PCSharedCount::~PCSharedCount(v40);
  a26 = v44 + 16;
  PCSharedCount::~PCSharedCount(v39);
  a38 = v44 + 16;
  PCSharedCount::~PCSharedCount(a9);
  *(_QWORD *)(v45 - 216) = v44 + 16;
  PCSharedCount::~PCSharedCount(v38);
  *(_QWORD *)(v45 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v45 - 160));
  _Unwind_Resume(a1);
}

void sub_1B2D4D2D8()
{
  JUMPOUT(0x1B2D4D24CLL);
}

void sub_1B2D4D2E8()
{
  JUMPOUT(0x1B2D4D250);
}

void sub_1B2D4D2F4()
{
  JUMPOUT(0x1B2D4D25CLL);
}

void sub_1B2D4D304()
{
  JUMPOUT(0x1B2D4D260);
}

void sub_1B2D4D310()
{
  JUMPOUT(0x1B2D4D274);
}

void sub_1B2D4D31C()
{
  JUMPOUT(0x1B2D4D280);
}

void sub_1B2D4D32C()
{
  JUMPOUT(0x1B2D4D284);
}

void sub_1B2D4D338()
{
  JUMPOUT(0x1B2D4D290);
}

void sub_1B2D4D348()
{
  JUMPOUT(0x1B2D4D294);
}

void sub_1B2D4D354(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  PCSharedCount *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v37 - 120) = v35;
  PCSharedCount::~PCSharedCount(v34);
  *(_QWORD *)(v37 - 152) = v36 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v37 - 128));
  JUMPOUT(0x1B2D4D2A0);
}

void sub_1B2D4D3A8()
{
  JUMPOUT(0x1B2D4D2A4);
}

void sub_1B2D4D3B4()
{
  JUMPOUT(0x1B2D4D2B4);
}

void DiffuseMaterialLayer::OverUnderDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  void *v12;
  PCSharedCount v13;
  PCSharedCount v14;
  void *v15;
  PCSharedCount v16;
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  PCSharedCount v20;
  PCSharedCount v21[2];
  PCSharedCount v22;
  PCSharedCount v23;
  PCSharedCount v24[2];
  PCSharedCount v25;
  _QWORD v26[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v28;
  PCSharedCount v29[2];
  PCSharedCount v30;
  PCSharedCount v31;
  PCSharedCount v32[3];
  PCSharedCount v33;
  PCSharedCount v34[2];
  PCSharedCount v35;
  PCSharedCount v36;
  void *v37;
  _BYTE v38[16];
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41[2];
  PCSharedCount v42;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)&v37);
  ProShade::operator*(&v40, &v37, a3 + 608);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v37, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v35, v8 + 22);
  ProShade::operator*(&v40, &v37, v34);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v37, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 1);
  v30.var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v31, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::Selector_base::_select(a3 + 520, (const PCString *)0x19, &v23);
  v26[0] = &unk_1E6569AC8;
  var0 = v23.var0;
  PCSharedCount::PCSharedCount(&v28, v24);
  PCSharedCount::~PCSharedCount(v24);
  ProShade::operator-(v32, v29, v26);
  ProShade::operator*(&v40, &v37, v32);
  ProShade::operator+(v34, &v40, a3 + 512);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v26[0] = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 1);
  var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v28, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  ProShade::Selector_base::_select((uint64_t)v38, (const PCString *)0x19, &v20);
  v23.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v24[1] = v20;
  PCSharedCount::PCSharedCount(&v25, v21);
  PCSharedCount::~PCSharedCount(v21);
  ProShade::operator-(v29, v26, &v23);
  ProShade::operator*(&v40, a3 + 512, v29);
  ProShade::operator+(v32, &v37, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v23.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v30, v8 + 278);
  ProShade::mix(v34, v32, v29, &v40);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v26[0] = &unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 1);
  var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v28, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  ProShade::Selector_base::_select((uint64_t)v38, (const PCString *)0x19, &v40);
  v18[0] = &unk_1E6569AC8;
  v18[2] = v40.var0;
  PCSharedCount::PCSharedCount(&v19, v41);
  PCSharedCount::~PCSharedCount(v41);
  v15 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v16, v8 + 278);
  ProShade::operator*(&v20, v18, &v15);
  v12 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v13, v8 + 286);
  ProShade::operator*(&v23, &v20, &v12);
  ProShade::operator-(v29, v26, &v23);
  a3 += 704;
  ProShade::operator*(&v40, a3, v29);
  ProShade::VarT<ProShade::Node>::operator=(a3, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v23.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v12 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v20.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v15 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v37 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
}

void sub_1B2D4D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,PCSharedCount a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,PCSharedCount a36)
{
  PCSharedCount *v36;
  PCSharedCount *v37;
  PCSharedCount *v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v40 - 112) = v39 + 16;
  PCSharedCount::~PCSharedCount(v36 + 3);
  a33 = v39 + 16;
  PCSharedCount::~PCSharedCount(&a36);
  a25 = v39 + 16;
  PCSharedCount::~PCSharedCount(&a28);
  PCSharedCount::~PCSharedCount(&a12);
  a21 = v39 + 16;
  PCSharedCount::~PCSharedCount(&a24);
  a13 = v39 + 16;
  PCSharedCount::~PCSharedCount(&a16);
  a17 = v39 + 16;
  PCSharedCount::~PCSharedCount(v38);
  a29 = v39 + 16;
  PCSharedCount::~PCSharedCount(v37);
  *(_QWORD *)(v40 - 208) = v39 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v40 - 184));
  *(_QWORD *)(v40 - 176) = v39 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v40 - 152));
  *(_QWORD *)(v40 - 144) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v40 - 120));
  _Unwind_Resume(a1);
}

void ProShade::mix(const PCSharedCount *a1@<X0>, const PCSharedCount *a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v8;
  PC_Sp_counted_base *v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;

  var0 = a1[2].var0;
  v14[0] = &unk_1E6569AC8;
  v14[2] = var0;
  PCSharedCount::PCSharedCount(&v15, a1 + 3);
  v8 = a2[2].var0;
  v12[0] = &unk_1E6569AC8;
  v12[2] = v8;
  PCSharedCount::PCSharedCount(&v13, a2 + 3);
  v9 = a3[2].var0;
  v10[0] = &unk_1E6569AC8;
  v10[2] = v9;
  PCSharedCount::PCSharedCount(&v11, a3 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::eval((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, a4);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
}

void sub_1B2D4DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PCSharedCount *v17;
  PCSharedCount *v18;
  PCSharedCount *v19;

  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void DiffuseMaterialLayer::MultiplyDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  PCSharedCount *v9;
  void *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13[3];
  PCSharedCount v14;
  PCSharedCount v15;
  char v16;
  uint64_t v17;
  PCSharedCount v18;
  void *v19;
  char v20;
  uint64_t v21;
  PCSharedCount v22;
  _QWORD v23[3];
  PCSharedCount v24;
  PCSharedCount v25;
  char v26;
  uint64_t v27;
  PCSharedCount v28;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)v23);
  ProShade::operator*(&v25, v23, a3 + 608);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v23, &v25);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v26 = *(_BYTE *)(a3 + 520);
  v27 = *(_QWORD *)(a3 + 528);
  PCSharedCount::PCSharedCount(v9, (const PCSharedCount *)(a3 + 536));
  v10 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v11, v8 + 22);
  ProShade::operator*(v13, v23, &v10);
  ProShade::Vec4::Vec4(&v15, v13);
  v19 = &unk_1E6569AC8;
  v20 = v16;
  v21 = v17;
  PCSharedCount::PCSharedCount(&v22, &v18);
  v15.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v13[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  LiMaterialBlend::composite<LiMaterialBlend::Multiply>((uint64_t)&v25, (uint64_t)&v19, (uint64_t)&v15);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v15);
  v15.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v19 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v23[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
}

void sub_1B2D4DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28)
{
  PCSharedCount *v28;
  PCSharedCount *v29;
  PCSharedCount *v30;
  uint64_t v31;
  uint64_t v32;

  PCSharedCount::~PCSharedCount(v30 + 3);
  PCSharedCount::~PCSharedCount(v29);
  *(_QWORD *)(v32 - 96) = v31 + 16;
  PCSharedCount::~PCSharedCount(v28);
  PCSharedCount::~PCSharedCount(&a28);
  _Unwind_Resume(a1);
}

void LiMaterialBlend::composite<LiMaterialBlend::Multiply>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  _QWORD v8[3];
  PCSharedCount v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  _QWORD v20[3];
  PCSharedCount v21;
  _QWORD v22[3];
  PCSharedCount v23;
  _QWORD v24[3];
  PCSharedCount v25;
  PCSharedCount v26;
  PCSharedCount v27[2];
  PCSharedCount v28;
  _QWORD v29[3];
  PCSharedCount v30;
  void *v31;
  char v32;
  uint64_t v33;
  PCSharedCount v34;
  void *v35;
  uint64_t v36;
  PCSharedCount v37;
  PCSharedCount v38;
  PCSharedCount v39[2];
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42[2];
  PCSharedCount v43;
  PCSharedCount v44;
  PCSharedCount v45[2];
  PCSharedCount v46;
  PCSharedCount v47;
  PCSharedCount v48[2];
  PCSharedCount v49;
  _QWORD v50[3];
  PCSharedCount v51[2];

  v5 = a1 + 8;
  ProShade::Selector_base::_select(a1 + 8, (const PCString *)0x1D, &v47);
  v50[0] = &unk_1E6569AC8;
  v50[2] = v47.var0;
  PCSharedCount::PCSharedCount(v51, v48);
  PCSharedCount::~PCSharedCount(v48);
  ProShade::Selector_base::_select(v5, (const PCString *)0x19, &v44);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v48[1] = v44;
  PCSharedCount::PCSharedCount(&v49, v45);
  PCSharedCount::~PCSharedCount(v45);
  ProShade::Selector_base::_select(a2 + 8, (const PCString *)0x1D, &v41);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v45[1] = v41;
  PCSharedCount::PCSharedCount(&v46, v42);
  PCSharedCount::~PCSharedCount(v42);
  ProShade::Selector_base::_select(a2 + 8, (const PCString *)0x19, &v38);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v42[1] = v38;
  PCSharedCount::PCSharedCount(&v43, v39);
  PCSharedCount::~PCSharedCount(v39);
  ProShade::operator+(&v35, &v47, &v41);
  ProShade::operator*(&v31, &v47, &v41);
  ProShade::operator-(&v38, &v35, &v31);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v26.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 1.0);
  v27[1].var0 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(&v28, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  ProShade::operator/(v24, &v41, &v38);
  ProShade::operator-(v29, &v26, v24);
  ProShade::operator*(&v31, v29, v50);
  ProShade::operator/(v20, &v41, &v38);
  v12[0] = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 1.0);
  v12[2] = v7;
  PCSharedCount::PCSharedCount(&v13, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  ProShade::operator-(v14, v12, &v47);
  ProShade::operator*(v16, v14, &v44);
  ProShade::operator*(v8, v50, &v44);
  ProShade::operator*(v10, &v47, v8);
  ProShade::operator+(v18, v16, v10);
  ProShade::operator*(v22, v20, v18);
  ProShade::operator+(&v35, &v31, v22);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v8[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v29[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v26.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  ProShade::Selector_base::_select((uint64_t)&v36, (const PCString *)0x1D, &v26);
  v29[0] = &unk_1E6569AC8;
  v29[2] = v26.var0;
  PCSharedCount::PCSharedCount(&v30, v27);
  PCSharedCount::~PCSharedCount(v27);
  ProShade::Vec4::Vec4(&v31, v29, &v38);
  *(_QWORD *)a3 = &unk_1E6569AC8;
  *(_BYTE *)(a3 + 8) = v32;
  *(_QWORD *)(a3 + 16) = v33;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), &v34);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v29[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v35 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v46);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v49);
  v50[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v51);
}

void sub_1B2D4E44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  PCSharedCount *v63;
  PCSharedCount *v64;
  PCSharedCount *v65;
  PCSharedCount *v66;
  uint64_t v67;
  uint64_t v68;

  PCSharedCount::~PCSharedCount(v65);
  PCSharedCount::~PCSharedCount(v66);
  PCSharedCount::~PCSharedCount(&a63);
  *(_QWORD *)(v68 - 248) = v67 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v68 - 224));
  *(_QWORD *)(v68 - 216) = v67 + 16;
  PCSharedCount::~PCSharedCount(v64);
  *(_QWORD *)(v68 - 184) = v67 + 16;
  PCSharedCount::~PCSharedCount(v63);
  *(_QWORD *)(v68 - 152) = v67 + 16;
  PCSharedCount::~PCSharedCount(a10);
  *(_QWORD *)(v68 - 120) = v67 + 16;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B2D4E6F4()
{
  JUMPOUT(0x1B2D4E698);
}

void DiffuseMaterialLayer::SimpleMultiplyDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  PCSharedCount *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  PCSharedCount v13;
  PCSharedCount v14;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v19;
  PCSharedCount v20;
  char v21;
  ProShade::ConstVector *v22;
  PCSharedCount v23;
  PCSharedCount v24;
  char v25;
  ProShade::ConstVector *v26;
  PCSharedCount v27;
  void *v28;
  char v29;
  ProShade::ConstVector *v30;
  PCSharedCount v31;
  PCSharedCount v32;
  char v33;
  ProShade::ConstVector *v34;
  PCSharedCount v35;
  void *v36;
  _BYTE v37[16];
  PCSharedCount v38;
  PCSharedCount v39;
  char v40;
  uint64_t v41;
  PCSharedCount v42[2];

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)&v36);
  ProShade::operator*(&v39, &v36, a3 + 608);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v36, &v39);
  v39.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v42);
  v39.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v40 = *(_BYTE *)(a3 + 520);
  v41 = *(_QWORD *)(a3 + 528);
  PCSharedCount::PCSharedCount(v9, (const PCSharedCount *)(a3 + 536));
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 1.0);
  v26 = v10;
  PCSharedCount::PCSharedCount(&v27, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v20.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 1.0);
  v22 = v11;
  PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 1.0);
  var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v19, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec3::Vec3(&v28, &v24, &v20, v17);
  v32.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v33 = v29;
  v34 = v30;
  PCSharedCount::PCSharedCount(&v35, &v31);
  v28 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v20.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  ProShade::Selector_base::_select((uint64_t)v37, (const PCString *)0x1D, &v13);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v13.var0;
  PCSharedCount::PCSharedCount(&v19, &v14);
  PCSharedCount::~PCSharedCount(&v14);
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v15, v8 + 22);
  ProShade::mix(&v32, v17, &v13, &v20);
  ProShade::Vec3::Vec3(&v24, &v20);
  v28 = &unk_1E6569AC8;
  v29 = v25;
  v30 = v26;
  PCSharedCount::PCSharedCount(&v31, &v27);
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v20.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  ProShade::Selector_base::_select((uint64_t)v37, (const PCString *)0x19, &v13);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v13.var0;
  PCSharedCount::PCSharedCount(&v19, &v14);
  PCSharedCount::~PCSharedCount(&v14);
  ProShade::Vec4::Vec4(&v20, &v28, v17);
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v25 = v21;
  v26 = v22;
  PCSharedCount::PCSharedCount(&v27, &v23);
  v20.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  ProShade::operator*(&v20, &v39, &v24);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v20);
  v20.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v28 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v32.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v35);
  v39.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v42);
  v36 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
}

void sub_1B2D4EB2C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  uint64_t v6;
  uint64_t v7;

  PCSharedCount::~PCSharedCount(v5 + 3);
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(v3);
  PCSharedCount::~PCSharedCount(v2);
  *(_QWORD *)(v7 - 120) = v6 + 16;
  PCSharedCount::~PCSharedCount(v1);
  *(_QWORD *)(v7 - 152) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v7 - 128));
  _Unwind_Resume(a1);
}

void sub_1B2D4ED38()
{
  JUMPOUT(0x1B2D4ED04);
}

void DiffuseMaterialLayer::OverWhiteMultiplyDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  _QWORD v14[3];
  PCSharedCount v15;
  _QWORD v16[2];
  ProShade::ConstVector *v17;
  PCSharedCount v18;
  _QWORD v19[3];
  PCSharedCount v20;
  PCSharedCount v21[3];
  PCSharedCount v22;
  _QWORD v23[3];
  PCSharedCount v24;
  _QWORD v25[2];
  PCSharedCount v26;
  PCSharedCount v27;
  PCSharedCount v28;
  char v29;
  uint64_t v30;
  PCSharedCount v31;
  void *v32;
  uint64_t v33;
  PCSharedCount v34;
  PCSharedCount v35;
  PCSharedCount v36;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)&v32);
  v25[0] = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v26, v8 + 22);
  ProShade::operator*(&v28, &v32, v25);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v32, &v28);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v25[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v29 = *(_BYTE *)(a3 + 520);
  v30 = *(_QWORD *)(a3 + 528);
  PCSharedCount::PCSharedCount(&v31, (const PCSharedCount *)(a3 + 536));
  v23[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 1.0);
  v23[2] = v9;
  PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 1.0);
  v21[2].var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v22, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v19[0] = &unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 1.0);
  v19[2] = v11;
  PCSharedCount::PCSharedCount(&v20, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v16[0] = &unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 1.0);
  v17 = v12;
  PCSharedCount::PCSharedCount(&v18, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec4::Vec4(v25, v23, v21, v19, v16);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v19[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v16[0] = &unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 1.0);
  v17 = v13;
  PCSharedCount::PCSharedCount(&v18, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::Selector_base::_select((uint64_t)&v33, (const PCString *)0x19, &v35);
  v14[0] = &unk_1E6569AC8;
  v14[2] = v35.var0;
  PCSharedCount::PCSharedCount(&v15, &v36);
  PCSharedCount::~PCSharedCount(&v36);
  ProShade::operator-(v19, v16, v14);
  ProShade::operator*(v21, v19, v25);
  ProShade::operator+(v23, &v32, v21);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v19[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::operator*(v21, &v28, v23);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, v21);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v25[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v32 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
}

void sub_1B2D4F128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,PCSharedCount a32)
{
  PCSharedCount *v32;
  PCSharedCount *v33;
  uint64_t v34;
  uint64_t v35;

  PCSharedCount::~PCSharedCount(v33 + 3);
  PCSharedCount::~PCSharedCount(&a28);
  a29 = v34 + 16;
  PCSharedCount::~PCSharedCount(&a32);
  *(_QWORD *)(v35 - 160) = v34 + 16;
  PCSharedCount::~PCSharedCount(v32);
  *(_QWORD *)(v35 - 128) = v34 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v35 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2D4F344()
{
  JUMPOUT(0x1B2D4F318);
}

void DiffuseMaterialLayer::OverBlackScreenDiffuseColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  PCSharedCount v18;
  PCSharedCount v19[2];
  PCSharedCount v20;
  _QWORD v21[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v23;
  _QWORD v24[2];
  ProShade::ConstVector *v25;
  PCSharedCount v26;
  _QWORD v27[2];
  ProShade::ConstVector *v28;
  PCSharedCount v29;
  PCSharedCount v30[2];
  ProShade::ConstVector *v31;
  PCSharedCount v32;
  _QWORD v33[3];
  PCSharedCount v34;
  _QWORD v35[2];
  PCSharedCount v36;
  PCSharedCount v37;
  _QWORD v38[3];
  PCSharedCount v39;
  PCSharedCount v40;
  _BYTE v41[8];
  uint64_t v42;
  PCSharedCount v43;
  void *v44;
  uint64_t v45;
  PCSharedCount v46;
  PCSharedCount v47;
  PCSharedCount v48;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 27), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 29), (uint64_t)&v44);
  v35[0] = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v36, v8 + 22);
  ProShade::operator*(v38, &v44, v35);
  ProShade::operator*(&v40, v38, a3 + 608);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v44, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v38[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v35[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v41[0] = *(_BYTE *)(a3 + 520);
  v42 = *(_QWORD *)(a3 + 528);
  PCSharedCount::PCSharedCount(&v43, (const PCSharedCount *)(a3 + 536));
  v35[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0.0);
  v36.var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v37, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v33[0] = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.0);
  v33[2] = v10;
  PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0.0);
  v31 = v11;
  PCSharedCount::PCSharedCount(&v32, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v27[0] = &unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 1.0);
  v28 = v12;
  PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec4::Vec4(v38, v35, v33, v30, v27);
  v27[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v24[0] = &unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 1.0);
  v25 = v13;
  PCSharedCount::PCSharedCount(&v26, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::Selector_base::_select((uint64_t)&v45, (const PCString *)0x19, &v18);
  v21[0] = &unk_1E6569AC8;
  var0 = v18.var0;
  PCSharedCount::PCSharedCount(&v23, v19);
  PCSharedCount::~PCSharedCount(v19);
  ProShade::operator-(v27, v24, v21);
  ProShade::operator*(v30, v27, v38);
  ProShade::operator+(v33, &v44, v30);
  ProShade::Selector_base::_select((uint64_t)v41, (const PCString *)0x19, &v47);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v19[1] = v47;
  PCSharedCount::PCSharedCount(&v20, &v48);
  PCSharedCount::~PCSharedCount(&v48);
  ProShade::operator*(v35, v33, &v18);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v27[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v21[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 1.0);
  v31 = v14;
  PCSharedCount::PCSharedCount(&v32, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  v27[0] = &unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 1.0);
  v28 = v15;
  PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  v24[0] = &unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 1.0);
  v25 = v16;
  PCSharedCount::PCSharedCount(&v26, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  v21[0] = &unk_1E6569AC8;
  v17 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v17, 1.0);
  var0 = (PC_Sp_counted_base *)v17;
  PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  ProShade::Vec4::Vec4(v33, v30, v27, v24, v21);
  v21[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v27[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  ProShade::operator-(v24, v33, &v40);
  ProShade::operator-(v21, v33, v35);
  ProShade::operator*(v27, v24, v21);
  ProShade::operator-(v30, v33, v27);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, v30);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v27[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v21[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v44 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v46);
}

void sub_1B2D4F9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,PCSharedCount a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,PCSharedCount a32,uint64_t a33,uint64_t a34,uint64_t a35,PCSharedCount a36)
{
  PCSharedCount *v36;
  PCSharedCount *v37;
  uint64_t v38;
  uint64_t v39;

  a25 = v38 + 16;
  PCSharedCount::~PCSharedCount(v37 + 3);
  a21 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a24);
  PCSharedCount::~PCSharedCount(&a16);
  a17 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a20);
  a29 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a32);
  a33 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a36);
  *(_QWORD *)(v39 - 192) = v38 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 168));
  *(_QWORD *)(v39 - 160) = v38 + 16;
  PCSharedCount::~PCSharedCount(v36);
  *(_QWORD *)(v39 - 128) = v38 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2D4FD74()
{
  JUMPOUT(0x1B2D4FD48);
}

uint64_t DiffuseMaterialLayer::computeDiffuseColor(uint64_t a1, uint64_t a2, const PCSharedCount *a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, uint64_t, const PCSharedCount *))(*(_QWORD *)v4 + 16))(v4, a2, a3);
  return ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[68], a3 + 64);
}

void DiffuseMaterialLayer::getDiffuse(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  ProShade::ConstVector *v22;
  PCSharedCount v24;
  PCSharedCount v25[3];
  PCSharedCount v26;
  void *v27;
  PCSharedCount v28;
  PCSharedCount v29;
  _QWORD v30[3];
  PCSharedCount v31;
  _QWORD v32[2];
  ProShade::ConstVector *v33;
  PCSharedCount v34;
  _QWORD v35[2];
  PCSharedCount v36;
  PCSharedCount v37;
  _QWORD v38[3];
  PCSharedCount v39;
  _QWORD v40[3];
  PCSharedCount v41;
  _QWORD v42[3];
  PCSharedCount v43;
  PCSharedCount v44[3];
  PCSharedCount v45;
  _QWORD v46[3];
  PCSharedCount v47;
  _QWORD v48[3];
  PCSharedCount v49;
  PCSharedCount v50[3];
  PCSharedCount v51;
  _QWORD v52[3];
  PCSharedCount v53;
  _QWORD v54[3];
  PCSharedCount v55;
  _QWORD v56[3];
  PCSharedCount v57;
  PCSharedCount v58[3];
  PCSharedCount v59;
  _QWORD v60[3];
  PCSharedCount v61;
  PCSharedCount v62[3];
  PCSharedCount v63;
  _QWORD v64[3];
  PCSharedCount v65;
  _QWORD v66[3];
  PCSharedCount v67;
  _QWORD v68[3];
  PCSharedCount v69;
  PCSharedCount v70[2];
  PC_Sp_counted_base *v71;
  PCSharedCount v72;
  PCSharedCount v73;
  PCSharedCount v74;
  PCSharedCount v75;
  PCSharedCount v76;
  PCSharedCount v77[3];
  PCSharedCount v78;
  PCSharedCount v79[2];
  PC_Sp_counted_base *v80;
  PCSharedCount v81;
  void *v82;
  char v83;
  PC_Sp_counted_base *v84;
  PCSharedCount v85;
  void *v86;
  char v87;
  PC_Sp_counted_base *v88;
  PCSharedCount v89;
  void *v90;
  char v91;
  PC_Sp_counted_base *var0;
  PCSharedCount v93;
  PCSharedCount v94;
  char v95;
  PCSharedCount v96;
  PCSharedCount v97;
  PCSharedCount v98;
  char v99;
  PCSharedCount v100;
  PCSharedCount v101[2];

  v9 = *(_BYTE *)(a3 + 72);
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v99 = v9;
  v100.var0 = *(PC_Sp_counted_base **)(a3 + 80);
  PCSharedCount::PCSharedCount(v101, (const PCSharedCount *)(a3 + 88));
  v98.var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  v90 = &unk_1E6569AC8;
  v91 = v99;
  var0 = v100.var0;
  PCSharedCount::PCSharedCount(&v93, v101);
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v101);
  LiLightProperties::getAttenuation((LiLightProperties *)a3, &v98);
  v86 = &unk_1E6569AC8;
  v87 = v99;
  v88 = v100.var0;
  PCSharedCount::PCSharedCount(&v89, v101);
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v101);
  LiLightProperties::getLightColor((LiLightProperties *)a3, &v98);
  v82 = &unk_1E6569AC8;
  v83 = v99;
  v84 = v100.var0;
  PCSharedCount::PCSharedCount(&v85, v101);
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v101);
  v10 = a4 + 128;
  ProShade::Func<ProShade::Func_dot>::eval(a4 + 128, (uint64_t)&v90, v79);
  v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0.0);
  v75.var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v76, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v100.var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(v101, &v76);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v96.var0 = v80;
  PCSharedCount::PCSharedCount(&v97, &v81);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v98, (uint64_t)&v94, v77);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v97);
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v101);
  v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  if (*(_BYTE *)(a1 + 26))
  {
    ProShade::Func<ProShade::Func_normalize>::eval(a4 + 64, (uint64_t)&v73);
    ProShade::Func<ProShade::Func_dot>::eval(v10, (uint64_t)&v73, v70);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v100, a2 + 182);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v96, a2 + 182);
    ProShade::operator*(v68, &v98, &v94);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v12, 1);
    v100.var0 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(v101, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    v62[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v13 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v13, 0.5);
    v62[2].var0 = (PC_Sp_counted_base *)v13;
    PCSharedCount::PCSharedCount(&v63, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
    ProShade::operator*(v64, v62, v68);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v14 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v14, 0.33);
    v58[2].var0 = (PC_Sp_counted_base *)v14;
    PCSharedCount::PCSharedCount(&v59, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
    ProShade::operator+(v60, v68, v58);
    ProShade::operator/(&v94, v64, v60);
    ProShade::operator-(v66, &v98, &v94);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v60[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v59);
    v64[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v62[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v63);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v15 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v15, 0.45);
    v96.var0 = (PC_Sp_counted_base *)v15;
    PCSharedCount::PCSharedCount(&v97, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
    ProShade::operator*(&v98, &v94, v68);
    v60[0] = &unk_1E6569AC8;
    v16 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v16, 0.09);
    v60[2] = v16;
    PCSharedCount::PCSharedCount(&v61, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
    ProShade::operator+(v62, v68, v60);
    ProShade::operator/(v64, &v98, v62);
    v62[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v63);
    v60[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v100.var0 = v80;
    PCSharedCount::PCSharedCount(v101, &v81);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v96.var0 = v71;
    PCSharedCount::PCSharedCount(&v97, &v72);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v98, (uint64_t)&v94, v62);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    ProShade::operator*(v60, v62, v62);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v100.var0 = v80;
    PCSharedCount::PCSharedCount(v101, &v81);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v96.var0 = v71;
    PCSharedCount::PCSharedCount(&v97, &v72);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v98, (uint64_t)&v94, v58);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    ProShade::operator*(v56, v58, v58);
    ProShade::operator*(&v94, v10, v70);
    ProShade::operator-(&v98, &v73, &v94);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v98, (uint64_t)v54);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    ProShade::operator*(&v94, v10, v79);
    ProShade::operator-(&v98, &v90, &v94);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v98, (uint64_t)v52);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v54, (uint64_t)v52, v50);
    v38[0] = &unk_1E6569AC8;
    v17 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v17, 1);
    v38[2] = v17;
    PCSharedCount::PCSharedCount(&v39, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
    ProShade::operator-(v40, v38, v60);
    v32[0] = &unk_1E6569AC8;
    v18 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v18, 1);
    v33 = v18;
    PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
    ProShade::operator-(v35, v32, v56);
    ProShade::operator*(v42, v40, v35);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v100.var0 = (PC_Sp_counted_base *)v42[2];
    PCSharedCount::PCSharedCount(v101, &v43);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval((uint64_t)&v98, v44);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v27 = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v28, a2 + 186);
    ProShade::operator+(v30, &v27, v58);
    ProShade::operator/(v46, v44, v30);
    v19 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v19, 0.0);
    PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v100.var0 = (PC_Sp_counted_base *)v19;
    PCSharedCount::PCSharedCount(v101, &v24);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v96.var0 = v50[2].var0;
    PCSharedCount::PCSharedCount(&v97, &v51);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v98, (uint64_t)&v94, v25);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    ProShade::operator*(v48, v46, v25);
    v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v26);
    PCSharedCount::~PCSharedCount(&v24);
    v46[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v30[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v27 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v29);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v45);
    v42[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v35[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v32[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v40[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
    v38[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    ProShade::operator*(v44, v64, v48);
    ProShade::operator+(v46, v66, v44);
    v40[0] = &unk_1E6569AC8;
    v20 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v20, 1.0);
    v40[2] = v20;
    PCSharedCount::PCSharedCount(&v41, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    v35[0] = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v36, a2 + 182);
    v32[0] = &unk_1E6569AC8;
    v21 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v21, 0.61);
    v33 = v21;
    PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
    ProShade::operator*(v38, v35, v32);
    ProShade::operator+(v42, v40, v38);
    ProShade::operator*(&v94, v46, v42);
    ProShade::operator*(&v98, v77, &v94);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v77, &v98);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v101);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v42[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v38[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v32[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v35[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v40[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
    v46[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v45);
    v48[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v51);
    v52[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v53);
    v54[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v56[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v59);
    v60[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v62[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v63);
    v64[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v66[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v67);
    v68[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    v70[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
  }
  ProShade::Selector_base::_select(a4 + 520, (const PCString *)0x1D, &v73);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v96.var0 = v73.var0;
  PCSharedCount::PCSharedCount(&v97, &v74);
  PCSharedCount::~PCSharedCount(&v74);
  v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v75, a2 + 18);
  ProShade::operator*(&v98, &v94, &v73);
  v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v97);
  ProShade::operator*(&v94, &v98, &v82);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v98, &v94);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v97);
  ProShade::operator*(&v94, &v98, v77);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v98, &v94);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v97);
  ProShade::operator*(&v94, &v98, &v86);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v98, &v94);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v97);
  v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v22 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v22, 0.0);
  v75.var0 = (PC_Sp_counted_base *)v22;
  PCSharedCount::PCSharedCount(&v76, (ProShade::ConstVector *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)));
  ProShade::Vec4::Vec4(&v94, &v98, &v73);
  *(_QWORD *)a5 = &unk_1E6569AC8;
  *(_BYTE *)(a5 + 8) = v95;
  *(PCSharedCount *)(a5 + 16) = v96;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a5 + 24), &v97);
  v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v97);
  v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v101);
  v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v78);
  v79[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v81);
  v82 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v85);
  v86 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v90 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v93);
}

void sub_1B2D50C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount *a12, PCSharedCount *a13, PCSharedCount *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,PCSharedCount a41,uint64_t a42,uint64_t a43,uint64_t a44,PCSharedCount a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,PCSharedCount a53,uint64_t a54,uint64_t a55,uint64_t a56,PCSharedCount a57,uint64_t a58,uint64_t a59,uint64_t a60,PCSharedCount a61,uint64_t a62,uint64_t a63)
{
  PCSharedCount a65;
  uint64_t a66;
  PCSharedCount a69;
  uint64_t a70;
  PCSharedCount *v70;
  PCSharedCount *v71;
  uint64_t v72;
  PCSharedCount *v73;
  uint64_t v74;

  *(_QWORD *)(v74 - 120) = v72 + 16;
  PCSharedCount::~PCSharedCount(v73 + 3);
  *(_QWORD *)(v74 - 152) = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v74 - 128));
  a50 = v72 + 16;
  PCSharedCount::~PCSharedCount(&a53);
  a42 = v72 + 16;
  PCSharedCount::~PCSharedCount(&a45);
  PCSharedCount::~PCSharedCount(v71);
  PCSharedCount::~PCSharedCount(&a41);
  a46 = v72 + 16;
  PCSharedCount::~PCSharedCount(v70);
  a58 = v72 + 16;
  PCSharedCount::~PCSharedCount(&a61);
  a54 = v72 + 16;
  PCSharedCount::~PCSharedCount(&a57);
  a62 = v72 + 16;
  PCSharedCount::~PCSharedCount(&a65);
  a66 = v72 + 16;
  PCSharedCount::~PCSharedCount(&a69);
  a70 = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x200]);
  STACK[0x208] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x220]);
  STACK[0x228] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x240]);
  STACK[0x248] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x260]);
  STACK[0x268] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x280]);
  STACK[0x288] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2A0]);
  STACK[0x2A8] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2C0]);
  STACK[0x2C8] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2E0]);
  STACK[0x2E8] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x300]);
  STACK[0x308] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x320]);
  STACK[0x328] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x340]);
  STACK[0x348] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x360]);
  STACK[0x368] = v72 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x380]);
  *(_QWORD *)(v74 - 248) = v72 + 16;
  PCSharedCount::~PCSharedCount(a14);
  *(_QWORD *)(v74 - 216) = v72 + 16;
  PCSharedCount::~PCSharedCount(a12);
  *(_QWORD *)(v74 - 184) = v72 + 16;
  PCSharedCount::~PCSharedCount(a13);
  _Unwind_Resume(a1);
}

void sub_1B2D51474()
{
  JUMPOUT(0x1B2D51300);
}

void sub_1B2D5147C()
{
  JUMPOUT(0x1B2D51324);
}

void sub_1B2D514AC()
{
  JUMPOUT(0x1B2D513C4);
}

void sub_1B2D514F4()
{
  JUMPOUT(0x1B2D513D8);
}

void sub_1B2D51514()
{
  JUMPOUT(0x1B2D51428);
}

uint64_t DiffuseMaterialLayer::isOpaque(uint64_t a1, char *a2, os_unfair_lock_s *a3, uint64_t (***a4)(_QWORD, _QWORD))
{
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t v9;
  uint64_t result;
  char v11;
  double v12;

  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  v9 = LiMaterialLayerUniform::get(a3, DstAlphaFactor);
  v12 = 0.0;
  result = (uint64_t)LiMaterial::get<double>((PCArray_base *)a3, v9 + 160, (BOOL *)&v12);
  if (*(_DWORD *)(a1 + 32) == 6)
  {
    if (fabs(v12 + -1.0) >= 0.0000001
      || (result = LiMaterial::getSamplerInfo(a3, *(const ProShade::SamplerNode **)(v9 + 368)), *(_BYTE *)(result + 316))
      && (result = (**a4)(a4, *(_QWORD *)(v9 + 368)), (result & 1) == 0))
    {
      v11 = 0;
LABEL_6:
      *a2 = v11;
    }
  }
  else if (!*(_BYTE *)(a1 + 9) && fabs(v12 + -1.0) < 0.0000001)
  {
    result = *(_BYTE *)(LiMaterial::getSamplerInfo(a3, *(const ProShade::SamplerNode **)(v9 + 368)) + 316)
           ? (**a4)(a4, *(_QWORD *)(v9 + 368))
           : 1;
    if (!*(_BYTE *)(a1 + 28) && (_DWORD)result)
    {
      v11 = 1;
      goto LABEL_6;
    }
  }
  return result;
}

PCArray_base *LiMaterial::get<double>(PCArray_base *result, uint64_t a2, BOOL *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)result + 147);
  if ((int)v3 >= 1)
  {
    v5 = 0;
    for (i = 8; ; i += 152)
    {
      if (v5 >= *((int *)result + 147))
        PCArray_base::badIndex(result);
      v7 = *((_QWORD *)result + 74);
      if (*(_QWORD *)(v7 + i - 8) == *(_QWORD *)(a2 + 16))
        break;
      if (++v5 >= v3)
        return result;
    }
    if (v5 >= *((int *)result + 147))
      PCArray_base::badIndex(result);
    if (*(_DWORD *)(v7 + i) == 3)
    {
      v8 = 0;
      if (v5 >= *((int *)result + 147))
        PCArray_base::badIndex(result);
      result = (PCArray_base *)ProShade::Value::get((const PCString *)(v7 + i), (const PCString *)*(unsigned int *)(v7 + i), (BOOL *)&v8);
      *(_QWORD *)a3 = v8;
    }
    else
    {
      if (v5 >= *((int *)result + 147))
        PCArray_base::badIndex(result);
      return (PCArray_base *)ProShade::Value::get((const PCString *)(v7 + i), (const PCString *)*(unsigned int *)(v7 + i), a3);
    }
  }
  return result;
}

void DiffuseMaterialLayer::computeColor(HGGLBlendingInfo *a1, uint64_t a2, const PCSharedCount *a3)
{
  os_unfair_lock_s *v5;
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t SamplerInfo;
  _QWORD *v8;
  PCShared_base *v9;
  _QWORD *v10;
  PCShared_base *v11;
  uint64_t v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  PCArray_base *v20;
  const LiLight *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  PCSharedCount *v29;
  ProShade::ConstVector *v30;
  ProShade::ConstVector *v31;
  unsigned __int8 *v32;
  LiLayeredMaterial *v33;
  _QWORD v35[2];
  PCSharedCount v36;
  PCSharedCount v37;
  _QWORD v38[3];
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43[4];
  PCSharedCount v44[4];
  PCSharedCount v45[4];
  PCSharedCount v46;
  PCSharedCount v47;
  PCSharedCount v48;
  ProShade::ConstVector *v49;
  PCSharedCount v50;
  PCSharedCount v51;
  PCSharedCount v52;
  PC_Sp_counted_base *v53;
  PCSharedCount v54;
  __int128 v55;
  PC_Sp_counted_base *v56;
  PCSharedCount v57;
  void *v58;
  _BYTE v59[8];
  PCSharedCount v60;
  PCSharedCount v61;
  PCSharedCount v62;
  char var0;
  PC_Sp_counted_base *v64;
  PCSharedCount v65;
  char v66;
  __int16 v67;
  PCSharedCount v68;
  char v69;
  uint64_t v70;
  PCSharedCount v71;
  void *v72;
  _QWORD *v73;
  PCSharedCount v74;
  void *v75;
  _QWORD *v76;
  PCSharedCount v77;
  PCSharedCount v78;
  PCSharedCount v79;
  ProShade::ConstVector *v80;
  PCSharedCount v81;
  PCSharedCount v82;
  PCSharedCount v83[2];

  v5 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(a1);
  v33 = (LiLayeredMaterial *)LiMaterialLayerUniform::get(v5, DstAlphaFactor);
  v32 = (unsigned __int8 *)a1;
  if (*((_BYTE *)a1 + 28))
  {
    SamplerInfo = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)(a2 + 40), *((const ProShade::SamplerNode **)v33 + 170));
    v55 = *(_OWORD *)(SamplerInfo + 316);
    v56 = *(PC_Sp_counted_base **)(SamplerInfo + 332);
    v68.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
    v69 = *((_BYTE *)v33 + 1352);
    v70 = *((_QWORD *)v33 + 170);
    PCSharedCount::PCSharedCount(&v71, (const PCSharedCount *)v33 + 171);
    v8 = (_QWORD *)*((_QWORD *)v33 + 174);
    v68.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
    v72 = &unk_1E656A080;
    v73 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*v8 - 24));
    else
      v9 = 0;
    PCSharedCount::PCSharedCount(&v74, v9);
    v10 = (_QWORD *)*((_QWORD *)v33 + 178);
    v72 = &unk_1E656A240;
    v75 = &unk_1E656A080;
    v76 = v10;
    if (v10)
      v11 = (PCShared_base *)((char *)v10 + *(_QWORD *)(*v10 - 24));
    else
      v11 = 0;
    PCSharedCount::PCSharedCount(&v77, v11);
    v75 = &unk_1E656A2C0;
    v12 = *(_QWORD *)(a2 + 40);
    v66 = *(_BYTE *)(v12 + 697);
    v67 = *(_WORD *)(v12 + 698);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v42, (const PCSharedCount *)v33 + 214);
    LiMaterialLayer::sampleTextureMap(&v68, (uint64_t)&v40, (uint64_t)&v55, (uint64_t)&v78);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v43);
    v68.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
    v75 = &unk_1E656A080;
    PCSharedCount::~PCSharedCount(&v77);
    v72 = &unk_1E656A080;
    PCSharedCount::~PCSharedCount(&v74);
    v68.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
    PCSharedCount::~PCSharedCount(&v71);
    v58 = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v60, (const PCSharedCount *)v33 + 274);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v78, (uint64_t)&v58, &v62);
    ProShade::operator*(&v40, &a3[76], &v62);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[76], &v40);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v43);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v58 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
  }
  DiffuseMaterialLayer::computeDiffuseColor((uint64_t)a1, a2, a3);
  if (*((_BYTE *)a1 + 8))
  {
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v42, (const PCSharedCount *)v33 + 38);
  }
  else
  {
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v42, (const PCSharedCount *)v33 + 18);
  }
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[40], &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 0.0);
  v80 = v13;
  PCSharedCount::PCSharedCount(&v81, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  v58 = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 0.0);
  v60.var0 = (PC_Sp_counted_base *)v14;
  PCSharedCount::PCSharedCount(&v61, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0.0);
  v56 = (PC_Sp_counted_base *)v15;
  PCSharedCount::PCSharedCount(&v57, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  ProShade::Vec3::Vec3(&v40, &v78, &v58, &v55);
  v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = (char)v41.var0;
  v64 = v42.var0;
  PCSharedCount::PCSharedCount(&v65, v43);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v57);
  v58 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v81);
  v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 0.0);
  v80 = v16;
  PCSharedCount::PCSharedCount(&v81, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  v17 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v17, 0.0);
  v56 = (PC_Sp_counted_base *)v17;
  PCSharedCount::PCSharedCount(&v57, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v18 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v18, 0.0);
  v53 = (PC_Sp_counted_base *)v18;
  PCSharedCount::PCSharedCount(&v54, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v19 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v19, 0.0);
  v49 = v19;
  PCSharedCount::PCSharedCount(&v50, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
  ProShade::Vec4::Vec4(&v40, &v78, &v55, &v51, &v47);
  v58 = &unk_1E6569AC8;
  v59[0] = v41.var0;
  v60.var0 = v42.var0;
  PCSharedCount::PCSharedCount(&v61, v43);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v54);
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v57);
  v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v81);
  v22 = *(unsigned int *)(a2 + 12);
  if ((int)v22 >= 1)
  {
    v23 = 0;
    v24 = 720;
    while (1)
    {
      if (v23 >= *(int *)(a2 + 12))
        PCArray_base::badIndex(v20);
      v25 = (_BYTE *)(*(_QWORD *)(a2 + 16) + v24);
      if (!*v25)
        goto LABEL_23;
      v26 = v25 - 720;
      v27 = LiLightInfo::get((LiLightInfo *)(v25 - 720), v21);
      LiLightProperties::LiLightProperties(&v40, v26, v27, a3, *(unsigned __int8 *)(a2 + 32));
      v28 = *((_DWORD *)v40.var0 + 164);
      if (!v28)
        break;
      if (v28 != 100)
      {
        DiffuseMaterialLayer::getDiffuse((uint64_t)v32, (const PCSharedCount *)v33, (uint64_t)&v40, (uint64_t)a3, (uint64_t)&v55);
        ProShade::operator+(&v78, &v58, &v55);
        ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v58, &v78);
        v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v81);
        *(_QWORD *)&v55 = &unk_1E6569AC8;
        v29 = &v57;
LABEL_21:
        PCSharedCount::~PCSharedCount(v29);
      }
      v45[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v44[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v45);
      v43[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v44);
LABEL_23:
      ++v23;
      v24 += 944;
      if (v22 == v23)
        goto LABEL_24;
    }
    LiLightProperties::ambient((LiLightProperties *)&v40, &v47);
    ProShade::Selector_base::_select((uint64_t)&a3[65], (const PCString *)0x1D, &v78);
    v38[0] = &unk_1E6569AC8;
    v38[2] = v78.var0;
    PCSharedCount::PCSharedCount(&v39, &v79);
    PCSharedCount::~PCSharedCount(&v79);
    ProShade::operator*(&v51, &v47, v38);
    v35[0] = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v36, (const PCSharedCount *)v33 + 18);
    ProShade::operator*(&v55, &v51, v35);
    ProShade::operator+(&v78, &v62, &v55);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v62, &v78);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    *(_QWORD *)&v55 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v35[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v38[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v29 = &v50;
    goto LABEL_21;
  }
LABEL_24:
  ProShade::Selector_base::_select((uint64_t)&a3[65], (const PCString *)0x1D, (PCSharedCount *)&v55);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v42.var0 = (PC_Sp_counted_base *)v55;
  PCSharedCount::PCSharedCount(v43, (const PCSharedCount *)&v55 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v55 + 1);
  LiLayeredMaterial::sampleDiffEnvironment((uint64_t)a3, (uint64_t)&v55);
  ProShade::operator*(&v78, &v40, &v55);
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v57);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  ProShade::Selector_base::_select((uint64_t)&v79, (const PCString *)0x1D, &v40);
  v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v53 = v40.var0;
  PCSharedCount::PCSharedCount(&v54, &v41);
  PCSharedCount::~PCSharedCount(&v41);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v30 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v30, 0.0);
  v49 = v30;
  PCSharedCount::PCSharedCount(&v50, (ProShade::ConstVector *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
  ProShade::Vec4::Vec4(&v55, &v51, &v47);
  ProShade::operator+(&v40, &v58, &v55);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v58, &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v57);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v54);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[80], &v62);
  ProShade::Selector_base::_select((uint64_t)v59, (const PCString *)0x1D, &v51);
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  v56 = v51.var0;
  PCSharedCount::PCSharedCount(&v57, &v52);
  PCSharedCount::~PCSharedCount(&v52);
  ProShade::Selector_base::_select((uint64_t)&a3[65], (const PCString *)0x19, &v47);
  v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v53 = v47.var0;
  PCSharedCount::PCSharedCount(&v54, &v48);
  PCSharedCount::~PCSharedCount(&v48);
  ProShade::Vec4::Vec4(&v40, &v55, &v51);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[84], &v40);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v54);
  *(_QWORD *)&v55 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v57);
  if (v32[56])
  {
    LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), v33, (const LiMaterialLayerUniform *)v32[27], v32[29], (uint64_t)&v40);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v31 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v31, 1.0);
    v49 = v31;
    PCSharedCount::PCSharedCount(&v50, (ProShade::ConstVector *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
    ProShade::Selector_base::_select((uint64_t)&v41, (const PCString *)0x19, &v82);
    v35[0] = &unk_1E6569AC8;
    v36.var0 = v82.var0;
    PCSharedCount::PCSharedCount(&v37, v83);
    PCSharedCount::~PCSharedCount(v83);
    ProShade::operator*(v38, &a3[76], v35);
    ProShade::operator-(&v51, &v47, v38);
    ProShade::operator*(&v55, &a3[88], &v51);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[88], (const PCSharedCount *)&v55);
    *(_QWORD *)&v55 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v38[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v35[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v50);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v43);
  }
  v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v81);
  v58 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v65);
}

void sub_1B2D52424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCSharedCount *a19, PCSharedCount *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  PCSharedCount *v63;

  PCSharedCount::~PCSharedCount(v63 + 3);
  _Unwind_Resume(a1);
}

void LiLightProperties::ambient(LiLightProperties *this@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 40, (const PCString *)0x1D, &v3);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = v3.var0;
  PCSharedCount::PCSharedCount(a2 + 3, &v4);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D52B18(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void LiLightProperties::~LiLightProperties(PCSharedCount *this)
{
  this[12].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 15);
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 11);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 7);
}

int8x8_t *DiffuseMaterialLayer::writeHash(DiffuseMaterialLayer *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B3559B32 & 0x7FFFFFFFFFFFFFFFLL));
  (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)this + 8));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 26));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 27));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 56));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 28));
  return PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 29));
}

void DiffuseMaterialLayer::DiffuseMaterialLayer(DiffuseMaterialLayer *this, uint64_t a2)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = &off_1E65EB048;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 1;
  LiMaterialLayer::LiMaterialLayer(this, (uint64_t *)&off_1E6572C38, a2);
  *(_QWORD *)this = &off_1E6572BB0;
  *((_QWORD *)this + 8) = &unk_1E6572C18;
  *((_DWORD *)this + 8) = 0;
  *(_DWORD *)((char *)this + 26) = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)v3 = &unk_1E65770D0;
  *(_QWORD *)(v3 + 8) = &unk_1E6577118;
  *((_QWORD *)this + 5) = v3;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 6, (PCShared_base *)(v3 + 8));
  *((_BYTE *)this + 56) = 0;
}

void sub_1B2D52CCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 64) = v3 + 16;
  *(_BYTE *)(v1 + 80) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void SpecularMaterialLayer::ReplaceSpecularColor::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t v8;
  PCSharedCount v9[3];
  PCSharedCount v10;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::getSurfaceSpecularColor((_DWORD *)(*(_QWORD *)(a1 + 8) + 144), *(os_unfair_lock_s **)(a2 + 40), v8, a3, v9);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 576, v9);
  v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B2D52D80(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void isoPhongShader(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const PCSharedCount *v5;
  PCSharedCount *v6;
  PC_Sp_counted_base *var0;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  _QWORD v11[3];
  PCSharedCount v12;
  _QWORD v13[3];
  PCSharedCount v14;
  PCSharedCount v15[2];
  PC_Sp_counted_base *v16;
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  PCSharedCount v20[3];
  PCSharedCount v21;
  PCSharedCount v22[3];
  PCSharedCount v23;
  void *v24;
  char v25;
  PC_Sp_counted_base *v26;
  PCSharedCount v27;
  _QWORD v28[2];
  ProShade::ConstVector *v29;
  PCSharedCount v30;
  PCSharedCount v31;
  char v32;
  PC_Sp_counted_base *v33;
  PCSharedCount v34[2];

  v5 = *(const PCSharedCount **)(a1 + 16);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v32 = *(_BYTE *)(a1 + 72);
  v33 = *(PC_Sp_counted_base **)(a1 + 80);
  PCSharedCount::PCSharedCount(v34, (const PCSharedCount *)(a1 + 88));
  v31.var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  v24 = &unk_1E6569AC8;
  v25 = v32;
  v26 = v33;
  PCSharedCount::PCSharedCount(&v27, v34);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v34);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v33 = v26;
  PCSharedCount::PCSharedCount(v6, &v27);
  var0 = v5[18].var0;
  v28[0] = &unk_1E6569AC8;
  v29 = (ProShade::ConstVector *)var0;
  PCSharedCount::PCSharedCount(&v30, v5 + 19);
  ProShade::Func<ProShade::Func_reflect>::eval((uint64_t)&v31, (uint64_t)v28, v22);
  v28[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v34);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v22, (uint64_t)&v5[12], v20);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v33 = v20[2].var0;
  PCSharedCount::PCSharedCount(v34, &v21);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval((uint64_t)&v31, v15);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v34);
  v11[0] = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 4);
  v11[2] = v8;
  PCSharedCount::PCSharedCount(&v12, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::operator/(v13, a2, v11);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v33 = v16;
  PCSharedCount::PCSharedCount(v34, &v17);
  v28[0] = &unk_1E6569AC8;
  v29 = (ProShade::ConstVector *)v13[2];
  PCSharedCount::PCSharedCount(&v30, &v14);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v31, (uint64_t)v28, (uint64_t)v18);
  v28[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v34);
  v13[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v11[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v28[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0.0);
  v29 = v9;
  PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::operator>((uint64_t)v20, (uint64_t)v28, &v31);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.0);
  v16 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v17, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  ProShade::Func<ProShade::Func_cond>::eval((uint64_t)&v31, (uint64_t)v18, (uint64_t)v15, a3);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v34);
  v28[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
}

void sub_1B2D53138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33)
{
  PCSharedCount *v33;
  PCSharedCount *v34;
  PCSharedCount *v35;
  PCSharedCount *v36;
  uint64_t v37;
  uint64_t v38;

  PCSharedCount::~PCSharedCount(v36);
  *(_QWORD *)(v38 - 120) = v37 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v38 - 96));
  *(_QWORD *)(v38 - 152) = v37 + 16;
  PCSharedCount::~PCSharedCount(v35);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a25);
  a26 = v37 + 16;
  PCSharedCount::~PCSharedCount(v34);
  a30 = v37 + 16;
  PCSharedCount::~PCSharedCount(&a33);
  *(_QWORD *)(v38 - 184) = v37 + 16;
  PCSharedCount::~PCSharedCount(v33);
  _Unwind_Resume(a1);
}

void isoBlinnPhongShader(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v5;
  PC_Sp_counted_base *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  PCSharedCount v9[2];
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  PCSharedCount v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  void *v18;
  char v19;
  PC_Sp_counted_base *v20;
  PCSharedCount v21;
  _QWORD v22[2];
  ProShade::ConstVector *v23;
  PCSharedCount v24;
  PCSharedCount v25;
  char v26;
  PC_Sp_counted_base *var0;
  PCSharedCount v28;

  v5 = *(_QWORD *)(a1 + 16);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v26 = *(_BYTE *)(a1 + 72);
  var0 = *(PC_Sp_counted_base **)(a1 + 80);
  PCSharedCount::PCSharedCount(&v28, (const PCSharedCount *)(a1 + 88));
  v25.var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  v18 = &unk_1E6569AC8;
  v19 = v26;
  v20 = var0;
  PCSharedCount::PCSharedCount(&v21, &v28);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  ProShade::operator+(&v25, &v18, v5 + 96);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v25, (uint64_t)v16);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  ProShade::Func<ProShade::Func_dot>::eval(v5 + 128, (uint64_t)v16, v14);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v14[2].var0;
  PCSharedCount::PCSharedCount(&v28, &v15);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval((uint64_t)&v25, v9);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v10;
  PCSharedCount::PCSharedCount(&v28, &v11);
  v6 = a2[2].var0;
  v22[0] = &unk_1E6569AC8;
  v23 = (ProShade::ConstVector *)v6;
  PCSharedCount::PCSharedCount(&v24, a2 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v25, (uint64_t)v22, (uint64_t)v12);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v22[0] = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0.0);
  v23 = v7;
  PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  ProShade::operator>((uint64_t)v14, (uint64_t)v22, &v25);
  v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0.0);
  v10 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v11, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::Func<ProShade::Func_cond>::eval((uint64_t)&v25, (uint64_t)v12, (uint64_t)v9, a3);
  v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v18 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
}

void sub_1B2D535FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  PCSharedCount *v25;
  PCSharedCount *v26;
  PCSharedCount *v27;
  PCSharedCount *v28;
  uint64_t v29;
  uint64_t v30;

  PCSharedCount::~PCSharedCount(v28);
  *(_QWORD *)(v30 - 112) = v29 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v30 - 88));
  *(_QWORD *)(v30 - 144) = v29 + 16;
  PCSharedCount::~PCSharedCount(v27);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a16);
  a17 = v29 + 16;
  PCSharedCount::~PCSharedCount(v26);
  a21 = v29 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a24);
  a25 = v29 + 16;
  PCSharedCount::~PCSharedCount(v25);
  _Unwind_Resume(a1);
}

void isoWardShader(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  PC_Sp_counted_base *v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[2];
  PC_Sp_counted_base *v19;
  PCSharedCount v20;
  PCSharedCount v21[3];
  PCSharedCount v22;
  PCSharedCount v23[2];
  PC_Sp_counted_base *v24;
  PCSharedCount v25;
  PCSharedCount v26[3];
  PCSharedCount v27;
  PCSharedCount v28[3];
  PCSharedCount v29;
  PCSharedCount v30[3];
  PCSharedCount v31;
  PCSharedCount v32[2];
  PC_Sp_counted_base *v33;
  PCSharedCount v34;
  PCSharedCount v35[3];
  PCSharedCount v36;
  _QWORD v37[3];
  PCSharedCount v38;
  _QWORD v39[3];
  PCSharedCount v40;
  _QWORD v41[3];
  PCSharedCount v42;
  _QWORD v43[3];
  PCSharedCount v44;
  _QWORD v45[3];
  PCSharedCount v46;
  void *v47;
  char v48;
  uint64_t v49;
  PCSharedCount v50;
  void *v51;
  char v52;
  uint64_t v53;
  PCSharedCount v54;
  void *v55;
  char v56;
  PC_Sp_counted_base *v57;
  PCSharedCount v58;
  _QWORD v59[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v61;
  void *v62;
  char v63;
  PC_Sp_counted_base *v64;
  PCSharedCount v65[2];

  v6 = *(_QWORD *)(a1 + 16);
  v62 = &unk_1E6569AC8;
  v63 = *(_BYTE *)(a1 + 104);
  v64 = *(PC_Sp_counted_base **)(a1 + 112);
  PCSharedCount::PCSharedCount(v65, (const PCSharedCount *)(a1 + 120));
  v62 = &unk_1E65746B8;
  v55 = &unk_1E6569AC8;
  v56 = v63;
  v57 = v64;
  PCSharedCount::PCSharedCount(&v58, v65);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v51 = &unk_1E6569AC8;
  v52 = *(_BYTE *)(v6 + 136);
  v53 = *(_QWORD *)(v6 + 144);
  PCSharedCount::PCSharedCount(&v54, (const PCSharedCount *)(v6 + 152));
  v47 = &unk_1E6569AC8;
  v48 = *(_BYTE *)(v6 + 104);
  v49 = *(_QWORD *)(v6 + 112);
  PCSharedCount::PCSharedCount(&v50, (const PCSharedCount *)(v6 + 120));
  ProShade::operator+(&v62, &v47, &v55);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v62, (uint64_t)v45);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v43[0] = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0.2);
  v43[2] = v7;
  PCSharedCount::PCSharedCount(&v44, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v62 = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 1.0);
  v64 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(v65, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::operator/(v41, &v62, a2);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  ProShade::operator*(v39, v41, v41);
  v59[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0.5);
  var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v61, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  LiLightProperties::lightAngle((const PCSharedCount **)a1, v35);
  ProShade::operator*(&v62, v59, v35);
  ProShade::operator+(v37, a2, &v62);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.0);
  v33 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v51, (uint64_t)&v55, v30);
  v62 = &unk_1E6569AC8;
  v64 = v33;
  PCSharedCount::PCSharedCount(v65, &v34);
  v59[0] = &unk_1E6569AC8;
  var0 = v30[2].var0;
  PCSharedCount::PCSharedCount(&v61, &v31);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v62, (uint64_t)v59, v35);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v51, (uint64_t)&v47, v32);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v51, (uint64_t)v45, v30);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0.0);
  v24 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v25, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  ProShade::operator/(v21, v35, v32);
  v62 = &unk_1E6569AC8;
  v64 = v24;
  PCSharedCount::PCSharedCount(v65, &v25);
  v59[0] = &unk_1E6569AC8;
  var0 = v21[2].var0;
  PCSharedCount::PCSharedCount(&v61, &v22);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v62, (uint64_t)v59, v26);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v62 = &unk_1E6569AC8;
  v64 = v26[2].var0;
  PCSharedCount::PCSharedCount(v65, &v27);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval((uint64_t)&v62, v28);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v26[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v62 = &unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 1);
  v64 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(v65, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 12.5663706);
  v24 = (PC_Sp_counted_base *)v13;
  PCSharedCount::PCSharedCount(&v25, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::operator*(v21, v37, v37);
  ProShade::operator*(v59, v23, v21);
  ProShade::operator/(v26, &v62, v59);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  ProShade::operator-(v18, v39);
  ProShade::operator*(v16, v30, v30);
  ProShade::operator/(v21, v18, v16);
  ProShade::operator+(v59, v21, v39);
  v62 = &unk_1E6569AC8;
  v64 = var0;
  PCSharedCount::PCSharedCount(v65, &v61);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::eval((uint64_t)&v62, v23);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  ProShade::operator*(v59, v43, v28);
  ProShade::operator*(&v62, v59, v26);
  ProShade::operator*(a3, &v62, v23);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v18[0] = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 1.0);
  v19 = (PC_Sp_counted_base *)v14;
  PCSharedCount::PCSharedCount(&v20, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  v15 = a3[2].var0;
  v62 = &unk_1E6569AC8;
  v64 = v15;
  PCSharedCount::PCSharedCount(v65, a3 + 3);
  v59[0] = &unk_1E6569AC8;
  var0 = v19;
  PCSharedCount::PCSharedCount(&v61, &v20);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v62, (uint64_t)v59, v21);
  v59[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v65);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, v21);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v26[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v37[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v45[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v46);
  v47 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v54);
  v55 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v58);
}

void sub_1B2D54038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCSharedCount a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33,uint64_t a34,uint64_t a35,uint64_t a36,PCSharedCount a37,uint64_t a38,uint64_t a39,uint64_t a40,PCSharedCount a41,uint64_t a42,uint64_t a43,uint64_t a44,PCSharedCount a45,uint64_t a46,uint64_t a47,uint64_t a48,PCSharedCount a49,uint64_t a50,uint64_t a51,uint64_t a52,PCSharedCount a53,uint64_t a54,uint64_t a55,uint64_t a56,PCSharedCount a57,uint64_t a58,uint64_t a59,uint64_t a60,PCSharedCount a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  PCSharedCount a69;
  PCSharedCount *v69;
  PCSharedCount *v70;
  PCSharedCount *v71;
  PCSharedCount *v72;
  uint64_t v73;
  uint64_t v74;

  PCSharedCount::~PCSharedCount(v69 + 3);
  PCSharedCount::~PCSharedCount(v72);
  v71->var0 = (PC_Sp_counted_base *)(v73 + 16);
  PCSharedCount::~PCSharedCount(v71 + 3);
  PCSharedCount::~PCSharedCount(&a29);
  a30 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a33);
  a34 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a37);
  a38 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a41);
  a42 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a45);
  a46 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a49);
  a50 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a53);
  a54 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a57);
  a58 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a61);
  a62 = v73 + 16;
  PCSharedCount::~PCSharedCount(v70);
  a66 = v73 + 16;
  PCSharedCount::~PCSharedCount(&a69);
  *(_QWORD *)(v74 - 248) = v73 + 16;
  PCSharedCount::~PCSharedCount(a11);
  *(_QWORD *)(v74 - 216) = v73 + 16;
  PCSharedCount::~PCSharedCount(a12);
  *(_QWORD *)(v74 - 184) = v73 + 16;
  PCSharedCount::~PCSharedCount(a13);
  _Unwind_Resume(a1);
}

void sub_1B2D54568()
{
  JUMPOUT(0x1B2D54480);
}

void sub_1B2D54570()
{
  JUMPOUT(0x1B2D54494);
}

void sub_1B2D54578()
{
  JUMPOUT(0x1B2D544D0);
}

void sub_1B2D54580()
{
  JUMPOUT(0x1B2D544E4);
}

void sub_1B2D54588()
{
  JUMPOUT(0x1B2D5450CLL);
}

void sub_1B2D54590()
{
  JUMPOUT(0x1B2D5451CLL);
}

void anisoWardShader(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  ProShade::ConstVector *v22;
  ProShade::ConstVector *v23;
  ProShade::ConstVector *v24;
  ProShade::ConstVector *v25;
  ProShade::ConstVector *v26;
  ProShade::ConstVector *v27;
  ProShade::ConstVector *v28;
  ProShade::ConstVector *v29;
  PC_Sp_counted_base *v30;
  PCSharedCount *v31;
  PCSharedCount v32;
  PCSharedCount v33[2];
  PCSharedCount v34;
  PCSharedCount v35;
  PCSharedCount v36[2];
  PCSharedCount v37;
  _QWORD v38[3];
  PCSharedCount v39;
  _QWORD v40[3];
  PCSharedCount v41;
  _QWORD v42[3];
  PCSharedCount v43;
  _QWORD v44[3];
  PCSharedCount v45;
  PCSharedCount v46;
  PCSharedCount v47[2];
  PCSharedCount v48;
  PCSharedCount v49;
  PCSharedCount v50[2];
  PCSharedCount v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PC_Sp_counted_base *v54;
  PCSharedCount v55;
  PCSharedCount v56;
  PCSharedCount v57;
  PC_Sp_counted_base *v58;
  PCSharedCount v59;
  PCSharedCount v60[3];
  PCSharedCount v61;
  PCSharedCount v62;
  PCSharedCount v63;
  ProShade::ConstVector *v64;
  PCSharedCount v65;
  PCSharedCount v66;
  PCSharedCount v67[2];
  PCSharedCount v68;
  PCSharedCount v69;
  PCSharedCount v70;
  PC_Sp_counted_base *v71;
  PCSharedCount v72;
  PCSharedCount v73;
  PCSharedCount v74;
  PC_Sp_counted_base *v75;
  PCSharedCount v76;
  PCSharedCount v77[2];
  PC_Sp_counted_base *v78;
  PCSharedCount v79;
  PCSharedCount v80;
  PCSharedCount v81[2];
  PCSharedCount v82;
  PCSharedCount v83;
  PCSharedCount v84;
  PC_Sp_counted_base *v85;
  PCSharedCount v86;
  PCSharedCount v87;
  PCSharedCount v88;
  PC_Sp_counted_base *v89;
  PCSharedCount v90;
  PCSharedCount v91;
  PCSharedCount v92;
  PC_Sp_counted_base *v93;
  PCSharedCount v94;
  PCSharedCount v95;
  PCSharedCount v96;
  PC_Sp_counted_base *v97;
  PCSharedCount v98;
  _QWORD v99[2];
  PC_Sp_counted_base *v100;
  PCSharedCount v101;
  PCSharedCount v102;
  PCSharedCount v103;
  PC_Sp_counted_base *v104;
  PCSharedCount v105;
  PCSharedCount v106;
  PCSharedCount v107;
  PC_Sp_counted_base *v108;
  PCSharedCount v109;
  PCSharedCount v110;
  _QWORD v111[2];
  PCSharedCount v112;
  _QWORD v113[2];
  PC_Sp_counted_base *v114;
  PCSharedCount v115;
  PCSharedCount v116[3];
  PCSharedCount v117;
  PCSharedCount v118[3];
  PCSharedCount v119;
  PCSharedCount v120[3];
  PCSharedCount v121;
  PCSharedCount v122[3];
  PCSharedCount v123;
  PCSharedCount v124[3];
  PCSharedCount v125;
  PCSharedCount v126[3];
  PCSharedCount v127;
  PCSharedCount v128[3];
  PCSharedCount v129;
  PCSharedCount v130[2];
  PC_Sp_counted_base *v131;
  PCSharedCount v132;
  PCSharedCount v133[3];
  PCSharedCount v134;
  _QWORD v135[3];
  PCSharedCount v136;
  PCSharedCount v137;
  PCSharedCount v138[2];
  PCSharedCount v139;
  PCSharedCount v140;
  PCSharedCount v141[2];
  PCSharedCount v142;
  PCSharedCount v143[3];
  PCSharedCount v144;
  void *v145;
  char v146;
  uint64_t v147;
  PCSharedCount v148;
  void *v149;
  char v150;
  uint64_t v151;
  PCSharedCount v152;
  _QWORD v153[3];
  PCSharedCount v154;
  _QWORD v155[3];
  PCSharedCount v156;
  void *v157;
  char v158;
  uint64_t v159;
  PCSharedCount v160;
  void *v161;
  char v162;
  uint64_t v163;
  PCSharedCount v164;
  void *v165;
  char var0;
  PC_Sp_counted_base *v167;
  PCSharedCount v168;
  PCSharedCount v169;
  PCSharedCount v170;
  PCSharedCount v171[2];
  PC_Sp_counted_base *v172;
  PCSharedCount v173;
  PCSharedCount v174;
  PCSharedCount v175;
  PC_Sp_counted_base *v176;
  PCSharedCount v177[2];

  v5 = *(_QWORD *)(a1 + 16);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v175.var0) = *(_BYTE *)(a1 + 104);
  v176 = *(PC_Sp_counted_base **)(a1 + 112);
  PCSharedCount::PCSharedCount(v177, (const PCSharedCount *)(a1 + 120));
  v174.var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  v165 = &unk_1E6569AC8;
  var0 = (char)v175.var0;
  v167 = v176;
  PCSharedCount::PCSharedCount(&v168, v177);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v161 = &unk_1E6569AC8;
  v162 = *(_BYTE *)(v5 + 136);
  v163 = *(_QWORD *)(v5 + 144);
  PCSharedCount::PCSharedCount(&v164, (const PCSharedCount *)(v5 + 152));
  v157 = &unk_1E6569AC8;
  v158 = *(_BYTE *)(v5 + 104);
  v159 = *(_QWORD *)(v5 + 112);
  PCSharedCount::PCSharedCount(&v160, (const PCSharedCount *)(v5 + 120));
  ProShade::operator+(&v174, &v157, &v165);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v174, (uint64_t)v155);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v153[0] = &unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0.2);
  v153[2] = v6;
  PCSharedCount::PCSharedCount(&v154, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v149 = &unk_1E6569AC8;
  v150 = *(_BYTE *)(v5 + 360);
  v151 = *(_QWORD *)(v5 + 368);
  PCSharedCount::PCSharedCount(&v152, (const PCSharedCount *)(v5 + 376));
  v145 = &unk_1E6569AC8;
  v146 = *(_BYTE *)(v5 + 392);
  v147 = *(_QWORD *)(v5 + 400);
  PCSharedCount::PCSharedCount(&v148, (const PCSharedCount *)(v5 + 408));
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 1);
  v176 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(v177, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  a2 += 8;
  ProShade::Selector_base::_select(a2, 0, &v140);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = v140.var0;
  PCSharedCount::PCSharedCount(&v173, v141);
  PCSharedCount::~PCSharedCount(v141);
  ProShade::operator/(v143, &v174, v171);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 1);
  v176 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(v177, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::Selector_base::_select(a2, (const PCString *)1, &v137);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = v137.var0;
  PCSharedCount::PCSharedCount(&v173, v138);
  PCSharedCount::~PCSharedCount(v138);
  ProShade::operator/(&v140, &v174, v171);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  ProShade::Selector_base::_select(a2, 0, &v174);
  v137.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v138[1] = v174;
  PCSharedCount::PCSharedCount(&v139, &v175);
  PCSharedCount::~PCSharedCount(&v175);
  ProShade::Selector_base::_select(a2, (const PCString *)1, &v174);
  v135[0] = &unk_1E6569AC8;
  v135[2] = v174.var0;
  PCSharedCount::PCSharedCount(&v136, &v175);
  PCSharedCount::~PCSharedCount(&v175);
  v130[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0.0);
  v131 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v132, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v161, (uint64_t)&v165, v128);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v176 = v131;
  PCSharedCount::PCSharedCount(v177, &v132);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = v128[2].var0;
  PCSharedCount::PCSharedCount(&v173, &v129);
  v31 = a3;
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v174, (uint64_t)v171, v133);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v128[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v129);
  v130[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v132);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v161, (uint64_t)&v157, v130);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v161, (uint64_t)v155, v128);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v155, (uint64_t)&v149, v126);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v155, (uint64_t)&v145, v124);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.6);
  v176 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(v177, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0.99);
  v172 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v173, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  ProShade::smoothstep(&v174, v171, (const PCSharedCount *)(v5 + 448), v122);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v176 = v143[2].var0;
  PCSharedCount::PCSharedCount(v177, &v144);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = v141[1].var0;
  PCSharedCount::PCSharedCount(&v173, &v142);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v174, (uint64_t)v171, v120);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  ProShade::mix(v143, v120, v122, &v174);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v143, &v174);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  ProShade::mix(&v140, v120, v122, &v174);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v140, &v174);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v113[0] = &unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0.0);
  v114 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v115, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::operator/(&v110, v133, v130);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v176 = v114;
  PCSharedCount::PCSharedCount(v177, &v115);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = (PC_Sp_counted_base *)v111[1];
  PCSharedCount::PCSharedCount(&v173, &v112);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v174, (uint64_t)v171, v116);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v176 = v116[2].var0;
  PCSharedCount::PCSharedCount(v177, &v117);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval((uint64_t)&v174, v118);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v116[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v117);
  v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v112);
  v113[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v115);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 1);
  v176 = (PC_Sp_counted_base *)v13;
  PCSharedCount::PCSharedCount(v177, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  v113[0] = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 12.5663706);
  v114 = (PC_Sp_counted_base *)v14;
  PCSharedCount::PCSharedCount(&v115, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  ProShade::operator*(&v110, &v137, v135);
  ProShade::operator*(v171, v113, &v110);
  ProShade::operator/(v116, &v174, v171);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v112);
  v113[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v115);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v113[0] = &unk_1E6569AC8;
  v114 = 0;
  PCSharedCount::PCSharedCount(&v115);
  if (*(_BYTE *)(v5 + 768))
  {
    ProShade::Selector_base::_select(v5 + 784, 0, &v106);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v172 = v106.var0;
    PCSharedCount::PCSharedCount(&v173, &v107);
    PCSharedCount::~PCSharedCount(&v107);
    ProShade::Selector_base::_select(v5 + 784, (const PCString *)1, &v102);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v108 = v102.var0;
    PCSharedCount::PCSharedCount(&v109, &v103);
    PCSharedCount::~PCSharedCount(&v103);
    ProShade::Vec2::Vec2(&v174, v171, &v106);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v15 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v15, 1.0);
    v104 = (PC_Sp_counted_base *)v15;
    PCSharedCount::PCSharedCount(&v105, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
    ProShade::operator*(&v110, &v174, &v102);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    ProShade::Selector_base::_select(v5 + 816, 0, &v95);
    v99[0] = &unk_1E6569AC8;
    v100 = v95.var0;
    PCSharedCount::PCSharedCount(&v101, &v96);
    PCSharedCount::~PCSharedCount(&v96);
    ProShade::operator+(&v102, v99, &v137);
    ProShade::Selector_base::_select(v5 + 816, (const PCString *)1, &v87);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v93 = v87.var0;
    PCSharedCount::PCSharedCount(&v94, &v88);
    PCSharedCount::~PCSharedCount(&v88);
    ProShade::operator+(&v95, &v91, v135);
    ProShade::Selector_base::_select(v5 + 816, (const PCString *)2, &v83);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v89 = v83.var0;
    PCSharedCount::PCSharedCount(&v90, &v84);
    PCSharedCount::~PCSharedCount(&v84);
    ProShade::Vec3::Vec3(v171, &v102, &v95, &v87);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v16 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v16, 1.0);
    v85 = (PC_Sp_counted_base *)v16;
    PCSharedCount::PCSharedCount(&v86, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
    ProShade::operator*(&v174, v171, &v83);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v17 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v17, 1.0);
    v81[1].var0 = (PC_Sp_counted_base *)v17;
    PCSharedCount::PCSharedCount(&v82, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
    ProShade::operator*(&v106, &v174, &v80);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v99[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    ProShade::Selector_base::_select((uint64_t)v111, 0, &v95);
    v99[0] = &unk_1E6569AC8;
    v100 = v95.var0;
    PCSharedCount::PCSharedCount(&v101, &v96);
    PCSharedCount::~PCSharedCount(&v96);
    ProShade::Selector_base::_select((uint64_t)v111, 0, &v91);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v97 = v91.var0;
    PCSharedCount::PCSharedCount(&v98, &v92);
    PCSharedCount::~PCSharedCount(&v92);
    ProShade::operator*(v171, v99, &v95);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)1, &v83);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v89 = v83.var0;
    PCSharedCount::PCSharedCount(&v90, &v84);
    PCSharedCount::~PCSharedCount(&v84);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)1, &v80);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v85 = v80.var0;
    PCSharedCount::PCSharedCount(&v86, v81);
    PCSharedCount::~PCSharedCount(v81);
    ProShade::operator*(&v91, &v87, &v83);
    ProShade::Selector_base::_select((uint64_t)v111, 0, &v73);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v78 = v73.var0;
    PCSharedCount::PCSharedCount(&v79, &v74);
    PCSharedCount::~PCSharedCount(&v74);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)1, &v69);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v75 = v69.var0;
    PCSharedCount::PCSharedCount(&v76, &v70);
    PCSharedCount::~PCSharedCount(&v70);
    ProShade::operator*(&v80, v77, &v73);
    ProShade::Vec3::Vec3(&v174, v171, &v91, &v80);
    ProShade::operator-(&v102, &v106, &v174);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v99[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    ProShade::Selector_base::_select((uint64_t)&v103, 0, &v95);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v172 = v95.var0;
    PCSharedCount::PCSharedCount(&v173, &v96);
    PCSharedCount::~PCSharedCount(&v96);
    ProShade::Selector_base::_select((uint64_t)&v103, (const PCString *)1, &v91);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v97 = v91.var0;
    PCSharedCount::PCSharedCount(&v98, &v92);
    PCSharedCount::~PCSharedCount(&v92);
    ProShade::operator*(&v174, v171, &v95);
    ProShade::Selector_base::_select((uint64_t)&v103, (const PCString *)2, &v83);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v89 = v83.var0;
    PCSharedCount::PCSharedCount(&v90, &v84);
    PCSharedCount::~PCSharedCount(&v84);
    ProShade::Selector_base::_select((uint64_t)&v103, (const PCString *)2, &v80);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v85 = v80.var0;
    PCSharedCount::PCSharedCount(&v86, v81);
    PCSharedCount::~PCSharedCount(v81);
    ProShade::operator*(&v91, &v87, &v83);
    ProShade::operator-(v99, &v174, &v91);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v96.var0) = *(_BYTE *)(v5 + 168);
    v97 = *(PC_Sp_counted_base **)(v5 + 176);
    PCSharedCount::PCSharedCount(&v98, (const PCSharedCount *)(v5 + 184));
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v149, (uint64_t)&v95, &v87);
    ProShade::operator*(v171, &v87, &v95);
    ProShade::operator-(&v174, &v149, v171);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v174, (uint64_t)&v91);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v176 = v97;
    PCSharedCount::PCSharedCount(v177, &v98);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v172 = v93;
    PCSharedCount::PCSharedCount(&v173, &v94);
    ProShade::Func<ProShade::Func_cross>::eval((uint64_t)&v174, (uint64_t)v171, &v87);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v155, (uint64_t)&v91, v171);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v155, (uint64_t)&v87, &v80);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v155, (uint64_t)&v95, v77);
    ProShade::Vec3::Vec3(&v174, v171, &v80, v77);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v84.var0) = v175.var0;
    v85 = v176;
    PCSharedCount::PCSharedCount(&v86, v177);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v83, (uint64_t)&v174);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v83, &v174);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    ProShade::Selector_base::_select((uint64_t)&v84, 0, &v73);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v78 = v73.var0;
    PCSharedCount::PCSharedCount(&v79, &v74);
    PCSharedCount::~PCSharedCount(&v74);
    ProShade::Selector_base::_select((uint64_t)&v84, (const PCString *)2, &v69);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v75 = v69.var0;
    PCSharedCount::PCSharedCount(&v76, &v70);
    PCSharedCount::~PCSharedCount(&v70);
    ProShade::operator/(&v80, v77, &v73);
    ProShade::Selector_base::_select((uint64_t)v111, 0, &v66);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v71 = v66.var0;
    PCSharedCount::PCSharedCount(&v72, v67);
    PCSharedCount::~PCSharedCount(v67);
    ProShade::operator-(v171, &v80, &v69);
    ProShade::Selector_base::_select((uint64_t)&v84, (const PCString *)1, &v56);
    v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v60[2] = v56;
    PCSharedCount::PCSharedCount(&v61, &v57);
    PCSharedCount::~PCSharedCount(&v57);
    ProShade::Selector_base::_select((uint64_t)&v84, (const PCString *)2, &v52);
    v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v58 = v52.var0;
    PCSharedCount::PCSharedCount(&v59, &v53);
    PCSharedCount::~PCSharedCount(&v53);
    ProShade::operator/(&v62, v60, &v56);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)1, &v49);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v54 = v49.var0;
    PCSharedCount::PCSharedCount(&v55, v50);
    PCSharedCount::~PCSharedCount(v50);
    ProShade::operator-(&v66, &v62, &v52);
    ProShade::Vec2::Vec2(&v174, v171, &v66);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v83, &v174);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v59);
    v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    ProShade::Selector_base::_select((uint64_t)&v84, 0, &v69);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v75 = v69.var0;
    PCSharedCount::PCSharedCount(&v76, &v70);
    PCSharedCount::~PCSharedCount(&v70);
    ProShade::Selector_base::_select((uint64_t)&v84, 0, &v66);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v71 = v66.var0;
    PCSharedCount::PCSharedCount(&v72, v67);
    PCSharedCount::~PCSharedCount(v67);
    ProShade::operator*(v77, &v73, &v69);
    ProShade::Selector_base::_select((uint64_t)&v103, (const PCString *)1, &v62);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v67[1] = v62;
    PCSharedCount::PCSharedCount(&v68, &v63);
    PCSharedCount::~PCSharedCount(&v63);
    ProShade::operator*(v171, v77, &v66);
    ProShade::Selector_base::_select((uint64_t)&v84, (const PCString *)1, &v52);
    v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v58 = v52.var0;
    PCSharedCount::PCSharedCount(&v59, &v53);
    PCSharedCount::~PCSharedCount(&v53);
    ProShade::Selector_base::_select((uint64_t)&v84, (const PCString *)1, &v49);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v54 = v49.var0;
    PCSharedCount::PCSharedCount(&v55, v50);
    PCSharedCount::~PCSharedCount(v50);
    ProShade::operator*(v60, &v56, &v52);
    ProShade::Selector_base::_select((uint64_t)&v103, 0, &v46);
    v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v50[1] = v46;
    PCSharedCount::PCSharedCount(&v51, v47);
    PCSharedCount::~PCSharedCount(v47);
    ProShade::operator*(&v62, v60, &v49);
    ProShade::operator+(&v174, v171, &v62);
    v40[0] = &unk_1E6569AC8;
    v18 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v18, 2.0);
    v40[2] = v18;
    PCSharedCount::PCSharedCount(&v41, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
    ProShade::Selector_base::_select((uint64_t)&v84, 0, &v35);
    v38[0] = &unk_1E6569AC8;
    v38[2] = v35.var0;
    PCSharedCount::PCSharedCount(&v39, v36);
    PCSharedCount::~PCSharedCount(v36);
    ProShade::operator*(v42, v40, v38);
    ProShade::Selector_base::_select((uint64_t)&v84, (const PCString *)1, &v32);
    v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v36[1] = v32;
    PCSharedCount::PCSharedCount(&v37, v33);
    PCSharedCount::~PCSharedCount(v33);
    ProShade::operator*(v44, v42, &v35);
    ProShade::Selector_base::_select((uint64_t)&v103, (const PCString *)2, &v169);
    v32.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v33[1] = v169;
    PCSharedCount::PCSharedCount(&v34, &v170);
    PCSharedCount::~PCSharedCount(&v170);
    ProShade::operator*(&v46, v44, &v32);
    ProShade::operator-(&v80, &v174, &v46);
    v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v32.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v44[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v45);
    v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v42[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v38[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v40[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v51);
    v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v59);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
    ProShade::operator/(&v174, &v80, v99);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v80, &v174);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v19 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v19, -2.0);
    v71 = (PC_Sp_counted_base *)v19;
    PCSharedCount::PCSharedCount(&v72, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    ProShade::operator*(&v73, &v69, &v80);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v20 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v20, 1.0);
    v64 = v20;
    PCSharedCount::PCSharedCount(&v65, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    ProShade::operator+(&v66, &v62, v128);
    ProShade::operator/(v171, &v73, &v66);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v176 = v172;
    PCSharedCount::PCSharedCount(v177, &v173);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::eval((uint64_t)&v174, v77);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v21 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v21, 0);
    v75 = (PC_Sp_counted_base *)v21;
    PCSharedCount::PCSharedCount(&v76, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
    ProShade::operator<=((uint64_t)v99, (uint64_t)&v73, v171);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v22 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v22, 0);
    v71 = (PC_Sp_counted_base *)v22;
    PCSharedCount::PCSharedCount(&v72, (ProShade::ConstVector *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)));
    ProShade::Func<ProShade::Func_cond>::eval((uint64_t)v171, (uint64_t)&v69, (uint64_t)v77, &v174);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v113, &v174);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v23 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v23, 1.0);
    v71 = (PC_Sp_counted_base *)v23;
    PCSharedCount::PCSharedCount(&v72, (ProShade::ConstVector *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v24 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v24, 12.5663706);
    v64 = v24;
    PCSharedCount::PCSharedCount(&v65, (ProShade::ConstVector *)((char *)v24 + *(_QWORD *)(*(_QWORD *)v24 - 24)));
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v25 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v25, 0.0001);
    v54 = (PC_Sp_counted_base *)v25;
    PCSharedCount::PCSharedCount(&v55, (ProShade::ConstVector *)((char *)v25 + *(_QWORD *)(*(_QWORD *)v25 - 24)));
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v176 = v54;
    PCSharedCount::PCSharedCount(v177, &v55);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v172 = v100;
    PCSharedCount::PCSharedCount(&v173, &v101);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v174, (uint64_t)v171, &v56);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v176 = v58;
    PCSharedCount::PCSharedCount(v177, &v59);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval((uint64_t)&v174, v60);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    ProShade::operator*(&v66, &v62, v60);
    ProShade::operator/(&v73, &v69, &v66);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v116, &v73);
    v73.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v76);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v59);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v99[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v112);
    a3 = v31;
  }
  else
  {
    ProShade::operator*(v171, v126, v143);
    ProShade::operator*(&v110, v124, &v140);
    v99[0] = &unk_1E6569AC8;
    v26 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v26, -2.0);
    v100 = (PC_Sp_counted_base *)v26;
    PCSharedCount::PCSharedCount(&v101, (ProShade::ConstVector *)((char *)v26 + *(_QWORD *)(*(_QWORD *)v26 - 24)));
    ProShade::operator*(&v87, v171, v171);
    ProShade::operator*(&v83, &v110, &v110);
    ProShade::operator+(&v91, &v87, &v83);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v27 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v27, 1.0);
    v78 = (PC_Sp_counted_base *)v27;
    PCSharedCount::PCSharedCount(&v79, (ProShade::ConstVector *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
    ProShade::operator+(&v80, v77, v128);
    ProShade::operator/(&v95, &v91, &v80);
    ProShade::operator*(&v102, v99, &v95);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v176 = v104;
    PCSharedCount::PCSharedCount(v177, &v105);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::eval((uint64_t)&v174, &v106);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v77[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    v99[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    ProShade::operator-(&v87, v120);
    ProShade::operator*(&v91, &v87, v120);
    ProShade::operator*(&v83, v128, v128);
    ProShade::operator/(&v95, &v91, &v83);
    ProShade::operator*(&v80, v120, v120);
    ProShade::operator+(v99, &v95, &v80);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v176 = v100;
    PCSharedCount::PCSharedCount(v177, &v101);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::eval((uint64_t)&v174, &v102);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v99[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v80.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v83.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v87.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v90);
    ProShade::mix(&v106, &v102, v122, &v174);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v113, &v174);
    v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v177);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v112);
    v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v173);
  }
  v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v28 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v28, 0.0);
  v108 = (PC_Sp_counted_base *)v28;
  PCSharedCount::PCSharedCount(&v109, (ProShade::ConstVector *)((char *)v28 + *(_QWORD *)(*(_QWORD *)v28 - 24)));
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v176 = v108;
  PCSharedCount::PCSharedCount(v177, &v109);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = v114;
  PCSharedCount::PCSharedCount(&v173, &v115);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v174, (uint64_t)v171, &v110);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v113, &v110);
  v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v112);
  v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v109);
  ProShade::operator*(v171, v153, v118);
  ProShade::operator*(&v174, v171, v116);
  ProShade::operator*(a3, &v174, v113);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v29 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v29, 1.0);
  v108 = (PC_Sp_counted_base *)v29;
  PCSharedCount::PCSharedCount(&v109, (ProShade::ConstVector *)((char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24)));
  v30 = a3[2].var0;
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v176 = v30;
  PCSharedCount::PCSharedCount(v177, a3 + 3);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v172 = v108;
  PCSharedCount::PCSharedCount(&v173, &v109);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v174, (uint64_t)v171, &v110);
  v171[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v173);
  v174.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v177);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, &v110);
  v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v112);
  v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v109);
  v113[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v115);
  v116[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v117);
  v118[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v119);
  v120[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v121);
  v122[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v123);
  v124[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v125);
  v126[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v127);
  v128[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v129);
  v130[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v132);
  v133[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v134);
  v135[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v136);
  v137.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v139);
  v140.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v142);
  v143[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v144);
  v145 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v148);
  v149 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v152);
  v153[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v154);
  v155[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v156);
  v157 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v160);
  v161 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v164);
  v165 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v168);
}

void sub_1B2D56D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, PCSharedCount *a12, uint64_t a13, PCSharedCount *a14, PCSharedCount *a15, PCSharedCount *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount *a21,PCSharedCount *a22,PCSharedCount *a23,PCSharedCount *a24,PCSharedCount *a25,PCSharedCount *a26,PCSharedCount *a27)
{
  PCSharedCount *v27;
  PCSharedCount *v28;
  PCSharedCount *v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 136) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v27 + 3);
  STACK[0x358] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x370]);
  STACK[0x378] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x390]);
  STACK[0x398] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x3B0]);
  *(_QWORD *)(v30 - 168) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v30 - 144));
  STACK[0x3B8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v28);
  STACK[0x3D8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x3F0]);
  STACK[0x3F8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x410]);
  STACK[0x418] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x430]);
  STACK[0x438] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x450]);
  STACK[0x458] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x470]);
  STACK[0x478] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x490]);
  STACK[0x498] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x4B0]);
  STACK[0x4B8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x4D0]);
  STACK[0x4D8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x4F0]);
  STACK[0x4F8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a21);
  STACK[0x518] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a22);
  STACK[0x538] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x550]);
  STACK[0x558] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x570]);
  STACK[0x578] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a24);
  STACK[0x598] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a25);
  STACK[0x5B8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a26);
  STACK[0x5D8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x5F0]);
  STACK[0x5F8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a27);
  *(_QWORD *)(v30 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a23);
  *(_QWORD *)(v30 - 216) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v29);
  _Unwind_Resume(a1);
}

void ProShade::smoothstep(const PCSharedCount *a1@<X0>, const PCSharedCount *a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v8;
  PC_Sp_counted_base *v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;

  var0 = a1[2].var0;
  v14[0] = &unk_1E6569AC8;
  v14[2] = var0;
  PCSharedCount::PCSharedCount(&v15, a1 + 3);
  v8 = a2[2].var0;
  v12[0] = &unk_1E6569AC8;
  v12[2] = v8;
  PCSharedCount::PCSharedCount(&v13, a2 + 3);
  v9 = a3[2].var0;
  v10[0] = &unk_1E6569AC8;
  v10[2] = v9;
  PCSharedCount::PCSharedCount(&v11, a3 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::eval((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, a4);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
}

void sub_1B2D58AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PCSharedCount *v17;
  PCSharedCount *v18;
  PCSharedCount *v19;

  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void anisoBlinnPhongShader(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  ProShade::ConstVector *v4;
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  PCSharedCount v10;
  PCSharedCount v11[3];
  PCSharedCount v12;
  PCSharedCount v13[2];
  PC_Sp_counted_base *v14;
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  PCSharedCount v18[3];
  PCSharedCount v19;
  PCSharedCount v20[2];
  PC_Sp_counted_base *v21;
  PCSharedCount v22;
  PCSharedCount v23[3];
  PCSharedCount v24;
  PCSharedCount v25[3];
  PCSharedCount v26;
  PCSharedCount v27[3];
  PCSharedCount v28;
  PCSharedCount v29[3];
  PCSharedCount v30;
  PCSharedCount v31[3];
  PCSharedCount v32;
  PCSharedCount v33[3];
  PCSharedCount v34;
  void *v35;
  char v36;
  uint64_t v37;
  PCSharedCount v38;
  void *v39;
  char v40;
  uint64_t v41;
  PCSharedCount v42;
  _QWORD v43[3];
  PCSharedCount v44;
  _QWORD v45[3];
  PCSharedCount v46;
  _QWORD v47[3];
  PCSharedCount v48;
  void *v49;
  char v50;
  uint64_t v51;
  PCSharedCount v52;
  void *v53;
  char var0;
  PC_Sp_counted_base *v55;
  PCSharedCount v56;
  PCSharedCount v57[2];
  PC_Sp_counted_base *v58;
  PCSharedCount v59;
  PCSharedCount v60;
  PCSharedCount v61;
  PC_Sp_counted_base *v62;
  PCSharedCount v63[2];

  v3 = *(_QWORD *)(a1 + 16);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v61.var0) = *(_BYTE *)(a1 + 72);
  v62 = *(PC_Sp_counted_base **)(a1 + 80);
  PCSharedCount::PCSharedCount(v63, (const PCSharedCount *)(a1 + 88));
  v60.var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  v53 = &unk_1E6569AC8;
  var0 = (char)v61.var0;
  v55 = v62;
  PCSharedCount::PCSharedCount(&v56, v63);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v49 = &unk_1E6569AC8;
  v50 = *(_BYTE *)(v3 + 136);
  v51 = *(_QWORD *)(v3 + 144);
  PCSharedCount::PCSharedCount(&v52, (const PCSharedCount *)(v3 + 152));
  ProShade::operator+(&v60, v3 + 96, &v53);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v60, (uint64_t)v47);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  ProShade::Selector_base::_select(v3 + 424, 0, &v60);
  v45[0] = &unk_1E6569AC8;
  v45[2] = v60.var0;
  PCSharedCount::PCSharedCount(&v46, &v61);
  PCSharedCount::~PCSharedCount(&v61);
  ProShade::Selector_base::_select(v3 + 424, (const PCString *)1, &v60);
  v43[0] = &unk_1E6569AC8;
  v43[2] = v60.var0;
  PCSharedCount::PCSharedCount(&v44, &v61);
  PCSharedCount::~PCSharedCount(&v61);
  v39 = &unk_1E6569AC8;
  v40 = *(_BYTE *)(v3 + 360);
  v41 = *(_QWORD *)(v3 + 368);
  PCSharedCount::PCSharedCount(&v42, (const PCSharedCount *)(v3 + 376));
  v35 = &unk_1E6569AC8;
  v36 = *(_BYTE *)(v3 + 392);
  v37 = *(_QWORD *)(v3 + 400);
  PCSharedCount::PCSharedCount(&v38, (const PCSharedCount *)(v3 + 408));
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v49, (uint64_t)v47, v33);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v49, (uint64_t)&v53, v31);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v47, (uint64_t)&v39, v29);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v47, (uint64_t)&v35, v27);
  ProShade::operator*(v23, v45, v29);
  ProShade::operator*(v57, v23, v29);
  ProShade::operator*(v18, v43, v27);
  ProShade::operator*(v20, v18, v27);
  ProShade::operator+(&v60, v57, v20);
  v13[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, 1.0);
  v14 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v15, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  ProShade::operator*(v11, v33, v33);
  ProShade::operator-(v16, v13, v11);
  ProShade::operator/(v25, &v60, v16);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  v13[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 0.0);
  v21 = (PC_Sp_counted_base *)v5;
  PCSharedCount::PCSharedCount(&v22, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v62 = v21;
  PCSharedCount::PCSharedCount(v63, &v22);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v58 = v25[2].var0;
  PCSharedCount::PCSharedCount(&v59, &v26);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v60, (uint64_t)v57, v23);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v25, v23);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  ProShade::operator+(&v60, v45, v43);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 2.0);
  v58 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(&v59, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  ProShade::operator/(v23, &v60, v57);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0.6);
  v62 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(v63, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0.99);
  v58 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v59, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::smoothstep(&v60, v57, (const PCSharedCount *)(v3 + 448), v20);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  ProShade::mix(v25, v23, v20, v18);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v62 = v33[2].var0;
  PCSharedCount::PCSharedCount(v63, &v34);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval((uint64_t)&v60, v13);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v62 = v14;
  PCSharedCount::PCSharedCount(v63, &v15);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v58 = v18[2].var0;
  PCSharedCount::PCSharedCount(&v59, &v19);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v60, (uint64_t)v57, (uint64_t)v16);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0.0);
  PCSharedCount::PCSharedCount(&v10, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v62 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(v63, &v10);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v58 = v31[2].var0;
  PCSharedCount::PCSharedCount(&v59, &v32);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v60, (uint64_t)v57, v11);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  ProShade::operator*(a2, v16, v11);
  v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  PCSharedCount::~PCSharedCount(&v10);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v13[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v33[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v45[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v46);
  v47[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v49 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v52);
  v53 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v56);
}

void sub_1B2D593D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, PCSharedCount *a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,PCSharedCount a31,uint64_t a32,uint64_t a33,uint64_t a34,PCSharedCount a35,uint64_t a36,uint64_t a37,uint64_t a38,PCSharedCount a39,uint64_t a40,uint64_t a41,uint64_t a42,PCSharedCount a43,uint64_t a44,uint64_t a45,uint64_t a46,PCSharedCount a47,uint64_t a48,uint64_t a49,uint64_t a50,PCSharedCount a51,uint64_t a52,uint64_t a53,uint64_t a54,PCSharedCount a55,uint64_t a56,uint64_t a57,uint64_t a58,PCSharedCount a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  uint64_t a64;
  uint64_t a68;
  uint64_t a72;
  PCSharedCount *v72;
  PCSharedCount *v73;
  PCSharedCount *v74;
  uint64_t v75;

  PCSharedCount::~PCSharedCount(v73 + 3);
  PCSharedCount::~PCSharedCount(v72);
  PCSharedCount::~PCSharedCount(&a31);
  PCSharedCount::~PCSharedCount(v74);
  a32 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a35);
  a36 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a39);
  a40 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a43);
  a44 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a47);
  a48 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a51);
  a52 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a55);
  a56 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a59);
  a60 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a63);
  a64 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a10);
  a68 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a11);
  a72 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a12);
  STACK[0x218] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a13);
  *(_QWORD *)(v75 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v75 - 224));
  *(_QWORD *)(v75 - 216) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a14);
  *(_QWORD *)(v75 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a15);
  _Unwind_Resume(a1);
}

void SpecularMaterialLayer::getIsoSpecular(SpecularMaterialLayer *this@<X0>, PCSharedCount *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t var0;
  int v8;
  PCSharedCount *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  PCSharedCount *v14;
  PCSharedCount *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  PCException *exception;
  PCSharedCount *v23;
  PCSharedCount *v24;
  PCSharedCount v25;
  _QWORD v26[3];
  PCSharedCount v27;
  _QWORD v28[2];
  ProShade::ConstVector *v29;
  PCSharedCount v30;
  _QWORD v31[2];
  __CFString *v32;
  PCSharedCount v33;
  PCSharedCount v34[2];
  __CFString *v35;
  PCSharedCount v36;
  PCSharedCount v37[2];
  __CFString *v38;
  PCSharedCount v39;
  PCSharedCount v40[3];
  PCSharedCount v41;
  _QWORD v42[2];
  ProShade::ConstVector *v43;
  PCSharedCount v44;
  void *v45;
  char v46;
  __CFString *v47;
  PCSharedCount v48;
  void *v49;
  char v50;
  __CFString *v51;
  PCSharedCount v52;
  void *v53;
  char v54;
  __CFString *v55;
  PCSharedCount v56;
  PCString v57;
  PCSharedCount v58;
  ProShade::ConstVector *v59;
  PCSharedCount v60;
  PCString v61;
  char v62;
  __CFString *v63;
  PCSharedCount v64[2];

  var0 = (uint64_t)a2[2].var0;
  LiLightProperties::getLightColor((LiLightProperties *)a2, (PCSharedCount *)&v61);
  v53 = &unk_1E6569AC8;
  v54 = v62;
  v55 = v63;
  PCSharedCount::PCSharedCount(&v56, v64);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  LiLightProperties::getAttenuation((LiLightProperties *)a2, (PCSharedCount *)&v61);
  v49 = &unk_1E6569AC8;
  v50 = v62;
  v51 = v63;
  PCSharedCount::PCSharedCount(&v52, v64);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  v62 = (char)a2[9].var0;
  v63 = (__CFString *)a2[10].var0;
  PCSharedCount::PCSharedCount(v64, a2 + 11);
  v61.var0 = (__CFString *)&unk_1E65746B8;
  v45 = &unk_1E6569AC8;
  v46 = v62;
  v47 = v63;
  PCSharedCount::PCSharedCount(&v48, v64);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  v42[0] = &unk_1E6569AC8;
  v43 = 0;
  PCSharedCount::PCSharedCount(&v44);
  v8 = *((_DWORD *)this + 34);
  v24 = v9;
  if (v8)
  {
    if (v8 == 1)
    {
      v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v16 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v16, 2.0);
      v35 = (__CFString *)v16;
      PCSharedCount::PCSharedCount(&v36, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
      v28[0] = &unk_1E6569AC8;
      v17 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v17, 10.0);
      v29 = v17;
      PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
      ProShade::operator*(v31, var0 + 224, v28);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      v63 = v35;
      PCSharedCount::PCSharedCount(v64, &v36);
      v57.var0 = (__CFString *)&unk_1E6569AC8;
      v59 = (ProShade::ConstVector *)v32;
      PCSharedCount::PCSharedCount(&v60, &v33);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval((const PCSharedCount *)&v61, (uint64_t)&v57, (uint64_t)v37);
      v57.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v64);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      v18 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v18, 0.5);
      v63 = (__CFString *)v18;
      PCSharedCount::PCSharedCount(v64, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
      ProShade::operator*(v40, v37, &v61);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v64);
      v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v39);
      v31[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v28[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v36);
      isoBlinnPhongShader((uint64_t)a2, v40, (PCSharedCount *)&v61);
      v14 = v24;
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v42, (const PCSharedCount *)&v61);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      v15 = v64;
    }
    else
    {
      if (v8 != 2)
      {
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(&v61, "not implemented yet");
        PCString::PCString(&v57, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/LiMaterialLayer.cpp");
        PCException::PCException(exception, &v61, &v57, 685);
        *(_QWORD *)exception = &unk_1E64FFFA0;
      }
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      v10 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v10, 1.0);
      v63 = (__CFString *)v10;
      PCSharedCount::PCSharedCount(v64, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
      ProShade::operator-(v40, &v61, var0 + 224);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v64);
      v31[0] = &unk_1E6569AC8;
      v11 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v11, 0.001);
      v32 = (__CFString *)v11;
      PCSharedCount::PCSharedCount(&v33, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
      v26[0] = &unk_1E6569AC8;
      v12 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v12, 0.5);
      v26[2] = v12;
      v23 = PCSharedCount::PCSharedCount(&v27, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
      ProShade::operator*(v28, v40, v26);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      v63 = v32;
      PCSharedCount::PCSharedCount(v64, &v33);
      v57.var0 = (__CFString *)&unk_1E6569AC8;
      v59 = v29;
      PCSharedCount::PCSharedCount(&v60, &v30);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v61, (uint64_t)&v57, v34);
      v57.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v64);
      v13 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v13, 0.999);
      PCSharedCount::PCSharedCount(&v25, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      v63 = v35;
      PCSharedCount::PCSharedCount(v64, &v36);
      v57.var0 = (__CFString *)&unk_1E6569AC8;
      v59 = v13;
      PCSharedCount::PCSharedCount(&v60, &v25);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v61, (uint64_t)&v57, v37);
      v57.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v64);
      PCSharedCount::~PCSharedCount(&v25);
      v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v36);
      v28[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v26[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v23);
      v31[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      isoWardShader((uint64_t)a2, (uint64_t)v37, (PCSharedCount *)&v61);
      v14 = v24;
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v42, (const PCSharedCount *)&v61);
      v61.var0 = (__CFString *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v64);
      v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v15 = &v39;
    }
    PCSharedCount::~PCSharedCount(v15);
    v40[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
  }
  else
  {
    v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v19 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v19, 2.0);
    v38 = (__CFString *)v19;
    PCSharedCount::PCSharedCount(&v39, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    v31[0] = &unk_1E6569AC8;
    v20 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v20, 10.0);
    v32 = (__CFString *)v20;
    PCSharedCount::PCSharedCount(&v33, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    ProShade::operator*(v34, var0 + 224, v31);
    v61.var0 = (__CFString *)&unk_1E6569AC8;
    v63 = v38;
    PCSharedCount::PCSharedCount(v64, &v39);
    v57.var0 = (__CFString *)&unk_1E6569AC8;
    v59 = (ProShade::ConstVector *)v35;
    PCSharedCount::PCSharedCount(&v60, &v36);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval((const PCSharedCount *)&v61, (uint64_t)&v57, (uint64_t)v40);
    v57.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v60);
    v61.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v64);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v31[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v33);
    v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    isoPhongShader((uint64_t)a2, (uint64_t)v40, (PCSharedCount *)&v61);
    v14 = v24;
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v42, (const PCSharedCount *)&v61);
    v61.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v64);
    v40[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
  }
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v21 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v21, 0.0);
  v38 = (__CFString *)v21;
  PCSharedCount::PCSharedCount(&v39, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  v63 = v38;
  PCSharedCount::PCSharedCount(v64, &v39);
  v57.var0 = (__CFString *)&unk_1E6569AC8;
  v59 = v43;
  PCSharedCount::PCSharedCount(&v60, v14);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v61, (uint64_t)&v57, v40);
  v57.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v60);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v42, v40);
  v40[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v41);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  ProShade::Selector_base::_select(var0 + 584, (const PCString *)0x1D, (PCSharedCount *)&v57);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  v63 = v57.var0;
  PCSharedCount::PCSharedCount(v64, &v58);
  PCSharedCount::~PCSharedCount(&v58);
  ProShade::operator*(a3, &v61, var0 + 288);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  ProShade::operator*(&v61, a3, &v53);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, (const PCSharedCount *)&v61);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  ProShade::operator*(&v61, a3, v42);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, (const PCSharedCount *)&v61);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  ProShade::operator*(&v61, a3, &v49);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, (const PCSharedCount *)&v61);
  v61.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v64);
  if (*((_BYTE *)this + 140))
  {
    simpleFresnel(var0, (uint64_t)&v45, (uint64_t)&v61);
    v61.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v64);
  }
  v42[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v14);
  v45 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v49 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v52);
  v53 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v56);
}

void sub_1B2D5A474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, PCSharedCount *a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  PCString::~PCString((PCString *)(v47 - 152));
  PCString::~PCString((PCString *)(v47 - 120));
  if (v45)
    __cxa_free_exception(v44);
  PCSharedCount::~PCSharedCount(a15);
  *(_QWORD *)(v47 - 248) = v46 + 16;
  PCSharedCount::~PCSharedCount(a14);
  *(_QWORD *)(v47 - 216) = v46 + 16;
  PCSharedCount::~PCSharedCount(a10);
  *(_QWORD *)(v47 - 184) = v46 + 16;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B2D5A998()
{
  JUMPOUT(0x1B2D5A938);
}

void sub_1B2D5A9A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  JUMPOUT(0x1B2D5A944);
}

void sub_1B2D5A9B8()
{
  JUMPOUT(0x1B2D5A948);
}

void sub_1B2D5A9C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  JUMPOUT(0x1B2D5A954);
}

void sub_1B2D5A9D8()
{
  JUMPOUT(0x1B2D5A958);
}

void sub_1B2D5A9E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  JUMPOUT(0x1B2D5A964);
}

void simpleFresnel(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  PCSharedCount v9[3];
  PCSharedCount v10;
  void *v11;
  ProShade::ConstVector *v12;
  PCSharedCount v13;
  PCSharedCount v14[2];
  PC_Sp_counted_base *v15;
  PCSharedCount v16;
  PCSharedCount v17[2];
  ProShade::ConstVector *v18;
  PCSharedCount v19;
  PCSharedCount v20[3];
  PCSharedCount v21;
  _QWORD v22[3];
  PCSharedCount v23;
  _QWORD v24[3];
  PCSharedCount v25;
  _QWORD v26[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v28;
  PCSharedCount v29[2];
  ProShade::ConstVector *v30;
  PCSharedCount v31;

  ProShade::Func<ProShade::Func_normalize>::eval(a2, (uint64_t)v24);
  ProShade::operator+(v29, a1 + 96, v24);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v29, (uint64_t)v22);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 0.0);
  v18 = v5;
  PCSharedCount::PCSharedCount(&v19, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  ProShade::Func<ProShade::Func_dot>::eval(a1 + 96, (uint64_t)v22, v14);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v30 = v18;
  PCSharedCount::PCSharedCount(&v31, &v19);
  v26[0] = &unk_1E6569AC8;
  var0 = v15;
  PCSharedCount::PCSharedCount(&v28, &v16);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)v29, (uint64_t)v26, v20);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 1.0);
  v15 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(&v16, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  ProShade::operator-(v17, v14, v20);
  v11 = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 5);
  v12 = v7;
  PCSharedCount::PCSharedCount(&v13, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v30 = v18;
  PCSharedCount::PCSharedCount(&v31, &v19);
  v26[0] = &unk_1E6569AC8;
  var0 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(&v28, &v13);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(v29, (uint64_t)v26, a3);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  PCSharedCount::~PCSharedCount(&v13);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v11 = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0);
  v12 = v8;
  PCSharedCount::PCSharedCount(&v13, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::Func<ProShade::Func_dot>::eval(a1 + 128, (uint64_t)v24, v9);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v30 = v12;
  PCSharedCount::PCSharedCount(&v31, &v13);
  v26[0] = &unk_1E6569AC8;
  var0 = v9[2].var0;
  PCSharedCount::PCSharedCount(&v28, &v10);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)v29, (uint64_t)v26, v14);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  ProShade::operator*(v17, a3, v14);
  ProShade::VarT<ProShade::Node>::operator=(a3, v17);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v10);
  v11 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
}

void sub_1B2D5AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,PCSharedCount a32)
{
  PCSharedCount *v32;
  PCSharedCount *v33;
  PCSharedCount *v34;
  uint64_t v35;
  uint64_t v36;

  a21 = v35 + 16;
  PCSharedCount::~PCSharedCount(v34 + 3);
  a17 = v35 + 16;
  PCSharedCount::~PCSharedCount(&a20);
  PCSharedCount::~PCSharedCount(&a12);
  a13 = v35 + 16;
  PCSharedCount::~PCSharedCount(v33);
  v32->var0 = (PC_Sp_counted_base *)(v35 + 16);
  PCSharedCount::~PCSharedCount(v32 + 3);
  a25 = v35 + 16;
  PCSharedCount::~PCSharedCount(&a28);
  a29 = v35 + 16;
  PCSharedCount::~PCSharedCount(&a32);
  *(_QWORD *)(v36 - 176) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v36 - 152));
  _Unwind_Resume(a1);
}

void sub_1B2D5B084()
{
  JUMPOUT(0x1B2D5B038);
}

void sub_1B2D5B08C()
{
  JUMPOUT(0x1B2D5B04CLL);
}

void SpecularMaterialLayer::getAnisoSpecular(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  ProShade::ConstVector *v7;
  int v8;
  PCSharedCount *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  PCSharedCount *v22;
  ProShade::ConstVector *v23;
  ProShade::ConstVector *v24;
  ProShade::ConstVector *v25;
  ProShade::ConstVector *v26;
  ProShade::ConstVector *v27;
  PCException *exception;
  uint64_t v29;
  PCSharedCount *v30;
  PCSharedCount v31;
  void *v32;
  ProShade::ConstVector *v33;
  PCSharedCount v34;
  _QWORD v35[2];
  PC_Sp_counted_base *v36;
  PCSharedCount v37;
  void *v38;
  PC_Sp_counted_base *v39;
  PCSharedCount v40;
  PCSharedCount v41[2];
  __CFString *v42;
  PCSharedCount v43;
  PCSharedCount v44[3];
  PCSharedCount v45;
  void *v46;
  PC_Sp_counted_base *v47;
  PCSharedCount v48;
  PCSharedCount v49;
  __CFString *v50;
  PCSharedCount v51;
  PCSharedCount v52[2];
  PC_Sp_counted_base *v53;
  PCSharedCount v54;
  PCSharedCount v55[2];
  PC_Sp_counted_base *v56;
  PCSharedCount v57;
  PCSharedCount v58[2];
  PC_Sp_counted_base *v59;
  PCSharedCount v60;
  PCSharedCount v61[2];
  __CFString *v62;
  PCSharedCount v63;
  PCSharedCount v64;
  char v65;
  uint64_t v66;
  PCSharedCount v67;
  _QWORD v68[2];
  PC_Sp_counted_base *v69;
  PCSharedCount v70;
  _QWORD v71[3];
  PCSharedCount v72;
  void *v73;
  char v74;
  uint64_t v75;
  PCSharedCount v76;
  void *v77;
  char v78;
  __CFString *v79;
  PCSharedCount v80;
  void *v81;
  char v82;
  __CFString *v83;
  PCSharedCount v84;
  void *v85;
  char v86;
  __CFString *v87;
  PCSharedCount v88;
  PCString v89;
  PCSharedCount v90;
  PC_Sp_counted_base *var0;
  PCSharedCount v92;
  PCString v93;
  char v94;
  __CFString *v95;
  PCSharedCount v96[2];

  v6 = *(_QWORD *)(a2 + 16);
  LiLightProperties::getLightColor((LiLightProperties *)a2, (PCSharedCount *)&v93);
  v85 = &unk_1E6569AC8;
  v86 = v94;
  v87 = v95;
  PCSharedCount::PCSharedCount(&v88, v96);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  LiLightProperties::getAttenuation((LiLightProperties *)a2, (PCSharedCount *)&v93);
  v81 = &unk_1E6569AC8;
  v82 = v94;
  v83 = v95;
  PCSharedCount::PCSharedCount(&v84, v96);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  v94 = *(_BYTE *)(a2 + 72);
  v95 = *(__CFString **)(a2 + 80);
  PCSharedCount::PCSharedCount(v96, (const PCSharedCount *)(a2 + 88));
  v93.var0 = (__CFString *)&unk_1E65746B8;
  v77 = &unk_1E6569AC8;
  v78 = v94;
  v79 = v95;
  PCSharedCount::PCSharedCount(&v80, v96);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  v73 = &unk_1E6569AC8;
  v74 = *(_BYTE *)(v6 + 488);
  v75 = *(_QWORD *)(v6 + 496);
  PCSharedCount::PCSharedCount(&v76, (const PCSharedCount *)(v6 + 504));
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 1.0);
  v95 = (__CFString *)v7;
  PCSharedCount::PCSharedCount(v96, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  ProShade::operator-(v71, &v93, &v73);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  v68[0] = &unk_1E6569AC8;
  v69 = 0;
  PCSharedCount::PCSharedCount(&v70);
  v8 = *(_DWORD *)(a1 + 136);
  v30 = v9;
  v29 = a1;
  if (v8 == 1)
  {
    v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v23 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v23, 2.0);
    v62 = (__CFString *)v23;
    PCSharedCount::PCSharedCount(&v63, (ProShade::ConstVector *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v24 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v24, 10.0);
    v56 = (PC_Sp_counted_base *)v24;
    PCSharedCount::PCSharedCount(&v57, (ProShade::ConstVector *)((char *)v24 + *(_QWORD *)(*(_QWORD *)v24 - 24)));
    ProShade::operator*(v58, v6 + 224, v55);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = v62;
    PCSharedCount::PCSharedCount(v96, &v63);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v59;
    PCSharedCount::PCSharedCount(&v92, &v60);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval((const PCSharedCount *)&v93, (uint64_t)&v89, (uint64_t)&v64);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v60);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v63);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v25 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v25, 2.0);
    v59 = (PC_Sp_counted_base *)v25;
    PCSharedCount::PCSharedCount(&v60, (ProShade::ConstVector *)((char *)v25 + *(_QWORD *)(*(_QWORD *)v25 - 24)));
    ProShade::operator*(v55, &v64, v71);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = (__CFString *)v59;
    PCSharedCount::PCSharedCount(v96, &v60);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v56;
    PCSharedCount::PCSharedCount(&v92, &v57);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v61);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v60);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v26 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v26, 2.0);
    v56 = (PC_Sp_counted_base *)v26;
    PCSharedCount::PCSharedCount(&v57, (ProShade::ConstVector *)((char *)v26 + *(_QWORD *)(*(_QWORD *)v26 - 24)));
    ProShade::operator*(v52, &v64, &v73);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = (__CFString *)v56;
    PCSharedCount::PCSharedCount(v96, &v57);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v53;
    PCSharedCount::PCSharedCount(&v92, &v54);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v58);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v52[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    ProShade::Vec2::Vec2(&v89, v61, v58);
    v22 = v30;
    anisoBlinnPhongShader(a2, &v93);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v68, (const PCSharedCount *)&v93);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v60);
    v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v63);
    v64.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  else
  {
    if (v8 != 2)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v93, "not implemented yet");
      PCString::PCString(&v89, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/LiMaterialLayer.cpp");
      PCException::PCException(exception, &v93, &v89, 897);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    }
    v64.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v65 = *(_BYTE *)(v6 + 232);
    v66 = *(_QWORD *)(v6 + 240);
    PCSharedCount::PCSharedCount(&v67, (const PCSharedCount *)(v6 + 248));
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v10 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v10, 0.5);
    v95 = (__CFString *)v10;
    PCSharedCount::PCSharedCount(v96, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v11 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v11, 1.0);
    v59 = (PC_Sp_counted_base *)v11;
    PCSharedCount::PCSharedCount(&v60, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    ProShade::operator-(&v89, v58, &v64);
    ProShade::operator*(v61, &v93, &v89);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v60);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v12, 0.5);
    v56 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(&v57, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    ProShade::operator-(&v89, &v73, v55);
    ProShade::operator*(&v93, &v64, &v89);
    v52[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v13 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v13, 2);
    v53 = (PC_Sp_counted_base *)v13;
    PCSharedCount::PCSharedCount(&v54, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
    ProShade::operator*(v58, &v93, v52);
    v52[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v14 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v14, 0.001);
    v50 = (__CFString *)v14;
    PCSharedCount::PCSharedCount(&v51, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
    v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v15 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v15, 0.0);
    v42 = (__CFString *)v15;
    PCSharedCount::PCSharedCount(&v43, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
    v35[0] = &unk_1E6569AC8;
    v16 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v16, 0.0);
    v36 = (PC_Sp_counted_base *)v16;
    PCSharedCount::PCSharedCount(&v37, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
    ProShade::operator+(&v38, v35, v58);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = v42;
    PCSharedCount::PCSharedCount(v96, &v43);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v39;
    PCSharedCount::PCSharedCount(&v92, &v40);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v44);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    ProShade::operator+(&v46, v44, v61);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = v50;
    PCSharedCount::PCSharedCount(v96, &v51);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v47;
    PCSharedCount::PCSharedCount(&v92, &v48);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v52);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v32 = &unk_1E6569AC8;
    v17 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v17, 0.999);
    v33 = v17;
    PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = (__CFString *)v53;
    PCSharedCount::PCSharedCount(v96, &v54);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = (PC_Sp_counted_base *)v17;
    PCSharedCount::PCSharedCount(&v92, &v34);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v55);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v32 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v52[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v46 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v45);
    v38 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v40);
    v35[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v51);
    v46 = &unk_1E6569AC8;
    v18 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v18, 0.001);
    v47 = (PC_Sp_counted_base *)v18;
    PCSharedCount::PCSharedCount(&v48, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
    v38 = &unk_1E6569AC8;
    v19 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v19, 0.0);
    v39 = (PC_Sp_counted_base *)v19;
    PCSharedCount::PCSharedCount(&v40, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    v32 = &unk_1E6569AC8;
    v20 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v20, 0.0);
    v33 = v20;
    PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    ProShade::operator-(v35, &v32, v58);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = (__CFString *)v39;
    PCSharedCount::PCSharedCount(v96, &v40);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v36;
    PCSharedCount::PCSharedCount(&v92, &v37);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v41);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    ProShade::operator+(v44, v41, v61);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = (__CFString *)v47;
    PCSharedCount::PCSharedCount(v96, &v48);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = v44[2].var0;
    PCSharedCount::PCSharedCount(&v92, &v45);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, &v49);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v21 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v21, 0.999);
    PCSharedCount::PCSharedCount(&v31, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    v95 = v50;
    PCSharedCount::PCSharedCount(v96, &v51);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    var0 = (PC_Sp_counted_base *)v21;
    PCSharedCount::PCSharedCount(&v92, &v31);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, v52);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    PCSharedCount::~PCSharedCount(&v31);
    v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v51);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v45);
    v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v35[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v32 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v38 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v40);
    v46 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    ProShade::Vec2::Vec2(&v89, v55, v52);
    v22 = v30;
    anisoWardShader(a2, (uint64_t)&v89, (PCSharedCount *)&v93);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v68, (const PCSharedCount *)&v93);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
    v89.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v52[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v55[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v58[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v60);
    v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v63);
    v64.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v67);
  v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v27 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v27, 0.0);
  v62 = (__CFString *)v27;
  PCSharedCount::PCSharedCount(&v63, (ProShade::ConstVector *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  v95 = v62;
  PCSharedCount::PCSharedCount(v96, &v63);
  v89.var0 = (__CFString *)&unk_1E6569AC8;
  var0 = v69;
  PCSharedCount::PCSharedCount(&v92, v22);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v93, (uint64_t)&v89, &v64);
  v89.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v68, &v64);
  v64.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v67);
  v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v63);
  ProShade::Selector_base::_select(v6 + 584, (const PCString *)0x1D, (PCSharedCount *)&v89);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  v95 = v89.var0;
  PCSharedCount::PCSharedCount(v96, &v90);
  PCSharedCount::~PCSharedCount(&v90);
  ProShade::operator*(a3, &v93, v6 + 288);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  ProShade::operator*(&v93, a3, &v85);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, (const PCSharedCount *)&v93);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  ProShade::operator*(&v93, a3, v68);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, (const PCSharedCount *)&v93);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  ProShade::operator*(&v93, a3, &v81);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, (const PCSharedCount *)&v93);
  v93.var0 = (__CFString *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v96);
  if (*(_BYTE *)(v29 + 140))
  {
    simpleFresnel(v6, (uint64_t)&v77, (uint64_t)&v93);
    v93.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v96);
  }
  v68[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v22);
  v71[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v72);
  v73 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
}

void sub_1B2D5C220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount *a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, PCSharedCount *a16, PCSharedCount *a17, PCSharedCount *a18, PCSharedCount *a19)
{
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  PCString::~PCString((PCString *)(v22 - 168));
  PCString::~PCString((PCString *)(v22 - 136));
  if (v20)
    __cxa_free_exception(v19);
  PCSharedCount::~PCSharedCount(a19);
  STACK[0x218] = v21 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x230]);
  STACK[0x238] = v21 + 16;
  PCSharedCount::~PCSharedCount(a16);
  STACK[0x258] = v21 + 16;
  PCSharedCount::~PCSharedCount(a17);
  *(_QWORD *)(v22 - 232) = v21 + 16;
  PCSharedCount::~PCSharedCount(a18);
  *(_QWORD *)(v22 - 200) = v21 + 16;
  PCSharedCount::~PCSharedCount(a13);
  _Unwind_Resume(a1);
}

void sub_1B2D5CBB0()
{
  JUMPOUT(0x1B2D5CA70);
}

void sub_1B2D5CBBC()
{
  JUMPOUT(0x1B2D5CB54);
}

void sub_1B2D5CBC8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0 + 16;
  JUMPOUT(0x1B2D5CB64);
}

void sub_1B2D5CBE0()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D5CB68);
}

void sub_1B2D5CC04()
{
  JUMPOUT(0x1B2D5CB78);
}

void sub_1B2D5CC10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x1B2D5CB84);
}

void sub_1B2D5CC24()
{
  JUMPOUT(0x1B2D5CB88);
}

void sub_1B2D5CC30()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x1B2D5CB94);
}

void sub_1B2D5CC44()
{
  JUMPOUT(0x1B2D5CB98);
}

void sub_1B2D5CC50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x1B2D5CBA4);
}

void sub_1B2D5CC60()
{
  JUMPOUT(0x1B2D5CB44);
}

void sub_1B2D5CC6C()
{
  JUMPOUT(0x1B2D5CB68);
}

uint64_t SpecularMaterialLayer::computeNormal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 120);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void SpecularMaterialLayer::computeColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const PCSharedCount *v8;
  uint64_t v9;
  const PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCShared_base *v12;
  PC_Sp_counted_base *v13;
  PCShared_base *v14;
  const PCSharedCount *v15;
  PC_Sp_counted_base *v16;
  PCShared_base *v17;
  const LiLight *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  PCArray_base *v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  ProShade::ConstVector *v32;
  ProShade::ConstVector *v33;
  ProShade::ConstVector *v34;
  ProShade::ConstVector *v35;
  ProShade::ConstVector *v36;
  ProShade::ConstVector *v37;
  ProShade::ConstVector *v38;
  ProShade::ConstVector *v39;
  _BOOL4 v40;
  const PCSharedCount *v41;
  PCSharedCount v42[2];
  PCSharedCount v43;
  PCSharedCount v44;
  _QWORD v45[2];
  ProShade::ConstVector *v46;
  PCSharedCount v47;
  _QWORD v48[2];
  ProShade::ConstVector *v49;
  PCSharedCount v50;
  _QWORD v51[2];
  ProShade::ConstVector *v52;
  PCSharedCount v53;
  _QWORD v54[2];
  ProShade::ConstVector *v55;
  PCSharedCount v56;
  PCSharedCount v57[3];
  PCSharedCount v58[4];
  PCSharedCount v59[4];
  PCSharedCount v60[4];
  PCSharedCount v61;
  PCSharedCount v62[3];
  PCSharedCount v63;
  PCSharedCount v64[3];
  PCSharedCount v65;
  PCSharedCount v66[3];
  PCSharedCount v67;
  void *v68;
  char var0;
  PC_Sp_counted_base *v70;
  PCSharedCount v71;
  void *v72;
  PC_Sp_counted_base *v73;
  PCSharedCount v74;
  void *v75;
  PC_Sp_counted_base *v76;
  PCSharedCount v77;
  PCSharedCount v78[2];
  PCSharedCount v79;
  PCSharedCount v80[2];

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  v8 = (const PCSharedCount *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2, a3);
  if (*(_BYTE *)(a1 + 69))
    v10 = v8 + 124;
  else
    v10 = v8 + 104;
  v68 = &unk_1E656A0C0;
  var0 = (char)v10[1].var0;
  v70 = v10[2].var0;
  PCSharedCount::PCSharedCount(&v71, v10 + 3);
  v11 = v10[6].var0;
  v68 = &unk_1E656A018;
  v72 = &unk_1E656A080;
  v73 = v11;
  if (v11)
    v12 = (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24));
  else
    v12 = 0;
  PCSharedCount::PCSharedCount(&v74, v12);
  v13 = v10[10].var0;
  v72 = &unk_1E656A240;
  v75 = &unk_1E656A080;
  v76 = v13;
  if (v13)
    v14 = (PCShared_base *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24));
  else
    v14 = 0;
  PCSharedCount::PCSharedCount(&v77, v14);
  v75 = &unk_1E656A2C0;
  v68 = &unk_1E656C648;
  if (*(_BYTE *)(a1 + 69))
    v15 = v8 + 232;
  else
    v15 = v8 + 228;
  v16 = v15[2].var0;
  v66[0].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  v66[2].var0 = v16;
  if (v16)
    v17 = (PCShared_base *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24));
  else
    v17 = 0;
  PCSharedCount::PCSharedCount(&v67, v17);
  v66[0].var0 = (PC_Sp_counted_base *)&unk_1E656A298;
  LiMaterialLayer::getSurfaceSpecularShininess(*(os_unfair_lock_s **)(a2 + 40), v8, (uint64_t)&v68, v66, v64);
  LiMaterialLayer::getSurfaceSpecularIntensity(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, v62);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v79, v8 + 30);
  ProShade::operator*(v57, v64, v78);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 224, v57);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v58);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v80);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v79, v8 + 26);
  ProShade::operator*(v57, v62, v78);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 288, v57);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v58);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v80);
  if (*(_BYTE *)(a1 + 8))
  {
    v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v79, v8 + 42);
    ProShade::operator*(v57, v64, v78);
    ProShade::VarT<ProShade::Node>::operator=(a3 + 256, v57);
    v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v58);
    v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v80);
    v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v79, v8 + 38);
    ProShade::operator*(v57, v62, v78);
    ProShade::VarT<ProShade::Node>::operator=(a3 + 320, v57);
    v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v58);
    v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v80);
  }
  else
  {
    ProShade::VarT<ProShade::Node>::operator=(a3 + 256, (const PCSharedCount *)(a3 + 224));
    ProShade::VarT<ProShade::Node>::operator=(a3 + 320, (const PCSharedCount *)(a3 + 288));
  }
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, a2, a3);
  v20 = *(_QWORD *)(a1 + 48);
  if (v20)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, a2, a3);
  v21 = *(_QWORD *)(a1 + 88);
  if (v21)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, a2, a3);
  v22 = *(PCArray_base **)(a1 + 104);
  if (v22)
    v22 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, a2, a3);
  v41 = (const PCSharedCount *)a3;
  if (*(_BYTE *)(a3 + 768))
    v23 = 1;
  else
    v23 = *(_DWORD *)(a1 + 64) != 3;
  v40 = v23;
  v24 = *(unsigned int *)(a2 + 12);
  if ((int)v24 >= 1)
  {
    v25 = 0;
    v26 = a3 + 704;
    v27 = 720;
    do
    {
      if (v25 >= *(int *)(a2 + 12))
        PCArray_base::badIndex(v22);
      v28 = (_BYTE *)(*(_QWORD *)(a2 + 16) + v27);
      if (*v28)
      {
        v29 = v28 - 720;
        v30 = LiLightInfo::get((LiLightInfo *)(v28 - 720), v18);
        LiLightProperties::LiLightProperties(v57, v29, v30, v41, *(unsigned __int8 *)(a2 + 32));
        v31 = *((_DWORD *)v57[0].var0 + 164);
        if (v31 && v31 != 100)
        {
          if (v40)
            SpecularMaterialLayer::getAnisoSpecular(a1, (uint64_t)v57, v54);
          else
            SpecularMaterialLayer::getIsoSpecular((SpecularMaterialLayer *)a1, v57, v54);
          ProShade::operator+(v78, v26, v54);
          ProShade::VarT<ProShade::Node>::operator=(v26, v78);
          v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(v80);
          v54[0] = &unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v56);
        }
        v60[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v61);
        v59[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v60);
        v58[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v59);
      }
      ++v25;
      v27 += 944;
    }
    while (v24 != v25);
  }
  LiLayeredMaterial::sampleSpecEnvironment((uint64_t)v41, (uint64_t)v54);
  ProShade::operator*(v78, &v41[72], v54);
  ProShade::operator+(v57, &v41[88], v78);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v41[88], v57);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v58);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v80);
  v54[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v56);
  v54[0] = &unk_1E6569AC8;
  v32 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v32, 0);
  v55 = v32;
  PCSharedCount::PCSharedCount(&v56, (ProShade::ConstVector *)((char *)v32 + *(_QWORD *)(*(_QWORD *)v32 - 24)));
  v51[0] = &unk_1E6569AC8;
  v33 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v33, 0);
  v52 = v33;
  PCSharedCount::PCSharedCount(&v53, (ProShade::ConstVector *)((char *)v33 + *(_QWORD *)(*(_QWORD *)v33 - 24)));
  v48[0] = &unk_1E6569AC8;
  v34 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v34, 0);
  v49 = v34;
  PCSharedCount::PCSharedCount(&v50, (ProShade::ConstVector *)((char *)v34 + *(_QWORD *)(*(_QWORD *)v34 - 24)));
  v45[0] = &unk_1E6569AC8;
  v35 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v35, 1.0);
  v46 = v35;
  PCSharedCount::PCSharedCount(&v47, (ProShade::ConstVector *)((char *)v35 + *(_QWORD *)(*(_QWORD *)v35 - 24)));
  ProShade::Vec4::Vec4(v78, v54, v51, v48, v45);
  v42[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v43, v8 + 22);
  ProShade::mix(v41 + 64, v78, v42, v57);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v41[64], v57);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v58);
  v42[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v80);
  v45[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v48[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v53);
  v54[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v56);
  v54[0] = &unk_1E6569AC8;
  v36 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v36, 0);
  v55 = v36;
  PCSharedCount::PCSharedCount(&v56, (ProShade::ConstVector *)((char *)v36 + *(_QWORD *)(*(_QWORD *)v36 - 24)));
  v51[0] = &unk_1E6569AC8;
  v37 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v37, 0);
  v52 = v37;
  PCSharedCount::PCSharedCount(&v53, (ProShade::ConstVector *)((char *)v37 + *(_QWORD *)(*(_QWORD *)v37 - 24)));
  v48[0] = &unk_1E6569AC8;
  v38 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v38, 0);
  v49 = v38;
  PCSharedCount::PCSharedCount(&v50, (ProShade::ConstVector *)((char *)v38 + *(_QWORD *)(*(_QWORD *)v38 - 24)));
  v45[0] = &unk_1E6569AC8;
  v39 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v39, 1.0);
  v46 = v39;
  PCSharedCount::PCSharedCount(&v47, (ProShade::ConstVector *)((char *)v39 + *(_QWORD *)(*(_QWORD *)v39 - 24)));
  ProShade::Vec4::Vec4(v78, v54, v51, v48, v45);
  v42[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v43, v8 + 22);
  ProShade::mix(v41 + 84, v78, v42, v57);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v41[84], v57);
  v57[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v58);
  v42[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v80);
  v45[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v48[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v53);
  v54[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v56);
  v62[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v63);
  v64[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v65);
  v66[0].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v67);
  v68 = &unk_1E656A018;
  v75 = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v77);
  v72 = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v74);
  v68 = &unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(&v71);
}

void sub_1B2D5D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14, PCSharedCount *a15, PCSharedCount *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  PCSharedCount *v63;
  uint64_t v64;

  PCSharedCount::~PCSharedCount(v63 + 3);
  *(_QWORD *)(v64 - 120) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v64 - 96));
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a59);
  a60 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a63);
  *(_QWORD *)(v64 - 248) = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a14);
  ProShade::Sampler::~Sampler((PCSharedCount *)(v64 - 216));
  _Unwind_Resume(a1);
}

int8x8_t *SpecularMaterialLayerBase::writeHash(SpecularMaterialLayerBase *this, int8x8_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  LiMaterialLayer::writeHash(this, a2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v4 + 32))(v4, a2);
  v5 = *((_QWORD *)this + 6);
  if (v5)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v5 + 32))(v5, a2);
  (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)this + 16));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 68));
  return PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 69));
}

uint64_t SpecularMaterialLayer::writeHash(SpecularMaterialLayer *this, int8x8_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  SpecularMaterialLayerBase::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B3559B61 & 0x7FFFFFFFFFFFFFFFLL));
  (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)this + 34));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 140));
  (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)this + 36));
  v4 = *((_QWORD *)this + 9);
  if (v4)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v4 + 32))(v4, a2);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v5 + 32))(v5, a2);
  v6 = *((_QWORD *)this + 13);
  if (v6)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v6 + 32))(v6, a2);
  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t, int8x8_t *))(*(_QWORD *)result + 32))(result, a2);
  return result;
}

_QWORD *SpecularMaterialLayer::print(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *result;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;

  result = LiMaterialLayer::print(a1, a2, a3);
  if (*(_BYTE *)(a1 + 8))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"separateEnvResponse: ", 21);
    if (*(_BYTE *)(a1 + 8))
      v8 = "true";
    else
      v8 = "false";
    if (*(_BYTE *)(a1 + 8))
      v9 = 4;
    else
      v9 = 5;
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  }
  if (*(_DWORD *)(a1 + 136) != 2)
  {
    LiImageSource::printIndent(a2, a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"specularModel: ", 15);
    v11 = *(_DWORD *)(a1 + 136);
    if (v11 == 2)
    {
      v12 = "Ward";
      v13 = a2;
      v14 = 4;
    }
    else if (v11 == 1)
    {
      v12 = "BlinnPhong";
      v13 = a2;
      v14 = 10;
    }
    else
    {
      if (v11)
      {
LABEL_17:
        result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        goto LABEL_18;
      }
      v12 = "Phong";
      v13 = a2;
      v14 = 5;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    goto LABEL_17;
  }
LABEL_18:
  if (*(_BYTE *)(a1 + 140))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"fresnel: ", 9);
    if (*(_BYTE *)(a1 + 140))
      v16 = "true";
    else
      v16 = "false";
    if (*(_BYTE *)(a1 + 140))
      v17 = 4;
    else
      v17 = 5;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"anisotropicModel: ", 18);
    switch(*(_DWORD *)(a1 + 64))
    {
      case 0:
        v19 = "Linear";
        v20 = a2;
        v21 = 6;
        goto LABEL_32;
      case 1:
        v19 = "Cylindrical";
        v20 = a2;
        v21 = 11;
        goto LABEL_32;
      case 2:
        v19 = "AnisotropicAngleMap";
        v20 = a2;
        v21 = 19;
        goto LABEL_32;
      case 3:
        v19 = "Isotropic";
        v20 = a2;
        v21 = 9;
LABEL_32:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v19, v21);
        break;
      default:
        break;
    }
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  if (*(_DWORD *)(a1 + 144))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"colorModel: ", 12);
    switch(*(_DWORD *)(a1 + 144))
    {
      case 0:
        v22 = "LerpWhiteToDiffuse";
        v23 = a2;
        v24 = 18;
        goto LABEL_41;
      case 1:
        v22 = "Solid";
        v23 = a2;
        v24 = 5;
        goto LABEL_41;
      case 2:
        v22 = "Diffuse";
        v23 = a2;
        v24 = 7;
        goto LABEL_41;
      case 3:
        v22 = "Map";
        v23 = a2;
        v24 = 3;
        goto LABEL_41;
      case 4:
        v22 = "ViewDependent";
        v23 = a2;
        v24 = 13;
LABEL_41:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v22, v24);
        break;
      default:
        break;
    }
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  if (!*(_BYTE *)(a1 + 68))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"cylindricalPerGlyph: ", 21);
    if (*(_BYTE *)(a1 + 68))
      v26 = "true";
    else
      v26 = "false";
    if (*(_BYTE *)(a1 + 68))
      v27 = 4;
    else
      v27 = 5;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
  }
  return result;
}

void SpecularMaterialLayerBase::SpecularMaterialLayerBase(SpecularMaterialLayerBase *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  PCSharedCount *v6;

  LiMaterialLayer::LiMaterialLayer(this, a2 + 1, a3);
  v5 = *a2;
  v6->var0 = (PC_Sp_counted_base *)*a2;
  *(PC_Sp_counted_base **)((char *)&v6->var0 + *(_QWORD *)(v5 - 24)) = (PC_Sp_counted_base *)a2[5];
  v6[4].var0 = 0;
  PCSharedCount::PCSharedCount(v6 + 5);
  *((_QWORD *)this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 1;
}

void sub_1B2D5E0C4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void SpecularMaterialLayerBase::~SpecularMaterialLayerBase(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  PC_Sp_counted_base *v3;

  v3 = *a2;
  this->var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)v3 - 3)) = a2[5];
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
}

void SpecularMaterialLayer::SpecularMaterialLayer(SpecularMaterialLayer *this, uint64_t a2)
{
  uint64_t v3;

  *((_QWORD *)this + 19) = &off_1E65EB048;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 1;
  SpecularMaterialLayerBase::SpecularMaterialLayerBase(this, (uint64_t *)off_1E6572D30, a2);
  *(_QWORD *)this = &off_1E6572CA8;
  *((_QWORD *)this + 19) = &unk_1E6572D10;
  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)v3 = &unk_1E65770D0;
  *(_QWORD *)(v3 + 8) = &unk_1E6577118;
  *((_QWORD *)this + 9) = v3;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 10, (PCShared_base *)(v3 + 8));
  *((_QWORD *)this + 11) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 12);
  *((_QWORD *)this + 13) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 14);
  *((_QWORD *)this + 15) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((_DWORD *)this + 34) = 2;
  *((_BYTE *)this + 140) = 0;
  *((_DWORD *)this + 36) = 0;
}

void sub_1B2D5E21C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v4;
  PCSharedCount::~PCSharedCount(v7);
  PCSharedCount::~PCSharedCount(v5);
  PCSharedCount::~PCSharedCount(v3);
  SpecularMaterialLayerBase::~SpecularMaterialLayerBase((PCSharedCount *)v1, (PC_Sp_counted_base **)off_1E6572D30);
  *(_QWORD *)(v1 + 152) = v6 + 16;
  *(_BYTE *)(v1 + 168) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t BumpMaterialLayer::BumpMaterialLayer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  *(_QWORD *)(a1 + 56) = &off_1E65EB048;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  LiMaterialLayer::LiMaterialLayer((LiMaterialLayer *)a1, (uint64_t *)&off_1E6572E08, a2);
  *(_QWORD *)a1 = &off_1E6572D80;
  *(_QWORD *)(a1 + 56) = &unk_1E6572DE8;
  v5 = operator new();
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 1;
  *(_QWORD *)(v5 + 16) = &unk_1E6573680;
  *(_QWORD *)v5 = &off_1E6573638;
  *(_QWORD *)(v5 + 8) = a1;
  *(_QWORD *)(a1 + 32) = v5;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 40), (PCShared_base *)(v5 + 16));
  *(_DWORD *)(a1 + 48) = 2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_BYTE *)(a1 + 25) = 0;
  return a1;
}

void sub_1B2D5E34C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 56) = v3 + 16;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t BumpMaterialLayer::sampleBumpMap(BumpMaterialLayer *a1, os_unfair_lock_s *this, uint64_t a3, const PCSharedCount *a4, uint64_t a5)
{
  uint64_t SamplerInfo;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  PCSharedCount v18[3];
  PCSharedCount v19;
  PCSharedCount v20[3];
  PCSharedCount v21;
  PCSharedCount v22[3];
  PCSharedCount v23;
  char v24;

  SamplerInfo = LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(a3 + 656));
  v11 = *(unsigned __int8 *)(LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(a3 + 752)) + 316);
  if (*(_BYTE *)(SamplerInfo + 316))
    v12 = v11 == 0;
  else
    v12 = 1;
  v13 = !v12;
  v14 = LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(a3 + 560));
  if (*((_BYTE *)a1 + 24))
    v15 = v13 == 0;
  else
    v15 = 1;
  if (v15)
  {
    if (*((_BYTE *)a1 + 24))
      v16 = 0;
    else
      v16 = v13;
    if ((v16 & 1) == 0 && !*(_BYTE *)(v14 + 316))
      return 0;
    BumpMaterialLayer::sampleRegularBumpMap(this, a1, (const PCSharedCount *)a3, a4, v16, (BumpMapSample *)v18);
    ProShade::VarT<ProShade::Node>::operator=(a5, v18);
    ProShade::VarT<ProShade::Node>::operator=(a5 + 32, v20);
    ProShade::VarT<ProShade::Node>::operator=(a5 + 64, v22);
  }
  else
  {
    BumpMaterialLayer::sampleLeanBumpMap(this, a3, (BumpMapSample *)v18);
    ProShade::VarT<ProShade::Node>::operator=(a5, v18);
    ProShade::VarT<ProShade::Node>::operator=(a5 + 32, v20);
    ProShade::VarT<ProShade::Node>::operator=(a5 + 64, v22);
  }
  *(_BYTE *)(a5 + 96) = v24;
  v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  return 1;
}

void sub_1B2D5E4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BumpMapSample::~BumpMapSample((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void BumpMaterialLayer::sampleLeanBumpMap(os_unfair_lock_s *this@<X1>, uint64_t a2@<X2>, BumpMapSample *a3@<X8>)
{
  OZChannelBase *v5;
  PCSharedCount *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  PCSharedCount *v10;
  PCSharedCount v11[3];
  PCSharedCount v12;
  PCSharedCount v13;
  char v14;
  ProShade::ConstVector *v15;
  PCSharedCount v16;
  PCSharedCount v17;
  char v18;
  ProShade::ConstVector *v19;
  PCSharedCount v20;
  PCSharedCount v21;
  char v22;
  ProShade::ConstVector *v23;
  PCSharedCount v24;
  void *v25;
  char v26;
  ProShade::ConstVector *v27;
  PCSharedCount v28;
  _BYTE v29[27];
  PCSharedCount v30;
  void *v31;
  uint64_t v32;
  PCSharedCount v33;
  void *v34;
  uint64_t v35;
  PCSharedCount v36;
  void *v37;
  PCSharedCount v38;

  v5 = (OZChannelBase *)*(unsigned int *)(LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(a2 + 656))
                                        + 332);
  LiMaterialLayer::calculateTriplanarNormal((uint64_t)&v37);
  v34 = &unk_1E6569AC8;
  v35 = 0;
  PCSharedCount::PCSharedCount(&v36);
  v10 = v6;
  v31 = &unk_1E6569AC8;
  v32 = 0;
  PCSharedCount::PCSharedCount(&v33);
  *(_QWORD *)&v29[3] = &unk_1E6569AC8;
  *(_QWORD *)&v29[19] = 0;
  PCSharedCount::PCSharedCount(&v30);
  v29[0] = BYTE1(this[174]._os_unfair_lock_opaque);
  *(_WORD *)&v29[1] = HIWORD(this[174]._os_unfair_lock_opaque);
  OZChannelBase::setRangeName(v5, (const PCString *)v29);
  v17.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0.0);
  v19 = v7;
  PCSharedCount::PCSharedCount(&v20, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  ProShade::Vec2::Vec2(&v21, &v17);
  v25 = &unk_1E6569AC8;
  v26 = v22;
  v27 = v23;
  PCSharedCount::PCSharedCount(&v28, &v24);
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v17.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0.0);
  v15 = v8;
  PCSharedCount::PCSharedCount(&v16, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::Vec2::Vec2(&v17, &v13);
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v22 = v18;
  v23 = v19;
  PCSharedCount::PCSharedCount(&v24, &v20);
  v17.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0.0);
  v11[2].var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v12, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::Vec2::Vec2(&v13, v11);
  v17.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v18 = v14;
  v19 = v15;
  PCSharedCount::PCSharedCount(&v20, &v16);
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  BumpMapSample::BumpMapSample(a3);
  *((_BYTE *)a3 + 96) = 1;
  v17.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v25 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  *(_QWORD *)&v29[3] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v34 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v10);
  v37 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
}

void sub_1B2D5E824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;
  PCSharedCount *v33;
  PCSharedCount *v34;
  PCSharedCount *v35;
  PCSharedCount *v36;
  uint64_t v37;
  uint64_t v38;

  PCSharedCount::~PCSharedCount(v36);
  PCSharedCount::~PCSharedCount(v35);
  PCSharedCount::~PCSharedCount(v34);
  PCSharedCount::~PCSharedCount(v33);
  *(_QWORD *)(v38 - 184) = v37 + 16;
  PCSharedCount::~PCSharedCount(v32);
  *(_QWORD *)(v38 - 152) = v37 + 16;
  PCSharedCount::~PCSharedCount(a10);
  *(_QWORD *)(v38 - 120) = v37 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v38 - 96));
  _Unwind_Resume(a1);
}

void BumpMapSample::~BumpMapSample(PCSharedCount *this)
{
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 11);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 7);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

void BumpMaterialLayer::sampleRegularBumpMap(os_unfair_lock_s *this@<X1>, BumpMaterialLayer *a2@<X0>, const PCSharedCount *a3@<X2>, const PCSharedCount *a4@<X3>, int a5@<W4>, BumpMapSample *a6@<X8>)
{
  const PCSharedCount *v10;
  const ProShade::SamplerNode **v11;
  uint64_t SamplerInfo;
  OZChannelBase *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  ProShade::ConstVector *v22;
  ProShade::ConstVector *v23;
  ProShade::ConstVector *v24;
  ProShade::ConstVector *v25;
  ProShade::ConstVector *v26;
  ProShade::ConstVector *v27;
  ProShade::ConstVector *v28;
  PCSharedCount *v29;
  ProShade::ConstVector *v30;
  ProShade::ConstVector *v31;
  ProShade::ConstVector *v32;
  ProShade::ConstVector *v33;
  ProShade::ConstVector *v34;
  ProShade::ConstVector *v35;
  _QWORD v37[3];
  PCSharedCount v38;
  PCSharedCount v39;
  PCSharedCount v40[2];
  PCSharedCount v41;
  _QWORD v42[3];
  PCSharedCount v43;
  PCSharedCount v44;
  PCSharedCount v45[2];
  PCSharedCount v46;
  PCSharedCount v47[3];
  PCSharedCount v48;
  PCSharedCount v49[3];
  PCSharedCount v50;
  PCSharedCount v51;
  PCSharedCount v52[2];
  PCSharedCount v53;
  PCSharedCount v54;
  PCSharedCount v55;
  PC_Sp_counted_base *v56;
  PCSharedCount v57;
  PCSharedCount v58;
  PCSharedCount v59;
  PC_Sp_counted_base *v60;
  PCSharedCount v61;
  PCSharedCount v62;
  PCSharedCount v63;
  PC_Sp_counted_base *v64;
  PCSharedCount v65;
  PCSharedCount v66;
  PCSharedCount v67;
  PC_Sp_counted_base *v68;
  PCSharedCount v69;
  PCSharedCount v70;
  PCSharedCount v71;
  PC_Sp_counted_base *v72;
  PCSharedCount v73;
  PCSharedCount v74;
  PCSharedCount v75;
  PC_Sp_counted_base *v76;
  PCSharedCount v77;
  PCSharedCount v78;
  PCSharedCount v79;
  PC_Sp_counted_base *v80;
  PCSharedCount v81;
  PCSharedCount v82;
  PCSharedCount v83;
  PC_Sp_counted_base *v84;
  PCSharedCount v85;
  PCSharedCount v86;
  char v87;
  PC_Sp_counted_base *v88;
  PCSharedCount v89;
  PCSharedCount v90;
  char v91;
  PC_Sp_counted_base *v92;
  PCSharedCount v93;
  PCSharedCount v94;
  PCSharedCount v95;
  PC_Sp_counted_base *v96;
  PCSharedCount v97;
  PCSharedCount v98;
  PCSharedCount v99;
  PC_Sp_counted_base *v100;
  PCSharedCount v101;
  PCSharedCount v102;
  PCSharedCount v103;
  PCSharedCount v104;
  PCSharedCount v105;
  PCSharedCount v106;
  _BYTE v107[8];
  PCSharedCount v108;
  PCSharedCount v109;
  PCSharedCount v110;
  _BYTE v111[8];
  PC_Sp_counted_base *v112;
  PCSharedCount v113;
  PCSharedCount v114;
  PCSharedCount v115;
  PC_Sp_counted_base *var0;
  PCSharedCount v117;
  PCSharedCount v118;
  PCSharedCount v119;
  __int128 v120;
  PCSharedCount v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  PCSharedCount v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  void *v141;
  char v142;
  uint64_t v143;
  PCSharedCount v144;
  void *v145;
  char v146;
  uint64_t v147;
  PCSharedCount v148;
  void *v149;
  char v150;
  uint64_t v151;
  PCSharedCount v152;
  char v153;
  __int16 os_unfair_lock_opaque_high;
  _QWORD v155[3];
  PCSharedCount v156;
  _QWORD v157[3];
  PCSharedCount v158;
  _QWORD v159[3];
  PCSharedCount v160;
  void *v161;
  _BYTE v162[16];
  PCSharedCount v163;
  PCSharedCount v164;
  PCSharedCount v165[2];

  if (a5)
    v10 = a3 + 80;
  else
    v10 = a3 + 68;
  v11 = (const ProShade::SamplerNode **)&a3[82];
  if (!a5)
    v11 = (const ProShade::SamplerNode **)&a3[70];
  SamplerInfo = LiMaterial::getSamplerInfo(this, *v11);
  LiMaterialLayer::calculateTriplanarNormal((uint64_t)&v161);
  v159[0] = &unk_1E6569AC8;
  v159[2] = 0;
  PCSharedCount::PCSharedCount(&v160);
  v157[0] = &unk_1E6569AC8;
  v157[2] = 0;
  PCSharedCount::PCSharedCount(&v158);
  v155[0] = &unk_1E6569AC8;
  v155[2] = 0;
  PCSharedCount::PCSharedCount(&v156);
  v13 = (OZChannelBase *)*(unsigned int *)(SamplerInfo + 332);
  v153 = BYTE1(this[174]._os_unfair_lock_opaque);
  os_unfair_lock_opaque_high = HIWORD(this[174]._os_unfair_lock_opaque);
  OZChannelBase::setRangeName(v13, (const PCString *)&v153);
  v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 0.0);
  *((_QWORD *)&v122 + 1) = v14;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v123, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  ProShade::Vec2::Vec2(&v131, &v121);
  v149 = &unk_1E6569AC8;
  v150 = v132;
  v151 = *((_QWORD *)&v132 + 1);
  PCSharedCount::PCSharedCount(&v152, (const PCSharedCount *)&v133);
  v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v133);
  v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v123);
  v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0.0);
  *((_QWORD *)&v122 + 1) = v15;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v123, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  ProShade::Vec2::Vec2(&v131, &v121);
  v145 = &unk_1E6569AC8;
  v146 = v132;
  v147 = *((_QWORD *)&v132 + 1);
  PCSharedCount::PCSharedCount(&v148, (const PCSharedCount *)&v133);
  v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v133);
  v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v123);
  v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 0.0);
  *((_QWORD *)&v122 + 1) = v16;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v123, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  ProShade::Vec2::Vec2(&v131, &v121);
  v141 = &unk_1E6569AC8;
  v142 = v132;
  v143 = *((_QWORD *)&v132 + 1);
  PCSharedCount::PCSharedCount(&v144, (const PCSharedCount *)&v133);
  v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v133);
  v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v123);
  BumpMapSample::BumpMapSample(a6);
  *((_BYTE *)a6 + 96) = 0;
  if (*(_BYTE *)(SamplerInfo + 317))
  {
    v140 = 0x3FF0000000000000;
    v137 = 0x3FF0000000000000;
    v134 = 0x3FF0000000000000;
    v131.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    v132 = 0u;
    v133 = 0u;
    v135 = 0u;
    v136 = 0u;
    v138 = 0u;
    v139 = 0u;
    v130 = 0x3FF0000000000000;
    v127 = 0x3FF0000000000000;
    v124 = 0x3FF0000000000000;
    v121.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    v122 = 0u;
    v123 = 0u;
    v125 = 0u;
    v126 = 0u;
    v128 = 0u;
    v129 = 0u;
    if (*(_BYTE *)(SamplerInfo + 318))
    {
      v119.var0 = 0;
      v118.var0 = 0;
      v120 = xmmword_1B304EED0;
      PCMatrix44Tmpl<double>::rotate((uint64_t)&v131, (double *)&v118, 0, 1.57079633);
      v119.var0 = 0;
      v118.var0 = 0;
      v120 = xmmword_1B304EED0;
      PCMatrix44Tmpl<double>::rotate((uint64_t)&v121, (double *)&v118, 0, -1.57079633);
    }
    ProShade::Mat4::Mat4(&v114, (uint64_t)&v131);
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v119.var0) = v115.var0;
    *(_QWORD *)&v120 = var0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v120 + 1, &v117);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v104, a3 + 222);
    ProShade::operator*(&v106, &v102, &v118);
    ProShade::operator*(&v110, &v106, v159);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)4, &v98);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v98.var0;
    PCSharedCount::PCSharedCount(&v117, &v99);
    PCSharedCount::~PCSharedCount(&v99);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v149, &v114);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v104, a3 + 222);
    ProShade::operator*(&v106, &v102, &v118);
    ProShade::operator*(&v110, &v106, v157);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)4, &v98);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v98.var0;
    PCSharedCount::PCSharedCount(&v117, &v99);
    PCSharedCount::~PCSharedCount(&v99);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v145, &v114);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v108, a3 + 222);
    ProShade::operator*(&v110, &v106, v155);
    ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)4, &v102);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v102.var0;
    PCSharedCount::PCSharedCount(&v117, &v103);
    PCSharedCount::~PCSharedCount(&v103);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v141, &v114);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    ProShade::Sampler::sample(v10, (uint64_t)&v149, &v106);
    ProShade::Selector_base::_select((uint64_t)v107, (const PCString *)0x1D, &v102);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v112 = v102.var0;
    PCSharedCount::PCSharedCount(&v113, &v103);
    PCSharedCount::~PCSharedCount(&v103);
    BumpMaterialLayer::adjustBumpMapGain(a2, a3, &v110, (uint64_t)&v114);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    ProShade::Sampler::sample(v10, (uint64_t)&v145, &v102);
    ProShade::Selector_base::_select((uint64_t)&v103, (const PCString *)0x1D, &v98);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v108.var0 = v98.var0;
    PCSharedCount::PCSharedCount(&v109, &v99);
    PCSharedCount::~PCSharedCount(&v99);
    BumpMaterialLayer::adjustBumpMapGain(a2, a3, &v106, (uint64_t)&v110);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    ProShade::Sampler::sample(v10, (uint64_t)&v141, &v98);
    ProShade::Selector_base::_select((uint64_t)&v99, (const PCString *)0x1D, &v94);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v104.var0 = v94.var0;
    PCSharedCount::PCSharedCount(&v105, &v95);
    PCSharedCount::~PCSharedCount(&v95);
    BumpMaterialLayer::adjustBumpMapGain(a2, a3, &v102, (uint64_t)&v106);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    if (*(_BYTE *)(SamplerInfo + 318))
    {
      ProShade::Mat4::Mat4(&v98, (uint64_t)&v121);
      v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      LOBYTE(v103.var0) = v99.var0;
      v104.var0 = v100;
      PCSharedCount::PCSharedCount(&v105, &v101);
      v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v101);
      ProShade::Selector_base::_select((uint64_t)&v115, 0, &v82);
      v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v88 = v82.var0;
      PCSharedCount::PCSharedCount(&v89, &v83);
      PCSharedCount::~PCSharedCount(&v83);
      ProShade::Selector_base::_select((uint64_t)&v115, (const PCString *)1, &v78);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v84 = v78.var0;
      PCSharedCount::PCSharedCount(&v85, &v79);
      PCSharedCount::~PCSharedCount(&v79);
      ProShade::Selector_base::_select((uint64_t)&v115, (const PCString *)2, &v74);
      v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v80 = v74.var0;
      PCSharedCount::PCSharedCount(&v81, &v75);
      PCSharedCount::~PCSharedCount(&v75);
      v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v17 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v17, 1.0);
      v76 = (PC_Sp_counted_base *)v17;
      PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
      ProShade::Vec4::Vec4(&v90, &v86, &v82, &v78, &v74);
      ProShade::operator*(&v94, &v102, &v90);
      ProShade::Selector_base::_select((uint64_t)&v95, (const PCString *)7, &v70);
      v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v100 = v70.var0;
      PCSharedCount::PCSharedCount(&v101, &v71);
      PCSharedCount::~PCSharedCount(&v71);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v114, &v98);
      v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v101);
      v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v97);
      v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v93);
      v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v77);
      v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v81);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v85);
      v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v89);
      ProShade::Selector_base::_select((uint64_t)v111, 0, &v82);
      v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v88 = v82.var0;
      PCSharedCount::PCSharedCount(&v89, &v83);
      PCSharedCount::~PCSharedCount(&v83);
      ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)1, &v78);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v84 = v78.var0;
      PCSharedCount::PCSharedCount(&v85, &v79);
      PCSharedCount::~PCSharedCount(&v79);
      ProShade::Selector_base::_select((uint64_t)v111, (const PCString *)2, &v74);
      v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v80 = v74.var0;
      PCSharedCount::PCSharedCount(&v81, &v75);
      PCSharedCount::~PCSharedCount(&v75);
      v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v18 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v18, 1.0);
      v76 = (PC_Sp_counted_base *)v18;
      PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
      ProShade::Vec4::Vec4(&v90, &v86, &v82, &v78, &v74);
      ProShade::operator*(&v94, &v102, &v90);
      ProShade::Selector_base::_select((uint64_t)&v95, (const PCString *)7, &v70);
      v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v100 = v70.var0;
      PCSharedCount::PCSharedCount(&v101, &v71);
      PCSharedCount::~PCSharedCount(&v71);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v110, &v98);
      v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v101);
      v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v97);
      v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v93);
      v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v77);
      v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v81);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v85);
      v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v89);
      v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v105);
    }
    ProShade::Selector_base::_select((uint64_t)&a3[221], (const PCString *)7, &v94);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v100 = v94.var0;
    PCSharedCount::PCSharedCount(&v101, &v95);
    PCSharedCount::~PCSharedCount(&v95);
    ProShade::Func<ProShade::Func_inverse>::eval((uint64_t)&v98, &v102);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v19 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v19, 1.0);
    v88 = (PC_Sp_counted_base *)v19;
    PCSharedCount::PCSharedCount(&v89, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v20 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v20, 0.0);
    v84 = (PC_Sp_counted_base *)v20;
    PCSharedCount::PCSharedCount(&v85, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v21 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v21, 0.0);
    v80 = (PC_Sp_counted_base *)v21;
    PCSharedCount::PCSharedCount(&v81, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
    ProShade::Vec3::Vec3(&v90, &v86, &v82, &v78);
    ProShade::operator*(&v94, &v102, &v90);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v94, (uint64_t)&v98);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v93);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v85);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v22 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v22, 0.0);
    v84 = (PC_Sp_counted_base *)v22;
    PCSharedCount::PCSharedCount(&v85, (ProShade::ConstVector *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)));
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v23 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v23, 1.0);
    v80 = (PC_Sp_counted_base *)v23;
    PCSharedCount::PCSharedCount(&v81, (ProShade::ConstVector *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v24 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v24, 0.0);
    v76 = (PC_Sp_counted_base *)v24;
    PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v24 + *(_QWORD *)(*(_QWORD *)v24 - 24)));
    ProShade::Vec3::Vec3(&v86, &v82, &v78, &v74);
    ProShade::operator*(&v90, &v102, &v86);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v90, (uint64_t)&v94);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v93);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v85);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v91 = (char)v99.var0;
    v92 = v100;
    PCSharedCount::PCSharedCount(&v93, &v101);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v87 = (char)v95.var0;
    v88 = v96;
    PCSharedCount::PCSharedCount(&v89, &v97);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v25 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v25, 0.0);
    v76 = (PC_Sp_counted_base *)v25;
    PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v25 + *(_QWORD *)(*(_QWORD *)v25 - 24)));
    ProShade::Selector_base::_select((uint64_t)&v99, 0, &v66);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v72 = v66.var0;
    PCSharedCount::PCSharedCount(&v73, &v67);
    PCSharedCount::~PCSharedCount(&v67);
    ProShade::Selector_base::_select((uint64_t)&v99, (const PCString *)1, &v62);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v68 = v62.var0;
    PCSharedCount::PCSharedCount(&v69, &v63);
    PCSharedCount::~PCSharedCount(&v63);
    ProShade::Vec3::Vec3(&v78, &v74, &v70, &v66);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v83.var0) = v79.var0;
    v84 = v80;
    PCSharedCount::PCSharedCount(&v85, &v81);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v73);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v26 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v26, 0.0);
    v72 = (PC_Sp_counted_base *)v26;
    PCSharedCount::PCSharedCount(&v73, (ProShade::ConstVector *)((char *)v26 + *(_QWORD *)(*(_QWORD *)v26 - 24)));
    ProShade::Selector_base::_select((uint64_t)&v95, 0, &v62);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v68 = v62.var0;
    PCSharedCount::PCSharedCount(&v69, &v63);
    PCSharedCount::~PCSharedCount(&v63);
    ProShade::Selector_base::_select((uint64_t)&v95, (const PCString *)1, &v58);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v64 = v58.var0;
    PCSharedCount::PCSharedCount(&v65, &v59);
    PCSharedCount::~PCSharedCount(&v59);
    ProShade::Vec3::Vec3(&v74, &v70, &v66, &v62);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v79.var0) = v75.var0;
    v80 = v76;
    PCSharedCount::PCSharedCount(&v81, &v77);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v73);
    ProShade::Selector_base::_select((uint64_t)&v99, 0, &v62);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v68 = v62.var0;
    PCSharedCount::PCSharedCount(&v69, &v63);
    PCSharedCount::~PCSharedCount(&v63);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v27 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v27, 0.0);
    v64 = (PC_Sp_counted_base *)v27;
    PCSharedCount::PCSharedCount(&v65, (ProShade::ConstVector *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
    ProShade::Selector_base::_select((uint64_t)&v99, (const PCString *)1, &v54);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v60 = v54.var0;
    PCSharedCount::PCSharedCount(&v61, &v55);
    PCSharedCount::~PCSharedCount(&v55);
    ProShade::Vec3::Vec3(&v70, &v66, &v62, &v58);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v75.var0) = v71.var0;
    v76 = v72;
    PCSharedCount::PCSharedCount(&v77, &v73);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v73);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    ProShade::Selector_base::_select((uint64_t)&v95, 0, &v58);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v64 = v58.var0;
    PCSharedCount::PCSharedCount(&v65, &v59);
    PCSharedCount::~PCSharedCount(&v59);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v28 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v28, 0.0);
    v60 = (PC_Sp_counted_base *)v28;
    PCSharedCount::PCSharedCount(&v61, (ProShade::ConstVector *)((char *)v28 + *(_QWORD *)(*(_QWORD *)v28 - 24)));
    ProShade::Selector_base::_select((uint64_t)&v95, (const PCString *)1, &v51);
    v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v56 = v51.var0;
    PCSharedCount::PCSharedCount(&v57, v52);
    PCSharedCount::~PCSharedCount(v52);
    ProShade::Vec3::Vec3(&v66, &v62, &v58, &v54);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v71.var0) = v67.var0;
    v72 = v68;
    PCSharedCount::PCSharedCount(&v73, &v69);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    ProShade::Vec3::Vec3(&v58, &v90);
    ProShade::Vec3::Vec3(&v54, &v86);
    ProShade::Vec3::Vec3(&v51, &v106);
    ProShade::Vec3::Vec3(v49, a4 + 20);
    LiMaterialLayer::tangentSpaceToEyeSpace((LiMaterialLayer *)&v58, (const ProShade::Vec3 *)&v54, (const ProShade::Vec3 *)&v51, (const ProShade::Vec3 *)v49, &v62);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v67.var0) = v63.var0;
    v68 = v64;
    PCSharedCount::PCSharedCount(&v69, &v65);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v49[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v50);
    v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v53);
    v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    ProShade::Vec3::Vec3(&v54, &v82);
    ProShade::Vec3::Vec3(&v51, &v78);
    ProShade::Vec3::Vec3(v49, &v114);
    ProShade::Vec3::Vec3(v47, a4 + 20);
    LiMaterialLayer::tangentSpaceToEyeSpace((LiMaterialLayer *)&v54, (const ProShade::Vec3 *)&v51, (const ProShade::Vec3 *)v49, (const ProShade::Vec3 *)v47, &v58);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v63.var0) = v59.var0;
    v64 = v60;
    PCSharedCount::PCSharedCount(&v65, &v61);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v49[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v50);
    v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v53);
    v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    ProShade::Vec3::Vec3(&v51, &v74);
    ProShade::Vec3::Vec3(v49, &v70);
    ProShade::Vec3::Vec3(v47, &v110);
    ProShade::Vec3::Vec3(&v44, a4 + 20);
    LiMaterialLayer::tangentSpaceToEyeSpace((LiMaterialLayer *)&v51, (const ProShade::Vec3 *)v49, (const ProShade::Vec3 *)v47, (const ProShade::Vec3 *)&v44, &v54);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v59.var0) = v55.var0;
    v60 = v56;
    PCSharedCount::PCSharedCount(&v61, &v57);
    v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v49[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v50);
    v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v53);
    ProShade::Selector_base::_select((uint64_t)v162, 0, &v44);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v47[2] = v44;
    PCSharedCount::PCSharedCount(&v48, v45);
    PCSharedCount::~PCSharedCount(v45);
    ProShade::operator*(v49, &v62, v47);
    ProShade::Selector_base::_select((uint64_t)v162, (const PCString *)1, &v39);
    v42[0] = &unk_1E6569AC8;
    v42[2] = v39.var0;
    PCSharedCount::PCSharedCount(&v43, v40);
    PCSharedCount::~PCSharedCount(v40);
    ProShade::operator*(&v44, &v58, v42);
    ProShade::operator+(&v51, v49, &v44);
    ProShade::Selector_base::_select((uint64_t)v162, (const PCString *)2, &v164);
    v37[0] = &unk_1E6569AC8;
    v37[2] = v164.var0;
    PCSharedCount::PCSharedCount(&v38, v165);
    PCSharedCount::~PCSharedCount(v165);
    ProShade::operator*(&v39, &v66, v37);
    ProShade::operator+(&v54, &v51, &v39);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a6, &v54);
    v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
    v39.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v38);
    v51.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v53);
    v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    v42[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v49[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v50);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v58.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v61);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v73);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v85);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v93);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v29 = (PCSharedCount *)&v120 + 1;
  }
  else
  {
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v120, a3 + 222);
    ProShade::operator*(&v121, &v118, v155);
    ProShade::Selector_base::_select((uint64_t)&v122, (const PCString *)4, &v114);
    v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    *((PCSharedCount *)&v132 + 1) = v114;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v133, &v115);
    PCSharedCount::~PCSharedCount(&v115);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v141, &v131);
    v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v133);
    v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v123);
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v120 + 1);
    ProShade::Sampler::sample(v10, (uint64_t)&v141, &v121);
    ProShade::Selector_base::_select((uint64_t)&v122, (const PCString *)0x1D, &v118);
    v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    *((PCSharedCount *)&v132 + 1) = v118;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v133, &v119);
    PCSharedCount::~PCSharedCount(&v119);
    v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v123);
    ProShade::Selector_base::_select((uint64_t)&a3[221], (const PCString *)7, &v114);
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    *(PCSharedCount *)&v120 = v114;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v120 + 1, &v115);
    PCSharedCount::~PCSharedCount(&v115);
    ProShade::Func<ProShade::Func_inverse>::eval((uint64_t)&v118, &v121);
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v120 + 1);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v30 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v30, 1.0);
    v108.var0 = (PC_Sp_counted_base *)v30;
    PCSharedCount::PCSharedCount(&v109, (ProShade::ConstVector *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v31 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v31, 0.0);
    v104.var0 = (PC_Sp_counted_base *)v31;
    PCSharedCount::PCSharedCount(&v105, (ProShade::ConstVector *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v32 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v32, 0.0);
    v100 = (PC_Sp_counted_base *)v32;
    PCSharedCount::PCSharedCount(&v101, (ProShade::ConstVector *)((char *)v32 + *(_QWORD *)(*(_QWORD *)v32 - 24)));
    ProShade::Vec3::Vec3(&v110, &v106, &v102, &v98);
    ProShade::operator*(&v114, &v121, &v110);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v114, (uint64_t)&v118);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v33 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v33, 0.0);
    v104.var0 = (PC_Sp_counted_base *)v33;
    PCSharedCount::PCSharedCount(&v105, (ProShade::ConstVector *)((char *)v33 + *(_QWORD *)(*(_QWORD *)v33 - 24)));
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v34 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v34, 1.0);
    v100 = (PC_Sp_counted_base *)v34;
    PCSharedCount::PCSharedCount(&v101, (ProShade::ConstVector *)((char *)v34 + *(_QWORD *)(*(_QWORD *)v34 - 24)));
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v35 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v35, 0.0);
    v96 = (PC_Sp_counted_base *)v35;
    PCSharedCount::PCSharedCount(&v97, (ProShade::ConstVector *)((char *)v35 + *(_QWORD *)(*(_QWORD *)v35 - 24)));
    ProShade::Vec3::Vec3(&v106, &v102, &v98, &v94);
    ProShade::operator*(&v110, &v121, &v106);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v110, (uint64_t)&v114);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v111[0] = v119.var0;
    v112 = (PC_Sp_counted_base *)v120;
    PCSharedCount::PCSharedCount(&v113, (const PCSharedCount *)&v120 + 1);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v107[0] = v115.var0;
    v108.var0 = var0;
    PCSharedCount::PCSharedCount(&v109, &v117);
    ProShade::Vec3::Vec3(&v94, &v110);
    ProShade::Vec3::Vec3(&v90, &v106);
    ProShade::Vec3::Vec3(&v86, &v131);
    ProShade::Vec3::Vec3(&v82, a4 + 20);
    LiMaterialLayer::tangentSpaceToEyeSpace((LiMaterialLayer *)&v94, (const ProShade::Vec3 *)&v90, (const ProShade::Vec3 *)&v86, (const ProShade::Vec3 *)&v82, &v98);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v103.var0) = v99.var0;
    v104.var0 = v100;
    PCSharedCount::PCSharedCount(&v105, &v101);
    v98.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v101);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v85);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v93);
    v94.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v97);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a6, &v102);
    v102.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v105);
    v106.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v109);
    v110.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v113);
    v114.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v117);
    v118.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v120 + 1);
    v121.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v123);
    v131.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v29 = (PCSharedCount *)&v133;
  }
  PCSharedCount::~PCSharedCount(v29);
  v141 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v144);
  v145 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v148);
  v149 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v152);
  v155[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v156);
  v157[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v158);
  v159[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v160);
  v161 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v163);
}

void sub_1B2D609B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount *a12, PCSharedCount *a13, PCSharedCount *a14, PCSharedCount *a15, PCSharedCount *a16, PCSharedCount *a17, uint64_t a18, PCSharedCount *a19, uint64_t a20,PCSharedCount *a21,PCSharedCount *a22,PCSharedCount *a23,PCSharedCount *a24,PCSharedCount *a25,PCSharedCount *a26)
{
  PCSharedCount *v26;
  PCSharedCount *v27;
  PCSharedCount *v28;
  PCSharedCount *v29;
  uint64_t v30;
  uint64_t v31;

  STACK[0x2F0] = v30 + 16;
  PCSharedCount::~PCSharedCount(v29);
  STACK[0x310] = v30 + 16;
  PCSharedCount::~PCSharedCount(v28);
  STACK[0x330] = v30 + 16;
  PCSharedCount::~PCSharedCount(v26);
  STACK[0x350] = v30 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x368]);
  STACK[0x370] = v30 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x388]);
  STACK[0x390] = v30 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x3A8]);
  STACK[0x410] = v30 + 16;
  PCSharedCount::~PCSharedCount(v27);
  BumpMapSample::~BumpMapSample(a19);
  STACK[0x490] = v30 + 16;
  PCSharedCount::~PCSharedCount(a21);
  STACK[0x4B0] = v30 + 16;
  PCSharedCount::~PCSharedCount(a22);
  STACK[0x4D0] = v30 + 16;
  PCSharedCount::~PCSharedCount(a23);
  *(_QWORD *)(v31 - 232) = v30 + 16;
  PCSharedCount::~PCSharedCount(a24);
  *(_QWORD *)(v31 - 200) = v30 + 16;
  PCSharedCount::~PCSharedCount(a25);
  *(_QWORD *)(v31 - 168) = v30 + 16;
  PCSharedCount::~PCSharedCount(a26);
  *(_QWORD *)(v31 - 136) = v30 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v31 - 112));
  _Unwind_Resume(a1);
}

void sub_1B2D617DC()
{
  JUMPOUT(0x1B2D617B8);
}

void sub_1B2D617E4()
{
  JUMPOUT(0x1B2D617ECLL);
}

void sub_1B2D6182C()
{
  JUMPOUT(0x1B2D610D8);
}

void sub_1B2D61834()
{
  PCSharedCount *v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0x410] = v1;
  PCSharedCount::~PCSharedCount(v0);
  STACK[0x390] = v2 + 16;
  JUMPOUT(0x1B2D610E4);
}

void sub_1B2D6185C()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D610E8);
}

void sub_1B2D6187C()
{
  PCSharedCount *v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0x410] = v1;
  PCSharedCount::~PCSharedCount(v0);
  STACK[0x390] = v2 + 16;
  JUMPOUT(0x1B2D610F4);
}

void sub_1B2D618A4()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D610F8);
}

void sub_1B2D618C4()
{
  PCSharedCount *v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0x410] = v1;
  PCSharedCount::~PCSharedCount(v0);
  STACK[0x390] = v2 + 16;
  JUMPOUT(0x1B2D61104);
}

void sub_1B2D618EC()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D61108);
}

void sub_1B2D61910()
{
  JUMPOUT(0x1B2D61118);
}

void sub_1B2D61918()
{
  JUMPOUT(0x1B2D61128);
}

void sub_1B2D61920()
{
  JUMPOUT(0x1B2D6113CLL);
}

void sub_1B2D61950()
{
  JUMPOUT(0x1B2D61018);
}

void sub_1B2D61958()
{
  JUMPOUT(0x1B2D61028);
}

void sub_1B2D6198C()
{
  JUMPOUT(0x1B2D6105CLL);
}

void sub_1B2D619C0()
{
  JUMPOUT(0x1B2D61070);
}

void sub_1B2D619C8()
{
  JUMPOUT(0x1B2D610E8);
}

void sub_1B2D619D0()
{
  JUMPOUT(0x1B2D610F8);
}

void sub_1B2D619D8()
{
  JUMPOUT(0x1B2D61108);
}

void BumpMaterialLayer::adjustBumpMapGain(BumpMaterialLayer *this, const PCSharedCount *a2, BumpMapSample *a3)
{
  int v5;
  PCSharedCount *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  PCSharedCount *v13;
  _QWORD v14[3];
  PCSharedCount v15;
  PCSharedCount v16[2];
  PC_Sp_counted_base *v17;
  PCSharedCount v18;
  PCSharedCount v19[2];
  PC_Sp_counted_base *v20;
  PCSharedCount v21;
  PCSharedCount v22[2];
  PC_Sp_counted_base *v23;
  PCSharedCount v24;
  PCSharedCount v25;
  PCSharedCount v26[2];
  PCSharedCount v27;
  PCSharedCount v28;
  PCSharedCount v29;
  PC_Sp_counted_base *v30;
  PCSharedCount v31;
  void *v32;
  char v33;
  PC_Sp_counted_base *var0;
  PCSharedCount v35;
  void *v36;
  _BYTE v37[8];
  uint64_t v38;
  PCSharedCount v39;
  _QWORD v40[2];
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43;
  PCSharedCount v44;
  PC_Sp_counted_base *v45;
  PCSharedCount v46;
  PCSharedCount v47;
  char v48;
  PC_Sp_counted_base *v49;
  PCSharedCount v50[2];

  v40[0] = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v41, a2 + 226);
  v36 = &unk_1E6569AC8;
  v37[0] = *((_BYTE *)a3 + 8);
  v38 = *((_QWORD *)a3 + 2);
  PCSharedCount::PCSharedCount(&v39, (const PCSharedCount *)a3 + 3);
  v5 = *((_DWORD *)this + 12);
  if (v5 == 2)
  {
    ProShade::Selector_base::_select((uint64_t)v37, (const PCString *)4, &v28);
    v32 = &unk_1E6569AC8;
    var0 = v28.var0;
    PCSharedCount::PCSharedCount(&v35, &v29);
    PCSharedCount::~PCSharedCount(&v29);
    ProShade::operator*(&v43, &v32, v40);
    ProShade::Selector_base::_select((uint64_t)v37, (const PCString *)2, &v25);
    v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v30 = v25.var0;
    PCSharedCount::PCSharedCount(&v31, v26);
    PCSharedCount::~PCSharedCount(v26);
    ProShade::Vec3::Vec3(&v47, &v43, &v28);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v36, &v47);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    v32 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v35);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v36, (uint64_t)&v47);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, &v47);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v6 = v50;
  }
  else
  {
    v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v7 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v7, 0);
    v45 = (PC_Sp_counted_base *)v7;
    PCSharedCount::PCSharedCount(&v46, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
    v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v8 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v8, 0);
    v30 = (PC_Sp_counted_base *)v8;
    PCSharedCount::PCSharedCount(&v31, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v9 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v9, 1);
    v26[1].var0 = (PC_Sp_counted_base *)v9;
    PCSharedCount::PCSharedCount(&v27, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    ProShade::Vec3::Vec3(&v47, &v43, &v28, &v25);
    v32 = &unk_1E6569AC8;
    v33 = v48;
    var0 = v49;
    PCSharedCount::PCSharedCount(&v35, v50);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v27);
    v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    if (v5)
    {
      ProShade::Selector_base::_select((uint64_t)v37, (const PCString *)4, &v43);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v49 = v43.var0;
      PCSharedCount::PCSharedCount(v50, &v44);
      PCSharedCount::~PCSharedCount(&v44);
      ProShade::Selector_base::_select((uint64_t)v37, (const PCString *)2, &v25);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v45 = v25.var0;
      PCSharedCount::PCSharedCount(&v46, v26);
      PCSharedCount::~PCSharedCount(v26);
      ProShade::operator/(&v28, &v47, &v43);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      ProShade::operator*(&v47, &v28, v40);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v28, &v47);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v10 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v10, 1);
      v23 = (PC_Sp_counted_base *)v10;
      PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
      ProShade::Func<ProShade::Func_length>::eval((uint64_t)&v28, v19);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v49 = v23;
      PCSharedCount::PCSharedCount(v50, &v24);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v45 = v20;
      PCSharedCount::PCSharedCount(&v46, &v21);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v47, (uint64_t)&v43, &v25);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v21);
      v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v24);
      ProShade::operator/(&v47, &v28, &v25);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v28, &v47);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v11 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v11, 1);
      v20 = (PC_Sp_counted_base *)v11;
      PCSharedCount::PCSharedCount(&v21, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
      ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v28, (uint64_t)&v28, v16);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v49 = v20;
      PCSharedCount::PCSharedCount(v50, &v21);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v45 = v17;
      PCSharedCount::PCSharedCount(&v46, &v18);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v47, (uint64_t)&v43, v22);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      v16[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v21);
      v14[0] = &unk_1E6569AC8;
      v12 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v12, 1);
      v14[2] = v12;
      PCSharedCount::PCSharedCount(&v15, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
      ProShade::operator-(v16, v14, v22);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v49 = v17;
      PCSharedCount::PCSharedCount(v50, &v18);
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval((uint64_t)&v47, v19);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      ProShade::Vec3::Vec3(&v43, &v28, v19);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, &v43);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v21);
      v16[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      v14[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v15);
      v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v24);
      v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v27);
      v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v13 = &v28;
    }
    else
    {
      ProShade::operator-(&v25, &v36, &v32);
      ProShade::operator*(&v28, &v25, v40);
      ProShade::operator+(&v43, &v32, &v28);
      ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)&v43, (uint64_t)&v47);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, &v47);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v31);
      v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v27);
      ProShade::operator-(v22, &v36, &v32);
      ProShade::operator*(&v25, v22, v40);
      ProShade::operator+(&v28, &v32, &v25);
      ProShade::Func<ProShade::Func_length>::eval((uint64_t)&v28, &v43);
      ProShade::operator/(&v47, v40, &v43);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v40, &v47);
      v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v50);
      v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v31);
      v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v27);
      v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v13 = v22;
    }
    PCSharedCount::~PCSharedCount(v13 + 3);
    v32 = &unk_1E6569AC8;
    v6 = &v35;
  }
  PCSharedCount::~PCSharedCount(v6);
  if (*((_BYTE *)a3 + 96))
  {
    ProShade::operator*(&v47, (char *)a3 + 32, v40);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3 + 32, &v47);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    ProShade::operator*(&v47, (char *)a3 + 64, v40);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3 + 64, &v47);
    v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
  }
  v36 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
}

void sub_1B2D622D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCSharedCount a25,uint64_t a26,uint64_t a27,uint64_t a28,PCSharedCount a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33,uint64_t a34)
{
  PCSharedCount *v34;
  PCSharedCount *v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v37 - 120) = v36 + 16;
  PCSharedCount::~PCSharedCount(v35 + 3);
  *(_QWORD *)(v37 - 152) = v36 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v37 - 128));
  a30 = v36 + 16;
  PCSharedCount::~PCSharedCount(&a33);
  a26 = v36 + 16;
  PCSharedCount::~PCSharedCount(&a29);
  PCSharedCount::~PCSharedCount(&a25);
  a34 = v36 + 16;
  PCSharedCount::~PCSharedCount(a9);
  *(_QWORD *)(v37 - 216) = v36 + 16;
  PCSharedCount::~PCSharedCount(v34);
  *(_QWORD *)(v37 - 184) = v36 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v37 - 160));
  _Unwind_Resume(a1);
}

void sub_1B2D627CC()
{
  JUMPOUT(0x1B2D627A8);
}

void BumpMaterialLayer::adjustBumpMapGain(BumpMaterialLayer *a1@<X0>, const PCSharedCount *a2@<X1>, const PCSharedCount *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  char v9;
  uint64_t v10;
  PCSharedCount v11[4];
  PCSharedCount v12[4];
  PCSharedCount v13;
  char v14;

  BumpMapSample::BumpMapSample((BumpMapSample *)&v8);
  v14 = 0;
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v8, a3);
  BumpMaterialLayer::adjustBumpMapGain(a1, a2, (BumpMapSample *)&v8);
  *(_QWORD *)a4 = &unk_1E6569AC8;
  *(_BYTE *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), v11);
  v12[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v11[1].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v12);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v11);
}

void sub_1B2D62890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BumpMapSample::~BumpMapSample((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void BumpMaterialLayer::Add::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  _QWORD v13[2];
  ProShade::ConstVector *v14;
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[2];
  ProShade::ConstVector *v19;
  PCSharedCount v20;
  _QWORD v21[3];
  PCSharedCount v22;
  _QWORD v23[3];
  PCSharedCount v24;
  PCSharedCount v25[3];
  PCSharedCount v26;
  PCSharedCount v27[3];
  PCSharedCount v28;
  char v29;
  PCSharedCount v30[3];
  PCSharedCount v31;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  BumpMapSample::BumpMapSample((BumpMapSample *)v23);
  if (BumpMaterialLayer::sampleBumpMap(*(BumpMaterialLayer **)(a1 + 8), *(os_unfair_lock_s **)(a2 + 40), v8, (const PCSharedCount *)a3, (uint64_t)v23))
  {
    ProShade::operator-(v21, v23, a3 + 160);
    ProShade::operator+(v30, a3 + 192, v21);
    ProShade::VarT<ProShade::Node>::operator=(a3 + 192, v30);
    v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v21[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v22);
    ProShade::operator+(v21, a3 + 192, a3 + 160);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v21, (uint64_t)v30);
    ProShade::VarT<ProShade::Node>::operator=(a3 + 128, v30);
    v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v21[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v22);
    if (v29)
    {
      if (*(_BYTE *)(a3 + 768))
      {
        v18[0] = &unk_1E6569AC8;
        v9 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v9, 0.5);
        v19 = v9;
        PCSharedCount::PCSharedCount(&v20, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
        ProShade::operator*(v21, a3 + 776, v18);
        v13[0] = &unk_1E6569AC8;
        v10 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v10, 0.5);
        v14 = v10;
        PCSharedCount::PCSharedCount(&v15, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
        ProShade::operator*(v16, v25, v13);
        ProShade::operator+(v30, v21, v16);
        ProShade::VarT<ProShade::Node>::operator=(a3 + 776, v30);
        v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v31);
        v16[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v17);
        v13[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v15);
        v21[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v22);
        v18[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v20);
        v18[0] = &unk_1E6569AC8;
        v11 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v11, 0.5);
        v19 = v11;
        PCSharedCount::PCSharedCount(&v20, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
        ProShade::operator*(v21, a3 + 808, v18);
        v13[0] = &unk_1E6569AC8;
        v12 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v12, 0.5);
        v14 = v12;
        PCSharedCount::PCSharedCount(&v15, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
        ProShade::operator*(v16, v27, v13);
        ProShade::operator+(v30, v21, v16);
        ProShade::VarT<ProShade::Node>::operator=(a3 + 808, v30);
        v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v31);
        v16[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v17);
        v13[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v15);
        v21[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v22);
        v18[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v20);
      }
      else
      {
        ProShade::VarT<ProShade::Node>::operator=(a3 + 776, v25);
        ProShade::VarT<ProShade::Node>::operator=(a3 + 808, v27);
      }
      *(_BYTE *)(a3 + 768) = 1;
    }
  }
  v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v23[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
}

void sub_1B2D62C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCSharedCount a25,PCSharedCount a26)
{
  PCSharedCount *v26;
  PCSharedCount *v27;
  uint64_t v28;
  PCSharedCount *v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 96) = v28 + 16;
  PCSharedCount::~PCSharedCount(v29 + 3);
  PCSharedCount::~PCSharedCount(&a17);
  PCSharedCount::~PCSharedCount(v27);
  a22 = v28 + 16;
  PCSharedCount::~PCSharedCount(&a25);
  a18 = v28 + 16;
  PCSharedCount::~PCSharedCount(v26);
  BumpMapSample::~BumpMapSample(&a26);
  _Unwind_Resume(a1);
}

uint64_t BumpMaterialLayer::computeNormal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2, a3);
}

uint64_t BumpMaterialLayer::writeHash(BumpMaterialLayer *this, int8x8_t *a2)
{
  uint64_t v4;

  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B3559BAELL & 0x7FFFFFFFFFFFFFFFLL));
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v4 + 32))(v4, a2);
  return (*(uint64_t (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)this + 12));
}

void FlatMaterialLayer::Replace::eval(uint64_t a1, uint64_t a2, const PCSharedCount *a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const LiMaterialLayerUniform *v8;
  uint64_t v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  _QWORD v16[2];
  ProShade::ConstVector *v17;
  PCSharedCount v18;
  _QWORD v19[2];
  ProShade::ConstVector *v20;
  PCSharedCount v21;
  _QWORD v22[2];
  ProShade::ConstVector *v23;
  PCSharedCount v24;
  PCSharedCount v25[3];
  PCSharedCount v26;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const LiMaterialLayerUniform *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  v9 = (uint64_t)&a3[88];
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 88, a3 + 88);
  v22[0] = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0);
  v23 = v10;
  PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v19[0] = &unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0);
  v20 = v11;
  PCSharedCount::PCSharedCount(&v21, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v16[0] = &unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0);
  v17 = v12;
  PCSharedCount::PCSharedCount(&v18, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec3::Vec3(v25, v22, v19, v16);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 56, v25);
  v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v19[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  FlatMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), v8, v25);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[64], v25);
  v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v22[0] = &unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 0);
  v23 = v13;
  PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  v19[0] = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 0);
  v20 = v14;
  PCSharedCount::PCSharedCount(&v21, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  v16[0] = &unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0);
  v17 = v15;
  PCSharedCount::PCSharedCount(&v18, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  ProShade::Vec3::Vec3(v25, v22, v19, v16);
  ProShade::VarT<ProShade::Node>::operator=(v9, v25);
  v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v19[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
}

void sub_1B2D631A8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;

  PCSharedCount::~PCSharedCount(v4 + 3);
  PCSharedCount::~PCSharedCount(v3);
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void FlatMaterialLayer::sampleLayerColor(os_unfair_lock_s *a1@<X1>, const LiMaterialLayerUniform *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t SamplerInfo;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  _QWORD *v11;
  PCShared_base *v12;
  PCSharedCount *v13;
  _QWORD *v14;
  PCShared_base *v15;
  ProShade::ConstVector *v16;
  _QWORD v18[3];
  PCSharedCount v19;
  char v20;
  __int16 os_unfair_lock_opaque_high;
  PCSharedCount v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25;
  void *v26;
  _QWORD *v27;
  PCSharedCount v28;
  void *v29;
  _QWORD *v30;
  PCSharedCount v31;
  _QWORD v32[2];
  PCSharedCount v33;
  PCSharedCount v34;
  PCSharedCount v35;
  PCSharedCount v36;
  PCSharedCount v37;
  PCSharedCount v38;
  _QWORD v39[2];
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43[2];
  PCSharedCount v44;
  PCSharedCount v45;
  char v46;
  PCSharedCount v47;
  PCSharedCount v48;
  void *v49;
  char v50;
  PC_Sp_counted_base *var0;
  PCSharedCount v52;
  __int128 v53;
  uint64_t v54;

  SamplerInfo = LiMaterial::getSamplerInfo(a1, *((const ProShade::SamplerNode **)a2 + 46));
  v53 = *(_OWORD *)(SamplerInfo + 316);
  v54 = *(_QWORD *)(SamplerInfo + 332);
  v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0);
  v43[1].var0 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(&v44, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v39[0] = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0);
  v40.var0 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v41, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0);
  v37.var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v38, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v32[0] = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0);
  v33.var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  ProShade::Vec4::Vec4(&v45, &v42, v39, &v35, v32);
  v49 = &unk_1E6569AC8;
  v50 = v46;
  var0 = v47.var0;
  PCSharedCount::PCSharedCount(&v52, &v48);
  v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v41);
  v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  if ((_BYTE)v53)
  {
    v22.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
    v23 = *((_BYTE *)a2 + 360);
    v24 = *((_QWORD *)a2 + 46);
    PCSharedCount::PCSharedCount(&v25, (const PCSharedCount *)a2 + 47);
    v11 = (_QWORD *)*((_QWORD *)a2 + 50);
    v22.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
    v26 = &unk_1E656A080;
    v27 = v11;
    if (v11)
      v12 = (PCShared_base *)((char *)v11 + *(_QWORD *)(*v11 - 24));
    else
      v12 = 0;
    PCSharedCount::PCSharedCount(&v28, v12);
    v14 = (_QWORD *)*((_QWORD *)a2 + 54);
    v26 = &unk_1E656A240;
    v29 = &unk_1E656A080;
    v30 = v14;
    if (v14)
      v15 = (PCShared_base *)((char *)v14 + *(_QWORD *)(*v14 - 24));
    else
      v15 = 0;
    PCSharedCount::PCSharedCount(&v31, v15);
    v29 = &unk_1E656A2C0;
    v20 = BYTE1(a1[174]._os_unfair_lock_opaque);
    os_unfair_lock_opaque_high = HIWORD(a1[174]._os_unfair_lock_opaque);
    v39[0] = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v40, (const PCSharedCount *)a2 + 214);
    LiMaterialLayer::sampleTextureMap(&v22, (uint64_t)v39, (uint64_t)&v53, (uint64_t)&v42);
    ProShade::Selector_base::_select((uint64_t)v43, (const PCString *)0x1F, &v35);
    v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v47.var0 = v35.var0;
    PCSharedCount::PCSharedCount(&v48, &v36);
    PCSharedCount::~PCSharedCount(&v36);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v49, &v45);
    v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v44);
    v39[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
    v22.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
    v29 = &unk_1E656A080;
    PCSharedCount::~PCSharedCount(&v31);
    v26 = &unk_1E656A080;
    PCSharedCount::~PCSharedCount(&v28);
    v22.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
    v13 = &v25;
  }
  else
  {
    ProShade::Selector_base::_select((uint64_t)a2 + 8, (const PCString *)0x1F, &v42);
    v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v47.var0 = v42.var0;
    PCSharedCount::PCSharedCount(&v48, v43);
    PCSharedCount::~PCSharedCount(v43);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v49, &v45);
    v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v13 = &v48;
  }
  PCSharedCount::~PCSharedCount(v13);
  v39[0] = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v40, (const PCSharedCount *)a2 + 18);
  v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v37, (const PCSharedCount *)a2 + 18);
  v32[0] = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v33, (const PCSharedCount *)a2 + 18);
  v18[0] = &unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 1.0);
  v18[2] = v16;
  PCSharedCount::PCSharedCount(&v19, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  ProShade::Vec4::Vec4(&v42, v39, &v35, v32, v18);
  ProShade::operator*(&v45, &v49, &v42);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v49, &v45);
  v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v41);
  v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v47, (const PCSharedCount *)a2 + 22);
  ProShade::operator*(a3, &v49, &v45);
  v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v49 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v52);
}

void sub_1B2D638BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11)
{
  PCSharedCount *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v13 - 176) = v12 + 16;
  PCSharedCount::~PCSharedCount(v11);
  *(_QWORD *)(v13 - 144) = v12 + 16;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B2D63B54()
{
  JUMPOUT(0x1B2D63B3CLL);
}

void FlatMaterialLayer::Over::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const LiMaterialLayerUniform *v8;
  PCSharedCount *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  PCSharedCount *v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  _QWORD v20[3];
  PCSharedCount v21;
  _QWORD v22[3];
  PCSharedCount v23;
  PCSharedCount v24;
  PCSharedCount v25[2];
  PCSharedCount v26;
  _QWORD v27[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v29;
  _QWORD v30[3];
  PCSharedCount v31;
  _QWORD v32[3];
  PCSharedCount v33;
  PCSharedCount v34;
  PCSharedCount v35[2];
  PCSharedCount v36;
  PCSharedCount v37;
  PCSharedCount v38[2];
  PCSharedCount v39;
  _QWORD v40[3];
  PCSharedCount v41;
  void *v42;
  char v43;
  uint64_t v44;
  PCSharedCount v45;
  void *v46;
  _BYTE v47[16];
  PCSharedCount v48;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const LiMaterialLayerUniform *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  FlatMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), v8, &v46);
  v42 = &unk_1E6569AC8;
  v43 = *(_BYTE *)(a3 + 680);
  v44 = *(_QWORD *)(a3 + 688);
  PCSharedCount::PCSharedCount(&v45, (const PCSharedCount *)(a3 + 696));
  v15 = v9;
  ProShade::Selector_base::_select((uint64_t)v47, (const PCString *)0x1F, &v37);
  v40[0] = &unk_1E6569AC8;
  v40[2] = v37.var0;
  PCSharedCount::PCSharedCount(&v41, v38);
  PCSharedCount::~PCSharedCount(v38);
  v30[0] = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 1.0);
  v30[2] = v10;
  PCSharedCount::PCSharedCount(&v31, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  ProShade::Selector_base::_select((uint64_t)v47, (const PCString *)0x19, &v24);
  v27[0] = &unk_1E6569AC8;
  var0 = v24.var0;
  PCSharedCount::PCSharedCount(&v29, v25);
  PCSharedCount::~PCSharedCount(v25);
  ProShade::operator-(v32, v30, v27);
  ProShade::operator*(&v34, v32, &v42);
  ProShade::operator+(&v37, v40, &v34);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v37);
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v34.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v27[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 88, (const PCSharedCount *)(a3 + 704));
  ProShade::Selector_base::_select((uint64_t)v47, (const PCString *)0x19, &v34);
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v38[1] = v34;
  PCSharedCount::PCSharedCount(&v39, v35);
  PCSharedCount::~PCSharedCount(v35);
  v27[0] = &unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0);
  var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0);
  v25[1].var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v26, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  v22[0] = &unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 0);
  v22[2] = v13;
  PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::Vec3::Vec3(v30, v27, &v24, v22);
  ProShade::operator*(v32, v30, &v37);
  v16[0] = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 1.0);
  v16[2] = v14;
  PCSharedCount::PCSharedCount(&v17, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  ProShade::operator-(v18, v16, &v37);
  ProShade::operator*(v20, a3 + 704, v18);
  ProShade::operator+(&v34, v32, v20);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 704, &v34);
  v34.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v30[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v27[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 56, (const PCSharedCount *)(a3 + 704));
  v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v41);
  v42 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v15);
  v46 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
}

void sub_1B2D64010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  PCSharedCount *v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)(v42 - 216) = v41 + 16;
  PCSharedCount::~PCSharedCount(v40);
  *(_QWORD *)(v42 - 184) = v41 + 16;
  PCSharedCount::~PCSharedCount(a10);
  *(_QWORD *)(v42 - 152) = v41 + 16;
  PCSharedCount::~PCSharedCount(a11);
  *(_QWORD *)(v42 - 120) = v41 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v42 - 96));
  _Unwind_Resume(a1);
}

void FlatMaterialLayer::Multiply::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const LiMaterialLayerUniform *v8;
  ProShade::ConstVector *v9;
  const PCSharedCount *v10;
  _QWORD v11[3];
  PCSharedCount v12;
  _QWORD v13[3];
  PCSharedCount v14;
  PCSharedCount v15;
  PCSharedCount v16[2];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  _QWORD v20[3];
  PCSharedCount v21;
  PCSharedCount v22;
  PCSharedCount v23[2];
  PCSharedCount v24;
  PCSharedCount v25;
  PCSharedCount v26[2];
  PCSharedCount v27;
  _QWORD v28[3];
  PCSharedCount v29;
  void *v30;
  char v31;
  uint64_t v32;
  PCSharedCount v33;
  void *v34;
  _BYTE v35[16];
  PCSharedCount v36;

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const LiMaterialLayerUniform *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  FlatMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), v8, &v34);
  v30 = &unk_1E6569AC8;
  v31 = *(_BYTE *)(a3 + 680);
  v32 = *(_QWORD *)(a3 + 688);
  PCSharedCount::PCSharedCount(&v33, (const PCSharedCount *)(a3 + 696));
  ProShade::Selector_base::_select((uint64_t)v35, (const PCString *)0x1F, &v25);
  v28[0] = &unk_1E6569AC8;
  v28[2] = v25.var0;
  PCSharedCount::PCSharedCount(&v29, v26);
  PCSharedCount::~PCSharedCount(v26);
  LiMaterialBlend::composite<LiMaterialBlend::Multiply>((uint64_t)&v30, (uint64_t)v28, (uint64_t)&v25);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, &v25);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  ProShade::Selector_base::_select((uint64_t)v35, (const PCString *)0x19, &v22);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v26[1] = v22;
  PCSharedCount::PCSharedCount(&v27, v23);
  PCSharedCount::~PCSharedCount(v23);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 88, (const PCSharedCount *)(a3 + 704));
  ProShade::Selector_base::_select((uint64_t)v35, (const PCString *)0x1D, &v15);
  v18[0] = &unk_1E6569AC8;
  v18[2] = v15.var0;
  PCSharedCount::PCSharedCount(&v19, v16);
  PCSharedCount::~PCSharedCount(v16);
  ProShade::operator*(v20, v18, &v25);
  v11[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 1.0);
  v11[2] = v9;
  PCSharedCount::PCSharedCount(&v12, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::operator-(v13, v11, &v25);
  ProShade::operator*(&v15, a3 + 704, v13);
  ProShade::operator+(&v22, v20, &v15);
  v10 = (const PCSharedCount *)ProShade::VarT<ProShade::Node>::operator=(a3 + 704, &v22);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 56, v10);
  v22.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v15.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v13[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v11[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v25.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v28[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v34 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
}

void sub_1B2D645A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  PCSharedCount *v33;
  PCSharedCount *v34;
  PCSharedCount *v35;
  PCSharedCount *v36;
  PCSharedCount *v37;
  uint64_t v38;
  uint64_t v39;

  a17 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a20);
  PCSharedCount::~PCSharedCount(&a16);
  PCSharedCount::~PCSharedCount(v37);
  a25 = v38 + 16;
  PCSharedCount::~PCSharedCount(&a28);
  a21 = v38 + 16;
  PCSharedCount::~PCSharedCount(v36);
  a33 = v38 + 16;
  PCSharedCount::~PCSharedCount(v35);
  *(_QWORD *)(v39 - 176) = v38 + 16;
  PCSharedCount::~PCSharedCount(v34);
  *(_QWORD *)(v39 - 144) = v38 + 16;
  PCSharedCount::~PCSharedCount(v33);
  *(_QWORD *)(v39 - 112) = v38 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v39 - 88));
  _Unwind_Resume(a1);
}

void FlatMaterialLayer::Add::eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  const LiMaterialLayerUniform *v8;
  ProShade::ConstVector *v9;
  PC_Sp_counted_base *var0;
  PCSharedCount v11;
  void *v12;
  PC_Sp_counted_base *v13;
  PCSharedCount v14;
  PCSharedCount v15[3];
  PCSharedCount v16;
  _QWORD v17[3];
  PCSharedCount v18;
  PCSharedCount v19[3];
  PCSharedCount v20;
  void *v21;
  _BYTE v22[16];
  PCSharedCount v23;
  _QWORD v24[3];
  PCSharedCount v25;
  void *v26;
  char v27;
  uint64_t v28;
  PCSharedCount v29;
  void *v30;
  uint64_t v31;
  PCSharedCount v32;
  _QWORD v33[3];
  PCSharedCount v34;
  PCSharedCount v35;
  PCSharedCount v36[2];
  PCSharedCount v37[2];

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(*(HGGLBlendingInfo **)(a1 + 8));
  v8 = (const LiMaterialLayerUniform *)LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  FlatMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), v8, &v30);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 56, (const PCSharedCount *)(a3 + 704));
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 8) + 88, (const PCSharedCount *)(a3 + 704));
  v26 = &unk_1E6569AC8;
  v27 = *(_BYTE *)(a3 + 680);
  v28 = *(_QWORD *)(a3 + 688);
  PCSharedCount::PCSharedCount(&v29, (const PCSharedCount *)(a3 + 696));
  ProShade::Selector_base::_select((uint64_t)&v31, (const PCString *)0x1F, &v35);
  v24[0] = &unk_1E6569AC8;
  v24[2] = v35.var0;
  PCSharedCount::PCSharedCount(&v25, v36);
  PCSharedCount::~PCSharedCount(v36);
  LiMaterialBlend::composite<LiMaterialBlend::Add>((uint64_t)&v26, (uint64_t)v24, (uint64_t)&v21);
  ProShade::Selector_base::_select((uint64_t)v22, (const PCString *)0x1D, &v35);
  v17[0] = &unk_1E6569AC8;
  v17[2] = v35.var0;
  PCSharedCount::PCSharedCount(&v18, v36);
  PCSharedCount::~PCSharedCount(v36);
  v12 = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 1.0);
  v13 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(&v14, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::Selector_base::_select((uint64_t)v22, (const PCString *)0x19, &v35);
  var0 = v35.var0;
  PCSharedCount::PCSharedCount(&v11, v36);
  PCSharedCount::~PCSharedCount(v36);
  v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v36[1].var0 = v13;
  PCSharedCount::PCSharedCount(v37, &v14);
  v33[0] = &unk_1E6569AC8;
  v33[2] = var0;
  PCSharedCount::PCSharedCount(&v34, &v11);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v35, (uint64_t)v33, v15);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v37);
  ProShade::Vec4::Vec4(v19, v17, v15);
  ProShade::VarT<ProShade::Node>::operator=(a3 + 512, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  PCSharedCount::~PCSharedCount(&v11);
  v12 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v17[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v21 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v26 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
}

void sub_1B2D64A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33,uint64_t a34)
{
  PCSharedCount *v34;
  PCSharedCount *v35;
  PCSharedCount *v36;
  PCSharedCount *v37;
  PCSharedCount *v38;
  PCSharedCount *v39;
  uint64_t v40;
  uint64_t v41;

  a26 = v40 + 16;
  PCSharedCount::~PCSharedCount(v39 + 3);
  PCSharedCount::~PCSharedCount(&a21);
  PCSharedCount::~PCSharedCount(v38);
  PCSharedCount::~PCSharedCount(v37);
  a22 = v40 + 16;
  PCSharedCount::~PCSharedCount(v36);
  a30 = v40 + 16;
  PCSharedCount::~PCSharedCount(&a33);
  a34 = v40 + 16;
  PCSharedCount::~PCSharedCount(v35);
  *(_QWORD *)(v41 - 216) = v40 + 16;
  PCSharedCount::~PCSharedCount(v34);
  *(_QWORD *)(v41 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v41 - 160));
  _Unwind_Resume(a1);
}

void LiMaterialBlend::composite<LiMaterialBlend::Add>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  _QWORD v8[3];
  PCSharedCount v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  _QWORD v20[3];
  PCSharedCount v21;
  _QWORD v22[3];
  PCSharedCount v23;
  _QWORD v24[3];
  PCSharedCount v25;
  PCSharedCount v26;
  PCSharedCount v27[2];
  PCSharedCount v28;
  _QWORD v29[3];
  PCSharedCount v30;
  void *v31;
  char v32;
  uint64_t v33;
  PCSharedCount v34;
  void *v35;
  uint64_t v36;
  PCSharedCount v37;
  PCSharedCount v38;
  PCSharedCount v39[2];
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42[2];
  PCSharedCount v43;
  PCSharedCount v44;
  PCSharedCount v45[2];
  PCSharedCount v46;
  PCSharedCount v47;
  PCSharedCount v48[2];
  PCSharedCount v49;
  _QWORD v50[3];
  PCSharedCount v51[2];

  v5 = a1 + 8;
  ProShade::Selector_base::_select(a1 + 8, (const PCString *)0x1D, &v47);
  v50[0] = &unk_1E6569AC8;
  v50[2] = v47.var0;
  PCSharedCount::PCSharedCount(v51, v48);
  PCSharedCount::~PCSharedCount(v48);
  ProShade::Selector_base::_select(v5, (const PCString *)0x19, &v44);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v48[1] = v44;
  PCSharedCount::PCSharedCount(&v49, v45);
  PCSharedCount::~PCSharedCount(v45);
  ProShade::Selector_base::_select(a2 + 8, (const PCString *)0x1D, &v41);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v45[1] = v41;
  PCSharedCount::PCSharedCount(&v46, v42);
  PCSharedCount::~PCSharedCount(v42);
  ProShade::Selector_base::_select(a2 + 8, (const PCString *)0x19, &v38);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v42[1] = v38;
  PCSharedCount::PCSharedCount(&v43, v39);
  PCSharedCount::~PCSharedCount(v39);
  ProShade::operator+(&v35, &v47, &v41);
  ProShade::operator*(&v31, &v47, &v41);
  ProShade::operator-(&v38, &v35, &v31);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v26.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 1.0);
  v27[1].var0 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(&v28, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  ProShade::operator/(v24, &v41, &v38);
  ProShade::operator-(v29, &v26, v24);
  ProShade::operator*(&v31, v29, v50);
  ProShade::operator/(v20, &v41, &v38);
  v12[0] = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 1.0);
  v12[2] = v7;
  PCSharedCount::PCSharedCount(&v13, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  ProShade::operator-(v14, v12, &v47);
  ProShade::operator*(v16, v14, &v44);
  ProShade::operator+(v8, v50, &v44);
  ProShade::operator*(v10, &v47, v8);
  ProShade::operator+(v18, v16, v10);
  ProShade::operator*(v22, v20, v18);
  ProShade::operator+(&v35, &v31, v22);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v8[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v29[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v26.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
  ProShade::Selector_base::_select((uint64_t)&v36, (const PCString *)0x1D, &v26);
  v29[0] = &unk_1E6569AC8;
  v29[2] = v26.var0;
  PCSharedCount::PCSharedCount(&v30, v27);
  PCSharedCount::~PCSharedCount(v27);
  ProShade::Vec4::Vec4(&v31, v29, &v38);
  *(_QWORD *)a3 = &unk_1E6569AC8;
  *(_BYTE *)(a3 + 8) = v32;
  *(_QWORD *)(a3 + 16) = v33;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), &v34);
  v31 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v29[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v35 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v46);
  v47.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v49);
  v50[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v51);
}

void sub_1B2D65024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  PCSharedCount *v63;
  PCSharedCount *v64;
  PCSharedCount *v65;
  PCSharedCount *v66;
  uint64_t v67;
  uint64_t v68;

  PCSharedCount::~PCSharedCount(v65);
  PCSharedCount::~PCSharedCount(v66);
  PCSharedCount::~PCSharedCount(&a63);
  *(_QWORD *)(v68 - 248) = v67 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v68 - 224));
  *(_QWORD *)(v68 - 216) = v67 + 16;
  PCSharedCount::~PCSharedCount(v64);
  *(_QWORD *)(v68 - 184) = v67 + 16;
  PCSharedCount::~PCSharedCount(v63);
  *(_QWORD *)(v68 - 152) = v67 + 16;
  PCSharedCount::~PCSharedCount(a10);
  *(_QWORD *)(v68 - 120) = v67 + 16;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B2D652CC()
{
  JUMPOUT(0x1B2D65270);
}

uint64_t FlatMaterialLayer::isOpaque(HGGLBlendingInfo *a1, _BYTE *a2, os_unfair_lock_s *a3, uint64_t (***a4)(_QWORD, _QWORD))
{
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t result;
  uint64_t v10;
  double v11;

  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(a1);
  result = LiMaterialLayerUniform::get(a3, DstAlphaFactor);
  if (!*((_BYTE *)a1 + 48) && !*((_BYTE *)a1 + 9))
  {
    v10 = result;
    v11 = 0.0;
    result = (uint64_t)LiMaterial::get<double>((PCArray_base *)a3, result + 160, (BOOL *)&v11);
    if (fabs(v11 + -1.0) < 0.0000001)
    {
      result = LiMaterial::getSamplerInfo(a3, *(const ProShade::SamplerNode **)(v10 + 368));
      if (!*(_BYTE *)(result + 316) || (result = (**a4)(a4, *(_QWORD *)(v10 + 368)), (_DWORD)result))
        *a2 = 1;
    }
  }
  return result;
}

uint64_t FlatMaterialLayer::computeColor(uint64_t a1, uint64_t a2, const PCSharedCount *a3)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t v9;
  const PCSharedCount *v10;
  const PCSharedCount *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  PCSharedCount v17[3];
  PCSharedCount v18;
  PCSharedCount v19[3];
  PCSharedCount v20;
  PCSharedCount v21[2];
  PC_Sp_counted_base *v22;
  PCSharedCount v23;
  PCSharedCount v24[2];
  PCSharedCount v25;
  PCSharedCount v26;
  PCSharedCount v27[3];
  PCSharedCount v28;
  PCSharedCount v29[2];
  PCSharedCount v30;
  PCSharedCount v31;
  _QWORD v32[2];
  PC_Sp_counted_base *v33;
  PCSharedCount v34;
  PCSharedCount v35[3];
  PCSharedCount v36;
  _QWORD v37[3];
  PCSharedCount v38;
  _QWORD v39[3];
  PCSharedCount v40;
  _QWORD v41[3];
  PCSharedCount v42;
  _QWORD v43[3];
  PCSharedCount v44;
  PCSharedCount v45[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v47;
  PCSharedCount v48[2];
  PC_Sp_counted_base *v49;
  PCSharedCount v50[2];

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, uint64_t, const PCSharedCount *))(*(_QWORD *)v6 + 16))(v6, a2, a3);
  v7 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  v9 = LiMaterialLayerUniform::get(v7, DstAlphaFactor);
  if (*(_BYTE *)(a1 + 48))
  {
    v10 = (const PCSharedCount *)v9;
    v43[0] = &unk_1E6569AC8;
    v43[2] = 0;
    PCSharedCount::PCSharedCount(&v44);
    v41[0] = &unk_1E6569AC8;
    v41[2] = 0;
    PCSharedCount::PCSharedCount(&v42);
    v39[0] = &unk_1E6569AC8;
    v39[2] = 0;
    PCSharedCount::PCSharedCount(&v40);
    v37[0] = &unk_1E6569AC8;
    v37[2] = 0;
    PCSharedCount::PCSharedCount(&v38);
    if (*(_BYTE *)(a1 + 49))
    {
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v43, a3 + 64);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v41, a3 + 84);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v39, (const PCSharedCount *)(a1 + 56));
      v11 = (const PCSharedCount *)(a1 + 88);
    }
    else
    {
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v43, a3 + 84);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v41, a3 + 64);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v39, (const PCSharedCount *)(a1 + 88));
      v11 = (const PCSharedCount *)(a1 + 56);
    }
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v37, v11);
    v32[0] = &unk_1E6569AC8;
    v12 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v12, 0.0);
    v33 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&a3[12], (uint64_t)&a3[16], v29);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v49 = v33;
    PCSharedCount::PCSharedCount(v50, &v34);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v30.var0;
    PCSharedCount::PCSharedCount(&v47, &v31);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)v48, (uint64_t)v45, v35);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v32[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v13 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v13, 1.0);
    v30.var0 = (PC_Sp_counted_base *)v13;
    PCSharedCount::PCSharedCount(&v31, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
    ProShade::Func<ProShade::Func_dFdx>::eval((uint64_t)v35, v21);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v49 = v22;
    PCSharedCount::PCSharedCount(v50, &v23);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval((uint64_t)v48, v24);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    ProShade::Func<ProShade::Func_dFdy>::eval((uint64_t)v35, v17);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v49 = v17[2].var0;
    PCSharedCount::PCSharedCount(v50, &v18);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval((uint64_t)v48, v19);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v49 = v25.var0;
    PCSharedCount::PCSharedCount(v50, &v26);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v19[2].var0;
    PCSharedCount::PCSharedCount(&v47, &v20);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)v48, (uint64_t)v45, v27);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    ProShade::operator*(v32, v29, v27);
    v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v28);
    v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v20);
    v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v18);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v26);
    v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v30, v10 + 30);
    ProShade::operator-(v45, v29, v32);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v25, v10 + 30);
    ProShade::operator+(v27, v24, v32);
    ProShade::smoothstep(v45, v27, v35, v48);
    v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v28);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v26);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    ProShade::operator*(v29, v43, v48);
    v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v14 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v14, 1.0);
    v22 = (PC_Sp_counted_base *)v14;
    PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
    ProShade::operator-(v24, v21, v48);
    ProShade::operator*(v27, v41, v24);
    ProShade::operator+(v45, v29, v27);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[64], v45);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v28);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v26);
    v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    ProShade::operator*(v29, v39, v48);
    v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v15 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v15, 1.0);
    v22 = (PC_Sp_counted_base *)v15;
    PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
    ProShade::operator-(v24, v21, v48);
    ProShade::operator*(v27, v37, v24);
    ProShade::operator+(v45, v29, v27);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[88], v45);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v47);
    v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v28);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v26);
    v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v31);
    v48[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v50);
    v32[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v38);
    v39[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v40);
    v41[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v42);
    v43[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v44);
  }
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[68], a3 + 64);
  return ProShade::VarT<ProShade::Node>::operator=((uint64_t)&a3[84], a3 + 64);
}

void sub_1B2D65AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  PCSharedCount *v46;
  uint64_t v47;
  PCSharedCount *v48;
  uint64_t v49;

  *(_QWORD *)(v49 - 152) = v47 + 16;
  PCSharedCount::~PCSharedCount(v46 + 3);
  a30 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a33);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a29);
  PCSharedCount::~PCSharedCount(v48);
  a34 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a37);
  *(_QWORD *)(v49 - 120) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v49 - 96));
  a38 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a41);
  a42 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a45);
  a46 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a10);
  *(_QWORD *)(v49 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a11);
  *(_QWORD *)(v49 - 216) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a12);
  *(_QWORD *)(v49 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a13);
  _Unwind_Resume(a1);
}

void sub_1B2D65EB8()
{
  JUMPOUT(0x1B2D65E34);
}

void sub_1B2D65EC0()
{
  JUMPOUT(0x1B2D65E50);
}

int8x8_t *FlatMaterialLayer::writeHash(FlatMaterialLayer *this, int8x8_t *a2)
{
  uint64_t v4;

  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B3559BD7 & 0x7FFFFFFFFFFFFFFFLL));
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v4 + 32))(v4, a2);
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 48));
  return PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 49));
}

void FlatMaterialLayer::FlatMaterialLayer(FlatMaterialLayer *this, uint64_t a2)
{
  uint64_t v3;

  *((_QWORD *)this + 15) = &off_1E65EB048;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 1;
  LiMaterialLayer::LiMaterialLayer(this, (uint64_t *)&off_1E6572F00, a2);
  *(_QWORD *)this = &off_1E6572E78;
  *((_QWORD *)this + 15) = &unk_1E6572EE0;
  v3 = operator new();
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 1;
  *(_QWORD *)(v3 + 16) = &unk_1E6573710;
  *(_QWORD *)v3 = &off_1E65736C8;
  *(_QWORD *)(v3 + 8) = this;
  *((_QWORD *)this + 4) = v3;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 5, (PCShared_base *)(v3 + 16));
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 7) = &unk_1E6569AC8;
  *((_QWORD *)this + 9) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 10);
  *((_QWORD *)this + 11) = &unk_1E6569AC8;
  *((_QWORD *)this + 13) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 14);
}

void sub_1B2D66034(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v4;
  *(_QWORD *)(v1 + 56) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  PCSharedCount::~PCSharedCount(v3);
  *(_QWORD *)(v1 + 120) = v5 + 16;
  *(_BYTE *)(v1 + 136) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t *ProShade::Vec3::operator=(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  PCSharedCount v5;

  a1[2] = (uint64_t)a2[2].var0;
  v3 = a1 + 3;
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
  return a1;
}

void sub_1B2D660E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void ProShade::clamp(const PCSharedCount *a1@<X0>, const PCSharedCount *a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v8;
  PC_Sp_counted_base *v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;

  var0 = a1[2].var0;
  v14[0] = &unk_1E6569AC8;
  v14[2] = var0;
  PCSharedCount::PCSharedCount(&v15, a1 + 3);
  v8 = a2[2].var0;
  v12[0] = &unk_1E6569AC8;
  v12[2] = v8;
  PCSharedCount::PCSharedCount(&v13, a2 + 3);
  v9 = a3[2].var0;
  v10[0] = &unk_1E6569AC8;
  v10[2] = v9;
  PCSharedCount::PCSharedCount(&v11, a3 + 3);
  ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::eval((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, a4);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
}

void sub_1B2D661E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PCSharedCount *v17;
  PCSharedCount *v18;
  PCSharedCount *v19;

  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void AbsorbLayer::AbsorbLayer(AbsorbLayer *this, uint64_t a2)
{
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
  LiMaterialLayer::LiMaterialLayer(this, (uint64_t *)&off_1E6572FC8, a2);
  *(_QWORD *)this = &off_1E6572F40;
  *((_QWORD *)this + 4) = &unk_1E6572FA8;
  *((_BYTE *)this + 27) = 0;
  *(_WORD *)((char *)this + 25) = 0;
}

void sub_1B2D662A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

PCArray_base *AbsorbLayer::isOpaque(HGGLBlendingInfo *a1, _BYTE *a2, os_unfair_lock_s *a3)
{
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t v6;
  PCArray_base *result;
  double v8;

  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor(a1);
  v6 = LiMaterialLayerUniform::get(a3, DstAlphaFactor);
  v8 = 0.0;
  result = LiMaterial::get<double>((PCArray_base *)a3, v6 + 160, (BOOL *)&v8);
  if (fabs(v8 + -1.0) < 0.0000001)
    *a2 = 1;
  return result;
}

void AbsorbLayer::computeColor(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  LiLayeredMaterial *DstAlphaFactor;
  uint64_t v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  ProShade::ConstVector *v35;
  ProShade::ConstVector *v36;
  uint64_t v37;
  PCSharedCount v38[2];
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42;
  ProShade::ConstVector *v43;
  PCSharedCount v44;
  PCSharedCount v45[2];
  PC_Sp_counted_base *v46;
  PCSharedCount v47;
  PCSharedCount v48;
  PCSharedCount v49;
  PCSharedCount v50;
  PCSharedCount v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54;
  PCSharedCount v55;
  PCSharedCount v56;
  PCSharedCount v57;
  PC_Sp_counted_base *v58;
  PCSharedCount v59;
  PCSharedCount v60[2];
  PC_Sp_counted_base *v61;
  PCSharedCount v62;
  PCSharedCount v63[3];
  PCSharedCount v64;
  PCSharedCount v65;
  PCSharedCount v66;
  PCSharedCount v67;
  PCSharedCount v68[2];
  PC_Sp_counted_base *v69;
  PCSharedCount v70;
  PCSharedCount v71;
  PCSharedCount v72;
  PCSharedCount v73;
  PCSharedCount v74;
  PCSharedCount v75[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v77;
  PCSharedCount v78[2];
  PCSharedCount v79;
  PCSharedCount v80;
  PCSharedCount v81[2];
  PCSharedCount v82;
  PCSharedCount v83;
  PCSharedCount v84;
  _BYTE v85[16];
  PCSharedCount v86;
  PCSharedCount v87[2];
  PCSharedCount v88;
  PCSharedCount v89;
  PCSharedCount v90;
  PCSharedCount v91;
  PC_Sp_counted_base *v92;
  PCSharedCount v93[2];

  v6 = *(os_unfair_lock_s **)(a2 + 40);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  v8 = LiMaterialLayerUniform::get(v6, DstAlphaFactor);
  LiMaterialLayer::sampleLayerColor(*(os_unfair_lock_s **)(a2 + 40), (const LiLayeredMaterial *)v8, (const LiMaterialLayerUniform *)a1[26], 0, (uint64_t)&v90);
  ProShade::Vec4::Vec4(&v84, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  if ((*(_BYTE *)(LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)(a2 + 40), *(const ProShade::SamplerNode **)(v8 + 368))+ 316) & 1) != 0)
  {
    v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v9 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v9, 1);
    v79.var0 = (PC_Sp_counted_base *)v9;
    PCSharedCount::PCSharedCount(&v80, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    ProShade::Selector_base::_select((uint64_t)v85, (const PCString *)0x19, &v71);
    v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v71.var0;
    PCSharedCount::PCSharedCount(&v77, &v72);
    PCSharedCount::~PCSharedCount(&v72);
    ProShade::operator-(v81, v78, v75);
    v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v73, (const PCSharedCount *)(v8 + 16));
    ProShade::operator*(v87, v81, &v71);
    ProShade::operator+(&v90, &v84, v87);
    ProShade::Vec4::operator=((uint64_t *)&v84, &v90);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v93);
    v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v74);
    v81[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v83);
    v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v80);
  }
  if (a1[27])
  {
    v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v88, (const PCSharedCount *)(v8 + 1104));
    v81[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v82, (const PCSharedCount *)(v8 + 1136));
    ProShade::mix(v87, v81, &v84, &v90);
    ProShade::Vec4::operator=((uint64_t *)&v84, &v90);
    v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v93);
    v81[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v83);
    v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
  }
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v79, (const PCSharedCount *)(v8 + 144));
  v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.999);
  var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v37 = a3;
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v92 = v79.var0;
  PCSharedCount::PCSharedCount(v93, &v80);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v88.var0 = var0;
  PCSharedCount::PCSharedCount(&v89, &v77);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v90, (uint64_t)v87, v81);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v77);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v88, (const PCSharedCount *)(v8 + 144));
  v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 1.0);
  v73.var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v74, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  ProShade::operator-(v75, &v71, v81);
  ProShade::operator/(&v90, v87, v75);
  ProShade::Float::Float(v78, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v77);
  v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v74);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0.0);
  v88.var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v89, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 1.0);
  var0 = (PC_Sp_counted_base *)v13;
  PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::clamp(&v84, v87, v75, &v90);
  ProShade::Vec4::operator=((uint64_t *)&v84, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v77);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  ProShade::Selector_base::_select((uint64_t)v85, (const PCString *)0x1D, &v90);
  v69 = v90.var0;
  PCSharedCount::PCSharedCount(&v70, &v91);
  PCSharedCount::~PCSharedCount(&v91);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v92 = v69;
  PCSharedCount::PCSharedCount(v93, &v70);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v88.var0 = v79.var0;
  PCSharedCount::PCSharedCount(&v89, &v80);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v90, (uint64_t)v87, (uint64_t)&v71);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  ProShade::Vec3::Vec3(v75, &v71);
  v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v74);
  v68[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v70);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 1.0);
  v92 = (PC_Sp_counted_base *)v14;
  PCSharedCount::PCSharedCount(v93, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  ProShade::Vec4::Vec4(&v71, v75, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v65.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v66, (const PCSharedCount *)(v8 + 208));
  v63[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0.999);
  v63[2].var0 = (PC_Sp_counted_base *)v15;
  PCSharedCount::PCSharedCount(&v64, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v92 = v66.var0;
  PCSharedCount::PCSharedCount(v93, &v67);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v88.var0 = (PC_Sp_counted_base *)v15;
  PCSharedCount::PCSharedCount(&v89, &v64);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v90, (uint64_t)v87, v68);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v63[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v64);
  v65.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v67);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v88, (const PCSharedCount *)(v8 + 208));
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 1.0);
  v61 = (PC_Sp_counted_base *)v16;
  PCSharedCount::PCSharedCount(&v62, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  ProShade::operator-(v63, v60, v68);
  ProShade::operator/(&v90, v87, v63);
  ProShade::Float::Float(&v65, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v63[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v64);
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v62);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  ProShade::Selector_base::_select((uint64_t)v85, (const PCString *)0x1D, &v90);
  v58 = v90.var0;
  PCSharedCount::PCSharedCount(&v59, &v91);
  PCSharedCount::~PCSharedCount(&v91);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v92 = v58;
  PCSharedCount::PCSharedCount(v93, &v59);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v88.var0 = v66.var0;
  PCSharedCount::PCSharedCount(&v89, &v67);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v90, (uint64_t)v87, (uint64_t)v60);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  ProShade::Vec3::Vec3(v63, v60);
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v62);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v17 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v17, 1.0);
  v92 = (PC_Sp_counted_base *)v17;
  PCSharedCount::PCSharedCount(v93, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  ProShade::Vec4::Vec4(v87, v63, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v18 = HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)a1);
  LiString::format((LiString *)"absorption3d_%d", (LiString *)&v90, v18);
  ProShade::VarT<ProShade::Node>::setName(v75, (uint64_t *)&v90, &v54);
  v54.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v55);
  if (v90.var0)
  {
    v19 = (unsigned int *)((char *)v90.var0 - 12);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      *(_BYTE *)v90.var0 = 0;
      if (v90.var0)
        v22 = (char *)v90.var0 - 12;
      else
        v22 = 0;
      free(v22);
    }
  }
  LiString::format((LiString *)"absorption4d_%d", (LiString *)&v90, v18);
  ProShade::VarT<ProShade::Node>::setName(&v71, (uint64_t *)&v90, &v52);
  v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v53);
  if (v90.var0)
  {
    v23 = (unsigned int *)((char *)v90.var0 - 12);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      *(_BYTE *)v90.var0 = 0;
      if (v90.var0)
        v26 = (char *)v90.var0 - 12;
      else
        v26 = 0;
      free(v26);
    }
  }
  LiString::format((LiString *)"absorption3s_%d", (LiString *)&v90, v18);
  ProShade::VarT<ProShade::Node>::setName(v63, (uint64_t *)&v90, &v50);
  v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v51);
  if (v90.var0)
  {
    v27 = (unsigned int *)((char *)v90.var0 - 12);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      *(_BYTE *)v90.var0 = 0;
      if (v90.var0)
        v30 = (char *)v90.var0 - 12;
      else
        v30 = 0;
      free(v30);
    }
  }
  LiString::format((LiString *)"absorption4s_%d", (LiString *)&v90, v18);
  ProShade::VarT<ProShade::Node>::setName(v87, (uint64_t *)&v90, &v48);
  v48.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v49);
  if (v90.var0)
  {
    v31 = (unsigned int *)((char *)v90.var0 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *(_BYTE *)v90.var0 = 0;
      if (v90.var0)
        v34 = (char *)v90.var0 - 12;
      else
        v34 = 0;
      free(v34);
    }
  }
  ProShade::operator*(&v90, v37 + 640, v75);
  ProShade::VarT<ProShade::Node>::operator=(v37 + 640, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  ProShade::operator*(&v90, v37 + 512, &v71);
  ProShade::VarT<ProShade::Node>::operator=(v37 + 512, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  ProShade::operator*(&v90, v37 + 672, &v71);
  ProShade::VarT<ProShade::Node>::operator=(v37 + 672, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  ProShade::operator*(&v90, v37 + 704, v63);
  ProShade::VarT<ProShade::Node>::operator=(v37 + 704, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  ProShade::Selector_base::_select(v37 + 680, (const PCString *)0x1D, &v56);
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v61 = v56.var0;
  PCSharedCount::PCSharedCount(&v62, &v57);
  PCSharedCount::~PCSharedCount(&v57);
  ProShade::Selector_base::_select(v37 + 680, (const PCString *)0x19, &v41);
  v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v46 = v41.var0;
  PCSharedCount::PCSharedCount(&v47, &v42);
  PCSharedCount::~PCSharedCount(&v42);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v35 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v35, 1.0);
  v43 = v35;
  PCSharedCount::PCSharedCount(&v44, (ProShade::ConstVector *)((char *)v35 + *(_QWORD *)(*(_QWORD *)v35 - 24)));
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v39, (const PCSharedCount *)(v8 + 176));
  ProShade::mix(v45, &v41, v38, &v56);
  ProShade::Vec4::Vec4(&v90, v60, &v56);
  ProShade::VarT<ProShade::Node>::operator=(v37 + 672, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v62);
  ProShade::Selector_base::_select(v37 + 520, (const PCString *)0x1D, &v56);
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v61 = v56.var0;
  PCSharedCount::PCSharedCount(&v62, &v57);
  PCSharedCount::~PCSharedCount(&v57);
  ProShade::Selector_base::_select(v37 + 520, (const PCString *)0x19, &v41);
  v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v46 = v41.var0;
  PCSharedCount::PCSharedCount(&v47, &v42);
  PCSharedCount::~PCSharedCount(&v42);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v36 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v36, 1.0);
  v43 = v36;
  PCSharedCount::PCSharedCount(&v44, (ProShade::ConstVector *)((char *)v36 + *(_QWORD *)(*(_QWORD *)v36 - 24)));
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v39, (const PCSharedCount *)(v8 + 176));
  ProShade::mix(v45, &v41, v38, &v56);
  ProShade::Vec4::Vec4(&v90, v60, &v56);
  ProShade::VarT<ProShade::Node>::operator=(v37 + 512, &v90);
  v90.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v93);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v60[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v62);
  v87[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v63[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v64);
  v65.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v67);
  v68[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v70);
  v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v74);
  v75[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v77);
  v78[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v81[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v83);
  v84.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v86);
}

void sub_1B2D67308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  void *a64;
  void *a68;
  PCSharedCount *v68;
  PCSharedCount *v69;
  PCSharedCount *v70;
  uint64_t v71;
  uint64_t v72;

  *(_QWORD *)(v72 - 136) = v71 + 16;
  PCSharedCount::~PCSharedCount(v70 + 3);
  *(_QWORD *)(v72 - 168) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v72 - 144));
  PCSharedCount::~PCSharedCount(&a63);
  *(_QWORD *)(v72 - 232) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v72 - 208));
  a64 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v69);
  a68 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v68);
  *(_QWORD *)(v72 - 200) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v72 - 176));
  _Unwind_Resume(a1);
}

uint64_t *ProShade::Vec4::operator=(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  PCSharedCount v5;

  a1[2] = (uint64_t)a2[2].var0;
  v3 = a1 + 3;
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
  return a1;
}

void sub_1B2D67D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void ProShade::VarT<ProShade::Node>::setName(const PCSharedCount *a1@<X0>, uint64_t *a2@<X1>, PCSharedCount *a3@<X8>)
{
  PC_Sp_counted_base *var0;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  var0 = a1[2].var0;
  if (!var0)
    throw_PCNullPointerException(1);
  v7 = (uint64_t *)((char *)var0 + 32);
  if ((uint64_t *)((char *)var0 + 32) != a2)
  {
    LiString::dec((LiString *)((char *)var0 + 32));
    v8 = *a2;
    *v7 = *a2;
    if (v8)
    {
      v9 = (unsigned int *)(v8 - 12);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = a1[2].var0;
  PCSharedCount::PCSharedCount(a3 + 3, a1 + 3);
}

int8x8_t *AbsorbLayer::writeHash(AbsorbLayer *this, int8x8_t *a2)
{
  LiMaterialLayer::writeHash(this, a2);
  PCHashWriteStream::writeValue(a2, (const char *)(0x80000001B3559C00 & 0x7FFFFFFFFFFFFFFFLL));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 26));
  return PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 27));
}

void LiMaterialLayerOperator::~LiMaterialLayerOperator(LiMaterialLayerOperator *this)
{
  *((_QWORD *)this + 1) = &off_1E65EB048;
  *((_BYTE *)this + 24) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 2);
}

{
  *((_QWORD *)this + 1) = &off_1E65EB048;
  *((_BYTE *)this + 24) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 2);
  JUMPOUT(0x1B5E29170);
}

_QWORD *LiMaterialLayerOperator::eval()
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"no op\n", 6);
}

void `virtual thunk to'LiMaterialLayerOperator::~LiMaterialLayerOperator(LiMaterialLayerOperator *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 1) = &off_1E65EB048;
  v1[24] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 2);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 1) = &off_1E65EB048;
  v1[24] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 2);
  JUMPOUT(0x1B5E29170);
}

void DiffuseMaterialLayer::ReplaceDiffuseColor::~ReplaceDiffuseColor(DiffuseMaterialLayer::ReplaceDiffuseColor *this)
{
  *((_QWORD *)this + 2) = &off_1E65EB048;
  *((_BYTE *)this + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 3);
}

{
  *((_QWORD *)this + 2) = &off_1E65EB048;
  *((_BYTE *)this + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 3);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'DiffuseMaterialLayer::ReplaceDiffuseColor::~ReplaceDiffuseColor(DiffuseMaterialLayer::ReplaceDiffuseColor *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 2) = &off_1E65EB048;
  v1[32] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 3);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 2) = &off_1E65EB048;
  v1[32] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 3);
  JUMPOUT(0x1B5E29170);
}

void DiffuseMaterialLayer::~DiffuseMaterialLayer(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572BB0;
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E6572C18;
  PCSharedCount::~PCSharedCount(this + 6);
  this[8].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[10].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[9].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572BB0;
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E6572C18;
  PCSharedCount::~PCSharedCount(this + 6);
  this[8].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[10].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[9].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'DiffuseMaterialLayer::~DiffuseMaterialLayer(DiffuseMaterialLayer *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572BB0;
  v1[8].var0 = (PC_Sp_counted_base *)&unk_1E6572C18;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1[8].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[10].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[9].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572BB0;
  v1[8].var0 = (PC_Sp_counted_base *)&unk_1E6572C18;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1[8].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[10].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[9].var0);
  JUMPOUT(0x1B5E29170);
}

void SpecularMaterialLayer::~SpecularMaterialLayer(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572CA8;
  this[19].var0 = (PC_Sp_counted_base *)&unk_1E6572D10;
  PCSharedCount::~PCSharedCount(this + 16);
  PCSharedCount::~PCSharedCount(this + 14);
  PCSharedCount::~PCSharedCount(this + 12);
  PCSharedCount::~PCSharedCount(this + 10);
  this->var0 = (PC_Sp_counted_base *)off_1E6573D18;
  this[19].var0 = (PC_Sp_counted_base *)off_1E6573D80;
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
  this[19].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[21].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[20].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572CA8;
  this[19].var0 = (PC_Sp_counted_base *)&unk_1E6572D10;
  PCSharedCount::~PCSharedCount(this + 16);
  PCSharedCount::~PCSharedCount(this + 14);
  PCSharedCount::~PCSharedCount(this + 12);
  PCSharedCount::~PCSharedCount(this + 10);
  this->var0 = (PC_Sp_counted_base *)off_1E6573D18;
  this[19].var0 = (PC_Sp_counted_base *)off_1E6573D80;
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
  this[19].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[21].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[20].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'SpecularMaterialLayer::~SpecularMaterialLayer(SpecularMaterialLayer *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572CA8;
  v1[19].var0 = (PC_Sp_counted_base *)&unk_1E6572D10;
  PCSharedCount::~PCSharedCount(v1 + 16);
  PCSharedCount::~PCSharedCount(v1 + 14);
  PCSharedCount::~PCSharedCount(v1 + 12);
  PCSharedCount::~PCSharedCount(v1 + 10);
  v1->var0 = (PC_Sp_counted_base *)off_1E6573D18;
  v1[19].var0 = (PC_Sp_counted_base *)off_1E6573D80;
  PCSharedCount::~PCSharedCount(v1 + 7);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[19].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[21].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[20].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572CA8;
  v1[19].var0 = (PC_Sp_counted_base *)&unk_1E6572D10;
  PCSharedCount::~PCSharedCount(v1 + 16);
  PCSharedCount::~PCSharedCount(v1 + 14);
  PCSharedCount::~PCSharedCount(v1 + 12);
  PCSharedCount::~PCSharedCount(v1 + 10);
  v1->var0 = (PC_Sp_counted_base *)off_1E6573D18;
  v1[19].var0 = (PC_Sp_counted_base *)off_1E6573D80;
  PCSharedCount::~PCSharedCount(v1 + 7);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[19].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[21].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[20].var0);
  JUMPOUT(0x1B5E29170);
}

void BumpMaterialLayer::~BumpMaterialLayer(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572D80;
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6572DE8;
  PCSharedCount::~PCSharedCount(this + 5);
  this[7].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[9].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[8].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572D80;
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6572DE8;
  PCSharedCount::~PCSharedCount(this + 5);
  this[7].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[9].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[8].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'BumpMaterialLayer::~BumpMaterialLayer(BumpMaterialLayer *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572D80;
  v1[7].var0 = (PC_Sp_counted_base *)&unk_1E6572DE8;
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[7].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[9].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[8].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572D80;
  v1[7].var0 = (PC_Sp_counted_base *)&unk_1E6572DE8;
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[7].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[9].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[8].var0);
  JUMPOUT(0x1B5E29170);
}

void FlatMaterialLayer::~FlatMaterialLayer(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572E78;
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E6572EE0;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 14);
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 10);
  PCSharedCount::~PCSharedCount(this + 5);
  this[15].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[17].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[16].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E6572E78;
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E6572EE0;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 14);
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 10);
  PCSharedCount::~PCSharedCount(this + 5);
  this[15].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[17].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[16].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'FlatMaterialLayer::~FlatMaterialLayer(FlatMaterialLayer *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572E78;
  v1[15].var0 = (PC_Sp_counted_base *)&unk_1E6572EE0;
  v1[11].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 14);
  v1[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 10);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[15].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[17].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[16].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6572E78;
  v1[15].var0 = (PC_Sp_counted_base *)&unk_1E6572EE0;
  v1[11].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 14);
  v1[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 10);
  PCSharedCount::~PCSharedCount(v1 + 5);
  v1[15].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[17].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[16].var0);
  JUMPOUT(0x1B5E29170);
}

void AbsorbLayer::~AbsorbLayer(AbsorbLayer *this)
{
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_BYTE *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);
}

{
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_BYTE *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'AbsorbLayer::~AbsorbLayer(AbsorbLayer *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 4) = &off_1E65EB048;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 4) = &off_1E65EB048;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *ProShade::Vec4::Vec4(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6574188;
  ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
  return a1;
}

void sub_1B2D6894C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::max_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D68AB8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::max_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::max_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::max_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::max_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65742A8);
  *(_QWORD *)a1 = &unk_1E65741D0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574288;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D68E5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::max_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  const PCString *v6;
  uint64_t result;
  const PCString *v8;
  PCException *exception;
  PCString v10;
  PCString v11;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"max doesn't apply to BOOL", v8);
  return result;
}

void sub_1B2D68FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::max_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)2, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (int *)(a2 + 16);
    v10 = (int *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v14 = *v9++;
      v13 = v14;
      if (v11 <= v14)
        v11 = v13;
      *(_DWORD *)Serializer = v11;
      Serializer = (void ***)((char *)Serializer + 4);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D690F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::max_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (double *)(a2 + 16);
    v10 = (double *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v9++;
      v14 = v13;
      if (v12 < v13)
        v12 = v14;
      *(double *)Serializer++ = v12;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D69238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E65741D0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574288;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65742E8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65743A0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E65741D0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574288;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65742E8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65743A0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "max");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D6948C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 24941;
  v6[2] = 120;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D695AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "max");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "max");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D69848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E65742A8);
  *(_QWORD *)v2 = &unk_1E65741D0;
  *(_QWORD *)(v2 + 72) = &unk_1E6574288;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D699B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      return ProShade::eval_type<ProShade::max_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
      return ProShade::eval_type<ProShade::max_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  }
  if (v7 <= 2)
    return ProShade::eval_type<ProShade::max_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  return ProShade::eval_type<ProShade::max_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E65741D0;
  *((_QWORD *)v1 + 9) = &unk_1E6574288;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65742E8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65743A0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E65741D0;
  *((_QWORD *)v1 + 9) = &unk_1E6574288;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65742E8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65743A0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65742A8);
  *(_QWORD *)a1 = &unk_1E65741D0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574288;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D69D4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  PC_Sp_counted_base *v14;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17;

  v8 = *(const void **)(a1 + 16);
  if (v8)
  else
    v9 = 0;
  v10 = *(const void **)(a2 + 16);
  if (v10)
  else
    v11 = 0;
  v12 = *(const void **)(a3 + 16);
  if (v12
  {
    ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::compute((uint64_t)v9, (uint64_t)v11, (uint64_t)v13, &v15);
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4 + 2, &v16);
    v15.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
    PCSharedCount::~PCSharedCount(&v17);
  }
  else
  {
    v14 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::Func((uint64_t)v14, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16), *(_QWORD **)(a3 + 16));
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a4[2].var0 = v14;
    PCSharedCount::PCSharedCount(a4 + 3, (PCShared_base *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  }
}

void sub_1B2D69F04(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  int v8;
  int v9;
  const ProShade::Value *v10;
  ProShade::ConstVector *v11;
  PCShared_base *v12;
  OZChannelBase v14;
  _QWORD v15[18];
  _QWORD v16[18];
  _QWORD v17[19];

  v17[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v17);
  ProShade::Value::Value(v16);
  ProShade::Value::Value(v15);
  ProShade::Value::Value(&v14);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v17);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 224))(a3, v15);
  if (SLODWORD(v17[0]) > 1)
  {
    if (LODWORD(v17[0]) != 2)
      goto LABEL_11;
    v8 = v16[0];
    goto LABEL_7;
  }
  v8 = v16[0];
  if (SLODWORD(v16[0]) >= 2)
  {
LABEL_7:
    if (v8 > 2)
      goto LABEL_11;
    v9 = v15[0];
    goto LABEL_9;
  }
  v9 = v15[0];
  if (SLODWORD(v15[0]) < 2)
  {
    ProShade::eval_type<ProShade::mix_traits,BOOL>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
    goto LABEL_12;
  }
LABEL_9:
  if (v9 <= 2)
  {
    ProShade::eval_type<ProShade::mix_traits,int>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
    goto LABEL_12;
  }
LABEL_11:
  ProShade::eval_type<ProShade::mix_traits,double>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
LABEL_12:
  v11 = ProShade::Const::create((ProShade::Const *)&v14, v10);
  a4->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a4[2].var0 = (PC_Sp_counted_base *)v11;
  if (v11)
    v12 = (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24));
  else
    v12 = 0;
  return PCSharedCount::PCSharedCount(a4 + 3, v12);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  PCShared_base *v10;
  int v11;
  int v12;
  PCShared_base *v13;
  int v14;
  int v15;
  PCArray_base *v16;
  int v17;
  PCSharedCount v19[2];
  _QWORD *v20;
  PCSharedCount v21;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574520);
  *(_QWORD *)a1 = &unk_1E6574448;
  *(_QWORD *)(a1 + 72) = &unk_1E6574500;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a2;
  PCSharedCount::PCSharedCount(&v21, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8)
    v9 = (2 * (v8 + 1)) | 1;
  else
    v9 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a3;
  if (a3)
    v10 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v10 = 0;
  PCSharedCount::PCSharedCount(&v21, v10);
  v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v11)
    v12 = (2 * (v11 + 1)) | 1;
  else
    v12 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v11 + 1, v12);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a4;
  if (a4)
    v13 = (PCShared_base *)((char *)a4 + *(_QWORD *)(*a4 - 24));
  else
    v13 = 0;
  PCSharedCount::PCSharedCount(&v21, v13);
  v14 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v14)
    v15 = (2 * (v14 + 1)) | 1;
  else
    v15 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v14 + 1, v15);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v17 = *(_DWORD *)(a1 + 60);
  if (v17 < 1)
    PCArray_base::badIndex(v16);
  if (v17 < 2)
    PCArray_base::badIndex(v16);
  if (v17 <= 2)
    PCArray_base::badIndex(v16);
  ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 64));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D6A378(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::mix_traits,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  const PCString *v7;
  uint64_t result;
  const PCString *v9;
  PCException *exception;
  PCString v11;
  PCString v12;

  ProShade::Value::set((uint64_t)a4, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v12, "not implemented yet");
    PCString::PCString(&v11, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v12, &v11, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"mix doesn't apply to BOOL", v9);
  return result;
}

void sub_1B2D6A4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::mix_traits,int>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  void ***Serializer;
  const PCString *v9;
  uint64_t result;
  int *v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  PCException *exception;
  PCString v20;
  PCString v21;

  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v21, "not implemented yet");
    PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v21, &v20, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    v11 = (int *)(a3 + 16);
    v12 = (int *)(a2 + 16);
    v13 = (int *)(a1 + 16);
    do
    {
      v15 = *v13++;
      v14 = v15;
      v17 = *v12++;
      v16 = v17;
      v18 = *v11++;
      *(double *)Serializer++ = (double)v16 * (double)v18 + (1.0 - (double)v18) * (double)v14;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D6A648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::mix_traits,double>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  void ***Serializer;
  const PCString *v9;
  uint64_t result;
  double *v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  PCException *exception;
  PCString v20;
  PCString v21;

  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v21, "not implemented yet");
    PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v21, &v20, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    v11 = (double *)(a3 + 16);
    v12 = (double *)(a2 + 16);
    v13 = (double *)(a1 + 16);
    do
    {
      v14 = *v13++;
      v15 = v14;
      v16 = *v12++;
      v17 = v16;
      v18 = *v11++;
      *(double *)Serializer++ = v17 * v18 + v15 * (1.0 - v18);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D6A7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(uint64_t a1, const PCString *a2, const PCSharedCount *a3, const PCSharedCount *a4)
{
  __CFString *var0;
  int length_high;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  __CFString *v13;
  int v14;
  unsigned int v15;
  const PCString *Width;
  const PCString *v17;
  int v18;
  const PCString *v19;
  __CFString *v20;
  int v21;
  PC_Sp_counted_base *v22;
  int v23;
  PC_Sp_counted_base *v24;
  int v25;
  __CFString *v26;
  int length;
  PC_Sp_counted_base *v28;
  int v29;
  PC_Sp_counted_base *v30;
  int v31;
  PCSharedCount v32[3];
  PCSharedCount v33;

  var0 = a2[2].var0;
  if (!var0)
    throw_PCNullPointerException(1);
  length_high = HIDWORD(var0->length);
  v10 = a3[2].var0;
  if (!v10)
    throw_PCNullPointerException(1);
  if (length_high > v10[7])
  {
    v10 = a2[2].var0;
    if (!v10)
      throw_PCNullPointerException(1);
  }
  v11 = v10[7];
  v12 = a4[2].var0;
  if (!v12)
    throw_PCNullPointerException(1);
  if (v11 > v12[7])
  {
    v13 = a2[2].var0;
    if (!v13)
      throw_PCNullPointerException(1);
    v14 = HIDWORD(v13->length);
    v12 = a3[2].var0;
    if (!v12)
      throw_PCNullPointerException(1);
    if (v14 > v12[7])
    {
      v12 = a2[2].var0;
      if (!v12)
        throw_PCNullPointerException(1);
    }
  }
  v15 = v12[7];
  *(_DWORD *)(a1 + 28) = v15;
  Width = (const PCString *)ProShade::shapeGetWidth(v15, a2);
  v18 = *(_DWORD *)(a1 + 28);
  if (v18 >= 2)
  {
    v19 = Width;
    v20 = a2[2].var0;
    if (!v20)
      throw_PCNullPointerException(1);
    v21 = HIDWORD(v20->length);
    if (v21 < v18)
    {
      if (v21 != 1)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (first argument)", v17);
      ProShade::Ctor::makeWidth(v20->length, Width, (const PCSharedCount *)a2, v32);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2, v32);
      v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
    }
    v22 = a3[2].var0;
    if (!v22)
      throw_PCNullPointerException(1);
    v23 = *((_DWORD *)v22 + 7);
    if (v23 < *(_DWORD *)(a1 + 28))
    {
      if (v23 != 1)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (second argument)", v17);
      ProShade::Ctor::makeWidth(*((_DWORD *)v22 + 6), v19, a3, v32);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, v32);
      v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
    }
    v24 = a4[2].var0;
    if (!v24)
      throw_PCNullPointerException(1);
    v25 = *((_DWORD *)v24 + 7);
    if (v25 < *(_DWORD *)(a1 + 28))
    {
      if (v25 != 1)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (third argument)", v17);
      ProShade::Ctor::makeWidth(*((_DWORD *)v24 + 6), v19, a4, v32);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a4, v32);
      v32[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
    }
  }
  v26 = a2[2].var0;
  if (!v26)
    throw_PCNullPointerException(1);
  length = v26->length;
  v28 = a3[2].var0;
  if (!v28)
    throw_PCNullPointerException(1);
  v29 = *((_DWORD *)v28 + 6);
  v30 = a4[2].var0;
  if (!v30)
    throw_PCNullPointerException(1);
  v31 = *((_DWORD *)v30 + 6);
  if (v29 > v31)
    v31 = v29;
  if (length > v31)
    v31 = length;
  *(_DWORD *)(a1 + 24) = v31;
}

void sub_1B2D6AAB8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574448;
  *(_QWORD *)(a1 + 72) = &unk_1E6574500;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574560;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6574618;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574448;
  *(_QWORD *)(a1 + 72) = &unk_1E6574500;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574560;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6574618;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "mix");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D6ACF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 26989;
  v6[2] = 120;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D6AE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "mix");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "mix");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D6B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6574520);
  *(_QWORD *)v2 = &unk_1E6574448;
  *(_QWORD *)(v2 + 72) = &unk_1E6574500;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D6B21C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::computeValue(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  return ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::computeValue(a2, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574448;
  *((_QWORD *)v1 + 9) = &unk_1E6574500;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574560;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6574618;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574448;
  *((_QWORD *)v1 + 9) = &unk_1E6574500;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574560;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6574618;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574520);
  *(_QWORD *)a1 = &unk_1E6574448;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574500;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D6B508(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::computeValue(uint64_t a1, OZChannelBase *a2)
{
  int v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1)
    PCArray_base::badIndex((PCArray_base *)a1);
  v4 = *(int **)(a1 + 16);
  if (v3 < 2)
    PCArray_base::badIndex((PCArray_base *)a1);
  if (v3 <= 2)
    PCArray_base::badIndex((PCArray_base *)a1);
  v5 = v4 + 36;
  v6 = v4 + 72;
  if (*v4 >= 2)
  {
    if (*v4 != 2)
      return ProShade::eval_type<ProShade::mix_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
    v7 = *v5;
    goto LABEL_13;
  }
  v7 = *v5;
  if (*v5 >= 2)
  {
LABEL_13:
    if (v7 > 2)
      return ProShade::eval_type<ProShade::mix_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
    v8 = *v6;
    goto LABEL_15;
  }
  v8 = *v6;
  if (*v6 < 2)
    return ProShade::eval_type<ProShade::mix_traits,BOOL>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
LABEL_15:
  if (v8 <= 2)
    return ProShade::eval_type<ProShade::mix_traits,int>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
  return ProShade::eval_type<ProShade::mix_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
}

PCSharedCount *ProShade::Vec3::Vec3(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
  return a1;
}

void sub_1B2D6B69C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dot>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  ProShade::Func_dot *v7;
  const void *v8;
  ProShade::Const *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Func_dot::compute(v7, v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_dot>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D6B808(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_dot::compute(ProShade::Func_dot *this@<X0>, ProShade::Const *a2@<X1>, PCSharedCount *a3@<X8>)
{
  const PCString *v7;
  PCArray_base *v8;
  const PCString *v9;
  uint64_t v10;
  double v11;
  ProShade::ConstVector *v12;
  PCShared_base *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  double *v20;
  void *v21;
  uint64_t v22;
  double *v23;

  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 7)) || ProShade::shapeIsMatrix(*((_DWORD *)a2 + 7)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot doesn't apply to matrices", v7);
  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = &unk_1E656FB28;
  v18 = &unk_1E656FB28;
  v19 = 0;
  (*(void (**)(ProShade::Func_dot *, void **))(*(_QWORD *)this + 216))(this, &v21);
  v8 = (PCArray_base *)(*(uint64_t (**)(ProShade::Const *, void **))(*(_QWORD *)a2 + 216))(a2, &v18);
  if (HIDWORD(v22) != HIDWORD(v19))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot arguments must be the same length", v9);
  if (SHIDWORD(v22) < 1)
  {
    v11 = 0.0;
  }
  else
  {
    v10 = 0;
    v11 = 0.0;
    do
    {
      if (v10 >= SHIDWORD(v19))
        PCArray_base::badIndex(v8);
      if (v10 >= SHIDWORD(v22))
        PCArray_base::badIndex(v8);
      v11 = v11 + v20[v10] * v23[v10];
      ++v10;
    }
    while (HIDWORD(v22) != v10);
  }
  v12 = ProShade::Const::create(v8, v11);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v12;
  if (v12)
    v13 = (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
  else
    v13 = 0;
  PCSharedCount::PCSharedCount(a3 + 3, v13);
  v18 = &unk_1E656FB28;
  if ((int)v19 < 0)
    v14 = 1;
  else
    v14 = v19 & ~((int)v19 >> 31);
  if (v14 == (_DWORD)v19)
  {
    v15 = v20;
    if (v19 < 0)
      bzero(&v20[SHIDWORD(v19)], 8 * ~HIDWORD(v19) + 8);
  }
  else
  {
    if (v14)
    {
      v15 = (void *)operator new[]();
      bzero(v15, 8 * v14);
    }
    else
    {
      v15 = 0;
    }
    if (v20)
      MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
    v20 = (double *)v15;
  }
  v19 = v14;
  if (v15)
    MEMORY[0x1B5E2914C](v15, 0x1000C8077774924);
  v21 = &unk_1E656FB28;
  if ((int)v22 < 0)
    v16 = 1;
  else
    v16 = v22 & ~((int)v22 >> 31);
  if (v16 == (_DWORD)v22)
  {
    v17 = v23;
    if (v22 < 0)
      bzero(&v23[SHIDWORD(v22)], 8 * ~HIDWORD(v22) + 8);
  }
  else
  {
    if (v16)
    {
      v17 = (void *)operator new[]();
      bzero(v17, 8 * v16);
    }
    else
    {
      v17 = 0;
    }
    if (v23)
      MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
    v23 = (double *)v17;
  }
  v22 = v16;
  if (v17)
    MEMORY[0x1B5E2914C](v17, 0x1000C8077774924);
}

void sub_1B2D6BB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)&a9);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dot>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  PCSharedCount v20[2];
  _QWORD *v21;
  PCSharedCount v22;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65747D8);
  *(_QWORD *)a1 = &unk_1E6574700;
  *(_QWORD *)(a1 + 72) = &unk_1E65747B8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v21 = a2;
  PCSharedCount::PCSharedCount(&v22, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v20);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v21 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v22, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v20);
  v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = v13;
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  *(_DWORD *)(a1 + 28) = 1;
  v15 = *(_QWORD *)(v13 + 16);
  if (!v15)
    throw_PCNullPointerException(1);
  v16 = *(_DWORD *)(v15 + 24);
  v17 = *(_QWORD *)(v14 + 48);
  if (!v17)
    throw_PCNullPointerException(1);
  v18 = *(_DWORD *)(v17 + 24);
  if (v16 > v18)
    v18 = v16;
  *(_DWORD *)(a1 + 24) = v18;
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D6BD98(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dot>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574700;
  *(_QWORD *)(a1 + 72) = &unk_1E65747B8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574818;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65748D0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_dot>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574700;
  *(_QWORD *)(a1 + 72) = &unk_1E65747B8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574818;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65748D0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_dot>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "dot");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D6C00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dot>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 28516;
  v6[2] = 116;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D6C12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dot>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "dot");
}

int8x8_t *ProShade::Func<ProShade::Func_dot>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "dot");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_dot>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_dot>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D6C3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dot>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E65747D8);
  *(_QWORD *)v2 = &unk_1E6574700;
  *(_QWORD *)(v2 + 72) = &unk_1E65747B8;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D6C530(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void *ProShade::Func<ProShade::Func_dot>::computeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ProShade::Func_dot::computeValue(a2, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::Func_dot>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574700;
  *((_QWORD *)v1 + 9) = &unk_1E65747B8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574818;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65748D0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574700;
  *((_QWORD *)v1 + 9) = &unk_1E65747B8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574818;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65748D0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_dot>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65747D8);
  *(_QWORD *)a1 = &unk_1E6574700;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E65747B8;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D6C81C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void *ProShade::Func_dot::computeValue(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const PCString *v5;
  int v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  PCException *exception;
  PCException *v13;
  PCString v14;
  PCString v15;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1)
    PCArray_base::badIndex((PCArray_base *)a1);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3 <= 1)
    PCArray_base::badIndex((PCArray_base *)a1);
  if (*(_DWORD *)v4 != 3)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v15, "not implemented yet");
    PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v15, &v14, 1087);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (*(_DWORD *)(v4 + 144) != 3)
  {
    v13 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v15, "not implemented yet");
    PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(v13, &v15, &v14, 1090);
    *(_QWORD *)v13 = &unk_1E64FFFA0;
  }
  if (!ProShade::shapeIsVector(*(_DWORD *)(v4 + 4)))
    goto LABEL_17;
  v6 = *(_DWORD *)(v4 + 4);
  if (v6 != *(_DWORD *)(v4 + 148))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot vectors are not the same shape", v5);
  if (v6 == 4)
  {
    v9 = vmulq_f64(*(float64x2_t *)(v4 + 16), *(float64x2_t *)(v4 + 160));
    v10 = vmulq_f64(*(float64x2_t *)(v4 + 32), *(float64x2_t *)(v4 + 176));
    v15.var0 = (__CFString *)*(_OWORD *)&vaddq_f64(vaddq_f64(vaddq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)), v10), (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1));
    return ProShade::Value::set(a2, (const PCString *)3, 1, &v15);
  }
  if (v6 == 3)
  {
    v8 = vmulq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)(v4 + 168));
    v7 = *(double *)(v4 + 16) * *(double *)(v4 + 160) + v8.f64[0] + v8.f64[1];
    goto LABEL_14;
  }
  if (v6 != 2)
LABEL_17:
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"dot applies only to vectors", v5);
  v7 = vaddvq_f64(vmulq_f64(*(float64x2_t *)(v4 + 16), *(float64x2_t *)(v4 + 160)));
LABEL_14:
  v15.var0 = *(__CFString **)&v7;
  return ProShade::Value::set(a2, (const PCString *)3, 1, &v15);
}

void sub_1B2D6CA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  char v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if ((v11 & 1) != 0)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_normalize>::eval(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  ProShade::Value *v7;
  const ProShade::Value *v8;
  PC_Sp_counted_base *v9;
  PCShared_base *v10;
  PCSharedCount *v11;
  const void *v12;
  _QWORD *v13;
  PCSharedCount v14;
  PCSharedCount v15;
  OZChannelBase v16;
  void *v17;
  char v18;
  uint64_t v19;
  PCSharedCount v20[16];

  v20[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(&v17);
    ProShade::Value::Value(&v16);
    (*(void (**)(void *, void **))(*(_QWORD *)v6 + 224))(v6, &v17);
    ProShade::Func_normalize::eval((ProShade::Func_normalize *)&v17, &v16, v7);
    v9 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v16, v8);
    v14.var0 = v9;
    if (v9)
      v10 = (PCShared_base *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24));
    else
      v10 = 0;
    v11 = &v15;
    PCSharedCount::PCSharedCount(&v15, v10);
    *(_QWORD *)a2 = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)(a2 + 16), &v14);
  }
  else
  {
    v17 = &unk_1E6569AC8;
    v19 = 0;
    v11 = v20;
    PCSharedCount::PCSharedCount(v20);
    v12 = *(const void **)(a1 + 16);
    if (v12
    {
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v17, (const PCSharedCount *)a1);
      *(_QWORD *)a2 = &unk_1E6569AC8;
      *(_BYTE *)(a2 + 8) = v18;
      *(_QWORD *)(a2 + 16) = v19;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), v20);
    }
    else
    {
      v13 = (_QWORD *)operator new();
      ProShade::Func<ProShade::Func_normalize>::Func((uint64_t)v13, *(PCShared_base **)(a1 + 16));
      *(_QWORD *)a2 = &unk_1E6569AC8;
      *(_QWORD *)(a2 + 16) = v13;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), (PCShared_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    }
    v17 = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v11);
}

void sub_1B2D6CCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574A68);
  *(_QWORD *)a1 = &unk_1E6574990;
  *(_QWORD *)(a1 + 72) = &unk_1E6574A48;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D6CE0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

OZChannelBase *ProShade::Func_normalize::eval(ProShade::Func_normalize *this, OZChannelBase *a2, ProShade::Value *a3)
{
  const PCString *v5;
  const PCString *v6;
  OZChannelBase *result;
  const PCString *v8;
  double *v9;
  double *p_var2;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  PCException *v18;
  PCException *exception;
  PCString v20;
  PCString v21;

  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 1)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"normalize doesn't apply to matrices", v5);
  ProShade::Value::set((uint64_t)a2, (const PCString *)*(unsigned int *)this, *((_DWORD *)this + 1));
  OZChannelBase::getSerializer(a2);
  result = (OZChannelBase *)ProShade::shapeGetSize(*((_DWORD *)this + 1), v6);
  switch(*(_DWORD *)this)
  {
    case 0:
      ProShade::Error<PCIllegalArgumentException>::raise(result, v8);
    case 1:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v21, "not implemented yet");
      PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(exception, &v21, &v20, 1352);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    case 2:
      v18 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v21, "not implemented yet");
      PCString::PCString(&v20, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(v18, &v21, &v20, 1353);
      *(_QWORD *)v18 = &unk_1E64FFFA0;
    case 3:
      if ((int)result >= 1)
      {
        v9 = (double *)((char *)this + 16);
        p_var2 = (double *)&a2->var2;
        v11 = result;
        v12 = 0.0;
        v13 = result;
        v14 = (double *)((char *)this + 16);
        do
        {
          v15 = *v14++;
          v12 = v12 + v15 * v15;
          --v13;
        }
        while (v13);
        v16 = sqrt(v12);
        do
        {
          v17 = *v9++;
          *p_var2++ = v17 / v16;
          --v11;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B2D6D008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  char v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if ((v11 & 1) != 0)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574990;
  *(_QWORD *)(a1 + 72) = &unk_1E6574A48;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574AA8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6574B60;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_normalize>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574990;
  *(_QWORD *)(a1 + 72) = &unk_1E6574A48;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574AA8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6574B60;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_normalize>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "normalize");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D6D268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_normalize>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 22, 0x8903763CuLL);
  v5[1] = v4 + 9;
  v5[2] = v4 + 10;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  v6[8] = 101;
  *(_QWORD *)v6 = *(_QWORD *)"normalize";
  *((_BYTE *)v5 + v4 + 21) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D6D390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_normalize>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "normalize");
}

int8x8_t *ProShade::Func<ProShade::Func_normalize>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "normalize");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_normalize>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_normalize>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D6D62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6574A68);
  *(_QWORD *)v2 = &unk_1E6574990;
  *(_QWORD *)(v2 + 72) = &unk_1E6574A48;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D6D794(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

OZChannelBase *ProShade::Func<ProShade::Func_normalize>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  return ProShade::Func_normalize::eval(*(ProShade::Func_normalize **)(a2 + 16), a3, (ProShade::Value *)a3);
}

void `virtual thunk to'ProShade::Func<ProShade::Func_normalize>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574990;
  *((_QWORD *)v1 + 9) = &unk_1E6574A48;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574AA8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6574B60;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574990;
  *((_QWORD *)v1 + 9) = &unk_1E6574A48;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574AA8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6574B60;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_normalize>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574A68);
  *(_QWORD *)a1 = &unk_1E6574990;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574A48;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D6DAAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::min_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D6DC3C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::min_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::min_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::min_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::min_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574CC8);
  *(_QWORD *)a1 = &unk_1E6574BF0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574CA8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D6DFE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::min_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  const PCString *v6;
  uint64_t result;
  const PCString *v8;
  PCException *exception;
  PCString v10;
  PCString v11;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"min doesn't apply to BOOL", v8);
  return result;
}

void sub_1B2D6E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::min_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)2, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (int *)(a2 + 16);
    v10 = (int *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v14 = *v9++;
      v13 = v14;
      if (v11 >= v14)
        v11 = v13;
      *(_DWORD *)Serializer = v11;
      Serializer = (void ***)((char *)Serializer + 4);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D6E274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::min_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (double *)(a2 + 16);
    v10 = (double *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v9++;
      v14 = v13;
      if (v12 > v13)
        v12 = v14;
      *(double *)Serializer++ = v12;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D6E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574BF0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574CA8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574D08;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6574DC0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574BF0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574CA8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574D08;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6574DC0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "min");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D6E610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 26989;
  v6[2] = 110;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D6E730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "min");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "min");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D6E9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6574CC8);
  *(_QWORD *)v2 = &unk_1E6574BF0;
  *(_QWORD *)(v2 + 72) = &unk_1E6574CA8;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D6EB34(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      return ProShade::eval_type<ProShade::min_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
      return ProShade::eval_type<ProShade::min_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  }
  if (v7 <= 2)
    return ProShade::eval_type<ProShade::min_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  return ProShade::eval_type<ProShade::min_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574BF0;
  *((_QWORD *)v1 + 9) = &unk_1E6574CA8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574D08;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6574DC0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574BF0;
  *((_QWORD *)v1 + 9) = &unk_1E6574CA8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574D08;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6574DC0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574CC8);
  *(_QWORD *)a1 = &unk_1E6574BF0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574CA8;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D6EED0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D6F0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574F40);
  *(_QWORD *)a1 = &unk_1E6574E68;
  *(_QWORD *)(a1 + 72) = &unk_1E6574F20;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D6F1F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4;
  const PCString *v5;
  uint64_t result;
  const PCString *v7;
  void ***Serializer;
  const PCString *v9;
  int *v10;
  int v11;
  double *v12;
  double v13;

  v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    result = ProShade::shapeGetSize(a1[1], v9);
    if (v4 == 2)
    {
      if ((int)result >= 1)
      {
        v10 = a1 + 4;
        do
        {
          v11 = *v10++;
          *(double *)Serializer++ = sqrt((double)v11);
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
    }
    else if ((int)result >= 1)
    {
      v12 = (double *)(a1 + 4);
      do
      {
        v13 = *v12++;
        *(double *)Serializer++ = sqrt(v13);
        result = (result - 1);
      }
      while ((_DWORD)result);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    result = ProShade::shapeGetSize(a1[1], v5);
    if ((int)result >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"sqrt doesn't apply to BOOL", v7);
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574E68;
  *(_QWORD *)(a1 + 72) = &unk_1E6574F20;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574F80;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575038;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6574E68;
  *(_QWORD *)(a1 + 72) = &unk_1E6574F20;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6574F80;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575038;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "sqrt");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D6F520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1953657203;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D6F638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "sqrt");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "sqrt");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D6F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6574F40);
  *(_QWORD *)v2 = &unk_1E6574E68;
  *(_QWORD *)(v2 + 72) = &unk_1E6574F20;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D6FA3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  return ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574E68;
  *((_QWORD *)v1 + 9) = &unk_1E6574F20;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574F80;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575038;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6574E68;
  *((_QWORD *)v1 + 9) = &unk_1E6574F20;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6574F80;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575038;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6574F40);
  *(_QWORD *)a1 = &unk_1E6574E68;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6574F20;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D6FD54(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_reflect>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  ProShade::Func_reflect *v7;
  const void *v8;
  ProShade::Const *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Func_reflect::compute(v7, v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_reflect>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D6FEE4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Func_reflect::compute@<X0>(ProShade::Func_reflect *this@<X0>, ProShade::Const *a2@<X1>, PCSharedCount *a3@<X8>)
{
  const PCString *v7;
  int v8;
  double v9;
  PC_Sp_counted_base *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  PCShared_base *v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  double v26;
  double v27;

  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 7)) || ProShade::shapeIsMatrix(*((_DWORD *)a2 + 7)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"reflect doesn't apply to matrices", v7);
  v8 = *((_DWORD *)this + 7);
  if (v8 != *((_DWORD *)a2 + 7))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"reflect arguments must be the same length", v7);
  switch(v8)
  {
    case 4:
      (*(void (**)(double *__return_ptr, ProShade::Func_reflect *))(*(_QWORD *)this + 176))(&v21, this);
      (*(void (**)(double *__return_ptr, ProShade::Const *))(*(_QWORD *)a2 + 176))(&v17, a2);
      v11 = v17 * v21 + v18 * v22 + v19 * v23 + v20 * v24;
      v12 = v11 + v11;
      *(double *)&v25 = v21 - v17 * v12;
      *((double *)&v25 + 1) = v22 - v18 * v12;
      v26 = v23 - v19 * v12;
      v27 = v24 - v20 * v12;
      v10 = (PC_Sp_counted_base *)ProShade::Const::create(&v25);
      break;
    case 3:
      (*(void (**)(double *__return_ptr, ProShade::Func_reflect *))(*(_QWORD *)this + 168))(&v21, this);
      (*(void (**)(double *__return_ptr, ProShade::Const *))(*(_QWORD *)a2 + 168))(&v17, a2);
      v13 = v17 * v21 + v18 * v22 + v19 * v23;
      v14 = v13 + v13;
      *(double *)&v25 = v21 - v17 * v14;
      *((double *)&v25 + 1) = v22 - v18 * v14;
      v26 = v23 - v19 * v14;
      v10 = (PC_Sp_counted_base *)ProShade::Const::create((uint64_t)&v25);
      break;
    case 2:
      (*(void (**)(double *__return_ptr, ProShade::Func_reflect *))(*(_QWORD *)this + 160))(&v21, this);
      (*(void (**)(double *__return_ptr, ProShade::Const *))(*(_QWORD *)a2 + 160))(&v17, a2);
      v9 = v17 * v21 + v18 * v22 + v17 * v21 + v18 * v22;
      *(double *)&v25 = v21 - v17 * v9;
      *((double *)&v25 + 1) = v22 - v18 * v9;
      v10 = (PC_Sp_counted_base *)ProShade::Const::create(&v25);
      break;
    default:
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"reflect arguments must be vectors", v7);
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = v10;
  if (v10)
    v15 = (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24));
  else
    v15 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v15);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  uint64_t v13;
  PCSharedCount v15[2];
  _QWORD *v16;
  PCSharedCount v17;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65751B8);
  *(_QWORD *)a1 = &unk_1E65750E0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575198;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = a2;
  PCSharedCount::PCSharedCount(&v17, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v15);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v17, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v15);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  if (!v13)
    throw_PCNullPointerException(1);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(v13 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v13 + 24);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D70384(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E65750E0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575198;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65751F8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65752B0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_reflect>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E65750E0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575198;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65751F8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65752B0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_reflect>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "reflect");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D705F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_reflect>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 20, 0x8903763CuLL);
  v5[1] = v4 + 7;
  v5[2] = v4 + 8;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (unsigned int *)((char *)v5 + v4 + 12);
  *v6 = 1818649970;
  *(_DWORD *)((char *)v6 + 3) = 1952671084;
  *((_BYTE *)v5 + v4 + 19) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D70720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_reflect>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "reflect");
}

int8x8_t *ProShade::Func<ProShade::Func_reflect>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "reflect");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_reflect>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_reflect>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D709BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E65751B8);
  *(_QWORD *)v2 = &unk_1E65750E0;
  *(_QWORD *)(v2 + 72) = &unk_1E6575198;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D70B24(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_reflect>::computeValue()
{
  ProShade::Func_reflect::computeValue();
}

void `virtual thunk to'ProShade::Func<ProShade::Func_reflect>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E65750E0;
  *((_QWORD *)v1 + 9) = &unk_1E6575198;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65751F8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65752B0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E65750E0;
  *((_QWORD *)v1 + 9) = &unk_1E6575198;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65751F8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65752B0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_reflect>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65751B8);
  *(_QWORD *)a1 = &unk_1E65750E0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575198;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D70E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_reflect::computeValue()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 1470);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D70ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(const PCSharedCount *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  PC_Sp_counted_base *var0;
  void *v7;
  const void *v8;
  void *v9;
  _QWORD *v10;
  PCSharedCount v11;
  char v12;
  PCSharedCount v13;
  PCSharedCount v14;

  var0 = a1[2].var0;
  if (var0)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    *(_QWORD *)a3 = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)(a3 + 16), &v13);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v13.var0 = 0;
    PCSharedCount::PCSharedCount(&v14);
    if (ProShade::pow_traits::simplify(a1, a2, (uint64_t)&v11))
    {
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_BYTE *)(a3 + 8) = v12;
      *(PCSharedCount *)(a3 + 16) = v13;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), &v14);
    }
    else
    {
      v10 = (_QWORD *)operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::Func((uint64_t)v10, a1[2].var0, *(_QWORD **)(a2 + 16));
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_QWORD *)(a3 + 16) = v10;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (PCShared_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    }
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v14);
}

void sub_1B2D710A8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::pow_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::pow_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::pow_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575430);
  *(_QWORD *)a1 = &unk_1E6575358;
  *(_QWORD *)(a1 + 72) = &unk_1E6575410;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D7144C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::pow_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  const PCString *v6;
  uint64_t result;
  const PCString *v8;
  PCException *exception;
  PCString v10;
  PCString v11;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"pow doesn't apply to BOOL", v8);
  return result;
}

void sub_1B2D71598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::eval_type<ProShade::pow_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  int Size;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if (Size >= 1)
  {
    v9 = Size;
    v10 = (int *)(a2 + 16);
    v11 = (int *)(a1 + 16);
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = *v10++;
      *(long double *)Serializer++ = pow((double)v12, (double)v14);
      --v9;
    }
    while (v9);
  }
}

void sub_1B2D716E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::eval_type<ProShade::pow_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  int Size;
  int v9;
  double *v10;
  double *v11;
  double v12;
  long double v13;
  long double v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if (Size >= 1)
  {
    v9 = Size;
    v10 = (double *)(a2 + 16);
    v11 = (double *)(a1 + 16);
    do
    {
      v12 = *v11++;
      v13 = v12;
      v14 = *v10++;
      *(long double *)Serializer++ = pow(v13, v14);
      --v9;
    }
    while (v9);
  }
}

void sub_1B2D71830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

BOOL ProShade::pow_traits::simplify(const PCSharedCount *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 isZero;
  ProShade::ConstVector *v7;
  const PCString *v8;
  PC_Sp_counted_base *var0;
  _BOOL8 result;
  int v11;
  const PCString *v12;
  PC_Sp_counted_base *v13;
  PCShared_base *v14;
  PCSharedCount v15[3];
  PCSharedCount v16;
  PCSharedCount v17[3];
  PCSharedCount v18;

  isZero = ProShade::isZero(a2);
  if (!isZero)
    goto LABEL_5;
  v7 = ProShade::Const::create((ProShade::Const *)isZero, 1.0);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a3 + 16), v7);
  var0 = a1[2].var0;
  if (!var0)
    throw_PCNullPointerException(1);
  if (*((_DWORD *)var0 + 7) != 1)
  {
    v11 = *((_DWORD *)var0 + 6);
    v12 = (const PCString *)ProShade::VarT<ProShade::Node>::width((uint64_t)a1, v8);
    v13 = *(PC_Sp_counted_base **)(a3 + 16);
    v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v15[2].var0 = v13;
    if (v13)
      v14 = (PCShared_base *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24));
    else
      v14 = 0;
    PCSharedCount::PCSharedCount(&v16, v14);
    ProShade::Ctor::makeWidth(v11, v12, v15, v17);
    ProShade::VarT<ProShade::Node>::operator=(a3, v17);
    v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v18);
    v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v16);
  }
  else
  {
LABEL_5:
    result = ProShade::isOne(a2);
    if (!result)
      return result;
    ProShade::VarT<ProShade::Node>::operator=(a3, a1);
  }
  return 1;
}

void sub_1B2D719A0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2 + 3);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575358;
  *(_QWORD *)(a1 + 72) = &unk_1E6575410;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575470;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575528;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575358;
  *(_QWORD *)(a1 + 72) = &unk_1E6575410;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575470;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575528;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "pow");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D71BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 28528;
  v6[2] = 119;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D71D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "pow");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "pow");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D71FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6575430);
  *(_QWORD *)v2 = &unk_1E6575358;
  *(_QWORD *)(v2 + 72) = &unk_1E6575410;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D7210C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      goto LABEL_12;
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
    {
      ProShade::eval_type<ProShade::pow_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
      return;
    }
  }
  if (v7 <= 2)
  {
    ProShade::eval_type<ProShade::pow_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    return;
  }
LABEL_12:
  ProShade::eval_type<ProShade::pow_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575358;
  *((_QWORD *)v1 + 9) = &unk_1E6575410;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575470;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575528;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575358;
  *((_QWORD *)v1 + 9) = &unk_1E6575410;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575470;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575528;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575430);
  *(_QWORD *)a1 = &unk_1E6575358;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575410;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D724A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D72684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65756A8);
  *(_QWORD *)a1 = &unk_1E65755D0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575688;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D727CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>::eval(int *a1, OZChannelBase *a2)
{
  const PCString *v4;
  uint64_t result;
  const PCString *v6;
  int v7;
  void ***Serializer;
  const PCString *v9;
  int *v10;
  int v11;
  int v12;
  void ***v13;
  const PCString *v14;
  double *v15;
  double v16;

  if (*a1 > 1)
  {
    v7 = a1[1];
    if (*a1 == 2)
    {
      ProShade::Value::set((uint64_t)a2, (const PCString *)2, v7);
      Serializer = OZChannelBase::getSerializer(a2);
      result = ProShade::shapeGetSize(a1[1], v9);
      if ((int)result >= 1)
      {
        v10 = a1 + 4;
        do
        {
          v12 = *v10++;
          v11 = v12;
          if (v12 < 0)
            v11 = -v11;
          *(_DWORD *)Serializer = v11;
          Serializer = (void ***)((char *)Serializer + 4);
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
    }
    else
    {
      ProShade::Value::set((uint64_t)a2, (const PCString *)3, v7);
      v13 = OZChannelBase::getSerializer(a2);
      result = ProShade::shapeGetSize(a1[1], v14);
      if ((int)result >= 1)
      {
        v15 = (double *)(a1 + 4);
        do
        {
          v16 = *v15++;
          *(double *)v13++ = fabs(v16);
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    result = ProShade::shapeGetSize(a1[1], v4);
    if ((int)result >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"abs doesn't apply to BOOL", v6);
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E65755D0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575688;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65756E8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65757A0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E65755D0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575688;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65756E8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65757A0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "abs");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D72B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 25185;
  v6[2] = 115;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D72C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "abs");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "abs");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D72EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E65756A8);
  *(_QWORD *)v2 = &unk_1E65755D0;
  *(_QWORD *)(v2 + 72) = &unk_1E6575688;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D73030(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  return ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E65755D0;
  *((_QWORD *)v1 + 9) = &unk_1E6575688;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65756E8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65757A0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E65755D0;
  *((_QWORD *)v1 + 9) = &unk_1E6575688;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65756E8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65757A0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::abs_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65756A8);
  *(_QWORD *)a1 = &unk_1E65755D0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575688;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D73348(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_cond>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  const void *v8;
  void *v9;
  const void *v10;
  _DWORD *v11;
  const void *v12;
  _DWORD *v13;
  const PCString *v14;
  _DWORD *v15;
  const PCString *v16;
  _DWORD *v17;
  const ProShade::Value *v18;
  PC_Sp_counted_base *v19;
  PCShared_base *v20;
  PC_Sp_counted_base *v21;
  PCSharedCount v22;
  PCSharedCount v23;
  _QWORD v24[18];
  _QWORD v25[19];

  v25[18] = *MEMORY[0x1E0C80C00];
  v8 = *(const void **)(a1 + 16);
  if (v8)
  else
    v9 = 0;
  v10 = *(const void **)(a2 + 16);
  if (v10)
  else
    v11 = 0;
  v12 = *(const void **)(a3 + 16);
  if (v12
  {
    if (v11[7] != v13[7])
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cond arguments must be the same size", v14);
    ProShade::Value::Value(v25);
    ProShade::Value::Value(v24);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v9 + 224))(v9, v25);
    if (ProShade::Value::asBool((ProShade::Value *)v25, v16))
      v17 = v11;
    else
      v17 = v15;
    (*(void (**)(_DWORD *, _QWORD *))(*(_QWORD *)v17 + 224))(v17, v24);
    v19 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)v24, v18);
    v22.var0 = v19;
    if (v19)
      v20 = (PCShared_base *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24));
    else
      v20 = 0;
    PCSharedCount::PCSharedCount(&v23, v20);
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4 + 2, &v22);
    PCSharedCount::~PCSharedCount(&v23);
  }
  else
  {
    v21 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_cond>::Func((uint64_t)v21, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16), *(_QWORD **)(a3 + 16));
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a4[2].var0 = v21;
    PCSharedCount::PCSharedCount(a4 + 3, (PCShared_base *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  }
}

void sub_1B2D735D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cond>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  PCShared_base *v10;
  int v11;
  int v12;
  PCShared_base *v13;
  int v14;
  int v15;
  PCArray_base *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  PCSharedCount v24[2];
  _QWORD *v25;
  PCSharedCount v26;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575920);
  *(_QWORD *)a1 = &unk_1E6575848;
  *(_QWORD *)(a1 + 72) = &unk_1E6575900;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v25 = a2;
  PCSharedCount::PCSharedCount(&v26, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8)
    v9 = (2 * (v8 + 1)) | 1;
  else
    v9 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v24);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v25 = a3;
  if (a3)
    v10 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v10 = 0;
  PCSharedCount::PCSharedCount(&v26, v10);
  v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v11)
    v12 = (2 * (v11 + 1)) | 1;
  else
    v12 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v11 + 1, v12);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v24);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v25 = a4;
  if (a4)
    v13 = (PCShared_base *)((char *)a4 + *(_QWORD *)(*a4 - 24));
  else
    v13 = 0;
  PCSharedCount::PCSharedCount(&v26, v13);
  v14 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v14)
    v15 = (2 * (v14 + 1)) | 1;
  else
    v15 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v14 + 1, v15);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v24);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v17 = *(_DWORD *)(a1 + 60);
  if (v17 < 1)
    PCArray_base::badIndex(v16);
  if (v17 < 2)
    PCArray_base::badIndex(v16);
  v18 = *(_QWORD *)(a1 + 64);
  if (v17 <= 2)
    PCArray_base::badIndex(v16);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 48);
  if (!v19)
    throw_PCNullPointerException(1);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(v19 + 28);
  v20 = *(_DWORD *)(v19 + 24);
  v21 = *(_QWORD *)(v18 + 80);
  if (!v21)
    throw_PCNullPointerException(1);
  v22 = *(_DWORD *)(v21 + 24);
  if (v20 > v22)
    v22 = v20;
  *(_DWORD *)(a1 + 24) = v22;
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D738E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cond>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575848;
  *(_QWORD *)(a1 + 72) = &unk_1E6575900;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575960;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575A18;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_cond>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575848;
  *(_QWORD *)(a1 + 72) = &unk_1E6575900;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575960;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575A18;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_cond>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  ProShade::Func_cond::repr(a1 + 48, a2);
}

void ProShade::Func<ProShade::Func_cond>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1684959075;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D73BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_cond>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "cond");
}

int8x8_t *ProShade::Func<ProShade::Func_cond>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "cond");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_cond>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_cond>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D73E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cond>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6575920);
  *(_QWORD *)v2 = &unk_1E6575848;
  *(_QWORD *)(v2 + 72) = &unk_1E6575900;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D73FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

__CFString **ProShade::Func<ProShade::Func_cond>::computeValue(PCArray_base *a1, uint64_t a2, __CFString **a3)
{
  _BOOL8 v5;
  int v6;

  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  v5 = ProShade::Value::asBool(*(ProShade::Value **)(a2 + 16), (const PCString *)a2);
  if (v5)
    v6 = 1;
  else
    v6 = 2;
  if (*(_DWORD *)(a2 + 12) <= v6)
    PCArray_base::badIndex((PCArray_base *)v5);
  return ProShade::Value::operator=(a3, (const PCString *)(*(_QWORD *)(a2 + 16) + 144 * v6));
}

void `virtual thunk to'ProShade::Func<ProShade::Func_cond>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575848;
  *((_QWORD *)v1 + 9) = &unk_1E6575900;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575960;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575A18;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575848;
  *((_QWORD *)v1 + 9) = &unk_1E6575900;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575960;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575A18;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func_cond::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  PCArray_base *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  int v18;
  size_t v19;
  unsigned int *v20;
  unsigned int v21;
  size_t v22;
  unsigned int *v23;
  PCArray_base *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  const void *v29;
  int v30;
  size_t v31;
  unsigned int *v32;
  unsigned int v33;
  size_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;

  if (*(int *)(a1 + 12) <= 0)
    PCArray_base::badIndex((PCArray_base *)a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v62);
  v5 = v62;
  if (v62)
    v6 = *((_DWORD *)v62 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 15, 0x8903763CuLL);
  v8 = v6 + 2;
  v7[2] = v6 + 3;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_WORD *)v7 + 6) = 10280;
  v7[1] = v8;
  memcpy((char *)v7 + 14, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 18, 0x8903763CuLL);
  v11[1] = v10 + 5;
  v11[2] = v10 + 6;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  v12 = (PCArray_base *)memcpy(v11 + 3, v7 + 3, v10);
  v13 = (char *)v11 + v10 + 12;
  *(_DWORD *)v13 = 541007913;
  v13[4] = 40;
  *((_BYTE *)v11 + v10 + 17) = 0;
  do
    v14 = __ldaxr(v11);
  while (__stlxr(v14 + 1, v11));
  if (*(int *)(a1 + 12) <= 1)
    PCArray_base::badIndex(v12);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  if (!v15)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v15 + 16))(&v61);
  v16 = (int)v11[1];
  v17 = v61;
  if (v61)
    v18 = *((_DWORD *)v61 - 2);
  else
    v18 = 0;
  v19 = v16 + v18;
  v20 = (unsigned int *)malloc_type_malloc(v19 + 13, 0x8903763CuLL);
  v20[1] = v19;
  v20[2] = v19 + 1;
  atomic_store(1u, v20);
  atomic_store(0, v20);
  memcpy(v20 + 3, v11 + 3, v16);
  memcpy((char *)v20 + v16 + 12, v17, v18);
  *((_BYTE *)v20 + v19 + 12) = 0;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = (int)v20[1];
  v23 = (unsigned int *)malloc_type_malloc(v22 + 18, 0x8903763CuLL);
  v23[1] = v22 + 5;
  v23[2] = v22 + 6;
  atomic_store(1u, v23);
  atomic_store(0, v23);
  v24 = (PCArray_base *)memcpy(v23 + 3, v20 + 3, v22);
  v25 = (char *)v23 + v22 + 12;
  *(_DWORD *)v25 = 540680233;
  v25[4] = 40;
  *((_BYTE *)v23 + v22 + 17) = 0;
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 + 1, v23));
  if (*(int *)(a1 + 12) <= 2)
    PCArray_base::badIndex(v24);
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
  if (!v27)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v27 + 16))(&v60);
  v28 = (int)v23[1];
  v29 = v60;
  if (v60)
    v30 = *((_DWORD *)v60 - 2);
  else
    v30 = 0;
  v31 = v28 + v30;
  v32 = (unsigned int *)malloc_type_malloc(v31 + 13, 0x8903763CuLL);
  v32[1] = v31;
  v32[2] = v31 + 1;
  atomic_store(1u, v32);
  atomic_store(0, v32);
  memcpy(v32 + 3, v23 + 3, v28);
  memcpy((char *)v32 + v28 + 12, v29, v30);
  *((_BYTE *)v32 + v31 + 12) = 0;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  v34 = (int)v32[1];
  v35 = (unsigned int *)malloc_type_malloc(v34 + 15, 0x8903763CuLL);
  v35[1] = v34 + 2;
  v35[2] = v34 + 3;
  atomic_store(1u, v35);
  v36 = v35 + 3;
  atomic_store(0, v35);
  memcpy(v35 + 3, v32 + 3, v34);
  *(_WORD *)((char *)v36 + v34) = 10537;
  *((_BYTE *)v36 + v34 + 2) = 0;
  *a2 = v35 + 3;
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 + 1, v35));
  do
  {
    v38 = __ldaxr(v32);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v32));
  if (!v39)
    free(v32);
  if (v60)
  {
    v40 = (unsigned int *)(v60 - 12);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      *v60 = 0;
      if (v60)
        v43 = v60 - 12;
      else
        v43 = 0;
      free(v43);
    }
  }
  do
  {
    v44 = __ldaxr(v23);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v23));
  if (!v45)
    free(v23);
  do
  {
    v46 = __ldaxr(v20);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v20));
  if (!v47)
    free(v20);
  if (v61)
  {
    v48 = (unsigned int *)(v61 - 12);
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      *v61 = 0;
      if (v61)
        v51 = v61 - 12;
      else
        v51 = 0;
      free(v51);
    }
  }
  do
  {
    v52 = __ldaxr(v11);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v11));
  if (!v53)
    free(v11);
  do
  {
    v54 = __ldaxr(v7);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, v7));
  if (!v55)
    free(v7);
  if (v62)
  {
    v56 = (unsigned int *)(v62 - 12);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      *v62 = 0;
      if (v62)
        v59 = v62 - 12;
      else
        v59 = 0;
      free(v59);
    }
  }
}

void sub_1B2D74728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12, _BYTE *a13, _BYTE *a14)
{
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  do
  {
    v20 = __ldaxr(v18);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v18));
  if (!v21)
    free(v18);
  if (a12)
  {
    v22 = (unsigned int *)(a12 - 12);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  do
  {
    v25 = __ldaxr(v17);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v17));
  if (!v26)
    free(v17);
  do
  {
    v27 = __ldaxr(v16);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v16));
  if (!v28)
    free(v16);
  if (a13)
  {
    v29 = (unsigned int *)(a13 - 12);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      *a13 = 0;
      free(a13 - 12);
    }
  }
  do
  {
    v32 = __ldaxr(v15);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v15));
  if (!v33)
    free(v15);
  do
  {
    v34 = __ldaxr(v14);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v14));
  if (!v35)
    free(v14);
  if (a14)
  {
    v36 = (unsigned int *)(a14 - 12);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      *a14 = 0;
      free(a14 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::Func<ProShade::Func_cond>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575920);
  *(_QWORD *)a1 = &unk_1E6575848;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575900;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D749B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D74B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575B98);
  *(_QWORD *)a1 = &unk_1E6575AC0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575B78;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D74CDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4;
  const PCString *v5;
  const PCString *v6;
  void ***Serializer;
  const PCString *v8;
  int Size;
  int v10;
  int *v11;
  int v12;
  double *v13;
  long double v14;

  v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    Size = ProShade::shapeGetSize(a1[1], v8);
    v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        v11 = a1 + 4;
        do
        {
          v12 = *v11++;
          *(long double *)Serializer++ = exp((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      v13 = (double *)(a1 + 4);
      do
      {
        v14 = *v13++;
        *(long double *)Serializer++ = exp(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"exp doesn't apply to BOOL", v6);
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575AC0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575B78;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575BD8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575C90;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575AC0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575B78;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575BD8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575C90;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "exp");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D7500C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 30821;
  v6[2] = 112;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D7512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "exp");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "exp");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D753C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6575B98);
  *(_QWORD *)v2 = &unk_1E6575AC0;
  *(_QWORD *)(v2 + 72) = &unk_1E6575B78;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D75530(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575AC0;
  *((_QWORD *)v1 + 9) = &unk_1E6575B78;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575BD8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575C90;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575AC0;
  *((_QWORD *)v1 + 9) = &unk_1E6575B78;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575BD8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575C90;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::exp_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575B98);
  *(_QWORD *)a1 = &unk_1E6575AC0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575B78;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D75848(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  PC_Sp_counted_base *v14;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17;

  v8 = *(const void **)(a1 + 16);
  if (v8)
  else
    v9 = 0;
  v10 = *(const void **)(a2 + 16);
  if (v10)
  else
    v11 = 0;
  v12 = *(const void **)(a3 + 16);
  if (v12
  {
    ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::compute((uint64_t)v9, (uint64_t)v11, (uint64_t)v13, &v15);
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4 + 2, &v16);
    v15.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
    PCSharedCount::~PCSharedCount(&v17);
  }
  else
  {
    v14 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::Func((uint64_t)v14, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16), *(_QWORD **)(a3 + 16));
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a4[2].var0 = v14;
    PCSharedCount::PCSharedCount(a4 + 3, (PCShared_base *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  }
}

void sub_1B2D75A00(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  int v8;
  int v9;
  const ProShade::Value *v10;
  ProShade::ConstVector *v11;
  PCShared_base *v12;
  OZChannelBase v14;
  _QWORD v15[18];
  _QWORD v16[18];
  _QWORD v17[19];

  v17[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v17);
  ProShade::Value::Value(v16);
  ProShade::Value::Value(v15);
  ProShade::Value::Value(&v14);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v17);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 224))(a3, v15);
  if (SLODWORD(v17[0]) > 1)
  {
    if (LODWORD(v17[0]) != 2)
      goto LABEL_11;
    v8 = v16[0];
    goto LABEL_7;
  }
  v8 = v16[0];
  if (SLODWORD(v16[0]) >= 2)
  {
LABEL_7:
    if (v8 > 2)
      goto LABEL_11;
    v9 = v15[0];
    goto LABEL_9;
  }
  v9 = v15[0];
  if (SLODWORD(v15[0]) < 2)
  {
    ProShade::eval_type<ProShade::smoothstep_traits,BOOL>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
    goto LABEL_12;
  }
LABEL_9:
  if (v9 <= 2)
  {
    ProShade::eval_type<ProShade::smoothstep_traits,int>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
    goto LABEL_12;
  }
LABEL_11:
  ProShade::eval_type<ProShade::smoothstep_traits,double>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
LABEL_12:
  v11 = ProShade::Const::create((ProShade::Const *)&v14, v10);
  a4->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a4[2].var0 = (PC_Sp_counted_base *)v11;
  if (v11)
    v12 = (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24));
  else
    v12 = 0;
  return PCSharedCount::PCSharedCount(a4 + 3, v12);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  PCShared_base *v10;
  int v11;
  int v12;
  PCShared_base *v13;
  int v14;
  int v15;
  PCArray_base *v16;
  int v17;
  PCSharedCount v19[2];
  _QWORD *v20;
  PCSharedCount v21;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575E10);
  *(_QWORD *)a1 = &unk_1E6575D38;
  *(_QWORD *)(a1 + 72) = &unk_1E6575DF0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a2;
  PCSharedCount::PCSharedCount(&v21, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8)
    v9 = (2 * (v8 + 1)) | 1;
  else
    v9 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a3;
  if (a3)
    v10 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v10 = 0;
  PCSharedCount::PCSharedCount(&v21, v10);
  v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v11)
    v12 = (2 * (v11 + 1)) | 1;
  else
    v12 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v11 + 1, v12);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a4;
  if (a4)
    v13 = (PCShared_base *)((char *)a4 + *(_QWORD *)(*a4 - 24));
  else
    v13 = 0;
  PCSharedCount::PCSharedCount(&v21, v13);
  v14 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v14)
    v15 = (2 * (v14 + 1)) | 1;
  else
    v15 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v14 + 1, v15);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v17 = *(_DWORD *)(a1 + 60);
  if (v17 < 1)
    PCArray_base::badIndex(v16);
  if (v17 < 2)
    PCArray_base::badIndex(v16);
  if (v17 <= 2)
    PCArray_base::badIndex(v16);
  ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 64));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D75E74(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::smoothstep_traits,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  const PCString *v7;
  uint64_t result;
  const PCString *v9;
  PCException *exception;
  PCString v11;
  PCString v12;

  ProShade::Value::set((uint64_t)a4, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v12, "not implemented yet");
    PCString::PCString(&v11, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v12, &v11, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"smoothstep doesn't apply to BOOL", v9);
  return result;
}

void sub_1B2D75FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::smoothstep_traits,int>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  void ***Serializer;
  const PCString *v9;
  uint64_t result;
  int *v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  PCException *exception;
  PCString v21;
  PCString v22;

  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    v11 = (int *)(a3 + 16);
    v12 = (int *)(a2 + 16);
    v13 = (int *)(a1 + 16);
    do
    {
      v15 = *v13++;
      v14 = v15;
      v17 = *v12++;
      v16 = v17;
      v18 = *v11++;
      v19 = ((double)v18 - (double)v14) / ((double)v16 - (double)v14);
      if (v19 > 1.0)
        v19 = 1.0;
      if (v19 < 0.0)
        v19 = 0.0;
      *(double *)Serializer++ = v19 * v19 * (3.0 - (v19 + v19));
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D76168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::smoothstep_traits,double>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  void ***Serializer;
  const PCString *v9;
  uint64_t result;
  double *v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  PCException *exception;
  PCString v21;
  PCString v22;

  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    v11 = (double *)(a3 + 16);
    v12 = (double *)(a2 + 16);
    v13 = (double *)(a1 + 16);
    do
    {
      v14 = *v13++;
      v15 = v14;
      v16 = *v12++;
      v17 = v16;
      v18 = *v11++;
      v19 = (v18 - v15) / (v17 - v15);
      if (v19 > 1.0)
        v19 = 1.0;
      if (v19 < 0.0)
        v19 = 0.0;
      *(double *)Serializer++ = v19 * v19 * (3.0 - (v19 + v19));
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D762EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575D38;
  *(_QWORD *)(a1 + 72) = &unk_1E6575DF0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575E50;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575F08;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575D38;
  *(_QWORD *)(a1 + 72) = &unk_1E6575DF0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6575E50;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6575F08;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "smoothstep");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D76540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 23, 0x8903763CuLL);
  v5[1] = v4 + 10;
  v5[2] = v4 + 11;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *((_WORD *)v6 + 4) = 28773;
  *(_QWORD *)v6 = *(_QWORD *)"smoothstep";
  *((_BYTE *)v5 + v4 + 22) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D76668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "smoothstep");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "smoothstep");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D76904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6575E10);
  *(_QWORD *)v2 = &unk_1E6575D38;
  *(_QWORD *)(v2 + 72) = &unk_1E6575DF0;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D76A6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::computeValue(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  return ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::computeValue(a2, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575D38;
  *((_QWORD *)v1 + 9) = &unk_1E6575DF0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575E50;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575F08;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575D38;
  *((_QWORD *)v1 + 9) = &unk_1E6575DF0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6575E50;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6575F08;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6575E10);
  *(_QWORD *)a1 = &unk_1E6575D38;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6575DF0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D76D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_3<ProShade::smoothstep_traits>::computeValue(uint64_t a1, OZChannelBase *a2)
{
  int v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1)
    PCArray_base::badIndex((PCArray_base *)a1);
  v4 = *(int **)(a1 + 16);
  if (v3 < 2)
    PCArray_base::badIndex((PCArray_base *)a1);
  if (v3 <= 2)
    PCArray_base::badIndex((PCArray_base *)a1);
  v5 = v4 + 36;
  v6 = v4 + 72;
  if (*v4 >= 2)
  {
    if (*v4 != 2)
      return ProShade::eval_type<ProShade::smoothstep_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
    v7 = *v5;
    goto LABEL_13;
  }
  v7 = *v5;
  if (*v5 >= 2)
  {
LABEL_13:
    if (v7 > 2)
      return ProShade::eval_type<ProShade::smoothstep_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
    v8 = *v6;
    goto LABEL_15;
  }
  v8 = *v6;
  if (*v6 < 2)
    return ProShade::eval_type<ProShade::smoothstep_traits,BOOL>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
LABEL_15:
  if (v8 <= 2)
    return ProShade::eval_type<ProShade::smoothstep_traits,int>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
  return ProShade::eval_type<ProShade::smoothstep_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
}

void ProShade::Func<ProShade::Func_cross>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  ProShade::Func_cross *v7;
  const void *v8;
  ProShade::Const *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Func_cross::compute(v7, v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_cross>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D76FD4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_cross::compute(ProShade::Func_cross *this@<X0>, ProShade::Const *a2@<X1>, PCSharedCount *a3@<X8>)
{
  const PCString *v7;
  const PCString *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  PC_Sp_counted_base *v14;
  unsigned int v15;
  char *v16;
  unsigned int v17;
  char *v18;
  float64x2_t v19;
  double v20;
  void *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  char *v26;

  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 7)) || ProShade::shapeIsMatrix(*((_DWORD *)a2 + 7)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cross doesn't apply to matrices", v7);
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = &unk_1E656FB28;
  v21 = &unk_1E656FB28;
  v22 = 0;
  (*(void (**)(ProShade::Func_cross *, void **))(*(_QWORD *)this + 216))(this, &v24);
  (*(void (**)(ProShade::Const *, void **))(*(_QWORD *)a2 + 216))(a2, &v21);
  if (HIDWORD(v25) != 3 || HIDWORD(v22) != 3)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cross arguments must be 3-vectors", v8);
  v9 = *(float64x2_t *)(v23 + 8);
  v10 = *(float64x2_t *)(v26 + 8);
  *(_QWORD *)&v11.f64[0] = vdupq_laneq_s64((int64x2_t)v9, 1).u64[0];
  v11.f64[1] = *(float64_t *)v23;
  *(_QWORD *)&v12.f64[0] = vdupq_laneq_s64((int64x2_t)v10, 1).u64[0];
  v12.f64[1] = *(float64_t *)v26;
  v13 = *(double *)v26 * v9.f64[0] - *(double *)v23 * v10.f64[0];
  v19 = vsubq_f64(vmulq_f64(v10, v11), vmulq_f64(v9, v12));
  v20 = v13;
  v14 = (PC_Sp_counted_base *)operator new();
  ProShade::ConstVector::ConstVector((uint64_t)v14, (uint64_t)&v19);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = v14;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  v21 = &unk_1E656FB28;
  if ((int)v22 < 0)
    v15 = 1;
  else
    v15 = v22 & ~((int)v22 >> 31);
  if (v15 == (_DWORD)v22)
  {
    v16 = v23;
    if (v22 < 0)
      bzero(&v23[8 * SHIDWORD(v22)], 8 * ~HIDWORD(v22) + 8);
  }
  else
  {
    if (v15)
    {
      v16 = (char *)operator new[]();
      bzero(v16, 8 * v15);
    }
    else
    {
      v16 = 0;
    }
    if (v23)
      MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
    v23 = v16;
  }
  v22 = v15;
  if (v16)
    MEMORY[0x1B5E2914C](v16, 0x1000C8077774924);
  v24 = &unk_1E656FB28;
  if ((int)v25 < 0)
    v17 = 1;
  else
    v17 = v25 & ~((int)v25 >> 31);
  if (v17 == (_DWORD)v25)
  {
    v18 = v26;
    if (v25 < 0)
      bzero(&v26[8 * SHIDWORD(v25)], 8 * ~HIDWORD(v25) + 8);
  }
  else
  {
    if (v17)
    {
      v18 = (char *)operator new[]();
      bzero(v18, 8 * v17);
    }
    else
    {
      v18 = 0;
    }
    if (v26)
      MEMORY[0x1B5E2914C](v26, 0x1000C8077774924);
    v26 = v18;
  }
  v25 = v17;
  if (v18)
    MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
}

void sub_1B2D772F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v5, 0x10B1C40A585CD1CLL);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cross>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  PCSharedCount v19[2];
  _QWORD *v20;
  PCSharedCount v21;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576088);
  *(_QWORD *)a1 = &unk_1E6575FB0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576068;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a2;
  PCSharedCount::PCSharedCount(&v21, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v21, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
  if (!v14)
    throw_PCNullPointerException(1);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(v14 + 28);
  v15 = *(_DWORD *)(v14 + 24);
  v16 = *(_QWORD *)(v13 + 48);
  if (!v16)
    throw_PCNullPointerException(1);
  v17 = *(_DWORD *)(v16 + 24);
  if (v15 > v17)
    v17 = v15;
  *(_DWORD *)(a1 + 24) = v17;
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D77578(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstVector::ConstVector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E657E068);
  *(_QWORD *)a1 = &unk_1E657E588;
  *(_QWORD *)(a1 + 80) = &unk_1E657E690;
  *(_QWORD *)a1 = &off_1E657DF38;
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = &unk_1E657E040;
  *(_QWORD *)(a1 + 24) = 0x300000003;
  return a1;
}

{
  PCArray_base *v4;
  const PCString *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)a1 = off_1E657E6C0;
  *(_QWORD *)(a1 + 80) = off_1E657E778;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657DF38;
  *(_QWORD *)(a1 + 80) = &unk_1E657E040;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 24) = 1;
  v6 = *(unsigned int *)(a2 + 12);
  if ((v6 - 1) >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v5);
  v7 = 0;
  *(_DWORD *)(a1 + 28) = v6;
  do
  {
    if (v7 >= *(int *)(a2 + 12))
      PCArray_base::badIndex(v4);
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + v7))
      v8 = 1.0;
    else
      v8 = 0.0;
    *(double *)(a1 + 8 * v7++ + 48) = v8;
  }
  while (v6 != v7);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

{
  PCArray_base *v4;
  const PCString *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)a1 = off_1E657E6C0;
  *(_QWORD *)(a1 + 80) = off_1E657E778;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657DF38;
  *(_QWORD *)(a1 + 80) = &unk_1E657E040;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 24) = 2;
  v6 = *(unsigned int *)(a2 + 12);
  if ((v6 - 1) >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v5);
  v7 = 0;
  *(_DWORD *)(a1 + 28) = v6;
  do
  {
    if (v7 >= *(int *)(a2 + 12))
      PCArray_base::badIndex(v4);
    *(double *)(a1 + 8 * v7 + 48) = (double)*(int *)(*(_QWORD *)(a2 + 16) + 4 * v7);
    ++v7;
  }
  while (v6 != v7);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

{
  PCArray_base *v4;
  const PCString *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)a1 = off_1E657E6C0;
  *(_QWORD *)(a1 + 80) = off_1E657E778;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657DF38;
  *(_QWORD *)(a1 + 80) = &unk_1E657E040;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 24) = 3;
  v6 = *(unsigned int *)(a2 + 12);
  if ((v6 - 1) >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v5);
  v7 = 0;
  *(_DWORD *)(a1 + 28) = v6;
  do
  {
    if (v7 >= *(int *)(a2 + 12))
      PCArray_base::badIndex(v4);
    *(_QWORD *)(a1 + 8 * v7 + 48) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v7);
    ++v7;
  }
  while (v6 != v7);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_1B2D77684(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 80) = v3;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cross>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575FB0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576068;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65760C8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576180;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_cross>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6575FB0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576068;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65760C8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576180;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_cross>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "cross");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D778B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_cross>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 18, 0x8903763CuLL);
  v5[1] = v4 + 5;
  v5[2] = v4 + 6;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)v6 = 1936683619;
  v6[4] = 115;
  *((_BYTE *)v5 + v4 + 17) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D779D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_cross>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "cross");
}

int8x8_t *ProShade::Func<ProShade::Func_cross>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "cross");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_cross>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_cross>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D77C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_cross>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6576088);
  *(_QWORD *)v2 = &unk_1E6575FB0;
  *(_QWORD *)(v2 + 72) = &unk_1E6576068;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D77DDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_cross>::computeValue()
{
  ProShade::Func_cross::computeValue();
}

void `virtual thunk to'ProShade::Func<ProShade::Func_cross>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575FB0;
  *((_QWORD *)v1 + 9) = &unk_1E6576068;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65760C8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576180;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6575FB0;
  *((_QWORD *)v1 + 9) = &unk_1E6576068;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65760C8;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576180;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_cross>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576088);
  *(_QWORD *)a1 = &unk_1E6575FB0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576068;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D780C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_cross::computeValue()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 943);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D78190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_length>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  ProShade::Func_length *v5;
  PC_Sp_counted_base *v6;
  PCSharedCount v7;
  PCSharedCount v8;
  PCSharedCount v9;

  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    ProShade::Func_length::compute(v5, &v7);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v8);
    v7.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v7.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v8.var0 = 0;
    PCSharedCount::PCSharedCount(&v9);
    v6 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_length>::Func((uint64_t)v6, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v6;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
    v7.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B2D782E0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::Func_length::compute(ProShade::Func_length *this@<X0>, PCSharedCount *a2@<X8>)
{
  const PCString *v5;
  PCArray_base *v6;
  uint64_t v7;
  double v8;
  ProShade::ConstVector *v9;
  PCShared_base *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  double *v15;

  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 7)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"length doesn't apply to matrices", v5);
  v14 = 0;
  v15 = 0;
  v13 = &unk_1E656FB28;
  v6 = (PCArray_base *)(*(uint64_t (**)(ProShade::Func_length *, void **))(*(_QWORD *)this + 216))(this, &v13);
  if (SHIDWORD(v14) < 1)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      if (v7 >= SHIDWORD(v14))
        PCArray_base::badIndex(v6);
      v8 = v8 + v15[v7] * v15[v7];
      ++v7;
    }
    while (HIDWORD(v14) != v7);
  }
  v9 = ProShade::Const::create(v6, sqrt(v8));
  a2->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a2[2].var0 = (PC_Sp_counted_base *)v9;
  if (v9)
    v10 = (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24));
  else
    v10 = 0;
  PCSharedCount::PCSharedCount(a2 + 3, v10);
  v13 = &unk_1E656FB28;
  if ((int)v14 < 0)
    v11 = 1;
  else
    v11 = v14 & ~((int)v14 >> 31);
  if (v11 == (_DWORD)v14)
  {
    v12 = v15;
    if (v14 < 0)
      bzero(&v15[SHIDWORD(v14)], 8 * ~HIDWORD(v14) + 8);
  }
  else
  {
    if (v11)
    {
      v12 = (void *)operator new[]();
      bzero(v12, 8 * v11);
    }
    else
    {
      v12 = 0;
    }
    if (v15)
      MEMORY[0x1B5E2914C](v15, 0x1000C8077774924);
    v15 = (double *)v12;
  }
  v14 = v11;
  if (v12)
    MEMORY[0x1B5E2914C](v12, 0x1000C8077774924);
}

void sub_1B2D784F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_length>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576300);
  *(_QWORD *)a1 = &unk_1E6576228;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E65762E0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D78608(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_length>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576228;
  *(_QWORD *)(a1 + 72) = &unk_1E65762E0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576340;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65763F8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_length>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576228;
  *(_QWORD *)(a1 + 72) = &unk_1E65762E0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576340;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65763F8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_length>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "length");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D78858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_length>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 19, 0x8903763CuLL);
  v5[1] = v4 + 6;
  v5[2] = v4 + 7;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)v6 = 1735288172;
  *((_WORD *)v6 + 2) = 26740;
  *((_BYTE *)v5 + v4 + 18) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D7897C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_length>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "length");
}

int8x8_t *ProShade::Func<ProShade::Func_length>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "length");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_length>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_length>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D78C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_length>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6576300);
  *(_QWORD *)v2 = &unk_1E6576228;
  *(_QWORD *)(v2 + 72) = &unk_1E65762E0;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D78D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

double ProShade::Func<ProShade::Func_length>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  return ProShade::Func_length::eval(*(ProShade::Func_length **)(a2 + 16), a3, (ProShade::Value *)a3);
}

void `virtual thunk to'ProShade::Func<ProShade::Func_length>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576228;
  *((_QWORD *)v1 + 9) = &unk_1E65762E0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576340;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65763F8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576228;
  *((_QWORD *)v1 + 9) = &unk_1E65762E0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576340;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65763F8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_length>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576300);
  *(_QWORD *)a1 = &unk_1E6576228;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E65762E0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D79098(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

double ProShade::Func_length::eval(ProShade::Func_length *this, OZChannelBase *a2, ProShade::Value *a3)
{
  const PCString *v5;
  const PCString *v6;
  OZChannelBase *Size;
  const PCString *v8;
  double result;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  PCException *v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  if (ProShade::shapeIsMatrix(*((_DWORD *)this + 1)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"length doesn't apply to matrices", v5);
  ProShade::Value::set((uint64_t)a2, (const PCString *)3, 1);
  OZChannelBase::getSerializer(a2);
  Size = (OZChannelBase *)ProShade::shapeGetSize(*((_DWORD *)this + 1), v6);
  switch(*(_DWORD *)this)
  {
    case 0:
      ProShade::Error<PCIllegalArgumentException>::raise(Size, v8);
    case 1:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v17, "not implemented yet");
      PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(exception, &v17, &v16, 1296);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    case 2:
      v14 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v17, "not implemented yet");
      PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(v14, &v17, &v16, 1297);
      *(_QWORD *)v14 = &unk_1E64FFFA0;
    case 3:
      if ((int)Size < 1)
      {
        v12 = 0.0;
      }
      else
      {
        v10 = (double *)((char *)this + 16);
        v11 = Size;
        v12 = 0.0;
        do
        {
          v13 = *v10++;
          v12 = v12 + v13 * v13;
          --v11;
        }
        while (v11);
      }
      result = sqrt(v12);
      *(double *)&a2->var2 = result;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B2D79288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  char v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if ((v11 & 1) != 0)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void BumpMapSample::BumpMapSample(BumpMapSample *this)
{
  *(_QWORD *)this = &unk_1E6569AC8;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_QWORD *)this + 4) = &unk_1E6569AC8;
  *((_QWORD *)this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((_QWORD *)this + 8) = &unk_1E6569AC8;
  *((_QWORD *)this + 10) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
}

void sub_1B2D79348(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  uint64_t v4;

  v1[4] = v4 + 16;
  PCSharedCount::~PCSharedCount(v3);
  *v1 = v4 + 16;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Vec2::Vec2(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6576498;
  ProShade::Vec2::checkType((ProShade::Vec2 *)a1);
  return a1;
}

void sub_1B2D793E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Mat4::Mat4(PCSharedCount *a1, uint64_t a2)
{
  PC_Sp_counted_base *v4;

  v4 = (PC_Sp_counted_base *)operator new();
  ProShade::ConstMatrix::ConstMatrix((uint64_t)v4, a2);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = v4;
  PCSharedCount::PCSharedCount(a1 + 3, (PCShared_base *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  a1->var0 = (PC_Sp_counted_base *)&unk_1E65764D8;
  return a1;
}

void sub_1B2D79488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C405FD9FD45);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_inverse>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  ProShade::Func_inverse *v5;
  PC_Sp_counted_base *v6;
  PCSharedCount v7;
  PCSharedCount v8;
  PCSharedCount v9;

  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    ProShade::Func_inverse::compute(v5, &v7);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v8);
    v7.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v7.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v8.var0 = 0;
    PCSharedCount::PCSharedCount(&v9);
    v6 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_inverse>::Func((uint64_t)v6, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v6;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
    v7.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B2D795BC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Func_inverse::compute@<X0>(ProShade::Func_inverse *this@<X0>, PCSharedCount *a2@<X8>)
{
  const PCString *v5;
  int v6;
  PC_Sp_counted_base *v7;
  PCShared_base *v8;
  uint64_t v9;
  __int128 *v10;
  PCString *v11;
  PC_Sp_counted_base *v12;
  PCShared_base *v13;
  PCException *exception;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double v21[9];
  PCString v22[6];
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  if (!ProShade::shapeIsMatrix(*((_DWORD *)this + 7)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse applies only to matrices", v5);
  v6 = *((_DWORD *)this + 7);
  switch(v6)
  {
    case 6:
      (*(void (**)(double *__return_ptr, ProShade::Func_inverse *))(*(_QWORD *)this + 184))(v21, this);
      v16 = 0x3FF0000000000000uLL;
      v17 = 0uLL;
      v18 = 0x3FF0000000000000uLL;
      v19 = 0uLL;
      v20 = 0x3FF0000000000000;
      if (!PCMatrix33Tmpl<double>::invert((double *)&v16, v21, 0.0))
      {
        v20 = 0;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
      }
      v9 = 0;
      v10 = &v16;
      do
      {
        v11 = &v22[v9];
        *(_OWORD *)&v11->var0 = *v10;
        v11[2].var0 = (__CFString *)v10[1];
        v10 = (__int128 *)((char *)v10 + 24);
        v9 += 4;
      }
      while (v9 != 12);
      v22[3].var0 = 0;
      *((_QWORD *)&v23 + 1) = 0;
      memset((char *)v25 + 8, 0, 32);
      *((_QWORD *)&v25[2] + 1) = 0x3FF0000000000000;
      v12 = (PC_Sp_counted_base *)ProShade::Const::create((uint64_t)v22);
      a2->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
      a2[2].var0 = v12;
      if (v12)
        v13 = (PCShared_base *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
      else
        v13 = 0;
      return PCSharedCount::PCSharedCount(a2 + 3, v13);
    case 7:
      (*(void (**)(__int128 *__return_ptr, ProShade::Func_inverse *))(*(_QWORD *)this + 192))(&v16, this);
      *((_QWORD *)&v25[2] + 1) = 0x3FF0000000000000;
      *(_QWORD *)&v25[0] = 0x3FF0000000000000;
      v22[5].var0 = (__CFString *)0x3FF0000000000000;
      v22[0].var0 = (__CFString *)0x3FF0000000000000;
      memset(&v22[1], 0, 32);
      v23 = 0u;
      v24 = 0u;
      memset((char *)v25 + 8, 0, 32);
      if (!PCMatrix44Tmpl<double>::invert((double *)v22, (double *)&v16, 0.0))
      {
        v24 = 0u;
        memset(v25, 0, sizeof(v25));
        v23 = 0u;
        memset(v22, 0, sizeof(v22));
      }
      v7 = (PC_Sp_counted_base *)ProShade::Const::create((uint64_t)v22);
      a2->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
      a2[2].var0 = v7;
      if (v7)
        v8 = (PCShared_base *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24));
      else
        v8 = 0;
      return PCSharedCount::PCSharedCount(a2 + 3, v8);
    case 5:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(v22, "not implemented yet");
      PCString::PCString((PCString *)&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(exception, v22, (const PCString *)&v16, 1924);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    default:
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse arguments must be vectors", v5);
  }
}

void sub_1B2D7987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  void *v9;
  int v10;
  uint64_t v11;

  PCString::~PCString(&a9);
  PCString::~PCString((PCString *)(v11 - 160));
  if (v10)
    __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65765F8);
  *(_QWORD *)a1 = &unk_1E6576520;
  *(_QWORD *)(a1 + 72) = &unk_1E65765D8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D799BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576520;
  *(_QWORD *)(a1 + 72) = &unk_1E65765D8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576638;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65766F0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_inverse>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576520;
  *(_QWORD *)(a1 + 72) = &unk_1E65765D8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576638;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E65766F0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_inverse>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "inverse");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D79C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_inverse>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 20, 0x8903763CuLL);
  v5[1] = v4 + 7;
  v5[2] = v4 + 8;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (unsigned int *)((char *)v5 + v4 + 12);
  *v6 = 1702260329;
  *(_DWORD *)((char *)v6 + 3) = 1702064741;
  *((_BYTE *)v5 + v4 + 19) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D79D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_inverse>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "inverse");
}

int8x8_t *ProShade::Func<ProShade::Func_inverse>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "inverse");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_inverse>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_inverse>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D79FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E65765F8);
  *(_QWORD *)v2 = &unk_1E6576520;
  *(_QWORD *)(v2 + 72) = &unk_1E65765D8;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D7A138(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void *ProShade::Func<ProShade::Func_inverse>::computeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ProShade::Func_inverse::computeValue(a2, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::Func_inverse>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576520;
  *((_QWORD *)v1 + 9) = &unk_1E65765D8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576638;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65766F0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576520;
  *((_QWORD *)v1 + 9) = &unk_1E65765D8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576638;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E65766F0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_inverse>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65765F8);
  *(_QWORD *)a1 = &unk_1E6576520;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E65765D8;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D7A424(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void *ProShade::Func_inverse::computeValue(uint64_t a1, uint64_t a2)
{
  double *v3;
  const PCString *v4;
  unsigned int v5;
  __int128 v6;
  PCException *exception;
  PCException *v9;
  _BYTE v10[48];
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];
  PCString v14;

  if (*(int *)(a1 + 12) <= 0)
    PCArray_base::badIndex((PCArray_base *)a1);
  v3 = *(double **)(a1 + 16);
  if (*(_DWORD *)v3 != 3)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)v10, "not implemented yet");
    PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, (const PCString *)v10, &v14, 1950);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (!ProShade::shapeIsMatrix(*((_DWORD *)v3 + 1)))
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse applies only to matrices", v4);
  v5 = *((_DWORD *)v3 + 1);
  switch(v5)
  {
    case 6u:
      *(_OWORD *)v10 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v10[16] = 0;
      *(_QWORD *)&v10[24] = 0;
      *(_QWORD *)&v10[32] = 0x3FF0000000000000;
      *(_QWORD *)&v10[40] = 0;
      v11 = 0uLL;
      *(_QWORD *)&v12 = 0x3FF0000000000000;
      if (!PCMatrix33Tmpl<double>::invert((double *)v10, v3 + 2, 0.0))
      {
        *(_QWORD *)&v12 = 0;
        v6 = 0uLL;
        goto LABEL_11;
      }
      break;
    case 7u:
      *((_QWORD *)&v13[2] + 1) = 0x3FF0000000000000;
      *(_QWORD *)&v13[0] = 0x3FF0000000000000;
      *(_QWORD *)&v10[40] = 0x3FF0000000000000;
      *(_QWORD *)v10 = 0x3FF0000000000000;
      memset(&v10[8], 0, 32);
      v11 = 0u;
      v12 = 0u;
      memset((char *)v13 + 8, 0, 32);
      if (!PCMatrix44Tmpl<double>::invert((double *)v10, v3 + 2, 0.0))
      {
        v6 = 0uLL;
        v12 = 0u;
        memset(v13, 0, sizeof(v13));
LABEL_11:
        *(_OWORD *)&v10[32] = v6;
        v11 = v6;
        *(_OWORD *)v10 = v6;
        *(_OWORD *)&v10[16] = v6;
      }
      break;
    case 5u:
      v9 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString((PCString *)v10, "not implemented yet");
      PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
      PCException::PCException(v9, (const PCString *)v10, &v14, 1958);
      *(_QWORD *)v9 = &unk_1E64FFFA0;
    default:
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"inverse arguments must be matrices", v4);
  }
  return ProShade::Value::set(a2, (const PCString *)*(unsigned int *)v3, *((_DWORD *)v3 + 1), v10);
}

void sub_1B2D7A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  void *v9;
  char v10;
  uint64_t v11;

  PCString::~PCString((PCString *)(v11 - 40));
  PCString::~PCString(&a9);
  if ((v10 & 1) != 0)
    __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdx>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  ProShade::Const *v5;
  PC_Sp_counted_base *v6;
  PCShared_base *v7;
  PC_Sp_counted_base *v8;
  PCSharedCount v9;
  PCSharedCount v10;

  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = (PC_Sp_counted_base *)ProShade::Const::create(v5, 0.0);
    v9.var0 = v6;
    if (v6)
      v7 = (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24));
    else
      v7 = 0;
    PCSharedCount::PCSharedCount(&v10, v7);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v9);
  }
  else
  {
    v9.var0 = 0;
    PCSharedCount::PCSharedCount(&v10);
    v8 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_dFdx>::Func((uint64_t)v8, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v8;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  }
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B2D7A808(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576870);
  *(_QWORD *)a1 = &unk_1E6576798;
  *(_QWORD *)(a1 + 72) = &unk_1E6576850;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D7A94C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576798;
  *(_QWORD *)(a1 + 72) = &unk_1E6576850;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65768B0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576968;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_dFdx>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576798;
  *(_QWORD *)(a1 + 72) = &unk_1E6576850;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E65768B0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576968;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_dFdx>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "dFdx");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D7AB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdx>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 2019837540;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D7ACB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdx>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "dFdx");
}

int8x8_t *ProShade::Func<ProShade::Func_dFdx>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "dFdx");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_dFdx>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D7AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6576870);
  *(_QWORD *)v2 = &unk_1E6576798;
  *(_QWORD *)(v2 + 72) = &unk_1E6576850;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D7B0B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdx>::computeValue()
{
  ProShade::Func_dFdx::computeValue();
}

void `virtual thunk to'ProShade::Func<ProShade::Func_dFdx>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576798;
  *((_QWORD *)v1 + 9) = &unk_1E6576850;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65768B0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576968;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576798;
  *((_QWORD *)v1 + 9) = &unk_1E6576850;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E65768B0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576968;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_dFdx>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576870);
  *(_QWORD *)a1 = &unk_1E6576798;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576850;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D7B3A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_dFdx::computeValue()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 1595);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D7B46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdy>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  ProShade::Const *v5;
  PC_Sp_counted_base *v6;
  PCShared_base *v7;
  PC_Sp_counted_base *v8;
  PCSharedCount v9;
  PCSharedCount v10;

  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = (PC_Sp_counted_base *)ProShade::Const::create(v5, 0.0);
    v9.var0 = v6;
    if (v6)
      v7 = (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24));
    else
      v7 = 0;
    PCSharedCount::PCSharedCount(&v10, v7);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v9);
  }
  else
  {
    v9.var0 = 0;
    PCSharedCount::PCSharedCount(&v10);
    v8 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::Func_dFdy>::Func((uint64_t)v8, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v8;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  }
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B2D7B5F0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576AE8);
  *(_QWORD *)a1 = &unk_1E6576A10;
  *(_QWORD *)(a1 + 72) = &unk_1E6576AC8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D7B734(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576A10;
  *(_QWORD *)(a1 + 72) = &unk_1E6576AC8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576B28;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576BE0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_dFdy>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576A10;
  *(_QWORD *)(a1 + 72) = &unk_1E6576AC8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576B28;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576BE0;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_dFdy>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "dFdy");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D7B984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdy>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 2036614756;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D7BA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_dFdy>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "dFdy");
}

int8x8_t *ProShade::Func<ProShade::Func_dFdy>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "dFdy");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_dFdy>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D7BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6576AE8);
  *(_QWORD *)v2 = &unk_1E6576A10;
  *(_QWORD *)(v2 + 72) = &unk_1E6576AC8;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D7BEA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_dFdy>::computeValue()
{
  ProShade::Func_dFdy::computeValue();
}

void `virtual thunk to'ProShade::Func<ProShade::Func_dFdy>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576A10;
  *((_QWORD *)v1 + 9) = &unk_1E6576AC8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576B28;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576BE0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576A10;
  *((_QWORD *)v1 + 9) = &unk_1E6576AC8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576B28;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576BE0;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::Func_dFdy>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576AE8);
  *(_QWORD *)a1 = &unk_1E6576A10;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576AC8;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D7C18C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_dFdy::computeValue()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 1635);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D7C254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  PC_Sp_counted_base *v14;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17;

  v8 = *(const void **)(a1 + 16);
  if (v8)
  else
    v9 = 0;
  v10 = *(const void **)(a2 + 16);
  if (v10)
  else
    v11 = 0;
  v12 = *(const void **)(a3 + 16);
  if (v12
  {
    ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::compute((uint64_t)v9, (uint64_t)v11, (uint64_t)v13, &v15);
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4 + 2, &v16);
    v15.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
    PCSharedCount::~PCSharedCount(&v17);
  }
  else
  {
    v14 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::Func((uint64_t)v14, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16), *(_QWORD **)(a3 + 16));
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a4[2].var0 = v14;
    PCSharedCount::PCSharedCount(a4 + 3, (PCShared_base *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  }
}

void sub_1B2D7C40C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCSharedCount *a4@<X8>)
{
  int v8;
  int v9;
  const ProShade::Value *v10;
  ProShade::ConstVector *v11;
  PCShared_base *v12;
  OZChannelBase v14;
  _QWORD v15[18];
  _QWORD v16[18];
  _QWORD v17[19];

  v17[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v17);
  ProShade::Value::Value(v16);
  ProShade::Value::Value(v15);
  ProShade::Value::Value(&v14);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v17);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 224))(a3, v15);
  if (SLODWORD(v17[0]) > 1)
  {
    if (LODWORD(v17[0]) != 2)
      goto LABEL_11;
    v8 = v16[0];
    goto LABEL_7;
  }
  v8 = v16[0];
  if (SLODWORD(v16[0]) >= 2)
  {
LABEL_7:
    if (v8 > 2)
      goto LABEL_11;
    v9 = v15[0];
    goto LABEL_9;
  }
  v9 = v15[0];
  if (SLODWORD(v15[0]) < 2)
  {
    ProShade::eval_type<ProShade::clamp_traits,BOOL>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
    goto LABEL_12;
  }
LABEL_9:
  if (v9 <= 2)
  {
    ProShade::eval_type<ProShade::clamp_traits,int>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
    goto LABEL_12;
  }
LABEL_11:
  ProShade::eval_type<ProShade::clamp_traits,double>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, &v14);
LABEL_12:
  v11 = ProShade::Const::create((ProShade::Const *)&v14, v10);
  a4->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a4[2].var0 = (PC_Sp_counted_base *)v11;
  if (v11)
    v12 = (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24));
  else
    v12 = 0;
  return PCSharedCount::PCSharedCount(a4 + 3, v12);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  PCShared_base *v10;
  int v11;
  int v12;
  PCShared_base *v13;
  int v14;
  int v15;
  PCArray_base *v16;
  int v17;
  PCSharedCount v19[2];
  _QWORD *v20;
  PCSharedCount v21;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576D60);
  *(_QWORD *)a1 = &unk_1E6576C88;
  *(_QWORD *)(a1 + 72) = &unk_1E6576D40;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a2;
  PCSharedCount::PCSharedCount(&v21, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v8 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v8)
    v9 = (2 * (v8 + 1)) | 1;
  else
    v9 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v8 + 1, v9);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a3;
  if (a3)
    v10 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v10 = 0;
  PCSharedCount::PCSharedCount(&v21, v10);
  v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v11)
    v12 = (2 * (v11 + 1)) | 1;
  else
    v12 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v11 + 1, v12);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = a4;
  if (a4)
    v13 = (PCShared_base *)((char *)a4 + *(_QWORD *)(*a4 - 24));
  else
    v13 = 0;
  PCSharedCount::PCSharedCount(&v21, v13);
  v14 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v14)
    v15 = (2 * (v14 + 1)) | 1;
  else
    v15 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v14 + 1, v15);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v19);
  v19[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v17 = *(_DWORD *)(a1 + 60);
  if (v17 < 1)
    PCArray_base::badIndex(v16);
  if (v17 < 2)
    PCArray_base::badIndex(v16);
  if (v17 <= 2)
    PCArray_base::badIndex(v16);
  ProShade::ScalarFunctionTraits_3<ProShade::mix_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 64));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D7C880(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::clamp_traits,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  const PCString *v7;
  uint64_t result;
  const PCString *v9;
  PCException *exception;
  PCString v11;
  PCString v12;

  ProShade::Value::set((uint64_t)a4, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v12, "not implemented yet");
    PCString::PCString(&v11, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v12, &v11, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"clamp doesn't apply to BOOL", v9);
  return result;
}

void sub_1B2D7C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::clamp_traits,int>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  void ***Serializer;
  const PCString *v9;
  uint64_t result;
  int *v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  PCException *exception;
  PCString v21;
  PCString v22;

  ProShade::Value::set((uint64_t)a4, (const PCString *)2, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    v11 = (int *)(a3 + 16);
    v12 = (int *)(a2 + 16);
    v13 = (int *)(a1 + 16);
    do
    {
      v15 = *v13++;
      v14 = v15;
      v17 = *v12++;
      v16 = v17;
      v19 = *v11++;
      v18 = v19;
      if (v14 >= v19)
        v14 = v18;
      if (v14 <= v16)
        v14 = v16;
      *(_DWORD *)Serializer = v14;
      Serializer = (void ***)((char *)Serializer + 4);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D7CB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::clamp_traits,double>(uint64_t a1, uint64_t a2, uint64_t a3, OZChannelBase *a4)
{
  void ***Serializer;
  const PCString *v9;
  uint64_t result;
  double *v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  PCException *exception;
  PCString v21;
  PCString v22;

  ProShade::Value::set((uint64_t)a4, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "not implemented yet");
    PCString::PCString(&v21, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v22, &v21, 463);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v9);
  if ((int)result >= 1)
  {
    v11 = (double *)(a3 + 16);
    v12 = (double *)(a2 + 16);
    v13 = (double *)(a1 + 16);
    do
    {
      v14 = *v13++;
      v15 = v14;
      v16 = *v12++;
      v17 = v16;
      v18 = *v11++;
      v19 = v18;
      if (v15 > v18)
        v15 = v19;
      if (v15 < v17)
        v15 = v17;
      *(double *)Serializer++ = v15;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D7CC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576C88;
  *(_QWORD *)(a1 + 72) = &unk_1E6576D40;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576DA0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576E58;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6576C88;
  *(_QWORD *)(a1 + 72) = &unk_1E6576D40;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6576DA0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6576E58;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "clamp");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D7CEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 18, 0x8903763CuLL);
  v5[1] = v4 + 5;
  v5[2] = v4 + 6;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)v6 = 1835101283;
  v6[4] = 112;
  *((_BYTE *)v5 + v4 + 17) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D7D014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "clamp");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "clamp");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D7D2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6576D60);
  *(_QWORD *)v2 = &unk_1E6576C88;
  *(_QWORD *)(v2 + 72) = &unk_1E6576D40;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D7D418(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::computeValue(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  return ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::computeValue(a2, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576C88;
  *((_QWORD *)v1 + 9) = &unk_1E6576D40;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576DA0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576E58;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6576C88;
  *((_QWORD *)v1 + 9) = &unk_1E6576D40;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6576DA0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6576E58;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6576D60);
  *(_QWORD *)a1 = &unk_1E6576C88;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6576D40;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D7D704(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ScalarFunctionTraits_3<ProShade::clamp_traits>::computeValue(uint64_t a1, OZChannelBase *a2)
{
  int v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1)
    PCArray_base::badIndex((PCArray_base *)a1);
  v4 = *(int **)(a1 + 16);
  if (v3 < 2)
    PCArray_base::badIndex((PCArray_base *)a1);
  if (v3 <= 2)
    PCArray_base::badIndex((PCArray_base *)a1);
  v5 = v4 + 36;
  v6 = v4 + 72;
  if (*v4 >= 2)
  {
    if (*v4 != 2)
      return ProShade::eval_type<ProShade::clamp_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
    v7 = *v5;
    goto LABEL_13;
  }
  v7 = *v5;
  if (*v5 >= 2)
  {
LABEL_13:
    if (v7 > 2)
      return ProShade::eval_type<ProShade::clamp_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
    v8 = *v6;
    goto LABEL_15;
  }
  v8 = *v6;
  if (*v6 < 2)
    return ProShade::eval_type<ProShade::clamp_traits,BOOL>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
LABEL_15:
  if (v8 <= 2)
    return ProShade::eval_type<ProShade::clamp_traits,int>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
  return ProShade::eval_type<ProShade::clamp_traits,double>(*(_QWORD *)(a1 + 16), (uint64_t)v5, (uint64_t)v6, a2);
}

PCSharedCount *ProShade::Float::Float(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = a2[2].var0;
  PCSharedCount::PCSharedCount(a1 + 3, a2 + 3);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6576EF8;
  ProShade::Float::checkType((ProShade::Float *)a1);
  return a1;
}

void sub_1B2D7D898(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Float::checkType(ProShade::Float *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 128))(v1, 3, 1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, double a2)
{
  *((_QWORD *)this + 10) = &off_1E65EB048;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1E657E068);
  *(_QWORD *)this = &unk_1E657E588;
  *((_QWORD *)this + 10) = &unk_1E657E690;
  *(_QWORD *)this = &off_1E657DF38;
  *((_QWORD *)this + 10) = &unk_1E657E040;
  *((double *)this + 6) = a2;
  *((double *)this + 7) = a2;
  *((double *)this + 8) = a2;
  *((double *)this + 9) = a2;
  *((_QWORD *)this + 3) = 0x100000003;
  return this;
}

void sub_1B2D7D998(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 80) = v4;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, float a2)
{
  *((_QWORD *)this + 10) = &off_1E65EB048;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1E657E068);
  *(_QWORD *)this = &unk_1E657E588;
  *((_QWORD *)this + 10) = &unk_1E657E690;
  *(_QWORD *)this = &off_1E657DF38;
  *((_QWORD *)this + 10) = &unk_1E657E040;
  *((double *)this + 6) = a2;
  *((double *)this + 7) = a2;
  *((double *)this + 8) = a2;
  *((double *)this + 9) = a2;
  *((_QWORD *)this + 3) = 0x100000003;
  return this;
}

void sub_1B2D7DA60(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 80) = v4;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t LoadLockCache::instance(LoadLockCache *this)
{
  unsigned __int8 v1;
  LoadLockCache *v3;

  {
    v3 = (LoadLockCache *)operator new();
    LoadLockCache::LoadLockCache(v3);
    LoadLockCache::instance(void)::instance = (uint64_t)v3;
  }
  return LoadLockCache::instance(void)::instance + 8;
}

void sub_1B2D7DAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A64E3564);
  _Unwind_Resume(a1);
}

void LoadLockCache::LoadLockCache(LoadLockCache *this)
{
  uint64_t v2;

  PCSingleton::PCSingleton(this, 0);
  *(_QWORD *)v2 = &off_1E6576F38;
  PCMutex::PCMutex((PCMutex *)(v2 + 8));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
}

void sub_1B2D7DB78(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void LoadLockCache::~LoadLockCache(LoadLockCache *this)
{
  PCMutex *v2;

  *(_QWORD *)this = &off_1E6576F38;
  v2 = (PCMutex *)((char *)this + 8);
  std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  PCMutex::~PCMutex(v2);
  PCSingleton::~PCSingleton(this);
}

{
  LoadLockCache::~LoadLockCache(this);
  JUMPOUT(0x1B5E29170);
}

void LiTransform::LiTransform(LiTransform *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 25) = 0x3FF0000000000000;
  *((_QWORD *)this + 20) = 0x3FF0000000000000;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 24) = _Q0;
  *(_OWORD *)((char *)this + 40) = _Q0;
}

double PCMatrix44Tmpl<double>::rightRotate(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v7 = 0x3FF0000000000000;
  v4 = 0x3FF0000000000000;
  v5 = 0u;
  v6 = 0u;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v4, a2);
  return PCMatrix44Tmpl<double>::rightMult(a1, (double *)&v4);
}

int8x8_t *LiMaterialLayerOperator::writeHash(LiMaterialLayerOperator *this, int8x8_t *a2)
{
  if (!this)
    __cxa_bad_typeid();
  return PCHashWriteStream::writeValue(a2, (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
}

void LiMaterialLayer::LiMaterialLayer(LiMaterialLayer *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *(_QWORD *)this = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[2];
  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_WORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = -1;
  *((_QWORD *)this + 2) = a3;
  *((_WORD *)this + 12) = 257;
}

void LiMaterialLayer::getHash(LiMaterialLayer *this)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  int8x8_t v4[521];

  v1 = MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v4[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v4);
  (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v1 + 56))(v1, v4);
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v4)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v4);
}

void sub_1B2D7DDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

int8x8_t *LiMaterialLayer::writeHash(LiMaterialLayer *this, int8x8_t *a2)
{
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 8));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 9));
  return PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 24));
}

_QWORD *LiMaterialLayer::print(uint64_t a1, _QWORD *a2, int a3)
{
  size_t v6;
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *v16;

  LiImageSource::printIndent(a2, a3);
  if (!a1)
    __cxa_bad_typeid();
  v6 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n", 1);
  if (*(_BYTE *)(a1 + 8))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"separateEnvResponse: ", 21);
    if (*(_BYTE *)(a1 + 8))
      v10 = "true";
    else
      v10 = "false";
    if (*(_BYTE *)(a1 + 8))
      v11 = 4;
    else
      v11 = 5;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  }
  if (*(_BYTE *)(a1 + 9))
  {
    LiImageSource::printIndent(a2, a3 + 1);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"onlyWhereOpaque: ", 17);
    if (*(_BYTE *)(a1 + 9))
      v14 = "true";
    else
      v14 = "false";
    if (*(_BYTE *)(a1 + 9))
      v15 = 4;
    else
      v15 = 5;
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  }
  return result;
}

void LiMaterialLayer::clampColorToEdge(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  uint64_t v16;
  uint64_t v17;
  PC_Sp_counted_base *v18;
  PCSharedCount v19;
  void *v20;
  PC_Sp_counted_base *v21;
  PCSharedCount v22;
  _QWORD v23[2];
  PC_Sp_counted_base *v24;
  PCSharedCount v25;
  _QWORD v26[3];
  PCSharedCount v27;
  _QWORD v28[2];
  PC_Sp_counted_base *v29;
  PCSharedCount v30;
  PCSharedCount v31[2];
  PC_Sp_counted_base *v32;
  PCSharedCount v33;
  PCSharedCount v34[2];
  PC_Sp_counted_base *v35;
  PCSharedCount v36;
  _QWORD v37[2];
  PC_Sp_counted_base *v38;
  PCSharedCount v39;
  _QWORD v40[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v42;
  PCSharedCount v43[3];
  PCSharedCount v44;
  PCSharedCount v45[3];
  PCSharedCount v46;
  _QWORD v47[2];
  void *v48;
  PCSharedCount v49;
  PCSharedCount v50;
  PCSharedCount v51;
  PC_Sp_counted_base *v52;
  PCSharedCount v53[2];

  if (*a1)
  {
    *(_QWORD *)a5 = &unk_1E6569AC8;
    *(_BYTE *)(a5 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a5 + 16) = *(_QWORD *)(a2 + 16);
    PCSharedCount::PCSharedCount((PCSharedCount *)(a5 + 24), (const PCSharedCount *)(a2 + 24));
  }
  else
  {
    v17 = a3 + 8;
    ProShade::Selector_base::_select(a3 + 8, 0, &v50);
    v40[0] = &unk_1E6569AC8;
    var0 = v50.var0;
    PCSharedCount::PCSharedCount(&v42, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    v37[0] = &unk_1E6569AC8;
    v8 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v8, 2.0);
    v38 = (PC_Sp_counted_base *)v8;
    PCSharedCount::PCSharedCount(&v39, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    ProShade::operator/(v43, v40, v37);
    v16 = a4 + 8;
    ProShade::Selector_base::_select(a4 + 8, 0, &v50);
    v35 = v50.var0;
    PCSharedCount::PCSharedCount(&v36, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v52 = v43[2].var0;
    PCSharedCount::PCSharedCount(v53, &v44);
    v47[0] = &unk_1E6569AC8;
    v48 = v35;
    PCSharedCount::PCSharedCount(&v49, &v36);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v50, (uint64_t)v47, v45);
    v47[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v53);
    PCSharedCount::~PCSharedCount(&v36);
    v43[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v44);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v40[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v42);
    ProShade::Selector_base::_select(v17, (const PCString *)1, &v50);
    v37[0] = &unk_1E6569AC8;
    v38 = v50.var0;
    PCSharedCount::PCSharedCount(&v39, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v9 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v9, 2.0);
    v35 = (PC_Sp_counted_base *)v9;
    PCSharedCount::PCSharedCount(&v36, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    ProShade::operator/(v40, v37, v34);
    ProShade::Selector_base::_select(v16, (const PCString *)1, &v50);
    v32 = v50.var0;
    PCSharedCount::PCSharedCount(&v33, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v52 = var0;
    PCSharedCount::PCSharedCount(v53, &v42);
    v47[0] = &unk_1E6569AC8;
    v48 = v32;
    PCSharedCount::PCSharedCount(&v49, &v33);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v50, (uint64_t)v47, v43);
    v47[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v53);
    v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v33);
    v40[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v42);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v37[0] = &unk_1E6569AC8;
    v10 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v10, 1.0);
    v38 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v39, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    ProShade::Selector_base::_select(v17, 0, &v50);
    v26[0] = &unk_1E6569AC8;
    v26[2] = v50.var0;
    PCSharedCount::PCSharedCount(&v27, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    ProShade::operator-(v28, v26);
    v23[0] = &unk_1E6569AC8;
    v11 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v11, 2.0);
    v24 = (PC_Sp_counted_base *)v11;
    PCSharedCount::PCSharedCount(&v25, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    ProShade::operator/(v31, v28, v23);
    ProShade::Selector_base::_select(v16, 0, &v50);
    v21 = v50.var0;
    PCSharedCount::PCSharedCount(&v22, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v52 = v32;
    PCSharedCount::PCSharedCount(v53, &v33);
    v47[0] = &unk_1E6569AC8;
    v48 = v21;
    PCSharedCount::PCSharedCount(&v49, &v22);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v50, (uint64_t)v47, v34);
    v47[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v53);
    ProShade::operator-(v40, v37, v34);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v20 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v22);
    v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v33);
    v23[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v25);
    v28[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v30);
    v26[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v27);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v12, 1.0);
    v35 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(&v36, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    ProShade::Selector_base::_select(v17, (const PCString *)1, &v50);
    v23[0] = &unk_1E6569AC8;
    v24 = v50.var0;
    PCSharedCount::PCSharedCount(&v25, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    ProShade::operator-(v26, v23);
    v20 = &unk_1E6569AC8;
    v13 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v13, 2.0);
    v21 = (PC_Sp_counted_base *)v13;
    PCSharedCount::PCSharedCount(&v22, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
    ProShade::operator/(v28, v26, &v20);
    ProShade::Selector_base::_select(v16, (const PCString *)1, &v50);
    v18 = v50.var0;
    PCSharedCount::PCSharedCount(&v19, &v51);
    PCSharedCount::~PCSharedCount(&v51);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v52 = v29;
    PCSharedCount::PCSharedCount(v53, &v30);
    v47[0] = &unk_1E6569AC8;
    v48 = v18;
    PCSharedCount::PCSharedCount(&v49, &v19);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v50, (uint64_t)v47, v31);
    v47[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v53);
    ProShade::operator-(v37, v34, v31);
    v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v33);
    PCSharedCount::~PCSharedCount(&v19);
    v28[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v30);
    v20 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v22);
    v26[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v27);
    v23[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v25);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v14 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v14, 1.0);
    v32 = (PC_Sp_counted_base *)v14;
    PCSharedCount::PCSharedCount(&v33, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
    ProShade::operator+(v23, v45, v43);
    ProShade::operator+(v26, v23, v40);
    ProShade::operator+(v28, v26, v37);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v52 = v32;
    PCSharedCount::PCSharedCount(v53, &v33);
    v47[0] = &unk_1E6569AC8;
    v48 = v29;
    PCSharedCount::PCSharedCount(&v49, &v30);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v50, (uint64_t)v47, v34);
    v47[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v53);
    v28[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v30);
    v26[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v27);
    v23[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v25);
    v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v33);
    v47[0] = &unk_1E6569AC8;
    v15 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v15, 1.0);
    v48 = v15;
    PCSharedCount::PCSharedCount(&v49, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
    ProShade::operator-(&v50, v47, v34);
    ProShade::operator*((_QWORD *)a5, a2, &v50);
    v50.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v53);
    v47[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v40[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v42);
    v43[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v44);
    v45[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
  }
}

void sub_1B2D7E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,PCSharedCount a39,void *a40,uint64_t a41,uint64_t a42,PCSharedCount a43)
{
  PCSharedCount *v43;
  PCSharedCount *v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)(v46 - 120) = v45 + 16;
  PCSharedCount::~PCSharedCount(v44 + 3);
  *(_QWORD *)(v46 - 152) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v43);
  PCSharedCount::~PCSharedCount(&a39);
  a40 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a43);
  *(_QWORD *)(v46 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v46 - 224));
  *(_QWORD *)(v46 - 216) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v46 - 192));
  *(_QWORD *)(v46 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v46 - 160));
  _Unwind_Resume(a1);
}

void sub_1B2D7F004()
{
  JUMPOUT(0x1B2D7EFC4);
}

void LiMaterialLayer::sampleTextureMap(const PCSharedCount *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  uint64_t v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  PCSharedCount v23;
  PCSharedCount v24;
  PCSharedCount v25[2];
  PCSharedCount v26;
  _QWORD v27[3];
  PCSharedCount v28;
  PCSharedCount v29;
  PCSharedCount v30[2];
  PCSharedCount v31;
  _QWORD v32[3];
  PCSharedCount v33;
  PCSharedCount v34;
  PCSharedCount v35[2];
  PCSharedCount v36;
  PCSharedCount v37;
  PCSharedCount v38[2];
  PCSharedCount v39;
  PCSharedCount v40[3];
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43[2];
  PCSharedCount v44;
  PCSharedCount v45;
  PCSharedCount v46;
  PC_Sp_counted_base *v47;
  PCSharedCount v48;
  PCSharedCount v49;
  PCSharedCount v50;
  PC_Sp_counted_base *v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54;
  PC_Sp_counted_base *v55;
  PCSharedCount v56;
  PCSharedCount v57;
  _BYTE v58[8];
  PC_Sp_counted_base *var0;
  PCSharedCount v60;
  PCSharedCount v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  PCSharedCount v71;
  uint64_t v72;
  __int128 v73;
  PCSharedCount v74;
  char v75;
  ProShade::ConstVector *v76;
  PCSharedCount v77;
  PCSharedCount v78;
  char v79;
  ProShade::ConstVector *v80;
  PCSharedCount v81;
  void *v82;
  char v83;
  ProShade::ConstVector *v84;
  PCSharedCount v85;
  void *v86;
  char v87;
  ProShade::ConstVector *v88;
  PCSharedCount v89;
  _QWORD v90[2];
  ProShade::ConstVector *v91;
  PCSharedCount v92;
  void *v93;
  uint64_t v94;
  ProShade::ConstVector *v95;
  PCSharedCount v96;
  PCSharedCount v97;
  PCSharedCount v98[2];

  v93 = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0);
  v95 = v8;
  PCSharedCount::PCSharedCount(&v96, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  v90[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0);
  v91 = v9;
  PCSharedCount::PCSharedCount(&v92, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v21 = a4;
  v86 = &unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0);
  v88 = v10;
  PCSharedCount::PCSharedCount(&v89, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v82 = &unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 1);
  v84 = v11;
  PCSharedCount::PCSharedCount(&v85, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  ProShade::Vec4::Vec4(&v61, &v93, v90, &v86, &v82);
  *(_QWORD *)v21 = &unk_1E6569AC8;
  *(_BYTE *)(v21 + 8) = v62;
  v20 = v21 + 8;
  *(_QWORD *)(v21 + 16) = *((_QWORD *)&v62 + 1);
  PCSharedCount::PCSharedCount((PCSharedCount *)(v21 + 24), (const PCSharedCount *)&v63);
  v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v63);
  v82 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v85);
  v86 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  v90[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v93 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v96);
  if (*(_BYTE *)a3)
  {
    v93 = &unk_1E6569AC8;
    v95 = 0;
    PCSharedCount::PCSharedCount(&v96);
    v90[0] = &unk_1E6569AC8;
    v91 = 0;
    PCSharedCount::PCSharedCount(&v92);
    v86 = &unk_1E6569AC8;
    v88 = 0;
    PCSharedCount::PCSharedCount(&v89);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v12, 0.0);
    v80 = v12;
    PCSharedCount::PCSharedCount(&v81, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    ProShade::Vec2::Vec2(&v61, &v78);
    v82 = &unk_1E6569AC8;
    v83 = v62;
    v84 = (ProShade::ConstVector *)*((_QWORD *)&v62 + 1);
    PCSharedCount::PCSharedCount(&v85, (const PCSharedCount *)&v63);
    v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v63);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v13 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v13, 0.0);
    v76 = v13;
    PCSharedCount::PCSharedCount(&v77, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
    ProShade::Vec2::Vec2(&v61, &v74);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v79 = v62;
    v80 = (ProShade::ConstVector *)*((_QWORD *)&v62 + 1);
    PCSharedCount::PCSharedCount(&v81, (const PCSharedCount *)&v63);
    v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v63);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v14 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v14, 0.0);
    *(_QWORD *)&v73 = v14;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v73 + 1, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
    ProShade::Vec2::Vec2(&v61, &v71);
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v75 = v62;
    v76 = (ProShade::ConstVector *)*((_QWORD *)&v62 + 1);
    PCSharedCount::PCSharedCount(&v77, (const PCSharedCount *)&v63);
    v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v63);
    v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v73 + 1);
    if (*(_BYTE *)(a3 + 1))
    {
      v70 = 0x3FF0000000000000;
      v67 = 0x3FF0000000000000;
      v64 = 0x3FF0000000000000;
      v61.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
      v62 = 0u;
      v63 = 0u;
      v65 = 0u;
      v66 = 0u;
      v68 = 0u;
      v69 = 0u;
      if (*(_BYTE *)(a3 + 2))
      {
        v72 = 0;
        v71.var0 = 0;
        v73 = xmmword_1B304EED0;
        PCMatrix44Tmpl<double>::rotate((uint64_t)&v61, (double *)&v71, 0, 1.57079633);
      }
      ProShade::Mat4::Mat4(&v57, (uint64_t)&v61);
      v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      LOBYTE(v72) = v58[0];
      *(_QWORD *)&v73 = var0;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v73 + 1, &v60);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      ProShade::operator*(&v49, a2, &v71);
      ProShade::operator*(&v53, &v49, &v93);
      ProShade::Selector_base::_select((uint64_t)&v54, (const PCString *)4, &v45);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v45.var0;
      PCSharedCount::PCSharedCount(&v60, &v46);
      PCSharedCount::~PCSharedCount(&v46);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v82, &v57);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v52);
      ProShade::operator*(&v49, a2, &v71);
      ProShade::operator*(&v53, &v49, v90);
      ProShade::Selector_base::_select((uint64_t)&v54, (const PCString *)4, &v45);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v45.var0;
      PCSharedCount::PCSharedCount(&v60, &v46);
      PCSharedCount::~PCSharedCount(&v46);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v78, &v57);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v52);
      ProShade::operator*(&v53, a2, &v86);
      ProShade::Selector_base::_select((uint64_t)&v54, (const PCString *)4, &v49);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v49.var0;
      PCSharedCount::PCSharedCount(&v60, &v50);
      PCSharedCount::~PCSharedCount(&v50);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v74, &v57);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      ProShade::Sampler::sample(a1, (uint64_t)&v82, &v57);
      ProShade::Sampler::sample(a1, (uint64_t)&v78, &v53);
      ProShade::Sampler::sample(a1, (uint64_t)&v74, &v49);
      ProShade::Selector_base::_select((uint64_t)&a1[5], (const PCString *)2, &v37);
      v40[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v40[2] = v37;
      PCSharedCount::PCSharedCount(&v41, v38);
      PCSharedCount::~PCSharedCount(v38);
      ProShade::Selector_base::_select((uint64_t)&a1[5], (const PCString *)3, &v34);
      v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v38[1] = v34;
      PCSharedCount::PCSharedCount(&v39, v35);
      PCSharedCount::~PCSharedCount(v35);
      ProShade::Vec2::Vec2(&v42, v40, &v37);
      v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      LOBYTE(v46.var0) = v43[0].var0;
      v47 = v43[1].var0;
      PCSharedCount::PCSharedCount(&v48, &v44);
      v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v44);
      v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v39);
      v40[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v41);
      LiMaterialLayer::clampColorToEdge((_DWORD *)(a3 + 4), (uint64_t)&v57, (uint64_t)&v45, (uint64_t)&v82, (uint64_t)&v42);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v57, &v42);
      v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v44);
      LiMaterialLayer::clampColorToEdge((_DWORD *)(a3 + 4), (uint64_t)&v53, (uint64_t)&v45, (uint64_t)&v78, (uint64_t)&v42);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v53, &v42);
      v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v44);
      LiMaterialLayer::clampColorToEdge((_DWORD *)(a3 + 4), (uint64_t)&v49, (uint64_t)&v45, (uint64_t)&v74, (uint64_t)&v42);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v49, &v42);
      v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v44);
      LiMaterialLayer::calculateTriplanarNormal((uint64_t)&v42);
      ProShade::Selector_base::_select((uint64_t)v43, 0, &v29);
      v32[0] = &unk_1E6569AC8;
      v32[2] = v29.var0;
      PCSharedCount::PCSharedCount(&v33, v30);
      PCSharedCount::~PCSharedCount(v30);
      ProShade::operator*(&v34, v32, &v57);
      ProShade::Selector_base::_select((uint64_t)v43, (const PCString *)1, &v24);
      v27[0] = &unk_1E6569AC8;
      v27[2] = v24.var0;
      PCSharedCount::PCSharedCount(&v28, v25);
      PCSharedCount::~PCSharedCount(v25);
      ProShade::operator*(&v29, v27, &v53);
      ProShade::operator+(&v37, &v34, &v29);
      ProShade::Selector_base::_select((uint64_t)v43, (const PCString *)2, &v97);
      v22[0] = &unk_1E6569AC8;
      v22[2] = v97.var0;
      PCSharedCount::PCSharedCount(&v23, v98);
      PCSharedCount::~PCSharedCount(v98);
      ProShade::operator*(&v24, v22, &v49);
      ProShade::operator+(v40, &v37, &v24);
      ProShade::VarT<ProShade::Node>::operator=(v21, v40);
      v40[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v41);
      v24.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v26);
      v22[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v23);
      v37.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v39);
      v29.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v31);
      v27[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v28);
      v34.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v36);
      v32[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v44);
      v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v48);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v52);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v73 + 1);
      v15 = v21;
    }
    else
    {
      v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      LOBYTE(v62) = v87;
      *((_QWORD *)&v62 + 1) = v88;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v63, &v89);
      if (*(_BYTE *)(a3 + 20) && *(_BYTE *)(a3 + 2))
      {
        ProShade::Selector_base::_select((uint64_t)&v94, (const PCString *)1, &v53);
        v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        var0 = v53.var0;
        PCSharedCount::PCSharedCount(&v60, &v54);
        PCSharedCount::~PCSharedCount(&v54);
        v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v16 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v16, 0.0);
        v55 = (PC_Sp_counted_base *)v16;
        PCSharedCount::PCSharedCount(&v56, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
        v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v17 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v17, 0.0);
        v51 = (PC_Sp_counted_base *)v17;
        PCSharedCount::PCSharedCount(&v52, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
        v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v18 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v18, 1.0);
        v47 = (PC_Sp_counted_base *)v18;
        PCSharedCount::PCSharedCount(&v48, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
        ProShade::Vec4::Vec4(&v71, &v57, &v53, &v49, &v45);
        ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v61, &v71);
        v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v73 + 1);
        v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v48);
        v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v52);
        v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v56);
        v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v60);
      }
      ProShade::operator*(&v57, a2, &v61);
      ProShade::Selector_base::_select((uint64_t)v58, (const PCString *)4, &v53);
      v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      *(PCSharedCount *)&v73 = v53;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v73 + 1, &v54);
      PCSharedCount::~PCSharedCount(&v54);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      ProShade::Sampler::sample(a1, (uint64_t)&v71, &v57);
      ProShade::VarT<ProShade::Node>::operator=(v21, &v57);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      ProShade::Selector_base::_select((uint64_t)&a1[5], (const PCString *)2, &v45);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v51 = v45.var0;
      PCSharedCount::PCSharedCount(&v52, &v46);
      PCSharedCount::~PCSharedCount(&v46);
      ProShade::Selector_base::_select((uint64_t)&a1[5], (const PCString *)3, &v42);
      v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v47 = v42.var0;
      PCSharedCount::PCSharedCount(&v48, v43);
      PCSharedCount::~PCSharedCount(v43);
      ProShade::Vec2::Vec2(&v53, &v49, &v45);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v58[0] = v54.var0;
      var0 = v55;
      PCSharedCount::PCSharedCount(&v60, &v56);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v45.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v48);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v52);
      v15 = v21;
      LiMaterialLayer::clampColorToEdge((_DWORD *)(a3 + 4), v21, (uint64_t)&v57, (uint64_t)&v74, (uint64_t)&v53);
      ProShade::VarT<ProShade::Node>::operator=(v21, &v53);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v73 + 1);
      v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v63);
    }
    if (*(_BYTE *)(a3 + 3))
    {
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v19 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v19, 1);
      var0 = (PC_Sp_counted_base *)v19;
      PCSharedCount::PCSharedCount(&v60, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
      ProShade::Selector_base::_select(v20, (const PCString *)0x1D, &v49);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v55 = v49.var0;
      PCSharedCount::PCSharedCount(&v56, &v50);
      PCSharedCount::~PCSharedCount(&v50);
      ProShade::operator-(&v71, &v57, &v53);
      ProShade::Selector_base::_select(v20, (const PCString *)0x19, &v45);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v51 = v45.var0;
      PCSharedCount::PCSharedCount(&v52, &v46);
      PCSharedCount::~PCSharedCount(&v46);
      ProShade::Vec4::Vec4(&v61, &v71, &v49);
      ProShade::VarT<ProShade::Node>::operator=(v15, &v61);
      v61.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v63);
      v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v52);
      v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v73 + 1);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
    }
    v74.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v77);
    v78.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v81);
    v82 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v85);
    v86 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    v90[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v92);
    v93 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v96);
  }
}

void sub_1B2D80064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, PCSharedCount *a14, PCSharedCount *a15, PCSharedCount *a16, uint64_t a17, PCSharedCount *a18, _QWORD *a19)
{
  uint64_t v19;
  PCSharedCount *v20;
  PCSharedCount *v21;
  PCSharedCount *v22;
  PCSharedCount *v23;
  PCSharedCount *v24;
  uint64_t v25;

  STACK[0x278] = v19 + 16;
  PCSharedCount::~PCSharedCount(v24 + 3);
  PCSharedCount::~PCSharedCount(v23);
  PCSharedCount::~PCSharedCount(v20);
  PCSharedCount::~PCSharedCount(v22);
  PCSharedCount::~PCSharedCount(v21);
  PCSharedCount::~PCSharedCount(a10);
  STACK[0x298] = v19 + 16;
  PCSharedCount::~PCSharedCount(a12);
  STACK[0x2B8] = v19 + 16;
  PCSharedCount::~PCSharedCount(a13);
  *(_QWORD *)(v25 - 232) = v19 + 16;
  PCSharedCount::~PCSharedCount(a14);
  *(_QWORD *)(v25 - 200) = v19 + 16;
  PCSharedCount::~PCSharedCount(a18);
  *(_QWORD *)(v25 - 168) = v19 + 16;
  PCSharedCount::~PCSharedCount(a15);
  *(_QWORD *)(v25 - 136) = v19 + 16;
  PCSharedCount::~PCSharedCount(a16);
  *a19 = v19 + 16;
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

void sub_1B2D80844()
{
  JUMPOUT(0x1B2D8082CLL);
}

void LiMaterialLayer::calculateTriplanarNormal(uint64_t a1@<X8>)
{
  ProShade::ConstVector *v3;
  ProShade::ConstVector *v4;
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  _QWORD v11[3];
  PCSharedCount v12;
  _QWORD v13[3];
  PCSharedCount v14;
  _QWORD v15[3];
  PCSharedCount v16;
  _QWORD v17[3];
  PCSharedCount v18;
  _QWORD v19[3];
  PCSharedCount v20;
  _QWORD v21[3];
  PCSharedCount v22;
  PCSharedCount v23;
  PCSharedCount v24;
  PC_Sp_counted_base *v25;
  PCSharedCount v26;
  PCSharedCount v27;
  PCSharedCount v28;
  PC_Sp_counted_base *v29;
  PCSharedCount v30;
  PCSharedCount v31;
  PCSharedCount v32;
  PC_Sp_counted_base *var0;
  PCSharedCount v34;
  PCSharedCount v35[2];
  PC_Sp_counted_base *v36;
  PCSharedCount v37;
  PCSharedCount v38[3];
  PCSharedCount v39;
  _QWORD v40[2];
  PC_Sp_counted_base *v41;
  PCSharedCount v42;
  PCSharedCount v43;
  PCSharedCount v44;
  PC_Sp_counted_base *v45;
  PCSharedCount v46[2];

  v40[0] = &unk_1E6569AC8;
  v3 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v3, 1);
  v41 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(&v42, (ProShade::ConstVector *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, 0);
  v38[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v39, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 0);
  v36 = (PC_Sp_counted_base *)v5;
  PCSharedCount::PCSharedCount(&v37, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  ProShade::Vec3::Vec3(&v43, v40, v38, v35);
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 8) = v44.var0;
  *(_QWORD *)(a1 + 16) = v45;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24), v46);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  ProShade::Selector_base::_select(a1 + 8, 0, &v43);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v43.var0;
  PCSharedCount::PCSharedCount(&v34, &v44);
  PCSharedCount::~PCSharedCount(&v44);
  ProShade::Selector_base::_select(a1 + 8, (const PCString *)1, &v43);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v29 = v43.var0;
  PCSharedCount::PCSharedCount(&v30, &v44);
  PCSharedCount::~PCSharedCount(&v44);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v45 = var0;
  PCSharedCount::PCSharedCount(v46, &v34);
  v40[0] = &unk_1E6569AC8;
  v41 = v29;
  PCSharedCount::PCSharedCount(&v42, &v30);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v43, (uint64_t)v40, v35);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  ProShade::Selector_base::_select(a1 + 8, (const PCString *)2, &v43);
  v25 = v43.var0;
  PCSharedCount::PCSharedCount(&v26, &v44);
  PCSharedCount::~PCSharedCount(&v44);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v45 = v36;
  PCSharedCount::PCSharedCount(v46, &v37);
  v40[0] = &unk_1E6569AC8;
  v41 = v25;
  PCSharedCount::PCSharedCount(&v42, &v26);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v43, (uint64_t)v40, v38);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  v23.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0);
  v29 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v23.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0);
  v25 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(&v26, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v21[0] = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0);
  v21[2] = v8;
  PCSharedCount::PCSharedCount(&v22, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::Vec3::Vec3(&v31, &v27, &v23, v21);
  ProShade::Vec3::Vec3(v13, v38, v38, v38);
  ProShade::operator-(v15, v13, a1);
  v11[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 2.0);
  v11[2] = v9;
  PCSharedCount::PCSharedCount(&v12, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::operator*(v17, v15, v11);
  ProShade::operator-(v19, a1, v17);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v45 = var0;
  PCSharedCount::PCSharedCount(v46, &v34);
  v40[0] = &unk_1E6569AC8;
  v41 = (PC_Sp_counted_base *)v19[2];
  PCSharedCount::PCSharedCount(&v42, &v20);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v43, (uint64_t)v40, v35);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  ProShade::VarT<ProShade::Node>::operator=(a1, v35);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v19[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v17[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  v11[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  v15[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v13[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v21[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  ProShade::Selector_base::_select(a1 + 8, 0, &v31);
  v40[0] = &unk_1E6569AC8;
  v41 = v31.var0;
  PCSharedCount::PCSharedCount(&v42, &v32);
  PCSharedCount::~PCSharedCount(&v32);
  ProShade::Selector_base::_select(a1 + 8, (const PCString *)1, &v27);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v27.var0;
  PCSharedCount::PCSharedCount(&v34, &v28);
  PCSharedCount::~PCSharedCount(&v28);
  ProShade::operator+(&v43, v40, &v31);
  ProShade::Selector_base::_select(a1 + 8, (const PCString *)2, &v23);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v29 = v23.var0;
  PCSharedCount::PCSharedCount(&v30, &v24);
  PCSharedCount::~PCSharedCount(&v24);
  ProShade::operator+(v35, &v43, &v27);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.0001);
  v29 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v45 = v29;
  PCSharedCount::PCSharedCount(v46, &v30);
  v40[0] = &unk_1E6569AC8;
  v41 = v36;
  PCSharedCount::PCSharedCount(&v42, &v37);
  ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v43, (uint64_t)v40, &v31);
  v40[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  ProShade::operator/(&v43, a1, &v31);
  ProShade::VarT<ProShade::Node>::operator=(a1, &v43);
  v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v46);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v27.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
}

void sub_1B2D810D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, _QWORD *a11)
{
  uint64_t v11;
  PCSharedCount *v12;
  PCSharedCount *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 120) = v11 + 16;
  PCSharedCount::~PCSharedCount(v12 + 3);
  *(_QWORD *)(v14 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v14 - 224));
  PCSharedCount::~PCSharedCount(v13);
  *(_QWORD *)(v14 - 216) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v14 - 192));
  *(_QWORD *)(v14 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v14 - 160));
  *a11 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void sub_1B2D81620()
{
  JUMPOUT(0x1B2D815B4);
}

void sub_1B2D81628()
{
  JUMPOUT(0x1B2D815CCLL);
}

void LiMaterialLayer::sampleLayerColor(os_unfair_lock_s *this@<X0>, const LiLayeredMaterial *a2@<X1>, const LiMaterialLayerUniform *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  uint64_t v13;
  uint64_t SamplerInfo;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  PCShared_base *v18;
  ProShade::ConstVector *v19;
  PCSharedCount *v20;
  _QWORD *v21;
  PCShared_base *v22;
  _BYTE *v23;
  _QWORD *v24;
  PCShared_base *v25;
  uint64_t v26;
  double *v27;
  __int128 *v28;
  uint64_t i;
  _QWORD *v30;
  PCShared_base *v31;
  PCSharedCount *v32;
  void *v34;
  char v35;
  uint64_t v36;
  PCSharedCount v37;
  void *v38;
  char v39;
  uint64_t v40;
  PCSharedCount v41;
  void *v42;
  char v43;
  unint64_t v44;
  PCSharedCount v45;
  void *v46;
  PCSharedCount v47;
  PCSharedCount v48;
  PCSharedCount v49;
  PCSharedCount v50[2];
  PCSharedCount v51;
  PCSharedCount v52;
  char v53;
  uint64_t v54;
  PCSharedCount v55;
  void *v56;
  _QWORD *v57;
  PCSharedCount v58;
  void *v59;
  _QWORD *v60;
  PCSharedCount v61;
  PCSharedCount v62;
  PCSharedCount v63;
  PCSharedCount v64;
  PCSharedCount v65;
  PCSharedCount v66;
  char v67;
  uint64_t v68;
  PCSharedCount v69;
  void *v70;
  _QWORD *v71;
  PCSharedCount v72;
  void *v73;
  _QWORD *v74;
  PCSharedCount v75;
  PCSharedCount v76;
  PCSharedCount v77;
  PCSharedCount v78;
  PCSharedCount v79;
  PCSharedCount v80;
  PCSharedCount v81;
  PCSharedCount v82;
  PCSharedCount v83;
  PC_Sp_counted_base *v84;
  PCSharedCount v85;
  PCSharedCount v86;
  PCSharedCount v87;
  PC_Sp_counted_base *var0;
  PCSharedCount v89;
  __int128 v90;
  _OWORD v91[7];
  __int128 v92;
  unint64_t v93;
  PCSharedCount v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  _BYTE v99[48];

  v5 = (int)a3;
  *(_QWORD *)&v90 = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0);
  *(_QWORD *)&v91[0] = v9;
  PCSharedCount::PCSharedCount((PCSharedCount *)v91 + 1, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0);
  var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v89, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0);
  v84 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v85, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0);
  v78.var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v79, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec4::Vec4(&v92, &v90, &v86, &v82, &v76);
  *(_QWORD *)a5 = &unk_1E6569AC8;
  *(_BYTE *)(a5 + 8) = BYTE8(v92);
  v13 = a5 + 8;
  *(_QWORD *)(a5 + 16) = v93;
  v32 = (PCSharedCount *)(a5 + 24);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a5 + 24), &v94);
  *(_QWORD *)&v92 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v94);
  v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v79);
  v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v85);
  v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v89);
  *(_QWORD *)&v90 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)v91 + 1);
  SamplerInfo = LiMaterial::getSamplerInfo(this, *((const ProShade::SamplerNode **)a2 + 46));
  v15 = LiMaterial::getSamplerInfo(this, *((const ProShade::SamplerNode **)a2 + 58));
  if (!*(_BYTE *)(SamplerInfo + 316))
  {
    ProShade::Selector_base::_select((uint64_t)a2 + 8, (const PCString *)0x1D, &v86);
    *(_QWORD *)&v90 = &unk_1E6569AC8;
    *(PCSharedCount *)&v91[0] = v86;
    PCSharedCount::PCSharedCount((PCSharedCount *)v91 + 1, &v87);
    PCSharedCount::~PCSharedCount(&v87);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v19 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v19, 1.0);
    var0 = (PC_Sp_counted_base *)v19;
    PCSharedCount::PCSharedCount(&v89, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    ProShade::Vec4::Vec4(&v92, &v90, &v86);
    ProShade::VarT<ProShade::Node>::operator=(a5, (const PCSharedCount *)&v92);
    *(_QWORD *)&v92 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
    *(_QWORD *)&v90 = &unk_1E6569AC8;
    v20 = (PCSharedCount *)v91 + 1;
LABEL_28:
    PCSharedCount::~PCSharedCount(v20);
    return;
  }
  v16 = v15;
  v66.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  v67 = *((_BYTE *)a2 + 360);
  v68 = *((_QWORD *)a2 + 46);
  PCSharedCount::PCSharedCount(&v69, (const PCSharedCount *)a2 + 47);
  v17 = (_QWORD *)*((_QWORD *)a2 + 50);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  v70 = &unk_1E656A080;
  v71 = v17;
  if (v17)
    v18 = (PCShared_base *)((char *)v17 + *(_QWORD *)(*v17 - 24));
  else
    v18 = 0;
  PCSharedCount::PCSharedCount(&v72, v18);
  v21 = (_QWORD *)*((_QWORD *)a2 + 54);
  v70 = &unk_1E656A240;
  v73 = &unk_1E656A080;
  v74 = v21;
  if (v21)
    v22 = (PCShared_base *)((char *)v21 + *(_QWORD *)(*v21 - 24));
  else
    v22 = 0;
  PCSharedCount::PCSharedCount(&v75, v22);
  v73 = &unk_1E656A2C0;
  *(_QWORD *)&v90 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v91, (const PCSharedCount *)a2 + 214);
  LiMaterialLayer::sampleTextureMap(&v66, (uint64_t)&v90, SamplerInfo + 316, (uint64_t)&v92);
  ProShade::VarT<ProShade::Node>::operator=(a5, (const PCSharedCount *)&v92);
  v23 = (_BYTE *)(v16 + 316);
  *(_QWORD *)&v92 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v94);
  *(_QWORD *)&v90 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)v91 + 1);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  v73 = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v75);
  v70 = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v72);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(&v69);
  if (a4 && !*v23)
  {
    ProShade::Selector_base::_select(v13, (const PCString *)0x1D, &v82);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v82.var0;
    PCSharedCount::PCSharedCount(&v89, &v83);
    PCSharedCount::~PCSharedCount(&v83);
    ProShade::Selector_base::_select((uint64_t)a2 + 2024, (const PCString *)0x1D, &v76);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v84 = v76.var0;
    PCSharedCount::PCSharedCount(&v85, &v77);
    PCSharedCount::~PCSharedCount(&v77);
    v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v78, (const PCSharedCount *)a2 + 258);
    ProShade::mix(&v86, &v82, &v76, (PCSharedCount *)&v90);
    ProShade::Selector_base::_select(v13, (const PCString *)0x19, &v49);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v64.var0 = v49.var0;
    PCSharedCount::PCSharedCount(&v65, v50);
    PCSharedCount::~PCSharedCount(v50);
    ProShade::Vec4::Vec4(&v92, &v90, &v62);
    ProShade::VarT<ProShade::Node>::operator=(a5, (const PCSharedCount *)&v92);
    *(_QWORD *)&v92 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v65);
    *(_QWORD *)&v90 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)v91 + 1);
    v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v79);
    v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v85);
    v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v89);
  }
  if (v5)
  {
    if (*v23)
    {
      v52.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
      v53 = *((_BYTE *)a2 + 456);
      v54 = *((_QWORD *)a2 + 58);
      PCSharedCount::PCSharedCount(&v55, (const PCSharedCount *)a2 + 59);
      v24 = (_QWORD *)*((_QWORD *)a2 + 62);
      v52.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
      v56 = &unk_1E656A080;
      v57 = v24;
      if (v24)
        v25 = (PCShared_base *)((char *)v24 + *(_QWORD *)(*v24 - 24));
      else
        v25 = 0;
      PCSharedCount::PCSharedCount(&v58, v25);
      v30 = (_QWORD *)*((_QWORD *)a2 + 66);
      v56 = &unk_1E656A240;
      v59 = &unk_1E656A080;
      v60 = v30;
      if (v30)
        v31 = (PCShared_base *)((char *)v30 + *(_QWORD *)(*v30 - 24));
      else
        v31 = 0;
      PCSharedCount::PCSharedCount(&v61, v31);
      v59 = &unk_1E656A2C0;
      *(_QWORD *)&v90 = &unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v91, (const PCSharedCount *)a2 + 218);
      LiMaterialLayer::sampleTextureMap(&v52, (uint64_t)&v90, (uint64_t)v23, (uint64_t)&v92);
      *(_QWORD *)&v90 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)v91 + 1);
      v52.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
      v59 = &unk_1E656A080;
      PCSharedCount::~PCSharedCount(&v61);
      v56 = &unk_1E656A080;
      PCSharedCount::~PCSharedCount(&v58);
      v52.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
      PCSharedCount::~PCSharedCount(&v55);
      if (a4)
      {
        ProShade::Selector_base::_select((uint64_t)&v92 + 8, (const PCString *)0x1D, &v76);
        v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v84 = v76.var0;
        PCSharedCount::PCSharedCount(&v85, &v77);
        PCSharedCount::~PCSharedCount(&v77);
        ProShade::Selector_base::_select((uint64_t)a2 + 2024, (const PCString *)0x1D, &v62);
        v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v78.var0 = v62.var0;
        PCSharedCount::PCSharedCount(&v79, &v63);
        PCSharedCount::~PCSharedCount(&v63);
        v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v64, (const PCSharedCount *)a2 + 258);
        ProShade::mix(&v82, &v76, &v62, &v86);
        ProShade::Selector_base::_select((uint64_t)&v92 + 8, (const PCString *)0x19, &v80);
        v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v50[1] = v80;
        PCSharedCount::PCSharedCount(&v51, &v81);
        PCSharedCount::~PCSharedCount(&v81);
        ProShade::Vec4::Vec4(&v90, &v86, &v49);
        ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v92, (const PCSharedCount *)&v90);
        *(_QWORD *)&v90 = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount((PCSharedCount *)v91 + 1);
        v49.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v51);
        v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v89);
        v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v65);
        v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v79);
        v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v85);
      }
      v46 = &unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v47, (const PCSharedCount *)a2 + 250);
      v42 = &unk_1E6569AC8;
      v43 = BYTE8(v92);
      v44 = v93;
      PCSharedCount::PCSharedCount(&v45, &v94);
      v38 = &unk_1E6569AC8;
      v39 = *(_BYTE *)(a5 + 8);
      v40 = *(_QWORD *)(a5 + 16);
      PCSharedCount::PCSharedCount(&v41, v32);
      adjustHSVWithColor((uint64_t)&v46, (uint64_t)&v42, (uint64_t)&v38, &v90);
      ProShade::VarT<ProShade::Node>::operator=(a5, (const PCSharedCount *)&v90);
      *(_QWORD *)&v90 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount((PCSharedCount *)v91 + 1);
      v38 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v41);
      v42 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v45);
      v46 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v48);
      *(_QWORD *)&v92 = &unk_1E6569AC8;
      v20 = &v94;
    }
    else
    {
      v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v64, (const PCSharedCount *)a2 + 246);
      v34 = &unk_1E6569AC8;
      v35 = *(_BYTE *)(a5 + 8);
      v36 = *(_QWORD *)(a5 + 16);
      PCSharedCount::PCSharedCount(&v37, v32);
      PCGetRec709YCbCrMatrix((uint64_t)&v90);
      v26 = 0;
      v27 = (double *)&v92;
      v28 = &v90;
      do
      {
        for (i = 0; i != 3; ++i)
          v27[i] = *((float *)v28 + i);
        ++v26;
        v27 += 4;
        v28 = (__int128 *)((char *)v28 + 12);
      }
      while (v26 != 3);
      v94.var0 = 0;
      v97 = 0;
      memset(&v99[8], 0, 32);
      *(_QWORD *)&v99[40] = 0x3FF0000000000000;
      v91[3] = v98;
      v91[4] = *(_OWORD *)v99;
      v91[5] = *(_OWORD *)&v99[16];
      v91[6] = *(_OWORD *)&v99[32];
      v90 = v92;
      v91[0] = v93;
      v91[1] = v95;
      v91[2] = v96;
      PCMatrix44Tmpl<double>::invert((double *)&v90, (double *)&v90, 0.0);
      ProShade::Mat4::Mat4(&v82, (uint64_t)&v92);
      ProShade::operator*(&v86, &v82, &v34);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v85);
      ProShade::operator*(&v82, &v62, &v86);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v86, &v82);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v85);
      ProShade::Mat4::Mat4(&v82, (uint64_t)&v90);
      ProShade::operator*(&v76, &v82, &v86);
      v82.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v85);
      v86.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v89);
      ProShade::VarT<ProShade::Node>::operator=(a5, &v76);
      v76.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v79);
      v34 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v37);
      v62.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v20 = &v65;
    }
    goto LABEL_28;
  }
}

void sub_1B2D82244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,PCSharedCount a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a71;
  PCSharedCount *v71;
  PCSharedCount *v72;
  PCSharedCount *v73;
  PCSharedCount *v74;
  uint64_t v75;
  uint64_t v76;

  STACK[0x210] = v75 + 16;
  PCSharedCount::~PCSharedCount(v74 + 3);
  PCSharedCount::~PCSharedCount(v71);
  a71 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x208]);
  PCSharedCount::~PCSharedCount(&a48);
  a61 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v73);
  a67 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v72);
  *(_QWORD *)(v76 - 224) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v76 - 200));
  *a12 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void sub_1B2D8281C()
{
  JUMPOUT(0x1B2D827FCLL);
}

void adjustHSVWithColor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  PCSharedCount *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t i;
  ProShade::ConstVector *v12;
  uint64_t v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  ProShade::ConstVector *v22;
  ProShade::ConstVector *v23;
  ProShade::ConstVector *v24;
  ProShade::ConstVector *v25;
  ProShade::ConstVector *v26;
  ProShade::ConstVector *v27;
  ProShade::ConstVector *v28;
  ProShade::ConstVector *v29;
  ProShade::ConstVector *v30;
  ProShade::ConstVector *v31;
  ProShade::ConstVector *v32;
  ProShade::ConstVector *v33;
  ProShade::ConstVector *v34;
  ProShade::ConstVector *v35;
  ProShade::ConstVector *v36;
  ProShade::ConstVector *v37;
  ProShade::ConstVector *v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  ProShade::ConstVector *v42;
  ProShade::ConstVector *v43;
  PCSharedCount *v44;
  _QWORD v45[3];
  PCSharedCount v46;
  PCSharedCount v47[3];
  PCSharedCount v48;
  PCSharedCount v49[3];
  PCSharedCount v50;
  PCSharedCount v51[3];
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54[2];
  PCSharedCount v55;
  PCSharedCount v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  PCSharedCount v66;
  PCSharedCount v67;
  PC_Sp_counted_base *v68;
  PCSharedCount v69;
  PCSharedCount v70;
  PCSharedCount v71;
  PC_Sp_counted_base *v72;
  PCSharedCount v73;
  _QWORD v74[2];
  PC_Sp_counted_base *v75;
  PCSharedCount v76;
  void *v77;
  char v78;
  ProShade::ConstVector *v79;
  PCSharedCount v80;
  void *v81;
  char v82;
  ProShade::ConstVector *v83;
  PCSharedCount v84;
  void *v85;
  char v86;
  ProShade::ConstVector *v87;
  PCSharedCount v88;
  PCSharedCount v89;
  PCSharedCount v90;
  ProShade::ConstVector *v91;
  PCSharedCount v92;
  PCSharedCount v93;
  PCSharedCount v94;
  PC_Sp_counted_base *v95;
  PCSharedCount v96;
  PCSharedCount v97;
  PCSharedCount v98;
  ProShade::ConstVector *v99;
  PCSharedCount v100;
  PCSharedCount v101;
  PCSharedCount v102;
  PC_Sp_counted_base *var0;
  PCSharedCount v104;
  PCSharedCount v105;
  PCSharedCount v106;
  PC_Sp_counted_base *v107;
  PCSharedCount v108;
  PCSharedCount v109[3];
  PCSharedCount v110;
  void *v111;
  _QWORD v112[2];
  PCSharedCount v113;
  _BYTE v114[24];
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v8 = &v56;
  PCGetRec709YCbCrMatrix((uint64_t)&v56);
  v9 = 0;
  v10 = v114;
  do
  {
    for (i = 0; i != 3; ++i)
      *(double *)&v10[8 * i] = *((float *)&v8->var0 + i);
    ++v9;
    v10 += 32;
    v8 = (PCSharedCount *)((char *)v8 + 12);
  }
  while (v9 != 3);
  v115 = 0;
  v116 = 0;
  v117 = 0u;
  v118 = 0u;
  v119 = 0x3FF0000000000000;
  ProShade::Mat4::Mat4(v109, (uint64_t)v114);
  ProShade::Selector_base::_select(a3 + 8, (const PCString *)0x1D, &v97);
  v101.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v97.var0;
  PCSharedCount::PCSharedCount(&v104, &v98);
  PCSharedCount::~PCSharedCount(&v98);
  v97.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 1.0);
  v99 = v12;
  PCSharedCount::PCSharedCount(&v100, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec4::Vec4(&v105, &v101, &v97);
  ProShade::operator*(&v56, v109, &v105);
  ProShade::Selector_base::_select((uint64_t)&v57, (const PCString *)0x1D, &v93);
  v111 = &unk_1E6569AC8;
  v112[1] = v93.var0;
  PCSharedCount::PCSharedCount(&v113, &v94);
  PCSharedCount::~PCSharedCount(&v94);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v105.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v108);
  v97.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v100);
  v101.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v104);
  v109[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v110);
  ProShade::Selector_base::_select((uint64_t)v112, 0, &v105);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  *((PCSharedCount *)&v57 + 1) = v105;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v58, &v106);
  PCSharedCount::~PCSharedCount(&v106);
  v13 = a1 + 8;
  ProShade::Selector_base::_select(v13, 0, &v101);
  v105.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v107 = v101.var0;
  PCSharedCount::PCSharedCount(&v108, &v102);
  PCSharedCount::~PCSharedCount(&v102);
  ProShade::operator/(v109, &v56, &v105);
  v105.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v108);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v105.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 0.0);
  v107 = (PC_Sp_counted_base *)v14;
  PCSharedCount::PCSharedCount(&v108, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  v101.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0.0);
  var0 = (PC_Sp_counted_base *)v15;
  v44 = PCSharedCount::PCSharedCount(&v104, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  ProShade::Selector_base::_select((uint64_t)v112, 0, &v89);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v95 = v89.var0;
  PCSharedCount::PCSharedCount(&v96, &v90);
  PCSharedCount::~PCSharedCount(&v90);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 0.0);
  v91 = v16;
  PCSharedCount::PCSharedCount(&v92, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  ProShade::operator==((uint64_t)&v93, (uint64_t)&v89, &v97);
  v85 = &unk_1E6569AC8;
  v17 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v17, 0.0);
  v87 = v17;
  PCSharedCount::PCSharedCount(&v88, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  ProShade::Selector_base::_select((uint64_t)v112, (const PCString *)1, &v70);
  v74[0] = &unk_1E6569AC8;
  v75 = v70.var0;
  PCSharedCount::PCSharedCount(&v76, &v71);
  PCSharedCount::~PCSharedCount(&v71);
  ProShade::Selector_base::_select(v13, (const PCString *)1, &v66);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v72 = v66.var0;
  PCSharedCount::PCSharedCount(&v73, &v67);
  PCSharedCount::~PCSharedCount(&v67);
  ProShade::operator-(&v77, v74, &v70);
  ProShade::Selector_base::_select((uint64_t)v112, 0, &v53);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v68 = v53.var0;
  PCSharedCount::PCSharedCount(&v69, v54);
  PCSharedCount::~PCSharedCount(v54);
  ProShade::operator/(&v81, &v77, &v66);
  ProShade::Func<ProShade::Func_cond>::eval((uint64_t)&v97, (uint64_t)&v85, (uint64_t)&v81, &v56);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v105, &v56);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v69);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  v74[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
  v97.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v100);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v96);
  ProShade::Selector_base::_select((uint64_t)v112, 0, &v89);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v95 = v89.var0;
  PCSharedCount::PCSharedCount(&v96, &v90);
  PCSharedCount::~PCSharedCount(&v90);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v18 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v18, 0.0);
  v91 = v18;
  PCSharedCount::PCSharedCount(&v92, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
  ProShade::operator==((uint64_t)&v93, (uint64_t)&v89, &v97);
  v85 = &unk_1E6569AC8;
  v19 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v19, 0.0);
  v87 = v19;
  PCSharedCount::PCSharedCount(&v88, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
  ProShade::Selector_base::_select((uint64_t)v112, (const PCString *)2, &v70);
  v74[0] = &unk_1E6569AC8;
  v75 = v70.var0;
  PCSharedCount::PCSharedCount(&v76, &v71);
  PCSharedCount::~PCSharedCount(&v71);
  ProShade::Selector_base::_select(v13, (const PCString *)2, &v66);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v72 = v66.var0;
  PCSharedCount::PCSharedCount(&v73, &v67);
  PCSharedCount::~PCSharedCount(&v67);
  ProShade::operator-(&v77, v74, &v70);
  ProShade::Selector_base::_select((uint64_t)v112, 0, &v53);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v68 = v53.var0;
  PCSharedCount::PCSharedCount(&v69, v54);
  PCSharedCount::~PCSharedCount(v54);
  ProShade::operator/(&v81, &v77, &v66);
  ProShade::Func<ProShade::Func_cond>::eval((uint64_t)&v97, (uint64_t)&v85, (uint64_t)&v81, &v56);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v101, &v56);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v69);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  v74[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
  v97.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v100);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v96);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v20 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v20, 0.0);
  v95 = (PC_Sp_counted_base *)v20;
  PCSharedCount::PCSharedCount(&v96, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v21 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v21, 0.0);
  v91 = v21;
  PCSharedCount::PCSharedCount(&v92, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  v85 = &unk_1E6569AC8;
  v22 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v22, 0.0);
  v87 = v22;
  PCSharedCount::PCSharedCount(&v88, (ProShade::ConstVector *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)));
  ProShade::Vec4::Vec4(&v56, v109, &v93, &v89, &v85);
  v97.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v98.var0) = v57;
  v99 = (ProShade::ConstVector *)*((_QWORD *)&v57 + 1);
  PCSharedCount::PCSharedCount(&v100, (const PCSharedCount *)&v58);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v96);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v23 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v23, 0.0);
  v91 = v23;
  PCSharedCount::PCSharedCount(&v92, (ProShade::ConstVector *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
  v85 = &unk_1E6569AC8;
  v24 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v24, 0.0);
  v87 = v24;
  PCSharedCount::PCSharedCount(&v88, (ProShade::ConstVector *)((char *)v24 + *(_QWORD *)(*(_QWORD *)v24 - 24)));
  v81 = &unk_1E6569AC8;
  v25 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v25, 0.0);
  v83 = v25;
  PCSharedCount::PCSharedCount(&v84, (ProShade::ConstVector *)((char *)v25 + *(_QWORD *)(*(_QWORD *)v25 - 24)));
  ProShade::Vec4::Vec4(&v56, &v89, v109, &v85, &v81);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v94.var0) = v57;
  v95 = (PC_Sp_counted_base *)*((_QWORD *)&v57 + 1);
  PCSharedCount::PCSharedCount(&v96, (const PCSharedCount *)&v58);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v85 = &unk_1E6569AC8;
  v26 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v26, 0.0);
  v87 = v26;
  PCSharedCount::PCSharedCount(&v88, (ProShade::ConstVector *)((char *)v26 + *(_QWORD *)(*(_QWORD *)v26 - 24)));
  v81 = &unk_1E6569AC8;
  v27 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v27, 0.0);
  v83 = v27;
  PCSharedCount::PCSharedCount(&v84, (ProShade::ConstVector *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
  v77 = &unk_1E6569AC8;
  v28 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v28, 0.0);
  v79 = v28;
  PCSharedCount::PCSharedCount(&v80, (ProShade::ConstVector *)((char *)v28 + *(_QWORD *)(*(_QWORD *)v28 - 24)));
  ProShade::Vec4::Vec4(&v56, &v85, &v81, v109, &v77);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v90.var0) = v57;
  v91 = (ProShade::ConstVector *)*((_QWORD *)&v57 + 1);
  PCSharedCount::PCSharedCount(&v92, (const PCSharedCount *)&v58);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
  v81 = &unk_1E6569AC8;
  v29 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v29, 1.0);
  v83 = v29;
  PCSharedCount::PCSharedCount(&v84, (ProShade::ConstVector *)((char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24)));
  v77 = &unk_1E6569AC8;
  v30 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v30, 0.0);
  v79 = v30;
  PCSharedCount::PCSharedCount(&v80, (ProShade::ConstVector *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
  v74[0] = &unk_1E6569AC8;
  v31 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v31, 0.0);
  v75 = (PC_Sp_counted_base *)v31;
  PCSharedCount::PCSharedCount(&v76, (ProShade::ConstVector *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v32 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v32, 0.0);
  v72 = (PC_Sp_counted_base *)v32;
  PCSharedCount::PCSharedCount(&v73, (ProShade::ConstVector *)((char *)v32 + *(_QWORD *)(*(_QWORD *)v32 - 24)));
  ProShade::Vec4::Vec4(&v56, &v81, &v77, v74, &v70);
  v85 = &unk_1E6569AC8;
  v86 = v57;
  v87 = (ProShade::ConstVector *)*((_QWORD *)&v57 + 1);
  PCSharedCount::PCSharedCount(&v88, (const PCSharedCount *)&v58);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  v74[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v77 = &unk_1E6569AC8;
  v33 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v33, 1.0);
  v79 = v33;
  PCSharedCount::PCSharedCount(&v80, (ProShade::ConstVector *)((char *)v33 + *(_QWORD *)(*(_QWORD *)v33 - 24)));
  v74[0] = &unk_1E6569AC8;
  v34 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v34, 0.0);
  v75 = (PC_Sp_counted_base *)v34;
  PCSharedCount::PCSharedCount(&v76, (ProShade::ConstVector *)((char *)v34 + *(_QWORD *)(*(_QWORD *)v34 - 24)));
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v35 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v35, 0.0);
  v72 = (PC_Sp_counted_base *)v35;
  PCSharedCount::PCSharedCount(&v73, (ProShade::ConstVector *)((char *)v35 + *(_QWORD *)(*(_QWORD *)v35 - 24)));
  ProShade::Vec4::Vec4(&v56, &v105, &v77, v74, &v70);
  v81 = &unk_1E6569AC8;
  v82 = v57;
  v83 = (ProShade::ConstVector *)*((_QWORD *)&v57 + 1);
  PCSharedCount::PCSharedCount(&v84, (const PCSharedCount *)&v58);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  v74[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v74[0] = &unk_1E6569AC8;
  v36 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v36, 0.0);
  v75 = (PC_Sp_counted_base *)v36;
  PCSharedCount::PCSharedCount(&v76, (ProShade::ConstVector *)((char *)v36 + *(_QWORD *)(*(_QWORD *)v36 - 24)));
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v37 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v37, 1.0);
  v72 = (PC_Sp_counted_base *)v37;
  PCSharedCount::PCSharedCount(&v73, (ProShade::ConstVector *)((char *)v37 + *(_QWORD *)(*(_QWORD *)v37 - 24)));
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v38 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v38, 0.0);
  v68 = (PC_Sp_counted_base *)v38;
  PCSharedCount::PCSharedCount(&v69, (ProShade::ConstVector *)((char *)v38 + *(_QWORD *)(*(_QWORD *)v38 - 24)));
  ProShade::Vec4::Vec4(&v56, &v101, v74, &v70, &v66);
  v77 = &unk_1E6569AC8;
  v78 = v57;
  v79 = (ProShade::ConstVector *)*((_QWORD *)&v57 + 1);
  PCSharedCount::PCSharedCount(&v80, (const PCSharedCount *)&v58);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v69);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  v74[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v39 = 0;
  v65 = 0x3FF0000000000000;
  v62 = 0x3FF0000000000000;
  v59 = 0x3FF0000000000000;
  v56.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  v57 = 0u;
  v58 = 0u;
  v63 = 0u;
  v64 = 0u;
  v60 = 0u;
  v61 = 0u;
  do
  {
    v40 = (_OWORD *)((char *)&v56 + v39);
    v41 = *(_OWORD *)&v114[v39 + 16];
    *v40 = *(_OWORD *)&v114[v39];
    v40[1] = v41;
    v39 += 32;
  }
  while (v39 != 128);
  PCMatrix44Tmpl<double>::invert((double *)&v56, (double *)&v56, 0.0);
  ProShade::Mat4::Mat4(&v70, (uint64_t)v114);
  ProShade::operator*(v74, &v70, a2);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v85, (uint64_t)v74, &v53);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v81, (uint64_t)v74, v51);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v77, (uint64_t)v74, v49);
  v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v42 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v42, 1.0);
  v47[2].var0 = (PC_Sp_counted_base *)v42;
  PCSharedCount::PCSharedCount(&v48, (ProShade::ConstVector *)((char *)v42 + *(_QWORD *)(*(_QWORD *)v42 - 24)));
  ProShade::Vec4::Vec4(&v66, &v53, v51, v49, v47);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v71.var0) = v67.var0;
  v72 = v68;
  PCSharedCount::PCSharedCount(&v73, &v69);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v69);
  v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v49[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v52);
  v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v55);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v97, (uint64_t)&v70, v51);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v93, (uint64_t)&v70, v49);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v89, (uint64_t)&v70, v47);
  v45[0] = &unk_1E6569AC8;
  v43 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v43, 1.0);
  v45[2] = v43;
  PCSharedCount::PCSharedCount(&v46, (ProShade::ConstVector *)((char *)v43 + *(_QWORD *)(*(_QWORD *)v43 - 24)));
  ProShade::Vec4::Vec4(&v53, v51, v49, v47, v45);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v67.var0) = v54[0].var0;
  v68 = v54[1].var0;
  PCSharedCount::PCSharedCount(&v69, &v55);
  v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v55);
  v45[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v46);
  v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v49[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v52);
  ProShade::Mat4::Mat4(&v53, (uint64_t)&v56);
  ProShade::operator*(a4, &v53, &v66);
  v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v55);
  v66.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v69);
  v70.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v73);
  v74[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v76);
  v77 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v80);
  v81 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v84);
  v85 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v88);
  v89.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v92);
  v93.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v96);
  v97.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v100);
  v101.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v44);
  v105.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v108);
  v109[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v110);
  v111 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v113);
}

void sub_1B2D83D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, uint64_t a12, PCSharedCount *a13, PCSharedCount *a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,PCSharedCount a63)
{
  uint64_t a64;
  uint64_t a68;
  uint64_t a72;
  PCSharedCount *v72;
  PCSharedCount *v73;
  PCSharedCount *v74;
  PCSharedCount *v75;
  PCSharedCount *v76;
  PCSharedCount *v77;
  PCSharedCount *v78;
  PCSharedCount *v79;
  uint64_t v80;

  PCSharedCount::~PCSharedCount(v74 + 3);
  PCSharedCount::~PCSharedCount(v73);
  PCSharedCount::~PCSharedCount(v75);
  PCSharedCount::~PCSharedCount(&a63);
  a64 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v72);
  a68 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v79);
  a72 = (uint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v78);
  STACK[0x218] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v77);
  STACK[0x238] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v76);
  STACK[0x258] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a11);
  STACK[0x278] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a14);
  STACK[0x298] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a13);
  STACK[0x2B8] = (unint64_t)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2D0]);
  *(_QWORD *)(v80 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a15);
  _Unwind_Resume(a1);
}

void sub_1B2D84980()
{
  JUMPOUT(0x1B2D848F4);
}

void sub_1B2D849C4()
{
  JUMPOUT(0x1B2D8490CLL);
}

void sub_1B2D84A08()
{
  JUMPOUT(0x1B2D8491CLL);
}

void sub_1B2D84A5C()
{
  JUMPOUT(0x1B2D842F0);
}

void sub_1B2D84A64()
{
  JUMPOUT(0x1B2D84324);
}

void sub_1B2D84A6C()
{
  JUMPOUT(0x1B2D844B8);
}

void sub_1B2D84A74()
{
  JUMPOUT(0x1B2D844ECLL);
}

void sub_1B2D84A7C()
{
  JUMPOUT(0x1B2D84944);
}

void sub_1B2D84A84()
{
  JUMPOUT(0x1B2D84954);
}

void LiMaterialLayer::getSurfaceSpecularScalar(uint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X3>, const PCSharedCount *a4@<X4>, const PCSharedCount *a5@<X5>, const PCSharedCount *a6@<X6>, int *a7@<X7>, PCSharedCount *a8@<X8>)
{
  float v15;
  ProShade::ConstVector *v16;
  float v17;
  ProShade::ConstVector *v18;
  float v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  _QWORD *v22;
  PCShared_base *v23;
  _QWORD *v24;
  PCShared_base *v25;
  PCSharedCount v26;
  char v27;
  uint64_t v28;
  PCSharedCount v29;
  void *v30;
  _QWORD *v31;
  PCSharedCount v32;
  void *v33;
  _QWORD *v34;
  PCSharedCount v35;
  _QWORD v36[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v38;
  PCSharedCount v39[3];
  PCSharedCount v40;
  void *v41;
  _QWORD v42[2];
  PCSharedCount v43;
  _QWORD v44[3];
  PCSharedCount v45;
  PCSharedCount v46;
  PCSharedCount v47;
  _DWORD v48[3];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  PCGetWorkingColorSpaceLuminanceCoefficients(*a7, (uint64_t)v48);
  v15 = *(float *)v48;
  v41 = &unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, v15);
  v42[1] = v16;
  PCSharedCount::PCSharedCount(&v43, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  v17 = *(float *)&v48[1];
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v18 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v18, v17);
  v39[2].var0 = (PC_Sp_counted_base *)v18;
  PCSharedCount::PCSharedCount(&v40, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
  v19 = *(float *)&v48[2];
  v36[0] = &unk_1E6569AC8;
  v20 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v20, v19);
  var0 = (PC_Sp_counted_base *)v20;
  PCSharedCount::PCSharedCount(&v38, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
  ProShade::Vec3::Vec3(v44, &v41, v39, v36);
  v36[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  a8->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v21 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v21, 0.0);
  a8[2].var0 = (PC_Sp_counted_base *)v21;
  PCSharedCount::PCSharedCount(a8 + 3, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  if (*a3)
  {
    v26.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
    v27 = *(_BYTE *)(a1 + 8);
    v28 = *(_QWORD *)(a1 + 16);
    PCSharedCount::PCSharedCount(&v29, (const PCSharedCount *)(a1 + 24));
    v22 = *(_QWORD **)(a1 + 48);
    v26.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
    v30 = &unk_1E656A080;
    v31 = v22;
    if (v22)
      v23 = (PCShared_base *)((char *)v22 + *(_QWORD *)(*v22 - 24));
    else
      v23 = 0;
    PCSharedCount::PCSharedCount(&v32, v23);
    v24 = *(_QWORD **)(a1 + 80);
    v30 = &unk_1E656A240;
    v33 = &unk_1E656A080;
    v34 = v24;
    if (v24)
      v25 = (PCShared_base *)((char *)v24 + *(_QWORD *)(*v24 - 24));
    else
      v25 = 0;
    PCSharedCount::PCSharedCount(&v35, v25);
    v33 = &unk_1E656A2C0;
    LiMaterialLayer::sampleTextureMap(&v26, a2, (uint64_t)a3, (uint64_t)&v41);
    v26.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
    v33 = &unk_1E656A080;
    PCSharedCount::~PCSharedCount(&v35);
    v30 = &unk_1E656A080;
    PCSharedCount::~PCSharedCount(&v32);
    v26.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
    PCSharedCount::~PCSharedCount(&v29);
    ProShade::Selector_base::_select((uint64_t)v42, (const PCString *)0x1D, &v46);
    v36[0] = &unk_1E6569AC8;
    var0 = v46.var0;
    PCSharedCount::PCSharedCount(&v38, &v47);
    PCSharedCount::~PCSharedCount(&v47);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v36, (uint64_t)v44, v39);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a8, v39);
    v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v40);
    v36[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v38);
    ProShade::mix(a5, a6, a8, v39);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a8, v39);
    v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v40);
    v41 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
  }
  else
  {
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)a8, a4);
  }
  v44[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v45);
}

void sub_1B2D84F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  _QWORD *v33;
  PCSharedCount *v34;
  uint64_t v35;

  *v33 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v34);
  *(_QWORD *)(v35 - 176) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v35 - 152));
  _Unwind_Resume(a1);
}

void sub_1B2D85108()
{
  JUMPOUT(0x1B2D85100);
}

void LiMaterialLayer::getSurfaceSpecularColor(_DWORD *a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  PCSharedCount *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  PCSharedCount *v17;
  uint64_t SamplerInfo;
  _QWORD *v19;
  PCShared_base *v20;
  _QWORD *v21;
  PCShared_base *v22;
  _QWORD v23[3];
  PCSharedCount v24;
  PCSharedCount v25[3];
  PCSharedCount v26;
  void *v27;
  PC_Sp_counted_base *v28;
  PCSharedCount v29;
  PCSharedCount v30[3];
  PCSharedCount v31;
  _QWORD v32[3];
  PCSharedCount v33;
  PCSharedCount v34;
  char v35;
  uint64_t v36;
  PCSharedCount v37;
  void *v38;
  _QWORD *v39;
  PCSharedCount v40;
  void *v41;
  _QWORD *v42;
  PCSharedCount v43;
  _QWORD v44[3];
  PCSharedCount v45;
  PCSharedCount v46;
  PCSharedCount v47;
  PC_Sp_counted_base *v48;
  PCSharedCount v49;
  __int128 v50;
  PCSharedCount v51;
  PCSharedCount v52[2];
  PCSharedCount v53;
  char v54;
  PCSharedCount v55;
  PCSharedCount v56;
  PCSharedCount v57;
  PCSharedCount v58;
  PC_Sp_counted_base *v59;
  PCSharedCount v60;
  PCSharedCount v61[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v63[2];

  a5[2].var0 = 0;
  a5->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::PCSharedCount(a5 + 3);
  switch(*a1)
  {
    case 0:
      ProShade::Selector_base::_select(a4 + 552, (const PCString *)0x1D, &v57);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v57.var0;
      v10 = v63;
      PCSharedCount::PCSharedCount(v63, &v58);
      PCSharedCount::~PCSharedCount(&v58);
      *(_QWORD *)&v50 = &unk_1E6569AC8;
      v11 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v11, 1.0);
      v51.var0 = (PC_Sp_counted_base *)v11;
      PCSharedCount::PCSharedCount(v52, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
      v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v12 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v12, 1.0);
      v48 = (PC_Sp_counted_base *)v12;
      PCSharedCount::PCSharedCount(&v49, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
      v44[0] = &unk_1E6569AC8;
      v13 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v13, 1.0);
      v44[2] = v13;
      PCSharedCount::PCSharedCount(&v45, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
      ProShade::Vec3::Vec3(&v53, &v50, &v46, v44);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      LOBYTE(v58.var0) = v54;
      v59 = v55.var0;
      PCSharedCount::PCSharedCount(&v60, &v56);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v44[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v45);
      v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v49);
      *(_QWORD *)&v50 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v52);
      *(_QWORD *)&v50 = &unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v51, (const PCSharedCount *)(a3 + 272));
      ProShade::mix(&v57, v61, (const PCSharedCount *)&v50, &v53);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a5, &v53);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      *(_QWORD *)&v50 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v52);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      goto LABEL_14;
    case 1:
      ProShade::Selector_base::_select(a3 + 8, (const PCString *)0x1D, &v57);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v57.var0;
      v10 = v63;
      PCSharedCount::PCSharedCount(v63, &v58);
      PCSharedCount::~PCSharedCount(&v58);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a5, v61);
      goto LABEL_6;
    case 2:
      ProShade::Selector_base::_select(a4 + 552, (const PCString *)0x1D, &v57);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v57.var0;
      v10 = v63;
      PCSharedCount::PCSharedCount(v63, &v58);
      PCSharedCount::~PCSharedCount(&v58);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a5, v61);
LABEL_6:
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      goto LABEL_14;
    case 3:
      SamplerInfo = LiMaterial::getSamplerInfo(a2, *(const ProShade::SamplerNode **)(a3 + 368));
      v50 = *(_OWORD *)(SamplerInfo + 316);
      v51.var0 = *(PC_Sp_counted_base **)(SamplerInfo + 332);
      v34.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
      v35 = *(_BYTE *)(a3 + 360);
      v36 = *(_QWORD *)(a3 + 368);
      v10 = &v37;
      PCSharedCount::PCSharedCount(&v37, (const PCSharedCount *)(a3 + 376));
      v19 = *(_QWORD **)(a3 + 400);
      v34.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
      v38 = &unk_1E656A080;
      v39 = v19;
      if (v19)
        v20 = (PCShared_base *)((char *)v19 + *(_QWORD *)(*v19 - 24));
      else
        v20 = 0;
      PCSharedCount::PCSharedCount(&v40, v20);
      v21 = *(_QWORD **)(a3 + 432);
      v38 = &unk_1E656A240;
      v41 = &unk_1E656A080;
      v42 = v21;
      if (v21)
        v22 = (PCShared_base *)((char *)v21 + *(_QWORD *)(*v21 - 24));
      else
        v22 = 0;
      PCSharedCount::PCSharedCount(&v43, v22);
      v41 = &unk_1E656A2C0;
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v55, (const PCSharedCount *)(a3 + 1712));
      LiMaterialLayer::sampleTextureMap(&v34, (uint64_t)&v53, (uint64_t)&v50, (uint64_t)&v57);
      ProShade::Selector_base::_select((uint64_t)&v58, (const PCString *)0x1D, &v46);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v46.var0;
      PCSharedCount::PCSharedCount(v63, &v47);
      PCSharedCount::~PCSharedCount(&v47);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a5, v61);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v63);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v56);
      v34.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
      v41 = &unk_1E656A080;
      PCSharedCount::~PCSharedCount(&v43);
      v38 = &unk_1E656A080;
      PCSharedCount::~PCSharedCount(&v40);
      v34.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
LABEL_14:
      v17 = v10;
      goto LABEL_15;
    case 4:
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v54 = *(_BYTE *)(a4 + 136);
      v55.var0 = *(PC_Sp_counted_base **)(a4 + 144);
      PCSharedCount::PCSharedCount(&v56, (const PCSharedCount *)(a4 + 152));
      v32[0] = &unk_1E6569AC8;
      v14 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v14, 1);
      v32[2] = v14;
      PCSharedCount::PCSharedCount(&v33, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
      v27 = &unk_1E6569AC8;
      v15 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v15, 0.0);
      v28 = (PC_Sp_counted_base *)v15;
      PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
      ProShade::Func<ProShade::Func_normalize>::eval(a4 + 96, (uint64_t)v23);
      ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v53, (uint64_t)v23, v25);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v28;
      PCSharedCount::PCSharedCount(v63, &v29);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v59 = v25[2].var0;
      PCSharedCount::PCSharedCount(&v60, &v26);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)v61, (uint64_t)&v57, v30);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v63);
      ProShade::operator-(v44, v32, v30);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v16 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v16, 0.5);
      var0 = (PC_Sp_counted_base *)v16;
      PCSharedCount::PCSharedCount(v63, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
      ProShade::Vec2::Vec2(&v46, v44, v61);
      *(_QWORD *)&v50 = &unk_1E6569AC8;
      BYTE8(v50) = v47.var0;
      v51.var0 = v48;
      PCSharedCount::PCSharedCount(v52, &v49);
      v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v49);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v63);
      v44[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v45);
      v30[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v31);
      v25[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v26);
      v23[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v24);
      v27 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v29);
      v32[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      ProShade::Sampler::sample((const PCSharedCount *)(a3 + 352), (uint64_t)&v50, &v57);
      ProShade::Selector_base::_select((uint64_t)&v58, (const PCString *)0x1D, &v46);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      var0 = v46.var0;
      PCSharedCount::PCSharedCount(v63, &v47);
      PCSharedCount::~PCSharedCount(&v47);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a5, v61);
      v61[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v63);
      v57.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v60);
      *(_QWORD *)&v50 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v52);
      v53.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v17 = &v56;
LABEL_15:
      PCSharedCount::~PCSharedCount(v17);
      break;
    default:
      return;
  }
}

void sub_1B2D85948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v43;
  uint64_t v44;
  PCSharedCount *v45;
  uint64_t v46;

  *(_QWORD *)(v46 - 120) = v44 + 16;
  PCSharedCount::~PCSharedCount(v45);
  *(_QWORD *)(v46 - 152) = v44 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v46 - 128));
  *(_QWORD *)(v46 - 184) = v44 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v46 - 160));
  ProShade::Sampler::~Sampler((PCSharedCount *)&a31);
  *v43 = v44 + 16;
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void LiMaterialLayer::getSurfaceSpecularShininess(os_unfair_lock_s *a1@<X0>, const PCSharedCount *a2@<X1>, uint64_t a3@<X2>, const PCSharedCount *a4@<X3>, PCSharedCount *a5@<X8>)
{
  uint64_t SamplerInfo;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  uint32_t os_unfair_lock_opaque;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17;
  PCSharedCount v18;
  PCSharedCount v19;
  PCSharedCount v20;
  PCSharedCount v21[2];
  ProShade::ConstVector *v22;
  PCSharedCount v23;
  PCSharedCount v24[2];
  PCSharedCount v25;
  PCSharedCount v26;
  PCSharedCount v27[3];
  PCSharedCount v28;
  __int128 v29;
  uint64_t v30;

  SamplerInfo = LiMaterial::getSamplerInfo(a1, *(const ProShade::SamplerNode **)(a3 + 16));
  v29 = *(_OWORD *)(SamplerInfo + 316);
  v30 = *(_QWORD *)(SamplerInfo + 332);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v25, a4 + 2);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 1.0);
  v22 = v11;
  PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v19, a2 + 118);
  v15.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v16, a2 + 122);
  os_unfair_lock_opaque = a1[164]._os_unfair_lock_opaque;
  LiMaterialLayer::getSurfaceSpecularScalar(a3, (uint64_t)v24, &v29, v21, &v18, &v15, (int *)&os_unfair_lock_opaque, v27);
  v15.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0.0);
  v25.var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v26, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 1.0);
  v22 = v13;
  PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::clamp(v27, v24, v21, a5);
  v21[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
  v27[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v28);
}

void sub_1B2D85F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,PCSharedCount a30)
{
  PCSharedCount *v30;
  PCSharedCount *v31;
  uint64_t v32;
  _QWORD *v33;

  PCSharedCount::~PCSharedCount(v31);
  PCSharedCount::~PCSharedCount(v30);
  *v33 = v32 + 16;
  PCSharedCount::~PCSharedCount(&a30);
  _Unwind_Resume(a1);
}

void LiMaterialLayer::getSurfaceSpecularIntensity(os_unfair_lock_s *this@<X0>, const LiLayeredMaterial *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t SamplerInfo;
  ProShade::ConstVector *v8;
  uint32_t os_unfair_lock_opaque;
  PCSharedCount v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;
  PCSharedCount v14;
  PCSharedCount v15;
  PCSharedCount v16[3];
  PCSharedCount v17;
  void *v18;
  PCSharedCount v19;
  PCSharedCount v20;
  __int128 v21;
  uint64_t v22;

  SamplerInfo = LiMaterial::getSamplerInfo(this, *((const ProShade::SamplerNode **)a2 + 126));
  v21 = *(_OWORD *)(SamplerInfo + 316);
  v22 = *(_QWORD *)(SamplerInfo + 332);
  v18 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v19, (const PCSharedCount *)a2 + 234);
  v16[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 1.0);
  v16[2].var0 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v17, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v14, (const PCSharedCount *)a2 + 138);
  v10.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v11, (const PCSharedCount *)a2 + 142);
  os_unfair_lock_opaque = this[164]._os_unfair_lock_opaque;
  LiMaterialLayer::getSurfaceSpecularScalar((uint64_t)a2 + 992, (uint64_t)&v18, &v21, v16, &v13, &v10, (int *)&os_unfair_lock_opaque, a3);
  v10.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v16[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v18 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
}

void sub_1B2D861C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCSharedCount a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,PCSharedCount a26)
{
  PCSharedCount *v26;
  uint64_t v27;
  PCSharedCount *v28;

  PCSharedCount::~PCSharedCount(v28 + 3);
  PCSharedCount::~PCSharedCount(&a18);
  a19 = v27 + 16;
  PCSharedCount::~PCSharedCount(v26);
  a23 = v27 + 16;
  PCSharedCount::~PCSharedCount(&a26);
  _Unwind_Resume(a1);
}

void LiMaterialLayer::tangentSpaceToEyeSpace(LiMaterialLayer *this@<X0>, const ProShade::Vec3 *a2@<X1>, const ProShade::Vec3 *a3@<X2>, const ProShade::Vec3 *a4@<X3>, PCSharedCount *a5@<X8>)
{
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  _QWORD v18[2];
  PC_Sp_counted_base *v19;
  PCSharedCount v20;
  PCSharedCount v21;
  PCSharedCount v22;
  ProShade::ConstVector *v23;
  PCSharedCount v24;
  _QWORD v25[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v27;
  PCSharedCount v28;
  PCSharedCount v29[2];
  PCSharedCount v30;
  _QWORD v31[3];
  PCSharedCount v32;
  _QWORD v33[3];
  PCSharedCount v34;
  PCSharedCount v35[3];
  PCSharedCount v36;
  PCSharedCount v37[3];
  PCSharedCount v38;
  PCSharedCount v39[3];
  PCSharedCount v40;
  PCSharedCount v41[3];
  PCSharedCount v42;
  _QWORD v43[3];
  PCSharedCount v44;
  void *v45;
  char v46;
  uint64_t v47;
  PCSharedCount v48;
  _QWORD v49[3];
  PCSharedCount v50;
  _QWORD v51[3];
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54[2];

  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)this, (uint64_t)v51);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)a2, (uint64_t)v49);
  v45 = &unk_1E6569AC8;
  v46 = *((_BYTE *)a4 + 8);
  v47 = *((_QWORD *)a4 + 2);
  PCSharedCount::PCSharedCount(&v48, (const PCSharedCount *)a4 + 3);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v51, (uint64_t)&v45, v39);
  ProShade::operator*(v41, v39, &v45);
  ProShade::operator-(v43, v51, v41);
  v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  ProShade::Func<ProShade::Func_length>::eval((uint64_t)v43, v37);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0.1);
  v35[2].var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v36, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  ProShade::operator>((uint64_t)v37, (uint64_t)v35, v39);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v43, (uint64_t)v33);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0.0);
  v29[1].var0 = (PC_Sp_counted_base *)v11;
  PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v25[0] = &unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 0.0);
  var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(&v27, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 0.0);
  v23 = v13;
  PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::Vec3::Vec3(v31, &v28, v25, &v21);
  ProShade::Func<ProShade::Func_cond>::eval((uint64_t)v39, (uint64_t)v33, (uint64_t)v31, v41);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v43, v41);
  v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v31[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v25[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v49, (uint64_t)&v45, v37);
  ProShade::operator*(v39, v37, &v45);
  ProShade::operator-(v41, v49, v39);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v41, (uint64_t)v43, v35);
  ProShade::operator*(v37, v35, v43);
  ProShade::operator-(v39, v41, v37);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v41, v39);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  ProShade::Func<ProShade::Func_length>::eval((uint64_t)v41, v35);
  v33[0] = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 0.1);
  v33[2] = v14;
  PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  ProShade::operator>((uint64_t)v35, (uint64_t)v33, v37);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v41, (uint64_t)v31);
  v25[0] = &unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0.0);
  var0 = (PC_Sp_counted_base *)v15;
  PCSharedCount::PCSharedCount(&v27, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 0.0);
  v23 = v16;
  PCSharedCount::PCSharedCount(&v24, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  v18[0] = &unk_1E6569AC8;
  v17 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v17, 0.0);
  v19 = (PC_Sp_counted_base *)v17;
  PCSharedCount::PCSharedCount(&v20, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  ProShade::Vec3::Vec3(&v28, v25, &v21, v18);
  ProShade::Func<ProShade::Func_cond>::eval((uint64_t)v37, (uint64_t)v31, (uint64_t)&v28, v39);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v41, v39);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v25[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v31[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  ProShade::Selector_base::_select((uint64_t)a3 + 8, (const PCString *)2, &v28);
  v31[0] = &unk_1E6569AC8;
  v31[2] = v28.var0;
  PCSharedCount::PCSharedCount(&v32, v29);
  PCSharedCount::~PCSharedCount(v29);
  ProShade::operator*(v33, &v45, v31);
  ProShade::Selector_base::_select((uint64_t)a3 + 8, 0, &v21);
  v25[0] = &unk_1E6569AC8;
  var0 = v21.var0;
  PCSharedCount::PCSharedCount(&v27, &v22);
  PCSharedCount::~PCSharedCount(&v22);
  ProShade::operator*(&v28, v43, v25);
  ProShade::operator+(v35, v33, &v28);
  ProShade::Selector_base::_select((uint64_t)a3 + 8, (const PCString *)1, &v53);
  v18[0] = &unk_1E6569AC8;
  v19 = v53.var0;
  PCSharedCount::PCSharedCount(&v20, v54);
  PCSharedCount::~PCSharedCount(v54);
  ProShade::operator*(&v21, v41, v18);
  ProShade::operator+(v37, v35, &v21);
  ProShade::Vec3::Vec3(v39, v37);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v21.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v24);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v20);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v28.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v25[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v31[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v32);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v39, (uint64_t)v37);
  ProShade::Vec3::Vec3(a5, v37);
  v37[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v43[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v44);
  v45 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v48);
  v49[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v50);
  v51[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v52);
}

void sub_1B2D86A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,PCSharedCount a45,uint64_t a46,uint64_t a47,uint64_t a48,PCSharedCount a49)
{
  PCSharedCount *v49;
  PCSharedCount *v50;
  uint64_t v51;
  uint64_t v52;

  PCSharedCount::~PCSharedCount(v50 + 3);
  PCSharedCount::~PCSharedCount(&a45);
  a46 = v51 + 16;
  PCSharedCount::~PCSharedCount(&a49);
  *(_QWORD *)(v52 - 248) = v51 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v52 - 224));
  *(_QWORD *)(v52 - 216) = v51 + 16;
  PCSharedCount::~PCSharedCount(v49);
  *(_QWORD *)(v52 - 184) = v51 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v52 - 160));
  *(_QWORD *)(v52 - 152) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v52 - 128));
  _Unwind_Resume(a1);
}

void sub_1B2D86F38()
{
  JUMPOUT(0x1B2D86E90);
}

void LiMaterialLayerUniform::setup(uint64_t a1, const void **a2, LiString *a3, int a4, int a5)
{
  _DWORD *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  size_t v12;
  const void *v13;
  int v14;
  size_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  PCShared_base *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v30;
  _BYTE *v31;

  v8 = *a2;
  if (*a2)
    v9 = *(v8 - 2);
  else
    v9 = 0;
  v10 = (unsigned int *)malloc_type_malloc(v9 + 14, 0x8903763CuLL);
  v10[1] = v9 + 1;
  v10[2] = v9 + 2;
  atomic_store(1u, v10);
  atomic_store(0, v10);
  memcpy(v10 + 3, v8, v9);
  *(_WORD *)((char *)v10 + v9 + 12) = 95;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  LiString::format(a3, (LiString *)&v30);
  v12 = (int)v10[1];
  v13 = v30;
  if (v30)
    v14 = *((_DWORD *)v30 - 2);
  else
    v14 = 0;
  v15 = v12 + v14;
  v16 = (unsigned int *)malloc_type_malloc(v15 + 13, 0x8903763CuLL);
  v16[1] = v15;
  v16[2] = v15 + 1;
  atomic_store(1u, v16);
  atomic_store(0, v16);
  memcpy(v16 + 3, v10 + 3, v12);
  memcpy((char *)v16 + v12 + 12, v13, v14);
  *((_BYTE *)v16 + v15 + 12) = 0;
  v31 = v16 + 3;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  if (v30)
  {
    v18 = (unsigned int *)(v30 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *v30 = 0;
      if (v30)
        v21 = v30 - 12;
      else
        v21 = 0;
      free(v21);
    }
  }
  do
  {
    v22 = __ldaxr(v10);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v10));
  if (!v23)
    free(v10);
  v24 = (PCShared_base *)operator new();
  ProShade::UniformNode::UniformNode((uint64_t)v24, (uint64_t *)&v31, a4, a5, 3);
  PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(a1 + 16), v24);
  if (v31)
  {
    v25 = (unsigned int *)(v31 - 12);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      *v31 = 0;
      if (v31)
        v28 = v31 - 12;
      else
        v28 = 0;
      free(v28);
    }
  }
}

void sub_1B2D87168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  uint64_t v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  MEMORY[0x1B5E29170](v12, 0x10B1C402CAA7C2BLL);
  if (a12)
  {
    v14 = (unsigned int *)(a12 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(a1);
}

void LiMaterialLayerUniform::setup(PCShared_base **this, const void **a2, const LiString *a3)
{
  _DWORD *v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  size_t v9;
  PC_Sp_counted_base *var0;
  int v11;
  size_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  ProShade::SamplerNode *v21;
  ProShade *v22;
  const void *v23;
  int v24;
  size_t v25;
  char *v26;
  char *v27;
  unsigned int v28;
  PCShared_base *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE *v37;
  PCSharedCount v38[3];
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43;
  _BYTE *v44;

  v5 = *a2;
  if (*a2)
    v6 = *(v5 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v7[1] = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  memcpy(v7 + 3, v5, v6);
  *(_WORD *)((char *)v7 + v6 + 12) = 95;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  LiString::format(a3, (LiString *)v38);
  v9 = (int)v7[1];
  var0 = v38[0].var0;
  if (v38[0].var0)
    v11 = *((_DWORD *)v38[0].var0 - 2);
  else
    v11 = 0;
  v12 = v9 + v11;
  v13 = (unsigned int *)malloc_type_malloc(v12 + 13, 0x8903763CuLL);
  v13[1] = v12;
  v13[2] = v12 + 1;
  atomic_store(1u, v13);
  atomic_store(0, v13);
  memcpy(v13 + 3, v7 + 3, v9);
  memcpy((char *)v13 + v9 + 12, var0, v11);
  *((_BYTE *)v13 + v12 + 12) = 0;
  v44 = v13 + 3;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (v38[0].var0)
  {
    v15 = (unsigned int *)((char *)v38[0].var0 - 12);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      *(_BYTE *)v38[0].var0 = 0;
      if (v38[0].var0)
        v18 = (char *)v38[0].var0 - 12;
      else
        v18 = 0;
      free(v18);
    }
  }
  do
  {
    v19 = __ldaxr(v7);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v7));
  if (!v20)
    free(v7);
  v21 = (ProShade::SamplerNode *)operator new();
  v22 = (ProShade *)(*((uint64_t (**)(PCShared_base **))*this + 3))(this);
  ProShade::SamplerNode::SamplerNode(v21, v22, 0, 0, 0, (const LiString *)&v44);
  ProShade::Sampler::Sampler((ProShade::Sampler *)v38, v21);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)this, v38);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)(this + 4), &v40);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)(this + 8), &v42);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  v42.var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v43);
  v40.var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(&v41);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(&v39);
  v23 = v44;
  if (v44)
    v24 = *((_DWORD *)v44 - 2);
  else
    v24 = 0;
  v25 = v24;
  v26 = (char *)malloc_type_malloc(v24 + 16, 0x8903763CuLL);
  *((_DWORD *)v26 + 1) = v25 + 3;
  *((_DWORD *)v26 + 2) = v25 + 4;
  atomic_store(1u, (unsigned int *)v26);
  atomic_store(0, (unsigned int *)v26);
  memcpy(v26 + 12, v23, v25);
  v27 = &v26[v25 + 12];
  *(_WORD *)v27 = 28767;
  v27[2] = 116;
  v26[v25 + 15] = 0;
  v38[0].var0 = (PC_Sp_counted_base *)(v26 + 12);
  do
    v28 = __ldaxr((unsigned int *)v26);
  while (__stlxr(v28 + 1, (unsigned int *)v26));
  v29 = (PCShared_base *)operator new();
  ProShade::UniformNode::UniformNode((uint64_t)v29, (uint64_t *)v38, 3, 7, 3);
  PCPtr<ProShade::Node>::reset<ProShade::Node>(this + 10, v29);
  if (v38[0].var0)
  {
    v30 = (unsigned int *)((char *)v38[0].var0 - 12);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      *(_BYTE *)v38[0].var0 = 0;
      if (v38[0].var0)
        v33 = (char *)v38[0].var0 - 12;
      else
        v33 = 0;
      free(v33);
    }
  }
  if (v44)
  {
    v34 = (unsigned int *)(v44 - 12);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      *v44 = 0;
      if (v44)
        v37 = v44 - 12;
      else
        v37 = 0;
      free(v37);
    }
  }
}

void sub_1B2D875D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;

  MEMORY[0x1B5E29170](v10, 0x10B1C402CAA7C2BLL);
  if (a10)
  {
    v13 = (unsigned int *)(a10 - 12);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  v16 = *(_QWORD *)(v11 - 88);
  if (v16)
  {
    v17 = (unsigned int *)(v16 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      **(_BYTE **)(v11 - 88) = 0;
      v20 = *(_QWORD *)(v11 - 88);
      if (v20)
        v21 = (void *)(v20 - 12);
      else
        v21 = 0;
      free(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t LiMaterialLayerUniform::get(os_unfair_lock_s *this, uint64_t a2)
{
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  return LiMaterialLayerUniform::get(this, (LiLayeredMaterial *)*(unsigned int *)(*(_QWORD *)a2 + 12));
}

uint64_t LiMaterialLayerUniform::get(os_unfair_lock_s *this, LiLayeredMaterial *a2)
{
  int v2;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t SamplerInfo;
  LiMaterialLayerUniform *v8;
  unint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  PCShared_base **v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  char *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  char *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  char *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  char *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  char *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  char *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  char *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  char *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  char *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  char *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  char *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  char *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  char *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  char *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  char *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  char *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  char *v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  char *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  char *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  char *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  char *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  char *v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  char *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  char *v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  char *v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  char *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  char *v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  char *v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  char *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  char *v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  char *v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  char *v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int v204;
  char *v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  char *v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  char *v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  char *v217;
  LiMaterialLayerUniform *v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  PCShared_base ***v229;
  char *v230;
  uint64_t v231;
  PCShared_base **v232;
  BOOL v233;
  char *v234;
  int *v235;

  v2 = (int)a2;
  if ((v4 & 1) == 0
  {
    LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform = 0;
    qword_1EF076160 = 0;
    qword_1EF076168 = 0;
    __cxa_atexit((void (*)(void *))std::vector<LiMaterialLayerUniform *>::~vector[abi:ne180100], &LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform, &dword_1B2737000);
  }
  if ((v5 & 1) == 0
  {
    LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock = 0;
    __cxa_atexit((void (*)(void *))PCSpinLock::~PCSpinLock, &LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock, &dword_1B2737000);
  }
  v235 = &LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock;
  PCSpinLock::lock((os_unfair_lock_t)&LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock);
  v6 = qword_1EF076160 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform;
  if (v2 < (unint64_t)((qword_1EF076160 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform) >> 3))
  {
    SamplerInfo = LiMaterial::getSamplerInfo(this, *(const ProShade::SamplerNode **)(*(_QWORD *)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform+ 8 * v2)+ 368));
    if (!SamplerInfo || !*(_BYTE *)(SamplerInfo + 312))
      LiMaterialLayerUniform::initializeSamplerAttributes((LiMaterialLayerUniform *)this, *(const ProShade::SamplerNode ***)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform + 8 * v2), v8);
    goto LABEL_8;
  }
  v9 = v6 >> 3;
  if ((int)(v6 >> 3) > v2)
  {
LABEL_8:
    v10 = *(_QWORD *)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform + 8 * v2);
    v11 = (os_unfair_lock_s *)&LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::lock;
LABEL_9:
    PCSpinLock::unlock(v11);
    return v10;
  }
  do
  {
    v13 = (PCShared_base **)operator new();
    LiMaterialLayerUniform::LiMaterialLayerUniform((LiMaterialLayerUniform *)v13);
    LiString::LiString((LiString *)&v234, "color");
    LiMaterialLayerUniform::setup((uint64_t)v13, (const void **)&v234, (LiString *)v9, 3, 4);
    if (v234)
    {
      v14 = (unsigned int *)(v234 - 12);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        *v234 = 0;
        if (v234)
          v17 = v234 - 12;
        else
          v17 = 0;
        free(v17);
      }
    }
    LiString::LiString((LiString *)&v234, "emissionColor");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 4), (const void **)&v234, (LiString *)v9, 3, 3);
    if (v234)
    {
      v18 = (unsigned int *)(v234 - 12);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        *v234 = 0;
        if (v234)
          v21 = v234 - 12;
        else
          v21 = 0;
        free(v21);
      }
    }
    LiString::LiString((LiString *)&v234, "emissionIntensity");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 8), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v22 = (unsigned int *)(v234 - 12);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        *v234 = 0;
        if (v234)
          v25 = v234 - 12;
        else
          v25 = 0;
        free(v25);
      }
    }
    LiString::LiString((LiString *)&v234, "emissionAlpha");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 12), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v26 = (unsigned int *)(v234 - 12);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        *v234 = 0;
        if (v234)
          v29 = v234 - 12;
        else
          v29 = 0;
        free(v29);
      }
    }
    LiString::LiString((LiString *)&v234, "diffuseIntensity");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 16), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v30 = (unsigned int *)(v234 - 12);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        *v234 = 0;
        if (v234)
          v33 = v234 - 12;
        else
          v33 = 0;
        free(v33);
      }
    }
    LiString::LiString((LiString *)&v234, "diffuseAlpha");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 20), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v34 = (unsigned int *)(v234 - 12);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        *v234 = 0;
        if (v234)
          v37 = v234 - 12;
        else
          v37 = 0;
        free(v37);
      }
    }
    LiString::LiString((LiString *)&v234, "specularIntensity");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 24), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v38 = (unsigned int *)(v234 - 12);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        *v234 = 0;
        if (v234)
          v41 = v234 - 12;
        else
          v41 = 0;
        free(v41);
      }
    }
    LiString::LiString((LiString *)&v234, "shininess");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 28), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v42 = (unsigned int *)(v234 - 12);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        *v234 = 0;
        if (v234)
          v45 = v234 - 12;
        else
          v45 = 0;
        free(v45);
      }
    }
    LiString::LiString((LiString *)&v234, "specularMetallicScalar");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 32), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v46 = (unsigned int *)(v234 - 12);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        *v234 = 0;
        if (v234)
          v49 = v234 - 12;
        else
          v49 = 0;
        free(v49);
      }
    }
    LiString::LiString((LiString *)&v234, "envIntensity");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 36), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v50 = (unsigned int *)(v234 - 12);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        *v234 = 0;
        if (v234)
          v53 = v234 - 12;
        else
          v53 = 0;
        free(v53);
      }
    }
    LiString::LiString((LiString *)&v234, "envShininess");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 40), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v54 = (unsigned int *)(v234 - 12);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        *v234 = 0;
        if (v234)
          v57 = v234 - 12;
        else
          v57 = 0;
        free(v57);
      }
    }
    LiString::LiString((LiString *)&v234, "textureMap");
    LiMaterialLayerUniform::setup(v13 + 44, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v58 = (unsigned int *)(v234 - 12);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        *v234 = 0;
        if (v234)
          v61 = v234 - 12;
        else
          v61 = 0;
        free(v61);
      }
    }
    LiString::LiString((LiString *)&v234, "extraTextureMap");
    LiMaterialLayerUniform::setup(v13 + 56, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v62 = (unsigned int *)(v234 - 12);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        *v234 = 0;
        if (v234)
          v65 = v234 - 12;
        else
          v65 = 0;
        free(v65);
      }
    }
    LiString::LiString((LiString *)&v234, "bumpMap");
    LiMaterialLayerUniform::setup(v13 + 68, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v66 = (unsigned int *)(v234 - 12);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        *v234 = 0;
        if (v234)
          v69 = v234 - 12;
        else
          v69 = 0;
        free(v69);
      }
    }
    LiString::LiString((LiString *)&v234, "bumpMapLean1");
    LiMaterialLayerUniform::setup(v13 + 80, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v70 = (unsigned int *)(v234 - 12);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        *v234 = 0;
        if (v234)
          v73 = v234 - 12;
        else
          v73 = 0;
        free(v73);
      }
    }
    LiString::LiString((LiString *)&v234, "bumpMapLean2");
    LiMaterialLayerUniform::setup(v13 + 92, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v74 = (unsigned int *)(v234 - 12);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        *v234 = 0;
        if (v234)
          v77 = v234 - 12;
        else
          v77 = 0;
        free(v77);
      }
    }
    LiString::LiString((LiString *)&v234, "specularShininessMap");
    LiMaterialLayerUniform::setup(v13 + 104, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v78 = (unsigned int *)(v234 - 12);
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        *v234 = 0;
        if (v234)
          v81 = v234 - 12;
        else
          v81 = 0;
        free(v81);
      }
    }
    LiString::LiString((LiString *)&v234, "specularShininessBlackLevel");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 116), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v82 = (unsigned int *)(v234 - 12);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        *v234 = 0;
        if (v234)
          v85 = v234 - 12;
        else
          v85 = 0;
        free(v85);
      }
    }
    LiString::LiString((LiString *)&v234, "specularShininessWhiteLevel");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 120), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v86 = (unsigned int *)(v234 - 12);
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (!v88)
      {
        *v234 = 0;
        if (v234)
          v89 = v234 - 12;
        else
          v89 = 0;
        free(v89);
      }
    }
    LiString::LiString((LiString *)&v234, "specularIntensityMap");
    LiMaterialLayerUniform::setup(v13 + 124, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v90 = (unsigned int *)(v234 - 12);
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
      {
        *v234 = 0;
        if (v234)
          v93 = v234 - 12;
        else
          v93 = 0;
        free(v93);
      }
    }
    LiString::LiString((LiString *)&v234, "specularIntensityBlackLevel");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 136), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v94 = (unsigned int *)(v234 - 12);
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        *v234 = 0;
        if (v234)
          v97 = v234 - 12;
        else
          v97 = 0;
        free(v97);
      }
    }
    LiString::LiString((LiString *)&v234, "specularIntensityWhiteLevel");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 140), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v98 = (unsigned int *)(v234 - 12);
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        *v234 = 0;
        if (v234)
          v101 = v234 - 12;
        else
          v101 = 0;
        free(v101);
      }
    }
    LiString::LiString((LiString *)&v234, "specularAnisotropicAngleMap");
    LiMaterialLayerUniform::setup(v13 + 144, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v102 = (unsigned int *)(v234 - 12);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        *v234 = 0;
        if (v234)
          v105 = v234 - 12;
        else
          v105 = 0;
        free(v105);
      }
    }
    LiString::LiString((LiString *)&v234, "emissionMap");
    LiMaterialLayerUniform::setup(v13 + 156, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v106 = (unsigned int *)(v234 - 12);
      do
      {
        v107 = __ldaxr(v106);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, v106));
      if (!v108)
      {
        *v234 = 0;
        if (v234)
          v109 = v234 - 12;
        else
          v109 = 0;
        free(v109);
      }
    }
    LiString::LiString((LiString *)&v234, "maskMap");
    LiMaterialLayerUniform::setup(v13 + 168, (const void **)&v234, (const LiString *)v9);
    if (v234)
    {
      v110 = (unsigned int *)(v234 - 12);
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        *v234 = 0;
        if (v234)
          v113 = v234 - 12;
        else
          v113 = 0;
        free(v113);
      }
    }
    LiString::LiString((LiString *)&v234, "maskAmount");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 272), (const void **)&v234, (LiString *)v9, 3, 4);
    if (v234)
    {
      v114 = (unsigned int *)(v234 - 12);
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        *v234 = 0;
        if (v234)
          v117 = v234 - 12;
        else
          v117 = 0;
        free(v117);
      }
    }
    LiString::LiString((LiString *)&v234, "roughness");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 180), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v118 = (unsigned int *)(v234 - 12);
      do
      {
        v119 = __ldaxr(v118);
        v120 = v119 - 1;
      }
      while (__stlxr(v120, v118));
      if (!v120)
      {
        *v234 = 0;
        if (v234)
          v121 = v234 - 12;
        else
          v121 = 0;
        free(v121);
      }
    }
    LiString::LiString((LiString *)&v234, "soften");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 184), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v122 = (unsigned int *)(v234 - 12);
      do
      {
        v123 = __ldaxr(v122);
        v124 = v123 - 1;
      }
      while (__stlxr(v124, v122));
      if (!v124)
      {
        *v234 = 0;
        if (v234)
          v125 = v234 - 12;
        else
          v125 = 0;
        free(v125);
      }
    }
    LiString::LiString((LiString *)&v234, "shadowAlg");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 188), (const void **)&v234, (LiString *)v9, 2, 1);
    if (v234)
    {
      v126 = (unsigned int *)(v234 - 12);
      do
      {
        v127 = __ldaxr(v126);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v126));
      if (!v128)
      {
        *v234 = 0;
        if (v234)
          v129 = v234 - 12;
        else
          v129 = 0;
        free(v129);
      }
    }
    LiString::LiString((LiString *)&v234, "shadowSoftness");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 192), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v130 = (unsigned int *)(v234 - 12);
      do
      {
        v131 = __ldaxr(v130);
        v132 = v131 - 1;
      }
      while (__stlxr(v132, v130));
      if (!v132)
      {
        *v234 = 0;
        if (v234)
          v133 = v234 - 12;
        else
          v133 = 0;
        free(v133);
      }
    }
    LiString::LiString((LiString *)&v234, "shadowColor");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 196), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v134 = (unsigned int *)(v234 - 12);
      do
      {
        v135 = __ldaxr(v134);
        v136 = v135 - 1;
      }
      while (__stlxr(v136, v134));
      if (!v136)
      {
        *v234 = 0;
        if (v234)
          v137 = v234 - 12;
        else
          v137 = 0;
        free(v137);
      }
    }
    LiString::LiString((LiString *)&v234, "anisotropicPoint");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 200), (const void **)&v234, (LiString *)v9, 3, 3);
    if (v234)
    {
      v138 = (unsigned int *)(v234 - 12);
      do
      {
        v139 = __ldaxr(v138);
        v140 = v139 - 1;
      }
      while (__stlxr(v140, v138));
      if (!v140)
      {
        *v234 = 0;
        if (v234)
          v141 = v234 - 12;
        else
          v141 = 0;
        free(v141);
      }
    }
    LiString::LiString((LiString *)&v234, "anisotropicAxis");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 204), (const void **)&v234, (LiString *)v9, 3, 3);
    if (v234)
    {
      v142 = (unsigned int *)(v234 - 12);
      do
      {
        v143 = __ldaxr(v142);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v142));
      if (!v144)
      {
        *v234 = 0;
        if (v234)
          v145 = v234 - 12;
        else
          v145 = 0;
        free(v145);
      }
    }
    LiString::LiString((LiString *)&v234, "anisotropicGrooviness");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 208), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v146 = (unsigned int *)(v234 - 12);
      do
      {
        v147 = __ldaxr(v146);
        v148 = v147 - 1;
      }
      while (__stlxr(v148, v146));
      if (!v148)
      {
        *v234 = 0;
        if (v234)
          v149 = v234 - 12;
        else
          v149 = 0;
        free(v149);
      }
    }
    LiString::LiString((LiString *)&v234, "textureMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 212), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v150 = (unsigned int *)(v234 - 12);
      do
      {
        v151 = __ldaxr(v150);
        v152 = v151 - 1;
      }
      while (__stlxr(v152, v150));
      if (!v152)
      {
        *v234 = 0;
        if (v234)
          v153 = v234 - 12;
        else
          v153 = 0;
        free(v153);
      }
    }
    LiString::LiString((LiString *)&v234, "extraTextureMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 216), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v154 = (unsigned int *)(v234 - 12);
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        *v234 = 0;
        if (v234)
          v157 = v234 - 12;
        else
          v157 = 0;
        free(v157);
      }
    }
    LiString::LiString((LiString *)&v234, "bumpMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 220), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v158 = (unsigned int *)(v234 - 12);
      do
      {
        v159 = __ldaxr(v158);
        v160 = v159 - 1;
      }
      while (__stlxr(v160, v158));
      if (!v160)
      {
        *v234 = 0;
        if (v234)
          v161 = v234 - 12;
        else
          v161 = 0;
        free(v161);
      }
    }
    LiString::LiString((LiString *)&v234, "bumpMapGain");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 224), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v162 = (unsigned int *)(v234 - 12);
      do
      {
        v163 = __ldaxr(v162);
        v164 = v163 - 1;
      }
      while (__stlxr(v164, v162));
      if (!v164)
      {
        *v234 = 0;
        if (v234)
          v165 = v234 - 12;
        else
          v165 = 0;
        free(v165);
      }
    }
    LiString::LiString((LiString *)&v234, "specularShininessMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 228), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v166 = (unsigned int *)(v234 - 12);
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        *v234 = 0;
        if (v234)
          v169 = v234 - 12;
        else
          v169 = 0;
        free(v169);
      }
    }
    LiString::LiString((LiString *)&v234, "specularIntensityMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 232), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v170 = (unsigned int *)(v234 - 12);
      do
      {
        v171 = __ldaxr(v170);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v170));
      if (!v172)
      {
        *v234 = 0;
        if (v234)
          v173 = v234 - 12;
        else
          v173 = 0;
        free(v173);
      }
    }
    LiString::LiString((LiString *)&v234, "specularAnisotropicAngleMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 236), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v174 = (unsigned int *)(v234 - 12);
      do
      {
        v175 = __ldaxr(v174);
        v176 = v175 - 1;
      }
      while (__stlxr(v176, v174));
      if (!v176)
      {
        *v234 = 0;
        if (v234)
          v177 = v234 - 12;
        else
          v177 = 0;
        free(v177);
      }
    }
    LiString::LiString((LiString *)&v234, "emissionMapMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 240), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v178 = (unsigned int *)(v234 - 12);
      do
      {
        v179 = __ldaxr(v178);
        v180 = v179 - 1;
      }
      while (__stlxr(v180, v178));
      if (!v180)
      {
        *v234 = 0;
        if (v234)
          v181 = v234 - 12;
        else
          v181 = 0;
        free(v181);
      }
    }
    LiString::LiString((LiString *)&v234, "textureColorAdjustMatrix");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 244), (const void **)&v234, (LiString *)v9, 3, 7);
    if (v234)
    {
      v182 = (unsigned int *)(v234 - 12);
      do
      {
        v183 = __ldaxr(v182);
        v184 = v183 - 1;
      }
      while (__stlxr(v184, v182));
      if (!v184)
      {
        *v234 = 0;
        if (v234)
          v185 = v234 - 12;
        else
          v185 = 0;
        free(v185);
      }
    }
    LiString::LiString((LiString *)&v234, "averageColor");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 248), (const void **)&v234, (LiString *)v9, 3, 3);
    if (v234)
    {
      v186 = (unsigned int *)(v234 - 12);
      do
      {
        v187 = __ldaxr(v186);
        v188 = v187 - 1;
      }
      while (__stlxr(v188, v186));
      if (!v188)
      {
        *v234 = 0;
        if (v234)
          v189 = v234 - 12;
        else
          v189 = 0;
        free(v189);
      }
    }
    LiString::LiString((LiString *)&v234, "mixColor");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 252), (const void **)&v234, (LiString *)v9, 3, 3);
    if (v234)
    {
      v190 = (unsigned int *)(v234 - 12);
      do
      {
        v191 = __ldaxr(v190);
        v192 = v191 - 1;
      }
      while (__stlxr(v192, v190));
      if (!v192)
      {
        *v234 = 0;
        if (v234)
          v193 = v234 - 12;
        else
          v193 = 0;
        free(v193);
      }
    }
    LiString::LiString((LiString *)&v234, "mixColorAmount");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 256), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v194 = (unsigned int *)(v234 - 12);
      do
      {
        v195 = __ldaxr(v194);
        v196 = v195 - 1;
      }
      while (__stlxr(v196, v194));
      if (!v196)
      {
        *v234 = 0;
        if (v234)
          v197 = v234 - 12;
        else
          v197 = 0;
        free(v197);
      }
    }
    LiString::LiString((LiString *)&v234, "fresnelExponent");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 260), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v198 = (unsigned int *)(v234 - 12);
      do
      {
        v199 = __ldaxr(v198);
        v200 = v199 - 1;
      }
      while (__stlxr(v200, v198));
      if (!v200)
      {
        *v234 = 0;
        if (v234)
          v201 = v234 - 12;
        else
          v201 = 0;
        free(v201);
      }
    }
    LiString::LiString((LiString *)&v234, "faceForeground");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 264), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v202 = (unsigned int *)(v234 - 12);
      do
      {
        v203 = __ldaxr(v202);
        v204 = v203 - 1;
      }
      while (__stlxr(v204, v202));
      if (!v204)
      {
        *v234 = 0;
        if (v234)
          v205 = v234 - 12;
        else
          v205 = 0;
        free(v205);
      }
    }
    LiString::LiString((LiString *)&v234, "edgeForeground");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 268), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v206 = (unsigned int *)(v234 - 12);
      do
      {
        v207 = __ldaxr(v206);
        v208 = v207 - 1;
      }
      while (__stlxr(v208, v206));
      if (!v208)
      {
        *v234 = 0;
        if (v234)
          v209 = v234 - 12;
        else
          v209 = 0;
        free(v209);
      }
    }
    LiString::LiString((LiString *)&v234, "over");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 276), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v210 = (unsigned int *)(v234 - 12);
      do
      {
        v211 = __ldaxr(v210);
        v212 = v211 - 1;
      }
      while (__stlxr(v212, v210));
      if (!v212)
      {
        *v234 = 0;
        if (v234)
          v213 = v234 - 12;
        else
          v213 = 0;
        free(v213);
      }
    }
    LiString::LiString((LiString *)&v234, "blendAmount");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 280), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v214 = (unsigned int *)(v234 - 12);
      do
      {
        v215 = __ldaxr(v214);
        v216 = v215 - 1;
      }
      while (__stlxr(v216, v214));
      if (!v216)
      {
        *v234 = 0;
        if (v234)
          v217 = v234 - 12;
        else
          v217 = 0;
        free(v217);
      }
    }
    LiString::LiString((LiString *)&v234, "occlusion");
    LiMaterialLayerUniform::setup((uint64_t)(v13 + 284), (const void **)&v234, (LiString *)v9, 3, 1);
    if (v234)
    {
      v219 = (unsigned int *)(v234 - 12);
      do
      {
        v220 = __ldaxr(v219);
        v221 = v220 - 1;
      }
      while (__stlxr(v221, v219));
      if (!v221)
      {
        *v234 = 0;
        if (v234)
          v222 = v234 - 12;
        else
          v222 = 0;
        free(v222);
      }
    }
    v223 = qword_1EF076160;
    if (qword_1EF076160 >= (unint64_t)qword_1EF076168)
    {
      v225 = (qword_1EF076160 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform) >> 3;
      if ((unint64_t)(v225 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v226 = (qword_1EF076168 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform) >> 2;
      if (v226 <= v225 + 1)
        v226 = v225 + 1;
      if ((unint64_t)(qword_1EF076168 - LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform) >= 0x7FFFFFFFFFFFFFF8)
        v227 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v227 = v226;
      if (v227)
        v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&qword_1EF076168, v227);
      else
        v228 = 0;
      v229 = (PCShared_base ***)&v228[8 * v225];
      *v229 = v13;
      v224 = (uint64_t)(v229 + 1);
      v231 = LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform;
      v230 = (char *)qword_1EF076160;
      if (qword_1EF076160 != LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform)
      {
        do
        {
          v232 = (PCShared_base **)*((_QWORD *)v230 - 1);
          v230 -= 8;
          *--v229 = v232;
        }
        while (v230 != (char *)v231);
        v230 = (char *)LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform;
      }
      LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform = (uint64_t)v229;
      qword_1EF076160 = v224;
      qword_1EF076168 = (uint64_t)&v228[8 * v227];
      if (v230)
        operator delete(v230);
    }
    else
    {
      *(_QWORD *)qword_1EF076160 = v13;
      v224 = v223 + 8;
    }
    qword_1EF076160 = v224;
    LiMaterialLayerUniform::initializeSamplerAttributes((LiMaterialLayerUniform *)this, v13, v218);
    v233 = (_DWORD)v9 == v2;
    v9 = (v9 + 1);
  }
  while (!v233);
  v11 = (os_unfair_lock_s *)v235;
  v10 = *(_QWORD *)(LiMaterialLayerUniform::get(LiLayeredMaterial *,int)::_uniform + 8 * v2);
  if (v235)
    goto LABEL_9;
  return v10;
}

void sub_1B2D88E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LiMaterialLayerUniform *>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

LiMaterialSamplerInfo *LiMaterialLayerUniform::initializeSamplerAttributes(LiMaterialLayerUniform *this, const ProShade::SamplerNode **a2, LiMaterialLayerUniform *a3)
{
  LiMaterialSamplerInfo *v5;
  LiMaterialSamplerInfo *v6;
  LiMaterialSamplerInfo *v7;
  LiMaterialSamplerInfo *v8;
  LiMaterialSamplerInfo *v9;
  LiMaterialSamplerInfo *v10;
  LiMaterialSamplerInfo *v11;
  LiMaterialSamplerInfo *v12;
  LiMaterialSamplerInfo *v13;
  LiMaterialSamplerInfo *result;

  v5 = LiMaterial::obtainSamplerInfo(this, a2[46]);
  *((_DWORD *)v5 + 81) = 0;
  *(_QWORD *)((char *)v5 + 316) = 0;
  *((_WORD *)v5 + 164) = 257;
  *((_DWORD *)v5 + 83) = 0;
  *((_WORD *)v5 + 168) = 256;
  *((_BYTE *)v5 + 338) = 0;
  *((_BYTE *)v5 + 312) = 1;
  v6 = LiMaterial::obtainSamplerInfo(this, a2[58]);
  *((_DWORD *)v6 + 81) = 0;
  *(_QWORD *)((char *)v6 + 316) = 0;
  *((_WORD *)v6 + 164) = 257;
  *((_DWORD *)v6 + 83) = 0;
  *((_WORD *)v6 + 168) = 256;
  *((_BYTE *)v6 + 338) = 0;
  *((_BYTE *)v6 + 312) = 1;
  v7 = LiMaterial::obtainSamplerInfo(this, a2[70]);
  *(_QWORD *)((char *)v7 + 316) = 0;
  *((_DWORD *)v7 + 81) = 1;
  *((_WORD *)v7 + 164) = 257;
  *((_DWORD *)v7 + 83) = 0;
  *(_DWORD *)((char *)v7 + 335) = 0;
  *((_BYTE *)v7 + 312) = 1;
  v8 = LiMaterial::obtainSamplerInfo(this, a2[82]);
  *(_QWORD *)((char *)v8 + 316) = 0;
  *((_DWORD *)v8 + 81) = 2;
  *((_WORD *)v8 + 164) = 257;
  *((_DWORD *)v8 + 83) = 0;
  *(_DWORD *)((char *)v8 + 335) = 0;
  *((_BYTE *)v8 + 312) = 1;
  v9 = LiMaterial::obtainSamplerInfo(this, a2[94]);
  *(_QWORD *)((char *)v9 + 316) = 0;
  *((_DWORD *)v9 + 81) = 3;
  *((_WORD *)v9 + 164) = 257;
  *((_DWORD *)v9 + 83) = 0;
  *(_DWORD *)((char *)v9 + 335) = 0;
  *((_BYTE *)v9 + 312) = 1;
  v10 = LiMaterial::obtainSamplerInfo(this, a2[106]);
  *((_DWORD *)v10 + 79) = 0;
  *((_QWORD *)v10 + 40) = 1;
  *((_WORD *)v10 + 164) = 257;
  *((_DWORD *)v10 + 83) = 0;
  *(_DWORD *)((char *)v10 + 335) = 0;
  *((_BYTE *)v10 + 312) = 1;
  v11 = LiMaterial::obtainSamplerInfo(this, a2[126]);
  *((_DWORD *)v11 + 79) = 0;
  *((_QWORD *)v11 + 40) = 1;
  *((_WORD *)v11 + 164) = 257;
  *((_DWORD *)v11 + 83) = 0;
  *(_DWORD *)((char *)v11 + 335) = 0;
  *((_BYTE *)v11 + 312) = 1;
  v12 = LiMaterial::obtainSamplerInfo(this, a2[146]);
  *((_DWORD *)v12 + 79) = 0;
  *((_QWORD *)v12 + 40) = 1;
  *((_WORD *)v12 + 164) = 1;
  *((_DWORD *)v12 + 83) = 0;
  *((_WORD *)v12 + 168) = 0;
  *((_BYTE *)v12 + 338) = 1;
  *((_BYTE *)v12 + 312) = 1;
  v13 = LiMaterial::obtainSamplerInfo(this, a2[158]);
  *((_DWORD *)v13 + 81) = 0;
  *(_QWORD *)((char *)v13 + 316) = 0;
  *((_WORD *)v13 + 164) = 257;
  *((_DWORD *)v13 + 83) = 0;
  *(_DWORD *)((char *)v13 + 335) = 0;
  *((_BYTE *)v13 + 312) = 1;
  result = LiMaterial::obtainSamplerInfo(this, a2[170]);
  *((_DWORD *)result + 81) = 0;
  *(_QWORD *)((char *)result + 316) = 0;
  *((_WORD *)result + 164) = 257;
  *((_DWORD *)result + 83) = 0;
  *(_DWORD *)((char *)result + 335) = 0;
  *((_BYTE *)result + 312) = 1;
  return result;
}

void LiLayeredMaterial::LiLayeredMaterial(LiLayeredMaterial *this)
{
  *((_QWORD *)this + 88) = &off_1E65EB048;
  *((_QWORD *)this + 89) = 0;
  *((_BYTE *)this + 720) = 1;
  LiMaterial::LiMaterial(this, (uint64_t *)off_1E6577080);
  *(_QWORD *)this = &off_1E6576F78;
  *((_QWORD *)this + 88) = &unk_1E6577060;
  *((_DWORD *)this + 165) = 1065353216;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_QWORD *)((char *)this + 692) = 16843009;
  *((_BYTE *)this + 700) = 0;
}

void sub_1B2D89934(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 704) = v4;
  *(_BYTE *)(v1 + 720) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiLayeredMaterial::~LiLayeredMaterial(LiLayeredMaterial *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E6576F78;
  *((_QWORD *)this + 88) = &unk_1E6577060;
  v2 = (void **)((char *)this + 664);
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E6577080);
  *((_QWORD *)this + 88) = &off_1E65EB048;
  *((_BYTE *)this + 720) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 89);
}

{
  LiLayeredMaterial::~LiLayeredMaterial(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiLayeredMaterial::~LiLayeredMaterial(LiLayeredMaterial *this)
{
  LiLayeredMaterial::~LiLayeredMaterial((LiLayeredMaterial *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiLayeredMaterial::~LiLayeredMaterial((LiLayeredMaterial *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

uint64_t LiLayeredMaterial::setErrorState(uint64_t this)
{
  *(_BYTE *)(this + 700) = 1;
  return this;
}

uint64_t LiLayeredMaterial::getErrorState(LiLayeredMaterial *this)
{
  return *((unsigned __int8 *)this + 700);
}

void LiLayeredMaterial::getLayer(LiLayeredMaterial *this@<X0>, int a2@<W1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  const PCSharedCount *v4;

  v3 = *((_QWORD *)this + 83);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 84) - v3) >> 4))
  {
    a3->var0 = 0;
    PCSharedCount::PCSharedCount(a3 + 1);
  }
  else
  {
    v4 = (const PCSharedCount *)(v3 + 16 * a2);
    a3->var0 = v4->var0;
    PCSharedCount::PCSharedCount(a3 + 1, v4 + 1);
  }
}

void LiLayeredMaterial::getHash(LiLayeredMaterial *this)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  LiMaterialLayer *v7;
  const ProShade::SamplerNode **v8;
  uint64_t SamplerInfo;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  int8x8_t v19[521];

  v1 = MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v19[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v19);
  v4 = *(_QWORD *)(v1 + 664);
  if (*(_QWORD *)(v1 + 672) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(LiMaterialLayer **)(v4 + v5);
      if (!v7)
        throw_PCNullPointerException(1);
      LiMaterialLayer::getHash(v7);
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v8 = (const ProShade::SamplerNode **)LiMaterialLayerUniform::get((os_unfair_lock_s *)v1, (LiLayeredMaterial *)v6);
      SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[46]);
      SamplerAttributes::getHash((SamplerAttributes *)(SamplerInfo + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v10 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[58]);
      SamplerAttributes::getHash((SamplerAttributes *)(v10 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v11 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[70]);
      SamplerAttributes::getHash((SamplerAttributes *)(v11 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v12 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[82]);
      SamplerAttributes::getHash((SamplerAttributes *)(v12 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v13 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[94]);
      SamplerAttributes::getHash((SamplerAttributes *)(v13 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v14 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[106]);
      SamplerAttributes::getHash((SamplerAttributes *)(v14 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v15 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[126]);
      SamplerAttributes::getHash((SamplerAttributes *)(v15 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v16 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[146]);
      SamplerAttributes::getHash((SamplerAttributes *)(v16 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      v17 = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v1, v8[158]);
      SamplerAttributes::getHash((SamplerAttributes *)(v17 + 316));
      PCHashWriteStream::writeValue(v19, (const PCHash128 *)v18);
      ++v6;
      v4 = *(_QWORD *)(v1 + 664);
      v5 += 16;
    }
    while (v6 < (*(_QWORD *)(v1 + 672) - v4) >> 4);
  }
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 688));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 689));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 690));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 697));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 698));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 699));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 691));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 692));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 693));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 694));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 695));
  PCHashWriteStream::writeValue(v19, *(_BYTE *)(v1 + 696));
  PCHashWriteStream::writeValue(v19, *(_DWORD *)(v1 + 656));
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v19)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v19);
}

void sub_1B2D89D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void SamplerAttributes::getHash(SamplerAttributes *this)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  int8x8_t v4[521];

  v1 = MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v4[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v4);
  PCHashWriteStream::writeValue(v4, *(_BYTE *)v1);
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 1));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 2));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 3));
  PCHashWriteStream::writeValue(v4, *(_DWORD *)(v1 + 4));
  PCHashWriteStream::writeValue(v4, *(_DWORD *)(v1 + 8));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 12));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 13));
  PCHashWriteStream::writeValue(v4, *(_DWORD *)(v1 + 16));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 20));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 21));
  PCHashWriteStream::writeValue(v4, *(_BYTE *)(v1 + 22));
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v4)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v4);
}

void sub_1B2D89ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t LiLayeredMaterial::appendLayer(uint64_t *a1, const PCSharedCount *a2)
{
  PCSharedCount *v3;
  PCSharedCount v4;
  uint64_t result;

  v3 = (PCSharedCount *)a1[84];
  v4.var0 = a2->var0;
  if (!a2->var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)v4.var0 + 3) = ((unint64_t)v3 - a1[83]) >> 4;
  if ((unint64_t)v3 >= a1[85])
  {
    result = std::vector<PCPtr<LiMaterialLayer>>::__push_back_slow_path<PCPtr<LiMaterialLayer> const&>(a1 + 83, a2);
  }
  else
  {
    v3->var0 = v4.var0;
    PCSharedCount::PCSharedCount(v3 + 1, a2 + 1);
    result = (uint64_t)&v3[2];
    a1[84] = (uint64_t)&v3[2];
  }
  a1[84] = result;
  return result;
}

void sub_1B2D89F78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 672) = v2;
  _Unwind_Resume(a1);
}

PCSharedCount *LiLayeredMaterial::insertLayer(uint64_t a1, int a2, PCSharedCount *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 664);
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)a3->var0 + 3) = (unint64_t)(*(_QWORD *)(a1 + 672) - v3) >> 4;
  return std::vector<PCPtr<LiMaterialLayer>>::insert((uint64_t *)(a1 + 664), (PCSharedCount *)(v3 + 16 * a2), a3);
}

PCSharedCount *std::vector<PCPtr<LiMaterialLayer>>::insert(uint64_t *a1, PCSharedCount *a2, PCSharedCount *a3)
{
  PCSharedCount *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  PC_Sp_counted_base *v15;
  PCSharedCount v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = ((uint64_t)a2 - *a1) >> 4;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v12 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v12 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v13 = v10 - v7;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v21 = v9;
    if (v14)
      v15 = (PC_Sp_counted_base *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v9, v14);
    else
      v15 = 0;
    v17.var0 = v15;
    v18 = (char *)v15 + 16 * v8;
    v19 = v18;
    v20 = (char *)v15 + 16 * v14;
    std::__split_buffer<PCPtr<LiMaterialLayer>>::push_back[abi:ne180100]((PCSharedCount **)&v17, a3);
    v4 = (PCSharedCount *)std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(a1, &v17, (uint64_t)v4);
    std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)&v17);
  }
  else if (a2 == (PCSharedCount *)v6)
  {
    a2->var0 = a3->var0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(v7 + 16 * v8 + 8), a3 + 1);
    a1[1] = (uint64_t)&v4[2];
  }
  else
  {
    std::vector<PCPtr<LiMaterialLayer>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)&a2[2]);
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    v4->var0 = a3->var0;
    PCSharedCount::PCSharedCount(&v17, a3 + 1);
    PCSharedCount::operator=((uint64_t *)(v7 + 16 * v8 + 8), (uint64_t *)&v17);
    PCSharedCount::~PCSharedCount(&v17);
  }
  return v4;
}

void sub_1B2D8A15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void LiLayeredMaterial::getTopLayer(LiLayeredMaterial *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 84);
  if (*((_QWORD *)this + 83) == v4)
  {
    a2->var0 = 0;
    PCSharedCount::PCSharedCount(a2 + 1);
  }
  else
  {
    a2->var0 = *(PC_Sp_counted_base **)(v4 - 16);
    PCSharedCount::PCSharedCount(a2 + 1, (const PCSharedCount *)(v4 - 8));
  }
}

uint64_t LiLayeredMaterial::setMultipass(uint64_t this, char a2)
{
  *(_BYTE *)(this + 691) = a2;
  return this;
}

uint64_t LiLayeredMaterial::setUseEnvironmentMap(uint64_t this, char a2)
{
  *(_BYTE *)(this + 692) = a2;
  return this;
}

uint64_t LiLayeredMaterial::setUseDiffuseContributions(uint64_t this, char a2)
{
  *(_BYTE *)(this + 693) = a2;
  return this;
}

uint64_t LiLayeredMaterial::setUseSpecularContributions(uint64_t this, char a2)
{
  *(_BYTE *)(this + 694) = a2;
  return this;
}

void LiLayeredMaterial::setUnlimitedSamplers(LiLayeredMaterial *this, char a2)
{
  uint64_t v2;
  int v5;
  PCSharedCount v6;
  PCSharedCount v7;

  *((_BYTE *)this + 695) = a2;
  v2 = (*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 4;
  if ((int)v2 >= 1)
  {
    v5 = 0;
    do
    {
      LiLayeredMaterial::getLayer(this, v5, &v6);
      if (!v6.var0)
        throw_PCNullPointerException(1);
      *((_BYTE *)v6.var0 + 24) = a2;
      PCSharedCount::~PCSharedCount(&v7);
      ++v5;
    }
    while ((_DWORD)v2 != v5);
  }
}

void sub_1B2D8A278(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t LiLayeredMaterial::setDiffuseAlphaOnly(uint64_t this, char a2)
{
  *(_BYTE *)(this + 696) = a2;
  return this;
}

void LiLayeredMaterial::sampleSpecEnvironment(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  ProShade::ConstVector *v4;
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  _QWORD v13[3];
  PCSharedCount v14;
  _QWORD v15[3];
  PCSharedCount v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  PCSharedCount v19;
  char v20;
  uint64_t v21;
  PCSharedCount v22;
  void *v23;
  char v24;
  uint64_t v25;
  PCSharedCount v26;

  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, 0);
  v17[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v18, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v15[0] = &unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 0);
  v15[2] = v5;
  PCSharedCount::PCSharedCount(&v16, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  v13[0] = &unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0);
  v13[2] = v6;
  PCSharedCount::PCSharedCount(&v14, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  ProShade::Vec3::Vec3(&v19, v17, v15, v13);
  v23 = &unk_1E6569AC8;
  v24 = v20;
  v25 = v21;
  PCSharedCount::PCSharedCount(&v26, &v22);
  v19.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v13[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v15[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::operator*(v17, a1 + 320, &v23);
  ProShade::Vec3::Vec3(&v19, v17);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  LiString::LiString((LiString *)v17, "specEnv");
  ProShade::VarT<ProShade::Node>::setName(&v19, (uint64_t *)v17, &v11);
  v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  if (v17[0].var0)
  {
    v7 = (unsigned int *)((char *)v17[0].var0 - 12);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      *(_BYTE *)v17[0].var0 = 0;
      if (v17[0].var0)
        v10 = (char *)v17[0].var0 - 12;
      else
        v10 = 0;
      free(v10);
    }
  }
  *(_QWORD *)a2 = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 8) = v20;
  *(_QWORD *)(a2 + 16) = v21;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), &v22);
  v19.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
}

void sub_1B2D8A520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28)
{
  PCSharedCount *v28;
  uint64_t v29;
  uint64_t v30;

  PCSharedCount::~PCSharedCount(&a28);
  *(_QWORD *)(v30 - 112) = v29 + 16;
  PCSharedCount::~PCSharedCount(v28);
  _Unwind_Resume(a1);
}

void LiLayeredMaterial::sampleDiffEnvironment(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  ProShade::ConstVector *v4;
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  _QWORD v13[3];
  PCSharedCount v14;
  _QWORD v15[3];
  PCSharedCount v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  PCSharedCount v19;
  char v20;
  uint64_t v21;
  PCSharedCount v22;
  void *v23;
  char v24;
  uint64_t v25;
  PCSharedCount v26;

  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, 0);
  v17[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v18, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v15[0] = &unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 0);
  v15[2] = v5;
  PCSharedCount::PCSharedCount(&v16, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  v13[0] = &unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0);
  v13[2] = v6;
  PCSharedCount::PCSharedCount(&v14, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  ProShade::Vec3::Vec3(&v19, v17, v15, v13);
  v23 = &unk_1E6569AC8;
  v24 = v20;
  v25 = v21;
  PCSharedCount::PCSharedCount(&v26, &v22);
  v19.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v13[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v15[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  ProShade::operator*(v17, a1 + 320, &v23);
  ProShade::Vec3::Vec3(&v19, v17);
  v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v18);
  LiString::LiString((LiString *)v17, "diffEnv");
  ProShade::VarT<ProShade::Node>::setName(&v19, (uint64_t *)v17, &v11);
  v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
  if (v17[0].var0)
  {
    v7 = (unsigned int *)((char *)v17[0].var0 - 12);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      *(_BYTE *)v17[0].var0 = 0;
      if (v17[0].var0)
        v10 = (char *)v17[0].var0 - 12;
      else
        v10 = 0;
      free(v10);
    }
  }
  *(_QWORD *)a2 = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 8) = v20;
  *(_QWORD *)(a2 + 16) = v21;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), &v22);
  v19.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v22);
  v23 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v26);
}

void sub_1B2D8A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28)
{
  PCSharedCount *v28;
  uint64_t v29;
  uint64_t v30;

  PCSharedCount::~PCSharedCount(&a28);
  *(_QWORD *)(v30 - 112) = v29 + 16;
  PCSharedCount::~PCSharedCount(v28);
  _Unwind_Resume(a1);
}

void LiLayeredMaterial::makeProgram(LiLayeredMaterial *this@<X0>, const LiContext *a2@<X1>, PCSharedCount *a3@<X8>)
{
  _QWORD v9[84];
  __int128 v10;
  uint64_t v11;
  void (**v12)(PCShared_base *__hidden);
  PC_Sp_counted_base *v13;
  char v14;

  v12 = &off_1E65EB048;
  v13 = 0;
  v14 = 1;
  LiMaterial::LiMaterial((LiMaterial *)v9, (uint64_t *)off_1E65774E8);
  v12 = (void (**)(PCShared_base *__hidden))&unk_1E65774C8;
  v9[0] = &off_1E65773E0;
  v9[83] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v10 = _Q0;
  v11 = 0x3FF0000000000000;
  LiErrorLimitsExceededMaterial::makeProgram((LiErrorLimitsExceededMaterial *)v9, a3);
  LiMaterial::~LiMaterial((LiMaterial *)v9, (PC_Sp_counted_base **)off_1E65774E8);
  v12 = &off_1E65EB048;
  v14 = 0;
  PCWeakCount::~PCWeakCount(&v13);
}

void sub_1B2D8AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LiErrorLimitsExceededMaterial::~LiErrorLimitsExceededMaterial((LiErrorLimitsExceededMaterial *)&a9);
  _Unwind_Resume(a1);
}

void LiErrorLimitsExceededMaterial::makeProgram(LiErrorLimitsExceededMaterial *this@<X0>, PCSharedCount *a2@<X8>)
{
  ProShade::Program *v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  PCSharedCount v18;
  char v19;
  uint64_t v20;
  PCSharedCount v21;
  PCSharedCount v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25[2];

  v5 = (ProShade::Program *)operator new();
  ProShade::Program::Program(v5);
  a2->var0 = (PC_Sp_counted_base *)v5;
  PCSharedCount::PCSharedCount(a2 + 1, (ProShade::Program *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  v16[0] = &unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0);
  v16[2] = v6;
  PCSharedCount::PCSharedCount(&v17, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v14[0] = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0);
  v14[2] = v7;
  PCSharedCount::PCSharedCount(&v15, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v12[0] = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0);
  v12[2] = v8;
  PCSharedCount::PCSharedCount(&v13, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  v10[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 1);
  v10[2] = v9;
  PCSharedCount::PCSharedCount(&v11, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::Vec4::Vec4(&v18, v16, v14, v12, v10);
  v22.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v23 = v19;
  v24 = v20;
  PCSharedCount::PCSharedCount(v25, &v21);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  if (!a2->var0)
    throw_PCNullPointerException(1);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2->var0 + 272, &v22);
  ProShade::Vec4::Vec4(&v18, (LiErrorLimitsExceededMaterial *)((char *)this + 664));
  if (!a2->var0)
    throw_PCNullPointerException(1);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2->var0 + 912, &v18);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v25);
}

void sub_1B2D8AE08(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B2D8AF8C()
{
  JUMPOUT(0x1B2D8AF7CLL);
}

void LiErrorLimitsExceededMaterial::~LiErrorLimitsExceededMaterial(LiErrorLimitsExceededMaterial *this)
{
  uint64_t v1;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E65774E8);
  *(_QWORD *)(v1 + 696) = &off_1E65EB048;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
}

{
  uint64_t v1;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E65774E8);
  *(_QWORD *)(v1 + 696) = &off_1E65EB048;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
  JUMPOUT(0x1B5E29170);
}

void *LiLayeredMaterial::printMaterialDetails(uint64_t a1, _QWORD *a2, int a3)
{
  const PCSharedCount *v6;
  const PCSharedCount *i;
  PC_Sp_counted_base *var0;
  PCSharedCount v10;

  LiImageSource::printIndent(a2, a3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Layers:\n", 8);
  v6 = *(const PCSharedCount **)(a1 + 664);
  for (i = *(const PCSharedCount **)(a1 + 672); v6 != i; v6 += 2)
  {
    var0 = v6->var0;
    PCSharedCount::PCSharedCount(&v10, v6 + 1);
    if (!var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, _QWORD *, _QWORD))(*(_QWORD *)var0 + 64))(var0, a2, (a3 + 2));
    PCSharedCount::~PCSharedCount(&v10);
  }
  return LiMaterial::printMaterialDetails((__CFString **)a1, a2, a3);
}

void sub_1B2D8B0BC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

BOOL LiLayeredMaterial::isOpaque(uint64_t a1, uint64_t a2)
{
  const PCSharedCount *v2;
  const PCSharedCount *v3;
  PC_Sp_counted_base *var0;
  PCSharedCount v8;
  char v9;

  v2 = *(const PCSharedCount **)(a1 + 672);
  v3 = *(const PCSharedCount **)(a1 + 664);
  if (v2 == v3)
    return 1;
  v9 = 0;
  do
  {
    var0 = v3->var0;
    PCSharedCount::PCSharedCount(&v8, v3 + 1);
    if (!var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, char *, uint64_t, uint64_t))(*(_QWORD *)var0 + 16))(var0, &v9, a1, a2);
    PCSharedCount::~PCSharedCount(&v8);
    v3 += 2;
  }
  while (v3 != v2);
  return v9 != 0;
}

void sub_1B2D8B18C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

ProShade::Program *ProShade::Program::Program(ProShade::Program *this)
{
  *((_QWORD *)this + 194) = &off_1E65EB048;
  *((_QWORD *)this + 195) = 0;
  *((_BYTE *)this + 1568) = 1;
  ProShade::ProgramBase::ProgramBase(this, (uint64_t *)&off_1E6569980);
  *(_QWORD *)this = &unk_1E6569910;
  *((_QWORD *)this + 194) = &unk_1E6569960;
  ProShade::VertexProgram::VertexProgram((ProShade::Program *)((char *)this + 272));
  ProShade::FragmentProgram::FragmentProgram((ProShade::Program *)((char *)this + 912));
  *((_DWORD *)this + 328) = 0;
  *((_QWORD *)this + 168) = 0;
  *((_QWORD *)this + 167) = 0;
  *((_QWORD *)this + 166) = (char *)this + 1336;
  *((_QWORD *)this + 165) = off_1E65698D0;
  *((_QWORD *)this + 169) = &unk_1E656A198;
  *((_QWORD *)this + 171) = 0;
  *((_QWORD *)this + 170) = 0;
  *((_QWORD *)this + 174) = 0;
  *((_QWORD *)this + 173) = 0;
  *((_QWORD *)this + 172) = (char *)this + 1384;
  *((_QWORD *)this + 175) = &unk_1E656A1D0;
  *((_QWORD *)this + 177) = 0;
  *((_QWORD *)this + 176) = 0;
  *((_QWORD *)this + 178) = &unk_1E656A1D0;
  *((_QWORD *)this + 180) = 0;
  *((_QWORD *)this + 179) = 0;
  *((_QWORD *)this + 181) = &unk_1E656A300;
  *((_QWORD *)this + 183) = 0;
  *((_QWORD *)this + 182) = 0;
  ProShade::UniformProgram::UniformProgram((_QWORD *)this + 184);
  *((_BYTE *)this + 1544) = 0;
  return this;
}

void sub_1B2D8B2E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  uint64_t v4;
  ProShade::InsertUniform *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = v4;
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::~PCArray(v10);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(v7);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(v6);
  ProShade::InsertUniform::~InsertUniform(v5);
  ProShade::FragmentProgram::~FragmentProgram(v3);
  ProShade::VertexProgram::~VertexProgram(v2);
  ProShade::ProgramBase::~ProgramBase((ProShade::ProgramBase *)v1, (uint64_t *)(v9 + 8));
  *(_QWORD *)(v1 + 1552) = v8 + 16;
  *(_BYTE *)(v1 + 1568) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1560));
  _Unwind_Resume(a1);
}

void LiErrorLimitsExceededMaterial::getHash(LiErrorLimitsExceededMaterial *this)
{
  _OWORD *v1;
  _OWORD *v2;
  int8x8_t v3[521];

  MEMORY[0x1E0C80A78](this);
  v2 = v1;
  v3[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v3);
  PCHashWriteStream::writeValue(v3, 54321);
  *v2 = *(_OWORD *)PCHashWriteStream::getHash(v3)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v3);
}

void sub_1B2D8B3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void LiVramLimitsExceededMaterial::makeProgram(LiVramLimitsExceededMaterial *this@<X0>, PCSharedCount *a2@<X8>)
{
  ProShade::Program *v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  _QWORD v10[3];
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  PCSharedCount v18;
  char v19;
  uint64_t v20;
  PCSharedCount v21;
  PCSharedCount v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25[2];

  v5 = (ProShade::Program *)operator new();
  ProShade::Program::Program(v5);
  a2->var0 = (PC_Sp_counted_base *)v5;
  PCSharedCount::PCSharedCount(a2 + 1, (ProShade::Program *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  v16[0] = &unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0);
  v16[2] = v6;
  PCSharedCount::PCSharedCount(&v17, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v14[0] = &unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0);
  v14[2] = v7;
  PCSharedCount::PCSharedCount(&v15, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v12[0] = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 0);
  v12[2] = v8;
  PCSharedCount::PCSharedCount(&v13, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  v10[0] = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 1);
  v10[2] = v9;
  PCSharedCount::PCSharedCount(&v11, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  ProShade::Vec4::Vec4(&v18, v16, v14, v12, v10);
  v22.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v23 = v19;
  v24 = v20;
  PCSharedCount::PCSharedCount(v25, &v21);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v10[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  if (!a2->var0)
    throw_PCNullPointerException(1);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2->var0 + 272, &v22);
  ProShade::Vec4::Vec4(&v18, (LiVramLimitsExceededMaterial *)((char *)this + 664));
  if (!a2->var0)
    throw_PCNullPointerException(1);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2->var0 + 912, &v18);
  v18.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  v22.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v25);
}

void sub_1B2D8B6E4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B2D8B868()
{
  JUMPOUT(0x1B2D8B858);
}

void LiVramLimitsExceededMaterial::getHash(LiVramLimitsExceededMaterial *this)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6[521];

  v1 = MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v6[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v6);
  PCHashWriteStream::writeValue(v6, 7654321);
  v4 = 0;
  v5 = v1 + 664;
  do
  {
    PCHashWriteStream::writeValue(v6, *(double *)(v5 + v4));
    v4 += 8;
  }
  while (v4 != 32);
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v6)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v6);
}

void sub_1B2D8B934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'LiErrorLimitsExceededMaterial::~LiErrorLimitsExceededMaterial(LiErrorLimitsExceededMaterial *this)
{
  uint64_t v1;

  LiMaterial::~LiMaterial((LiErrorLimitsExceededMaterial *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (PC_Sp_counted_base **)off_1E65774E8);
  *(_QWORD *)(v1 + 696) = &off_1E65EB048;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
}

{
  PC_Sp_counted_base **v1;

  v1 = (PC_Sp_counted_base **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LiMaterial::~LiMaterial((LiMaterial *)v1, (PC_Sp_counted_base **)off_1E65774E8);
  v1[87] = (PC_Sp_counted_base *)&off_1E65EB048;
  *((_BYTE *)v1 + 712) = 0;
  PCWeakCount::~PCWeakCount(v1 + 88);
  JUMPOUT(0x1B5E29170);
}

void LiVramLimitsExceededMaterial::~LiVramLimitsExceededMaterial(LiVramLimitsExceededMaterial *this)
{
  uint64_t v1;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E65778A8);
  *(_QWORD *)(v1 + 696) = &off_1E65EB048;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
}

{
  uint64_t v1;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E65778A8);
  *(_QWORD *)(v1 + 696) = &off_1E65EB048;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiVramLimitsExceededMaterial::~LiVramLimitsExceededMaterial(LiVramLimitsExceededMaterial *this)
{
  uint64_t v1;

  LiMaterial::~LiMaterial((LiVramLimitsExceededMaterial *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (PC_Sp_counted_base **)off_1E65778A8);
  *(_QWORD *)(v1 + 696) = &off_1E65EB048;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 704));
}

{
  PC_Sp_counted_base **v1;

  v1 = (PC_Sp_counted_base **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LiMaterial::~LiMaterial((LiMaterial *)v1, (PC_Sp_counted_base **)off_1E65778A8);
  v1[87] = (PC_Sp_counted_base *)&off_1E65EB048;
  *((_BYTE *)v1 + 712) = 0;
  PCWeakCount::~PCWeakCount(v1 + 88);
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::step_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D8BCE8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::step_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::step_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::step_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::step_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6577C38);
  *(_QWORD *)a1 = &unk_1E6577B60;
  *(_QWORD *)(a1 + 72) = &unk_1E6577C18;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D8C08C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::step_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  const PCString *v6;
  uint64_t result;
  const PCString *v8;
  PCException *exception;
  PCString v10;
  PCString v11;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "not implemented yet");
    PCString::PCString(&v10, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v11, &v10, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v6);
  if ((int)result > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"step doesn't apply to BOOL", v8);
  return result;
}

void sub_1B2D8C1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::step_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  double v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (int *)(a2 + 16);
    v10 = (int *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = *v9++;
      if (v13 >= v11)
        v14 = 1.0;
      else
        v14 = 0.0;
      *(double *)Serializer++ = v14;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D8C328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::step_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  PCException *exception;
  PCString v16;
  PCString v17;

  ProShade::Value::set((uint64_t)a3, (const PCString *)3, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "not implemented yet");
    PCString::PCString(&v16, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v17, &v16, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (double *)(a2 + 16);
    v10 = (double *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v9++;
      if (v13 < v12)
        v14 = 0.0;
      else
        v14 = 1.0;
      *(double *)Serializer++ = v14;
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D8C478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6577B60;
  *(_QWORD *)(a1 + 72) = &unk_1E6577C18;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6577C78;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6577D30;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6577B60;
  *(_QWORD *)(a1 + 72) = &unk_1E6577C18;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6577C78;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6577D30;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "step");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D8C6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1885697139;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D8C7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "step");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "step");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D8CA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6577C38);
  *(_QWORD *)v2 = &unk_1E6577B60;
  *(_QWORD *)(v2 + 72) = &unk_1E6577C18;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D8CBE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      return ProShade::eval_type<ProShade::step_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
      return ProShade::eval_type<ProShade::step_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  }
  if (v7 <= 2)
    return ProShade::eval_type<ProShade::step_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  return ProShade::eval_type<ProShade::step_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6577B60;
  *((_QWORD *)v1 + 9) = &unk_1E6577C18;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6577C78;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6577D30;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6577B60;
  *((_QWORD *)v1 + 9) = &unk_1E6577C18;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6577C78;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6577D30;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6577C38);
  *(_QWORD *)a1 = &unk_1E6577B60;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6577C18;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D8CF84(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiMaterialLayerUniform::LiMaterialLayerUniform(LiMaterialLayerUniform *this)
{
  *(_QWORD *)this = &unk_1E656A080;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *(_QWORD *)this = &unk_1E656A298;
  *((_QWORD *)this + 4) = &unk_1E656A080;
  *((_QWORD *)this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((_QWORD *)this + 4) = &unk_1E656A298;
  *((_QWORD *)this + 8) = &unk_1E656A080;
  *((_QWORD *)this + 10) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_QWORD *)this + 8) = &unk_1E656A298;
  *((_QWORD *)this + 12) = &unk_1E656A080;
  *((_QWORD *)this + 14) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  *((_QWORD *)this + 12) = &unk_1E656A298;
  *((_QWORD *)this + 16) = &unk_1E656A080;
  *((_QWORD *)this + 18) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 19);
  *((_QWORD *)this + 16) = &unk_1E656A298;
  *((_QWORD *)this + 20) = &unk_1E656A080;
  *((_QWORD *)this + 22) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 23);
  *((_QWORD *)this + 20) = &unk_1E656A298;
  *((_QWORD *)this + 24) = &unk_1E656A080;
  *((_QWORD *)this + 26) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 27);
  *((_QWORD *)this + 24) = &unk_1E656A298;
  *((_QWORD *)this + 28) = &unk_1E656A080;
  *((_QWORD *)this + 30) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *((_QWORD *)this + 28) = &unk_1E656A298;
  *((_QWORD *)this + 32) = &unk_1E656A080;
  *((_QWORD *)this + 34) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 35);
  *((_QWORD *)this + 32) = &unk_1E656A298;
  *((_QWORD *)this + 36) = &unk_1E656A080;
  *((_QWORD *)this + 38) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 39);
  *((_QWORD *)this + 36) = &unk_1E656A298;
  *((_QWORD *)this + 40) = &unk_1E656A080;
  *((_QWORD *)this + 42) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 43);
  *((_QWORD *)this + 40) = &unk_1E656A298;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 44);
  *((_QWORD *)this + 44) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 56);
  *((_QWORD *)this + 56) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 68);
  *((_QWORD *)this + 68) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 80);
  *((_QWORD *)this + 80) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 92);
  *((_QWORD *)this + 92) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 104);
  *((_QWORD *)this + 104) = &unk_1E656C648;
  *((_QWORD *)this + 116) = &unk_1E656A080;
  *((_QWORD *)this + 118) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 119);
  *((_QWORD *)this + 116) = &unk_1E656A298;
  *((_QWORD *)this + 120) = &unk_1E656A080;
  *((_QWORD *)this + 122) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 123);
  *((_QWORD *)this + 120) = &unk_1E656A298;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 124);
  *((_QWORD *)this + 124) = &unk_1E656C648;
  *((_QWORD *)this + 136) = &unk_1E656A080;
  *((_QWORD *)this + 138) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 139);
  *((_QWORD *)this + 136) = &unk_1E656A298;
  *((_QWORD *)this + 140) = &unk_1E656A080;
  *((_QWORD *)this + 142) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 143);
  *((_QWORD *)this + 140) = &unk_1E656A298;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 144);
  *((_QWORD *)this + 144) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 156);
  *((_QWORD *)this + 156) = &unk_1E656C648;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 168);
  *((_QWORD *)this + 168) = &unk_1E656C648;
  *((_QWORD *)this + 180) = &unk_1E656A080;
  *((_QWORD *)this + 182) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 183);
  *((_QWORD *)this + 180) = &unk_1E656A298;
  *((_QWORD *)this + 184) = &unk_1E656A080;
  *((_QWORD *)this + 186) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 187);
  *((_QWORD *)this + 184) = &unk_1E656A298;
  *((_QWORD *)this + 188) = &unk_1E656A080;
  *((_QWORD *)this + 190) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 191);
  *((_QWORD *)this + 188) = &unk_1E656A298;
  *((_QWORD *)this + 192) = &unk_1E656A080;
  *((_QWORD *)this + 194) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 195);
  *((_QWORD *)this + 192) = &unk_1E656A298;
  *((_QWORD *)this + 196) = &unk_1E656A080;
  *((_QWORD *)this + 198) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 199);
  *((_QWORD *)this + 196) = &unk_1E656A298;
  *((_QWORD *)this + 200) = &unk_1E656A080;
  *((_QWORD *)this + 202) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 203);
  *((_QWORD *)this + 200) = &unk_1E656A298;
  *((_QWORD *)this + 204) = &unk_1E656A080;
  *((_QWORD *)this + 206) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 207);
  *((_QWORD *)this + 204) = &unk_1E656A298;
  *((_QWORD *)this + 208) = &unk_1E656A080;
  *((_QWORD *)this + 210) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 211);
  *((_QWORD *)this + 208) = &unk_1E656A298;
  *((_QWORD *)this + 212) = &unk_1E656A080;
  *((_QWORD *)this + 214) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 215);
  *((_QWORD *)this + 212) = &unk_1E656A298;
  *((_QWORD *)this + 216) = &unk_1E656A080;
  *((_QWORD *)this + 218) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 219);
  *((_QWORD *)this + 216) = &unk_1E656A298;
  *((_QWORD *)this + 220) = &unk_1E656A080;
  *((_QWORD *)this + 222) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 223);
  *((_QWORD *)this + 220) = &unk_1E656A298;
  *((_QWORD *)this + 224) = &unk_1E656A080;
  *((_QWORD *)this + 226) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 227);
  *((_QWORD *)this + 224) = &unk_1E656A298;
  *((_QWORD *)this + 228) = &unk_1E656A080;
  *((_QWORD *)this + 230) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 231);
  *((_QWORD *)this + 228) = &unk_1E656A298;
  *((_QWORD *)this + 232) = &unk_1E656A080;
  *((_QWORD *)this + 234) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 235);
  *((_QWORD *)this + 232) = &unk_1E656A298;
  *((_QWORD *)this + 236) = &unk_1E656A080;
  *((_QWORD *)this + 238) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 239);
  *((_QWORD *)this + 236) = &unk_1E656A298;
  *((_QWORD *)this + 240) = &unk_1E656A080;
  *((_QWORD *)this + 242) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 243);
  *((_QWORD *)this + 240) = &unk_1E656A298;
  *((_QWORD *)this + 244) = &unk_1E656A080;
  *((_QWORD *)this + 246) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 247);
  *((_QWORD *)this + 244) = &unk_1E656A298;
  *((_QWORD *)this + 248) = &unk_1E656A080;
  *((_QWORD *)this + 250) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 251);
  *((_QWORD *)this + 248) = &unk_1E656A298;
  *((_QWORD *)this + 252) = &unk_1E656A080;
  *((_QWORD *)this + 254) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 255);
  *((_QWORD *)this + 252) = &unk_1E656A298;
  *((_QWORD *)this + 256) = &unk_1E656A080;
  *((_QWORD *)this + 258) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 259);
  *((_QWORD *)this + 256) = &unk_1E656A298;
  *((_QWORD *)this + 260) = &unk_1E656A080;
  *((_QWORD *)this + 262) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 263);
  *((_QWORD *)this + 260) = &unk_1E656A298;
  *((_QWORD *)this + 264) = &unk_1E656A080;
  *((_QWORD *)this + 266) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 267);
  *((_QWORD *)this + 264) = &unk_1E656A298;
  *((_QWORD *)this + 268) = &unk_1E656A080;
  *((_QWORD *)this + 270) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 271);
  *((_QWORD *)this + 268) = &unk_1E656A298;
  *((_QWORD *)this + 272) = &unk_1E656A080;
  *((_QWORD *)this + 274) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 275);
  *((_QWORD *)this + 272) = &unk_1E656A298;
  *((_QWORD *)this + 276) = &unk_1E656A080;
  *((_QWORD *)this + 278) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 279);
  *((_QWORD *)this + 276) = &unk_1E656A298;
  *((_QWORD *)this + 280) = &unk_1E656A080;
  *((_QWORD *)this + 282) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 283);
  *((_QWORD *)this + 280) = &unk_1E656A298;
  *((_QWORD *)this + 284) = &unk_1E656A080;
  *((_QWORD *)this + 286) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 287);
  *((_QWORD *)this + 284) = &unk_1E656A298;
}

void sub_1B2D8D58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, PCSharedCount *a14, PCSharedCount *a15, PCSharedCount *a16, PCSharedCount *a17, PCSharedCount *a18, PCSharedCount *a19, PCSharedCount *a20,PCSharedCount *a21,PCSharedCount *a22,PCSharedCount *a23,PCSharedCount *a24,PCSharedCount *a25,PCSharedCount *a26,PCSharedCount *a27,PCSharedCount *a28,PCSharedCount *a29,PCSharedCount *a30,PCSharedCount *a31,PCSharedCount *a32,PCSharedCount *a33,PCSharedCount *a34,PCSharedCount *a35,PCSharedCount *a36,PCSharedCount *a37)
{
  _QWORD *v37;
  PCSharedCount *v38;
  PCSharedCount *v39;
  PCSharedCount *v40;
  PCSharedCount *v41;
  PCSharedCount *v42;
  PCSharedCount *v43;
  uint64_t v44;
  PCSharedCount *v45;
  uint64_t v46;

  v37[280] = v44;
  PCSharedCount::~PCSharedCount(v43);
  v37[276] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(v42);
  v37[272] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(v41);
  v37[268] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(v40);
  v37[264] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(v39);
  v37[260] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(v38);
  v37[256] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(v45);
  v37[252] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a10);
  v37[248] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a11);
  v37[244] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a12);
  v37[240] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a13);
  v37[236] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a14);
  v37[232] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a15);
  v37[228] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a16);
  v37[224] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a17);
  v37[220] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a18);
  v37[216] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a19);
  v37[212] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a20);
  v37[208] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a21);
  v37[204] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a22);
  v37[200] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a23);
  v37[196] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a24);
  v37[192] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a25);
  v37[188] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a26);
  v37[184] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a27);
  v37[180] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a28);
  ProShade::Sampler::~Sampler(a29);
  ProShade::Sampler::~Sampler(a30);
  ProShade::Sampler::~Sampler(a31);
  v37[140] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a32);
  v37[136] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a33);
  ProShade::Sampler::~Sampler(a34);
  v37[120] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a35);
  v37[116] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(a36);
  ProShade::Sampler::~Sampler(a37);
  ProShade::Sampler::~Sampler(*(PCSharedCount **)(v46 - 216));
  ProShade::Sampler::~Sampler(*(PCSharedCount **)(v46 - 208));
  ProShade::Sampler::~Sampler(*(PCSharedCount **)(v46 - 200));
  ProShade::Sampler::~Sampler(*(PCSharedCount **)(v46 - 192));
  ProShade::Sampler::~Sampler(*(PCSharedCount **)(v46 - 184));
  v37[40] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 176));
  v37[36] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 168));
  v37[32] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 160));
  v37[28] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 152));
  v37[24] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 144));
  v37[20] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 136));
  v37[16] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 128));
  v37[12] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 120));
  v37[8] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 112));
  v37[4] = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 104));
  *v37 = &unk_1E656A080;
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v46 - 96));
  _Unwind_Resume(a1);
}

void sub_1B2D8D9D4()
{
  JUMPOUT(0x1B2D8D61CLL);
}

void sub_1B2D8D9DC()
{
  JUMPOUT(0x1B2D8D634);
}

void sub_1B2D8D9E4()
{
  JUMPOUT(0x1B2D8D64CLL);
}

void sub_1B2D8D9EC()
{
  JUMPOUT(0x1B2D8D664);
}

void sub_1B2D8D9F4()
{
  JUMPOUT(0x1B2D8D67CLL);
}

void sub_1B2D8D9FC()
{
  JUMPOUT(0x1B2D8D694);
}

void sub_1B2D8DA04()
{
  JUMPOUT(0x1B2D8D6ACLL);
}

void sub_1B2D8DA0C()
{
  JUMPOUT(0x1B2D8D6C4);
}

void sub_1B2D8DA14()
{
  JUMPOUT(0x1B2D8D6DCLL);
}

void sub_1B2D8DA1C()
{
  JUMPOUT(0x1B2D8D6F4);
}

void sub_1B2D8DA24()
{
  JUMPOUT(0x1B2D8D70CLL);
}

void sub_1B2D8DA2C()
{
  JUMPOUT(0x1B2D8D724);
}

void sub_1B2D8DA34()
{
  JUMPOUT(0x1B2D8D73CLL);
}

void sub_1B2D8DA3C()
{
  JUMPOUT(0x1B2D8D754);
}

void sub_1B2D8DA44()
{
  JUMPOUT(0x1B2D8D76CLL);
}

void sub_1B2D8DA4C()
{
  JUMPOUT(0x1B2D8D784);
}

void sub_1B2D8DA54()
{
  JUMPOUT(0x1B2D8D79CLL);
}

void sub_1B2D8DA5C()
{
  JUMPOUT(0x1B2D8D7B4);
}

void sub_1B2D8DA64()
{
  JUMPOUT(0x1B2D8D7CCLL);
}

void sub_1B2D8DA6C()
{
  JUMPOUT(0x1B2D8D7E4);
}

void sub_1B2D8DA74()
{
  JUMPOUT(0x1B2D8D7FCLL);
}

void sub_1B2D8DA7C()
{
  JUMPOUT(0x1B2D8D814);
}

void sub_1B2D8DA84()
{
  JUMPOUT(0x1B2D8D81CLL);
}

void sub_1B2D8DA8C()
{
  JUMPOUT(0x1B2D8D824);
}

void sub_1B2D8DA94()
{
  JUMPOUT(0x1B2D8D82CLL);
}

void sub_1B2D8DA9C()
{
  JUMPOUT(0x1B2D8D844);
}

void sub_1B2D8DAA4()
{
  JUMPOUT(0x1B2D8D85CLL);
}

void sub_1B2D8DAAC()
{
  JUMPOUT(0x1B2D8D864);
}

void sub_1B2D8DAB4()
{
  JUMPOUT(0x1B2D8D87CLL);
}

void sub_1B2D8DABC()
{
  JUMPOUT(0x1B2D8D894);
}

void sub_1B2D8DAC4()
{
  JUMPOUT(0x1B2D8D89CLL);
}

void sub_1B2D8DACC()
{
  JUMPOUT(0x1B2D8D8A4);
}

void sub_1B2D8DAD4()
{
  JUMPOUT(0x1B2D8D8ACLL);
}

void sub_1B2D8DADC()
{
  JUMPOUT(0x1B2D8D8B4);
}

void sub_1B2D8DAE4()
{
  JUMPOUT(0x1B2D8D8BCLL);
}

void sub_1B2D8DAEC()
{
  JUMPOUT(0x1B2D8D8C4);
}

void sub_1B2D8DAF4()
{
  JUMPOUT(0x1B2D8D8DCLL);
}

void sub_1B2D8DAFC()
{
  JUMPOUT(0x1B2D8D8F4);
}

void sub_1B2D8DB04()
{
  JUMPOUT(0x1B2D8D90CLL);
}

void sub_1B2D8DB0C()
{
  JUMPOUT(0x1B2D8D924);
}

void sub_1B2D8DB14()
{
  JUMPOUT(0x1B2D8D93CLL);
}

void sub_1B2D8DB1C()
{
  JUMPOUT(0x1B2D8D954);
}

void sub_1B2D8DB24()
{
  JUMPOUT(0x1B2D8D96CLL);
}

void sub_1B2D8DB2C()
{
  JUMPOUT(0x1B2D8D984);
}

void sub_1B2D8DB34()
{
  JUMPOUT(0x1B2D8D99CLL);
}

void sub_1B2D8DB3C()
{
  JUMPOUT(0x1B2D8D9B4);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D8DCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6577EB0);
  *(_QWORD *)a1 = &unk_1E6577DD8;
  *(_QWORD *)(a1 + 72) = &unk_1E6577E90;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D8DE28(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4;
  const PCString *v5;
  const PCString *v6;
  void ***Serializer;
  const PCString *v8;
  int Size;
  int v10;
  int *v11;
  int v12;
  double *v13;
  long double v14;

  v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    Size = ProShade::shapeGetSize(a1[1], v8);
    v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        v11 = a1 + 4;
        do
        {
          v12 = *v11++;
          *(long double *)Serializer++ = cos((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      v13 = (double *)(a1 + 4);
      do
      {
        v14 = *v13++;
        *(long double *)Serializer++ = cos(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"cos doesn't apply to BOOL", v6);
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6577DD8;
  *(_QWORD *)(a1 + 72) = &unk_1E6577E90;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6577EF0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6577FA8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6577DD8;
  *(_QWORD *)(a1 + 72) = &unk_1E6577E90;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6577EF0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6577FA8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "cos");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D8E158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 28515;
  v6[2] = 115;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D8E278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "cos");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "cos");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D8E514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6577EB0);
  *(_QWORD *)v2 = &unk_1E6577DD8;
  *(_QWORD *)(v2 + 72) = &unk_1E6577E90;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D8E67C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6577DD8;
  *((_QWORD *)v1 + 9) = &unk_1E6577E90;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6577EF0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6577FA8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6577DD8;
  *((_QWORD *)v1 + 9) = &unk_1E6577E90;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6577EF0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6577FA8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6577EB0);
  *(_QWORD *)a1 = &unk_1E6577DD8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6577E90;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D8E994(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D8EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6578128);
  *(_QWORD *)a1 = &unk_1E6578050;
  *(_QWORD *)(a1 + 72) = &unk_1E6578108;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D8ECB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4;
  const PCString *v5;
  const PCString *v6;
  void ***Serializer;
  const PCString *v8;
  int Size;
  int v10;
  int *v11;
  int v12;
  double *v13;
  long double v14;

  v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    Size = ProShade::shapeGetSize(a1[1], v8);
    v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        v11 = a1 + 4;
        do
        {
          v12 = *v11++;
          *(long double *)Serializer++ = sin((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      v13 = (double *)(a1 + 4);
      do
      {
        v14 = *v13++;
        *(long double *)Serializer++ = sin(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"sin doesn't apply to BOOL", v6);
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6578050;
  *(_QWORD *)(a1 + 72) = &unk_1E6578108;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6578168;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6578220;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6578050;
  *(_QWORD *)(a1 + 72) = &unk_1E6578108;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6578168;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6578220;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "sin");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D8EFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 16, 0x8903763CuLL);
  v5[1] = v4 + 3;
  v5[2] = v4 + 4;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_WORD *)v6 = 26995;
  v6[2] = 110;
  *((_BYTE *)v5 + v4 + 15) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D8F108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "sin");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "sin");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D8F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6578128);
  *(_QWORD *)v2 = &unk_1E6578050;
  *(_QWORD *)(v2 + 72) = &unk_1E6578108;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D8F50C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6578050;
  *((_QWORD *)v1 + 9) = &unk_1E6578108;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6578168;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6578220;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6578050;
  *((_QWORD *)v1 + 9) = &unk_1E6578108;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6578168;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6578220;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6578128);
  *(_QWORD *)a1 = &unk_1E6578050;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6578108;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D8F824(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::InsertUniform::~InsertUniform(ProShade::InsertUniform *this)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E65698D0;
  std::__tree<LiString>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  *((_QWORD *)this + 4) = &unk_1E656A198;
  if (*((int *)this + 10) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)this + 10);
  PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize((uint64_t)this + 32, 0, v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  *(_QWORD *)this = &unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy((uint64_t)this + 8, *((PCSharedCount **)this + 2));
}

PCSharedCount *ProShade::Vec4::Vec4(PCSharedCount *a1, _OWORD *a2)
{
  PC_Sp_counted_base *v4;

  v4 = (PC_Sp_counted_base *)operator new();
  ProShade::ConstVector::ConstVector((uint64_t)v4, a2);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = v4;
  PCSharedCount::PCSharedCount(a1 + 3, (PCShared_base *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6574188;
  return a1;
}

void sub_1B2D8F990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstVector::ConstVector(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E657E068);
  *(_QWORD *)a1 = &unk_1E657E588;
  *(_QWORD *)(a1 + 80) = &unk_1E657E690;
  *(_QWORD *)a1 = &off_1E657DF38;
  *(_QWORD *)(a1 + 80) = &unk_1E657E040;
  *(_OWORD *)(a1 + 48) = *a2;
  *(_OWORD *)(a1 + 64) = a2[1];
  *(_QWORD *)(a1 + 24) = 0x400000003;
  return a1;
}

{
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)a1 = off_1E657E6C0;
  *(_QWORD *)(a1 + 80) = off_1E657E778;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657DF38;
  *(_QWORD *)(a1 + 80) = &unk_1E657E040;
  *(_OWORD *)(a1 + 48) = *a2;
  *(_OWORD *)(a1 + 64) = xmmword_1B304EEE0;
  *(_QWORD *)(a1 + 24) = 0x200000003;
  return a1;
}

void sub_1B2D8FA60(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 80) = v3;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  PCSharedCount *v2;
  PCSharedCount *v4;
  void *v5;
  PCSharedCount *v6;

  v1 = *a1;
  v2 = (PCSharedCount *)**a1;
  if (v2)
  {
    v4 = (PCSharedCount *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        PCSharedCount::~PCSharedCount(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<PCPtr<LiMaterialLayer>>::__push_back_slow_path<PCPtr<LiMaterialLayer> const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  PCSharedCount *v11;
  uint64_t v12;
  _QWORD v14[2];
  PCSharedCount *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  else
    v10 = 0;
  v11 = (PCSharedCount *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[16 * v9];
  v11->var0 = a2->var0;
  PCSharedCount::PCSharedCount(v11 + 1, a2 + 1);
  v15 += 2;
  std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2D8FBC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  PCSharedCount *v13;

  for (i = 24; ; i -= 16)
  {
    v12 = a3 + i;
    if (a3 + i - 24 == a5)
      break;
    *(_QWORD *)(a7 + i - 40) = *(_QWORD *)(v12 - 40);
    v13 = (PCSharedCount *)(a7 + i - 32);
    PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(v12 - 32));
  }
  return a6;
}

uint64_t std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const PCSharedCount *std::vector<PCPtr<LiMaterialLayer>>::__move_range(uint64_t a1, const PCSharedCount *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const PCSharedCount *v7;
  PCSharedCount *v8;
  const PCSharedCount *v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (const PCSharedCount *)((char *)a2 + v6 - a4);
  v8 = (PCSharedCount *)v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (const PCSharedCount *)((char *)a2 + v6 - a4);
    v8 = *(PCSharedCount **)(a1 + 8);
    do
    {
      v8->var0 = v10->var0;
      PCSharedCount::PCSharedCount(v8 + 1, v10 + 1);
      v10 += 2;
      v8 += 2;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1B2D8FDDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<PCPtr<LiMaterialLayer>>::push_back[abi:ne180100](PCSharedCount **a1, PCSharedCount *a2)
{
  PCSharedCount *v4;
  PCSharedCount *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  PCSharedCount *v12;
  unint64_t v13;
  uint64_t v14;
  PCSharedCount *v15;
  PCSharedCount *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const PCSharedCount *v23;
  int64x2_t v24;
  char *v25;
  PCSharedCount *v26;
  int64x2_t v27;
  char *v28;
  PCSharedCount *v29;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    v6 = (char *)v5 - (char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v13 = 1;
      else
        v13 = v4 - *a1;
      v14 = (uint64_t)a1[4];
      v29 = a1[4];
      v15 = (PCSharedCount *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v14, v13);
      v16 = &v15[2 * (v13 >> 2)];
      v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      v18 = (char *)&v15[2 * v17];
      v27.i64[1] = (uint64_t)v16;
      v28 = v18;
      v19 = (unint64_t)a1[1];
      v20 = (uint64_t)a1[2] - v19;
      if (v20)
      {
        v21 = (char *)v16 + (v20 & 0xFFFFFFFFFFFFFFF0);
        v22 = 16 * (v20 >> 4);
        v23 = (const PCSharedCount *)(v19 + 8);
        do
        {
          v16->var0 = v23[-1].var0;
          PCSharedCount::PCSharedCount(v16 + 1, v23);
          v16 += 2;
          v23 += 2;
          v22 -= 16;
        }
        while (v22);
        v15 = v26;
        v16 = (PCSharedCount *)v27.i64[0];
        v24 = *(int64x2_t *)(a1 + 1);
        v18 = v28;
      }
      else
      {
        v24 = vdupq_n_s64(v19);
        v21 = (char *)&v15[2 * (v13 >> 2)];
      }
      v26 = *a1;
      *a1 = v15;
      a1[1] = v16;
      v27 = v24;
      v25 = (char *)a1[3];
      a1[2] = (PCSharedCount *)v21;
      a1[3] = (PCSharedCount *)v18;
      v28 = v25;
      std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)&v26);
      v4 = a1[2];
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>((int)&v26, v5, v4, &v5[-2 * (v10 >> 1)].var0);
      v4 = v12;
      a1[1] -= 2 * v11;
      a1[2] = v12;
    }
  }
  v4->var0 = a2->var0;
  PCSharedCount::PCSharedCount(v4 + 1, a2 + 1);
  a1[2] += 2;
}

void sub_1B2D8FF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<LiMaterialLayer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>,std::reverse_iterator<PCPtr<LiMaterialLayer>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

const PCSharedCount *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>(uint64_t a1, const PCSharedCount *a2, const PCSharedCount *a3, uint64_t a4)
{
  uint64_t *v6;
  const PCSharedCount *v7;
  const PCSharedCount *v8;
  PCSharedCount v10;

  if (a3 != a2)
  {
    v6 = (uint64_t *)(a4 - 8);
    v7 = a3 - 1;
    do
    {
      *(v6 - 1) = (uint64_t)v7[-1].var0;
      PCSharedCount::PCSharedCount(&v10, v7);
      PCSharedCount::operator=(v6, (uint64_t *)&v10);
      PCSharedCount::~PCSharedCount(&v10);
      v6 -= 2;
      v8 = v7 - 1;
      v7 -= 2;
    }
    while (v8 != a2);
  }
  return a3;
}

void sub_1B2D9008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

PCSharedCount *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *,PCPtr<LiMaterialLayer> *>(int a1, PCSharedCount *a2, PCSharedCount *a3, PC_Sp_counted_base **a4)
{
  PCSharedCount *v4;
  PCSharedCount *v5;
  const PCSharedCount *v6;
  PC_Sp_counted_base *var0;
  uint64_t *v8;
  PCSharedCount v10;

  v4 = a2;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    var0 = v4->var0;
    v6 = v4 + 1;
    *a4 = var0;
    v8 = (uint64_t *)(a4 + 1);
    PCSharedCount::PCSharedCount(&v10, v6);
    PCSharedCount::operator=(v8, (uint64_t *)&v10);
    PCSharedCount::~PCSharedCount(&v10);
    v4 = (PCSharedCount *)&v6[1];
    a4 = (PC_Sp_counted_base **)(v8 + 1);
  }
  while (v4 != v5);
  return v5;
}

void sub_1B2D9012C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiMaterialLayer>>,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*,PCPtr<LiMaterialLayer>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + v7 + 8), (const PCSharedCount *)(a2 + v7 + 8));
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2D901A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 + v2));
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void PSShaderBase::PSShaderBase(PSShaderBase *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E65782C0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
}

void sub_1B2D90228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void PSShaderBase::~PSShaderBase(PCString *this)
{
  PCString *v2;
  PCString *v3;

  this->var0 = (__CFString *)off_1E65782C0;
  v2 = this + 1;
  PCString::~PCString(this + 7);
  v3 = this + 4;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

uint64_t PSShaderBase::id(PSShaderBase *this)
{
  ProGL::ObjectHandle *v2;
  GLenum v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;
  _BYTE v9[40];

  v2 = (PSShaderBase *)((char *)this + 8);
  if (!ProGL::ObjectHandle::name((PSShaderBase *)((char *)this + 8)))
  {
    ProGL::GL::GL((ProGL::GL *)v9);
    v3 = (*(uint64_t (**)(PSShaderBase *))(*(_QWORD *)this + 16))(this);
    ProGL::createShaderObject((ProGL *)v9, v3, &v8);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v2, &v8);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    ProGL::GL::~GL((ProGL::GL *)v9);
  }
  return ProGL::ObjectHandle::name(v2);
}

void sub_1B2D90358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void PSShaderBase::setSource(PSShaderBase *this, PCString *a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  PCString *v10;
  PCString v11;

  v6 = PCString::size(a2);
  v7 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 5);
  v9 = (unint64_t)(v8 - v7) >> 3;
  if (v6)
  {
    if ((int)v9 <= a3)
    {
      do
      {
        PCString::PCString(&v11, "");
        std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)this + 4, &v11);
        PCString::~PCString(&v11);
        v7 = *((_QWORD *)this + 4);
      }
      while ((int)((unint64_t)(*((_QWORD *)this + 5) - v7) >> 3) <= a3);
    }
    v10 = (PCString *)(v7 + 8 * a3);
    if (PCString::compare(v10, a2))
    {
      PCString::set(v10, a2);
      *((_BYTE *)this + 24) = 0;
    }
  }
  else
  {
    if ((int)v9 <= a3)
      goto LABEL_10;
    PCString::set((PCString *)(v7 + 8 * a3), a2);
    while (1)
    {
      v7 = *((_QWORD *)this + 4);
      v8 = *((_QWORD *)this + 5);
LABEL_10:
      if (v8 == v7 || PCString::size((PCString *)(v8 - 8)))
        break;
      std::vector<PCString>::resize((uint64_t *)this + 4, ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3) - 1);
    }
  }
}

void std::vector<PCString>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 8 * a2;
      while (v3 != v5)
        PCString::~PCString((PCString *)(v3 - 8));
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<PCString>::__append(a1, a2 - v4);
  }
}

void PSShaderBase::compile(PCString *this)
{
  _OWORD *v2;
  unint64_t v3;
  uint64_t v4;
  GLsizei v5;
  uint64_t v6;
  PCString *v7;
  char *CStr;
  uint64_t v9;
  _QWORD *v10;
  GLuint v11;
  GLuint v12;
  GLuint v13;
  GLuint v14;
  uint64_t v15;
  PCGLSLException *exception;
  void *v17;
  GLuint v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  PCGLSLException *v23;
  PCString v24;
  GLsizei length;
  GLint params[2];
  std::string __p;
  uint64_t v28;
  _OWORD *v29;
  _BYTE v30[40];

  if (!LOBYTE(this[3].var0))
  {
    PSShaderBase::id((PSShaderBase *)this);
    ProGL::GL::GL((ProGL::GL *)v30);
    v28 = 0x1400000000;
    v29 = 0;
    v2 = (_OWORD *)operator new[]();
    v3 = (char *)this[5].var0 - (char *)this[4].var0;
    *v2 = xmmword_1B309DA00;
    v2[2] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[9] = 0u;
    v2[10] = 0u;
    v2[11] = 0u;
    v2[12] = 0u;
    v2[13] = 0u;
    v2[14] = 0u;
    v2[15] = 0u;
    v2[16] = 0u;
    v2[17] = 0u;
    v2[18] = 0u;
    v2[19] = 0u;
    v2[20] = 0u;
    v2[21] = 0u;
    v2[22] = 0u;
    v2[23] = 0u;
    v2[24] = 0u;
    v2[25] = 0u;
    v2[26] = 0u;
    v2[27] = 0u;
    v2[28] = 0u;
    v2[29] = 0u;
    v2[30] = 0u;
    v2[1] = 0u;
    v29 = v2 + 1;
    if ((int)(v3 >> 3) < 1)
    {
      v5 = 0;
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v6 = v3 & 0x7FFFFFFF8;
      do
      {
        v7 = (PCString *)((char *)this[4].var0 + v4);
        if (PCString::size(v7))
        {
          CStr = PCString::createCStr(v7);
          std::string::basic_string[abi:ne180100]<0>(&__p, CStr);
          free(CStr);
          PCDynamicArray<std::string>::insert((unsigned int *)&v28, v28, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v5;
        }
        v4 += 8;
      }
      while (v6 != v4);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v5;
    __p.__r_.__value_.__l.__size_ = 0;
    __p.__r_.__value_.__l.__size_ = operator new[]();
    if (v5 >= 1)
    {
      v9 = 0;
      do
      {
        *(_QWORD *)params = 0;
        v10 = (_QWORD *)((char *)v29 + v9);
        if (*((char *)v29 + v9 + 23) < 0)
          v10 = (_QWORD *)*v10;
        *(_QWORD *)params = v10;
        PCDynamicArray<char const*>::insert((unsigned int *)&__p, __p.__r_.__value_.__l.__data_, params);
        v9 += 24;
      }
      while (24 * v5 != v9);
    }
    v11 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)&this[1]);
    glShaderSource(v11, v5, (const GLchar *const *)__p.__r_.__value_.__l.__size_, 0);
    v12 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)&this[1]);
    glCompileShader(v12);
    v13 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)&this[1]);
    params[0] = 0;
    glGetShaderiv(v13, 0x8B81u, params);
    if (!params[0])
    {
      v14 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)&this[1]);
      params[0] = 0;
      glGetShaderiv(v14, 0x8B84u, params);
      v15 = params[0];
      if (!params[0])
      {
        exception = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
        PCString::PCString((PCString *)params, "compile failed");
        PCGLSLException::PCGLSLException(exception, (const PCString *)params);
      }
      length = 0;
      v17 = (void *)operator new[]();
      bzero(v17, v15 + 1);
      v18 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)&this[1]);
      glGetShaderInfoLog(v18, v15, &length, (GLchar *)v17);
      *((_BYTE *)v17 + length) = 0;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"PSShader compile failed", 23);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v19);
      v20 = strlen((const char *)v17);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v17, v20);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v21);
      PSShaderBase::source((PSShaderBase *)this, (PCSharedCount *)params);
      printWithLineNumbers((PCString *)params);
      PCString::~PCString((PCString *)params);
      v22 = std::endl[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50]);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
      PCString::set(this + 7, (const char *)v17);
      v23 = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
      PCString::PCString((PCString *)params, "compile failed");
      PCString::PCString(&v24, (const char *)v17);
      PCGLSLException::PCGLSLException(v23, (const PCString *)params, &v24);
    }
    LOBYTE(this[3].var0) = 1;
    if (__p.__r_.__value_.__l.__size_)
      MEMORY[0x1B5E2914C](__p.__r_.__value_.__l.__size_, 0x50C80EE9192B6);
    PCDynamicArray<std::string>::~PCDynamicArray((uint64_t)&v28);
    ProGL::GL::~GL((ProGL::GL *)v30);
  }
}

void sub_1B2D908BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  if (v23)
    __cxa_free_exception(v22);
  MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  if (a14)
    MEMORY[0x1B5E2914C](a14, 0x50C80EE9192B6);
  PCDynamicArray<std::string>::~PCDynamicArray((uint64_t)&a19);
  ProGL::GL::~GL((ProGL::GL *)&a21);
  _Unwind_Resume(a1);
}

void printWithLineNumbers(PCString *a1)
{
  int v2;
  char *CStr;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  size_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const char *v16;
  char v17;

  v2 = PCString::size(a1);
  CStr = PCString::createCStr(a1);
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = v2;
    v7 = (_QWORD *)MEMORY[0x1E0DE4A50];
    v8 = 1;
    do
    {
      v9 = CStr[v4];
      if (!v5)
      {
        LiString::format((LiString *)"%4d: ", (LiString *)&v16, v8);
        v10 = v16 ? v16 : "";
        v11 = strlen(v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, v11);
        if (v16)
        {
          v12 = (unsigned int *)(v16 - 12);
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            *v16 = 0;
            if (v16)
              v15 = (char *)(v16 - 12);
            else
              v15 = 0;
            free(v15);
          }
        }
      }
      v5 = v9 != 10;
      if (v9 == 10)
        v8 = (v8 + 1);
      else
        v8 = v8;
      v17 = v9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v17, 1);
      ++v4;
    }
    while (v4 != v6);
  }
  free(CStr);
}

void sub_1B2D90B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    LiGeode::print(a11, (_BYTE **)&a11);
  _Unwind_Resume(exception_object);
}

void PSShaderBase::source(PSShaderBase *this@<X0>, PCSharedCount *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  PCString v8;

  PCSharedCount::PCSharedCount(a2);
  v4 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if ((int)(v4 >> 3) >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 & 0x7FFFFFFF8;
    do
    {
      if (PCString::size((PCString *)(*((_QWORD *)this + 4) + v5)))
      {
        if (*((_BYTE *)this + 25))
        {
          PCString::ssprintf((PCString *)"// segment %d\n", &v8, v6);
          PCString::append((PCString *)a2, &v8);
          PCString::~PCString(&v8);
        }
        PCString::append((PCString *)a2, (const PCString *)(*((_QWORD *)this + 4) + v5));
      }
      v6 = (v6 + 1);
      v5 += 8;
    }
    while (v7 != v5);
  }
}

void sub_1B2D90BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  PCString::~PCString(&a10);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void PCGLSLException::PCGLSLException(PCGLSLException *this, const PCString *a2, const PCString *a3)
{
  PCString *v4;

  PCException::PCException(this, a2);
  v4->var0 = (__CFString *)&unk_1E656A158;
  PCString::PCString(v4 + 8, a3);
}

void sub_1B2D90C4C(_Unwind_Exception *a1)
{
  PCString *v1;

  PCException::~PCException(v1);
  _Unwind_Resume(a1);
}

void std::vector<PCString>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  PCSharedCount *v15;
  PCSharedCount *v16;
  uint64_t v17;
  PCSharedCount *v18;
  _QWORD v19[2];
  PCSharedCount *v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(PCSharedCount **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 3)
  {
    if (a2)
    {
      v14 = 8 * a2;
      v15 = &v7[a2];
      do
      {
        PCSharedCount::PCSharedCount(v7++);
        v14 -= 8;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v16 = (PCSharedCount *)&v13[8 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[8 * v12];
    v17 = 8 * a2;
    v18 = &v16[a2];
    do
    {
      PCSharedCount::PCSharedCount(v16++);
      v17 -= 8;
    }
    while (v17);
    v20 = v18;
    std::vector<PCString>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<PCString>::~__split_buffer((uint64_t)v19);
  }
}

void sub_1B2D90D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PCDynamicArray<std::string>::~PCDynamicArray(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 24 * v3;
      do
      {
        if (*(char *)(v2 + v4 - 1) < 0)
          operator delete(*(void **)(v2 + v4 - 24));
        v4 -= 24;
      }
      while (v4);
    }
    MEMORY[0x1B5E2914C](v2 - 16, 0x1012C80EC159624);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

BOOL PCDynamicArray<std::string>::insert(unsigned int *a1, unsigned int a2, const std::string *a3)
{
  uint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  v7 = a1[1];
  if ((_DWORD)v6 == v7)
  {
    v8 = (char *)*((_QWORD *)a1 + 1);
    v9 = (2 * v6);
    a1[1] = v9;
    v10 = (_QWORD *)operator new[]();
    *v10 = 24;
    v10[1] = v9;
    v11 = v10 + 2;
    if ((_DWORD)v9)
      bzero(v10 + 2, 24 * ((24 * (unint64_t)(2 * v6) - 24) / 0x18) + 24);
    *((_QWORD *)a1 + 1) = v11;
    memcpy(v11, v8, 24 * v6);
    if (v8)
    {
      v12 = *((_QWORD *)v8 - 1);
      if (v12)
      {
        v13 = 24 * v12;
        do
        {
          if (v8[v13 - 1] < 0)
            operator delete(*(void **)&v8[v13 - 24]);
          v13 -= 24;
        }
        while (v13);
      }
      MEMORY[0x1B5E2914C](v8 - 16, 0x1012C80EC159624);
    }
  }
  v14 = *((_QWORD *)a1 + 1) + 24 * a2;
  memmove((void *)(v14 + 24), (const void *)v14, 24 * (*a1 - a2));
  std::string::operator=((std::string *)(*((_QWORD *)a1 + 1) + 24 * a2), a3);
  ++*a1;
  return (_DWORD)v6 == v7;
}

BOOL PCDynamicArray<char const*>::insert(unsigned int *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  const void *v8;
  void *v9;
  uint64_t v10;

  v6 = *a1;
  v7 = a1[1];
  if ((_DWORD)v6 == v7)
  {
    v8 = (const void *)*((_QWORD *)a1 + 1);
    a1[1] = 2 * v6;
    v9 = (void *)operator new[]();
    *((_QWORD *)a1 + 1) = v9;
    memcpy(v9, v8, 8 * v6);
    if (v8)
      MEMORY[0x1B5E2914C](v8, 0x50C80EE9192B6);
  }
  v10 = *((_QWORD *)a1 + 1) + 8 * a2;
  memmove((void *)(v10 + 8), (const void *)v10, 8 * (*a1 - a2));
  *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * a2) = *a3;
  ++*a1;
  return (_DWORD)v6 == v7;
}

void LiHeBackgroundGenerator::LiHeBackgroundGenerator(LiHeBackgroundGenerator *this)
{
  _QWORD *v1;

  LiHeBackgroundGeneratorShader::LiHeBackgroundGeneratorShader(this);
  *v1 = off_1E65782F8;
}

void LiHeBackgroundGenerator::~LiHeBackgroundGenerator(HGNode *this)
{
  void *v1;

  LiHeBackgroundGeneratorShader::~LiHeBackgroundGeneratorShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeBackgroundGenerator::GetDOD(LiHeBackgroundGenerator *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

void LiSolidRendererImageSource::LiSolidRendererImageSource(LiSolidRendererImageSource *this)
{
  *((_QWORD *)this + 29) = &off_1E65EB048;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 1;
  LiRendererBase::LiRendererBase(this, &off_1E6578670);
  *(_QWORD *)this = &off_1E6578568;
  *((_QWORD *)this + 29) = &unk_1E6578650;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 1065353216;
  *((_DWORD *)this + 19) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 21) = 512;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 23) = 0x3FF0000000000000;
  *((_QWORD *)this + 18) = 0x3FF0000000000000;
  *((_QWORD *)this + 13) = 0x3FF0000000000000;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  (*(void (**)(LiSolidRendererImageSource *, uint64_t))(*(_QWORD *)this + 88))(this, 2);
}

void sub_1B2D9117C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCString *v3;
  uint64_t v4;

  PCString::~PCString(v3);
  LiRendererBase::~LiRendererBase((PCSharedCount *)v1, (const PCString *)&off_1E6578670);
  *(_QWORD *)(v1 + 232) = v4 + 16;
  *(_BYTE *)(v1 + 248) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiSolidRendererImageSource::~LiSolidRendererImageSource(LiSolidRendererImageSource *this)
{
  *(_QWORD *)this = &off_1E6578568;
  *((_QWORD *)this + 29) = &unk_1E6578650;
  PCString::~PCString((PCString *)this + 11);
  LiRendererBase::~LiRendererBase((PCSharedCount *)this, (const PCString *)&off_1E6578670);
  *((_QWORD *)this + 29) = &off_1E65EB048;
  *((_BYTE *)this + 248) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 30);
}

{
  LiSolidRendererImageSource::~LiSolidRendererImageSource(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiSolidRendererImageSource::~LiSolidRendererImageSource(LiSolidRendererImageSource *this)
{
  LiSolidRendererImageSource::~LiSolidRendererImageSource((LiSolidRendererImageSource *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiSolidRendererImageSource::~LiSolidRendererImageSource((LiSolidRendererImageSource *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

uint64_t LiSolidRendererImageSource::pixelTransformSupport(LiSolidRendererImageSource *this, const LiRenderParameters *a2)
{
  return 6;
}

uint64_t LiSolidRendererImageSource::supportsHeliumCPURendering(LiSolidRendererImageSource *this)
{
  return 0;
}

CGColorSpace **LiSolidRendererImageSource::getHelium@<X0>(LiSolidRendererImageSource *this@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t RequestedColorDescription;
  char *v7;
  __int128 *v8;
  _QWORD *v9;
  __n128 ObjectToWorldTransform;
  double FarPlane;
  double v12;
  double v13;
  double FarPlaneFade;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t i;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  double v32;
  uint64_t j;
  unint64_t k;
  _OWORD *v35;
  __int128 v36;
  uint64_t m;
  _OWORD *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t n;
  char *v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t ii;
  char *v48;
  uint64_t v49;
  double *v50;
  uint64_t jj;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t kk;
  __int128 v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  __n128 v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  void *WorldClipPlanes;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  PC_Sp_counted_base *var0;
  const FxColorDescription *v76;
  int v77;
  const PCString *v78;
  uint64_t *v80;
  __int128 v81[8];
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[2];
  PCString v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  PCSharedCount v93[16];
  _BYTE v94[48];
  __int128 v95;
  __int128 v96;
  _BYTE v97[48];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[8];
  double v115[14];
  double v116;
  _QWORD v117[61];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126[8];
  _BYTE v127[40];
  FxColorDescription v128;

  RequestedColorDescription = LiAgent::getRequestedColorDescription((LiAgent *)a2);
  FxColorDescription::FxColorDescription((uint64_t)&v128, RequestedColorDescription, 0);
  LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v127, (LiAgent *)a2, &v128);
  v7 = (char *)HGObject::operator new(0x730uLL);
  LiHeSolidRendererNode::LiHeSolidRendererNode((LiHeSolidRendererNode *)v7);
  v8 = a2[6];
  v7[1480] = LiRenderingTechnology::getDebugShaders((LiRenderingTechnology *)(v8 + 5));
  v7[1481] = *((_BYTE *)a2 + 248);
  v9 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v9)
    v9 = *(_QWORD **)a2[6];
  ObjectToWorldTransform = LiAgent::getObjectToWorldTransform((LiAgent *)a2, (uint64_t)v126);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, __n128))(*v9 + 240))(v117, v9, ObjectToWorldTransform);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v117, v126, (uint64_t)&v118);
  LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)v117);
  {
    LiCamera::copy((uint64_t)v117, (uint64_t)v9);
    if (LiSimpleCamera::getAngleOfView((LiSimpleCamera *)v117) == 0.0)
    {
      v9 = v117;
    }
    else
    {
      LiSolidUtils::getBoundsOfGeometry(*((_QWORD *)this + 2), (double *)&v118, v115);
      FarPlane = v115[4] * -1.02;
      v12 = fmax(v115[5] * -0.98, 0.1);
      if ((LiSimpleCamera::getCrop((LiSimpleCamera *)v117) & 1) != 0
        || LiSimpleCamera::getFarCrop((LiSimpleCamera *)v117))
      {
        v13 = LiSimpleCamera::getNearPlaneFade((LiSimpleCamera *)v117);
        FarPlaneFade = LiSimpleCamera::getFarPlaneFade((LiSimpleCamera *)v117);
        v12 = v12 - v13;
        if (v12 < LiSimpleCamera::getNearPlane((LiSimpleCamera *)v117)
          || v12 > LiSimpleCamera::getFarPlane((LiSimpleCamera *)v117))
        {
          v12 = LiSimpleCamera::getNearPlane((LiSimpleCamera *)v117);
        }
        FarPlane = FarPlane + FarPlaneFade;
        if (FarPlane < LiSimpleCamera::getNearPlane((LiSimpleCamera *)v117)
          || FarPlane > LiSimpleCamera::getFarPlane((LiSimpleCamera *)v117))
        {
          FarPlane = LiSimpleCamera::getFarPlane((LiSimpleCamera *)v117);
        }
      }
      LiSimpleCamera::setNearPlane((uint64_t)v117, v12);
      v9 = v117;
      LiSimpleCamera::setFarPlane((uint64_t)v117, FarPlane);
    }
  }
  (*(void (**)(double *__return_ptr, _QWORD *))(*v9 + 200))(v115, v9);
  v15 = a2[20];
  v16 = v15[3];
  v18 = *v15;
  v17 = v15[1];
  v114[2] = v15[2];
  v114[3] = v16;
  v114[0] = v18;
  v114[1] = v17;
  v19 = v15[7];
  v21 = v15[4];
  v20 = v15[5];
  v114[6] = v15[6];
  v114[7] = v19;
  v114[4] = v21;
  v114[5] = v20;
  v22 = *(_OWORD *)((char *)this + 184);
  v110 = *(_OWORD *)((char *)this + 168);
  v111 = v22;
  v23 = *(_OWORD *)((char *)this + 216);
  v112 = *(_OWORD *)((char *)this + 200);
  v113 = v23;
  v24 = *(_OWORD *)((char *)this + 120);
  v106 = *(_OWORD *)((char *)this + 104);
  v107 = v24;
  v25 = *(_OWORD *)((char *)this + 152);
  v108 = *(_OWORD *)((char *)this + 136);
  v109 = v25;
  if (*((_QWORD *)this + 4))
  {
    v26 = *(_QWORD *)a2[6];
    if (v26)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v26 + 48))(v94);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v94, &v106, (uint64_t)&v98);
      for (i = 0; i != 128; i += 32)
      {
        v28 = (__int128 *)((char *)&v106 + i);
        v29 = *(__int128 *)((char *)&v98 + i + 16);
        *v28 = *(__int128 *)((char *)&v98 + i);
        v28[1] = v29;
      }
    }
  }
  if (!PCMatrix44Tmpl<double>::is2Didentity((double *)&v106))
  {
    v30 = 0;
    *((_QWORD *)&v105 + 1) = *((_QWORD *)&v113 + 1);
    v98 = v106;
    *((_QWORD *)&v99 + 1) = *((_QWORD *)&v107 + 1);
    v100 = v108;
    *((_QWORD *)&v101 + 1) = *((_QWORD *)&v109 + 1);
    v31 = &v98;
    *(_QWORD *)&v105 = 0;
    *(_QWORD *)&v101 = 0;
    *(_QWORD *)&v99 = 0;
    v102 = 0uLL;
    v103 = xmmword_1B304EED0;
    v104 = v112;
    v32 = 1.0
        / sqrt(*(double *)&v112 * *(double *)&v112+ *((double *)&v112 + 1) * *((double *)&v112 + 1)+ *((double *)&v113 + 1) * *((double *)&v113 + 1));
    do
    {
      for (j = 0; j != 2; ++j)
        v31[j] = (__int128)vmulq_n_f64((float64x2_t)v31[j], v32);
      ++v30;
      v31 += 2;
    }
    while (v30 != 4);
    v104 = 0uLL;
    *(_QWORD *)&v97[40] = 0x3FF0000000000000;
    *(_QWORD *)v97 = 0x3FF0000000000000;
    *(_QWORD *)&v94[40] = 0x3FF0000000000000;
    *(_QWORD *)v94 = 0x3FF0000000000000;
    memset(&v94[8], 0, 32);
    v95 = 0u;
    v96 = 0u;
    memset(&v97[8], 0, 32);
    if (PCMatrix44Tmpl<double>::invert((double *)v94, (double *)&v98, 0.0))
    {
      PCMatrix44Tmpl<double>::operator*((uint64_t)v114, &v98, (uint64_t)v93);
      for (k = 0; k != 16; k += 4)
      {
        v35 = &v114[k / 2];
        v36 = *(_OWORD *)&v93[k + 2].var0;
        *v35 = *(_OWORD *)&v93[k].var0;
        v35[1] = v36;
      }
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v106, (__int128 *)v94, (uint64_t)v93);
      for (m = 0; m != 16; m += 4)
      {
        v38 = (__int128 *)((char *)&v106 + m * 8);
        v39 = *(_OWORD *)&v93[m + 2].var0;
        *v38 = *(_OWORD *)&v93[m].var0;
        v38[1] = v39;
      }
    }
  }
  v102 = v122;
  v103 = v123;
  v104 = v124;
  v105 = v125;
  v98 = v118;
  v99 = v119;
  v100 = v120;
  v101 = v121;
  PCMatrix44Tmpl<double>::invert((double *)&v98, (double *)&v98, 0.0);
  LiHeSolidRendererNode::setCameraInfo((LiHeSolidRendererNode *)v7, (const LiCamera *)v9);
  v40 = v7 + 432;
  if (v7 + 432 != (char *)&v118)
  {
    v41 = 0;
    v42 = &v118;
    do
    {
      for (n = 0; n != 32; n += 8)
        *(_QWORD *)&v40[n] = *(_QWORD *)((char *)v42 + n);
      ++v41;
      v40 += 32;
      v42 += 2;
    }
    while (v41 != 4);
  }
  v44 = v7 + 560;
  if (v7 + 560 != (char *)&v98)
  {
    v45 = 0;
    v46 = &v98;
    do
    {
      for (ii = 0; ii != 32; ii += 8)
        *(_QWORD *)&v44[ii] = *(_QWORD *)((char *)v46 + ii);
      ++v45;
      v44 += 32;
      v46 += 2;
    }
    while (v45 != 4);
  }
  v48 = v7 + 688;
  if (v7 + 688 != (char *)v115)
  {
    v49 = 0;
    v50 = v115;
    do
    {
      for (jj = 0; jj != 4; ++jj)
        *(double *)&v48[jj * 8] = v50[jj];
      ++v49;
      v48 += 32;
      v50 += 4;
    }
    while (v49 != 4);
  }
  v52 = v7 + 816;
  if (v7 + 816 != (char *)v126)
  {
    v53 = 0;
    v54 = v126;
    do
    {
      for (kk = 0; kk != 32; kk += 8)
        *(_QWORD *)&v52[kk] = *(_QWORD *)((char *)v54 + kk);
      ++v53;
      v52 += 32;
      v54 += 2;
    }
    while (v53 != 4);
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v9 + 344))(v94, v9);
  v56 = *(_OWORD *)&v94[16];
  *((_OWORD *)v7 + 59) = *(_OWORD *)v94;
  *((_OWORD *)v7 + 60) = v56;
  v91 = 0uLL;
  v92 = 0;
  v89 = 0uLL;
  v90 = 0;
  v87 = 0uLL;
  v88 = 0;
  if ((*(unsigned int (**)(_QWORD *, __int128 *, __int128 *))(*v9 + 568))(v9, &v89, &v87))
  {
    v58 = *((_QWORD *)&v87 + 1);
    v57 = *(double *)&v87;
    v59 = v88;
  }
  else
  {
    v87 = 0x3FF0000000000000uLL;
    v88 = 0;
    v90 = 0;
    v89 = 0x3FF0000000000000uLL;
    v57 = 1.0;
    v59 = 0;
    v58 = 0;
  }
  v91 = v89;
  v92 = v90;
  v80 = a3;
  if ((*(unsigned int (**)(_QWORD *, __int128 *, __int128 *))(*v9 + 608))(v9, &v89, &v87))
  {
    v60 = v87;
    v61 = v88;
  }
  else
  {
    v87 = 0x3FF0000000000000uLL;
    v88 = 0;
    v89 = 0x3FF0000000000000uLL;
    v90 = 0;
    v60 = xmmword_1B304EED0;
    v61 = 0;
  }
  *((_OWORD *)v7 + 93) = v91;
  *((_QWORD *)v7 + 188) = v92;
  *((double *)v7 + 189) = v57;
  *((_QWORD *)v7 + 190) = v58;
  *((_QWORD *)v7 + 191) = v59;
  *((_OWORD *)v7 + 96) = v89;
  *((_QWORD *)v7 + 194) = v90;
  *(_OWORD *)(v7 + 1560) = v60;
  *((_QWORD *)v7 + 197) = v61;
  if (*((_BYTE *)v8 + 132))
    v62 = 2048;
  else
    v62 = 1024;
  if (*((_BYTE *)v8 + 132))
    v63 = *((_DWORD *)this + 17);
  else
    v63 = *((_DWORD *)this + 17) / 4;
  *((_DWORD *)v7 + 396) = *((_DWORD *)this + 25);
  *((_DWORD *)v7 + 316) = *((_DWORD *)this + 24);
  LiHeSolidRendererNode::setScene((PCShared_base **)v7, *((LiSceneObject **)this + 2), (const LiRenderParameters **)a2);
  *((_OWORD *)v7 + 69) = *((_OWORD *)this + 3);
  LiHeSolidRendererNode::setAAType((LiHeSolidRendererNode *)v7, *((_DWORD *)this + 16));
  *((_DWORD *)v7 + 283) = v63;
  *((_DWORD *)v7 + 284) = *((_DWORD *)this + 18);
  *((_DWORD *)v7 + 285) = *((_DWORD *)this + 19);
  if (*((_BYTE *)v8 + 144))
  {
    *((_DWORD *)v7 + 106) = 1;
    *((_DWORD *)v7 + 286) = 0;
    v64.n128_f64[0] = v116;
    if (v116 > -0.0000001 && v116 < 0.0000001)
    {
      v65 = 0;
      v96 = v122;
      *(_OWORD *)v97 = (unint64_t)v123;
      *(_OWORD *)&v97[16] = v124;
      *(_OWORD *)&v97[32] = v125;
      *(_OWORD *)v94 = v118;
      *(_OWORD *)&v94[16] = v119;
      *(_OWORD *)&v94[32] = v120;
      v95 = v121;
      do
      {
        v66 = &v7[v65 + 432];
        *(_OWORD *)v66 = *(_OWORD *)&v94[v65];
        v64 = *(__n128 *)&v94[v65 + 16];
        *((__n128 *)v66 + 1) = v64;
        v65 += 32;
      }
      while (v65 != 128);
    }
  }
  else
  {
    *((_DWORD *)v7 + 106) = 0;
    *((_DWORD *)v7 + 286) = *((_DWORD *)this + 20);
    *((_DWORD *)v7 + 287) = v62;
    PCString::PCString(&v86, (const PCString *)this + 11);
    PCString::set((PCString *)v7 + 144, &v86);
    PCString::~PCString(&v86);
  }
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, __n128))(*v9 + 280))(v85, v9, v64);
  v67 = v85[1];
  *(_OWORD *)(v7 + 1160) = v85[0];
  *(_OWORD *)(v7 + 1176) = v67;
  LiHeSolidRendererNode::setPixelTransform((uint64_t)v7, (double *)v114);
  WorldClipPlanes = LiAgent::getWorldClipPlanes((LiAgent *)a2);
  LiClipSet::operator=((uint64_t)(v7 + 1192), (uint64_t)WorldClipPlanes);
  v83 = 0;
  v84 = 0;
  v82 = &unk_1E656AAC8;
  if (*((int *)v8 + 11) >= 1)
  {
    v69 = 0;
    v70 = 0;
    do
    {
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*((_QWORD *)v8 + 6) + v69) + 192))(v94);
      if (*(_QWORD *)v94)
      {
        if ((int)v83 <= SHIDWORD(v83))
          v71 = (2 * (HIDWORD(v83) + 1)) | 1;
        else
          v71 = v83;
        PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v82, HIDWORD(v83) + 1, v71);
        v72 = v84;
        v73 = SHIDWORD(v83) - 1;
        *(_QWORD *)(v84 + 16 * v73) = *(_QWORD *)v94;
        PCSharedCount::PCSharedCount(v93, (const PCSharedCount *)&v94[8]);
        PCSharedCount::operator=((uint64_t *)(v72 + 16 * v73 + 8), (uint64_t *)v93);
        PCSharedCount::~PCSharedCount(v93);
      }
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v94[8]);
      ++v70;
      v69 += 16;
    }
    while (v70 < *((int *)v8 + 11));
  }
  LiHeSolidRendererNode::setMaterialFilters((uint64_t)v7, (uint64_t)&v82);
  *v80 = (uint64_t)v7;
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 16))(v7);
  if (!PCMatrix44Tmpl<double>::is2Didentity((double *)&v106))
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)a2[20], &v106, (uint64_t)v93);
    LiAgent::getInversePixelTransform((LiAgent *)a2, 0.0, (uint64_t)v81);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v93, v81, (uint64_t)v94);
    LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)v94, v80, v93);
    v74 = *v80;
    var0 = v93[0].var0;
    if ((PC_Sp_counted_base *)*v80 == v93[0].var0)
    {
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
    }
    else
    {
      if (v74)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
        var0 = v93[0].var0;
      }
      *v80 = (uint64_t)var0;
    }
  }
  v76 = (const FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)a2);
  LiAgent::setActualColorDescription((CGColorSpace **)a2, v76);
  v82 = &unk_1E656AAC8;
  if ((int)v83 < 0)
    v77 = 1;
  else
    v77 = v83;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v82, 0, v77);
  if (v84)
    MEMORY[0x1B5E2914C](v84, 0x1000C8077774924);
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)v117, v78);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 24))(v7);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v127);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v128._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2D91CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,PCString a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,PCSharedCount a47)
{
  uint64_t v47;
  uint64_t v48;
  const PCString *v50;

  if (a47.var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)a47.var0 + 24))(a47.var0);
  if (*a10)
    (*(void (**)(_QWORD))(*(_QWORD *)*a10 + 24))(*a10);
  PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray((uint64_t)&a27);
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&STACK[0x430], v50);
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)(v48 - 200));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v48 - 160));
  _Unwind_Resume(a1);
}

void LiHeSolidRendererNode::setMaterialFilters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const PCSharedCount *v9;
  PC_Sp_counted_base **v10;
  PCSharedCount v11;

  v4 = a1 + 1240;
  v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 1248) >= v5)
    v6 = *(_DWORD *)(a1 + 1248);
  else
    v6 = (2 * v5) | 1;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v7);
      v10 = (PC_Sp_counted_base **)(*(_QWORD *)(a1 + 1256) + v7);
      *v10 = v9->var0;
      PCSharedCount::PCSharedCount(&v11, v9 + 1);
      PCSharedCount::operator=((uint64_t *)v10 + 1, (uint64_t *)&v11);
      PCSharedCount::~PCSharedCount(&v11);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(int *)(a2 + 12));
  }
}

void sub_1B2D91ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiSolidRendererImageSource::estimateRenderMemory()
{
  return 0;
}

uint64_t LiSolidRendererImageSource::print(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"----- LiSolidRendererImageSource: scene graph -----\n", 52);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 752))(v6, a2, a3);
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Active camera\n", 14);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 112))(v7, a2, a3);
}

LiSolidUtils *LiSolidRendererImageSource::adjustCasterLocalToWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  LiSolidUtils *result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  float v22;
  double *v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  char v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t i;
  _OWORD *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[49];
  double v56[6];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  double v78;
  _BYTE v79[48];
  int v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  double v84[3];
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;

  result = (LiSolidUtils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if (!result)
    return result;
  LiSolidUtils::getBoundsOfGeometry(result, &v85);
  v11 = (v85 + v86) * 0.5;
  v12 = (v87 + v88) * 0.5;
  v13 = (v89 + v90) * 0.5;
  v84[0] = v11;
  v84[1] = v12;
  v84[2] = v13;
  v14 = (v86 - v85) * (v86 - v85) + (v88 - v87) * (v88 - v87);
  v15 = (v90 - v89) * (v90 - v89);
  v16 = (v12 - v87) * 0.5;
  memset(v79, 0, sizeof(v79));
  v80 = 4;
  v81 = 0u;
  v82 = 0u;
  v83 = 0;
  PCMatrix44Tmpl<double>::getTransformation((__int128 *)a4, (uint64_t)v79);
  v17 = *(double *)(a4 + 24);
  v18 = *(double *)(a4 + 56);
  v19 = *(double *)(a4 + 88);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 32) = xmmword_1B304EEE0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  v77 = 0uLL;
  v78 = 0.0;
  if (*(_DWORD *)(a2 + 656) == 1)
  {
    LODWORD(v20) = fabs(*(double *)(a2 + 632)) > fabs(*(double *)(a2 + 624));
    if (fabs(*(double *)(a2 + 640)) <= fabs(*(double *)(a2 + 624 + 8 * v20)))
      v20 = v20;
    else
      v20 = 2;
    v21 = 1.0;
    if (*(double *)(a2 + 624 + 8 * v20) < 0.0)
      v21 = -1.0;
    v22 = v21;
    *((double *)&v77 + v20) = (float)-v22;
    v23 = (double *)(a4 + 32 * v20 + 24);
    if (v22 <= 0.0)
    {
      v67 = *(_QWORD *)&v85;
      *(double *)&v68 = v87;
      *((double *)&v68 + 1) = v89;
      v24 = *((double *)&v67 + v20);
      v25 = *v23;
      v26 = v24 < *v23;
    }
    else
    {
      v67 = *(_QWORD *)&v86;
      *(double *)&v68 = v88;
      *((double *)&v68 + 1) = v90;
      v24 = *((double *)&v67 + v20);
      v25 = *v23;
      v26 = *v23 < v24;
    }
    if (!v26)
      v24 = v25;
    v29 = 0;
    *v23 = v24;
    if ((v20 + 1) < 3)
      v31 = v20 + 1;
    else
      v31 = v20 - 2;
    v11 = v84[v31];
    v32 = v20 + 2;
    v33 = v20 - 1;
    if (v32 < 3)
      v33 = v32;
    v12 = v84[v33];
    goto LABEL_43;
  }
  v27 = *(double *)(a2 + 680);
  v28 = v89;
  if (v27 < v89)
  {
    v29 = 0;
    v77 = 0uLL;
    v78 = -1.0;
    v30 = v89 < v19;
LABEL_23:
    if (v30)
      v34 = v28;
    else
      v34 = v19;
    *(double *)(a4 + 88) = v34;
    goto LABEL_43;
  }
  v28 = v90;
  if (v27 > v90)
  {
    v29 = 0;
    v77 = 0uLL;
    v78 = 1.0;
    v30 = v19 < v90;
    goto LABEL_23;
  }
  v35 = *(double *)(a2 + 672);
  v36 = v87;
  if (v35 < v87)
  {
    v29 = 0;
    *((_QWORD *)&v77 + 1) = 0xBFF0000000000000;
    v37 = v87 < v18;
LABEL_31:
    if (v37)
      v38 = v36;
    else
      v38 = v18;
    *(double *)(a4 + 56) = v38;
    v12 = v13;
    goto LABEL_43;
  }
  v36 = v88;
  if (v35 > v88)
  {
    v29 = 0;
    *((_QWORD *)&v77 + 1) = 0x3FF0000000000000;
    v37 = v18 < v88;
    goto LABEL_31;
  }
  v39 = *(double *)(a2 + 664);
  v40 = v85;
  if (v39 < v85)
  {
    v29 = 0;
    v41 = 0xBFF0000000000000;
    v42 = v85 < v17;
LABEL_39:
    v78 = 0.0;
    if (v42)
      v17 = v40;
    v77 = v41;
    *(double *)(a4 + 24) = v17;
    v11 = v13;
    goto LABEL_43;
  }
  v40 = v86;
  if (v39 > v86)
  {
    v29 = 0;
    v41 = 0x3FF0000000000000;
    v42 = v17 < v86;
    goto LABEL_39;
  }
  *(double *)(a4 + 24) = v11;
  *(double *)(a4 + 56) = v12;
  v29 = 1;
  *(double *)(a4 + 88) = v13;
LABEL_43:
  v43 = v14 + v15;
  v76 = 0x3FF0000000000000;
  v73 = 0x3FF0000000000000;
  v70 = 0x3FF0000000000000;
  v66 = 0x3FF0000000000000;
  v67 = 0x3FF0000000000000;
  v68 = 0u;
  v69 = 0u;
  v71 = 0u;
  v72 = 0u;
  v74 = 0u;
  v75 = 0u;
  v63 = 0x3FF0000000000000;
  v60 = 0x3FF0000000000000;
  v57 = 0x3FF0000000000000;
  v58 = 0u;
  v59 = 0u;
  v61 = 0u;
  v62 = 0u;
  v64 = 0u;
  v65 = 0u;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v57, (float64x2_t)0, v16, 0.0);
  if ((v29 & 1) == 0)
  {
    v44 = *((double *)&v77 + 1) - v78 * 0.0;
    v45 = v78 * 0.0 - *(double *)&v77;
    v46 = *(double *)&v77 * 0.0 - *((double *)&v77 + 1) * 0.0;
    v47 = -acos(v78 + *((double *)&v77 + 1) * 0.0 + *(double *)&v77 * 0.0);
    v48 = sqrt(v44 * v44 + v45 * v45 + v46 * v46);
    if (v48 <= -0.000000100000001 || v48 >= 0.000000100000001)
    {
      v44 = v44 / v48;
      v45 = v45 / v48;
      v46 = v46 / v48;
    }
    v56[0] = v44;
    v56[1] = v45;
    v56[2] = v46;
    v56[3] = 1.0;
    PCMatrix44Tmpl<double>::rotate((uint64_t)&v67, v56, 0, v47);
  }
  v49 = sqrt(v43);
  PCMatrix44Tmpl<double>::operator*(a4, (__int128 *)&v57, (uint64_t)v55);
  result = (LiSolidUtils *)PCMatrix44Tmpl<double>::operator*((uint64_t)v55, (__int128 *)&v67, (uint64_t)v56);
  if (v56 != (double *)a4)
  {
    for (i = 0; i != 16; i += 4)
    {
      v51 = (_OWORD *)(a4 + i * 8);
      v52 = *(_OWORD *)&v56[i + 2];
      *v51 = *(_OWORD *)&v56[i];
      v51[1] = v52;
    }
  }
  *(_OWORD *)(a5 + 40) = v77;
  *(double *)(a5 + 56) = v78;
  v53 = *(_QWORD *)(a4 + 56);
  v54 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a5 + 24) = v53;
  *(_QWORD *)(a5 + 32) = v54;
  *a6 = v11 - v49 * 0.5;
  a6[1] = v12 - v49 * 0.5;
  a6[2] = v49;
  a6[3] = v49;
  return result;
}

uint64_t LiSolidRendererImageSource::handlesDepthOfField(LiSolidRendererImageSource *this)
{
  return 1;
}

uint64_t LiLightProperties::LiLightProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t v8;
  double v9;
  PC_Sp_counted_base *v10;
  PC_Sp_counted_base *v11;
  ProShade::ConstVector *v12;
  PCSharedCount v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  PCSharedCount v18[3];
  PCSharedCount v19;
  PCSharedCount v20[3];
  PCSharedCount v21;
  PCSharedCount v22[3];
  PCSharedCount v23;
  PCSharedCount v24[3];
  PCSharedCount v25;
  PCSharedCount v26;
  PCSharedCount v27[2];
  PCSharedCount v28;
  PCSharedCount v29[3];
  PCSharedCount v30;
  PCSharedCount v31;
  PCSharedCount v32;
  PC_Sp_counted_base *v33;
  PCSharedCount v34;
  PCSharedCount v35[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v37;
  PCSharedCount v38;
  char v39;
  PC_Sp_counted_base *v40;
  PCSharedCount v41[2];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = a5;
  v7 = (uint64_t *)(a1 + 32);
  ProShade::Vec3::Vec3((PCSharedCount *)(a1 + 32));
  ProShade::Vec3::Vec3((PCSharedCount *)(a1 + 64));
  ProShade::Vec3::Vec3((PCSharedCount *)(a1 + 96));
  ProShade::Selector_base::_select(a3 + 8, (const PCString *)7, &v31);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  var0 = v31.var0;
  PCSharedCount::PCSharedCount(&v37, &v32);
  PCSharedCount::~PCSharedCount(&v32);
  v8 = *(_QWORD *)(a1 + 16);
  ProShade::Selector_base::_select(a3 + 8, (const PCString *)3, &v26);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v29[2] = v26;
  PCSharedCount::PCSharedCount(&v30, v27);
  PCSharedCount::~PCSharedCount(v27);
  ProShade::operator*(&v31, v8 + 64, v29);
  ProShade::operator-(&v38, v35, &v31);
  ProShade::Vec3::operator=(v7, &v38);
  v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v41);
  v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v30);
  v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v7, (uint64_t)&v38);
  ProShade::Vec3::operator=((uint64_t *)(a1 + 64), &v38);
  v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v41);
  v9 = *(double *)(*(_QWORD *)a1 + 688);
  if (v9 <= -0.0000001 || v9 >= 0.0000001)
  {
    LiLightProperties::reflectedViewDir((LiLightProperties *)a1, &v38);
    v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    LOBYTE(v32.var0) = v39;
    v33 = v40;
    PCSharedCount::PCSharedCount(&v34, v41);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    LiLightProperties::lightAngle((const PCSharedCount **)a1, v29);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v40 = v33;
    PCSharedCount::PCSharedCount(v41, &v34);
    v10 = *(PC_Sp_counted_base **)(a1 + 80);
    v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v10;
    PCSharedCount::PCSharedCount(&v37, (const PCSharedCount *)(a1 + 88));
    ProShade::Func<ProShade::Func_cross>::eval((uint64_t)&v38, (uint64_t)v35, v22);
    v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v22, (uint64_t)v24);
    ProShade::Vec3::Vec3(&v26, v24);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v25);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v11 = *(PC_Sp_counted_base **)(a1 + 80);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v40 = v11;
    PCSharedCount::PCSharedCount(v41, (const PCSharedCount *)(a1 + 88));
    v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    var0 = v27[1].var0;
    PCSharedCount::PCSharedCount(&v37, &v28);
    ProShade::Func<ProShade::Func_cross>::eval((uint64_t)&v38, (uint64_t)v35, v22);
    v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    ProShade::Vec3::Vec3(v24, v22);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v31, a1 + 64, v20);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v40 = v20[2].var0;
    PCSharedCount::PCSharedCount(v41, &v21);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::eval((uint64_t)&v38, v22);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    ProShade::Float::Float(v35, v22);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v21);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v12, 0);
    v22[2].var0 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    ProShade::clamp(v35, v22, v29, &v38);
    ProShade::Float::operator=((uint64_t *)v35, &v38);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v40 = var0;
    PCSharedCount::PCSharedCount(v41, &v37);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::cos_traits>>::eval((uint64_t)&v38, v18);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    ProShade::operator*(v20, v18, a1 + 64);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v40 = var0;
    PCSharedCount::PCSharedCount(v41, &v37);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sin_traits>>::eval((uint64_t)&v38, v14);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    ProShade::operator*(v16, v14, v24);
    ProShade::operator+(v22, v20, v16);
    ProShade::Vec3::operator=((uint64_t *)(a1 + 96), v22);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v16[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v17);
    v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v15);
    v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v21);
    v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v19);
    v35[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v25);
    v26.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v28);
    ProShade::Func<ProShade::Func_normalize>::eval(a1 + 96, (uint64_t)&v38);
    ProShade::Vec3::operator=((uint64_t *)(a1 + 96), &v38);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v41);
    v29[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v30);
    v31.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
  }
  else
  {
    ProShade::VarT<ProShade::Node>::operator=(a1 + 96, (const PCSharedCount *)(a1 + 64));
  }
  return a1;
}

void sub_1B2D92A98(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 120) = v4 + 16;
  PCSharedCount::~PCSharedCount(v3 + 3);
  *(_QWORD *)(v5 - 216) = v4 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 192));
  *(_QWORD *)(v5 - 184) = v4 + 16;
  PCSharedCount::~PCSharedCount(v2);
  v1[12].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 15);
  v1[8].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 11);
  v1[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 7);
  _Unwind_Resume(a1);
}

void sub_1B2D92DEC()
{
  JUMPOUT(0x1B2D92D98);
}

void sub_1B2D92E00()
{
  JUMPOUT(0x1B2D92DB4);
}

void sub_1B2D92E08()
{
  JUMPOUT(0x1B2D92DCCLL);
}

void LiLightProperties::reflectedViewDir(LiLightProperties *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  ProShade::ConstVector *v5;
  _QWORD v6[3];
  PCSharedCount v7;
  void *v8;
  char v9;
  uint64_t v10;
  PCSharedCount v11;
  _QWORD v12[3];
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;
  PCSharedCount v16[3];
  PCSharedCount v17;
  PCSharedCount v18[3];
  PCSharedCount v19;
  _QWORD v20[3];
  PCSharedCount v21;
  _QWORD v22[3];
  PCSharedCount v23;
  _QWORD v24[3];
  PCSharedCount v25;

  v4 = *((_QWORD *)this + 2);
  v8 = &unk_1E6569AC8;
  v9 = *(_BYTE *)(v4 + 104);
  v10 = *(_QWORD *)(v4 + 112);
  PCSharedCount::PCSharedCount(&v11, (const PCSharedCount *)(v4 + 120));
  ProShade::Func<ProShade::Func_normalize>::eval(*((_QWORD *)this + 2) + 128, (uint64_t)v6);
  v20[0] = &unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 2);
  v20[2] = v5;
  PCSharedCount::PCSharedCount(&v21, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  ProShade::Func<ProShade::Func_dot>::eval((uint64_t)v6, (uint64_t)&v8, v18);
  ProShade::operator*(v22, v20, v18);
  ProShade::operator*(v24, v22, v6);
  ProShade::operator-(v12, &v8, v24);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v20[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v21);
  ProShade::operator-(v14, v12);
  ProShade::Func<ProShade::Func_normalize>::eval((uint64_t)v14, (uint64_t)v16);
  ProShade::Vec3::Vec3(a2, v16);
  v16[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
  v6[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v7);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v11);
}

void sub_1B2D92FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,PCSharedCount a24,uint64_t a25)
{
  PCSharedCount *v25;
  PCSharedCount *v26;
  uint64_t v27;

  a25 = v27 + 16;
  PCSharedCount::~PCSharedCount(v26 + 3);
  a21 = v27 + 16;
  PCSharedCount::~PCSharedCount(&a24);
  a17 = v27 + 16;
  PCSharedCount::~PCSharedCount(&a20);
  PCSharedCount::~PCSharedCount(&a12);
  a13 = v27 + 16;
  PCSharedCount::~PCSharedCount(v25);
  _Unwind_Resume(a1);
}

void LiLightProperties::lightAngle(const PCSharedCount **this@<X0>, PCSharedCount *a2@<X8>)
{
  ProShade::ConstVector *v4;
  int var0;
  const PCSharedCount *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  PCSharedCount *v9;
  const PCSharedCount *v10;
  PCSharedCount v11[3];
  PCSharedCount v12;
  PCSharedCount v13[3];
  PCSharedCount v14;
  void *v15;
  PCSharedCount v16;
  PCSharedCount v17;
  PCSharedCount v18[3];
  PCSharedCount v19;
  PCSharedCount v20[3];
  PCSharedCount v21;
  PCSharedCount v22[3];
  PCSharedCount v23;
  PCSharedCount v24[3];
  uint64_t v25;
  PCSharedCount v26[3];
  PCSharedCount v27;
  PCSharedCount v28[2];
  PCSharedCount v29;
  PCSharedCount v30;

  v26[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, 0.0);
  v26[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v27, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  var0 = (int)(*this)[82].var0;
  if ((var0 - 2) < 2)
  {
    ProShade::Func<ProShade::Func_length>::eval((uint64_t)(this + 4), v24);
    v6 = this[1];
    v15 = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v16, v6 + 18);
    ProShade::operator/(v18, &v15, v24);
    v13[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v7 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v7, 0);
    v13[2].var0 = (PC_Sp_counted_base *)v7;
    PCSharedCount::PCSharedCount(&v14, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
    v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v8 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v8, 1);
    v11[2].var0 = (PC_Sp_counted_base *)v8;
    PCSharedCount::PCSharedCount(&v12, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    ProShade::clamp(v18, v13, v11, v20);
    v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v29.var0 = v20[2].var0;
    PCSharedCount::PCSharedCount(&v30, &v21);
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::eval((uint64_t)v28, v22);
    v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v30);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v26, v22);
    v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v23);
    v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v21);
    v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v12);
    v13[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v14);
    v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v19);
    v15 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v17);
    v24[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v9 = (PCSharedCount *)&v25;
LABEL_5:
    PCSharedCount::~PCSharedCount(v9);
    goto LABEL_6;
  }
  if (var0 == 1)
  {
    v10 = this[1];
    v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v29, v10 + 18);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v26, v28);
    v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v9 = &v30;
    goto LABEL_5;
  }
LABEL_6:
  ProShade::Float::Float(a2, v26);
  v26[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
}

void sub_1B2D9338C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 112) = v3 + 16;
  PCSharedCount::~PCSharedCount(v2 + 3);
  *(_QWORD *)(v4 - 144) = v3 + 16;
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B2D934C8()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D934C0);
}

uint64_t *ProShade::Float::operator=(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  PCSharedCount v5;

  a1[2] = (uint64_t)a2[2].var0;
  v3 = a1 + 3;
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  ProShade::Float::checkType((ProShade::Float *)a1);
  return a1;
}

void sub_1B2D93544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void LiLightProperties::getAttenuation(LiLightProperties *this@<X0>, PCSharedCount *a2@<X8>)
{
  unsigned int v4;
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  const PCSharedCount *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  const PCSharedCount *v11;
  const PCSharedCount *v12;
  ProShade::ConstVector *v13;
  const PCSharedCount *v14;
  const PCSharedCount *v15;
  const PCSharedCount *v16;
  const PCSharedCount *v17;
  ProShade::ConstVector *v18;
  const PCSharedCount *v19;
  ProShade::ConstVector *v20;
  _QWORD v21[3];
  PCSharedCount v22;
  _QWORD v23[3];
  PCSharedCount v24;
  _QWORD v25[2];
  PCSharedCount v26;
  PCSharedCount v27;
  PCSharedCount v28[2];
  PCSharedCount v29;
  PCSharedCount v30;
  PCSharedCount v31[2];
  PCSharedCount v32;
  PCSharedCount v33;
  _QWORD v34[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v36;
  _QWORD v37[2];
  PCSharedCount v38;
  PCSharedCount v39;
  PCSharedCount v40;
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43;
  PCSharedCount v44[2];
  PC_Sp_counted_base *v45;
  PCSharedCount v46;
  PCSharedCount v47[2];
  PC_Sp_counted_base *v48;
  PCSharedCount v49;
  PCSharedCount v50[2];
  PC_Sp_counted_base *v51;
  PCSharedCount v52;
  PCSharedCount v53[3];
  PCSharedCount v54;
  void *v55;
  PC_Sp_counted_base *v56;
  PCSharedCount v57;
  void *v58;
  _BYTE v59[8];
  uint64_t v60;
  PCSharedCount v61;
  void *v62;
  char v63;
  uint64_t v64;
  PCSharedCount v65;
  PCSharedCount v66[2];
  PC_Sp_counted_base *v67;
  PCSharedCount v68;
  PCSharedCount v69;
  PCSharedCount v70;
  PC_Sp_counted_base *v71;
  PCSharedCount v72[2];

  v62 = &unk_1E6569AC8;
  v63 = *((_BYTE *)this + 40);
  v64 = *((_QWORD *)this + 6);
  PCSharedCount::PCSharedCount(&v65, (const PCSharedCount *)this + 7);
  v62 = &unk_1E65746B8;
  v58 = &unk_1E6569AC8;
  v59[0] = *((_BYTE *)this + 72);
  v60 = *((_QWORD *)this + 10);
  PCSharedCount::PCSharedCount(&v61, (const PCSharedCount *)this + 11);
  v58 = &unk_1E65746B8;
  v4 = *(_DWORD *)(*(_QWORD *)this + 656);
  if (v4 > 1)
  {
    v55 = &unk_1E6569AC8;
    v5 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v5, 0.00001);
    v56 = (PC_Sp_counted_base *)v5;
    PCSharedCount::PCSharedCount(&v57, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
    v50[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v6 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v6, 0.0);
    v51 = (PC_Sp_counted_base *)v6;
    PCSharedCount::PCSharedCount(&v52, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
    ProShade::Func<ProShade::Func_length>::eval((uint64_t)&v62, v44);
    v7 = (const PCSharedCount *)*((_QWORD *)this + 1);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v42, v7 + 91);
    ProShade::operator-(v47, v44, &v40);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v71 = v51;
    PCSharedCount::PCSharedCount(v72, &v52);
    v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v67 = v48;
    PCSharedCount::PCSharedCount(&v68, &v49);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v53);
    v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v72);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    v50[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v52);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v8 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v8, 1.0);
    v48 = (PC_Sp_counted_base *)v8;
    PCSharedCount::PCSharedCount(&v49, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 752, 0, &v69);
    v34[0] = &unk_1E6569AC8;
    var0 = v69.var0;
    PCSharedCount::PCSharedCount(&v36, &v70);
    PCSharedCount::~PCSharedCount(&v70);
    ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 752, (const PCString *)1, &v69);
    v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v29.var0 = v69.var0;
    PCSharedCount::PCSharedCount(&v30, &v70);
    PCSharedCount::~PCSharedCount(&v70);
    ProShade::operator*(v31, v28, v53);
    ProShade::operator+(v37, v34, v31);
    ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 752, (const PCString *)2, &v69);
    v21[0] = &unk_1E6569AC8;
    v21[2] = v69.var0;
    PCSharedCount::PCSharedCount(&v22, &v70);
    PCSharedCount::~PCSharedCount(&v70);
    ProShade::operator*(v23, v21, v53);
    ProShade::operator*(v25, v23, v53);
    ProShade::operator+(&v40, v37, v25);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v71 = v56;
    PCSharedCount::PCSharedCount(v72, &v57);
    v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v67 = v42.var0;
    PCSharedCount::PCSharedCount(&v68, &v43);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v44);
    v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v72);
    ProShade::operator/(v50, v47, v44);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v43);
    v25[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v27);
    v23[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v24);
    v21[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v22);
    v37[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v39);
    v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v33);
    v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v30);
    v34[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v36);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v9 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v9, 1.0);
    v45 = (PC_Sp_counted_base *)v9;
    PCSharedCount::PCSharedCount(&v46, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v71 = v51;
    PCSharedCount::PCSharedCount(v72, &v52);
    v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v67 = v45;
    PCSharedCount::PCSharedCount(&v68, &v46);
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::min_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v47);
    v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v68);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v72);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v50, v47);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v10 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v10, 1.0);
    v48 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v49, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    if (v4 == 3)
    {
      ProShade::Selector_base::_select((uint64_t)v59, (const PCString *)7, &v40);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = v40.var0;
      PCSharedCount::PCSharedCount(&v68, &v41);
      PCSharedCount::~PCSharedCount(&v41);
      ProShade::operator-(&v69, v66);
      v11 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v42, v11 + 83);
      ProShade::Func<ProShade::Func_dot>::eval((uint64_t)&v69, (uint64_t)&v40, v44);
      v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v43);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v12 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v37[0] = &unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v38, v12 + 79);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v71 = v38.var0;
      PCSharedCount::PCSharedCount(v72, &v39);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = v45;
      PCSharedCount::PCSharedCount(&v68, &v46);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v69, (uint64_t)v66, &v40);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      v37[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v39);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v13 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v13, 1.0);
      v32.var0 = (PC_Sp_counted_base *)v13;
      PCSharedCount::PCSharedCount(&v33, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
      v14 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v25[0] = &unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v26, v14 + 75);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v71 = v26.var0;
      PCSharedCount::PCSharedCount(v72, &v27);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = v45;
      PCSharedCount::PCSharedCount(&v68, &v46);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v28);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      ProShade::operator-(v34, v31, v28);
      ProShade::operator*(v37, v34, &v40);
      v34[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v36);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v25[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v27);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v15 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v29, v15 + 75);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v71 = v29.var0;
      PCSharedCount::PCSharedCount(v72, &v30);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = v45;
      PCSharedCount::PCSharedCount(&v68, &v46);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::step_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v31);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      ProShade::operator*(v34, v31, &v40);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v16 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v32, v16 + 79);
      v17 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v29, v17 + 75);
      ProShade::smoothstep(v31, v28, v44, v66);
      ProShade::operator*(&v69, v37, v66);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v37, &v69);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v18 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v18, 0.0);
      v29.var0 = (PC_Sp_counted_base *)v18;
      PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v71 = v29.var0;
      PCSharedCount::PCSharedCount(v72, &v30);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = v38.var0;
      PCSharedCount::PCSharedCount(&v68, &v39);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v31);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v37, v31);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v19 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v29, v19 + 87);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v71 = v45;
      PCSharedCount::PCSharedCount(v72, &v46);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = v29.var0;
      PCSharedCount::PCSharedCount(&v68, &v30);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v69, (uint64_t)v66, (uint64_t)v31);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      ProShade::operator*(&v69, v34, v31);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v34, &v69);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v20 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v20, 0.0);
      v29.var0 = (PC_Sp_counted_base *)v20;
      PCSharedCount::PCSharedCount(&v30, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v71 = v29.var0;
      PCSharedCount::PCSharedCount(v72, &v30);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v67 = var0;
      PCSharedCount::PCSharedCount(&v68, &v36);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::max_traits>>::eval((uint64_t)&v69, (uint64_t)v66, v31);
      v66[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v34, v31);
      v31[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v33);
      v28[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v30);
      ProShade::operator+(&v69, v37, v34);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v47, &v69);
      v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v72);
      v34[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v36);
      v37[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v39);
      v40.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v43);
      v44[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
    }
    ProShade::operator*(&v69, v50, v47);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v50, &v69);
    v69.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v72);
    ProShade::Float::Float(a2, v50);
    v47[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v49);
    v50[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v52);
    v53[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v54);
    v55 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v57);
  }
  else
  {
    ProShade::Float::Float(a2, 1.0);
  }
  v58 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v61);
  v62 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v65);
}

void sub_1B2D94348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,PCSharedCount a61)
{
  PCSharedCount *v61;
  PCSharedCount *v62;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)(v64 - 120) = v63 + 16;
  PCSharedCount::~PCSharedCount(v61 + 3);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a37);
  a38 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a41);
  a42 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a45);
  a46 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a49);
  a50 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v62);
  a54 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a57);
  a58 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&a61);
  *(_QWORD *)(v64 - 248) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a13);
  *(_QWORD *)(v64 - 216) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a11);
  *(_QWORD *)(v64 - 184) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a12);
  _Unwind_Resume(a1);
}

void sub_1B2D94A28()
{
  JUMPOUT(0x1B2D94908);
}

void sub_1B2D94A30()
{
  JUMPOUT(0x1B2D94924);
}

void sub_1B2D94A38()
{
  JUMPOUT(0x1B2D94938);
}

void sub_1B2D94A44()
{
  JUMPOUT(0x1B2D9493CLL);
}

void sub_1B2D94A4C()
{
  JUMPOUT(0x1B2D94958);
}

void sub_1B2D94A54()
{
  JUMPOUT(0x1B2D94974);
}

void sub_1B2D94A5C()
{
  JUMPOUT(0x1B2D94988);
}

void sub_1B2D94A68()
{
  JUMPOUT(0x1B2D9498CLL);
}

void sub_1B2D94A70()
{
  JUMPOUT(0x1B2D949A0);
}

void sub_1B2D94A7C()
{
  JUMPOUT(0x1B2D949A4);
}

void sub_1B2D94A84()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D949BCLL);
}

void sub_1B2D94AA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  PCSharedCount *v54;
  PCSharedCount *v55;
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)(v57 - 152) = v56 + 16;
  PCSharedCount::~PCSharedCount(v55);
  *(_QWORD *)(v57 - 120) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v54);
  a50 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a53);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a45);
  a46 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a49);
  a54 = &unk_1E6569AC8;
  JUMPOUT(0x1B2D949D4);
}

void sub_1B2D94B5C()
{
  JUMPOUT(0x1B2D94B44);
}

void sub_1B2D94B64()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D949D8);
}

void sub_1B2D94B84()
{
  uint64_t v0;

  MEMORY[0x1B5E29170](v0, 0x10B1C40A585CD1CLL);
  JUMPOUT(0x1B2D949F0);
}

void sub_1B2D94BA4()
{
  JUMPOUT(0x1B2D949F0);
}

void sub_1B2D94BB4()
{
  JUMPOUT(0x1B2D947C8);
}

void sub_1B2D94BC0()
{
  JUMPOUT(0x1B2D949BCLL);
}

void sub_1B2D94BC8()
{
  JUMPOUT(0x1B2D949D8);
}

void sub_1B2D94BD8()
{
  JUMPOUT(0x1B2D94A08);
}

void LiLightProperties::getLightColor(LiLightProperties *this@<X0>, PCSharedCount *a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  const PCSharedCount *v12;
  int v13;
  const PCSharedCount *v14;
  const PCSharedCount *v15;
  const PCSharedCount *v16;
  const PCSharedCount *v17;
  const PCSharedCount *v18;
  uint64_t v19;
  ProShade::ConstVector *v20;
  uint64_t v21;
  ProShade::ConstVector *v22;
  ProShade::ConstVector *v23;
  PCSharedCount *v24;
  const PCSharedCount *v25;
  const PCSharedCount *v26;
  uint64_t v27;
  const PCSharedCount *v28;
  const PCSharedCount *v29;
  ProShade::ConstVector *v30;
  ProShade::ConstVector *v31;
  PCSharedCount *v32;
  _QWORD v33[3];
  PCSharedCount v34;
  PCSharedCount v35;
  PCSharedCount v36[2];
  PCSharedCount v37;
  PCSharedCount v38;
  PCSharedCount v39;
  PC_Sp_counted_base *v40;
  PCSharedCount v41;
  PCSharedCount v42;
  PCSharedCount v43;
  PC_Sp_counted_base *v44;
  PCSharedCount v45;
  PCSharedCount v46;
  PCSharedCount v47[2];
  PCSharedCount v48;
  _QWORD v49[2];
  PC_Sp_counted_base *v50;
  PCSharedCount v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54;
  PCSharedCount v55;
  _QWORD v56[2];
  PCSharedCount v57;
  PCSharedCount v58;
  PCSharedCount v59;
  uint64_t v60;
  PCSharedCount v61;
  PCSharedCount v62;
  PCSharedCount v63;
  uint64_t v64;
  PCSharedCount v65;
  PCSharedCount v66;
  PCSharedCount v67[2];
  PCSharedCount v68;
  PCSharedCount v69;
  PCSharedCount v70[2];
  PCSharedCount v71;
  PCSharedCount v72;
  PCSharedCount v73[2];
  PC_Sp_counted_base *v74;
  PCSharedCount v75;
  void *v76;
  _QWORD v77[2];
  PCSharedCount v78;
  void *v79;
  char v80;
  PC_Sp_counted_base *v81;
  PCSharedCount v82;
  void *v83;
  char v84;
  PC_Sp_counted_base *v85;
  PCSharedCount v86;
  void *v87;
  _BYTE v88[8];
  PC_Sp_counted_base *var0;
  PCSharedCount v90;
  PCSharedCount v91;
  PCSharedCount v92;
  PCSharedCount v93;
  PCSharedCount v94;
  PCSharedCount v95;
  PCSharedCount v96;
  PCSharedCount v97;
  PCSharedCount v98;
  PCSharedCount v99;
  PCSharedCount v100[2];

  ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 72, (const PCString *)7, &v95);
  v87 = &unk_1E6569AC8;
  var0 = v95.var0;
  PCSharedCount::PCSharedCount(&v90, &v96);
  PCSharedCount::~PCSharedCount(&v96);
  if (*((_BYTE *)this + 24)
    && (*(_DWORD *)(*(_QWORD *)this + 656) - 1) <= 2
    && *(_BYTE *)(*(_QWORD *)this + 721))
  {
    if ((v4 & 1) == 0
    {
      loadSampleShadowJitter();
      LiLightProperties::getLightColor(void)::sampleShadowJitter = (uint64_t)&loadSampleShadowJitter(void)::_sampleShadow;
    }
    v32 = a2;
    if ((v5 & 1) == 0
    {
      loadSampleCubeShadowJitter();
      LiLightProperties::getLightColor(void)::sampleCubeShadowJitter = (uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter;
    }
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v6 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v6, 0.001953125);
    v93.var0 = (PC_Sp_counted_base *)v6;
    PCSharedCount::PCSharedCount(&v94, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
    v79 = &unk_1E6569AC8;
    v7 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v7, 0.001953125);
    v81 = (PC_Sp_counted_base *)v7;
    PCSharedCount::PCSharedCount(&v82, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
    ProShade::Vec2::Vec2(&v95, &v91, &v79);
    v83 = &unk_1E6569AC8;
    v84 = (char)v96.var0;
    v85 = v97.var0;
    PCSharedCount::PCSharedCount(&v86, &v98);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v79 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v8 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v8, 0);
    v93.var0 = (PC_Sp_counted_base *)v8;
    PCSharedCount::PCSharedCount(&v94, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    v76 = &unk_1E6569AC8;
    v9 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v9, 0);
    v77[1] = v9;
    PCSharedCount::PCSharedCount(&v78, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    v73[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v10 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v10, 0);
    v74 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v75, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v70[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v11 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v11, 1);
    v71.var0 = (PC_Sp_counted_base *)v11;
    PCSharedCount::PCSharedCount(&v72, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    ProShade::Vec4::Vec4(&v95, &v91, &v76, v73, v70);
    v79 = &unk_1E6569AC8;
    v80 = (char)v96.var0;
    v81 = v97.var0;
    PCSharedCount::PCSharedCount(&v82, &v98);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v70[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v72);
    v73[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v75);
    v76 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v78);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v12 = (const PCSharedCount *)*((_QWORD *)this + 1);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v97, v12 + 59);
    ProShade::operator*(&v76, &v95, &v79);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    ProShade::Selector_base::_select((uint64_t)v77, (const PCString *)7, &v95);
    v73[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v74 = v95.var0;
    PCSharedCount::PCSharedCount(&v75, &v96);
    PCSharedCount::~PCSharedCount(&v96);
    v13 = *(_DWORD *)(*(_QWORD *)this + 656);
    if (v13 == 2)
    {
      if (!*(_BYTE *)LiPerContext<BOOL,LiPerContextValue_Traits<BOOL>,LiOpenGLContextGetter>::get(*((_QWORD *)this + 1) + 776))
      {
        v25 = (const PCSharedCount *)*((_QWORD *)this + 1);
        v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v97, v25 + 34);
        v26 = *(const PCSharedCount **)(*((_QWORD *)this + 1) + 352);
        v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v93, v26 + 2);
        v27 = LiLightProperties::getLightColor(void)::sampleCubeShadowJitter;
        v28 = (const PCSharedCount *)*((_QWORD *)this + 1);
        v63.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v65, v28 + 67);
        ProShade::operator*(v67, &v63, &v83);
        v29 = (const PCSharedCount *)*((_QWORD *)this + 1);
        v59.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v61, v29 + 63);
        ProShade::External::operator()(v27, v73, v67, &v59, &v95, &v91, v70);
        v59.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v62);
        v67[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v69);
        v63.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v66);
        v59.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v30 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v30, 1.0);
        v61.var0 = (PC_Sp_counted_base *)v30;
        PCSharedCount::PCSharedCount(&v62, (ProShade::ConstVector *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
        ProShade::operator-(&v63, &v59, v70);
        ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 560, (const PCString *)0x19, &v52);
        v56[0] = &unk_1E6569AC8;
        v57.var0 = v52.var0;
        PCSharedCount::PCSharedCount(&v58, &v53);
        PCSharedCount::~PCSharedCount(&v53);
        ProShade::operator*(v67, &v63, v56);
        v56[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v58);
        v63.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v66);
        v59.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v62);
        v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v31 = (ProShade::ConstVector *)operator new();
        ProShade::ConstVector::ConstVector(v31, 1.0);
        v54.var0 = (PC_Sp_counted_base *)v31;
        PCSharedCount::PCSharedCount(&v55, (ProShade::ConstVector *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
        ProShade::operator-(v56, &v52, v67);
        ProShade::Selector_base::_select((uint64_t)v88, (const PCString *)0x1D, &v46);
        v49[0] = &unk_1E6569AC8;
        v50 = v46.var0;
        PCSharedCount::PCSharedCount(&v51, v47);
        PCSharedCount::~PCSharedCount(v47);
        ProShade::operator*(&v59, v56, v49);
        ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 560, (const PCString *)0x1D, &v38);
        v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v44 = v38.var0;
        PCSharedCount::PCSharedCount(&v45, &v39);
        PCSharedCount::~PCSharedCount(&v39);
        ProShade::operator*(&v46, v67, &v42);
        ProShade::operator+(&v63, &v59, &v46);
        ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v87, &v63);
        v63.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v66);
        v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v48);
        v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v45);
        v59.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v62);
        v49[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v51);
        v56[0] = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v58);
        v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v55);
        v67[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v69);
        v70[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v72);
        v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v94);
        v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v24 = &v95;
        goto LABEL_16;
      }
      v13 = *(_DWORD *)(*(_QWORD *)this + 656);
    }
    if ((v13 | 2) != 3
      && !*(_BYTE *)LiPerContext<BOOL,LiPerContextValue_Traits<BOOL>,LiOpenGLContextGetter>::get(*((_QWORD *)this + 1) + 776))
    {
      goto LABEL_17;
    }
    v14 = (const PCSharedCount *)*((_QWORD *)this + 1);
    v70[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v71, v14 + 22);
    v15 = *(const PCSharedCount **)(*((_QWORD *)this + 1) + 352);
    v67[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v68, v15 + 2);
    v16 = (const PCSharedCount *)*((_QWORD *)this + 1);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v97, v16 + 63);
    ProShade::operator*(&v63, &v95, &v76);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    ProShade::Selector_base::_select((uint64_t)&v64, (const PCString *)3, &v91);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v97.var0 = v91.var0;
    PCSharedCount::PCSharedCount(&v98, &v92);
    PCSharedCount::~PCSharedCount(&v92);
    ProShade::operator/(&v59, &v63, &v95);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v17 = (const PCSharedCount *)*((_QWORD *)this + 1);
    v56[0] = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v57, v17 + 67);
    if (!*(_BYTE *)(*(_QWORD *)this + 752) && *(double *)(*(_QWORD *)this + 744) > 0.0)
    {
      v18 = (const PCSharedCount *)*((_QWORD *)this + 1);
      v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v54, v18 + 67);
      v19 = *((_QWORD *)this + 1);
      ProShade::Selector_base::_select((uint64_t)&v60, (const PCString *)4, &v46);
      v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v93.var0 = v46.var0;
      PCSharedCount::PCSharedCount(&v94, v47);
      PCSharedCount::~PCSharedCount(v47);
      ProShade::Sampler::operator()(v19 + 360, (uint64_t)&v91, &v95);
      ProShade::Selector_base::_select((uint64_t)&v96, 0, &v46);
      v49[0] = &unk_1E6569AC8;
      v50 = v46.var0;
      PCSharedCount::PCSharedCount(&v51, v47);
      PCSharedCount::~PCSharedCount(v47);
      v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v98);
      v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v94);
      v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v20 = (ProShade::ConstVector *)operator new();
      ProShade::ConstVector::ConstVector(v20, 2.0);
      v40 = (PC_Sp_counted_base *)v20;
      PCSharedCount::PCSharedCount(&v41, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
      v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v97.var0 = v50;
      PCSharedCount::PCSharedCount(&v98, &v51);
      v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      v93.var0 = (PC_Sp_counted_base *)v20;
      PCSharedCount::PCSharedCount(&v94, &v41);
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::pow_traits>>::eval(&v95, (uint64_t)&v91, (uint64_t)&v42);
      v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v94);
      v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v98);
      ProShade::operator*(&v46, &v52, &v42);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v56, &v46);
      v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v48);
      v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v45);
      v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v41);
      v49[0] = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v51);
      v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v55);
    }
    v21 = LiLightProperties::getLightColor(void)::sampleShadowJitter;
    ProShade::Selector_base::_select((uint64_t)&v60, (const PCString *)7, &v52);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v93.var0 = v52.var0;
    PCSharedCount::PCSharedCount(&v94, &v53);
    PCSharedCount::~PCSharedCount(&v53);
    ProShade::operator*(&v52, v56, &v83);
    ProShade::External::operator()(v21, &v91, &v52, v70, v67, &v95);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v49[0] = &unk_1E6569AC8;
    v22 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v22, 1.0);
    v50 = (PC_Sp_counted_base *)v22;
    PCSharedCount::PCSharedCount(&v51, (ProShade::ConstVector *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)));
    ProShade::operator-(&v52, v49, &v95);
    ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 560, (const PCString *)0x19, &v42);
    v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v47[1] = v42;
    PCSharedCount::PCSharedCount(&v48, &v43);
    PCSharedCount::~PCSharedCount(&v43);
    ProShade::operator*(&v91, &v52, &v46);
    v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v49[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v51);
    v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v23 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v23, 1.0);
    v44 = (PC_Sp_counted_base *)v23;
    PCSharedCount::PCSharedCount(&v45, (ProShade::ConstVector *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
    ProShade::operator-(&v46, &v42, &v91);
    ProShade::Selector_base::_select((uint64_t)v88, (const PCString *)0x1D, &v35);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v40 = v35.var0;
    PCSharedCount::PCSharedCount(&v41, v36);
    PCSharedCount::~PCSharedCount(v36);
    ProShade::operator*(v49, &v46, &v38);
    ProShade::Selector_base::_select(*((_QWORD *)this + 1) + 560, (const PCString *)0x1D, &v99);
    v33[0] = &unk_1E6569AC8;
    v33[2] = v99.var0;
    PCSharedCount::PCSharedCount(&v34, v100);
    PCSharedCount::~PCSharedCount(v100);
    ProShade::operator*(&v35, &v91, v33);
    ProShade::operator+(&v52, v49, &v35);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v87, &v52);
    v52.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v55);
    v35.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v37);
    v33[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v34);
    v49[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v51);
    v38.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v41);
    v46.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v48);
    v42.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v45);
    v91.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v94);
    v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v98);
    v56[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v58);
    v59.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v62);
    v63.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v66);
    v67[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v69);
    v70[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v24 = v70;
LABEL_16:
    PCSharedCount::~PCSharedCount(v24 + 3);
LABEL_17:
    v73[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v75);
    v76 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v78);
    v79 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v82);
    v83 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v86);
    a2 = v32;
  }
  v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(v96.var0) = v88[0];
  v97.var0 = var0;
  PCSharedCount::PCSharedCount(&v98, &v90);
  ProShade::Vec3::Vec3(a2, &v95);
  v95.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v98);
  v87 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v90);
}

void sub_1B2D95B40(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 200) = v2 + 16;
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B2D96308()
{
  JUMPOUT(0x1B2D962E0);
}

void sub_1B2D96324()
{
  JUMPOUT(0x1B2D962F0);
}

void sub_1B2D96344()
{
  JUMPOUT(0x1B2D962FCLL);
}

void loadSampleShadowJitter(void)
{
  unsigned __int8 v0;
  PCString v1;
  PCString v2;
  PCString v3;
  PCString v4;
  PCString v5;
  PCSharedCount v6;
  PCSharedCount v7;

  {
    ProShade::External::External((PCSharedCount *)&loadSampleShadowJitter(void)::_sampleShadow);
    __cxa_atexit((void (*)(void *))ProShade::External::~External, &loadSampleShadowJitter(void)::_sampleShadow, &dword_1B2737000);
  }
  LiLightInfo::loadShadowSnippet(&v6);
  PCString::PCString(&v5, "sampleShadowJitter");
  ProShade::External::define((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, &v6, &v5, 3, 1);
  PCString::~PCString(&v5);
  PCString::PCString(&v4, "shadowCoord");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 3, &v4);
  PCString::~PCString(&v4);
  PCString::PCString(&v3, "texPerPixel");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 2, &v3);
  PCString::~PCString(&v3);
  PCString::PCString(&v2, "shadowMap");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 9, &v2);
  PCString::~PCString(&v2);
  PCString::PCString(&v1, "noiseMap");
  ProShade::External::addArgument((uint64_t)&loadSampleShadowJitter(void)::_sampleShadow, 3, 9, &v1);
  PCString::~PCString(&v1);
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B2D964D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,PCString a23)
{
  _Unwind_Resume(a1);
}

void loadSampleCubeShadowJitter(void)
{
  unsigned __int8 v0;
  PCString v1;
  PCString v2;
  PCString v3;
  PCString v4;
  PCString v5;
  PCString v6;
  PCSharedCount v7;
  PCSharedCount v8;

  if ((v0 & 1) == 0
  {
    ProShade::External::External((PCSharedCount *)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter);
    __cxa_atexit((void (*)(void *))ProShade::External::~External, &loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, &dword_1B2737000);
  }
  LiLightInfo::loadShadowSnippet(&v7);
  PCString::PCString(&v6, "sampleCubeShadowJitter");
  ProShade::External::define((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, &v7, &v6, 3, 1);
  PCString::~PCString(&v6);
  PCString::PCString(&v5, "shadowCoord");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 3, &v5);
  PCString::~PCString(&v5);
  PCString::PCString(&v4, "blurRadius");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 2, &v4);
  PCString::~PCString(&v4);
  PCString::PCString(&v3, "lightProjectionMatrix");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 7, &v3);
  PCString::~PCString(&v3);
  PCString::PCString(&v2, "shadowMap");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 13, &v2);
  PCString::~PCString(&v2);
  PCString::PCString(&v1, "noiseMap");
  ProShade::External::addArgument((uint64_t)&loadSampleCubeShadowJitter(void)::_sampleCubeShadowJitter, 3, 9, &v1);
  PCString::~PCString(&v1);
  PCSharedCount::~PCSharedCount(&v8);
}

void sub_1B2D966F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,PCString a23)
{
  _Unwind_Resume(a1);
}

uint64_t LiPerContext<BOOL,LiPerContextValue_Traits<BOOL>,LiOpenGLContextGetter>::get(uint64_t a1)
{
  os_unfair_lock_s *v2;
  LiGLState *v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t *v7;

  v2 = (os_unfair_lock_s *)(a1 + 24);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 24));
  v6[1] = 0;
  v6[0] = LiGLState::getCurrentContext(v3);
  v4 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::find<LiOpenGLContextGetter::C>(a1, v6);
  if (a1 + 8 == v4)
  {
    v7 = v6;
    v4 = (uint64_t)std::__tree<std::__value_type<LiOpenGLContextGetter::C,BOOL>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,BOOL>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,BOOL>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>((uint64_t **)a1, v6, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  }
  PCSpinLock::unlock(v2);
  return v4 + 48;
}

void sub_1B2D96800(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  PCSpinLock::unlock(v1);
  _Unwind_Resume(a1);
}

void LiShadowGenMaterial::makeProgram(PCSharedCount *a1@<X8>)
{
  ProShade::Program *v4;
  ProShade::ConstVector *v5;
  ProShade::ConstVector *v6;
  ProShade::ConstVector *v7;
  ProShade::ConstVector *v8;
  ProShade::ConstVector *v9;
  ProShade::ConstVector *v10;
  ProShade::ConstVector *v11;
  ProShade::ConstVector *v12;
  ProShade::ConstVector *v13;
  ProShade::ConstVector *v14;
  ProShade::ConstVector *v15;
  ProShade::ConstVector *v16;
  ProShade::ConstVector *v17;
  ProShade::ConstVector *v18;
  ProShade::ConstVector *v19;
  ProShade::ConstVector *v20;
  ProShade::ConstVector *v21;
  _QWORD v22[3];
  PCSharedCount v23;
  _QWORD v24[3];
  PCSharedCount v25;
  _QWORD v26[3];
  PCSharedCount v27;
  _QWORD v28[3];
  PCSharedCount v29;
  _QWORD v30[3];
  PCSharedCount v31;
  _QWORD v32[3];
  PCSharedCount v33;
  PCSharedCount v34[3];
  PCSharedCount v35;
  PCSharedCount v36[3];
  PCSharedCount v37;
  PCSharedCount v38[2];
  ProShade::ConstVector *v39;
  PCSharedCount v40;
  _QWORD v41[2];
  ProShade::ConstVector *v42;
  PCSharedCount v43;
  PCSharedCount v44;
  PCSharedCount v45;
  PC_Sp_counted_base *v46;
  PCSharedCount v47;
  void *v48;
  uint64_t v49;
  ProShade::ConstVector *v50;
  PCSharedCount v51;
  void *v52;
  char var0;
  void *v54;
  PCSharedCount v55;
  PCSharedCount v56;
  _BYTE v57[8];
  PC_Sp_counted_base *v58;
  PCSharedCount v59;
  PCSharedCount v60;
  PCSharedCount v61;
  PC_Sp_counted_base *v62;
  PCSharedCount v63[2];

  v4 = (ProShade::Program *)operator new();
  ProShade::Program::Program(v4);
  a1->var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a1 + 1, (ProShade::Program *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v52 = &unk_1E6569AC8;
  v5 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v5, 0);
  v54 = v5;
  PCSharedCount::PCSharedCount(&v55, (ProShade::ConstVector *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  v48 = &unk_1E6569AC8;
  v6 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v6, 0);
  v50 = v6;
  PCSharedCount::PCSharedCount(&v51, (ProShade::ConstVector *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v7, 0);
  v46 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(&v47, (ProShade::ConstVector *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v41[0] = &unk_1E6569AC8;
  v8 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v8, 1);
  v42 = v8;
  PCSharedCount::PCSharedCount(&v43, (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  ProShade::Vec4::Vec4(&v60, &v52, &v48, &v44, v41);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v57[0] = v61.var0;
  v58 = v62;
  PCSharedCount::PCSharedCount(&v59, v63);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v41[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v48 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v51);
  v52 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v55);
  v48 = &unk_1E6569AC8;
  v9 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v9, 0);
  v50 = v9;
  PCSharedCount::PCSharedCount(&v51, (ProShade::ConstVector *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v10 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v10, 0);
  v46 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v47, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  v41[0] = &unk_1E6569AC8;
  v11 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v11, 0);
  v42 = v11;
  PCSharedCount::PCSharedCount(&v43, (ProShade::ConstVector *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v12 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v12, 1);
  v39 = v12;
  PCSharedCount::PCSharedCount(&v40, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  ProShade::Vec4::Vec4(&v60, &v48, &v44, v41, v38);
  v52 = &unk_1E6569AC8;
  var0 = (char)v61.var0;
  v54 = v62;
  PCSharedCount::PCSharedCount(&v55, v63);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v48 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v51);
  ProShade::Selector_base::_select((uint64_t)v57, (const PCString *)3, &v44);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v62 = v44.var0;
  PCSharedCount::PCSharedCount(v63, &v45);
  PCSharedCount::~PCSharedCount(&v45);
  ProShade::operator/(&v48, &v56, &v60);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v13 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v13, 0.5);
  v46 = (PC_Sp_counted_base *)v13;
  PCSharedCount::PCSharedCount(&v47, (ProShade::ConstVector *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
  ProShade::operator*(&v60, &v44, &v48);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v48, &v60);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v41[0] = &unk_1E6569AC8;
  v14 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v14, 0.5);
  v42 = v14;
  PCSharedCount::PCSharedCount(&v43, (ProShade::ConstVector *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v15, 0.5);
  v39 = v15;
  PCSharedCount::PCSharedCount(&v40, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
  v36[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v16 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v16, 0.5);
  v36[2].var0 = (PC_Sp_counted_base *)v16;
  PCSharedCount::PCSharedCount(&v37, (ProShade::ConstVector *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v17 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v17, 0.0);
  v34[2].var0 = (PC_Sp_counted_base *)v17;
  PCSharedCount::PCSharedCount(&v35, (ProShade::ConstVector *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  ProShade::Vec4::Vec4(&v44, v41, v38, v36, v34);
  ProShade::operator+(&v60, &v48, &v44);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v48, &v60);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v35);
  v36[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  ProShade::Selector_base::_select((uint64_t)&v49, (const PCString *)2, &v60);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v46 = v60.var0;
  PCSharedCount::PCSharedCount(&v47, &v61);
  PCSharedCount::~PCSharedCount(&v61);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v18 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v18, 1.0);
  v62 = (PC_Sp_counted_base *)v18;
  PCSharedCount::PCSharedCount(v63, (ProShade::ConstVector *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
  ProShade::operator-(v41, &v60, &v44);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  ProShade::Func<ProShade::Func_dFdx>::eval((uint64_t)&v44, v38);
  ProShade::Func<ProShade::Func_dFdy>::eval((uint64_t)&v44, v36);
  ProShade::operator*(v30, v38, v38);
  ProShade::operator*(v28, v36, v36);
  ProShade::operator+(v32, v30, v28);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v62 = (PC_Sp_counted_base *)v32[2];
  PCSharedCount::PCSharedCount(v63, &v33);
  ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::sqrt_traits>>::eval((uint64_t)&v60, v34);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v28[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  v30[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v28[0] = &unk_1E6569AC8;
  v19 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v19, 4.0);
  v28[2] = v19;
  PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
  ProShade::operator*(v30, v28, v34);
  ProShade::operator*(&v60, v30, &v44);
  v22[0] = &unk_1E6569AC8;
  v20 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v20, 0.125);
  v22[2] = v20;
  PCSharedCount::PCSharedCount(&v23, (ProShade::ConstVector *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
  ProShade::operator*(v24, v22, v41);
  ProShade::operator*(v26, v24, v41);
  ProShade::operator+(v32, &v60, v26);
  v26[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v27);
  v24[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v25);
  v22[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v23);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v30[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v28[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v29);
  ProShade::operator+(&v60, &v44, v32);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v44, &v60);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v30[0] = &unk_1E6569AC8;
  v21 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v21, 1.0);
  v30[2] = v21;
  PCSharedCount::PCSharedCount(&v31, (ProShade::ConstVector *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  ProShade::Vec4::Vec4(&v60, &v44, &v44, &v44, v30);
  if (!a1->var0)
    throw_PCNullPointerException(1);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a1->var0 + 912, &v60);
  v60.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v63);
  v30[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v31);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v34[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v35);
  v36[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v37);
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  v41[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v43);
  v44.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v47);
  v48 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v51);
  if (!a1->var0)
    throw_PCNullPointerException(1);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a1->var0 + 272, &v56);
  v52 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v55);
  v56.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v59);
}

void sub_1B2D972D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,PCSharedCount a51)
{
  uint64_t v51;
  PCSharedCount *v52;
  PCSharedCount *v53;
  PCSharedCount *v54;
  uint64_t v55;

  PCSharedCount::~PCSharedCount(v54);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a35);
  a36 = v51 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a39);
  a40 = v51 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a43);
  a44 = v51 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a47);
  a48 = v51 + 16;
  PCSharedCount::~PCSharedCount(&a51);
  *(_QWORD *)(v55 - 248) = v51 + 16;
  PCSharedCount::~PCSharedCount(v53);
  *(_QWORD *)(v55 - 216) = v51 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v55 - 192));
  *(_QWORD *)(v55 - 184) = v51 + 16;
  PCSharedCount::~PCSharedCount(v52);
  *(_QWORD *)(v55 - 152) = v51 + 16;
  PCSharedCount::~PCSharedCount(a11);
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

void sub_1B2D97860()
{
  JUMPOUT(0x1B2D9780CLL);
}

void sub_1B2D97868()
{
  JUMPOUT(0x1B2D9781CLL);
}

void sub_1B2D978B8()
{
  JUMPOUT(0x1B2D97840);
}

void sub_1B2D97904()
{
  JUMPOUT(0x1B2D97850);
}

void LiShadowGenMaterial::getHash(LiShadowGenMaterial *this)
{
  _OWORD *v1;
  _OWORD *v2;
  int8x8_t v3[521];

  MEMORY[0x1E0C80A78](this);
  v2 = v1;
  v3[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v3);
  PCHashWriteStream::writeValue(v3, 123456);
  *v2 = *(_OWORD *)PCHashWriteStream::getHash(v3)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v3);
}

void sub_1B2D979A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void LiShadowGenMaterial::~LiShadowGenMaterial(LiShadowGenMaterial *this)
{
  uint64_t v1;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E6578A50);
  *(_QWORD *)(v1 + 664) = &off_1E65EB048;
  *(_BYTE *)(v1 + 680) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 672));
}

{
  uint64_t v1;

  LiMaterial::~LiMaterial(this, (PC_Sp_counted_base **)off_1E6578A50);
  *(_QWORD *)(v1 + 664) = &off_1E65EB048;
  *(_BYTE *)(v1 + 680) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 672));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiShadowGenMaterial::~LiShadowGenMaterial(LiShadowGenMaterial *this)
{
  uint64_t v1;

  LiMaterial::~LiMaterial((LiShadowGenMaterial *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (PC_Sp_counted_base **)off_1E6578A50);
  *(_QWORD *)(v1 + 664) = &off_1E65EB048;
  *(_BYTE *)(v1 + 680) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 672));
}

{
  PC_Sp_counted_base **v1;

  v1 = (PC_Sp_counted_base **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LiMaterial::~LiMaterial((LiMaterial *)v1, (PC_Sp_counted_base **)off_1E6578A50);
  v1[83] = (PC_Sp_counted_base *)&off_1E65EB048;
  *((_BYTE *)v1 + 680) = 0;
  PCWeakCount::~PCWeakCount(v1 + 84);
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *ProShade::Vec3::Vec3(PCSharedCount *this)
{
  PC_Sp_counted_base *v2;
  _QWORD v4[3];

  v2 = (PC_Sp_counted_base *)operator new();
  memset(v4, 0, sizeof(v4));
  ProShade::ConstVector::ConstVector((uint64_t)v2, (uint64_t)v4);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[2].var0 = v2;
  PCSharedCount::PCSharedCount(this + 3, (PCShared_base *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24)));
  this->var0 = (PC_Sp_counted_base *)&unk_1E65746B8;
  return this;
}

void sub_1B2D97B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D97D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6578DE0);
  *(_QWORD *)a1 = &unk_1E6578D08;
  *(_QWORD *)(a1 + 72) = &unk_1E6578DC0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D97E98(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4;
  const PCString *v5;
  const PCString *v6;
  void ***Serializer;
  const PCString *v8;
  int Size;
  int v10;
  int *v11;
  int v12;
  double *v13;
  long double v14;

  v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    Size = ProShade::shapeGetSize(a1[1], v8);
    v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        v11 = a1 + 4;
        do
        {
          v12 = *v11++;
          *(long double *)Serializer++ = acos((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      v13 = (double *)(a1 + 4);
      do
      {
        v14 = *v13++;
        *(long double *)Serializer++ = acos(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"acos doesn't apply to BOOL", v6);
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6578D08;
  *(_QWORD *)(a1 + 72) = &unk_1E6578DC0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6578E20;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6578ED8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6578D08;
  *(_QWORD *)(a1 + 72) = &unk_1E6578DC0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6578E20;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6578ED8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "acos");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D981C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1936679777;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D982E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "acos");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "acos");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D9857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6578DE0);
  *(_QWORD *)v2 = &unk_1E6578D08;
  *(_QWORD *)(v2 + 72) = &unk_1E6578DC0;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D986E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6578D08;
  *((_QWORD *)v1 + 9) = &unk_1E6578DC0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6578E20;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6578ED8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6578D08;
  *((_QWORD *)v1 + 9) = &unk_1E6578DC0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6578E20;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6578ED8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::acos_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6578DE0);
  *(_QWORD *)a1 = &unk_1E6578D08;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6578DC0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D989FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Float::Float(PCSharedCount *this, double a2)
{
  ProShade::ConstVector *v4;

  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, a2);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(this + 3, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  this->var0 = (PC_Sp_counted_base *)&unk_1E6576EF8;
  return this;
}

void sub_1B2D98AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::eval(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  void *v5;
  void *v6;
  const ProShade::Value *v7;
  PC_Sp_counted_base *v8;
  PCShared_base *v9;
  PCSharedCount *v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  OZChannelBase v14;
  _QWORD v15[3];
  PCSharedCount v16[16];

  v16[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    v6 = v5;
    ProShade::Value::Value(v15);
    ProShade::Value::Value(&v14);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v6 + 224))(v6, v15);
    ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>::eval((int *)v15, &v14);
    v8 = (PC_Sp_counted_base *)ProShade::Const::create((ProShade::Const *)&v14, v7);
    v12.var0 = v8;
    if (v8)
      v9 = (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    else
      v9 = 0;
    v10 = &v13;
    PCSharedCount::PCSharedCount(&v13, v9);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v12);
  }
  else
  {
    v15[0] = &unk_1E6569AC8;
    v15[2] = 0;
    v10 = v16;
    PCSharedCount::PCSharedCount(v16);
    v11 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::Func((uint64_t)v11, *(PCShared_base **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v11;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v15[0] = &unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(v10);
}

void sub_1B2D98C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  PCSharedCount *v32;

  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::Func(uint64_t a1, PCShared_base *a2)
{
  PCArray_base *v4;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6579058);
  *(_QWORD *)a1 = &unk_1E6578F80;
  *(_QWORD *)(a1 + 72) = &unk_1E6579038;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, 1, 3);
  if (*(int *)(a1 + 60) <= 0)
    PCArray_base::badIndex(v4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(*(_QWORD *)(a1 + 64) + 16), a2);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D98DCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>::eval(int *a1, OZChannelBase *a2)
{
  int v4;
  const PCString *v5;
  const PCString *v6;
  void ***Serializer;
  const PCString *v8;
  int Size;
  int v10;
  int *v11;
  int v12;
  double *v13;
  long double v14;

  v4 = *a1;
  if (*a1 > 1)
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)3, a1[1]);
    Serializer = OZChannelBase::getSerializer(a2);
    Size = ProShade::shapeGetSize(a1[1], v8);
    v10 = Size;
    if (v4 == 2)
    {
      if (Size >= 1)
      {
        v11 = a1 + 4;
        do
        {
          v12 = *v11++;
          *(long double *)Serializer++ = asin((double)v12);
          --v10;
        }
        while (v10);
      }
    }
    else if (Size >= 1)
    {
      v13 = (double *)(a1 + 4);
      do
      {
        v14 = *v13++;
        *(long double *)Serializer++ = asin(v14);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ProShade::Value::set((uint64_t)a2, (const PCString *)1, a1[1]);
    OZChannelBase::getSerializer(a2);
    if ((int)ProShade::shapeGetSize(a1[1], v5) >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"asin doesn't apply to BOOL", v6);
  }
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6578F80;
  *(_QWORD *)(a1 + 72) = &unk_1E6579038;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6579098;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6579150;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6578F80;
  *(_QWORD *)(a1 + 72) = &unk_1E6579038;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6579098;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6579150;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "asin");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D990FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 17, 0x8903763CuLL);
  v5[1] = v4 + 4;
  v5[2] = v4 + 5;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(unsigned int *)((char *)v6 + v4) = 1852404577;
  *((_BYTE *)v6 + v4 + 4) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D99214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "asin");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "asin");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D994B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6579058);
  *(_QWORD *)v2 = &unk_1E6578F80;
  *(_QWORD *)(v2 + 72) = &unk_1E6579038;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D99618(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>::eval(*(int **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6578F80;
  *((_QWORD *)v1 + 9) = &unk_1E6579038;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6579098;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6579150;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6578F80;
  *((_QWORD *)v1 + 9) = &unk_1E6579038;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6579098;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6579150;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_1<ProShade::asin_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6579058);
  *(_QWORD *)a1 = &unk_1E6578F80;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6579038;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D99930(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiSolidUtils::createRedTexture(PCWorkingColorVector *a1@<X8>)
{
  PCWorkingColorVector::PCWorkingColorVector(a1);
}

void LiSolidUtils::createColorTexture(LiSolidUtils *this@<X0>, ProGL::GL *a2@<X1>, int a3@<W2>, int a4@<W3>, HGGLBlendingInfo **a5@<X8>, int a6, int a7)
{
  LiSolidUtils::aux_createTexture(this, a2, a3, a4, 0x1908u, 0x1406u, 0, a5, a6, a7);
}

void LiSolidUtils::aux_createTexture(LiSolidUtils *this@<X0>, ProGL::GL *a2@<X1>, int a3@<W2>, int a4@<W3>, GLenum a5@<W4>, GLenum a6@<W5>, GLvoid *a7@<X6>, HGGLBlendingInfo **a8@<X8>, int a9, int a10)
{
  int v16;
  int VirtualScreen;
  GLuint Name;
  _QWORD v21[2];
  _BYTE v22[16];
  int v23;

  v16 = (int)a2;
  ProGL::GL::getPGLContextHandle(this, v21);
  ProGL::TextureDescription::TextureDescription((ProGL::TextureDescription *)v22, 0xDE1u, v16, a3, 0, a4, (const ProGL::ContextHandle *)v21);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v21);
  ProGL::GL::getPGLContextHandle(this, v21);
  VirtualScreen = ProGL::ContextHandle::getVirtualScreen((ProGL::ContextHandle *)v21);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v21);
  v23 = VirtualScreen;
  ProGL::createTextureFromPool(this, (ProGL::GL *)v22, (uint64_t)a8);
  glActiveTexture(0x84C0u);
  Name = ProGL::TextureHandle::getName(a8);
  glBindTexture(0xDE1u, Name);
  glEnable(0xDE1u);
  glTexParameteri(0xDE1u, 0x2800u, 9729);
  glTexParameteri(0xDE1u, 0x2801u, 9729);
  glTexParameteri(0xDE1u, 0x2802u, 33071);
  glTexParameteri(0xDE1u, 0x2803u, 33071);
  ProGL::TextureHandle::texImage2D((OZChannelBase **)a8, this, 0xDE1u, 0, a4, v16, a3, 0, a5, a6, a7);
  glBindTexture(0xDE1u, 0);
  glDisable(0xDE1u);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v22);
}

void sub_1B2D99AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)va);
  _Unwind_Resume(a1);
}

void LiSolidUtils::createMultisampleColorBuffer(LiSolidUtils *this@<X0>, ProGL::GL *a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  ProGL::createMultisampleRenderbuffer(this, a2, 0x1908u, a3, a4, a5);
}

uint64_t LiSolidUtils::getBoundsOfGeometry@<X0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[8];
  _BYTE v23[8];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *((_OWORD *)a3 + 1) = xmmword_1B304F270;
  *((_OWORD *)a3 + 2) = xmmword_1B304F270;
  *(_OWORD *)a3 = xmmword_1B304F270;
  LiSceneIterator<LiSolid,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v23, a1);
  while (1)
  {
    v5 = v24;
    if (!(v24 ? LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next : 0))
      break;
    v22[4] = v29;
    v22[5] = v30;
    v22[6] = v31;
    v22[7] = v32;
    v22[0] = v25;
    v22[1] = v26;
    v22[2] = v27;
    v22[3] = v28;
    PCMatrix44Tmpl<double>::leftMult((uint64_t)v22, a2);
    v20 = xmmword_1B304F270;
    v21 = xmmword_1B304F270;
    v19 = xmmword_1B304F270;
    (*(void (**)(uint64_t, __int128 *, _OWORD *))(*(_QWORD *)v5 + 80))(v5, &v19, v22);
    v7 = *a3;
    v8 = a3[1];
    if (*a3 <= v8 && (v10 = a3[2], v9 = a3[3], v10 <= v9) && (v12 = a3[4], v11 = a3[5], v12 <= v11))
    {
      if (*(double *)&v19 <= *((double *)&v19 + 1))
      {
        v14 = v20;
        if (*(double *)&v20 <= *((double *)&v20 + 1))
        {
          v15 = v21;
          if (*(double *)&v21 <= *((double *)&v21 + 1))
          {
            if (v7 >= *(double *)&v19)
              v7 = *(double *)&v19;
            if (v8 <= *((double *)&v19 + 1))
              v8 = *((double *)&v19 + 1);
            *a3 = v7;
            a3[1] = v8;
            if (v10 >= *(double *)&v14)
              v16 = *(double *)&v14;
            else
              v16 = v10;
            if (v9 <= *((double *)&v14 + 1))
              v9 = *((double *)&v14 + 1);
            a3[2] = v16;
            a3[3] = v9;
            if (v12 >= *(double *)&v15)
              v17 = *(double *)&v15;
            else
              v17 = v12;
            if (v11 <= *((double *)&v15 + 1))
              v11 = *((double *)&v15 + 1);
            a3[4] = v17;
            a3[5] = v11;
          }
        }
      }
    }
    else
    {
      v13 = v20;
      *(_OWORD *)a3 = v19;
      *((_OWORD *)a3 + 1) = v13;
      *((_OWORD *)a3 + 2) = v21;
    }
    LiSceneIterator<LiSolid,LiSceneIteratorAlways>::operator++((uint64_t)v23);
  }
  return LiSceneIterator<LiSolid,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v23);
}

void sub_1B2D99CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  LiSceneIterator<LiSolid,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t LiSceneIterator<LiSolid,LiSceneIteratorAlways>::operator++(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(a1 + 8))
  {
    do
    {
      LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next(a1);
      v2 = *(const void **)(a1 + 8);
    }
    while (v2
  }
  return a1;
}

uint64_t LiSolidUtils::getBoundsOfGeometry@<X0>(LiSolidUtils *this@<X0>, double *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v7 = 0x3FF0000000000000;
  v4 = 0x3FF0000000000000;
  v5 = 0u;
  v6 = 0u;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  return LiSolidUtils::getBoundsOfGeometry((uint64_t)this, (double *)&v4, a2);
}

uint64_t LiSolidUtils::anyTransparencyInScene(uint64_t this, LiSceneObject *a2)
{
  const void *v2;
  LiMaterial *v3;
  double Alpha;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  LiSolidUtils *v12;
  LiSceneObject *v13;
  float *v14;
  float *v15;
  float v16;

  if (this)
  {
    v2 = (const void *)this;
    if (v3)
    {
      Alpha = LiMaterial::getAlpha(v3);
      v7 = v6 * (Alpha * v5);
      if (v7 < 1.0 && fabs(v7 + -1.0) >= 0.0000001)
        return 2;
    }
    if (this)
    {
      v8 = this;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 136))(this);
      if (v9 < 1)
      {
LABEL_11:
        v14 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 248))(v8);
        if (*(_BYTE *)v14)
        {
          v15 = v14;
          this = 0;
          v16 = v15[5];
          if (v16 < 1.0 && fabsf(v16 + -1.0) >= 0.00001)
            return 2;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        v10 = v9;
        v11 = 0;
        while (1)
        {
          v12 = (LiSolidUtils *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 144))(v8, v11);
          this = LiSolidUtils::anyTransparencyInScene(v12, v13);
          if ((_DWORD)this)
            break;
          v11 = (v11 + 1);
          if (v10 == (_DWORD)v11)
            goto LABEL_11;
        }
      }
    }
  }
  return this;
}

void LiSolidUtils::drawRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(float *)(a2 + 4);
  LODWORD(v12) = *(_DWORD *)a2;
  *((float *)&v12 + 1) = v6;
  v7 = *(float *)(a2 + 12);
  *(float *)&v11 = *(float *)&v12 + *(float *)(a2 + 8);
  *((float *)&v11 + 1) = v6;
  LODWORD(v10) = v11;
  *((float *)&v10 + 1) = v6 + v7;
  LODWORD(v9) = v12;
  *((float *)&v9 + 1) = v6 + v7;
  v8 = *a4;
  LiSolidUtils::drawRect(a1, &v12, &v11, &v10, &v9, a6, &v8);
}

void LiSolidUtils::drawRect(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, _QWORD *a7)
{
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  GLuint buffers;
  __int128 data;
  uint64_t v19;
  float v20;
  int v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  buffers = 0;
  glGenBuffers(1, &buffers);
  if (buffers)
  {
    glBindBuffer(0x8892u, buffers);
    *(_QWORD *)&v12 = *a2;
    *((_QWORD *)&v12 + 1) = *a7;
    data = v12;
    v19 = *a3;
    v20 = 1.0 - *((float *)&v12 + 2);
    v21 = HIDWORD(v12);
    v22 = *a4;
    v23 = 1.0 - *((float *)&v12 + 2);
    v24 = 1.0 - *((float *)&v12 + 3);
    v25 = *a5;
    v26 = DWORD2(v12);
    v27 = 1.0 - *((float *)&v12 + 3);
    glBufferData(0x8892u, 64, &data, 0x88E4u);
  }
  else
  {
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Unable to generate VBO in ", 26);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSolidRendererUtils.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet((const std::locale *)&data, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale((std::locale *)&data);
    std::ostream::put();
    std::ostream::flush();
  }
}

void sub_1B2D9A0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createBumpMapFromHeightMap@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, float *a5@<X4>, HGCrop **a6@<X8>, double a7@<D0>)
{
  HGTextureWrap *v14;
  char *v15;
  HgcSolidRendererBumpMap *v16;
  float v17;
  HGCrop *v18;

  v14 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v14);
  (*(void (**)(HGTextureWrap *, _QWORD, _QWORD))(*(_QWORD *)v14 + 120))(v14, 0, *a1);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v14, (const char *)3, v15);
  v16 = (HgcSolidRendererBumpMap *)HGObject::operator new(0x1A0uLL);
  HgcSolidRendererBumpMap::HgcSolidRendererBumpMap(v16);
  *(_QWORD *)v16 = &unk_1E657F380;
  HGNode::SetInput((HGNode *)v16, 0, (HGNode *)v14);
  v17 = a7;
  (*(void (**)(HgcSolidRendererBumpMap *, _QWORD, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 0, v17, 0.0, 0.0, 0.0);
  (*(void (**)(HgcSolidRendererBumpMap *, uint64_t, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 1, (float)a4, 0.0, 0.0, 0.0);
  (*(void (**)(HgcSolidRendererBumpMap *, uint64_t, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 2, *a5, a5[1], a5[2], 0.0);
  v18 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v18);
  (*(void (**)(HGCrop *, _QWORD, HgcSolidRendererBumpMap *))(*(_QWORD *)v18 + 120))(v18, 0, v16);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v18 + 96))(v18, 0, 0.0, 0.0, (float)a2, (float)a3);
  *a6 = v18;
  (*(void (**)(HgcSolidRendererBumpMap *))(*(_QWORD *)v16 + 24))(v16);
  return (*(uint64_t (**)(HGTextureWrap *))(*(_QWORD *)v14 + 24))(v14);
}

void sub_1B2D9A268(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createBumpMapFromNormalMap@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, HgcNormalMapToBumpMap **a3@<X8>)
{
  HgcNormalMapToBumpMap *v6;
  uint64_t result;

  v6 = (HgcNormalMapToBumpMap *)HGObject::operator new(0x1A0uLL);
  HgcNormalMapToBumpMap::HgcNormalMapToBumpMap(v6);
  (*(void (**)(HgcNormalMapToBumpMap *, _QWORD, _QWORD))(*(_QWORD *)v6 + 120))(v6, 0, *a1);
  result = (*(uint64_t (**)(HgcNormalMapToBumpMap *, _QWORD, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 0, (float)a2, 0.0, 0.0, 0.0);
  *a3 = v6;
  return result;
}

void sub_1B2D9A378(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createLean1MapFromBumpMap@<X0>(_QWORD *a1@<X0>, HgcLean1 **a2@<X8>)
{
  HgcLean1 *v4;
  uint64_t result;

  v4 = (HgcLean1 *)HGObject::operator new(0x1A0uLL);
  HgcLean1::HgcLean1(v4);
  result = (*(uint64_t (**)(HgcLean1 *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
  *a2 = v4;
  return result;
}

void sub_1B2D9A3FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidUtils::createLean2MapFromBumpMap@<X0>(_QWORD *a1@<X0>, HgcLean2 **a2@<X8>)
{
  HgcLean2 *v4;
  uint64_t result;

  v4 = (HgcLean2 *)HGObject::operator new(0x1A0uLL);
  HgcLean2::HgcLean2(v4);
  result = (*(uint64_t (**)(HgcLean2 *, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, 0, *a1);
  *a2 = v4;
  return result;
}

void sub_1B2D9A480(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void LiSolidUtils::depthBlur(LiSolidUtils *this, ProGL::GL *a2, const LiSolidDofInfo *a3, unsigned int a4, GLsizei width, GLsizei height)
{
  unsigned __int8 v7;
  int i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE v12[56];
  _BYTE v13[8];
  std::__shared_weak_count *v14;

  glViewport(0, 0, width, height);
  glDisable(0xB71u);
  glDisable(0xBE2u);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v13);
  if ((v7 & 1) == 0
  {
    ProGL::makeProgramHandle<LiSolidUtils::CirclesOfConfusionProgram>(&LiSolidUtils::depthBlur(ProGL::GL &,LiSolidDofInfo const&,unsigned int,unsigned int,int,int)::circlesHandle);
    __cxa_atexit((void (*)(void *))ProGL::ContextHandle::~ContextHandle, &LiSolidUtils::depthBlur(ProGL::GL &,LiSolidDofInfo const&,unsigned int,unsigned int,int,int)::circlesHandle, &dword_1B2737000);
  }
  ProGL::UseProgramSentry::UseProgramSentry((ProGL::UseProgramSentry *)v12, this, (const ProGL::ProgramHandle *)&LiSolidUtils::depthBlur(ProGL::GL &,LiSolidDofInfo const&,unsigned int,unsigned int,int,int)::circlesHandle);
  ProGL::ProgramHandle::getProgram<LiSolidUtils::CirclesOfConfusionProgram>((os_unfair_lock_s **)&LiSolidUtils::depthBlur(ProGL::GL &,LiSolidDofInfo const&,unsigned int,unsigned int,int,int)::circlesHandle, this);
  ProGL::UseProgramSentry::~UseProgramSentry((ProGL::UseProgramSentry *)v12);
  glBindFramebuffer(0x8D40u, 0);
  for (i = 0; i != -6; --i)
  {
    glActiveTexture(i + 33989);
    glBindTexture(0xDE1u, 0);
  }
  glEnable(0xB71u);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B2D9A5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void ProGL::makeProgramHandle<LiSolidUtils::CirclesOfConfusionProgram>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E65792B0;
  std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>,void>(&v12, (uint64_t)v2);
  v3 = operator new();
  ProGL::Private::ProgramHandleImpl::ProgramHandleImpl(v3, &v12, 1000);
  std::shared_ptr<ProGL::Private::ProgramHandleImpl>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramHandleImpl,void>(&v10, v3);
  ProGL::GL::getPGLContextHandle(&v10, a1);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B2D9A740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *ProGL::ProgramHandle::getProgram<LiSolidUtils::CirclesOfConfusionProgram>(os_unfair_lock_s **a1, ProGL::GL *a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  ProGL::Private::ProgramHandleImpl::getProgram(*a1, a2, &lpsrc);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

uint64_t LiSolidUtils::getGLRenderer(LiSolidUtils *this, ProGL::GL *a2)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN12LiSolidUtils13getGLRendererERN5ProGL2GLE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = this;
  if (LiSolidUtils::getGLRenderer(ProGL::GL &)::predicate != -1)
    dispatch_once(&LiSolidUtils::getGLRenderer(ProGL::GL &)::predicate, block);
  return LiSolidUtils::getGLRenderer(ProGL::GL &)::renderer;
}

void ___ZN12LiSolidUtils13getGLRendererERN5ProGL2GLE_block_invoke()
{
  char *String;
  void **v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  void **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void **v11;
  char *v12;
  int v14;
  uint64_t v15;
  void **v16;
  char *v17;
  uint64_t v19;
  void **v20;
  char *v21;
  void **v23;
  char *v24;
  void **v26;
  uint64_t v27;
  unsigned __int8 v28;

  String = (char *)glGetString(0x1F01u);
  if (String)
  {
    v1 = (void **)&v26;
    std::string::basic_string[abi:ne180100]<0>(&v26, String);
    v2 = v28;
    v3 = v28;
    v5 = v26;
    v4 = v27;
    if ((v28 & 0x80u) == 0)
      v6 = (char *)&v26 + v28;
    else
      v6 = (char *)v26 + v27;
    if ((v28 & 0x80u) == 0)
      v7 = (char *)&v26;
    else
      v7 = (char *)v26;
    if (v7 != v6)
    {
      do
      {
        *v7 = __tolower(*v7);
        ++v7;
      }
      while (v7 != v6);
      v2 = v28;
      v5 = v26;
      v4 = v27;
      v3 = v28;
    }
    if ((v3 & 0x80u) == 0)
      v8 = v2;
    else
      v8 = v4;
    if ((v3 & 0x80u) != 0)
      v1 = v5;
    v9 = (char *)v1 + v8;
    if (v8 > 5)
    {
      v10 = v8;
      v11 = v1;
      do
      {
        v12 = (char *)memchr(v11, 110, v10 - 5);
        if (!v12)
          break;
        if (*(_DWORD *)v12 == 1684633198 && *((_WORD *)v12 + 2) == 24937)
        {
          if (v12 == v9 || v12 - (char *)v1 == -1)
            break;
          v14 = 2;
LABEL_62:
          LiSolidUtils::getGLRenderer(ProGL::GL &)::renderer = v14;
          goto LABEL_63;
        }
        v11 = (void **)(v12 + 1);
        v10 = v9 - (char *)v11;
      }
      while (v9 - (char *)v11 > 5);
    }
    if (v8 >= 5)
    {
      v15 = v8;
      v16 = v1;
      do
      {
        v17 = (char *)memchr(v16, 105, v15 - 4);
        if (!v17)
          break;
        if (*(_DWORD *)v17 == 1702129257 && v17[4] == 108)
        {
          if (v17 != v9 && v17 - (char *)v1 != -1)
          {
            v14 = 1;
            goto LABEL_62;
          }
          break;
        }
        v16 = (void **)(v17 + 1);
        v15 = v9 - (char *)v16;
      }
      while (v9 - (char *)v16 >= 5);
    }
    if (v8 >= 3)
    {
      v19 = v8;
      v20 = v1;
      do
      {
        v21 = (char *)memchr(v20, 97, v19 - 2);
        if (!v21)
          break;
        if (*(_WORD *)v21 == 28001 && v21[2] == 100)
        {
          if (v21 != v9 && v21 - (char *)v1 != -1)
          {
LABEL_61:
            v14 = 3;
            goto LABEL_62;
          }
          break;
        }
        v20 = (void **)(v21 + 1);
        v19 = v9 - (char *)v20;
      }
      while (v9 - (char *)v20 >= 3);
      v23 = v1;
      do
      {
        v24 = (char *)memchr(v23, 97, v8 - 2);
        if (!v24)
          break;
        if (*(_WORD *)v24 == 29793 && v24[2] == 105)
        {
          if (v24 == v9 || v24 - (char *)v1 == -1)
            break;
          goto LABEL_61;
        }
        v23 = (void **)(v24 + 1);
        v8 = v9 - (char *)v23;
      }
      while (v9 - (char *)v23 >= 3);
    }
LABEL_63:
    if ((v3 & 0x80) != 0)
      operator delete(v5);
  }
}

void sub_1B2D9AAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LiSceneIterator<LiSolid,LiSceneIteratorAlways>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  const void *v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E6579210;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      break;
    }
    LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next(a1);
  }
  return a1;
}

void sub_1B2D9ABB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiSolid,LiSceneIteratorAlways>::next(uint64_t a1)
{
  const void *v2;
  PCArray_base *v3;
  PCArray_base *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  uint64_t j;
  _OWORD *v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  signed int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (v4 = v3,
          v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(_QWORD *)v3 + 136))(v3),
          (_DWORD)v3))
    {
      v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5)
        v6 = (2 * (v5 + 1)) | 1;
      else
        v6 = *(_DWORD *)(a1 + 24);
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      v7 = *(_QWORD *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(_QWORD *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 136) = 0;
      v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        v9 = 0;
        v10 = a1 + 40;
        v11 = v8;
        do
        {
          for (i = 0; i != 32; i += 8)
            *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      v13 = (*(uint64_t (**)(PCArray_base *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
      *(_QWORD *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (__int128 *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (j = 0; j != 8; j += 2)
        {
          v16 = (_OWORD *)(a1 + 40 + j * 16);
          v14 = v34[j];
          v17 = v34[j + 1];
          *v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0)
            PCArray_base::badIndex(v3);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 32);
          v22 = (uint64_t *)(v21 + 144 * v20);
          v23 = *v22;
          v25 = *((_DWORD *)v22 + 2);
          v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) - 1))
            break;
          v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26)
            v27 = *(_DWORD *)(a1 + 24);
          else
            v27 = (2 * v26) | 1;
          v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          v18 = *(_DWORD *)(a1 + 28);
          if (!v18)
            goto LABEL_25;
        }
        ++*v24;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
        *(_QWORD *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (__int128 *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 120) = v29;
          v30 = v40;
          *(_OWORD *)(a1 + 136) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          v31 = v34[1];
          *v19 = v34[0];
          *(_OWORD *)(a1 + 56) = v31;
          *(_QWORD *)&v14 = v35;
          v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_25:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
        *(_QWORD *)&v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E6579210;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiSolid,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E6579210;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t LiSceneIterator<LiSolid,LiSceneIteratorAlways>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = &unk_1E6579210;
  v2 = a1 + 16;
  if (*(int *)(v2 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(v2 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

ProGL::Private::VariableBase *ProGL::Uniform<float>::Uniform(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  ProGL::Private::VariableBase *v5;

  v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(_QWORD *)v5 = &unk_1E6579248;
  *((_DWORD *)v5 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v5 + 3, a3);
  *((_DWORD *)a1 + 12) = -1;
  return a1;
}

void sub_1B2D9AFE4(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase *v1;

  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<float>::~Uniform(void **a1)
{
  ProGL::Uniform<float>::~Uniform(a1);
  JUMPOUT(0x1B5E29170);
}

void ProGL::Uniform<float>::upload(uint64_t a1, ProGL::Private *this)
{
  ProGL::Private::uploadUniform(this, *(_DWORD *)(a1 + 48), *(GLfloat *)(a1 + 16));
}

uint64_t ProGL::Uniform<float>::getString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"uniform ", 8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"float", 5);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)";\n", 2);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v15);
}

void sub_1B2D9B13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<float>::~Uniform(void **this)
{
  *this = &unk_1E6579248;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

void ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>::operator()()
{
  LiSolidUtils::CirclesOfConfusionProgram *v0;

  v0 = (LiSolidUtils::CirclesOfConfusionProgram *)operator new();
  LiSolidUtils::CirclesOfConfusionProgram::CirclesOfConfusionProgram(v0);
}

_QWORD *sub_1B2D9B1C0()
{
  _QWORD *v0;
  uint64_t v1;

  return std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<LiSolidUtils::CirclesOfConfusionProgram,void>(v0, v1);
}

void sub_1B2D9B1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B3C40CCE93B6BLL);
  _Unwind_Resume(a1);
}

void LiSolidUtils::CirclesOfConfusionProgram::CirclesOfConfusionProgram(LiSolidUtils::CirclesOfConfusionProgram *this)
{
  _QWORD *v2;

  ProGL::Program::Program(this);
  *v2 = &unk_1E65792F0;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "zBuffer");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 280), this, "dofNear");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 336), this, "dofFar");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 392), this, "farPlane");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 448), this, "aperture");
  ProGL::Uniform<float>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 504), this, "maxRadius");
  ProGL::Uniform<PCMatrix44Tmpl<float>>::Uniform((LiSolidUtils::CirclesOfConfusionProgram *)((char *)this + 560), this, "invProj");
  HGProgramDescriptor::SetFragmentFunctionName(this, "#version 120\n");
}

void sub_1B2D9B2E0()
{
  ProGL::Program *v0;

  ProGL::Program::setFragmentSource(v0, "float depthBufferToEyeZ( float z) { z = 2.0 * z - 1.0; vec4 vz = vec4( 0.0, 0.0, z, 1.0); vec4 tmp = invProj * vz;"
    " tmp = tmp / tmp.w; z = -tmp.z; return z; } void main() { vec4 result = vec4(0.0); vec2 uv = gl_TexCoord[0].st; floa"
    "t clipZ = texture2D( zBuffer, uv).x; float z = depthBufferToEyeZ( clipZ); if ((z < dofNear) || (z > dofFar)) { flo"
    "at diff; if (z < dofNear) { diff = dofNear - z; } else if (abs(clipZ) > 0.9999) { diff = 0.0; } else { diff = min( z"
    " - dofFar, farPlane - dofFar); } float r = (diff * aperture) / z; r = min(r, maxRadius); result = vec4( r, r, r, 1."
    "0); } gl_FragColor = result; }");
}

uint64_t sub_1B2D9B2F0()
{
  uint64_t v0;

  return v0;
}

void sub_1B2D9B30C(_Unwind_Exception *a1)
{
  ProGL::Program *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  ProGL::Uniform<float>::~Uniform(v7);
  ProGL::Uniform<float>::~Uniform(v6);
  ProGL::Uniform<float>::~Uniform(v5);
  ProGL::Uniform<float>::~Uniform(v4);
  ProGL::Uniform<float>::~Uniform(v3);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void LiSolidUtils::CirclesOfConfusionProgram::~CirclesOfConfusionProgram(void **this)
{
  void **v2;

  *this = &unk_1E65792F0;
  v2 = this + 28;
  ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(this + 70);
  ProGL::Uniform<float>::~Uniform(this + 63);
  ProGL::Uniform<float>::~Uniform(this + 56);
  ProGL::Uniform<float>::~Uniform(this + 49);
  ProGL::Uniform<float>::~Uniform(this + 42);
  ProGL::Uniform<float>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;

  *this = &unk_1E65792F0;
  v2 = this + 28;
  ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(this + 70);
  ProGL::Uniform<float>::~Uniform(this + 63);
  ProGL::Uniform<float>::~Uniform(this + 56);
  ProGL::Uniform<float>::~Uniform(this + 49);
  ProGL::Uniform<float>::~Uniform(this + 42);
  ProGL::Uniform<float>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
  JUMPOUT(0x1B5E29170);
}

ProGL::Private::VariableBase *ProGL::Uniform<PCMatrix44Tmpl<float>>::Uniform(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  ProGL::Private::VariableBase *v5;

  v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(_QWORD *)v5 = &unk_1E6579338;
  *((_DWORD *)v5 + 19) = 1065353216;
  *((_DWORD *)v5 + 14) = 1065353216;
  *((_DWORD *)v5 + 9) = 1065353216;
  *((_DWORD *)v5 + 4) = 1065353216;
  *(_QWORD *)((char *)v5 + 28) = 0;
  *(_QWORD *)((char *)v5 + 20) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_QWORD *)((char *)v5 + 68) = 0;
  *(_QWORD *)((char *)v5 + 60) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v5 + 10, a3);
  *((_DWORD *)a1 + 26) = -1;
  return a1;
}

void sub_1B2D9B4F8(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase *v1;

  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(void **a1)
{
  ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(a1);
  JUMPOUT(0x1B5E29170);
}

BOOL ProGL::Uniform<PCMatrix44Tmpl<float>>::prepare(uint64_t a1)
{
  LiImageSource *FactoryForSerialization;
  GLuint v3;
  const GLchar *v4;
  int UniformLocation;

  FactoryForSerialization = (LiImageSource *)OZFactoryBase::getFactoryForSerialization(a1);
  v3 = LiImageSource::imageSpace(FactoryForSerialization);
  v4 = (const GLchar *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v4 = *(const GLchar **)v4;
  UniformLocation = glGetUniformLocation(v3, v4);
  *(_DWORD *)(a1 + 104) = UniformLocation;
  return UniformLocation != -1;
}

void ProGL::Uniform<PCMatrix44Tmpl<float>>::upload(uint64_t a1, int a2)
{
  ProGL::Private::uploadUniform(a2, *(_DWORD *)(a1 + 104), (GLfloat *)(a1 + 16));
}

uint64_t ProGL::Uniform<PCMatrix44Tmpl<float>>::getString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"uniform ", 8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"mat4", 4);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  v7 = *(_QWORD *)(a1 + 80);
  v6 = a1 + 80;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)";\n", 2);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v15);
}

void sub_1B2D9B694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<PCMatrix44Tmpl<float>>::~Uniform(void **this)
{
  *this = &unk_1E6579338;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

_QWORD *std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<LiSolidUtils::CirclesOfConfusionProgram,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E65793A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2D9B740(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<LiSolidUtils::CirclesOfConfusionProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,LiSolidUtils::CirclesOfConfusionProgram>,std::allocator<LiSolidUtils::CirclesOfConfusionProgram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<LiSolidUtils::CirclesOfConfusionProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,LiSolidUtils::CirclesOfConfusionProgram>,std::allocator<LiSolidUtils::CirclesOfConfusionProgram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6579418;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2D9B810(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>,std::allocator<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>,std::allocator<ProGL::Private::ProgramFactory0<LiSolidUtils::CirclesOfConfusionProgram>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void buildSCNLights(uint64_t a1@<X0>, CGColorSpace *a2@<X1>, CGColorSpace *a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD v35[16];
  PCColor v36;
  float v37;
  float v38;
  float v39;
  float v40[13];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*(int *)(a1 + 12) >= 1)
  {
    v7 = 0;
    v30 = *MEMORY[0x1E0CD5AC8];
    v29 = *MEMORY[0x1E0CD5AE8];
    v27 = *MEMORY[0x1E0CD5AD0];
    v28 = *MEMORY[0x1E0CD5AD8];
    v31 = (uint64_t)(a5 + 2);
    do
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = objc_alloc_init(MEMORY[0x1E0CD59D0]);
      objc_msgSend(v9, "setLight:", objc_alloc_init(MEMORY[0x1E0CD59B8]));
      switch(*(_DWORD *)(v8 + 944 * v7 + 656))
      {
        case 0:
          v10 = (void *)objc_msgSend(v9, "light");
          v11 = v30;
          goto LABEL_8;
        case 1:
          v10 = (void *)objc_msgSend(v9, "light");
          v11 = v27;
LABEL_8:
          objc_msgSend(v10, "setType:", v11);
          v12 = 1000.0;
          goto LABEL_9;
        case 2:
          objc_msgSend((id)objc_msgSend(v9, "light"), "setType:", v28);
          v12 = 406250.0;
          goto LABEL_9;
        case 3:
          objc_msgSend((id)objc_msgSend(v9, "light"), "setType:", v29);
          v13 = v8 + 944 * v7;
          objc_msgSend((id)objc_msgSend(v9, "light"), "setSpotInnerAngle:", (*(double *)(v13 + 696) + *(double *)(v13 + 696)) * 180.0 / 3.14159265);
          objc_msgSend((id)objc_msgSend(v9, "light"), "setSpotOuterAngle:", (*(double *)(v13 + 696) + *(double *)(v13 + 704) + *(double *)(v13 + 696) + *(double *)(v13 + 704))* 180.0/ 3.14159265);
          v12 = 406250.0;
LABEL_9:
          PCMatrix44Tmpl<double>::operator*(a4, (__int128 *)(v8 + 944 * v7 + 760), (uint64_t)&v36);
          for (i = 0; i != 4; ++i)
            *((float32x4_t *)&v37 + i) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v36.var0.var0 + 2 * i)), *(float64x2_t *)&v36.var0.var1[4 * i + 1]);
          *(float *)v35 = v37;
          *(float *)&v35[1] = v40[1];
          *(float *)&v35[2] = v40[5];
          *(float *)&v35[3] = v40[9];
          *(float *)&v35[4] = v38;
          *(float *)&v35[5] = v40[2];
          *(float *)&v35[6] = v40[6];
          *(float *)&v35[7] = v40[10];
          *(float *)&v35[8] = v39;
          *(float *)&v35[9] = v40[3];
          *(float *)&v35[10] = v40[7];
          *(float *)&v35[11] = v40[11];
          *(float *)&v35[12] = v40[0];
          *(float *)&v35[13] = v40[4];
          *(float *)&v35[14] = v40[8];
          *(float *)&v35[15] = v40[12];
          objc_msgSend(v9, "setTransform:", v35);
          PCColor::PCColor(&v36, *(float *)(v8 + 944 * v7 + 608), *(float *)(v8 + 944 * v7 + 612), *(float *)(v8 + 944 * v7 + 616), *(float *)(v8 + 944 * v7 + 620), a2);
          PCColor::getRGBA(&v36, &v37, &v38, &v39, v40, a3);
          objc_msgSend((id)objc_msgSend(v9, "light"), "setColor:", objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", v37, v38, v39, v40[0]));
          PCCFRef<CGColorSpace *>::~PCCFRef(&v36.var1._obj);
          objc_msgSend((id)objc_msgSend(v9, "light"), "setIntensity:", v12 * *(double *)(v8 + 944 * v7 + 648));
          v16 = a5[1];
          v15 = (unint64_t)a5[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = ((char *)v16 - (_BYTE *)*a5) >> 3;
            if ((unint64_t)(v18 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v19 = v15 - (_QWORD)*a5;
            v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v18 + 1))
              v20 = v18 + 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            if (v21)
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v31, v21);
            else
              v22 = 0;
            v23 = &v22[8 * v18];
            *(_QWORD *)v23 = v9;
            v17 = v23 + 8;
            v25 = (char *)*a5;
            v24 = (char *)a5[1];
            if (v24 != *a5)
            {
              do
              {
                v26 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *((_QWORD *)v23 - 1) = v26;
                v23 -= 8;
              }
              while (v24 != v25);
              v24 = (char *)*a5;
            }
            *a5 = v23;
            a5[1] = v17;
            a5[2] = &v22[8 * v21];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *v16 = v9;
            v17 = v16 + 1;
          }
          a5[1] = v17;
          break;
        default:
          fwrite("unknown light type\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);

          break;
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 12));
  }
}

void sub_1B2D9BCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiHeEdge::RenderTile(LiHeEdge *this, HGTile *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  char *v7;
  float32x4_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  char v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  _DWORD *v24;
  HGArrayData *v25;
  int v26;
  float v27;
  uint64_t v28;
  float v29;
  int v30;
  int v32;
  float v33;
  uint64_t v34;
  int v35;
  float v36;
  int v37;
  float v38;
  uint64_t v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  float v48;
  uint64_t i;
  float v51;
  float32x4_t *v52;
  float v53;
  int v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v62;
  uint64_t v63;
  int v64;
  float v66;
  HGArrayData *v67;
  int v68;
  HGArrayData *v69;
  int v70;
  HGArrayData *v71;
  int v72;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a2 + 3);
  v5 = *(_DWORD *)a2;
  v64 = *((_DWORD *)a2 + 1);
  v6 = v4 - v64;
  v7 = (char *)*((_QWORD *)a2 + 10);
  v8 = (float32x4_t *)*((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)this + 53);
  if (v9)
    v10 = *(_DWORD *)(v9 + 8);
  else
    v10 = 0;
  v11 = (v3 - v5);
  v62 = *((int *)a2 + 22);
  v63 = *((int *)a2 + 6);
  HGArray<int,(HGFormat)34>::HGArray((uint64_t)&v71);
  LODWORD(v12) = *((_DWORD *)this + 104);
  if ((int)v12 < 1)
  {
LABEL_26:
    if (v6 >= 1)
    {
      do
      {
        memcpy(v8, v7, 16 * (int)v11);
        v7 += 16 * v62;
        v8 += v63;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v13 = 0;
    v66 = (float)v3;
    v14 = (float)v5;
    v15 = 1;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
LABEL_6:
    v20 = (float *)(*((_QWORD *)this + 51) + 16 * v13 + 8);
    do
    {
      v21 = 0.0;
      if (v13 < v10)
        v21 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 53) + 16)
                       + *(int *)(*((_QWORD *)this + 53) + 4) * (uint64_t)(int)v13
                       + *((int *)this + 108))
            * 0.5;
      switch(*((_DWORD *)v20 - 2))
      {
        case 0:
          v19 = (float)v5;
          v18 = (float)v64;
          v17 = (float)v3;
          goto LABEL_12;
        case 1:
          v19 = (float)v3;
          v18 = (float)v64;
          v17 = (float)v5;
LABEL_12:
          v16 = (float)v4;
          break;
        case 2:
          v19 = (float)v5;
          v18 = (float)v4;
          v17 = (float)v3;
          goto LABEL_15;
        case 3:
          v19 = (float)v3;
          v18 = (float)v4;
          v17 = (float)v5;
LABEL_15:
          v16 = (float)v64;
          break;
        default:
          break;
      }
      v22 = *(v20 - 1);
      v23 = v20[1];
      if ((float)(v23 + (float)((float)((float)(v19 + 0.5) * v22) + (float)((float)(v18 + 0.5) * *v20))) < (float)-v21)
      {
        if (v6 >= 1)
        {
          do
          {
            bzero(v8, 16 * (int)v11);
            v8 += v63;
            --v6;
          }
          while (v6);
        }
        goto LABEL_74;
      }
      if ((float)(v23 + (float)((float)((float)(v17 + 0.5) * v22) + (float)((float)(v16 + 0.5) * *v20))) <= v21)
      {
        v24 = (_DWORD *)HGArray<int,(HGFormat)34>::append((HGArrayDataRef *)&v71);
        v15 = 0;
        *v24 = v13++;
        v12 = *((int *)this + 104);
        if (v13 < v12)
          goto LABEL_6;
        goto LABEL_29;
      }
      ++v13;
      v20 += 4;
    }
    while (v13 < (int)v12);
    if ((v15 & 1) != 0)
      goto LABEL_26;
LABEL_29:
    HGArray<float,(HGFormat)7>::HGArray((uint64_t)&v69);
    HGArray<float,(HGFormat)7>::HGArray((uint64_t)&v67);
    v25 = v71;
    if (v71)
    {
      v26 = 0;
      do
      {
        if (v26 >= *((_DWORD *)v25 + 2))
          break;
        v27 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 53) + 16)
                       + *(int *)(*((_QWORD *)this + 53) + 4)
                       * (uint64_t)*(int *)(*((_QWORD *)v25 + 2) + *((int *)v25 + 1) * (uint64_t)v26 + v72)
                       + *((int *)this + 108));
        *(float *)HGArray<float,(HGFormat)7>::append((uint64_t)&v67) = v27 * 0.5;
        v28 = *((_QWORD *)this + 55);
        v29 = 0.0;
        if (v28)
        {
          v30 = *(_DWORD *)(v28 + 8);
          if (v27 != 0.0 && v30 >= 2)
            v29 = (float)(v30 - 1) / v27;
        }
        *(float *)HGArray<float,(HGFormat)7>::append((uint64_t)&v69) = v29;
        ++v26;
        v25 = v71;
      }
      while (v71);
    }
    if (*((_DWORD *)a2 + 3) > *((_DWORD *)a2 + 1))
    {
      v32 = 0;
      v33 = v14 + 0.5;
      do
      {
        if ((int)v11 >= 1)
        {
          v34 = 0;
          do
          {
            v8[v34] = vmulq_f32(*(float32x4_t *)&v7[v34 * 16], *(float32x4_t *)*((_QWORD *)this + 57));
            ++v34;
          }
          while (v11 != v34);
        }
        v35 = 0;
        v36 = (float)(v32 + v64) + 0.5;
        if (!v25)
        {
LABEL_45:
          v37 = 0;
          goto LABEL_68;
        }
        while (1)
        {
          v37 = *((_DWORD *)v25 + 2);
LABEL_68:
          if (v35 >= v37)
            break;
          v38 = *(float *)(*((_QWORD *)v67 + 2) + *((int *)v67 + 1) * (uint64_t)v35 + v68);
          v39 = *(int *)(*((_QWORD *)v25 + 2) + *((int *)v25 + 1) * (uint64_t)v35 + v72);
          v40 = (float *)(*((_QWORD *)this + 51) + 16 * v39);
          v41 = v40[1];
          v42 = v36 * v40[2];
          v43 = v40[3];
          v44 = v43 + (float)((float)(v33 * v41) + v42);
          v45 = v43 + (float)((float)((float)(v66 + 0.5) * v41) + v42);
          if (v44 <= v38 || v45 <= v38)
          {
            v47 = *(float *)(*((_QWORD *)v69 + 2) + *((int *)v69 + 1) * (uint64_t)v35 + v70);
            v48 = -v38;
            if (v44 < (float)-v38 && v45 < v48)
              bzero(v8, 16 * (int)v11);
            if ((int)v11 >= 1)
            {
              for (i = 0; i != v11; ++i)
              {
                v51 = *(float *)(*((_QWORD *)this + 51) + 16 * v39 + 12)
                    + (float)((float)((float)(v33 + (float)(int)i) * *(float *)(*((_QWORD *)this + 51) + 16 * v39 + 4))
                            + (float)(v36 * *(float *)(*((_QWORD *)this + 51) + 16 * v39 + 8)));
                if (v51 >= v48)
                {
                  if (v51 <= v38)
                  {
                    v53 = v47 * (float)(v38 + v51);
                    v54 = (int)v53;
                    v55 = v53 - (float)(int)v53;
                    v56 = *((_QWORD *)this + 55);
                    v57 = *(_QWORD *)(v56 + 16);
                    v58 = *(int *)(v56 + 4);
                    v59 = *((int *)this + 112);
                    v60 = *(float *)(v57 + (int)v58 * (uint64_t)(int)v53 + v59);
                    if (v55 >= 0.000001)
                      v60 = v60 + (float)(v55 * (float)(*(float *)(v57 + v58 + (int)v58 * (uint64_t)v54 + v59) - v60));
                    v8[i] = vmulq_n_f32(v8[i], v60);
                  }
                }
                else
                {
                  v52 = &v8[i];
                  v52->i64[0] = 0;
                  v52->i64[1] = 0;
                }
              }
            }
          }
          ++v35;
          if (!v25)
            goto LABEL_45;
        }
        v8 += v63;
        ++v32;
        v7 += 16 * v62;
      }
      while (v32 < *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1));
    }
    if (v67)
      HGArrayData::Release((uint64_t)v67);
    if (v69)
      HGArrayData::Release((uint64_t)v69);
  }
LABEL_74:
  if (v71)
    HGArrayData::Release((uint64_t)v71);
  return 0;
}

void sub_1B2D9C280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HGArrayData *a14, uint64_t a15, HGArrayData *a16, uint64_t a17, HGArrayData *a18)
{
  if (a16)
    HGArrayData::Release((uint64_t)a16);
  if (a18)
    HGArrayData::Release((uint64_t)a18);
  _Unwind_Resume(exception_object);
}

unint64_t LiHeEdge::GetDOD(LiHeEdge *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  unint64_t v8;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (a3)
  {
    v6 = &HGRectNull;
LABEL_5:
    LODWORD(v4) = *(_DWORD *)v6;
    v8 = *((unsigned int *)v6 + 1);
    return v4 | (v8 << 32);
  }
  if (*((int *)this + 104) <= 2)
  {
    v6 = &HGRectInfinite;
    goto LABEL_5;
  }
  v11 = HLine::dilate(*((HLine **)this + 51), *(float *)(*(_QWORD *)(*((_QWORD *)this + 53) + 16) + *((int *)this + 108)));
  LODWORD(v15) = *((_DWORD *)this + 104);
  if ((int)v15 < 1)
  {
    v29 = 0.0;
    v28 = 0.0;
    v20 = 0.0;
    v17 = 0.0;
  }
  else
  {
    v16 = v12;
    v4 = HIDWORD(v11);
    v5 = HIDWORD(v12);
    v17 = 0.0;
    v18 = 1;
    v19 = 16;
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v23 = HIDWORD(v11);
    v24 = HIDWORD(v12);
    v25 = v12;
    do
    {
      v13 = v4;
      v14 = v5;
      v26 = v16;
      if (v18 != v15)
      {
        v13 = HLine::dilate((HLine *)(*((_QWORD *)this + 51) + v19), *(float *)(*(_QWORD *)(*((_QWORD *)this + 53) + 16)+ *(int *)(*((_QWORD *)this + 53) + 4) * (uint64_t)(int)v18+ *((int *)this + 108))) >> 32;
        v14 = HIDWORD(v26);
      }
      if (vabds_f32(*(float *)&v23 * *(float *)&v26, *(float *)&v25 * *(float *)&v13) < 0.0000001)
      {
        v26 = v25;
        v14 = v24;
        v13 = v23;
        v29 = v22;
        v28 = v21;
      }
      else
      {
        v27 = (float)(*(float *)&v23 * *(float *)&v26) - (float)(*(float *)&v25 * *(float *)&v13);
        v28 = (float)((float)(*(float *)&v25 * *(float *)&v14) - (float)(*(float *)&v24 * *(float *)&v26)) / v27;
        v29 = (float)((float)(*(float *)&v24 * *(float *)&v13) - (float)(*(float *)&v23 * *(float *)&v14)) / v27;
        if (v18 == 1)
        {
          v20 = (float)((float)(*(float *)&v24 * *(float *)&v13) - (float)(*(float *)&v23 * *(float *)&v14)) / v27;
          v17 = (float)((float)(*(float *)&v25 * *(float *)&v14) - (float)(*(float *)&v24 * *(float *)&v26)) / v27;
        }
        else
        {
          v17 = fmaxf(v28, v17);
          v28 = fminf(v28, v21);
          v20 = fmaxf(v29, v20);
          v29 = fminf(v29, v22);
        }
      }
      v15 = *((int *)this + 104);
      v19 += 16;
      v21 = v28;
      v22 = v29;
      v23 = v13;
      v24 = v14;
      v25 = v26;
    }
    while (v18++ < v15);
  }
  LODWORD(v4) = vcvtms_s32_f32(v28);
  LODWORD(v5) = vcvtms_s32_f32(v29);
  LODWORD(v13) = vcvtps_s32_f32(v17);
  LODWORD(v14) = vcvtps_s32_f32(v20);
  v31 = v13 | (v14 << 32);
  if ((*(int (**)(LiHeEdge *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) < 1)
  {
    v8 = v5;
  }
  else
  {
    v32 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v33 = HGRectGrow(v4 | (v5 << 32), v31, v32);
    v8 = HIDWORD(v33);
    LODWORD(v4) = v33;
  }
  return v4 | (v8 << 32);
}

unint64_t HLine::dilate(HLine *this, float a2)
{
  float v2;
  float v3;
  float v4;

  if (a2 == 0.0)
  {
    v2 = *((float *)this + 1);
  }
  else
  {
    v2 = *((float *)this + 1);
    v3 = *((float *)this + 2);
    if (fabsf(v3) >= 0.0000001)
    {
      if (fabsf(v2) >= 0.0000001)
      {
        v4 = -1.0;
        if (v3 >= 0.0)
          v4 = 1.0;
        v2 = -(float)((float)((float)-v2 / v3) * v4);
      }
      else
      {
        v2 = 0.0;
      }
    }
  }
  return (unint64_t)LODWORD(v2) << 32;
}

uint64_t LiHeEdge::GetROI(LiHeEdge *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v4 = *(_QWORD *)&a4.var0;
  if ((*(int (**)(LiHeEdge *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v5, v6);
  }
  return v4;
}

void LiHeEdge::LiHeEdge(LiHeEdge *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode3D::HGNode3D(this);
  *v2 = off_1E6579490;
  HGArray<float,(HGFormat)7>::HGArray((uint64_t)(v2 + 53));
  HGArray<float,(HGFormat)7>::HGArray((uint64_t)this + 440);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 57) = v3;
}

void sub_1B2D9C714(_Unwind_Exception *a1)
{
  HGMipmapLevel *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v4 = v3;
  if (*v4)
    HGArrayData::Release(*v4);
  if (*v2)
    HGArrayData::Release(*v2);
  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdge::~LiHeEdge(LiHeEdge *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E6579490;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C80451B5BE8);
  *((_QWORD *)this + 51) = 0;
  v3 = *((_QWORD *)this + 57);
  if (v3)
    MEMORY[0x1B5E29170](v3, 0x1000C40E0EAB150);
  v4 = *((_QWORD *)this + 55);
  if (v4)
    HGArrayData::Release(v4);
  v5 = *((_QWORD *)this + 53);
  if (v5)
    HGArrayData::Release(v5);
  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;

  LiHeEdge::~LiHeEdge(this);
  HGObject::operator delete(v1);
}

void LiHeEdge::setLines(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;

  if (*(_QWORD *)a2)
    v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  else
    v4 = 0;
  *(_DWORD *)(a1 + 416) = v4;
  v5 = *(_QWORD *)(a1 + 408);
  if (v5)
  {
    MEMORY[0x1B5E2914C](v5, 0x1000C80451B5BE8);
    v4 = *(_DWORD *)(a1 + 416);
  }
  v6 = operator new[]();
  if (v4)
  {
    v7 = 16 * v4;
    v8 = (_DWORD *)v6;
    do
    {
      *v8 = 0;
      v8 += 4;
      v7 -= 16;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 408) = v6;
  if (*(int *)(a1 + 416) >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (float *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + *(int *)(*(_QWORD *)a2 + 4) * (uint64_t)(int)v10 + a2[2]);
      HLine::setLine(*(_QWORD *)(a1 + 408) + v9, *v11, v11[1], v11[2]);
      ++v10;
      v9 += 16;
    }
    while (v10 < *(int *)(a1 + 416));
  }
}

float HLine::setLine(uint64_t a1, float a2, float a3, float a4)
{
  int v4;
  float v6;
  float result;

  if (a2 > 0.0 || a3 > 0.0)
  {
    if (a2 <= 0.0 || a3 >= 0.0)
    {
      if (a3 < 0.0 || a2 < 0.0)
        v4 = 2;
      else
        v4 = 3;
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)a1 = v4;
  v6 = 1.0 / sqrtf((float)(a2 * a2) + (float)(a3 * a3));
  *(float *)(a1 + 4) = a2 * v6;
  *(float *)(a1 + 8) = a3 * v6;
  result = a4 * v6;
  *(float *)(a1 + 12) = a4 * v6;
  return result;
}

uint64_t LiHeEdge::setThickness(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  result = *(_QWORD *)(a1 + 424);
  v5 = *(unsigned int **)a2;
  if (result != *(_QWORD *)a2)
  {
    if (result)
    {
      result = HGArrayData::Release(result);
      v5 = *(unsigned int **)a2;
    }
    *(_QWORD *)(a1 + 424) = v5;
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t LiHeEdge::setFilter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  result = *(_QWORD *)(a1 + 440);
  v5 = *(unsigned int **)a2;
  if (result != *(_QWORD *)a2)
  {
    if (result)
    {
      result = HGArrayData::Release(result);
      v5 = *(unsigned int **)a2;
    }
    *(_QWORD *)(a1 + 440) = v5;
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t LiHeEdge::SetParameter(LiHeEdge *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v8;
  int32x4_t v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (__n128 *)*((_QWORD *)this + 57);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == a3.n128_f32[0])
  {
    return 0;
  }
  v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *v8 = (__n128)v9;
  v8[1] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeEdge::GetParameter(LiHeEdge *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 57);
    *a3 = v3[4];
    a3[1] = v3[5];
    a3[2] = v3[6];
    result = v3[7];
    a3[3] = result;
  }
  return result;
}

uint64_t HGArray<float,(HGFormat)7>::append(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_DWORD *)(v2 + 8);
    v4 = v3 + 1;
    if (v3 < *(_DWORD *)(v2 + 12))
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    v4 = 1;
  }
  HGArray<int,(HGFormat)34>::reserve((uint64_t *)a1, 2 * v4);
LABEL_6:
  HGArray<float,(HGFormat)7>::resize((uint64_t *)a1, v4);
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v6 = *(_QWORD *)(v5 + 16)) != 0)
    return v6 + *(int *)(v5 + 4) * (uint64_t)v3 + *(int *)(a1 + 8);
  else
    return 0;
}

uint64_t LiHeEdgeMix::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v9;
  uint64_t v10;
  HGNode *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HGNode *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v10 = v9;
  v11 = HGRenderer::GetInput(a2, this, 1u);
  v12 = HGRenderer::GetDOD(a2, v11);
  v14 = v13;
  v15 = HGRenderer::GetInput(a2, this, 2u);
  v16 = HGRenderer::GetDOD(a2, v15);
  v18 = HGRectIntersection(DOD, v10, v16, v17);
  return HGRectUnion(v12, v14, v18, v19);
}

uint64_t LiHeEdgeMix::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  HGRenderer *v8;
  unsigned int v9;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v12;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 2)
  {
    v8 = a2;
    v9 = 0;
LABEL_6:
    Input = HGRenderer::GetInput(v8, this, v9);
    DOD = HGRenderer::GetDOD(a2, Input);
    return HGRectIntersection(v5, v4, DOD, v12);
  }
  if (a3 != 1)
  {
    if (a3)
      return 0;
    v8 = a2;
    v9 = 2;
    goto LABEL_6;
  }
  return v5;
}

uint64_t LiHeEdgeMix::BindTexture(LiHeEdgeMix *this, HGHandler *a2, uint64_t a3)
{
  HGHandler::TexCoord(a2, a3, 0, 0, 0);
  (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
  (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1, 1);
  if (a3 <= 1)
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
  return 0;
}

void LiHeEdgeMix::~LiHeEdgeMix(LiHeEdgeMix *this)
{
  void *v1;

  LiHeEdgeMixShader::~LiHeEdgeMixShader(this);
  HGObject::operator delete(v1);
}

float64x2_t project@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, float64x2_t *a5@<X8>)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  int64x2_t v10;
  float64x2_t v11;
  float64x2_t result;
  double v19[16];
  float64x2_t v20;
  __int128 v21;
  float64x2_t v22;
  __int128 v23;

  v7 = *(_QWORD *)(a1 + 16);
  v22 = *(float64x2_t *)a1;
  *(_QWORD *)&v23 = v7;
  *((_QWORD *)&v23 + 1) = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*(a3, a2, (uint64_t)v19);
  v20 = 0u;
  v21 = 0u;
  PCMatrix44Tmpl<double>::transform<double>(v19, v22.f64, v20.f64);
  v22 = v20;
  v23 = v21;
  v8 = (*(double *)&v21 / *((double *)&v21 + 1) + 1.0) * 0.5;
  v9 = a4[1];
  v10.i64[0] = (int)*a4;
  v10.i64[1] = (int)HIDWORD(*a4);
  v11 = vcvtq_f64_s64(v10);
  v10.i64[0] = (int)v9;
  v10.i64[1] = SHIDWORD(v9);
  __asm
  {
    FMOV            V4.2D, #1.0
    FMOV            V3.2D, #0.5
  }
  result = vaddq_f64(vmulq_f64(vmulq_f64(vaddq_f64(vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v21 + 1), 0)), _Q4), vcvtq_f64_s64(v10)), _Q3), v11);
  *a5 = result;
  a5[1].f64[0] = v8;
  return result;
}

void LiSceneDrawer::LiSceneDrawer(LiSceneDrawer *this)
{
  __int128 v7;

  *(_QWORD *)this = &off_1E6579980;
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q1;
  *((_OWORD *)this + 9) = 0u;
  v7 = _Q1;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 48) = 0x3FF0000000000000;
  *((_QWORD *)this + 43) = 0x3FF0000000000000;
  *((_QWORD *)this + 38) = 0x3FF0000000000000;
  *((_OWORD *)this + 16) = _Q1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_BYTE *)this + 444) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiSceneDrawer *)((char *)this + 448));
  *((_DWORD *)this + 116) = 1065353216;
  *((_WORD *)this + 234) = 257;
  *((_BYTE *)this + 470) = 0;
  *((_DWORD *)this + 118) = 0;
  *(_DWORD *)((char *)this + 475) = 0;
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 60) = -1;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_QWORD *)this + 92) = 0x3FF0000000000000;
  *((_QWORD *)this + 87) = 0x3FF0000000000000;
  *((_QWORD *)this + 82) = 0x3FF0000000000000;
  *((_OWORD *)this + 38) = v7;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 95) = &unk_1E64FC250;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_BYTE *)this + 784) = 0;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 101) = 0;
  *((_QWORD *)this + 99) = (char *)this + 800;
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_QWORD *)this + 102) = (char *)this + 824;
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 53) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 113);
  *((_QWORD *)this + 114) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 115);
}

void sub_1B2D9CFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  PCSharedCount **v13;
  PCSharedCount *v14;
  _QWORD **v15;
  void *v17;

  PCSharedCount::~PCSharedCount(v14);
  a12 = v12 + 872;
  std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  v17 = *(void **)(v12 + 848);
  if (v17)
  {
    *(_QWORD *)(v12 + 856) = v17;
    operator delete(v17);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12 + 816, *v15);
  std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(v12 + 792, *v13);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v12 + 760);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::LiSceneDrawer(LiSceneDrawer *this, const LiSceneDrawer *a2)
{
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  char *v15;
  uint64_t j;
  __int128 v17;

  *(_QWORD *)this = &off_1E6579980;
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q1;
  *((_OWORD *)this + 9) = 0u;
  v17 = _Q1;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 48) = 0x3FF0000000000000;
  *((_QWORD *)this + 43) = 0x3FF0000000000000;
  *((_QWORD *)this + 38) = 0x3FF0000000000000;
  *((_OWORD *)this + 16) = _Q1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_BYTE *)this + 444) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiSceneDrawer *)((char *)this + 448));
  *((_DWORD *)this + 116) = 1065353216;
  *((_WORD *)this + 234) = 257;
  *((_BYTE *)this + 470) = 0;
  *((_DWORD *)this + 118) = 0;
  *(_DWORD *)((char *)this + 475) = 0;
  v9 = (char *)this + 488;
  *((_QWORD *)this + 71) = 0x3FF0000000000000;
  *((_QWORD *)this + 66) = 0x3FF0000000000000;
  *((_QWORD *)this + 60) = -1;
  *((_QWORD *)this + 61) = 0x3FF0000000000000;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  v10 = (char *)this + 616;
  *((_QWORD *)this + 92) = 0x3FF0000000000000;
  *((_QWORD *)this + 87) = 0x3FF0000000000000;
  *((_QWORD *)this + 82) = 0x3FF0000000000000;
  *((_OWORD *)this + 38) = v17;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 95) = &unk_1E64FC250;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_BYTE *)this + 784) = 0;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 101) = 0;
  *((_QWORD *)this + 99) = (char *)this + 800;
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_QWORD *)this + 102) = (char *)this + 824;
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 53) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 113);
  *((_QWORD *)this + 114) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 115);
  *((_DWORD *)this + 118) = *((_DWORD *)a2 + 118);
  *((_BYTE *)this + 476) = *((_BYTE *)a2 + 476);
  *(_WORD *)((char *)this + 477) = *(_WORD *)((char *)a2 + 477);
  if (a2 == this)
  {
    *((_QWORD *)this + 105) = *((_QWORD *)a2 + 105);
  }
  else
  {
    v11 = 0;
    v12 = (char *)a2 + 488;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)&v9[i] = *(_QWORD *)&v12[i];
      ++v11;
      v9 += 32;
      v12 += 32;
    }
    while (v11 != 4);
    *((_QWORD *)this + 105) = *((_QWORD *)a2 + 105);
    if (a2 != this)
    {
      v14 = 0;
      v15 = (char *)a2 + 616;
      do
      {
        for (j = 0; j != 32; j += 8)
          *(_QWORD *)&v10[j] = *(_QWORD *)&v15[j];
        ++v14;
        v10 += 32;
        v15 += 32;
      }
      while (v14 != 4);
    }
  }
  *(_OWORD *)((char *)this + 744) = *(_OWORD *)((char *)a2 + 744);
  *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
}

void sub_1B2D9D284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  PCSharedCount *v13;
  PCSharedCount **v14;
  _QWORD **v15;
  void *v17;

  PCSharedCount::~PCSharedCount(v13);
  a12 = v12 + 872;
  std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  v17 = *(void **)(v12 + 848);
  if (v17)
  {
    *(_QWORD *)(v12 + 856) = v17;
    operator delete(v17);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12 + 816, *v15);
  std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(v12 + 792, *v14);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v12 + 760);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::~LiSceneDrawer(LiSceneDrawer *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E6579980;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 115);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 113);
  v3 = (void **)((char *)this + 872);
  std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 106);
  if (v2)
  {
    *((_QWORD *)this + 107) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 816, *((_QWORD **)this + 103));
  std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy((uint64_t)this + 792, *((PCSharedCount **)this + 100));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 760);
}

{
  LiSceneDrawer::~LiSceneDrawer(this);
  JUMPOUT(0x1B5E29170);
}

__CFString **LiSceneDrawer::setupLight(LiSceneDrawer *this, const LiLight *a2)
{
  ProShade::UniformData *CurrentContextUniformData;
  const LiLight *v4;
  uint64_t v5;
  __CFString **result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  double v13;
  double v15;
  PCException *exception;
  PCString v17;
  PCString v18[2];
  double v19;
  uint64_t v20;
  float32x4_t v21;

  CurrentContextUniformData = (ProShade::UniformData *)ProShade::UniformData::getCurrentContextUniformData(this);
  v5 = LiLightInfo::get(a2, v4);
  v18[0] = *(PCString *)((char *)a2 + 688);
  ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 128, (uint64_t *)v18);
  v18[0] = *(PCString *)((char *)a2 + 600);
  ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 712, (uint64_t *)v18);
  ProShade::UniformData::set<PCVector3<double>>(CurrentContextUniformData, v5 + 744, (char *)a2 + 576);
  *(_OWORD *)&v18[0].var0 = xmmword_1B304EFF0;
  ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)v18);
  *(_OWORD *)&v18[0].var0 = xmmword_1B304EFF0;
  ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 32, (float32x2_t *)v18);
  v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)a2 + 608)), *((double *)a2 + 81))), vmulq_n_f64(vcvt_hight_f64_f32(*((float32x4_t *)a2 + 38)), *((double *)a2 + 81)));
  switch(*((_DWORD *)a2 + 164))
  {
    case 0:
      return ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 32, (float32x2_t *)&v21);
    case 1:
      ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)&v21);
      v15 = *((double *)a2 + 80);
      *(_OWORD *)&v18[0].var0 = *((_OWORD *)a2 + 39);
      v19 = v15;
      v20 = 0;
      goto LABEL_11;
    case 2:
      ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)&v21);
      v7 = *((double *)a2 + 85);
      *(_OWORD *)&v18[0].var0 = *(_OWORD *)((char *)a2 + 664);
      v19 = v7;
      v20 = 0x3FF0000000000000;
LABEL_11:
      result = ProShade::UniformData::set<PCVector4<double>>(CurrentContextUniformData, v5, v18);
      break;
    case 3:
      ProShade::UniformData::set<PCVector4<float>>(CurrentContextUniformData, v5 + 64, (float32x2_t *)&v21);
      v8 = *((double *)a2 + 85);
      *(_OWORD *)&v18[0].var0 = *(_OWORD *)((char *)a2 + 664);
      v19 = v8;
      v20 = 0x3FF0000000000000;
      ProShade::UniformData::set<PCVector4<double>>(CurrentContextUniformData, v5, v18);
      v18[0].var0 = COERCE__CFSTRING_(cos(*((long double *)a2 + 87)));
      ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 584, (uint64_t *)v18);
      v18[0].var0 = COERCE__CFSTRING_(cos(*((double *)a2 + 88) + *((double *)a2 + 87)));
      ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 616, (uint64_t *)v18);
      v18[0] = *(PCString *)((char *)a2 + 712);
      ProShade::UniformData::set<double>(CurrentContextUniformData, v5 + 680, (uint64_t *)v18);
      v9 = *((double *)a2 + 80);
      v10 = v9 * v9;
      v11 = -v9;
      v12 = *((float64x2_t *)a2 + 39);
      v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)) + v10);
      if (v13 < 0.000000100000001 && v13 > -0.000000100000001)
        v13 = 1.0;
      *(float64x2_t *)&v18[0].var0 = vdivq_f64(vnegq_f64(v12), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
      v19 = v11 / v13;
      result = ProShade::UniformData::set<PCVector3<double>>(CurrentContextUniformData, v5 + 648, v18);
      break;
    default:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(v18, "not implemented yet");
      PCString::PCString(&v17, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSceneDrawer.cpp");
      PCException::PCException(exception, v18, &v17, 204);
      *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  return result;
}

void sub_1B2D9D6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13)
{
  void *v13;
  int v14;

  PCString::~PCString(&a12);
  PCString::~PCString(&a13);
  if (v14)
    __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

__CFString **ProShade::UniformData::set<double>(ProShade::UniformData *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7;
  PCString v8[19];

  v8[18] = *(PCString *)MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v8);
  v7 = *a3;
  ProShade::Value::set((uint64_t)v8, (const PCString *)3, 1, &v7);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v8);
}

__CFString **ProShade::UniformData::set<PCVector3<double>>(ProShade::UniformData *a1, uint64_t a2, const void *a3)
{
  PCString v7[19];

  v7[18] = *(PCString *)MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v7);
  ProShade::Value::set((uint64_t)v7, (const PCString *)3, 3, a3);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v7);
}

void LiSceneDrawer::setupLights(LiSceneDrawer *this, LiSceneObject *a2, LiLightSet *a3)
{
  __CFString **v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  char *v10;
  LiSceneDrawer *v11;
  __int128 v12[8];
  double v13[16];
  PCSharedCount v14[118];
  _BYTE v15[8];
  LiLight *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[40];

  v6 = (__CFString **)ProGL::GL::GL((ProGL::GL *)v25);
  if (!*((_BYTE *)this + 476))
  {
    v7 = *((unsigned int *)a3 + 3);
    if ((int)v7 >= 1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (i >= *((int *)a3 + 3))
          PCArray_base::badIndex((PCArray_base *)v6);
        v6 = LiSceneDrawer::setupLight((LiSceneDrawer *)v6, (const LiLight *)(*((_QWORD *)a3 + 2) + 944 * i));
      }
    }
    LiSceneIterator<LiLight,LiSceneIteratorShineOut>::LiSceneIterator((uint64_t)v15, (uint64_t)a2);
    v9 = 0;
    v10 = (char *)this + 488;
    do
    {
      if (!v16)
        break;
      LiLight::LiLight((LiLight *)v14, v16);
      v12[4] = v21;
      v12[5] = v22;
      v12[6] = v23;
      v12[7] = v24;
      v12[0] = v17;
      v12[1] = v18;
      v12[2] = v19;
      v12[3] = v20;
      PCMatrix44Tmpl<double>::operator*((uint64_t)v10, v12, (uint64_t)v13);
      LiLight::transform((uint64_t)v14, v13);
      v11 = (LiSceneDrawer *)LiLightSet::add((uint64_t)a3, (const LiLight *)v14);
      LiSceneDrawer::setupLight(v11, (const LiLight *)v14);
      if (v16)
      {
        do
          LiSceneIterator<LiLight,LiSceneIteratorShineOut>::next((uint64_t)v15);
        while (v16 && *(void (***)(LiLight *__hidden))v16 != &off_1E657B040);
      }
      LiLight::~LiLight(v14);
      ++v9;
    }
    while (v9 != 8);
    LiSceneIterator<LiLight,LiSceneIteratorShineOut>::~LiSceneIterator((uint64_t)v15);
  }
  ProGL::GL::~GL((ProGL::GL *)v25);
}

void sub_1B2D9D960(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProGL::GL::~GL((ProGL::GL *)(v1 - 104));
  _Unwind_Resume(a1);
}

void LiSceneDrawer::beginRender(_BYTE *a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5, uint64_t *a6, uint64_t a7)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void **v15[59];
  _QWORD v16[11];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  PCSharedCount **v24;
  PCSharedCount *v25[2];
  _QWORD v26[3];
  uint64_t v27;

  v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  memset(v26, 0, sizeof(v26));
  v27 = *a6;
  a1[928] = 0;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __int128 *, _QWORD *, uint64_t, PCSharedCount ***))(*(_QWORD *)a1 + 16))(a1, a2, a3, a4, a5, a7, &v24);
  if ((_BYTE)v27)
  {
    LiContext::LiContext((LiContext *)v15);
    v17 = a1[476];
    LiClipSet::operator=((uint64_t)v16, a3);
    v16[9] = *a5;
    LiContext::setMaterialFilters((uint64_t)v15, a7);
    v12 = a4[3];
    v20 = a4[2];
    v21 = v12;
    v13 = a4[5];
    v22 = a4[4];
    v23 = v13;
    v14 = a4[1];
    v18 = *a4;
    v19 = v14;
    LiSceneDrawer::render_zsort((uint64_t)a1, (uint64_t)v15, (uint64_t)&v24);
    LiContext::~LiContext((LiContext *)v15);
  }
  v15[0] = (void **)v26;
  std::vector<LiLightSet>::__destroy_vector::operator()[abi:ne180100](v15);
  std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy((uint64_t)&v24, v25[0]);
}

void sub_1B2D9DAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  LiSceneDrawer::PaintersAlgorithmSceneData::~PaintersAlgorithmSceneData((PCSharedCount **)(v1 - 120));
  _Unwind_Resume(a1);
}

void LiContext::setMaterialFilters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const PCSharedCount *v9;
  PC_Sp_counted_base **v10;
  PCSharedCount v11;

  v4 = a1 + 520;
  v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 528) >= v5)
    v6 = *(_DWORD *)(a1 + 528);
  else
    v6 = (2 * v5) | 1;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v7);
      v10 = (PC_Sp_counted_base **)(*(_QWORD *)(a1 + 536) + v7);
      *v10 = v9->var0;
      PCSharedCount::PCSharedCount(&v11, v9 + 1);
      PCSharedCount::operator=((uint64_t *)v10 + 1, (uint64_t *)&v11);
      PCSharedCount::~PCSharedCount(&v11);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(int *)(a2 + 12));
  }
}

void sub_1B2D9DB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::render_zsort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  ProShade::UniformData *v4;
  int v5;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BOOL4 v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD **v28;
  double v29;
  _QWORD *v30;
  uint64_t **v31;
  float64x2_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  LiMaterial *v47;
  double Alpha;
  double v49;
  double v50;
  uint64_t **v51;
  __int128 v52;
  uint64_t **v53;
  ProShade::ProgramBase *v54;
  ProShade::Program *v55;
  __CFString **UniformWorkspace;
  PCString *v57;
  uint64_t v58;
  LiMaterial **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  ProShade::Program *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t **v70;
  _QWORD *v71;
  __int128 v72;
  uint64_t *CurrentContextUniformData;
  int v76;
  LiGL *v77;
  int v78;
  PCSharedCount v79[2];
  __int128 v80;
  double v81;
  float64x2_t v82;
  __int128 v83;
  uint64_t v84;
  PCSharedCount v85;
  double v86;
  uint64_t *v87;
  _QWORD *v88[2];
  float64x2_t v89;
  __int128 v90;
  _QWORD block[44];
  _BYTE v92[47];
  _QWORD *v93[2];

  if (*(_QWORD *)(a3 + 16))
  {
    v3 = a3;
    v4 = (ProShade::UniformData *)ProGL::GL::GL((ProGL::GL *)v92);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZL31should_do_INTEL_6000_workaroundRN5ProGL2GLE_block_invoke;
    block[3] = &__block_descriptor_tmp_16_0;
    block[4] = v92;
    if (should_do_INTEL_6000_workaround(ProGL::GL &)::predicate != -1)
      dispatch_once(&should_do_INTEL_6000_workaround(ProGL::GL &)::predicate, block);
    v5 = should_do_INTEL_6000_workaround(ProGL::GL &)::isINTEL6000;
    CurrentContextUniformData = (uint64_t *)ProShade::UniformData::getCurrentContextUniformData(v4);
    LiFBOCompositor::LiFBOCompositor((LiFBOCompositor *)block, *(_DWORD *)(v3 + 52));
    v89 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v72 = _Q0;
    v90 = _Q0;
    v88[0] = 0;
    v88[1] = 0;
    v87 = (uint64_t *)v88;
    v76 = v5 ^ 1;
    v11 = (_QWORD *)(v3 + 8);
    if (v3 + 8 == *(_QWORD *)v3)
    {
      v13 = a2;
    }
    else
    {
      v12 = (_QWORD *)(v3 + 8);
      v13 = a2;
      do
      {
        v82.f64[0] = 0.0;
        v14 = (_QWORD *)*v12;
        v15 = (_QWORD *)*v12;
        v16 = v12;
        if (*v12)
        {
          do
          {
            v17 = v15;
            v15 = (_QWORD *)v15[1];
          }
          while (v15);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v16[2];
            _ZF = *v17 == (_QWORD)v16;
            v16 = v17;
          }
          while (_ZF);
        }
        v18 = *((double *)v17 + 4);
        v82.f64[0] = v18;
        v19 = v14;
        v20 = v12;
        if (v14)
        {
          do
          {
            v21 = v19;
            v19 = (_QWORD *)v19[1];
          }
          while (v19);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v20[2];
            _ZF = *v21 == (_QWORD)v20;
            v20 = v21;
          }
          while (_ZF);
        }
        v22 = v12;
        if (v14)
        {
          do
          {
            v23 = v14;
            v14 = (_QWORD *)v14[1];
          }
          while (v14);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v22[2];
            _ZF = *v23 == (_QWORD)v22;
            v22 = v23;
          }
          while (_ZF);
        }
        v24 = *((_BYTE *)v23 + 584) == 0;
        v25 = v88[0];
        if (!v88[0])
          goto LABEL_27;
        v26 = v88;
        do
        {
          v27 = v25;
          v28 = v26;
          v29 = *((double *)v25 + 4);
          v30 = v25 + 1;
          if (v29 >= v18)
          {
            v30 = v27;
            v26 = (_QWORD **)v27;
          }
          v25 = (_QWORD *)*v30;
        }
        while (v25);
        if (v26 == v88)
          goto LABEL_27;
        if (v29 < v18)
          v27 = v28;
        if (v18 < *((double *)v27 + 4))
        {
LABEL_27:
          v79[0].var0 = (PC_Sp_counted_base *)&v82;
          *(_OWORD *)(std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, v82.f64, (uint64_t)&std::piecewise_construct, v79)+ 7) = v72;
        }
        v79[0].var0 = (PC_Sp_counted_base *)&v82;
        v31 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, v82.f64, (uint64_t)&std::piecewise_construct, v79);
        v32 = (float64x2_t *)(v21 + 69);
        PCRect<double>::operator|=((float64x2_t *)(v31 + 5), v32);
        PCRect<double>::operator|=(&v89, v32);
        v33 = (_QWORD *)*v12;
        if (*v12)
        {
          do
          {
            v34 = v33;
            v33 = (_QWORD *)v33[1];
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v12[2];
            _ZF = *v34 == (_QWORD)v12;
            v12 = v34;
          }
          while (_ZF);
        }
        v76 &= v24;
        v12 = v34;
      }
      while (v34 != *(_QWORD **)v3);
    }
    v77 = (LiGL *)(v13 + 592);
    v35 = 1;
    v71 = (_QWORD *)(v3 + 8);
    while (1)
    {
      v78 = v35;
      LiFBOCompositor::beginDrawToFBO((LiFBOCompositor *)block);
      v86 = 0.0;
      v36 = *v11;
      v37 = v11;
      if (*v11)
      {
        do
        {
          v38 = v36;
          v36 = *(_QWORD *)(v36 + 8);
        }
        while (v36);
      }
      else
      {
        do
        {
          v38 = v37[2];
          _ZF = *(_QWORD *)v38 == (_QWORD)v37;
          v37 = (_QWORD *)v38;
        }
        while (_ZF);
      }
      v86 = *(double *)(v38 + 32);
      v84 = 0;
      PCSharedCount::PCSharedCount(&v85);
      PCPtr<LiImageSource>::reset(&v84);
      v82 = 0uLL;
      v83 = v72;
      if (v76)
      {
        glEnable(0xC11u);
        glScissor((int)v89.f64[0], (int)v89.f64[1], (int)*(double *)&v90, (int)*((double *)&v90 + 1));
      }
      if (v11 != *(_QWORD **)v3)
        break;
LABEL_92:
      v11 = v71;
      if ((v76 & 1) != 0)
      {
        glEnable(0xC11u);
        v79[0].var0 = (PC_Sp_counted_base *)&v86;
        v70 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, &v86, (uint64_t)&std::piecewise_construct, v79);
        PCRect<double>::operator|=(&v82, (float64x2_t *)(v70 + 5));
        glScissor((int)v82.f64[0], (int)v82.f64[1], (int)*(double *)&v83, (int)*((double *)&v83 + 1));
      }
      LiFBOCompositor::endDrawToFBO((LiFBOCompositor *)block);
      if (v76)
        glDisable(0xC11u);
      PCSharedCount::~PCSharedCount(&v85);
      v35 = 0;
      if ((v78 & 1) == 0)
      {
        LiFBOCompositor::renderResults((LiFBOCompositor *)block);
        unbindAllTextures();
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v87, v88[0]);
        LiFBOCompositor::~LiFBOCompositor((LiFBOCompositor *)block);
        ProGL::GL::~GL((ProGL::GL *)v92);
        return;
      }
    }
    v39 = -1;
    v40 = v71;
    while (1)
    {
      v81 = 0.0;
      v41 = *v40;
      v42 = *v40;
      v43 = v40;
      if (*v40)
      {
        do
        {
          v44 = v42;
          v42 = *(_QWORD *)(v42 + 8);
        }
        while (v42);
      }
      else
      {
        do
        {
          v44 = v43[2];
          _ZF = *(_QWORD *)v44 == (_QWORD)v43;
          v43 = (_QWORD *)v44;
        }
        while (_ZF);
      }
      v81 = *(double *)(v44 + 32);
      v45 = v40;
      if (v41)
      {
        do
        {
          v46 = v41;
          v41 = *(_QWORD *)(v41 + 8);
        }
        while (v41);
      }
      else
      {
        do
        {
          v46 = v45[2];
          _ZF = *(_QWORD *)v46 == (_QWORD)v45;
          v45 = (_QWORD *)v46;
        }
        while (_ZF);
      }
      v47 = *(LiMaterial **)(v46 + 528);
      if (!v47)
        throw_PCNullPointerException(1);
      Alpha = LiMaterial::getAlpha(v47);
      if (((v78 ^ (v50 * (Alpha * v49) < 1.0)) & 1) == 0)
        goto LABEL_87;
      if (v81 < v86)
      {
        v93[0] = &v81;
        v51 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, &v81, (uint64_t)&std::piecewise_construct, v93);
        v52 = *(_OWORD *)(v51 + 7);
        *(_OWORD *)&v79[0].var0 = *(_OWORD *)(v51 + 5);
        v80 = v52;
        v93[0] = &v86;
        v53 = std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(&v87, &v86, (uint64_t)&std::piecewise_construct, v93);
        PCRect<double>::operator|=(&v82, (float64x2_t *)(v53 + 5));
        v86 = v81;
        if ((v78 & 1) == 0 && PCRect<double>::overlaps((double *)v79, v82.f64))
        {
          if (v76)
          {
            glEnable(0xC11u);
            glScissor((int)v82.f64[0], (int)v82.f64[1], (int)*(double *)&v83, (int)*((double *)&v83 + 1));
          }
          LiFBOCompositor::endDrawToFBO((LiFBOCompositor *)block);
          if (v76)
            glDisable(0xC11u);
          v83 = v72;
          LiFBOCompositor::beginDrawToFBO((LiFBOCompositor *)block);
        }
      }
      v54 = *(ProShade::ProgramBase **)(v46 + 512);
      if (!v54)
        throw_PCNullPointerException(1);
      if (!ProShade::ProgramBase::id(v54))
        goto LABEL_87;
      LiGL::useProgram(v77, *(ProShade::Program **)(v46 + 512));
      v55 = *(ProShade::Program **)(v46 + 512);
      if (!v55)
        throw_PCNullPointerException(1);
      UniformWorkspace = (__CFString **)ProShade::Program::getUniformWorkspace(v55);
      v57 = (PCString *)UniformWorkspace;
      v58 = *(_QWORD *)(v46 + 528);
      if (v84)
      {
        if (!v58 || v84 != v58)
        {
LABEL_73:
          ProGL::GL::GL((ProGL::GL *)v79);
          should_do_NVIDIA_gpureset_workaround((ProGL::GL *)v79);
          ProGL::GL::~GL((ProGL::GL *)v79);
          v59 = *(LiMaterial ***)(v46 + 528);
          if (!v59)
            throw_PCNullPointerException(1);
          LiMaterial::setUniforms(v59, *(const LiTextureCoordinator **)(a1 + 840));
          v84 = *(_QWORD *)(v46 + 528);
          PCSharedCount::PCSharedCount(v79, (const PCSharedCount *)(v46 + 536));
          PCSharedCount::operator=((uint64_t *)&v85, (uint64_t *)v79);
          PCSharedCount::~PCSharedCount(v79);
        }
      }
      else if (v58)
      {
        goto LABEL_73;
      }
      v60 = *(_QWORD *)(v46 + 544);
      if (v39 != v60)
      {
        v61 = v3;
        v62 = *(_QWORD *)(v3 + 24) + 32 * v60;
        LODWORD(v63) = *(_DWORD *)(v62 + 12);
        if ((_DWORD)v63)
        {
          v64 = 0;
          v65 = 0;
          do
          {
            if ((v65 & 0x80000000) != 0 || (int)v63 <= (int)v65)
              PCArray_base::badIndex((PCArray_base *)UniformWorkspace);
            UniformWorkspace = LiSceneDrawer::setupLight((LiSceneDrawer *)UniformWorkspace, (const LiLight *)(*(_QWORD *)(v62 + 16) + 944 * SHIDWORD(v64)));
            ++v65;
            v63 = *(int *)(v62 + 12);
            v64 += 0x100000000;
          }
          while (v65 < v63);
        }
        v13 = a2;
        LiContext::setLights(a2, v62);
        v39 = v60;
        v3 = v61;
      }
      v66 = *(ProShade::Program **)(v46 + 512);
      if (!v66)
        throw_PCNullPointerException(1);
      v67 = ProShade::Program::bindTextures(v66);
      *(_DWORD *)(v13 + 432) = *(_DWORD *)(v46 + 472);
      LiSceneDrawer::setMaterialUniforms(v67, v13, v46 + 40);
      ProShade::UniformData::setWorkspaceGlobals(CurrentContextUniformData, v57);
      ProShade::UniformWorkspace::computeAllOutputs((uint64_t)v57);
      ProShade::UniformWorkspace::sendChangedUniforms((uint64_t **)v57);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v46 + 504) + 152))(*(_QWORD *)(v46 + 504), v13);
      LiGL::useProgram(v77, 0);
LABEL_87:
      v68 = (_QWORD *)*v40;
      if (*v40)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)v68[1];
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v40[2];
          _ZF = *v69 == (_QWORD)v40;
          v40 = v69;
        }
        while (_ZF);
      }
      v40 = v69;
      if (v69 == *(_QWORD **)v3)
        goto LABEL_92;
    }
  }
}

void sub_1B2D9E380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount a21)
{
  uint64_t v21;
  PCSharedCount *v23;
  _QWORD *v24[7];
  uint64_t v25;

  PCSharedCount::~PCSharedCount(v23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v24, v24[1]);
  LiFBOCompositor::~LiFBOCompositor((LiFBOCompositor *)&v25);
  ProGL::GL::~GL((ProGL::GL *)(v21 - 160));
  _Unwind_Resume(a1);
}

void LiSceneDrawer::PaintersAlgorithmSceneData::~PaintersAlgorithmSceneData(PCSharedCount **this)
{
  void **v2;

  v2 = (void **)(this + 3);
  std::vector<LiLightSet>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy((uint64_t)this, this[1]);
}

void LiSceneDrawer::traverseAndRender(uint64_t a1, LiSceneObject *a2, uint64_t a3, __int128 *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  __n128 v26;
  uint64_t v27;
  PCSharedCount v28;
  PC_Sp_counted_base *var0;
  uint64_t v30;
  PCSharedCount v31;
  PCSharedCount v32;
  PCSharedCount v33;
  _BYTE v34[472];
  _QWORD v35[11];
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  PCSharedCount *v43;

  LiContext::LiContext((LiContext *)v34);
  v36 = *(_BYTE *)(a1 + 476);
  LiClipSet::operator=((uint64_t)v35, a3);
  v35[9] = *a5;
  LiContext::setMaterialFilters((uint64_t)v34, a6);
  v14 = a4[3];
  v39 = a4[2];
  v40 = v14;
  v15 = a4[5];
  v41 = a4[4];
  v42 = v15;
  v16 = a4[1];
  v37 = *a4;
  v38 = v16;
  LiSceneDrawer::setupLights((LiSceneDrawer *)a1, a2, (LiLightSet *)(a1 + 760));
  LiContext::setLights((uint64_t)v34, a1 + 760);
  v17 = *(_QWORD *)(a7 + 32);
  if (v17 >= *(_QWORD *)(a7 + 40))
  {
    v18 = std::vector<LiLightSet>::__push_back_slow_path<LiLightSet const&>((uint64_t *)(a7 + 24), a1 + 760);
  }
  else
  {
    std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>(a7 + 40, *(_QWORD *)(a7 + 32), a1 + 760);
    v18 = v17 + 32;
    *(_QWORD *)(a7 + 32) = v17 + 32;
  }
  *(_QWORD *)(a7 + 32) = v18;
  v32.var0 = 0;
  PCSharedCount::PCSharedCount(&v33);
  if (*(_BYTE *)(a1 + 476))
  {
    v19 = operator new();
    *(_QWORD *)(v19 + 664) = &off_1E65EB048;
    *(_QWORD *)(v19 + 672) = 0;
    *(_BYTE *)(v19 + 680) = 1;
    LiMaterial::LiMaterial((LiMaterial *)v19, (uint64_t *)off_1E6578A50);
    *(_QWORD *)v19 = &unk_1E6578948;
    *(_QWORD *)(v19 + 664) = &unk_1E6578A30;
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v32, (PCShared_base *)v19);
    if (!v32.var0)
      throw_PCNullPointerException(1);
    LiMaterial::getProgram((uint64_t)v32.var0, (LiContext *)v34, 0, (uint64_t)&v30);
    v28.var0 = (PC_Sp_counted_base *)&v30;
    v20 = std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__emplace_unique_key_args<PCPtr<ProShade::Program>,std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(a1 + 792, (uint64_t)&v30, (uint64_t)&std::piecewise_construct, (const PCSharedCount **)&v28);
    v27 = a3;
    LODWORD(v28.var0) = v32.var0;
    var0 = v32.var0;
    v21 = v20[6];
    v43 = &v28;
    v22 = std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__emplace_unique_key_args<LiSceneDrawer::ByMaterial::MaterialKey,std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(v21, (int *)&v28, (uint64_t)&std::piecewise_construct, (_OWORD **)&v43)+ 6;
    LODWORD(v43) = 0;
    do
    {
      v28.var0 = (PC_Sp_counted_base *)&v43;
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 816), (int *)&v43, (uint64_t)&std::piecewise_construct, &v28)[5] = v22;
      v23 = (int)v43;
      LODWORD(v43) = (_DWORD)v43 + 1;
    }
    while (v23 < 8);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)(a1 + 912), &v32);
    *(_QWORD *)(a1 + 896) = v30;
    PCSharedCount::PCSharedCount(&v28, &v31);
    PCSharedCount::operator=((uint64_t *)(a1 + 904), (uint64_t *)&v28);
    a3 = v27;
    PCSharedCount::~PCSharedCount(&v28);
    PCSharedCount::~PCSharedCount(&v31);
  }
  LiSceneDrawer::traverseObject(a1, (uint64_t)v34, (uint64_t)a2, a3, (uint64_t)a4, a1 + 8, 1, a7);
  if (!*(_BYTE *)(a7 + 48))
    LiSceneDrawer::render((LiSceneDrawer *)a1, (LiContext *)v34);
  v24 = *(_QWORD *)(a1 + 848);
  for (i = *(_QWORD *)(a1 + 856); v24 != i; v24 += 472)
  {
    LiSceneDrawer::LiSceneDrawer((LiSceneDrawer *)&v28, (const LiSceneDrawer *)a1);
    v26 = LiSceneDrawer::setDrawAttrs((uint64_t)&v28, v24 + 8);
    if (*(_BYTE *)(*(_QWORD *)v24 + 644))
      LiSceneDrawer::setLights((uint64_t)&v28, a1 + 760);
    LiSceneDrawer::traverseAndRender(&v28, v26);
    LiSceneDrawer::~LiSceneDrawer((LiSceneDrawer *)&v28);
  }
  PCSharedCount::~PCSharedCount(&v33);
  LiContext::~LiContext((LiContext *)v34);
}

void sub_1B2D9E7E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  LiContext::~LiContext((LiContext *)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::traverseObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  int v14;
  _OWORD *v15;
  __int128 v16;
  PCShared_base *v17;
  PCShared_base *v18;
  unint64_t v19;
  uint64_t v20;
  char *v26;
  uint64_t v27;
  float64x2_t *v28;
  char *v29;
  PCSharedCount *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t i;
  _OWORD *v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  int v40;
  uint64_t **v41;
  PCSharedCount *v43;
  unint64_t j;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t k;
  _OWORD *v49;
  __int128 v50;
  float64x2_t *v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  float64x2_t v55;
  float64x2_t v56;
  _DWORD *v57;
  void *v58;
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  double *v68;
  _OWORD *v69;
  uint64_t m;
  uint64_t v71;
  _OWORD *v72;
  uint64_t n;
  uint64_t v74;
  _OWORD *v75;
  uint64_t ii;
  float64x2_t v77;
  float64x2_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  double v82;
  double v83;
  double v84;
  double v85;
  PC_Sp_counted_base *v86;
  PC_Sp_counted_base *var0;
  double v88;
  double v89;
  BOOL v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  _OWORD *v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  _OWORD *v101;
  __int128 v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  const PCSharedCount *v112;
  const PCSharedCount *v113;
  int v114;
  PC_Sp_counted_base *v115;
  PC_Sp_counted_base *v116;
  PC_Sp_counted_base *v117;
  PC_Sp_counted_base *v118;
  PC_Sp_counted_base *v119;
  PC_Sp_counted_base *v120;
  PC_Sp_counted_base *v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  PCSharedCount v128;
  PCSharedCount v129[54];
  _OWORD v130[3];
  PCSharedCount v131;
  PCSharedCount v132;
  PC_Sp_counted_base *v133;
  PCSharedCount v134;
  PC_Sp_counted_base *v135;
  PCSharedCount v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  double v140;
  __int128 v141;
  __int128 v142;
  __int128 v143[8];
  int v144;
  _OWORD v145[3];
  double v146;
  PCSharedCount v147[5];
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  _OWORD v153[3];
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  _OWORD v160[3];
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  _BYTE v171[31];
  _BYTE __src[40];
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  _BYTE v201[31];
  void *v202;
  PC_Sp_counted_base *v203;
  PCSharedCount v204;
  PC_Sp_counted_base *v205;
  PCSharedCount v206[2];
  __int128 v207;
  __int128 v208;
  BOOL v209;
  _OWORD *v210[27];

  v210[24] = *(_OWORD **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 478))
  {
    if (!*(_BYTE *)(a3 + 552))
      return;
  }
  else if (!*(_BYTE *)(a3 + 553))
  {
    return;
  }
  v14 = *(unsigned __int8 *)(a1 + 476);
  v15 = (_OWORD *)(a6 + 436);
  v16 = *(_OWORD *)(a6 + 436);
  *(_OWORD *)(a2 + 575) = *(_OWORD *)(a6 + 447);
  *(_OWORD *)(a2 + 564) = v16;
  if (!v14)
  {
    v18 = v17;
    if (v17)
    {
      v146 = 0.0;
      PCSharedCount::PCSharedCount(v147);
      LiSceneDrawer::buildProgram((uint64_t)v18, (LiContext *)a2, (uint64_t)&v146);
      PCSharedCount::PCSharedCount(v129);
      v129[1].var0 = 0;
      PCSharedCount::PCSharedCount(&v129[2]);
      *(double *)&v128.var0 = v146;
      PCSharedCount::PCSharedCount((PCSharedCount *)__src, v147);
      PCSharedCount::operator=((uint64_t *)v129, (uint64_t *)__src);
      PCSharedCount::~PCSharedCount((PCSharedCount *)__src);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v129[1], v18);
      if (*(_BYTE *)(a1 + 928))
      {
        std::vector<LiSceneDrawer::MaterialInfo>::__base_destruct_at_end[abi:ne180100](a1 + 872, *(_QWORD *)(a1 + 872));
        *(_BYTE *)(a1 + 928) = 0;
      }
      v19 = *(_QWORD *)(a1 + 880);
      if (v19 >= *(_QWORD *)(a1 + 888))
      {
        v20 = std::vector<LiSceneDrawer::MaterialInfo>::__push_back_slow_path<LiSceneDrawer::MaterialInfo const&>((uint64_t *)(a1 + 872), &v128);
      }
      else
      {
        std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>(a1 + 888, *(PCSharedCount **)(a1 + 880), &v128);
        v20 = v19 + 32;
        *(_QWORD *)(a1 + 880) = v19 + 32;
      }
      *(_QWORD *)(a1 + 880) = v20;
      *(_QWORD *)__src = &v146;
      v36 = std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__emplace_unique_key_args<PCPtr<ProShade::Program>,std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(a1 + 792, (uint64_t)&v146, (uint64_t)&std::piecewise_construct, (const PCSharedCount **)__src);
      *(_DWORD *)__src = (_DWORD)v18;
      *(_QWORD *)&__src[8] = v18;
      v37 = v36[6];
      v210[0] = __src;
      v38 = std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__emplace_unique_key_args<LiSceneDrawer::ByMaterial::MaterialKey,std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(v37, (int *)__src, (uint64_t)&std::piecewise_construct, v210);
      v39 = (*(uint64_t (**)(PCShared_base *))(*(_QWORD *)v18 + 152))(v18);
      v40 = 0;
      LODWORD(v210[0]) = 0;
      v41 = (uint64_t **)(a1 + 816);
      do
      {
        if (((v39 >> v40) & 1) != 0)
        {
          *(_QWORD *)__src = v210;
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v41, (int *)v210, (uint64_t)&std::piecewise_construct, (_DWORD **)__src)[5] = v38 + 6;
          v40 = (int)v210[0];
        }
        LODWORD(v210[0]) = v40 + 1;
      }
      while (v40++ < 8);
      PCSharedCount::~PCSharedCount(&v129[2]);
      PCSharedCount::~PCSharedCount(v129);
      v43 = v147;
      goto LABEL_24;
    }
  }
  v147[4].var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  v146 = 1.0;
  memset(v147, 0, 32);
  v148 = 0u;
  v149 = 0u;
  v151 = 0u;
  v152 = 0u;
  v150 = 0x3FF0000000000000;
  v154 = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  v153[0] = _Q1;
  memset(&v153[1], 0, 32);
  v155 = 0u;
  v156 = 0u;
  v159 = 0u;
  v158 = 0u;
  v26 = (char *)v160 + 8;
  v167 = 0x3FF0000000000000;
  v164 = 0x3FF0000000000000;
  v157 = 0x3FF0000000000000;
  v161 = 0x3FF0000000000000;
  v125 = _Q1;
  v160[0] = _Q1;
  memset(&v160[1], 0, 32);
  v162 = 0u;
  v163 = 0u;
  v165 = 0u;
  v166 = 0u;
  v171[4] = 0;
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v171[8]);
  *(_OWORD *)&v171[4] = *v15;
  *(_OWORD *)&v171[15] = *(_OWORD *)(a6 + 447);
  PCMatrix44Tmpl<double>::operator*(a6, (__int128 *)(a3 + 8), (uint64_t)&v128);
  v27 = 0;
  v28 = (float64x2_t *)(a3 + 408);
  v29 = (char *)v153 + 8;
  do
  {
    v30 = &v147[v27 - 1];
    v31 = *(_OWORD *)&v129[v27 + 1].var0;
    *(_OWORD *)&v30->var0 = *(_OWORD *)((char *)&v128.var0 + v27 * 8);
    *(_OWORD *)&v30[2].var0 = v31;
    v27 += 4;
  }
  while (v27 != 16);
  if (*(_BYTE *)(a3 + 264))
  {
    v32 = a3 + 136;
    if ((_OWORD *)(a3 + 136) != (_OWORD *)((char *)v153 + 8))
    {
      for (i = 0; i != 8; i += 2)
      {
        v34 = (_OWORD *)((char *)&v153[i] + 8);
        v35 = *(_OWORD *)(v32 + i * 16 + 16);
        *v34 = *(_OWORD *)(v32 + i * 16);
        v34[1] = v35;
      }
    }
  }
  else
  {
    PCMatrix44Tmpl<double>::operator*(a6 + 128, (__int128 *)(a3 + 8), (uint64_t)&v128);
    for (j = 0; j != 16; j += 4)
    {
      v45 = (_OWORD *)((char *)&v153[j / 2] + 8);
      v46 = *(_OWORD *)&v129[j + 1].var0;
      *v45 = *(_OWORD *)((char *)&v128.var0 + j * 8);
      v45[1] = v46;
    }
    v28 = (float64x2_t *)(a3 + 408);
  }
  if (*(_BYTE *)(a3 + 400))
  {
    v47 = a3 + 272;
    if ((_OWORD *)(a3 + 272) != (_OWORD *)((char *)v160 + 8))
    {
      for (k = 0; k != 8; k += 2)
      {
        v49 = (_OWORD *)((char *)&v160[k] + 8);
        v50 = *(_OWORD *)(v47 + k * 16 + 16);
        *v49 = *(_OWORD *)(v47 + k * 16);
        v49[1] = v50;
      }
    }
  }
  else
  {
    v51 = v28;
    PCMatrix44Tmpl<double>::operator*(a6 + 256, (__int128 *)(a3 + 8), (uint64_t)&v128);
    v52 = 0;
    v28 = v51;
    do
    {
      v53 = (_OWORD *)((char *)&v160[v52 / 2] + 8);
      v54 = *(_OWORD *)&v129[v52 + 1].var0;
      *v53 = *(_OWORD *)((char *)&v128.var0 + v52 * 8);
      v53[1] = v54;
      v52 += 4;
    }
    while (v52 != 16);
  }
  if (*(_BYTE *)(a3 + 424))
    v168 = *(float64x2_t *)(a3 + 408);
  else
    v168 = vaddq_f64(*(float64x2_t *)(a6 + 384), *v28);
  if (*(_BYTE *)(a3 + 448))
    v55 = *(float64x2_t *)(a3 + 432);
  else
    v55 = vaddq_f64(*(float64x2_t *)(a6 + 400), *(float64x2_t *)(a3 + 432));
  v169 = v55;
  if (*(_BYTE *)(a3 + 472))
    v56 = *(float64x2_t *)(a3 + 456);
  else
    v56 = vaddq_f64(*(float64x2_t *)(a6 + 416), v28[3]);
  v170 = v56;
  if (*(_BYTE *)(a3 + 480))
    v57 = (_DWORD *)LiSceneObject::index((LiSceneObject *)a3);
  else
    v57 = (_DWORD *)(a6 + 432);
  *(_DWORD *)v171 = *v57;
  if (v58)
  {
    v59 = v58;
    v145[1] = xmmword_1B304F270;
    v145[2] = xmmword_1B304F270;
    v145[0] = xmmword_1B304F270;
    (*(void (**)(void *, _OWORD *))(*(_QWORD *)v58 + 72))(v58, v145);
    if ((LiClipSet::containsBox(a4, (uint64_t *)v145, &v146) & 1) != 0)
    {
      v144 = 0;
      v144 = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 136))(v59);
      *(double *)&v128.var0 = COERCE_DOUBLE(&v144);
      v60 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 816), &v144, (uint64_t)&std::piecewise_construct, &v128)[5];
      if (v60)
      {
        v61 = *v60;
        v63 = *(_DWORD *)(*v60 + 8);
        v62 = *(_DWORD *)(*v60 + 12);
        if (v63 <= v62)
          v64 = (2 * (v62 + 1)) | 1;
        else
          v64 = v63;
        PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(v61, v62 + 1, v64);
        v65 = *(_QWORD *)(v61 + 16) + 472 * *(int *)(v61 + 12);
        v66 = (_OWORD *)(v65 - 472);
        *(_QWORD *)(v65 - 8) = v59;
        if (&v146 != (double *)(v65 - 472))
        {
          v67 = 0;
          v68 = &v146;
          v69 = v66;
          do
          {
            for (m = 0; m != 4; ++m)
              *(double *)((char *)v69 + m * 8) = v68[m];
            ++v67;
            v69 += 2;
            v68 += 4;
          }
          while (v67 != 4);
          v71 = 0;
          v72 = v66 + 8;
          do
          {
            for (n = 0; n != 32; n += 8)
              *(_QWORD *)((char *)v72 + n) = *(_QWORD *)&v29[n];
            ++v71;
            v72 += 2;
            v29 += 32;
          }
          while (v71 != 4);
          v74 = 0;
          v75 = v66 + 16;
          do
          {
            for (ii = 0; ii != 32; ii += 8)
              *(_QWORD *)((char *)v75 + ii) = *(_QWORD *)&v26[ii];
            ++v74;
            v75 += 2;
            v26 += 32;
          }
          while (v74 != 4);
        }
        v66[24] = v168;
        v77 = v169;
        v78 = v170;
        v79 = *(_OWORD *)v171;
        *(_OWORD *)((char *)v66 + 447) = *(_OWORD *)&v171[15];
        v66[26] = v78;
        v66[27] = v79;
        v66[25] = v77;
      }
      if (*(_BYTE *)(a8 + 48))
      {
        PCMatrix44Tmpl<double>::operator*(a1 + 488, (__int128 *)&v146, (uint64_t)v143);
        *(double *)&v128.var0 = 0.0;
        v129[0].var0 = 0;
        v129[1].var0 = 0;
        v129[2].var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
        v141 = 0u;
        v142 = 0u;
        PCMatrix44Tmpl<double>::transform<double>((double *)v143, (double *)&v128, (double *)&v141);
        v140 = fabs(*(double *)&v142);
        v138 = xmmword_1B304F270;
        v139 = xmmword_1B304F270;
        v137 = xmmword_1B304F270;
        (*(void (**)(void *, __int128 *))(*(_QWORD *)v59 + 72))(v59, &v137);
        v80 = 0;
        v81 = 0;
        v210[0] = (_OWORD *)v137;
        v210[1] = (_OWORD *)v138;
        v210[2] = (_OWORD *)v139;
        v210[3] = *((_OWORD **)&v137 + 1);
        v210[4] = (_OWORD *)v138;
        v210[5] = (_OWORD *)v139;
        v210[6] = *((_OWORD **)&v137 + 1);
        v210[7] = *((_OWORD **)&v138 + 1);
        v210[8] = (_OWORD *)v139;
        v210[9] = (_OWORD *)v137;
        v210[10] = *((_OWORD **)&v138 + 1);
        v210[11] = (_OWORD *)v139;
        v210[12] = (_OWORD *)v137;
        v210[13] = (_OWORD *)v138;
        v210[14] = *((_OWORD **)&v139 + 1);
        v210[15] = *((_OWORD **)&v137 + 1);
        v210[16] = (_OWORD *)v138;
        v210[17] = *((_OWORD **)&v139 + 1);
        v210[18] = *((_OWORD **)&v137 + 1);
        v210[19] = *((_OWORD **)&v138 + 1);
        v82 = -1.0;
        v210[20] = *((_OWORD **)&v139 + 1);
        v210[21] = (_OWORD *)v137;
        v83 = 0.0;
        v84 = 0.0;
        v210[22] = *((_OWORD **)&v138 + 1);
        v210[23] = *((_OWORD **)&v139 + 1);
        v85 = -1.0;
        do
        {
          project((uint64_t)&v210[v80], v143, a1 + 616, (_QWORD *)(a1 + 744), (float64x2_t *)&v128);
          var0 = v128.var0;
          v86 = v129[0].var0;
          if (*(double *)&v129[1].var0 > 1.0)
            ++v81;
          if (v82 < 0.0 || v85 < 0.0)
          {
            v85 = 0.0;
            v82 = 0.0;
            v84 = *(double *)&v129[0].var0;
            v83 = *(double *)&v128.var0;
          }
          else
          {
            v88 = v82 + v83;
            if (v83 > *(double *)&v128.var0)
              v83 = *(double *)&v128.var0;
            if (v88 >= *(double *)&v128.var0)
              *(double *)&var0 = v88;
            v89 = v85 + v84;
            if (v84 > *(double *)&v129[0].var0)
              v84 = *(double *)&v129[0].var0;
            if (v89 >= *(double *)&v129[0].var0)
              *(double *)&v86 = v89;
            v82 = *(double *)&var0 - v83;
            v85 = *(double *)&v86 - v84;
          }
          v80 += 3;
        }
        while (v80 != 24);
        v90 = (v81 - 1) < 7;
        v133 = 0;
        PCSharedCount::PCSharedCount(&v134);
        v135 = 0;
        PCSharedCount::PCSharedCount(&v136);
        PCPtr<LiImageSource>::reset(&v135);
        if (*(_BYTE *)(a1 + 476))
        {
          v133 = *(PC_Sp_counted_base **)(a1 + 896);
          PCSharedCount::PCSharedCount(&v128, (const PCSharedCount *)(a1 + 904));
          PCSharedCount::operator=((uint64_t *)&v134, (uint64_t *)&v128);
          PCSharedCount::~PCSharedCount(&v128);
          v135 = *(PC_Sp_counted_base **)(a1 + 912);
          PCSharedCount::PCSharedCount(&v128, (const PCSharedCount *)(a1 + 920));
          PCSharedCount::operator=((uint64_t *)&v136, (uint64_t *)&v128);
        }
        else
        {
          v111 = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 136))(v59);
          v112 = *(const PCSharedCount **)(a1 + 872);
          v113 = *(const PCSharedCount **)(a1 + 880);
          if (v112 == v113)
          {
LABEL_87:
            v173 = 0x3FF0000000000000;
            *(_QWORD *)__src = 0x3FF0000000000000;
            memset(&__src[8], 0, 32);
            v174 = 0u;
            v175 = 0u;
            v177 = 0u;
            v178 = 0u;
            v176 = 0x3FF0000000000000;
            v182 = 0x3FF0000000000000;
            v179 = v125;
            v180 = 0u;
            v181 = 0u;
            v183 = 0u;
            v184 = 0u;
            v187 = 0u;
            v186 = 0u;
            v197 = 0x3FF0000000000000;
            v194 = 0x3FF0000000000000;
            v185 = 0x3FF0000000000000;
            v191 = 0x3FF0000000000000;
            v188 = v125;
            v189 = 0u;
            v190 = 0u;
            v192 = 0u;
            v193 = 0u;
            v195 = 0u;
            v196 = 0u;
            v201[4] = 0;
            v198 = 0u;
            v199 = 0u;
            v200 = 0u;
            PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v201[8]);
            *(_DWORD *)&v201[24] = 1065353216;
            *(_WORD *)&v201[28] = 257;
            v201[30] = 0;
            v203 = 0;
            PCSharedCount::PCSharedCount(&v204);
            v205 = 0;
            PCSharedCount::PCSharedCount(v206);
            v91 = 0;
            v92 = v83 + -2.0;
            v93 = v84 + -2.0;
            v94 = v82 + 4.0;
            v95 = v85 + 4.0;
            __asm { FMOV            V1.2D, #-1.0 }
            v207 = 0u;
            v208 = _Q1;
            v202 = v59;
            do
            {
              v97 = &__src[v91 * 8];
              v98 = *(_OWORD *)&v147[v91 + 1].var0;
              *v97 = *(_OWORD *)&v147[v91 - 1].var0;
              v97[1] = v98;
              v91 += 4;
            }
            while (v91 != 16);
            do
            {
              v99 = &__src[v91 * 8];
              v100 = *(_OWORD *)&v147[v91 + 1].var0;
              *v99 = *(_OWORD *)&v147[v91 - 1].var0;
              v99[1] = v100;
              v91 += 4;
            }
            while (v91 != 32);
            do
            {
              v101 = &__src[v91 * 8];
              v102 = *(_OWORD *)&v147[v91 + 1].var0;
              *v101 = *(_OWORD *)&v147[v91 - 1].var0;
              v101[1] = v102;
              v91 += 4;
            }
            while (v91 != 48);
            v200 = v170;
            *(_OWORD *)v201 = *(_OWORD *)v171;
            *(_OWORD *)&v201[15] = *(_OWORD *)&v171[15];
            v198 = v168;
            v199 = v169;
            v203 = v133;
            PCSharedCount::PCSharedCount(&v128, &v134);
            PCSharedCount::operator=((uint64_t *)&v204, (uint64_t *)&v128);
            PCSharedCount::~PCSharedCount(&v128);
            v205 = v135;
            PCSharedCount::PCSharedCount(&v128, &v136);
            PCSharedCount::operator=((uint64_t *)v206, (uint64_t *)&v128);
            PCSharedCount::~PCSharedCount(&v128);
            v206[1].var0 = (PC_Sp_counted_base *)(((uint64_t)(*(_QWORD *)(a8 + 32) - *(_QWORD *)(a8 + 24)) >> 5) - 1);
            *(double *)&v207 = v92;
            *((double *)&v207 + 1) = v93;
            *(double *)&v208 = v94;
            *((double *)&v208 + 1) = v95;
            v209 = v90;
            std::pair<double,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double const&,LiSceneDrawer::ObjectDrawInfo&,0>((uint64_t)&v128, &v140, __src);
            std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__emplace_multi<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>(a8, (uint64_t)&v128);
            PCSharedCount::~PCSharedCount(&v132);
            PCSharedCount::~PCSharedCount(&v131);
            *(_BYTE *)(a1 + 928) = 1;
            PCSharedCount::~PCSharedCount(v206);
            PCSharedCount::~PCSharedCount(&v204);
            PCSharedCount::~PCSharedCount(&v136);
            v43 = &v134;
LABEL_24:
            PCSharedCount::~PCSharedCount(v43);
            return;
          }
          v114 = 1 << v111;
          while (1)
          {
            v115 = v112[2].var0;
            if (!v115)
              throw_PCNullPointerException(1);
            if (((*(unsigned int (**)(PC_Sp_counted_base *))(*(_QWORD *)v115 + 152))(v115) & v114) != 0)
              break;
            v112 += 4;
            if (v112 == v113)
              goto LABEL_87;
          }
          v133 = v112->var0;
          PCSharedCount::PCSharedCount(&v128, v112 + 1);
          PCSharedCount::operator=((uint64_t *)&v134, (uint64_t *)&v128);
          PCSharedCount::~PCSharedCount(&v128);
          v135 = v112[2].var0;
          PCSharedCount::PCSharedCount(&v128, v112 + 3);
          PCSharedCount::operator=((uint64_t *)&v136, (uint64_t *)&v128);
        }
        PCSharedCount::~PCSharedCount(&v128);
        goto LABEL_87;
      }
    }
  }
  else
  {
    if (v103)
    {
      v104 = v103;
      if (!*(_BYTE *)(a1 + 476)
        || (v105 = *(_QWORD *)(a1 + 480), v105 == -1)
        || v103[645]
        || v105 == *((_DWORD *)v103 + 130))
      {
        v106 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v103 + 248))(v103);
        if ((a7 & 1) != 0 || v104[644] && v104[645])
        {
          if (*(_BYTE *)(a1 + 476) || *(_DWORD *)(a1 + 472) == 1)
          {
            if (!*(_BYTE *)(v106 + 24))
              return;
          }
          else if (*(_BYTE *)(v106 + 26))
          {
            return;
          }
          if (*(_BYTE *)v106)
          {
            v107 = *(_OWORD *)v106;
            *(_OWORD *)&v171[15] = *(_OWORD *)(v106 + 11);
            *(_OWORD *)&v171[4] = v107;
          }
          v108 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v104 + 136))(v104);
          if (v108 >= 1)
          {
            v109 = 0;
            do
            {
              v110 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v104 + 144))(v104, v109);
              LiSceneDrawer::traverseObject(a1, a2, v110, a4, a5, &v146, 0, a8);
              v109 = (v109 + 1);
            }
            while (v108 != (_DWORD)v109);
          }
        }
        else
        {
          v116 = *(PC_Sp_counted_base **)(a6 + 384);
          v117 = *(PC_Sp_counted_base **)(a6 + 392);
          v118 = *(PC_Sp_counted_base **)(a6 + 400);
          v119 = *(PC_Sp_counted_base **)(a6 + 408);
          v120 = *(PC_Sp_counted_base **)(a6 + 416);
          v121 = *(PC_Sp_counted_base **)(a6 + 424);
          *(_OWORD *)__src = *(_OWORD *)(a6 + 432);
          *(_OWORD *)&__src[15] = *(_OWORD *)(a6 + 447);
          if (*(_BYTE *)v106)
          {
            *(_OWORD *)&__src[4] = *(_OWORD *)v106;
            *(_OWORD *)&__src[15] = *(_OWORD *)(v106 + 11);
          }
          v128.var0 = (PC_Sp_counted_base *)v104;
          memcpy(v129, (const void *)a6, 0x180uLL);
          v129[48].var0 = v116;
          v129[49].var0 = v117;
          v129[50].var0 = v118;
          v129[51].var0 = v119;
          v129[52].var0 = v120;
          v129[53].var0 = v121;
          v130[0] = *(_OWORD *)__src;
          *(_OWORD *)((char *)v130 + 15) = *(_OWORD *)&__src[15];
          v122 = *(_QWORD *)(a1 + 856);
          if (v122 >= *(_QWORD *)(a1 + 864))
          {
            v124 = std::vector<LiSceneDrawer::DeferredGroup>::__push_back_slow_path<LiSceneDrawer::DeferredGroup>((uint64_t *)(a1 + 848), &v128);
          }
          else
          {
            *(double *)v122 = *(double *)&v104;
            memcpy((void *)(v122 + 8), v129, 0x180uLL);
            *(_QWORD *)(v122 + 392) = v116;
            *(_QWORD *)(v122 + 400) = v117;
            *(_QWORD *)(v122 + 408) = v118;
            *(_QWORD *)(v122 + 416) = v119;
            *(_QWORD *)(v122 + 424) = v120;
            *(_QWORD *)(v122 + 432) = v121;
            v123 = *(_OWORD *)((char *)v130 + 15);
            *(_OWORD *)(v122 + 440) = v130[0];
            *(_OWORD *)(v122 + 455) = v123;
            v124 = v122 + 472;
          }
          *(_QWORD *)(a1 + 856) = v124;
        }
      }
    }
  }
}

void sub_1B2D9F6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  PCSharedCount *v11;
  PCSharedCount *v12;
  va_list va;

  va_start(va, a11);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  PCSharedCount::~PCSharedCount(v12);
  PCSharedCount::~PCSharedCount(v11);
  _Unwind_Resume(a1);
}

void LiSceneDrawer::render(LiSceneDrawer *this, LiContext *a2)
{
  char *v4;
  char *v5;
  LiGL *v6;
  ProShade::ProgramBase *v7;
  ProShade::Program *v8;
  uint64_t UniformWorkspace;
  _QWORD *v10;
  _QWORD *v11;
  PCString *v12;
  uint64_t v13;
  LiMaterial **v14;
  PCShared_base *v15;
  ProShade::Program *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *CurrentContextUniformData;
  LiSceneDrawer *v29;
  _BYTE v30[40];
  _QWORD **v31;
  _QWORD *v32[2];
  LiMaterial **v33;
  PCSharedCount v34;

  CurrentContextUniformData = (uint64_t *)ProShade::UniformData::getCurrentContextUniformData(this);
  v29 = this;
  v4 = (char *)*((_QWORD *)this + 99);
  v5 = (char *)this + 800;
  if (v4 != v5)
  {
    v6 = (LiContext *)((char *)a2 + 592);
    v27 = v5;
    do
    {
      v7 = (ProShade::ProgramBase *)*((_QWORD *)v4 + 4);
      if (v7 && ProShade::ProgramBase::id(v7))
      {
        LiGL::useProgram(v6, *((ProShade::Program **)v4 + 4));
        v8 = (ProShade::Program *)*((_QWORD *)v4 + 4);
        if (!v8)
          throw_PCNullPointerException(1);
        UniformWorkspace = ProShade::Program::getUniformWorkspace(v8);
        v10 = (_QWORD *)*((_QWORD *)v4 + 6);
        v11 = (_QWORD *)*v10;
        if ((_QWORD *)*v10 != v10 + 1)
        {
          v12 = (PCString *)UniformWorkspace;
          do
          {
            v13 = *(unsigned int *)(v11[6] + 12);
            if ((_DWORD)v13)
            {
              v14 = (LiMaterial **)v11[5];
              v33 = v14;
              if (v14)
                v15 = (PCShared_base *)((char *)v14 + *((_QWORD *)*v14 - 3));
              else
                v15 = 0;
              PCSharedCount::PCSharedCount(&v34, v15);
              if (!v33)
                throw_PCNullPointerException(1);
              LiMaterial::setUniforms(v33, *((const LiTextureCoordinator **)v29 + 105));
              v16 = (ProShade::Program *)*((_QWORD *)v4 + 4);
              if (!v16)
                throw_PCNullPointerException(1);
              ProShade::Program::bindTextures(v16);
              v17 = ProShade::UniformData::setWorkspaceGlobals(CurrentContextUniformData, v12);
              v32[0] = 0;
              v32[1] = 0;
              v31 = v32;
              if ((int)v13 >= 1)
              {
                v18 = 0;
                v19 = 464;
                do
                {
                  v20 = v11[6];
                  if (v18 >= *(int *)(v20 + 12))
                    PCArray_base::badIndex((PCArray_base *)v17);
                  v21 = *(_QWORD *)(v20 + 16);
                  LiSceneDrawer::setMaterialUniforms((uint64_t)v17, (uint64_t)a2, v21 + v19 - 464);
                  ProShade::UniformData::setWorkspaceGlobals((uint64_t *)&v31, v12);
                  *((_DWORD *)a2 + 108) = *(_DWORD *)(v21 + v19 - 32);
                  ProShade::UniformWorkspace::computeAllOutputs((uint64_t)v12);
                  ProShade::UniformWorkspace::sendChangedUniforms((uint64_t **)v12);
                  v17 = (uint64_t *)(*(uint64_t (**)(_QWORD, LiContext *))(**(_QWORD **)(v21 + v19) + 152))(*(_QWORD *)(v21 + v19), a2);
                  ++v18;
                  v19 += 472;
                }
                while (v13 != v18);
              }
              ProGL::GL::GL((ProGL::GL *)v30);
              should_do_NVIDIA_gpureset_workaround((ProGL::GL *)v30);
              ProGL::GL::~GL((ProGL::GL *)v30);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v31, v32[0]);
              PCSharedCount::~PCSharedCount(&v34);
            }
            v22 = (_QWORD *)v11[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v11[2];
                v24 = *v23 == (_QWORD)v11;
                v11 = v23;
              }
              while (!v24);
            }
            v11 = v23;
          }
          while (v23 != (_QWORD *)(*((_QWORD *)v4 + 6) + 8));
        }
        v6 = (LiContext *)((char *)a2 + 592);
        LiGL::useProgram((LiContext *)((char *)a2 + 592), 0);
        v5 = v27;
      }
      v25 = (char *)*((_QWORD *)v4 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (char *)*((_QWORD *)v4 + 2);
          v24 = *(_QWORD *)v26 == (_QWORD)v4;
          v4 = v26;
        }
        while (!v24);
      }
      v4 = v26;
    }
    while (v26 != v5);
  }
  unbindAllTextures();
}

void sub_1B2D9FC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14)
{
  __cxa_end_catch();
  PCSharedCount::~PCSharedCount(a14);
  _Unwind_Resume(a1);
}

void sub_1B2D9FC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCSharedCount *a14)
{
  PCSharedCount::~PCSharedCount(a14);
  _Unwind_Resume(a1);
}

void sub_1B2D9FCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a20, a21);
  JUMPOUT(0x1B2D9FCB4);
}

__n128 LiSceneDrawer::setDrawAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  __n128 result;
  __int128 v15;
  __int128 v16;

  if (a1 + 8 != a2)
  {
    v2 = 0;
    v3 = a2;
    v4 = a1 + 8;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v4 + i) = *(_QWORD *)(v3 + i);
      ++v2;
      v4 += 32;
      v3 += 32;
    }
    while (v2 != 4);
    v6 = 0;
    v7 = a1 + 136;
    v8 = a2 + 128;
    do
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v7 + j) = *(_QWORD *)(v8 + j);
      ++v6;
      v7 += 32;
      v8 += 32;
    }
    while (v6 != 4);
    v10 = 0;
    v11 = a1 + 264;
    v12 = a2 + 256;
    do
    {
      for (k = 0; k != 32; k += 8)
        *(_QWORD *)(v11 + k) = *(_QWORD *)(v12 + k);
      ++v10;
      v11 += 32;
      v12 += 32;
    }
    while (v10 != 4);
  }
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 384);
  result = *(__n128 *)(a2 + 400);
  v15 = *(_OWORD *)(a2 + 416);
  v16 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 455) = *(_OWORD *)(a2 + 447);
  *(_OWORD *)(a1 + 424) = v15;
  *(_OWORD *)(a1 + 440) = v16;
  *(__n128 *)(a1 + 408) = result;
  return result;
}

void LiSceneDrawer::setLights(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + 760;
  v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 768) >= v5)
    v6 = *(_DWORD *)(a1 + 768);
  else
    v6 = (2 * v5) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(a1 + 776) + v7, *(_QWORD *)(a2 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a2 + 12));
  }
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 24);
}

uint64_t LiSceneDrawer::buildProgram(uint64_t a1, LiContext *a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  char v9;
  char v10;
  PC_Sp_counted_base *v11;
  uint64_t *v12;
  BOOL v13;
  PCMutex *v14;
  PCSharedCount v16;
  PCSharedCount v17;
  PC_Sp_counted_base *var0;
  PCSharedCount v19;
  PCMutex *v20;
  char v21;
  PCSharedCount v22[2];
  PCSharedCount v23;

  if ((v6 & 1) == 0
  {
    PCMutex::PCMutex(&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex);
    __cxa_atexit((void (*)(void *))PCMutex::~PCMutex, &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex, &dword_1B2737000);
  }
  if ((v7 & 1) == 0
  {
    qword_1EF0762B0 = 0;
    qword_1EF0762A8 = 0;
    LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus = (uint64_t)&qword_1EF0762A8;
    __cxa_atexit((void (*)(void *))std::map<PCHash128,BOOL>::~map[abi:ne180100], &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, &dword_1B2737000);
  }
  (*(void (**)(PCSharedCount *__return_ptr, uint64_t))(*(_QWORD *)a1 + 168))(v22, a1);
  v20 = &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex;
  PCMutex::lock(&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex);
  v21 = 1;
  if (!a3)
  {
    v12 = std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>((uint64_t)&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, (const PCHash128 *)v22);
    if (v12 != &qword_1EF0762A8)
    {
      v13 = 0;
      a3 = *((_BYTE *)v12 + 44) != 0;
      v14 = &LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex;
      if (!&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramMutex)
        return a3;
      goto LABEL_19;
    }
  }
  var0 = 0;
  PCSharedCount::PCSharedCount(&v19);
  v8 = 0;
  v9 = 1;
  while (1)
  {
    v10 = v9;
    LiMaterial::getProgram(a1, a2, v8, (uint64_t)&v16);
    var0 = v16.var0;
    PCSharedCount::PCSharedCount(&v23, &v17);
    PCSharedCount::operator=((uint64_t *)&v19, (uint64_t *)&v23);
    PCSharedCount::~PCSharedCount(&v23);
    PCSharedCount::~PCSharedCount(&v17);
    v11 = var0;
    if (!var0)
      throw_PCNullPointerException(1);
    *((_DWORD *)var0 + 328) = v8;
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v11 + 16))(v11);
    if (!var0)
    {
LABEL_10:
      v16.var0 = (PC_Sp_counted_base *)v22;
      *((_BYTE *)std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>((uint64_t **)&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, (const PCHash128 *)v22, (uint64_t)&std::piecewise_construct, &v16)+ 44) = 0;
      if (a3)
      {
        *(_QWORD *)a3 = var0;
        PCSharedCount::PCSharedCount(&v16, &v19);
        PCSharedCount::operator=((uint64_t *)(a3 + 8), (uint64_t *)&v16);
        PCSharedCount::~PCSharedCount(&v16);
        a3 = 0;
      }
      goto LABEL_18;
    }
    if (*((_DWORD *)var0 + 66) == 1)
      break;
    v9 = 0;
    v8 = 1;
    if ((v10 & 1) == 0)
      goto LABEL_10;
  }
  if (a3)
  {
    *(_QWORD *)a3 = var0;
    PCSharedCount::PCSharedCount(&v16, &v19);
    PCSharedCount::operator=((uint64_t *)(a3 + 8), (uint64_t *)&v16);
    PCSharedCount::~PCSharedCount(&v16);
  }
  v16.var0 = (PC_Sp_counted_base *)v22;
  a3 = 1;
  *((_BYTE *)std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>((uint64_t **)&LiSceneDrawer::buildProgram(LiMaterial *,LiContext &,PCPtr<ProShade::Program> *,BOOL)::compiledProgramStatus, (const PCHash128 *)v22, (uint64_t)&std::piecewise_construct, &v16)+ 44) = 1;
LABEL_18:
  PCSharedCount::~PCSharedCount(&v19);
  v14 = v20;
  v13 = v21 == 0;
  if (v20)
  {
LABEL_19:
    if (!v13)
      PCMutex::unlock(v14);
  }
  return a3;
}

void sub_1B2DA0190()
{
  JUMPOUT(0x1B2DA01E4);
}

void sub_1B2DA01A4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v3;

  PCSharedCount::~PCSharedCount(v1);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&v3);
  _Unwind_Resume(a1);
}

uint64_t std::map<PCHash128,BOOL>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void unbindAllTextures(void)
{
  _BYTE v0[40];

  ProGL::GL::GL((ProGL::GL *)v0);
  glActiveTexture(0x84C0u);
  ProGL::GL::~GL((ProGL::GL *)v0);
}

void sub_1B2DA024C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

__n128 LiSceneDrawer::setMaterialUniforms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t k;
  __n128 result;

  if (a3 != a2)
  {
    v3 = 0;
    v4 = a3;
    v5 = a2;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v5 + i) = *(_QWORD *)(v4 + i);
      ++v3;
      v5 += 32;
      v4 += 32;
    }
    while (v3 != 4);
  }
  if (a2 != a3)
  {
    v7 = 0;
    v8 = a3 + 128;
    v9 = a2 + 128;
    do
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v9 + j) = *(_QWORD *)(v8 + j);
      ++v7;
      v9 += 32;
      v8 += 32;
    }
    while (v7 != 4);
  }
  if (a2 != a3)
  {
    v11 = 0;
    v12 = a3 + 256;
    v13 = a2 + 256;
    do
    {
      for (k = 0; k != 32; k += 8)
        *(_QWORD *)(v13 + k) = *(_QWORD *)(v12 + k);
      ++v11;
      v13 += 32;
      v12 += 32;
    }
    while (v11 != 4);
  }
  *(_OWORD *)(a2 + 384) = *(_OWORD *)(a3 + 384);
  *(_OWORD *)(a2 + 400) = *(_OWORD *)(a3 + 400);
  result = *(__n128 *)(a3 + 416);
  *(__n128 *)(a2 + 416) = result;
  *(_DWORD *)(a2 + 432) = *(_DWORD *)(a3 + 432);
  return result;
}

void should_do_NVIDIA_gpureset_workaround(ProGL::GL *a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL36should_do_NVIDIA_gpureset_workaroundRN5ProGL2GLE_block_invoke;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = a1;
  if (should_do_NVIDIA_gpureset_workaround(ProGL::GL &)::predicate != -1)
    dispatch_once(&should_do_NVIDIA_gpureset_workaround(ProGL::GL &)::predicate, block);
}

BOOL PCRect<double>::overlaps(double *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;

  v2 = a1[2];
  if (v2 < 0.0)
    return 0;
  v3 = a1[3];
  if (v3 < 0.0)
    return 0;
  v4 = 0;
  v5 = a2[2];
  if (v5 >= 0.0)
  {
    v6 = a2[3];
    if (v6 >= 0.0)
    {
      v7 = v5 + *a2;
      if (v2 + *a1 > *a2 && *a1 < v7)
      {
        v9 = a1[1];
        v10 = a2[1];
        if (v9 < v10 + v6)
          return v9 + v3 > v10;
      }
      return 0;
    }
  }
  return v4;
}

uint64_t LiSceneDrawer::setIsolatedGroupToRender(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 480) = a2;
  return this;
}

void std::vector<LiLightSet>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::destroy(a1, a2[1].var0);
    PCSharedCount::~PCSharedCount(a2 + 67);
    PCSharedCount::~PCSharedCount(a2 + 65);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__emplace_unique_key_args<LiSceneDrawer::ByMaterial::MaterialKey,std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v9 >= v7)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v7 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<LiSceneDrawer::ByMaterial::MaterialKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[2] = **a2;
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &unk_1E65799B8;
  *((_QWORD *)v6 + 6) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2DA0644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E65799B8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E65799B8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiSceneDrawer::DrawObject,PCArray_Traits<LiSceneDrawer::DrawObject>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  PCException *exception;
  __int128 v28;
  __int128 v29;
  PCString v30;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "PCArray::resize");
    PCException::PCException(exception, &v30);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(_DWORD *)(a1 + 12);
    if (a2 > v6)
    {
      v7 = 472 * v6;
      v8 = a2 - v6;
      __asm { FMOV            V0.2D, #1.0 }
      v28 = _Q0;
      do
      {
        v14 = *(_QWORD *)(a1 + 16) + v7;
        *(_QWORD *)(v14 + 464) = 0;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_QWORD *)(v14 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(v14 + 40) = 0x3FF0000000000000;
        *(_QWORD *)v14 = 0x3FF0000000000000;
        *(_OWORD *)(v14 + 8) = 0u;
        *(_OWORD *)(v14 + 24) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 88) = 0u;
        *(_OWORD *)(v14 + 104) = 0u;
        *(_QWORD *)(v14 + 208) = 0x3FF0000000000000;
        *(_QWORD *)(v14 + 168) = 0x3FF0000000000000;
        *(_OWORD *)(v14 + 120) = v28;
        *(_OWORD *)(v14 + 136) = 0u;
        *(_OWORD *)(v14 + 152) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 216) = 0u;
        *(_OWORD *)(v14 + 232) = 0u;
        *(_QWORD *)(v14 + 376) = 0x3FF0000000000000;
        *(_QWORD *)(v14 + 336) = 0x3FF0000000000000;
        *(_QWORD *)(v14 + 296) = 0x3FF0000000000000;
        *(_OWORD *)(v14 + 248) = v28;
        *(_OWORD *)(v14 + 264) = 0u;
        *(_OWORD *)(v14 + 280) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 344) = 0u;
        *(_OWORD *)(v14 + 360) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v14 + 440));
        *(_DWORD *)(v14 + 456) = 1065353216;
        *(_WORD *)(v14 + 460) = 257;
        v7 += 472;
        *(_BYTE *)(v14 + 462) = 0;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v15 = (char *)operator new[]();
      bzero(v15, 472 * v3);
    }
    else
    {
      v15 = 0;
    }
    v16 = *(_DWORD *)(a1 + 12);
    if (a2 >= v16)
      v17 = v16;
    else
      v17 = a2;
    if ((int)v17 < 1)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 16);
      v19 = v15;
      v20 = v17;
      do
      {
        memcpy(v19, (const void *)v18, 0x1B0uLL);
        v21 = *(_OWORD *)(v18 + 432);
        *(_OWORD *)(v19 + 447) = *(_OWORD *)(v18 + 447);
        *((_OWORD *)v19 + 27) = v21;
        *((_QWORD *)v19 + 58) = *(_QWORD *)(v18 + 464);
        v19 += 472;
        v18 += 472;
        --v20;
      }
      while (v20);
    }
    if ((int)v17 <= v16)
      v22 = v16;
    else
      v22 = v17;
    if ((int)v22 < a2)
    {
      v23 = (uint64_t)&v15[472 * v22 + 248];
      v24 = a2 - (unint64_t)v22;
      __asm { FMOV            V0.2D, #1.0 }
      v29 = _Q0;
      do
      {
        *(_QWORD *)(v23 + 216) = 0;
        *(_OWORD *)(v23 + 200) = 0u;
        *(_OWORD *)(v23 + 184) = 0u;
        *(_QWORD *)(v23 - 168) = 0x3FF0000000000000;
        *(_QWORD *)(v23 - 208) = 0x3FF0000000000000;
        *(_QWORD *)(v23 - 248) = 0x3FF0000000000000;
        *(_OWORD *)(v23 - 240) = 0u;
        *(_OWORD *)(v23 - 224) = 0u;
        *(_OWORD *)(v23 - 200) = 0u;
        *(_OWORD *)(v23 - 184) = 0u;
        *(_OWORD *)(v23 - 160) = 0u;
        *(_OWORD *)(v23 - 144) = 0u;
        *(_QWORD *)(v23 - 40) = 0x3FF0000000000000;
        *(_QWORD *)(v23 - 80) = 0x3FF0000000000000;
        *(_OWORD *)(v23 - 128) = v29;
        *(_OWORD *)(v23 - 112) = 0u;
        *(_OWORD *)(v23 - 96) = 0u;
        *(_OWORD *)(v23 - 56) = 0u;
        *(_OWORD *)(v23 - 72) = 0u;
        *(_OWORD *)(v23 - 32) = 0u;
        *(_OWORD *)(v23 - 16) = 0u;
        *(_QWORD *)(v23 + 128) = 0x3FF0000000000000;
        *(_QWORD *)(v23 + 88) = 0x3FF0000000000000;
        *(_QWORD *)(v23 + 48) = 0x3FF0000000000000;
        *(_OWORD *)v23 = v29;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *(_OWORD *)(v23 + 96) = 0u;
        *(_OWORD *)(v23 + 112) = 0u;
        *(_OWORD *)(v23 + 136) = 0u;
        *(_OWORD *)(v23 + 152) = 0u;
        *(_OWORD *)(v23 + 168) = 0u;
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v23 + 192));
        *(_DWORD *)(v23 + 208) = 1065353216;
        *(_WORD *)(v23 + 212) = 257;
        *(_BYTE *)(v23 + 214) = 0;
        v23 += 472;
        --v24;
      }
      while (v24);
    }
    v26 = *(_QWORD *)(a1 + 16);
    if (v26)
      MEMORY[0x1B5E2914C](v26, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v15;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2DA0A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[6];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    operator delete(v2);
  }
}

uint64_t std::pair<double,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double const&,LiSceneDrawer::ObjectDrawInfo&,0>(uint64_t a1, _QWORD *a2, char *__src)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = (_OWORD *)(a1 + 392);
  *(_QWORD *)a1 = *a2;
  v6 = a1 + 8;
  memcpy((void *)(a1 + 8), __src, 0x180uLL);
  *v5 = *((_OWORD *)__src + 24);
  v5[1] = *((_OWORD *)__src + 25);
  v5[2] = *((_OWORD *)__src + 26);
  v7 = *((_OWORD *)__src + 27);
  *(_OWORD *)(v6 + 447) = *(_OWORD *)(__src + 447);
  *(_OWORD *)(v6 + 432) = v7;
  v5[5] = *((_OWORD *)__src + 29);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 488), (const PCSharedCount *)__src + 60);
  *(_QWORD *)(a1 + 496) = *((_QWORD *)__src + 61);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 504), (const PCSharedCount *)__src + 62);
  v8 = *(_OWORD *)(__src + 504);
  v9 = *(_OWORD *)(__src + 520);
  *(_OWORD *)(a1 + 537) = *(_OWORD *)(__src + 529);
  *(_OWORD *)(a1 + 512) = v8;
  *(_OWORD *)(a1 + 528) = v9;
  return a1;
}

void sub_1B2DA0BBC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ___ZL36should_do_NVIDIA_gpureset_workaroundRN5ProGL2GLE_block_invoke()
{
  char *String;
  _QWORD *v1;
  uint64_t v2;
  int v3;
  void *v4;
  char *v5;
  void *v6;
  char *v7;
  _QWORD v9[2];
  unsigned __int8 v10;

  String = (char *)glGetString(0x1F01u);
  if (String)
  {
    v1 = v9;
    std::string::basic_string[abi:ne180100]<0>(v9, String);
    v2 = v10;
    v3 = (char)v10;
    v4 = (void *)v9[0];
    if ((v10 & 0x80u) != 0)
    {
      v2 = v9[1];
      v1 = (_QWORD *)v9[0];
    }
    if (v2 >= 6)
    {
      v5 = (char *)v1 + v2;
      v6 = v1;
      do
      {
        v7 = (char *)memchr(v6, 78, v2 - 5);
        if (!v7)
          break;
        if (*(_DWORD *)v7 == 1145656910 && *((_WORD *)v7 + 2) == 16713)
        {
          if (v7 != v5 && v7 - (char *)v1 != -1)
            should_do_NVIDIA_gpureset_workaround(ProGL::GL &)::isNVIDIA = 1;
          break;
        }
        v6 = v7 + 1;
        v2 = v5 - (_BYTE *)v6;
      }
      while (v5 - (_BYTE *)v6 >= 6);
    }
    if (v3 < 0)
      operator delete(v4);
  }
}

void ___ZL31should_do_INTEL_6000_workaroundRN5ProGL2GLE_block_invoke()
{
  char *String;
  unint64_t v1;
  char *v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::regex_traits<char> v7[2];
  std::__shared_weak_count *v8;
  void *v9[2];
  unsigned __int8 v10;
  std::match_results<const char *> __p;

  String = (char *)glGetString(0x1F01u);
  std::string::basic_string[abi:ne180100]<0>(v9, String);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v7, "intel.* pro graphics 6[[:digit:]]{3}", 33);
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v1 = v10;
  if ((v10 & 0x80u) == 0)
    v2 = (char *)v9;
  else
    v2 = (char *)v9[0];
  if ((v10 & 0x80u) != 0)
    v1 = (unint64_t)v9[1];
  v3 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v7, v2, &v2[v1], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v3)
    should_do_INTEL_6000_workaround(ProGL::GL &)::isINTEL6000 = 1;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::locale::~locale(&v7[0].__loc_);
  if ((char)v10 < 0)
    operator delete(v9[0]);
}

void sub_1B2DA0DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::locale::~locale(&a10);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1B2DA0E80(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1B5E29068]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1B2DA0EE4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E6579A30;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1B2DA104C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA10A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E6579BA8;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E6579BF0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA1740(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6579A88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2DA17C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__empty_state<char>::~__empty_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1B5E29170);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_1E657A070;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_1E657A0B8;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_1B2DA1CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_1E6579CC8;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_1E6579C38;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1B2DA230C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA2368(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579C38;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579C38;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_1E6579C80;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579C80;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579C80;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E29170);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1B2DA2928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const char *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1B2DA2D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<PCVector3<double>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA3010(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA305C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_OZKeyframeInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1B2DA31A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B2DA372C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B2DA379C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1E6579F08;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1E6579F50;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA3B04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA3BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  char v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E6579D58;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E6579DA0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1B2DA4128(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA4184(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E6579E78;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E6579D10;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1B2DA4300(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579D10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579D10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579D58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579D58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579DE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579DE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579E30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E6579E30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E29170);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_1B2DA4A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1B2DA4D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1B5E29170](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  _BOOL4 negate;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  std::vector<std::pair<std::string, std::string>>::pointer v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  std::vector<std::string>::pointer v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  std::string *v79;
  std::string::size_type v80;
  int v81;
  std::string *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  std::string::size_type v100;
  int v101;
  std::string *v102;
  void **v103;
  uint64_t v104;
  int v105;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v108;
  std::regex_traits<char>::char_class_type neg_mask;
  int v110;
  std::__node<char> *first;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v125 = *current;
  v7 = current[1];
  v126 = v7;
  if (this->__icase_)
  {
    v125 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v126 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second)
        goto LABEL_218;
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    v14 = this->__ranges_.__begin_;
    v15 = v124;
    v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v23 >= 0)
          v25 = v14;
        else
          v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        if (size >= v19)
          v26 = v19;
        else
          v26 = size;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= size;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0)
            v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          else
            v30 = v14->second.__r_.__value_.__l.__size_;
          if (v29 >= 0)
            data = &v14->second;
          else
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(data, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          v35 = 0;
          negate = 0;
          goto LABEL_162;
        }
      }
      negate = 1;
      v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      negate = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_200;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = this->__equivalences_.__begin_;
  v90 = v124;
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v101 = (char)v100;
      if ((v100 & 0x80u) != 0)
        v100 = v99->__r_.__value_.__l.__size_;
      if (v96 == v100)
      {
        if (v101 >= 0)
          v102 = &v89[v92];
        else
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0])
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            negate = 1;
            v35 = 5;
            goto LABEL_192;
          }
          negate = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_213;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              negate = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    negate = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = *a2->__current_;
  v125 = v39;
  if (this->__icase_)
  {
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v125 = v39;
  }
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_77;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      v49 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      v119 = v37;
      v116 = negate;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0)
          v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        else
          v58 = v49->first.__r_.__value_.__l.__size_;
        if (v57 >= 0)
          v59 = v49;
        else
          v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          else
            v64 = v49->second.__r_.__value_.__l.__size_;
          if (v63 >= 0)
            v65 = &v49->second;
          else
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          negate = v116;
          goto LABEL_123;
        }
      }
      negate = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_154;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = this->__equivalences_.__begin_;
  v70 = v124;
  v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v81 = (char)v80;
      if ((v80 & 0x80u) != 0)
        v80 = v79->__r_.__value_.__l.__size_;
      if (v76 == v80)
      {
        if (v81 >= 0)
          v82 = &v69[v72];
        else
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        if ((v70 & 0x80) != 0)
        {
          v117 = negate;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          negate = v117;
          if (!v86)
          {
            negate = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            negate = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1B2DA5A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1B2DA5BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1B2DA5D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA5DEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_1B2DA614C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_1B2DA6350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_1B2DA6BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA6E50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1B2DA6EF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B2DA700C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA7268(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1B2DA7318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1B2DA76B4(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA7700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E6579F98;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1E657A028;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1B2DA7ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA7BB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA7C04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579FF8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579FF8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E29170);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579FF8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579FF8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E29170);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E6579FF8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E29170);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E28D38](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B2DA802C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E657A100;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E657A100;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_1B2DA90A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_1B2DA95F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B304F0C0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2DA9B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B2DA9F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::destroy(a1, a2[1].var0);
    LiSceneDrawer::ByMaterial::~ByMaterial((LiSceneDrawer::ByMaterial *)&a2[6]);
    PCSharedCount::~PCSharedCount(a2 + 5);
    operator delete(a2);
  }
}

void LiSceneDrawer::ByMaterial::~ByMaterial(LiSceneDrawer::ByMaterial *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(*(_QWORD *)this, *(_QWORD **)(v1 + 8));
    MEMORY[0x1B5E29170](v1, 0x1020C4062D53EE8);
  }
}

void std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::__map_value_compare<LiSceneDrawer::ByMaterial::MaterialKey,std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>,std::less<LiSceneDrawer::ByMaterial::MaterialKey>,true>,std::allocator<std::__value_type<LiSceneDrawer::ByMaterial::MaterialKey,LiSceneDrawer::DrawingList>>>::destroy(a1, a2[1]);
    v4 = a2[6];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

void std::vector<LiSceneDrawer::MaterialInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<LiSceneDrawer::MaterialInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<LiSceneDrawer::MaterialInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 8));
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 24));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorShineOut>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  void (***v3)(LiLight *__hidden);

  *(_QWORD *)(a1 + 16) = &unk_1E657A148;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    v3 = *(void (****)(LiLight *__hidden))(a1 + 8);
    if (!v3 || *v3 == &off_1E657B040)
      break;
    LiSceneIterator<LiLight,LiSceneIteratorShineOut>::next(a1);
  }
  return a1;
}

void sub_1B2DAA5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiLight,LiSceneIteratorShineOut>::next(uint64_t a1)
{
  const void *v2;
  PCArray_base *v3;
  PCArray_base *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  uint64_t j;
  _OWORD *v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  signed int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (v4 = v3,
          v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(_QWORD *)v3 + 136))(v3),
          (_DWORD)v3)
      && (v4 == *(PCArray_base **)a1 || *((_BYTE *)v4 + 645)))
    {
      v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5)
        v6 = (2 * (v5 + 1)) | 1;
      else
        v6 = *(_DWORD *)(a1 + 24);
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      v7 = *(_QWORD *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(_QWORD *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 136) = 0;
      v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        v9 = 0;
        v10 = a1 + 40;
        v11 = v8;
        do
        {
          for (i = 0; i != 32; i += 8)
            *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      v13 = (*(uint64_t (**)(PCArray_base *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
      *(_QWORD *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (__int128 *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (j = 0; j != 8; j += 2)
        {
          v16 = (_OWORD *)(a1 + 40 + j * 16);
          v14 = v34[j];
          v17 = v34[j + 1];
          *v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0)
            PCArray_base::badIndex(v3);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 32);
          v22 = (uint64_t *)(v21 + 144 * v20);
          v23 = *v22;
          v25 = *((_DWORD *)v22 + 2);
          v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) - 1))
            break;
          v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26)
            v27 = *(_DWORD *)(a1 + 24);
          else
            v27 = (2 * v26) | 1;
          v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          v18 = *(_DWORD *)(a1 + 28);
          if (!v18)
            goto LABEL_27;
        }
        ++*v24;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
        *(_QWORD *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (__int128 *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 120) = v29;
          v30 = v40;
          *(_OWORD *)(a1 + 136) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          v31 = v34[1];
          *v19 = v34[0];
          *(_OWORD *)(a1 + 56) = v31;
          *(_QWORD *)&v14 = v35;
          v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_27:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
        *(_QWORD *)&v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E657A148;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorShineOut>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E657A148;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorShineOut>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = &unk_1E657A148;
  v2 = a1 + 16;
  if (*(int *)(v2 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(v2 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::vector<LiLightSet>::__push_back_slow_path<LiLightSet const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  std::vector<LiLightSet>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<LiLightSet>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B2DAAA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LiLightSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = &unk_1E64FC250;
  v5 = *(_DWORD *)(a3 + 12);
  if (v5 <= 0)
    v6 = 0;
  else
    v6 = (2 * v5) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a2, v5, v6);
  if (*(int *)(a3 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(a2 + 16) + v7, *(_QWORD *)(a3 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a3 + 12));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
}

uint64_t std::vector<LiLightSet>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiLightSet>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiLightSet>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>,std::reverse_iterator<LiLightSet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 32;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 32;
    std::allocator<LiLightSet>::construct[abi:ne180100]<LiLightSet,LiLightSet const&>(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<LiLightSet>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__emplace_unique_key_args<PCPtr<ProShade::Program>,std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const PCSharedCount **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[5];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

PCSharedCount *std::__tree<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::__map_value_compare<PCPtr<ProShade::Program>,std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,std::less<PCPtr<ProShade::Program>>,true>,std::allocator<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCPtr<ProShade::Program> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, const PCSharedCount **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCSharedCount *v6;
  PCSharedCount *result;

  v5 = a1 + 8;
  v6 = (PCSharedCount *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<PCPtr<ProShade::Program> const,LiSceneDrawer::ByMaterial>::pair[abi:ne180100]<PCPtr<ProShade::Program> const&>(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2DAADBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

PCSharedCount *std::pair<PCPtr<ProShade::Program> const,LiSceneDrawer::ByMaterial>::pair[abi:ne180100]<PCPtr<ProShade::Program> const&>(PCSharedCount *a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *v3;

  a1->var0 = a2->var0;
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  v3 = (PC_Sp_counted_base *)operator new();
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)v3 = (char *)v3 + 8;
  a1[2].var0 = v3;
  return a1;
}

void sub_1B2DAAE38(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCPtr<ProShade::Program>,LiSceneDrawer::ByMaterial>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCSharedCount *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    LiSceneDrawer::ByMaterial::~ByMaterial((LiSceneDrawer::ByMaterial *)&__p[6]);
    PCSharedCount::~PCSharedCount(__p + 5);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(uint64_t a1, const PCHash128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = operator<((const PCHash128 *)((char *)v3 + 28), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || operator<(a2, (const PCHash128 *)((char *)v5 + 28)))
    return v2;
  return v5;
}

_DWORD *std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t v11;

  v6 = (void **)std::__tree<PCHash128>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v9 = *a4;
    v7[7] = **a4;
    v7[8] = v9[1];
    v7[9] = v9[2];
    v7[10] = v9[3];
    *((_BYTE *)v7 + 44) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::vector<LiSceneDrawer::MaterialInfo>::__push_back_slow_path<LiSceneDrawer::MaterialInfo const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  PCSharedCount *v12;
  PCSharedCount *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (PCSharedCount *)&v8[32 * v3];
  v14 = &v8[32 * v7];
  std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>((uint64_t)(a1 + 2), v12, a2);
  v13 = v12 + 4;
  std::vector<LiSceneDrawer::MaterialInfo>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<LiSceneDrawer::MaterialInfo>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B2DAB084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LiSceneDrawer::MaterialInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>(uint64_t a1, PCSharedCount *a2, const PCSharedCount *a3)
{
  a2->var0 = a3->var0;
  PCSharedCount::PCSharedCount(a2 + 1, a3 + 1);
  a2[2].var0 = a3[2].var0;
  PCSharedCount::PCSharedCount(a2 + 3, a3 + 3);
}

void sub_1B2DAB0EC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LiSceneDrawer::MaterialInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>((uint64_t)(a1 + 2), a1[1], (const PCSharedCount *)a1[1], *a1, (const PCSharedCount *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>(uint64_t a1, uint64_t a2, const PCSharedCount *a3, uint64_t a4, const PCSharedCount *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const PCSharedCount *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 4;
      std::allocator<LiSceneDrawer::MaterialInfo>::construct[abi:ne180100]<LiSceneDrawer::MaterialInfo,LiSceneDrawer::MaterialInfo const&>(a1, (PCSharedCount *)(v7 - 32), v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B2DAB228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<LiSceneDrawer::MaterialInfo>,std::reverse_iterator<LiSceneDrawer::MaterialInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  v1 = *(PCSharedCount **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(PCSharedCount **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    PCSharedCount::~PCSharedCount(v1 + 3);
    PCSharedCount::~PCSharedCount(v1 + 1);
    v1 += 4;
  }
}

uint64_t std::__split_buffer<LiSceneDrawer::MaterialInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<LiSceneDrawer::MaterialInfo>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<LiSceneDrawer::MaterialInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 8));
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 24));
  }
}

double *std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__emplace_multi<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  double *v7;

  std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__construct_node<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (v7[4] >= *((double *)v4 + 4))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, (uint64_t *)v7);
  return v7;
}

uint64_t std::__tree<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::__map_value_compare<double,std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,std::less<double>,true>,std::allocator<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>>>::__construct_node<std::pair<double,LiSceneDrawer::ObjectDrawInfo>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x250uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<double const,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double,LiSceneDrawer::ObjectDrawInfo,0>((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2DAB424(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<double const,LiSceneDrawer::ObjectDrawInfo>::pair[abi:ne180100]<double,LiSceneDrawer::ObjectDrawInfo,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x180uLL);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v6 = *(_OWORD *)(v5 + 432);
  *(_OWORD *)(v4 + 447) = *(_OWORD *)(v5 + 447);
  *(_OWORD *)(v4 + 432) = v6;
  v7 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v7;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 488), (const PCSharedCount *)(a2 + 488));
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 504), (const PCSharedCount *)(a2 + 504));
  v8 = *(_OWORD *)(a2 + 512);
  v9 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
  *(_OWORD *)(a1 + 512) = v8;
  *(_OWORD *)(a1 + 528) = v9;
  return a1;
}

void sub_1B2DAB508(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<double,LiSceneDrawer::ObjectDrawInfo>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCSharedCount *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    PCSharedCount::~PCSharedCount(__p + 67);
    PCSharedCount::~PCSharedCount(__p + 65);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::vector<LiSceneDrawer::DeferredGroup>::__push_back_slow_path<LiSceneDrawer::DeferredGroup>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0xCBEEA4E1A08AD8F3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x8AD8F2FBA93868)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = a2 + 49;
  v8 = (uint64_t)(a1 + 2);
  v9 = 0xCBEEA4E1A08AD8F3 * ((a1[2] - v3) >> 3);
  if (2 * v9 > v5)
    v5 = 2 * v9;
  if (v9 >= 0x456C797DD49C34)
    v10 = 0x8AD8F2FBA93868;
  else
    v10 = v5;
  v22 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>>(v8, v10);
  else
    v11 = 0;
  __p = v11;
  v19 = &v11[472 * v4];
  v21 = &v11[472 * v10];
  v14 = *a2;
  v13 = a2 + 1;
  v12 = v19;
  *(_QWORD *)v19 = v14;
  memcpy(v12 + 1, v13, 0x180uLL);
  *(_OWORD *)(v12 + 49) = *v7;
  *(_OWORD *)(v12 + 51) = v7[1];
  *(_OWORD *)(v12 + 53) = v7[2];
  v15 = v13[27];
  *(_OWORD *)((char *)v12 + 455) = *(_OWORD *)((char *)v13 + 447);
  *(_OWORD *)(v12 + 55) = v15;
  v20 = (char *)(v12 + 59);
  std::vector<LiSceneDrawer::DeferredGroup>::__swap_out_circular_buffer(a1, &__p);
  v16 = a1[1];
  if (v20 != v19)
    v20 = &v19[(v20 - v19 - 472) % 0x1D8uLL];
  if (__p)
    operator delete(__p);
  return v16;
}

void sub_1B2DAB6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LiSceneDrawer::DeferredGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x8AD8F2FBA93869)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(472 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiSceneDrawer::DeferredGroup>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>,std::reverse_iterator<LiSceneDrawer::DeferredGroup*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v7 = a7;
  if (a3 != a5)
  {
    v10 = a3;
    v11 = a7 - 80;
    do
    {
      *(_QWORD *)(v11 - 392) = *(_QWORD *)(v10 - 472);
      memcpy((void *)(v11 - 384), (const void *)(v10 - 464), 0x1B0uLL);
      v12 = *(_OWORD *)(v10 - 32);
      *(_OWORD *)(v11 + 63) = *(_OWORD *)(v10 - 17);
      *(_OWORD *)(v11 + 48) = v12;
      v11 -= 472;
      v7 -= 472;
      v10 -= 472;
    }
    while (v10 != a5);
  }
  return a6;
}

uint64_t **std::__tree<std::__value_type<double,PCRect<double>>,std::__map_value_compare<double,std::__value_type<double,PCRect<double>>,std::less<double>,true>,std::allocator<std::__value_type<double,PCRect<double>>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>(uint64_t **a1, double *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  uint64_t **v9;
  double v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((double *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void LiHeSolidRendererNode::LiHeSolidRendererNode(LiHeSolidRendererNode *this)
{
  PCSharedCount *v2;
  LiSolidRenderer *v3;

  HGNode::HGNode((HGNode *)this);
  v2->var0 = (PC_Sp_counted_base *)off_1E657A180;
  v2[51].var0 = 0;
  PCSharedCount::PCSharedCount(v2 + 52);
  *((_QWORD *)this + 69) = 0x3FF0000000000000;
  *((_QWORD *)this + 64) = 0x3FF0000000000000;
  *((_QWORD *)this + 59) = 0x3FF0000000000000;
  *((_QWORD *)this + 54) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 85) = 0x3FF0000000000000;
  *((_QWORD *)this + 80) = 0x3FF0000000000000;
  *((_QWORD *)this + 75) = 0x3FF0000000000000;
  *((_QWORD *)this + 70) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_QWORD *)this + 101) = 0x3FF0000000000000;
  *((_QWORD *)this + 96) = 0x3FF0000000000000;
  *((_QWORD *)this + 91) = 0x3FF0000000000000;
  *((_QWORD *)this + 86) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 117) = 0x3FF0000000000000;
  *((_QWORD *)this + 112) = 0x3FF0000000000000;
  *((_QWORD *)this + 107) = 0x3FF0000000000000;
  *((_QWORD *)this + 102) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_QWORD *)this + 137) = 0x3FF0000000000000;
  *((_QWORD *)this + 132) = 0x3FF0000000000000;
  *((_QWORD *)this + 127) = 0x3FF0000000000000;
  *((_QWORD *)this + 122) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_QWORD *)this + 141) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_QWORD *)this + 142) = 1065353216;
  *((_QWORD *)this + 143) = 0x20000000000;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 144);
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_QWORD *)this + 147) = 0xBFF0000000000000;
  *((_QWORD *)this + 148) = 0xBFF0000000000000;
  LiClipSet::LiClipSet((LiHeSolidRendererNode *)((char *)this + 1192));
  *((_QWORD *)this + 155) = &unk_1E656AAC8;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 156) = 0;
  *((_DWORD *)this + 316) = 1065353216;
  LiSolidDofInfo::LiSolidDofInfo((LiHeSolidRendererNode *)((char *)this + 1272));
  *((_WORD *)this + 740) = 0;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_DWORD *)this + 396) = 0;
  *((_QWORD *)this + 218) = 0x3FF0000000000000;
  *((_QWORD *)this + 213) = 0x3FF0000000000000;
  *((_QWORD *)this + 208) = 0x3FF0000000000000;
  *((_QWORD *)this + 203) = 0x3FF0000000000000;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_QWORD *)this + 222) = 0;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_QWORD *)this + 223) = (char *)this + 1792;
  *((_OWORD *)this + 113) = 0u;
  *((_QWORD *)this + 228) = 0;
  v3 = (LiSolidRenderer *)operator new();
  LiSolidRenderer::LiSolidRenderer(v3);
  *((_QWORD *)this + 140) = v3;
  (*(void (**)(LiHeSolidRendererNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 32);
  (*(void (**)(LiHeSolidRendererNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 4);
  *((_DWORD *)this + 106) = 0;
}

void sub_1B2DABBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  PCSharedCount *v11;
  PCString *v12;
  LiClipSet *v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  void *v18;

  v16 = v14;
  MEMORY[0x1B5E29170](v16, 0x10B1C406A02D483);
  v18 = *(void **)(v10 + 1808);
  if (v18)
  {
    *(_QWORD *)(v10 + 1816) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v10 + 1784, *v15);
  a10 = (void **)(v10 + 1760);
  std::vector<LiMaterialTextureInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray(v10 + 1240);
  LiClipSet::~LiClipSet(v13);
  PCString::~PCString(v12);
  PCSharedCount::~PCSharedCount(v11);
  HGNode::~HGNode((HGNode *)v10);
  _Unwind_Resume(a1);
}

void LiHeSolidRendererNode::~LiHeSolidRendererNode(LiHeSolidRendererNode *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = off_1E657A180;
  v2 = *((_QWORD *)this + 140);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 226);
  if (v3)
  {
    *((_QWORD *)this + 227) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1784, *((_QWORD **)this + 224));
  v6 = (void **)((char *)this + 1760);
  std::vector<LiMaterialTextureInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((_QWORD *)this + 155) = &unk_1E656AAC8;
  if (*((int *)this + 312) < 0)
    v4 = 1;
  else
    v4 = *((_DWORD *)this + 312);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 1240, 0, v4);
  v5 = *((_QWORD *)this + 157);
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *((_QWORD *)this + 157) = 0;
  *((_DWORD *)this + 312) = 0;
  LiClipSet::~LiClipSet((LiHeSolidRendererNode *)((char *)this + 1192));
  PCString::~PCString((PCString *)this + 144);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 52);
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  LiHeSolidRendererNode::~LiHeSolidRendererNode(this);
  HGObject::operator delete(v1);
}

void LiHeSolidRendererNode::addHeliumImageSourceInput(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const PCSharedCount *v8;
  PCSharedCount *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t SamplerInfo;
  char v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  PC_Sp_counted_base *var0;
  PCSharedCount v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[48];
  __int128 v40;
  __int128 v41;
  _BYTE v42[48];
  __int128 v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 136))(*a2, 0xFFFFFFFFLL, 2);
  (*(void (**)(_QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)a2[21] + 184))(a2[21], *(_QWORD *)(a2[22] + 16), a2, a2 + 1, a2 + 5);
  v6 = a2[22];
  v37 = 0uLL;
  *(_QWORD *)&v38 = 0;
  DWORD2(v38) = 1;
  BYTE12(v38) = 1;
  *(_QWORD *)&v42[40] = 0x3FF0000000000000;
  *(_QWORD *)v42 = 0x3FF0000000000000;
  *(_QWORD *)&v39[40] = 0x3FF0000000000000;
  *(_QWORD *)v39 = 0x3FF0000000000000;
  memset(&v39[8], 0, 32);
  v40 = 0u;
  v41 = 0u;
  memset(&v42[8], 0, 32);
  v43 = xmmword_1B30503B0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v44);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v46);
  v7 = *a2;
  v8 = (const PCSharedCount *)a2[22];
  *(_QWORD *)&v37 = a2[21];
  *((_QWORD *)&v37 + 1) = v7;
  var0 = v8[12].var0;
  PCSharedCount::PCSharedCount(&v36, v8 + 13);
  *(_QWORD *)&v38 = var0;
  PCSharedCount::~PCSharedCount(v9);
  v10 = a2[22];
  DWORD2(v38) = *(_DWORD *)(v10 + 320);
  if (a2 + 5 != (_QWORD *)v39)
  {
    v11 = 0;
    v12 = a2 + 5;
    do
    {
      v13 = &v39[v11 * 8];
      v14 = *(_OWORD *)&v12[v11 + 2];
      *v13 = *(_OWORD *)&v12[v11];
      v13[1] = v14;
      v11 += 4;
    }
    while (v11 != 16);
  }
  v44 = *(_OWORD *)(v10 + 120);
  SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)a2[21], *(const ProShade::SamplerNode **)(v6 + 16));
  v16 = *(_BYTE *)(SamplerInfo + 337);
  BYTE12(v38) = *(_BYTE *)(SamplerInfo + 329) & 1;
  v45 = v16 & 1;
  v17 = *(_QWORD *)(a1 + 1768);
  if (v17 >= *(_QWORD *)(a1 + 1776))
  {
    v29 = std::vector<LiMaterialTextureInfo>::__push_back_slow_path<LiMaterialTextureInfo const&>((uint64_t *)(a1 + 1760), &v37);
  }
  else
  {
    v18 = v37;
    v19 = *(_OWORD *)v39;
    *(_OWORD *)(v17 + 16) = v38;
    *(_OWORD *)(v17 + 32) = v19;
    *(_OWORD *)v17 = v18;
    v20 = *(_OWORD *)&v39[16];
    v21 = *(_OWORD *)&v39[32];
    v22 = v41;
    *(_OWORD *)(v17 + 80) = v40;
    *(_OWORD *)(v17 + 96) = v22;
    *(_OWORD *)(v17 + 48) = v20;
    *(_OWORD *)(v17 + 64) = v21;
    v23 = *(_OWORD *)v42;
    v24 = *(_OWORD *)&v42[16];
    v25 = v43;
    *(_OWORD *)(v17 + 144) = *(_OWORD *)&v42[32];
    *(_OWORD *)(v17 + 160) = v25;
    *(_OWORD *)(v17 + 112) = v23;
    *(_OWORD *)(v17 + 128) = v24;
    *(_OWORD *)(v17 + 176) = v44;
    *(_BYTE *)(v17 + 192) = v45;
    *(_QWORD *)(v17 + 200) = v46;
    v26 = v47;
    *(_QWORD *)(v17 + 208) = v47;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    v29 = v17 + 216;
    *(_QWORD *)(a1 + 1768) = v17 + 216;
  }
  *(_QWORD *)(a1 + 1768) = v29;
  if (a3)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 120))(a1, *(unsigned int *)(a1 + 1752), *a2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 136))(a1, *(unsigned int *)(a1 + 1752), 2);
    v30 = *(_QWORD *)(a1 + 1768);
    v31 = *(_QWORD *)(a1 + 1760);
    var0 = (PC_Sp_counted_base *)(a1 + 1752);
    *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 1784), (int *)(a1 + 1752), (uint64_t)&std::piecewise_construct, (unsigned int **)&var0)+ 8) = 1749801491 * ((unint64_t)(v30 - v31) >> 3) - 1;
    ++*(_DWORD *)(a1 + 1752);
  }
  v32 = v47;
  if (v47)
  {
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1B2DAC098(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void LiHeSolidRendererNode::createHeliumNodesFromImageSources(_QWORD *a1, const void **a2, const LiRenderParameters **a3)
{
  const void *v3;
  void *v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  PCShared_base *v12;
  void *v13;
  void *v14;
  char *v15;
  PCSharedCount *v16;
  uint64_t v22;
  uint64_t v23;
  PCSharedCount *v24;
  int v25;
  int32x4_t *v26;
  int32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  int32x4_t *v33;
  __int32 v34;
  int32x4_t *v35;
  uint64_t v36;
  CGColorSpace *CGColorSpace;
  float v38;
  float v39;
  float v40;
  CGColorSpace *v41;
  const FxColorDescription *RequestedColorDescription;
  double v43;
  double v44;
  double v45;
  double v46;
  HGNode *v47;
  unint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  int64x2_t v52;
  HGCrop *v53;
  double v54;
  double v55;
  int64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t j;
  float v61;
  void *v62;
  HGCrop *v63;
  HGCrop *v64;
  HGCrop *v65;
  uint64_t v66;
  HGCrop *v67;
  HGCrop *v68;
  _OWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t i;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  LiMaterialSamplerInfo **v76;
  LiMaterialSamplerInfo *v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  const LiRenderParameters **v99;
  int v100;
  int v101;
  void *v102;
  char *v103;
  float64x2_t v104;
  double v105;
  float64x2_t v106;
  uint64_t *v107;
  float v108[3];
  float v109[3];
  float v110[3];
  LiImageSource *v111;
  PCSharedCount v112;
  int32x4_t v113;
  unint64_t v114;
  int32x4_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _OWORD v119[3];
  __int128 v120;
  __int128 v121;
  _OWORD v122[3];
  HGCrop *v123;
  float64x2_t v124;
  double v125;
  double v126;
  int v127;
  int v128;
  int v129;
  int v130;
  HGNode *v131;
  float64x2_t v132;
  float64x2_t v133;
  FxColorDescription v134;
  _BYTE v135[176];
  uint64_t v136;
  int v137;
  int v138;
  char v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  float v142[3];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (!*a2)
    return;
  if (v6)
  {
    v7 = v6;
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 136))(v6);
    if (v8 >= 1)
    {
      v9 = v8;
      v10 = 0;
      do
      {
        v11 = (_QWORD *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v7 + 144))(v7, v10);
        *(_QWORD *)v135 = v11;
        if (v11)
          v12 = (PCShared_base *)((char *)v11 + *(_QWORD *)(*v11 - 24));
        else
          v12 = 0;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v135[8], v12);
        LiHeSolidRendererNode::createHeliumNodesFromImageSources(a1, v135, a3);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v135[8]);
        v10 = (v10 + 1);
      }
      while (v9 != (_DWORD)v10);
    }
    return;
  }
  if (!v13)
    return;
  v14 = v13;
  *((_QWORD *)&v122[2] + 1) = 0x3FF0000000000000;
  v123 = 0;
  *(_QWORD *)&v122[0] = 0x3FF0000000000000;
  *((_QWORD *)&v119[2] + 1) = 0x3FF0000000000000;
  v118 = 0;
  *(_QWORD *)&v119[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)v119 + 8) = 0u;
  *(_OWORD *)((char *)&v119[1] + 8) = 0u;
  v120 = 0u;
  v121 = 0u;
  *(_OWORD *)((char *)v122 + 8) = 0u;
  *(_OWORD *)((char *)&v122[1] + 8) = 0u;
  v116 = 0;
  v117 = 0;
  LiMaterial::getSamplerInfos((uint64_t)v13, &v116);
  v15 = v116;
  v103 = v117;
  if (v116 == v117)
    goto LABEL_152;
  v99 = a3;
  v16 = (PCSharedCount *)&v135[8];
  v98 = a1 + 226;
  v107 = a1 + 220;
  __asm { FMOV            V0.2D, #-1.0 }
  v104 = _Q0;
  v102 = v14;
  do
  {
    v22 = *(_QWORD *)v15;
    *(_QWORD *)v135 = *(_QWORD *)(*(_QWORD *)v15 + 96);
    PCSharedCount::PCSharedCount(v16, (const PCSharedCount *)(v22 + 104));
    v23 = *(_QWORD *)v135;
    PCSharedCount::~PCSharedCount(v24);
    if (!v23)
      goto LABEL_114;
    v25 = *(_DWORD *)(v22 + 324);
    v100 = *(unsigned __int8 *)(v22 + 328);
    v101 = *(unsigned __int8 *)(v22 + 319);
    v115 = *(int32x4_t *)(v22 + 120);
    SamplerAttributes::getHash((SamplerAttributes *)(v22 + 316));
    PCHash128::operator+=(v115.i32, (int *)v135);
    v26 = (int32x4_t *)a1[227];
    v27 = (int32x4_t *)a1[226];
    v28 = (char *)v26 - (char *)v27;
    if (v26 != v27)
    {
      v29 = 0;
      v30 = 0;
      v31 = v28 / 24;
      if (v31 <= 1)
        v32 = 1;
      else
        v32 = v31;
      v33 = v27 + 1;
      while (1)
      {
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v115, v33[-1])), 0xFuLL))) & 1) != 0)
        {
          v34 = v33->i32[0];
          if (v33->i32[0] != -1)
          {
            if (*(_QWORD *)(*v107 + 216 * v34 + 8))
              break;
          }
        }
        v33 = (int32x4_t *)((char *)v33 + 24);
        v30 = v31 <= ++v29;
        if (v32 == v29)
          goto LABEL_23;
      }
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v135);
      *(int32x4_t *)v135 = v115;
      *(_DWORD *)&v135[16] = 1749801491 * ((a1[221] - a1[220]) >> 3);
      *(_DWORD *)&v135[20] = v34;
      v48 = a1[227];
      if (v48 >= a1[228])
      {
        v49 = std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__push_back_slow_path<LiHeSolidRendererNode::UniqueInputInfo const&>(v98, (uint64_t)v135);
      }
      else
      {
        *(_DWORD *)v48 = *(_DWORD *)v135;
        *(_DWORD *)(v48 + 4) = *(_DWORD *)&v135[4];
        *(_DWORD *)(v48 + 8) = *(_DWORD *)&v135[8];
        *(_DWORD *)(v48 + 12) = *(_DWORD *)&v135[12];
        *(_QWORD *)(v48 + 16) = *(_QWORD *)&v135[16];
        v49 = v48 + 24;
      }
      a1[227] = v49;
      v66 = a1[220];
      v67 = *(HGCrop **)(v66 + 216 * v34 + 8);
      if (v67)
      {
        (*(void (**)(HGCrop *))(*(_QWORD *)v67 + 16))(v67);
        v68 = v123;
        if (v123 == v67)
        {
          (*(void (**)(HGCrop *))(*(_QWORD *)v67 + 24))(v67);
LABEL_84:
          v69 = (_OWORD *)(v66 + 216 * v34 + 32);
          if (v69 != v119)
          {
            v70 = 0;
            v71 = v119;
            do
            {
              for (i = 0; i != 32; i += 8)
                *(_QWORD *)((char *)v71 + i) = *(_QWORD *)((char *)v69 + i);
              ++v70;
              v71 += 2;
              v69 += 2;
            }
            while (v70 != 4);
          }
          v73 = v66 + 216 * v34;
          v74 = *(_QWORD *)(v73 + 160);
          v75.i64[0] = (int)v74;
          v75.i64[1] = SHIDWORD(v74);
          v106 = vcvtq_f64_s64(v75);
          v54 = (double)*(int *)(v73 + 168);
          v55 = (double)*(int *)(v73 + 172);
          v62 = v102;
          goto LABEL_109;
        }
      }
      else
      {
        v68 = v123;
        if (!v123)
          goto LABEL_84;
      }
      if (v68)
        (*(void (**)(HGCrop *))(*(_QWORD *)v68 + 24))(v68);
      v123 = v67;
      goto LABEL_84;
    }
LABEL_23:
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v113);
    v113 = v115;
    v114 = (1749801491 * ((a1[221] - a1[220]) >> 3)) | 0xFFFFFFFF00000000;
    v35 = (int32x4_t *)a1[227];
    if ((unint64_t)v35 >= a1[228])
    {
      v36 = std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__push_back_slow_path<LiHeSolidRendererNode::UniqueInputInfo const&>(v98, (uint64_t)&v113);
    }
    else
    {
      *v35 = v113;
      v35[1].i64[0] = v114;
      v36 = (uint64_t)&v35[1].i64[1];
    }
    a1[227] = v36;
    CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(v22 + 112));
    PCGetColorSpaceLuminanceCoefficients(CGColorSpace, v142);
    v39 = v142[0];
    v38 = v142[1];
    v40 = v142[2];
    v111 = *(LiImageSource **)(v22 + 96);
    PCSharedCount::PCSharedCount(&v112, (const PCSharedCount *)(v22 + 104));
    v41 = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(v22 + 112));
    v105 = *(double *)(v22 + 136);
    LiAgent::LiAgent((LiAgent *)v135, v99[6], 1);
    RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)v99);
    FxColorDescription::FxColorDescription(&v134, RequestedColorDescription, v41);
    LiAgent::setRequestedColorDescription((CGColorSpace **)v135, &v134);
    v132 = 0uLL;
    v133 = v104;
    if (!v111)
      throw_PCNullPointerException(1);
    if ((*(unsigned int (**)(LiImageSource *, _BYTE *, float64x2_t *))(*(_QWORD *)v111 + 24))(v111, v135, &v132))
    {
      v43 = v132.f64[1];
      v44 = v132.f64[0];
    }
    else
    {
      v132 = 0uLL;
      v43 = 0.0;
      v44 = 0.0;
      v133 = v104;
    }
    v45 = -v44;
    v119[0] = 0x3FF0000000000000uLL;
    v46 = -v43;
    *(_QWORD *)&v119[1] = 0;
    *((double *)&v119[1] + 1) = v45;
    v119[2] = xmmword_1B304EEE0;
    *(_QWORD *)&v120 = 0;
    *((double *)&v120 + 1) = v46;
    v121 = 0uLL;
    *(_QWORD *)&v122[0] = 0x3FF0000000000000;
    *(_OWORD *)((char *)v122 + 8) = 0u;
    *(_OWORD *)((char *)&v122[1] + 8) = 0u;
    *((_QWORD *)&v122[2] + 1) = 0x3FF0000000000000;
    if (v105 != 1.0)
    {
      *(double *)v119 = v105;
      *((double *)v119 + 1) = v105 * 0.0;
      *(double *)&v119[1] = v105 * 0.0;
      *((double *)&v119[1] + 1) = v105 * v45;
      *(double *)&v119[2] = v105 * 0.0;
      *((double *)&v119[2] + 1) = v105;
      *(double *)&v120 = v105 * 0.0;
      *((double *)&v120 + 1) = v105 * v46;
      *(double *)&v121 = v105 * 0.0;
      *((double *)&v121 + 1) = v105 * 0.0;
      *(double *)v122 = v105;
      *((double *)v122 + 1) = v105 * 0.0;
    }
    LiAgent::setPixelTransform((uint64_t)v135, (uint64_t)v119);
    v132 = vmulq_n_f64(v132, v105);
    v133 = vmulq_n_f64(v133, v105);
    LiAgent::getHelium((LiAgent *)v135, v111, &v131);
    if (!v131)
    {
      v47 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v47);
      if (v131 == v47)
      {
        if (v47)
          (*(void (**)(HGNode *))(*(_QWORD *)v47 + 24))(v47);
      }
      else
      {
        if (v131)
          (*(void (**)(void))(*(_QWORD *)v131 + 24))();
        v131 = v47;
      }
    }
    LiAgent::getDOD((uint64_t)v135, (uint64_t)&v127);
    v50 = v133.f64[0];
    if (v133.f64[0] <= 0.0 || (v51 = v133.f64[1], v133.f64[1] <= 0.0))
    {
      v52.i64[0] = v127;
      v52.i64[1] = v128;
      v132 = vcvtq_f64_s64(v52);
      v50 = (double)v129;
      v51 = (double)v130;
      v133.f64[0] = (double)v129;
      v133.f64[1] = (double)v130;
    }
    v53 = (HGCrop *)HGObject::operator new(0x1A0uLL);
    HGCrop::HGCrop(v53);
    (*(void (**)(HGCrop *, _QWORD, HGNode *))(*(_QWORD *)v53 + 120))(v53, 0, v131);
    (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v53 + 96))(v53, 0, 0.0, 0.0, (float)(int)v50, (float)(int)v51);
    if (v123 != v53)
    {
      if (v123)
        (*(void (**)(void))(*(_QWORD *)v123 + 24))();
      v123 = v53;
      (*(void (**)(HGCrop *))(*(_QWORD *)v53 + 16))(v53);
    }
    LiAgent::getBoundary((LiAgent *)v135, (uint64_t)&v124);
    v54 = v125;
    if (v125 <= 0.0 || (v55 = v126, v126 <= 0.0))
    {
      v56.i64[0] = v127;
      v56.i64[1] = v128;
      v106 = vcvtq_f64_s64(v56);
      v54 = (double)v129;
      v55 = (double)v130;
    }
    else
    {
      v106 = v124;
    }
    v57 = *(_QWORD *)&v135[160];
    if (*(_OWORD **)&v135[160] != v119)
    {
      v58 = 0;
      v59 = v119;
      do
      {
        for (j = 0; j != 32; j += 8)
          *(_QWORD *)((char *)v59 + j) = *(_QWORD *)(v57 + j);
        ++v58;
        v59 += 2;
        v57 += 32;
      }
      while (v58 != 4);
    }
    (*(void (**)(HGCrop *))(*(_QWORD *)v53 + 24))(v53);
    if (v131)
      (*(void (**)(HGNode *))(*(_QWORD *)v131 + 24))(v131);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v134._pcColorDesc._colorSpaceRef._obj);
    LiAgent::~LiAgent((LiAgent *)v135);
    PCSharedCount::~PCSharedCount(&v112);
    v61 = sqrt(*(double *)v119 * *((double *)&v119[2] + 1) - *((double *)v119 + 1) * *(double *)&v119[2]);
    if (v25 != 1)
    {
      if (v25 != 2)
      {
        _ZF = v25 == 3;
        v62 = v102;
        if (!_ZF)
          goto LABEL_108;
        if (v100)
        {
          v108[0] = v39;
          v108[1] = v38;
          v108[2] = v40;
          LiSolidUtils::createBumpMapFromHeightMap(&v123, (int)v54, (int)v55, v101 != 0, v108, (HGCrop **)v135, v61);
          v63 = *(HGCrop **)v135;
          if (v123 != *(HGCrop **)v135)
          {
            if (v123)
              goto LABEL_92;
            goto LABEL_93;
          }
          if (!v123)
            goto LABEL_94;
        }
        else
        {
          LiSolidUtils::createBumpMapFromNormalMap(&v123, v101 != 0, (HgcNormalMapToBumpMap **)v135);
          v63 = *(HGCrop **)v135;
          if (v123 != *(HGCrop **)v135)
          {
            if (v123)
            {
LABEL_92:
              (*(void (**)(void))(*(_QWORD *)v123 + 24))();
              v63 = *(HGCrop **)v135;
            }
LABEL_93:
            v123 = v63;
LABEL_94:
            LiSolidUtils::createLean2MapFromBumpMap(&v123, (HgcLean2 **)v135);
            v64 = *(HGCrop **)v135;
            if (v123 != *(HGCrop **)v135)
            {
              if (v123)
                goto LABEL_106;
LABEL_107:
              v123 = v64;
              goto LABEL_108;
            }
            if (v123)
              goto LABEL_129;
            goto LABEL_108;
          }
          if (!v123)
            goto LABEL_94;
        }
        (*(void (**)(void))(*(_QWORD *)v123 + 24))();
        goto LABEL_94;
      }
      if (v100)
      {
        v109[0] = v39;
        v109[1] = v38;
        v109[2] = v40;
        LiSolidUtils::createBumpMapFromHeightMap(&v123, (int)v54, (int)v55, v101 != 0, v109, (HGCrop **)v135, v61);
        v62 = v102;
        v65 = *(HGCrop **)v135;
        if (v123 != *(HGCrop **)v135)
        {
          if (v123)
            goto LABEL_102;
          goto LABEL_103;
        }
        if (!v123)
          goto LABEL_104;
      }
      else
      {
        LiSolidUtils::createBumpMapFromNormalMap(&v123, v101 != 0, (HgcNormalMapToBumpMap **)v135);
        v62 = v102;
        v65 = *(HGCrop **)v135;
        if (v123 != *(HGCrop **)v135)
        {
          if (v123)
          {
LABEL_102:
            (*(void (**)(void))(*(_QWORD *)v123 + 24))();
            v65 = *(HGCrop **)v135;
          }
LABEL_103:
          v123 = v65;
LABEL_104:
          LiSolidUtils::createLean1MapFromBumpMap(&v123, (HgcLean1 **)v135);
          v64 = *(HGCrop **)v135;
          if (v123 == *(HGCrop **)v135)
          {
            if (v123)
              goto LABEL_129;
            goto LABEL_108;
          }
          if (!v123)
            goto LABEL_107;
          goto LABEL_106;
        }
        if (!v123)
          goto LABEL_104;
      }
      (*(void (**)(void))(*(_QWORD *)v123 + 24))();
      goto LABEL_104;
    }
    if (v100)
    {
      v110[0] = v39;
      v110[1] = v38;
      v110[2] = v40;
      LiSolidUtils::createBumpMapFromHeightMap(&v123, (int)v54, (int)v55, v101 != 0, v110, (HGCrop **)v135, v61);
      v62 = v102;
      v64 = *(HGCrop **)v135;
      if (v123 == *(HGCrop **)v135)
      {
        if (v123)
          goto LABEL_129;
        goto LABEL_108;
      }
      if (!v123)
        goto LABEL_107;
LABEL_106:
      (*(void (**)(void))(*(_QWORD *)v123 + 24))();
      v64 = *(HGCrop **)v135;
      goto LABEL_107;
    }
    LiSolidUtils::createBumpMapFromNormalMap(&v123, v101 != 0, (HgcNormalMapToBumpMap **)v135);
    v62 = v102;
    v64 = *(HGCrop **)v135;
    if (v123 != *(HGCrop **)v135)
    {
      if (v123)
        goto LABEL_106;
      goto LABEL_107;
    }
    if (v123)
LABEL_129:
      (*(void (**)(void))(*(_QWORD *)v123 + 24))();
LABEL_108:
    v30 = 1;
LABEL_109:
    memset(v135, 0, 24);
    *(float64x2_t *)&v135[24] = v104;
    *(_QWORD *)&v135[160] = 0x3FF0000000000000;
    *(_QWORD *)&v135[120] = 0x3FF0000000000000;
    *(_QWORD *)&v135[80] = 0x3FF0000000000000;
    *(_QWORD *)&v135[40] = 0x3FF0000000000000;
    memset(&v135[48], 0, 32);
    memset(&v135[88], 0, 32);
    memset(&v135[128], 0, 32);
    if (v123)
    {
      *(_QWORD *)v135 = v123;
      (*(void (**)(HGCrop *))(*(_QWORD *)v123 + 16))(v123);
    }
    *(float64x2_t *)&v135[8] = v106;
    *(double *)&v135[24] = v54;
    *(double *)&v135[32] = v55;
    *(_OWORD *)&v135[104] = v121;
    *(_OWORD *)&v135[120] = v122[0];
    *(_OWORD *)&v135[136] = v122[1];
    *(_OWORD *)&v135[152] = v122[2];
    *(_OWORD *)&v135[40] = v119[0];
    *(_OWORD *)&v135[56] = v119[1];
    *(_OWORD *)&v135[72] = v119[2];
    *(_OWORD *)&v135[88] = v120;
    *(_QWORD *)&v135[168] = v62;
    v136 = v22;
    LiHeSolidRendererNode::addHeliumImageSourceInput((uint64_t)a1, v135, v30);
    if (*(_QWORD *)v135)
      (*(void (**)(_QWORD))(**(_QWORD **)v135 + 24))(*(_QWORD *)v135);
    v16 = (PCSharedCount *)&v135[8];
LABEL_114:
    v15 += 8;
  }
  while (v15 != v103);
  v76 = (LiMaterialSamplerInfo **)v116;
  v15 = v117;
  if (v116 != v117)
  {
    do
    {
      v77 = *v76;
      if (LiMaterialSamplerInfo::textureID(*v76))
      {
        v78 = *((_DWORD *)v77 + 80);
        memset(v135, 0, 24);
        *(_DWORD *)&v135[24] = 1;
        v135[28] = 1;
        *(_QWORD *)&v135[152] = 0x3FF0000000000000;
        *(_QWORD *)&v135[112] = 0x3FF0000000000000;
        *(_QWORD *)&v135[72] = 0x3FF0000000000000;
        *(_QWORD *)&v135[32] = 0x3FF0000000000000;
        memset(&v135[40], 0, 32);
        memset(&v135[80], 0, 32);
        memset(&v135[120], 0, 32);
        *(_OWORD *)&v135[160] = xmmword_1B30503B0;
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v136);
        PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v140);
        *(_QWORD *)v135 = v102;
        *(_DWORD *)&v135[24] = v78;
        LiMaterialSamplerInfo::getTexture(v77, (PCWorkingColorVector *)&v134);
        LiMaterialTextureInfo::setTexture((LiMaterialTextureInfo *)v135, (const ProGL::TextureHandle *)&v134);
        v79 = *(std::__shared_weak_count **)&v134._pcColorDesc._dynamicRange;
        if (*(_QWORD *)&v134._pcColorDesc._dynamicRange)
        {
          v80 = (unint64_t *)(*(_QWORD *)&v134._pcColorDesc._dynamicRange + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = a1[221];
        if (v82 >= a1[222])
        {
          v94 = std::vector<LiMaterialTextureInfo>::__push_back_slow_path<LiMaterialTextureInfo const&>(v107, (__int128 *)v135);
        }
        else
        {
          v83 = *(_OWORD *)v135;
          v84 = *(_OWORD *)&v135[32];
          *(_OWORD *)(v82 + 16) = *(_OWORD *)&v135[16];
          *(_OWORD *)(v82 + 32) = v84;
          *(_OWORD *)v82 = v83;
          v85 = *(_OWORD *)&v135[48];
          v86 = *(_OWORD *)&v135[64];
          v87 = *(_OWORD *)&v135[96];
          *(_OWORD *)(v82 + 80) = *(_OWORD *)&v135[80];
          *(_OWORD *)(v82 + 96) = v87;
          *(_OWORD *)(v82 + 48) = v85;
          *(_OWORD *)(v82 + 64) = v86;
          v88 = *(_OWORD *)&v135[112];
          v89 = *(_OWORD *)&v135[128];
          v90 = *(_OWORD *)&v135[160];
          *(_OWORD *)(v82 + 144) = *(_OWORD *)&v135[144];
          *(_OWORD *)(v82 + 160) = v90;
          *(_OWORD *)(v82 + 112) = v88;
          *(_OWORD *)(v82 + 128) = v89;
          *(_QWORD *)(v82 + 176) = v136;
          *(_DWORD *)(v82 + 184) = v137;
          *(_DWORD *)(v82 + 188) = v138;
          *(_BYTE *)(v82 + 192) = v139;
          *(_QWORD *)(v82 + 200) = v140;
          v91 = v141;
          *(_QWORD *)(v82 + 208) = v141;
          if (v91)
          {
            p_shared_owners = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldxr(p_shared_owners);
            while (__stxr(v93 + 1, p_shared_owners));
          }
          v94 = v82 + 216;
          a1[221] = v82 + 216;
        }
        a1[221] = v94;
        v95 = v141;
        if (v141)
        {
          v96 = (unint64_t *)&v141->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
      ++v76;
    }
    while (v76 != (LiMaterialSamplerInfo **)v15);
    v15 = v116;
  }
LABEL_152:
  if (v15)
  {
    v117 = v15;
    operator delete(v15);
  }
  if (v123)
    (*(void (**)(HGCrop *))(*(_QWORD *)v123 + 24))(v123);
}

void sub_1B2DACF34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_DWORD *setWorkingGamutForSceneObject(_DWORD *result, uint64_t a2)
{
  const void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v3 = result;
    if (v4)
    {
      v5 = v4;
      v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 136))(v4);
      if (v6 >= 1)
      {
        v7 = v6;
        v8 = 0;
        do
        {
          v9 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 144))(v5, v8);
          setWorkingGamutForSceneObject(v9, a2);
          v8 = (v8 + 1);
        }
        while (v7 != (_DWORD)v8);
      }
    }
    if (result)
      result[164] = a2;
  }
  return result;
}

_DWORD *LiHeSolidRendererNode::setScene(PCShared_base **this, LiSceneObject *a2, const LiRenderParameters **a3)
{
  const void **v6;

  v6 = (const void **)(this + 51);
  PCPtr<LiImageSource>::operator=<LiImageSource>(this + 51, a2);
  *((_DWORD *)this + 438) = 0;
  LiHeSolidRendererNode::createHeliumNodesFromImageSources(this, v6, a3);
  return setWorkingGamutForSceneObject(a2, *((unsigned int *)this + 396));
}

void LiHeSolidRendererNode::setAAType(LiHeSolidRendererNode *this, int a2)
{
  uint64_t v3;
  LiSSAASolidRenderer *v4;

  *((_DWORD *)this + 282) = a2;
  v3 = *((_QWORD *)this + 140);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    a2 = *((_DWORD *)this + 282);
  }
  *((_QWORD *)this + 140) = 0;
  if (a2 == 4)
  {
    v4 = (LiSSAASolidRenderer *)operator new();
    LiSSAASolidRenderer::LiSSAASolidRenderer(v4);
  }
  else
  {
    v4 = (LiSSAASolidRenderer *)operator new();
    LiSolidRenderer::LiSolidRenderer(v4);
  }
  *((_QWORD *)this + 140) = v4;
}

void sub_1B2DAD3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406A02D483);
  _Unwind_Resume(a1);
}

uint64_t LiHeSolidRendererNode::setPixelTransform(uint64_t result, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  unint64_t i;
  double v7;

  v2 = 0;
  v3 = 0;
  v4 = sqrt(a2[12] * a2[12] + a2[13] * a2[13] + a2[14] * a2[14] + a2[15] * a2[15]);
  v5 = result + 976;
  do
  {
    for (i = 0; i != 128; i += 32)
    {
      if (v3 == 2 || i == 64)
      {
        if (v2 == i)
          v7 = 1.0;
        else
          v7 = 0.0;
      }
      else
      {
        v7 = a2[i / 8] / v4;
      }
      *(double *)(v5 + i) = v7;
    }
    ++v3;
    v2 += 32;
    v5 += 8;
    ++a2;
  }
  while (v3 != 4);
  return result;
}

uint64_t LiHeSolidRendererNode::SetInput(HGNode *this, uint64_t a2, HGNode *a3)
{
  HGNode *v6;
  signed int v7;
  uint64_t v8;

  if (*((_DWORD *)this + 22) < (int)a2)
  {
    v6 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v6);
    v7 = *((_DWORD *)this + 22);
    if (v7 < (int)a2)
    {
      do
        HGNode::SetInput(this, v7++, v6);
      while ((_DWORD)a2 != v7);
    }
    (*(void (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
  }
  v8 = HGNode::SetInput(this, a2, a3);
  if ((int)a2 >= 1)
    (*(void (**)(HGNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, a2, 16);
  return v8;
}

void sub_1B2DAD544(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float PCMatrix44Tmpl<float>::rightMult(uint64_t a1, float *a2)
{
  uint64_t i;
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float result;

  for (i = 0; i != 64; i += 16)
  {
    v3 = (float *)(a1 + i);
    v4 = *(float *)(a1 + i);
    v5 = *(float *)(a1 + i + 4);
    v6 = *(float *)(a1 + i + 8);
    v7 = *(float *)(a1 + i + 12);
    *v3 = (float)((float)((float)(v4 * *a2) + (float)(v5 * a2[4])) + (float)(v6 * a2[8])) + (float)(v7 * a2[12]);
    v3[1] = (float)((float)((float)(v4 * a2[1]) + (float)(v5 * a2[5])) + (float)(v6 * a2[9])) + (float)(v7 * a2[13]);
    v3[2] = (float)((float)((float)(v4 * a2[2]) + (float)(v5 * a2[6])) + (float)(v6 * a2[10])) + (float)(v7 * a2[14]);
    result = (float)((float)((float)(v4 * a2[3]) + (float)(v5 * a2[7])) + (float)(v6 * a2[11])) + (float)(v7 * a2[15]);
    v3[3] = result;
  }
  return result;
}

int LiHeSolidRendererNode::getTilePadding(LiHeSolidRendererNode *this)
{
  LiSolidUtils *v2;
  uint64_t v3;
  LiDofInfo *v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x2_t v10;
  int8x16_t v16;
  int32x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int32x2_t v22;
  int8x16_t v23;
  double *v24;
  uint64_t v25;
  double *v26;
  double v27;
  double CircleOfConfusionRadius;
  double v29;
  __int128 v31;
  __int128 v32;
  uint64_t v33[6];
  _OWORD v34[16];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 1348))
  {
    v2 = (LiSolidUtils *)*((_QWORD *)this + 51);
    if (v2)
    {
      LiSolidUtils::getBoundsOfGeometry(v2, (double *)v33);
      v3 = 0;
      v4 = (LiHeSolidRendererNode *)((char *)this + 1272);
      memset(v34, 0, sizeof(v34));
      v5 = (int8x16_t)vdupq_lane_s64(v33[0], 0);
      v6 = (int8x16_t)vdupq_lane_s64(v33[1], 0);
      v7 = (int8x16_t)vdupq_lane_s64(v33[2], 0);
      v8 = (int8x16_t)vdupq_lane_s64(v33[3], 0);
      v9 = (int8x16_t)vdupq_lane_s64(v33[4], 0);
      v10 = (int32x2_t)0x100000000;
      __asm { FMOV            V20.2D, #1.0 }
      v16 = (int8x16_t)vdupq_lane_s64(v33[5], 0);
      do
      {
        v17 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)v10, (int8x8_t)0x100000001));
        v18.i64[0] = v17.i32[0];
        v18.i64[1] = v17.i32[1];
        v19 = vbslq_s8(v18, v5, v6);
        v20 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)v10, (int8x8_t)0x200000002));
        v18.i64[0] = v20.i32[0];
        v18.i64[1] = v20.i32[1];
        v21 = vbslq_s8(v18, v7, v8);
        v22 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)v10, (int8x8_t)0x400000004));
        v18.i64[0] = v22.i32[0];
        v18.i64[1] = v22.i32[1];
        v23 = vbslq_s8(v18, v9, v16);
        v24 = (double *)&v34[v3];
        vst4q_f64(v24, *(float64x2x4_t *)(&_Q20 - 3));
        v10 = vadd_s32(v10, (int32x2_t)0x200000002);
        v3 += 4;
      }
      while (v3 != 16);
      v25 = 0;
      v26 = (double *)((char *)this + 432);
      v27 = 0.0;
      do
      {
        v31 = 0u;
        v32 = 0u;
        PCMatrix44Tmpl<double>::transform<double>(v26, (double *)&v34[v25], (double *)&v31);
        CircleOfConfusionRadius = LiDofInfo::getCircleOfConfusionRadius(v4, -*(double *)&v32);
        if (CircleOfConfusionRadius > v27)
          v27 = CircleOfConfusionRadius;
        v25 += 2;
      }
      while (v25 != 16);
      v29 = *(float *)v4 * 3.0;
      if (v27 >= v29)
        v29 = v27;
      LODWORD(v2) = vcvtpd_u64_f64(fmin(v29, 150.0));
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return (int)v2;
}

uint64_t LiHeSolidRendererNode::RenderTile(HGNode *this, HGTile *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  result = HGNode::RenderTile(this, a2);
  if (a2)
  {
    v5 = *((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
      if (v6 >= 1)
      {
        v7 = 0;
        v8 = *((_OWORD *)this + 69);
        v9 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
        v10 = 16 * *((int *)a2 + 6);
        do
        {
          if (v9 >= 1)
          {
            v11 = 0;
            do
            {
              *(_OWORD *)(v5 + v11) = v8;
              v11 += 16;
            }
            while (16 * v9 != v11);
          }
          ++v7;
          v5 += v10;
        }
        while (v7 != v6);
      }
    }
  }
  return result;
}

uint64_t LiHeSolidRendererNode::RenderPage(LiHeSolidRendererNode *this, HGPage *a2)
{
  (*(void (**)(LiHeSolidRendererNode *, HGPage *, _QWORD))(*(_QWORD *)this + 472))(this, a2, 0);
  return 0;
}

uint64_t LiHeSolidRendererNode::setCameraInfo(LiHeSolidRendererNode *this, const LiCamera *a2)
{
  return (*(uint64_t (**)(const LiCamera *, char *))(*(_QWORD *)a2 + 264))(a2, (char *)this + 1592);
}

uint64_t LiHeSolidRendererNode::GetDOD(LiHeSolidRendererNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  float64_t v15;
  double *v16;
  float64_t v17;
  double *v18;
  float64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  float64x2_t v29;
  char v35;
  double *v36;
  double *v37;
  float64_t v38;
  double *v39;
  double v40;
  _BOOL4 v41;
  BOOL v42;
  double v43;
  uint64_t v44;
  int v45;
  float v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  double v51;
  BOOL v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int TilePadding;
  __int128 v59;
  double *v60;
  double *v61;
  float64x2_t v62;
  __int128 v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73[2];

  LODWORD(v5) = 0;
  v4 = 0;
  if (a3)
    return v5 | (v4 << 32);
  v8 = *((_QWORD *)this + 51);
  if (!v8)
    return v5 | (v4 << 32);
  LiSolidUtils::getBoundsOfGeometry(v8, (double *)this + 54, &v68);
  if (v68 <= v69 && v70 <= v71 && v72 <= v73[0])
  {
    v60 = (double *)((char *)this + 976);
    v61 = (double *)((char *)this + 688);
    PCMatrix44Tmpl<double>::operator*((uint64_t)this + 976, (__int128 *)this + 43, (uint64_t)&v66);
    v9 = 0;
    v10 = -1.0;
    v11 = 1.0;
    v12 = 1.0;
    v13 = -1.0;
    do
    {
      v14 = &v69;
      if ((v9 & 1) != 0)
        v14 = &v68;
      v15 = *v14;
      v16 = &v71;
      if ((v9 & 2) != 0)
        v16 = &v70;
      v17 = *v16;
      v18 = v73;
      if ((v9 & 4) != 0)
        v18 = &v72;
      v19 = *v18;
      v64.f64[0] = v15;
      v64.f64[1] = v17;
      v65.f64[0] = v19;
      PCMatrix44Tmpl<double>::transform<double>(v66.f64, v64.f64, v64.f64);
      if (v9)
      {
        if (v11 >= v64.f64[0])
          v11 = v64.f64[0];
        if (v10 <= v64.f64[0])
          v10 = v64.f64[0];
        if (v12 >= v64.f64[1])
          v12 = v64.f64[1];
        if (v13 <= v64.f64[1])
          v13 = v64.f64[1];
      }
      else
      {
        v13 = v64.f64[1];
        v12 = v64.f64[1];
        v10 = v64.f64[0];
        v11 = v64.f64[0];
      }
      ++v9;
    }
    while (v9 != 8);
    v21 = v11;
    v22 = v12;
    v23 = v10;
    v24 = v13;
    v5 = HGRectMake4f(v20, v21, v22, v23, v24);
    v26 = v25;
    v27 = 0;
    v28 = 1;
    v29 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    v59 = _Q0;
    v35 = 1;
    do
    {
      v36 = &v70;
      v37 = &v69;
      if ((v27 & 1) == 0)
        v37 = &v68;
      if ((v27 & 2) != 0)
        v36 = &v71;
      v38 = *v36;
      if (v27 >= 4)
        v39 = v73;
      else
        v39 = &v72;
      v40 = *v39;
      v64.f64[0] = *v37;
      v64.f64[1] = v38;
      v65.f64[0] = v40;
      v41 = v40 > 0.0;
      v65.f64[1] = 1.0;
      v42 = v40 <= 0.0;
      v66 = v29;
      v67 = v29;
      PCMatrix44Tmpl<double>::transform<double>(v61, v64.f64, v66.f64);
      v62 = vmulq_n_f64(v66, 1.0 / v67.f64[1]);
      v63 = v59;
      v64 = 0u;
      v65 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(v60, v62.f64, v64.f64);
      if (v65.f64[1] < 0.0)
        return 0x8000000080000000;
      v35 &= v42;
      v28 &= v41;
      ++v27;
      v29 = 0uLL;
    }
    while (v27 != 8);
    v43 = *((double *)this + 100);
    v44 = v43 >= 0.0000001 || v43 <= -0.0000001;
    v45 = *((_DWORD *)this + 106);
    if (!((v45 == 1) & ~(_DWORD)v44 | v35 & 1))
    {
      if (v28)
      {
        if (v45 == 1)
          LODWORD(v44) = 1;
        if ((_DWORD)v44 == 1)
        {
          v5 = 0;
          v26 = 0;
        }
      }
      else
      {
        if (v45 == 1)
        {
          v46 = *((double *)this + 125) + *((double *)this + 125);
          v47 = *((double *)this + 129) + *((double *)this + 129);
          v48 = HGRectMake4f(v44, -v46, -v47, v46, v47);
        }
        else
        {
          v64 = 0uLL;
          __asm { FMOV            V2.2D, #-1.0 }
          v65 = _Q2;
          v51 = *((double *)this + 200);
          if (v51 <= -0.0000001 || v51 >= 0.0000001)
          {
            getClippedAndProjectedBounds(&v68, v61, (uint64_t)&v66);
            v64 = v66;
            v65 = v67;
            v52 = PCMatrix44Tmpl<double>::transformRect<double>(v60, v64.f64, (uint64_t)&v64);
          }
          else
          {
            PCMatrix44Tmpl<double>::operator*((uint64_t)v60, (__int128 *)v61, (uint64_t)&v66);
            v62.f64[0] = v68;
            v62.f64[1] = v70;
            *(double *)&v63 = v69 - v68;
            *((double *)&v63 + 1) = v71 - v70;
            v52 = PCMatrix44Tmpl<double>::transformRect<double>(v66.f64, v62.f64, (uint64_t)&v64);
          }
          if (!v52)
            return 0x8000000080000000;
          v54 = v64.f64[0];
          v55 = v64.f64[1];
          v56 = v64.f64[0] + v65.f64[0];
          v57 = v64.f64[1] + v65.f64[1];
          v48 = HGRectMake4f(v53, v54, v55, v56, v57);
        }
        v5 = v48;
        v26 = v49;
      }
    }
    v4 = HIDWORD(v5);
    if (!HGRectIsInfinite(v5, v26))
    {
      TilePadding = LiHeSolidRendererNode::getTilePadding(this);
      LODWORD(v5) = v5 - TilePadding;
      v4 = (v4 - TilePadding);
    }
    return v5 | (v4 << 32);
  }
  return 0;
}

void getClippedAndProjectedBounds(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64_t v17;
  float64_t v18;
  double v19;
  float64x2_t v20;
  double v21;
  uint64_t v22;
  float64x2_t v23;
  __int128 v24;

  v5 = 0;
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = fmin(a1[4], -1.0);
  v11 = fmin(a1[5], -1.0);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  do
  {
    if ((v5 & 1) != 0)
      v17 = v7;
    else
      v17 = v6;
    if ((v5 & 2) != 0)
      v18 = v9;
    else
      v18 = v8;
    v20.f64[0] = v17;
    v20.f64[1] = v18;
    if ((v5 & 4) != 0)
      v19 = v11;
    else
      v19 = v10;
    v21 = v19;
    v22 = 0x3FF0000000000000;
    v23 = 0u;
    v24 = 0u;
    PCMatrix44Tmpl<double>::transform<double>(a2, v20.f64, v23.f64);
    v20 = vmulq_n_f64(v23, 1.0 / *((double *)&v24 + 1));
    PCRect<double>::operator|=((float64x2_t *)a3, &v20);
    ++v5;
  }
  while (v5 != 8);
}

uint64_t LiHeSolidRendererNode::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, a3);
  return HGRenderer::GetDOD(a2, Input);
}

void std::vector<LiMaterialTextureInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 216;
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<LiMaterialTextureInfo>::__push_back_slow_path<LiMaterialTextureInfo const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[5];

  v3 = *a1;
  v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x97B425ED097B42)
    v9 = 0x12F684BDA12F684;
  else
    v9 = v5;
  v26[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiMaterialTextureInfo>>(v7, v9);
  v11 = &v10[216 * v4];
  v26[0] = v10;
  v26[1] = v11;
  v26[3] = &v10[216 * v12];
  v13 = *a2;
  v14 = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  v15 = a2[6];
  v17 = a2[3];
  v16 = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = v15;
  *((_OWORD *)v11 + 3) = v17;
  *((_OWORD *)v11 + 4) = v16;
  v18 = a2[10];
  v20 = a2[7];
  v19 = a2[8];
  *((_OWORD *)v11 + 9) = a2[9];
  *((_OWORD *)v11 + 10) = v18;
  *((_OWORD *)v11 + 7) = v20;
  *((_OWORD *)v11 + 8) = v19;
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)v11 + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)v11 + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)v11 + 47) = *((_DWORD *)a2 + 47);
  v11[192] = *((_BYTE *)a2 + 192);
  *((_QWORD *)v11 + 25) = *((_QWORD *)a2 + 25);
  v21 = *((_QWORD *)a2 + 26);
  *((_QWORD *)v11 + 26) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v26[2] = v11 + 216;
  std::vector<LiMaterialTextureInfo>::__swap_out_circular_buffer(a1, v26);
  v24 = a1[1];
  std::__split_buffer<LiMaterialTextureInfo>::~__split_buffer((uint64_t)v26);
  return v24;
}

void sub_1B2DADFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LiMaterialTextureInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LiMaterialTextureInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LiMaterialTextureInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LiMaterialTextureInfo>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>,std::reverse_iterator<LiMaterialTextureInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  result = a6;
  while (a3 != a5)
  {
    v9 = *(_OWORD *)(a3 - 216);
    v10 = *(_OWORD *)(a3 - 200);
    *(_OWORD *)(a7 - 184) = *(_OWORD *)(a3 - 184);
    *(_OWORD *)(a7 - 200) = v10;
    *(_OWORD *)(a7 - 216) = v9;
    v11 = *(_OWORD *)(a3 - 168);
    v12 = *(_OWORD *)(a3 - 152);
    v13 = *(_OWORD *)(a3 - 136);
    *(_OWORD *)(a7 - 120) = *(_OWORD *)(a3 - 120);
    *(_OWORD *)(a7 - 136) = v13;
    *(_OWORD *)(a7 - 152) = v12;
    *(_OWORD *)(a7 - 168) = v11;
    v14 = *(_OWORD *)(a3 - 104);
    v15 = *(_OWORD *)(a3 - 88);
    v16 = *(_OWORD *)(a3 - 72);
    *(_OWORD *)(a7 - 56) = *(_OWORD *)(a3 - 56);
    *(_OWORD *)(a7 - 72) = v16;
    *(_OWORD *)(a7 - 88) = v15;
    *(_OWORD *)(a7 - 104) = v14;
    *(_DWORD *)(a7 - 40) = *(_DWORD *)(a3 - 40);
    *(_DWORD *)(a7 - 36) = *(_DWORD *)(a3 - 36);
    *(_DWORD *)(a7 - 32) = *(_DWORD *)(a3 - 32);
    *(_DWORD *)(a7 - 28) = *(_DWORD *)(a3 - 28);
    *(_BYTE *)(a7 - 24) = *(_BYTE *)(a3 - 24);
    v17 = *(_QWORD *)(a3 - 8);
    *(_QWORD *)(a7 - 16) = *(_QWORD *)(a3 - 16);
    *(_QWORD *)(a7 - 8) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    a7 -= 216;
    a3 -= 216;
  }
  return result;
}

uint64_t std::__split_buffer<LiMaterialTextureInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__push_back_slow_path<LiHeSolidRendererNode::UniqueInputInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  v11 = &v10[24 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[24 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  v17 = v11 + 24;
  std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B2DAE2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<LiHeSolidRendererNode::UniqueInputInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 24);
    v2 -= 24;
    *(_DWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void LiHeLightInitPass::LiHeLightInitPass(LiHeLightInitPass *this, const PCWorkingColorVector *a2)
{
  LiHeLightProgramInitPass *v3;
  char *v4;

  LiHeLightProgramInitPass::LiHeLightProgramInitPass(this);
  *(_QWORD *)v3 = off_1E657A3E8;
  LiHeLightProgramInitPass::SetParameter(v3, 0, *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3), v4);
}

void sub_1B2DAE3F4(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeLightProgramInitPass::~LiHeLightProgramInitPass(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightInitPass::GetDOD(LiHeLightInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0x8000000080000000;
}

uint64_t LiHeLightInitPass::GetROI(LiHeLightInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeLightInitPass::~LiHeLightInitPass(HGNode *this)
{
  void *v1;

  LiHeLightProgramInitPass::~LiHeLightProgramInitPass(this);
  HGObject::operator delete(v1);
}

const void *LiHeUtil::isLiHeLightSurfaceFinalPass(const void *this, HGNode *a2)
{
  if (this)
  return this;
}

uint64_t LiHeUtil::hasHGAnisotropicXForm(LiHeUtil *this, HGNode *a2)
{
  uint64_t hasHGAnisotropicXForm;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  if (this)
  {
    hasHGAnisotropicXForm = LiHeUtil::aux_hasHGAnisotropicXForm(this, (uint64_t)&v5);
    v3 = (_QWORD *)v6[0];
  }
  else
  {
    v3 = 0;
    hasHGAnisotropicXForm = 0;
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v5, v3);
  return hasHGAnisotropicXForm;
}

void sub_1B2DAE4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t LiHeUtil::aux_hasHGAnisotropicXForm(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *i;
  unint64_t v10;
  void *lpsrc;
  _BYTE v13[12];
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  lpsrc = a1;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a2, (unint64_t *)&lpsrc, (uint64_t *)&lpsrc);
  v3 = lpsrc;
  if (v4)
  {
    (*(void (**)(void *, _QWORD, _BYTE *))(*(_QWORD *)v4 + 104))(v4, 0, v13);
    if (v14 > 0.0)
      return 1;
    v3 = lpsrc;
  }
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 112))(v3);
  if (v5 < 1)
    return 0;
  v6 = v5;
  v7 = 0;
  while (1)
  {
    v8 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 128))(lpsrc, v7);
    if (v8)
    {
      for (i = *(_QWORD **)(a2 + 8); i; i = (_QWORD *)*i)
      {
        v10 = i[4];
        if (v8 >= v10)
        {
          if (v10 >= v8)
            goto LABEL_13;
          ++i;
        }
      }
      if ((LiHeUtil::aux_hasHGAnisotropicXForm() & 1) != 0)
        return 1;
    }
LABEL_13:
    v7 = (v7 + 1);
    if ((_DWORD)v7 == v6)
      return 0;
  }
}

LiHeLightProgramSurfaceFinalPass *LiHeLightSurfaceFinalPass::LiHeLightSurfaceFinalPass(LiHeLightProgramSurfaceFinalPass *a1, HGNode **a2, HGNode **a3)
{
  HGNode *v6;

  LiHeLightProgramSurfaceFinalPass::LiHeLightProgramSurfaceFinalPass(a1);
  *(_QWORD *)v6 = off_1E657A650;
  HGNode::SetInput(v6, 0, *a2);
  HGNode::SetInput((HGNode *)a1, 1u, *a3);
  return a1;
}

void sub_1B2DAE680(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightSurfaceFinalPass::GetDOD(LiHeLightSurfaceFinalPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightSurfaceFinalPass::GetROI(LiHeLightSurfaceFinalPass *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightSurfaceFinalPass::~LiHeLightSurfaceFinalPass(HGNode *this)
{
  void *v1;

  LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(this);
  HGObject::operator delete(v1);
}

uint64_t LiSetCachingDelegate(uint64_t result)
{
  sDelegate = result;
  return result;
}

uint64_t LiCachingDelegateAddBitmap(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sDelegate;
  if (sDelegate)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)sDelegate + 32))(sDelegate, a1, a2);
  return result;
}

uint64_t LiCachingDelegateGetBitmap@<X0>(const PCHash128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = sDelegate;
  if (sDelegate)
    return (*(uint64_t (**)(uint64_t, const PCHash128 *))(*(_QWORD *)sDelegate + 40))(sDelegate, a1);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t LiHeMix::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  HGNode *v10;
  uint64_t v11;
  uint64_t v12;

  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  v10 = HGRenderer::GetInput(a2, this, 1u);
  v11 = HGRenderer::GetDOD(a2, v10);
  return HGRectUnion(DOD, v9, v11, v12);
}

uint64_t LiHeMix::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v11;
  uint64_t v12;
  HGNode *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v12 = v11;
  v13 = HGRenderer::GetInput(a2, this, 1u);
  v14 = HGRenderer::GetDOD(a2, v13);
  v16 = HGRectUnion(DOD, v12, v14, v15);
  if (a3 != 2)
  {
    if (a3 > 1)
      return 0;
    else
      return HGRectIntersection(v5, v4, v16, v17);
  }
  return v5;
}

void LiHeMix::~LiHeMix(HGNode *this)
{
  void *v1;

  LiHeMixShader::~LiHeMixShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeReflection::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    *(_QWORD *)&a4.var0 = HGRenderer::GetDOD(a2, Input);
  }
  else if (a3)
  {
    *(_QWORD *)&a4.var0 = 0;
  }
  return *(_QWORD *)&a4.var0;
}

uint64_t LiHeReflection::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DOD;
  uint64_t v8;

  if (a3 >= 2)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  DOD = HGRenderer::GetDOD(a2, this);
  return HGRectIntersection(v6, v5, DOD, v8);
}

void LiHeReflection::~LiHeReflection(HGNode *this)
{
  void *v1;

  LiHeReflectionShader::~LiHeReflectionShader(this);
  HGObject::operator delete(v1);
}

LiHeProgramRGBAdditionNode *LiHeRGBAdditionNode::LiHeRGBAdditionNode(LiHeProgramRGBAdditionNode *a1, HGNode **a2, _QWORD *a3)
{
  HGNode *v6;

  LiHeProgramRGBAdditionNode::LiHeProgramRGBAdditionNode(a1);
  *(_QWORD *)v6 = off_1E657AD88;
  HGNode::SetInput(v6, 0, *a2);
  (*(void (**)(LiHeProgramRGBAdditionNode *, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, 1, *a3);
  return a1;
}

void sub_1B2DAE9E8(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeRGBAdditionNode::GetDOD(LiHeRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeRGBAdditionNode::GetROI(LiHeRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeRGBAdditionNode::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

void LiHeRGBAdditionNode::~LiHeRGBAdditionNode(HGNode *this)
{
  void *v1;

  LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(this);
  HGObject::operator delete(v1);
}

void LiGradientEnvGenerator::LiGradientEnvGenerator(LiGradientEnvGenerator *this)
{
  _QWORD *v2;

  *(_BYTE *)this = 0;
  v2 = (_QWORD *)((char *)this + 32);
  std::vector<float>::vector((_QWORD *)this + 1, 0x400uLL);
  std::vector<float>::vector(v2, 0x400uLL);
  std::vector<float>::vector((_QWORD *)this + 7, 0x400uLL);
  std::vector<float>::vector((_QWORD *)this + 10, 0x100uLL);
}

void sub_1B2DAEAC8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v5 = v4;
  v7 = *v5;
  if (*v5)
  {
    v1[8] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v1[5] = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void LiGradientEnvGenerator::setGradientImage(void **this, float *a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  int v6;
  HGBitmap *v7;
  HGBitmapLoader *v8;
  HGTextureWrap *v9;
  char *v10;
  uint64_t v11;
  HGXForm *v12;
  HGRenderer *v13;
  uint64_t v14;
  float32x4_t *v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  double v21;
  __double2 v22;
  uint64_t v23;
  int32x2_t v24;
  __double2 v25;
  float v26;
  __double2 v27;
  float64x2_t v28;
  float v29;
  float32x4_t v30;
  int32x2_t v31;
  __double2 v32;
  double v33;
  double v34;
  float v35;
  float32x4_t v36;
  float64x2_t v37;
  float64x2_t v38;
  int32x2_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  void *__dst;
  float32x4_t *v44;
  _BYTE v45[144];
  HGRect v46;

  *(_BYTE *)this = 1;
  v3 = this + 1;
  memcpy(this[1], a2, 0x1000uLL);
  heliumBlurGradientEnvironment(v3, this + 4, 128.0);
  heliumBlurGradientEnvironment(this + 4, this + 7, 256.0);
  std::vector<float>::vector(&__dst, 0x100uLL);
  v4 = (int)(((unint64_t)this[2] - *v3) >> 2) / 4;
  v5 = (unint64_t)((char *)v44 - (_BYTE *)__dst) >> 2;
  if ((v5 & 0x80000000) == 0)
    v6 = (unint64_t)((char *)v44 - (_BYTE *)__dst) >> 2;
  else
    v6 = v5 + 3;
  HGRect::Init(&v46, 0, 0, v4, 1);
  v7 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v7, *(_QWORD *)&v46.var0, *(_QWORD *)&v46.var2, 28, *v3, 16 * v4);
  v8 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v8, v7);
  v9 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v9);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v9, (const char *)1, v10);
  (*(void (**)(HGTextureWrap *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v9 + 120))(v9, 0, v8);
  HGTransform::HGTransform((HGTransform *)v45);
  v11 = (v6 >> 2);
  HGTransform::Scale((HGTransform *)v45, (float)((float)(int)v11 / (float)v4), 1.0, 1.0);
  v12 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v12);
  (*(void (**)(HGXForm *, _QWORD, HGTextureWrap *))(*(_QWORD *)v12 + 120))(v12, 0, v9);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v12 + 576))(v12, v45);
  v13 = (HGRenderer *)HGObject::operator new(0x450uLL);
  HGRenderer::HGRenderer(v13);
  (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v13 + 120))(v13, 36, 0);
  v14 = (*(uint64_t (**)(HGRenderer *, _QWORD, uint64_t, uint64_t, HGXForm *, uint64_t))(*(_QWORD *)v13 + 56))(v13, 0, v11 | 0x100000000, 28, v12, 1);
  (*(void (**)(HGBitmap *))(*(_QWORD *)v7 + 24))(v7);
  (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v8 + 24))(v8);
  (*(void (**)(HGTextureWrap *))(*(_QWORD *)v9 + 24))(v9);
  (*(void (**)(HGXForm *))(*(_QWORD *)v12 + 24))(v12);
  (*(void (**)(HGRenderer *))(*(_QWORD *)v13 + 24))(v13);
  if (*(_DWORD *)(v14 + 16) == 28)
    memcpy(__dst, *(const void **)(v14 + 80), 16 * (_DWORD)v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  HGTransform::~HGTransform((HGTransform *)v45);
  v15 = (float32x4_t *)this[10];
  v16 = (unint64_t)((_BYTE *)this[11] - (_BYTE *)v15) >> 2;
  v17 = (float32x4_t *)__dst;
  if ((int)v16 >= 4)
  {
    v18 = v16 >> 2;
    v19 = (unint64_t)((char *)v44 - (_BYTE *)__dst) >> 2;
    v20 = 2 * ((int)v19 / 4);
    v21 = (float)((float)(int)v18 / (float)(2 * v18 - 1));
    v22 = __sincos_stret((v21 + v21 + -1.0) * -3.14159265);
    v23 = 0;
    do
    {
      v25 = __sincos_stret((float)((float)(int)v23 / (float)(v18 - 1)) * 3.14159265);
      v24.i32[1] = HIDWORD(v25.__sinval);
      if ((int)v19 < 4)
      {
        v24.i32[0] = 0;
        v39 = v24;
        v41 = 0u;
      }
      else
      {
        v26 = 0.0;
        v39.i32[0] = 0;
        v41 = 0u;
        do
        {
          v36 = v17[v26];
          v35 = v26;
          v27 = __sincos_stret((float)(v26 / (float)((int)v19 / 4 - 1)) * 3.14159265);
          v28 = vcvt_hight_f64_f32(v36);
          v37 = vcvtq_f64_f32(*(float32x2_t *)v36.f32);
          v38 = v28;
          v29 = 0.0;
          v31.i32[0] = v39.i32[0];
          v30 = v41;
          do
          {
            v40 = *(float *)v31.i32;
            v42 = v30;
            v32 = __sincos_stret(((float)(v29 / (float)(v20 - 1)) + (float)(v29 / (float)(v20 - 1)) + -1.0) * -3.14159265);
            v33 = fmax(v22.__cosval * v25.__sinval * (v27.__sinval * v32.__cosval)+ v25.__cosval * v27.__cosval+ v22.__sinval * v25.__sinval * (v27.__sinval * v32.__sinval), 0.0);
            if (v33 > 1.0)
              v33 = 1.0;
            v34 = v33 * v33;
            *(float *)v31.i32 = v34 + v40;
            v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v37, v34), vcvtq_f64_f32(*(float32x2_t *)v42.f32))), vaddq_f64(vmulq_n_f64(v38, v34), vcvt_hight_f64_f32(v42)));
            v29 = v29 + 1.0;
          }
          while (v29 < (float)v20);
          v39 = v31;
          v41 = v30;
          v26 = v35 + 1.0;
        }
        while ((float)(v35 + 1.0) < (float)((int)v19 / 4));
      }
      v15[v23++] = vdivq_f32(v41, (float32x4_t)vdupq_lane_s32(v39, 0));
    }
    while (v23 != v18);
  }
  if (v17)
  {
    v44 = v17;
    operator delete(v17);
  }
}

void sub_1B2DAF014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;

  HGObject::operator delete(v35);
  HGTransform::~HGTransform((HGTransform *)&a35);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t heliumBlurGradientEnvironment(_QWORD *a1, void **a2, float a3)
{
  HGBitmap *v6;
  HGBitmapLoader *v7;
  HGTextureWrap *v8;
  char *v9;
  HGBlur *v10;
  HGRenderer *v11;
  uint64_t v12;
  HGRect v14;

  HGRect::Init(&v14, 0, 0, (int)((a1[1] - *a1) >> 2) / 4, 1);
  v6 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v6, *(_QWORD *)&v14.var0, *(_QWORD *)&v14.var2, 28, *a1, 4096);
  v7 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v7, v6);
  v8 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v8);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v8, (const char *)1, v9);
  (*(void (**)(HGTextureWrap *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v8 + 120))(v8, 0, v7);
  v10 = (HGBlur *)HGObject::operator new(0x220uLL);
  HGBlur::HGBlur(v10);
  (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v10 + 96))(v10, 0, a3, 0.0, 0.0, 0.0);
  (*(void (**)(HGBlur *, _QWORD, HGTextureWrap *))(*(_QWORD *)v10 + 120))(v10, 0, v8);
  v11 = (HGRenderer *)HGObject::operator new(0x450uLL);
  HGRenderer::HGRenderer(v11);
  (*(void (**)(HGRenderer *, uint64_t, _QWORD))(*(_QWORD *)v11 + 120))(v11, 36, 0);
  v12 = (*(uint64_t (**)(HGRenderer *, _QWORD, _QWORD, uint64_t, HGBlur *, uint64_t))(*(_QWORD *)v11 + 56))(v11, *(_QWORD *)&v14.var0, *(_QWORD *)&v14.var2, 28, v10, 1);
  (*(void (**)(HGBitmap *))(*(_QWORD *)v6 + 24))(v6);
  (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v7 + 24))(v7);
  (*(void (**)(HGTextureWrap *))(*(_QWORD *)v8 + 24))(v8);
  (*(void (**)(HGBlur *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(HGRenderer *))(*(_QWORD *)v11 + 24))(v11);
  if (*(_DWORD *)(v12 + 16) == 28)
    memcpy(*a2, *(const void **)(v12 + 80), 0x1000uLL);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
}

void sub_1B2DAF288(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void LiGradientEnvGenerator::buildTexture(_QWORD *a1@<X8>)
{
  _BYTE v2[40];

  ProGL::GL::GL((ProGL::GL *)v2);
  ProGL::createTexture((ProGL *)v2, a1);
  ProGL::GL::~GL((ProGL::GL *)v2);
}

void sub_1B2DAF30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t LiGradientEnvCache::instance(LiGradientEnvCache *this)
{
  unsigned __int8 v1;
  LiGradientEnvCache *v3;

  {
    v3 = (LiGradientEnvCache *)operator new();
    LiGradientEnvCache::LiGradientEnvCache(v3);
    LiGradientEnvCache::instance(void)::instance = (uint64_t)v3;
  }
  return LiGradientEnvCache::instance(void)::instance;
}

void sub_1B2DAF394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t LiGradientEnvCache::get(LiGradientEnvCache *this, const PCHash128 *a2, LiGradientEnvCache::value_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;

  v21 = 0;
  PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::findValue(*((_QWORD *)this + 1), a2, &v21, &v17);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3, &v17);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3 + 16, &v18);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3 + 32, &v19);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3 + 48, &v20);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v21;
}

void LiGradientEnvCache::value_t::~value_t(LiGradientEnvCache::value_t *this)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void LiGradientEnvCache::add(LiGradientEnvCache *this, const PCHash128 *a2, float *a3, LiGradientEnvCache::value_t *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  LiGradientEnvGenerator::LiGradientEnvGenerator((LiGradientEnvGenerator *)&v21);
  LiGradientEnvGenerator::setGradientImage(&v21, a3);
  LiGradientEnvGenerator::buildTexture(&v20);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a4, &v20);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LiGradientEnvGenerator::buildTexture(&v20);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a4 + 16, &v20);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  LiGradientEnvGenerator::buildTexture(&v20);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a4 + 32, &v20);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  LiGradientEnvGenerator::buildTexture(&v20);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a4 + 48, &v20);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::addValue(*((_QWORD *)this + 1), a2, (uint64_t *)a4, 0);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_1B2DAF724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  LiGradientEnvGenerator::~LiGradientEnvGenerator((LiGradientEnvGenerator *)va);
  _Unwind_Resume(a1);
}

void LiGradientEnvGenerator::~LiGradientEnvGenerator(LiGradientEnvGenerator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void LiGradientEnvCache::LiGradientEnvCache(LiGradientEnvCache *this)
{
  _QWORD *v2;
  uint64_t v3;

  PCSingleton::PCSingleton(this, 0);
  *v2 = &unk_1E657AFF0;
  v3 = operator new();
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v3 + 32;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = -1;
  *(_QWORD *)(v3 + 96) = -1;
  *(_QWORD *)(v3 + 104) = 0;
  *((_QWORD *)this + 1) = v3;
}

void sub_1B2DAF828(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void LiGradientEnvCache::~LiGradientEnvCache(os_unfair_lock_s **this)
{
  *this = (os_unfair_lock_s *)&unk_1E657AFF0;
  PCCache<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCache(this + 1);
  PCSingleton::~PCSingleton((PCSingleton *)this);
}

{
  *this = (os_unfair_lock_s *)&unk_1E657AFF0;
  PCCache<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCache(this + 1);
  PCSingleton::~PCSingleton((PCSingleton *)this);
  JUMPOUT(0x1B5E29170);
}

os_unfair_lock_s **PCCache<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCache(os_unfair_lock_s **a1)
{
  PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::clear(*a1);
  std::unique_ptr<PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100]((uint64_t *)a1, 0);
  return a1;
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::clear(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _QWORD *v3;

  v1 = a1;
  v2 = a1 + 4;
  PCSpinLock::lock(a1 + 4);
  v3 = *(_QWORD **)&v1[8]._os_unfair_lock_opaque;
  v1 += 8;
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy((uint64_t)&v1[-2], v3);
  *(_QWORD *)&v1[-2]._os_unfair_lock_opaque = v1;
  *(_QWORD *)&v1->_os_unfair_lock_opaque = 0;
  *(_QWORD *)&v1[2]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&v1[6]._os_unfair_lock_opaque = *(_QWORD *)&v1[4]._os_unfair_lock_opaque;
  *(_QWORD *)&v1[12]._os_unfair_lock_opaque = 0;
  PCSpinLock::unlock(v2);
}

void std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, a2[1]);
    LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)(a2 + 6));
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 16));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::findValue(uint64_t a1@<X0>, const PCHash128 *a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = (os_unfair_lock_s *)(a1 + 16);
  v23[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
  v23[0] = v9;
  if ((_QWORD *)(a1 + 32) == v9)
  {
    *a3 = 0;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)a4);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a4 + 2));
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a4 + 4));
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a4 + 6));
  }
  else
  {
    *a4 = v9[6];
    v10 = v9[7];
    a4[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    a4[2] = v9[8];
    v13 = v9[9];
    a4[3] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    a4[4] = v9[10];
    v16 = v9[11];
    a4[5] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    a4[6] = v9[12];
    v19 = v9[13];
    a4[7] = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(_QWORD *)(a1 + 72) + 1;
    *(_QWORD *)(a1 + 72) = v22;
    v9[15] = v22;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v23);
    *a3 = 1;
  }
  PCSpinLock::unlock(v8);
}

void sub_1B2DAFB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::addValue(uint64_t a1, const PCHash128 *a2, uint64_t *a3, unint64_t a4)
{
  os_unfair_lock_s *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  uint64_t *v38;
  LiGradientEnvCache::value_t *v39;
  _QWORD *v40;
  __int128 v41;
  _QWORD v42[8];
  __int128 v43;
  uint64_t v44;
  uint64_t v45[2];
  _QWORD v46[8];
  __int128 v47;
  uint64_t v48;
  _QWORD v49[2];

  v8 = (os_unfair_lock_s *)(a1 + 16);
  v49[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
    v10 = v9;
    v49[0] = v9;
    if ((_QWORD *)(a1 + 32) == v9)
    {
      v11 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v11;
      v13 = *a3;
      v12 = a3[1];
      v46[0] = *a3;
      v46[1] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v17 = a3[2];
      v16 = a3[3];
      v46[2] = v17;
      v46[3] = v16;
      if (v16)
      {
        v18 = (unint64_t *)(v16 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v21 = a3[4];
      v20 = a3[5];
      v46[4] = v21;
      v46[5] = v20;
      if (v20)
      {
        v22 = (unint64_t *)(v20 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v25 = a3[6];
      v24 = a3[7];
      v46[6] = v25;
      v46[7] = v24;
      if (v24)
      {
        v26 = (unint64_t *)(v24 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      *(_QWORD *)&v47 = a4;
      *((_QWORD *)&v47 + 1) = v11;
      v48 = 0;
      v41 = *(_OWORD *)a2;
      v42[0] = v13;
      v42[1] = v12;
      if (v12)
      {
        v28 = (unint64_t *)(v12 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v42[2] = v17;
      v42[3] = v16;
      if (v16)
      {
        v30 = (unint64_t *)(v16 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v42[4] = v21;
      v42[5] = v20;
      if (v20)
      {
        v32 = (unint64_t *)(v20 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v42[6] = v25;
      v42[7] = v24;
      if (v24)
      {
        v34 = (unint64_t *)(v24 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v43 = v47;
      v44 = v48;
      v45[0] = (uint64_t)std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>((uint64_t **)(a1 + 24), (const PCHash128 *)&v41, (uint64_t)&v41);
      v45[1] = v36;
      LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)v42);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v45);
      v37 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v37;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v37 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v40 = *(_QWORD **)(a1 + 48);
          if (v40 == *(_QWORD **)(a1 + 56))
            break;
          *(_QWORD *)&v41 = *v40;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v41);
          v38 = (uint64_t *)v41;
          v39 = (LiGradientEnvCache::value_t *)(v41 + 48);
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v41 + 112);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v38);
          LiGradientEnvCache::value_t::~value_t(v39);
          operator delete(v38);
          v37 = *(_QWORD *)(a1 + 80);
        }
      }
      LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)v46);
    }
    else
    {
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v9 + 6, a3);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v10 + 8, a3 + 2);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v10 + 10, a3 + 4);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v10 + 12, a3 + 6);
      PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::update(a1, (uint64_t)v49, a4);
    }
  }
  PCSpinLock::unlock(v8);
}

void sub_1B2DAFEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)va);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)(v16 - 72));
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  LiGradientEnvCache::value_t *v13;
  uint64_t *v14;

  v6 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(*(_QWORD *)a2 + 120) = v6;
  v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  v8 = *(_QWORD *)a2;
  v9 = a3 - *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(v8 + 112) = a3;
    if (!*(_QWORD *)(a1 + 104))
    {
      while (v10 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
      {
        v11 = *(uint64_t ***)(a1 + 48);
        if (v11 == *(uint64_t ***)(a1 + 56))
          break;
        v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        v12 = v14;
        v13 = (LiGradientEnvCache::value_t *)(v14 + 6);
        *(_QWORD *)(a1 + 80) -= v14[14];
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v12);
        LiGradientEnvCache::value_t::~value_t(v13);
        operator delete(v12);
        v10 = *(_QWORD *)(a1 + 80);
      }
    }
  }
}

void *std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  void **v5;
  void *v6;
  uint64_t **v7;
  uint64_t v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x88uLL);
    v9[1] = (uint64_t)(a1 + 1);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data::Data((__n128 *)v6 + 3, (__n128 *)(a3 + 16));
    v10 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](v9, 0);
  }
  return v6;
}

__n128 PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data::Data(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 result;

  v2 = a2->n128_u64[1];
  a1->n128_u64[0] = a2->n128_u64[0];
  a1->n128_u64[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[1].n128_u64[1];
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a1[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[2].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[2].n128_u64[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[3].n128_u64[1];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[3].n128_u64[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  result = a2[4];
  a1[5].n128_u64[0] = a2[5].n128_u64[0];
  a1[4] = result;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,LiGradientEnvCache::value_t,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)(v2 + 48));
    operator delete((void *)v2);
  }
}

void LiLight::LiLight(LiLight *this)
{
  *((_QWORD *)this + 115) = &off_1E65EB048;
  *((_QWORD *)this + 116) = 0;
  *((_BYTE *)this + 936) = 1;
  LiSceneObject::LiSceneObject(this, (uint64_t *)&off_1E657B110);
  *(_QWORD *)this = &off_1E657B040;
  *((_QWORD *)this + 115) = &unk_1E657B0F0;
  *((_DWORD *)this + 142) = -1;
  *((_QWORD *)this + 72) = 0x3FF0000000000000;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 74) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 608), 1.0, 1.0, 1.0, 1.0);
  *((_QWORD *)this + 80) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 81) = 0x3FF0000000000000;
  *((_DWORD *)this + 164) = 100;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = 0x3FF921FB54442D18;
  *((_WORD *)this + 360) = 257;
  *((_OWORD *)this + 44) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 724), 0.0, 0.0, 0.0, 1.0);
  *((_QWORD *)this + 93) = 0;
  *((_BYTE *)this + 752) = 0;
  *((_QWORD *)this + 110) = 0x3FF0000000000000;
  *((_QWORD *)this + 105) = 0x3FF0000000000000;
  *((_QWORD *)this + 100) = 0x3FF0000000000000;
  *((_QWORD *)this + 95) = 0x3FF0000000000000;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  ShadowCubeMap::ShadowCubeMap((LiLight *)((char *)this + 888));
  *((_DWORD *)this + 228) = -1;
}

void sub_1B2DB02A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1E657B110);
  *(_QWORD *)(v1 + 920) = v2 + 16;
  *(_BYTE *)(v1 + 936) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 928));
  _Unwind_Resume(a1);
}

uint64_t LiLight::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 != a1)
  {
    LiSceneObject::operator=(a1, a2);
    v4 = 0;
    *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
    v5 = *(_OWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = v5;
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    v6 = *(_QWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_QWORD *)(a1 + 640) = v6;
    *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
    *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 656);
    v7 = *(_OWORD *)(a2 + 664);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *(_OWORD *)(a1 + 664) = v7;
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
    v9 = (*(_DWORD *)(a2 + 656) - 1) < 3 && *(_BYTE *)(a2 + 721) != 0;
    *(_BYTE *)(a1 + 721) = v9;
    *(_OWORD *)(a1 + 724) = *(_OWORD *)(a2 + 724);
    *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
    *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752);
    v10 = a2 + 760;
    v11 = a1 + 760;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
      ++v4;
      v11 += 32;
      v10 += 32;
    }
    while (v4 != 4);
    v13 = *(_DWORD *)(a2 + 900);
    if (*(_DWORD *)(a1 + 896) >= v13)
      v14 = *(_DWORD *)(a1 + 896);
    else
      v14 = (2 * v13) | 1;
    PCArray<ShadowMapsLazy,PCArray_Traits<ShadowMapsLazy>>::resize(a1 + 888, v13, v14);
    if (*(int *)(a2 + 900) >= 1)
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a2 + 904) + 24 * v15;
        v17 = *(_QWORD *)(a1 + 904) + 24 * v15;
        v18 = *(_DWORD *)(v16 + 12);
        if (*(_DWORD *)(v17 + 8) >= v18)
          v19 = *(_DWORD *)(v17 + 8);
        else
          v19 = (2 * v18) | 1;
        PCArray<ShadowMap,PCArray_Traits<ShadowMap>>::resize(*(_QWORD *)(a1 + 904) + 24 * v15, v18, v19);
        if (*(int *)(v16 + 12) >= 1)
        {
          v20 = 0;
          v21 = 0;
          do
          {
            ShadowMap::operator=(*(_QWORD *)(v17 + 16) + v20, *(_QWORD *)(v16 + 16) + v20);
            ++v21;
            v20 += 600;
          }
          while (v21 < *(int *)(v16 + 12));
        }
        ++v15;
      }
      while (v15 < *(int *)(a2 + 900));
    }
    *(_DWORD *)(a1 + 912) = *(_DWORD *)(a2 + 912);
  }
  return a1;
}

void LiLight::LiLight(LiLight *this, const LiLight *a2)
{
  *((_QWORD *)this + 115) = &off_1E65EB048;
  *((_QWORD *)this + 116) = 0;
  *((_BYTE *)this + 936) = 1;
  LiSceneObject::LiSceneObject(this, (uint64_t *)&off_1E657B110);
  *(_QWORD *)this = &off_1E657B040;
  *((_QWORD *)this + 115) = &unk_1E657B0F0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 73) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 608));
  *((_QWORD *)this + 80) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 83) = 0;
  *((_OWORD *)this + 42) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiLight *)((char *)this + 724));
  *((_QWORD *)this + 110) = 0x3FF0000000000000;
  *((_QWORD *)this + 105) = 0x3FF0000000000000;
  *((_QWORD *)this + 100) = 0x3FF0000000000000;
  *((_QWORD *)this + 95) = 0x3FF0000000000000;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  ShadowCubeMap::ShadowCubeMap((LiLight *)((char *)this + 888));
  LiLight::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_1B2DB05A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  ShadowCubeMap *v2;
  uint64_t v3;

  ShadowCubeMap::~ShadowCubeMap(v2);
  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1E657B110);
  *(_QWORD *)(v1 + 920) = v3 + 16;
  *(_BYTE *)(v1 + 936) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 928));
  _Unwind_Resume(a1);
}

uint64_t LiSceneObject::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t k;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  PCSharedCount v26;

  if (a2 == a1)
    goto LABEL_17;
  v4 = 0;
  v5 = a1 + 8;
  v6 = a2 + 8;
  do
  {
    for (i = 0; i != 32; i += 8)
      *(_QWORD *)(v5 + i) = *(_QWORD *)(v6 + i);
    ++v4;
    v5 += 32;
    v6 += 32;
  }
  while (v4 != 4);
  if (a2 == a1)
  {
LABEL_17:
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  }
  else
  {
    v8 = 0;
    v9 = a1 + 136;
    v10 = a2 + 136;
    do
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v9 + j) = *(_QWORD *)(v10 + j);
      ++v8;
      v9 += 32;
      v10 += 32;
    }
    while (v8 != 4);
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
    if (a2 != a1)
    {
      v12 = 0;
      v13 = a1 + 272;
      v14 = a2 + 272;
      do
      {
        for (k = 0; k != 32; k += 8)
          *(_QWORD *)(v13 + k) = *(_QWORD *)(v14 + k);
        ++v12;
        v13 += 32;
        v14 += 32;
      }
      while (v12 != 4);
    }
  }
  v16 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v16;
  v17 = *(_OWORD *)(a2 + 432);
  v18 = *(_OWORD *)(a2 + 448);
  v19 = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 448) = v18;
  *(_OWORD *)(a1 + 464) = v19;
  *(_OWORD *)(a1 + 432) = v17;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  PCSharedCount::PCSharedCount(&v26, (const PCSharedCount *)(a2 + 496));
  PCSharedCount::operator=((uint64_t *)(a1 + 496), (uint64_t *)&v26);
  PCSharedCount::~PCSharedCount(&v26);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
  if (a2 != a1)
  {
    LiString::dec((LiString *)(a1 + 512));
    v20 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 512) = v20;
    if (v20)
    {
      v21 = (unsigned int *)(v20 - 12);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
  }
  v23 = *(_OWORD *)(a2 + 520);
  v24 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 549) = *(_OWORD *)(a2 + 549);
  *(_OWORD *)(a1 + 520) = v23;
  *(_OWORD *)(a1 + 536) = v24;
  return a1;
}

void sub_1B2DB0798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiLight::getSolidSceneID(LiLight *this)
{
  return *((unsigned int *)this + 228);
}

void LiLight::~LiLight(PCSharedCount *this)
{
  ShadowCubeMap::~ShadowCubeMap((ShadowCubeMap *)&this[111]);
  LiSceneObject::~LiSceneObject(this, (PC_Sp_counted_base **)&off_1E657B110);
  this[115].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[117].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[116].var0);
}

{
  LiLight::~LiLight(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiLight::~LiLight(LiLight *this)
{
  LiLight::~LiLight((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiLight::~LiLight((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

double LiLight::localBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v3;
  result = *(double *)(a1 + 680);
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 40) = result;
  return result;
}

double LiLight::plane@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void LiLight::cast(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
}

double *LiLight::transform(uint64_t a1, double *a2)
{
  PCMatrix44Tmpl<double>::transform<double>(a2, (double *)(a1 + 664), (double *)(a1 + 664));
  return PCMatrix44Tmpl<double>::transform_vector<double>(a2, (double *)(a1 + 624), (double *)(a1 + 624));
}

uint64_t LiLight::mapShadows(uint64_t a1, uint64_t a2)
{
  return ShadowCubeMap::operator*=(a1 + 888, a2);
}

uint64_t LiLight::getHeliumNodeSurface@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int v5;
  LiHeLightAmbient *v6;

  v4 = a2[1];
  if (*(_BYTE *)(v4 + 98)
    && ((v5 = *(_DWORD *)(result + 656), (v5 - 1) <= 2) && *(_BYTE *)(result + 721)
     || !*(_BYTE *)(v4 + 103)))
  {
    *a3 = 0;
    switch(v5)
    {
      case 0:
        result = LiLight::getAmbientNode(result, a2, &v6);
        goto LABEL_12;
      case 1:
        result = LiLight::getDirectionalNode(result, (uint64_t)a2, &v6);
        goto LABEL_12;
      case 2:
        result = (uint64_t)LiLight::getPointNodeSurface(result, (uint64_t)a2, &v6);
        goto LABEL_12;
      case 3:
        result = (uint64_t)LiLight::getSpotNodeSurface(result, (uint64_t)a2, &v6);
LABEL_12:
        if (v6)
          *a3 = (uint64_t)v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    result = *a2;
    *a3 = *a2;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t LiLight::getAmbientNode@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, LiHeLightAmbient **a3@<X8>)
{
  double v5;
  float v6;
  float v7;
  LiHeLightAmbient *v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[16];

  v5 = *(double *)(a1 + 648);
  v6 = v5 * *(float *)(a1 + 608);
  v7 = v5 * *(float *)(a1 + 612);
  *(float *)&v5 = v5 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v11, v6, v7, *(float *)&v5, *(float *)(a1 + 620));
  v8 = (LiHeLightAmbient *)HGObject::operator new(0x1A0uLL);
  LiHeLightAmbient::LiHeLightAmbient(v8);
  v9 = *a2;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(LiHeLightAmbient *, _QWORD, uint64_t))(*(_QWORD *)v8 + 120))(v8, 0, v9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  result = LiHeLightAmbient::setColor(v8, (const PCWorkingColorVector *)v11);
  *a3 = v8;
  return result;
}

void sub_1B2DB0AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t LiLight::getDirectionalNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  void *v25;
  uint64_t result;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[16];
  double v30[3];
  double v31[3];
  __int128 v32;
  uint64_t v33;

  v32 = *(_OWORD *)(a1 + 624);
  v33 = *(_QWORD *)(a1 + 640);
  v6 = PCMatrix44Tmpl<double>::transform_vector<double>(*(double **)(a2 + 32), (double *)&v32, (double *)&v32);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  if (v10 < 0.000000100000001 && v10 > -0.000000100000001)
    v10 = 1.0;
  v31[0] = v7 / v10;
  v31[1] = v8 / v10;
  v31[2] = v9 / v10;
  v12 = *(double **)(a2 + 24);
  v13 = *v12 + v7 / v10;
  v14 = v8 / v10 + v12[1];
  v15 = v9 / v10 + v12[2];
  v16 = sqrt(v13 * v13 + v14 * v14 + v15 * v15);
  if (v16 < 0.000000100000001 && v16 > -0.000000100000001)
    v16 = 1.0;
  v30[0] = v13 / v16;
  v30[1] = v14 / v16;
  v30[2] = v15 / v16;
  v18 = *(double *)(a1 + 648);
  v19 = v18 * *(float *)(a1 + 608);
  v20 = v18 * *(float *)(a1 + 612);
  *(float *)&v18 = v18 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v29, v19, v20, *(float *)&v18, *(float *)(a1 + 620));
  v21 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v21 + 97))
    v28 = *(_OWORD *)(v21 + 64);
  else
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v28, 0.0, 0.0, 0.0, 0.0);
  v22 = *(_QWORD *)a2;
  v27 = v22;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v23 = *(_QWORD *)(a2 + 16);
  v24 = *(double *)(*(_QWORD *)(a2 + 8) + 88);
  v25 = HGObject::operator new(0x1A0uLL);
  LiHeLightDirectional::LiHeLightDirectional(v25, &v27, v31, v30, v29, &v28, v23, v24);
  *a3 = v25;
  result = v27;
  if (v27)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  return result;
}

void sub_1B2DB0CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

HGNode *LiLight::getPointNodeSurface@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, LiHeLightProgramPointSurface **a3@<X8>)
{
  int v6;
  double v7;
  float v8;
  float v9;
  uint64_t v10;
  HGNode *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;
  double *v18;
  LiHeLightProgramPointSurface *v19;
  float v20;
  float v21;
  HGNode *result;
  HGNode *v23;
  double *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  LiHeLightProgramPointSurface *v28;
  float v29;
  HGNode *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  float v35[4];

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 97);
  v7 = *(double *)(a1 + 648);
  v8 = v7 * *(float *)(a1 + 608);
  v9 = v7 * *(float *)(a1 + 612);
  *(float *)&v7 = v7 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v35, v8, v9, *(float *)&v7, *(float *)(a1 + 620));
  v10 = *(_QWORD *)(a1 + 592);
  v33 = *(_OWORD *)(a1 + 576);
  v34 = v10;
  v31 = *(_OWORD *)(a1 + 664);
  v32 = *(_QWORD *)(a1 + 680);
  *a3 = 0;
  if (v6)
  {
    v11 = *(HGNode **)a2;
    v30 = v11;
    if (v11)
      (*(void (**)(HGNode *))(*(_QWORD *)v11 + 16))(v11);
    v12 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v31, (double *)&v31);
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(double **)(a2 + 16);
    v15 = *(double *)(v14 + 88);
    v16 = *(double **)(a2 + 24);
    v17 = *(double *)(a1 + 600);
    v18 = *(double **)(a2 + 40);
    v19 = (LiHeLightProgramPointSurface *)HGObject::operator new(0x1A0uLL);
    v20 = v15;
    v21 = v17;
    LiHeLightPointSurface::LiHeLightPointSurface(v19, &v30, v12, v35, (float *)(v14 + 64), v13, v16, (double *)&v33, v20, v21, v18);
    if (v19)
      *a3 = v19;
    result = v30;
    if (v30)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v30 + 24))(result);
  }
  else
  {
    v23 = *(HGNode **)a2;
    v30 = v23;
    if (v23)
      (*(void (**)(HGNode *))(*(_QWORD *)v23 + 16))(v23);
    v24 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v31, (double *)&v31);
    v25 = *(_QWORD *)(a2 + 16);
    v26 = *(double *)(a1 + 600);
    v27 = *(_QWORD *)(a2 + 40);
    v28 = (LiHeLightProgramPointSurface *)HGObject::operator new(0x1A0uLL);
    v29 = v26;
    LiHeLightPointSurfaceDiffuse::LiHeLightPointSurfaceDiffuse(v28, &v30, v24, v35, v25, &v33, v27, v29);
    if (v28)
      *a3 = v28;
    result = v30;
    if (v30)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v30 + 24))(result);
  }
  return result;
}

void sub_1B2DB0EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

HGNode *LiLight::getSpotNodeSurface@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, LiHeLightProgramSpotSurface **a3@<X8>)
{
  int v6;
  double v7;
  float v8;
  float v9;
  double v10;
  HGNode *v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v19;
  uint64_t v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  LiHeLightProgramSpotSurface *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  HGNode *result;
  HGNode *v35;
  double *v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double *v49;
  LiHeLightProgramSpotSurfaceDiffuse *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  double v55;
  double v56;
  double v57;
  HGNode *v58;
  float64x2_t v59;
  double v60;
  __int128 v61;
  uint64_t v62;
  float v63[4];

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 97);
  v7 = *(double *)(a1 + 648);
  v8 = v7 * *(float *)(a1 + 608);
  v9 = v7 * *(float *)(a1 + 612);
  *(float *)&v7 = v7 * *(float *)(a1 + 616);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v63, v8, v9, *(float *)&v7, *(float *)(a1 + 620));
  v61 = *(_OWORD *)(a1 + 664);
  v62 = *(_QWORD *)(a1 + 680);
  v10 = -*(double *)(a1 + 640);
  v59 = vnegq_f64(*(float64x2_t *)(a1 + 624));
  v60 = v10;
  *a3 = 0;
  if (v6)
  {
    v11 = *(HGNode **)a2;
    v58 = v11;
    if (v11)
      (*(void (**)(HGNode *))(*(_QWORD *)v11 + 16))(v11);
    v12 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v61, (double *)&v61);
    v13 = PCMatrix44Tmpl<double>::transform_vector<double>(*(double **)(a2 + 32), v59.f64, v59.f64);
    v14 = *v13;
    v15 = v13[1];
    v16 = v13[2];
    v17 = sqrt(v14 * v14 + v15 * v15 + v16 * v16);
    if (v17 < 0.000000100000001 && v17 > -0.000000100000001)
      v17 = 1.0;
    v55 = v14 / v17;
    v56 = v15 / v17;
    v57 = v16 / v17;
    v20 = *(_QWORD *)(a2 + 8);
    v19 = *(double **)(a2 + 16);
    v21 = *(double *)(v20 + 88);
    v22 = *(double **)(a2 + 24);
    v23 = *(double *)(a1 + 600);
    v24 = *(double *)(a1 + 696);
    v25 = *(double *)(a1 + 704);
    v26 = *(double *)(a1 + 712);
    v27 = *(double **)(a2 + 40);
    v28 = (LiHeLightProgramSpotSurface *)HGObject::operator new(0x1A0uLL);
    v29 = v21;
    v30 = v23;
    v31 = v24;
    v32 = v24 + v25;
    v33 = v26;
    LiHeLightSpotSurface::LiHeLightSpotSurface(v28, &v58, v12, &v55, v63, (float *)(v20 + 64), v19, v22, v29, v30, v31, v32, v33, (double *)(a1 + 576), v27);
    if (v28)
      *a3 = v28;
    result = v58;
    if (v58)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v58 + 24))(result);
  }
  else
  {
    v35 = *(HGNode **)a2;
    v58 = v35;
    if (v35)
      (*(void (**)(HGNode *))(*(_QWORD *)v35 + 16))(v35);
    v36 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v61, (double *)&v61);
    v37 = PCMatrix44Tmpl<double>::transform_vector<double>(*(double **)(a2 + 32), v59.f64, v59.f64);
    v38 = *v37;
    v39 = v37[1];
    v40 = v37[2];
    v41 = sqrt(v38 * v38 + v39 * v39 + v40 * v40);
    if (v41 < 0.000000100000001 && v41 > -0.000000100000001)
      v41 = 1.0;
    v55 = v38 / v41;
    v56 = v39 / v41;
    v57 = v40 / v41;
    v43 = *(double **)(a2 + 16);
    v44 = *(double **)(a2 + 24);
    v45 = *(double *)(a1 + 600);
    v46 = *(double *)(a1 + 696);
    v47 = *(double *)(a1 + 704);
    v48 = *(double *)(a1 + 712);
    v49 = *(double **)(a2 + 40);
    v50 = (LiHeLightProgramSpotSurfaceDiffuse *)HGObject::operator new(0x1A0uLL);
    v51 = v45;
    v52 = v46;
    v53 = v46 + v47;
    v54 = v48;
    LiHeLightSpotSurfaceDiffuse::LiHeLightSpotSurfaceDiffuse(v50, &v58, v36, &v55, v63, v43, v44, (double *)(a1 + 576), v51, v52, v53, v54, v49);
    if (v50)
      *a3 = v50;
    result = v58;
    if (v58)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v58 + 24))(result);
  }
  return result;
}

void sub_1B2DB128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

HGNode *LiLight::getHeliumNodeShadows@<X0>(HGNode *result@<X0>, HGNode **a2@<X1>, HGNode **a3@<X8>)
{
  int v4;
  HGNode *v5;

  v4 = *((_DWORD *)result + 164);
  if ((v4 - 1) <= 2 && *((_BYTE *)result + 721))
  {
    *a3 = 0;
    if (v4 == 3 || v4 == 2 || v4 == 1)
    {
      result = LiLight::getPointNodeShadow((uint64_t)result, (uint64_t)a2, (LiHeLightInitPass **)&v5);
      if (v5)
        *a3 = v5;
    }
  }
  else
  {
    result = *a2;
    *a3 = *a2;
    if (result)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

HGNode *LiLight::getPointNodeShadow@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, LiHeLightInitPass **a3@<X8>)
{
  __int128 *v6;
  HGNode *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  LiHeProgramMaxBlend *v13;
  HGNode *v14;
  HGNode *v15;
  LiHeProgramMaxBlend *v16;
  int v17;
  uint64_t v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float64x2_t *v30;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  HGBlur *v42;
  float v43;
  float v44;
  HGNode *result;
  LiHeLightInitPass *v46;
  HGNode *v47;
  double v48;
  double v49;
  long double v50;
  double v51;
  double v52;
  double v53;
  int v54;
  int v55;
  float v56;
  double v57;
  char *v58;
  void *v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  float *v66;
  int v67;
  HGModulatedBlur *v68;
  float v69;
  float v70;
  LiHeLightInitPass *v71;
  HGNode *v72;
  _BOOL8 v73;
  LiHeLightInitPass *v74;
  double v75;
  double __y;
  void *__p[2];
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  __int128 v82;
  double v83[4];
  __int128 v84;
  __int128 v85;
  float64x2_t v86;
  double v87;
  HGNode *v88;
  HGNode *v89;
  HGNode *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106[4];

  v106[1] = *(double *)MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 656) - 1) > 2
    || !*(_BYTE *)(a1 + 721)
    || (v6 = (__int128 *)(a2 + 8), !*(_BYTE *)(*(_QWORD *)(a2 + 8) + 102)))
  {
    result = *(HGNode **)a2;
    *a3 = *(LiHeLightInitPass **)a2;
    if (result)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
    return result;
  }
  v7 = *(HGNode **)a2;
  v90 = v7;
  if (*(double *)&v7 != 0.0)
    (*(void (**)(HGNode *))(*(_QWORD *)v7 + 16))(v7);
  v8 = *(_OWORD *)(a2 + 88);
  v95 = *(_OWORD *)(a2 + 72);
  v96 = v8;
  v97 = *(_OWORD *)(a2 + 104);
  v98 = *(_QWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 24);
  v91 = *v6;
  v92 = v9;
  v10 = *(_OWORD *)(a2 + 56);
  v93 = *(_OWORD *)(a2 + 40);
  v94 = v10;
  v88 = 0;
  *(double *)&v89 = 0.0;
  if (*(int *)(a1 + 900) < 1)
    goto LABEL_70;
  v11 = 0;
  v12 = 0;
  do
  {
    v99 = 0.0;
    *(_QWORD *)&v84 = 0;
    LiLight::getShadowFromFace(a1, &v90, *(_QWORD *)(a1 + 904) + v11, (HGNode **)&v99, (HGNode **)&v84);
    if (v99 != 0.0)
    {
      if (*(double *)&v89 == 0.0)
      {
        *(double *)&v89 = v99;
        (*(void (**)(void))(**(_QWORD **)&v99 + 16))();
        v14 = v88;
        v15 = (HGNode *)v84;
        if (v88 == (HGNode *)v84)
          goto LABEL_28;
        if (v88)
        {
          (*(void (**)(void))(*(_QWORD *)v88 + 24))();
          v15 = (HGNode *)v84;
        }
        v88 = v15;
        if (v15)
          (*(void (**)(HGNode *))(*(_QWORD *)v15 + 16))(v15);
      }
      else
      {
        v13 = (LiHeProgramMaxBlend *)HGObject::operator new(0x1A0uLL);
        LiHeMaxBlend::LiHeMaxBlend(v13, &v89, &v99);
        if (v89 == (HGNode *)v13)
        {
          if (v13)
            (*(void (**)(LiHeProgramMaxBlend *))(*(_QWORD *)v13 + 24))(v13);
        }
        else
        {
          if (*(double *)&v89 != 0.0)
            (*(void (**)(void))(*(_QWORD *)v89 + 24))();
          v89 = (HGNode *)v13;
        }
        v16 = (LiHeProgramMaxBlend *)HGObject::operator new(0x1A0uLL);
        LiHeMaxBlend::LiHeMaxBlend(v16, &v88, &v84);
        if (v88 == (HGNode *)v16)
        {
          if (v16)
            (*(void (**)(LiHeProgramMaxBlend *))(*(_QWORD *)v16 + 24))(v16);
        }
        else
        {
          if (v88)
            (*(void (**)(void))(*(_QWORD *)v88 + 24))();
          v88 = (HGNode *)v16;
        }
      }
    }
    v14 = (HGNode *)v84;
LABEL_28:
    if (v14)
      (*(void (**)(HGNode *))(*(_QWORD *)v14 + 24))(v14);
    if (v99 != 0.0)
      (*(void (**)(double))(**(_QWORD **)&v99 + 24))(COERCE_DOUBLE(*(_QWORD *)&v99));
    ++v12;
    v11 += 24;
  }
  while (v12 < *(int *)(a1 + 900));
  if (*(double *)&v89 != 0.0)
  {
    if (*(double *)(a1 + 744) != 0.0)
    {
      v17 = *(unsigned __int8 *)(a1 + 752);
      v18 = *(_QWORD *)(a2 + 80);
      v99 = 0.0;
      v100 = 0.0;
      v101 = 1.0;
      PCMatrix44Tmpl<double>::transform_normal<double>(v18, &v99, &v86);
      v19 = sqrt(v86.f64[0] * v86.f64[0] + v86.f64[1] * v86.f64[1] + v87 * v87);
      if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
      {
        v86.f64[0] = v86.f64[0] / v19;
        v86.f64[1] = v86.f64[1] / v19;
        v87 = v87 / v19;
      }
      v20 = *(double **)(a2 + 80);
      v99 = 0.0;
      v100 = 0.0;
      v101 = 0.0;
      v102 = 1.0;
      v84 = 0u;
      v85 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(v20, &v99, (double *)&v84);
      v21 = *(double *)(a1 + 664);
      v22 = *(double *)(a1 + 672);
      v23 = *(double *)(a1 + 680);
      v24 = (v21 - *(double *)&v84) * v86.f64[0]
          + (v22 - *((double *)&v84 + 1)) * v86.f64[1]
          + (v23 - *(double *)&v85) * v87;
      v83[0] = v21 - v86.f64[0] * v24;
      v83[1] = v22 - v86.f64[1] * v24;
      v83[2] = v23 - v87 * v24;
      v83[3] = 1.0;
      v25 = *(double **)(a2 + 72);
      v81 = 0u;
      v82 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(v25, v83, v81.f64);
      v26 = 1.0;
      v27 = v81.f64[0] * (1.0 / *((double *)&v82 + 1));
      v28 = 1.0 / *((double *)&v82 + 1) * v81.f64[1];
      v81.f64[0] = v27;
      v81.f64[1] = v28;
      v29 = 1.0 / *((double *)&v82 + 1) * *(double *)&v82;
      *(double *)&v82 = v29;
      *((double *)&v82 + 1) = *((double *)&v82 + 1) * (1.0 / *((double *)&v82 + 1));
      if (v17)
        v26 = *(double *)(a1 + 744);
      v30 = *(float64x2_t **)(a2 + 88);
      v79 = 0.0;
      v80 = 0.0;
      __p[0] = *(void **)&v27;
      __p[1] = *(void **)&v28;
      v78 = v29;
      approximateStretch(v30, (double *)__p, &v80, &v79, v26);
      __p[0] = *(void **)&v81.f64[0];
      __p[1] = 0;
      v78 = 0.0;
      approximateStretch(v30, (double *)__p, &v99, &v100, v26);
      __p[0] = 0;
      __p[1] = *(void **)&v81.f64[1];
      v78 = 0.0;
      approximateStretch(v30, (double *)__p, &v101, &v102, v26);
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)__p = vmulq_f64(v81, _Q1);
      v78 = 0.0;
      approximateStretch(v30, (double *)__p, &v103, &v104, v26);
      __p[0] = 0;
      __p[1] = 0;
      v78 = 0.0;
      approximateStretch(v30, (double *)__p, &v105, v106, v26);
      v36 = v80;
      if (v80 >= v105)
        v36 = v105;
      if (v36 >= v103)
        v36 = v103;
      if (v36 >= v101)
        v36 = v101;
      v37 = v99;
      if (v36 < v99)
        v37 = v36;
      v38 = v79;
      if (v79 >= v106[0])
        v38 = v106[0];
      if (v38 >= v104)
        v38 = v104;
      if (v38 >= v102)
        v38 = v102;
      if (v38 >= v100)
        v38 = v100;
      if (v17)
      {
        v39 = *(double *)(a1 + 744) * 15.0;
        if (v39 >= v37)
          v40 = v37;
        else
          v40 = *(double *)(a1 + 744) * 15.0;
        if (v39 >= v38)
          v41 = v38;
        else
          v41 = *(double *)(a1 + 744) * 15.0;
        v79 = v41;
        v80 = v40;
        v42 = (HGBlur *)HGObject::operator new(0x220uLL);
        HGBlur::HGBlur(v42);
        (*(void (**)(HGBlur *, _QWORD, HGNode *))(*(_QWORD *)v42 + 120))(v42, 0, v89);
        v43 = v40;
        v44 = v41;
        (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v42 + 96))(v42, 0, v43, v44, 0.0, 0.0);
        if (v89 != (HGNode *)v42)
        {
          if (*(double *)&v89 != 0.0)
            (*(void (**)(void))(*(_QWORD *)v89 + 24))();
          v89 = (HGNode *)v42;
          (*(void (**)(HGBlur *))(*(_QWORD *)v42 + 16))(v42);
        }
        (*(void (**)(HGBlur *))(*(_QWORD *)v42 + 24))(v42);
      }
      else
      {
        if (v37 > 15.0)
          v37 = 15.0;
        v75 = v37;
        if (v38 <= 15.0)
          v48 = v38;
        else
          v48 = 15.0;
        v79 = v48;
        v80 = v37;
        LODWORD(__y) = 0;
        std::vector<float>::vector(__p, 1uLL, &__y);
        v49 = *(double *)(a1 + 744);
        __y = 0.0;
        v50 = modf((v49 + -100.0) / 100.0, &__y);
        v51 = v50 + __y;
        if (v51 <= 0.0)
          v52 = 6.0;
        else
          v52 = v51 + 6.0;
        v53 = __y + 7.0;
        if (v49 < 2.0)
          v53 = 0.0;
        v54 = (int)v53;
        if ((int)v53 >= 1)
        {
          v55 = 0;
          v56 = *(float *)__p[0];
          do
          {
            v57 = fmax(floor(v49 * pow(((double)v55 + 1.0) / (double)v54, v52) + 1.0 + 0.0000001), 2.0);
            if (v57 > v56 + 2.0)
            {
              v56 = v57;
              v58 = (char *)__p[1];
              if (__p[1] >= (void *)*(_QWORD *)&v78)
              {
                v60 = (char *)__p[0];
                v61 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v63 = *(_QWORD *)&v78 - (unint64_t)__p[0];
                if ((uint64_t)(*(_QWORD *)&v78 - (unint64_t)__p[0]) >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v78, v64);
                  v60 = (char *)__p[0];
                  v58 = (char *)__p[1];
                }
                else
                {
                  v65 = 0;
                }
                v66 = (float *)&v65[4 * v61];
                *v66 = v56;
                v59 = v66 + 1;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66-- - 1) = v67;
                }
                __p[0] = v66;
                __p[1] = v59;
                *(_QWORD *)&v78 = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(float *)__p[1] = v56;
                v59 = v58 + 4;
              }
              __p[1] = v59;
            }
            ++v55;
          }
          while (v55 != v54);
        }
        v68 = (HGModulatedBlur *)HGObject::operator new(0x1D0uLL);
        HGModulatedBlur::HGModulatedBlur(v68);
        *(_QWORD *)v68 = &unk_1E657D1E0;
        HGNode::SetInput((HGNode *)v68, 0, v89);
        (*(void (**)(HGModulatedBlur *, uint64_t, HGNode *))(*(_QWORD *)v68 + 120))(v68, 1, v88);
        HGModulatedBlur::setBlurValues(v68, (const float *)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 2);
        (*(void (**)(HGModulatedBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v68 + 96))(v68, 0, 1.0, 0.0, 0.0, 0.0);
        v69 = v75;
        v70 = v48;
        (*(void (**)(HGModulatedBlur *, uint64_t, float, float, float, float))(*(_QWORD *)v68 + 96))(v68, 1, v69, v70, 0.0, 0.0);
        if (v89 != (HGNode *)v68)
        {
          if (*(double *)&v89 != 0.0)
            (*(void (**)(void))(*(_QWORD *)v89 + 24))();
          v89 = (HGNode *)v68;
          (*(void (**)(HGModulatedBlur *))(*(_QWORD *)v68 + 16))(v68);
        }
        (*(void (**)(HGModulatedBlur *))(*(_QWORD *)v68 + 24))(v68);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)v6 + 98))
    {
      if (v7 != v89)
      {
        if (*(double *)&v7 != 0.0)
          (*(void (**)(HGNode *))(*(_QWORD *)v7 + 24))(v7);
        v7 = v89;
        v90 = v89;
        if (*(double *)&v89 != 0.0)
          (*(void (**)(HGNode *))(*(_QWORD *)v89 + 16))(v89);
      }
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v99, 1.0, 1.0, 1.0, 0.0);
      *(double *)&v71 = COERCE_DOUBLE(HGObject::operator new(0x1A0uLL));
      LiHeLightInitPass::LiHeLightInitPass(v71, (const PCWorkingColorVector *)&v99);
      LiLight::stencilShadowByLight(a1, (uint64_t)&v90, &v99);
      v72 = *(HGNode **)&v99;
      if (v89 != *(HGNode **)&v99)
      {
        if (*(double *)&v89 != 0.0)
          (*(void (**)(void))(*(_QWORD *)v89 + 24))();
        v89 = v72;
        if (v72)
          (*(void (**)(HGNode *))(*(_QWORD *)v72 + 16))(v72);
      }
      if (v7 != (HGNode *)v71)
      {
        if (*(double *)&v7 != 0.0)
          (*(void (**)(HGNode *))(*(_QWORD *)v7 + 24))(v7);
        v90 = (HGNode *)v71;
        if (*(double *)&v71 != 0.0)
          (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v71 + 16))(v71);
      }
      if (v72)
        (*(void (**)(HGNode *))(*(_QWORD *)v72 + 24))(v72);
      if (*(double *)&v71 != 0.0)
        (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v71 + 24))(v71);
    }
    if (*(_BYTE *)(*(_QWORD *)v6 + 103))
      v73 = 1;
    else
      v73 = *(unsigned __int8 *)(*(_QWORD *)v6 + 98) == 0;
    v7 = v90;
    v99 = *(double *)&v90;
    if (*(double *)&v90 != 0.0)
      (*(void (**)(HGNode *))(*(_QWORD *)v90 + 16))(v90);
    v74 = (LiHeLightInitPass *)HGObject::operator new(0x1B0uLL);
    LiHeShadowSoft::LiHeShadowSoft(v74, &v99, &v89, a1 + 724, v73);
    *a3 = v74;
    if (v99 != 0.0)
      (*(void (**)(double))(**(_QWORD **)&v99 + 24))(COERCE_DOUBLE(*(_QWORD *)&v99));
    goto LABEL_138;
  }
LABEL_70:
  if (*(_BYTE *)(*(_QWORD *)v6 + 103))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v99, 0.0, 0.0, 0.0, 0.0);
    v46 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
    LiHeLightInitPass::LiHeLightInitPass(v46, (const PCWorkingColorVector *)&v99);
    *a3 = v46;
  }
  else
  {
    v47 = *(HGNode **)a2;
    *a3 = *(LiHeLightInitPass **)a2;
    if (v47)
      (*(void (**)(HGNode *))(*(_QWORD *)v47 + 16))(v47);
  }
LABEL_138:
  if (v88)
    (*(void (**)(HGNode *))(*(_QWORD *)v88 + 24))(v88);
  result = v89;
  if (*(double *)&v89 != 0.0)
    result = (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v89 + 24))(v89);
  if (*(double *)&v7 != 0.0)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v7 + 24))(v7);
  return result;
}

void sub_1B2DB1E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 24))(a32);
  if (a33)
    (*(void (**)(uint64_t))(*(_QWORD *)a33 + 24))(a33);
  if (a34)
    (*(void (**)(uint64_t))(*(_QWORD *)a34 + 24))(a34);
  _Unwind_Resume(a1);
}

HGNode *LiLight::getShadowFromFace(uint64_t a1, HGNode **a2, uint64_t a3, HGNode **a4, HGNode **a5)
{
  uint64_t v10;
  uint64_t v11;
  HGLegacyBlend *v12;
  LiHeProgramMaxBlend *v13;
  HGNode *v14;
  HGNode *v15;
  HGNode *v16;
  HGNode *v17;
  HGNode *result;
  HGNode *v19;
  HGNode *v20;
  HGNode *v21;
  HGNode *v22;
  HGNode *v23;
  HGNode *v24;
  HGNode *v25;

  if ((*(_DWORD *)(a1 + 656) - 1) <= 2 && *(_BYTE *)(a1 + 721) && *((_BYTE *)a2[1] + 102))
  {
    v24 = 0;
    v25 = 0;
    if (*(int *)(a3 + 12) >= 1)
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v22 = 0;
        v23 = 0;
        LiLight::getShadowFromMap((double *)a1, (uint64_t)a2, *(_QWORD *)(a3 + 16) + v10, (void **)&v23, (uint64_t *)&v22);
        if (!v23)
          goto LABEL_25;
        if (v25)
          break;
        v25 = v23;
        (*(void (**)(void))(*(_QWORD *)v23 + 16))();
        v14 = v24;
        v15 = v22;
        if (v24 != v22)
        {
          if (v24)
          {
            (*(void (**)(void))(*(_QWORD *)v24 + 24))();
            v15 = v22;
          }
          v24 = v15;
          if (v15)
            (*(void (**)(HGNode *))(*(_QWORD *)v15 + 16))(v15);
          goto LABEL_25;
        }
LABEL_26:
        if (v14)
          (*(void (**)(HGNode *))(*(_QWORD *)v14 + 24))(v14);
        if (v23)
          (*(void (**)(HGNode *))(*(_QWORD *)v23 + 24))(v23);
        ++v11;
        v10 += 600;
        if (v11 >= *(int *)(a3 + 12))
        {
          v16 = v25;
          goto LABEL_41;
        }
      }
      v12 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
      LiHeShadowBlendAdd::LiHeShadowBlendAdd(v12, &v25, &v23);
      (*(void (**)(HGLegacyBlend *, _QWORD, float, float, float, float))(*(_QWORD *)v12 + 96))(v12, 0, 0.0, 0.0, 0.0, 0.0);
      if (v25 != (HGNode *)v12)
      {
        if (v25)
          (*(void (**)(void))(*(_QWORD *)v25 + 24))();
        v25 = (HGNode *)v12;
        (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v12 + 16))(v12);
      }
      v13 = (LiHeProgramMaxBlend *)HGObject::operator new(0x1A0uLL);
      LiHeMaxBlend::LiHeMaxBlend(v13, &v24, &v22);
      if (v24 == (HGNode *)v13)
      {
        if (!v13)
        {
LABEL_24:
          (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v12 + 24))(v12);
LABEL_25:
          v14 = v22;
          goto LABEL_26;
        }
      }
      else
      {
        if (v24)
          (*(void (**)(void))(*(_QWORD *)v24 + 24))();
        v24 = (HGNode *)v13;
        if (!v13)
          goto LABEL_24;
        (*(void (**)(LiHeProgramMaxBlend *))(*(_QWORD *)v13 + 16))(v13);
      }
      (*(void (**)(LiHeProgramMaxBlend *))(*(_QWORD *)v13 + 24))(v13);
      goto LABEL_24;
    }
    v16 = 0;
LABEL_41:
    v19 = *a4;
    if (*a4 != v16)
    {
      if (v19)
      {
        (*(void (**)(HGNode *))(*(_QWORD *)v19 + 24))(*a4);
        v16 = v25;
      }
      *a4 = v16;
      if (v16)
        (*(void (**)(HGNode *))(*(_QWORD *)v16 + 16))(v16);
    }
    v20 = *a5;
    v21 = v24;
    if (*a5 != v24)
    {
      if (v20)
      {
        (*(void (**)(HGNode *))(*(_QWORD *)v20 + 24))(v20);
        v21 = v24;
      }
      *a5 = v21;
      if (!v21)
        goto LABEL_53;
      (*(void (**)(HGNode *))(*(_QWORD *)v21 + 16))(v21);
      v20 = v24;
    }
    if (v20)
      (*(void (**)(HGNode *))(*(_QWORD *)v20 + 24))(v20);
LABEL_53:
    result = v25;
    if (v25)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v25 + 24))(v25);
    return result;
  }
  v17 = *a2;
  if (*a2)
  {
    (*(void (**)(HGNode *))(*(_QWORD *)v17 + 16))(v17);
    result = *a4;
    if (*a4 == v17)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v17 + 24))(v17);
  }
  else
  {
    result = *a4;
    if (!*a4)
      return result;
  }
  if (result)
    result = (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 24))(result);
  *a4 = v17;
  return result;
}

void sub_1B2DB2418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

double *LiLight::getShadowFromMap(double *result, uint64_t a2, uint64_t a3, void **a4, uint64_t *a5)
{
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char v46[128];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[8];
  _BYTE v58[128];
  _BYTE v59[128];
  _BYTE v60[24];
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  double v69;
  float64x2_t v70;
  double *v71;
  double v72[2];
  double v73[16];
  _BYTE v74[48];
  __int128 v75;
  __int128 v76;
  _BYTE v77[48];
  uint64_t v78;

  v9 = result;
  v78 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(v10 + 264) || *(_DWORD *)(a3 + 12) != *(_DWORD *)(v10 + 268))
  {
    result = (double *)PCMath::equal((double *)(a3 + 472), (double *)(v10 + 176), 0.015);
    if ((result & 1) == 0)
    {
      PCMatrix44Tmpl<double>::operator*(a3 + 280, *(__int128 **)(a2 + 80), (uint64_t)v73);
      result = LiMaterialProperties::getZExtent(*(_QWORD *)(a2 + 8), v73, v72);
      if (*(double *)(a3 + 408) < v72[1])
      {
        if (*((_DWORD *)v9 + 164) == 1)
        {
          v11 = -*(double *)(a3 + 304);
          v12 = -*(double *)(a3 + 336);
          v13 = -*(double *)(a3 + 368);
        }
        else
        {
          *(_QWORD *)&v77[40] = 0x3FF0000000000000;
          *(_QWORD *)v77 = 0x3FF0000000000000;
          *(_QWORD *)&v74[40] = 0x3FF0000000000000;
          *(_QWORD *)v74 = 0x3FF0000000000000;
          memset(&v74[8], 0, 32);
          v75 = 0u;
          v76 = 0u;
          memset(&v77[8], 0, 32);
          result = (double *)PCMatrix44Tmpl<double>::invert((double *)v74, (double *)(a3 + 280), 0.0);
          v11 = *(double *)&v74[24];
          v12 = *((double *)&v75 + 1);
          v13 = *(double *)&v77[8];
        }
        v14 = *(double *)(v10 + 176);
        v15 = *(double *)(v10 + 184);
        v16 = *(double *)(v10 + 192);
        v17 = *(double *)(v10 + 200);
        v18 = *(double *)(v10 + 208);
        v19 = *(double *)(v10 + 216);
        v20 = (v11 - v14) * v17 + (v12 - v15) * v18 + (v13 - v16) * v19;
        v21 = v17 * (*(double *)(a3 + 472) - v14)
            + v18 * (*(double *)(a3 + 480) - v15)
            + v19 * (*(double *)(a3 + 488) - v16);
        if ((float)(v20 * v21) >= 0.0)
          goto LABEL_15;
        v22 = *(double *)(a3 + 576);
        if (v22 >= 0.0)
        {
          v23 = *(double *)(a3 + 584);
          if (v23 >= 0.0)
          {
            v24 = 0;
            v25 = *(double *)(a3 + 568);
            *(_QWORD *)v74 = *(_QWORD *)(a3 + 560);
            *(double *)&v74[8] = v25;
            *(double *)&v74[16] = v22 + *(double *)v74;
            *(double *)&v74[24] = v25;
            *(double *)&v74[32] = v22 + *(double *)v74;
            *(double *)&v74[40] = v25 + v23;
            *(_QWORD *)&v75 = *(_QWORD *)v74;
            *((double *)&v75 + 1) = v25 + v23;
            v26 = v20;
            do
            {
              *(_OWORD *)v60 = *(_OWORD *)&v74[16 * v24];
              *(_QWORD *)&v60[16] = 0x3FF0000000000000;
              v69 = 0.0;
              v70 = 0uLL;
              result = PCMatrix44Tmpl<double>::transform<double>((double *)(a3 + 24), (double *)v60, &v69);
              v27 = vmulq_f64(vsubq_f64(v70, *(float64x2_t *)(v10 + 184)), *(float64x2_t *)(v10 + 208));
              v28 = ((v69 - *(double *)(v10 + 176)) * *(double *)(v10 + 200) + v27.f64[0] + v27.f64[1]) * v26;
              if (v24 > 2)
                break;
              ++v24;
            }
            while (v28 <= 0.0);
            if (v28 > 0.0)
            {
LABEL_15:
              v29 = *(double **)(a3 + 16);
              v71 = v29;
              if (v29)
                (*(void (**)(double *))(*(_QWORD *)v29 + 16))(v29);
              v30 = *(_OWORD *)(a3 + 232);
              v76 = *(_OWORD *)(a3 + 216);
              *(_OWORD *)v77 = v30;
              v31 = *(_OWORD *)(a3 + 248);
              v32 = *(_OWORD *)(a3 + 168);
              *(_OWORD *)v74 = *(_OWORD *)(a3 + 152);
              *(_OWORD *)&v74[16] = v32;
              v33 = *(_OWORD *)(a3 + 200);
              *(_OWORD *)&v74[32] = *(_OWORD *)(a3 + 184);
              v75 = v33;
              v34 = *(_OWORD *)(a3 + 264);
              *(_OWORD *)&v77[16] = v31;
              *(_OWORD *)&v77[32] = v34;
              PCMatrix44Tmpl<double>::operator*((uint64_t)v74, *(__int128 **)(a2 + 56), (uint64_t)&v69);
              v68 = 0x3FF0000000000000;
              v65 = 0x3FF0000000000000;
              v62 = 0x3FF0000000000000;
              *(_QWORD *)v60 = 0x3FF0000000000000;
              *(_OWORD *)&v60[8] = 0u;
              v61 = 0u;
              v63 = 0u;
              v64 = 0u;
              v66 = 0u;
              v67 = 0u;
              PCMatrix44Tmpl<double>::invert((double *)v60, (double *)(a3 + 24), 0.0);
              PCMatrix44Tmpl<double>::operator*((uint64_t)v60, *(__int128 **)(a2 + 56), (uint64_t)v59);
              PCMatrix44Tmpl<double>::operator*(a3 + 280, (__int128 *)(a3 + 24), (uint64_t)v58);
              v35 = *(_OWORD **)(a2 + 8);
              v36 = v35[22];
              v57[4] = v35[21];
              v57[5] = v36;
              v37 = v35[24];
              v57[6] = v35[23];
              v57[7] = v37;
              v38 = v35[18];
              v57[0] = v35[17];
              v57[1] = v38;
              v39 = v35[20];
              v57[2] = v35[19];
              v57[3] = v39;
              v56 = 0x3FF0000000000000;
              v53 = 0x3FF0000000000000;
              v50 = 0x3FF0000000000000;
              v47 = 0x3FF0000000000000;
              v48 = 0u;
              v49 = 0u;
              v51 = 0u;
              v52 = 0u;
              v54 = 0u;
              v55 = 0u;
              PCMatrix44Tmpl<double>::invert((double *)&v47, (double *)v57, 0.0);
              PCMatrix44Tmpl<double>::operator*((uint64_t)&v47, *(__int128 **)(a2 + 48), (uint64_t)v46);
              LiSoftShadow::LiSoftShadow(&v44, &v71, *((_BYTE *)v9 + 752), *((_DWORD *)v9 + 164) == 1, (uint64_t)v59, (uint64_t)v58, &v69, (double *)(a3 + 424), v9[93], *(_BYTE *)(a3 + 592));
              v40 = v44;
              if (v44)
              {
                (*(void (**)(void *))(*(_QWORD *)v44 + 16))(v44);
                v41 = *a4;
                if (*a4 == v40)
                {
                  (*(void (**)(void *))(*(_QWORD *)v40 + 24))(v40);
                  goto LABEL_24;
                }
              }
              else
              {
                v41 = *a4;
                if (!*a4)
                  goto LABEL_24;
              }
              if (v41)
                (*(void (**)(void *))(*(_QWORD *)v41 + 24))(v41);
              *a4 = v40;
LABEL_24:
              v42 = v45;
              if (v45)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
                v43 = *a5;
                if (*a5 == v42)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
                  goto LABEL_31;
                }
              }
              else
              {
                v43 = *a5;
                if (!*a5)
                {
LABEL_31:
                  LiSoftShadow::~LiSoftShadow((LiSoftShadow *)&v44);
                  result = v71;
                  if (v71)
                    return (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v71 + 24))(v71);
                  return result;
                }
              }
              if (v43)
                (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
              *a5 = v42;
              goto LABEL_31;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B2DB2A08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

double approximateStretch(float64x2_t *a1, double *a2, double *a3, double *a4, double a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _OWORD v32[2];

  memset(v32, 0, sizeof(v32));
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2, (double *)v32);
  PCMatrix44Tmpl<double>::jacobianPost(a1, (double *)v32, (uint64_t)&v23);
  v9 = v29;
  v10 = v30;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v14 = v26;
  v15 = v27;
  v16 = v28;
  v17 = v31;
  v18 = v31 + v29 * a5 + v30 * 0.0;
  v19 = (v25 + v23 * a5 + v24 * 0.0) / v18;
  *a3 = sqrt(v19 * v19 + (v28 + v26 * a5 + v27 * 0.0) / v18 * ((v28 + v26 * a5 + v27 * 0.0) / v18));
  v20 = v17 + v9 * 0.0 + v10 * a5;
  v21 = (v13 + v11 * 0.0 + v12 * a5) / v20;
  result = sqrt(v21 * v21 + (v16 + v14 * 0.0 + v15 * a5) / v20 * ((v16 + v14 * 0.0 + v15 * a5) / v20));
  *a4 = result;
  return result;
}

uint64_t LiLight::stencilShadowByLight@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  double v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  void *v20;
  float v21;
  float v22;
  uint64_t result;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  double v29[3];
  uint64_t v30;
  float64x2_t v31;
  double v32;
  __int128 v33;
  uint64_t v34;

  v6 = *(_DWORD *)(a1 + 656);
  if (v6 == 2)
  {
    v33 = *(_OWORD *)(a1 + 664);
    v34 = *(_QWORD *)(a1 + 680);
    v24 = *(_QWORD *)a2;
    *(_QWORD *)&v31.f64[0] = v24;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    v25 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v33, (double *)&v33);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(_QWORD *)(a2 + 40);
    v28 = HGObject::operator new(0x1A0uLL);
    LiHePointLightStencil::LiHePointLightStencil(v28, &v31, v25, v26, v27);
    *a3 = v28;
    result = *(_QWORD *)&v31.f64[0];
    if (*(_QWORD *)&v31.f64[0])
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v31.f64[0] + 24))(*(_QWORD *)&v31.f64[0]);
  }
  else if (v6 == 3)
  {
    v33 = *(_OWORD *)(a1 + 664);
    v34 = *(_QWORD *)(a1 + 680);
    v7 = -*(double *)(a1 + 640);
    v31 = vnegq_f64(*(float64x2_t *)(a1 + 624));
    v32 = v7;
    v8 = *(_QWORD *)a2;
    v30 = v8;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v9 = PCMatrix44Tmpl<double>::transform<double>(*(double **)(a2 + 32), (double *)&v33, (double *)&v33);
    v10 = PCMatrix44Tmpl<double>::transform_vector<double>(*(double **)(a2 + 32), v31.f64, v31.f64);
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = sqrt(v11 * v11 + v12 * v12 + v13 * v13);
    if (v14 < 0.000000100000001 && v14 > -0.000000100000001)
      v14 = 1.0;
    v29[0] = v11 / v14;
    v29[1] = v12 / v14;
    v29[2] = v13 / v14;
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(double *)(a1 + 696);
    v18 = *(double *)(a1 + 704);
    v19 = *(_QWORD *)(a2 + 40);
    v20 = HGObject::operator new(0x1A0uLL);
    v21 = v17;
    v22 = v17 + v18;
    LiHeSpotLightStencil::LiHeSpotLightStencil(v20, &v30, v9, v29, v16, v19, v21, v22);
    *a3 = v20;
    result = v30;
    if (v30)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  }
  else
  {
    result = *(_QWORD *)a2;
    *a3 = *(_QWORD *)a2;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B2DB2E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  HGObject::operator delete(v13);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  _Unwind_Resume(a1);
}

uint64_t LiLight::copyPCMatrixToVec4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  double *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t result;

  v4 = 0;
  v6 = (double *)(a1 + 64);
  do
  {
    v7 = *(v6 - 8);
    v8 = *(v6 - 4);
    v9 = *v6;
    v10 = v6[4];
    result = (*(uint64_t (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a2 + 96))(a2, (a3 + v4++), v7, v8, v9, v10);
    ++v6;
  }
  while (v4 != 4);
  return result;
}

uint64_t LiLightSet::add(uint64_t this, const LiLight *a2)
{
  uint64_t v2;
  int v4;
  int v5;

  v2 = this;
  if (*((_BYTE *)a2 + 720))
  {
    v4 = *(_DWORD *)(this + 12);
    if (*(_DWORD *)(this + 8) <= v4)
      v5 = (2 * (v4 + 1)) | 1;
    else
      v5 = *(_DWORD *)(this + 8);
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize(this, v4 + 1, v5);
    return LiLight::operator=(*(_QWORD *)(v2 + 16) + 944 * *(int *)(v2 + 12) - 944, (uint64_t)a2);
  }
  else
  {
    *(_BYTE *)(this + 24) = 1;
  }
  return this;
}

void LiLightSet::add(uint64_t this, uint64_t a2)
{
  *(_BYTE *)(this + 24) |= *(_BYTE *)(a2 + 24);
  PCArray<LiLight,PCArray_Traits<LiLight>>::append(this, a2);
}

HGNode *LiLight::buildHeliumGraphSurface@<X0>(HGNode *a1@<X0>, uint64_t a2@<X1>, HGNode **a3@<X8>)
{
  HGNode *v6;
  LiHeLightInitPass *v7;
  HGNode *v8;
  HGNode *result;
  HGNode *v10;
  _BYTE v11[16];
  HGNode *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v6 = *(HGNode **)a2;
  v12 = v6;
  if (v6)
    (*(void (**)(HGNode *))(*(_QWORD *)v6 + 16))(v6);
  v17 = *(_OWORD *)(a2 + 72);
  v18 = *(_OWORD *)(a2 + 88);
  v19 = *(_OWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 56);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v11, 0.0, 0.0, 0.0, 0.0);
  v7 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
  LiHeLightInitPass::LiHeLightInitPass(v7, (const PCWorkingColorVector *)v11);
  if (v6 != (HGNode *)v7)
  {
    if (v6)
      (*(void (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
    v12 = (HGNode *)v7;
    if (v7)
    {
      v6 = (HGNode *)v7;
      (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v7 + 16))(v7);
    }
    else
    {
      v6 = 0;
    }
  }
  LiLight::getHeliumNodeSurface((uint64_t)a1, (uint64_t *)&v12, (uint64_t *)&v10);
  v8 = v10;
  if (v6 != v10)
  {
    if (v6)
      (*(void (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
    v12 = v8;
    if (v8)
    {
      (*(void (**)(HGNode *))(*(_QWORD *)v8 + 16))(v8);
      v6 = v8;
    }
    else
    {
      v6 = 0;
    }
  }
  result = LiLight::getHeliumNodeShadows(a1, &v12, a3);
  if (v8)
    result = (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v8 + 24))(v8);
  if (v7)
    result = (HGNode *)(*(uint64_t (**)(LiHeLightInitPass *))(*(_QWORD *)v7 + 24))(v7);
  if (v6)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
  return result;
}

void sub_1B2DB3110(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

uint64_t LiLightSet::getHeliumGraphSurface@<X0>(uint64_t result@<X0>, HGNode **a2@<X1>, HGNode **a3@<X8>)
{
  uint64_t v4;
  HGNode *v6;
  HGNode *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  HGNode *v12;
  void *v13;
  HGNode *v14;
  BOOL v15;
  HGLegacyBlend *v16;
  HGNode *v17;
  LiHeLightInitPass *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  LiHeLightInitPass *v23;
  HGNode *v24;
  HGNode *v25;
  HGStencil *v26;
  HGNode *v27;
  HGLegacyBlend *v28;
  HGLegacyBlend *v29;
  HGNode *v30;
  HGLegacyBlend *v31;
  HGLegacyBlend **v32;
  HGNode *v33;
  LiHeLightInitPass *v34;
  HGNode *v35[2];

  v4 = result;
  v6 = *a2;
  v7 = a2[1];
  *a3 = *a2;
  if (v6)
    result = (*(uint64_t (**)(HGNode *))(*(_QWORD *)v6 + 16))(v6);
  v8 = *(_DWORD *)(v4 + 12);
  if (!v8)
    return result;
  if (*((_BYTE *)v7 + 98) && !*((_BYTE *)v7 + 103) || !*((_BYTE *)v7 + 102))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v35, 0.0, 0.0, 0.0, 0.0);
    v18 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
    LiHeLightInitPass::LiHeLightInitPass(v18, (const PCWorkingColorVector *)v35);
    v34 = v18;
    if (*(int *)(v4 + 12) >= 1)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        LiLight::buildHeliumGraphSurface((HGNode *)(*(_QWORD *)(v4 + 16) + v19), (uint64_t)a2, &v33);
        if (!v33)
          __cxa_bad_typeid();
        v23 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
        LiHeRGBAdditionNode::LiHeRGBAdditionNode(v23, &v34, &v33);
        if (v34 != v23)
          break;
        if (v23)
          goto LABEL_39;
LABEL_40:
        if (v33)
          (*(void (**)(HGNode *))(*(_QWORD *)v33 + 24))(v33);
        v21 |= v22;
        ++v20;
        v19 += 944;
        if (v20 >= *(int *)(v4 + 12))
          goto LABEL_45;
      }
      if (v34)
        (*(void (**)(void))(*(_QWORD *)v34 + 24))();
      v34 = v23;
      if (!v23)
        goto LABEL_40;
      (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v23 + 16))(v23);
LABEL_39:
      (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v23 + 24))(v23);
      goto LABEL_40;
    }
    v21 = 0;
LABEL_45:
    v24 = *a2;
    v33 = v24;
    if (v24)
      (*(void (**)(HGNode *))(*(_QWORD *)v24 + 16))(v24);
    v25 = (HGNode *)HGObject::operator new(0x1A0uLL);
    LiHeLightSurfaceFinalPass::LiHeLightSurfaceFinalPass(v25, &v33, &v34);
    if (v33)
      (*(void (**)(HGNode *))(*(_QWORD *)v33 + 24))(v33);
    if (v6 == v25)
    {
      if (!v6)
        goto LABEL_68;
    }
    else
    {
      if (v6)
        (*(void (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
      *a3 = v25;
      if (!v25)
      {
        v6 = 0;
LABEL_68:
        result = (uint64_t)v34;
        if (v34)
          result = (*(uint64_t (**)(LiHeLightInitPass *))(*(_QWORD *)v34 + 24))(v34);
        if ((v21 & 1) != 0)
          return (*(uint64_t (**)(HGNode *, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, 0xFFFFFFFFLL, 2);
        return result;
      }
      (*(void (**)(HGNode *))(*(_QWORD *)v25 + 16))(v25);
      v6 = v25;
    }
    (*(void (**)(HGNode *))(*(_QWORD *)v25 + 24))(v25);
    goto LABEL_68;
  }
  v32 = (HGLegacyBlend **)a3;
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      LiLight::buildHeliumGraphSurface((HGNode *)(*(_QWORD *)(v4 + 16) + v9), (uint64_t)a2, v35);
      if (v10)
      {
        if (v12)
        else
          v13 = 0;
        v15 = v13 != 0;
        v16 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
        HGLegacyBlend::HGLegacyBlend(v16);
        (*(void (**)(HGLegacyBlend *, _QWORD, HGNode *))(*(_QWORD *)v16 + 120))(v16, 0, v12);
        (*(void (**)(HGLegacyBlend *, uint64_t, HGNode *))(*(_QWORD *)v16 + 120))(v16, 1, v35[0]);
        (*(void (**)(HGLegacyBlend *, _QWORD, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 0, 1.0, 0.0, 0.0, 0.0);
        if (v12 == (HGNode *)v16)
        {
          v17 = v12;
        }
        else
        {
          if (v12)
            (*(void (**)(HGNode *))(*(_QWORD *)v12 + 24))(v12);
          (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v16 + 16))(v16);
          v17 = (HGNode *)v16;
        }
        (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v16 + 24))(v16);
        v11 |= v15;
        v12 = v35[0];
      }
      else
      {
        if (v12 != v35[0])
        {
          if (v12)
          {
            (*(void (**)(HGNode *))(*(_QWORD *)v12 + 24))(v12);
            v12 = v35[0];
            if (!v35[0])
              goto LABEL_29;
          }
          else
          {
            v12 = v35[0];
            if (!v35[0])
            {
LABEL_29:
              v11 = 1;
              goto LABEL_25;
            }
          }
          (*(void (**)(HGNode *))(*(_QWORD *)v12 + 16))(v12);
          v11 = 1;
          v14 = v12;
LABEL_24:
          (*(void (**)(HGNode *))(*(_QWORD *)v14 + 24))(v14);
          goto LABEL_25;
        }
        v11 = 1;
        v17 = v12;
      }
      v14 = v12;
      v12 = v17;
      if (v14)
        goto LABEL_24;
LABEL_25:
      ++v10;
      v9 += 944;
      if (v10 >= *(int *)(v4 + 12))
        goto LABEL_57;
    }
  }
  v12 = 0;
  v11 = 0;
LABEL_57:
  v26 = (HGStencil *)HGObject::operator new(0x1C0uLL);
  HGStencil::HGStencil(v26);
  *((_DWORD *)v26 + 109) = 0;
  (*(void (**)(HGStencil *, _QWORD, HGNode *))(*(_QWORD *)v26 + 120))(v26, 0, v12);
  v27 = *a2;
  if (*a2)
    (*(void (**)(HGNode *))(*(_QWORD *)v27 + 16))(*a2);
  (*(void (**)(HGStencil *, uint64_t, HGNode *))(*(_QWORD *)v26 + 120))(v26, 1, v27);
  if (v27)
    (*(void (**)(HGNode *))(*(_QWORD *)v27 + 24))(v27);
  if (*((_BYTE *)v7 + 98) || *((_BYTE *)v7 + 103))
  {
    v28 = *v32;
    if (*v32 != v26)
    {
      if (v28)
        (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v28 + 24))(v28);
      *v32 = v26;
      (*(void (**)(HGStencil *))(*(_QWORD *)v26 + 16))(v26);
    }
  }
  else
  {
    v29 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
    HGLegacyBlend::HGLegacyBlend(v29);
    v30 = *a2;
    if (*a2)
      (*(void (**)(HGNode *))(*(_QWORD *)v30 + 16))(*a2);
    (*(void (**)(HGLegacyBlend *, _QWORD, HGNode *))(*(_QWORD *)v29 + 120))(v29, 0, v30);
    if (v30)
      (*(void (**)(HGNode *))(*(_QWORD *)v30 + 24))(v30);
    (*(void (**)(HGLegacyBlend *, uint64_t, HGStencil *))(*(_QWORD *)v29 + 120))(v29, 1, v26);
    (*(void (**)(HGLegacyBlend *, _QWORD, float, float, float, float))(*(_QWORD *)v29 + 96))(v29, 0, 0.0, 0.0, 0.0, 0.0);
    v31 = *v32;
    if (*v32 != v29)
    {
      if (v31)
        (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v31 + 24))(v31);
      *v32 = v29;
      (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v29 + 16))(v29);
    }
    (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v29 + 24))(v29);
  }
  result = (*(uint64_t (**)(HGStencil *))(*(_QWORD *)v26 + 24))(v26);
  if (v12)
    result = (*(uint64_t (**)(HGNode *))(*(_QWORD *)v12 + 24))(v12);
  if (v11)
  {
    v6 = (HGNode *)*v32;
    return (*(uint64_t (**)(HGNode *, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, 0xFFFFFFFFLL, 2);
  }
  return result;
}

void sub_1B2DB3790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (*a10)
    (*(void (**)(_QWORD))(*(_QWORD *)*a10 + 24))(*a10);
  _Unwind_Resume(a1);
}

void LiSoftShadow::~LiSoftShadow(LiSoftShadow *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
}

double *PCMatrix44Tmpl<double>::transform_vector<double>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *a3 = *a2 * *a1 + v4 * a1[1] + v5 * a1[2];
  a3[1] = v3 * a1[4] + v4 * a1[5] + v5 * a1[6];
  a3[2] = v3 * a1[8] + v4 * a1[9] + v5 * a1[10];
  return a3;
}

HGLegacyBlend *LiHeShadowBlendAdd::LiHeShadowBlendAdd(HGLegacyBlend *a1, HGNode **a2, _QWORD *a3)
{
  HGNode *v6;

  HGLegacyBlend::HGLegacyBlend(a1);
  *(_QWORD *)v6 = &unk_1E657B298;
  HGNode::SetInput(v6, 0, *a2);
  (*(void (**)(HGLegacyBlend *, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, 1, *a3);
  return a1;
}

void sub_1B2DB3B4C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGLegacyBlend::~HGLegacyBlend(v1);
  _Unwind_Resume(a1);
}

void LiHeShadowBlendAdd::~LiHeShadowBlendAdd(HGNode *this)
{
  void *v1;

  HGLegacyBlend::~HGLegacyBlend(this);
  HGObject::operator delete(v1);
}

HGNode *LiHeShadowBlendAdd::GetOutput(HGNode *this, HGRenderer *a2)
{
  (*(void (**)(HGNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 2);
  return HGLegacyBlend::GetOutput(this, a2);
}

LiHeProgramMaxBlend *LiHeMaxBlend::LiHeMaxBlend(LiHeProgramMaxBlend *a1, HGNode **a2, _QWORD *a3)
{
  HGNode *v6;

  LiHeProgramMaxBlend::LiHeProgramMaxBlend(a1);
  *(_QWORD *)v6 = &unk_1E657B510;
  HGNode::SetInput(v6, 0, *a2);
  (*(void (**)(LiHeProgramMaxBlend *, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, 1, *a3);
  return a1;
}

void sub_1B2DB3C1C(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeProgramMaxBlend::~LiHeProgramMaxBlend(v1);
  _Unwind_Resume(a1);
}

void LiHeMaxBlend::~LiHeMaxBlend(HGNode *this)
{
  void *v1;

  LiHeProgramMaxBlend::~LiHeProgramMaxBlend(this);
  HGObject::operator delete(v1);
}

HGNode *LiHeMaxBlend::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v6;
  uint64_t v7;
  HGNode *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  HGRenderer *v12;
  HGNode *v13;
  unsigned int v14;

  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v7 = v6;
  v8 = HGRenderer::GetInput(a2, this, 1u);
  v9 = HGRenderer::GetDOD(a2, v8);
  v11 = v10;
  if (HGRectIsNull(DOD, v7))
  {
    v12 = a2;
    v13 = this;
    v14 = 1;
    return HGRenderer::GetInput(v12, v13, v14);
  }
  if (HGRectIsNull(v9, v11))
  {
    v12 = a2;
    v13 = this;
    v14 = 0;
    return HGRenderer::GetInput(v12, v13, v14);
  }
  return (HGNode *)LiHeProgramMaxBlend::GetOutput((LiHeProgramMaxBlend *)this, a2);
}

void PCArray<LiLight,PCArray_Traits<LiLight>>::append(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a2 + 12) + v4;
  if (*(_DWORD *)(a1 + 8) >= v5)
    v6 = *(_DWORD *)(a1 + 8);
  else
    v6 = (2 * v5) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a1, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 944 * v4;
    do
    {
      LiLight::operator=(*(_QWORD *)(a1 + 16) + v9 + v7, *(_QWORD *)(a2 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a2 + 12));
  }
}

void LiHe3DEngineNode::LiHe3DEngineNode(LiHe3DEngineNode *this)
{
  uint64_t v2;
  PCColorSpaceCache *v3;
  PCColorSpaceCache *v4;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E657B7A0;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(v2 + 448));
  *((_QWORD *)this + 57) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 58);
  *((_QWORD *)this + 75) = 0x3FF0000000000000;
  *((_QWORD *)this + 70) = 0x3FF0000000000000;
  *((_QWORD *)this + 65) = 0x3FF0000000000000;
  *((_QWORD *)this + 60) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_OWORD *)this + 38) = xmmword_1B30503B0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 81) = 0x3FF0000000000000;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  (*(void (**)(LiHe3DEngineNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(LiHe3DEngineNode *, uint64_t, uint64_t))(*(_QWORD *)this + 144))(this, 0xFFFFFFFFLL, 512);
  *((_DWORD *)this + 103) = -1082130432;
  *((_BYTE *)this + 640) = 0;
  v3 = (PCColorSpaceCache *)(*(uint64_t (**)(LiHe3DEngineNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 4);
  v4 = (PCColorSpaceCache *)PCColorSpaceCache::cgRec709Linear(v3);
  *((_QWORD *)this + 86) = v4;
  *((_QWORD *)this + 87) = PCColorSpaceCache::cgRec709Linear(v4);
}

void sub_1B2DB3EBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCSharedCount *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  PCSharedCount::~PCSharedCount(v2);
  v4 = *(_QWORD *)(v1 + 432);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(v1 + 424);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)(v1 + 416);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::~LiHe3DEngineNode(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v3;
  PC_Sp_counted_base *v4;

  this->var0 = (PC_Sp_counted_base *)off_1E657B7A0;
  PCSharedCount::~PCSharedCount(this + 58);
  PCSharedCount::~PCSharedCount(this + 56);
  var0 = this[54].var0;
  if (var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 24))(var0);
  v3 = this[53].var0;
  if (v3)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v3 + 24))(v3);
  v4 = this[52].var0;
  if (v4)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v4 + 24))(v4);
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  LiHe3DEngineNode::~LiHe3DEngineNode(this);
  HGObject::operator delete(v1);
}

uint64_t LiHe3DEngineNode::setVideoOrientation(uint64_t result, int a2)
{
  *(_DWORD *)(result + 408) = a2;
  return result;
}

void LiHe3DEngineNode::setScene(uint64_t a1, const PCSharedCount *a2)
{
  uint64_t *v2;
  PCSharedCount v3;

  *(PCSharedCount *)(a1 + 440) = (PCSharedCount)a2->var0;
  v2 = (uint64_t *)(a1 + 448);
  PCSharedCount::PCSharedCount(&v3, a2 + 1);
  PCSharedCount::operator=(v2, (uint64_t *)&v3);
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2DB402C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::setCamera(uint64_t a1, const PCSharedCount *a2, char a3)
{
  uint64_t *v5;
  PCSharedCount v6;

  *(PCSharedCount *)(a1 + 456) = (PCSharedCount)a2->var0;
  v5 = (uint64_t *)(a1 + 464);
  PCSharedCount::PCSharedCount(&v6, a2 + 1);
  PCSharedCount::operator=(v5, (uint64_t *)&v6);
  PCSharedCount::~PCSharedCount(&v6);
  *(_BYTE *)(a1 + 472) = a3;
}

void sub_1B2DB409C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiHe3DEngineNode::setPixelTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 480;
  if (result + 480 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  *(_QWORD *)(result + 560) = 0x3FF0000000000000;
  return result;
}

__n128 LiHe3DEngineNode::setROI(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[38] = *a2;
  return result;
}

uint64_t LiHe3DEngineNode::setTimeInSeconds(uint64_t this, double a2)
{
  *(double *)(this + 624) = a2;
  return this;
}

uint64_t LiHe3DEngineNode::setEnvironmentMap(uint64_t this, CGImage *a2)
{
  *(_QWORD *)(this + 632) = a2;
  return this;
}

uint64_t LiHe3DEngineNode::setEnvironmentMapIntensity(uint64_t this, double a2)
{
  *(double *)(this + 648) = a2;
  return this;
}

__n128 LiHe3DEngineNode::setOrthoCameraShift(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[41] = *a2;
  return result;
}

uint64_t LiHe3DEngineNode::IntermediateFormat()
{
  return 27;
}

uint64_t LiHe3DEngineNode::GetDOD(LiHe3DEngineNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4;
  double v5;
  float v6;
  int v7;
  double v8;
  int v9;
  double v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;

  v4 = *((_DWORD *)this + 152);
  v5 = *((double *)this + 60);
  v6 = v5 * (double)v4;
  v7 = *((_DWORD *)this + 154);
  v8 = (double)(v7 + v4);
  v9 = *((_DWORD *)this + 153);
  *(float *)&v8 = v5 * v8;
  v10 = *((double *)this + 65);
  v11 = v10 * (double)v9;
  v12 = *((_DWORD *)this + 155);
  v13 = (v12 + v9);
  v14 = v10 * (double)(int)v13;
  return HGRectMake4f(v13, v6 - (float)((float)(*(float *)&v8 - v6) - (float)v7), v11 - (float)((float)(v14 - v11) - (float)v12), *(float *)&v8, v14);
}

uint64_t LiHe3DEngineNode::GetROI(LiHe3DEngineNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

uint64_t LiHe3DEngineNode::setupColorTexture@<X0>(HGGPURenderer **a1@<X1>, _QWORD *a2@<X8>)
{
  HGMetalContext *MetalContext;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  MetalContext = (HGMetalContext *)HGGPURenderer::GetMetalContext(*a1);
  v7 = *(void **)(*((_QWORD *)MetalContext + 2) + 16);
  v8 = (uint64_t *)HGMetalContext::texturePool(MetalContext);
  v9 = HGRectMake4i(0, 0, *((_DWORD *)a1 + 6) - *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 7) - *((_DWORD *)a1 + 5));
  return HGMetalTexture::create(v7, v8, v9, v10, 27, 0, 1, 0, a2, 1);
}

HGBitmap *LiHe3DEngineNode::setupOutputColorTexture(LiHe3DEngineNode *this, HGPage *a2)
{
  char *Buffer;
  uint64_t v4;
  HGRect v6;

  Buffer = (char *)*((_QWORD *)a2 + 1);
  if (Buffer)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)Buffer + 16))(*((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_QWORD *)a2;
    *(_QWORD *)&v6.var0 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v6.var2 = *((_QWORD *)a2 + 3);
    Buffer = HGGPURenderer::CreateBuffer(v4, v6, *((unsigned int *)a2 + 8), 1, 1, 0);
    *((_QWORD *)a2 + 1) = Buffer;
  }
  return HGGPURenderer::ConvertToMetalTexture(*(HGMetalTexture ***)a2, (HGBitmap *)Buffer);
}

uint64_t LiHe3DEngineNode::createTextureFromPool@<X0>(uint64_t a1@<X1>, int a2@<W2>, unsigned int a3@<W3>, _QWORD *a4@<X8>)
{
  HGMetalContext *MetalContext;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  MetalContext = (HGMetalContext *)HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a1);
  v9 = *(void **)(*((_QWORD *)MetalContext + 2) + 16);
  v10 = (uint64_t *)HGMetalContext::texturePool(MetalContext);
  v11 = HGRectMake4i(0, 0, *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 20));
  return HGMetalTexture::create(v9, v10, v11, v12, a2, 0, 1, 0, a4, 2, a3);
}

void *getRenderPassClearColorClearDepthResolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;

  v8 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setResolveTexture:", a4);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setClearDepth:", 1.0);
  return v8;
}

void *getRenderPassClearColorLoadDepthResolve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;

  v6 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setClearDepth:", 1.0);
  objc_msgSend((id)objc_msgSend(v6, "depthAttachment"), "setStoreAction:", 1);
  return v6;
}

void *getRenderPassClearColorClearDepth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setLoadAction:", 2);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setClearDepth:", 1.0);
  objc_msgSend((id)objc_msgSend(v5, "depthAttachment"), "setStoreAction:", 1);
  return v5;
}

void *getRenderPassLoadColorLoadDepth(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
  objc_msgSend((id)objc_msgSend(v4, "depthAttachment"), "setTexture:", a2);
  objc_msgSend((id)objc_msgSend(v4, "depthAttachment"), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend(v4, "depthAttachment"), "setStoreAction:", 1);
  return v4;
}

void LiHe3DEngineNode::getHelium3DEngine(LiHe3DEngineNode *this, LiSceneObject *a2, LiAgent *a3)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  LiSceneObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (a2)
  {
    if (v6)
    {
      Li3DEngineObject::getSceneData((uint64_t)v6, &v16);
      (*(void (**)(uint64_t, LiAgent *))(*(_QWORD *)v16 + 16))(v16, a3);
      v7 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      if (v10)
      {
        v11 = v10;
        v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 136))(v10);
        if (v12 >= 1)
        {
          v13 = v12;
          v14 = 0;
          do
          {
            v15 = (LiSceneObject *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v11 + 144))(v11, v14);
            LiHe3DEngineNode::getHelium3DEngine(this, v15, a3);
            v14 = (v14 + 1);
          }
          while (v13 != (_DWORD)v14);
        }
      }
    }
  }
}

void sub_1B2DB4830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::traverse(uint64_t a1, const void *a2, char **a3)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::recursive_mutex *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  char *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  int64x2_t v39;
  char *v40;
  _QWORD *v41;

  if (a2)
  {
    if (v6)
    {
      v7 = (uint64_t)v6;
      Li3DEngineObject::getSceneData((uint64_t)v6, &v38);
      v8 = (std::__shared_weak_count *)v39.i64[0];
      v9 = *(std::recursive_mutex **)(v38 + 8);
      if (v39.i64[0])
      {
        v10 = (unint64_t *)(v39.i64[0] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      std::recursive_mutex::lock(v9);
      if (PCBitmap::getRepresentation((PCBitmap *)v9))
      {
        Li3DEngineObject::getSceneData(v7, &v37);
        v12 = (unint64_t)a3[2];
        v13 = a3[1];
        if ((unint64_t)v13 >= v12)
        {
          v20 = (v13 - *a3) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v22 = v12 - (_QWORD)*a3;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v41 = a3 + 2;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a3 + 2), v23);
          v26 = &v24[16 * v20];
          *(_OWORD *)v26 = v37;
          v37 = 0uLL;
          v28 = *a3;
          v27 = a3[1];
          if (v27 == *a3)
          {
            v31 = vdupq_n_s64((unint64_t)v27);
            v29 = &v24[16 * v20];
          }
          else
          {
            v29 = &v24[16 * v20];
            do
            {
              v30 = *((_OWORD *)v27 - 1);
              v27 -= 16;
              *((_OWORD *)v29 - 1) = v30;
              v29 -= 16;
              *(_QWORD *)v27 = 0;
              *((_QWORD *)v27 + 1) = 0;
            }
            while (v27 != v28);
            v31 = *(int64x2_t *)a3;
          }
          v32 = v26 + 16;
          *a3 = v29;
          a3[1] = v26 + 16;
          v39 = v31;
          v33 = a3[2];
          a3[2] = &v24[16 * v25];
          v40 = v33;
          v38 = v31.i64[0];
          std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((uint64_t)&v38);
          v34 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
          a3[1] = v32;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
        else
        {
          *(_OWORD *)v13 = v37;
          a3[1] = v13 + 16;
        }
      }
      std::recursive_mutex::unlock(v9);
    }
    else
    {
      if (v14)
      {
        v15 = v14;
        v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 136))(v14);
        if (v16 >= 1)
        {
          v17 = v16;
          v18 = 0;
          do
          {
            v19 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v15 + 144))(v15, v18);
            LiHe3DEngineNode::traverse(a1, v19, a3);
            v18 = (v18 + 1);
          }
          while (v17 != (_DWORD)v18);
        }
      }
    }
  }
}

void sub_1B2DB4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::render(uint64_t a1, const void ***a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10, int32x2_t a11, id *a12, void *a13, void *a14, double *a15)
{
  unsigned __int8 v17;
  const void **v18;
  const void **v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  double v37;
  double v38;
  double v39;
  float v40;
  float v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  __int128 v57;
  void *v58;
  LiHe3DEngineNode *v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  std::recursive_mutex *v65;
  double v66;
  id SceneAndRenderer;
  void *v68;
  const void *v69;
  LiPhysicsUtils *v70;
  void *v71;
  void *v72;
  void *v73;
  const void **v74;
  float *v75;
  int v76;
  BOOL v77;
  Li3DEngineObjectDataBase *v78;
  float *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  CGColorSpace *v87;
  CGColorSpace *v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  BOOL hasDepthMatte;
  uint64_t v95;
  uint64_t v96;
  void *RenderPassClearColorClearDepth;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  _anonymous_namespace_::QuadDraw *v108;
  void *VertexDescriptor;
  id v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  id *v117;
  id *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  _anonymous_namespace_::QuadDraw *v124;
  void *v125;
  id v126;
  uint64_t v127;
  char v128;
  char v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  _anonymous_namespace_::QuadDraw *v143;
  void *v144;
  id v145;
  void *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  Li3DEngineWorldData *v156;
  uint64_t v157;
  id v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v163;
  double v165;
  uint64_t v166;
  float v167;
  const void ***v168;
  LiHe3DEngineNode *v170;
  unint64_t v173;
  double v174;
  void *v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  id *v186;
  id *v187;
  _OWORD v188[4];
  _QWORD v189[5];
  __int128 v190;
  BOOL v191;
  _OWORD v192[4];
  _OWORD v193[4];
  PC_Sp_counted_base *v194;
  PCSharedCount v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  float64x2_t v215;
  PCSharedCount v216;
  PCSharedCount v217;
  double v218;
  __int128 v219;
  __int128 v220;
  double v221;
  double v222;
  double v223[3];
  double v224;
  double v225;
  __int128 v226;
  __int128 v227;
  _QWORD v228[8];
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  PC_Sp_counted_base *v233;
  PCSharedCount v234;
  id v235[2];
  __int128 v236;
  __int128 v237;
  _BYTE v238[40];
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  double v250;
  double v251;
  double v252;
  double v253;
  uint64_t v254;

  if ((v17 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx, &dword_1B2737000);
  }
  std::mutex::lock(&LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx);
  v19 = *a2;
  v18 = a2[1];
  if (v18 == *a2)
  {
    fwrite("LiHe3DEngineNode: no scenes to render were found.\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    goto LABEL_122;
  }
  v170 = (LiHe3DEngineNode *)a1;
  v20 = 0;
  v160 = (char *)v18 - (char *)*a2;
  v155 = v160 >> 4;
  do
  {
    v21 = (int *)*v19;
    v19 += 2;
    v22 = v21[45];
    if (v20 <= v22)
      v20 = v22;
  }
  while (v19 != v18);
  v173 = v20;
  v214 = 0;
  v212 = 0u;
  v213 = 0u;
  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  v204 = 0u;
  v205 = 0u;
  v202 = 0u;
  v203 = 0u;
  v194 = *(PC_Sp_counted_base **)(a1 + 456);
  v200 = 0u;
  v201 = 0u;
  PCSharedCount::PCSharedCount(&v195, (const PCSharedCount *)(a1 + 464));
  v24 = *a15;
  v23 = a15[1];
  v25 = *(double *)(a1 + 656);
  v26 = *(double *)(a1 + 664);
  v27 = *(unsigned __int8 *)(a1 + 472);
  v233 = v194;
  PCSharedCount::PCSharedCount(&v234, &v195);
  v168 = a2;
  if (!v233)
    throw_PCNullPointerException(1);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v233 + 232))(&v236);
  v28 = 0;
  v29 = (double)((_DWORD)a14 - (_DWORD)a13);
  v30 = (double)(HIDWORD(a14) - HIDWORD(a13));
  do
  {
    *((float32x4_t *)&v218 + v28) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v236 + 2 * v28)), *((float64x2_t *)&v236 + 2 * v28 + 1));
    ++v28;
  }
  while (v28 != 4);
  trans((const Mat4f *)&v218, (uint64_t)&v246);
  v196 = v246;
  v197 = v247;
  v198 = v248;
  v199 = v249;
  PCSharedCount::~PCSharedCount(&v234);
  v216.var0 = v194;
  PCSharedCount::PCSharedCount(&v217, &v195);
  v165 = v25;
  v174 = v26;
  v215.f64[0] = v24;
  v215.f64[1] = v23;
  v186 = (id *)a11;
  v187 = a12;
  v235[0] = a13;
  v235[1] = a14;
  if (!v216.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v216.var0 + 504))(v216.var0);
  if (v27 && v31 > -0.0000001 && v31 < 0.0000001)
  {
    if (!v216.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v216.var0 + 232))(&v246);
    v32 = *((double *)&v247 + 1);
    v33 = *((double *)&v249 + 1);
    v34 = v250;
    v35 = v251;
    v245 = 0x3FF0000000000000;
    v242 = 0x3FF0000000000000;
    v239 = 0x3FF0000000000000;
    *(_QWORD *)v238 = 0x3FF0000000000000;
    memset(&v238[8], 0, 32);
    v240 = 0u;
    v241 = 0u;
    v243 = 0u;
    v244 = 0u;
    if (!v216.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, __int128 *))(*(_QWORD *)v216.var0 + 264))(v216.var0, &v236);
    if (!v216.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(double *__return_ptr))(*(_QWORD *)v216.var0 + 272))(&v252);
    v36 = sqrt(v32 * v32 + v33 * v33 + v34 * v34 + v35 * v35);
    v37 = (double)(HIDWORD(a12) - a11.i32[1]);
    v38 = (double)((_DWORD)a12 - a11.i32[0]) * 0.5 * (*(double *)&v237 / v252) / v24;
    v39 = v37 * 0.5 * (*((double *)&v237 + 1) / v253) / v23;
    v40 = v165 * (*(double *)&v237 / v252) / v24;
    v41 = v174 * (*((double *)&v237 + 1) / v253) / v23;
    v42 = v40;
    v43 = v42 - v38;
    v44 = v38 + v42;
    v45 = v41;
    v46 = v45 - v39;
    v47 = v39 + v45;
    v48 = v36;
    v49 = v48 + -100000.0;
    v50 = (v44 - v43) / (double)((_DWORD)a12 - a11.i32[0]);
    v51 = (v47 - v46) / v37;
    v52 = v43 + v50 * (double)(int)a13;
    v53 = v46 + v51 * (double)(HIDWORD(a12) - a11.i32[1] - HIDWORD(a14));
    v54 = v50 * v29 + v52;
    v55 = v51 * v30 + v53;
    v56 = v48 + 100000.0 - (v48 + -100000.0);
    *((_QWORD *)&v220 + 1) = 0;
    v221 = 2.0 / (v55 - v53);
    *(_OWORD *)&v223[1] = 0u;
    v226 = 0u;
    v219 = 0u;
    v222 = 0.0;
    v218 = 2.0 / (v54 - v52);
    *(double *)&v220 = -(v52 + v54) / (v54 - v52);
    v224 = -1.0 / v56;
    v223[0] = -(v53 + v55) / (v55 - v53);
    v225 = -v49 / v56;
    v57 = xmmword_1B304EEE0;
  }
  else
  {
    v218 = (*(double *)v238 + *(double *)v238) / (*((double *)&v236 + 1) - *(double *)&v236);
    *(_QWORD *)&v219 = 0;
    v221 = (*(double *)v238 + *(double *)v238) / (*((double *)&v237 + 1) - *(double *)&v237);
    *((double *)&v219 + 1) = -(*((double *)&v236 + 1) + *(double *)&v236) / (*((double *)&v236 + 1) - *(double *)&v236);
    v222 = -(*((double *)&v237 + 1) + *(double *)&v237) / (*((double *)&v237 + 1) - *(double *)&v237);
    v220 = 0u;
    memset(v223, 0, sizeof(v223));
    v224 = -*(double *)&v238[8] / (*(double *)&v238[8] - *(double *)v238);
    v225 = -(*(double *)&v238[8] * *(double *)v238) / (*(double *)&v238[8] - *(double *)v238);
    v57 = xmmword_1B3058A90;
    v226 = 0u;
  }
  v227 = v57;
  v58 = a10;
  v59 = (LiHe3DEngineNode *)a1;
  for (i = 0; i != 4; ++i)
    *(float32x4_t *)&v228[2 * i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(&v218 + 4 * i)), *(float64x2_t *)((char *)&v219 + 32 * i + 8));
  trans((const Mat4f *)v228, (uint64_t)&v229);
  v200 = v229;
  v201 = v230;
  v202 = v231;
  v203 = v232;
  PCSharedCount::~PCSharedCount(&v217);
  PCSharedCount::~PCSharedCount(&v195);
  v61 = *(_QWORD *)(a1 + 456);
  if (!v61)
    throw_PCNullPointerException(1);
  v62 = 0;
  v159 = 0;
  v154 = 0;
  v63 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 248))(v61, 0);
  do
  {
    v64 = 16 * v62;
    v65 = (std::recursive_mutex *)*((_QWORD *)(*a2)[2 * v62] + 1);
    std::recursive_mutex::lock(v65);
    v66 = *((double *)(*a2)[2 * v62] + 2);
    v156 = (Li3DEngineWorldData *)v65;
    SceneAndRenderer = Li3DEngineScene::getSceneAndRenderer((Li3DEngineScene *)v65, v58);
    v158 = objc_alloc_init(MEMORY[0x1E0CD59D0]);
    objc_msgSend(v158, "setCamera:", objc_alloc_init(MEMORY[0x1E0CD5960]));
    objc_msgSend(v158, "setName:", CFSTR("RenderingCameraNode"));
    v193[0] = v196;
    v193[1] = v197;
    v193[2] = v198;
    v193[3] = v199;
    objc_msgSend(v158, "setTransform:", v193);
    v68 = (void *)objc_msgSend(v158, "camera");
    v192[0] = v200;
    v192[1] = v201;
    v192[2] = v202;
    v192[3] = v203;
    objc_msgSend(v68, "setProjectionTransform:", v192);
    objc_msgSend(SceneAndRenderer, "setPointOfView:", v158);
    objc_msgSend(SceneAndRenderer, "setSceneTime:", v66);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode"), "addChildNode:", v158);
    if (*((_BYTE *)v59 + 640))
    {
      v69 = **a2;
      if (v69)
      else
        v70 = 0;
      LiPhysicsUtils::ConfigureScene(v70, v156, (Li3DEngineScene *)objc_msgSend(SceneAndRenderer, "scene"), (SCNScene *)(v66 == 0.0), v63);
      goto LABEL_51;
    }
    v71 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode"), "childNodes");
    if (v65[1].__m_.__opaque[32])
      v72 = (void *)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode");
    else
      v72 = (void *)objc_msgSend(v71, "firstObject");
    v73 = v72;
    v74 = *a2;
    v75 = (float *)(*a2)[2 * v62];
    if (*((_BYTE *)v75 + 112))
    {
      v76 = *((_DWORD *)v75 + 29);
      v77 = v76 == 8;
      if (*((_BYTE *)v75 + 88))
      {
        v154 |= v77;
LABEL_43:
        v78 = (Li3DEngineObjectDataBase *)objc_msgSend(v72, "setOpacity:", v75[27]);
        v236 = *(_OWORD *)((char *)(*a2)[2 * v62] + 92);
        if (!v77)
        {
          v79 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(v78);
          if (!operator!=((float *)&v236, v79))
            goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (v76 == 8)
      {
        v236 = *(_OWORD *)Li3DEngineObjectDataBase::defaultPerInstanceColor((Li3DEngineObjectDataBase *)v72);
        v154 = 1;
        v77 = 1;
LABEL_48:
        v189[0] = MEMORY[0x1E0C809B0];
        v189[1] = 3221225472;
        v189[2] = ___ZN16LiHe3DEngineNode6renderERKNSt3__16vectorINS0_10shared_ptrI24Li3DEngineObjectDataBaseEENS0_9allocatorIS4_EEEEPU21objcproto10MTLTexture11objc_objectSB_SB_SB_SB_SB_PU26objcproto15MTLCommandQueue11objc_objectPU19objcproto9MTLDevice11objc_object6HGRectSG_9PCVector2IdE_block_invoke;
        v189[3] = &unk_1E657B9E8;
        v190 = v236;
        v191 = v77;
        v189[4] = v73;
        objc_msgSend(v73, "enumerateChildNodesUsingBlock:", v189);
LABEL_49:
        v74 = *a2;
      }
    }
    else if (*((_BYTE *)v75 + 88))
    {
      v77 = 0;
      goto LABEL_43;
    }
    memset(v238, 0, 32);
    v236 = 0u;
    v237 = 0u;
    v80 = (char *)v74[2 * v62];
    v81 = *(_OWORD *)(v80 + 40);
    v82 = *(_OWORD *)(v80 + 24);
    v83 = *(_OWORD *)(v80 + 72);
    v248 = *(_OWORD *)(v80 + 56);
    v249 = v83;
    v246 = v82;
    v247 = v81;
    trans((const Mat4f *)&v246, (uint64_t)&v236);
    v188[0] = v236;
    v188[1] = v237;
    v188[2] = *(_OWORD *)v238;
    v188[3] = *(_OWORD *)&v238[16];
    objc_msgSend(v73, "setTransform:", v188);
LABEL_51:
    v84 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "contents");
    v85 = *((_QWORD *)v59 + 79);
    if (v84 != v85)
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "setContents:", v85);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "setIntensity:", *((double *)v59 + 81));
    v157 = v62;
    v86 = (uint64_t)(*a2)[2 * v62] + 168;
    v87 = (CGColorSpace *)*((_QWORD *)v59 + 86);
    v88 = (CGColorSpace *)*((_QWORD *)v59 + 87);
    v177 = 0u;
    v178 = 0u;
    v176 = 0x3FF0000000000000;
    v179 = 0x3FF0000000000000;
    v180 = 0u;
    v181 = 0u;
    v183 = 0u;
    v184 = 0u;
    v182 = 0x3FF0000000000000;
    v185 = 0x3FF0000000000000;
    buildSCNLights(v86, v87, v88, (uint64_t)&v176, (void **)&v186);
    LODWORD(v89) = 0;
    v90 = v187 - v186;
    v91 = (void *)*((_QWORD *)&v211 + 1);
    v163 = *((_QWORD *)&v212 + 1);
    v92 = v214;
    v93 = (void *)*((_QWORD *)&v213 + 1);
    v166 = v64;
    do
    {
      v175 = (void *)objc_msgSend(a9, "commandBuffer");
      objc_msgSend(v175, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("light %d command buffer"), v89));
      hasDepthMatte = LiHe3DEngineNode::hasDepthMatte(v170);
      if (v173 < 9)
      {
        if (v160 != 16)
        {
          if (!v159)
          {
            if (!hasDepthMatte)
            {
              RenderPassClearColorClearDepth = getRenderPassClearColorClearDepth(a3, v95, (uint64_t)a7);
              goto LABEL_66;
            }
LABEL_64:
            RenderPassClearColorClearDepth = getRenderPassLoadColorLoadDepth(a3, (uint64_t)a7);
            goto LABEL_66;
          }
          if (v155 - 1 != v157)
            goto LABEL_64;
LABEL_62:
          RenderPassClearColorClearDepth = getRenderPassLoadColorLoadDepthResolve(a3, (uint64_t)a6, (uint64_t)a7, a8);
          goto LABEL_66;
        }
        v96 = (uint64_t)a6;
        if (hasDepthMatte)
          goto LABEL_62;
LABEL_59:
        RenderPassClearColorClearDepth = getRenderPassClearColorClearDepthResolve(a3, v96, (uint64_t)a7, a8);
        goto LABEL_66;
      }
      v96 = (uint64_t)a4;
      if (!(_DWORD)v89)
        goto LABEL_59;
      RenderPassClearColorClearDepth = getRenderPassClearColorLoadDepthResolve(a3, (uint64_t)a4, (uint64_t)a7);
LABEL_66:
      v98 = RenderPassClearColorClearDepth;
      objc_msgSend(MEMORY[0x1E0CD5A38], "begin");
      v99 = *(uint64_t *)((char *)*v168 + v64);
      (*(void (**)(uint64_t, uint64_t, void *, float))(*(_QWORD *)v99 + 24))(v99, objc_msgSend(SceneAndRenderer, "scene"), v58, v63);
      v100 = 8;
      v101 = v89;
      do
      {
        if (v90 > v101)
        {
          v102 = (void *)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "rootNode");
          objc_msgSend(v102, "addChildNode:", v186[v101]);
        }
        ++v101;
        --v100;
      }
      while (v100);
      objc_msgSend(MEMORY[0x1E0CD5A38], "commit");
      objc_msgSend(MEMORY[0x1E0CD5A38], "flush");
      objc_msgSend(SceneAndRenderer, "renderAtTime:viewport:commandBuffer:passDescriptor:", v175, v98, v66, 0.0, 0.0, v29, v30);
      v103 = 8;
      v104 = v89;
      do
      {
        if (v90 > v104)
          objc_msgSend(v186[v104], "removeFromParentNode");
        ++v104;
        --v103;
      }
      while (v103);
      v58 = a10;
      (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v99 + 32))(v99, objc_msgSend(SceneAndRenderer, "scene"), a10);
      if (v173 >= 9)
      {
        if (v91 != a10)
        {
          v105 = objc_msgSend(a4, "width");
          v106 = objc_msgSend(a4, "height");
          if (v91)
          *((_QWORD *)&v211 + 1) = a10;
          v235[0] = 0;
          v107 = (void *)objc_msgSend(a10, "newLibraryWithSource:options:error:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "\n            #include <metal_stdlib>\n\n            using namespace metal;\n"
                             "            //---------------------------------------\n"
                             "            // clip space processing\n"
                             "            //---------------------------------------\n"
                             "\n"
                             "            typedef struct\n"
                             "            {\n"
                             "                float3 position [[attribute(0)]];\n"
                             "            } ClipVertex;\n"
                             "\n"
                             "            typedef struct\n"
                             "            {\n"
                             "                float4 position [[position]];\n"
                             "            } ClipData;\n"
                             "\n"
                             "            vertex ClipData vertexShader(ClipVertex in [[stage_in]])\n"
                             "            {\n"
                             "                ClipData out;\n"
                             "                out.position = float4(in.position, 1.0);\n"
                             "                return out;\n"
                             "            }\n"
                             "\n"
                             "            fragment float4 fragmentShader(ClipData frag [[stage_in]],\n"
                             "                                           texture2d<half> colorMap0 [[ texture(0) ]],\n"
                             "                                           texture2d<half> colorMap1 [[ texture(1) ]])\n"
                             "            {\n"
                             "                constexpr sampler colorSampler(mip_filter::none,\n"
                             "                                               mag_filter::nearest,\n"
                             "                                               min_filter::nearest);\n"
                             "\n"
                             "                const float2 texCoord0(frag.position.x / colorMap0.get_width(),\n"
                             "                                       frag.position.y / colorMap0.get_height());\n"
                             "                const half4 color0 = colorMap0.sample(colorSampler, texCoord0);\n"
                             "\n"
                             "                const float2 texCoord1(frag.position.x / colorMap1.get_width(),\n"
                             "                                       frag.position.y / colorMap1.get_height());\n"
                             "                const half4 color1 = colorMap1.sample(colorSampler, texCoord1);\n"
                             "            \n"
                             "                float3 rgb = float3( color0.rgb + color1.rgb);\n"
                             "                float a = float( max(color0.a, color1.a));\n"
                             "                return float4(rgb,a);\n"
                             "            }"),
                           0,
                           v235);
          *(_QWORD *)&v212 = v107;
          v108 = (_anonymous_namespace_::QuadDraw *)v235[0];
          if (v235[0])
          {
            NSLog(CFSTR("%@"), objc_msgSend(v235[0], "localizedDescription"));
            NSLog(CFSTR("%@"), objc_msgSend(v235[0], "localizedFailureReason"));
          }
          v110 = objc_alloc_init(MEMORY[0x1E0CC6B68]);
          objc_msgSend(v110, "setRasterSampleCount:", 1);
          objc_msgSend(v110, "setVertexFunction:", (id)objc_msgSend(v107, "newFunctionWithName:", CFSTR("vertexShader")));
          objc_msgSend(v110, "setFragmentFunction:", (id)objc_msgSend(v107, "newFunctionWithName:", CFSTR("fragmentShader")));
          objc_msgSend(v110, "setVertexDescriptor:", VertexDescriptor);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v110, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 115);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v110, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setBlendingEnabled:", 0);
          v235[0] = 0;
          v163 = objc_msgSend(a10, "newRenderPipelineStateWithDescriptor:error:", v110, v235);
          *((_QWORD *)&v212 + 1) = v163;
          if (v235[0])
            NSLog(CFSTR("Failed to created pipeline state, error %@"), v235[0]);

          v214 = v92;
          v111 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 115, v105, v106, 0);
          objc_msgSend(v111, "setResourceOptions:", 32);
          objc_msgSend(v111, "setTextureType:", 2);
          objc_msgSend(v111, "setUsage:", 1);
          v93 = (void *)objc_msgSend(a10, "newTextureWithDescriptor:", v111);
          *((_QWORD *)&v213 + 1) = v93;
          objc_msgSend(v93, "setLabel:", CFSTR("TemporaryColorCopy"));
        }
        v112 = (void *)objc_msgSend(v175, "blitCommandEncoder");
        v113 = objc_msgSend(a5, "width");
        v114 = objc_msgSend(a5, "height");
        if ((_DWORD)v89)
        {
          v229 = 0uLL;
          *(_QWORD *)&v230 = 0;
          v228[0] = v113;
          v228[1] = v114;
          v228[2] = 1;
          v253 = 0.0;
          v254 = 0;
          v252 = 0.0;
          objc_msgSend(v112, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a5, 0, 0, &v229, v228, v93, 0, 0, &v252);
          objc_msgSend(v112, "endEncoding");
          v115 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v115, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a5);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v115, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 1);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v115, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
          objc_msgSend((id)objc_msgSend(v115, "depthAttachment"), "setTexture:", 0);
          v116 = (void *)objc_msgSend(v175, "renderCommandEncoderWithDescriptor:", v115);
          objc_msgSend(v116, "setRenderPipelineState:", v163);
          objc_msgSend(v116, "setFragmentTexture:atIndex:", a4, 0);
          objc_msgSend(v116, "setFragmentTexture:atIndex:", v93, 1);
          objc_msgSend(v116, "setFrontFacingWinding:", 1);
          objc_msgSend(v116, "setCullMode:", 2);
          objc_msgSend(v116, "setVertexBuffer:offset:atIndex:", v92, 0, 0);
          objc_msgSend(v116, "drawPrimitives:vertexStart:vertexCount:", 3, 0, 6);
          objc_msgSend(v116, "endEncoding");
        }
        else
        {
          v236 = 0uLL;
          *(_QWORD *)&v237 = 0;
          *(_QWORD *)&v246 = v113;
          *((_QWORD *)&v246 + 1) = v114;
          *(_QWORD *)&v247 = 1;
          v218 = 0.0;
          v219 = 0uLL;
          objc_msgSend(v112, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a4, 0, 0, &v236, &v246, a5, 0, 0, &v218);
          objc_msgSend(v112, "endEncoding");
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(SceneAndRenderer, "scene"), "lightingEnvironment"), "setIntensity:", 0.0);
        }
        v91 = a10;
      }
      objc_msgSend(v175, "commit");
      objc_msgSend(v175, "waitUntilCompleted");
      v89 = (v89 + 8);
      v64 = v166;
    }
    while (v90 > v89);
    v118 = v186;
    v117 = v187;
    a2 = v168;
    v59 = v170;
    if (v186 != v187)
    {
      do
      {
        v119 = *v118;

        ++v118;
      }
      while (v118 != v117);
      v118 = v186;
    }
    if (v118)
    {
      v187 = v118;
      operator delete(v118);
    }
    if (v173 > 8)
    {
      v175 = (void *)objc_msgSend(a9, "commandBuffer");
      objc_msgSend(v175, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("depth comp. command buffer")));
      v120 = *((_QWORD *)&v207 + 1);
      if (*((void **)&v207 + 1) != a10)
      {
        v121 = objc_msgSend(a7, "width");
        v122 = objc_msgSend(a7, "height");
        if (v120)
        *((_QWORD *)&v207 + 1) = a10;
        *(_QWORD *)&v236 = 0;
        v123 = objc_retain((id)objc_msgSend(a10, "newLibraryWithSource:options:error:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "\n        #include <metal_stdlib>\n\n        using namespace metal;\n"
                                   "        //---------------------------------------\n"
                                   "        // clip space processing\n"
                                   "        //---------------------------------------\n"
                                   "\n"
                                   "        typedef struct {\n"
                                   "            float3 position [[attribute(0)]];\n"
                                   "        } ClipVertex;\n"
                                   "\n"
                                   "        typedef struct {\n"
                                   "            float4 position [[position]];\n"
                                   "        } ClipData;\n"
                                   "\n"
                                   "        typedef struct {\n"
                                   "            float4 fragColor [[color(0)]];\n"
                                   "            float fragDepth  [[color(1)]];\n"
                                   "        } FragData;\n"
                                   "\n"
                                   "        vertex ClipData vertexShader(ClipVertex in [[stage_in]])\n"
                                   "        {\n"
                                   "            ClipData out;\n"
                                   "            out.position = float4(in.position, 1.0);\n"
                                   "            return out;\n"
                                   "        }\n"
                                   "\n"
                                   "        fragment FragData fragmentShader( ClipData frag             [[stage_in]],\n"
                                   "                                          texture2d<half> colorMap1 [[ texture(0) ]],"
                                   "\n"
                                   "                                          depth2d_ms<float> depth1  [[ texture(1) ]],"
                                   "\n"
                                   "                                          texture2d<half> colorMap2 [[ texture(2) ]],"
                                   "\n"
                                   "                                          texture2d<float> depth2   [[ texture(3) ]],"
                                   "\n"
                                   "                                          constant float4 &flags    [[ buffer(0) ]])"
                                   "\n"
                                   "        {\n"
                                   "            FragData out;\n"
                                   "\n"
                                   "            constexpr sampler s(mip_filter::none, mag_filter::nearest, min_filter::ne"
                                   "arest);\n"
                                   "\n"
                                   "            const float2 texCoordC(frag.position.x / colorMap1.get_width(),\n"
                                   "                                   frag.position.y / colorMap1.get_height());\n"
                                   "\n"
                                   "            const uint2 texCoordD(frag.position.x, frag.position.y);\n"
                                   "\n"
                                   "            const BOOL firstPass = (flags.x > 0.0);\n"
                                   "\n"
                                   "            float d1 = depth1.read(texCoordD,0);\n"
                                   "            float d2 = depth2.read(texCoordD).r;\n"
                                   "            \n"
                                   "            if (firstPass || (d1 > d2)) {\n"
                                   "               out.fragColor = float4( colorMap1.sample(s, texCoordC));\n"
                                   "               out.fragDepth = d1;\n"
                                   "            } else {\n"
                                   "               out.fragColor = float4( colorMap2.sample(s, texCoordC));\n"
                                   "               out.fragDepth = d2;\n"
                                   "          }\n"
                                   "\n"
                                   "          return out;\n"
                                   "        }"),
                                 0,
                                 &v236));
        *(_QWORD *)&v208 = v123;
        v124 = (_anonymous_namespace_::QuadDraw *)v236;
        if ((_QWORD)v236)
        {
          NSLog(CFSTR("%@"), objc_msgSend((id)v236, "localizedDescription"));
          NSLog(CFSTR("%@"), objc_msgSend((id)v236, "localizedFailureReason"));
        }
        v126 = objc_alloc_init(MEMORY[0x1E0CC6B68]);
        objc_msgSend(v126, "setRasterSampleCount:", 1);
        objc_msgSend(v126, "setVertexFunction:", (id)objc_msgSend(v123, "newFunctionWithName:", CFSTR("vertexShader")));
        objc_msgSend(v126, "setFragmentFunction:", (id)objc_msgSend(v123, "newFunctionWithName:", CFSTR("fragmentShader")));
        objc_msgSend(v126, "setVertexDescriptor:", v125);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v126, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 115);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v126, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setBlendingEnabled:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v126, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setPixelFormat:", 55);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v126, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setBlendingEnabled:", 0);
        *((_QWORD *)&v208 + 1) = objc_msgSend(a10, "newRenderPipelineStateWithDescriptor:error:", v126, &v236);
        if ((_QWORD)v236)
          NSLog(CFSTR("Failed to created pipeline state, error %@"), (_QWORD)v236);

        v127 = 0;
        v128 = 1;
        do
        {
          v129 = v128;
          v130 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, v121, v122, 0);
          objc_msgSend(v130, "setResourceOptions:", 32);
          objc_msgSend(v130, "setTextureType:", 2);
          objc_msgSend(v130, "setUsage:", 5);
          objc_msgSend(v130, "setSampleCount:", 1);
          v131 = (void *)objc_msgSend(a10, "newTextureWithDescriptor:", v130);
          *((_QWORD *)&v209 + v127) = v131;
          objc_msgSend(v131, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DepthTexPingPong(%d)"), v127));
          v128 = 0;
          v127 = 1;
        }
        while ((v129 & 1) != 0);
        v59 = v170;
        v132 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 115, v121, v122, 0);
        objc_msgSend(v132, "setResourceOptions:", 32);
        objc_msgSend(v132, "setTextureType:", 2);
        objc_msgSend(v132, "setUsage:", 1);
        *(_QWORD *)&v210 = objc_msgSend(a10, "newTextureWithDescriptor:", v132);
        objc_msgSend((id)v210, "setLabel:", CFSTR("TemporaryColorCopy"));
      }
      if (v159)
      {
        v133 = (void *)objc_msgSend(v175, "blitCommandEncoder");
        v134 = objc_msgSend(a6, "width");
        v135 = objc_msgSend(a6, "height");
        v236 = 0uLL;
        *(_QWORD *)&v237 = 0;
        *(_QWORD *)&v246 = v134;
        *((_QWORD *)&v246 + 1) = v135;
        *(_QWORD *)&v247 = 1;
        v218 = 0.0;
        v219 = 0uLL;
        objc_msgSend(v133, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a6, 0, 0, &v236, &v246, (_QWORD)v210, 0, 0, &v218);
        v167 = 0.0;
        objc_msgSend(v133, "endEncoding");
      }
      else
      {
        v167 = 1.0;
      }
      v136 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a6);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", v159 != 0);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setTexture:", *(_QWORD *)(((unint64_t)&v207 | (8 * !(v159 & 1))) + 0x20));
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setLoadAction:", v159 != 0);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v136, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setStoreAction:", 1);
      v137 = (void *)objc_msgSend(v175, "renderCommandEncoderWithDescriptor:", v136);
      objc_msgSend(v137, "setLabel:", CFSTR("Depth Comp. RenderEncoder"));
      objc_msgSend(v137, "setRenderPipelineState:", *((_QWORD *)&v208 + 1));
      objc_msgSend(v137, "setFragmentTexture:atIndex:", a5, 0);
      objc_msgSend(v137, "setFragmentTexture:atIndex:", a7, 1);
      objc_msgSend(v137, "setFragmentTexture:atIndex:", (_QWORD)v210, 2);
      objc_msgSend(v137, "setFragmentTexture:atIndex:", *(_QWORD *)(((unint64_t)&v207 | (8 * (v159 & 1))) + 0x20), 3);
      v229 = LODWORD(v167);
      objc_msgSend(v137, "setFragmentBytes:length:atIndex:", &v229, 16, 0);
      v138 = *((_QWORD *)&v210 + 1);
      objc_msgSend(v137, "setFrontFacingWinding:", 1);
      objc_msgSend(v137, "setCullMode:", 2);
      objc_msgSend(v137, "setVertexBuffer:offset:atIndex:", v138, 0, 0);
      objc_msgSend(v137, "drawPrimitives:vertexStart:vertexCount:", 3, 0, 6);
      objc_msgSend(v137, "endEncoding");
      objc_msgSend(v175, "commit");
      objc_msgSend(v175, "waitUntilCompleted");
    }
    objc_msgSend(v158, "removeFromParentNode");

    std::recursive_mutex::unlock((std::recursive_mutex *)v156);
    v62 = ++v159;
  }
  while (v155 > v159);
  if ((v154 & 1) != 0)
  {
    v175 = (void *)objc_msgSend(a9, "commandBuffer");
    objc_msgSend(v175, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("alpha clamp. command buffer")));
    v139 = *((_QWORD *)&v204 + 1);
    if (*((void **)&v204 + 1) != a10)
    {
      v140 = objc_msgSend(a6, "width");
      v141 = objc_msgSend(a6, "height");
      if (v139)
      *((_QWORD *)&v204 + 1) = a10;
      *(_QWORD *)&v236 = 0;
      v142 = (void *)objc_msgSend(a10, "newLibraryWithSource:options:error:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "\n        #include <metal_stdlib>\n\n        using namespace metal;\n"
                         "        //---------------------------------------\n"
                         "        // clip space processing\n"
                         "        //---------------------------------------\n"
                         "\n"
                         "        typedef struct\n"
                         "        {\n"
                         "            float3 position [[attribute(0)]];\n"
                         "        } ClipVertex;\n"
                         "\n"
                         "        typedef struct\n"
                         "        {\n"
                         "            float4 position [[position]];\n"
                         "        } ClipData;\n"
                         "\n"
                         "        vertex ClipData vertexShader(ClipVertex in [[stage_in]])\n"
                         "        {\n"
                         "            ClipData out;\n"
                         "            out.position = float4(in.position, 1.0);\n"
                         "            return out;\n"
                         "        }\n"
                         "\n"
                         "        fragment float4 fragmentShader(ClipData frag [[stage_in]],\n"
                         "                                       texture2d<half> colorMap0 [[ texture(0) ]])\n"
                         "        {\n"
                         "            constexpr sampler colorSampler(mip_filter::none,\n"
                         "                                           mag_filter::nearest,\n"
                         "                                           min_filter::nearest);\n"
                         "\n"
                         "            const float2 texCoord0(frag.position.x / colorMap0.get_width(),\n"
                         "                                   frag.position.y / colorMap0.get_height());\n"
                         "            float4 color0 = float4(colorMap0.sample(colorSampler, texCoord0));\n"
                         "            color0.a = min(1.0, color0.a);\n"
                         "            return color0;\n"
                         "        }"),
                       0,
                       &v236);
      *(_QWORD *)&v205 = v142;
      v143 = (_anonymous_namespace_::QuadDraw *)v236;
      if ((_QWORD)v236)
      {
        NSLog(CFSTR("%@"), objc_msgSend((id)v236, "localizedDescription"));
        NSLog(CFSTR("%@"), objc_msgSend((id)v236, "localizedFailureReason"));
      }
      v145 = objc_alloc_init(MEMORY[0x1E0CC6B68]);
      objc_msgSend(v145, "setRasterSampleCount:", 1);
      objc_msgSend(v145, "setVertexFunction:", (id)objc_msgSend(v142, "newFunctionWithName:", CFSTR("vertexShader")));
      objc_msgSend(v145, "setFragmentFunction:", (id)objc_msgSend(v142, "newFunctionWithName:", CFSTR("fragmentShader")));
      objc_msgSend(v145, "setVertexDescriptor:", v144);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v145, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 115);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v145, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setBlendingEnabled:", 0);
      *(_QWORD *)&v236 = 0;
      *((_QWORD *)&v205 + 1) = objc_msgSend(a10, "newRenderPipelineStateWithDescriptor:error:", v145, &v236);
      if ((_QWORD)v236)
        NSLog(CFSTR("Failed to created pipeline state, error %@"), (_QWORD)v236);

      v146 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 115, v140, v141, 0);
      objc_msgSend(v146, "setResourceOptions:", 32);
      objc_msgSend(v146, "setTextureType:", 2);
      objc_msgSend(v146, "setUsage:", 1);
      *(_QWORD *)&v206 = objc_msgSend(a10, "newTextureWithDescriptor:", v146);
      objc_msgSend((id)v206, "setLabel:", CFSTR("TemporaryCopy"));
    }
    v147 = (void *)objc_msgSend(v175, "blitCommandEncoder");
    v148 = objc_msgSend(a6, "width");
    v149 = objc_msgSend(a6, "height");
    v236 = 0uLL;
    *(_QWORD *)&v237 = 0;
    *(_QWORD *)&v246 = v148;
    *((_QWORD *)&v246 + 1) = v149;
    *(_QWORD *)&v247 = 1;
    v150 = v206;
    v218 = 0.0;
    v219 = 0uLL;
    objc_msgSend(v147, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a6, 0, 0, &v236, &v246, (_QWORD)v206, 0, 0, &v218);
    objc_msgSend(v147, "endEncoding");
    v151 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v151, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a6);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v151, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 0);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v151, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
    objc_msgSend((id)objc_msgSend(v151, "depthAttachment"), "setTexture:", 0);
    v152 = (void *)objc_msgSend(v175, "renderCommandEncoderWithDescriptor:", v151);
    objc_msgSend(v152, "setRenderPipelineState:", *((_QWORD *)&v205 + 1));
    objc_msgSend(v152, "setFragmentTexture:atIndex:", v150, 0);
    v153 = *((_QWORD *)&v206 + 1);
    objc_msgSend(v152, "setFrontFacingWinding:", 1);
    objc_msgSend(v152, "setCullMode:", 2);
    objc_msgSend(v152, "setVertexBuffer:offset:atIndex:", v153, 0, 0);
    objc_msgSend(v152, "drawPrimitives:vertexStart:vertexCount:", 3, 0, 6);
    objc_msgSend(v152, "endEncoding");
    objc_msgSend(v175, "commit");
  }
  if (v175)
    objc_msgSend(v175, "waitUntilScheduled");
LABEL_122:
  std::mutex::unlock(&LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx);
}

void sub_1B2DB6444(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  std::mutex::unlock(&LiHe3DEngineNode::render(std::vector<std::shared_ptr<Li3DEngineObjectDataBase>> const&,objc_object  {objcproto10MTLTexture}*,objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto10MTLTexture},objc_object  {objcproto15MTLCommandQueue}*,objc_object  {objcproto9MTLDevice}*,HGRect,objc_object,PCVector2<double>)::mtx);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16LiHe3DEngineNode6renderERKNSt3__16vectorINS0_10shared_ptrI24Li3DEngineObjectDataBaseEENS0_9allocatorIS4_EEEEPU21objcproto10MTLTexture11objc_objectSB_SB_SB_SB_SB_PU26objcproto15MTLCommandQueue11objc_objectPU19objcproto9MTLDevice11objc_object6HGRectSG_9PCVector2IdE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a2, "geometry");
  if (result)
  {
    v5 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy");
    objc_msgSend(a2, "setGeometry:", v5);

    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "materials"), "count"));
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v7 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometry"), "materials");
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v18;
      v11 = *MEMORY[0x1E0CD5BB0];
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v18 != v10)
            objc_enumerationMutation(v7);
          v13 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * i), "copy");
          objc_msgSend((id)objc_msgSend(v13, "multiply"), "setContents:", objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52)));
          if (*(_BYTE *)(a1 + 56))
          {
            v21 = v11;
            v14 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(*(id *)(a1 + 32), "opacity");
            v22 = objc_msgSend(v14, "stringWithFormat:", CFSTR("_output.color *= %.3f;"), v15 * 0.5);
            objc_msgSend(v13, "setShaderModifiers:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
            objc_msgSend(v13, "setDoubleSided:", 1);
            v16 = *(unsigned __int8 *)(a1 + 56);
          }
          else
          {
            v16 = 0;
          }
          objc_msgSend(v13, "setBlendMode:", v16);
          objc_msgSend(v13, "setReadsFromDepthBuffer:", *(_BYTE *)(a1 + 56) == 0);
          objc_msgSend(v6, "addObject:", v13);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
      }
      while (v9);
    }
    return objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v6);
  }
  return result;
}

BOOL LiHe3DEngineNode::hasDepthMatte(LiHe3DEngineNode *this)
{
  char *v2;

  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.motionapp")))
  {
    v2 = (char *)this + 432;
    return *(_QWORD *)v2 != 0;
  }
  if (*((_QWORD *)this + 52))
  {
    v2 = (char *)this + 424;
    return *(_QWORD *)v2 != 0;
  }
  return 0;
}

uint64_t LiHe3DEngineNode::RenderPageMetal(HGNode *this, HGPage *a2)
{
  LiHe3DEngineNode *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  HGBitmap *v9;
  void *v10;
  HGBitmap *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t DeviceInfo;
  unsigned int v16;
  id *v17;
  void *v18;
  void *v19;
  void *v20;
  double *v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  void *v26;
  uint64_t *v28;
  uint64_t *v29;
  void **v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  HGPage *v35;
  void **v36[2];

  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v35, this, a2);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  LiHe3DEngineNode::traverse((uint64_t)this, *((const void **)this + 55), &v32);
  v5 = v32;
  if (v33 == v32)
  {
    v11 = LiHe3DEngineNode::setupOutputColorTexture(v4, a2);
    HGGPURenderer::ClearMetal(*(HGGPURenderer **)a2, *((HGBitmap **)a2 + 1), *((HGRect *)a2 + 1), v12);
    (*(void (**)(HGBitmap *))(*(_QWORD *)v11 + 24))(v11);
    v13 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)v5;
      v5 += 16;
      v8 = *(int *)(v7 + 180);
      if (v6 <= v8)
        v6 = v8;
    }
    while (v5 != v33);
    v9 = LiHe3DEngineNode::setupOutputColorTexture(v4, a2);
    v10 = (void *)*((_QWORD *)v9 + 18);
    if (v6 < 9)
    {
      v36[0] = 0;
      v31 = 0;
    }
    else
    {
      LiHe3DEngineNode::setupColorTexture((HGGPURenderer **)a2, v36);
      LiHe3DEngineNode::setupColorTexture((HGGPURenderer **)a2, &v31);
    }
    v14 = *(void **)(*(_QWORD *)(HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a2) + 16) + 16);
    DeviceInfo = HGMetalDeviceInfo::getDeviceInfo((uint64_t)v14);
    if (DeviceInfo)
      v16 = *(_DWORD *)(DeviceInfo + 52);
    else
      v16 = 4;
    LiHe3DEngineNode::createTextureFromPool((uint64_t)a2, 27, v16, &v30);
    LiHe3DEngineNode::createTextureFromPool((uint64_t)a2, 9, v16, &v29);
    LiHe3DEngineNode::createTextureFromPool((uint64_t)a2, 9, 1u, &v28);
    v17 = (id *)HGRectMake4f((*((_DWORD *)this + 155) + *((_DWORD *)this + 153)), (float)*((int *)this + 152), (float)*((int *)this + 153), (float)(*((_DWORD *)this + 154) + *((_DWORD *)this + 152)), (float)(*((_DWORD *)this + 155) + *((_DWORD *)this + 153)));
    v19 = v18;
    v20 = (void *)*((_QWORD *)a2 + 2);
    v21 = (double *)*((_QWORD *)a2 + 3);
    v22 = *((double *)this + 60);
    v23 = *(void **)(HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a2) + 32);
    LiHe3DEngineNode::doPeopleOcclusion((uint64_t)this, (uint64_t)a2, v23, (uint64_t)v14, v30[18], v29[18]);
    if (v36[0])
      v24 = v36[0][18];
    else
      v24 = 0;
    v25 = fabs(v22);
    if (v31)
      v26 = (void *)v31[18];
    else
      v26 = 0;
    LiHe3DEngineNode::render((uint64_t)this, (const void ***)&v32, (uint64_t)v30[18], v24, v26, v10, (void *)v29[18], v28[18], v23, v14, *(int32x2_t *)&v25, v17, v19, v20, v21);
    (*(void (**)(HGBitmap *))(*(_QWORD *)v9 + 24))(v9);
    v13 = *((_QWORD *)a2 + 1);
    if (v28)
      (*(void (**)(uint64_t *))(*v28 + 24))(v28);
    if (v29)
      (*(void (**)(uint64_t *))(*v29 + 24))(v29);
    if (v30)
      (*((void (**)(void **))*v30 + 3))(v30);
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 24))(v31);
    if (v36[0])
      (*((void (**)(void **))*v36[0] + 3))(v36[0]);
  }
  v36[0] = (void **)&v32;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](v36);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v35);
  return v13;
}

void sub_1B2DB6AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v25;

  v25 = *(_QWORD *)(v23 - 112);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  *(_QWORD *)(v23 - 112) = &a23;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 112));
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)(v23 - 120));
  _Unwind_Resume(a1);
}

void LiHe3DEngineNode::doPeopleOcclusion(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  HGRenderer *v15;
  uint64_t DOD;
  uint64_t v17;
  uint64_t v18;
  HGNode *Input;
  HGBitmap *NodeMetalTexture;
  HGNode *v21;
  uint64_t v22;
  HGBitmap *v23;
  int32x2_t v24;
  double v25;
  double PerspectiveFrustumLimits;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  LiPersonDepthWriter *v32;
  _BYTE v33[32];
  double v34;
  double v35;
  float64x2_t v36;
  __int128 v37;
  int32x2_t v38[2];
  HGRect v39;
  HGRect v40;

  if (LiHe3DEngineNode::hasDepthMatte((LiHe3DEngineNode *)a1))
  {
    v12 = (void *)objc_msgSend(a3, "commandBuffer");
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.motionapp")))
    {
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 144);
    }
    else
    {
      v15 = *(HGRenderer **)a2;
      DOD = HGRenderer::GetDOD(*(HGRenderer **)a2, *(HGNode **)(a1 + 416));
      v18 = v17;
      Input = HGRenderer::GetInput(v15, *(HGNode **)(a1 + 416), 0);
      *(_QWORD *)&v39.var0 = DOD;
      *(_QWORD *)&v39.var2 = v18;
      NodeMetalTexture = HGGPURenderer::GetNodeMetalTexture(v15, Input, v39, 0, 1u);
      v13 = *((_QWORD *)NodeMetalTexture + 18);
      (*(void (**)(HGBitmap *))(*(_QWORD *)NodeMetalTexture + 24))(NodeMetalTexture);
      v21 = HGRenderer::GetInput(v15, *(HGNode **)(a1 + 424), 0);
      *(_QWORD *)&v40.var0 = HGRectMake4i(0xFFFFD8F0, 0xFFFFD8F0, 0x2710u, 0x2710u);
      *(_QWORD *)&v40.var2 = v22;
      v23 = HGGPURenderer::GetNodeMetalTexture(v15, v21, v40, 0, 1u);
      v14 = *((_QWORD *)v23 + 18);
      (*(void (**)(HGBitmap *))(*(_QWORD *)v23 + 24))(v23);
    }
    v38[0] = (int32x2_t)HGRectMake4f((*(_DWORD *)(a1 + 620) + *(_DWORD *)(a1 + 612)), (float)*(int *)(a1 + 608), (float)*(int *)(a1 + 612), (float)(*(_DWORD *)(a1 + 616) + *(_DWORD *)(a1 + 608)), (float)(*(_DWORD *)(a1 + 620) + *(_DWORD *)(a1 + 612)));
    v38[1] = v24;
    v37 = *(_OWORD *)(a2 + 16);
    v25 = fabs(*(double *)(a1 + 520));
    v36.f64[0] = fabs(*(double *)(a1 + 480));
    v36.f64[1] = v25;
    v27 = *(_QWORD *)(a1 + 456);
    if (!v27)
      throw_PCNullPointerException(1);
    *(float *)&v28 = (*(double (**)(uint64_t, _QWORD, double))(*(_QWORD *)v27 + 248))(v27, 0, PerspectiveFrustumLimits);
    *(float *)&v29 = v34;
    *(float *)&v30 = v35;
    v31 = *(unsigned int *)(a1 + 408);
    v32 = -[LiPersonDepthWriter initWithDevice:sampleCount:]([LiPersonDepthWriter alloc], "initWithDevice:sampleCount:", a4, objc_msgSend(a5, "sampleCount"));
    -[LiPersonDepthWriter writeWithDepthMap:matte:depthTexture:colorTexture:uniforms:windowSize:commandBuffer:](v32, "writeWithDepthMap:matte:depthTexture:colorTexture:uniforms:windowSize:commandBuffer:", v14, v13, a6, a5, v28 | ((unint64_t)v29 << 32), v30 | (unint64_t)(v31 << 32), (double)*(int *)(a1 + 616), (double)*(int *)(a1 + 620), v12);
    objc_msgSend(v12, "commit");
    objc_msgSend(v12, "waitUntilCompleted");

  }
}

float64_t `anonymous namespace'::getPerspectiveFrustumLimits@<D0>(const PCSharedCount *a1@<X0>, int32x2_t *a2@<X1>, _DWORD *a3@<X2>, float64x2_t *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  __int128 v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int32x2_t v20;
  uint64x2_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64_t result;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  float64x2_t v41;
  float64_t v42;
  int64x2_t v43;
  float64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  PC_Sp_counted_base *var0;
  PCSharedCount v48;
  __int128 v49;
  float64x2_t v50;
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  _BYTE v54[40];
  uint64_t v55;
  _OWORD v56[8];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  var0 = a1->var0;
  PCSharedCount::PCSharedCount(&v48, a1 + 1);
  if (!var0)
    throw_PCNullPointerException(1);
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)var0 + 56))(v56);
  *(_OWORD *)&v51[32] = v56[4];
  v52 = v56[5];
  v53 = v56[6];
  *(_OWORD *)v54 = v56[7];
  v49 = v56[0];
  v50 = (float64x2_t)v56[1];
  *(_OWORD *)v51 = v56[2];
  *(_OWORD *)&v51[16] = v56[3];
  PCMatrix44Tmpl<double>::invert((double *)&v49, (double *)&v49, 0.0);
  v57 = xmmword_1B3058A90;
  v58 = xmmword_1B304F7C0;
  v59 = 0u;
  v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  v42 = *((double *)&v60 + 1);
  v44 = *(double *)&v59;
  v57 = xmmword_1B304EED0;
  v58 = xmmword_1B304F7C0;
  v59 = 0u;
  v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  v39 = *((double *)&v60 + 1);
  v40 = *(double *)&v59;
  v57 = xmmword_1B305A270;
  v58 = xmmword_1B304F7C0;
  v59 = 0u;
  v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  v38 = *((double *)&v59 + 1);
  v37 = *((double *)&v60 + 1);
  v57 = xmmword_1B304EEE0;
  v58 = xmmword_1B304F7C0;
  v59 = 0u;
  v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  v36 = *((double *)&v59 + 1);
  v35 = *((double *)&v60 + 1);
  v57 = 0uLL;
  v58 = xmmword_1B304F7C0;
  v59 = 0u;
  v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  v9 = v60;
  v57 = 0uLL;
  __asm { FMOV            V1.2D, #1.0 }
  v46 = (float64x2_t)_Q1;
  v58 = _Q1;
  v59 = 0u;
  v60 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v49, (double *)&v57, (double *)&v59);
  v15 = v60;
  v55 = 0x3FF0000000000000;
  *(_QWORD *)v54 = 0x3FF0000000000000;
  *(_QWORD *)&v51[40] = 0x3FF0000000000000;
  *(_QWORD *)v51 = 0x3FF0000000000000;
  memset(&v51[8], 0, 32);
  v52 = 0u;
  v53 = 0u;
  memset(&v54[8], 0, 32);
  (*(void (**)(PC_Sp_counted_base *, __int128 *))(*(_QWORD *)var0 + 264))(var0, &v49);
  v16.f64[0] = v42;
  v16.f64[1] = v37;
  v17.f64[0] = v39;
  v17.f64[1] = v35;
  v18.f64[0] = v44;
  v18.f64[1] = v38;
  v19 = vmulq_f64(v18, vdivq_f64(v46, v16));
  v16.f64[0] = v40;
  v16.f64[1] = v36;
  v41 = vmulq_f64(v16, vdivq_f64(v46, v17));
  v43 = vcvtq_s64_f64(v50);
  v45 = v19;
  PCSharedCount::~PCSharedCount(&v48);
  v20 = vsub_s32(a2[1], *a2);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  v22 = a3[1];
  v23 = a3[2];
  v24 = v23 - *a3;
  v25 = v20.i32[0] - v23;
  __asm { FMOV            V3.2D, #0.5 }
  v27 = vmulq_f64(vaddq_f64(v45, v41), _Q3);
  v28 = vcvtq_f64_u64(v21);
  v29 = vmulq_f64(vdivq_f64(v46, *a4), vmulq_f64(vdivq_f64(vsubq_f64(v41, v45), vcvtq_f64_s64(v43)), vmulq_f64(v28, _Q3)));
  v30 = vsubq_f64(v27, v29);
  v31 = vdivq_f64(vsubq_f64(vaddq_f64(v27, v29), v30), v28);
  v32.f64[0] = (double)v24;
  v32.f64[1] = (double)v22;
  v30.f64[0] = v30.f64[0] + (double)v25 * v31.f64[0];
  v33 = vaddq_f64(vmulq_f64(v31, v32), v30);
  v31.f64[0] = vmuld_lane_f64((double)(a3[3] - v22), v31, 1);
  *(float64_t *)a5 = v30.f64[0];
  *(float64x2_t *)(a5 + 8) = v33;
  result = v31.f64[0] + v33.f64[1];
  *(float64_t *)(a5 + 24) = result;
  *(double *)(a5 + 32) = *(double *)&v9 * (-1.0 / *((double *)&v9 + 1));
  *(double *)(a5 + 40) = *(double *)&v15 * (-1.0 / *((double *)&v15 + 1));
  return result;
}

void sub_1B2DB71A4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void *getRenderPassLoadColorLoadDepthResolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;

  v8 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", a1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setTexture:", a3);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setResolveTexture:", a4);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setStoreAction:", 2);
  objc_msgSend((id)objc_msgSend(v8, "depthAttachment"), "setLoadAction:", 1);
  return v8;
}

void `anonymous namespace'::ColorAccumulator::releaseResources(id *this)
{

}

void *`anonymous namespace'::QuadDraw::createVertexDescriptor(_anonymous_namespace_::QuadDraw *this)
{
  void *v1;

  v1 = (void *)objc_opt_new();
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "attributes"), "objectAtIndexedSubscript:", 0), "setFormat:", 30);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "attributes"), "objectAtIndexedSubscript:", 0), "setOffset:", 0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "attributes"), "objectAtIndexedSubscript:", 0), "setBufferIndex:", 0);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "layouts"), "objectAtIndexedSubscript:", 0), "setStride:", 12);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "layouts"), "objectAtIndexedSubscript:", 0), "setStepRate:", 1);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "layouts"), "objectAtIndexedSubscript:", 0), "setStepFunction:", 1);
  return v1;
}

void `anonymous namespace'::RGBDepthCompositor::releaseResources(id *this)
{

}

void `anonymous namespace'::AlphaClamper::releaseResources(id *this)
{

}

void LiHeLightAmbient::LiHeLightAmbient(LiHeLightAmbient *this)
{
  _QWORD *v1;

  LiHeLightProgramAmbient::LiHeLightProgramAmbient(this);
  *v1 = off_1E657BA30;
}

uint64_t LiHeLightAmbient::setColor(LiHeLightAmbient *this, const PCWorkingColorVector *a2)
{
  return (*(uint64_t (**)(LiHeLightAmbient *, _QWORD, float, float, float, float))(*(_QWORD *)this + 96))(this, 0, *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), 0.0);
}

void LiHeLightAmbient::~LiHeLightAmbient(HGNode *this)
{
  void *v1;

  LiHeLightProgramAmbient::~LiHeLightProgramAmbient(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightAmbient::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3)
    return 27;
  else
    return a2;
}

LiHeLightAmbient *LiHeLightDirectional::LiHeLightDirectional(LiHeLightAmbient *a1, _QWORD *a2, double *a3, double *a4, float32x4_t *a5, float32x4_t *a6, double *a7, long double a8)
{
  _QWORD *v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  int v33;
  int v34;
  float v36[4];
  float v37[4];
  float v38[4];
  _DWORD v39[4];

  LiHeLightAmbient::LiHeLightAmbient(a1);
  *v16 = off_1E657BC98;
  v17 = a7[1];
  v18 = a7[2];
  v19 = fmax(*a7 * *a3 + v17 * a3[1] + v18 * a3[2], 0.0);
  v20 = 0.0;
  if (fabs(v19) > 0.0001)
    v20 = pow(fmax(*a7 * *a4 + v17 * a4[1] + v18 * a4[2], 0.0), a8);
  v21 = v19;
  v38[0] = operator*(a5->f32, v21);
  v38[1] = v22;
  v38[2] = v23;
  v38[3] = v24;
  v25 = operator*(a5, a6);
  v36[0] = *(float *)&v25;
  v36[1] = v26;
  v36[2] = v27;
  v36[3] = v28;
  v37[0] = operator*(v36, v20);
  v37[1] = v29;
  v37[2] = v30;
  v37[3] = v31;
  v39[0] = operator+(v38, v37);
  v39[1] = v32;
  v39[2] = v33;
  v39[3] = v34;
  (*(void (**)(LiHeLightAmbient *, _QWORD, _QWORD))(*(_QWORD *)a1 + 120))(a1, 0, *a2);
  LiHeLightAmbient::setColor(a1, (const PCWorkingColorVector *)v39);
  return a1;
}

void sub_1B2DB75E4(_Unwind_Exception *a1)
{
  LiHeLightAmbient *v1;

  LiHeLightAmbient::~LiHeLightAmbient(v1);
  _Unwind_Resume(a1);
}

void LiHeLightDirectional::~LiHeLightDirectional(LiHeLightDirectional *this)
{
  void *v1;

  LiHeLightAmbient::~LiHeLightAmbient(this);
  HGObject::operator delete(v1);
}

LiHeLightProgramPointSurface *LiHeLightPointSurface::LiHeLightPointSurface(LiHeLightProgramPointSurface *a1, HGNode **a2, double *a3, float *a4, float *a5, double *a6, double *a7, double *a8, float a9, float a10, double *a11)
{
  HGNode *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;

  LiHeLightProgramPointSurface::LiHeLightProgramPointSurface(a1);
  *(_QWORD *)v21 = off_1E657BF00;
  HGNode::SetInput(v21, 0, *a2);
  v22 = *a3;
  v23 = a3[1];
  v24 = a3[2];
  (*(void (**)(LiHeLightProgramPointSurface *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v22, v23, v24, 0.0);
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, *a4, a4[1], a4[2], a4[3]);
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, *a5, a5[1], a5[2], a5[3]);
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, a9, 0.0, 0.0, 0.0);
  v25 = *a6;
  v26 = a6[1];
  v27 = a6[2];
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v25, v26, v27, 0.0);
  v28 = *a7;
  v29 = a7[1];
  v30 = a7[2];
  v31 = a7[3];
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v28, v29, v30, v31);
  v32 = *a8;
  v33 = a8[1];
  v34 = a8[2];
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v32, v33, v34, 0.0);
  (*(void (**)(LiHeLightProgramPointSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, a10, 0.0, 0.0, 0.0);
  LiHeLightPointSurface::setScreenToLocal((uint64_t)a1, a11);
  return a1;
}

{
  return LiHeLightPointSurface::LiHeLightPointSurface(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1B2DB77D8(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightPointSurface::setScreenToLocal(uint64_t a1, double *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v4 = *a2;
  v5 = a2[4];
  v6 = a2[8];
  v7 = a2[12];
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v4, v5, v6, v7);
  v9 = a2[1];
  v10 = a2[5];
  v11 = a2[9];
  v12 = a2[13];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 9, v9, v10, v11, v12);
  v14 = v13 + v8;
  v15 = a2[2];
  v16 = a2[6];
  v17 = a2[10];
  v18 = a2[14];
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 10, v15, v16, v17, v18);
  v20 = a2[3];
  v21 = a2[7];
  v22 = a2[11];
  v23 = a2[15];
  return v14
       + v19
       + (*(unsigned int (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 11, v20, v21, v22, v23);
}

void LiHeLightPointSurface::~LiHeLightPointSurface(HGNode *this)
{
  void *v1;

  LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightPointSurface::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3)
    return 27;
  else
    return a2;
}

uint64_t LiAsyncBitmapLoader::LiAsyncBitmapLoader(uint64_t a1, _DWORD *a2, PCURL *a3, int a4, CGColorSpace **a5, char a6)
{
  CGColorSpace *v10;

  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = a2[3];
  PCURL::PCURL((PCURL *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 24) = a4;
  v10 = *a5;
  *(_QWORD *)(a1 + 32) = *a5;
  if (v10)
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  *(_BYTE *)(a1 + 40) = a6;
  return a1;
}

void sub_1B2DB79B0(_Unwind_Exception *a1)
{
  PCURL *v1;

  PCURL::~PCURL(v1);
  _Unwind_Resume(a1);
}

LoadLockCache *LiAsyncBitmapLoader::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  LoadLockCache *result;
  PCMutex *v5;
  OZFactory *var1;
  unint64_t *v7;
  unint64_t v8;
  const __CFURL *v9;
  CGColorSpace *CGColorSpace;
  uint64_t v11;
  unsigned int v12;
  int hasGray;
  int hasAlpha;
  int v15;
  int v16;
  _BOOL4 isFloat;
  CGColorSpace *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  BOOL v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *var9;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const PCString *v32;
  int v33;
  int BitsPerChannel;
  CGColorSpace *v35;
  int v36;
  __int128 v37;
  OZChannelBase v38;

  result = (LoadLockCache *)LiCachingDelegateGetBitmap((const PCHash128 *)a1, a2);
  if (!*a2)
  {
    v5 = (PCMutex *)LoadLockCache::instance(result);
    LiLockCache<PCHash128,PCMutex>::getLock(v5, (const PCHash128 *)a1, (uint64_t)&v38.var4);
    LiCachingDelegateGetBitmap((const PCHash128 *)a1, &v38);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v38);
    var1 = v38.var1;
    if (v38.var1)
    {
      v7 = (unint64_t *)((char *)v38.var1 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(OZFactory *))(*(_QWORD *)var1 + 16))(var1);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var1);
      }
    }
    if (*a2)
      return (LoadLockCache *)LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&v38.var4);
    PCTimer::PCTimer((PCTimer *)&v38);
    PCTimer::start((PCTimer *)&v38);
    v9 = *(const __CFURL **)(a1 + 16);
    CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(a1 + 32));
    v36 = *(unsigned __int8 *)(a1 + 40);
    v11 = *(unsigned int *)(a1 + 24);
    PCLoadBitmap(v9, (uint64_t *)&v37);
    v35 = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)v37);
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v37 + 64) + 48))(*(_QWORD *)(v37 + 64));
    hasGray = PCPixelFormat::hasGray(v11);
    hasAlpha = PCPixelFormat::hasAlpha(v11);
    v15 = PCPixelFormat::hasGray(v12);
    v16 = PCPixelFormat::hasAlpha(v12);
    isFloat = PCPixelFormat::isFloat(v12);
    BitsPerChannel = PCPixelFormat::getBitsPerChannel(v12);
    v33 = isFloat;
    if (CGColorSpace)
      v19 = !PCColorSpaceHandle::isSameColorSpace(CGColorSpace, v35, v18);
    else
      v19 = 0;
    if (((hasGray | v19) & 1) == 0 && ((v15 ^ 1) & 1) == 0)
      v11 = PCPixelFormat::setGray(v11);
    if (((hasAlpha ^ 1 | v16) & 1) == 0)
      v11 = PCPixelFormat::removeAlpha(v11);
    v20 = PCPixelFormat::isFloat(v12);
    v21 = PCPixelFormat::isFloat(v11);
    if (v20)
    {
      if (!v21)
        goto LABEL_27;
    }
    else if (v21)
    {
      if (v19)
        goto LABEL_27;
      goto LABEL_26;
    }
    v22 = PCPixelFormat::getBitsPerChannel(v12);
    v23 = v22 >= PCPixelFormat::getBitsPerChannel(v11) || v19;
    if ((v23 & 1) != 0)
      goto LABEL_27;
LABEL_26:
    v11 = PCPixelFormat::setDepth(v11, BitsPerChannel, v33);
LABEL_27:
    if ((_DWORD)v11 == v12)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v37 + 48))(v37) & 1) == 0)
        PCBitmap::premultiply((PCBitmap *)v37);
    }
    else
    {
      if (CGColorSpace)
        getColorSpaceForConversion(CGColorSpace, v11, (CGColorSpace **)&v38.var10);
      else
        getColorSpaceForConversion(v35, v11, (CGColorSpace **)&v38.var10);
      v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v37 + 16))(v37);
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v37 + 24))(v37);
      PCCreateBitmap(v24, v25, v11, (PCColorSpaceHandle *)&v38.var10, 1, (uint64_t)&v38.var8);
      PCImage::setIsPremultiplied(v38.var8, 1);
      PCBitmap::copyWithColorSpaceConversion((PCBitmap *)v38.var8, (PCBitmap *)v37);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v37, (uint64_t *)&v38.var8);
      var9 = (std::__shared_weak_count *)v38.var9;
      if (v38.var9)
      {
        v27 = (unint64_t *)((char *)v38.var9 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))var9->__on_zero_shared)(var9);
          std::__shared_weak_count::__release_weak(var9);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v38.var10);
    }
    if (v36)
      PCBitmap::flip((PCBitmap *)v37);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a2, &v37);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    PCTimer::stop((PCTimer *)&v38);
    PCTimer::getSeconds((PCTimer *)&v38);
    LiCachingDelegateAddBitmap((uint64_t)a2, a1);
    OZChannelBase::setRangeName(&v38, v32);
    return (LoadLockCache *)LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&v38.var4);
  }
  return result;
}

void sub_1B2DB7D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, OZChannelBase *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  const PCString *v20;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  OZChannelBase::setRangeName((OZChannelBase *)&a14, v20);
  LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&a18);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void LiLoadBitmapAsync(PCURL *a1@<X1>, __int128 *a2@<X0>, int a3@<W2>, CGColorSpace **a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  CGColorSpace *v10;

  v7 = *a2;
  LiAsyncBitmapLoader::LiAsyncBitmapLoader((uint64_t)&v8, &v7, a1, a3, a4, a5);
  std::async[abi:ne180100]<LiAsyncBitmapLoader>(3, &v8, a6);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  PCURL::~PCURL((PCURL *)&v9);
}

void sub_1B2DB7E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 32));
  PCURL::~PCURL((PCURL *)(v1 + 16));
  _Unwind_Resume(a1);
}

void getColorSpaceForConversion(CGColorSpace *a1@<X0>, unsigned int a2@<W1>, CGColorSpace **a3@<X8>)
{
  _BYTE v6[224];
  _BYTE v7[224];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (CGColorSpaceGetModel(a1) != kCGColorSpaceModelRGB)
  {
    if (CGColorSpaceGetModel(a1))
    {
      *a3 = 0;
      return;
    }
    if (PCPixelFormat::hasRGB(a2))
    {
      PCICCProfile::PCICCProfile((PCICCProfile *)v7, a1);
      PCMakeDisplayRGBProfileFromGrayProfile((const PCICCProfile *)v7, (PCICCProfile *)v6);
      PCMakeColorSpaceFromProfile((const PCICCProfile *)v6, a3);
      goto LABEL_8;
    }
LABEL_10:
    PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)a3, a1);
    return;
  }
  if (PCPixelFormat::hasRGB(a2))
    goto LABEL_10;
  PCICCProfile::PCICCProfile((PCICCProfile *)v7, a1);
  PCMakeDisplayGrayProfileFromRGBProfile((const PCICCProfile *)v7, (PCICCProfile *)v6);
  PCMakeColorSpaceFromProfile((const PCICCProfile *)v6, a3);
LABEL_8:
  PCICCProfile::~PCICCProfile((PCICCProfile *)v6);
  PCICCProfile::~PCICCProfile((PCICCProfile *)v7);
}

void sub_1B2DB7F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  CGColorSpace **v38;
  CGColorSpace *v39;

  if (a2)
  {
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a10);
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a38);
    __cxa_begin_catch(exception_object);
    if (PCEstimateGamma(v39) == 1.0)
      PCColorSpaceCache::rec709Linear(v38);
    else
      PCColorSpaceCache::sRGB(v38);
    __cxa_end_catch();
    JUMPOUT(0x1B2DB7F24);
  }
  _Unwind_Resume(exception_object);
}

void std::async[abi:ne180100]<LiAsyncBitmapLoader>(char a1@<W0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  int v7;
  CGColorSpace *v8;
  char v9;
  _BYTE v10[16];
  _BYTE v11[16];
  CGColorSpace *v12[2];

  if ((a1 & 1) != 0)
  {
    v5 = *a2;
    PCURL::PCURL((PCURL *)&v6, (const PCURL *)(a2 + 1));
    v7 = *((_DWORD *)a2 + 6);
    v8 = (CGColorSpace *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    v9 = *((_BYTE *)a2 + 40);
    std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100]((uint64_t)v10, (uint64_t)&v5);
    std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>((uint64_t)v10, a3);
    PCCFRef<CGColorSpace *>::~PCCFRef(v12);
    PCURL::~PCURL((PCURL *)v11);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  }
  else
  {
    if ((a1 & 2) == 0)
    {
      *a3 = 0;
      return;
    }
    v5 = *a2;
    PCURL::PCURL((PCURL *)&v6, (const PCURL *)(a2 + 1));
    v7 = *((_DWORD *)a2 + 6);
    v8 = (CGColorSpace *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    v9 = *((_BYTE *)a2 + 40);
    std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100]((uint64_t)v10, (uint64_t)&v5);
    std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>((uint64_t)v10, a3);
    PCCFRef<CGColorSpace *>::~PCCFRef(v12);
    PCURL::~PCURL((PCURL *)v11);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  }
  PCURL::~PCURL((PCURL *)&v6);
}

void sub_1B2DB822C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::thread v9;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)v4 = &off_1E657C168;
  *(_OWORD *)(v4 + 124) = 0u;
  std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100](v4 + 160, a1);
  v8 = xmmword_1B35586F0;
  v7 = v4;
  std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>*,void>(&v9.__t_, &v8, &v7);
  std::thread::detach(&v9);
  std::thread::~thread(&v9);
  *a2 = v4;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v4);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_1B2DB837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::thread a14)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v17;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  _Unwind_Resume(exception_object);
}

void std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)v4 = &off_1E657C1B0;
  *(_OWORD *)(v4 + 124) = 0u;
  std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100](v4 + 160, a1);
  *(_DWORD *)(v4 + 136) |= 8u;
  *a2 = v4;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v4);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_1B2DB8500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::~__async_assoc_state(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E657C168;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  *(_QWORD *)a1 = &off_1E657C168;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::__on_zero_shared(uint64_t a1)
{
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)a1);
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::__execute(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  LiAsyncBitmapLoader::operator()(a1 + 160, &v5);
  std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(a1, (uint64_t)&v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B2DB8710(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1B2DB8700);
}

void sub_1B2DB8750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_leaf<0ul,LiAsyncBitmapLoader,false>::__tuple_leaf[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  PCURL::PCURL((PCURL *)(a1 + 16), (const PCURL *)(a2 + 16));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

void std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>*,void>(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9[2];

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  v9[0] = (uint64_t *)v7;
  v9[1] = 0;
  *(_QWORD *)v7 = v6;
  *(_OWORD *)(v7 + 8) = *a2;
  *(_QWORD *)(v7 + 24) = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>*>>, (void *)v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v9[0] = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100](v9, 0);
  }
}

void sub_1B2DB88A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  const void **v7;

  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (void (*)(_QWORD *))v7[1];
  v4 = (uint64_t)v7[2];
  v5 = (char *)v7[3] + (v4 >> 1);
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *))(*v5 + v3);
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100]((uint64_t **)&v7, 0);
  return 0;
}

void sub_1B2DB8958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void std::__deferred_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::~__deferred_assoc_state(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E657C1B0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  *(_QWORD *)a1 = &off_1E657C1B0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 192));
  PCURL::~PCURL((PCURL *)(a1 + 176));
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1B5E29170);
}

void std::__deferred_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBitmapLoader>>::__execute(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  LiAsyncBitmapLoader::operator()(a1 + 160, &v5);
  std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(a1, (uint64_t)&v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B2DB8AC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1B2DB8AB0);
}

void sub_1B2DB8B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

LiHeLightProgramPointSurfaceDiffuse *LiHeLightPointSurfaceDiffuse::LiHeLightPointSurfaceDiffuse(LiHeLightProgramPointSurfaceDiffuse *a1, HGNode **a2, double *a3, float *a4, double *a5, double *a6, double *a7, float a8)
{
  HGNode *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  LiHeLightProgramPointSurfaceDiffuse::LiHeLightProgramPointSurfaceDiffuse(a1);
  *(_QWORD *)v16 = off_1E657C1F8;
  HGNode::SetInput(v16, 0, *a2);
  v17 = *a3;
  v18 = a3[1];
  v19 = a3[2];
  (*(void (**)(LiHeLightProgramPointSurfaceDiffuse *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v17, v18, v19, 0.0);
  (*(void (**)(LiHeLightProgramPointSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, *a4, a4[1], a4[2], a4[3]);
  v20 = *a5;
  v21 = a5[1];
  v22 = a5[2];
  (*(void (**)(LiHeLightProgramPointSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v20, v21, v22, 0.0);
  v23 = *a6;
  v24 = a6[1];
  v25 = a6[2];
  (*(void (**)(LiHeLightProgramPointSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v23, v24, v25, 0.0);
  (*(void (**)(LiHeLightProgramPointSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, a8, 0.0, 0.0, 0.0);
  LiHeLightPointSurfaceDiffuse::setScreenToLocal((uint64_t)a1, a7);
  return a1;
}

void sub_1B2DB8C64(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightPointSurfaceDiffuse::setScreenToLocal(uint64_t a1, double *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v4 = *a2;
  v5 = a2[4];
  v6 = a2[8];
  v7 = a2[12];
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v4, v5, v6, v7);
  v9 = a2[1];
  v10 = a2[5];
  v11 = a2[9];
  v12 = a2[13];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v9, v10, v11, v12);
  v14 = v13 + v8;
  v15 = a2[2];
  v16 = a2[6];
  v17 = a2[10];
  v18 = a2[14];
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, v15, v16, v17, v18);
  v20 = a2[3];
  v21 = a2[7];
  v22 = a2[11];
  v23 = a2[15];
  return v14
       + v19
       + (*(unsigned int (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v20, v21, v22, v23);
}

void LiHeLightPointSurfaceDiffuse::~LiHeLightPointSurfaceDiffuse(HGNode *this)
{
  void *v1;

  LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightPointSurfaceDiffuse::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3)
    return 27;
  else
    return a2;
}

LiHeLightProgramSpotSurface *LiHeLightSpotSurface::LiHeLightSpotSurface(LiHeLightProgramSpotSurface *a1, HGNode **a2, double *a3, double *a4, float *a5, float *a6, double *a7, double *a8, float a9, float a10, float a11, float a12, float a13, double *a14, double *a15)
{
  HGNode *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;

  LiHeLightProgramSpotSurface::LiHeLightProgramSpotSurface(a1);
  *(_QWORD *)v28 = off_1E657C460;
  HGNode::SetInput(v28, 0, *a2);
  v29 = *a3;
  v30 = a3[1];
  v31 = a3[2];
  (*(void (**)(LiHeLightProgramSpotSurface *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v29, v30, v31, 0.0);
  v32 = *a4;
  v33 = a4[1];
  v34 = a4[2];
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 15, v32, v33, v34, 0.0);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, *a5, a5[1], a5[2], 0.0);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, *a6, a6[1], a6[2], a6[3]);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, a9, 0.0, 0.0, 0.0);
  v35 = *a7;
  v36 = a7[1];
  v37 = a7[2];
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v35, v36, v37, 0.0);
  v38 = *a8;
  v39 = a8[1];
  v40 = a8[2];
  v41 = a8[3];
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v38, v39, v40, v41);
  v42 = *a14;
  v43 = a14[1];
  v44 = a14[2];
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v42, v43, v44, 0.0);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, a10, 0.0, 0.0, 0.0);
  v45 = cosf(a11);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 12, v45, 0.0, 0.0, 0.0);
  v46 = cosf(a12);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 13, v46, 0.0, 0.0, 0.0);
  (*(void (**)(LiHeLightProgramSpotSurface *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 14, a13, 0.0, 0.0, 0.0);
  LiHeLightPointSurface::setScreenToLocal((uint64_t)a1, a15);
  return a1;
}

{
  return LiHeLightSpotSurface::LiHeLightSpotSurface(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_1B2DB9030(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(v1);
  _Unwind_Resume(a1);
}

void LiHeLightSpotSurface::~LiHeLightSpotSurface(HGNode *this)
{
  void *v1;

  LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightSpotSurface::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3)
    return 27;
  else
    return a2;
}

LiHeLightProgramSpotSurfaceDiffuse *LiHeLightSpotSurfaceDiffuse::LiHeLightSpotSurfaceDiffuse(LiHeLightProgramSpotSurfaceDiffuse *a1, HGNode **a2, double *a3, double *a4, float *a5, double *a6, double *a7, double *a8, float a9, float a10, float a11, float a12, double *a13)
{
  HGNode *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;

  LiHeLightProgramSpotSurfaceDiffuse::LiHeLightProgramSpotSurfaceDiffuse(a1);
  *(_QWORD *)v25 = off_1E657C6C8;
  HGNode::SetInput(v25, 0, *a2);
  v26 = *a3;
  v27 = a3[1];
  v28 = a3[2];
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v26, v27, v28, 0.0);
  v29 = *a4;
  v30 = a4[1];
  v31 = a4[2];
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 13, v29, v30, v31, 0.0);
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, *a5, a5[1], a5[2], 0.0);
  v32 = *a6;
  v33 = a6[1];
  v34 = a6[2];
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v32, v33, v34, 0.0);
  v35 = *a7;
  v36 = a7[1];
  v37 = a7[2];
  v38 = a7[3];
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v35, v36, v37, v38);
  v39 = *a8;
  v40 = a8[1];
  v41 = a8[2];
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v39, v40, v41, 0.0);
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, a9, 0.0, 0.0, 0.0);
  v42 = cosf(a10);
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 10, v42, 0.0, 0.0, 0.0);
  v43 = cosf(a11);
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 11, v43, 0.0, 0.0, 0.0);
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 12, a12, 0.0, 0.0, 0.0);
  LiHeLightSpotSurfaceDiffuse::setScreenToLocal((uint64_t)a1, a13);
  return a1;
}

{
  return LiHeLightSpotSurfaceDiffuse::LiHeLightSpotSurfaceDiffuse(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_1B2DB92AC(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeLightSpotSurfaceDiffuse::setScreenToLocal(uint64_t a1, double *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v4 = *a2;
  v5 = a2[4];
  v6 = a2[8];
  v7 = a2[12];
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v4, v5, v6, v7);
  v9 = a2[1];
  v10 = a2[5];
  v11 = a2[9];
  v12 = a2[13];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, v9, v10, v11, v12);
  v14 = v13 + v8;
  v15 = a2[2];
  v16 = a2[6];
  v17 = a2[10];
  v18 = a2[14];
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v15, v16, v17, v18);
  v20 = a2[3];
  v21 = a2[7];
  v22 = a2[11];
  v23 = a2[15];
  return v14
       + v19
       + (*(unsigned int (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 9, v20, v21, v22, v23);
}

void LiHeLightSpotSurfaceDiffuse::~LiHeLightSpotSurfaceDiffuse(HGNode *this)
{
  void *v1;

  LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightSpotSurfaceDiffuse::IntermediateFormat(uint64_t a1, unsigned int a2)
{
  if (a2 - 27 >= 3)
    return 27;
  else
    return a2;
}

LiHeProgramPointLightStencil *LiHePointLightStencil::LiHePointLightStencil(LiHeProgramPointLightStencil *a1, HGNode **a2, double *a3, double *a4, uint64_t a5)
{
  HGNode *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  LiHeProgramPointLightStencil::LiHeProgramPointLightStencil(a1);
  *(_QWORD *)v10 = off_1E657C930;
  HGNode::SetInput(v10, 0, *a2);
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[2];
  (*(void (**)(LiHeProgramPointLightStencil *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v11, v12, v13, 0.0);
  v14 = *a4;
  v15 = a4[1];
  v16 = a4[2];
  (*(void (**)(LiHeProgramPointLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v14, v15, v16, 0.0);
  LiLight::copyPCMatrixToVec4(a5, (uint64_t)a1, 2);
  return a1;
}

void sub_1B2DB94C4(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHePointLightStencil::GetDOD(LiHePointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHePointLightStencil::GetROI(LiHePointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHePointLightStencil::~LiHePointLightStencil(HGNode *this)
{
  void *v1;

  LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(this);
  HGObject::operator delete(v1);
}

LiHeShadowProgramPCSS *LiHeShadowPCSS::LiHeShadowPCSS(LiHeShadowProgramPCSS *a1, unsigned int a2, _OWORD *a3, _OWORD *a4, double a5)
{
  LiHeShadowProgramPCSS *v10;
  float v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t i;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float v24;
  float v25;
  float v26;
  double v28[4];
  __int128 v29;
  __int128 v30;
  _OWORD v31[8];
  _OWORD v32[8];

  LiHeShadowProgramPCSS::LiHeShadowProgramPCSS(a1);
  *(_QWORD *)v10 = off_1E657CB98;
  v11 = a5;
  LiHeShadowProgramPCSS::SetParameter(v10, 8, v11, 0.0, 0.0, 0.0, v12);
  (*(void (**)(LiHeShadowProgramPCSS *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 10, (float)a2, 0.0, 0.0, 0.0);
  v13 = 0;
  v14 = a4[5];
  v32[4] = a4[4];
  v32[5] = v14;
  v15 = a4[7];
  v32[6] = a4[6];
  v32[7] = v15;
  v16 = a4[1];
  v32[0] = *a4;
  v32[1] = v16;
  v17 = a4[3];
  v32[2] = a4[2];
  v32[3] = v17;
  v18 = v32;
  do
  {
    for (i = 0; i != 2; ++i)
      v18[i] = vmulq_n_f64((float64x2_t)v18[i], 1.0 / *((double *)&v15 + 1));
    ++v13;
    v18 += 2;
  }
  while (v13 != 4);
  LiLight::copyPCMatrixToVec4((uint64_t)v32, (uint64_t)a1, 0);
  LiLight::copyPCMatrixToVec4((uint64_t)a3, (uint64_t)a1, 4);
  v20 = a3[5];
  v31[4] = a3[4];
  v31[5] = v20;
  v21 = a3[7];
  v31[6] = a3[6];
  v31[7] = v21;
  v22 = a3[1];
  v31[0] = *a3;
  v31[1] = v22;
  v23 = a3[3];
  v31[2] = a3[2];
  v31[3] = v23;
  if (PCMatrix44Tmpl<double>::invert((double *)v31, (double *)v31, 0.0))
  {
    v29 = 0u;
    v30 = 0u;
    memset(v28, 0, 24);
    v28[3] = 1.0;
    PCMatrix44Tmpl<double>::transform<double>((double *)v31, v28, (double *)&v29);
    *(double *)&v29 = *(double *)&v29 * (1.0 / *((double *)&v30 + 1));
    *((double *)&v29 + 1) = 1.0 / *((double *)&v30 + 1) * *((double *)&v29 + 1);
    *(double *)&v30 = 1.0 / *((double *)&v30 + 1) * *(double *)&v30;
    *((double *)&v30 + 1) = *((double *)&v30 + 1) * (1.0 / *((double *)&v30 + 1));
    v24 = *(double *)&v29;
    v25 = *((double *)&v29 + 1);
    v26 = *(double *)&v30;
    (*(void (**)(LiHeShadowProgramPCSS *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 9, v24, v25, v26, 1.0);
  }
  return a1;
}

void sub_1B2DB96EC(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeShadowPCSS::GetDOD(LiHeShadowPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0x8000000080000000;
}

uint64_t LiHeShadowPCSS::GetROI(LiHeShadowPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

uint64_t LiHeShadowPCSS::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

void LiHeShadowPCSS::~LiHeShadowPCSS(HGNode *this)
{
  void *v1;

  LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(this);
  HGObject::operator delete(v1);
}

void LiImageReflection::LiImageReflection(LiImageReflection *this)
{
  *((_QWORD *)this + 9) = &off_1E65EB048;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E657CF10);
  *(_QWORD *)this = &off_1E657CE08;
  *((_QWORD *)this + 9) = &unk_1E657CEF0;
  *((_QWORD *)this + 5) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 6);
  *((_QWORD *)this + 7) = 0x3FE0000000000000;
  *((_DWORD *)this + 16) = 0;
}

void sub_1B2DB97DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E657CF10);
  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiImageReflection::clone(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t *v4;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v6;
  PCSharedCount v7;
  PCSharedCount v8;
  PCSharedCount v9;

  v4 = (uint64_t *)operator new();
  LiImageReflection::LiImageReflection((LiImageReflection *)v4);
  v7.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v8, (PCShared_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((PCSharedCount *)v7.var0 + 2) = this[2];
  PCSharedCount::PCSharedCount(&v9, this + 3);
  PCSharedCount::operator=(v4 + 3, (uint64_t *)&v9);
  PCSharedCount::~PCSharedCount(&v9);
  var0 = v7.var0;
  if (!v7.var0)
    throw_PCNullPointerException(1);
  *((PCSharedCount *)v7.var0 + 5) = this[5];
  PCSharedCount::PCSharedCount(&v9, this + 6);
  PCSharedCount::operator=((uint64_t *)var0 + 6, (uint64_t *)&v9);
  PCSharedCount::~PCSharedCount(&v9);
  v6 = v7.var0;
  if (!v7.var0)
    throw_PCNullPointerException(1);
  *((PCSharedCount *)v7.var0 + 7) = this[7];
  *((_DWORD *)v6 + 16) = this[8].var0;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v7);
  PCSharedCount::~PCSharedCount(&v8);
}

void sub_1B2DB993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

PCShared_base **LiImageReflection::setReflectionInput(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 5, (PCShared_base *)a2);
}

uint64_t LiImageReflection::setReflectivity(uint64_t this, double a2)
{
  *(double *)(this + 56) = a2;
  return this;
}

uint64_t LiImageReflection::setBlendMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

HGNode *LiImageReflection::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, LiHeLimit **a3@<X8>)
{
  int v6;
  unsigned int v7;
  HGHWBlendFlipped *v8;
  float v9;
  LiHeLimit *v10;
  LiHeReflectionShader *v11;
  float v12;
  char *v13;
  HGNode *result;
  HGNode *v15;
  HGNode *v16;

  LiAgent::passROI(a2);
  LiAgent::getHelium(a2, this[5], &v16);
  LiAgent::getHelium(a2, this[2], &v15);
  if (v16 && v15)
  {
    v6 = *((_DWORD *)this + 16);
    if (v6)
    {
      v7 = LiHelium::convertMotionBlendMode(v6);
      v8 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
      HGHWBlendFlipped::HGHWBlendFlipped(v8);
      (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 0, (float)v7, 0.0, 0.0, 0.0);
      v9 = *((double *)this + 7);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 1, v9, 0.0, 0.0, 0.0);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 2, 0.0, 0.0, 0.0, 0.0);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 5, *(float *)(*((_QWORD *)a2 + 6) + 192), 0.0, 0.0, 0.0);
      (*(void (**)(HGHWBlendFlipped *, _QWORD, HGNode *))(*(_QWORD *)v8 + 120))(v8, 0, v15);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, HGNode *))(*(_QWORD *)v8 + 120))(v8, 1, v16);
      v10 = (LiHeLimit *)HGObject::operator new(0x1A0uLL);
      LiHeLimit::LiHeLimit(v10);
      (*(void (**)(LiHeLimit *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, v15);
      (*(void (**)(LiHeLimit *, uint64_t, HGHWBlendFlipped *))(*(_QWORD *)v10 + 120))(v10, 1, v8);
      *a3 = v10;
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v8 + 24))(v8);
    }
    else
    {
      v11 = (LiHeReflectionShader *)HGObject::operator new(0x1A0uLL);
      *((_OWORD *)v11 + 24) = 0u;
      *((_OWORD *)v11 + 25) = 0u;
      *((_OWORD *)v11 + 22) = 0u;
      *((_OWORD *)v11 + 23) = 0u;
      *((_OWORD *)v11 + 20) = 0u;
      *((_OWORD *)v11 + 21) = 0u;
      *((_OWORD *)v11 + 18) = 0u;
      *((_OWORD *)v11 + 19) = 0u;
      *((_OWORD *)v11 + 16) = 0u;
      *((_OWORD *)v11 + 17) = 0u;
      *((_OWORD *)v11 + 14) = 0u;
      *((_OWORD *)v11 + 15) = 0u;
      *((_OWORD *)v11 + 12) = 0u;
      *((_OWORD *)v11 + 13) = 0u;
      *((_OWORD *)v11 + 10) = 0u;
      *((_OWORD *)v11 + 11) = 0u;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      LiHeReflectionShader::LiHeReflectionShader(v11);
      *(_QWORD *)v11 = &unk_1E657AB20;
      v12 = *((double *)this + 7);
      LiHeReflectionShader::SetParameter(v11, 0, 1.0, v12, 0.0, 0.0, v13);
      (*(void (**)(LiHeReflectionShader *, _QWORD, HGNode *))(*(_QWORD *)v11 + 120))(v11, 0, v15);
      (*(void (**)(LiHeReflectionShader *, uint64_t, HGNode *))(*(_QWORD *)v11 + 120))(v11, 1, v16);
      *a3 = v11;
    }
    if (v15)
      (*(void (**)(HGNode *))(*(_QWORD *)v15 + 24))(v15);
  }
  else
  {
    *a3 = (LiHeLimit *)v15;
  }
  result = v16;
  if (v16)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v16 + 24))(v16);
  return result;
}

void sub_1B2DB9C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

uint64_t LiImageReflection::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = LiImageFilter::estimateRenderMemory(a1);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v4 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
  return v4;
}

void LiImageReflection::~LiImageReflection(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E657CE08;
  this[9].var0 = (PC_Sp_counted_base *)&unk_1E657CEF0;
  PCSharedCount::~PCSharedCount(this + 6);
  this->var0 = (PC_Sp_counted_base *)off_1E657CF60;
  this[9].var0 = (PC_Sp_counted_base *)off_1E657D048;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E657CF18);
  this[9].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[11].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[10].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E657CE08;
  this[9].var0 = (PC_Sp_counted_base *)&unk_1E657CEF0;
  PCSharedCount::~PCSharedCount(this + 6);
  this->var0 = (PC_Sp_counted_base *)off_1E657CF60;
  this[9].var0 = (PC_Sp_counted_base *)off_1E657D048;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E657CF18);
  this[9].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[11].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[10].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiImageReflection::~LiImageReflection(LiImageReflection *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E657CE08;
  v1[9].var0 = (PC_Sp_counted_base *)&unk_1E657CEF0;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->var0 = (PC_Sp_counted_base *)off_1E657CF60;
  v1[9].var0 = (PC_Sp_counted_base *)off_1E657D048;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E657CF18);
  v1[9].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[11].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[10].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E657CE08;
  v1[9].var0 = (PC_Sp_counted_base *)&unk_1E657CEF0;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->var0 = (PC_Sp_counted_base *)off_1E657CF60;
  v1[9].var0 = (PC_Sp_counted_base *)off_1E657D048;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E657CF18);
  v1[9].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[11].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[10].var0);
  JUMPOUT(0x1B5E29170);
}

void **LiSoftShadow::LiSoftShadow(void **a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double *a8, double a9, unsigned __int8 a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  HGCrop *v23;
  double v24;
  uint64_t v25;
  uint64_t *v26;
  double v27;
  uint64_t i;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  HGCrop *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  double v52;
  HGRect v53;

  *a1 = 0;
  a1[1] = 0;
  v18 = HGRectMake4i((int)*a8, (int)a8[1], (int)a8[2] + (int)*a8, (int)a8[3] + (int)a8[1]);
  v20 = v19;
  if (a9 != 0.0 && (a3 & 1) == 0)
  {
    v21 = HGRectMake4i((int)-(a9 * 0.5), (int)-(a9 * 0.5), (int)(a9 * 0.5), (int)(a9 * 0.5));
    v18 = HGRectGrow(v18, v20, v21);
    v20 = v22;
  }
  v39 = 0;
  HGRect::Init(&v53, v18 - 10, HIDWORD(v18) - 10, v20 + 10, HIDWORD(v20) + 10);
  v23 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v23);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v23 + 96))(v23, 0, (float)v53.var0, (float)v53.var1, (float)v53.var2, (float)v53.var3);
  (*(void (**)(HGCrop *, _QWORD, _QWORD))(*(_QWORD *)v23 + 120))(v23, 0, *a2);
  v52 = 1.0;
  v49 = 0x3FF0000000000000;
  v46 = 0x3FF0000000000000;
  v43 = 0x3FF0000000000000;
  v44 = 0u;
  v45 = 0u;
  v47 = 0u;
  v48 = 0u;
  v50 = 0u;
  v51 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v43, a7, 0.0);
  v24 = sqrt(*((double *)&v50 + 1) * *((double *)&v50 + 1)+ *(double *)&v51 * *(double *)&v51+ *((double *)&v51 + 1) * *((double *)&v51 + 1)+ v52 * v52);
  if (v24 > 0.001)
  {
    v25 = 0;
    v26 = &v43;
    v27 = 1.0 / v24;
    do
    {
      for (i = 0; i != 4; i += 2)
        *(float64x2_t *)&v26[i] = vmulq_n_f64(*(float64x2_t *)&v26[i], v27);
      ++v25;
      v26 += 4;
    }
    while (v25 != 4);
  }
  v41 = v23;
  (*(void (**)(HGCrop *))(*(_QWORD *)v23 + 16))(v23);
  __asm { FMOV            V0.2S, #1.0 }
  v40 = _D0;
  LiHelium::createTransformNode((uint64_t)&v43, (uint64_t *)&v41, a10, (float *)&v40, &v42);
  if (v41)
    (*(void (**)(HGCrop *))(*(_QWORD *)v41 + 24))(v41);
  if (v42)
  {
    v39 = v42;
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
  }
  (*(void (**)(HGCrop *))(*(_QWORD *)v23 + 24))(v23);
  v34 = HGObject::operator new(0x1A0uLL);
  LiHeDepthCompare::LiHeDepthCompare(v34, &v39, a4, a6, a5);
  v35 = *a1;
  if (*a1 != v34)
  {
    if (v35)
      (*(void (**)(void *))(*(_QWORD *)v35 + 24))(v35);
    *a1 = v34;
    if (v34)
      (*(void (**)(void *))(*(_QWORD *)v34 + 16))(v34);
  }
  if (a9 > 0.0 && (a3 & 1) == 0)
  {
    v36 = HGObject::operator new(0x1A0uLL);
    LiHeShadowPCSS::LiHeShadowPCSS(v36, a4, a6, a5, a9);
    v37 = a1[1];
    if (v37 == v36)
    {
      if (!v36)
        goto LABEL_28;
      goto LABEL_27;
    }
    if (v37)
      (*(void (**)(void *))(*(_QWORD *)v37 + 24))(v37);
    a1[1] = v36;
    if (v36)
    {
      (*(void (**)(void *))(*(_QWORD *)v36 + 16))(v36);
LABEL_27:
      (*(void (**)(void *))(*(_QWORD *)v36 + 24))(v36);
    }
  }
LABEL_28:
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 24))(v34);
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  return a1;
}

{
  return LiSoftShadow::LiSoftShadow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B2DBA318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  v13 = v9[1];
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (*v9)
    (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9);
  _Unwind_Resume(a1);
}

uint64_t LiHeModulatedBlurBuffered::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t Output;

  Output = HGModulatedBlur::GetOutput(this, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Output + 136))(Output, 0xFFFFFFFFLL, 2);
  return Output;
}

void LiHeModulatedBlurBuffered::~LiHeModulatedBlurBuffered(HGNode *this)
{
  void *v1;

  HGModulatedBlur::~HGModulatedBlur(this);
  HGObject::operator delete(v1);
}

LiHeShadowProgramSoft *LiHeShadowSoft::LiHeShadowSoft(LiHeShadowProgramSoft *a1, HGNode **a2, _QWORD *a3, float *a4, unsigned int a5)
{
  uint64_t v10;

  LiHeShadowProgramSoft::LiHeShadowProgramSoft(a1);
  *(_QWORD *)v10 = off_1E657D448;
  *(_BYTE *)(v10 + 416) = a5;
  *(_QWORD *)(v10 + 424) = 0;
  HGNode::SetInput((HGNode *)v10, 0, *a2);
  (*(void (**)(LiHeShadowProgramSoft *, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, 1, *a3);
  (*(void (**)(LiHeShadowProgramSoft *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, *a4, a4[1], a4[2], a4[3]);
  (*(void (**)(LiHeShadowProgramSoft *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, (float)a5, 0.0, 0.0, 0.0);
  return a1;
}

void sub_1B2DBA5A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 424);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  LiHeShadowProgramSoft::~LiHeShadowProgramSoft((HGNode *)v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeShadowSoft::GetDOD(LiHeShadowSoft *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeShadowSoft::GetROI(LiHeShadowSoft *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeShadowSoft::IntermediateFormat(uint64_t a1, int a2)
{
  if (a2 <= 27)
    return 27;
  else
    return a2;
}

HGNode *LiHeShadowSoft::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v6;
  LiHeLightInitPass *v7;
  LiHeLightInitPass *v8;
  _BYTE v10[16];

  Input = HGRenderer::GetInput(a2, this, 1u);
  DOD = HGRenderer::GetDOD(a2, Input);
  if (!HGRectIsNull(DOD, v6))
    return (HGNode *)LiHeShadowProgramSoft::GetOutput((LiHeShadowProgramSoft *)this, a2);
  if (!*((_BYTE *)this + 416))
    return HGRenderer::GetInput(a2, this, 0);
  v7 = (LiHeLightInitPass *)*((_QWORD *)this + 53);
  if (!v7)
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v10, 0.0, 0.0, 0.0, 0.0);
    v7 = (LiHeLightInitPass *)HGObject::operator new(0x1A0uLL);
    LiHeLightInitPass::LiHeLightInitPass(v7, (const PCWorkingColorVector *)v10);
    v8 = (LiHeLightInitPass *)*((_QWORD *)this + 53);
    if (v8 == v7)
    {
      if (v7)
      {
        (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v7 + 24))(v7);
        return (HGNode *)*((_QWORD *)this + 53);
      }
    }
    else
    {
      if (v8)
        (*(void (**)(LiHeLightInitPass *))(*(_QWORD *)v8 + 24))(v8);
      *((_QWORD *)this + 53) = v7;
    }
  }
  return (HGNode *)v7;
}

void sub_1B2DBA720(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void LiHeShadowSoft::~LiHeShadowSoft(HGNode *this)
{
  void *v1;

  LiHeShadowSoft::~LiHeShadowSoft(this);
  HGObject::operator delete(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E657D448;
  v2 = *((_QWORD *)this + 53);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  LiHeShadowProgramSoft::~LiHeShadowProgramSoft(this);
}

void LiContext::LiContext(LiContext *this)
{
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *(_QWORD *)this = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 26) = 0x3FF0000000000000;
  *((_QWORD *)this + 21) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 120) = _Q1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 47) = 0x3FF0000000000000;
  *((_QWORD *)this + 42) = 0x3FF0000000000000;
  *((_QWORD *)this + 37) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 248) = _Q1;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 55) = &unk_1E64FC250;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_BYTE *)this + 464) = 0;
  LiClipSet::LiClipSet((LiContext *)((char *)this + 472));
  *((_QWORD *)this + 65) = &unk_1E656AAC8;
  *((_DWORD *)this + 139) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 564) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_BYTE *)this + 552) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiContext *)((char *)this + 568));
  *((_DWORD *)this + 146) = 1065353216;
  *((_WORD *)this + 294) = 257;
  *((_BYTE *)this + 590) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 74);
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
}

void sub_1B2DBA8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1 + 440);
  _Unwind_Resume(a1);
}

void LiContext::~LiContext(LiContext *this)
{
  const PCString *v2;
  int v3;
  uint64_t v4;

  ProGL::ContextHandle::~ContextHandle((LiContext *)((char *)this + 600));
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 592), v2);
  *((_QWORD *)this + 65) = &unk_1E656AAC8;
  if (*((int *)this + 132) < 0)
    v3 = 1;
  else
    v3 = *((_DWORD *)this + 132);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 520, 0, v3);
  v4 = *((_QWORD *)this + 67);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *((_QWORD *)this + 67) = 0;
  *((_DWORD *)this + 132) = 0;
  LiClipSet::~LiClipSet((LiContext *)((char *)this + 472));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 440);
}

void LiContext::getHash(LiContext *this)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  PCArray_base *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int SolidSceneID;
  char v10;
  const LiLight *v11;
  uint64_t v12;
  char *v13;
  PCArray_base *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int8x8_t v18[521];

  v1 = MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v18[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v4 = PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v18);
  v5 = *(unsigned int *)(v1 + 452);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 752;
    do
    {
      if (v6 >= *(int *)(v1 + 452))
        PCArray_base::badIndex(v4);
      v8 = *(_QWORD *)(v1 + 456);
      SolidSceneID = LiLight::getSolidSceneID((LiLight *)(v8 + v7 - 752));
      PCHashWriteStream::writeValue(v18, SolidSceneID);
      PCHashWriteStream::writeValue(v18, *(_DWORD *)(v8 + v7 - 96));
      v10 = (*(_DWORD *)(v8 + v7 - 96) - 1) <= 2 && *(_BYTE *)(v8 + v7 - 31) != 0;
      PCHashWriteStream::writeValue(v18, v10);
      PCHashWriteStream::writeValue(v18, *(_BYTE *)(v8 + v7));
      PCHashWriteStream::writeValue(v18, *(double *)(v8 + v7 - 8) > 0.0);
      v12 = LiLightInfo::get((LiLightInfo *)(v8 + v7 - 752), v11);
      v13 = (char *)LiPerContext<BOOL,LiPerContextValue_Traits<BOOL>,LiOpenGLContextGetter>::get(v12 + 776);
      v4 = (PCArray_base *)PCHashWriteStream::writeValue(v18, *v13);
      ++v6;
      v7 += 944;
    }
    while (v5 != v6);
  }
  PCHashWriteStream::writeValue(v18, *(_DWORD *)(v1 + 484));
  PCHashWriteStream::writeValue(v18, *(_DWORD *)(v1 + 548) > 0);
  PCHashWriteStream::writeValue(v18, *(_DWORD *)(v1 + 544));
  v14 = (PCArray_base *)PCHashWriteStream::writeValue(v18, *(_BYTE *)(v1 + 560));
  v15 = *(unsigned int *)(v1 + 532);
  if ((int)v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      if (i >= *(int *)(v1 + 532))
        PCArray_base::badIndex(v14);
      v17 = *(_QWORD *)(*(_QWORD *)(v1 + 536) + 16 * i);
      if (!v17)
        throw_PCNullPointerException(1);
      v14 = (PCArray_base *)(*(uint64_t (**)(uint64_t, int8x8_t *))(*(_QWORD *)v17 + 16))(v17, v18);
    }
  }
  PCHashWriteStream::writeValue(v18, *(_BYTE *)(v1 + 564));
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v18)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v18);
}

void sub_1B2DBABC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t LiGLState::getCurrentContext(LiGLState *this)
{
  uint64_t EAGLContext;
  _QWORD v3[2];

  ProGL::getCurrentContext(v3);
  EAGLContext = ProGL::ContextHandle::getEAGLContext((ProGL::ContextHandle *)v3);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v3);
  return EAGLContext;
}

void sub_1B2DBAC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&a9);
  _Unwind_Resume(a1);
}

uint64_t LiGLState::get(LiGLState *this)
{
  unsigned __int8 v1;
  uint64_t v2;

  {
    pthread_key_create((pthread_key_t *)&LiGLState::get(void)::state, (void (__cdecl *)(void *))PCThreadSpecific<LiGLState>::destroy);
  }
  v2 = (uint64_t)pthread_getspecific(LiGLState::get(void)::state);
  if (!v2)
  {
    v2 = operator new();
    *(_QWORD *)v2 = LiGLState::getCurrentContext((LiGLState *)v2);
    *(_BYTE *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    pthread_setspecific(LiGLState::get(void)::state, (const void *)v2);
  }
  return v2;
}

void sub_1B2DBACEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LiGLState::setCurrentProgram(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t PCThreadSpecific<LiGLState>::destroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x1B5E29170);
  return result;
}

void LiFBOCompositor::LiFBOCompositor(LiFBOCompositor *this, int a2)
{
  PCWorkingColorVector *v3;

  *(_DWORD *)this = a2;
  v3 = (LiFBOCompositor *)((char *)this + 32);
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 16));
  PCWorkingColorVector::PCWorkingColorVector(v3);
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 48));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 96));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 112));
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 128));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 176));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 192));
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 208));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 256));
  PCWorkingColorVector::PCWorkingColorVector((LiFBOCompositor *)((char *)this + 272));
  ProGL::Framebuffer::Framebuffer((LiFBOCompositor *)((char *)this + 288));
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  LiFBOCompositor::init(this);
}

void sub_1B2DBB740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, ProGL::Framebuffer *a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ProGL::Framebuffer *v15;
  uint64_t v16;
  ProGL::Framebuffer *v17;
  uint64_t v18;
  uint64_t v19;
  ProGL::Framebuffer *v20;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v16);
  ProGL::Framebuffer::~Framebuffer(v15);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v12);
  ProGL::Framebuffer::~Framebuffer(v20);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v18);
  ProGL::Framebuffer::~Framebuffer(v17);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a10);
  ProGL::Framebuffer::~Framebuffer(a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void sub_1B2DBB7D4()
{
  JUMPOUT(0x1B2DBB794);
}

void sub_1B2DBB7DC()
{
  JUMPOUT(0x1B2DBB79CLL);
}

void sub_1B2DBB7E4()
{
  JUMPOUT(0x1B2DBB7A4);
}

void sub_1B2DBB7EC()
{
  JUMPOUT(0x1B2DBB7ACLL);
}

void sub_1B2DBB7F4()
{
  JUMPOUT(0x1B2DBB7B4);
}

void sub_1B2DBB7FC()
{
  JUMPOUT(0x1B2DBB7BCLL);
}

void sub_1B2DBB804()
{
  JUMPOUT(0x1B2DBB7C4);
}

void LiFBOCompositor::init(LiFBOCompositor *this)
{
  _BYTE v2[40];
  GLint params;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  ProGL::GL::GL((ProGL::GL *)v2);
  ProGL::GL_Wrap::getIntegerv((ProGL::GL_Wrap *)v2, 0xBA2u, &params);
  *(_QWORD *)((char *)this + 4) = v4;
  if (*(_DWORD *)this)
    LiFBOCompositor::initMultisampleFBO((LiFBOCompositor *)((char *)this + 48), (HGGLBlendingInfo **)this + 12, (HGGLBlendingInfo **)this + 14);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v2, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v2, 0x8D40u);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v2, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v2, 0x8D40u);
  getShaderBlend();
  getShaderCopy();
  ProGL::GL::~GL((ProGL::GL *)v2);
}

void sub_1B2DBB944(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void LiFBOCompositor::~LiFBOCompositor(LiFBOCompositor *this)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 288));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 208));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 128));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  ProGL::Framebuffer::~Framebuffer((LiFBOCompositor *)((char *)this + 48));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

void getShaderBlend(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      ProGL::makeProgramHandle<CompShader>(getShaderBlend(void)::result);
      __cxa_atexit((void (*)(void *))ProGL::ContextHandle::~ContextHandle, getShaderBlend(void)::result, &dword_1B2737000);
    }
  }
}

void sub_1B2DBBA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getShaderCopy(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      ProGL::makeProgramHandle<CopyShader>(getShaderCopy(void)::result);
      __cxa_atexit((void (*)(void *))ProGL::ContextHandle::~ContextHandle, getShaderCopy(void)::result, &dword_1B2737000);
    }
  }
}

void sub_1B2DBBAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LiFBOCompositor::beginDrawToFBO(LiFBOCompositor *this)
{
  _BYTE v2[40];

  ProGL::GL::GL((ProGL::GL *)v2);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 48), (ProGL::GL *)v2, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::GL::~GL((ProGL::GL *)v2);
}

void sub_1B2DBBB78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void LiFBOCompositor::endDrawToFBO(LiFBOCompositor *this)
{
  int v2;
  ProGL::GL *v3;
  ProGL::GL *v4;
  _BYTE v5[47];
  GLBOOLean params;

  ProGL::GL::GL((ProGL::GL *)v5);
  if (*(_DWORD *)this)
  {
    params = 0;
    glGetBooleanv(0xC11u, &params);
    v2 = params;
    if (params)
      glDisable(0xC11u);
    ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 128), (ProGL::GL *)v5, 0x8CA9u);
    ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 48), (ProGL::GL *)v5, 0x8CA8u);
    if (v2)
      glEnable(0xC11u);
  }
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v5, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  ProGL::ObjectHandle::name((LiFBOCompositor *)((char *)this + 336));
  getShaderBlend();
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 208), (ProGL::GL *)v5, 0x8D40u);
  glUseProgram(0);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v5, v3);
  ProGL::Framebuffer::bind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v5, 0x8D40u);
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glClear(0x4100u);
  getShaderCopy();
  ProGL::Framebuffer::unbind((LiFBOCompositor *)((char *)this + 288), (ProGL::GL *)v5, 0x8D40u);
  glUseProgram(0);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v5, v4);
  ProGL::GL::~GL((ProGL::GL *)v5);
}

void sub_1B2DBBCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ProGL::GL::~GL((ProGL::GL *)&a9);
  _Unwind_Resume(a1);
}

void LiFBOCompositor::renderResults(LiFBOCompositor *this)
{
  ProGL::GL *v2;
  _BYTE v3[40];

  ProGL::GL::GL((ProGL::GL *)v3);
  glBindFramebuffer(0x8D40u, *((_DWORD *)this + 3));
  glViewport(0, 0, *((_DWORD *)this + 1), *((_DWORD *)this + 2));
  getShaderCopy();
  glUseProgram(0);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v3, v2);
  ProGL::GL::~GL((ProGL::GL *)v3);
}

void sub_1B2DBBD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void LiFBOCompositor::initMultisampleFBO(ProGL::Framebuffer *a1, HGGLBlendingInfo **a2, HGGLBlendingInfo **a3)
{
  _QWORD v6[2];
  _QWORD v7[5];

  ProGL::GL::GL((ProGL::GL *)v7);
  ProGL::GL::getPGLContextHandle(v7, v6);
  ProGL::Framebuffer::bind(a1, (ProGL::GL *)v7, 0x8D40u);
  ProGL::Framebuffer::attach((uint64_t)a1, (int)v7, 0x8D40u, 0x8CE0u, a2);
  ProGL::Framebuffer::attach((uint64_t)a1, (int)v7, 0x8D40u, 0x8D00u, a3);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v6);
  ProGL::GL::~GL((ProGL::GL *)v7);
}

void sub_1B2DBBE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void ProGL::makeProgramHandle<CompShader>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E657D6D8;
  std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<CompShader>,void>(&v12, (uint64_t)v2);
  v3 = operator new();
  ProGL::Private::ProgramHandleImpl::ProgramHandleImpl(v3, &v12, 1000);
  std::shared_ptr<ProGL::Private::ProgramHandleImpl>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramHandleImpl,void>(&v10, v3);
  ProGL::GL::getPGLContextHandle(&v10, a1);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B2DBBF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ProGL::Private::ProgramFactory0<CompShader>::operator()()
{
  CompShader *v0;

  v0 = (CompShader *)operator new();
  CompShader::CompShader(v0);
}

_QWORD *sub_1B2DBBFAC()
{
  _QWORD *v0;
  uint64_t v1;

  return std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CompShader,void>(v0, v1);
}

void sub_1B2DBBFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B3C40AB3A38E5);
  _Unwind_Resume(a1);
}

void CompShader::CompShader(CompShader *this)
{
  _QWORD *v2;

  ProGL::Program::Program(this);
  *v2 = &unk_1E657D718;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "colorTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CompShader *)((char *)this + 280), this, "depthTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CompShader *)((char *)this + 336), this, "currentColorTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CompShader *)((char *)this + 392), this, "currentDepthTex");
  ProGL::Program::setFragmentSource(this, "        void main()                                                                     \n        {                                                                               \n                                                                                        \n            /* incoming color and depth (premult) */                                    \n                                                                                        \n            vec4 color  = texture2D(colorTex, gl_TexCoord[0].xy);                       \n"
    "            float depth = texture2D(depthTex, gl_TexCoord[0].xy).r;                     \n"
    "                                                                                        \n"
    "                                                                                        \n"
    "            /* current color and depth (premult) */                                     \n"
    "                                                                                        \n"
    "            vec4 currentColor  = texture2D(currentColorTex, gl_TexCoord[0].xy);         \n"
    "            float currentDepth = texture2D(currentDepthTex, gl_TexCoord[0].xy).r;       \n"
    "                                                                                        \n"
    "            /* blend */                                                                 \n"
    "                                                                                        \n"
    "            vec4 finalColor;                                                            \n"
    "            float finalDepth;                                                           \n"
    "                                                                                        \n"
    "            vec4 s; /* source */                                                        \n"
    "            vec4 b; /* background */                                                    \n"
    "                                                                                        \n"
    "            if (depth < currentDepth)                                                   \n"
    "            {                                                                           \n"
    "                s = color;                                                              \n"
    "                b = currentColor;                                                       \n"
    "                finalDepth = depth;                                                     \n"
    "            }                                                                           \n"
    "            else                                                                        \n"
    "            {                                                                           \n"
    "                s = currentColor;                                                       \n"
    "                b = color;                                                              \n"
    "                finalDepth = currentDepth;                                              \n"
    "            }                                                                           \n"
    "                                                                                        \n"
    "            /* premult over operator */                                                 \n"
    "                                                                                        \n"
    "            finalColor.rgb = s.rgb + b.rgb * (1. - s.a);                                \n"
    "            finalColor.a = s.a + b.a * (1. - s.a);                                      \n"
    "                                                                                        \n"
    "            /* output results */                                                        \n"
    "                                                                                        \n"
    "            gl_FragColor = finalColor;                                                  \n"
    "            gl_FragDepth = finalDepth;                                                  \n"
    "        }                                                                               \n"
    "        ");
}

uint64_t sub_1B2DBC080()
{
  uint64_t v0;

  return v0;
}

void sub_1B2DBC098(_Unwind_Exception *a1)
{
  ProGL::Program *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  v6 = v4;
  ProGL::UniformSampler<35678u>::~UniformSampler(v6);
  ProGL::UniformSampler<35678u>::~UniformSampler(v5);
  ProGL::UniformSampler<35678u>::~UniformSampler(v3);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void CompShader::~CompShader(void **this)
{
  void **v2;

  *this = &unk_1E657D718;
  v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 49);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 42);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;

  *this = &unk_1E657D718;
  v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 49);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 42);
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CompShader,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E657D760;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2DBC204(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CompShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CompShader>,std::allocator<CompShader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CompShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CompShader>,std::allocator<CompShader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<CompShader>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E657D7D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2DBC2D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CompShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CompShader>>,std::allocator<ProGL::Private::ProgramFactory0<CompShader>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CompShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CompShader>>,std::allocator<ProGL::Private::ProgramFactory0<CompShader>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ProGL::makeProgramHandle<CopyShader>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E657D850;
  std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<CopyShader>,void>(&v12, (uint64_t)v2);
  v3 = operator new();
  ProGL::Private::ProgramHandleImpl::ProgramHandleImpl(v3, &v12, 1000);
  std::shared_ptr<ProGL::Private::ProgramHandleImpl>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramHandleImpl,void>(&v10, v3);
  ProGL::GL::getPGLContextHandle(&v10, a1);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B2DBC454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ProGL::Private::ProgramFactory0<CopyShader>::operator()()
{
  CopyShader *v0;

  v0 = (CopyShader *)operator new();
  CopyShader::CopyShader(v0);
}

_QWORD *sub_1B2DBC4C8()
{
  _QWORD *v0;
  uint64_t v1;

  return std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CopyShader,void>(v0, v1);
}

void sub_1B2DBC4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B3C402738F2C7);
  _Unwind_Resume(a1);
}

void CopyShader::CopyShader(CopyShader *this)
{
  _QWORD *v2;

  ProGL::Program::Program(this);
  *v2 = &unk_1E657D890;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "colorTex");
  ProGL::UniformSampler<35678u>::UniformSampler((CopyShader *)((char *)this + 280), this, "depthTex");
  ProGL::Program::setFragmentSource(this, "        void main()                                                     \n        {                                                               \n            gl_FragColor = texture2D(colorTex, gl_TexCoord[0].xy);      \n"
    "            gl_FragDepth = texture2D(depthTex, gl_TexCoord[0].xy).r;    \n"
    "        }                                                               \n"
    "        ");
}

uint64_t sub_1B2DBC568()
{
  uint64_t v0;

  return v0;
}

void sub_1B2DBC57C(_Unwind_Exception *a1)
{
  ProGL::Program *v1;
  void **v2;
  void **v3;
  void **v4;

  v4 = v3;
  ProGL::UniformSampler<35678u>::~UniformSampler(v4);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void CopyShader::~CopyShader(void **this)
{
  void **v2;

  *this = &unk_1E657D890;
  v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;

  *this = &unk_1E657D890;
  v2 = this + 28;
  ProGL::UniformSampler<35678u>::~UniformSampler(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<CopyShader,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E657D8D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2DBC6A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CopyShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CopyShader>,std::allocator<CopyShader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CopyShader *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,CopyShader>,std::allocator<CopyShader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<CopyShader>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E657D950;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2DBC778(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CopyShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CopyShader>>,std::allocator<ProGL::Private::ProgramFactory0<CopyShader>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<CopyShader> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<CopyShader>>,std::allocator<ProGL::Private::ProgramFactory0<CopyShader>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

LiHeProgramSpotLightStencil *LiHeSpotLightStencil::LiHeSpotLightStencil(LiHeProgramSpotLightStencil *a1, HGNode **a2, double *a3, double *a4, double *a5, double *a6, float a7, float a8)
{
  _QWORD *v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;

  LiHeProgramSpotLightStencil::LiHeProgramSpotLightStencil(a1);
  *v16 = off_1E657D9C8;
  v17 = cosf(a7);
  v18 = cosf(a8);
  v19 = *a6;
  v21 = a6[4];
  v20 = a6[5];
  v22 = a6[8];
  v23 = a6[9];
  v24 = a6[12];
  v55 = a6[13];
  v56 = a6[1];
  v59 = a6[6];
  v60 = a6[2];
  v53 = a6[7];
  v54 = a6[3];
  v57 = a6[14];
  v58 = a6[10];
  v51 = a6[15];
  v52 = a6[11];
  HGNode::SetInput((HGNode *)a1, 0, *a2);
  v25 = *a3;
  v26 = a3[1];
  v27 = a3[2];
  (*(void (**)(LiHeProgramSpotLightStencil *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v25, v26, v27, 0.0);
  v28 = *a4;
  v29 = a4[1];
  v30 = a4[2];
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v28, v29, v30, 0.0);
  v31 = *a5;
  v32 = a5[1];
  v33 = a5[2];
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v31, v32, v33, 0.0);
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v17, 0.0, 0.0, 0.0);
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v18, 0.0, 0.0, 0.0);
  v34 = v19;
  v35 = v21;
  v36 = v22;
  v37 = v24;
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v34, v35, v36, v37);
  v38 = v56;
  v39 = v20;
  v40 = v23;
  v41 = v55;
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v38, v39, v40, v41);
  v42 = v60;
  v43 = v59;
  v44 = v58;
  v45 = v57;
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, v42, v43, v44, v45);
  v46 = v54;
  v47 = v53;
  v48 = v52;
  v49 = v51;
  (*(void (**)(LiHeProgramSpotLightStencil *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v46, v47, v48, v49);
  return a1;
}

void sub_1B2DBCA50(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeSpotLightStencil::GetDOD(LiHeSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeSpotLightStencil::GetROI(LiHeSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeSpotLightStencil::~LiHeSpotLightStencil(HGNode *this)
{
  void *v1;

  LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(this);
  HGObject::operator delete(v1);
}

ProShade::ProgramBase *ProShade::ProgramBase::ProgramBase(ProShade::ProgramBase *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *(_QWORD *)this = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[2];
  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_WORD *)this + 4) = 0;
  PSShaderBase::PSShaderBase((ProShade::ProgramBase *)((char *)this + 16));
  *((_QWORD *)this + 2) = &unk_1E657DC48;
  PSShaderBase::PSShaderBase((ProShade::ProgramBase *)((char *)this + 80));
  *((_QWORD *)this + 10) = &unk_1E657DC88;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::ProgramBase *)((char *)this + 144));
  PCMutex::PCMutex((PCMutex *)((char *)this + 160), 1);
  *((_QWORD *)this + 20) = &unk_1E64E2000;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = (char *)this + 240;
  *((_DWORD *)this + 64) = 0;
  *((_DWORD *)this + 66) = 0;
  return this;
}

void sub_1B2DBCB80(_Unwind_Exception *a1)
{
  PCString *v1;

  PSShaderBase::~PSShaderBase(v1);
  _Unwind_Resume(a1);
}

void ProShade::ProgramBase::~ProgramBase(ProShade::ProgramBase *this, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = (char *)this + 232;
  v5 = (char *)*((_QWORD *)this + 29);
  v6 = (char *)this + 240;
  if (v5 != (char *)this + 240)
  {
    do
    {
      LiPerContextObject_Traits<ProShade::ProgramBase::Exe>::destroy(*((ProShade::ProgramBase::Exe **)v5 + 6));
      v7 = (char *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 64);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v4, *((_QWORD **)this + 30));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 160));
  PSShaderBase::~PSShaderBase((PCString *)this + 10);
  PSShaderBase::~PSShaderBase((PCString *)this + 2);
}

uint64_t ProShade::ProgramBase::id(ProShade::ProgramBase *this)
{
  PCMutex *v2;
  ProGL::ObjectHandle *v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  _BYTE v11[40];
  PCMutex *v12;
  char v13;

  v2 = (PCMutex *)((char *)this + 160);
  v12 = (PCMutex *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  v13 = 1;
  v11[0] = 0;
  v3 = *(ProGL::ObjectHandle **)LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, v11);
  if (!ProGL::ObjectHandle::name(v3))
  {
    ProGL::GL::GL((ProGL::GL *)v11);
    ProGL::createProgramObject((ProGL *)v11, &v10);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v3, &v10);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *((_BYTE *)v3 + 16) = 0;
    ProGL::GL::~GL((ProGL::GL *)v11);
LABEL_11:
    v5 = ProGL::ObjectHandle::name(v3);
    v2 = v12;
    v4 = v13 == 0;
    if (!v12)
      return v5;
    goto LABEL_12;
  }
  v4 = *((_BYTE *)v3 + 17);
  if (v4)
    goto LABEL_11;
  v5 = 0;
  if (!v2)
    return v5;
LABEL_12:
  if ((v4 & 1) == 0)
    PCMutex::unlock(v2);
  return v5;
}

void sub_1B2DBCD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  PCLockSentry<PCMutex>::~PCLockSentry(v4 - 32);
  _Unwind_Resume(a1);
}

void ProShade::ProgramBase::computeHash(ProShade::ProgramBase *this)
{
  _OWORD *v1;
  PCString v2;
  int8x8_t v3[521];

  v1 = (_OWORD *)MEMORY[0x1E0C80A78](this);
  v3[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v3);
  PSShaderBase::source((PSShaderBase *)(v1 + 1), (PCSharedCount *)&v2);
  PCHashWriteStream::writeValue(v3, &v2);
  PCString::~PCString(&v2);
  PSShaderBase::source((PSShaderBase *)(v1 + 5), (PCSharedCount *)&v2);
  PCHashWriteStream::writeValue(v3, &v2);
  PCString::~PCString(&v2);
  v1[9] = *(_OWORD *)PCHashWriteStream::getHash(v3)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v3);
}

void sub_1B2DBCE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

void sub_1B2DBCE9C()
{
  JUMPOUT(0x1B2DBCE94);
}

uint64_t ProShade::ProgramBase::link(ProShade::ProgramBase *this)
{
  PCMutex *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  GLuint v6;
  GLuint v7;
  GLuint v8;
  GLuint v9;
  GLuint v10;
  GLuint v11;
  const PCString *v12;
  PCGLSLException *exception;
  PCString v15;
  PCSharedCount v16[2];
  char v17;

  v2 = (PCMutex *)((char *)this + 160);
  v16[1].var0 = (PC_Sp_counted_base *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  v17 = 1;
  LOBYTE(v16[0].var0) = 0;
  v3 = LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, v16);
  v4 = *(_QWORD *)v3;
  if (*(_BYTE *)(*(_QWORD *)v3 + 16) || !*(_BYTE *)(v4 + 17))
  {
    v5 = 0;
  }
  else
  {
    ProShade::ProgramBase::id(this);
    PCSharedCount::PCSharedCount(v16);
    (*(void (**)(ProShade::ProgramBase *))(*(_QWORD *)this + 32))(this);
    if (*((_BYTE *)this + 8))
    {
      v6 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
      v7 = PSShaderBase::id((ProShade::ProgramBase *)((char *)this + 16));
      glAttachShader(v6, v7);
    }
    if (*((_BYTE *)this + 9))
    {
      v8 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
      v9 = PSShaderBase::id((ProShade::ProgramBase *)((char *)this + 80));
      glAttachShader(v8, v9);
    }
    v10 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
    glLinkProgram(v10);
    v11 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)v4);
    LODWORD(v15.var0) = 0;
    glGetProgramiv(v11, 0x8B82u, (GLint *)&v15);
    if (!LODWORD(v15.var0))
    {
      exception = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
      PCString::PCString(&v15, "link failed");
      PCGLSLException::PCGLSLException(exception, &v15);
    }
    ProShade::ProgramBase::computeHash(this);
    *(_WORD *)(v4 + 16) = 257;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v4 + 24, *(char **)(v4 + 32));
    *(_QWORD *)(v4 + 24) = v4 + 32;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    (*(void (**)(ProShade::ProgramBase *, uint64_t))(*(_QWORD *)this + 40))(this, v4);
    OZChannelBase::setRangeName((OZChannelBase *)v16, v12);
    v5 = 1;
    *((_DWORD *)this + 66) = 1;
  }
  PCMutex::unlock(v2);
  return v5;
}

void sub_1B2DBD054(uint64_t a1, OZChannelBase *a2)
{
  __break(1u);
}

void sub_1B2DBD128()
{
  void *v0;

  __cxa_free_exception(v0);
  __cxa_end_catch();
  JUMPOUT(0x1B2DBD140);
}

uint64_t ProShade::ProgramBase::compileShaders(ProShade::ProgramBase *this)
{
  const PCString *v2;
  PCException *exception;
  PCString _8[5];

  if (!*((_BYTE *)this + 8) && !*((_BYTE *)this + 9))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(_8, "no shader specified");
    PCException::PCException(exception, _8);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)_8);
  if (*((_BYTE *)this + 8))
    PSShaderBase::compile((PCString *)this + 2);
  if (*((_BYTE *)this + 9))
    PSShaderBase::compile((PCString *)this + 10);
  return OZChannelBase::setRangeName((OZChannelBase *)_8, v2);
}

void sub_1B2DBD200(_Unwind_Exception *a1, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  PCString::~PCString((PCString *)&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ProgramBase::use(ProShade::ProgramBase *this)
{
  GLuint v2;
  const PCString *v3;
  PCSharedCount _8[5];

  (*(void (**)(ProShade::ProgramBase *))(*(_QWORD *)this + 16))(this);
  PCSharedCount::PCSharedCount(_8);
  v2 = ProShade::ProgramBase::id(this);
  glUseProgram(v2);
  LiGL::setCurrentProgram((uint64_t *)_8, 0);
  return OZChannelBase::setRangeName((OZChannelBase *)_8, v3);
}

void sub_1B2DBD29C(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OZChannelBase::setRangeName((OZChannelBase *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ProgramBase::getUniformLocation(ProShade::ProgramBase *this, char *a2)
{
  PCMutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t UniformLocation;
  GLuint v8;
  const GLchar *p_var1;
  const PCString *v10;
  OZChannelBase _0;

  v4 = (PCMutex *)((char *)this + 160);
  _0.var4.var0 = (__CFString *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  LOBYTE(_0.var5) = 1;
  LOBYTE(_0.var1) = 0;
  v5 = *(_QWORD *)LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, &_0.var1);
  std::string::basic_string[abi:ne180100]<0>(&_0.var1, a2);
  v6 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v5 + 24, (const void **)&_0.var1);
  if (v5 + 32 == v6)
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)&_0);
    (*(void (**)(ProShade::ProgramBase *))(*(_QWORD *)this + 16))(this);
    v8 = ProShade::ProgramBase::id(this);
    if (*((char *)&_0.var3 + 7) >= 0)
      p_var1 = (const GLchar *)&_0.var1;
    else
      p_var1 = (const GLchar *)_0.var1;
    UniformLocation = glGetUniformLocation(v8, p_var1);
    _0.var7 = (unint64_t)&_0.var1;
    *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 24), (const void **)&_0.var1, (uint64_t)&std::piecewise_construct, (__int128 **)&_0.var7)+ 14) = UniformLocation;
    OZChannelBase::setRangeName(&_0, v10);
  }
  else
  {
    UniformLocation = *(unsigned int *)(v6 + 56);
  }
  if (*((char *)&_0.var3 + 7) < 0)
    operator delete(_0.var1);
  PCMutex::unlock(v4);
  return UniformLocation;
}

void sub_1B2DBD3C0(_Unwind_Exception *a1, const PCString *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  OZChannelBase::setRangeName((OZChannelBase *)&a9, a2);
  if (a15 < 0)
    operator delete(__p);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void PSShader<35633u>::~PSShader(PCString *a1)
{
  PSShaderBase::~PSShaderBase(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t PSShader<35633u>::type()
{
  return 35633;
}

uint64_t PSShader<35632u>::type()
{
  return 35632;
}

ProShade::ProgramBase::Exe *LiPerContextObject_Traits<ProShade::ProgramBase::Exe>::destroy(ProShade::ProgramBase::Exe *result)
{
  if (result)
  {
    ProShade::ProgramBase::Exe::~Exe(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void ProShade::ProgramBase::Exe::~Exe(ProShade::ProgramBase::Exe *this)
{
  ProShade::UniformWorkspace *v2;

  v2 = (ProShade::UniformWorkspace *)*((_QWORD *)this + 9);
  if (v2)
  {
    ProShade::UniformWorkspace::~UniformWorkspace(v2);
    MEMORY[0x1B5E29170]();
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void ProShade::UniformWorkspace::~UniformWorkspace(ProShade::UniformWorkspace *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2DBD808(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

LiHeDepthCompareProgram *LiHeDepthCompare::LiHeDepthCompare(LiHeDepthCompareProgram *a1, _QWORD *a2, unsigned int a3, _OWORD *a4, uint64_t a5)
{
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float v15;
  float v16;
  float v17;
  double v19[4];
  __int128 v20;
  __int128 v21;
  _OWORD v22[8];

  LiHeDepthCompareProgram::LiHeDepthCompareProgram(a1);
  *v10 = off_1E657DCC8;
  LiLight::copyPCMatrixToVec4(a5, (uint64_t)a1, 0);
  LiLight::copyPCMatrixToVec4((uint64_t)a4, (uint64_t)a1, 4);
  (*(void (**)(LiHeDepthCompareProgram *, _QWORD, _QWORD))(*(_QWORD *)a1 + 120))(a1, 0, *a2);
  (*(void (**)(LiHeDepthCompareProgram *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 9, (float)a3, 0.0, 0.0, 0.0);
  v11 = a4[5];
  v22[4] = a4[4];
  v22[5] = v11;
  v12 = a4[7];
  v22[6] = a4[6];
  v22[7] = v12;
  v13 = a4[1];
  v22[0] = *a4;
  v22[1] = v13;
  v14 = a4[3];
  v22[2] = a4[2];
  v22[3] = v14;
  if (PCMatrix44Tmpl<double>::invert((double *)v22, (double *)v22, 0.0))
  {
    v20 = 0u;
    v21 = 0u;
    memset(v19, 0, 24);
    v19[3] = 1.0;
    PCMatrix44Tmpl<double>::transform<double>((double *)v22, v19, (double *)&v20);
    *(double *)&v20 = *(double *)&v20 * (1.0 / *((double *)&v21 + 1));
    *((double *)&v20 + 1) = 1.0 / *((double *)&v21 + 1) * *((double *)&v20 + 1);
    *(double *)&v21 = 1.0 / *((double *)&v21 + 1) * *(double *)&v21;
    *((double *)&v21 + 1) = *((double *)&v21 + 1) * (1.0 / *((double *)&v21 + 1));
    v15 = *(double *)&v20;
    v16 = *((double *)&v20 + 1);
    v17 = *(double *)&v21;
    (*(void (**)(LiHeDepthCompareProgram *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v15, v16, v17, 1.0);
  }
  return a1;
}

void sub_1B2DBD9C8(_Unwind_Exception *a1)
{
  HGNode *v1;

  LiHeDepthCompareProgram::~LiHeDepthCompareProgram(v1);
  _Unwind_Resume(a1);
}

void LiHeDepthCompare::~LiHeDepthCompare(HGNode *this)
{
  void *v1;

  LiHeDepthCompareProgram::~LiHeDepthCompareProgram(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeDepthCompare::GetDOD(LiHeDepthCompare *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeDepthCompare::GetROI(LiHeDepthCompare *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t ProShade::typeGetSize(unsigned int a1, const PCString *a2)
{
  if (a1 >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  return dword_1B355BE80[a1];
}

void *ProShade::copyData(void *result, const PCString *a2, int a3, BOOL *__dst, int a5)
{
  unsigned int v5;
  int var0_low;
  double v7;
  unsigned int v8;
  double v9;
  unsigned int v10;
  int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  double v16;
  unsigned int v17;
  int var0;

  if (!(_DWORD)result || !a3)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"no type", a2);
  if ((_DWORD)result == 3)
  {
    if (a3 == 1)
    {
      if (a5 >= 1)
      {
        v15 = a5 + 1;
        do
        {
          v16 = *(double *)&a2->var0;
          ++a2;
          *__dst++ = v16 != 0.0;
          --v15;
        }
        while (v15 > 1);
      }
      return result;
    }
    if (a3 != 3)
    {
      if (a3 != 2)
        goto LABEL_47;
      if (a5 >= 1)
      {
        v8 = a5 + 1;
        do
        {
          v9 = *(double *)&a2->var0;
          ++a2;
          *(_DWORD *)__dst = (int)v9;
          __dst += 4;
          --v8;
        }
        while (v8 > 1);
      }
      return result;
    }
    v12 = 8 * a5;
    return memcpy(__dst, a2, v12);
  }
  if ((_DWORD)result == 2)
  {
    if (a3 == 1)
    {
      if (a5 >= 1)
      {
        v17 = a5 + 1;
        do
        {
          var0 = (int)a2->var0;
          a2 = (const PCString *)((char *)a2 + 4);
          *__dst++ = var0 != 0;
          --v17;
        }
        while (v17 > 1);
      }
      return result;
    }
    if (a3 != 2)
    {
      if (a3 != 3)
        goto LABEL_47;
      if (a5 >= 1)
      {
        v10 = a5 + 1;
        do
        {
          v11 = (int)a2->var0;
          a2 = (const PCString *)((char *)a2 + 4);
          *(double *)__dst = (double)v11;
          __dst += 8;
          --v10;
        }
        while (v10 > 1);
      }
      return result;
    }
    v12 = 4 * a5;
    return memcpy(__dst, a2, v12);
  }
  if ((_DWORD)result != 1)
    goto LABEL_47;
  if (a3 == 1)
  {
    v12 = a5;
    return memcpy(__dst, a2, v12);
  }
  if (a3 != 2)
  {
    if (a3 == 3)
    {
      if (a5 >= 1)
      {
        v5 = a5 + 1;
        do
        {
          var0_low = LOBYTE(a2->var0);
          a2 = (const PCString *)((char *)a2 + 1);
          if (var0_low)
            v7 = 1.0;
          else
            v7 = 0.0;
          *(double *)__dst = v7;
          __dst += 8;
          --v5;
        }
        while (v5 > 1);
      }
      return result;
    }
LABEL_47:
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  }
  if (a5 >= 1)
  {
    v13 = a5 + 1;
    do
    {
      v14 = LOBYTE(a2->var0);
      a2 = (const PCString *)((char *)a2 + 1);
      *(_DWORD *)__dst = v14;
      __dst += 4;
      --v13;
    }
    while (v13 > 1);
  }
  return result;
}

uint64_t ProShade::shapeGetWidth(unsigned int a1, const PCString *a2)
{
  if (a1 >= 0xE)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown shape", a2);
  return dword_1B355BBDC[a1];
}

uint64_t ProShade::shapeGetSize(unsigned int a1, const PCString *a2)
{
  if (a1 >= 0xE)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown shape", a2);
  return dword_1B355BC14[a1];
}

BOOL ProShade::shapeIsVector(int a1)
{
  return a1 == 4 || (a1 & 0xFFFFFFFE) == 2;
}

BOOL ProShade::shapeIsMatrix(int a1)
{
  return (a1 - 5) < 3;
}

uint64_t ProShade::shapeTexture(ProShade *this, const PCString *a2)
{
  if ((a2 & 1) != 0)
  {
    if ((_DWORD)this == 34067)
      return 13;
LABEL_9:
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid target", a2);
  }
  if ((_DWORD)this == 3553)
    return 9;
  if ((_DWORD)this != 34067)
    goto LABEL_9;
  return 11;
}

void ProShade::shapeString(OZChannelBase *a1@<X0>, const PCString *a2@<X1>, LiString *a3@<X8>)
{
  int v3;
  int v4;
  const char *v6;
  uint64_t Width;
  const PCString *v8;
  OZChannelBase *v9;
  const PCString *v10;
  const char *v11;

  v3 = (int)a2;
  v4 = (int)a1;
  switch((int)a1)
  {
    case 0:
      v6 = "void";
      goto LABEL_14;
    case 1:
      switch((int)a2)
      {
        case 0:
          ProShade::Error<PCIllegalArgumentException>::raise(a1, a2);
        case 1:
          v6 = "BOOL";
          goto LABEL_14;
        case 2:
          v6 = "int";
          goto LABEL_14;
        case 3:
          v6 = "float";
          goto LABEL_14;
        default:
          Width = ProShade::shapeGetWidth(1u, a2);
          goto LABEL_17;
      }
    case 8:
      v6 = "sampler1D";
      goto LABEL_14;
    case 9:
      v6 = "sampler2D";
      goto LABEL_14;
    case 10:
      v6 = "sampler3D";
      goto LABEL_14;
    case 11:
      v6 = "samplerCube";
      goto LABEL_14;
    case 12:
      v6 = "sampler2DRect";
      goto LABEL_14;
    case 13:
      v6 = "samplerCubeShadow";
LABEL_14:
      LiString::LiString(a3, v6);
      return;
    default:
      Width = ProShade::shapeGetWidth(a1, a2);
      if ((v4 - 5) > 2)
      {
LABEL_17:
        LiString::format((LiString *)"vec%d", a3, Width);
        switch(v3)
        {
          case 1:
            v11 = "b";
            break;
          case 2:
            v11 = "i";
            break;
          case 0:
            ProShade::Error<PCIllegalArgumentException>::raise(v9, v10);
          default:
            return;
        }
        LiString::append(a3, v11, 1);
        return;
      }
      if (v3 != 3)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"matrices must be float", v8);
      LiString::format((LiString *)"mat%d", a3, Width);
      return;
  }
}

void sub_1B2DBDE94(_Unwind_Exception *a1)
{
  LiString *v1;

  LiString::dec(v1);
  _Unwind_Resume(a1);
}

_QWORD *ProShade::Value::Value(_QWORD *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

__CFString **ProShade::Value::operator=(__CFString **a1, const PCString *a2)
{
  int AllocSize;

  *a1 = a2->var0;
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)a1, a2);
  memcpy(a1 + 2, &a2[2], AllocSize);
  a1[1] = a2[1].var0;
  return a1;
}

ProShade::Value *ProShade::Value::Value(PCString *this, const PCString *a2)
{
  int AllocSize;

  this->var0 = 0;
  this[1].var0 = (__CFString *)-1;
  this->var0 = a2->var0;
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)this, a2);
  memcpy(&this[2], &a2[2], AllocSize);
  this[1].var0 = a2[1].var0;
  return (ProShade::Value *)this;
}

uint64_t ProShade::Value::getAllocSize(ProShade::Value *this, const PCString *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(int *)this;
  if (v2 >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  v3 = dword_1B355BE80[v2];
  return ProShade::shapeGetSize(*((_DWORD *)this + 1), a2) * v3;
}

void ProShade::Value::set(uint64_t a1, const PCString *a2, int a3)
{
  int AllocSize;

  *(_DWORD *)a1 = (_DWORD)a2;
  *(_DWORD *)(a1 + 4) = a3;
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)a1, a2);
  bzero((void *)(a1 + 16), AllocSize);
  *(_QWORD *)(a1 + 8) = -1;
}

void *ProShade::Value::set(uint64_t a1, const PCString *a2, int a3, const void *a4)
{
  int AllocSize;
  void *result;

  *(_DWORD *)a1 = (_DWORD)a2;
  *(_DWORD *)(a1 + 4) = a3;
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)a1, a2);
  result = memcpy((void *)(a1 + 16), a4, AllocSize);
  *(_QWORD *)(a1 + 8) = -1;
  return result;
}

void *ProShade::Value::get(const PCString *a1, const PCString *a2, BOOL *a3)
{
  int v4;
  const PCString *v5;
  void *var0_low;
  int Size;

  v4 = (int)a2;
  v5 = a1 + 2;
  var0_low = (void *)LODWORD(a1->var0);
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  return ProShade::copyData(var0_low, v5, v4, a3, Size);
}

void ProShade::Value::repr(ProShade::Value *this@<X0>, LiString *a2@<X8>)
{
  const PCString *v4;
  int Size;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  signed int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  int v23;
  double *v24;
  double v25;
  signed int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  char *__src;

  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 1), (const PCString *)*(unsigned int *)this, a2);
  LiString::append(a2, "(", 1);
  Size = ProShade::shapeGetSize(*((_DWORD *)this + 1), v4);
  v6 = Size;
  switch(*(_DWORD *)this)
  {
    case 0:
      LiString::append(a2, "NULL", 4);
      break;
    case 1:
      if (Size >= 1)
      {
        v7 = 0;
        v8 = (unsigned __int8 *)this + 16;
        do
        {
          if (v7)
            LiString::append(a2, ",", 1);
          v9 = *v8++;
          LiString::format((LiString *)v9, (LiString *)&__src);
          if (__src)
            v10 = *((_DWORD *)__src - 2);
          else
            v10 = 0;
          LiString::append(a2, __src, v10);
          if (__src)
          {
            v11 = (unsigned int *)(__src - 12);
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              *__src = 0;
              if (__src)
                v14 = __src - 12;
              else
                v14 = 0;
              free(v14);
            }
          }
          ++v7;
        }
        while (v7 != v6);
      }
      break;
    case 2:
      if (Size >= 1)
      {
        v15 = 0;
        v16 = (unsigned int *)((char *)this + 16);
        do
        {
          if (v15)
            LiString::append(a2, ",", 1);
          v17 = *v16++;
          LiString::format((LiString *)v17, (LiString *)&__src);
          if (__src)
            v18 = *((_DWORD *)__src - 2);
          else
            v18 = 0;
          LiString::append(a2, __src, v18);
          if (__src)
          {
            v19 = (unsigned int *)(__src - 12);
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              *__src = 0;
              if (__src)
                v22 = __src - 12;
              else
                v22 = 0;
              free(v22);
            }
          }
          ++v15;
        }
        while (v15 != v6);
      }
      break;
    case 3:
      if (Size >= 1)
      {
        v23 = 0;
        v24 = (double *)((char *)this + 16);
        do
        {
          if (v23)
            LiString::append(a2, ",", 1);
          v25 = *v24++;
          LiString::format(v25, (LiString *)&__src);
          if (__src)
            v26 = *((_DWORD *)__src - 2);
          else
            v26 = 0;
          LiString::append(a2, __src, v26);
          if (__src)
          {
            v27 = (unsigned int *)(__src - 12);
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              *__src = 0;
              if (__src)
                v30 = __src - 12;
              else
                v30 = 0;
              free(v30);
            }
          }
          ++v23;
        }
        while (v23 != v6);
      }
      break;
    default:
      break;
  }
  LiString::append(a2, ")", 1);
}

void sub_1B2DBE2F8(_Unwind_Exception *a1)
{
  LiString *v1;

  LiString::dec(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::Value::asBool(ProShade::Value *this, const PCString *a2)
{
  int v2;
  BOOL v3;

  if (*((_DWORD *)this + 1) != 1)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"predicate not scalar", a2);
  switch(*(_DWORD *)this)
  {
    case 0:
      ProShade::Error<PCIllegalArgumentException>::raise((OZChannelBase *)this, a2);
    case 1:
      v2 = *((unsigned __int8 *)this + 16);
      goto LABEL_5;
    case 2:
      v2 = *((_DWORD *)this + 4);
LABEL_5:
      v3 = v2 == 0;
      break;
    case 3:
      v3 = *((double *)this + 2) == 0.0;
      break;
    default:
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"unknown type", a2);
  }
  return !v3;
}

void ProShade::ValueVisitor::~ValueVisitor(ProShade::ValueVisitor *this)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x1B5E29170](v1, 0x20C40960023A9);
  }
}

uint64_t ProShade::ValueVisitor::alreadyComputed(uint64_t **this, const PCString *a2, ProShade::Value *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int AllocSize;

  v3 = *this;
  if (!*this)
    return 0;
  v5 = *v3;
  v4 = v3[1];
  if (v5 == v4)
    return 0;
  while (*(const PCString **)v5 != a2)
  {
    v5 += 152;
    if (v5 == v4)
      return 0;
  }
  *(_QWORD *)a3 = *(_QWORD *)(v5 + 8);
  AllocSize = ProShade::Value::getAllocSize(a3, a2);
  memcpy((char *)a3 + 16, (const void *)(v5 + 24), AllocSize);
  *((_QWORD *)a3 + 1) = *(_QWORD *)(v5 + 16);
  return 1;
}

uint64_t **ProShade::ValueVisitor::addResult(uint64_t **this, __CFString *a2, const ProShade::Value *a3)
{
  uint64_t *v5;
  const ProShade::Node **i;
  uint64_t **v7;
  int AllocSize;
  unint64_t v9;
  PCString v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  v5 = *this;
  if (*this)
  {
    for (i = (const ProShade::Node **)*v5; i != (const ProShade::Node **)v5[1]; i += 19)
    {
      if (*i == (const ProShade::Node *)a2)
        return this;
    }
  }
  else
  {
    v7 = this;
    v5 = (uint64_t *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    *v7 = v5;
  }
  v10.var0 = a2;
  v12 = -1;
  v11 = *(_QWORD *)a3;
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)&v11, (const PCString *)a2);
  memcpy(v13, (char *)a3 + 16, AllocSize);
  v12 = *((_QWORD *)a3 + 1);
  v9 = v5[1];
  if (v9 >= v5[2])
  {
    this = (uint64_t **)std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__push_back_slow_path<std::pair<ProShade::Node const*,ProShade::Value>>(v5, &v10);
  }
  else
  {
    std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__construct_one_at_end[abi:ne180100]<std::pair<ProShade::Node const*,ProShade::Value>>((uint64_t)v5, &v10);
    this = (uint64_t **)(v9 + 152);
  }
  v5[1] = (uint64_t)this;
  return this;
}

ProShade::Node *ProShade::Node::Node(ProShade::Node *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *(_QWORD *)this = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[2];
  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  PCWorkingColorVector::PCWorkingColorVector((ProShade::Node *)((char *)this + 8));
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  return this;
}

uint64_t ProShade::Node::po(ProShade::Node *this)
{
  _BYTE *v1;
  unsigned int *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;
  _BYTE *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  const char *v15;
  size_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  int v29;
  uint64_t result;
  _BYTE *v31;
  _QWORD v32[3];
  PCSharedCount v33;
  _BYTE *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  PCSharedCount v38[3];
  PCSharedCount v39;
  _BYTE *v40;
  void (**v41)(PCShared_base *__hidden);
  PC_Sp_counted_base *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  v1 = (_BYTE *)*((_QWORD *)this + 4);
  v34 = v1;
  v35 = &unk_1E656A338;
  if (v1)
  {
    v2 = (unsigned int *)(v1 - 12);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v32[0] = &unk_1E6569AC8;
  v32[2] = this;
  PCSharedCount::PCSharedCount(&v33, (ProShade::Node *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  ProShade::Output::Output(v38, &v34, v32);
  if ((int)v36 <= SHIDWORD(v36))
    v4 = (2 * (HIDWORD(v36) + 1)) | 1;
  else
    v4 = v36;
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize((uint64_t)&v35, HIDWORD(v36) + 1, v4);
  v5 = v37;
  v6 = SHIDWORD(v36) - 1;
  v7 = (PCSharedCount *)(v37 + 40 * v6);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v7, v38);
  if (v7 != v38)
  {
    LiString::dec((LiString *)(v5 + 40 * v6 + 32));
    v8 = v40;
    *(_QWORD *)(v5 + 40 * v6 + 32) = v40;
    if (v8)
    {
      v9 = (unsigned int *)(v8 - 12);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  if (v40)
  {
    v11 = (unsigned int *)(v40 - 12);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      *v40 = 0;
      if (v40)
        v14 = v40 - 12;
      else
        v14 = 0;
      free(v14);
      v40 = 0;
    }
  }
  v38[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v39);
  v32[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v33);
  v31 = 0;
  v32[0] = 0;
  ProShade::Program::Program((ProShade::Program *)v38);
  ProShade::Program::shader((uint64_t)v38, (uint64_t)&v35, (LiString *)v32, (LiString *)&v31);
  if (v32[0])
    v15 = (const char *)v32[0];
  else
    v15 = "";
  v16 = strlen(v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v15, v16);
  v41 = &off_1E65EB048;
  v43 = 0;
  PCWeakCount::~PCWeakCount(&v42);
  if (v31)
  {
    v17 = (unsigned int *)(v31 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *v31 = 0;
      if (v31)
        v20 = v31 - 12;
      else
        v20 = 0;
      free(v20);
    }
  }
  if (v32[0])
  {
    v21 = (unsigned int *)(v32[0] - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *(_BYTE *)v32[0] = 0;
      if (v32[0])
        v24 = (void *)(v32[0] - 12);
      else
        v24 = 0;
      free(v24);
    }
  }
  if (v34)
  {
    v25 = (unsigned int *)(v34 - 12);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      *v34 = 0;
      if (v34)
        v28 = v34 - 12;
      else
        v28 = 0;
      free(v28);
    }
  }
  v35 = &unk_1E656A338;
  if ((int)v36 < 0)
    v29 = 1;
  else
    v29 = v36;
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize((uint64_t)&v35, 0, v29);
  result = v37;
  if (v37)
    return MEMORY[0x1B5E2914C](v37, 0x1000C8077774924);
  return result;
}

void sub_1B2DBE9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::Node::dump(int *a1, _QWORD *a2, int a3)
{
  int v6;
  const char *v7;
  const char *locale;
  size_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  const std::locale::facet *v24;
  PCArray_base *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  std::locale v33;
  uint64_t v34;
  uint64_t v35;

  if (a3 >= 1)
  {
    v6 = a3;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
      --v6;
    }
    while (v6);
  }
  (*(void (**)(std::locale *__return_ptr, int *))(*(_QWORD *)a1 + 24))(&v33, a1);
  v7 = "";
  if (v33.__locale_)
    locale = (const char *)v33.__locale_;
  else
    locale = "";
  v9 = strlen(locale);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)locale, v9);
  if (v33.__locale_)
  {
    v10 = (unsigned int *)((char *)v33.__locale_ - 12);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      *(_BYTE *)v33.__locale_ = 0;
      if (v33.__locale_)
        v13 = (char *)v33.__locale_ - 12;
      else
        v13 = 0;
      free(v13);
    }
  }
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" (", 2);
  (*(void (**)(std::locale *__return_ptr, int *))(*(_QWORD *)a1 + 120))(&v33, a1);
  if (v33.__locale_)
    v7 = (const char *)v33.__locale_;
  v15 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v15);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
  v17 = a1[10];
  if (v17 > 3)
    v18 = "?";
  else
    v18 = off_1E657EF30[v17];
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  if (v33.__locale_)
  {
    v20 = (unsigned int *)((char *)v33.__locale_ - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *(_BYTE *)v33.__locale_ = 0;
      if (v33.__locale_)
        v23 = (char *)v33.__locale_ - 12;
      else
        v23 = 0;
      free(v23);
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v24 = std::locale::use_facet(&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  v34 = 0;
  v35 = 0;
  v33.__locale_ = (std::locale::__imp *)&unk_1E656A208;
  v25 = (PCArray_base *)(*(uint64_t (**)(int *, std::locale *))(*(_QWORD *)a1 + 64))(a1, &v33);
  v26 = HIDWORD(v34);
  if (SHIDWORD(v34) >= 1)
  {
    v27 = 0;
    v28 = (a3 + 4);
    v29 = 16;
    do
    {
      if (v27 >= SHIDWORD(v34))
        PCArray_base::badIndex(v25);
      v30 = *(_QWORD *)(v35 + v29);
      if (!v30)
        throw_PCNullPointerException(1);
      v25 = (PCArray_base *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v30 + 40))(v30, a2, v28);
      ++v27;
      v29 += 32;
    }
    while (v26 != v27);
  }
  v33.__locale_ = (std::locale::__imp *)&unk_1E656A208;
  if ((int)v34 < 0)
    v31 = 1;
  else
    v31 = v34;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v33, 0, v31);
  result = v35;
  if (v35)
    return MEMORY[0x1B5E2914C](v35, 0x1000C8077774924);
  return result;
}

void sub_1B2DBEDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Node::shortDescription(ProShade::Node *this)
{
  return (*(uint64_t (**)(ProShade::Node *))(*(_QWORD *)this + 24))(this);
}

void ProShade::Node::typeString(ProShade::Node *this@<X0>, LiString *a2@<X8>)
{
  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), a2);
}

uint64_t ProShade::Node::checkType(uint64_t result, const PCString *a2, int a3)
{
  if (*(_DWORD *)(result + 24) != (_DWORD)a2 || *(_DWORD *)(result + 28) != a3)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"type mismatch", a2);
  return result;
}

int8x8_t *ProShade::Node::hash(int8x8_t *this, char a2)
{
  PCHashWriteStream *v3;

  if ((a2 & 1) != 0
    || !*(_QWORD *)&vorr_s8(this[1], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)this[1].i8, *(int8x16_t *)this[1].i8, 8uLL)))
  {
    v3 = (PCHashWriteStream *)operator new();
    PCHashWriteStream::PCHashWriteStream(v3);
    (*(void (**)(int8x8_t *, PCHashWriteStream *))(*(_QWORD *)this + 56))(this, v3);
    *(_OWORD *)this[1].i8 = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v3)->i8;
    (*(void (**)(PCHashWriteStream *))(*(_QWORD *)v3 + 8))(v3);
  }
  return this + 1;
}

void sub_1B2DBEEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1091C40E2C1B576);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Node::setFrequency(ProShade::Node *this)
{
  PCArray_base *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v10 = &unk_1E656A208;
  v2 = (PCArray_base *)(*(uint64_t (**)(ProShade::Node *, void **))(*(_QWORD *)this + 64))(this, &v10);
  v3 = HIDWORD(v11);
  if (SHIDWORD(v11) < 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      if (v5 >= SHIDWORD(v11))
        PCArray_base::badIndex(v2);
      v2 = (PCArray_base *)ProShade::VarT<ProShade::Node>::frequency(v12 + v4);
      if (v6 <= (int)v2)
        v6 = (int)v2;
      if (++v5 >= v3)
        break;
      v4 += 32;
    }
    while (v6 < 3);
  }
  v7 = *((_DWORD *)this + 11);
  if (v6 < v7)
    v7 = v6;
  *((_DWORD *)this + 10) = v7;
  v10 = &unk_1E656A208;
  if ((int)v11 < 0)
    v8 = 1;
  else
    v8 = v11;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v10, 0, v8);
  result = v12;
  if (v12)
    return MEMORY[0x1B5E2914C](v12, 0x1000C8077774924);
  return result;
}

void sub_1B2DBF038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

double ProShade::Node::copyFrom(ProShade::Node *this, const ProShade::Node *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  double result;

  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  if (a2 != this)
  {
    LiString::dec((ProShade::Node *)((char *)this + 32));
    v4 = *((_QWORD *)a2 + 4);
    *((_QWORD *)this + 4) = v4;
    if (v4)
    {
      v5 = (unsigned int *)(v4 - 12);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  return result;
}

uint64_t ProShade::Node::snippet(ProShade::Node *this)
{
  return 0;
}

uint64_t ProShade::Node::getValue(PCString *this, ProShade::Value *a2, uint64_t **a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  result = ProShade::ValueVisitor::alreadyComputed(a3, this, a2);
  if ((result & 1) == 0)
  {
    v17 = 0;
    v18 = 0;
    v16 = &unk_1E656E548;
    v14 = 0;
    v15 = 0;
    v13 = &unk_1E656A208;
    ((void (*)(PCString *, void **))this->var0[2].isa)(this, &v13);
    if (SHIDWORD(v14) >= 1)
    {
      v7 = 0;
      v8 = 16;
      do
      {
        v9 = *(_QWORD *)(v15 + v8);
        if (!v9)
          break;
        v10 = (int)v17 <= SHIDWORD(v17) ? (2 * (HIDWORD(v17) + 1)) | 1 : v17;
        PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(&v16, HIDWORD(v17) + 1, v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v9 + 104))(v9, v18 + 144 * SHIDWORD(v17) - 144, a3);
        ++v7;
        v8 += 32;
      }
      while (v7 < SHIDWORD(v14));
    }
    ((void (*)(PCString *, void **, ProShade::Value *))this->var0[3].data)(this, &v16, a2);
    ProShade::ValueVisitor::addResult(a3, (__CFString *)this, a2);
    v13 = &unk_1E656A208;
    if ((int)v14 < 0)
      v11 = 1;
    else
      v11 = v14;
    PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v13, 0, v11);
    if (v15)
      MEMORY[0x1B5E2914C](v15, 0x1000C8077774924);
    v16 = &unk_1E656E548;
    if ((int)v17 < 0)
      v12 = 1;
    else
      v12 = v17;
    PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(&v16, 0, v12);
    result = v18;
    if (v18)
      return MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
  }
  return result;
}

void sub_1B2DBF280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)&a9);
  PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::~PCArray((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void ProShade::NodeOperator::operator()(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  PC_Sp_counted_base **v14;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    if (!v6)
      goto LABEL_13;
    v7 = a1 + 2;
    do
    {
      v8 = v6[4];
      v9 = v8 >= v5;
      if (v8 >= v5)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 2 && v5 >= v7[4])
    {
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v7 + 48);
      *(_QWORD *)(a3 + 16) = v7[7];
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (const PCSharedCount *)v7 + 8);
    }
    else
    {
LABEL_13:
      v11 = (uint64_t)(a1 + 1);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 8))(a1, a2);
      v13 = *(_QWORD *)(a2 + 16);
      v14 = (PC_Sp_counted_base **)&v13;
      v12 = std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__emplace_unique_key_args<ProShade::Node const*,std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(v11, &v13, (uint64_t)&std::piecewise_construct, &v14);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)(v12 + 5), (const PCSharedCount *)a3);
    }
  }
  else
  {
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a3 + 16) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (const PCSharedCount *)(a2 + 24));
  }
}

void sub_1B2DBF3CC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  v1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::NodeOperator::apply(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    throw_PCNullPointerException(1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(a3, v6, a1);
  v7 = a3[2];
  v8 = *(_QWORD *)(a2 + 16);
  if (v7 != v8)
  {
    if (!v7)
      throw_PCNullPointerException(1);
    if (!v8)
      throw_PCNullPointerException(1);
    if (v7 != v8)
    {
      LiString::dec((LiString *)(v7 + 32));
      v9 = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v7 + 32) = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 - 12);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
    }
  }
}

void sub_1B2DBF4B4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  v1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::Const::create(ProShade::Const *this, double a2)
{
  ProShade::ConstVector *v3;

  v3 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v3, a2);
  return v3;
}

void sub_1B2DBF524(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Const::create(_OWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstVector::ConstVector(v2, a1);
  return v2;
}

{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstVector::ConstVector(v2, a1);
  return v2;
}

void sub_1B2DBF58C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B2DBF648(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Const::create(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstVector::ConstVector(v2, a1);
  return v2;
}

{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstMatrix::ConstMatrix(v2, a1);
  return v2;
}

{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstVector::ConstVector(v2, a1);
  return v2;
}

{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstVector::ConstVector(v2, a1);
  return v2;
}

{
  uint64_t v2;

  v2 = operator new();
  ProShade::ConstVector::ConstVector(v2, a1);
  return v2;
}

void sub_1B2DBF6B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B2DBF71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B2DBF784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C405FD9FD45);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstMatrix::ConstMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t j;

  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)a1 = off_1E657E988;
  *(_QWORD *)(a1 + 176) = off_1E657EA40;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E657E0B0;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  v4 = a1 + 48;
  *(_QWORD *)(a1 + 168) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 176) = &unk_1E657E1B8;
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 88) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 24) = 0x700000003;
  *(_QWORD *)(a1 + 40) = 0x300000000;
  if (a1 + 48 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v4 + j) = *(_QWORD *)(a2 + j);
      v4 += 32;
      a2 += 32;
    }
  }
  return a1;
}

void sub_1B2DBF894(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::Const::create(ProShade::Const *this, const ProShade::Value *a2)
{
  ProShade::ConstVector *v3;

  if ((*((_DWORD *)this + 1) - 5) > 2)
  {
    v3 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v3, this);
  }
  else
  {
    v3 = (ProShade::ConstVector *)operator new();
    ProShade::ConstMatrix::ConstMatrix(v3, this);
  }
  return v3;
}

void sub_1B2DBF938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

ProShade::ConstMatrix *ProShade::ConstMatrix::ConstMatrix(ProShade::ConstMatrix *this, const ProShade::Value *a2)
{
  unsigned int v4;
  void *v5;
  const PCString *v6;
  int Size;

  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 1;
  *(_QWORD *)this = off_1E657E988;
  *((_QWORD *)this + 22) = off_1E657EA40;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::ConstMatrix *)((char *)this + 8));
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657E0B0;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 21) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = &unk_1E657E1B8;
  *((_QWORD *)this + 16) = 0x3FF0000000000000;
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v5 = (void *)*(unsigned int *)a2;
  v4 = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 6) = (_DWORD)v5;
  *((_DWORD *)this + 7) = v4;
  Size = ProShade::shapeGetSize(v4, v6);
  ProShade::copyData(v5, (const PCString *)a2 + 2, 3, (BOOL *)this + 48, Size);
  return this;
}

void sub_1B2DBFA44(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, const ProShade::Value *a2)
{
  unsigned int v4;
  void *v5;
  const PCString *v6;
  int Size;

  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *(_QWORD *)this = off_1E657E6C0;
  *((_QWORD *)this + 10) = off_1E657E778;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::ConstVector *)((char *)this + 8));
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657DF38;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 10) = &unk_1E657E040;
  *((_OWORD *)this + 4) = 0u;
  v5 = (void *)*(unsigned int *)a2;
  v4 = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 6) = (_DWORD)v5;
  *((_DWORD *)this + 7) = v4;
  Size = ProShade::shapeGetSize(v4, v6);
  ProShade::copyData(v5, (const PCString *)a2 + 2, 3, (BOOL *)this + 48, Size);
  return this;
}

void sub_1B2DBFB3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B2DBFBC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B2DBFCE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)&off_1E657E060);
  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B2DBFD70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B2DBFE88(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)&off_1E657E060);
  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B2DBFF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void sub_1B2DC0020(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)&off_1E657E060);
  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this)
{
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *(_QWORD *)this = off_1E657E6C0;
  *((_QWORD *)this + 10) = off_1E657E778;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::ConstVector *)((char *)this + 8));
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657DF38;
  *((_QWORD *)this + 10) = &unk_1E657E040;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1B2DC00E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ConstVector::repr(ProShade::ConstVector *this@<X0>, const PCString *a2@<X1>, LiString *a3@<X8>)
{
  OZChannelBase *v5;
  int Width;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  signed int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  int v19;
  double v20;
  const char *v21;
  size_t v22;
  unsigned int *v23;
  _BYTE *v24;
  unsigned int v25;
  size_t v26;
  const void *v27;
  int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int v31;
  size_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  BOOL v42;
  char *v43;
  int v44;
  int v45;
  size_t v46;
  unsigned int *v47;
  char *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  char *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  char *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  const char *v69;
  const char *v70;
  char *__src;
  _BYTE *v72;

  v72 = 0;
  v5 = (OZChannelBase *)*((unsigned int *)this + 7);
  if (((_DWORD)v5 - 2) >= 3)
  {
    if ((_DWORD)v5 != 1)
    {
      ProShade::shapeString(v5, (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
      v43 = __src;
      if (__src)
        v44 = *((_DWORD *)__src - 2);
      else
        v44 = 0;
      v46 = v44;
      v47 = (unsigned int *)malloc_type_malloc(v44 + 18, 0x8903763CuLL);
      v47[1] = v46 + 5;
      v47[2] = v46 + 6;
      atomic_store(1u, v47);
      atomic_store(0, v47);
      memcpy(v47 + 3, v43, v46);
      v48 = (char *)v47 + v46 + 12;
      *(_DWORD *)v48 = 1497976360;
      v48[4] = 41;
      *((_BYTE *)v47 + v46 + 17) = 0;
      *(_QWORD *)a3 = v47 + 3;
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 + 1, v47));
      if (!__src)
        goto LABEL_72;
      v50 = (unsigned int *)(__src - 12);
      do
      {
        v51 = __ldaxr(v50);
        v42 = --v51 == 0;
      }
      while (__stlxr(v51, v50));
      goto LABEL_66;
    }
    v20 = *((double *)this + 6);
    if (*((_DWORD *)this + 6) == 1)
    {
      if (v20 == 0.0)
        v21 = "false";
      else
        v21 = "true";
      LiString::LiString(a3, v21);
    }
    else
    {
      LiString::format(v20, a3);
      LiString::LiString((LiString *)&__src, ".");
      if ((LiString::contains((char **)a3, (const char **)&__src) & 1) != 0)
      {
        v45 = 0;
      }
      else
      {
        LiString::LiString((LiString *)&v70, "e");
        if ((LiString::contains((char **)a3, &v70) & 1) != 0)
        {
          v45 = 0;
        }
        else
        {
          LiString::LiString((LiString *)&v69, "E");
          v45 = LiString::contains((char **)a3, &v69) ^ 1;
          if (v69)
          {
            v57 = (unsigned int *)(v69 - 12);
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              *v69 = 0;
              if (v69)
                v60 = (char *)(v69 - 12);
              else
                v60 = 0;
              free(v60);
            }
          }
        }
        if (v70)
        {
          v61 = (unsigned int *)(v70 - 12);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            *v70 = 0;
            if (v70)
              v64 = (char *)(v70 - 12);
            else
              v64 = 0;
            free(v64);
          }
        }
      }
      if (__src)
      {
        v65 = (unsigned int *)(__src - 12);
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          *__src = 0;
          if (__src)
            v68 = __src - 12;
          else
            v68 = 0;
          free(v68);
        }
      }
      if (v45)
        LiString::append(a3, ".", 1);
    }
  }
  else
  {
    Width = ProShade::shapeGetWidth(v5, a2);
    if (Width >= 1)
    {
      v7 = 0;
      v8 = (char *)this + 48;
      v9 = Width;
      do
      {
        if (v7)
          LiString::append((LiString *)&v72, ", ", 2);
        if (*((_DWORD *)this + 6) == 1)
        {
          if (*(double *)&v8[8 * v7] == 0.0)
            v10 = "false";
          else
            v10 = "true";
          if (*v10)
          {
            v11 = 0;
            while (v10[++v11])
              ;
          }
          else
          {
            LODWORD(v11) = 0;
          }
          LiString::append((LiString *)&v72, v10, v11);
        }
        else
        {
          LiString::format(*(double *)&v8[8 * v7], (LiString *)&__src);
          if (__src)
            v13 = *((_DWORD *)__src - 2);
          else
            v13 = 0;
          LiString::append((LiString *)&v72, __src, v13);
          if (__src)
          {
            v14 = (unsigned int *)(__src - 12);
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              *__src = 0;
              if (__src)
                v17 = __src - 12;
              else
                v17 = 0;
              free(v17);
            }
          }
        }
        ++v7;
      }
      while (v7 != v9);
    }
    ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
    v18 = __src;
    if (__src)
      v19 = *((_DWORD *)__src - 2);
    else
      v19 = 0;
    v22 = v19;
    v23 = (unsigned int *)malloc_type_malloc(v19 + 14, 0x8903763CuLL);
    v23[1] = v22 + 1;
    v23[2] = v22 + 2;
    atomic_store(1u, v23);
    v24 = v23 + 3;
    atomic_store(0, v23);
    memcpy(v23 + 3, v18, v22);
    v24[v22] = 40;
    v24[v22 + 1] = 0;
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 + 1, v23));
    v26 = (int)v23[1];
    v27 = v72;
    if (v72)
      v28 = *((_DWORD *)v72 - 2);
    else
      v28 = 0;
    v29 = v26 + v28;
    v30 = (unsigned int *)malloc_type_malloc(v29 + 13, 0x8903763CuLL);
    v30[1] = v29;
    v30[2] = v29 + 1;
    atomic_store(1u, v30);
    atomic_store(0, v30);
    memcpy(v30 + 3, v24, v26);
    memcpy((char *)v30 + v26 + 12, v27, v28);
    *((_BYTE *)v30 + v29 + 12) = 0;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    v32 = (int)v30[1];
    v33 = (unsigned int *)malloc_type_malloc(v32 + 14, 0x8903763CuLL);
    v33[1] = v32 + 1;
    v33[2] = v32 + 2;
    atomic_store(1u, v33);
    v34 = v33 + 3;
    atomic_store(0, v33);
    memcpy(v33 + 3, v30 + 3, v32);
    *((_BYTE *)v34 + v32) = 41;
    *((_BYTE *)v34 + v32 + 1) = 0;
    *(_QWORD *)a3 = v33 + 3;
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 + 1, v33));
    do
    {
      v36 = __ldaxr(v30);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v30));
    if (!v37)
      free(v30);
    do
    {
      v38 = __ldaxr(v23);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v23));
    if (!v39)
      free(v23);
    if (__src)
    {
      v40 = (unsigned int *)(__src - 12);
      do
      {
        v41 = __ldaxr(v40);
        v42 = --v41 == 0;
      }
      while (__stlxr(v41, v40));
LABEL_66:
      if (v42)
      {
        *__src = 0;
        if (__src)
          v52 = __src - 12;
        else
          v52 = 0;
        free(v52);
      }
    }
  }
LABEL_72:
  if (v72)
  {
    v53 = (unsigned int *)(v72 - 12);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      *v72 = 0;
      if (v72)
        v56 = v72 - 12;
      else
        v56 = 0;
      free(v56);
    }
  }
}

void sub_1B2DC06B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10, _BYTE *a11, _BYTE *a12)
{
  LiString *v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  if (a9)
  {
    v14 = (unsigned int *)(a9 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v17 = (unsigned int *)(a10 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  LiString::dec(v12);
  if (a12)
  {
    v23 = (unsigned int *)(a12 - 12);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::ConstVector::description(ProShade::ConstVector *this)
{
  return (*(uint64_t (**)(ProShade::ConstVector *))(*(_QWORD *)this + 16))(this);
}

int8x8_t *ProShade::ConstVector::computeHash(ProShade::ConstVector *this, int8x8_t *a2)
{
  return PCHashWriteStream::writeData(a2, (char *)this + 48, 0x20uLL);
}

void ProShade::ConstVector::inputs(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(int *)(a2 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

double ProShade::ConstVector::getFloat(ProShade::ConstVector *this)
{
  return *((double *)this + 6);
}

__n128 ProShade::ConstVector::getVec2@<Q0>(__n128 *this@<X0>, const PCString *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  if (this[1].n128_u32[3] - 5 <= 2)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
  result = this[3];
  *a3 = result;
  return result;
}

double ProShade::ConstVector::getVec3@<D0>(ProShade::ConstVector *this@<X0>, const PCString *a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  if ((*((_DWORD *)this + 7) - 5) <= 2)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
  result = *((double *)this + 8);
  *(_OWORD *)a3 = *((_OWORD *)this + 3);
  *(double *)(a3 + 16) = result;
  return result;
}

__n128 ProShade::ConstVector::getVec4@<Q0>(__n128 *this@<X0>, const PCString *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;
  __n128 v4;

  if (this[1].n128_u32[3] - 5 <= 2)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
  result = this[3];
  v4 = this[4];
  *a3 = result;
  a3[1] = v4;
  return result;
}

void ProShade::ConstVector::getMat3(ProShade::ConstVector *this, const PCString *a2)
{
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"not a matrix", a2);
}

void ProShade::ConstVector::getMat4(ProShade::ConstVector *this, const PCString *a2)
{
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"not a matrix", a2);
}

void ProShade::ConstVector::getData(uint64_t a1, uint64_t a2)
{
  int Size;
  int v5;
  PCArray_base *v6;
  uint64_t v7;
  uint64_t v8;

  Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), (const PCString *)a2);
  if (*(_DWORD *)(a2 + 8) >= Size)
    v5 = *(_DWORD *)(a2 + 8);
  else
    v5 = (2 * Size) | 1;
  PCArray<BOOL,PCArray_Traits<BOOL>>::resize(a2, Size, v5);
  if (Size >= 1)
  {
    v7 = 0;
    v8 = a1 + 48;
    do
    {
      if (v7 >= *(int *)(a2 + 12))
        PCArray_base::badIndex(v6);
      *(_BYTE *)(*(_QWORD *)(a2 + 16) + v7) = *(double *)(v8 + 8 * v7) != 0.0;
      ++v7;
    }
    while (Size != v7);
  }
}

{
  int Size;
  int v5;
  PCArray_base *v6;
  uint64_t v7;
  uint64_t v8;

  Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), (const PCString *)a2);
  if (*(_DWORD *)(a2 + 8) >= Size)
    v5 = *(_DWORD *)(a2 + 8);
  else
    v5 = (2 * Size) | 1;
  PCArray<int,PCArray_Traits<int>>::resize(a2, Size, v5);
  if (Size >= 1)
  {
    v7 = 0;
    v8 = a1 + 48;
    do
    {
      if (v7 >= *(int *)(a2 + 12))
        PCArray_base::badIndex(v6);
      *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v7) = (int)*(double *)(v8 + 8 * v7);
      ++v7;
    }
    while (Size != v7);
  }
}

{
  int Size;
  int v5;
  PCArray_base *v6;
  uint64_t v7;
  uint64_t v8;

  Size = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), (const PCString *)a2);
  if (*(_DWORD *)(a2 + 8) >= Size)
    v5 = *(_DWORD *)(a2 + 8);
  else
    v5 = (2 * Size) | 1;
  PCArray<double,PCArray_Traits<double>>::resize(a2, Size, v5);
  if (Size >= 1)
  {
    v7 = 0;
    v8 = a1 + 48;
    do
    {
      if (v7 >= *(int *)(a2 + 12))
        PCArray_base::badIndex(v6);
      *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v7) = *(_QWORD *)(v8 + 8 * v7);
      ++v7;
    }
    while (Size != v7);
  }
}

PCSharedCount *ProShade::ConstVector::apply@<X0>(PC_Sp_counted_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCShared_base *v2;

  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = a1;
  if (a1)
    v2 = (PCShared_base *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  else
    v2 = 0;
  return PCSharedCount::PCSharedCount(a2 + 3, v2);
}

uint64_t ProShade::ConstVector::atomic(ProShade::ConstVector *this)
{
  return 1;
}

ProShade::ConstVector *ProShade::ConstVector::clone(ProShade::ConstVector *this)
{
  ProShade::ConstVector *v2;
  __int128 v3;

  v2 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v2);
  v3 = *((_OWORD *)this + 4);
  *((_OWORD *)v2 + 3) = *((_OWORD *)this + 3);
  *((_OWORD *)v2 + 4) = v3;
  ProShade::Node::copyFrom(v2, this);
  return v2;
}

void sub_1B2DC0C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void *ProShade::ConstVector::getValue(ProShade::ConstVector *this, ProShade::Value *a2)
{
  unsigned int v3;
  int v4;
  const PCString *v5;
  BOOL *v6;
  int Size;
  void *result;

  v4 = *((_DWORD *)this + 6);
  v3 = *((_DWORD *)this + 7);
  v5 = (const PCString *)((char *)this + 48);
  *(_DWORD *)a2 = v4;
  *((_DWORD *)a2 + 1) = v3;
  v6 = (BOOL *)a2 + 16;
  Size = ProShade::shapeGetSize(v3, (const PCString *)a2);
  result = ProShade::copyData((void *)3, v5, v4, v6, Size);
  *((_QWORD *)a2 + 1) = -1;
  return result;
}

void *ProShade::ConstVector::computeValue(uint64_t a1, const PCString *a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  const PCString *v6;
  BOOL *v7;
  int Size;
  void *result;

  v5 = *(_DWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  v6 = (const PCString *)(a1 + 48);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v4;
  v7 = (BOOL *)(a3 + 16);
  Size = ProShade::shapeGetSize(v4, a2);
  result = ProShade::copyData((void *)3, v6, v5, v7, Size);
  *(_QWORD *)(a3 + 8) = -1;
  return result;
}

ProShade::ConstMatrix *ProShade::ConstMatrix::ConstMatrix(ProShade::ConstMatrix *this)
{
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 1;
  *(_QWORD *)this = off_1E657E988;
  *((_QWORD *)this + 22) = off_1E657EA40;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::ConstMatrix *)((char *)this + 8));
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657E0B0;
  *((_QWORD *)this + 21) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = &unk_1E657E1B8;
  *((_QWORD *)this + 16) = 0x3FF0000000000000;
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void sub_1B2DC0DBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ConstMatrix::repr(ProShade::ConstMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  signed int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  const void *v19;
  int v20;
  size_t v21;
  unsigned int *v22;
  unsigned int v23;
  size_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v39;
  char *__src;
  _BYTE *v41;

  v4 = 0;
  v41 = 0;
  v5 = (char *)this + 48;
LABEL_2:
  v6 = 0;
  while (1)
  {
    LiString::format(*(double *)&v5[32 * v6 + 8 * v4], (LiString *)&__src);
    if (__src)
      v7 = *((_DWORD *)__src - 2);
    else
      v7 = 0;
    LiString::append((LiString *)&v41, __src, v7);
    if (__src)
    {
      v8 = (unsigned int *)(__src - 12);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        *__src = 0;
        if (__src)
          v11 = __src - 12;
        else
          v11 = 0;
        free(v11);
      }
    }
    if (v4 == 3 && v6 == 3)
      break;
    LiString::append((LiString *)&v41, ", ", 2);
    if (++v6 == 4)
    {
      if (++v4 != 4)
        goto LABEL_2;
      break;
    }
  }
  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
  v12 = __src;
  if (__src)
    v13 = *((_DWORD *)__src - 2);
  else
    v13 = 0;
  v14 = v13;
  v15 = (unsigned int *)malloc_type_malloc(v13 + 14, 0x8903763CuLL);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  v16[v14] = 40;
  v16[v14 + 1] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = v41;
  if (v41)
    v20 = *((_DWORD *)v41 - 2);
  else
    v20 = 0;
  v21 = v18 + v20;
  v22 = (unsigned int *)malloc_type_malloc(v21 + 13, 0x8903763CuLL);
  v22[1] = v21;
  v22[2] = v21 + 1;
  atomic_store(1u, v22);
  atomic_store(0, v22);
  memcpy(v22 + 3, v16, v18);
  memcpy((char *)v22 + v18 + 12, v19, v20);
  *((_BYTE *)v22 + v21 + 12) = 0;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v24 = (int)v22[1];
  v25 = (unsigned int *)malloc_type_malloc(v24 + 14, 0x8903763CuLL);
  v25[1] = v24 + 1;
  v25[2] = v24 + 2;
  atomic_store(1u, v25);
  v26 = v25 + 3;
  atomic_store(0, v25);
  memcpy(v25 + 3, v22 + 3, v24);
  *((_BYTE *)v26 + v24) = 41;
  *((_BYTE *)v26 + v24 + 1) = 0;
  *a2 = v25 + 3;
  do
    v27 = __ldaxr(v25);
  while (__stlxr(v27 + 1, v25));
  do
  {
    v28 = __ldaxr(v22);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v22));
  if (!v29)
    free(v22);
  do
  {
    v30 = __ldaxr(v15);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v15));
  if (!v31)
    free(v15);
  if (__src)
  {
    v32 = (unsigned int *)(__src - 12);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      *__src = 0;
      if (__src)
        v35 = __src - 12;
      else
        v35 = 0;
      free(v35);
    }
  }
  if (v41)
  {
    v36 = (unsigned int *)(v41 - 12);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      *v41 = 0;
      if (v41)
        v39 = v41 - 12;
      else
        v39 = 0;
      free(v39);
    }
  }
}

void sub_1B2DC10F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
    free(v11);
  do
  {
    v15 = __ldaxr(v10);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v10));
  if (!v16)
    free(v10);
  if (a9)
  {
    v17 = (unsigned int *)(a9 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v20 = (unsigned int *)(a10 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::ConstMatrix::description(ProShade::ConstMatrix *this)
{
  return (*(uint64_t (**)(ProShade::ConstMatrix *))(*(_QWORD *)this + 16))(this);
}

int8x8_t *ProShade::ConstMatrix::computeHash(ProShade::ConstMatrix *this, int8x8_t *a2)
{
  return PCHashWriteStream::writeData(a2, (char *)this + 48, 0x80uLL);
}

void ProShade::ConstMatrix::inputs(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(int *)(a2 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

void ProShade::ConstMatrix::getFloat(ProShade::ConstMatrix *this, const PCString *a2)
{
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
}

void ProShade::ConstMatrix::getVec2(ProShade::ConstMatrix *this, const PCString *a2)
{
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
}

void ProShade::ConstMatrix::getVec3(ProShade::ConstMatrix *this, const PCString *a2)
{
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
}

void ProShade::ConstMatrix::getVec4(ProShade::ConstMatrix *this, const PCString *a2)
{
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"isMatrix", a2);
}

__n128 ProShade::ConstMatrix::getMat3@<Q0>(ProShade::ConstMatrix *this@<X0>, const PCString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  __n128 result;

  if (*((_DWORD *)this + 7) != 6)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"can't cast to mat3", a2);
  v3 = 0;
  v4 = (__n128 *)((char *)this + 48);
  *a3 = 0x3FF0000000000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  do
  {
    v5 = (__n128 *)&a3[v3];
    result = *v4;
    *v5 = *v4;
    v5[1].n128_u64[0] = v4[1].n128_u64[0];
    v3 += 3;
    v4 += 2;
  }
  while (v3 != 9);
  return result;
}

__n128 ProShade::ConstMatrix::getMat4@<Q0>(__n128 *this@<X0>, const PCString *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 result;
  __n128 v7;

  if (this[1].n128_u32[3] != 7)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"can't cast to mat4", a2);
  v3 = this[8];
  a3[4] = this[7];
  a3[5] = v3;
  v4 = this[10];
  a3[6] = this[9];
  a3[7] = v4;
  v5 = this[4];
  *a3 = this[3];
  a3[1] = v5;
  result = this[5];
  v7 = this[6];
  a3[2] = result;
  a3[3] = v7;
  return result;
}

void ProShade::ConstMatrix::getData(PCArray_base *a1, uint64_t a2)
{
  PCArray_base *v3;
  int v4;
  unsigned int v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;

  v3 = a1;
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 16)
    v5 = 16;
  else
    v5 = *(_DWORD *)(a2 + 8);
  if (v4 >= 16)
    v6 = v5;
  else
    v6 = 33;
  if ((_DWORD)v6 == v4)
  {
    v7 = *(int *)(a2 + 12);
    if ((int)v7 <= 15)
      bzero((void *)(*(_QWORD *)(a2 + 16) + v7), (15 - v7) + 1);
  }
  else
  {
    v8 = (char *)operator new[]();
    bzero(v8, v6);
    v9 = *(_DWORD *)(a2 + 12);
    if (v9 >= 16)
      v10 = 16;
    else
      v10 = v9;
    if (v9 < 1)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v11 = *(char **)(a2 + 16);
      v12 = v8;
      v13 = v10;
      do
      {
        v14 = *v11++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
    }
    if ((int)v10 > v9)
      v9 = v10;
    if (v9 < 16)
      bzero(&v8[v9], (15 - v9) + 1);
    a1 = *(PCArray_base **)(a2 + 16);
    if (a1)
      a1 = (PCArray_base *)MEMORY[0x1B5E2914C](a1, 0x1000C8077774924);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v15 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = 16;
  v16 = (char *)v3 + 48;
  do
  {
    if (v15 >= *(int *)(a2 + 12))
      PCArray_base::badIndex(a1);
    *(_BYTE *)(*(_QWORD *)(a2 + 16) + v15) = *(double *)&v16[8 * v15] != 0.0;
    ++v15;
  }
  while (v15 != 16);
}

{
  PCArray_base *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  int *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;

  v3 = a1;
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 16)
    v5 = 16;
  else
    v5 = *(_DWORD *)(a2 + 8);
  if (v4 >= 16)
    v6 = v5;
  else
    v6 = 33;
  if (v6 == v4)
  {
    v7 = *(int *)(a2 + 12);
    if ((int)v7 <= 15)
      bzero((void *)(*(_QWORD *)(a2 + 16) + 4 * v7), 4 * (15 - v7) + 4);
  }
  else
  {
    v8 = (char *)operator new[]();
    bzero(v8, 4 * v6);
    v9 = *(_DWORD *)(a2 + 12);
    if (v9 >= 16)
      v10 = 16;
    else
      v10 = v9;
    if (v9 < 1)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v11 = *(int **)(a2 + 16);
      v12 = v8;
      v13 = v10;
      do
      {
        v14 = *v11++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
    }
    if ((int)v10 > v9)
      v9 = v10;
    if (v9 < 16)
      bzero(&v8[4 * v9], 4 * (15 - v9) + 4);
    a1 = *(PCArray_base **)(a2 + 16);
    if (a1)
      a1 = (PCArray_base *)MEMORY[0x1B5E2914C](a1, 0x1000C8077774924);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v15 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = 16;
  v16 = (char *)v3 + 48;
  do
  {
    if (v15 >= *(int *)(a2 + 12))
      PCArray_base::badIndex(a1);
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v15) = (int)*(double *)&v16[8 * v15];
    ++v15;
  }
  while (v15 != 16);
}

{
  PCArray_base *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v3 = a1;
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 16)
    v5 = 16;
  else
    v5 = *(_DWORD *)(a2 + 8);
  if (v4 >= 16)
    v6 = v5;
  else
    v6 = 33;
  if (v6 == v4)
  {
    v7 = *(int *)(a2 + 12);
    if ((int)v7 <= 15)
      bzero((void *)(*(_QWORD *)(a2 + 16) + 8 * v7), 8 * (15 - v7) + 8);
  }
  else
  {
    v8 = (char *)operator new[]();
    bzero(v8, 8 * v6);
    v9 = *(_DWORD *)(a2 + 12);
    if (v9 >= 16)
      v10 = 16;
    else
      v10 = v9;
    if (v9 < 1)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v11 = *(uint64_t **)(a2 + 16);
      v12 = v8;
      v13 = v10;
      do
      {
        v14 = *v11++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
    }
    if ((int)v10 > v9)
      v9 = v10;
    if (v9 < 16)
      bzero(&v8[8 * v9], 8 * (15 - v9) + 8);
    a1 = *(PCArray_base **)(a2 + 16);
    if (a1)
      a1 = (PCArray_base *)MEMORY[0x1B5E2914C](a1, 0x1000C8077774924);
    *(_QWORD *)(a2 + 16) = v8;
  }
  v15 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = 16;
  v16 = (char *)v3 + 48;
  do
  {
    if (v15 >= *(int *)(a2 + 12))
      PCArray_base::badIndex(a1);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v15) = *(_QWORD *)&v16[8 * v15];
    ++v15;
  }
  while (v15 != 16);
}

PCSharedCount *ProShade::ConstMatrix::apply@<X0>(PC_Sp_counted_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCShared_base *v2;

  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = a1;
  if (a1)
    v2 = (PCShared_base *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  else
    v2 = 0;
  return PCSharedCount::PCSharedCount(a2 + 3, v2);
}

uint64_t ProShade::ConstMatrix::atomic(ProShade::ConstMatrix *this)
{
  return 1;
}

ProShade::ConstMatrix *ProShade::ConstMatrix::clone(ProShade::ConstMatrix *this)
{
  ProShade::ConstMatrix *v2;

  v2 = (ProShade::ConstMatrix *)operator new();
  ProShade::ConstMatrix::ConstMatrix(v2);
  ProShade::ConstMatrix::copyFrom(v2, this);
  return v2;
}

void sub_1B2DC17E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C405FD9FD45);
  _Unwind_Resume(a1);
}

double ProShade::ConstMatrix::copyFrom(ProShade::Node *this, const ProShade::Node *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t i;

  if (a2 != this)
  {
    v2 = 0;
    v3 = (char *)a2 + 48;
    v4 = (char *)this + 48;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)&v4[i] = *(_QWORD *)&v3[i];
      ++v2;
      v4 += 32;
      v3 += 32;
    }
    while (v2 != 4);
  }
  return ProShade::Node::copyFrom(this, a2);
}

void *ProShade::ConstMatrix::getValue(ProShade::ConstMatrix *this, ProShade::Value *a2)
{
  unsigned int v3;
  int v4;
  const PCString *v5;
  BOOL *v6;
  int Size;
  void *result;

  v4 = *((_DWORD *)this + 6);
  v3 = *((_DWORD *)this + 7);
  v5 = (const PCString *)((char *)this + 48);
  *(_DWORD *)a2 = v4;
  *((_DWORD *)a2 + 1) = v3;
  v6 = (BOOL *)a2 + 16;
  Size = ProShade::shapeGetSize(v3, (const PCString *)a2);
  result = ProShade::copyData((void *)3, v5, v4, v6, Size);
  *((_QWORD *)a2 + 1) = -1;
  return result;
}

void *ProShade::ConstMatrix::computeValue(uint64_t a1, const PCString *a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  const PCString *v6;
  BOOL *v7;
  int Size;
  void *result;

  v5 = *(_DWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  v6 = (const PCString *)(a1 + 48);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v4;
  v7 = (BOOL *)(a3 + 16);
  Size = ProShade::shapeGetSize(v4, a2);
  result = ProShade::copyData((void *)3, v6, v5, v7, Size);
  *(_QWORD *)(a3 + 8) = -1;
  return result;
}

ProShade::Ctor *ProShade::Ctor::Ctor(ProShade::Ctor *this)
{
  uint64_t v2;
  char *v3;

  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 1;
  *(_QWORD *)this = off_1E657EAE8;
  *((_QWORD *)this + 22) = off_1E657EBA0;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::Ctor *)((char *)this + 8));
  v2 = 0;
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657E228;
  *((_QWORD *)this + 22) = &unk_1E657E2E0;
  do
  {
    v3 = (char *)this + v2;
    *((_QWORD *)v3 + 6) = &unk_1E6569AC8;
    *((_QWORD *)v3 + 8) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)((char *)this + v2 + 72));
    v2 += 32;
  }
  while (v2 != 128);
  return this;
}

void sub_1B2DC19BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Ctor::makeWidth(int a1@<W0>, const PCString *a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  unsigned int v5;
  PC_Sp_counted_base *var0;
  int Width;
  PC_Sp_counted_base *v10;
  ProShade::Ctor *v11;
  const PCString *v12;
  PC_Sp_counted_base *v13;
  const PCString *v14;
  uint64_t v15;
  uint64_t v16;
  PC_Sp_counted_base *v17;
  const PCString *v18;

  v5 = a2;
  var0 = a3[2].var0;
  if (!var0)
    throw_PCNullPointerException(1);
  Width = ProShade::shapeGetWidth(*((_DWORD *)var0 + 7), a2);
  if (v5 != 1 || Width != 1)
    goto LABEL_9;
  v10 = a3[2].var0;
  if (!v10)
    throw_PCNullPointerException(1);
  if (*((_DWORD *)v10 + 6) == a1)
  {
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a4[2].var0 = v10;
    PCSharedCount::PCSharedCount(a4 + 3, a3 + 3);
  }
  else
  {
LABEL_9:
    v11 = (ProShade::Ctor *)operator new();
    ProShade::Ctor::Ctor(v11);
    *((_DWORD *)v11 + 6) = a1;
    if (v5 - 1 >= 4)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v12);
    *((_DWORD *)v11 + 7) = v5;
    v13 = a3[2].var0;
    if (!v13)
      throw_PCNullPointerException(1);
    if (ProShade::shapeGetWidth(*((_DWORD *)v13 + 7), v12) == 1)
    {
      v15 = v5;
      v16 = (uint64_t)v11 + 48;
      do
      {
        ProShade::VarT<ProShade::Node>::operator=(v16, a3);
        v16 += 32;
        --v15;
      }
      while (v15);
    }
    else
    {
      v17 = a3[2].var0;
      if (!v17)
        throw_PCNullPointerException(1);
      if (ProShade::shapeGetWidth(*((_DWORD *)v17 + 7), v14) != v5)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"x not scalar", v18);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v11 + 48, a3);
    }
    ProShade::Node::setFrequency(v11);
    a4->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a4[2].var0 = (PC_Sp_counted_base *)v11;
    PCSharedCount::PCSharedCount(a4 + 3, (ProShade::Ctor *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
  }
}

void sub_1B2DC1BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  const PCString *v10;
  int Width;
  const PCString *v12;
  const PCString *v13;
  int v14;

  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)a1 = off_1E657EAE8;
  *(_QWORD *)(a1 + 176) = off_1E657EBA0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  v8 = 0;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657E228;
  *(_QWORD *)(a1 + 176) = &unk_1E657E2E0;
  do
  {
    v9 = a1 + v8;
    *(_QWORD *)(v9 + 48) = &unk_1E6569AC8;
    *(_QWORD *)(v9 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v8 + 72));
    v8 += 32;
  }
  while (v8 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  Width = ProShade::shapeGetWidth(a3[7], v10);
  v14 = ProShade::shapeGetWidth(a4[7], v12) + Width;
  if (v14 <= 1)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at least vec2", v13);
  if (v14 >= 5)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at most vec4", v13);
  *(_DWORD *)(a1 + 28) = v14;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 64), (PCShared_base *)a3);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 96), (PCShared_base *)a4);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B2DC1D18(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  const PCString *v12;
  int Width;
  const PCString *v14;
  int v15;
  const PCString *v16;
  const PCString *v17;
  int v18;

  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)a1 = off_1E657EAE8;
  *(_QWORD *)(a1 + 176) = off_1E657EBA0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  v10 = 0;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657E228;
  *(_QWORD *)(a1 + 176) = &unk_1E657E2E0;
  do
  {
    v11 = a1 + v10;
    *(_QWORD *)(v11 + 48) = &unk_1E6569AC8;
    *(_QWORD *)(v11 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v10 + 72));
    v10 += 32;
  }
  while (v10 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  Width = ProShade::shapeGetWidth(a3[7], v12);
  v15 = ProShade::shapeGetWidth(a4[7], v14);
  v18 = v15 + Width + ProShade::shapeGetWidth(a5[7], v16);
  if (v18 <= 2)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at least vec3", v17);
  if (v18 >= 5)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at most vec4", v17);
  *(_DWORD *)(a1 + 28) = v18;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 64), (PCShared_base *)a3);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 96), (PCShared_base *)a4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 128), (PCShared_base *)a5);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B2DC1F04(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v12;
  uint64_t v13;
  const PCString *v14;
  int Width;
  const PCString *v16;
  int v17;
  const PCString *v18;
  int v19;
  const PCString *v20;
  const PCString *v21;
  int v22;

  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)a1 = off_1E657EAE8;
  *(_QWORD *)(a1 + 176) = off_1E657EBA0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  v12 = 0;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657E228;
  *(_QWORD *)(a1 + 176) = &unk_1E657E2E0;
  do
  {
    v13 = a1 + v12;
    *(_QWORD *)(v13 + 48) = &unk_1E6569AC8;
    *(_QWORD *)(v13 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v12 + 72));
    v12 += 32;
  }
  while (v12 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  Width = ProShade::shapeGetWidth(a3[7], v14);
  v17 = ProShade::shapeGetWidth(a4[7], v16);
  v19 = ProShade::shapeGetWidth(a5[7], v18);
  v22 = v17 + Width + v19 + ProShade::shapeGetWidth(a6[7], v20);
  if (v22 <= 3)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at least vec4", v21);
  if (v22 != 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"at most vec4", v21);
  *(_DWORD *)(a1 + 28) = 4;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 64), (PCShared_base *)a3);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 96), (PCShared_base *)a4);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 128), (PCShared_base *)a5);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a1 + 160), (PCShared_base *)a6);
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B2DC2110(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::Ctor(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)a1 = off_1E657EAE8;
  *(_QWORD *)(a1 + 176) = off_1E657EBA0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  v10 = 0;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657E228;
  *(_QWORD *)(a1 + 176) = &unk_1E657E2E0;
  do
  {
    v11 = a1 + v10;
    *(_QWORD *)(v11 + 48) = &unk_1E6569AC8;
    *(_QWORD *)(v11 + 64) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + v10 + 72));
    v10 += 32;
  }
  while (v10 != 128);
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 44) = a4;
  if (*(int *)(a5 + 12) >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(a1 + 48 + v12, (const PCSharedCount *)(*(_QWORD *)(a5 + 16) + v12));
      ++v13;
      v12 += 32;
    }
    while (v13 < *(int *)(a5 + 12));
  }
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  return a1;
}

void sub_1B2DC22BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t i;

  for (i = 0; i != -128; i -= 32)
  {
    *(_QWORD *)(v1 + i + 144) = v3 + 16;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + i + 168));
  }
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E657E300);
  *(_QWORD *)(v1 + 176) = &off_1E65EB048;
  *(_BYTE *)(v1 + 192) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Ctor::repr(ProShade::Ctor *this@<X0>, const PCString *a2@<X1>, _QWORD *a3@<X8>)
{
  int Size;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  signed int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  size_t v19;
  unsigned int *v20;
  _BYTE *v21;
  unsigned int v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  char *__src;
  _BYTE *v46;

  v46 = 0;
  Size = ProShade::shapeGetSize(*((_DWORD *)this + 7), a2);
  if (Size >= 1)
  {
    v6 = 0;
    v7 = Size;
    do
    {
      v8 = (char *)this + 32 * v6;
      v11 = *((_QWORD *)v8 + 8);
      v10 = (uint64_t *)(v8 + 64);
      v9 = v11;
      if (!v11)
        break;
      if (v6)
      {
        LiString::append((LiString *)&v46, ", ", 2);
        v9 = *v10;
        if (!*v10)
          throw_PCNullPointerException(1);
      }
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v9 + 16))(&__src);
      if (__src)
        v12 = *((_DWORD *)__src - 2);
      else
        v12 = 0;
      LiString::append((LiString *)&v46, __src, v12);
      if (__src)
      {
        v13 = (unsigned int *)(__src - 12);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          *__src = 0;
          if (__src)
            v16 = __src - 12;
          else
            v16 = 0;
          free(v16);
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&__src);
  v17 = __src;
  if (__src)
    v18 = *((_DWORD *)__src - 2);
  else
    v18 = 0;
  v19 = v18;
  v20 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v20[1] = v19 + 1;
  v20[2] = v19 + 2;
  atomic_store(1u, v20);
  v21 = v20 + 3;
  atomic_store(0, v20);
  memcpy(v20 + 3, v17, v19);
  v21[v19] = 40;
  v21[v19 + 1] = 0;
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v23 = (int)v20[1];
  v24 = v46;
  if (v46)
    v25 = *((_DWORD *)v46 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v21, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *a3 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  do
  {
    v35 = __ldaxr(v20);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v20));
  if (!v36)
    free(v20);
  if (__src)
  {
    v37 = (unsigned int *)(__src - 12);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      *__src = 0;
      if (__src)
        v40 = __src - 12;
      else
        v40 = 0;
      free(v40);
    }
  }
  if (v46)
  {
    v41 = (unsigned int *)(v46 - 12);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      *v46 = 0;
      if (v46)
        v44 = v46 - 12;
      else
        v44 = 0;
      free(v44);
    }
  }
}

void sub_1B2DC2670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
    free(v11);
  do
  {
    v15 = __ldaxr(v10);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v10));
  if (!v16)
    free(v10);
  if (a9)
  {
    v17 = (unsigned int *)(a9 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v20 = (unsigned int *)(a10 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Ctor::description(LiString *a1@<X8>)
{
  LiString::LiString(a1, "Constructor");
}

void ProShade::Ctor::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "");
}

uint64_t ProShade::Ctor::computeHash(ProShade::Ctor *this, int8x8_t *a2)
{
  const PCString *v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  __n128 v8;

  PCHashWriteStream::writeValue(a2, "Ctor");
  result = ProShade::shapeGetSize(*((_DWORD *)this + 7), v4);
  if ((int)result >= 1)
  {
    v6 = result;
    v7 = (char *)this + 48;
    do
    {
      if (!*((_QWORD *)v7 + 2))
        break;
      ProShade::VarT<ProShade::Node>::hash((uint64_t)v7, &v8);
      result = (uint64_t)PCHashWriteStream::writeValue(a2, (const PCHash128 *)&v8);
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t ProShade::Ctor::inputs(uint64_t a1, uint64_t a2)
{
  int v4;
  const PCString *v5;
  uint64_t result;
  uint64_t v7;
  const PCSharedCount *v8;
  int v9;
  int v10;

  if (*(int *)(a2 + 8) < 0)
    v4 = 1;
  else
    v4 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v4);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 28), v5);
  if ((int)result >= 1)
  {
    v7 = result;
    v8 = (const PCSharedCount *)(a1 + 48);
    do
    {
      if (v8[2].var0)
      {
        v9 = *(_DWORD *)(a2 + 12);
        if (*(_DWORD *)(a2 + 8) <= v9)
          v10 = (2 * (v9 + 1)) | 1;
        else
          v10 = *(_DWORD *)(a2 + 8);
        PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v9 + 1, v10);
        result = ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, v8);
      }
      v8 += 4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t ProShade::Ctor::apply@<X0>(uint64_t a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v6;
  char v7;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  PCSharedCount v14[3];
  PCSharedCount v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = 0;
  v7 = 0;
  v18 = 0;
  v16 = &unk_1E656A208;
  v17 = 0;
  do
  {
    (**a2)(v14, a2, a1 + v6 + 48);
    var0 = v14[2].var0;
    v9 = *(PC_Sp_counted_base **)(a1 + v6 + 64);
    if ((int)v17 <= SHIDWORD(v17))
      v10 = (2 * (HIDWORD(v17) + 1)) | 1;
    else
      v10 = v17;
    PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v16, HIDWORD(v17) + 1, v10);
    ProShade::VarT<ProShade::Node>::operator=(v18 + 32 * SHIDWORD(v17) - 32, v14);
    v7 |= var0 != v9;
    v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v15);
    v6 += 32;
  }
  while (v6 != 128);
  if ((v7 & 1) != 0)
  {
    v11 = operator new();
    ProShade::Ctor::Ctor(v11, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 44), (uint64_t)&v16);
    a1 = v11;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)a1;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
  v16 = &unk_1E656A208;
  if ((int)v17 < 0)
    v12 = 1;
  else
    v12 = v17;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v16, 0, v12);
  result = v18;
  if (v18)
    return MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
  return result;
}

void sub_1B2DC2A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C406391F85BLL);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Ctor::atomic(ProShade::Ctor *this)
{
  return 0;
}

ProShade::Ctor *ProShade::Ctor::clone(ProShade::Ctor *this)
{
  ProShade::Ctor *v2;

  v2 = (ProShade::Ctor *)operator new();
  ProShade::Ctor::Ctor(v2);
  ProShade::Ctor::copyFrom(v2, this);
  return v2;
}

void sub_1B2DC2B08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

double ProShade::Ctor::copyFrom(ProShade::Ctor *this, const ProShade::Ctor *a2)
{
  uint64_t i;

  for (i = 48; i != 176; i += 32)
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)this + i, (const PCSharedCount *)((char *)a2 + i));
  return ProShade::Node::copyFrom(this, a2);
}

uint64_t ProShade::Ctor::computeValue(uint64_t a1, uint64_t a2, ProShade::Value *this)
{
  int AllocSize;
  BOOL *v7;
  const PCString *v8;
  int TypeSize;
  const PCString *v10;
  uint64_t result;
  const PCString *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const PCString *v16;
  int Size;
  const PCString *v18;
  BOOL v19;
  int v20;

  *(_QWORD *)this = *(_QWORD *)(a1 + 24);
  AllocSize = ProShade::Value::getAllocSize(this, (const PCString *)a2);
  v7 = (BOOL *)this + 16;
  bzero((char *)this + 16, AllocSize);
  *((_QWORD *)this + 1) = -1;
  TypeSize = ProShade::Value::getTypeSize(this, v8);
  result = ProShade::shapeGetWidth(*(_DWORD *)(a1 + 28), v10);
  v13 = result;
  if (*(int *)(a2 + 12) >= 1)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (const PCString *)(*(_QWORD *)(a2 + 16) + v14);
      Size = ProShade::shapeGetSize(HIDWORD(v16->var0), v12);
      v19 = __OFSUB__(v13, Size);
      v13 -= Size;
      if (v13 < 0 != v19)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"too much data for constructor", v18);
      v20 = Size;
      result = (uint64_t)ProShade::copyData((void *)LODWORD(v16->var0), v16 + 2, *(_DWORD *)this, v7, Size);
      v7 += v20 * TypeSize;
      ++v15;
      v14 += 144;
    }
    while (v15 < *(int *)(a2 + 12));
  }
  *((_QWORD *)this + 1) = -1;
  if (v13 > 0)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"too little data for constructor", v12);
  return result;
}

uint64_t ProShade::Value::getTypeSize(ProShade::Value *this, const PCString *a2)
{
  uint64_t v2;

  v2 = *(int *)this;
  if (v2 >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", a2);
  return dword_1B355BE80[v2];
}

ProShade::Varying *ProShade::Varying::Varying(ProShade::Varying *this)
{
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *(_QWORD *)this = off_1E657EC48;
  *((_QWORD *)this + 10) = off_1E657ED00;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::Varying *)((char *)this + 8));
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657E340;
  *((_QWORD *)this + 10) = &unk_1E657E3F8;
  *((_QWORD *)this + 6) = &unk_1E6569AC8;
  *((_QWORD *)this + 8) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 9);
  return this;
}

void sub_1B2DC2D50(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E657E418);
  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

ProShade::Varying *ProShade::Varying::Varying(ProShade::Varying *this, ProShade::Node *a2)
{
  PCShared_base *v4;

  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *(_QWORD *)this = off_1E657EC48;
  *((_QWORD *)this + 10) = off_1E657ED00;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::Varying *)((char *)this + 8));
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657E340;
  *((_QWORD *)this + 10) = &unk_1E657E3F8;
  *((_QWORD *)this + 6) = &unk_1E6569AC8;
  *((_QWORD *)this + 8) = a2;
  if (a2)
    v4 = (ProShade::Node *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v4 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 9, v4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 10) = 3;
  return this;
}

void sub_1B2DC2E54(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E657E418);
  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Varying::repr(ProShade::Varying *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  _BYTE *v19;

  v3 = *((_QWORD *)this + 8);
  if (!v3)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v3 + 16))(&v19);
  v4 = v19;
  if (v19)
    v5 = *((_DWORD *)v19 - 2);
  else
    v5 = 0;
  v6 = (char *)malloc_type_malloc(v5 + 21, 0x8903763CuLL);
  v7 = v5 + 8;
  *((_DWORD *)v6 + 2) = v5 + 9;
  atomic_store(1u, (unsigned int *)v6);
  atomic_store(0, (unsigned int *)v6);
  *(_QWORD *)(v6 + 12) = 0x28676E6979726176;
  *((_DWORD *)v6 + 1) = v7;
  memcpy(v6 + 20, v4, v5);
  v6[v7 + 12] = 0;
  do
    v8 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v8 + 1, (unsigned int *)v6));
  v9 = *((int *)v6 + 1);
  v10 = (unsigned int *)malloc_type_malloc(v9 + 14, 0x8903763CuLL);
  v10[1] = v9 + 1;
  v10[2] = v9 + 2;
  atomic_store(1u, v10);
  v11 = v10 + 3;
  atomic_store(0, v10);
  memcpy(v10 + 3, v6 + 12, v9);
  *((_BYTE *)v11 + v9) = 41;
  *((_BYTE *)v11 + v9 + 1) = 0;
  *a2 = v10 + 3;
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 + 1, v10));
  do
  {
    v13 = __ldaxr((unsigned int *)v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v6));
  if (!v14)
    free(v6);
  if (v19)
  {
    v15 = (unsigned int *)(v19 - 12);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      *v19 = 0;
      if (v19)
        v18 = v19 - 12;
      else
        v18 = 0;
      free(v18);
    }
  }
}

void sub_1B2DC3038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
    free(v10);
  if (a10)
  {
    v14 = (unsigned int *)(a10 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Varying::description(LiString *a1@<X8>)
{
  LiString::LiString(a1, "varying");
}

int8x8_t *ProShade::Varying::computeHash(ProShade::Varying *this, int8x8_t *a2)
{
  __n128 v5;

  PCHashWriteStream::writeValue(a2, "Varying");
  ProShade::VarT<ProShade::Node>::hash((uint64_t)this + 48, &v5);
  return PCHashWriteStream::writeValue(a2, (const PCHash128 *)&v5);
}

uint64_t ProShade::Varying::inputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  PCArray_base *v5;

  if (*(int *)(a2 + 8) >= 1)
    v4 = *(_DWORD *)(a2 + 8);
  else
    v4 = 3;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 1, v4);
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(v5);
  return ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16), a1 + 6);
}

void ProShade::Varying::apply(ProShade::Node **a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  ProShade::Node **v3;
  void *v5;
  ProShade::Node *v6;
  PCSharedCount v7;

  v3 = a1;
  (**a2)(&v5, a2, (uint64_t)(a1 + 6));
  if (v6 != v3[8])
  {
    v3 = (ProShade::Node **)operator new();
    ProShade::Varying::Varying((ProShade::Varying *)v3, v6);
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v3 + *((_QWORD *)*v3 - 3)));
  v5 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B2DC3210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1B5E29170](v4, 0x10B1C40515157B5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Varying::atomic(ProShade::Varying *this)
{
  return 0;
}

ProShade::Varying *ProShade::Varying::clone(const PCSharedCount *this)
{
  ProShade::Varying *v2;

  v2 = (ProShade::Varying *)operator new();
  ProShade::Varying::Varying(v2);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v2 + 48, this + 6);
  ProShade::Node::copyFrom(v2, (const ProShade::Node *)this);
  return v2;
}

void sub_1B2DC32B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40515157B5);
  _Unwind_Resume(a1);
}

void ProShade::Varying::computeValue(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
}

void ProShade::Selector_base::_select(uint64_t a1@<X0>, const PCString *a2@<X1>, PCSharedCount *a3@<X8>)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void *v8;
  void *v9;
  _QWORD *v10;
  const ProShade::Value *v11;
  ProShade::ConstVector *v12;
  _QWORD *v13;
  PCShared_base *v14;
  char *v15;
  const PCString *v16;
  const void *v17[2];
  _QWORD *v18;
  PCSharedCount v19;
  const void *v20;
  OZChannelBase v21;
  uint64_t v22;

  v3 = a2;
  v22 = *MEMORY[0x1E0C80C00];
  v5 = -8;
  if (a2 >= 0x42)
    v5 = 0;
  v6 = a1 + v5;
  if (a2 > 0x41)
    v7 = 0;
  else
    v7 = dword_1B355BC4C[(int)a2];
  if (v7 > (int)ProShade::VarT<ProShade::Node>::width(v6, a2))
  {
    LiString::LiString((LiString *)&v20, "selector ");
    v15 = (char *)ProShade::selection_repr(v3);
    operator+(&v20, v15, v17);
    operator+(v17, " out of range", &v21);
    ProShade::Error<PCBadIndexException>::raise<LiString>(&v21, v16);
  }
  v8 = *(const void **)(v6 + 16);
  if (v8)
  else
    v9 = 0;
  v10 = (_QWORD *)operator new();
  ProShade::Selector::Selector((uint64_t)v10, *(_QWORD *)(v6 + 16), v3);
  v17[0] = &unk_1E657EF00;
  v18 = v10;
  PCSharedCount::PCSharedCount(&v19, (PCShared_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  if (v9)
  {
    v21.var0 = 0;
    v21.var1 = (OZFactory *)-1;
    v20 = 0;
    if (!v18)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD *, OZChannelBase *, const void **))(*v18 + 104))(v18, &v21, &v20);
    v12 = ProShade::Const::create((ProShade::Const *)&v21, v11);
    a3->var0 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(a3 + 1, (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    ProShade::ValueVisitor::~ValueVisitor((ProShade::ValueVisitor *)&v20);
  }
  else
  {
    v13 = v18;
    a3->var0 = (PC_Sp_counted_base *)v18;
    if (v13)
      v14 = (PCShared_base *)((char *)v13 + *(_QWORD *)(*v13 - 24));
    else
      v14 = 0;
    PCSharedCount::PCSharedCount(a3 + 1, v14);
  }
  v17[0] = &unk_1E657EF00;
  PCSharedCount::~PCSharedCount(&v19);
}

void sub_1B2DC34E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13, _BYTE *a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (a14)
  {
    v15 = (unsigned int *)(a14 - 12);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      *a14 = 0;
      free(a14 - 12);
    }
  }
  if (a9)
  {
    v18 = (unsigned int *)(a9 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a13)
  {
    v21 = (unsigned int *)(a13 - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *a13 = 0;
      free(a13 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Error<PCBadIndexException>::raise<LiString>(OZChannelBase *a1, const PCString *a2)
{
  PCException *exception;
  const char *var0;
  PCString v5;

  OZChannelBase::setRangeName(a1, a2);
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  if (a1->var0)
    var0 = (const char *)a1->var0;
  else
    var0 = "";
  PCString::PCString(&v5, var0);
  PCException::PCException(exception, &v5);
  *(_QWORD *)exception = &unk_1E6512AB0;
}

void sub_1B2DC3684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

const char *ProShade::selection_repr(unsigned int a1)
{
  if (a1 > 0x41)
    return "";
  else
    return off_1E657EF50[a1];
}

uint64_t ProShade::Selector::Selector(uint64_t a1, uint64_t a2, unsigned int a3)
{
  PCShared_base *v6;
  uint64_t v7;
  int v8;
  const PCString *v9;

  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)a1 = off_1E657EDA8;
  *(_QWORD *)(a1 + 88) = off_1E657EE60;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 8));
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 3;
  *(_QWORD *)a1 = &off_1E657E470;
  *(_QWORD *)(a1 + 88) = &unk_1E657E528;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_DWORD *)(a1 + 80) = a3;
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    throw_PCNullPointerException(1);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v7 + 24);
  v8 = ProShade::selection_width(a3);
  if (v8 != 1)
  {
    if ((*(_DWORD *)(v7 + 28) - 5) > 2)
    {
      if ((v8 - 1) < 4)
        goto LABEL_11;
    }
    else if ((v8 - 2) < 3)
    {
      v8 += 3;
      goto LABEL_11;
    }
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"invalid size", v9);
  }
LABEL_11:
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

void sub_1B2DC3820(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 48) = v4 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E657E548);
  *(_QWORD *)(v1 + 88) = &off_1E65EB048;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::VarT<ProShade::Selector>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E657EF00;
  PCSharedCount::~PCSharedCount(a1 + 3);
  return a1;
}

ProShade::Selector *ProShade::Selector::Selector(ProShade::Selector *this)
{
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  *(_QWORD *)this = off_1E657EDA8;
  *((_QWORD *)this + 11) = off_1E657EE60;
  PCWorkingColorVector::PCWorkingColorVector((ProShade::Selector *)((char *)this + 8));
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 11) = 3;
  *(_QWORD *)this = &off_1E657E470;
  *((_QWORD *)this + 11) = &unk_1E657E528;
  *((_QWORD *)this + 6) = &unk_1E6569AC8;
  *((_QWORD *)this + 8) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 9);
  return this;
}

void sub_1B2DC3948(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E657E548);
  *(_QWORD *)(v1 + 88) = &off_1E65EB048;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::selection_width(unsigned int a1)
{
  if (a1 > 0x41)
    return 0;
  else
    return dword_1B355BD54[a1];
}

void ProShade::Selector::repr(ProShade::Selector *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  const char *v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  size_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;

  v4 = *((_QWORD *)this + 8);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v30);
  v5 = v30;
  if (v30)
    v6 = *((_DWORD *)v30 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 15, 0x8903763CuLL);
  v11[1] = v10 + 2;
  v11[2] = v10 + 3;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  *(_WORD *)&v12[v10] = 11817;
  v12[v10 + 2] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = ProShade::selection_repr(*((_DWORD *)this + 20));
  v15 = v14;
  v16 = (int)v11[1];
  if (*v14)
  {
    v17 = 0;
    while (v14[++v17])
      ;
  }
  else
  {
    LODWORD(v17) = 0;
  }
  v19 = v16 + (int)v17;
  v20 = (unsigned int *)malloc_type_malloc(v19 + 13, 0x8903763CuLL);
  v20[1] = v19;
  v20[2] = v19 + 1;
  atomic_store(1u, v20);
  atomic_store(0, v20);
  memcpy(v20 + 3, v12, v16);
  memcpy((char *)v20 + v16 + 12, v15, (int)v17);
  *((_BYTE *)v20 + v19 + 12) = 0;
  *a2 = v20 + 3;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
  {
    v22 = __ldaxr(v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v11));
  if (!v23)
    free(v11);
  do
  {
    v24 = __ldaxr(v7);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v7));
  if (!v25)
    free(v7);
  if (v30)
  {
    v26 = (unsigned int *)(v30 - 12);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      *v30 = 0;
      if (v30)
        v29 = v30 - 12;
      else
        v29 = 0;
      free(v29);
    }
  }
}

void sub_1B2DC3BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
    free(v11);
  do
  {
    v15 = __ldaxr(v10);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v10));
  if (!v16)
    free(v10);
  if (a10)
  {
    v17 = (unsigned int *)(a10 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Selector::description(ProShade::Selector *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  const char *v5;
  const void *v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;

  LiString::LiString((LiString *)&v17, ".");
  v4 = ProShade::selection_repr(*((_DWORD *)this + 20));
  v5 = v4;
  v6 = v17;
  if (v17)
    v7 = *((_DWORD *)v17 - 2);
  else
    v7 = 0;
  if (*v4)
  {
    v8 = 0;
    while (v4[++v8])
      ;
  }
  else
  {
    LODWORD(v8) = 0;
  }
  v10 = (int)v8 + (uint64_t)v7;
  v11 = (unsigned int *)malloc_type_malloc(v10 + 13, 0x8903763CuLL);
  v11[1] = v10;
  v11[2] = v10 + 1;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  memcpy(v11 + 3, v6, v7);
  memcpy((char *)v11 + v7 + 12, v5, (int)v8);
  *((_BYTE *)v11 + v10 + 12) = 0;
  *a2 = v11 + 3;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  if (v17)
  {
    v13 = (unsigned int *)(v17 - 12);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      *v17 = 0;
      if (v17)
        v16 = v17 - 12;
      else
        v16 = 0;
      free(v16);
    }
  }
}

void sub_1B2DC3DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::Selector::computeHash(ProShade::Selector *this, int8x8_t *a2)
{
  uint64_t v4;
  const PCHash128 *v5;

  PCHashWriteStream::writeValue(a2, "Selector");
  v4 = *((_QWORD *)this + 8);
  if (!v4)
    throw_PCNullPointerException(1);
  v5 = (const PCHash128 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, 0);
  PCHashWriteStream::writeValue(a2, v5);
  return (*(uint64_t (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((unsigned int *)this + 20));
}

uint64_t ProShade::Selector::inputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  PCArray_base *v5;

  if (*(int *)(a2 + 8) >= 1)
    v4 = *(_DWORD *)(a2 + 8);
  else
    v4 = 3;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 1, v4);
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(v5);
  return ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16), a1 + 6);
}

void ProShade::Selector::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  PCSharedCount v8;

  v3 = a1;
  (**a2)(&v6, a2, a1 + 48);
  if (v7 != *(_QWORD *)(v3 + 64))
  {
    v5 = operator new();
    ProShade::Selector::Selector(v5, v7, *(_DWORD *)(v3 + 80));
    v3 = v5;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v6 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v8);
}

void sub_1B2DC3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1B5E29170](v4, 0x10B1C403008ACEELL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Selector::atomic(ProShade::Selector *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
}

ProShade::Selector *ProShade::Selector::clone(const PCSharedCount *this)
{
  ProShade::Selector *v2;

  v2 = (ProShade::Selector *)operator new();
  ProShade::Selector::Selector(v2);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v2 + 48, this + 6);
  *((_DWORD *)v2 + 20) = this[10].var0;
  ProShade::Node::copyFrom(v2, (const ProShade::Node *)this);
  return v2;
}

void sub_1B2DC4044(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403008ACEELL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Selector::computeValue(uint64_t a1, uint64_t a2, ProShade::Value *this)
{
  uint64_t v6;
  const char *v7;
  int AllocSize;
  BOOL *v9;
  PCArray_base *v10;
  const PCString *v11;
  _QWORD *v12;
  int v13;
  const PCString *v14;
  int TypeSize;
  const PCString *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const PCString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  unsigned int v35;
  int v36;
  int v37[2];
  uint64_t v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = *(int *)(a1 + 80);
  if (v6 > 0x41)
    v7 = "";
  else
    v7 = off_1E657F160[v6];
  *(_QWORD *)this = *(_QWORD *)(a1 + 24);
  AllocSize = ProShade::Value::getAllocSize(this, (const PCString *)a2);
  v9 = (BOOL *)this + 16;
  bzero((char *)this + 16, AllocSize);
  *((_QWORD *)this + 1) = -1;
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(v10);
  v12 = *(_QWORD **)(a2 + 16);
  v38 = -1;
  *(_QWORD *)v37 = *v12;
  v35 = v37[0];
  v13 = ProShade::Value::getAllocSize((ProShade::Value *)v37, v11);
  memcpy(v39, v12 + 2, v13);
  v38 = v12[1];
  TypeSize = ProShade::Value::getTypeSize(this, v14);
  if (v35 >= 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"unknown type", v16);
  v17 = TypeSize;
  v18 = (int)dword_1B355BE80[v35];
  v19 = *(_QWORD *)(a1 + 64);
  if (!v19)
    throw_PCNullPointerException(1);
  v20 = *(_DWORD *)(a1 + 28);
  if ((*(_DWORD *)(v19 + 28) - 5) >= 3)
  {
    result = ProShade::shapeGetSize(v20, v16);
    if ((int)result >= 1)
    {
      v31 = v17;
      v32 = result;
      do
      {
        v33 = *v7++;
        result = (uint64_t)ProShade::copyData((void *)v35, (const PCString *)&v39[(v33 - 48) * (uint64_t)(int)v18], *(_DWORD *)this, v9, 1);
        v9 += v31;
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    LODWORD(v22) = ProShade::shapeGetWidth(v20, v16);
    v23 = *(_QWORD *)(a1 + 64);
    if (!v23)
      throw_PCNullPointerException(1);
    result = ProShade::shapeGetWidth(*(_DWORD *)(v23 + 28), v21);
    v36 = result;
    if ((int)v22 >= 1)
    {
      v25 = 0;
      v22 = v22;
      v34 = v7;
      do
      {
        v26 = (v7[v25] - 48) * (uint64_t)v36 - 48;
        v27 = v7;
        v28 = v22;
        do
        {
          v29 = *v27++;
          result = (uint64_t)ProShade::copyData((void *)v37[0], (const PCString *)&v39[(v26 + v29) * v18], *(_DWORD *)this, v9, 1);
          v9 += v17;
          --v22;
        }
        while (v22);
        ++v25;
        v22 = v28;
        v30 = v25 == v28;
        v7 = v34;
      }
      while (!v30);
    }
  }
  *((_QWORD *)this + 1) = -1;
  return result;
}

void ProShade::cast(uint64_t a1@<X0>, const PCString *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const PCString *v8;
  int v9;
  _DWORD *v10;
  OZChannelBase *v11;
  unsigned int var3;
  PCArray_base *v13;
  const PCString *v14;
  int v15;
  _BYTE *v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  void *v20;
  const PCString *v21;
  const PCString *v22;
  _QWORD *v23;
  PCArray_base *v24;
  const PCString *v25;
  int v26;
  _DWORD *v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  void *v31;
  char *v32;
  size_t v33;
  PCArray_base *v34;
  const PCString *v35;
  int v36;
  _QWORD *v37;
  int v38;
  _QWORD *v39;
  size_t v40;
  void *v41;
  void *v42;
  PCSharedCount v43;
  uint64_t v44;
  _QWORD *v45;
  PCSharedCount v46;

  v9 = ProShade::VarT<ProShade::Node>::width(a1, a2);
  v10 = *(_DWORD **)(a1 + 16);
  if (v9 == (_DWORD)a2)
  {
    if (!v10)
      throw_PCNullPointerException(1);
    if (v10[6] == a3)
    {
      *(_QWORD *)a4 = &unk_1E6569AC8;
      *(_BYTE *)(a4 + 8) = *(_BYTE *)(a1 + 8);
      *(_QWORD *)(a4 + 16) = v10;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), (const PCSharedCount *)(a1 + 24));
      return;
    }
  }
  else if (!v10)
  {
    goto LABEL_27;
  }
  if (!v11)
  {
LABEL_27:
    if (ProShade::VarT<ProShade::Node>::width(a1, v8) != 1
      && ProShade::VarT<ProShade::Node>::width(a1, v21) != (_DWORD)a2)
    {
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v22);
    }
    v23 = *(_QWORD **)(a1 + 16);
    v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v45 = v23;
    PCSharedCount::PCSharedCount(&v46, (const PCSharedCount *)(a1 + 24));
    ProShade::Ctor::makeWidth(a3, a2, &v43, (PCSharedCount *)a4);
    v43.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v46);
    return;
  }
  var3 = v11->var3;
  if (var3 == 3)
  {
    v44 = 0;
    v45 = 0;
    v43.var0 = (PC_Sp_counted_base *)&unk_1E656FB28;
    v34 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, PCSharedCount *))v11->var0 + 27))(v11, &v43);
    v36 = HIDWORD(v44);
    if (HIDWORD(v44) == 1 && (int)a2 >= 2)
    {
      v36 = 1;
      do
      {
        if (v36 <= 0)
          PCArray_base::badIndex(v34);
        v37 = v45;
        if ((int)v44 <= v36)
          v38 = (2 * (v36 + 1)) | 1;
        else
          v38 = v44;
        PCArray<double,PCArray_Traits<double>>::resize((uint64_t)&v43, v36 + 1, v38);
        v36 = HIDWORD(v44);
        v45[HIDWORD(v44) - 1] = *v37;
      }
      while (v36 < (int)a2);
    }
    if (v36 != (_DWORD)a2)
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v35);
    v39 = (_QWORD *)ProShade::Const::create((uint64_t)&v43);
    *(_QWORD *)a4 = &unk_1E6569AC8;
    *(_QWORD *)(a4 + 16) = v39;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), (PCShared_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
    v43.var0 = (PC_Sp_counted_base *)&unk_1E656FB28;
    if ((int)v44 < 0)
      v30 = 1;
    else
      v30 = v44 & ~((int)v44 >> 31);
    if (v30 == (_DWORD)v44)
    {
      v31 = v45;
      if (v44 < 0)
      {
        v32 = (char *)&v45[SHIDWORD(v44)];
        v33 = 8 * ~HIDWORD(v44) + 8;
        goto LABEL_62;
      }
LABEL_74:
      v44 = v30;
      if (!v31)
        return;
      v42 = v31;
      goto LABEL_82;
    }
    if (v30)
    {
      v40 = 8 * v30;
      v41 = (void *)operator new[]();
      goto LABEL_67;
    }
LABEL_70:
    v31 = 0;
    goto LABEL_71;
  }
  if (var3 == 2)
  {
    v44 = 0;
    v45 = 0;
    v43.var0 = (PC_Sp_counted_base *)&unk_1E64FC288;
    v24 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, PCSharedCount *))v11->var0 + 26))(v11, &v43);
    v26 = HIDWORD(v44);
    if (HIDWORD(v44) == 1 && (int)a2 >= 2)
    {
      v26 = 1;
      do
      {
        if (v26 <= 0)
          PCArray_base::badIndex(v24);
        v27 = v45;
        if ((int)v44 <= v26)
          v28 = (2 * (v26 + 1)) | 1;
        else
          v28 = v44;
        PCArray<int,PCArray_Traits<int>>::resize((uint64_t)&v43, v26 + 1, v28);
        *((_DWORD *)v45 + SHIDWORD(v44) - 1) = *v27;
        v26 = HIDWORD(v44);
      }
      while (SHIDWORD(v44) < (int)a2);
    }
    if (v26 != (_DWORD)a2)
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v25);
    v29 = (_QWORD *)ProShade::Const::create((uint64_t)&v43);
    *(_QWORD *)a4 = &unk_1E6569AC8;
    *(_QWORD *)(a4 + 16) = v29;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), (PCShared_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v43.var0 = (PC_Sp_counted_base *)&unk_1E64FC288;
    if ((int)v44 < 0)
      v30 = 1;
    else
      v30 = v44 & ~((int)v44 >> 31);
    if (v30 == (_DWORD)v44)
    {
      v31 = v45;
      if (v44 < 0)
      {
        v32 = (char *)v45 + 4 * SHIDWORD(v44);
        v33 = 4 * ~HIDWORD(v44) + 4;
LABEL_62:
        bzero(v32, v33);
        goto LABEL_74;
      }
      goto LABEL_74;
    }
    if (v30)
    {
      v40 = 4 * v30;
      v41 = (void *)operator new[]();
LABEL_67:
      v31 = v41;
      bzero(v41, v40);
LABEL_71:
      if (v45)
        MEMORY[0x1B5E2914C](v45, 0x1000C8077774924);
      v45 = v31;
      goto LABEL_74;
    }
    goto LABEL_70;
  }
  if (var3 != 1)
    ProShade::Error<PCIllegalArgumentException>::raise(v11, v8);
  v44 = 0;
  v45 = 0;
  v43.var0 = (PC_Sp_counted_base *)&unk_1E656FB60;
  v13 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, PCSharedCount *))v11->var0 + 25))(v11, &v43);
  v15 = HIDWORD(v44);
  if (HIDWORD(v44) == 1 && (int)a2 >= 2)
  {
    v15 = 1;
    do
    {
      if (v15 <= 0)
        PCArray_base::badIndex(v13);
      v16 = v45;
      if ((int)v44 <= v15)
        v17 = (2 * (v15 + 1)) | 1;
      else
        v17 = v44;
      PCArray<BOOL,PCArray_Traits<BOOL>>::resize((uint64_t)&v43, v15 + 1, v17);
      v15 = HIDWORD(v44);
      *((_BYTE *)v45 + SHIDWORD(v44) - 1) = *v16;
    }
    while (v15 < (int)a2);
  }
  if (v15 != (_DWORD)a2)
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"argument mismatch", v14);
  v18 = (_QWORD *)ProShade::Const::create((uint64_t)&v43);
  *(_QWORD *)a4 = &unk_1E6569AC8;
  *(_QWORD *)(a4 + 16) = v18;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 24), (PCShared_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v43.var0 = (PC_Sp_counted_base *)&unk_1E656FB60;
  if ((int)v44 < 0)
    v19 = 1;
  else
    v19 = v44 & ~((int)v44 >> 31);
  if ((_DWORD)v19 == (_DWORD)v44)
  {
    v20 = v45;
    if (v44 < 0)
      bzero((char *)v45 + SHIDWORD(v44), ~HIDWORD(v44) + 1);
  }
  else
  {
    if ((_DWORD)v19)
    {
      v20 = (void *)operator new[]();
      bzero(v20, v19);
    }
    else
    {
      v20 = 0;
    }
    if (v45)
      MEMORY[0x1B5E2914C](v45, 0x1000C8077774924);
    v45 = v20;
  }
  v44 = v19;
  if (v20)
  {
    v42 = v20;
LABEL_82:
    MEMORY[0x1B5E2914C](v42, 0x1000C8077774924);
  }
}

void sub_1B2DC48B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  PCSharedCount *v9;

  PCSharedCount::~PCSharedCount(v9);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Vec2::Vec2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)a1 = &unk_1E6576498;
  ProShade::Vec2::initVec2((PCShared_base **)a1, a2, a3);
  return a1;
}

void sub_1B2DC4980(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Vec2::initVec2(PCShared_base **a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  void *v10;
  const PCString *v11;
  PCShared_base *v12;
  unsigned int v13;
  char *v14;
  PCShared_base *v15;
  unsigned int v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  char *v23;

  v6 = *(const void **)(a2 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a3 + 16);
  if (v8
  {
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v21 = &unk_1E656FB28;
    v18 = &unk_1E656FB28;
    v19 = 0;
    (*(void (**)(void *, void **))(*(_QWORD *)v7 + 216))(v7, &v21);
    (*(void (**)(void *, void **))(*(_QWORD *)v10 + 216))(v10, &v18);
    PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v21, (uint64_t)&v18);
    if (SHIDWORD(v22) <= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec2", v11);
    if (HIDWORD(v22) != 2)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec2", v11);
    v12 = (PCShared_base *)ProShade::Const::create((uint64_t)&v21);
    PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v12);
    ProShade::Vec2::checkType((ProShade::Vec2 *)a1);
    v18 = &unk_1E656FB28;
    if ((int)v19 < 0)
      v13 = 1;
    else
      v13 = v19 & ~((int)v19 >> 31);
    if (v13 == (_DWORD)v19)
    {
      v14 = v20;
      if (v19 < 0)
        bzero(&v20[8 * SHIDWORD(v19)], 8 * ~HIDWORD(v19) + 8);
    }
    else
    {
      if (v13)
      {
        v14 = (char *)operator new[]();
        bzero(v14, 8 * v13);
      }
      else
      {
        v14 = 0;
      }
      if (v20)
        MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
      v20 = v14;
    }
    v19 = v13;
    if (v14)
      MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
    v21 = &unk_1E656FB28;
    if ((int)v22 < 0)
      v16 = 1;
    else
      v16 = v22 & ~((int)v22 >> 31);
    if (v16 == (_DWORD)v22)
    {
      v17 = v23;
      if (v22 < 0)
        bzero(&v23[8 * SHIDWORD(v22)], 8 * ~HIDWORD(v22) + 8);
    }
    else
    {
      if (v16)
      {
        v17 = (char *)operator new[]();
        bzero(v17, 8 * v16);
      }
      else
      {
        v17 = 0;
      }
      if (v23)
        MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
      v23 = v17;
    }
    v22 = v16;
    if (v17)
      MEMORY[0x1B5E2914C](v17, 0x1000C8077774924);
  }
  else
  {
    v15 = (PCShared_base *)operator new();
    ProShade::Ctor::Ctor((uint64_t)v15, 3, *(unsigned int **)(a2 + 16), *(unsigned int **)(a3 + 16));
    PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v15);
    ProShade::Vec2::checkType((ProShade::Vec2 *)a1);
  }
}

void sub_1B2DC4C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

double PCArray<double,PCArray_Traits<double>>::append(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  double result;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;

  v4 = *(int *)(a1 + 12);
  v5 = *(_DWORD *)(a2 + 12) + v4;
  if (*(_DWORD *)(a1 + 8) >= v5)
    v6 = *(_DWORD *)(a1 + 8);
  else
    v6 = (2 * v5) | 1;
  PCArray<double,PCArray_Traits<double>>::resize(a1, v5, v6);
  v8 = *(unsigned int *)(a2 + 12);
  if ((int)v8 >= 1)
  {
    v9 = *(double **)(a2 + 16);
    v10 = (double *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    do
    {
      v11 = *v9++;
      result = v11;
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

void ProShade::Vec2::checkType(ProShade::Vec2 *this)
{
  _QWORD v2[3];
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::cast((uint64_t)this, (const PCString *)2, 3, (uint64_t)v2);
  *((_QWORD *)this + 2) = v2[2];
  PCSharedCount::PCSharedCount(&v4, &v3);
  PCSharedCount::operator=((uint64_t *)this + 3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  v2[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2DC4DC4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 24));
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Vec3::Vec3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)a1 = &unk_1E65746B8;
  ProShade::Vec3::initVec3((PCShared_base **)a1, a2, a3);
  return a1;
}

void sub_1B2DC4E70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::initVec3(PCShared_base **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const PCString *v7;
  int Width;
  uint64_t v9;
  ProShade::ConstVector *v10;
  const void *v11;
  void *v12;
  const void *v13;
  void *v14;
  void *v15;
  const PCString *v16;
  PCShared_base *v17;
  unsigned int v18;
  char *v19;
  PCShared_base *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  ProShade::ConstVector *v28;
  PCSharedCount v29;

  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    throw_PCNullPointerException(1);
  Width = ProShade::shapeGetWidth(*(_DWORD *)(v6 + 28), (const PCString *)a2);
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9)
    throw_PCNullPointerException(1);
  if ((int)(ProShade::shapeGetWidth(*(_DWORD *)(v9 + 28), v7) + Width) > 2)
  {
    v11 = *(const void **)(a2 + 16);
    if (v11)
    else
      v12 = 0;
    v13 = *(const void **)(a3 + 16);
    if (v13
    {
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = &unk_1E656FB28;
      v23 = &unk_1E656FB28;
      v24 = 0;
      (*(void (**)(void *, void **))(*(_QWORD *)v12 + 216))(v12, &v26);
      (*(void (**)(void *, void **))(*(_QWORD *)v15 + 216))(v15, &v23);
      PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v26, (uint64_t)&v23);
      if (SHIDWORD(v27) <= 2)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec3", v16);
      if (HIDWORD(v27) != 3)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec3", v16);
      v17 = (PCShared_base *)ProShade::Const::create((uint64_t)&v26);
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v17);
      ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
      v23 = &unk_1E656FB28;
      if ((int)v24 < 0)
        v18 = 1;
      else
        v18 = v24 & ~((int)v24 >> 31);
      if (v18 == (_DWORD)v24)
      {
        v19 = v25;
        if (v24 < 0)
          bzero(&v25[8 * SHIDWORD(v24)], 8 * ~HIDWORD(v24) + 8);
      }
      else
      {
        if (v18)
        {
          v19 = (char *)operator new[]();
          bzero(v19, 8 * v18);
        }
        else
        {
          v19 = 0;
        }
        if (v25)
          MEMORY[0x1B5E2914C](v25, 0x1000C8077774924);
        v25 = v19;
      }
      v24 = v18;
      if (v19)
        MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
      v26 = &unk_1E656FB28;
      if ((int)v27 < 0)
        v21 = 1;
      else
        v21 = v27 & ~((int)v27 >> 31);
      if (v21 == (_DWORD)v27)
      {
        v22 = v28;
        if (v27 < 0)
          bzero((char *)v28 + 8 * SHIDWORD(v27), 8 * ~HIDWORD(v27) + 8);
      }
      else
      {
        if (v21)
        {
          v22 = (void *)operator new[]();
          bzero(v22, 8 * v21);
        }
        else
        {
          v22 = 0;
        }
        if (v28)
          MEMORY[0x1B5E2914C](v28, 0x1000C8077774924);
        v28 = (ProShade::ConstVector *)v22;
      }
      v27 = v21;
      if (v22)
        MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
    }
    else
    {
      v20 = (PCShared_base *)operator new();
      ProShade::Ctor::Ctor((uint64_t)v20, 3, *(unsigned int **)(a2 + 16), *(unsigned int **)(a3 + 16));
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v20);
      ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
    }
  }
  else
  {
    v26 = &unk_1E6569AC8;
    v10 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v10, 0.0);
    v28 = v10;
    PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    ProShade::Vec3::initVec3(a1, a2, a3, (uint64_t)&v26);
    v26 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v29);
  }
}

void sub_1B2DC5248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Vec3::Vec3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)a1 = &unk_1E65746B8;
  ProShade::Vec3::initVec3((PCShared_base **)a1, a2, a3, a4);
  return a1;
}

void sub_1B2DC5334(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::initVec3(PCShared_base **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  void *v14;
  double v15;
  const PCString *v16;
  PCShared_base *v17;
  unsigned int v18;
  char *v19;
  PCShared_base *v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  void *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  char *v33;

  v8 = *(const void **)(a2 + 16);
  if (v8)
  else
    v9 = 0;
  v10 = *(const void **)(a3 + 16);
  if (v10)
  else
    v11 = 0;
  v12 = *(const void **)(a4 + 16);
  if (v12
  {
    v32 = 0;
    v33 = 0;
    v30 = 0;
    v31 = &unk_1E656FB28;
    v28 = &unk_1E656FB28;
    v29 = 0;
    v26 = 0;
    v27 = 0;
    v25 = &unk_1E656FB28;
    (*(void (**)(void *, void **))(*(_QWORD *)v9 + 216))(v9, &v31);
    (*(void (**)(void *, void **))(*(_QWORD *)v11 + 216))(v11, &v28);
    v15 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v31, (uint64_t)&v28);
    (*(void (**)(void *, void **, double))(*(_QWORD *)v14 + 216))(v14, &v25, v15);
    PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v31, (uint64_t)&v25);
    if (SHIDWORD(v32) <= 2)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec3", v16);
    if (HIDWORD(v32) != 3)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec3", v16);
    v17 = (PCShared_base *)ProShade::Const::create((uint64_t)&v31);
    PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v17);
    ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
    v25 = &unk_1E656FB28;
    if ((int)v26 < 0)
      v18 = 1;
    else
      v18 = v26 & ~((int)v26 >> 31);
    if (v18 == (_DWORD)v26)
    {
      v19 = v27;
      if (v26 < 0)
        bzero(&v27[8 * SHIDWORD(v26)], 8 * ~HIDWORD(v26) + 8);
    }
    else
    {
      if (v18)
      {
        v19 = (char *)operator new[]();
        bzero(v19, 8 * v18);
      }
      else
      {
        v19 = 0;
      }
      if (v27)
        MEMORY[0x1B5E2914C](v27, 0x1000C8077774924);
      v27 = v19;
    }
    v26 = v18;
    if (v19)
      MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
    v28 = &unk_1E656FB28;
    if ((int)v29 < 0)
      v21 = 1;
    else
      v21 = v29 & ~((int)v29 >> 31);
    if (v21 == (_DWORD)v29)
    {
      v22 = v30;
      if (v29 < 0)
        bzero(&v30[8 * SHIDWORD(v29)], 8 * ~HIDWORD(v29) + 8);
    }
    else
    {
      if (v21)
      {
        v22 = (char *)operator new[]();
        bzero(v22, 8 * v21);
      }
      else
      {
        v22 = 0;
      }
      if (v30)
        MEMORY[0x1B5E2914C](v30, 0x1000C8077774924);
      v30 = v22;
    }
    v29 = v21;
    if (v22)
      MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
    v31 = &unk_1E656FB28;
    if ((int)v32 < 0)
      v23 = 1;
    else
      v23 = v32 & ~((int)v32 >> 31);
    if (v23 == (_DWORD)v32)
    {
      v24 = v33;
      if (v32 < 0)
        bzero(&v33[8 * SHIDWORD(v32)], 8 * ~HIDWORD(v32) + 8);
    }
    else
    {
      if (v23)
      {
        v24 = (char *)operator new[]();
        bzero(v24, 8 * v23);
      }
      else
      {
        v24 = 0;
      }
      if (v33)
        MEMORY[0x1B5E2914C](v33, 0x1000C8077774924);
      v33 = v24;
    }
    v32 = v23;
    if (v24)
      MEMORY[0x1B5E2914C](v24, 0x1000C8077774924);
  }
  else
  {
    v20 = (PCShared_base *)operator new();
    ProShade::Ctor::Ctor((uint64_t)v20, 3, *(unsigned int **)(a2 + 16), *(unsigned int **)(a3 + 16), *(unsigned int **)(a4 + 16));
    PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v20);
    ProShade::Vec3::checkType((ProShade::Vec3 *)a1);
  }
}

void sub_1B2DC5770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec3::checkType(ProShade::Vec3 *this)
{
  _QWORD v2[3];
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::cast((uint64_t)this, (const PCString *)3, 3, (uint64_t)v2);
  *((_QWORD *)this + 2) = v2[2];
  PCSharedCount::PCSharedCount(&v4, &v3);
  PCSharedCount::operator=((uint64_t *)this + 3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  v2[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2DC5834(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 24));
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Vec4::Vec4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)a1 = &unk_1E6574188;
  ProShade::Vec4::initVec4((PCShared_base **)a1, a2, a3);
  return a1;
}

void sub_1B2DC58E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::initVec4(PCShared_base **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const PCString *v7;
  int Width;
  uint64_t v9;
  ProShade::ConstVector *v10;
  const void *v11;
  void *v12;
  const void *v13;
  void *v14;
  void *v15;
  const PCString *v16;
  PCShared_base *v17;
  unsigned int v18;
  char *v19;
  PCShared_base *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  ProShade::ConstVector *v28;
  PCSharedCount v29;

  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    throw_PCNullPointerException(1);
  Width = ProShade::shapeGetWidth(*(_DWORD *)(v6 + 28), (const PCString *)a2);
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9)
    throw_PCNullPointerException(1);
  if ((int)(ProShade::shapeGetWidth(*(_DWORD *)(v9 + 28), v7) + Width) > 3)
  {
    v11 = *(const void **)(a2 + 16);
    if (v11)
    else
      v12 = 0;
    v13 = *(const void **)(a3 + 16);
    if (v13
    {
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = &unk_1E656FB28;
      v23 = &unk_1E656FB28;
      v24 = 0;
      (*(void (**)(void *, void **))(*(_QWORD *)v12 + 216))(v12, &v26);
      (*(void (**)(void *, void **))(*(_QWORD *)v15 + 216))(v15, &v23);
      PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v26, (uint64_t)&v23);
      if (SHIDWORD(v27) <= 3)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec4", v16);
      if (HIDWORD(v27) != 4)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec4", v16);
      v17 = (PCShared_base *)ProShade::Const::create((uint64_t)&v26);
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v17);
      ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
      v23 = &unk_1E656FB28;
      if ((int)v24 < 0)
        v18 = 1;
      else
        v18 = v24 & ~((int)v24 >> 31);
      if (v18 == (_DWORD)v24)
      {
        v19 = v25;
        if (v24 < 0)
          bzero(&v25[8 * SHIDWORD(v24)], 8 * ~HIDWORD(v24) + 8);
      }
      else
      {
        if (v18)
        {
          v19 = (char *)operator new[]();
          bzero(v19, 8 * v18);
        }
        else
        {
          v19 = 0;
        }
        if (v25)
          MEMORY[0x1B5E2914C](v25, 0x1000C8077774924);
        v25 = v19;
      }
      v24 = v18;
      if (v19)
        MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
      v26 = &unk_1E656FB28;
      if ((int)v27 < 0)
        v21 = 1;
      else
        v21 = v27 & ~((int)v27 >> 31);
      if (v21 == (_DWORD)v27)
      {
        v22 = v28;
        if (v27 < 0)
          bzero((char *)v28 + 8 * SHIDWORD(v27), 8 * ~HIDWORD(v27) + 8);
      }
      else
      {
        if (v21)
        {
          v22 = (void *)operator new[]();
          bzero(v22, 8 * v21);
        }
        else
        {
          v22 = 0;
        }
        if (v28)
          MEMORY[0x1B5E2914C](v28, 0x1000C8077774924);
        v28 = (ProShade::ConstVector *)v22;
      }
      v27 = v21;
      if (v22)
        MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
    }
    else
    {
      v20 = (PCShared_base *)operator new();
      ProShade::Ctor::Ctor((uint64_t)v20, 3, *(unsigned int **)(a2 + 16), *(unsigned int **)(a3 + 16));
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v20);
      ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
    }
  }
  else
  {
    v26 = &unk_1E6569AC8;
    v10 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v10, 0.0);
    v28 = v10;
    PCSharedCount::PCSharedCount(&v29, (ProShade::ConstVector *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    ProShade::Vec4::initVec4(a1, a2, a3, (uint64_t)&v26);
    v26 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v29);
  }
}

void sub_1B2DC5CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Vec4::Vec4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)a1 = &unk_1E6574188;
  ProShade::Vec4::initVec4((PCShared_base **)a1, a2, a3, a4);
  return a1;
}

void sub_1B2DC5DA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::initVec4(PCShared_base **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const PCString *v9;
  int Width;
  uint64_t v11;
  const PCString *v12;
  int v13;
  uint64_t v14;
  ProShade::ConstVector *v15;
  const void *v16;
  void *v17;
  const void *v18;
  void *v19;
  const void *v20;
  void *v21;
  void *v22;
  double v23;
  const PCString *v24;
  PCShared_base *v25;
  unsigned int v26;
  char *v27;
  PCShared_base *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  void *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  ProShade::ConstVector *v41;
  PCSharedCount v42;

  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    throw_PCNullPointerException(1);
  Width = ProShade::shapeGetWidth(*(_DWORD *)(v8 + 28), (const PCString *)a2);
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
    throw_PCNullPointerException(1);
  v13 = ProShade::shapeGetWidth(*(_DWORD *)(v11 + 28), v9) + Width;
  v14 = *(_QWORD *)(a4 + 16);
  if (!v14)
    throw_PCNullPointerException(1);
  if ((int)(v13 + ProShade::shapeGetWidth(*(_DWORD *)(v14 + 28), v12)) > 3)
  {
    v16 = *(const void **)(a2 + 16);
    if (v16)
    else
      v17 = 0;
    v18 = *(const void **)(a3 + 16);
    if (v18)
    else
      v19 = 0;
    v20 = *(const void **)(a4 + 16);
    if (v20
    {
      v40 = 0;
      v41 = 0;
      v38 = 0;
      v39 = &unk_1E656FB28;
      v36 = &unk_1E656FB28;
      v37 = 0;
      v34 = 0;
      v35 = 0;
      v33 = &unk_1E656FB28;
      (*(void (**)(void *, void **))(*(_QWORD *)v17 + 216))(v17, &v39);
      (*(void (**)(void *, void **))(*(_QWORD *)v19 + 216))(v19, &v36);
      v23 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v39, (uint64_t)&v36);
      (*(void (**)(void *, void **, double))(*(_QWORD *)v22 + 216))(v22, &v33, v23);
      PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v39, (uint64_t)&v33);
      if (SHIDWORD(v40) <= 3)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec4", v24);
      if (HIDWORD(v40) != 4)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec4", v24);
      v25 = (PCShared_base *)ProShade::Const::create((uint64_t)&v39);
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v25);
      ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
      v33 = &unk_1E656FB28;
      if ((int)v34 < 0)
        v26 = 1;
      else
        v26 = v34 & ~((int)v34 >> 31);
      if (v26 == (_DWORD)v34)
      {
        v27 = v35;
        if (v34 < 0)
          bzero(&v35[8 * SHIDWORD(v34)], 8 * ~HIDWORD(v34) + 8);
      }
      else
      {
        if (v26)
        {
          v27 = (char *)operator new[]();
          bzero(v27, 8 * v26);
        }
        else
        {
          v27 = 0;
        }
        if (v35)
          MEMORY[0x1B5E2914C](v35, 0x1000C8077774924);
        v35 = v27;
      }
      v34 = v26;
      if (v27)
        MEMORY[0x1B5E2914C](v27, 0x1000C8077774924);
      v36 = &unk_1E656FB28;
      if ((int)v37 < 0)
        v29 = 1;
      else
        v29 = v37 & ~((int)v37 >> 31);
      if (v29 == (_DWORD)v37)
      {
        v30 = v38;
        if (v37 < 0)
          bzero(&v38[8 * SHIDWORD(v37)], 8 * ~HIDWORD(v37) + 8);
      }
      else
      {
        if (v29)
        {
          v30 = (char *)operator new[]();
          bzero(v30, 8 * v29);
        }
        else
        {
          v30 = 0;
        }
        if (v38)
          MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
        v38 = v30;
      }
      v37 = v29;
      if (v30)
        MEMORY[0x1B5E2914C](v30, 0x1000C8077774924);
      v39 = &unk_1E656FB28;
      if ((int)v40 < 0)
        v31 = 1;
      else
        v31 = v40 & ~((int)v40 >> 31);
      if (v31 == (_DWORD)v40)
      {
        v32 = v41;
        if (v40 < 0)
          bzero((char *)v41 + 8 * SHIDWORD(v40), 8 * ~HIDWORD(v40) + 8);
      }
      else
      {
        if (v31)
        {
          v32 = (void *)operator new[]();
          bzero(v32, 8 * v31);
        }
        else
        {
          v32 = 0;
        }
        if (v41)
          MEMORY[0x1B5E2914C](v41, 0x1000C8077774924);
        v41 = (ProShade::ConstVector *)v32;
      }
      v40 = v31;
      if (v32)
        MEMORY[0x1B5E2914C](v32, 0x1000C8077774924);
    }
    else
    {
      v28 = (PCShared_base *)operator new();
      ProShade::Ctor::Ctor((uint64_t)v28, 3, *(unsigned int **)(a2 + 16), *(unsigned int **)(a3 + 16), *(unsigned int **)(a4 + 16));
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v28);
      ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
    }
  }
  else
  {
    v39 = &unk_1E6569AC8;
    v15 = (ProShade::ConstVector *)operator new();
    ProShade::ConstVector::ConstVector(v15, 1.0);
    v41 = v15;
    PCSharedCount::PCSharedCount(&v42, (ProShade::ConstVector *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24)));
    ProShade::Vec4::initVec4(a1, a2, a3, a4, (uint64_t)&v39);
    v39 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v42);
  }
}

void sub_1B2DC62C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Vec4::Vec4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E6569AC8;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)a1 = &unk_1E6574188;
  ProShade::Vec4::initVec4((PCShared_base **)a1, a2, a3, a4, a5);
  return a1;
}

void sub_1B2DC63CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::initVec4(PCShared_base **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  double v18;
  double v19;
  const PCString *v20;
  PCShared_base *v21;
  unsigned int v22;
  char *v23;
  PCShared_base *v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  void *v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  char *v42;

  v10 = *(const void **)(a2 + 16);
  if (v10)
  else
    v11 = 0;
  v12 = *(const void **)(a3 + 16);
  if (v12)
  else
    v13 = 0;
  v14 = *(const void **)(a4 + 16);
  if (v14)
  else
    v15 = 0;
  v16 = *(const void **)(a5 + 16);
  if (v16)
  {
    if (!v11)
      goto LABEL_25;
  }
  else
  {
    v17 = 0;
    if (!v11)
    {
LABEL_25:
      v24 = (PCShared_base *)operator new();
      ProShade::Ctor::Ctor((uint64_t)v24, 3, *(unsigned int **)(a2 + 16), *(unsigned int **)(a3 + 16), *(unsigned int **)(a4 + 16), *(unsigned int **)(a5 + 16));
      PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v24);
      ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
      return;
    }
  }
  if (!v13 || !v15 || !v17)
    goto LABEL_25;
  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = &unk_1E656FB28;
  v37 = &unk_1E656FB28;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = &unk_1E656FB28;
  v31 = &unk_1E656FB28;
  v32 = 0;
  (*(void (**)(void *, void **))(*(_QWORD *)v11 + 216))(v11, &v40);
  (*(void (**)(void *, void **))(*(_QWORD *)v13 + 216))(v13, &v37);
  v18 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v40, (uint64_t)&v37);
  (*(void (**)(void *, void **, double))(*(_QWORD *)v15 + 216))(v15, &v34, v18);
  v19 = PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v40, (uint64_t)&v34);
  (*(void (**)(void *, void **, double))(*(_QWORD *)v17 + 216))(v17, &v31, v19);
  PCArray<double,PCArray_Traits<double>>::append((uint64_t)&v40, (uint64_t)&v31);
  if (SHIDWORD(v41) <= 3)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two few arguments for vec4", v20);
  if (HIDWORD(v41) != 4)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"two many arguments for vec4", v20);
  v21 = (PCShared_base *)ProShade::Const::create((uint64_t)&v40);
  PCPtr<LiImageSource>::operator=<LiImageSource>(a1 + 2, v21);
  ProShade::Vec4::checkType((ProShade::Vec4 *)a1);
  v31 = &unk_1E656FB28;
  if ((int)v32 < 0)
    v22 = 1;
  else
    v22 = v32 & ~((int)v32 >> 31);
  if (v22 == (_DWORD)v32)
  {
    v23 = v33;
    if (v32 < 0)
      bzero(&v33[8 * SHIDWORD(v32)], 8 * ~HIDWORD(v32) + 8);
  }
  else
  {
    if (v22)
    {
      v23 = (char *)operator new[]();
      bzero(v23, 8 * v22);
    }
    else
    {
      v23 = 0;
    }
    if (v33)
      MEMORY[0x1B5E2914C](v33, 0x1000C8077774924);
    v33 = v23;
  }
  v32 = v22;
  if (v23)
    MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
  v34 = &unk_1E656FB28;
  if ((int)v35 < 0)
    v25 = 1;
  else
    v25 = v35 & ~((int)v35 >> 31);
  if (v25 == (_DWORD)v35)
  {
    v26 = v36;
    if (v35 < 0)
      bzero(&v36[8 * SHIDWORD(v35)], 8 * ~HIDWORD(v35) + 8);
  }
  else
  {
    if (v25)
    {
      v26 = (char *)operator new[]();
      bzero(v26, 8 * v25);
    }
    else
    {
      v26 = 0;
    }
    if (v36)
      MEMORY[0x1B5E2914C](v36, 0x1000C8077774924);
    v36 = v26;
  }
  v35 = v25;
  if (v26)
    MEMORY[0x1B5E2914C](v26, 0x1000C8077774924);
  v37 = &unk_1E656FB28;
  if ((int)v38 < 0)
    v27 = 1;
  else
    v27 = v38 & ~((int)v38 >> 31);
  if (v27 == (_DWORD)v38)
  {
    v28 = v39;
    if (v38 < 0)
      bzero(&v39[8 * SHIDWORD(v38)], 8 * ~HIDWORD(v38) + 8);
  }
  else
  {
    if (v27)
    {
      v28 = (char *)operator new[]();
      bzero(v28, 8 * v27);
    }
    else
    {
      v28 = 0;
    }
    if (v39)
      MEMORY[0x1B5E2914C](v39, 0x1000C8077774924);
    v39 = v28;
  }
  v38 = v27;
  if (v28)
    MEMORY[0x1B5E2914C](v28, 0x1000C8077774924);
  v40 = &unk_1E656FB28;
  if ((int)v41 < 0)
    v29 = 1;
  else
    v29 = v41 & ~((int)v41 >> 31);
  if (v29 == (_DWORD)v41)
  {
    v30 = v42;
    if (v41 < 0)
      bzero(&v42[8 * SHIDWORD(v41)], 8 * ~HIDWORD(v41) + 8);
  }
  else
  {
    if (v29)
    {
      v30 = (char *)operator new[]();
      bzero(v30, 8 * v29);
    }
    else
    {
      v30 = 0;
    }
    if (v42)
      MEMORY[0x1B5E2914C](v42, 0x1000C8077774924);
    v42 = v30;
  }
  v41 = v29;
  if (v30)
    MEMORY[0x1B5E2914C](v30, 0x1000C8077774924);
}

void sub_1B2DC6938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C406391F85BLL);
  _Unwind_Resume(a1);
}

void ProShade::Vec4::checkType(ProShade::Vec4 *this)
{
  _QWORD v2[3];
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::cast((uint64_t)this, (const PCString *)4, 3, (uint64_t)v2);
  *((_QWORD *)this + 2) = v2[2];
  PCSharedCount::PCSharedCount(&v4, &v3);
  PCSharedCount::operator=((uint64_t *)this + 3, (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  v2[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2DC6A04(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 24));
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::ConstVector::~ConstVector(ProShade::ConstVector *this)
{
  *(_QWORD *)this = off_1E657E6C0;
  *((_QWORD *)this + 10) = off_1E657E778;
  LiString::dec((ProShade::ConstVector *)((char *)this + 32));
  *((_QWORD *)this + 10) = &off_1E65EB048;
  *((_BYTE *)this + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 11);
}

{
  *(_QWORD *)this = off_1E657E6C0;
  *((_QWORD *)this + 10) = off_1E657E778;
  LiString::dec((ProShade::ConstVector *)((char *)this + 32));
  *((_QWORD *)this + 10) = &off_1E65EB048;
  *((_BYTE *)this + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 11);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::ConstVector::~ConstVector(ProShade::ConstVector *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E657E6C0;
  *((_QWORD *)v1 + 10) = off_1E657E778;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 10) = &off_1E65EB048;
  v1[96] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 11);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E657E6C0;
  *((_QWORD *)v1 + 10) = off_1E657E778;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 10) = &off_1E65EB048;
  v1[96] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 11);
  JUMPOUT(0x1B5E29170);
}

void ProShade::ConstMatrix::~ConstMatrix(ProShade::ConstMatrix *this)
{
  *(_QWORD *)this = off_1E657E988;
  *((_QWORD *)this + 22) = off_1E657EA40;
  LiString::dec((ProShade::ConstMatrix *)((char *)this + 32));
  *((_QWORD *)this + 22) = &off_1E65EB048;
  *((_BYTE *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);
}

{
  *(_QWORD *)this = off_1E657E988;
  *((_QWORD *)this + 22) = off_1E657EA40;
  LiString::dec((ProShade::ConstMatrix *)((char *)this + 32));
  *((_QWORD *)this + 22) = &off_1E65EB048;
  *((_BYTE *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::ConstMatrix::~ConstMatrix(ProShade::ConstMatrix *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E657E988;
  *((_QWORD *)v1 + 22) = off_1E657EA40;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 22) = &off_1E65EB048;
  v1[192] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 23);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E657E988;
  *((_QWORD *)v1 + 22) = off_1E657EA40;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 22) = &off_1E65EB048;
  v1[192] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 23);
  JUMPOUT(0x1B5E29170);
}

void ProShade::Ctor::~Ctor(ProShade::Ctor *this)
{
  uint64_t v2;

  v2 = 0;
  *(_QWORD *)this = &off_1E657E228;
  *((_QWORD *)this + 22) = &unk_1E657E2E0;
  do
  {
    *(_QWORD *)((char *)this + v2 + 144) = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)this + v2 + 168));
    v2 -= 32;
  }
  while (v2 != -128);
  *(_QWORD *)this = off_1E657EAE8;
  *((_QWORD *)this + 22) = off_1E657EBA0;
  LiString::dec((ProShade::Ctor *)((char *)this + 32));
  *((_QWORD *)this + 22) = &off_1E65EB048;
  *((_BYTE *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);
}

{
  uint64_t v2;

  v2 = 0;
  *(_QWORD *)this = &off_1E657E228;
  *((_QWORD *)this + 22) = &unk_1E657E2E0;
  do
  {
    *(_QWORD *)((char *)this + v2 + 144) = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)this + v2 + 168));
    v2 -= 32;
  }
  while (v2 != -128);
  *(_QWORD *)this = off_1E657EAE8;
  *((_QWORD *)this + 22) = off_1E657EBA0;
  LiString::dec((ProShade::Ctor *)((char *)this + 32));
  *((_QWORD *)this + 22) = &off_1E65EB048;
  *((_BYTE *)this + 192) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 23);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::Ctor::~Ctor(ProShade::Ctor *this)
{
  uint64_t v1;
  char *v2;

  v1 = 0;
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v2 = &off_1E657E228;
  *((_QWORD *)v2 + 22) = &unk_1E657E2E0;
  do
  {
    *(_QWORD *)&v2[v1 + 144] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v2[v1 + 168]);
    v1 -= 32;
  }
  while (v1 != -128);
  *(_QWORD *)v2 = off_1E657EAE8;
  *((_QWORD *)v2 + 22) = off_1E657EBA0;
  LiString::dec((LiString *)(v2 + 32));
  *((_QWORD *)v2 + 22) = &off_1E65EB048;
  v2[192] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v2 + 23);
}

{
  uint64_t v1;
  char *v2;

  v1 = 0;
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v2 = &off_1E657E228;
  *((_QWORD *)v2 + 22) = &unk_1E657E2E0;
  do
  {
    *(_QWORD *)&v2[v1 + 144] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v2[v1 + 168]);
    v1 -= 32;
  }
  while (v1 != -128);
  *(_QWORD *)v2 = off_1E657EAE8;
  *((_QWORD *)v2 + 22) = off_1E657EBA0;
  LiString::dec((LiString *)(v2 + 32));
  *((_QWORD *)v2 + 22) = &off_1E65EB048;
  v2[192] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v2 + 23);
  JUMPOUT(0x1B5E29170);
}

void ProShade::Varying::~Varying(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E657E340;
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E657E3F8;
  this[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->var0 = (PC_Sp_counted_base *)off_1E657EC48;
  this[10].var0 = (PC_Sp_counted_base *)off_1E657ED00;
  LiString::dec((LiString *)&this[4]);
  this[10].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[12].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[11].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E657E340;
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E657E3F8;
  this[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->var0 = (PC_Sp_counted_base *)off_1E657EC48;
  this[10].var0 = (PC_Sp_counted_base *)off_1E657ED00;
  LiString::dec((LiString *)&this[4]);
  this[10].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[12].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[11].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::Varying::~Varying(ProShade::Varying *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E657E340;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E657E3F8;
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E657EC48;
  v1[10].var0 = (PC_Sp_counted_base *)off_1E657ED00;
  LiString::dec((LiString *)&v1[4]);
  v1[10].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[12].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[11].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E657E340;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E657E3F8;
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E657EC48;
  v1[10].var0 = (PC_Sp_counted_base *)off_1E657ED00;
  LiString::dec((LiString *)&v1[4]);
  v1[10].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[12].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[11].var0);
  JUMPOUT(0x1B5E29170);
}

void ProShade::Selector::~Selector(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E657E470;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E657E528;
  this[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->var0 = (PC_Sp_counted_base *)off_1E657EDA8;
  this[11].var0 = (PC_Sp_counted_base *)off_1E657EE60;
  LiString::dec((LiString *)&this[4]);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E657E470;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E657E528;
  this[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 9);
  this->var0 = (PC_Sp_counted_base *)off_1E657EDA8;
  this[11].var0 = (PC_Sp_counted_base *)off_1E657EE60;
  LiString::dec((LiString *)&this[4]);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::Selector::~Selector(ProShade::Selector *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E657E470;
  v1[11].var0 = (PC_Sp_counted_base *)&unk_1E657E528;
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E657EDA8;
  v1[11].var0 = (PC_Sp_counted_base *)off_1E657EE60;
  LiString::dec((LiString *)&v1[4]);
  v1[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E657E470;
  v1[11].var0 = (PC_Sp_counted_base *)&unk_1E657E528;
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E657EDA8;
  v1[11].var0 = (PC_Sp_counted_base *)off_1E657EE60;
  LiString::dec((LiString *)&v1[4]);
  v1[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);
  JUMPOUT(0x1B5E29170);
}

void ProShade::VarT<ProShade::Selector>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E657EF00;
  PCSharedCount::~PCSharedCount(a1 + 3);
  JUMPOUT(0x1B5E29170);
}

void *std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__construct_one_at_end[abi:ne180100]<std::pair<ProShade::Node const*,ProShade::Value>>(uint64_t a1, const PCString *a2)
{
  uint64_t v4;
  int AllocSize;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(PCString *)v4 = (PCString)a2->var0;
  *(_DWORD *)(v4 + 12) = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = -1;
  *(PCString *)(v4 + 8) = a2[1];
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)(v4 + 8), a2);
  result = memcpy((void *)(v4 + 24), &a2[3], AllocSize);
  *(PCString *)(v4 + 16) = a2[2];
  *(_QWORD *)(a1 + 8) = v4 + 152;
  return result;
}

void sub_1B2DC756C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__push_back_slow_path<std::pair<ProShade::Node const*,ProShade::Value>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int AllocSize;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xD79435E50D7943)
    v9 = 0x1AF286BCA1AF286;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[152 * v4];
  __p = v10;
  v16 = v11;
  v17 = v11;
  v18 = &v10[152 * v9];
  *(_QWORD *)v11 = *a2;
  *((_DWORD *)v11 + 3) = 0;
  *((_DWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 2) = -1;
  *((_QWORD *)v11 + 1) = a2[1];
  AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)(v11 + 8), (const PCString *)v9);
  memcpy(v11 + 24, a2 + 3, AllocSize);
  *((_QWORD *)v11 + 2) = a2[2];
  v17 = v11 + 152;
  std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__swap_out_circular_buffer((uint64_t)a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 152) % 0x98uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B2DC7708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<ProShade::Node const*,ProShade::Value>>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<ProShade::Node const*,ProShade::Value>>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>>(a1 + 16, *(const PCString **)(a1 + 8), *(_QWORD *)(a1 + 8), *(_QWORD *)a1, *(_QWORD *)a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v5;
  a2[1] = v6;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<ProShade::Node const*,ProShade::Value>>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>,std::reverse_iterator<std::pair<ProShade::Node const*,ProShade::Value>*>>(uint64_t a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int AllocSize;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a3 + v11 - 152);
      *(_DWORD *)(a7 + v11 - 144) = 0;
      v13 = a7 + v11 - 144;
      *(_QWORD *)(v13 - 8) = v12;
      *(_DWORD *)(v13 + 4) = 0;
      *(_QWORD *)(v13 + 8) = -1;
      *(_QWORD *)v13 = *(_QWORD *)(a3 + v11 - 144);
      AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)v13, a2);
      memcpy((void *)(a7 + v11 - 128), (const void *)(a3 + v11 - 128), AllocSize);
      *(_QWORD *)(a7 + v11 - 136) = *(_QWORD *)(a3 + v11 - 136);
      v11 -= 152;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t *std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__emplace_unique_key_args<ProShade::Node const*,std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, PC_Sp_counted_base ***a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ProShade::Node const*&&>,std::tuple<>>(uint64_t a1@<X0>, PC_Sp_counted_base ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCSharedCount *v6;

  v5 = a1 + 8;
  v6 = (PCSharedCount *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4].var0 = **a2;
  v6[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v6[7].var0 = 0;
  PCSharedCount::PCSharedCount(v6 + 8);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2DC79B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCSharedCount *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    a2[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(a2 + 8);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

unint64_t HSolidRendererBumpMap::GetROI(HSolidRendererBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  unsigned int v5;

  if (a3)
    v4 = 0;
  else
    v4 = a4.var0 - 1;
  if (a3)
    v5 = 0;
  else
    v5 = a4.var1 - 1;
  return v4 | ((unint64_t)v5 << 32);
}

void HSolidRendererBumpMap::~HSolidRendererBumpMap(HGNode *this)
{
  void *v1;

  HgcSolidRendererBumpMap::~HgcSolidRendererBumpMap(this);
  HGObject::operator delete(v1);
}

const char *HgcLean1::GetProgram(HgcLean1 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000264\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r1.xy = r0.xy/r0.zz;\n"
             "    r0.w = r1.x*r1.y;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e3420226:c15e4c44:ebec1dde:00b3eef2\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000256\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r1.xy = r0.xy/r0.zz;\n"
             "    r0.w = r1.x*r1.y;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=57ca4b61:59eafe46:cd037ff1:40d4f80f\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001f7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r1.xy = r0.xy/r0.zz;\n"
           "    r0.w = r1.x*r1.y;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=99695ba1:a411b454:d9266e11:1bc3da9a\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLean1::InitProgramDescriptor(HgcLean1 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLean1_hgc_visible", "//Metal1.0     \n//LEN=0000000128\n[[ visible ]] FragmentOut HgcLean1_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r1.xy = r0.xy/r0.zz;\n"
    "    r0.w = r1.x*r1.y;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DC7B50()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcLean1");
}

void sub_1B2DC7B60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DC7C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DC7CA0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DC7C98);
}

_QWORD *HgcLean1::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLean1 [hgc1]");
}

uint64_t HgcLean1::BindTexture(HgcLean1 *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLean1::Bind(HgcLean1 *this, HGHandler *a2)
{
  (*(void (**)(HgcLean1 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcLean1::RenderTile(HgcLean1 *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  int8x16_t v41;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v36) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 32);
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2);
          v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
          v17 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
          v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v15), *(float32x4_t *)v19), v20);
          v22 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v16), *(float32x4_t *)v19), v20);
          v23 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v17), *(float32x4_t *)v19), v20);
          v24 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v18), *(float32x4_t *)v19), v20);
          v25 = *(float32x4_t *)(v19 + 32);
          v26 = *(int8x16_t *)(v19 + 48);
          v27 = vminq_f32(v21, v25);
          v28 = vminq_f32(v22, v25);
          v29 = vminq_f32(v23, v25);
          v30 = vminq_f32(v24, v25);
          v31 = (int8x16_t)vmulq_f32(v11, vmulq_f32(v27, vrecpsq_f32(v15, v27)));
          v32 = (int8x16_t)vmulq_f32(v12, vmulq_f32(v28, vrecpsq_f32(v16, v28)));
          v33 = (int8x16_t)vmulq_f32(v13, vmulq_f32(v29, vrecpsq_f32(v17, v29)));
          v34 = (int8x16_t)vmulq_f32(v14, vmulq_f32(v30, vrecpsq_f32(v18, v30)));
          v35 = (int8x16_t *)(v5 + v10);
          v35[-2] = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v31, v31, 8uLL), *(float *)v31.i32), (int8x16_t)v11);
          v35[-1] = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v32, v32, 8uLL), *(float *)v32.i32), (int8x16_t)v12);
          *v35 = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v33, v33, 8uLL), *(float *)v33.i32), (int8x16_t)v13);
          v35[1] = vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v34, v34, 8uLL), *(float *)v34.i32), (int8x16_t)v14);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v36) = -v9;
      }
      if ((int)v36 < v4)
      {
        v36 = v36;
        do
        {
          v37 = *(float32x4_t *)(v6 + 16 * v36);
          v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2);
          v39 = *((_QWORD *)this + 51);
          v40 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v38), *(float32x4_t *)v39), *(float32x4_t *)(v39 + 16)), *(float32x4_t *)(v39 + 32));
          v41 = (int8x16_t)vmulq_f32(v37, vmulq_f32(v40, vrecpsq_f32(v38, v40)));
          *(int8x16_t *)(v5 + 16 * v36++) = vbslq_s8(*(int8x16_t *)(v39 + 48), (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v41, v41, 8uLL), *(float *)v41.i32), (int8x16_t)v37);
        }
        while (v36 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLean1::GetDOD(HgcLean1 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcLean1::GetROI(HgcLean1 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcLean1::HgcLean1(HgcLean1 *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E657F5E8;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_1B3052ED0;
  *(_OWORD *)(v3 + 16) = xmmword_1B30527A0;
  *(int32x4_t *)(v3 + 32) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 48) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DC7FF8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLean1::~HgcLean1(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E657F5E8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcLean1::~HgcLean1(this);
  HGObject::operator delete(v1);
}

uint64_t HgcLean1::SetParameter(HgcLean1 *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcLean1::GetParameter(HgcLean1 *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeBackgroundGeneratorShader::GetProgram(LiHeBackgroundGeneratorShader *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00400000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000162\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor = hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=3516c664:47c72e5c:14a395a6:40522bd5\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
}

void LiHeBackgroundGeneratorShader::InitProgramDescriptor(LiHeBackgroundGeneratorShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeBackgroundGeneratorShader_hgc_visible", "//Metal1.0     \n//LEN=00000000d9\n[[ visible ]] FragmentOut LiHeBackgroundGeneratorShader_hgc_visible(const constant float4* hg_Params)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0 = hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DC814C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeBackgroundGeneratorShader");
}

void sub_1B2DC815C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *v33;
  char v34;
  __int128 v35;
  uint64_t v36[13];

  *(_DWORD *)(v31 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v31 - 56), "FragmentOut");
  *(_OWORD *)(v31 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v30, v31 - 64);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  memset(v36, 0, 24);
  LODWORD(v32) = 2;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float4");
  v35 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v36, (uint64_t)&v32);
  if (v34 < 0)
    operator delete(v33);
  HGProgramDescriptor::SetArgumentBindings(v30, v36);
  v32 = (void **)v36;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B2DC8218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a19;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_1B2DC8250()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DC8248);
}

_QWORD *LiHeBackgroundGeneratorShader::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeBackgroundGeneratorShader [hgc1]");
}

uint64_t LiHeBackgroundGeneratorShader::BindTexture(LiHeBackgroundGeneratorShader *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeBackgroundGeneratorShader::Bind(LiHeBackgroundGeneratorShader *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(LiHeBackgroundGeneratorShader *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeBackgroundGeneratorShader::RenderTile(LiHeBackgroundGeneratorShader *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = (_OWORD *)(v5 + 32);
    v7 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        v8 = 0;
        v9 = v6;
        do
        {
          v10 = *(_OWORD *)*((_QWORD *)this + 51);
          *(v9 - 2) = v10;
          *(v9 - 1) = v10;
          *v9 = v10;
          v9[1] = v10;
          v9 += 4;
          v8 -= 4;
        }
        while (v4 + v8 > 3);
        LODWORD(v11) = -v8;
      }
      if ((int)v11 < v4)
      {
        v11 = v11;
        do
          *(_OWORD *)(v5 + 16 * v11++) = *(_OWORD *)*((_QWORD *)this + 51);
        while (v11 < v4);
      }
      ++v3;
      v6 = (_OWORD *)((char *)v6 + v7);
      v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeBackgroundGeneratorShader::GetDOD(LiHeBackgroundGeneratorShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t LiHeBackgroundGeneratorShader::GetROI(LiHeBackgroundGeneratorShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeBackgroundGeneratorShader::LiHeBackgroundGeneratorShader(LiHeBackgroundGeneratorShader *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E657F850;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DC8424(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeBackgroundGeneratorShader::~LiHeBackgroundGeneratorShader(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E657F850;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeBackgroundGeneratorShader::~LiHeBackgroundGeneratorShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeBackgroundGeneratorShader::SetParameter(LiHeBackgroundGeneratorShader *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeBackgroundGeneratorShader::GetParameter(LiHeBackgroundGeneratorShader *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeDepthCompareProgram::GetProgram(LiHeDepthCompareProgram *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000889\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[1];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[0] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[2] + s0;\n"
             "    s0 = hg_Params[3] + s0;\n"
             "    s1.x = hg_Params[8].z - s0.z;\n"
             "    s1.y = -s0.z/s1.x;\n"
             "    s1 = mix(s0, hg_Params[8], s1.yyyy);\n"
             "    s2.y = s0.z/-hg_Params[6].z;\n"
             "    s2.x = float(hg_Params[9].x >= float(c0.x));\n"
             "    r0.x = half(hg_Params[4].z);\n"
             "    r0.y = half(hg_Params[5].z);\n"
             "    r0.w = c0.x;\n"
             "    r0.z = half(hg_Params[6].z);\n"
             "    s3 = s2.yyyy*float4(r0) + s0;\n"
             "    s1 = select(s3, s1, -s2.xxxx < 0.00000h);\n"
             "    s3 = s1.yyyy*hg_Params[5];\n"
             "    s3 = s1.xxxx*hg_Params[4] + s3;\n"
             "    s4 = s1.wwww*hg_Params[7];\n"
             "    s3 = s1.zzzz*hg_Params[6] + s3;\n"
             "    s1 = s3 + s4;\n"
             "    s4.x = float(s3.w < -s4.w);\n"
             "    s3 = s0.yyyy*hg_Params[5];\n"
             "    s2.w = float(-s4.x >= float(c0.x));\n"
             "    s3 = s0.xxxx*hg_Params[4] + s3;\n"
             "    s4 = s0.wwww*hg_Params[7];\n"
             "    s0 = s0.zzzz*hg_Params[6] + s3;\n"
             "    s3 = s0 + s4;\n"
             "    s0.x = float(s0.w < -s4.w);\n"
             "    s0.y = fmax(s3.w, float(c0.y));\n"
             "    s0.z = fmin(s3.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s2.y = fmax(s1.w, float(c0.y));\n"
             "    s2.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.y = select(s2.z, s2.y, -s2.w < 0.00000h);\n"
             "    s0.xw = 1.00000f / s0.xy;\n"
             "    s0.xyz = s3.xyz*s0.xxx;\n"
             "    s0.x = dot(s0.xyz, s0.xyz);\n"
             "    s1.xyz = s1.xyz*s0.www;\n"
             "    s0.y = dot(s1.xyz, s1.xyz);\n"
             "    s0.xy = sqrt(s0.xy);\n"
             "    s0.x = s0.y - s0.x;\n"
             "    s0.y = s0.z - s1.z;\n"
             "    s0.w = (float) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    s2.x = select(s0.y, s0.x, -s2.x < 0.00000h);\n"
             "    s0.x = float(s2.x < float(c0.x));\n"
             "    output.color0 = s0.xxxx*s0.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=61436a97:dd5f363d:7650be05:ee56534e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000a:0006:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000082b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[1];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[0] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[2] + r0;\n"
             "    r0 = hg_Params[3] + r0;\n"
             "    r1.x = hg_Params[8].z - r0.z;\n"
             "    r1.y = -r0.z/r1.x;\n"
             "    r1 = mix(r0, hg_Params[8], r1.yyyy);\n"
             "    r2.y = r0.z/-hg_Params[6].z;\n"
             "    r2.x = float(hg_Params[9].x >= c0.x);\n"
             "    r3.x = hg_Params[4].z;\n"
             "    r3.y = hg_Params[5].z;\n"
             "    r3.w = c0.x;\n"
             "    r3.z = hg_Params[6].z;\n"
             "    r3 = r2.yyyy*r3 + r0;\n"
             "    r1 = select(r3, r1, -r2.xxxx < 0.00000f);\n"
             "    r3 = r1.yyyy*hg_Params[5];\n"
             "    r3 = r1.xxxx*hg_Params[4] + r3;\n"
             "    r4 = r1.wwww*hg_Params[7];\n"
             "    r3 = r1.zzzz*hg_Params[6] + r3;\n"
             "    r1 = r3 + r4;\n"
             "    r4.x = float(r3.w < -r4.w);\n"
             "    r3 = r0.yyyy*hg_Params[5];\n"
             "    r2.w = float(-r4.x >= c0.x);\n"
             "    r3 = r0.xxxx*hg_Params[4] + r3;\n"
             "    r4 = r0.wwww*hg_Params[7];\n"
             "    r0 = r0.zzzz*hg_Params[6] + r3;\n"
             "    r3 = r0 + r4;\n"
             "    r0.x = float(r0.w < -r4.w);\n"
             "    r0.y = fmax(r3.w, c0.y);\n"
             "    r0.z = fmin(r3.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r2.y = fmax(r1.w, c0.y);\n"
             "    r2.z = fmin(r1.w, -c0.y);\n"
             "    r0.y = select(r2.z, r2.y, -r2.w < 0.00000f);\n"
             "    r0.xw = 1.00000f / r0.xy;\n"
             "    r0.xyz = r3.xyz*r0.xxx;\n"
             "    r0.x = dot(r0.xyz, r0.xyz);\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    r0.y = dot(r1.xyz, r1.xyz);\n"
             "    r0.xy = sqrt(r0.xy);\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.y = r0.z - r1.z;\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r2.x = select(r0.y, r0.x, -r2.x < 0.00000f);\n"
             "    r0.x = float(r2.x < c0.x);\n"
             "    output.color0 = r0.xxxx*r0.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=5e302bb5:af3fc56a:1861dd64:979ffb4f\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000a:0005:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000009eb\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal1;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal0 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal2 + r0;\n"
           "    r0 = hg_ProgramLocal3 + r0;\n"
           "    r1.x = hg_ProgramLocal8.z - r0.z;\n"
           "    r1.y = -r0.z/r1.x;\n"
           "    r1 = mix(r0, hg_ProgramLocal8, r1.yyyy);\n"
           "    r2.y = r0.z/-hg_ProgramLocal6.z;\n"
           "    r2.x = float(hg_ProgramLocal9.x >= c0.x);\n"
           "    r3.x = hg_ProgramLocal4.z;\n"
           "    r3.y = hg_ProgramLocal5.z;\n"
           "    r3.w = c0.x;\n"
           "    r3.z = hg_ProgramLocal6.z;\n"
           "    r3 = r2.yyyy*r3 + r0;\n"
           "    r1 = vec4(-r2.x < 0.00000 ? r1.x : r3.x, -r2.x < 0.00000 ? r1.y : r3.y, -r2.x < 0.00000 ? r1.z : r3.z, -r"
           "2.x < 0.00000 ? r1.w : r3.w);\n"
           "    r3 = r1.yyyy*hg_ProgramLocal5;\n"
           "    r3 = r1.xxxx*hg_ProgramLocal4 + r3;\n"
           "    r4 = r1.wwww*hg_ProgramLocal7;\n"
           "    r3 = r1.zzzz*hg_ProgramLocal6 + r3;\n"
           "    r1 = r3 + r4;\n"
           "    r4.x = float(r3.w < -r4.w);\n"
           "    r3 = r0.yyyy*hg_ProgramLocal5;\n"
           "    r2.w = float(-r4.x >= c0.x);\n"
           "    r3 = r0.xxxx*hg_ProgramLocal4 + r3;\n"
           "    r4 = r0.wwww*hg_ProgramLocal7;\n"
           "    r0 = r0.zzzz*hg_ProgramLocal6 + r3;\n"
           "    r3 = r0 + r4;\n"
           "    r0.x = float(r0.w < -r4.w);\n"
           "    r0.y = max(r3.w, c0.y);\n"
           "    r0.z = min(r3.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r2.y = max(r1.w, c0.y);\n"
           "    r2.z = min(r1.w, -c0.y);\n"
           "    r0.y = -r2.w < 0.00000 ? r2.y : r2.z;\n"
           "    r0.xw = vec2(1.00000) / r0.xy;\n"
           "    r0.xyz = r3.xyz*r0.xxx;\n"
           "    r0.x = dot(r0.xyz, r0.xyz);\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    r0.y = dot(r1.xyz, r1.xyz);\n"
           "    r0.xy = sqrt(r0.xy);\n"
           "    r0.x = r0.y - r0.x;\n"
           "    r0.y = r0.z - r1.z;\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r2.x = -r2.x < 0.00000 ? r0.x : r0.y;\n"
           "    r0.x = float(r2.x < c0.x);\n"
           "    gl_FragColor = r0.xxxx*r0.wwww;\n"
           "}\n"
           "//MD5=17eb52d4:3d49dffd:b5262582:72830b80\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000a:0005:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeDepthCompareProgram::InitProgramDescriptor(LiHeDepthCompareProgram *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeDepthCompareProgram_hgc_visible", "//Metal1.0     \n//LEN=0000000710\n[[ visible ]] FragmentOut LiHeDepthCompareProgram_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[1];\n"
    "    r0 = texCoord1.xxxx*hg_Params[0] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[2] + r0;\n"
    "    r0 = hg_Params[3] + r0;\n"
    "    r1.x = hg_Params[8].z - r0.z;\n"
    "    r1.y = -r0.z/r1.x;\n"
    "    r1 = mix(r0, hg_Params[8], r1.yyyy);\n"
    "    r2.y = r0.z/-hg_Params[6].z;\n"
    "    r2.x = float(hg_Params[9].x >= c0.x);\n"
    "    r3.x = hg_Params[4].z;\n"
    "    r3.y = hg_Params[5].z;\n"
    "    r3.w = c0.x;\n"
    "    r3.z = hg_Params[6].z;\n"
    "    r3 = r2.yyyy*r3 + r0;\n"
    "    r1 = select(r3, r1, -r2.xxxx < 0.00000f);\n"
    "    r3 = r1.yyyy*hg_Params[5];\n"
    "    r3 = r1.xxxx*hg_Params[4] + r3;\n"
    "    r4 = r1.wwww*hg_Params[7];\n"
    "    r3 = r1.zzzz*hg_Params[6] + r3;\n"
    "    r1 = r3 + r4;\n"
    "    r4.x = float(r3.w < -r4.w);\n"
    "    r3 = r0.yyyy*hg_Params[5];\n"
    "    r2.w = float(-r4.x >= c0.x);\n"
    "    r3 = r0.xxxx*hg_Params[4] + r3;\n"
    "    r4 = r0.wwww*hg_Params[7];\n"
    "    r0 = r0.zzzz*hg_Params[6] + r3;\n"
    "    r3 = r0 + r4;\n"
    "    r0.x = float(r0.w < -r4.w);\n"
    "    r0.y = fmax(r3.w, c0.y);\n"
    "    r0.z = fmin(r3.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r2.y = fmax(r1.w, c0.y);\n"
    "    r2.z = fmin(r1.w, -c0.y);\n"
    "    r0.y = select(r2.z, r2.y, -r2.w < 0.00000f);\n"
    "    r0.xw = 1.00000f / r0.xy;\n"
    "    r0.xyz = r3.xyz*r0.xxx;\n"
    "    r0.x = dot(r0.xyz, r0.xyz);\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    r0.y = dot(r1.xyz, r1.xyz);\n"
    "    r0.xy = sqrt(r0.xy);\n"
    "    r0.x = r0.y - r0.x;\n"
    "    r0.y = r0.z - r1.z;\n"
    "    r0.w = color0.w;\n"
    "    r2.x = select(r0.y, r0.x, -r2.x < 0.00000f);\n"
    "    r0.x = float(r2.x < c0.x);\n"
    "    output.color0 = r0.xxxx*r0.wwww;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DC8608()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeDepthCompareProgram");
}

void sub_1B2DC8618(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051B00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DC8758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DC87A0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DC8798);
}

_QWORD *LiHeDepthCompareProgram::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeDepthCompareProgram [hgc1]");
}

uint64_t LiHeDepthCompareProgram::BindTexture(LiHeDepthCompareProgram *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeDepthCompareProgram::Bind(LiHeDepthCompareProgram *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(LiHeDepthCompareProgram *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeDepthCompareProgram::RenderTile(LiHeDepthCompareProgram *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  float32x4_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  float32x4_t *v114;
  unsigned int v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  float32x4_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  int8x16_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float32x4_t v149;
  int8x16_t v150;
  float32x4_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int32x4_t v168;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = a2[10];
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 2)
      {
        v115 = 0;
        v13 = v7;
      }
      else
      {
        v11 = 0;
        v12 = 16;
        v13 = v7;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = *((_QWORD *)this + 51);
          v16 = *(float32x4_t *)(v15 + 16);
          v17 = *(float32x4_t *)(v15 + 32);
          v18 = *(float32x4_t *)(v15 + 48);
          v19 = vaddq_f32(v18, vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)v15, v13.f32[0])), vmulq_laneq_f32(v17, v13, 2)));
          v20 = vaddq_f32(v18, vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(*(float32x4_t *)v15, v14.f32[0])), vmulq_laneq_f32(v17, v14, 2)));
          v21 = *(float32x4_t *)(v15 + 128);
          v22 = vsubq_f32(v21, v19);
          v23 = vsubq_f32(v21, v20);
          v21.i64[0] = vdupq_laneq_s64((int64x2_t)v22, 1).u64[0];
          v21.i64[1] = v22.i64[0];
          v24 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
          v16.i64[0] = vdupq_laneq_s64((int64x2_t)v23, 1).u64[0];
          v16.i64[1] = v23.i64[0];
          v25 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
          v27 = *(float32x4_t *)(v15 + 160);
          v26 = *(float32x4_t *)(v15 + 176);
          v28 = vminq_f32(vmaxq_f32(vrecpeq_f32(v24), v27), v26);
          v29 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v27), v26);
          v30 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32(v24, v28)), v27), v26);
          v31 = vminq_f32(vmaxq_f32(vmulq_f32(v29, vrecpsq_f32(v25, v29)), v27), v26);
          v32 = *(float32x4_t *)(v15 + 96);
          v33 = *(float32x4_t *)(v15 + 112);
          v34 = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          v35 = vminq_f32(vmaxq_f32(vrecpeq_f32(v34), v27), v26);
          v36 = vminq_f32(vmaxq_f32(vmulq_f32(v35, vrecpsq_f32(v34, v35)), v27), v26);
          v37 = vmulq_f32(v30, vrecpsq_f32(v24, v30));
          v38 = vmulq_f32(v36, vrecpsq_f32(v34, v36));
          v39 = (int8x16_t)vmulq_laneq_f32(v38, v19, 2);
          v40 = (int8x16_t)vmulq_laneq_f32(v38, v20, 2);
          v41 = (int8x16_t)vcgeq_f32(*(float32x4_t *)(v15 + 144), v27);
          v42 = vmulq_f32(v31, vrecpsq_f32(v25, v31));
          v43 = *(float32x4_t *)(v15 + 192);
          v44 = *(int8x16_t *)(v15 + 208);
          v45 = vandq_s8((int8x16_t)v43, v41);
          v31.i64[0] = vbslq_s8(v44, v45, v39).u64[0];
          v46 = *(float32x4_t *)(v15 + 64);
          v47 = *(float32x4_t *)(v15 + 80);
          v48 = vbslq_s8(v44, vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), vextq_s8((int8x16_t)v47, (int8x16_t)v7, 4uLL));
          v48.i32[3] = 0;
          v49 = (float32x2_t)vbslq_s8(v44, v45, v40).u64[0];
          v50 = *(float32x4_t *)(v15 + 240);
          v51 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 224), (int8x16_t)v32, v48);
          v52 = vaddq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0), v50), (int8x16_t)vmulq_lane_f32(v22, (float32x2_t)*(_OWORD *)&vmulq_f32(v37, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2))), 1), (int8x16_t)vmulq_lane_f32(v51, *(float32x2_t *)v31.f32, 1)));
          v53 = vaddq_f32(v20, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v49, 0), v50), (int8x16_t)vmulq_lane_f32(v23, (float32x2_t)*(_OWORD *)&vmulq_f32(v42, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2))), 1), (int8x16_t)vmulq_lane_f32(v51, v49, 1)));
          v54 = vmulq_laneq_f32(v33, v52, 3);
          v55 = vmulq_laneq_f32(v33, v53, 3);
          v56 = vaddq_f32(vmulq_laneq_f32(v32, v52, 2), vaddq_f32(vmulq_lane_f32(v47, *(float32x2_t *)v52.f32, 1), vmulq_n_f32(v46, v52.f32[0])));
          v57 = vaddq_f32(vmulq_laneq_f32(v32, v53, 2), vaddq_f32(vmulq_lane_f32(v47, *(float32x2_t *)v53.f32, 1), vmulq_n_f32(v46, v53.f32[0])));
          v58 = vaddq_f32(v54, v56);
          v59 = vaddq_f32(v55, v57);
          v60 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(vnegq_f32(v54), v56));
          v61 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(vnegq_f32(v55), v57));
          v62 = vaddq_f32(vmulq_n_f32(v46, v19.f32[0]), vmulq_lane_f32(v47, *(float32x2_t *)v19.f32, 1));
          v63 = (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v61, v61, 0xCuLL)), v50);
          v64 = vaddq_f32(vmulq_n_f32(v46, v20.f32[0]), vmulq_lane_f32(v47, *(float32x2_t *)v20.f32, 1));
          v65 = vmulq_laneq_f32(v33, v19, 3);
          v66 = vmulq_laneq_f32(v33, v20, 3);
          v67 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v60, v60, 0xCuLL)), v50));
          v68 = vaddq_f32(vmulq_laneq_f32(v32, v19, 2), v62);
          v69 = vaddq_f32(vmulq_laneq_f32(v32, v20, 2), v64);
          v70 = vaddq_f32(v68, v65);
          v71 = vaddq_f32(v69, v66);
          v72 = vandq_s8((int8x16_t)v43, v63);
          v73 = (int8x16_t)vcgtq_f32(vnegq_f32(v66), v69);
          v74 = vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(vnegq_f32(v65), v68));
          v75 = vextq_s8(v67, v67, 4uLL);
          v76 = vandq_s8((int8x16_t)v43, v73);
          v77 = vextq_s8(v72, v72, 4uLL);
          v78 = (float32x4_t)vbslq_s8(v44, vextq_s8(v74, v74, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), v43));
          v79 = (float32x4_t)vbslq_s8(v44, vextq_s8(v76, v76, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), v43));
          v75.i64[0] = v31.i64[0];
          *(float32x2_t *)v77.i8 = v49;
          v80 = (int8x16_t)vrev64q_s32((int32x4_t)v78);
          v78.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v70), v43).i64[1];
          v81 = (int8x16_t)vrev64q_s32((int32x4_t)v79);
          v79.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v71), v43).i64[1];
          v82 = vbslq_s8((int8x16_t)vcgtq_f32(v78, v50), (int8x16_t)vdupq_laneq_s64((int64x2_t)v78, 1), v80);
          v83 = vbslq_s8((int8x16_t)vcgtq_f32(v79, v50), (int8x16_t)vdupq_laneq_s64((int64x2_t)v79, 1), v81);
          v84 = *(int8x16_t *)(v15 + 256);
          v85 = *(float32x4_t *)(v15 + 272);
          v86 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 224), (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v58), v43), vbslq_s8(v84, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), v43), v75));
          v87 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 224), (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v59), v43), vbslq_s8(v84, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), v43), v77));
          v88 = (float32x4_t)vdupq_lane_s64(vbslq_s8(v44, v82, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), v50), (int8x16_t)v86, vextq_s8((int8x16_t)v86, (int8x16_t)v7, 4uLL))).i64[0], 0);
          v89 = (float32x4_t)vdupq_lane_s64(vbslq_s8(v44, v83, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL), v50), (int8x16_t)v87, vextq_s8((int8x16_t)v87, (int8x16_t)v7, 4uLL))).i64[0], 0);
          v90 = vminq_f32(vmaxq_f32(vrecpeq_f32(v88), v85), v26);
          v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v89), v85), v26);
          v92 = vminq_f32(vmaxq_f32(vmulq_f32(v90, vrecpsq_f32(v88, v90)), v85), v26);
          v93 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v89, v91)), v85), v26);
          v94 = (int8x16_t)vmulq_f32(v92, vrecpsq_f32(v88, v92));
          v95 = (int8x16_t)vmulq_f32(v93, vrecpsq_f32(v89, v93));
          v96 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 288), v94, (int8x16_t)vmulq_n_f32(v70, *(float *)v94.i32));
          v97 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v15 + 288), v95, (int8x16_t)vmulq_n_f32(v71, *(float *)v95.i32));
          v98 = vmulq_f32(v96, v96);
          v99 = vmulq_f32(v97, v97);
          v98.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v98, 1), vaddq_f32(v98, (float32x4_t)vrev64q_s32((int32x4_t)v98))).u64[0];
          v99.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v99, 1), vaddq_f32(v99, (float32x4_t)vrev64q_s32((int32x4_t)v99))).u64[0];
          v100 = vmulq_laneq_f32(v58, v96, 3);
          v101 = vmulq_laneq_f32(v59, v97, 3);
          v102 = vmulq_f32(v100, v100);
          v103 = vmulq_f32(v101, v101);
          v98.i64[1] = v96.i64[1];
          v99.i64[1] = v97.i64[1];
          v104 = (float32x4_t)vbslq_s8(v84, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), vaddq_f32(v102, (float32x4_t)vrev64q_s32((int32x4_t)v102))), (int8x16_t)v98);
          v105 = (float32x4_t)vbslq_s8(v84, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 4uLL), vaddq_f32(v103, (float32x4_t)vrev64q_s32((int32x4_t)v103))), (int8x16_t)v99);
          v106 = vminq_f32(vrsqrteq_f32(v104), v26);
          v107 = vminq_f32(vrsqrteq_f32(v105), v26);
          v108 = vminq_f32(vmulq_f32(v106, vrsqrtsq_f32(vmulq_f32(v106, v104), v106)), v26);
          v109 = vminq_f32(vmulq_f32(v107, vrsqrtsq_f32(vmulq_f32(v107, v105), v107)), v26);
          v110 = vmulq_f32(vminq_f32(vmulq_f32(v108, vrsqrtsq_f32(vmulq_f32(v108, v104), v108)), v26), v104);
          v111 = vmulq_f32(vminq_f32(vmulq_f32(v109, vrsqrtsq_f32(vmulq_f32(v109, v105), v109)), v26), v105);
          v110.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v110), v110).u64[0];
          v111.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v111), v111).u64[0];
          v110.i64[1] = v104.i64[1];
          v111.i64[1] = v105.i64[1];
          v100.i64[0] = vbslq_s8(v44, (int8x16_t)v110, vextq_s8((int8x16_t)vsubq_f32(v110, v100), (int8x16_t)v7, 4uLL)).u64[0];
          v111.i64[0] = vbslq_s8(v44, (int8x16_t)v111, vextq_s8((int8x16_t)vsubq_f32(v111, v101), (int8x16_t)v7, 4uLL)).u64[0];
          v112 = *(int32x4_t *)(*(_QWORD *)&v8 + v12 - 16);
          v113 = *(int32x4_t *)(*(_QWORD *)&v8 + v12);
          v104.i64[0] = v100.i64[0];
          v105.i64[0] = v111.i64[0];
          v100.i64[1] = vdupq_laneq_s64((int64x2_t)v112, 1).u64[0];
          v104.i64[1] = *(_QWORD *)(*(_QWORD *)&v8 + v12 - 8);
          v111.i64[1] = vdupq_laneq_s64((int64x2_t)v113, 1).u64[0];
          v105.i64[1] = *(_QWORD *)(*(_QWORD *)&v8 + v12 + 8);
          v114 = (float32x4_t *)(*(_QWORD *)&v6 + v12);
          v114[-1] = vmulq_n_f32((float32x4_t)vdupq_laneq_s32(v112, 3), *(float *)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v50, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, v50), (int8x16_t)v104, (int8x16_t)vrev64q_s32((int32x4_t)v100)))).i32);
          *v114 = vmulq_n_f32((float32x4_t)vdupq_laneq_s32(v113, 3), *(float *)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v50, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v87, v50), (int8x16_t)v105, (int8x16_t)vrev64q_s32((int32x4_t)v111)))).i32);
          v13 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v11 -= 2;
          v12 += 32;
        }
        while (v5 + v11 > 1);
        v115 = -v11;
      }
      if ((int)v115 < v5)
      {
        v116 = *((_QWORD *)this + 51);
        v117 = vaddq_f32(*(float32x4_t *)(v116 + 48), vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v116 + 16), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)v116, v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v116 + 32), v13, 2)));
        v118 = vsubq_f32(*(float32x4_t *)(v116 + 128), v117);
        v119.i64[0] = vdupq_laneq_s64((int64x2_t)v118, 1).u64[0];
        v119.i64[1] = v118.i64[0];
        v120 = (float32x4_t)vrev64q_s32(v119);
        v122 = *(float32x4_t *)(v116 + 160);
        v121 = *(float32x4_t *)(v116 + 176);
        v123 = vminq_f32(vmaxq_f32(vrecpeq_f32(v120), v122), v121);
        v124 = vminq_f32(vmaxq_f32(vmulq_f32(v123, vrecpsq_f32(v120, v123)), v122), v121);
        v125 = (int8x16_t)vmulq_lane_f32(v118, (float32x2_t)*(_OWORD *)&vmulq_f32(vmulq_f32(v124, vrecpsq_f32(v120, v124)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 2))), 1);
        v126 = *(float32x4_t *)(v116 + 96);
        v127 = *(float32x4_t *)(v116 + 112);
        v128 = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL));
        v129 = vminq_f32(vmaxq_f32(vrecpeq_f32(v128), v122), v121);
        v130 = vminq_f32(vmaxq_f32(vmulq_f32(v129, vrecpsq_f32(v128, v129)), v122), v121);
        v131 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(v130, vrecpsq_f32(v128, v130)), v117, 2);
        v132 = *(float32x4_t *)(v116 + 192);
        v133 = *(int8x16_t *)(v116 + 208);
        v122.i64[0] = vbslq_s8(v133, vandq_s8((int8x16_t)v132, (int8x16_t)vcgeq_f32(*(float32x4_t *)(v116 + 144), v122)), v131).u64[0];
        v134 = *(float32x4_t *)(v116 + 64);
        v135 = *(float32x4_t *)(v116 + 80);
        v136 = vbslq_s8(v133, vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL), vextq_s8((int8x16_t)v135, (int8x16_t)v7, 4uLL));
        v136.i32[3] = 0;
        v138 = *(int8x16_t *)(v116 + 224);
        v137 = *(float32x4_t *)(v116 + 240);
        v139 = vaddq_f32(v117, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 0), v137), v125, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v138, (int8x16_t)v126, v136), *(float32x2_t *)v122.f32, 1)));
        v140 = vmulq_laneq_f32(v127, v139, 3);
        v141 = vaddq_f32(vmulq_laneq_f32(v126, v139, 2), vaddq_f32(vmulq_lane_f32(v135, *(float32x2_t *)v139.f32, 1), vmulq_n_f32(v134, v139.f32[0])));
        v142 = vandq_s8((int8x16_t)v132, (int8x16_t)vcgtq_f32(vnegq_f32(v140), v141));
        v143 = vandq_s8((int8x16_t)v132, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v142, v142, 0xCuLL)), v137));
        v144 = vextq_s8(v143, v143, 4uLL);
        v144.i64[0] = v122.i64[0];
        v145 = vmulq_laneq_f32(v127, v117, 3);
        v146 = vaddq_f32(vmulq_laneq_f32(v126, v117, 2), vaddq_f32(vmulq_n_f32(v134, v117.f32[0]), vmulq_lane_f32(v135, *(float32x2_t *)v117.f32, 1)));
        v147 = vaddq_f32(v146, v145);
        v148 = vandq_s8((int8x16_t)v132, (int8x16_t)vcgtq_f32(vnegq_f32(v145), v146));
        v149 = (float32x4_t)vbslq_s8(v133, vextq_s8(v148, v148, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL), v132));
        v150 = (int8x16_t)vrev64q_s32((int32x4_t)v149);
        v149.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v147), v132).i64[1];
        v151 = vaddq_f32(v140, v141);
        v152 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v137), (int8x16_t)vdupq_laneq_s64((int64x2_t)v149, 1), v150);
        v153 = *(int8x16_t *)(v116 + 256);
        v154 = *(float32x4_t *)(v116 + 272);
        v155 = (float32x4_t)vbslq_s8(v138, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v151), v132), vbslq_s8(v153, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL), v132), v144));
        v156 = (float32x4_t)vdupq_lane_s64(vbslq_s8(v133, v152, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL), v137), (int8x16_t)v155, vextq_s8((int8x16_t)v155, (int8x16_t)v7, 4uLL))).i64[0], 0);
        v157 = vminq_f32(vmaxq_f32(vrecpeq_f32(v156), v154), v121);
        v158 = vminq_f32(vmaxq_f32(vmulq_f32(v157, vrecpsq_f32(v156, v157)), v154), v121);
        v159 = (int8x16_t)vmulq_f32(v158, vrecpsq_f32(v156, v158));
        v160 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v116 + 288), v159, (int8x16_t)vmulq_n_f32(v147, *(float *)v159.i32));
        v161 = vmulq_f32(v160, v160);
        v161.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v161, 1), vaddq_f32(v161, (float32x4_t)vrev64q_s32((int32x4_t)v161))).u64[0];
        v161.i64[1] = v160.i64[1];
        v162 = vmulq_laneq_f32(v151, v160, 3);
        v163 = vmulq_f32(v162, v162);
        v164 = (float32x4_t)vbslq_s8(v153, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v163, (int8x16_t)v163, 4uLL), vaddq_f32(v163, (float32x4_t)vrev64q_s32((int32x4_t)v163))), (int8x16_t)v161);
        v165 = vminq_f32(vrsqrteq_f32(v164), v121);
        v166 = vminq_f32(vmulq_f32(v165, vrsqrtsq_f32(vmulq_f32(v165, v164), v165)), v121);
        v167 = vmulq_f32(vminq_f32(vmulq_f32(v166, vrsqrtsq_f32(vmulq_f32(v166, v164), v166)), v121), v164);
        v167.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v167), v167).u64[0];
        v167.i64[1] = v164.i64[1];
        v168 = *(int32x4_t *)(*(_QWORD *)&v8 + 16 * v115);
        v167.i64[0] = vbslq_s8(v133, (int8x16_t)v167, vextq_s8((int8x16_t)vsubq_f32(v167, v162), (int8x16_t)v7, 4uLL)).u64[0];
        v133.i64[0] = v167.i64[0];
        v133.i64[1] = *(_QWORD *)(*(_QWORD *)&v8 + 16 * v115 + 8);
        v167.i64[1] = vdupq_laneq_s64((int64x2_t)v168, 1).u64[0];
        *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v115) = vmulq_n_f32((float32x4_t)vdupq_laneq_s32(v168, 3), *(float *)vandq_s8((int8x16_t)v132, (int8x16_t)vcgtq_f32(v137, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v155, v137), v133, (int8x16_t)vrev64q_s32((int32x4_t)v167)))).i32);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v8 += v10;
      *(_QWORD *)&v6 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeDepthCompareProgram::GetDOD(LiHeDepthCompareProgram *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeDepthCompareProgram::GetROI(LiHeDepthCompareProgram *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeDepthCompareProgram::LiHeDepthCompareProgram(LiHeDepthCompareProgram *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E657FAB8;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = v4;
  *(_OWORD *)(v3 + 160) = xmmword_1B355BEE0;
  *(int32x4_t *)(v3 + 176) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 192) = xmmword_1B355BEF0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 272) = xmmword_1B3053640;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 304) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DC9304(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeDepthCompareProgram::~LiHeDepthCompareProgram(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E657FAB8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B2834900);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeDepthCompareProgram::~LiHeDepthCompareProgram(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeDepthCompareProgram::SetParameter(LiHeDepthCompareProgram *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  __n128 *v18;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_53;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_53;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_53;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_53;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_53;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_53;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_53;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_53;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_53;
    case 9:
      v17 = -fabsf(a3.n128_f32[0]);
      v18 = (__n128 *)*((_QWORD *)this + 51);
      if (v18[9].n128_f32[0] == v17
        && v18[9].n128_f32[1] == 0.0
        && v18[9].n128_f32[2] == 0.0
        && v18[9].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v18[9].n128_f32[0] = v17;
      v18[9].n128_u64[1] = 0;
      v18[9].n128_u32[1] = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[19] = a3;
LABEL_53:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeDepthCompareProgram::GetParameter(LiHeDepthCompareProgram *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_12;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_12;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_12;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_12;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_12;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_12;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_12;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_12;
    case 8:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      v4 = v13 + 35;
      goto LABEL_12;
    case 9:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[76];
      a3[1] = v12[77];
      a3[2] = v12[78];
      v4 = v12 + 79;
LABEL_12:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *LiHeEdgeMixShader::GetProgram(LiHeEdgeMixShader *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r2.x = r2.x*half(hg_Params[0].x);\n"
             "    output.color0 = mix(float4(r1), float4(r0), float4(r2.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=329baea9:37f28717:51b4f96f:2eddef1b\n"
             "//SIG=02400000:00000000:00000000:00000000:0000:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000397\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r2.x = r2.x*hg_Params[0].x;\n"
             "    output.color0 = mix(r1, r0, r2.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=021e87ba:b3c6fb4e:61b74d33:8fb9409f\n"
             "//SIG=02000000:00000000:00000000:00000000:0000:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000031d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    r2.x = r2.x*hg_ProgramLocal0.x;\n"
           "    gl_FragColor = mix(r1, r0, r2.xxxx);\n"
           "}\n"
           "//MD5=289a3fa8:8db04128:043b615d:e96483b9\n"
           "//SIG=02000000:00000000:00000000:00000000:0000:0001:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void LiHeEdgeMixShader::InitProgramDescriptor(LiHeEdgeMixShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeEdgeMixShader_hgc_visible", "//Metal1.0     \n//LEN=00000002b7\n[[ visible ]] FragmentOut LiHeEdgeMixShader_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1, \n    texture2d< float > hg_Texture2, \n    sampler hg_Sampler2,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture1.sample(hg_Sampler1, texCoord1.xy);\n"
    "    r2.x = hg_Texture2.sample(hg_Sampler2, texCoord2.xy).x;\n"
    "    r2.x = r2.x*hg_Params[0].x;\n"
    "    output.color0 = mix(r1, r0, r2.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DC98C8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeEdgeMixShader");
}

void sub_1B2DC98D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DC9BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DC9C58()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DC9C50);
}

_QWORD *LiHeEdgeMixShader::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeEdgeMixShader [hgc1]");
}

uint64_t LiHeEdgeMixShader::BindTexture(LiHeEdgeMixShader *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 2)
  {
    v4 = a2;
    v5 = 2;
  }
  else if (a3 == 1)
  {
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeEdgeMixShader::Bind(LiHeEdgeMixShader *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(LiHeEdgeMixShader *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeEdgeMixShader::RenderFragment(uint64_t a1, float32x4_t *a2, int32x2_t *a3)
{
  float32x4_t v3;
  uint64_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;

  *(float32x2_t *)v3.f32 = vadd_f32(vcvt_f32_s32(*a3), (float32x2_t)0x3F0000003F000000);
  v3.i64[1] = 0x3F80000000000000;
  v4 = a3[11].i32[0];
  v5 = vsubq_f32(a2[1], v3);
  v6 = vaddq_s32(vcvtq_s32_f32(v5), vcltzq_f32(v5));
  v5.i64[0] = vsubq_f32(v5, vcvtq_f32_s32(v6)).u64[0];
  v7 = (float32x4_t *)(*(_QWORD *)&a3[10] + 16 * (v6.i32[0] + v6.i32[1] * (int)v4));
  v8 = vaddq_f32(*v7, vmulq_n_f32(vsubq_f32(v7[1], *v7), v5.f32[0]));
  v9 = vaddq_f32(v8, vmulq_lane_f32(vsubq_f32(vaddq_f32(v7[v4], vmulq_n_f32(vsubq_f32(v7[(int)v4 + 1], v7[v4]), v5.f32[0])), v8), *(float32x2_t *)v5.f32, 1));
  v10 = a3[13].i32[0];
  v11 = vsubq_f32(a2[2], v3);
  v12 = vaddq_s32(vcvtq_s32_f32(v11), vcltzq_f32(v11));
  v11.i64[0] = vsubq_f32(v11, vcvtq_f32_s32(v12)).u64[0];
  v13 = (float32x4_t *)(*(_QWORD *)&a3[12] + 16 * (v12.i32[0] + v12.i32[1] * (int)v10));
  v14 = vaddq_f32(*v13, vmulq_n_f32(vsubq_f32(v13[1], *v13), v11.f32[0]));
  v15 = vaddq_f32(v14, vmulq_lane_f32(vsubq_f32(vaddq_f32(v13[v10], vmulq_n_f32(vsubq_f32(v13[(int)v10 + 1], v13[v10]), v11.f32[0])), v14), *(float32x2_t *)v11.f32, 1));
  v16 = a3[15].i32[0];
  v17 = vsubq_f32(a2[3], v3);
  v18 = vaddq_s32(vcvtq_s32_f32(v17), vcltzq_f32(v17));
  v17.i64[0] = vsubq_f32(v17, vcvtq_f32_s32(v18)).u64[0];
  v19 = (float32x4_t *)(*(_QWORD *)&a3[14] + 16 * (v18.i32[0] + v18.i32[1] * (int)v16));
  v20 = vaddq_f32(*v19, vmulq_n_f32(vsubq_f32(v19[1], *v19), v17.f32[0]));
  *(float32x4_t *)*(_QWORD *)&a3[2] = vaddq_f32(v15, vmulq_n_f32(vsubq_f32(v9, v15), vmulq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), vaddq_f32(v20, vmulq_lane_f32(vsubq_f32(vaddq_f32(v19[v16], vmulq_n_f32(vsubq_f32(v19[(int)v16 + 1], v19[v16]), v17.f32[0])), v20), *(float32x2_t *)v17.f32, 1))).f32[0]));
  return 0;
}

uint64_t LiHeEdgeMixShader::RenderTile(LiHeEdgeMixShader *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    v9 = v5;
    v10 = v5;
    v11 = v5;
    do
    {
      if (v6 >= 1)
      {
        v12 = 0;
        v13 = v9;
        v14 = v10;
        v15 = v11;
        do
        {
          v16 = a2[11].i32[0];
          v17 = vsubq_f32(v13, v5);
          v18 = vaddq_s32(vcvtq_s32_f32(v17), vcltzq_f32(v17));
          v17.i64[0] = vsubq_f32(v17, vcvtq_f32_s32(v18)).u64[0];
          v19 = (float32x4_t *)(*(_QWORD *)&a2[10] + 16 * (v18.i32[0] + v18.i32[1] * (int)v16));
          v20 = v19[v16];
          v21 = vsubq_f32(v19[(int)v16 + 1], v20);
          v22 = a2[13].i32[0];
          v23 = vsubq_f32(v14, v5);
          v24 = vaddq_s32(vcvtq_s32_f32(v23), vcltzq_f32(v23));
          v23.i64[0] = vsubq_f32(v23, vcvtq_f32_s32(v24)).u64[0];
          v25 = vaddq_f32(*v19, vmulq_n_f32(vsubq_f32(v19[1], *v19), v17.f32[0]));
          v26 = (float32x4_t *)(*(_QWORD *)&a2[12] + 16 * (v24.i32[0] + v24.i32[1] * (int)v22));
          v27 = vaddq_f32(v20, vmulq_n_f32(v21, v17.f32[0]));
          v28 = vaddq_f32(*v26, vmulq_n_f32(vsubq_f32(v26[1], *v26), v23.f32[0]));
          v29 = vsubq_f32(v15, v5);
          v30 = vaddq_s32(vcvtq_s32_f32(v29), vcltzq_f32(v29));
          v29.i64[0] = vsubq_f32(v29, vcvtq_f32_s32(v30)).u64[0];
          v31 = vsubq_f32(vaddq_f32(v26[v22], vmulq_n_f32(vsubq_f32(v26[(int)v22 + 1], v26[v22]), v23.f32[0])), v28);
          v32 = a2[15].i32[0];
          v33 = vmulq_lane_f32(vsubq_f32(v27, v25), *(float32x2_t *)v17.f32, 1);
          v34 = (float32x4_t *)(*(_QWORD *)&a2[14] + 16 * (v30.i32[0] + v30.i32[1] * (int)v32));
          v35 = vaddq_f32(*v34, vmulq_n_f32(vsubq_f32(v34[1], *v34), v29.f32[0]));
          v36 = vaddq_f32(v28, vmulq_lane_f32(v31, *(float32x2_t *)v23.f32, 1));
          *(float32x4_t *)(*(_QWORD *)&v7 + v12) = vaddq_f32(v36, vmulq_n_f32(vsubq_f32(vaddq_f32(v25, v33), v36), vmulq_f32(*(float32x4_t *)*((_QWORD *)this + 51), vaddq_f32(v35, vmulq_lane_f32(vsubq_f32(vaddq_f32(v34[v32], vmulq_n_f32(vsubq_f32(v34[(int)v32 + 1], v34[v32]), v29.f32[0])), v35), *(float32x2_t *)v29.f32, 1))).f32[0]));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 += 16;
        }
        while (16 * v6 != v12);
      }
      v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B304F240);
      v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B304F240);
      v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeEdgeMixShader::GetDOD(LiHeEdgeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 > 2)
    return 0;
  v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v5, v4, v6);
}

uint64_t LiHeEdgeMixShader::GetROI(LiHeEdgeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 > 2)
    return 0;
  v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v5, v4, v6);
}

void LiHeEdgeMixShader::LiHeEdgeMixShader(LiHeEdgeMixShader *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode3D::HGNode3D(this);
  *v2 = off_1E657FD20;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCA23C(_Unwind_Exception *a1)
{
  HGMipmapLevel *v1;

  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdgeMixShader::~LiHeEdgeMixShader(LiHeEdgeMixShader *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E657FD20;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;

  LiHeEdgeMixShader::~LiHeEdgeMixShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeEdgeMixShader::SetParameter(LiHeEdgeMixShader *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeEdgeMixShader::GetParameter(LiHeEdgeMixShader *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeEdgeNodeFragment::GetProgram(LiHeEdgeNodeFragment *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002f8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=776258c9:0558b71d:d6edd159:1890a0b9\n"
             "//SIG=02400000:00000000:00000000:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=91caf8fd:f4bf4ef2:0c5f5a68:5aaf2328\n"
             "//SIG=02000000:00000000:00000000:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000028e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r0 = r0*r1.xxxx;\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=7f424e0c:12bea71a:1686b0ce:a712a6c3\n"
           "//SIG=02000000:00000000:00000000:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeEdgeNodeFragment::InitProgramDescriptor(LiHeEdgeNodeFragment *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeEdgeNodeFragment_hgc_visible", "//Metal1.0     \n//LEN=0000000219\n[[ visible ]] FragmentOut LiHeEdgeNodeFragment_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0,\n    float4 texCoord1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1.x = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).x;\n"
    "    r0 = r0*r1.xxxx;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCA420()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeEdgeNodeFragment");
}

void sub_1B2DCA430(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCA670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCA6D8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCA6D0);
}

_QWORD *LiHeEdgeNodeFragment::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeEdgeNodeFragment [hgc1]");
}

uint64_t LiHeEdgeNodeFragment::BindTexture(LiHeEdgeNodeFragment *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeEdgeNodeFragment::Bind(LiHeEdgeNodeFragment *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(LiHeEdgeNodeFragment *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeEdgeNodeFragment::RenderFragment(uint64_t a1, float32x4_t *a2, int32x2_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t *v10;
  float32x4_t v11;

  *(float32x2_t *)v3.f32 = vadd_f32(vcvt_f32_s32(*a3), (float32x2_t)0x3F0000003F000000);
  v3.i64[1] = 0x3F80000000000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vaddq_f32(vsubq_f32(a2[1], v3), v4);
  v6 = vcvtq_s32_f32(v5);
  v5.i64[0] = vaddq_s32(v6, vcgtq_f32(vcvtq_f32_s32(v6), v5)).u64[0];
  v7 = a3[13].i32[0];
  v8 = vsubq_f32(a2[2], v3);
  v9 = vaddq_s32(vcvtq_s32_f32(v8), vcltzq_f32(v8));
  v8.i64[0] = vsubq_f32(v8, vcvtq_f32_s32(v9)).u64[0];
  v10 = (float32x4_t *)(*(_QWORD *)&a3[12] + 16 * (v9.i32[0] + v9.i32[1] * (int)v7));
  v11 = vaddq_f32(*v10, vmulq_n_f32(vsubq_f32(v10[1], *v10), v8.f32[0]));
  *(float32x4_t *)*(_QWORD *)&a3[2] = vmulq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&a3[10]+ 16 * (v5.i32[0] + v5.i32[1] * a3[11].i32[0])), vaddq_f32(v11, vmulq_lane_f32(vsubq_f32(vaddq_f32(v10[v7], vmulq_n_f32(vsubq_f32(v10[(int)v7 + 1], v10[v7]), v8.f32[0])), v11), *(float32x2_t *)v8.f32, 1)).f32[0]));
  return 0;
}

uint64_t LiHeEdgeNodeFragment::RenderTile(LiHeEdgeNodeFragment *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = a2[10];
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    v11 = v5;
    do
    {
      if (v6 >= 1)
      {
        v12 = 0;
        v13 = v11;
        do
        {
          v14 = a2[13].i32[0];
          v15 = vsubq_f32(v13, v5);
          v16 = vaddq_s32(vcvtq_s32_f32(v15), vcltzq_f32(v15));
          v15.i64[0] = vsubq_f32(v15, vcvtq_f32_s32(v16)).u64[0];
          v17 = (float32x4_t *)(*(_QWORD *)&a2[12] + 16 * (v16.i32[0] + v16.i32[1] * (int)v14));
          v18 = vaddq_f32(*v17, vmulq_n_f32(vsubq_f32(v17[1], *v17), v15.f32[0]));
          *(float32x4_t *)(*(_QWORD *)&v7 + v12) = vmulq_f32(*(float32x4_t *)*((_QWORD *)this + 51), vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v8 + v12), vaddq_f32(v18, vmulq_lane_f32(vsubq_f32(vaddq_f32(v17[v14], vmulq_n_f32(vsubq_f32(v17[(int)v14 + 1], v17[v14]), v15.f32[0])), v18), *(float32x2_t *)v15.f32, 1)).f32[0]));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v12 += 16;
        }
        while (16 * v6 != v12);
      }
      v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v7 += v9;
      *(_QWORD *)&v8 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeEdgeNodeFragment::GetDOD(LiHeEdgeNodeFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v4, v6);
  }
  else if (a3)
  {
    return 0;
  }
  return v5;
}

uint64_t LiHeEdgeNodeFragment::GetROI(LiHeEdgeNodeFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v4, v6);
  }
  else if (a3)
  {
    return 0;
  }
  return v5;
}

void LiHeEdgeNodeFragment::LiHeEdgeNodeFragment(LiHeEdgeNodeFragment *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode3D::HGNode3D(this);
  *v2 = off_1E657FF98;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCAB4C(_Unwind_Exception *a1)
{
  HGMipmapLevel *v1;

  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdgeNodeFragment::~LiHeEdgeNodeFragment(LiHeEdgeNodeFragment *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E657FF98;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;

  LiHeEdgeNodeFragment::~LiHeEdgeNodeFragment(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeEdgeNodeFragment::SetParameter(LiHeEdgeNodeFragment *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v8;
  int32x4_t v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (__n128 *)*((_QWORD *)this + 51);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == a3.n128_f32[0])
  {
    return 0;
  }
  v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *v8 = (__n128)v9;
  v8[1] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeEdgeNodeFragment::GetParameter(LiHeEdgeNodeFragment *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[4];
    a3[1] = v3[5];
    a3[2] = v3[6];
    result = v3[7];
    a3[3] = result;
  }
  return result;
}

const char *LiHeEdgeNodeWithXFormFragment::GetProgram(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000038a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = half2(frag._texCoord0.xy)/half2(frag._texCoord0.ww);\n"
             "    r0.xy = r0.xy + half2(hg_Params[5].xy);\n"
             "    r0.xy = r0.xy*half2(hg_Params[5].zw);\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, float2(r0.xy));\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=9186d44e:abc67012:5c761aab:4f124505\n"
             "//SIG=02400000:00000000:00000000:00000000:0000:0006:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000352\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy/frag._texCoord0.ww;\n"
             "    r0.xy = r0.xy + hg_Params[5].xy;\n"
             "    r0.xy = r0.xy*hg_Params[5].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r1.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0 = r0*r1.xxxx;\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=dd607e12:c1554aa4:ccd85c6f:4b9ff255\n"
             "//SIG=02000000:00000000:00000000:00000000:0000:0006:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy/hg_TexCoord0.ww;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal5.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r1.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r0 = r0*r1.xxxx;\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=015bd0f0:5cc8b24a:3ee1c36b:8556a0be\n"
           "//SIG=02000000:00000000:00000000:00000000:0000:0006:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeEdgeNodeWithXFormFragment::InitProgramDescriptor(LiHeEdgeNodeWithXFormFragment *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeEdgeNodeWithXFormFragment_hgc_visible", "//Metal1.0     \n//LEN=000000028a\n[[ visible ]] FragmentOut LiHeEdgeNodeWithXFormFragment_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0,\n    float4 texCoord1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy/texCoord0.ww;\n"
    "    r0.xy = r0.xy + hg_Params[5].xy;\n"
    "    r0.xy = r0.xy*hg_Params[5].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r1.x = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).x;\n"
    "    r0 = r0*r1.xxxx;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCAD3C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeEdgeNodeWithXFormFragment");
}

void sub_1B2DCAD4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCAF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCAFF4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCAFECLL);
}

_QWORD *LiHeEdgeNodeWithXFormFragment::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeEdgeNodeWithXFormFragment [hgc1]");
}

uint64_t LiHeEdgeNodeWithXFormFragment::BindTexture(LiHeEdgeNodeWithXFormFragment *this, HGHandler *a2, int a3)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  int v8;
  uint64_t result;

  if (a3 == 1)
  {
    HGHandler::TexCoord(a2, 1, 0, 0, 0);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v8)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v6.n128_u32[0] = 1.0;
      v7.n128_u32[0] = 1.0;
    }
    else
    {
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v4.n128_f32[0] = (float)*((int *)a2 + 60);
    v5.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 5, v4, v5, v6, v7);
  }
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::Bind(LiHeEdgeNodeWithXFormFragment *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 16);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(LiHeEdgeNodeWithXFormFragment *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::RenderFragment(uint64_t a1, float32x4_t *a2, int32x2_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t *v20;
  float32x4_t v21;

  *(float32x2_t *)v3.f32 = vadd_f32(vcvt_f32_s32(*a3), (float32x2_t)0x3F0000003F000000);
  v3.i64[1] = 0x3F80000000000000;
  v4 = a2[1];
  v5 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 3);
  v6 = *(float32x4_t **)(a1 + 408);
  v7 = v6[9];
  v8 = v6[10];
  v9 = vminq_f32(vmaxq_f32(vrecpeq_f32(v5), v7), v8);
  v10 = vminq_f32(vmaxq_f32(vmulq_f32(v9, vrecpsq_f32(v5, v9)), v7), v8);
  v11 = a3[11].i32[0];
  v12 = vsubq_f32(vmulq_f32(v4, vmulq_f32(v10, vrecpsq_f32(v5, v10))), v3);
  v13 = vaddq_s32(vcvtq_s32_f32(v12), vcltzq_f32(v12));
  v12.i64[0] = vsubq_f32(v12, vcvtq_f32_s32(v13)).u64[0];
  v14 = (float32x4_t *)(*(_QWORD *)&a3[10] + 16 * (v13.i32[0] + v13.i32[1] * (int)v11));
  v15 = vaddq_f32(*v14, vmulq_n_f32(vsubq_f32(v14[1], *v14), v12.f32[0]));
  v16 = vaddq_f32(v15, vmulq_lane_f32(vsubq_f32(vaddq_f32(v14[v11], vmulq_n_f32(vsubq_f32(v14[(int)v11 + 1], v14[v11]), v12.f32[0])), v15), *(float32x2_t *)v12.f32, 1));
  v17 = a3[13].i32[0];
  v18 = vsubq_f32(a2[2], v3);
  v19 = vaddq_s32(vcvtq_s32_f32(v18), vcltzq_f32(v18));
  v18.i64[0] = vsubq_f32(v18, vcvtq_f32_s32(v19)).u64[0];
  v20 = (float32x4_t *)(*(_QWORD *)&a3[12] + 16 * (v19.i32[0] + v19.i32[1] * (int)v17));
  v21 = vaddq_f32(*v20, vmulq_n_f32(vsubq_f32(v20[1], *v20), v18.f32[0]));
  *(float32x4_t *)*(_QWORD *)&a3[2] = vmulq_f32(*v6, vmulq_n_f32(v16, vaddq_f32(v21, vmulq_lane_f32(vsubq_f32(vaddq_f32(v20[v17], vmulq_n_f32(vsubq_f32(v20[(int)v17 + 1], v20[v17]), v18.f32[0])), v21), *(float32x2_t *)v18.f32, 1)).f32[0]));
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::RenderTile(LiHeEdgeNodeWithXFormFragment *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t *v29;
  float32x4_t v30;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    v9 = v5;
    v10 = v5;
    do
    {
      if (v6 >= 1)
      {
        v11 = 0;
        v12 = v9;
        v13 = v10;
        do
        {
          v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3);
          v15 = (float32x4_t *)*((_QWORD *)this + 51);
          v16 = v15[9];
          v17 = v15[10];
          v18 = vminq_f32(vmaxq_f32(vrecpeq_f32(v14), v16), v17);
          v19 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpsq_f32(v14, v18)), v16), v17);
          v20 = a2[11].i32[0];
          v21 = vsubq_f32(vmulq_f32(v12, vmulq_f32(v19, vrecpsq_f32(v14, v19))), v5);
          v22 = vaddq_s32(vcvtq_s32_f32(v21), vcltzq_f32(v21));
          v21.i64[0] = vsubq_f32(v21, vcvtq_f32_s32(v22)).u64[0];
          v23 = (float32x4_t *)(*(_QWORD *)&a2[10] + 16 * (v22.i32[0] + v22.i32[1] * (int)v20));
          v24 = vaddq_f32(*v23, vmulq_n_f32(vsubq_f32(v23[1], *v23), v21.f32[0]));
          v25 = vaddq_f32(v24, vmulq_lane_f32(vsubq_f32(vaddq_f32(v23[v20], vmulq_n_f32(vsubq_f32(v23[(int)v20 + 1], v23[v20]), v21.f32[0])), v24), *(float32x2_t *)v21.f32, 1));
          v26 = a2[13].i32[0];
          v27 = vsubq_f32(v13, v5);
          v28 = vaddq_s32(vcvtq_s32_f32(v27), vcltzq_f32(v27));
          v27.i64[0] = vsubq_f32(v27, vcvtq_f32_s32(v28)).u64[0];
          v29 = (float32x4_t *)(*(_QWORD *)&a2[12] + 16 * (v28.i32[0] + v28.i32[1] * (int)v26));
          v30 = vaddq_f32(*v29, vmulq_n_f32(vsubq_f32(v29[1], *v29), v27.f32[0]));
          *(float32x4_t *)(*(_QWORD *)&v7 + v11) = vmulq_f32(*v15, vmulq_n_f32(v25, vaddq_f32(v30, vmulq_lane_f32(vsubq_f32(vaddq_f32(v29[v26], vmulq_n_f32(vsubq_f32(v29[(int)v26 + 1], v29[v26]), v27.f32[0])), v30), *(float32x2_t *)v27.f32, 1)).f32[0]));
          v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v11 += 16;
        }
        while (16 * v6 != v11);
      }
      v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B304F240);
      v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeEdgeNodeWithXFormFragment::GetDOD(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const HGTransform *v8;
  uint64_t v9;
  uint64_t v10;
  HGTransformUtils *v11;
  float v12;
  uint64_t DOD;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v18[9];
  HGRect v19;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    v16 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v5, v4, v16);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v8 = (const HGTransform *)HGRectGrow(v5, v4, v7);
    v10 = v9;
    HGTransform::HGTransform((HGTransform *)v18);
    HGTransform::LoadMatrixf(v18, (float32x2_t *)(*((_QWORD *)this + 51) + 16));
    HGTransform::Invert2D((HGTransform *)v18);
    v12 = HGTransformUtils::MinW(v11);
    *(_QWORD *)&v19.var0 = v10;
    DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v18, v8, v19, 0.5, v12);
    v15 = HGRectUnion(0, 0, DOD, v14);
    HGTransform::~HGTransform((HGTransform *)v18);
  }
  return v15;
}

void sub_1B2DCB630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t LiHeEdgeNodeWithXFormFragment::GetROI(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  unint64_t v5;
  HGTransformUtils *v7;
  float v8;
  uint64_t ROI;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v18[9];
  HGRect v19;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v15 = v5;
    v16 = v4;
    return HGRectGrow(v15, v16, v14);
  }
  if (!a3)
  {
    HGTransform::HGTransform((HGTransform *)v18);
    HGTransform::LoadMatrixf(v18, (float32x2_t *)(*((_QWORD *)this + 51) + 16));
    v8 = HGTransformUtils::MinW(v7);
    *(_QWORD *)&v19.var0 = v4;
    ROI = HGTransformUtils::GetROI((HGTransformUtils *)v18, v5, v19, 0.5, v8);
    v11 = HGRectUnion(0, 0, ROI, v10);
    v13 = v12;
    HGTransform::~HGTransform((HGTransform *)v18);
    v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v15 = v11;
    v16 = v13;
    return HGRectGrow(v15, v16, v14);
  }
  return 0;
}

void sub_1B2DCB750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void LiHeEdgeNodeWithXFormFragment::LiHeEdgeNodeWithXFormFragment(LiHeEdgeNodeWithXFormFragment *this)
{
  uint64_t v2;
  uint64_t v3;

  HGNode3D::HGNode3D(this);
  *(_QWORD *)v2 = off_1E6580210;
  *(_DWORD *)(v2 + 416) = 1;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 64) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 80) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 96) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B30527A0;
  *(int32x4_t *)(v3 + 160) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 176) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(LiHeEdgeNodeWithXFormFragment *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCB82C(_Unwind_Exception *a1)
{
  HGMipmapLevel *v1;

  HGMipmapLevel::~HGMipmapLevel(v1);
  _Unwind_Resume(a1);
}

void LiHeEdgeNodeWithXFormFragment::~LiHeEdgeNodeWithXFormFragment(LiHeEdgeNodeWithXFormFragment *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6580210;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGMipmapLevel::~HGMipmapLevel(this);
}

{
  void *v1;

  LiHeEdgeNodeWithXFormFragment::~LiHeEdgeNodeWithXFormFragment(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeEdgeNodeWithXFormFragment::SetParameter(LiHeEdgeNodeWithXFormFragment *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  __n128 *v8;
  int32x4_t v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (__n128 *)*((_QWORD *)this + 51);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == a3.n128_f32[0])
  {
    return 0;
  }
  v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *v8 = (__n128)v9;
  v8[11] = a3;
  v7 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float LiHeEdgeNodeWithXFormFragment::GetParameter(LiHeEdgeNodeWithXFormFragment *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[44];
    a3[1] = v3[45];
    a3[2] = v3[46];
    result = v3[47];
    a3[3] = result;
  }
  return result;
}

double LiHeEdgeNodeWithXFormFragment::GetOutput(LiHeEdgeNodeWithXFormFragment *this, HGRenderer *a2)
{
  uint64_t v2;
  __int128 v3;
  double result;

  if (*((_DWORD *)this + 104))
  {
    v2 = *((_QWORD *)this + 51);
    v3 = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(v2 + 16) = *(unint64_t *)(v2 + 80);
    *(_OWORD *)(*((_QWORD *)this + 51) + 32) = (unint64_t)v3;
    *(_OWORD *)(*((_QWORD *)this + 51) + 48) = xmmword_1B304F250;
    result = 0.0;
    *(_OWORD *)(*((_QWORD *)this + 51) + 64) = xmmword_1B304EFF0;
    *((_DWORD *)this + 104) = 0;
  }
  return result;
}

const char *LiHeGridShader::GetProgram(LiHeGridShader *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000bf3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
             "    const half4 c1 = half4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[8]);\n"
             "    s1.x = 1.00000f / s0.x;\n"
             "    r0.x = 1.00000h / half(hg_Params[1].x);\n"
             "    s2.zw = s1.xx*hg_Params[8].xy;\n"
             "    s2.y = dot(frag._texCoord0, hg_Params[7]);\n"
             "    s1.zw = s2.zw*-s2.yy + hg_Params[7].xy;\n"
             "    s1.zw = s1.xx*s1.zw;\n"
             "    s2.x = dot(frag._texCoord0, hg_Params[6]);\n"
             "    s2.zw = -s2.xx*s2.zw + hg_Params[6].xy;\n"
             "    s2.zw = s2.zw*s1.xx;\n"
             "    s1.yz = abs(s1.wz);\n"
             "    r0.z = dot(half2(s1.yz), 1.00000h);\n"
             "    s1.xy = s1.xx*s2.xy;\n"
             "    s2.xy = s1.xy*float2(r0.xx);\n"
             "    s0.y = 1.00000f / hg_Params[0].x;\n"
             "    s2.xy = fract(s2.xy);\n"
             "    s2.xy = s2.xy - float2(c0.xx);\n"
             "    s2 = abs(s2);\n"
             "    s2.xy = -s2.xy + float2(c0.xx);\n"
             "    s1.xy = s0.yy*s1.xy;\n"
             "    s2.z = dot(s2.zw, 1.00000f);\n"
             "    s2.w = float(r0.z);\n"
             "    s1.zw = s2.zw*float2(r0.xx);\n"
             "    s1.zw = s1.zw*float2(c0.yy) + float2(c0.zz);\n"
             "    s1.zw = s2.zw*s1.zw;\n"
             "    s2.xy = s2.xy*-hg_Params[1].xx;\n"
             "    s1.zw = 1.00000f / s1.zw;\n"
             "    s1.zw = clamp(s2.xy*s1.zw + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    s2.xy = s2.zw*float2(r0.xx) + float2(c0.ww);\n"
             "    s2.xy = clamp(s2.xy*float2(c1.xx), 0.00000f, 1.00000f);\n"
             "    r0.xy = mix(half2(s1.zw), c0.zz, half2(s2.xy));\n"
             "    s2.x = 1.00000f / s2.z;\n"
             "    s2.y = 1.00000f / float(r0.z);\n"
             "    s2.zw = s2.zw*s0.yy + float2(c0.ww);\n"
             "    s1.zw = fract(s1.xy);\n"
             "    r0.zw = half2(s2.xy)*half2(hg_Params[1].xx);\n"
             "    r0.zw = clamp(r0.zw*c1.yy, 0.00000h, 1.00000h);\n"
             "    r0.xy = r0.xy*r0.zw;\n"
             "    r0.zw = half2(s2.xy)*half2(hg_Params[0].xx);\n"
             "    s1.zw = s1.zw - float2(c0.xx);\n"
             "    s1.zw = -fabs(s1.zw) + float2(c0.xx);\n"
             "    s1.zw = s1.zw*-hg_Params[0].xx;\n"
             "    s2.xy = clamp(s1.zw*s2.xy + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    s2.zw = clamp(s2.zw*float2(c1.xx), 0.00000f, 1.00000f);\n"
             "    s2.xy = mix(s2.xy, float2(c0.zz), s2.zw);\n"
             "    r0.zw = clamp(r0.zw*c1.yy, 0.00000h, 1.00000h);\n"
             "    s2.xy = s2.xy*float2(r0.zw);\n"
             "    s2.z = fmax(float(r0.x), float(r0.y));\n"
             "    s3.xy = fmax(s2.xy, float2(c1.zz));\n"
             "    s3.zw = fabs(s1.xy) + float2(c0.ww);\n"
             "    s2.x = fmax(s2.z, float(c1.z));\n"
             "    s0.y = fmax(s3.x, s3.y);\n"
             "    s2.z = -s0.y*float(c0.y) + s2.x;\n"
             "    s0.z = fmax(s2.z, float(c1.z));\n"
             "    s3.zw = clamp(s3.zw + s3.zw, 0.00000f, 1.00000f);\n"
             "    s1 = mix(hg_Params[4], hg_Params[2], s3.wwww);\n"
             "    s2 = mix(hg_Params[5], hg_Params[2], s3.zzzz);\n"
             "    s2 = s3.xxxx*s2;\n"
             "    s1 = s3.yyyy*s1;\n"
             "    s2 = fmax(s2, s1);\n"
             "    s3 = s0.zzzz*hg_Params[3];\n"
             "    s1.x = float(c0.z) - s0.y;\n"
             "    s2 = s3*s1.xxxx + s2;\n"
             "    s2.xyz = pow(s2.xyz, hg_Params[10].xyz);\n"
             "    s0.x = float(s0.x >= float(c1.z));\n"
             "    output.color0 = s2*s0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ed8ec89c:8d8bad1c:31b22599:a4072085\n"
             "//SIG=00400000:00000000:00000000:00000000:0002:000b:0005:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000aeb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
             "    const float4 c1 = float4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[8]);\n"
             "    r1.x = 1.00000f / r0.x;\n"
             "    r2.x = 1.00000f / hg_Params[1].x;\n"
             "    r3.zw = r1.xx*hg_Params[8].xy;\n"
             "    r3.y = dot(frag._texCoord0, hg_Params[7]);\n"
             "    r1.zw = r3.zw*-r3.yy + hg_Params[7].xy;\n"
             "    r1.zw = r1.xx*r1.zw;\n"
             "    r3.x = dot(frag._texCoord0, hg_Params[6]);\n"
             "    r3.zw = -r3.xx*r3.zw + hg_Params[6].xy;\n"
             "    r3.zw = r3.zw*r1.xx;\n"
             "    r1.yz = abs(r1.wz);\n"
             "    r2.z = dot(r1.yz, 1.00000f);\n"
             "    r1.xy = r1.xx*r3.xy;\n"
             "    r3.xy = r1.xy*r2.xx;\n"
             "    r0.y = 1.00000f / hg_Params[0].x;\n"
             "    r3.xy = fract(r3.xy);\n"
             "    r3.xy = r3.xy - c0.xx;\n"
             "    r3 = abs(r3);\n"
             "    r3.xy = -r3.xy + c0.xx;\n"
             "    r1.xy = r0.yy*r1.xy;\n"
             "    r3.z = dot(r3.zw, 1.00000f);\n"
             "    r3.w = r2.z;\n"
             "    r1.zw = r3.zw*r2.xx;\n"
             "    r1.zw = r1.zw*c0.yy + c0.zz;\n"
             "    r1.zw = r3.zw*r1.zw;\n"
             "    r3.xy = r3.xy*-hg_Params[1].xx;\n"
             "    r1.zw = 1.00000f / r1.zw;\n"
             "    r1.zw = clamp(r3.xy*r1.zw + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    r3.xy = r3.zw*r2.xx + c0.ww;\n"
             "    r3.xy = clamp(r3.xy*c1.xx, 0.00000f, 1.00000f);\n"
             "    r2.xy = mix(r1.zw, c0.zz, r3.xy);\n"
             "    r3.x = 1.00000f / r3.z;\n"
             "    r3.y = 1.00000f / r2.z;\n"
             "    r3.zw = r3.zw*r0.yy + c0.ww;\n"
             "    r1.zw = fract(r1.xy);\n"
             "    r2.zw = r3.xy*hg_Params[1].xx;\n"
             "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
             "    r2.xy = r2.xy*r2.zw;\n"
             "    r2.zw = r3.xy*hg_Params[0].xx;\n"
             "    r1.zw = r1.zw - c0.xx;\n"
             "    r1.zw = -fabs(r1.zw) + c0.xx;\n"
             "    r1.zw = r1.zw*-hg_Params[0].xx;\n"
             "    r3.xy = clamp(r1.zw*r3.xy + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
             "    r3.zw = clamp(r3.zw*c1.xx, 0.00000f, 1.00000f);\n"
             "    r3.xy = mix(r3.xy, c0.zz, r3.zw);\n"
             "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
             "    r3.xy = r3.xy*r2.zw;\n"
             "    r3.z = fmax(r2.x, r2.y);\n"
             "    r2.xy = fmax(r3.xy, c1.zz);\n"
             "    r2.zw = fabs(r1.xy) + c0.ww;\n"
             "    r3.x = fmax(r3.z, c1.z);\n"
             "    r0.y = fmax(r2.x, r2.y);\n"
             "    r3.z = -r0.y*c0.y + r3.x;\n"
             "    r0.z = fmax(r3.z, c1.z);\n"
             "    r2.zw = clamp(r2.zw + r2.zw, 0.00000f, 1.00000f);\n"
             "    r1 = mix(hg_Params[4], hg_Params[2], r2.wwww);\n"
             "    r3 = mix(hg_Params[5], hg_Params[2], r2.zzzz);\n"
             "    r3 = r2.xxxx*r3;\n"
             "    r1 = r2.yyyy*r1;\n"
             "    r3 = fmax(r3, r1);\n"
             "    r2 = r0.zzzz*hg_Params[3];\n"
             "    r1.x = c0.z - r0.y;\n"
             "    r3 = r2*r1.xxxx + r3;\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[10].xyz);\n"
             "    r0.x = float(r0.x >= c1.z);\n"
             "    output.color0 = r3*r0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=686d35cb:f7c64bbf:a273928a:e418b585\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:000b:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000cfa\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
           "    const highp vec4 c1 = vec4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal8);\n"
           "    r1.x = 1.00000 / r0.x;\n"
           "    r2.x = 1.00000 / hg_ProgramLocal1.x;\n"
           "    r3.zw = r1.xx*hg_ProgramLocal8.xy;\n"
           "    r3.y = dot(hg_TexCoord0, hg_ProgramLocal7);\n"
           "    r1.zw = r3.zw*-r3.yy + hg_ProgramLocal7.xy;\n"
           "    r1.zw = r1.xx*r1.zw;\n"
           "    r3.x = dot(hg_TexCoord0, hg_ProgramLocal6);\n"
           "    r3.zw = -r3.xx*r3.zw + hg_ProgramLocal6.xy;\n"
           "    r3.zw = r3.zw*r1.xx;\n"
           "    r1.yz = abs(r1.wz);\n"
           "    r2.z = dot(r1.yz, vec2(1.00000));\n"
           "    r1.xy = r1.xx*r3.xy;\n"
           "    r3.xy = r1.xy*r2.xx;\n"
           "    r0.y = 1.00000 / hg_ProgramLocal0.x;\n"
           "    r3.xy = fract(r3.xy);\n"
           "    r3.xy = r3.xy - c0.xx;\n"
           "    r3 = abs(r3);\n"
           "    r3.xy = -r3.xy + c0.xx;\n"
           "    r1.xy = r0.yy*r1.xy;\n"
           "    r3.z = dot(r3.zw, vec2(1.00000));\n"
           "    r3.w = r2.z;\n"
           "    r1.zw = r3.zw*r2.xx;\n"
           "    r1.zw = r1.zw*c0.yy + c0.zz;\n"
           "    r1.zw = r3.zw*r1.zw;\n"
           "    r3.xy = r3.xy*-hg_ProgramLocal1.xx;\n"
           "    r1.zw = vec2(1.00000) / r1.zw;\n"
           "    r1.zw = clamp(r3.xy*r1.zw + hg_ProgramLocal9.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xy = r3.zw*r2.xx + c0.ww;\n"
           "    r3.xy = clamp(r3.xy*c1.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r2.xy = mix(r1.zw, c0.zz, r3.xy);\n"
           "    r3.x = 1.00000 / r3.z;\n"
           "    r3.y = 1.00000 / r2.z;\n"
           "    r3.zw = r3.zw*r0.yy + c0.ww;\n"
           "    r1.zw = fract(r1.xy);\n"
           "    r2.zw = r3.xy*hg_ProgramLocal1.xx;\n"
           "    r2.zw = clamp(r2.zw*c1.yy, vec2(0.00000), vec2(1.00000));\n"
           "    r2.xy = r2.xy*r2.zw;\n"
           "    r2.zw = r3.xy*hg_ProgramLocal0.xx;\n"
           "    r1.zw = r1.zw - c0.xx;\n"
           "    r1.zw = -abs(r1.zw) + c0.xx;\n"
           "    r1.zw = r1.zw*-hg_ProgramLocal0.xx;\n"
           "    r3.xy = clamp(r1.zw*r3.xy + hg_ProgramLocal9.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r3.zw = clamp(r3.zw*c1.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xy = mix(r3.xy, c0.zz, r3.zw);\n"
           "    r2.zw = clamp(r2.zw*c1.yy, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xy = r3.xy*r2.zw;\n"
           "    r3.z = max(r2.x, r2.y);\n"
           "    r2.xy = max(r3.xy, c1.zz);\n"
           "    r2.zw = abs(r1.xy) + c0.ww;\n"
           "    r3.x = max(r3.z, c1.z);\n"
           "    r0.y = max(r2.x, r2.y);\n"
           "    r3.z = -r0.y*c0.y + r3.x;\n"
           "    r0.z = max(r3.z, c1.z);\n"
           "    r2.zw = clamp(r2.zw + r2.zw, vec2(0.00000), vec2(1.00000));\n"
           "    r1 = mix(hg_ProgramLocal4, hg_ProgramLocal2, r2.wwww);\n"
           "    r3 = mix(hg_ProgramLocal5, hg_ProgramLocal2, r2.zzzz);\n"
           "    r3 = r2.xxxx*r3;\n"
           "    r1 = r2.yyyy*r1;\n"
           "    r3 = max(r3, r1);\n"
           "    r2 = r0.zzzz*hg_ProgramLocal3;\n"
           "    r1.x = c0.z - r0.y;\n"
           "    r3 = r2*r1.xxxx + r3;\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal10.xyz);\n"
           "    r0.x = float(r0.x >= c1.z);\n"
           "    gl_FragColor = r3*r0.xxxx;\n"
           "}\n"
           "//MD5=545c6776:d003218f:e4cdaa44:c07590d0\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:000b:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void LiHeGridShader::InitProgramDescriptor(LiHeGridShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeGridShader_hgc_visible", "//Metal1.0     \n//LEN=0000000a42\n[[ visible ]] FragmentOut LiHeGridShader_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 2.000000000, 1.000000000, -0.2500000000);\n"
    "    const float4 c1 = float4(1.333333373, 0.1500000060, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[8]);\n"
    "    r1.x = 1.00000f / r0.x;\n"
    "    r2.x = 1.00000f / hg_Params[1].x;\n"
    "    r3.zw = r1.xx*hg_Params[8].xy;\n"
    "    r3.y = dot(texCoord0, hg_Params[7]);\n"
    "    r1.zw = r3.zw*-r3.yy + hg_Params[7].xy;\n"
    "    r1.zw = r1.xx*r1.zw;\n"
    "    r3.x = dot(texCoord0, hg_Params[6]);\n"
    "    r3.zw = -r3.xx*r3.zw + hg_Params[6].xy;\n"
    "    r3.zw = r3.zw*r1.xx;\n"
    "    r1.yz = abs(r1.wz);\n"
    "    r2.z = dot(r1.yz, 1.00000f);\n"
    "    r1.xy = r1.xx*r3.xy;\n"
    "    r3.xy = r1.xy*r2.xx;\n"
    "    r0.y = 1.00000f / hg_Params[0].x;\n"
    "    r3.xy = fract(r3.xy);\n"
    "    r3.xy = r3.xy - c0.xx;\n"
    "    r3 = abs(r3);\n"
    "    r3.xy = -r3.xy + c0.xx;\n"
    "    r1.xy = r0.yy*r1.xy;\n"
    "    r3.z = dot(r3.zw, 1.00000f);\n"
    "    r3.w = r2.z;\n"
    "    r1.zw = r3.zw*r2.xx;\n"
    "    r1.zw = r1.zw*c0.yy + c0.zz;\n"
    "    r1.zw = r3.zw*r1.zw;\n"
    "    r3.xy = r3.xy*-hg_Params[1].xx;\n"
    "    r1.zw = 1.00000f / r1.zw;\n"
    "    r1.zw = clamp(r3.xy*r1.zw + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
    "    r3.xy = r3.zw*r2.xx + c0.ww;\n"
    "    r3.xy = clamp(r3.xy*c1.xx, 0.00000f, 1.00000f);\n"
    "    r2.xy = mix(r1.zw, c0.zz, r3.xy);\n"
    "    r3.x = 1.00000f / r3.z;\n"
    "    r3.y = 1.00000f / r2.z;\n"
    "    r3.zw = r3.zw*r0.yy + c0.ww;\n"
    "    r1.zw = fract(r1.xy);\n"
    "    r2.zw = r3.xy*hg_Params[1].xx;\n"
    "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
    "    r2.xy = r2.xy*r2.zw;\n"
    "    r2.zw = r3.xy*hg_Params[0].xx;\n"
    "    r1.zw = r1.zw - c0.xx;\n"
    "    r1.zw = -fabs(r1.zw) + c0.xx;\n"
    "    r1.zw = r1.zw*-hg_Params[0].xx;\n"
    "    r3.xy = clamp(r1.zw*r3.xy + hg_Params[9].xx, 0.00000f, 1.00000f);\n"
    "    r3.zw = clamp(r3.zw*c1.xx, 0.00000f, 1.00000f);\n"
    "    r3.xy = mix(r3.xy, c0.zz, r3.zw);\n"
    "    r2.zw = clamp(r2.zw*c1.yy, 0.00000f, 1.00000f);\n"
    "    r3.xy = r3.xy*r2.zw;\n"
    "    r3.z = fmax(r2.x, r2.y);\n"
    "    r2.xy = fmax(r3.xy, c1.zz);\n"
    "    r2.zw = fabs(r1.xy) + c0.ww;\n"
    "    r3.x = fmax(r3.z, c1.z);\n"
    "    r0.y = fmax(r2.x, r2.y);\n"
    "    r3.z = -r0.y*c0.y + r3.x;\n"
    "    r0.z = fmax(r3.z, c1.z);\n"
    "    r2.zw = clamp(r2.zw + r2.zw, 0.00000f, 1.00000f);\n"
    "    r1 = mix(hg_Params[4], hg_Params[2], r2.wwww);\n"
    "    r3 = mix(hg_Params[5], hg_Params[2], r2.zzzz);\n"
    "    r3 = r2.xxxx*r3;\n"
    "    r1 = r2.yyyy*r1;\n"
    "    r3 = fmax(r3, r1);\n"
    "    r2 = r0.zzzz*hg_Params[3];\n"
    "    r1.x = c0.z - r0.y;\n"
    "    r3 = r2*r1.xxxx + r3;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[10].xyz);\n"
    "    r0.x = float(r0.x >= c1.z);\n"
    "    output.color0 = r3*r0.xxxx;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCBA80()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeGridShader");
}

void sub_1B2DCBA90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514D0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCBB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCBBD0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCBBC8);
}

_QWORD *LiHeGridShader::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeGridShader [hgc1]");
}

uint64_t LiHeGridShader::BindTexture(LiHeGridShader *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeGridShader::Bind(LiHeGridShader *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(LiHeGridShader *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeGridShader::RenderTile(LiHeGridShader *this, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  _OWORD *v10;
  float32x4_t v11;
  __int128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int64x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int64x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int64x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v7 = 16 * a2[3].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v8 = 0;
        v9 = v6;
        do
        {
          v10 = (_OWORD *)*((_QWORD *)this + 51);
          v11 = *((float32x4_t *)v10 + 8);
          v12 = v10[9];
          v13 = vmulq_f32(v9, v11);
          v14 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          v15 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL));
          v17 = *((float32x4_t *)v10 + 10);
          v16 = *((float32x4_t *)v10 + 11);
          v19 = *((float32x4_t *)v10 + 12);
          v18 = *((float32x4_t *)v10 + 13);
          v20 = vminq_f32(vmaxq_f32(vrecpeq_f32(v15), v16), v19);
          v21 = vminq_f32(vmaxq_f32(vmulq_f32(v20, vrecpsq_f32(v15, v20)), v16), v19);
          v22 = *((float32x4_t *)v10 + 1);
          v23 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v22), v18), v16), v19);
          v21.i64[0] = vmulq_f32(v21, vrecpsq_f32(v15, v21)).u64[0];
          v25 = *((float32x4_t *)v10 + 6);
          v24 = *((float32x4_t *)v10 + 7);
          v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0);
          v27 = vmulq_f32(v9, v24);
          v28 = vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL));
          v29 = (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_lane_s64(v11.i64[0], 0), v21.f32[0]);
          v28.i64[0] = vaddq_f32(v28, (float32x4_t)vdupq_laneq_s64((int64x2_t)v28, 1)).u64[0];
          v28.i64[1] = v29.i64[1];
          *(float32x2_t *)v29.i8 = vsub_f32(*(float32x2_t *)v24.f32, vmul_lane_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)v28.f32, 1));
          v30 = vmulq_f32(v9, v25);
          v31 = vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL));
          v32 = vaddq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL));
          v33 = *((int8x16_t *)v10 + 14);
          v34 = *((int8x16_t *)v10 + 15);
          v35 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v32, (int8x16_t)v28);
          v36 = vmulq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v25.i64[0], 0), vmulq_n_f32(v35, v35.f32[0])), v21.f32[0]);
          *(float32x2_t *)&v21.u32[2] = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v29.i8);
          v23.i64[0] = vmulq_f32(v23, vrecpsq_f32(v22, v23)).u64[0];
          *(int8x8_t *)v26.i8 = vqtbl1_s8((int8x16_t)v21, *(int8x8_t *)v34.i8);
          v35.i64[1] = v36.i64[1];
          v26.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v21, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
          v37 = *((float32x4_t *)v10 + 17);
          v38 = (float32x4_t)vandq_s8(*((int8x16_t *)v10 + 16), v26);
          v39 = vmulq_n_f32(v35, v38.f32[0]);
          v40 = vmulq_n_f32(v39, v23.f32[0]);
          v32.i64[0] = v40.i64[0];
          v32.i64[1] = v36.i64[1];
          v41 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v10);
          v42 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v41)), v16), v19);
          v43 = (int64x2_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v38, 0xCuLL), v38);
          v44 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
          v45 = vsubq_f32(v40, vsubq_f32(v44, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v44, v32), (int8x16_t)v37, (int8x16_t)0)));
          v47 = *((float32x4_t *)v10 + 18);
          v46 = *((int8x16_t *)v10 + 19);
          v45.i64[0] = vsubq_f32(v45, v47).u64[0];
          v45.i64[1] = v36.i64[1];
          v48 = (int8x16_t)vmulq_f32(v42, vrecpsq_f32(v41, v42));
          v49 = vabsq_f32(v45);
          v41.i64[0] = vsubq_f32(v47, v49).u64[0];
          v41.i64[1] = vaddq_f32(v49, (float32x4_t)vrev64q_s32(*(int32x4_t *)&v49)).i64[1];
          v42.i64[0] = v23.i64[0];
          v42.i64[1] = vdupq_laneq_s64(v43, 1).u64[0];
          v48.i64[0] = vbslq_s8(v33, (int8x16_t)v15, v48).u64[0];
          v50 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vrev64q_s32((int32x4_t)v42), (int8x16_t)v41);
          v51 = vmulq_lane_f32(v39, *(float32x2_t *)v48.i8, 1);
          v42.i64[0] = v51.i64[0];
          v42.i64[1] = vmulq_f32(vaddq_f32(v37, vmulq_f32(v18, vmulq_n_f32(v50, *(float *)&v23))), v50).i64[1];
          v52 = vminq_f32(vmaxq_f32(vrecpeq_f32(v42), v16), v19);
          v53 = vminq_f32(vmaxq_f32(vmulq_f32(v52, vrecpsq_f32(v42, v52)), v16), v19);
          v54 = vmulq_f32(v53, vrecpsq_f32(v42, v53));
          v53.i64[0] = v51.i64[0];
          v53.i64[1] = v54.i64[1];
          v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0);
          v56 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)vmulq_f32(vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0)), v50), 8uLL);
          v57 = vmaxq_f32(vaddq_f32(v55, vmulq_f32(v53, v56)), v47);
          v58 = vmulq_n_f32(v56, v23.f32[0]);
          v60 = *((float32x4_t *)v10 + 20);
          v59 = *((float32x4_t *)v10 + 21);
          v61 = (int64x2_t)vminq_f32(v57, v37);
          v58.i64[0] = vaddq_f32(v60, v58).u64[0];
          v58.i64[1] = v50.i64[1];
          v62 = *((float32x4_t *)v10 + 22);
          v63 = (float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v51, 8uLL);
          v64 = vminq_f32(vmaxq_f32(vmulq_f32(v59, v58), v62), v37);
          v65 = vaddq_f32((float32x4_t)vdupq_laneq_s64(v61, 1), vmulq_f32(vsubq_f32(v37, v63), v64));
          v66 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v64, 8uLL);
          v67 = vminq_f32(vmaxq_f32(vrecpeq_f32(v66), v16), v19);
          v68 = vminq_f32(vmaxq_f32(vmulq_f32(v67, vrecpsq_f32(v66, v67)), v16), v19);
          *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), 4uLL);
          v69.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v65, 0xCuLL).u64[0];
          v66.i64[0] = vmulq_f32(v68, vrecpsq_f32(v66, v68)).u64[0];
          v70 = vminq_f32(vmaxq_f32(vrecpeq_f32(v69), v16), v19);
          v66.i64[1] = v50.i64[1];
          v71 = vminq_f32(vmaxq_f32(vmulq_f32(v70, vrecpsq_f32(v69, v70)), v16), v19);
          v72 = (float32x4_t)vbslq_s8(*((int8x16_t *)v10 + 23), (int8x16_t)vmulq_f32(v71, vrecpsq_f32(v69, v71)), (int8x16_t)v66);
          v73 = vmulq_lane_f32(v72, *(float32x2_t *)v48.i8, 1);
          v74 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
          v75 = (int8x16_t)vaddq_f32(v62, v73);
          v76 = vsubq_f32(v63, vsubq_f32(v74, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, v63), (int8x16_t)v59, (int8x16_t)0)));
          v77 = (float32x4_t)vextq_s8(v75, (int8x16_t)v72, 8uLL);
          v72.i64[1] = v75.i64[1];
          v50.i64[0] = v65.i64[0];
          v50.i64[1] = vmulq_n_f32(v77, *(float *)&v22).i64[1];
          v78 = *((float32x4_t *)v10 + 24);
          v79 = *((float32x4_t *)v10 + 25);
          v80 = vmulq_n_f32(v77, COERCE_FLOAT(*v10));
          v81 = vsubq_f32(v76, v79);
          v82 = *((float32x4_t *)v10 + 27);
          v83 = (int8x16_t)vmulq_f32(v65, (float32x4_t)vdupq_laneq_s64((int64x2_t)vminq_f32(vmaxq_f32(vmulq_f32(v78, v50), v60), v59), 1));
          *(int32x2_t *)&v55.u32[2] = vdup_lane_s32(*(int32x2_t *)&v12, 1);
          v84 = vmaxq_f32(vaddq_f32(v55, vmulq_f32(v72, (float32x4_t)vextq_s8((int8x16_t)vmulq_f32(vaddq_f32(v79, (float32x4_t)vorrq_s8(*((int8x16_t *)v10 + 26), (int8x16_t)v81)), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10, 0))), (int8x16_t)v51, 8uLL))), v79);
          v72.i64[0] = v83.i64[0];
          v85 = vminq_f32(v84, v78);
          v81.i64[0] = v85.i64[0];
          v81.i64[1] = v75.i64[1];
          v72.i64[1] = v80.i64[1];
          v86 = vminq_f32(vmaxq_f32(vmulq_f32(v78, v72), v60), v59);
          v72.i64[0] = vextq_s8((int8x16_t)v86, v83, 0xCuLL).u64[0];
          *(int8x8_t *)&v72.u32[2] = vext_s8(*(int8x8_t *)v83.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), 4uLL);
          v87 = (float32x4_t)vextq_s8((int8x16_t)v86, v83, 8uLL);
          v86.i64[0] = vmulq_f32(v87, vaddq_f32(v85, vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)vminq_f32(vmaxq_f32(vmulq_f32(v82, v81), v60), v59), 1), vsubq_f32(v82, v85)))).u64[0];
          v86.i64[1] = vmaxq_f32(v87, v72).i64[1];
          v89 = *((float32x4_t *)v10 + 28);
          v88 = *((float32x4_t *)v10 + 29);
          v90 = (int64x2_t)vsubq_f32(vabsq_f32((float32x4_t)vdupq_lane_s64(v51.i64[0], 0)), v89);
          v81.i64[0] = vmaxq_f32(v86, v79).u64[0];
          v51.i64[0] = v81.i64[0];
          v51.i64[1] = v90.i64[1];
          v91 = vminq_f32(vmaxq_f32(vaddq_f32(v51, v51), v60), v59);
          v81.i64[1] = vdupq_laneq_s64(v90, 1).u64[0];
          v15.i64[0] = vbslq_s8(v33, (int8x16_t)v15, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v81), v51)).u64[0];
          v92 = vmaxq_f32(vsubq_f32(vmaxq_f32(v86, (float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), vmulq_lane_f32(v18, *(float32x2_t *)v15.f32, 1)), v60);
          v93 = (int8x16_t)vaddq_f32(vmaxq_f32(vmulq_n_f32(vaddq_f32(*((float32x4_t *)v10 + 5), vmulq_laneq_f32(vsubq_f32(*((float32x4_t *)v10 + 2), *((float32x4_t *)v10 + 5)), v91, 2)), v81.f32[0]), vmulq_lane_f32(vaddq_f32(*((float32x4_t *)v10 + 4), vmulq_laneq_f32(vsubq_f32(*((float32x4_t *)v10 + 2), *((float32x4_t *)v10 + 4)), v91, 3)), *(float32x2_t *)v81.f32, 1)), vmulq_n_f32(
                               vmulq_laneq_f32(*((float32x4_t *)v10 + 3), v92, 2),
                               vsubq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)).f32[0]));
          v94 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v37, (int8x16_t)vceqq_f32(v17, v88)), v88), (int8x16_t)v37, v93);
          v95 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)v10 + 30), (int8x16_t)v94), (int8x16_t)v37);
          v96 = (float32x4_t)vandq_s8((int8x16_t)v37, (int8x16_t)vcgtq_f32(v95, *((float32x4_t *)v10 + 34)));
          v97 = vsubq_f32(vsubq_f32(v95, v37), vmulq_f32(vmulq_f32(*((float32x4_t *)v10 + 35), v96), v95));
          v98 = vmulq_f32(v97, v97);
          v99 = vmaxq_f32(vmulq_f32(v17, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)v10 + 32), (int8x16_t)vcgtq_f32(*((float32x4_t *)v10 + 31), v94))), *((float32x4_t *)v10 + 33)), v96), vmulq_f32(v97, vaddq_f32(*((float32x4_t *)v10 + 42), vmulq_f32(v97, vaddq_f32(
                              vaddq_f32(*((float32x4_t *)v10 + 40), vmulq_f32(*((float32x4_t *)v10 + 41), v97)),
                              vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)v10 + 36), vmulq_f32(*((float32x4_t *)v10 + 37), v97)), vmulq_f32(v98, vaddq_f32(*((float32x4_t *)v10 + 38), vmulq_f32(*((float32x4_t *)v10 + 39), v97))))))))))), *((float32x4_t *)v10 + 43));
          v15.i64[1] = v92.i64[1];
          v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
          v101 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v37, (int8x16_t)vcgtq_f32(v100, v99)));
          v102 = vsubq_f32(v99, v101);
          *(float32x4_t *)(*(_QWORD *)&v5 + v8) = vmulq_n_f32((float32x4_t)vbslq_s8(v46, v93, (int8x16_t)vmulq_f32(vaddq_f32(v37, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)v10 + 48), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)v10 + 46), vmulq_f32(*((float32x4_t *)v10 + 47), v102)), vmulq_f32(
                                                                                            vmulq_f32(v102, v102),
                                                                                            vaddq_f32(*((float32x4_t *)v10 + 44), vmulq_f32(*((float32x4_t *)v10 + 45), v102)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)v10 + 49), vcvtq_s32_f32(v101)), 0x17uLL))), *(float *)vandq_s8((int8x16_t)v82, (int8x16_t)vcgeq_f32(v15, v88)).i32);
          v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B304F230);
          v8 += 16;
        }
        while (16 * v4 != v8);
      }
      v6 = vaddq_f32(v6, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeGridShader::GetDOD(LiHeGridShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t LiHeGridShader::GetROI(LiHeGridShader *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeGridShader::LiHeGridShader(LiHeGridShader *this)
{
  _QWORD *v2;
  LiHeGridShader::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6580488;
  v3 = (LiHeGridShader::State *)operator new();
  LiHeGridShader::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCC410(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeGridShader::~LiHeGridShader(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6580488;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40C9D4F132);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeGridShader::~LiHeGridShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeGridShader::SetParameter(LiHeGridShader *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  __n128 *v18;
  int32x4_t v19;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_58;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_58;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_58;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_58;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_58;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_58;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_58;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_58;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_58;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_58;
    case 10:
      v18 = (__n128 *)*((_QWORD *)this + 51);
      if (v18[10].n128_f32[0] == a3.n128_f32[0]
        && v18[10].n128_f32[1] == a3.n128_f32[0]
        && v18[10].n128_f32[2] == a3.n128_f32[0]
        && v18[10].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v19 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v19.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v18[10] = (__n128)v19;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[50] = a3;
LABEL_58:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeGridShader::GetParameter(LiHeGridShader *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_13;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_13;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_13;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_13;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_13;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_13;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_13;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_13;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_13;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_13;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[200];
      a3[1] = v14[201];
      a3[2] = v14[202];
      v4 = v14 + 203;
LABEL_13:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double LiHeGridShader::State::State(LiHeGridShader::State *this)
{
  double result;
  __int128 v2;

  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)&v2 = 0x80000000800000;
  *((_QWORD *)&v2 + 1) = 0x80000000800000;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = v2;
  *((int32x4_t *)this + 12) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 13) = xmmword_1B355BF80;
  *((_OWORD *)this + 14) = xmmword_1B3050E20;
  *((_OWORD *)this + 15) = xmmword_1B355BF90;
  __asm { FMOV            V2.4S, #1.0 }
  *((_OWORD *)this + 16) = xmmword_1B355BFA0;
  *((_OWORD *)this + 17) = _Q2;
  *((_OWORD *)this + 18) = xmmword_1B3052100;
  *((_OWORD *)this + 19) = xmmword_1B3050F70;
  *((_OWORD *)this + 20) = xmmword_1B3053880;
  *((_OWORD *)this + 21) = xmmword_1B355BFB0;
  *((_OWORD *)this + 22) = xmmword_1B3053090;
  *((_OWORD *)this + 23) = xmmword_1B3050FF0;
  *((_OWORD *)this + 24) = xmmword_1B355BFC0;
  *((_OWORD *)this + 25) = xmmword_1B30533E0;
  *((_OWORD *)this + 26) = xmmword_1B355BFD0;
  *((_OWORD *)this + 27) = xmmword_1B355BFE0;
  *((_OWORD *)this + 28) = xmmword_1B355BFF0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = xmmword_1B3051600;
  *((_OWORD *)this + 31) = xmmword_1B3051610;
  *((_OWORD *)this + 32) = xmmword_1B3051620;
  *((_OWORD *)this + 33) = xmmword_1B3051630;
  *((_OWORD *)this + 34) = xmmword_1B3051640;
  *((_OWORD *)this + 35) = xmmword_1B3051510;
  *((_OWORD *)this + 36) = xmmword_1B3525860;
  *((_OWORD *)this + 37) = xmmword_1B3525870;
  *((_OWORD *)this + 38) = xmmword_1B3525880;
  *((_OWORD *)this + 39) = xmmword_1B3525890;
  *((_OWORD *)this + 40) = xmmword_1B35258A0;
  *((_OWORD *)this + 41) = xmmword_1B35258B0;
  *((_OWORD *)this + 42) = xmmword_1B35258C0;
  *((_OWORD *)this + 43) = xmmword_1B3051690;
  *((_OWORD *)this + 44) = xmmword_1B35258D0;
  *((_OWORD *)this + 45) = xmmword_1B35258E0;
  *((_OWORD *)this + 46) = xmmword_1B35258F0;
  *((_OWORD *)this + 47) = xmmword_1B3525900;
  *((_OWORD *)this + 48) = xmmword_1B3525910;
  *((_OWORD *)this + 49) = xmmword_1B30516D0;
  *((_OWORD *)this + 50) = 0u;
  return result;
}

const char *LiHeLightProgramAmbient::GetProgram(LiHeLightProgramAmbient *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000267\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r0.xyz) + hg_Params[0].xyz;\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b89aac8d:61c96031:2b460eab:336a21ef\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000252\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r0.xyz + hg_Params[0].xyz;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=5fc1f2fa:c2f1042b:e82d9a29:6e503f59\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000021f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r0.xyz + hg_ProgramLocal0.xyz;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=ca07385b:b29db72b:73d91743:b9f38991\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void LiHeLightProgramAmbient::InitProgramDescriptor(LiHeLightProgramAmbient *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramAmbient_hgc_visible", "//Metal1.0     \n//LEN=0000000133\n[[ visible ]] FragmentOut LiHeLightProgramAmbient_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    output.color0.xyz = r0.xyz + hg_Params[0].xyz;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCCBD0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramAmbient");
}

void sub_1B2DCCBE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCCCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCCD20()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCCD18);
}

_QWORD *LiHeLightProgramAmbient::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramAmbient [hgc1]");
}

uint64_t LiHeLightProgramAmbient::BindTexture(LiHeLightProgramAmbient *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramAmbient::Bind(LiHeLightProgramAmbient *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(LiHeLightProgramAmbient *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramAmbient::RenderTile(LiHeLightProgramAmbient *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *((_QWORD *)this + 51);
          v12 = *(int8x16_t *)(v11 + 16);
          v13 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 32), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11));
          v14 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 16), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11));
          v15 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11));
          v16 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 + 16), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11));
          v17 = (int8x16_t *)(v5 + v10);
          v17[-2] = v13;
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v18) = -v9;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 16), *(int8x16_t *)(v6 + 16 * v18), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + 16 * v18), *(float32x4_t *)*((_QWORD *)this + 51)));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramAmbient::GetDOD(LiHeLightProgramAmbient *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightProgramAmbient::GetROI(LiHeLightProgramAmbient *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightProgramAmbient::LiHeLightProgramAmbient(LiHeLightProgramAmbient *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65806F0;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCCFD8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramAmbient::~LiHeLightProgramAmbient(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65806F0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramAmbient::~LiHeLightProgramAmbient(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramAmbient::SetParameter(LiHeLightProgramAmbient *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeLightProgramAmbient::GetParameter(LiHeLightProgramAmbient *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcLean2::GetProgram(HgcLean2 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000263\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy/r0.zz;\n"
             "    r0.zw = r0.xy*r0.xy;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ff028c11:1a11c41a:50106970:e6af15c9\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000255\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy/r0.zz;\n"
             "    r0.zw = r0.xy*r0.xy;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=742e4db8:12d3e023:6bcad12e:be3865f7\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001f6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r0.xy = r0.xy/r0.zz;\n"
           "    r0.zw = r0.xy*r0.xy;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=3bb0ba9c:604d3e53:2a877b16:8562c183\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0000:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLean2::InitProgramDescriptor(HgcLean2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLean2_hgc_visible", "//Metal1.0     \n//LEN=0000000127\n[[ visible ]] FragmentOut HgcLean2_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r0.xy = r0.xy/r0.zz;\n"
    "    r0.zw = r0.xy*r0.xy;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCD1BC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcLean2");
}

void sub_1B2DCD1CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCD2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCD30C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCD304);
}

_QWORD *HgcLean2::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLean2 [hgc1]");
}

uint64_t HgcLean2::BindTexture(HgcLean2 *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLean2::Bind(HgcLean2 *this, HGHandler *a2)
{
  (*(void (**)(HgcLean2 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcLean2::RenderTile(HgcLean2 *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t *v26;
  uint64_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v27) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(int32x4_t *)(v6 + v10 - 32);
          v12 = *(int32x4_t *)(v6 + v10 - 16);
          v13 = *(int32x4_t *)(v6 + v10);
          v14 = *(int32x4_t *)(v6 + v10 + 16);
          v15 = (float32x4_t)vdupq_laneq_s32(v11, 2);
          v16 = (float32x4_t)vdupq_laneq_s32(v12, 2);
          v17 = (float32x4_t)vdupq_laneq_s32(v13, 2);
          v18 = (float32x4_t)vdupq_laneq_s32(v14, 2);
          v19 = (float32x4_t *)*((_QWORD *)this + 51);
          v20 = v19[1];
          v21 = v19[2];
          v22 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v15), *v19), v20), v21);
          v23 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v16), *v19), v20), v21);
          v24 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v17), *v19), v20), v21);
          v25 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v18), *v19), v20), v21);
          *(float32x2_t *)v11.i8 = vmul_f32(*(float32x2_t *)v11.i8, vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v15, v22)));
          v11.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8);
          *(float32x2_t *)v12.i8 = vmul_f32(*(float32x2_t *)v12.i8, vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v16, v23)));
          v12.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8);
          *(float32x2_t *)v13.i8 = vmul_f32(*(float32x2_t *)v13.i8, vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v17, v24)));
          *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v18, v25)));
          v13.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8);
          v14.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8);
          v26 = (int32x4_t *)(v5 + v10);
          v26[-2] = v11;
          v26[-1] = v12;
          *v26 = v13;
          v26[1] = v14;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v27) = -v9;
      }
      if ((int)v27 < v4)
      {
        v27 = v27;
        do
        {
          v28 = *(int32x4_t *)(v6 + 16 * v27);
          v29 = (float32x4_t)vdupq_laneq_s32(v28, 2);
          v30 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v29), *(float32x4_t *)*((_QWORD *)this + 51)), *(float32x4_t *)(*((_QWORD *)this + 51) + 16)), *(float32x4_t *)(*((_QWORD *)this + 51) + 32));
          *(float32x2_t *)v28.i8 = vmul_f32(*(float32x2_t *)v28.i8, vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vrecpsq_f32(v29, v30)));
          v28.u64[1] = (unint64_t)vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
          *(int32x4_t *)(v5 + 16 * v27++) = v28;
        }
        while (v27 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLean2::GetDOD(HgcLean2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcLean2::GetROI(HgcLean2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcLean2::HgcLean2(HgcLean2 *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6580958;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_1B3052ED0;
  *(_OWORD *)(v3 + 16) = xmmword_1B30527A0;
  *(int32x4_t *)(v3 + 32) = vdupq_n_s32(0x7F7FFFFFu);
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCD648(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLean2::~HgcLean2(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6580958;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40EED21634);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcLean2::~HgcLean2(this);
  HGObject::operator delete(v1);
}

uint64_t HgcLean2::SetParameter(HgcLean2 *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcLean2::GetParameter(HgcLean2 *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeLightProgramInitPass::GetProgram(LiHeLightProgramInitPass *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00400000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000162\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor = hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=3516c664:47c72e5c:14a395a6:40522bd5\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
}

void LiHeLightProgramInitPass::InitProgramDescriptor(LiHeLightProgramInitPass *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramInitPass_hgc_visible", "//Metal1.0     \n//LEN=00000000d4\n[[ visible ]] FragmentOut LiHeLightProgramInitPass_hgc_visible(const constant float4* hg_Params)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0 = hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCD79C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramInitPass");
}

void sub_1B2DCD7AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *v33;
  char v34;
  __int128 v35;
  uint64_t v36[13];

  *(_DWORD *)(v31 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v31 - 56), "FragmentOut");
  *(_OWORD *)(v31 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v30, v31 - 64);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  memset(v36, 0, 24);
  LODWORD(v32) = 2;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float4");
  v35 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v36, (uint64_t)&v32);
  if (v34 < 0)
    operator delete(v33);
  HGProgramDescriptor::SetArgumentBindings(v30, v36);
  v32 = (void **)v36;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B2DCD868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a19;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_1B2DCD8A0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCD898);
}

_QWORD *LiHeLightProgramInitPass::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramInitPass [hgc1]");
}

uint64_t LiHeLightProgramInitPass::BindTexture(LiHeLightProgramInitPass *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeLightProgramInitPass::Bind(LiHeLightProgramInitPass *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(LiHeLightProgramInitPass *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramInitPass::RenderTile(LiHeLightProgramInitPass *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = (_OWORD *)(v5 + 32);
    v7 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        v8 = 0;
        v9 = v6;
        do
        {
          v10 = *(_OWORD *)*((_QWORD *)this + 51);
          *(v9 - 2) = v10;
          *(v9 - 1) = v10;
          *v9 = v10;
          v9[1] = v10;
          v9 += 4;
          v8 -= 4;
        }
        while (v4 + v8 > 3);
        LODWORD(v11) = -v8;
      }
      if ((int)v11 < v4)
      {
        v11 = v11;
        do
          *(_OWORD *)(v5 + 16 * v11++) = *(_OWORD *)*((_QWORD *)this + 51);
        while (v11 < v4);
      }
      ++v3;
      v6 = (_OWORD *)((char *)v6 + v7);
      v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramInitPass::GetDOD(LiHeLightProgramInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t LiHeLightProgramInitPass::GetROI(LiHeLightProgramInitPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeLightProgramInitPass::LiHeLightProgramInitPass(LiHeLightProgramInitPass *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6580BC0;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCDA74(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramInitPass::~LiHeLightProgramInitPass(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6580BC0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramInitPass::~LiHeLightProgramInitPass(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramInitPass::SetParameter(LiHeLightProgramInitPass *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeLightProgramInitPass::GetParameter(LiHeLightProgramInitPass *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeLightProgramPointSurface::GetProgram(LiHeLightProgramPointSurface *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000007c3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[8] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[10] + s0;\n"
             "    s1 = s0 + hg_Params[11];\n"
             "    s0.x = float(s0.w < -hg_Params[11].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s1.xyz = s1.xyz/s0.xxx;\n"
             "    s0.xyz = hg_Params[0].xyz - s1.xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.xyz = -s1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    s0.w = rsqrt(s0.w);\n"
             "    s0.xyz = s0.www*s0.xyz;\n"
             "    s1.w = dot(s1.xyz, s1.xyz);\n"
             "    s1.w = rsqrt(s1.w);\n"
             "    s1.xyz = s1.www*s1.xyz + s0.xyz;\n"
             "    s0.y = dot(s0.xyz, hg_Params[4].xyz);\n"
             "    s1.xyz = normalize(s1.xyz).xyz;\n"
             "    s1.x = dot(s1.xyz, hg_Params[4].xyz);\n"
             "    s0.w = 1.00000f / s0.w;\n"
             "    s0.x = s0.w - hg_Params[7].x;\n"
             "    s2.x = fmax(s0.y, float(c0.x));\n"
             "    s0.x = fmax(s0.x, float(c0.x));\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    s0.z = s0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    s0.y = s0.x*hg_Params[6].z;\n"
             "    s0.x = s0.y*s0.x + s0.z;\n"
             "    s0.y = float(float(c0.z) < fabs(s2.x));\n"
             "    s0.x = fmax(s0.x, float(c0.y));\n"
             "    s1.x = pow(s1.x, hg_Params[3].x);\n"
             "    s1.x = select(float(c0.x), s1.x, -s0.y < 0.00000h);\n"
             "    s0 = hg_Params[1]/s0.xxxx;\n"
             "    s1 = s0*s1.xxxx;\n"
             "    s1 = s1*hg_Params[2];\n"
             "    s1 = s2.xxxx*s0 + s1;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0) + s1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=3ee468dd:a0c2ffd8:1f4c2c2f:1d63ba1c\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000c:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000770\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[8] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[10] + r0;\n"
             "    r1 = r0 + hg_Params[11];\n"
             "    r0.x = float(r0.w < -hg_Params[11].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r1.xyz = r1.xyz/r0.xxx;\n"
             "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    r0.xyz = r0.www*r0.xyz;\n"
             "    r1.w = dot(r1.xyz, r1.xyz);\n"
             "    r1.w = rsqrt(r1.w);\n"
             "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
             "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
             "    r1.xyz = normalize(r1.xyz).xyz;\n"
             "    r1.x = dot(r1.xyz, hg_Params[4].xyz);\n"
             "    r0.w = 1.00000f / r0.w;\n"
             "    r0.x = r0.w - hg_Params[7].x;\n"
             "    r2.x = fmax(r0.y, c0.x);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    r0.y = r0.x*hg_Params[6].z;\n"
             "    r0.x = r0.y*r0.x + r0.z;\n"
             "    r0.y = float(c0.z < fabs(r2.x));\n"
             "    r0.x = fmax(r0.x, c0.y);\n"
             "    r1.x = pow(r1.x, hg_Params[3].x);\n"
             "    r1.x = select(c0.x, r1.x, -r0.y < 0.00000f);\n"
             "    r0 = hg_Params[1]/r0.xxxx;\n"
             "    r1 = r0*r1.xxxx;\n"
             "    r1 = r1*hg_Params[2];\n"
             "    r1 = r2.xxxx*r0 + r1;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d7b09eb4:8514d7a6:f1be0e16:d4a40832\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000c:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000921\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal9;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal8 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal10 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal11;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal11.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r1.xyz = r1.xyz/r0.xxx;\n"
           "    r0.xyz = hg_ProgramLocal0.xyz - r1.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.xyz = -r1.xyz*hg_ProgramLocal5.www + hg_ProgramLocal5.xyz;\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    r0.xyz = r0.www*r0.xyz;\n"
           "    r1.w = dot(r1.xyz, r1.xyz);\n"
           "    r1.w = inversesqrt(r1.w);\n"
           "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
           "    r0.y = dot(r0.xyz, hg_ProgramLocal4.xyz);\n"
           "    r1.xyz = normalize(r1.xyz).xyz;\n"
           "    r1.x = dot(r1.xyz, hg_ProgramLocal4.xyz);\n"
           "    r0.w = 1.00000 / r0.w;\n"
           "    r0.x = r0.w - hg_ProgramLocal7.x;\n"
           "    r2.x = max(r0.y, c0.x);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    r0.z = r0.x*hg_ProgramLocal6.y + hg_ProgramLocal6.x;\n"
           "    r0.y = r0.x*hg_ProgramLocal6.z;\n"
           "    r0.x = r0.y*r0.x + r0.z;\n"
           "    r0.y = float(c0.z < abs(r2.x));\n"
           "    r0.x = max(r0.x, c0.y);\n"
           "    r1.x = pow(r1.x, hg_ProgramLocal3.x);\n"
           "    r1.x = -r0.y < 0.00000 ? r1.x : c0.x;\n"
           "    r0 = hg_ProgramLocal1/r0.xxxx;\n"
           "    r1 = r0*r1.xxxx;\n"
           "    r1 = r1*hg_ProgramLocal2;\n"
           "    r1 = r2.xxxx*r0 + r1;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r2 + r1;\n"
           "}\n"
           "//MD5=edf16448:360c4a3a:edfe90cd:3504cc2a\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000c:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramPointSurface::InitProgramDescriptor(LiHeLightProgramPointSurface *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramPointSurface_hgc_visible", "//Metal1.0     \n//LEN=000000065a\n[[ visible ]] FragmentOut LiHeLightProgramPointSurface_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 9.999999747e-05, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[9];\n"
    "    r0 = texCoord1.xxxx*hg_Params[8] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[10] + r0;\n"
    "    r1 = r0 + hg_Params[11];\n"
    "    r0.x = float(r0.w < -hg_Params[11].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r1.xyz = r1.xyz/r0.xxx;\n"
    "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    r0.xyz = r0.www*r0.xyz;\n"
    "    r1.w = dot(r1.xyz, r1.xyz);\n"
    "    r1.w = rsqrt(r1.w);\n"
    "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
    "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
    "    r1.xyz = normalize(r1.xyz).xyz;\n"
    "    r1.x = dot(r1.xyz, hg_Params[4].xyz);\n"
    "    r0.w = 1.00000f / r0.w;\n"
    "    r0.x = r0.w - hg_Params[7].x;\n"
    "    r2.x = fmax(r0.y, c0.x);\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
    "    r0.y = r0.x*hg_Params[6].z;\n"
    "    r0.x = r0.y*r0.x + r0.z;\n"
    "    r0.y = float(c0.z < fabs(r2.x));\n"
    "    r0.x = fmax(r0.x, c0.y);\n"
    "    r1.x = pow(r1.x, hg_Params[3].x);\n"
    "    r1.x = select(c0.x, r1.x, -r0.y < 0.00000f);\n"
    "    r0 = hg_Params[1]/r0.xxxx;\n"
    "    r1 = r0*r1.xxxx;\n"
    "    r1 = r1*hg_Params[2];\n"
    "    r1 = r2.xxxx*r0 + r1;\n"
    "    r2 = color0;\n"
    "    output.color0 = r2 + r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCDC58()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramPointSurface");
}

void sub_1B2DCDC68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051E50;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCDDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCDDF0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCDDE8);
}

_QWORD *LiHeLightProgramPointSurface::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramPointSurface [hgc1]");
}

uint64_t LiHeLightProgramPointSurface::BindTexture(LiHeLightProgramPointSurface *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramPointSurface::Bind(LiHeLightProgramPointSurface *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(LiHeLightProgramPointSurface *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramPointSurface::RenderTile(LiHeLightProgramPointSurface *this, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = 16 * a2[3].i32[0];
    v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v10 = 0;
        v11 = v7;
        do
        {
          v12 = *((_QWORD *)this + 51);
          v13 = *(float32x4_t *)(v12 + 176);
          v14 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v12 + 144), *(float32x2_t *)v11.f32, 1), vmulq_n_f32(*(float32x4_t *)(v12 + 128), v11.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v12 + 160), v11, 2));
          v15 = vaddq_f32(v13, v14);
          v16 = (int8x16_t)vcgtq_f32(vnegq_f32(v13), v14);
          v17 = *(float32x4_t *)(v12 + 192);
          v18 = *(int8x16_t *)(v12 + 208);
          v19 = (float32x4_t)vandq_s8((int8x16_t)v17, v16);
          v19.i64[0] = vbslq_s8(v18, vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v17)).u64[0];
          v20 = (int32x4_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v17);
          v19.i64[1] = v20.i64[1];
          v21 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v19, v17), (int8x16_t)vdupq_laneq_s32(v20, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)), 0);
          v22 = *(float32x4_t *)(v12 + 224);
          v23 = *(float32x4_t *)(v12 + 240);
          v24 = vminq_f32(vmaxq_f32(vrecpeq_f32(v21), v22), v23);
          v25 = vminq_f32(vmaxq_f32(vmulq_f32(v24, vrecpsq_f32(v21, v24)), v22), v23);
          v26 = vmulq_f32(v15, vmulq_f32(v25, vrecpsq_f32(v21, v25)));
          v27 = vsubq_f32(*(float32x4_t *)v12, v26);
          v28 = (int32x4_t)vmulq_f32(v27, v27);
          v29 = *(float32x4_t *)(v12 + 64);
          v30 = vsubq_f32(*(float32x4_t *)(v12 + 80), vmulq_laneq_f32(v26, *(float32x4_t *)(v12 + 80), 3));
          v31 = *(int8x16_t *)(v12 + 256);
          v32 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v28), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL))), (int8x16_t)v27);
          v33 = vminq_f32(vrsqrteq_f32(v32), v23);
          v34 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v32), v33)), v23);
          v35 = (int8x16_t)vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v32), v34));
          v36 = (int32x4_t)vmulq_f32(v30, v30);
          v37 = (float32x4_t)vbslq_s8(v31, v35, (int8x16_t)v27);
          v38 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v36), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL))), (int8x16_t)v30);
          v39 = vminq_f32(vrsqrteq_f32(v38), v23);
          v40 = (float32x4_t)vbslq_s8(v31, v35, (int8x16_t)vmulq_laneq_f32(v37, v37, 3));
          v41 = vminq_f32(vmulq_f32(v39, vrsqrtsq_f32(vmulq_f32(v39, v38), v39)), v23);
          v42 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v41, vrsqrtsq_f32(vmulq_f32(v41, v38), v41)), (int8x16_t)v30);
          v43 = vaddq_f32(vmulq_laneq_f32(v42, v42, 3), v40);
          v44 = vmulq_f32(v29, v40);
          v45 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v7, 4uLL), vaddq_f32(v44, (float32x4_t)vrev64q_s32((int32x4_t)v44)));
          v46 = (int32x4_t)vmulq_f32(v43, v43);
          v47.i64[0] = v45.i64[0];
          v48 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v46, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 1)));
          v47.i64[1] = v40.i64[1];
          v49 = vminq_f32(vrsqrteq_f32(v48), v23);
          v50 = vminq_f32(vmulq_f32(v49, vrsqrtsq_f32(vmulq_f32(v49, v48), v49)), v23);
          v51 = vmulq_f32(v29, vmulq_f32(vmulq_f32(v50, vrsqrtsq_f32(vmulq_f32(v50, v48), v50)), v43));
          v52 = vminq_f32(vmaxq_f32(vrecpeq_f32(v47), v22), v23);
          v53 = vminq_f32(vmaxq_f32(vmulq_f32(v52, vrecpsq_f32(v47, v52)), v22), v23);
          v54 = (int8x16_t)vmulq_f32(v53, vrecpsq_f32(v47, v53));
          v50.i64[0] = vextq_s8(v54, v45, 0xCuLL).u64[0];
          v45.i64[1] = v54.i64[1];
          *(int8x8_t *)&v50.u32[2] = vext_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), 4uLL);
          v55 = *(int8x16_t *)(v12 + 96);
          v56 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vsubq_f32(v50, *(float32x4_t *)(v12 + 112)), v45);
          v45.i64[0] = vmaxq_f32(v56, v17).u64[0];
          v57 = *(float32x4_t *)(v12 + 304);
          v58 = *(float32x4_t *)(v12 + 48);
          v45.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v55, 0), vmulq_n_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v7, v55, 0xCuLL), *(float *)&v45)).i64[1];
          v59 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vceqq_f32(v58, v17)), v17), (int8x16_t)v57, (int8x16_t)vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), vaddq_f32(v51, (float32x4_t)vrev64q_s32((int32x4_t)v51))), v17));
          v60 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v12 + 336), (int8x16_t)v59), (int8x16_t)v57);
          v61 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v12 + 272), (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v55, v55, 4uLL), *(float *)v45.i32), v45);
          v62 = (float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vcgtq_f32(v60, *(float32x4_t *)(v12 + 400)));
          v63 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v59, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v12 + 368), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v12 + 352), v59))), *(float32x4_t *)(v12 + 384)), v62);
          v64 = vsubq_f32(vsubq_f32(v60, v57), vmulq_f32(vmulq_f32(*(float32x4_t *)(v12 + 416), v62), v60));
          v65 = vmulq_f32(v64, v64);
          v66 = vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v56), v17);
          v67 = (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)vcagtq_f32(v66, *(float32x4_t *)(v12 + 288)), (int8x16_t)v57));
          v68 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), vmulq_lane_f32(v61, *(float32x2_t *)v61.f32, 1)), v67), *(float32x4_t *)(v12 + 320)), v67);
          v69 = vmaxq_f32(vmulq_f32(v58, vaddq_f32(v63, vmulq_f32(v64, vaddq_f32(*(float32x4_t *)(v12 + 528), vmulq_f32(v64, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 496), vmulq_f32(*(float32x4_t *)(v12 + 512), v64)), vmulq_f32(v65, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 432), vmulq_f32(*(float32x4_t *)(v12 + 448), v64)), vmulq_f32(v65, vaddq_f32(*(float32x4_t *)(v12 + 464), vmulq_f32(*(float32x4_t *)(v12 + 480), v64))))))))))),
                  *(float32x4_t *)(v12 + 544));
          v70 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          v71 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vcgtq_f32(v70, v69)));
          v72 = vsubq_f32(v69, v71);
          v73 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v68), v17);
          v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.i8, 0);
          v75 = vminq_f32(vmaxq_f32(vrecpeq_f32(v74), v22), v23);
          v76 = vminq_f32(vmaxq_f32(vmulq_f32(v75, vrecpsq_f32(v74, v75)), v22), v23);
          v77 = vmulq_f32(vmulq_f32(v76, vrecpsq_f32(v74, v76)), *(float32x4_t *)(v12 + 16));
          *(float32x4_t *)(*(_QWORD *)&v5 + v10) = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v6 + v10), vaddq_f32(vmulq_n_f32(v77, v66.f32[0]), vmulq_f32(*(float32x4_t *)(v12 + 32), vmulq_n_f32(v77, *(float *)vbslq_s8(v73, (int8x16_t)vmulq_f32(vaddq_f32(v57, vmulq_f32(v72, vaddq_f32(*(float32x4_t *)(v12 + 624), vmulq_f32(v72, vaddq_f32(
                                                                                              vaddq_f32(*(float32x4_t *)(v12 + 592), vmulq_f32(*(float32x4_t *)(v12 + 608), v72)), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(*(float32x4_t *)(v12 + 560), vmulq_f32(*(float32x4_t *)(v12 + 576), v72)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v12 + 640), vcvtq_s32_f32(v71)), 0x17uLL)), (int8x16_t)v17).i32))));
          v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v8;
      *(_QWORD *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramPointSurface::GetDOD(LiHeLightProgramPointSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightProgramPointSurface::GetROI(LiHeLightProgramPointSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightProgramPointSurface::LiHeLightProgramPointSurface(LiHeLightProgramPointSurface *this)
{
  _QWORD *v2;
  LiHeLightProgramPointSurface::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6580E28;
  v3 = (LiHeLightProgramPointSurface::State *)operator new();
  LiHeLightProgramPointSurface::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCE57C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6580E28;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C407C97CFA8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramPointSurface::~LiHeLightProgramPointSurface(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramPointSurface::SetParameter(LiHeLightProgramPointSurface *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 0xB)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeLightProgramPointSurface::GetParameter(LiHeLightProgramPointSurface *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0xB)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double LiHeLightProgramPointSurface::State::State(LiHeLightProgramPointSurface::State *this)
{
  __int128 v1;
  double result;

  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 12) = xmmword_1B355C070;
  *((_OWORD *)this + 13) = xmmword_1B3050E20;
  *(_QWORD *)&v1 = 0x80000000800000;
  *((_QWORD *)&v1 + 1) = 0x80000000800000;
  *((_OWORD *)this + 14) = v1;
  *((int32x4_t *)this + 15) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 16) = xmmword_1B3050F70;
  *((_OWORD *)this + 17) = xmmword_1B3050FF0;
  *((_OWORD *)this + 18) = xmmword_1B355C080;
  *((_OWORD *)this + 19) = xmmword_1B304F230;
  *((_OWORD *)this + 20) = xmmword_1B355C090;
  *((_OWORD *)this + 21) = xmmword_1B3051830;
  *((_OWORD *)this + 22) = xmmword_1B3051840;
  *((_OWORD *)this + 23) = xmmword_1B3051850;
  *((_OWORD *)this + 24) = xmmword_1B3051860;
  *((_OWORD *)this + 25) = xmmword_1B3051870;
  *((_OWORD *)this + 26) = xmmword_1B3051880;
  *((_OWORD *)this + 27) = xmmword_1B3053700;
  *((_OWORD *)this + 28) = xmmword_1B3053710;
  *((_OWORD *)this + 29) = xmmword_1B3053720;
  *((_OWORD *)this + 30) = xmmword_1B3053730;
  *((_OWORD *)this + 31) = xmmword_1B3053740;
  *((_OWORD *)this + 32) = xmmword_1B355C0A0;
  *((_OWORD *)this + 33) = xmmword_1B355C0B0;
  *((_OWORD *)this + 34) = xmmword_1B30518D0;
  *((_OWORD *)this + 35) = xmmword_1B355C0C0;
  *((_OWORD *)this + 36) = xmmword_1B355C0D0;
  *((_OWORD *)this + 37) = xmmword_1B355C0E0;
  *((_OWORD *)this + 38) = xmmword_1B355C0F0;
  *((_OWORD *)this + 39) = xmmword_1B355C100;
  *(_QWORD *)&result = 127;
  *((_OWORD *)this + 40) = xmmword_1B3051910;
  return result;
}

const char *LiHeLightProgramPointSurfaceDiffuse::GetProgram(LiHeLightProgramPointSurfaceDiffuse *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000005f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[5] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[7] + s0;\n"
             "    s1 = s0 + hg_Params[8];\n"
             "    s0.x = float(s0.w < -hg_Params[8].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.x = rsqrt(s0.w);\n"
             "    s0.xyz = s1.xxx*s0.xyz;\n"
             "    s0.w = 1.00000f / s1.x;\n"
             "    s1.x = dot(s0.xyz, hg_Params[2].xyz);\n"
             "    s0.w = s0.w - hg_Params[4].w;\n"
             "    s0.w = fmax(s0.w, float(c0.x));\n"
             "    s2.z = s0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    s2.y = s0.w*hg_Params[3].z;\n"
             "    s0.w = s2.y*s0.w + s2.z;\n"
             "    s0.w = fmax(s0.w, float(c0.y));\n"
             "    s0 = hg_Params[1]/s0.wwww;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    output.color0 = s0*s1.xxxx + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=43196f93:7bc84309:f132a4d1:ec1f6d3f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0009:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[5] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[7] + r0;\n"
             "    r1 = r0 + hg_Params[8];\n"
             "    r0.x = float(r0.w < -hg_Params[8].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.x = rsqrt(r0.w);\n"
             "    r0.xyz = r1.xxx*r0.xyz;\n"
             "    r0.w = 1.00000f / r1.x;\n"
             "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
             "    r0.w = r0.w - hg_Params[4].w;\n"
             "    r0.w = fmax(r0.w, c0.x);\n"
             "    r2.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    r2.y = r0.w*hg_Params[3].z;\n"
             "    r0.w = r2.y*r0.w + r2.z;\n"
             "    r0.w = fmax(r0.w, c0.y);\n"
             "    r0 = hg_Params[1]/r0.wwww;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    output.color0 = r0*r1.xxxx + r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=871590c3:67444514:d3bac780:1dcd075f\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0009:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006e0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal6;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal5 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal7 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal8;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal8.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.x = inversesqrt(r0.w);\n"
           "    r0.xyz = r1.xxx*r0.xyz;\n"
           "    r0.w = 1.00000 / r1.x;\n"
           "    r1.x = dot(r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r0.w = r0.w - hg_ProgramLocal4.w;\n"
           "    r0.w = max(r0.w, c0.x);\n"
           "    r2.z = r0.w*hg_ProgramLocal3.y + hg_ProgramLocal3.x;\n"
           "    r2.y = r0.w*hg_ProgramLocal3.z;\n"
           "    r0.w = r2.y*r0.w + r2.z;\n"
           "    r0.w = max(r0.w, c0.y);\n"
           "    r0 = hg_ProgramLocal1/r0.wwww;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    gl_FragColor = r0*r1.xxxx + r2;\n"
           "}\n"
           "//MD5=79d21ec4:ee041d23:34c46e65:0ed66c62\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0009:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramPointSurfaceDiffuse::InitProgramDescriptor(LiHeLightProgramPointSurfaceDiffuse *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramPointSurfaceDiffuse_hgc_visible", "//Metal1.0     \n//LEN=00000004a3\n[[ visible ]] FragmentOut LiHeLightProgramPointSurfaceDiffuse_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[6];\n"
    "    r0 = texCoord1.xxxx*hg_Params[5] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[7] + r0;\n"
    "    r1 = r0 + hg_Params[8];\n"
    "    r0.x = float(r0.w < -hg_Params[8].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.x = rsqrt(r0.w);\n"
    "    r0.xyz = r1.xxx*r0.xyz;\n"
    "    r0.w = 1.00000f / r1.x;\n"
    "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
    "    r0.w = r0.w - hg_Params[4].w;\n"
    "    r0.w = fmax(r0.w, c0.x);\n"
    "    r2.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
    "    r2.y = r0.w*hg_Params[3].z;\n"
    "    r0.w = r2.y*r0.w + r2.z;\n"
    "    r0.w = fmax(r0.w, c0.y);\n"
    "    r0 = hg_Params[1]/r0.wwww;\n"
    "    r2 = color0;\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    output.color0 = r0*r1.xxxx + r2;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCE8C4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramPointSurfaceDiffuse");
}

void sub_1B2DCE8D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052270;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCEA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCEA5C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCEA54);
}

_QWORD *LiHeLightProgramPointSurfaceDiffuse::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramPointSurfaceDiffuse [hgc1]");
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::BindTexture(LiHeLightProgramPointSurfaceDiffuse *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::Bind(LiHeLightProgramPointSurfaceDiffuse *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(LiHeLightProgramPointSurfaceDiffuse *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::RenderTile(LiHeLightProgramPointSurfaceDiffuse *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unint64_t v44;
  int8x16_t v45;
  unint64_t v46;
  int8x16_t v47;
  unint64_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t *v130;
  uint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int8x16_t v137;
  float32x4_t v138;
  int32x4_t v139;
  int64x2_t v140;
  float32x4_t v141;
  unint64_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int8x16_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v131) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *((_QWORD *)this + 51);
          v18 = *(float32x4_t *)(v16 + 96);
          v17 = *(float32x4_t *)(v16 + 112);
          v20 = *(float32x4_t *)(v16 + 64);
          v19 = *(float32x4_t *)(v16 + 80);
          v21 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(v19, v13.f32[0])), vmulq_laneq_f32(v17, v13, 2));
          v22 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(v19, v14.f32[0])), vmulq_laneq_f32(v17, v14, 2));
          v23 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v15.f32, 1), vmulq_n_f32(v19, v15.f32[0])), vmulq_laneq_f32(v17, v15, 2));
          v24 = *(float32x4_t *)(v16 + 128);
          v25 = *(float32x4_t *)(v16 + 144);
          v26 = vaddq_f32(v24, v21);
          v27 = vaddq_f32(v24, v22);
          v28 = vaddq_f32(v24, v23);
          v29 = vnegq_f32(v24);
          v30 = vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v29, v21));
          v31 = vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v29, v22));
          v32 = vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v29, v23));
          v33 = vextq_s8(v30, v30, 0xCuLL);
          v35 = *(float32x4_t *)(v16 + 160);
          v34 = *(float32x4_t *)(v16 + 176);
          v36 = (int32x4_t)vbslq_s8((int8x16_t)v35, v33, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), v25));
          v37 = (int32x4_t)vbslq_s8((int8x16_t)v35, vextq_s8(v31, v31, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), v25));
          v38 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v26), v25);
          v39 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v27), v25);
          v40 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), v25);
          v41 = (int32x4_t)vbslq_s8((int8x16_t)v35, vextq_s8(v32, v32, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), v25));
          v42.i64[0] = v36.i64[0];
          v42.i64[1] = v38.i64[1];
          v35.i64[0] = v37.i64[0];
          v35.i64[1] = v39.i64[1];
          v43.i64[0] = v41.i64[0];
          v44 = vdupq_laneq_s64(v38, 1).u64[0];
          v45 = vextq_s8((int8x16_t)v38, (int8x16_t)v36, 8uLL);
          v43.i64[1] = v40.i64[1];
          v36.i64[1] = v44;
          v46 = vdupq_laneq_s64(v39, 1).u64[0];
          v47 = vextq_s8((int8x16_t)v39, (int8x16_t)v37, 8uLL);
          v37.i64[1] = v46;
          v48 = vdupq_laneq_s64(v40, 1).u64[0];
          v49 = vextq_s8((int8x16_t)v40, (int8x16_t)v41, 8uLL);
          v41.i64[1] = v48;
          v50 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v42, v25), v45, (int8x16_t)vrev64q_s32(v36));
          v51 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v35, v25), v47, (int8x16_t)vrev64q_s32(v37));
          v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v43, v25), v49, (int8x16_t)vrev64q_s32(v41));
          v53 = *(float32x4_t *)(v16 + 192);
          v54 = *(int8x16_t *)(v16 + 208);
          v55 = vminq_f32(vmaxq_f32(vrecpeq_f32(v50), v34), v53);
          v56 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v34), v53);
          v57 = vminq_f32(vmaxq_f32(vrecpeq_f32(v52), v34), v53);
          v58 = vminq_f32(vmaxq_f32(vmulq_f32(v55, vrecpsq_f32(v50, v55)), v34), v53);
          v59 = vminq_f32(vmaxq_f32(vmulq_f32(v56, vrecpsq_f32(v51, v56)), v34), v53);
          v60 = vminq_f32(vmaxq_f32(vmulq_f32(v57, vrecpsq_f32(v52, v57)), v34), v53);
          v61 = vmulq_n_f32(v26, vmulq_f32(v58, vrecpsq_f32(v50, v58)).f32[0]);
          v62 = *(float32x4_t *)(v16 + 16);
          v63 = vsubq_f32(*(float32x4_t *)v16, v61);
          v64 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v27, vmulq_f32(v59, vrecpsq_f32(v51, v59)).f32[0]));
          v65 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v28, vmulq_f32(v60, vrecpsq_f32(v52, v60)).f32[0]));
          v66 = (int32x4_t)vmulq_f32(v63, v63);
          v67 = (int32x4_t)vmulq_f32(v64, v64);
          v68 = (int32x4_t)vmulq_f32(v65, v65);
          v69 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v66), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL))), (int8x16_t)v63);
          v70 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v67), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL))), (int8x16_t)v64);
          v71 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL))), (int8x16_t)v65);
          v72 = (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 0xCuLL);
          v73 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 0xCuLL);
          v74 = (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL);
          v75 = vminq_f32(vrsqrteq_f32(v72), v53);
          v76 = vminq_f32(vrsqrteq_f32(v73), v53);
          v77 = vminq_f32(vrsqrteq_f32(v74), v53);
          v78 = vminq_f32(vmulq_f32(v75, vrsqrtsq_f32(vmulq_f32(v75, v72), v75)), v53);
          v79 = vminq_f32(vmulq_f32(v76, vrsqrtsq_f32(vmulq_f32(v76, v73), v76)), v53);
          v80 = vminq_f32(vmulq_f32(v77, vrsqrtsq_f32(vmulq_f32(v77, v74), v77)), v53);
          v81 = (int8x16_t)vmulq_f32(v78, vrsqrtsq_f32(vmulq_f32(v72, v78), v78));
          v82 = (int8x16_t)vmulq_f32(v79, vrsqrtsq_f32(vmulq_f32(v73, v79), v79));
          v83 = (int8x16_t)vmulq_f32(v80, vrsqrtsq_f32(vmulq_f32(v74, v80), v80));
          v84 = (int8x16_t)vmulq_n_f32(v69, *(float *)v81.i32);
          v85 = (int8x16_t)vmulq_n_f32(v70, *(float *)v82.i32);
          v86 = (int8x16_t)vmulq_n_f32(v71, *(float *)v83.i32);
          v87 = (float32x4_t)vextq_s8(v81, v81, 4uLL);
          v88 = (float32x4_t)vextq_s8(v82, v82, 4uLL);
          v89 = (float32x4_t)vextq_s8(v83, v83, 4uLL);
          v90 = vminq_f32(vmaxq_f32(vrecpeq_f32(v87), v34), v53);
          v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v88), v34), v53);
          v92 = vminq_f32(vmaxq_f32(vrecpeq_f32(v89), v34), v53);
          v93 = vminq_f32(vmaxq_f32(vmulq_f32(v90, vrecpsq_f32(v87, v90)), v34), v53);
          v94 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v88, v91)), v34), v53);
          v95 = vminq_f32(vmaxq_f32(vmulq_f32(v92, vrecpsq_f32(v89, v92)), v34), v53);
          v96 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vmulq_f32(v93, vrecpsq_f32(v87, v93)), v84);
          v97 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vmulq_f32(v94, vrecpsq_f32(v88, v94)), v85);
          v98 = (float32x4_t)vbslq_s8(v54, (int8x16_t)vmulq_f32(v95, vrecpsq_f32(v89, v95)), v86);
          v99 = *(float32x4_t *)(v16 + 32);
          v100 = *(int8x16_t *)(v16 + 48);
          v101 = vmulq_f32(v99, v96);
          v102 = vmulq_f32(v99, v97);
          v103 = vmulq_f32(v99, v98);
          v104 = vsubq_f32(v96, v20);
          v105 = vsubq_f32(v97, v20);
          v106 = vsubq_f32(v98, v20);
          v107 = *(float32x4_t *)(v16 + 224);
          v108 = *(float32x4_t *)(v16 + 240);
          v109 = vmaxq_f32(v104, v107);
          v110 = vmaxq_f32(v105, v107);
          v111 = vmaxq_f32(v106, v107);
          v112 = (float32x4_t)vextq_s8(v100, v100, 0xCuLL);
          v113 = (float32x4_t)vextq_s8(v100, v100, 8uLL);
          v114 = (int64x2_t)vaddq_f32(v113, vmulq_laneq_f32(v112, v109, 3));
          v115 = (int64x2_t)vaddq_f32(v113, vmulq_laneq_f32(v112, v110, 3));
          v116 = (int64x2_t)vaddq_f32(v113, vmulq_laneq_f32(v112, v111, 3));
          v117 = (float32x4_t)vextq_s8(v100, v100, 4uLL);
          v113.i64[0] = vmulq_laneq_f32(v117, v109, 3).u64[0];
          v95.i64[0] = vmulq_laneq_f32(v117, v110, 3).u64[0];
          v113.i64[1] = vdupq_laneq_s64(v114, 1).u64[0];
          v117.i64[0] = vmulq_laneq_f32(v117, v111, 3).u64[0];
          v95.i64[1] = vdupq_laneq_s64(v115, 1).u64[0];
          v117.i64[1] = vdupq_laneq_s64(v116, 1).u64[0];
          v118 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v109, *(float32x2_t *)v113.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v113)), v108), 3);
          v119 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v110, *(float32x2_t *)v95.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v95)), v108), 3);
          v120 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v111, *(float32x2_t *)v117.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v117)), v108), 3);
          v121 = vminq_f32(vmaxq_f32(vrecpeq_f32(v118), v34), v53);
          v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v119), v34), v53);
          v123 = vminq_f32(vmaxq_f32(vrecpeq_f32(v120), v34), v53);
          v124 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vrecpsq_f32(v118, v121)), v34), v53);
          v125 = vminq_f32(vmaxq_f32(vmulq_f32(v122, vrecpsq_f32(v119, v122)), v34), v53);
          v126 = vminq_f32(vmaxq_f32(vmulq_f32(v123, vrecpsq_f32(v120, v123)), v34), v53);
          v127 = vmulq_f32(v126, vrecpsq_f32(v120, v126));
          v128 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16), vmulq_n_f32(vmulq_f32(vmulq_f32(v125, vrecpsq_f32(v119, v125)), v62), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), vaddq_f32(v102, (float32x4_t)vrev64q_s32((int32x4_t)v102))), v108).f32[0]));
          v129 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32), vmulq_n_f32(vmulq_f32(v127, v62), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL), vaddq_f32(v103, (float32x4_t)vrev64q_s32((int32x4_t)v103))), v108).f32[0]));
          v130 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v130 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11), vmulq_n_f32(vmulq_f32(vmulq_f32(v124, vrecpsq_f32(v118, v124)), v62), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), vaddq_f32(v101, (float32x4_t)vrev64q_s32((int32x4_t)v101))), v108).f32[0]));
          v130[1] = v128;
          v130[2] = v129;
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v131) = -v12;
      }
      if ((int)v131 < v5)
      {
        v131 = v131;
        do
        {
          v132 = *((_QWORD *)this + 51);
          v133 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v132 + 96), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)(v132 + 80), v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v132 + 112), v13, 2));
          v134 = *(float32x4_t *)(v132 + 128);
          v135 = *(float32x4_t *)(v132 + 144);
          v136 = vaddq_f32(v134, v133);
          v137 = vandq_s8((int8x16_t)v135, (int8x16_t)vcgtq_f32(vnegq_f32(v134), v133));
          v138 = *(float32x4_t *)(v132 + 176);
          v139 = (int32x4_t)vbslq_s8(*(int8x16_t *)(v132 + 160), vextq_s8(v137, v137, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL), v135));
          v140 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v136), v135);
          v141.i64[0] = v139.i64[0];
          v141.i64[1] = v140.i64[1];
          v142 = vdupq_laneq_s64(v140, 1).u64[0];
          v143 = vextq_s8((int8x16_t)v140, (int8x16_t)v139, 8uLL);
          v139.i64[1] = v142;
          v144 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v141, v135), v143, (int8x16_t)vrev64q_s32(v139));
          v145 = *(float32x4_t *)(v132 + 192);
          v146 = *(int8x16_t *)(v132 + 208);
          v147 = vminq_f32(vmaxq_f32(vrecpeq_f32(v144), v138), v145);
          v148 = vminq_f32(vmaxq_f32(vmulq_f32(v147, vrecpsq_f32(v144, v147)), v138), v145);
          v149 = vsubq_f32(*(float32x4_t *)v132, vmulq_n_f32(v136, vmulq_f32(v148, vrecpsq_f32(v144, v148)).f32[0]));
          v150 = (int32x4_t)vmulq_f32(v149, v149);
          v151 = (float32x4_t)vbslq_s8(v146, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v150), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v150, (int8x16_t)v150, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL))), (int8x16_t)v149);
          v152 = (float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 0xCuLL);
          v153 = vminq_f32(vrsqrteq_f32(v152), v145);
          v154 = vminq_f32(vmulq_f32(v153, vrsqrtsq_f32(vmulq_f32(v153, v152), v153)), v145);
          v155 = (int8x16_t)vmulq_f32(v154, vrsqrtsq_f32(vmulq_f32(v154, v152), v154));
          v156 = (float32x4_t)vextq_s8(v155, v155, 4uLL);
          v157 = vminq_f32(vmaxq_f32(vrecpeq_f32(v156), v138), v145);
          v158 = (int8x16_t)vmulq_n_f32(v151, *(float *)v155.i32);
          v159 = vminq_f32(vmaxq_f32(vmulq_f32(v157, vrecpsq_f32(v156, v157)), v138), v145);
          v160 = (float32x4_t)vbslq_s8(v146, (int8x16_t)vmulq_f32(v159, vrecpsq_f32(v156, v159)), v158);
          v161 = *(float32x4_t *)(v132 + 48);
          v162 = *(float32x4_t *)(v132 + 240);
          v163 = vmaxq_f32(vsubq_f32(v160, *(float32x4_t *)(v132 + 64)), *(float32x4_t *)(v132 + 224));
          v164 = vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v161, (int8x16_t)v8, 4uLL), v163, 3);
          v164.i64[1] = vaddq_f32(v161, v164).u64[0];
          v165 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(vaddq_f32(vmulq_lane_f32(v163, *(float32x2_t *)v164.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v164)), v162), 3);
          v166 = vminq_f32(vmaxq_f32(vrecpeq_f32(v165), v138), v145);
          v167 = vmulq_f32(*(float32x4_t *)(v132 + 32), v160);
          v168 = vminq_f32(vmaxq_f32(vmulq_f32(v166, vrecpsq_f32(v165, v166)), v138), v145);
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v131) = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + 16 * v131), vmulq_n_f32(vmulq_f32(vmulq_f32(v168, vrecpsq_f32(v165, v168)), *(float32x4_t *)(v132 + 16)), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), vaddq_f32(v167, (float32x4_t)vrev64q_s32((int32x4_t)v167))), v162).f32[0]));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v131;
        }
        while (v131 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::GetDOD(LiHeLightProgramPointSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::GetROI(LiHeLightProgramPointSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightProgramPointSurfaceDiffuse::LiHeLightProgramPointSurfaceDiffuse(LiHeLightProgramPointSurfaceDiffuse *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6581090;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = xmmword_1B355C070;
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 176) = v4;
  *(int32x4_t *)(v3 + 192) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 208) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = xmmword_1B355C130;
  *(_OWORD *)(v3 + 256) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DCF498(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6581090;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40881B329ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramPointSurfaceDiffuse::~LiHeLightProgramPointSurfaceDiffuse(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramPointSurfaceDiffuse::SetParameter(LiHeLightProgramPointSurfaceDiffuse *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_48;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_48;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == 0.0
        && v12[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[16] = a3;
      goto LABEL_48;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_48;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_48;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_48;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeLightProgramPointSurfaceDiffuse::GetParameter(LiHeLightProgramPointSurfaceDiffuse *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_11;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_11;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[64];
      a3[1] = v8[65];
      a3[2] = v8[66];
      v4 = v8 + 67;
      goto LABEL_11;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_11;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_11;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_11;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
LABEL_11:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *LiHeLightProgramSpotSurface::GetProgram(LiHeLightProgramSpotSurface *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000ac5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[8] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[10] + s0;\n"
             "    s1 = s0 + hg_Params[11];\n"
             "    s0.x = float(s0.w < -hg_Params[11].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s1.xyz = s1.xyz/s0.xxx;\n"
             "    s0.xyz = hg_Params[0].xyz - s1.xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.xyz = -s1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    s0.w = rsqrt(s0.w);\n"
             "    s0.xyz = s0.www*s0.xyz;\n"
             "    s1.w = dot(s1.xyz, s1.xyz);\n"
             "    s1.w = rsqrt(s1.w);\n"
             "    s1.xyz = s1.www*s1.xyz + s0.xyz;\n"
             "    s1.xyz = normalize(s1.xyz).xyz;\n"
             "    s1.y = dot(s1.xyz, hg_Params[4].xyz);\n"
             "    s1.w = dot(-s0.xyz, hg_Params[15].xyz);\n"
             "    s1.y = fmax(s1.y, float(c0.x));\n"
             "    s2.z = pow(s1.y, hg_Params[3].z);\n"
             "    s2.x = hg_Params[12].x - hg_Params[13].x;\n"
             "    s2.y = 1.00000f / s2.x;\n"
             "    s1.x = float(s1.w < hg_Params[13].x);\n"
             "    s2.x = s1.w - hg_Params[13].x;\n"
             "    s2.x = clamp(s2.x*s2.y, 0.00000f, 1.00000f);\n"
             "    s2.y = s2.x*float(c0.z) + float(c0.w);\n"
             "    s2.x = s2.x*s2.x;\n"
             "    s0.w = 1.00000f / s0.w;\n"
             "    s0.y = dot(s0.xyz, hg_Params[4].xyz);\n"
             "    s0.w = s0.w - hg_Params[7].w;\n"
             "    s0.xw = fmax(s0.wy, float2(c0.xx));\n"
             "    s0.z = s0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    s0.y = s0.x*hg_Params[6].z;\n"
             "    s0.x = s0.y*s0.x + s0.z;\n"
             "    s0.x = fmax(s0.x, float(c0.y));\n"
             "    s0.y = float(float(c1.y) < fabs(s0.w));\n"
             "    s1.x = float(-s1.x >= float(c0.x));\n"
             "    s1.y = float(s1.w < hg_Params[12].x);\n"
             "    s1.z = fmin(s1.x, s1.y);\n"
             "    s1.x = s1.x*s1.y + -s1.x;\n"
             "    s2.x = s2.x*s2.y;\n"
             "    s1.z = select(float(c0.x), s2.x, -s1.z < 0.00000h);\n"
             "    s1.y = pow(s1.w, hg_Params[14].y);\n"
             "    s1.x = select(s1.z, s1.y, s1.x < 0.00000h);\n"
             "    s0.x = s1.x/s0.x;\n"
             "    s2.x = select(float(c0.x), s2.z, -s0.y < 0.00000h);\n"
             "    s0.xyz = s0.xxx*hg_Params[1].xyz;\n"
             "    s2.xyz = s0.xyz*s2.xxx;\n"
             "    s2.xyz = s2.xyz*hg_Params[2].xyz;\n"
             "    s2.xyz = s0.www*s0.xyz + s2.xyz;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r0.xyz) + s2.xyz;\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=65f84872:8db1f15b:1f12c98c:ea287b12\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0010:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000a57\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[9];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[8] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[10] + r0;\n"
             "    r1 = r0 + hg_Params[11];\n"
             "    r0.x = float(r0.w < -hg_Params[11].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r1.xyz = r1.xyz/r0.xxx;\n"
             "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    r0.xyz = r0.www*r0.xyz;\n"
             "    r1.w = dot(r1.xyz, r1.xyz);\n"
             "    r1.w = rsqrt(r1.w);\n"
             "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
             "    r1.xyz = normalize(r1.xyz).xyz;\n"
             "    r1.y = dot(r1.xyz, hg_Params[4].xyz);\n"
             "    r1.w = dot(-r0.xyz, hg_Params[15].xyz);\n"
             "    r1.y = fmax(r1.y, c0.x);\n"
             "    r2.z = pow(r1.y, hg_Params[3].z);\n"
             "    r2.x = hg_Params[12].x - hg_Params[13].x;\n"
             "    r2.y = 1.00000f / r2.x;\n"
             "    r1.x = float(r1.w < hg_Params[13].x);\n"
             "    r2.x = r1.w - hg_Params[13].x;\n"
             "    r2.x = clamp(r2.x*r2.y, 0.00000f, 1.00000f);\n"
             "    r2.y = r2.x*c0.z + c0.w;\n"
             "    r2.x = r2.x*r2.x;\n"
             "    r0.w = 1.00000f / r0.w;\n"
             "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
             "    r0.w = r0.w - hg_Params[7].w;\n"
             "    r0.xw = fmax(r0.wy, c0.xx);\n"
             "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
             "    r0.y = r0.x*hg_Params[6].z;\n"
             "    r0.x = r0.y*r0.x + r0.z;\n"
             "    r0.x = fmax(r0.x, c0.y);\n"
             "    r0.y = float(c1.y < fabs(r0.w));\n"
             "    r1.x = float(-r1.x >= c0.x);\n"
             "    r1.y = float(r1.w < hg_Params[12].x);\n"
             "    r1.z = fmin(r1.x, r1.y);\n"
             "    r1.x = r1.x*r1.y + -r1.x;\n"
             "    r2.x = r2.x*r2.y;\n"
             "    r1.z = select(c0.x, r2.x, -r1.z < 0.00000f);\n"
             "    r1.y = pow(r1.w, hg_Params[14].y);\n"
             "    r1.x = select(r1.z, r1.y, r1.x < 0.00000f);\n"
             "    r0.x = r1.x/r0.x;\n"
             "    r2.x = select(c0.x, r2.z, -r0.y < 0.00000f);\n"
             "    r0.xyz = r0.xxx*hg_Params[1].xyz;\n"
             "    r2.xyz = r0.xyz*r2.xxx;\n"
             "    r2.xyz = r2.xyz*hg_Params[2].xyz;\n"
             "    r2.xyz = r0.www*r0.xyz + r2.xyz;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r1.xyz + r2.xyz;\n"
             "    output.color0.w = r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=660a03f2:ca8d7de1:4c4e1365:c0a9ca26\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0010:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000cac\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "uniform highp vec4 hg_ProgramLocal13;\n"
           "uniform highp vec4 hg_ProgramLocal14;\n"
           "uniform highp vec4 hg_ProgramLocal15;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal9;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal8 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal10 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal11;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal11.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r1.xyz = r1.xyz/r0.xxx;\n"
           "    r0.xyz = hg_ProgramLocal0.xyz - r1.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.xyz = -r1.xyz*hg_ProgramLocal5.www + hg_ProgramLocal5.xyz;\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    r0.xyz = r0.www*r0.xyz;\n"
           "    r1.w = dot(r1.xyz, r1.xyz);\n"
           "    r1.w = inversesqrt(r1.w);\n"
           "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
           "    r1.xyz = normalize(r1.xyz).xyz;\n"
           "    r1.y = dot(r1.xyz, hg_ProgramLocal4.xyz);\n"
           "    r1.w = dot(-r0.xyz, hg_ProgramLocal15.xyz);\n"
           "    r1.y = max(r1.y, c0.x);\n"
           "    r2.z = pow(r1.y, hg_ProgramLocal3.z);\n"
           "    r2.x = hg_ProgramLocal12.x - hg_ProgramLocal13.x;\n"
           "    r2.y = 1.00000 / r2.x;\n"
           "    r1.x = float(r1.w < hg_ProgramLocal13.x);\n"
           "    r2.x = r1.w - hg_ProgramLocal13.x;\n"
           "    r2.x = clamp(r2.x*r2.y, 0.00000, 1.00000);\n"
           "    r2.y = r2.x*c0.z + c0.w;\n"
           "    r2.x = r2.x*r2.x;\n"
           "    r0.w = 1.00000 / r0.w;\n"
           "    r0.y = dot(r0.xyz, hg_ProgramLocal4.xyz);\n"
           "    r0.w = r0.w - hg_ProgramLocal7.w;\n"
           "    r0.xw = max(r0.wy, c0.xx);\n"
           "    r0.z = r0.x*hg_ProgramLocal6.y + hg_ProgramLocal6.x;\n"
           "    r0.y = r0.x*hg_ProgramLocal6.z;\n"
           "    r0.x = r0.y*r0.x + r0.z;\n"
           "    r0.x = max(r0.x, c0.y);\n"
           "    r0.y = float(c1.y < abs(r0.w));\n"
           "    r1.x = float(-r1.x >= c0.x);\n"
           "    r1.y = float(r1.w < hg_ProgramLocal12.x);\n"
           "    r1.z = min(r1.x, r1.y);\n"
           "    r1.x = r1.x*r1.y + -r1.x;\n"
           "    r2.x = r2.x*r2.y;\n"
           "    r1.z = -r1.z < 0.00000 ? r2.x : c0.x;\n"
           "    r1.y = pow(r1.w, hg_ProgramLocal14.y);\n"
           "    r1.x = r1.x < 0.00000 ? r1.y : r1.z;\n"
           "    r0.x = r1.x/r0.x;\n"
           "    r2.x = -r0.y < 0.00000 ? r2.z : c0.x;\n"
           "    r0.xyz = r0.xxx*hg_ProgramLocal1.xyz;\n"
           "    r2.xyz = r0.xyz*r2.xxx;\n"
           "    r2.xyz = r2.xyz*hg_ProgramLocal2.xyz;\n"
           "    r2.xyz = r0.www*r0.xyz + r2.xyz;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r1.xyz + r2.xyz;\n"
           "    gl_FragColor.w = r1.w;\n"
           "}\n"
           "//MD5=97a6a3d5:75f0ced2:9f9d6cba:b992d90b\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0010:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramSpotSurface::InitProgramDescriptor(LiHeLightProgramSpotSurface *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramSpotSurface_hgc_visible", "//Metal1.0     \n//LEN=0000000940\n[[ visible ]] FragmentOut LiHeLightProgramSpotSurface_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 9.999999747e-05, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[9];\n"
    "    r0 = texCoord1.xxxx*hg_Params[8] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[10] + r0;\n"
    "    r1 = r0 + hg_Params[11];\n"
    "    r0.x = float(r0.w < -hg_Params[11].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r1.xyz = r1.xyz/r0.xxx;\n"
    "    r0.xyz = hg_Params[0].xyz - r1.xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.xyz = -r1.xyz*hg_Params[5].www + hg_Params[5].xyz;\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    r0.xyz = r0.www*r0.xyz;\n"
    "    r1.w = dot(r1.xyz, r1.xyz);\n"
    "    r1.w = rsqrt(r1.w);\n"
    "    r1.xyz = r1.www*r1.xyz + r0.xyz;\n"
    "    r1.xyz = normalize(r1.xyz).xyz;\n"
    "    r1.y = dot(r1.xyz, hg_Params[4].xyz);\n"
    "    r1.w = dot(-r0.xyz, hg_Params[15].xyz);\n"
    "    r1.y = fmax(r1.y, c0.x);\n"
    "    r2.z = pow(r1.y, hg_Params[3].z);\n"
    "    r2.x = hg_Params[12].x - hg_Params[13].x;\n"
    "    r2.y = 1.00000f / r2.x;\n"
    "    r1.x = float(r1.w < hg_Params[13].x);\n"
    "    r2.x = r1.w - hg_Params[13].x;\n"
    "    r2.x = clamp(r2.x*r2.y, 0.00000f, 1.00000f);\n"
    "    r2.y = r2.x*c0.z + c0.w;\n"
    "    r2.x = r2.x*r2.x;\n"
    "    r0.w = 1.00000f / r0.w;\n"
    "    r0.y = dot(r0.xyz, hg_Params[4].xyz);\n"
    "    r0.w = r0.w - hg_Params[7].w;\n"
    "    r0.xw = fmax(r0.wy, c0.xx);\n"
    "    r0.z = r0.x*hg_Params[6].y + hg_Params[6].x;\n"
    "    r0.y = r0.x*hg_Params[6].z;\n"
    "    r0.x = r0.y*r0.x + r0.z;\n"
    "    r0.x = fmax(r0.x, c0.y);\n"
    "    r0.y = float(c1.y < fabs(r0.w));\n"
    "    r1.x = float(-r1.x >= c0.x);\n"
    "    r1.y = float(r1.w < hg_Params[12].x);\n"
    "    r1.z = fmin(r1.x, r1.y);\n"
    "    r1.x = r1.x*r1.y + -r1.x;\n"
    "    r2.x = r2.x*r2.y;\n"
    "    r1.z = select(c0.x, r2.x, -r1.z < 0.00000f);\n"
    "    r1.y = pow(r1.w, hg_Params[14].y);\n"
    "    r1.x = select(r1.z, r1.y, r1.x < 0.00000f);\n"
    "    r0.x = r1.x/r0.x;\n"
    "    r2.x = select(c0.x, r2.z, -r0.y < 0.00000f);\n"
    "    r0.xyz = r0.xxx*hg_Params[1].xyz;\n"
    "    r2.xyz = r0.xyz*r2.xxx;\n"
    "    r2.xyz = r2.xyz*hg_Params[2].xyz;\n"
    "    r2.xyz = r0.www*r0.xyz + r2.xyz;\n"
    "    r1 = color0;\n"
    "    output.color0.xyz = r1.xyz + r2.xyz;\n"
    "    output.color0.w = r1.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DCF9F0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramSpotSurface");
}

void sub_1B2DCFA00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30520C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DCFB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DCFB88()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DCFB80);
}

_QWORD *LiHeLightProgramSpotSurface::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramSpotSurface [hgc1]");
}

uint64_t LiHeLightProgramSpotSurface::BindTexture(LiHeLightProgramSpotSurface *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramSpotSurface::Bind(LiHeLightProgramSpotSurface *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, *((_QWORD *)this + 51) + 224, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, *((_QWORD *)this + 51) + 240, 1);
  (*(void (**)(LiHeLightProgramSpotSurface *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramSpotSurface::RenderTile(LiHeLightProgramSpotSurface *this, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int64x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  int8x16_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int8x16_t v133;
  float32x4_t v134;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v126 = v7;
    v8 = 16 * a2[3].i32[0];
    v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v10 = 0;
        v11 = v126;
        do
        {
          v134 = v11;
          v12 = *((_QWORD *)this + 51);
          v13 = *(float32x4_t *)(v12 + 176);
          v14 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v12 + 144), *(float32x2_t *)v11.f32, 1), vmulq_n_f32(*(float32x4_t *)(v12 + 128), v11.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v12 + 160), v11, 2));
          v15 = vaddq_f32(v13, v14);
          v16 = (int8x16_t)vcgtq_f32(vnegq_f32(v13), v14);
          v17 = *(float32x4_t *)(v12 + 256);
          v133 = *(int8x16_t *)(v12 + 272);
          v18 = (float32x4_t)vandq_s8((int8x16_t)v17, v16);
          v19 = (int32x4_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v17);
          v18.i64[0] = vbslq_s8(v133, vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v17)).u64[0];
          v18.i64[1] = v19.i64[1];
          v20 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v18, v17), (int8x16_t)vdupq_laneq_s32(v19, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)), 0);
          v22 = *(float32x4_t *)(v12 + 288);
          v21 = *(float32x4_t *)(v12 + 304);
          v23 = vminq_f32(vmaxq_f32(vrecpeq_f32(v20), v22), v21);
          v24 = vminq_f32(vmaxq_f32(vmulq_f32(v23, vrecpsq_f32(v20, v23)), v22), v21);
          v25 = vmulq_f32(v15, vmulq_f32(v24, vrecpsq_f32(v20, v24)));
          v26 = vsubq_f32(*(float32x4_t *)v12, v25);
          v27 = (int32x4_t)vmulq_f32(v26, v26);
          v28 = *(float32x4_t *)(v12 + 64);
          v29 = *(int8x16_t *)(v12 + 320);
          v30 = *(float32x4_t *)(v12 + 336);
          v31 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v27), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL))), (int8x16_t)v26);
          v32 = vsubq_f32(*(float32x4_t *)(v12 + 80), vmulq_laneq_f32(v25, *(float32x4_t *)(v12 + 80), 3));
          v33 = vminq_f32(vrsqrteq_f32(v31), v21);
          v34 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v31), v33)), v21);
          v35 = (int32x4_t)vmulq_f32(v32, v32);
          v36 = (int8x16_t)vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v31), v34));
          v37 = (float32x4_t)vbslq_s8(v29, v36, (int8x16_t)v26);
          v38 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v35), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL))), (int8x16_t)v32);
          v39 = vminq_f32(vrsqrteq_f32(v38), v21);
          v40 = (int8x16_t)vmulq_laneq_f32(v37, v37, 3);
          v41 = vminq_f32(vmulq_f32(v39, vrsqrtsq_f32(vmulq_f32(v39, v38), v39)), v21);
          v42 = (float32x4_t)vbslq_s8(v29, v36, v40);
          v43 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_f32(v41, vrsqrtsq_f32(vmulq_f32(v41, v38), v41)), (int8x16_t)v32);
          v44 = vaddq_f32(vmulq_laneq_f32(v43, v43, 3), v42);
          v45 = (int32x4_t)vmulq_f32(v44, v44);
          v46 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v45, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 1)));
          v47 = vminq_f32(vrsqrteq_f32(v46), v21);
          v48 = vminq_f32(vmulq_f32(v47, vrsqrtsq_f32(vmulq_f32(v47, v46), v47)), v21);
          v49 = vmulq_f32(v28, vmulq_f32(vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v46), v48)), v44));
          v50 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v12 + 240), vnegq_f32(v42));
          v49.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v49, v133, 4uLL), vaddq_f32(v49, (float32x4_t)vrev64q_s32((int32x4_t)v49))).u64[0];
          v51 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v50), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL), (float32x4_t)vdupq_lane_s64(v50.i64[0], 0)));
          v49.i64[1] = v51.i64[1];
          v50.i64[0] = vmaxq_f32(v49, v30).u64[0];
          v50.i64[1] = v51.i64[1];
          v52 = *(float32x4_t *)(v12 + 48);
          v53 = *(float32x4_t *)(v12 + 352);
          v131 = *(float32x4_t *)(v12 + 224);
          v132 = *(int32x4_t *)(v12 + 368);
          v54 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL);
          v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v53, (int8x16_t)vceqq_f32(v52, v30)), v30), (int8x16_t)v53, (int8x16_t)v54);
          v56 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v55, (int8x16_t)v132), (int8x16_t)v53);
          v129 = *(float32x4_t *)(v12 + 400);
          v130 = *(float32x4_t *)(v12 + 384);
          v127 = *(float32x4_t *)(v12 + 416);
          v128 = *(float32x4_t *)(v12 + 432);
          v57 = (float32x4_t)vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v56, v128));
          v59 = *(float32x4_t *)(v12 + 448);
          v58 = *(float32x4_t *)(v12 + 464);
          v60 = vsubq_f32(vsubq_f32(v56, v53), vmulq_f32(vmulq_f32(v59, v57), v56));
          v61 = vmulq_f32(v60, v60);
          v62 = *(float32x4_t *)(v12 + 480);
          v63 = *(float32x4_t *)(v12 + 496);
          v65 = *(float32x4_t *)(v12 + 512);
          v64 = *(float32x4_t *)(v12 + 528);
          v66 = vmulq_f32(v61, vaddq_f32(vaddq_f32(v58, vmulq_f32(v62, v60)), vmulq_f32(v61, vaddq_f32(v63, vmulq_f32(v65, v60)))));
          v67 = *(float32x4_t *)(v12 + 544);
          v68 = *(float32x4_t *)(v12 + 560);
          v69 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v55, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v129, (int8x16_t)vcgtq_f32(v130, v55))), v127), v57), vmulq_f32(v60, vaddq_f32(v68, vmulq_f32(v60, vaddq_f32(vaddq_f32(v64, vmulq_f32(v67, v60)), v66)))));
          v71 = *(float32x4_t *)(v12 + 576);
          v70 = *(float32x4_t *)(v12 + 592);
          v72 = vmaxq_f32(vmulq_f32(v52, v69), v71);
          v73 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
          v74 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v73, v72)));
          v75 = vsubq_f32(v72, v74);
          v77 = *(float32x4_t *)(v12 + 608);
          v76 = *(float32x4_t *)(v12 + 624);
          v79 = *(float32x4_t *)(v12 + 640);
          v78 = *(float32x4_t *)(v12 + 656);
          v81 = *(int32x4_t *)(v12 + 672);
          v80 = *(int8x16_t *)(v12 + 688);
          v82 = (int64x2_t)vmulq_f32(vaddq_f32(v53, vmulq_f32(v75, vaddq_f32(v78, vmulq_f32(v75, vaddq_f32(vaddq_f32(v76, vmulq_f32(v79, v75)), vmulq_f32(vmulq_f32(v75, v75), vaddq_f32(v70, vmulq_f32(v77, v75)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v74), v81), 0x17uLL));
          v84 = *(float32x4_t *)(v12 + 192);
          v83 = *(float32x4_t *)(v12 + 208);
          v75.i64[0] = vsubq_f32(v84, v83).u64[0];
          v75.i64[1] = vdupq_laneq_s64(v82, 1).u64[0];
          v85 = (float32x4_t)vrev64q_s32((int32x4_t)v75);
          v86 = vminq_f32(vmaxq_f32(vmulq_f32(v78, vrecpeq_f32(v85)), v79), v21);
          v85.i64[0] = vmulq_f32(v86, vrecpsq_f32(v85, v86)).u64[0];
          v85.i64[1] = v82.i64[1];
          v87 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v54));
          v86.i64[0] = vextq_s8(v51, (int8x16_t)v87, 0xCuLL).u64[0];
          *(int8x8_t *)&v86.u32[2] = vext_s8(*(int8x8_t *)v87.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), 4uLL);
          v88 = (float32x4_t)vbslq_s8(v133, (int8x16_t)vsubq_f32(v86, v83), (int8x16_t)v85);
          v89 = vminq_f32(vmaxq_f32(vrecpeq_f32(v42), v78), v21);
          v90 = vminq_f32(vmaxq_f32(vmulq_f32(v89, vrecpsq_f32(v42, v89)), v78), v21);
          v91 = (float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_f32(v90, vrecpsq_f32(v42, v90)), v40);
          v92 = vmulq_f32(v28, v91);
          *(float32x2_t *)v92.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v88, 4uLL), vadd_f32(*(float32x2_t *)v92.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v92.f32)));
          v93 = *(int8x16_t *)(v12 + 96);
          *(float32x2_t *)&v92.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v12 + 112), *(int8x16_t *)(v12 + 112), 8uLL));
          v91.i64[0] = vminq_f32(vmaxq_f32(vmulq_lane_f32(v88, *(float32x2_t *)v88.f32, 1), v79), v78).u64[0];
          v86.i64[0] = v91.i64[0];
          v91.i64[1] = vdupq_laneq_s64((int64x2_t)v88, 1).u64[0];
          *(int8x8_t *)v40.i8 = vqtbl1_s8((int8x16_t)v92, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL));
          *(int8x8_t *)v92.f32 = vqtbl1_s8((int8x16_t)v92, *(int8x8_t *)v81.i8);
          v92.i64[1] = v40.i64[0];
          v94 = (int8x16_t)vmaxq_f32(v92, v79);
          v95 = *(int8x16_t *)(v12 + 704);
          v96 = vbslq_s8(v95, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v93, v93, 8uLL), vmulq_n_f32((float32x4_t)vextq_s8(v93, v93, 0xCuLL), *(float *)v94.i32)), v94);
          v87.i64[1] = v51.i64[1];
          v97 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v93, v93, 4uLL), *(float *)v96.i32), v96);
          v98 = vandq_s8((int8x16_t)v78, (int8x16_t)vcgeq_f32(vnegq_f32(v87), v79));
          v86.i64[1] = v88.i64[1];
          v99 = (float32x4_t)vextq_s8(v51, v98, 8uLL);
          v98.i64[1] = v51.i64[1];
          v100 = vbslq_s8(v80, vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v84), v99)), v98);
          v101 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vaddq_f32(v76, vmulq_f32(v77, (float32x4_t)vrev64q_s32((int32x4_t)v91))), (int8x16_t)v86);
          v102 = (float32x4_t)vbslq_s8(v95, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v100, v100, 8uLL), (float32x4_t)vextq_s8(v100, v100, 0xCuLL)), v100);
          v103 = (float32x4_t)vbslq_s8(v133, (int8x16_t)vmulq_f32(v101, v101), (int8x16_t)v101);
          v91.i64[0] = vsubq_f32(vmulq_lane_f32(v102, *(float32x2_t *)v102.f32, 1), v102).u64[0];
          v91.i64[1] = v102.i64[1];
          v104 = vextq_s8((int8x16_t)v103, (int8x16_t)vmulq_lane_f32(v103, *(float32x2_t *)v103.f32, 1), 8uLL);
          v105 = vbslq_s8(v95, vbslq_s8((int8x16_t)vcgtq_f32(v91, v30), v104, (int8x16_t)v30), (int8x16_t)v91);
          v91.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v97, 1), vmulq_lane_f32(v97, *(float32x2_t *)v97.f32, 1)).u64[0];
          v91.i64[1] = v97.i64[1];
          v106 = (int8x16_t)vmaxq_f32(v91, v76);
          v107 = (float32x4_t)vextq_s8((int8x16_t)v97, v106, 8uLL);
          v106.i64[1] = v97.i64[1];
          v108 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vceqq_f32(v131, v68)), v68), (int8x16_t)v71, vextq_s8(v105, v105, 8uLL));
          v109 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v108, (int8x16_t)v81), (int8x16_t)v71);
          v110 = (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v109, v63));
          v111 = vsubq_f32(vsubq_f32(v109, v71), vmulq_f32(vmulq_f32(v62, v110), v109));
          v112 = vmulq_f32(v111, v111);
          v113 = vmaxq_f32(vmulq_f32(v131, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v108, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32(v67, v108))), v65), v110), vmulq_f32(v111, vaddq_f32(v53, vmulq_f32(v111, vaddq_f32(vaddq_f32(v129, vmulq_f32(v130, v111)), vmulq_f32(
                                 v112,
                                 vaddq_f32(vaddq_f32(v58, vmulq_f32(v59, v111)), vmulq_f32(v112, vaddq_f32(v128, vmulq_f32(v127, v111))))))))))), *(float32x4_t *)(v12 + 720));
          v114 = (float32x4_t)vbslq_s8(v80, vandq_s8((int8x16_t)vcagtq_f32(v107, v70), (int8x16_t)v71), v106);
          v115 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
          v116 = vsubq_f32(v115, (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v115, v113)));
          v117 = vsubq_f32(v113, v116);
          v118 = *(float32x4_t *)(v12 + 784);
          v119 = *(float32x4_t *)(v12 + 800);
          v120 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vmulq_f32(vaddq_f32(v71, vmulq_f32(v117, vaddq_f32(v119, vmulq_f32(v117, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 768), vmulq_f32(v118, v117)), vmulq_f32(vmulq_f32(v117, v117), vaddq_f32(*(float32x4_t *)(v12 + 736), vmulq_f32(*(float32x4_t *)(v12 + 752), v117)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v116), v132), 0x17uLL)), v105);
          v121 = vminq_f32(vmaxq_f32(vrecpeq_f32(v114), v118), v21);
          v122 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vrecpsq_f32(v114, v121)), v118), v21);
          v123 = (int32x4_t)vbslq_s8(v133, (int8x16_t)vmulq_f32(vmulq_f32(v122, vrecpsq_f32(v114, v122)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v119, v120), (int8x16_t)vrev64q_s32((int32x4_t)v120), vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL))), (int8x16_t)v114);
          v104.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v123), v119), v104, (int8x16_t)v119).u32[0];
          v124 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v123, (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v12 + 16), *(float *)v123.i32));
          *(int8x16_t *)(*(_QWORD *)&v5 + v10) = vbslq_s8(v29, *(int8x16_t *)(*(_QWORD *)&v6 + v10), (int8x16_t)vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v6 + v10), vaddq_f32(vmulq_f32(*(float32x4_t *)(v12 + 32), vmulq_n_f32(v124, *(float *)v104.i32)), vmulq_laneq_f32(v124, v124, 3))));
          v11 = vaddq_f32(v134, (float32x4_t)xmmword_1B304F230);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      v126 = vaddq_f32(v126, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v8;
      *(_QWORD *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramSpotSurface::GetDOD(LiHeLightProgramSpotSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightProgramSpotSurface::GetROI(LiHeLightProgramSpotSurface *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightProgramSpotSurface::LiHeLightProgramSpotSurface(LiHeLightProgramSpotSurface *this)
{
  _QWORD *v2;
  LiHeLightProgramSpotSurface::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65812F8;
  v3 = (LiHeLightProgramSpotSurface::State *)operator new();
  LiHeLightProgramSpotSurface::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD063C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65812F8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40A461079ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramSpotSurface::~LiHeLightProgramSpotSurface(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramSpotSurface::SetParameter(LiHeLightProgramSpotSurface *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  __n128 *v11;
  float *v12;
  float *v13;
  float *v14;
  __n128 *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  __n128 *v22;
  float *v23;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_83;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_83;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_83;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == 0.0
        && v11[3].n128_f32[2] == a3.n128_f32[0]
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u64[0] = 0;
      v11[3].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[51] = a3;
      goto LABEL_83;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_83;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_83;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_83;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == 0.0
        && v15[7].n128_f32[1] == 0.0
        && v15[7].n128_f32[2] == 0.0
        && v15[7].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v15[7].n128_u64[0] = 0;
      v15[7].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[52] = a3;
      goto LABEL_83;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_83;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_83;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_83;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
      goto LABEL_83;
    case 12:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6)
        return 0;
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
      goto LABEL_83;
    case 13:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[52] == a3.n128_f32[0] && v21[53] == a4 && v21[54] == a5 && v21[55] == a6)
        return 0;
      v21[52] = a3.n128_f32[0];
      v21[53] = a4;
      v21[54] = a5;
      v21[55] = a6;
      goto LABEL_83;
    case 14:
      v22 = (__n128 *)*((_QWORD *)this + 51);
      if (v22[14].n128_f32[0] == 0.0
        && v22[14].n128_f32[1] == a3.n128_f32[0]
        && v22[14].n128_f32[2] == 0.0
        && v22[14].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v22[14].n128_u32[0] = 0;
      v22[14].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v22[14].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v22[53] = a3;
      goto LABEL_83;
    case 15:
      v23 = (float *)*((_QWORD *)this + 51);
      if (v23[60] == a3.n128_f32[0] && v23[61] == a4 && v23[62] == a5 && v23[63] == a6)
        return 0;
      v23[60] = a3.n128_f32[0];
      v23[61] = a4;
      v23[62] = a5;
      v23[63] = a6;
LABEL_83:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeLightProgramSpotSurface::GetParameter(LiHeLightProgramSpotSurface *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_18;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_18;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_18;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[204];
      a3[1] = v7[205];
      a3[2] = v7[206];
      v4 = v7 + 207;
      goto LABEL_18;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_18;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_18;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_18;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[208];
      a3[1] = v11[209];
      a3[2] = v11[210];
      v4 = v11 + 211;
      goto LABEL_18;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_18;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_18;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_18;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
      goto LABEL_18;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      v4 = v16 + 51;
      goto LABEL_18;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      v4 = v17 + 55;
      goto LABEL_18;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[212];
      a3[1] = v18[213];
      a3[2] = v18[214];
      v4 = v18 + 215;
      goto LABEL_18;
    case 15:
      v19 = (float *)*((_QWORD *)this + 51);
      *a3 = v19[60];
      a3[1] = v19[61];
      a3[2] = v19[62];
      v4 = v19 + 63;
LABEL_18:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double LiHeLightProgramSpotSurface::State::State(LiHeLightProgramSpotSurface::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 16) = xmmword_1B355C070;
  *((_OWORD *)this + 17) = xmmword_1B3050E20;
  *((_OWORD *)this + 18) = xmmword_1B3052320;
  *((int32x4_t *)this + 19) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 20) = xmmword_1B3050F70;
  *((_OWORD *)this + 21) = xmmword_1B30536D0;
  *((_OWORD *)this + 22) = xmmword_1B355C180;
  *((_OWORD *)this + 23) = xmmword_1B355C190;
  *((_OWORD *)this + 24) = xmmword_1B355C1A0;
  *((_OWORD *)this + 25) = xmmword_1B355C1B0;
  *((_OWORD *)this + 26) = xmmword_1B355C1C0;
  *((_OWORD *)this + 27) = xmmword_1B355C1D0;
  *((_OWORD *)this + 28) = xmmword_1B355C1E0;
  *((_OWORD *)this + 29) = xmmword_1B355C1F0;
  *((_OWORD *)this + 30) = xmmword_1B355C200;
  *((_OWORD *)this + 31) = xmmword_1B355C210;
  *((_OWORD *)this + 32) = xmmword_1B355C220;
  *((_OWORD *)this + 33) = xmmword_1B355C230;
  *((_OWORD *)this + 34) = xmmword_1B355C240;
  *((_OWORD *)this + 35) = xmmword_1B355C250;
  *((_OWORD *)this + 36) = xmmword_1B355C260;
  *((_OWORD *)this + 37) = xmmword_1B355C270;
  *((_OWORD *)this + 38) = xmmword_1B355C280;
  *((_OWORD *)this + 39) = xmmword_1B355C290;
  *((_OWORD *)this + 40) = xmmword_1B355C2A0;
  *((_OWORD *)this + 41) = xmmword_1B355C2B0;
  *((_OWORD *)this + 42) = xmmword_1B355C2C0;
  *((_OWORD *)this + 43) = xmmword_1B3050FF0;
  *((_OWORD *)this + 44) = xmmword_1B3050FE0;
  *((_OWORD *)this + 45) = xmmword_1B3554580;
  *((_OWORD *)this + 46) = xmmword_1B3554590;
  *((_OWORD *)this + 47) = xmmword_1B35545A0;
  *((_OWORD *)this + 48) = xmmword_1B35545B0;
  *((_OWORD *)this + 49) = xmmword_1B355C2D0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 50) = xmmword_1B355C2E0;
  *((_OWORD *)this + 51) = 0u;
  return result;
}

const char *LiHeLightProgramSpotSurfaceDiffuse::GetProgram(LiHeLightProgramSpotSurfaceDiffuse *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000088d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[5] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[7] + s0;\n"
             "    s1 = s0 + hg_Params[8];\n"
             "    s0.x = float(s0.w < -hg_Params[8].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.w = dot(s0.xyz, s0.xyz);\n"
             "    s1.x = rsqrt(s0.w);\n"
             "    s0.w = 1.00000f / s1.x;\n"
             "    s0.w = s0.w - hg_Params[4].w;\n"
             "    s0.w = fmax(s0.w, float(c0.x));\n"
             "    s0.xyz = s1.xxx*s0.xyz;\n"
             "    s1.z = s0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    s1.y = s0.w*hg_Params[3].z;\n"
             "    s0.w = s1.y*s0.w + s1.z;\n"
             "    s0.w = fmax(s0.w, float(c0.y));\n"
             "    s1.x = 1.00000f / s0.w;\n"
             "    s0.w = dot(-s0.xyz, hg_Params[12].xyz);\n"
             "    s2.x = float(s0.w < hg_Params[9].x);\n"
             "    s2.y = hg_Params[9].x - hg_Params[10].x;\n"
             "    s2.w = s0.w - hg_Params[10].x;\n"
             "    s2.z = clamp(s2.w/s2.y, 0.00000f, 1.00000f);\n"
             "    s2.y = float(-s2.x >= float(c0.x));\n"
             "    s2.x = float(s0.w >= hg_Params[10].x);\n"
             "    s2.x = fmin(s2.x, s2.y);\n"
             "    s2.y = s2.z*float(c0.z) + float(c0.w);\n"
             "    s2.z = s2.z*s2.z;\n"
             "    s2.y = s2.z*s2.y;\n"
             "    s0.w = pow(s0.w, hg_Params[11].w);\n"
             "    s0.w = select(s2.y, s0.w, -s2.x < 0.00000h);\n"
             "    s0.w = s0.w*s1.x;\n"
             "    s1.x = dot(s0.xyz, hg_Params[2].xyz);\n"
             "    s2.xyz = s0.www*hg_Params[1].xyz;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    s2.xyz = s2.xyz*s1.xxx + float3(r0.xyz);\n"
             "    output.color0.xyz = select(s2.xyz, float3(r0.xyz), s2.www < 0.00000h);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2fa4b393:d492b225:c388fdbe:c1b83462\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000d:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000082b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[5] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[7] + r0;\n"
             "    r1 = r0 + hg_Params[8];\n"
             "    r0.x = float(r0.w < -hg_Params[8].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r1.x = rsqrt(r0.w);\n"
             "    r0.w = 1.00000f / r1.x;\n"
             "    r0.w = r0.w - hg_Params[4].w;\n"
             "    r0.w = fmax(r0.w, c0.x);\n"
             "    r0.xyz = r1.xxx*r0.xyz;\n"
             "    r1.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
             "    r1.y = r0.w*hg_Params[3].z;\n"
             "    r0.w = r1.y*r0.w + r1.z;\n"
             "    r0.w = fmax(r0.w, c0.y);\n"
             "    r1.x = 1.00000f / r0.w;\n"
             "    r0.w = dot(-r0.xyz, hg_Params[12].xyz);\n"
             "    r2.x = float(r0.w < hg_Params[9].x);\n"
             "    r2.y = hg_Params[9].x - hg_Params[10].x;\n"
             "    r2.w = r0.w - hg_Params[10].x;\n"
             "    r2.z = clamp(r2.w/r2.y, 0.00000f, 1.00000f);\n"
             "    r2.y = float(-r2.x >= c0.x);\n"
             "    r2.x = float(r0.w >= hg_Params[10].x);\n"
             "    r2.x = fmin(r2.x, r2.y);\n"
             "    r2.y = r2.z*c0.z + c0.w;\n"
             "    r2.z = r2.z*r2.z;\n"
             "    r2.y = r2.z*r2.y;\n"
             "    r0.w = pow(r0.w, hg_Params[11].w);\n"
             "    r0.w = select(r2.y, r0.w, -r2.x < 0.00000f);\n"
             "    r0.w = r0.w*r1.x;\n"
             "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
             "    r2.xyz = r0.www*hg_Params[1].xyz;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    r2.xyz = r2.xyz*r1.xxx + r0.xyz;\n"
             "    output.color0.xyz = select(r2.xyz, r0.xyz, r2.www < 0.00000f);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=01cfa6d7:ff8dcdd9:7e97e4e7:b2fef60e\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000d:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a35\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal6;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal5 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal7 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal8;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal8.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r1.x = inversesqrt(r0.w);\n"
           "    r0.w = 1.00000 / r1.x;\n"
           "    r0.w = r0.w - hg_ProgramLocal4.w;\n"
           "    r0.w = max(r0.w, c0.x);\n"
           "    r0.xyz = r1.xxx*r0.xyz;\n"
           "    r1.z = r0.w*hg_ProgramLocal3.y + hg_ProgramLocal3.x;\n"
           "    r1.y = r0.w*hg_ProgramLocal3.z;\n"
           "    r0.w = r1.y*r0.w + r1.z;\n"
           "    r0.w = max(r0.w, c0.y);\n"
           "    r1.x = 1.00000 / r0.w;\n"
           "    r0.w = dot(-r0.xyz, hg_ProgramLocal12.xyz);\n"
           "    r2.x = float(r0.w < hg_ProgramLocal9.x);\n"
           "    r2.y = hg_ProgramLocal9.x - hg_ProgramLocal10.x;\n"
           "    r2.w = r0.w - hg_ProgramLocal10.x;\n"
           "    r2.z = clamp(r2.w/r2.y, 0.00000, 1.00000);\n"
           "    r2.y = float(-r2.x >= c0.x);\n"
           "    r2.x = float(r0.w >= hg_ProgramLocal10.x);\n"
           "    r2.x = min(r2.x, r2.y);\n"
           "    r2.y = r2.z*c0.z + c0.w;\n"
           "    r2.z = r2.z*r2.z;\n"
           "    r2.y = r2.z*r2.y;\n"
           "    r0.w = pow(r0.w, hg_ProgramLocal11.w);\n"
           "    r0.w = -r2.x < 0.00000 ? r0.w : r2.y;\n"
           "    r0.w = r0.w*r1.x;\n"
           "    r1.x = dot(r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.xyz = r0.www*hg_ProgramLocal1.xyz;\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    r2.xyz = r2.xyz*r1.xxx + r0.xyz;\n"
           "    gl_FragColor.xyz = vec3(r2.w < 0.00000 ? r0.x : r2.x, r2.w < 0.00000 ? r0.y : r2.y, r2.w < 0.00000 ? r0.z"
           " : r2.z);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=baa72013:ee5c5bed:d4bcfe69:f7494a54\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000d:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeLightProgramSpotSurfaceDiffuse::InitProgramDescriptor(LiHeLightProgramSpotSurfaceDiffuse *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramSpotSurfaceDiffuse_hgc_visible", "//Metal1.0     \n//LEN=000000071b\n[[ visible ]] FragmentOut LiHeLightProgramSpotSurfaceDiffuse_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[6];\n"
    "    r0 = texCoord1.xxxx*hg_Params[5] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[7] + r0;\n"
    "    r1 = r0 + hg_Params[8];\n"
    "    r0.x = float(r0.w < -hg_Params[8].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r1.x = rsqrt(r0.w);\n"
    "    r0.w = 1.00000f / r1.x;\n"
    "    r0.w = r0.w - hg_Params[4].w;\n"
    "    r0.w = fmax(r0.w, c0.x);\n"
    "    r0.xyz = r1.xxx*r0.xyz;\n"
    "    r1.z = r0.w*hg_Params[3].y + hg_Params[3].x;\n"
    "    r1.y = r0.w*hg_Params[3].z;\n"
    "    r0.w = r1.y*r0.w + r1.z;\n"
    "    r0.w = fmax(r0.w, c0.y);\n"
    "    r1.x = 1.00000f / r0.w;\n"
    "    r0.w = dot(-r0.xyz, hg_Params[12].xyz);\n"
    "    r2.x = float(r0.w < hg_Params[9].x);\n"
    "    r2.y = hg_Params[9].x - hg_Params[10].x;\n"
    "    r2.w = r0.w - hg_Params[10].x;\n"
    "    r2.z = clamp(r2.w/r2.y, 0.00000f, 1.00000f);\n"
    "    r2.y = float(-r2.x >= c0.x);\n"
    "    r2.x = float(r0.w >= hg_Params[10].x);\n"
    "    r2.x = fmin(r2.x, r2.y);\n"
    "    r2.y = r2.z*c0.z + c0.w;\n"
    "    r2.z = r2.z*r2.z;\n"
    "    r2.y = r2.z*r2.y;\n"
    "    r0.w = pow(r0.w, hg_Params[11].w);\n"
    "    r0.w = select(r2.y, r0.w, -r2.x < 0.00000f);\n"
    "    r0.w = r0.w*r1.x;\n"
    "    r1.x = dot(r0.xyz, hg_Params[2].xyz);\n"
    "    r2.xyz = r0.www*hg_Params[1].xyz;\n"
    "    r0 = color0;\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    r2.xyz = r2.xyz*r1.xxx + r0.xyz;\n"
    "    output.color0.xyz = select(r2.xyz, r0.xyz, r2.www < 0.00000f);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD1004()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramSpotSurfaceDiffuse");
}

void sub_1B2DD1014(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30511E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD1154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD119C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD1194);
}

_QWORD *LiHeLightProgramSpotSurfaceDiffuse::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramSpotSurfaceDiffuse [hgc1]");
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::BindTexture(LiHeLightProgramSpotSurfaceDiffuse *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::Bind(LiHeLightProgramSpotSurfaceDiffuse *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(LiHeLightProgramSpotSurfaceDiffuse *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::RenderTile(LiHeLightProgramSpotSurfaceDiffuse *this, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  float32x4_t v22;
  unint64_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = 16 * a2[3].i32[0];
    v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v10 = 0;
        v11 = v7;
        do
        {
          v12 = *((_QWORD *)this + 51);
          v13 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v12 + 96), *(float32x2_t *)v11.f32, 1), vmulq_n_f32(*(float32x4_t *)(v12 + 80), v11.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v12 + 112), v11, 2));
          v14 = *(float32x4_t *)(v12 + 128);
          v15 = vaddq_f32(v14, v13);
          v16 = *(float32x4_t *)(v12 + 208);
          v17 = vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(vnegq_f32(v14), v13));
          v18 = *(int8x16_t *)(v12 + 224);
          v19 = *(float32x4_t *)(v12 + 240);
          v20 = (int32x4_t)vbslq_s8(v18, vextq_s8(v17, v17, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v16));
          v21 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v16);
          v22.i64[0] = v20.i64[0];
          v23 = vdupq_laneq_s64(v21, 1).u64[0];
          v22.i64[1] = v21.i64[1];
          v24 = vextq_s8((int8x16_t)v21, (int8x16_t)v20, 8uLL);
          v20.i64[1] = v23;
          v25 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v22, v16), v24, (int8x16_t)vrev64q_s32(v20));
          v27 = *(float32x4_t *)(v12 + 256);
          v26 = *(int8x16_t *)(v12 + 272);
          v28 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v19), v27);
          v29 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32(v25, v28)), v19), v27);
          v30 = vsubq_f32(*(float32x4_t *)v12, vmulq_n_f32(v15, vmulq_f32(v29, vrecpsq_f32(v25, v29)).f32[0]));
          v31 = (int32x4_t)vmulq_f32(v30, v30);
          v32 = vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v31), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL))), (int8x16_t)v30);
          v33 = (float32x4_t)vextq_s8(v32, v32, 0xCuLL);
          v34 = vminq_f32(vrsqrteq_f32(v33), v27);
          v35 = vminq_f32(vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v33), v34)), v27);
          v36 = (int8x16_t)vmulq_f32(v35, vrsqrtsq_f32(vmulq_f32(v35, v33), v35));
          v37 = (float32x4_t)vextq_s8(v36, v36, 4uLL);
          v38 = vminq_f32(vmaxq_f32(vrecpeq_f32(v37), v19), v27);
          v39 = vminq_f32(vmaxq_f32(vmulq_f32(v38, vrecpsq_f32(v37, v38)), v19), v27);
          v40 = (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_f32(v39, vrecpsq_f32(v37, v39)), (int8x16_t)v30), *(float32x4_t *)(v12 + 64)), (int8x16_t)v30), *(float32x4_t *)(v12 + 288));
          v41 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v26, v40, (int8x16_t)v30), *(float *)v36.i32);
          v42 = *(float32x4_t *)(v12 + 48);
          v43 = (float32x4_t)vbslq_s8(v26, v40, v41);
          v44 = vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v7, 4uLL), v43, 3);
          v44.i64[1] = vaddq_f32(v42, v44).u64[0];
          v45 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32(vmulq_lane_f32(v43, *(float32x2_t *)v44.f32, 1), (float32x4_t)vrev64q_s32((int32x4_t)v44)), v41), *(float32x4_t *)(v12 + 304)), v41);
          v46 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL);
          v47 = vminq_f32(vmaxq_f32(vrecpeq_f32(v46), v19), v27);
          v48 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v12 + 192), vnegq_f32(v45));
          v49 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v48), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL))), v41);
          v50 = (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 0xCuLL);
          v52 = *(float32x4_t *)(v12 + 320);
          v51 = *(float32x4_t *)(v12 + 336);
          v53 = *(float32x4_t *)(v12 + 160);
          v54 = *(float32x4_t *)(v12 + 176);
          v55 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v52, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v12 + 144), v50)), (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(*(float32x4_t *)(v12 + 144), v53)));
          v56 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v46, v47)), v19), v27);
          v57 = vsubq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL));
          v58.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v55, 0xCuLL).u64[0];
          v55.i64[1] = v57.i64[1];
          *(int8x8_t *)&v58.u32[2] = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
          v46.i32[0] = vmulq_f32(v56, vrecpsq_f32(v46, v56)).u32[0];
          v59 = vminq_f32(vmaxq_f32(vrecpeq_f32(v58), v52), v27);
          v60 = vminq_f32(vmaxq_f32(vmulq_f32(v59, vrecpsq_f32(v58, v59)), v52), v27);
          v61 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_laneq_f32(vmulq_f32(v60, vrecpsq_f32(v58, v60)), v57, 3), v19), v51);
          v62 = *(int8x16_t *)(v12 + 352);
          v63 = *(int8x16_t *)(v12 + 368);
          v64 = (float32x4_t)vbslq_s8(v62, v61, (int8x16_t)v55);
          *(int32x2_t *)v55.f32 = vrev64_s32((int32x2_t)vand_s8(*(int8x8_t *)v52.f32, (int8x8_t)*(_OWORD *)&vcgeq_f32(vnegq_f32(v64), v51)));
          v55.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
          v65 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v52, (int8x16_t)vceqq_f32(v54, v51)), v51), (int8x16_t)v52, (int8x16_t)v49);
          v66 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v52, (int8x16_t)vcgeq_f32(v50, v53)), (int8x16_t)v55);
          v67 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v65, *(int8x16_t *)(v12 + 384)), (int8x16_t)v52);
          v55.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
          v68 = (float32x4_t)vandq_s8((int8x16_t)v52, (int8x16_t)vcgtq_f32(v67, *(float32x4_t *)(v12 + 448)));
          v57.i64[0] = vminq_f32(v66, (float32x4_t)vrev64q_s32((int32x4_t)v66)).u64[0];
          v69 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v65, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v12 + 416), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v12 + 400), v65))), *(float32x4_t *)(v12 + 432)), v68);
          v70 = vsubq_f32(vsubq_f32(v67, v52), vmulq_f32(vmulq_f32(*(float32x4_t *)(v12 + 464), v68), v67));
          *(int8x8_t *)v68.f32 = vext_s8(*(int8x8_t *)v55.f32, *(int8x8_t *)v57.f32, 4uLL);
          *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v55.f32, 4uLL);
          v71 = vmulq_f32(v70, v70);
          v57.i64[1] = v66.i64[1];
          v55.i64[1] = v68.i64[0];
          v72 = vmaxq_f32(vmulq_f32(v54, vaddq_f32(v69, vmulq_f32(v70, vaddq_f32(*(float32x4_t *)(v12 + 576), vmulq_f32(v70, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 544), vmulq_f32(v70, *(float32x4_t *)(v12 + 560))), vmulq_f32(v71, vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 480), vmulq_f32(*(float32x4_t *)(v12 + 496), v70)), vmulq_f32(v71, vaddq_f32(*(float32x4_t *)(v12 + 512), vmulq_f32(*(float32x4_t *)(v12 + 528), v70))))))))))),
                  *(float32x4_t *)(v12 + 592));
          v73 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
          v74 = (float32x4_t)vbslq_s8(v63, (int8x16_t)vaddq_f32(v51, vmulq_f32(v52, v55)), (int8x16_t)v57);
          v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v52, (int8x16_t)vcgtq_f32(v73, v72)));
          v76 = vsubq_f32(v72, v75);
          v77 = (float32x4_t)vbslq_s8(v62, (int8x16_t)vmulq_f32(v74, v74), (int8x16_t)v74);
          v78 = *(float32x4_t *)(v12 + 672);
          v79 = vbslq_s8(v63, (int8x16_t)vmulq_laneq_f32(v77, v77, 2), (int8x16_t)v77);
          v80 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v26, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v79, v79, 4uLL), v51), vbslq_s8(v26, (int8x16_t)vmulq_f32(vaddq_f32(v52, vmulq_f32(v76, vaddq_f32(v78, vmulq_f32(v76,
                                                                                    vaddq_f32(vaddq_f32(*(float32x4_t *)(v12 + 640), vmulq_f32(*(float32x4_t *)(v12 + 656), v76)), vmulq_f32(vmulq_f32(v76, v76), vaddq_f32(*(float32x4_t *)(v12 + 608), vmulq_f32(*(float32x4_t *)(v12 + 624), v76)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v12 + 688), vcvtq_s32_f32(v75)), 0x17uLL)), v41), vextq_s8(v79, v79, 8uLL)),
                                                           v41),
                                            v46.f32[0]),
                               v41);
          v81 = vmulq_f32(*(float32x4_t *)(v12 + 32), v80);
          v82 = *(float32x4_t *)(*(_QWORD *)&v6 + v10);
          v83 = (int32x4_t)vbslq_s8(v26, v79, (int8x16_t)vaddq_f32(v82, vmulq_n_f32((float32x4_t)vbslq_s8(v26, v79, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v12 + 16), v80, 3)), vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), vaddq_f32(v81, (float32x4_t)vrev64q_s32((int32x4_t)v81))), v78).f32[0])));
          *(int8x16_t *)(*(_QWORD *)&v5 + v10) = vbslq_s8(v26, (int8x16_t)v82, vbslq_s8((int8x16_t)vcgtq_f32(v78, (float32x4_t)vdupq_laneq_s32(v83, 3)), (int8x16_t)v82, (int8x16_t)v83));
          v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v8;
      *(_QWORD *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::GetDOD(LiHeLightProgramSpotSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::GetROI(LiHeLightProgramSpotSurfaceDiffuse *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightProgramSpotSurfaceDiffuse::LiHeLightProgramSpotSurfaceDiffuse(LiHeLightProgramSpotSurfaceDiffuse *this)
{
  _QWORD *v2;
  LiHeLightProgramSpotSurfaceDiffuse::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6581560;
  v3 = (LiHeLightProgramSpotSurfaceDiffuse::State *)operator new();
  LiHeLightProgramSpotSurfaceDiffuse::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD1984(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6581560;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40843277B5);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramSpotSurfaceDiffuse::~LiHeLightProgramSpotSurfaceDiffuse(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramSpotSurfaceDiffuse::SetParameter(LiHeLightProgramSpotSurfaceDiffuse *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  __n128 *v19;
  float *v20;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_69;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_69;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_69;
    case 3:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 704) = a3;
      return v8;
    case 4:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_69;
    case 5:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == 0.0
        && v12[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[45] = a3;
      goto LABEL_69;
    case 6:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_69;
    case 7:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_69;
    case 8:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_69;
    case 9:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_69;
    case 10:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_69;
    case 11:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_69;
    case 12:
      v19 = (__n128 *)*((_QWORD *)this + 51);
      if (v19[11].n128_f32[0] == 0.0
        && v19[11].n128_f32[1] == 0.0
        && v19[11].n128_f32[2] == 0.0
        && v19[11].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v19[11].n128_u64[0] = 0;
      v19[11].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v19[11].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v19[46] = a3;
      goto LABEL_69;
    case 13:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6)
        return 0;
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
LABEL_69:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float LiHeLightProgramSpotSurfaceDiffuse::GetParameter(LiHeLightProgramSpotSurfaceDiffuse *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_16;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_16;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_16;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[176];
      a3[1] = v7[177];
      a3[2] = v7[178];
      v4 = v7 + 179;
      goto LABEL_16;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[12];
      a3[1] = v8[13];
      a3[2] = v8[14];
      v4 = v8 + 15;
      goto LABEL_16;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[180];
      a3[1] = v9[181];
      a3[2] = v9[182];
      v4 = v9 + 183;
      goto LABEL_16;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[20];
      a3[1] = v10[21];
      a3[2] = v10[22];
      v4 = v10 + 23;
      goto LABEL_16;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[24];
      a3[1] = v11[25];
      a3[2] = v11[26];
      v4 = v11 + 27;
      goto LABEL_16;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[28];
      a3[1] = v12[29];
      a3[2] = v12[30];
      v4 = v12 + 31;
      goto LABEL_16;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      v4 = v13 + 35;
      goto LABEL_16;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[36];
      a3[1] = v14[37];
      a3[2] = v14[38];
      v4 = v14 + 39;
      goto LABEL_16;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[40];
      a3[1] = v15[41];
      a3[2] = v15[42];
      v4 = v15 + 43;
      goto LABEL_16;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[184];
      a3[1] = v16[185];
      a3[2] = v16[186];
      v4 = v16 + 187;
      goto LABEL_16;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[48];
      a3[1] = v17[49];
      a3[2] = v17[50];
      v4 = v17 + 51;
LABEL_16:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

