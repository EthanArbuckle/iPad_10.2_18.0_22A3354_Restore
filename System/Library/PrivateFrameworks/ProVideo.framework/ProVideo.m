uint64_t _GLOBAL__sub_I_PAEHSCurvesEffect_mm()
{
  _anonymous_namespace_::_RgbToSatCbCrEvaluator *v0;
  _anonymous_namespace_::_RgbToSatCbCrEvaluator *v1;

  v0 = (_anonymous_namespace_::_RgbToSatCbCrEvaluator *)HGObject::operator new(0x30uLL);
  v1 = (_anonymous_namespace_::_RgbToSatCbCrEvaluator *)HGObject::operator new(0x30uLL);
}

void sub_1B2738D00(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::_RgbToSatCbCrEvaluator *`anonymous namespace'::_RgbToSatCbCrEvaluator::_RgbToSatCbCrEvaluator(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this, int a2, float a3, float a4)
{
  char *v8;
  unsigned int v9;
  HGObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t i;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  *(_QWORD *)this = &unk_1E64E2A78;
  HGObject::HGObject((_anonymous_namespace_::_RgbToSatCbCrEvaluator *)((char *)this + 8));
  *(_QWORD *)this = off_1E64E2AB8;
  *((_QWORD *)this + 1) = &unk_1E64E2AF8;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2;
  *((float *)this + 9) = a3;
  *((float *)this + 10) = a4;
  v9 = HGFormatUtils::rowBytesHint(25, (const char *)0x121, v8);
  v10 = (HGObject *)HGObject::operator new(0x18uLL);
  HGObject::HGObject(v10);
  v11 = v9;
  *(_QWORD *)v10 = off_1E64E2B68;
  v12 = operator new[]();
  *((_QWORD *)v10 + 2) = v12;
  *((_QWORD *)this + 3) = v10;
  v13 = operator new[]();
  v14 = v13;
  v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    *(_DWORD *)(v13 + v15) = v16;
    *(float *)&v16 = *(float *)&v16 + 0.0625;
    v15 += 4;
  }
  while (v15 != 68);
  for (i = 0; i != 17; ++i)
  {
    v18 = 0;
    v19 = (_WORD *)(v12 + i * v11);
    v27 = *(_DWORD *)(v14 + 4 * i);
    do
    {
      v20 = 0;
      v28 = *(_DWORD *)(v14 + 4 * v18);
      do
      {
        LODWORD(v16) = *(_DWORD *)(v14 + v20);
        DWORD1(v16) = v28;
        DWORD2(v16) = v27;
        v31 = v16;
        v29 = 0;
        v30 = 0;
        (*(void (**)(_anonymous_namespace_::_RgbToSatCbCrEvaluator *, __int128 *, uint64_t *))(*(_QWORD *)this + 16))(this, &v31, &v29);
        v21 = *(float *)&v30 + 0.5;
        v22 = (float)(*((float *)&v29 + 1) + 0.5) * 65535.0;
        if ((float)(*((float *)&v29 + 1) + 0.5) > 1.0)
          v22 = 65535.0;
        v23 = v21 * 65535.0;
        if (v21 > 1.0)
          v23 = 65535.0;
        if ((float)(*((float *)&v29 + 1) + 0.5) >= 0.0)
          v24 = v22;
        else
          v24 = 0.0;
        *v19 = 0;
        v19[1] = vcvtmd_s64_f64(v24 + 0.5);
        if (v21 >= 0.0)
          v25 = v23;
        else
          v25 = 0.0;
        v19[2] = vcvtmd_s64_f64(v25 + 0.5);
        v19 += 4;
        v20 += 4;
      }
      while (v20 != 68);
      ++v18;
    }
    while (v18 != 17);
  }
  MEMORY[0x1B5E2914C](v14, 0x1000C8052888210);
  return this;
}

void sub_1B2738F5C(_Unwind_Exception *a1)
{
  HGObject *v1;
  HGObject *v2;

  HGObject::~HGObject(v2);
  HGObject::operator delete(v2);
  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

int8x16_t `anonymous namespace'::_RgbToSatCbCrEvaluator::evaluate(uint64_t a1, float *a2, int8x16_t *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  float v12;
  float v13;
  BOOL v14;
  double v15;
  double v16;
  float v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  double v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  __int32 *v29;
  __int32 *v30;
  __int32 *v31;
  __int32 *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x16_t result;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  if (v3 >= v5)
    v6 = a2[2];
  else
    v6 = a2[1];
  if (v3 <= v5)
    v7 = a2[2];
  else
    v7 = a2[1];
  if (v4 >= v6)
    v8 = v6;
  else
    v8 = *a2;
  if (v4 > v7)
    v7 = *a2;
  v9 = 0.0;
  v10 = v7 - v8;
  v11 = (float)(v7 - v8);
  if ((float)(v7 - v8) < 0.0)
    v11 = -v11;
  if (v11 >= 0.00000011920929)
  {
    v12 = v4 - v7;
    if ((float)(v4 - v7) < 0.0)
      v12 = -(float)(v4 - v7);
    if (v12 >= 0.00000011921)
    {
      v17 = v3 - v7;
      if ((float)(v3 - v7) < 0.0)
        v17 = -(float)(v3 - v7);
      v18 = v4 - v8;
      if ((float)(v4 - v8) < 0.0)
        v18 = -(float)(v4 - v8);
      v19 = (float)((float)(v7 - v4) / v10);
      v15 = (float)((float)(v7 - v3) / v10) + 3.0;
      if (v18 >= 0.00000011921)
        v15 = 5.0 - v19;
      v20 = v5 - v8;
      if (v20 < 0.0)
        v20 = -v20;
      v16 = 3.0 - (float)((float)(v7 - v5) / v10);
      if (v20 < 0.00000011921)
        v16 = v19 + 1.0;
      v14 = v17 < 0.00000011921;
    }
    else
    {
      v13 = v3 - v8;
      if (v13 < 0.0)
        v13 = -v13;
      v14 = v13 < 0.00000011921;
      v15 = 1.0 - (float)((float)(v7 - v3) / v10);
      v16 = (float)((float)(v7 - v5) / v10) + 5.0;
    }
    if (!v14)
      v16 = v15;
    v21 = v16;
    v22 = v21 / 6.0;
    v9 = v22;
    if (v22 <= 1.0)
    {
      if (v22 >= 0.0)
        goto LABEL_39;
      v23 = (float)(v22 + (float)(int)(float)-v22) + 1.0;
    }
    else
    {
      v23 = v22 - (float)(int)v22;
    }
    v9 = v23;
  }
LABEL_39:
  v24 = *(_DWORD *)(a1 + 32);
  if (v9 <= 1.0)
  {
    if (v9 < 0.0)
      v9 = (float)(v9 + (float)(int)(float)-v9) + 1.0;
  }
  else
  {
    v9 = v9 - (float)(int)v9;
  }
  v25 = v9 * 6.0;
  v26 = (int)v25;
  *(double *)v28.i64 = v25 - floor(v25);
  v27.f32[0] = *(double *)v28.i64 + 0.0;
  v28.f32[0] = 1.0 - *(double *)v28.i64;
  switch(v26)
  {
    case 1:
      v27.i32[0] = 1.0;
      goto LABEL_46;
    case 2:
      v28.i32[0] = 0;
      v28.i32[1] = 1.0;
      v28.i32[2] = v27.i32[0];
      goto LABEL_48;
    case 3:
      v27.i32[0] = 0;
      v27.i32[1] = v28.i32[0];
      goto LABEL_57;
    case 4:
      v27.i32[1] = 0;
LABEL_57:
      v28.i32[0] = 1.0;
      goto LABEL_59;
    case 5:
      v27.i64[0] = COERCE_UNSIGNED_INT(1.0);
LABEL_59:
      v27.i64[1] = v28.u32[0];
      v28 = v27;
      if (!v24)
        goto LABEL_60;
      goto LABEL_49;
    default:
      v28.i32[0] = 1.0;
LABEL_46:
      v28.i32[1] = v27.i32[0];
      v28.i32[2] = 0;
LABEL_48:
      v28.i32[3] = 0;
      if (v24)
      {
LABEL_49:
        v29 = &dword_1ED4DBE40;
        v30 = &dword_1ED4DBE3C;
        v31 = &dword_1ED4DBE38;
        v32 = &dword_1ED4DBE34;
        v33 = (__int32 *)&cc::matrix::rgb_to_YCbCr2020 + 3;
        if (v24 == 2)
          v32 = &dword_1ED4DBF38;
        else
          v33 = (__int32 *)&cc::matrix::rgb_to_YCbCr709 + 3;
        if (v24 == 2)
        {
          v31 = &dword_1ED4DBF3C;
          v30 = &dword_1ED4DBF40;
          v29 = &dword_1ED4DBF44;
          v34 = &dword_1ED4DBF48;
        }
        else
        {
          v34 = &dword_1ED4DBE44;
        }
      }
      else
      {
LABEL_60:
        v34 = &dword_1ED4DBC30;
        v29 = &dword_1ED4DBC2C;
        v30 = &dword_1ED4DBC28;
        v31 = &dword_1ED4DBC24;
        v32 = &dword_1ED4DBC20;
        v33 = &dword_1ED4DBC1C;
      }
      v35.i32[0] = *v33;
      v36.i32[0] = *v32;
      v37.i32[0] = *v31;
      v36.i32[1] = *v30;
      v35.i32[1] = *v29;
      v37.i32[1] = *v34;
      *(float32x2_t *)v28.f32 = vadd_f32(vadd_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v28.f32), v36), vmul_f32(*(float32x2_t *)v28.f32, v35)), vmul_laneq_f32(v37, v28, 2));
      result = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL);
      result.i32[0] = (__int32)*a3;
      result.i32[3] = HIDWORD(*(unsigned __int128 *)a3);
      *a3 = result;
      return result;
  }
}

void HGObject::HGObject(HGObject *this)
{
  *(_QWORD *)this = off_1E6519AC8;
  *((_DWORD *)this + 2) = 1;
}

uint64_t HGFormatUtils::rowBytesHint(int a1, const char *a2, char *a3)
{
  unsigned int v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;

  v3 = a2;
  v5 = 0;
  v6 = a1;
  v7 = s_HGFormatInfos[8 * a1 + 1];
  if (v7 - 6403 <= 7)
  {
    if (((1 << (v7 - 3)) & 0xE9) != 0)
      goto LABEL_11;
    if (v7 == 6407)
    {
      v5 = 1;
      if (a1 <= 41)
        goto LABEL_17;
      goto LABEL_12;
    }
  }
  if (v7 == 32993 || v7 == 33319)
  {
LABEL_11:
    if (a1 <= 41)
      goto LABEL_17;
    goto LABEL_12;
  }
  HGLogger::warning((HGLogger *)"componentsPerPixel -- unknown GL format", a2, a3);
  v5 = 0;
  if (a1 <= 41)
  {
LABEL_17:
    v9 = s_HGFormatInfos[8 * v6 + 3];
    if (v5)
      return v9 * v3;
    goto LABEL_13;
  }
LABEL_12:
  v9 = 0;
  if (v5)
    return v9 * v3;
LABEL_13:
  if (a1 == 31)
    return (4 * vcvtpd_u64_f64((double)v3 / 6.0) * v9 + 255) & 0xFFFFFF00;
  else
    return (v9 * v3 + 255) & 0xFFFFFF00;
}

CMTime *_GLOBAL__sub_I_CMTimeAdditions_mm()
{
  CMTime *v0;
  CMTime *v1;
  CMTime v3;
  CMTime duration;
  CMTime start;

  CMTimeMake(&kPC_CMTimeOneSecond, 60, 60);
  CMTimeMake(&kPC_CMTimeOneMinute, 3600, 60);
  CMTimeMake(&kPC_CMTimeTenMinutes, 36000, 60);
  CMTimeMake(&kPC_CMTimeOneHour, 216000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeOneDay, 5184000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeNegativeOneDay, -5184000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeOneYear, 1892160000, 60);
  CMTimeMake((CMTime *)kPC_CMTimeNegativeOneYear, -1892160000, 60);
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
  duration = start;
  CMTimeRangeMake(&kPC_CMTimeRangeIndefinite, &start, &duration);
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  v0 = (CMTime *)MEMORY[0x1E0CA2E30];
  duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  CMTimeRangeMake(&kPC_CMTimeRangeInfinite, &start, &duration);
  v1 = (CMTime *)MEMORY[0x1E0CA2E68];
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  duration = *v0;
  CMTimeRangeMake(&kPC_CMTimeRangeAllNonNegative, &start, &duration);
  start = *(CMTime *)kPC_CMTimeNegativeOneYear;
  v3 = *(CMTime *)kPC_CMTimeOneYear;
  CMTimeMultiply(&duration, &v3, 2);
  CMTimeRangeMake(&kPC_CMTimeRangePlusAndMinusOneYear, &start, &duration);
  start = *(CMTime *)kPC_CMTimeNegativeOneDay;
  v3 = *(CMTime *)kPC_CMTimeOneDay;
  CMTimeMultiply(&duration, &v3, 2);
  CMTimeRangeMake(&kPC_CMTimeRangePlusAndMinusOneDay, &start, &duration);
  start = *v1;
  duration = *(CMTime *)kPC_CMTimeOneDay;
  CMTimeRangeMake(&kPC_CMTimeRangeOneDay, &start, &duration);
  CMTimeMake(&sStandardAliasList, 100, 2997);
  CMTimeMake(&stru_1ED4DB110, 1001, 30000);
  CMTimeMake(&stru_1ED4DB128, 50, 2997);
  CMTimeMake(&stru_1ED4DB140, 1001, 60000);
  CMTimeMake(&stru_1ED4DB158, 125, 2997);
  CMTimeMake(&stru_1ED4DB170, 1001, 24000);
  CMTimeMake(&sWorkaroundAliasList, 100, 2397);
  CMTimeMake(&stru_1ED4DB1A0, 1001, 24000);
  CMTimeMake(&stru_1ED4DB1B8, 100, 2398);
  return CMTimeMake(&stru_1ED4DB1D0, 1001, 24000);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  CMTime v4;
  CMTime v5;

  v5 = *start;
  v4 = *duration;
  return (CMTimeRange *)CMTimeRangeSaferMake(&v5, &v4, (uint64_t)retstr);
}

CMTime *CMTimeRangeSaferMake@<X0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v4;
  CMTime v5;

  v5 = *a1;
  v4 = *a2;
  return _CMTimeRangeSaferMake(&v5, &v4, a3);
}

CMTime *_CMTimeRangeSaferMake@<X0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  CMTimeEpoch epoch;
  uint64_t v9;
  CMTime *result;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime rhs;
  CMTime lhs;
  CMTime v16;
  __int128 v17;
  CMTimeEpoch v18;

  *(CMTime *)a3 = *a1;
  v6 = a3 + 24;
  v7 = *(_OWORD *)&a2->value;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  *(_QWORD *)(a3 + 40) = epoch;
  v17 = v7;
  v18 = epoch;
  if (PC_CMTimeIsNegative((uint64_t)&v17))
  {
    v9 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)v6 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v9 + 16);
  }
  lhs = *a1;
  rhs = *a2;
  result = CMTimeAdd(&v16, &lhs, &rhs);
  if ((v16.flags & 0x1D) == 1)
  {
    v12 = *a1;
    v11 = *a2;
    result = CMTimeAdd(&v13, &v12, &v11);
    if ((v13.flags & 2) != 0 && ((a2->flags | a1->flags) & 2) == 0)
    {
      SimpCMTime(a3);
      return (CMTime *)SimpCMTime(v6);
    }
  }
  return result;
}

BOOL PC_CMTimeIsNegative(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 12) & 0x1D) == 1)
    return *(_QWORD *)a1 >> 63 != *(_DWORD *)(a1 + 8) >> 31;
  else
    return (~*(_DWORD *)(a1 + 12) & 9) == 0;
}

uint64_t _GLOBAL__sub_I_FigTimeAdditions_mm()
{
  __int128 v0;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v0 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  kFigTimeRangeNULL = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)algn_1ED4DC0D0 = v0;
  xmmword_1ED4DC0E0 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  v4 = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v2 = v4;
  v3 = v5;
  FigTimePairMake((uint64_t)&v4, (uint64_t)&v2, (uint64_t)&kFigTimePairInvalid);
  v4 = *MEMORY[0x1E0CA2E10];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
  v2 = v4;
  v3 = v5;
  return FigTimePairMake((uint64_t)&v4, (uint64_t)&v2, (uint64_t)&kFigTimePairIndefinite);
}

uint64_t FigTimePairMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a2 + 16);
  if ((*(_DWORD *)(a3 + 12) & 0x1F) != 3)
    result = SimpCMTime(a3);
  if ((*(_DWORD *)(a3 + 36) & 0x1F) != 3)
    return SimpCMTime(a3 + 24);
  return result;
}

uint64_t SimpCMTime(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_DWORD *)(result + 12) & 0x1D) == 1)
  {
    v1 = *(int *)(result + 8);
    if ((_DWORD)v1)
    {
      v2 = *(int *)(result + 8);
      v3 = *(_QWORD *)result;
      do
      {
        v4 = v2;
        v2 = v3 % v2;
        v3 = v4;
      }
      while (v2);
    }
    else
    {
      v4 = *(_QWORD *)result;
    }
    if (v4 < 0)
      v4 = -v4;
    if ((unint64_t)v4 >= 2)
    {
      *(uint64_t *)result /= v4;
      *(_DWORD *)(result + 8) = v1 / v4;
    }
  }
  return result;
}

uint64_t SimpCMTime(CMTime *a1)
{
  uint64_t timescale;
  uint64_t v2;
  CMTimeValue value;
  CMTimeValue v4;

  if ((a1->flags & 0x1D) != 1)
    return 0;
  timescale = a1->timescale;
  if ((_DWORD)timescale)
  {
    v2 = a1->timescale;
    value = a1->value;
    do
    {
      v4 = v2;
      v2 = value % v2;
      value = v4;
    }
    while (v2);
  }
  else
  {
    v4 = a1->value;
  }
  if (v4 < 0)
    v4 = -v4;
  if ((unint64_t)v4 < 2)
    return 0;
  a1->value /= v4;
  a1->timescale = timescale / v4;
  return 1;
}

double _GLOBAL__sub_I_cc_color_cpp()
{
  double result;

  dword_1ED4DBC30 = -1113159905;
  *(_OWORD *)&cc::matrix::rgb_to_YCbCr601 = M_rgb2YCbCr601;
  *(_OWORD *)&dword_1ED4DBC20 = unk_1B3057190;
  dword_1ED4DBE44 = -1120155095;
  cc::matrix::rgb_to_YCbCr709 = M_rgb_to_YCbCr709;
  *(_OWORD *)&dword_1ED4DBE34 = unk_1B30571B4;
  dword_1ED4DBF48 = -1121667137;
  cc::matrix::rgb_to_YCbCr2020 = M_rgb_to_YCbCr2020;
  *(_OWORD *)&dword_1ED4DBF38 = unk_1B30571D8;
  dword_1ED4DBDCC = -1113159905;
  cc::matrix::YCbCr601_to_rgb = M_rgb2YCbCr601;
  unk_1ED4DBDBC = unk_1B3057190;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr601_to_rgb);
  cc::matrix::YCbCr709_to_rgb = cc::matrix::rgb_to_YCbCr709;
  *(_OWORD *)algn_1ED4DBE10 = *(_OWORD *)&dword_1ED4DBE34;
  dword_1ED4DBE20 = dword_1ED4DBE44;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr709_to_rgb);
  cc::matrix::YCbCr2020_to_rgb = cc::matrix::rgb_to_YCbCr2020;
  unk_1ED4DBEB4 = *(_OWORD *)&dword_1ED4DBF38;
  dword_1ED4DBEC4 = dword_1ED4DBF48;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr2020_to_rgb);
  cc::matrix::YCbCr601_to_709 = cc::matrix::YCbCr601_to_rgb;
  unk_1ED4DBD98 = unk_1ED4DBDBC;
  dword_1ED4DBDA8 = dword_1ED4DBDCC;
  cc_matrix::mul((cc_matrix *)&cc::matrix::YCbCr601_to_709, (const cc_matrix *)&cc::matrix::rgb_to_YCbCr709);
  cc::matrix::YCbCr709_to_601 = cc::matrix::YCbCr601_to_709;
  unk_1ED4DBDEC = unk_1ED4DBD98;
  dword_1ED4DBDFC = dword_1ED4DBDA8;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr709_to_601);
  cc::matrix::YCbCr601_to_2020 = cc::matrix::YCbCr601_to_rgb;
  unk_1ED4DBEE0 = unk_1ED4DBDBC;
  dword_1ED4DBEF0 = dword_1ED4DBDCC;
  cc_matrix::mul((cc_matrix *)&cc::matrix::YCbCr601_to_2020, (const cc_matrix *)&cc::matrix::rgb_to_YCbCr2020);
  cc::matrix::YCbCr2020_to_601 = cc::matrix::YCbCr601_to_2020;
  unk_1ED4DBE64 = unk_1ED4DBEE0;
  dword_1ED4DBE74 = dword_1ED4DBEF0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr2020_to_601);
  cc::matrix::YCbCr709_to_2020 = cc::matrix::YCbCr709_to_rgb;
  unk_1ED4DBF08 = *(_OWORD *)algn_1ED4DBE10;
  dword_1ED4DBF18 = dword_1ED4DBE20;
  cc_matrix::mul((cc_matrix *)&cc::matrix::YCbCr709_to_2020, (const cc_matrix *)&cc::matrix::rgb_to_YCbCr2020);
  cc::matrix::YCbCr2020_to_709 = cc::matrix::YCbCr709_to_2020;
  unk_1ED4DBE8C = unk_1ED4DBF08;
  dword_1ED4DBE9C = dword_1ED4DBF18;
  cc_matrix::invert((cc_matrix *)&cc::matrix::YCbCr2020_to_709);
  dword_1ED4DC030 = 1050627350;
  cc::matrix::rgb2YIQ = M_rgb2YIQ;
  unk_1ED4DC020 = unk_1B30571FC;
  dword_1ED4DC004 = 1071263829;
  cc::matrix::YIQ2rgb = M_YIQ2rgb;
  unk_1ED4DBFF4 = unk_1B3057220;
  cc::matrix::rgb_to_XYZ = xmmword_1B3057050;
  *(_OWORD *)algn_1ED4DBC70 = xmmword_1B3057060;
  dword_1ED4DBC80 = 1064519457;
  dword_1ED4DBC54 = 1064519457;
  cc::matrix::XYZ_to_rgb = xmmword_1B3057050;
  unk_1ED4DBC44 = xmmword_1B3057060;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_to_rgb);
  cc::matrix::rgb_to_XYZ_D50 = xmmword_1B3057070;
  *(_OWORD *)algn_1ED4DBD70 = xmmword_1B3057080;
  dword_1ED4DBD80 = 1060557840;
  dword_1ED4DBD24 = 1060557840;
  cc::matrix::XYZ_D50_to_rgb = xmmword_1B3057070;
  unk_1ED4DBD14 = xmmword_1B3057080;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_D50_to_rgb);
  cc::matrix::Bradford = xmmword_1B3057090;
  *(_OWORD *)algn_1ED4DC050 = xmmword_1B30570A0;
  dword_1ED4DC060 = 1065601519;
  dword_1ED4DC084 = 1065601519;
  cc::matrix::iBradford = xmmword_1B3057090;
  unk_1ED4DC074 = xmmword_1B30570A0;
  cc_matrix::invert((cc_matrix *)&cc::matrix::iBradford);
  cc::matrix::XYZ_C = xmmword_1B30570B0;
  unk_1ED4DBF60 = xmmword_1B30570C0;
  dword_1ED4DBF70 = 0;
  cc::matrix::XYZ_D50 = xmmword_1B30570D0;
  *(_OWORD *)algn_1ED4DBF90 = xmmword_1B30570E0;
  dword_1ED4DBFA0 = 0;
  cc::matrix::XYZ_D65 = xmmword_1B30570F0;
  unk_1ED4DBFC0 = xmmword_1B3057100;
  dword_1ED4DBFD0 = 0;
  cc::matrix::XYZ_C_to_D50 = xmmword_1B3057110;
  unk_1ED4DBCA0 = xmmword_1B3057120;
  dword_1ED4DBCB0 = 1060162983;
  dword_1ED4DBCD4 = 1060162983;
  cc::matrix::XYZ_D50_to_C = xmmword_1B3057110;
  unk_1ED4DBCC4 = xmmword_1B3057120;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_D50_to_C);
  cc::matrix::XYZ_D50_to_D65 = xmmword_1B3057130;
  *(_OWORD *)algn_1ED4DBCF0 = xmmword_1B3057140;
  dword_1ED4DBD00 = 1068120700;
  dword_1ED4DBD54 = 1068120700;
  cc::matrix::XYZ_D65_to_D50 = xmmword_1B3057130;
  unk_1ED4DBD44 = xmmword_1B3057140;
  cc_matrix::invert((cc_matrix *)&cc::matrix::XYZ_D65_to_D50);
  unk_1ED4DB040 = xmmword_1B3057160;
  dword_1ED4DB050 = 1060645296;
  dword_1ED4DB074 = 1060645296;
  unk_1ED4DB064 = xmmword_1B3057160;
  *(_QWORD *)&result = 1170939904;
  return result;
}

float cc_matrix::invert(cc_matrix *this)
{
  float result;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  float v37;
  float v38;

  v2 = *(float *)this;
  result = *((float *)this + 1);
  v4 = *((float *)this + 2);
  v3 = *((float *)this + 3);
  v5 = *((float *)this + 4);
  v6 = *((float *)this + 5);
  v8 = *((float *)this + 6);
  v7 = *((float *)this + 7);
  v9 = *((float *)this + 8);
  v10 = *(float *)this * v5;
  v11 = 0.0;
  if ((float)(v10 * v9) >= 0.0)
    v12 = (float)(v10 * v9) + 0.0;
  else
    v12 = 0.0;
  if ((float)(v10 * v9) < 0.0)
    v11 = (float)(v10 * v9) + 0.0;
  v13 = v4 * (float)(v3 * v7);
  v14 = -0.0;
  if (v13 >= 0.0)
    v15 = v4 * (float)(v3 * v7);
  else
    v15 = -0.0;
  v16 = v12 + v15;
  if (v13 >= 0.0)
    v13 = -0.0;
  v17 = v11 + v13;
  v18 = result * v8;
  v19 = v6 * (float)(result * v8);
  if (v19 >= 0.0)
    v20 = v6 * (float)(result * v8);
  else
    v20 = -0.0;
  v21 = v20 + v16;
  if (v19 >= 0.0)
    v19 = -0.0;
  v22 = v19 + v17;
  v23 = v4 * (float)-(float)(v8 * v5);
  if (v23 >= 0.0)
    v24 = v4 * (float)-(float)(v8 * v5);
  else
    v24 = -0.0;
  v25 = v24 + v21;
  if (v23 >= 0.0)
    v23 = -0.0;
  v26 = v23 + v22;
  v27 = (float)-(float)(v3 * result) * v9;
  if (v27 >= 0.0)
    v28 = (float)-(float)(v3 * result) * v9;
  else
    v28 = -0.0;
  v29 = v28 + v25;
  if (v27 >= 0.0)
    v27 = -0.0;
  v30 = v27 + v26;
  v31 = v6 * (float)-(float)(v2 * v7);
  if (v31 >= 0.0)
    v32 = v6 * (float)-(float)(v2 * v7);
  else
    v32 = -0.0;
  v33 = v32 + v29;
  if (v31 < 0.0)
    v14 = v6 * (float)-(float)(v2 * v7);
  v34 = v14 + v30;
  v35 = v33 + v34;
  v36 = (float)(v33 + v34);
  if ((float)(v33 + v34) < 0.0)
    v36 = -v36;
  if (v36 >= 0.00000011920929)
  {
    v37 = v35 / (float)(v33 - v34);
    if (v37 < 0.0)
      v37 = -v37;
    if (v37 >= 1.0e-15)
    {
      v38 = 1.0 / v35;
      *(float *)this = (float)((float)(v5 * v9) - (float)(v6 * v7)) * v38;
      *((float *)this + 1) = -(float)((float)((float)(result * v9) - (float)(v4 * v7)) * v38);
      *((float *)this + 2) = (float)((float)(result * v6) - (float)(v4 * v5)) * v38;
      *((float *)this + 3) = -(float)((float)((float)(v3 * v9) - (float)(v6 * v8)) * v38);
      *((float *)this + 4) = (float)((float)(v2 * v9) - (float)(v4 * v8)) * v38;
      *((float *)this + 5) = -(float)((float)((float)(v2 * v6) - (float)(v4 * v3)) * v38);
      result = (float)(v10 - (float)(result * v3)) * v38;
      *((float *)this + 6) = (float)((float)(v3 * v7) - (float)(v5 * v8)) * v38;
      *((float *)this + 7) = -(float)((float)((float)(v2 * v7) - v18) * v38);
      *((float *)this + 8) = result;
    }
  }
  return result;
}

double cc_matrix::mul(cc_matrix *this, const cc_matrix *a2)
{
  uint64_t v2;
  float *v3;
  cc_matrix *v4;
  uint64_t i;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  int v13;

  v2 = 0;
  v13 = 1065353216;
  v3 = (float *)v12;
  v4 = this;
  do
  {
    for (i = 0; i != 3; ++i)
    {
      v6 = 0;
      v7 = (float *)((char *)a2 + 4 * i);
      *v3 = 0.0;
      v8 = 0.0;
      do
      {
        v9 = *v7;
        v7 += 3;
        v8 = v8 + (float)(*(float *)((char *)v4 + v6) * v9);
        *v3 = v8;
        v6 += 4;
      }
      while ((_DWORD)v6 != 12);
      ++v3;
    }
    ++v2;
    v4 = (cc_matrix *)((char *)v4 + 12);
  }
  while (v2 != 3);
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)this = v12[0];
  *((_OWORD *)this + 1) = v11;
  *((_DWORD *)this + 8) = v13;
  return result;
}

double _GLOBAL__sub_I_OZFontUtilities_mm()
{
  double result;

  OZFontWeightUltraLight = *MEMORY[0x1E0CEB610];
  OZFontWeightThin = *MEMORY[0x1E0CEB600];
  OZFontWeightLight = *MEMORY[0x1E0CEB5E0];
  OZFontWeightRegular = *MEMORY[0x1E0CEB5F0];
  OZFontWeightMedium = *MEMORY[0x1E0CEB5E8];
  OZFontWeightSemibold = *MEMORY[0x1E0CEB5F8];
  OZFontWeightBold = *MEMORY[0x1E0CEB5D0];
  OZFontWeightHeavy = *MEMORY[0x1E0CEB5D8];
  result = *MEMORY[0x1E0CEB5C8];
  OZFontWeightBlack = *MEMORY[0x1E0CEB5C8];
  return result;
}

double GetHostTime(void)
{
  unint64_t v0;
  unint64_t v1;
  mach_timebase_info info;

  if (*(double *)&GetHostTime(void)::timeBaseFactor == 0.0 && !mach_timebase_info(&info))
  {
    LODWORD(v0) = info.numer;
    LODWORD(v1) = info.denom;
    *(double *)&GetHostTime(void)::timeBaseFactor = (double)v0 / (double)v1 / 1000000000.0;
  }
  return *(double *)&GetHostTime(void)::timeBaseFactor * (double)mach_absolute_time();
}

id StringFormatPMR(NSString *a1, NSNumber *a2, NSString *a3)
{
  NSString *v5;
  NSNumber *v6;
  NSString *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v8, "setDateFormat:", CFSTR("yyyy-MM-dd 'at' HH:mm:ss"));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringFromDate:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x1E0CB3940];
  -[NSNumber doubleValue](v6, "doubleValue");
  objc_msgSend(v11, "stringWithFormat:", CFSTR("%f"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringWithFormat:", CFSTR("<Measurement key=\"%@\" value=\"%@\" comment=\"%@\" timestamp=\"%@\"/>"), v5, v13, v7, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1B273A50C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id StringFormatJSON(NSString *a1, NSNumber *a2)
{
  NSString *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = a1;
  -[NSNumber doubleValue](a2, "doubleValue");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\"%@\": %@"), v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1B273A5F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id StringFormatTEXT(NSString *a1, NSNumber *a2, NSString *a3)
{
  NSString *v5;
  NSNumber *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)MEMORY[0x1E0CB3940];
  -[NSNumber doubleValue](v6, "doubleValue");
  objc_msgSend(v8, "stringWithFormat:", CFSTR("%f"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringWithFormat:", CFSTR("%@: %@ | %@"), v5, v10, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_1B273A6C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void PerfTimer::Start(PerfTimer *this)
{
  this->_start = GetHostTime();
}

void PerfTimer::PerfTimer(PerfTimer *this)
{
  this->_start = 0.0;
  this->_end = 0.0;
  this->_start = GetHostTime();
}

double PerfTimer::End(PerfTimer *this)
{
  double HostTime;

  HostTime = GetHostTime();
  this->_end = HostTime;
  return HostTime - this->_start;
}

void PVPerfStats::LogString(PVPerfStats *this, NSString *a2, ...)
{
  NSString *v3;
  void *v4;
  void *v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v3, va);
  v5 = v4;
  switch(PVPerfStats::_logOutput)
  {
    case 0:
      puts((const char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
      break;
    case 1:
      objc_msgSend(*((id *)this + 79), "appendString:", v4);
      objc_msgSend(*((id *)this + 79), "appendString:", CFSTR("\n"));
      break;
    case 2:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v7 = objc_msgSend(objc_retainAutorelease(v5), "cStringUsingEncoding:", 4);
        _os_log_impl(&dword_1B2737000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      }
      break;
    case 3:
      NSLog(CFSTR("%@"), v4);
      break;
    default:
      break;
  }

}

void sub_1B273A8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t PVPerfStats::FrameStats::FrameStats(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_WORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

void PVPerfStats::FrameStats::Init(PVPerfStats::FrameStats *this, int a2, int a3)
{
  __int128 *v3;
  __int128 v4;

  v3 = (__int128 *)MEMORY[0x1E0CA2E68];
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  v4 = *v3;
  *((_QWORD *)this + 3) = *((_QWORD *)v3 + 2);
  *(_OWORD *)((char *)this + 8) = v4;
  PVPerfStats::FrameStats::Clear(this);
}

void PVPerfStats::FrameStats::Clear(PVPerfStats::FrameStats *this)
{
  char *v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *((double *)this + 4) = GetHostTime();
  v3 = (void **)((char *)this + 64);
  v2 = (char *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = v2;
  if (*(_DWORD *)this)
  {
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 80);
    do
    {
      if ((unint64_t)v2 >= *v5)
      {
        v7 = (char *)*v3;
        v8 = (v2 - (_BYTE *)*v3) >> 3;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v10 = *v5 - (_QWORD)v7;
        if (v10 >> 2 > v9)
          v9 = v10 >> 2;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 80, v11);
          v7 = (char *)*((_QWORD *)this + 8);
          v2 = (char *)*((_QWORD *)this + 9);
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = 0;
        v6 = v13 + 8;
        while (v2 != v7)
        {
          v14 = *((_QWORD *)v2 - 1);
          v2 -= 8;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        *((_QWORD *)this + 8) = v13;
        *((_QWORD *)this + 9) = v6;
        *((_QWORD *)this + 10) = &v12[8 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_QWORD *)v2 = 0;
        v6 = v2 + 8;
      }
      *((_QWORD *)this + 9) = v6;
      ++v4;
      v2 = v6;
    }
    while (v4 < *(unsigned int *)this);
  }
}

__n128 PVPerfStats::FrameStats::Init(PVPerfStats::FrameStats *this, int a2, int a3, CMTime *a4)
{
  __int128 v4;
  __n128 result;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  v4 = *(_OWORD *)&a4->value;
  *((_QWORD *)this + 3) = a4->epoch;
  *(_OWORD *)((char *)this + 8) = v4;
  PVPerfStats::FrameStats::Clear(this);
  return result;
}

uint64_t PVPerfStats::FrameStats::GetSize(PVPerfStats::FrameStats *this)
{
  return *(unsigned int *)this;
}

double PVPerfStats::FrameStats::GetValueForIndex(PVPerfStats::FrameStats *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 8);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 9) - v2) >> 3))
    return INFINITY;
  else
    return *(double *)(v2 + 8 * a2);
}

uint64_t PVPerfStats::FrameStats::SetValueForIndex(uint64_t this, unsigned int a2, double a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 64);
  if (a2 < (unint64_t)((*(_QWORD *)(this + 72) - v3) >> 3))
    *(double *)(v3 + 8 * a2) = a3;
  return this;
}

double PVPerfStats::FrameStats::MarkEndTimeForIndex(PVPerfStats::FrameStats *this, unsigned int a2)
{
  uint64_t v2;
  double HostTime;
  double result;

  v2 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3))
  {
    HostTime = GetHostTime();
    *((double *)this + 5) = HostTime;
    result = HostTime - *((double *)this + 4);
    *(double *)(*((_QWORD *)this + 8) + 8 * v2) = result;
  }
  return result;
}

double PVPerfStats::FrameStats::operator-@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  __int128 v5;
  double **v6;
  double result;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;

  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)a3 + 42) = *(_OWORD *)(a1 + 42);
  *((_QWORD *)a3 + 8) = 0;
  v6 = (double **)(a3 + 16);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a3 + 8, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
  v8 = *a3;
  if ((_DWORD)v8)
  {
    v9 = *(double **)(a2 + 64);
    v10 = *v6;
    do
    {
      v11 = *v9++;
      result = *v10 - v11;
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

double PVPerfStats::FrameStats::operator*@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  __int128 v5;
  double **v6;
  double result;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;

  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)a3 + 42) = *(_OWORD *)(a1 + 42);
  *((_QWORD *)a3 + 8) = 0;
  v6 = (double **)(a3 + 16);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a3 + 8, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
  v8 = *a3;
  if ((_DWORD)v8)
  {
    v9 = *(double **)(a2 + 64);
    v10 = *v6;
    do
    {
      v11 = *v9++;
      result = v11 * *v10;
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *PVPerfStats::FrameStats::operator/@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int *a3@<X8>)
{
  __int128 v5;
  double **v6;
  _QWORD *result;
  uint64_t v8;
  double *v9;

  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_OWORD *)a3 + 1) = v5;
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)a3 + 42) = *(_OWORD *)(a1 + 42);
  *((_QWORD *)a3 + 8) = 0;
  v6 = (double **)(a3 + 16);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a3 + 8, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
  v8 = *a3;
  if ((_DWORD)v8)
  {
    v9 = *v6;
    do
    {
      *v9 = *v9 / (double)a2;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *PVPerfStats::FrameStats::min@<X0>(PVPerfStats::FrameStats *this@<X0>, const PVPerfStats::FrameStats *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  double **v6;
  _QWORD *result;
  uint64_t v8;
  double *v9;
  double *v10;

  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 42) = *(_OWORD *)((char *)this + 42);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v6 = (double **)(a3 + 64);
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a3 + 64), *((const void **)this + 8), *((_QWORD *)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
  v8 = *(unsigned int *)this;
  if ((_DWORD)v8)
  {
    v9 = (double *)*((_QWORD *)a2 + 8);
    v10 = *v6;
    do
    {
      if (*v9 < *v10)
        *v10 = *v9;
      ++v9;
      ++v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *PVPerfStats::FrameStats::max@<X0>(PVPerfStats::FrameStats *this@<X0>, const PVPerfStats::FrameStats *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  double **v6;
  _QWORD *result;
  uint64_t v8;
  double *v9;
  double *v10;

  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 42) = *(_OWORD *)((char *)this + 42);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v6 = (double **)(a3 + 64);
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a3 + 64), *((const void **)this + 8), *((_QWORD *)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
  v8 = *(unsigned int *)this;
  if ((_DWORD)v8)
  {
    v9 = (double *)*((_QWORD *)a2 + 8);
    v10 = *v6;
    do
    {
      if (*v9 > *v10)
        *v10 = *v9;
      ++v9;
      ++v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void PVPerfStats::LogPlaybackRate(PVPerfStats *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  NSString *v10;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  NSString *v17;
  NSNumber *v18;
  NSNumber *v19;
  NSNumber *v20;
  NSNumber *v21;
  NSNumber *v22;

  v1 = *((_QWORD *)this + 76);
  v2 = *((_QWORD *)this + 75);
  if ((unint64_t)(v1 - v2) >= 2)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *(double *)(v4 + 88 * v1 + 40) - *(double *)(v4 + 88 * v2 + 32);
    *(float *)&v5 = v5;
    if (v1 > v2)
    {
      v6 = v4 + 88 * v2 + 57;
      v7 = v1 - v2;
      v8 = (unsigned __int8 *)v6;
      do
      {
        v9 = *v8;
        v8 += 88;
        if (v9)
        {
          v5 = *(float *)&v5 - *(double *)(v6 - 9);
          *(float *)&v5 = v5;
        }
        v6 = (uint64_t)v8;
        --v7;
      }
      while (v7);
    }
    *(float *)&v5 = (float)(unint64_t)(v1 - v2) / *(float *)&v5;
    switch(PVPerfStats::_logFormat)
    {
      case 0:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
        v22 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("start/end frame nums: %d, %d"), *(unsigned int *)(v4 + 88 * v2 + 4), *(unsigned int *)(v4 + 88 * v1 + 4));
        v17 = (NSString *)objc_claimAutoreleasedReturnValue();
        StringFormatTEXT(CFSTR("Playback fps"), v22, v17);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        PVPerfStats::LogString(this, CFSTR("%@"), v11);
        goto LABEL_14;
      case 1:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
        v19 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("playbackFPS"), v19);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v12);

        *(float *)&v13 = (float)*(unsigned int *)(v4 + 88 * v2 + 4);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13);
        v20 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("playbackStartFrame"), v20);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v14);

        *(float *)&v15 = (float)*(unsigned int *)(v4 + 88 * v1 + 4);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15);
        v21 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("playbackEndFrame"), v21);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v16);

        return;
      case 2:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
        v18 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Frame rate measured for stats during playback during frameNum range (%d, %d)"), *(unsigned int *)(v4 + 88 * v2 + 4), *(unsigned int *)(v4 + 88 * v1 + 4));
        v10 = (NSString *)objc_claimAutoreleasedReturnValue();
        StringFormatPMR(CFSTR("Playback FPS"), v18, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        PVPerfStats::LogString(this, CFSTR("%@"), v11);
LABEL_14:

        break;
    }
  }
}

void sub_1B273B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void PVPerfStats::BeginLogging(PVPerfStats *this)
{
  if (PVPerfStats::BeginLogging(void)::onceToken != -1)
    dispatch_once(&PVPerfStats::BeginLogging(void)::onceToken, &__block_literal_global);
}

void ___ZN11PVPerfStats12BeginLoggingEv_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSString *v10;
  id v11;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v0, "setDateFormat:", CFSTR("yyyyMMdd_HHmmss"));
  objc_msgSend(v0, "stringFromDate:", v11);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ProVideoRenderStats_%@.txt"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndex:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathComponent:", v2);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)PVPerfStats::_logFilePath;
  PVPerfStats::_logFilePath = v5;

  objc_msgSend((id)PVPerfStats::_logFilePath, "stringByExpandingTildeInPath");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)PVPerfStats::_logFilePath;
  PVPerfStats::_logFilePath = v7;

  if (PVPerfStats::_logOutput == 1 && PVPerfStats::_logFormat == 1)
  {
    objc_msgSend(v0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
    objc_msgSend(v0, "stringFromDate:", v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[\n  {\n    \"name\": \"begin\",\n    \"date\": \"%@\"\n  },\n"), v9);
    v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    WriteBufferToFile(v10, (NSString *)PVPerfStats::_logFilePath);

  }
  else
  {
    v9 = v1;
  }

}

void sub_1B273B290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  _Unwind_Resume(a1);
}

void WriteBufferToFile(NSString *a1, NSString *a2)
{
  NSString *v3;
  void *v4;
  void *v5;
  void *v6;
  NSString *v7;

  v7 = a1;
  v3 = a2;
  if (-[NSString length](v7, "length") && -[NSString length](v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "fileExistsAtPath:", v3) & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3608], "fileHandleForWritingAtPath:", v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "truncateFileAtOffset:", objc_msgSend(v5, "seekToEndOfFile"));
      -[NSString dataUsingEncoding:](v7, "dataUsingEncoding:", 4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "writeData:", v6);

      objc_msgSend(v5, "synchronizeFile");
    }
    else
    {
      -[NSString writeToFile:atomically:encoding:error:](v7, "writeToFile:atomically:encoding:error:", v3, 1, 4, 0);
    }

  }
}

void sub_1B273B3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void PVPerfStats::EndLogging(PVPerfStats *this)
{
  id v2;
  void *v3;
  NSString *v4;
  id v5;

  if (PVPerfStats::_logOutput == 1 && PVPerfStats::_logFormat == 1)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v2 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
    objc_msgSend(v2, "stringFromDate:", v5);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("  {\n    \"name\": \"end\",\n    \"date\": \"%@\"\n  }\n]"), v3);
    v4 = (NSString *)objc_claimAutoreleasedReturnValue();
    WriteBufferToFile(v4, (NSString *)PVPerfStats::_logFilePath);

  }
}

void sub_1B273B518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t PVPerfStats::GetFrameStatsDescription(PVPerfStats *this)
{
  return *((_QWORD *)this + 80);
}

uint64_t PVPerfStats::PVPerfStats(uint64_t a1, uint64_t (****a2)(_QWORD))
{
  uint64_t (***v4)(_QWORD);
  uint64_t v5;
  id v6;
  void *v7;

  *(double *)a1 = GetHostTime();
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = -1;
  *(_QWORD *)(a1 + 608) = -1;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = &stru_1E65EDDA0;
  *(_QWORD *)(a1 + 632) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 640) = v4;
  LODWORD(a2) = (**v4)(v4);
  *(_DWORD *)(a1 + 64) = (_DWORD)a2;
  *(_DWORD *)(a1 + 68) = 0;
  v5 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a1 + 72) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 64));
  *(_DWORD *)(a1 + 152) = (_DWORD)a2;
  *(_DWORD *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 152));
  *(_DWORD *)(a1 + 416) = (_DWORD)a2;
  *(_DWORD *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 416));
  *(_DWORD *)(a1 + 504) = (_DWORD)a2;
  *(_DWORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 504));
  *(_DWORD *)(a1 + 240) = (_DWORD)a2;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 240));
  *(_DWORD *)(a1 + 328) = (_DWORD)a2;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(v5 + 16);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)(a1 + 328));
  v6 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v7 = *(void **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v6;

  objc_msgSend(*(id *)(a1 + 632), "setString:", &stru_1E65EDDA0);
  return a1;
}

void sub_1B273B76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v16 = *(_QWORD *)(v10 + 640);
  *(_QWORD *)(v10 + 640) = 0;
  if (v16)
    MEMORY[0x1B5E29170](v16, 0x81C40B8603338);
  v17 = v11 + 44;

  v18 = *(void **)(v10 + 568);
  if (v18)
  {
    *(_QWORD *)(v10 + 576) = v18;
    operator delete(v18);
  }
  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v10 + 488) = v19;
    operator delete(v19);
  }
  v20 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 400) = v20;
    operator delete(v20);
  }
  v21 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 312) = v21;
    operator delete(v21);
  }
  v22 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 224) = v22;
    operator delete(v22);
  }
  v23 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 136) = v23;
    operator delete(v23);
  }
  a10 = a9;
  std::vector<PVPerfStats::FrameStats>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void PVPerfStats::SetName(PVPerfStats *this, __CFString *a2)
{
  if (!a2)
    a2 = &stru_1E65EDDA0;
  objc_storeStrong((id *)this + 78, a2);
}

void PVPerfStats::Print(PVPerfStats *this, int a2, int a3)
{
  uint64_t v4;
  unint64_t v6;
  BOOL v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  std::string::size_type v17;
  const std::string::value_type *p_p;
  std::string::size_type v19;
  void **v20;
  std::string::size_type v21;
  void **v22;
  void **v23;
  std::string::size_type size;
  std::string *v25;
  std::string *v26;
  void **v28;
  std::string *v29;
  void **v30;
  void **v31;
  void *v32;
  void **v33;
  void **v34;
  void **v35;
  std::string *v36;
  void **v37;
  void **v38;
  void *v39;
  void **v40;
  char v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *__p;
  std::string::size_type v48;
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  std::string v54;
  void **v55;
  uint64_t v56;
  char v57;

  if (!PVPerfStats::_logLevel)
    return;
  v4 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if (!v4)
    return;
  LODWORD(v6) = a2;
  if (PVPerfStats::_logLevel <= 2)
  {
    if (PVPerfStats::_logLevel != 2 || (a3 & 1) == 0)
    {
      v8 = PVPerfStats::_logFormat;
      v9 = 1;
      goto LABEL_12;
    }
    v7 = (unint64_t)(0x2E8BA2E8BA2E8BA3 * (v4 >> 3)) > 1;
  }
  else
  {
    v7 = 1;
  }
  v8 = PVPerfStats::_logFormat;
  v9 = !v7;
  if (!PVPerfStats::_logFormat && v7)
  {
    PVPerfStats::LogString(this, CFSTR("PV_BEGIN_PERF_STATS_LOG_%@"), *((_QWORD *)this + 78));
    goto LABEL_14;
  }
LABEL_12:
  if (v8 == 1)
    PVPerfStats::LogString(this, CFSTR("  {\n    \"name\": \"%@\","), *((_QWORD *)this + 78));
LABEL_14:
  if (*((_BYTE *)this + 616))
    PVPerfStats::LogPlaybackRate(this);
  *((_BYTE *)this + 616) = 0;
  *((_QWORD *)this + 75) = -1;
  *((_QWORD *)this + 76) = -1;
  v10 = PVPerfStats::_logLevel;
  v11 = PVPerfStats::_logFormat;
  if (PVPerfStats::_logLevel >= 3)
  {
    (*(void (**)(void ***__return_ptr))(**((_QWORD **)this + 80) + 8))(&v55);
    memset(&v54, 0, sizeof(v54));
    if (PVPerfStats::_logFormat == 1)
      v12 = "      ";
    else
      v12 = "";
    std::string::basic_string[abi:ne180100]<0>(v52, v12);
    if (PVPerfStats::_logFormat == 2)
      v13 = "";
    else
      v13 = ",\n";
    std::string::basic_string[abi:ne180100]<0>(v50, v13);
    v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
    if (v14 > v6)
    {
      v6 = v6;
      v15 = 88 * v6;
      do
      {
        if ((v53 & 0x80u) == 0)
          v16 = v52;
        else
          v16 = (void **)v52[0];
        if ((v53 & 0x80u) == 0)
          v17 = v53;
        else
          v17 = (std::string::size_type)v52[1];
        std::string::append(&v54, (const std::string::value_type *)v16, v17);
        if (v6)
        {
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 80) + 16))(&__p, *((_QWORD *)this + 80), PVPerfStats::_logFormat, *((_QWORD *)this + 4) + v15, *((_QWORD *)this + 4) + v15 - 88);
          if ((v49 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v49 & 0x80u) == 0)
            v19 = v49;
          else
            v19 = v48;
        }
        else
        {
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 80) + 16))(&__p, *((_QWORD *)this + 80), PVPerfStats::_logFormat, *((_QWORD *)this + 4), 0);
          if ((v49 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v49 & 0x80u) == 0)
            v19 = v49;
          else
            v19 = v48;
        }
        std::string::append(&v54, p_p, v19);
        if ((char)v49 < 0)
          operator delete(__p);
        if (v6 < v14 - 1)
        {
          if ((v51 & 0x80u) == 0)
            v20 = v50;
          else
            v20 = (void **)v50[0];
          if ((v51 & 0x80u) == 0)
            v21 = v51;
          else
            v21 = (std::string::size_type)v50[1];
          std::string::append(&v54, (const std::string::value_type *)v20, v21);
        }
        ++v6;
        v15 += 88;
      }
      while (v14 != v6);
    }
    if (PVPerfStats::_logFormat != 1)
    {
      if (PVPerfStats::_logFormat == 2)
      {
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!*((_BYTE *)&v54.__r_.__value_.__s + 23))
            goto LABEL_90;
          goto LABEL_86;
        }
        if (!v54.__r_.__value_.__l.__size_)
          goto LABEL_90;
LABEL_88:
        v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
        goto LABEL_89;
      }
      if (v57 < 0)
      {
        if (!v56)
          goto LABEL_84;
        v23 = v55;
      }
      else
      {
        if (!v57)
          goto LABEL_84;
        v23 = (void **)&v55;
      }
      PVPerfStats::LogString(this, CFSTR("%s"), v23);
LABEL_84:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v54.__r_.__value_.__l.__size_)
          goto LABEL_88;
      }
      else if (*((_BYTE *)&v54.__r_.__value_.__s + 23))
      {
LABEL_86:
        v26 = &v54;
LABEL_89:
        PVPerfStats::LogString(this, CFSTR("%s"), v26);
      }
LABEL_90:
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (v57 < 0)
        operator delete(v55);
      v10 = PVPerfStats::_logLevel;
      v11 = PVPerfStats::_logFormat;
      goto LABEL_99;
    }
    if (v57 < 0)
    {
      if (v56)
      {
        v22 = v55;
        goto LABEL_70;
      }
    }
    else if (v57)
    {
      v22 = (void **)&v55;
LABEL_70:
      PVPerfStats::LogString(this, CFSTR("    \"headers\": %s,"), v22);
    }
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v54.__r_.__value_.__l.__size_;
    if (size)
    {
      PVPerfStats::LogString(this, CFSTR("    \"frames\": ["));
      v25 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v54.__r_.__value_.__r.__words[0];
      PVPerfStats::LogString(this, CFSTR("%s"), v25);
      if (a3
        && PVPerfStats::_logLevel >= 2
        && (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3)) > 1)
      {
        PVPerfStats::LogString(this, CFSTR("    ],"));
      }
      else
      {
        PVPerfStats::LogString(this, CFSTR("    ]"));
      }
    }
    goto LABEL_90;
  }
LABEL_99:
  if (a3
    && v10 >= 2
    && (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3)) >= 2
    && v11 != 2)
  {
    PVPerfStats::CalculateStats(this);
    (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)this + 80) + 16))(&v55, *((_QWORD *)this + 80), PVPerfStats::_logFormat, (char *)this + 64, 0);
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)this + 80) + 16))(&v54, *((_QWORD *)this + 80), PVPerfStats::_logFormat, (char *)this + 152, 0);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)this + 80) + 16))(v52, *((_QWORD *)this + 80), PVPerfStats::_logFormat, (char *)this + 416, 0);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)this + 80) + 16))(v50, *((_QWORD *)this + 80), PVPerfStats::_logFormat, (char *)this + 504, 0);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)this + 80) + 16))(&__p, *((_QWORD *)this + 80), PVPerfStats::_logFormat, (char *)this + 240, 0);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)this + 80) + 16))(v45, *((_QWORD *)this + 80), PVPerfStats::_logFormat, (char *)this + 328, 0);
    if (PVPerfStats::_logFormat == 1)
    {
      PVPerfStats::LogString(this, CFSTR("    \"statsSummary\": {"));
      v28 = (void **)&v55;
      if (v57 < 0)
        v28 = v55;
      PVPerfStats::LogString(this, CFSTR("      \"average\": %s,"), v28);
      v29 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
      PVPerfStats::LogString(this, CFSTR("      \"stddev\": %s,"), v29);
      v30 = v52;
      if ((v53 & 0x80u) != 0)
        v30 = (void **)v52[0];
      PVPerfStats::LogString(this, CFSTR("      \"olympic_avg\": %s,"), v30);
      v31 = v50;
      if ((v51 & 0x80u) != 0)
        v31 = (void **)v50[0];
      PVPerfStats::LogString(this, CFSTR("      \"olympic_stddev\": %s,"), v31);
      v32 = &__p;
      if ((v49 & 0x80u) != 0)
        v32 = __p;
      PVPerfStats::LogString(this, CFSTR("      \"min\": %s,"), v32);
      v33 = v45;
      if (v46 < 0)
        v33 = (void **)v45[0];
      PVPerfStats::LogString(this, CFSTR("      \"max\": %s"), v33);
      PVPerfStats::LogString(this, CFSTR("    }"));
LABEL_139:
      if (v46 < 0)
        operator delete(v45[0]);
      if ((char)v49 < 0)
        operator delete(__p);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (v57 < 0)
        operator delete(v55);
      v11 = PVPerfStats::_logFormat;
      goto LABEL_152;
    }
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 80) + 8))(v43);
    if (v44 < 0)
    {
      if (v43[1])
      {
        v34 = (void **)v43[0];
        goto LABEL_124;
      }
    }
    else if (v44)
    {
      v34 = v43;
LABEL_124:
      PVPerfStats::LogString(this, CFSTR("%s"), v34);
    }
    v35 = (void **)&v55;
    if (v57 < 0)
      v35 = v55;
    PVPerfStats::LogString(this, CFSTR("Average:\n%s"), v35);
    v36 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v54.__r_.__value_.__r.__words[0];
    PVPerfStats::LogString(this, CFSTR("Stdev:\n%s"), v36);
    v37 = v52;
    if ((v53 & 0x80u) != 0)
      v37 = (void **)v52[0];
    PVPerfStats::LogString(this, CFSTR("oAverage:\n%s"), v37);
    v38 = v50;
    if ((v51 & 0x80u) != 0)
      v38 = (void **)v50[0];
    PVPerfStats::LogString(this, CFSTR("oStdev:\n%s"), v38);
    v39 = &__p;
    if ((v49 & 0x80u) != 0)
      v39 = __p;
    PVPerfStats::LogString(this, CFSTR("Min:\n%s"), v39);
    v40 = v45;
    if (v46 < 0)
      v40 = (void **)v45[0];
    PVPerfStats::LogString(this, CFSTR("Max:\n%s"), v40);
    if (v44 < 0)
      operator delete(v43[0]);
    goto LABEL_139;
  }
LABEL_152:
  if (v11)
    v41 = 1;
  else
    v41 = v9;
  if ((v41 & 1) != 0)
  {
    if (v11 == 1)
      PVPerfStats::LogString(this, CFSTR("  },"), v42);
  }
  else
  {
    PVPerfStats::LogString(this, CFSTR("PV_END_PERF_STATS_LOG_%@"), *((_QWORD *)this + 78));
  }
}

void sub_1B273C0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  _Unwind_Resume(exception_object);
}

void PVPerfStats::CalculateStats(PVPerfStats *this)
{
  PVPerfStats *v1;
  unsigned int v2;
  __int128 *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  uint64_t v17;
  void *v18;
  double *v19;
  double *v20;
  double v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  double **v29;
  double *v30;
  double **v31;
  double *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  double *v47;
  uint64_t v48;
  double **v49;
  double *v50;
  double **v51;
  unint64_t v52;
  _QWORD *v53;
  double *v54;
  double *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  double *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  void **v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  void **v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  double **v109;
  int v110;
  uint64_t v111;
  double *v112;
  unint64_t v113;
  double *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  double v122;
  double *v123;
  double v124;
  __int128 v125;
  void *v126;
  _QWORD *v127;
  _QWORD *v128;
  __int128 v129;
  double **v130;
  void *v131;
  uint64_t v132;
  double *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  _QWORD *v142;
  _QWORD *v143;
  int v144;
  int v145[2];
  char *v146;
  PVPerfStats *v147;
  PVPerfStats::FrameStats *v148;
  PVPerfStats::FrameStats *v149;
  unsigned int v150;
  _QWORD *v151;
  uint64_t v152;
  unsigned int v153[16];
  void *v154;
  void *v155;
  unsigned int v156[16];
  void *v157;
  void *v158;
  unsigned int v159[16];
  void *v160;
  void *v161;
  __int128 v162;
  __int128 v163;
  _OWORD v164[2];
  __int128 __p;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  double *v181;
  double *v182;
  uint64_t v183;

  if (*((_BYTE *)this + 56))
  {
    v1 = this;
    v176 = 0;
    v179 = 0;
    v180 = 0;
    v182 = 0;
    v183 = 0;
    v181 = 0;
    v169 = 0;
    v172 = 0;
    v173 = 0;
    v175 = 0;
    v174 = 0uLL;
    v2 = (***((uint64_t (****)(_QWORD))this + 80))(*((_QWORD *)this + 80));
    v176 = __PAIR64__(*((_DWORD *)v1 + 2), v2);
    v3 = (__int128 *)MEMORY[0x1E0CA2E68];
    v177 = *MEMORY[0x1E0CA2E68];
    v178 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)&v176);
    v169 = __PAIR64__(*((_DWORD *)v1 + 2), v2);
    v170 = *v3;
    v171 = *((_QWORD *)v3 + 2);
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)&v169);
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)v1 + 240));
    PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)v1 + 328));
    v148 = (PVPerfStats::FrameStats *)((char *)v1 + 328);
    v4 = *((_DWORD *)v1 + 2);
    v5 = 24 * v2;
    v6 = (_QWORD *)operator new[]();
    v7 = v6;
    *v6 = 24;
    v6[1] = v2;
    v152 = v2;
    v8 = v6 + 2;
    if (v2)
      bzero(v6 + 2, 24 * ((v5 - 24) / 0x18uLL) + 24);
    v143 = v7;
    v9 = (_QWORD *)operator new[]();
    v149 = (PVPerfStats::FrameStats *)((char *)v1 + 240);
    v150 = v2;
    v151 = v8;
    v144 = v4;
    *v9 = 24;
    v9[1] = v2;
    v142 = v9;
    v10 = v9 + 2;
    if (v2)
      bzero(v9 + 2, 24 * ((v5 - 24) / 0x18uLL) + 24);
    v11 = (char *)v1 + 392;
    v167 = *v3;
    v168 = *((_QWORD *)v3 + 2);
    v12 = *((_QWORD *)v1 + 4);
    if (v12 != *((_QWORD *)v1 + 5))
    {
      *(_QWORD *)v145 = (char *)v1 + 304;
      v146 = (char *)v1 + 392;
      v147 = v1;
      while (1)
      {
        v13 = v176;
        if ((_DWORD)v176)
        {
          v14 = *(double **)(v12 + 64);
          v15 = v181;
          do
          {
            v16 = *v14++;
            *v15 = v16 + *v15;
            ++v15;
            --v13;
          }
          while (v13);
        }
        PVPerfStats::FrameStats::operator*(v12, v12, (unsigned int *)&v162);
        v17 = v169;
        v18 = (void *)__p;
        if ((_DWORD)v169)
          break;
        if ((_QWORD)__p)
          goto LABEL_16;
LABEL_17:
        if (v12 == *((_QWORD *)v1 + 4))
        {
          v63 = *(_OWORD *)v12;
          v64 = *(_OWORD *)(v12 + 16);
          v65 = *(_OWORD *)(v12 + 32);
          *(_OWORD *)((char *)v149 + 42) = *(_OWORD *)(v12 + 42);
          *((_OWORD *)v149 + 1) = v64;
          *((_OWORD *)v149 + 2) = v65;
          *(_OWORD *)v149 = v63;
          if (v149 != (PVPerfStats::FrameStats *)v12)
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(*(char **)v145, *(char **)(v12 + 64), *(_QWORD *)(v12 + 72), (uint64_t)(*(_QWORD *)(v12 + 72) - *(_QWORD *)(v12 + 64)) >> 3);
          v66 = *(_OWORD *)v12;
          v67 = *(_OWORD *)(v12 + 16);
          v68 = *(_OWORD *)(v12 + 32);
          *(_OWORD *)((char *)v148 + 42) = *(_OWORD *)(v12 + 42);
          *((_OWORD *)v148 + 1) = v67;
          *((_OWORD *)v148 + 2) = v68;
          *(_OWORD *)v148 = v66;
          if (v148 != (PVPerfStats::FrameStats *)v12)
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v11, *(char **)(v12 + 64), *(_QWORD *)(v12 + 72), (uint64_t)(*(_QWORD *)(v12 + 72) - *(_QWORD *)(v12 + 64)) >> 3);
          v167 = *(_OWORD *)(v12 + 8);
          v168 = *(_QWORD *)(v12 + 24);
          if (v150)
          {
            v69 = 0;
            do
            {
              v70 = *(_QWORD *)(v12 + 64);
              if (v69 >= (*(_QWORD *)(v12 + 72) - v70) >> 3)
                v71 = 0x7FF0000000000000;
              else
                v71 = *(_QWORD *)(v70 + 8 * v69);
              v72 = &v151[3 * v69];
              v75 = (uint64_t *)v72[1];
              v74 = (uint64_t **)(v72 + 1);
              v73 = v75;
              v76 = (unint64_t)v74[1];
              if ((unint64_t)v75 >= v76)
              {
                v78 = (void **)&v151[3 * v69];
                v79 = (uint64_t *)*v78;
                v80 = ((char *)v73 - (_BYTE *)*v78) >> 3;
                v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v82 = v76 - (_QWORD)v79;
                if (v82 >> 2 > v81)
                  v81 = v82 >> 2;
                if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
                  v83 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v83 = v81;
                if (v83)
                {
                  v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v74 + 1), v83);
                  v73 = *v74;
                  v79 = (uint64_t *)*v78;
                }
                else
                {
                  v84 = 0;
                }
                v85 = (uint64_t *)&v84[8 * v80];
                *v85 = v71;
                v77 = v85 + 1;
                while (v73 != v79)
                {
                  v86 = *--v73;
                  *--v85 = v86;
                }
                *v78 = v85;
                *v74 = v77;
                v74[1] = (uint64_t *)&v84[8 * v83];
                if (v79)
                  operator delete(v79);
              }
              else
              {
                *v73 = v71;
                v77 = v73 + 1;
              }
              *v74 = v77;
              v87 = *(_QWORD *)(v12 + 64);
              if (v69 >= (*(_QWORD *)(v12 + 72) - v87) >> 3)
                v88 = 0x7FF0000000000000;
              else
                v88 = *(_QWORD *)(v87 + 8 * v69);
              v89 = &v10[3 * v69];
              v92 = (uint64_t *)v89[1];
              v91 = (uint64_t **)(v89 + 1);
              v90 = v92;
              v93 = (unint64_t)v91[1];
              if ((unint64_t)v92 >= v93)
              {
                v95 = (void **)&v10[3 * v69];
                v96 = (uint64_t *)*v95;
                v97 = ((char *)v90 - (_BYTE *)*v95) >> 3;
                v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v99 = v93 - (_QWORD)v96;
                if (v99 >> 2 > v98)
                  v98 = v99 >> 2;
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
                  v100 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v100 = v98;
                if (v100)
                {
                  v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v91 + 1), v100);
                  v90 = *v91;
                  v96 = (uint64_t *)*v95;
                }
                else
                {
                  v101 = 0;
                }
                v102 = (uint64_t *)&v101[8 * v97];
                *v102 = v88;
                v94 = v102 + 1;
                while (v90 != v96)
                {
                  v103 = *--v90;
                  *--v102 = v103;
                }
                *v95 = v102;
                *v91 = v94;
                v91[1] = (uint64_t *)&v101[8 * v100];
                if (v96)
                  operator delete(v96);
              }
              else
              {
                *v90 = v88;
                v94 = v90 + 1;
              }
              *v91 = v94;
              ++v69;
            }
            while (v69 != v152);
          }
        }
        else
        {
          PVPerfStats::FrameStats::min(v149, (const PVPerfStats::FrameStats *)v12, (uint64_t)&v162);
          v22 = v163;
          *(_OWORD *)v149 = v162;
          *((_OWORD *)v149 + 1) = v22;
          *((_OWORD *)v149 + 2) = v164[0];
          *(_OWORD *)((char *)v149 + 42) = *(_OWORD *)((char *)v164 + 10);
          v23 = **(void ***)v145;
          if (**(_QWORD **)v145)
          {
            *((_QWORD *)v1 + 39) = v23;
            operator delete(v23);
            **(_QWORD **)v145 = 0;
            *(_QWORD *)(*(_QWORD *)v145 + 8) = 0;
            *(_QWORD *)(*(_QWORD *)v145 + 16) = 0;
          }
          *((_OWORD *)v1 + 19) = __p;
          *((_QWORD *)v1 + 40) = v166;
          PVPerfStats::FrameStats::max(v148, (const PVPerfStats::FrameStats *)v12, (uint64_t)&v162);
          v24 = v163;
          *(_OWORD *)v148 = v162;
          *((_OWORD *)v148 + 1) = v24;
          *((_OWORD *)v148 + 2) = v164[0];
          *(_OWORD *)((char *)v148 + 42) = *(_OWORD *)((char *)v164 + 10);
          v25 = *(void **)v11;
          if (*(_QWORD *)v11)
          {
            *((_QWORD *)v1 + 50) = v25;
            operator delete(v25);
            *(_QWORD *)v11 = 0;
            *((_QWORD *)v11 + 1) = 0;
            *((_QWORD *)v11 + 2) = 0;
          }
          *(_OWORD *)v11 = __p;
          *((_QWORD *)v1 + 51) = v166;
          if (v150)
          {
            v26 = 0;
            do
            {
              v27 = *(_QWORD *)(v12 + 64);
              if (v26 >= (*(_QWORD *)(v12 + 72) - v27) >> 3)
                v28 = INFINITY;
              else
                v28 = *(double *)(v27 + 8 * v26);
              v29 = (double **)&v151[3 * v26];
              v31 = v29 + 1;
              v30 = v29[1];
              v32 = *v29;
              v33 = (char *)v30 - (char *)*v29;
              if (v33 == 40)
              {
                v34 = *v32;
                if (v28 > *v32)
                  v34 = v28;
                *v32 = v34;
                v35 = v10[3 * v26 + 1];
                v36 = *(double *)(v35 - 8);
                if (v28 < v36)
                  v36 = v28;
                *(double *)(v35 - 8) = v36;
              }
              else
              {
                v37 = &v151[3 * v26];
                v40 = v37[2];
                v39 = v37 + 2;
                v38 = v40;
                if ((unint64_t)v30 >= v40)
                {
                  v42 = v33 >> 3;
                  v43 = (v33 >> 3) + 1;
                  if (v43 >> 61)
                    goto LABEL_170;
                  v44 = v38 - (_QWORD)v32;
                  if (v44 >> 2 > v43)
                    v43 = v44 >> 2;
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                    v45 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v45 = v43;
                  if (v45)
                  {
                    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v39, v45);
                    v30 = *v31;
                    v32 = *v29;
                  }
                  else
                  {
                    v46 = 0;
                  }
                  v47 = (double *)&v46[8 * v42];
                  *v47 = v28;
                  v41 = v47 + 1;
                  while (v30 != v32)
                  {
                    v48 = *((_QWORD *)v30-- - 1);
                    *((_QWORD *)v47-- - 1) = v48;
                  }
                  *v29 = v47;
                  *v31 = v41;
                  *v39 = &v46[8 * v45];
                  if (v32)
                    operator delete(v32);
                }
                else
                {
                  *v30 = v28;
                  v41 = v30 + 1;
                }
                *v31 = v41;
                v49 = (double **)&v10[3 * v26];
                v51 = v49 + 1;
                v50 = v49[1];
                v53 = v49 + 2;
                v52 = (unint64_t)v49[2];
                if ((unint64_t)v50 >= v52)
                {
                  v55 = *v49;
                  v56 = v50 - *v49;
                  v57 = v56 + 1;
                  if ((unint64_t)(v56 + 1) >> 61)
LABEL_170:
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  v58 = v52 - (_QWORD)v55;
                  if (v58 >> 2 > v57)
                    v57 = v58 >> 2;
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                    v59 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v59 = v57;
                  if (v59)
                  {
                    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v53, v59);
                    v50 = *v51;
                    v55 = *v49;
                  }
                  else
                  {
                    v60 = 0;
                  }
                  v61 = (double *)&v60[8 * v56];
                  *v61 = v28;
                  v54 = v61 + 1;
                  while (v50 != v55)
                  {
                    v62 = *((_QWORD *)v50-- - 1);
                    *((_QWORD *)v61-- - 1) = v62;
                  }
                  *v49 = v61;
                  *v51 = v54;
                  *v53 = &v60[8 * v59];
                  if (v55)
                    operator delete(v55);
                }
                else
                {
                  *v50 = v28;
                  v54 = v50 + 1;
                }
                *v51 = v54;
              }
              std::__sort<std::__less<double,double> &,double *>();
              std::__sort<std::__less<double,double> &,double *>();
              ++v26;
            }
            while (v26 != v152);
          }
        }
        v12 += 88;
        v11 = v146;
        v1 = v147;
        if (v12 == *((_QWORD *)v147 + 5))
          goto LABEL_114;
      }
      v19 = (double *)v174;
      v20 = (double *)__p;
      do
      {
        v21 = *v20++;
        *v19 = v21 + *v19;
        ++v19;
        --v17;
      }
      while (v17);
LABEL_16:
      *((_QWORD *)&__p + 1) = v18;
      operator delete(v18);
      goto LABEL_17;
    }
LABEL_114:
    v104 = *((_DWORD *)v1 + 2);
    *((_DWORD *)v1 + 17) = v104;
    *((_DWORD *)v1 + 39) = v104;
    PVPerfStats::FrameStats::operator/((uint64_t)&v176, v104, (unsigned int *)&v162);
    v105 = (void *)*((_QWORD *)v1 + 16);
    v106 = v163;
    *((_OWORD *)v1 + 4) = v162;
    *((_OWORD *)v1 + 5) = v106;
    *((_OWORD *)v1 + 6) = v164[0];
    *(_OWORD *)((char *)v1 + 106) = *(_OWORD *)((char *)v164 + 10);
    if (v105)
    {
      *((_QWORD *)v1 + 17) = v105;
      operator delete(v105);
      *((_QWORD *)v1 + 16) = 0;
      *((_QWORD *)v1 + 17) = 0;
      *((_QWORD *)v1 + 18) = 0;
    }
    *((_OWORD *)v1 + 8) = __p;
    *((_QWORD *)v1 + 18) = v166;
    PVPerfStats::FrameStats::operator*((uint64_t)&v176, (uint64_t)&v176, v153);
    PVPerfStats::FrameStats::operator/((uint64_t)v153, *((_DWORD *)v1 + 2), v156);
    PVPerfStats::FrameStats::operator-((uint64_t)&v169, (uint64_t)v156, v159);
    PVPerfStats::FrameStats::operator/((uint64_t)v159, *((_DWORD *)v1 + 2) - 1, (unsigned int *)&v162);
    v107 = v163;
    *(_OWORD *)((char *)v1 + 152) = v162;
    *(_OWORD *)((char *)v1 + 168) = v107;
    *(_OWORD *)((char *)v1 + 184) = v164[0];
    *(_OWORD *)((char *)v1 + 194) = *(_OWORD *)((char *)v164 + 10);
    v109 = (double **)((char *)v1 + 216);
    v108 = (void *)*((_QWORD *)v1 + 27);
    if (v108)
    {
      *((_QWORD *)v1 + 28) = v108;
      operator delete(v108);
      *v109 = 0;
      *((_QWORD *)v1 + 28) = 0;
      *((_QWORD *)v1 + 29) = 0;
    }
    *(_OWORD *)((char *)v1 + 216) = __p;
    *((_QWORD *)v1 + 29) = v166;
    v166 = 0;
    __p = 0uLL;
    if (v160)
    {
      v161 = v160;
      operator delete(v160);
    }
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    v110 = v144 - 10;
    v111 = *((unsigned int *)v1 + 38);
    if ((_DWORD)v111)
    {
      v112 = *v109;
      do
      {
        *v112 = sqrt(*v112);
        ++v112;
        --v111;
      }
      while (v111);
    }
    if (v110 < 3)
    {
      PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)v1 + 416));
      v128 = v142;
      v127 = v143;
      PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)v1 + 504));
    }
    else
    {
      if (v150)
      {
        v113 = 0;
        v114 = v181;
        v115 = v182 - v181;
        v116 = v174;
        v117 = (uint64_t)(*((_QWORD *)&v174 + 1) - v174) >> 3;
        do
        {
          v118 = 0;
          v119 = 0;
          v120 = v151[3 * v113];
          v121 = &v10[3 * v113];
          do
          {
            if (v115 <= v113)
            {
              v123 = (double *)(*v121 + v118);
            }
            else
            {
              v122 = v114[v113] - *(double *)(v120 + v118);
              v114[v113] = v122;
              v123 = (double *)(*v121 + 8 * v119);
              v114[v113] = v122 - *(double *)(*v121 + v118);
            }
            if (v117 > v113)
            {
              v124 = *(double *)(v116 + 8 * v113) - *(double *)(v120 + v118) * *(double *)(v120 + v118);
              *(double *)(v116 + 8 * v113) = v124;
              *(double *)(v116 + 8 * v113) = v124 - *v123 * *v123;
            }
            ++v119;
            v118 += 8;
          }
          while (v118 != 40);
          ++v113;
        }
        while (v113 != v152);
      }
      PVPerfStats::FrameStats::operator/((uint64_t)&v176, v144 - 10, (unsigned int *)&v162);
      v125 = v163;
      *((_OWORD *)v1 + 26) = v162;
      *((_OWORD *)v1 + 27) = v125;
      *((_OWORD *)v1 + 28) = v164[0];
      *(_OWORD *)((char *)v1 + 458) = *(_OWORD *)((char *)v164 + 10);
      v126 = (void *)*((_QWORD *)v1 + 60);
      v128 = v142;
      v127 = v143;
      if (v126)
      {
        *((_QWORD *)v1 + 61) = v126;
        operator delete(v126);
        *((_QWORD *)v1 + 60) = 0;
        *((_QWORD *)v1 + 61) = 0;
        *((_QWORD *)v1 + 62) = 0;
      }
      *((_OWORD *)v1 + 30) = __p;
      *((_QWORD *)v1 + 62) = v166;
      PVPerfStats::FrameStats::operator*((uint64_t)&v176, (uint64_t)&v176, v153);
      PVPerfStats::FrameStats::operator/((uint64_t)v153, v144 - 10, v156);
      PVPerfStats::FrameStats::operator-((uint64_t)&v169, (uint64_t)v156, v159);
      PVPerfStats::FrameStats::operator/((uint64_t)v159, v144 - 11, (unsigned int *)&v162);
      v129 = v163;
      *(_OWORD *)((char *)v1 + 504) = v162;
      *(_OWORD *)((char *)v1 + 520) = v129;
      *(_OWORD *)((char *)v1 + 536) = v164[0];
      *(_OWORD *)((char *)v1 + 546) = *(_OWORD *)((char *)v164 + 10);
      v130 = (double **)(v11 + 176);
      v131 = (void *)*((_QWORD *)v1 + 71);
      if (v131)
      {
        *((_QWORD *)v1 + 72) = v131;
        operator delete(v131);
        *v130 = 0;
        *((_QWORD *)v11 + 23) = 0;
        *((_QWORD *)v11 + 24) = 0;
      }
      *(_OWORD *)v130 = __p;
      *((_QWORD *)v1 + 73) = v166;
      v166 = 0;
      __p = 0uLL;
      if (v160)
      {
        v161 = v160;
        operator delete(v160);
      }
      if (v157)
      {
        v158 = v157;
        operator delete(v157);
      }
      if (v154)
      {
        v155 = v154;
        operator delete(v154);
      }
      v132 = *((unsigned int *)v1 + 126);
      if ((_DWORD)v132)
      {
        v133 = *v130;
        do
        {
          *v133 = sqrt(*v133);
          ++v133;
          --v132;
        }
        while (v132);
      }
    }
    *((_DWORD *)v1 + 105) = v110;
    *((_DWORD *)v1 + 127) = v110;
    v134 = v167;
    *(_OWORD *)((char *)v1 + 72) = v167;
    v135 = v168;
    *((_QWORD *)v1 + 11) = v168;
    *((_OWORD *)v1 + 10) = v134;
    *((_QWORD *)v1 + 22) = v135;
    *((_QWORD *)v1 + 55) = v135;
    *(_OWORD *)((char *)v1 + 424) = v134;
    *((_OWORD *)v1 + 32) = v134;
    *((_QWORD *)v1 + 66) = v135;
    *((_QWORD *)v1 + 33) = v135;
    *(_OWORD *)((char *)v1 + 248) = v134;
    *((_QWORD *)v1 + 44) = v135;
    *((_OWORD *)v1 + 21) = v134;
    *((_BYTE *)v1 + 56) = 0;
    v136 = v127[1];
    if (v136)
    {
      v137 = 3 * v136;
      do
      {
        v138 = (void *)v127[v137 - 1];
        if (v138)
        {
          v127[v137] = v138;
          operator delete(v138);
        }
        v137 -= 3;
      }
      while (v137 * 8);
    }
    MEMORY[0x1B5E2914C](v127, 0x80C80D6874129);
    v139 = v128[1];
    if (v139)
    {
      v140 = 3 * v139;
      do
      {
        v141 = (void *)v128[v140 - 1];
        if (v141)
        {
          v128[v140] = v141;
          operator delete(v141);
        }
        v140 -= 3;
      }
      while (v140 * 8);
    }
    MEMORY[0x1B5E2914C](v128, 0x80C80D6874129);
    if ((_QWORD)v174)
    {
      *((_QWORD *)&v174 + 1) = v174;
      operator delete((void *)v174);
    }
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
  }
}

void sub_1B273CDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p)
{
  uint64_t v51;
  void *v53;
  void *v54;

  if (__p)
    operator delete(__p);
  if (a40)
    operator delete(a40);
  if (a29)
    operator delete(a29);
  v53 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v53;
    operator delete(v53);
  }
  v54 = *(void **)(v51 - 136);
  if (v54)
  {
    *(_QWORD *)(v51 - 128) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

void PVPerfStats::Reset(PVPerfStats *this)
{
  BOOL v2;

  if (*((_BYTE *)this + 616))
    v2 = PVPerfStats::_logLevel < 1;
  else
    v2 = 1;
  if (!v2)
    PVPerfStats::LogPlaybackRate(this);
  *((_BYTE *)this + 616) = 0;
  *((_QWORD *)this + 75) = -1;
  *((_QWORD *)this + 76) = -1;
  if (PVPerfStats::_logOutput == 1)
  {
    WriteBufferToFile(*((NSString **)this + 79), (NSString *)PVPerfStats::_logFilePath);
    objc_msgSend(*((id *)this + 79), "setString:", &stru_1E65EDDA0);
  }
  *((_DWORD *)this + 2) = 0;
  std::vector<PVPerfStats::FrameStats>::__clear[abi:ne180100]((uint64_t *)this + 4);
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)this + 64));
  PVPerfStats::FrameStats::Clear((PVPerfStats::FrameStats *)((char *)this + 152));
  *(double *)this = GetHostTime();
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 74) = 0;
}

void PVPerfStats::AddFrameStats(PVPerfStats *this, const PVPerfStats::FrameStats *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  NSNumber *v27;
  NSString *v28;
  void *v29;
  double v30;
  NSNumber *v31;
  NSString *v32;
  void *v33;
  double v34;
  NSNumber *v35;
  void *v36;
  double v37;
  NSNumber *v38;
  void *v39;
  double v40;
  NSNumber *v41;
  void *v42;
  double v43;
  NSNumber *v44;
  void *v45;
  double v46;
  NSNumber *v47;
  void *v48;
  double v49;
  NSNumber *v50;
  void *v51;
  NSNumber *v52;
  NSString *v53;
  double v54;
  NSNumber *v55;
  NSString *v56;

  if (!PVPerfStats::_logLevel)
    return;
  v4 = (char *)this + 32;
  v6 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)this + 6);
  v7 = (uint64_t *)((char *)this + 32);
  if (v6 >= v5)
  {
    v8 = std::vector<PVPerfStats::FrameStats>::__push_back_slow_path<PVPerfStats::FrameStats const&>(v7, (__int128 *)a2);
  }
  else
  {
    std::vector<PVPerfStats::FrameStats>::__construct_one_at_end[abi:ne180100]<PVPerfStats::FrameStats const&>((uint64_t)v7, (__int128 *)a2);
    v8 = v6 + 88;
  }
  *((_QWORD *)this + 5) = v8;
  if (*(_BYTE *)(v8 - 32))
  {
    v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - *((_QWORD *)this + 4)) >> 3) - 1;
    if (*((_BYTE *)this + 616))
      goto LABEL_12;
    *((_BYTE *)this + 616) = 1;
  }
  else
  {
    if (*((_BYTE *)this + 616))
      PVPerfStats::LogPlaybackRate(this);
    *((_BYTE *)this + 616) = 0;
    v9 = -1;
  }
  *((_QWORD *)this + 75) = v9;
LABEL_12:
  *((_QWORD *)this + 76) = v9;
  v10 = *((_DWORD *)this + 2);
  v11 = v10 + 1;
  *((_DWORD *)this + 2) = v10 + 1;
  *((_BYTE *)this + 56) = 1;
  HIDWORD(v12) = -286331153 * (v10 + 1);
  LODWORD(v12) = HIDWORD(v12);
  if ((v12 >> 1) > 0x8888888)
  {
LABEL_13:
    v13 = PVPerfStats::_logLevel;
LABEL_14:
    if (v13 == 4)
    {
      v14 = *((_DWORD *)this + 2);
      if (v14 >= 1 && !(v14 % 0x64u))
        PVPerfStats::Print(this, v14 - 100, 0);
    }
    return;
  }
  if (v10 - 29 >= 0)
    v15 = 30;
  else
    v15 = v11;
  v16 = *(_QWORD *)v4;
  v17 = *(_QWORD *)v4 + 88 * (v11 - v15);
  v18 = *((double *)a2 + 5);
  v19 = v18 - *(double *)(v17 + 32);
  if ((_DWORD)v15)
  {
    v20 = v10 - ((v10 - 29) & ((v10 - 29) >> 31)) - 29;
    v21 = v15;
    do
    {
      if (*(_BYTE *)(v16 + 88 * v20 + 57))
        v19 = v19 - *(double *)(v16 + 88 * v20 + 48);
      ++v20;
      --v21;
    }
    while (v21);
  }
  v22 = *(unsigned int *)(v17 + 4);
  v23 = *((unsigned int *)a2 + 1);
  v24 = (double)v15 / v19;
  *((double *)this + 74) = v24;
  v13 = PVPerfStats::_logLevel;
  if (PVPerfStats::_logLevel > 0)
  {
    v25 = v18 - *(double *)(v16 + 32);
    v26 = (double)v11 / v25;
    if (PVPerfStats::_logFormat == 2)
    {
      *(float *)&v25 = v24;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v25);
      v52 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Windowed FPS for frameNum range (%d, %d)"), v22, v23);
      v53 = (NSString *)objc_claimAutoreleasedReturnValue();
      StringFormatPMR(CFSTR("Windowed FPS"), v52, v53);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      *(float *)&v54 = v26;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v54);
      v55 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Average FPS for time range (%f, %f)"), *(_QWORD *)(*(_QWORD *)v4 + 32), *((_QWORD *)a2 + 5));
      v56 = (NSString *)objc_claimAutoreleasedReturnValue();
      StringFormatPMR(CFSTR("Average FPS"), v55, v56);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      PVPerfStats::LogString(this, CFSTR("%@"), v29);
      PVPerfStats::LogString(this, CFSTR("%@"), v33);
    }
    else
    {
      if (PVPerfStats::_logFormat == 1)
      {
        PVPerfStats::LogString(this, CFSTR("  {"));
        v34 = *((double *)this + 74);
        *(float *)&v34 = v34;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v34);
        v35 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("windowedFPS"), v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v36);

        *(float *)&v37 = (float)v22;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v37);
        v38 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("windowedStartFrame"), v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v39);

        *(float *)&v40 = (float)v23;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v40);
        v41 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("windowedEndFrame"), v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v42);

        *(float *)&v43 = v26;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v43);
        v44 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("averageFPS"), v44);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v45);

        v46 = *(double *)(*(_QWORD *)v4 + 32);
        *(float *)&v46 = v46;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v46);
        v47 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("averageStartFrame"), v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@,"), v48);

        v49 = *((double *)a2 + 5);
        *(float *)&v49 = v49;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v49);
        v50 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        StringFormatJSON(CFSTR("averageEndFrame"), v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        PVPerfStats::LogString(this, CFSTR("    %@ "), v51);

        PVPerfStats::LogString(this, CFSTR("  },"));
        goto LABEL_13;
      }
      if (PVPerfStats::_logFormat)
        goto LABEL_14;
      *(float *)&v25 = v24;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v25);
      v27 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("windowed start/end frame nums: %d, %d [%@]"), v22, v23, *((_QWORD *)this + 78));
      v28 = (NSString *)objc_claimAutoreleasedReturnValue();
      StringFormatTEXT(CFSTR("Windowed fps"), v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      *(float *)&v30 = v26;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v30);
      v31 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("average start/end time range: %f, %f [%@]"), *(_QWORD *)(*((_QWORD *)this + 4) + 32), *((_QWORD *)a2 + 5), *((_QWORD *)this + 78));
      v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      StringFormatTEXT(CFSTR("Average fps"), v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      PVPerfStats::LogString(this, CFSTR("%@"), v29);
      PVPerfStats::LogString(this, CFSTR("%@"), v33);
    }

    goto LABEL_13;
  }
}

void sub_1B273D570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double PVPerfStats::NumFrames(PVPerfStats *this)
{
  return (double)*((int *)this + 2);
}

double PVPerfStats::WindowedFPS(PVPerfStats *this)
{
  return *((double *)this + 74);
}

uint64_t PVPerfStats::AverageFrameStats(PVPerfStats *this)
{
  PVPerfStats::CalculateStats(this);
  return (uint64_t)this + 64;
}

uint64_t PVPerfStats::LastFrameStats(PVPerfStats *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 4) == v1)
    return (uint64_t)this + 64;
  else
    return v1 - 88;
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B273D6D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<double>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64D3008, MEMORY[0x1E0DE42D0]);
}

void sub_1B273D7C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::vector<PVPerfStats::FrameStats>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<PVPerfStats::FrameStats>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<PVPerfStats::FrameStats>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 88)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<PVPerfStats::FrameStats>::__construct_one_at_end[abi:ne180100]<PVPerfStats::FrameStats const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)(v3 + 42) = *(__int128 *)((char *)a2 + 42);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(v3 + 64), *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 88;
  return result;
}

void sub_1B273DAD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<PVPerfStats::FrameStats>::__push_back_slow_path<PVPerfStats::FrameStats const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[88 * v9];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  *(_OWORD *)(v11 + 42) = *(__int128 *)((char *)a2 + 42);
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = v14;
  *(_OWORD *)v11 = v12;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 8) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v11 + 8, *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3);
  v18 += 88;
  std::vector<PVPerfStats::FrameStats>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<PVPerfStats::FrameStats>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B273DC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PVPerfStats::FrameStats>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PVPerfStats::FrameStats>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>,std::reverse_iterator<PVPerfStats::FrameStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 88);
      v9 = *(_OWORD *)(a3 - 72);
      v10 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 46) = *(_OWORD *)(a3 - 46);
      *(_OWORD *)(v7 - 56) = v10;
      *(_OWORD *)(v7 - 72) = v9;
      *(_OWORD *)(v7 - 88) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 88;
      *((_QWORD *)&v16 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<PVPerfStats::FrameStats>,std::reverse_iterator<PVPerfStats::FrameStats*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 64);
    if (v3)
    {
      *(_QWORD *)(v1 + 72) = v3;
      operator delete(v3);
    }
    v1 += 88;
  }
}

uint64_t std::__split_buffer<PVPerfStats::FrameStats>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<PVPerfStats::FrameStats>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<PVPerfStats::FrameStats>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 88;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
}

void sub_1B273DF34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B273E1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B273F604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B273F688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PVOrientationEffect;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B273F818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B273FA50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B273FBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B27400DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

HGNode *PVInputHGNodeMap<unsigned int>::GetNode@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, HGNode **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  _BOOL4 v11;
  HGSolidColor *v12;
  HGSolidColor *v13;
  HGNode *result;

  v6 = *(_QWORD *)(a1 + 8);
  v4 = a1 + 8;
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v4;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    result = *(HGNode **)(v7 + 40);
    *a3 = result;
    if (result)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
  }
  else
  {
LABEL_12:
    v11 = +[PVEnvironment PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE](PVEnvironment, "PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE");
    v12 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    v13 = v12;
    if (v11)
    {
      HGSolidColor::HGSolidColor(v12);
      result = (HGNode *)(*(uint64_t (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v13 + 96))(v13, 0, 1.0, 1.0, 0.0, 1.0);
    }
    else
    {
      result = HGNode::HGNode((HGNode *)v12);
    }
    *a3 = (HGNode *)v13;
  }
  return result;
}

void sub_1B27402F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<unsigned int>::MapKeys(_QWORD *a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        v7 = *a2;
        v8 = (v5 - *a2) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v10 = *v6 - (_QWORD)v7;
        if (v10 >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v6, v11);
          v7 = *a2;
          v5 = a2[1];
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = *((_DWORD *)v3 + 8);
        v14 = v13 + 4;
        while (v5 != v7)
        {
          v15 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v15;
          v13 -= 4;
        }
        *a2 = v13;
        a2[1] = v14;
        a2[2] = &v12[4 * v11];
        if (v7)
          operator delete(v7);
        v5 = v14;
      }
      else
      {
        *(_DWORD *)v5 = *((_DWORD *)v3 + 8);
        v5 += 4;
      }
      a2[1] = v5;
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v18 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v18);
      }
      v3 = v17;
    }
    while (v17 != v2);
  }
}

void sub_1B2740470(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2740570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void sub_1B2740814(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B27408F8(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  void *v3;
  void *v4;

  v4 = v3;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2740E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_1B27413D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B27417B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  uint64_t v30;

  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 24))(a29);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 24))(a20);
  if (*v29)
    (*(void (**)(_QWORD))(*(_QWORD *)*v29 + 24))(*v29);

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v30 - 104));
  _Unwind_Resume(a1);
}

HGNode *PVInputHGNodeMap<PVIGHGNodeCacheKey>::GetNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, HGNode **a3@<X8>)
{
  _QWORD *v5;
  HGNode *result;
  _BOOL4 v7;
  HGSolidColor *v8;
  HGSolidColor *v9;

  v5 = std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::find<PVIGHGNodeCacheKey>(a1, a2);
  if ((_QWORD *)(a1 + 8) == v5)
  {
    v7 = +[PVEnvironment PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE](PVEnvironment, "PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE");
    v8 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    v9 = v8;
    if (v7)
    {
      HGSolidColor::HGSolidColor(v8);
      result = (HGNode *)(*(uint64_t (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, 1.0, 1.0, 0.0, 1.0);
    }
    else
    {
      result = HGNode::HGNode((HGNode *)v8);
    }
    *a3 = (HGNode *)v9;
  }
  else
  {
    result = (HGNode *)v5[9];
    *a3 = result;
    if (result)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B27419A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t PVInputHGNodeMap<PVIGHGNodeCacheKey>::SetNode(uint64_t **a1, const PVIGHGNodeCacheKey *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  const PVIGHGNodeCacheKey *v7;

  v7 = a2;
  v4 = std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__emplace_unique_key_args<PVIGHGNodeCacheKey,std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>(a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v7);
  v5 = v4[9];
  result = *a3;
  if (v5 != *a3)
  {
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      result = *a3;
    }
    v4[9] = result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B2741AB0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2741B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2741BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2741CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B2741EDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2742078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::find<PVIGHGNodeCacheKey>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = PVIGHGNodeCacheKey::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || PVIGHGNodeCacheKey::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__emplace_unique_key_args<PVIGHGNodeCacheKey,std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, const PVIGHGNodeCacheKey **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__find_equal<PVIGHGNodeCacheKey>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__find_equal<PVIGHGNodeCacheKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!PVIGHGNodeCacheKey::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!PVIGHGNodeCacheKey::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PVIGHGNodeCacheKey const&>,std::tuple<>>(uint64_t a1@<X0>, const PVIGHGNodeCacheKey **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  PVIGHGNodeCacheKey::PVIGHGNodeCacheKey((PVIGHGNodeCacheKey *)(v6 + 32), *a2);
  *((_QWORD *)v6 + 9) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B27423E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGNode>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGNode>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

}

void sub_1B27426D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27428A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B27429FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2742AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2742D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B2742E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B2742F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2742F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2743014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2743120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B274327C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B27434C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B27436E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27439CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  HGObject::operator delete(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

void sub_1B2743C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  uint64_t v16;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);

  _Unwind_Resume(a1);
}

void sub_1B2744FE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::GetNode(uint64_t a1@<X0>, void *a2@<X1>, HGSolidColor **a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  HGSolidColor *v12;
  HGSolidColor *v13;
  id v14;

  v14 = a2;
  v7 = *(_QWORD **)(a1 + 8);
  v6 = (_QWORD *)(a1 + 8);
  v5 = v7;
  if (!v7)
    goto LABEL_21;
  v8 = v6;
  do
  {
    v9 = v5[4];
    v10 = v9 >= (unint64_t)v14;
    if (v9 >= (unint64_t)v14)
      v11 = v5;
    else
      v11 = v5 + 1;
    if (v10)
      v8 = v5;
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != v6 && v8[4] <= (unint64_t)v14)
  {
    v13 = (HGSolidColor *)v8[5];
    *a3 = v13;
    if (v13)
      (*(void (**)(HGSolidColor *))(*(_QWORD *)v13 + 16))(v13);
  }
  else
  {
LABEL_21:
    if (+[PVEnvironment PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE](PVEnvironment, "PV_DEBUG_COLOR_NO_SOURCE_TRACK_NODE"))
    {
      v12 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
      HGSolidColor::HGSolidColor(v12);
      (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v12 + 96))(v12, 0, 1.0, 1.0, 0.0, 1.0);
    }
    else
    {
      v12 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode((HGNode *)v12);
    }
    *a3 = v12;
  }

}

void sub_1B27457BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  HGObject::operator delete(v10);

  _Unwind_Resume(a1);
}

void HGInternalCompNode::SetContexts(HGInternalCompNode *this, objc_object *a2, PVCompositeDelegateContext *a3)
{
  objc_object *v5;
  PVCompositeDelegateContext *v6;
  void *v7;
  void *v8;
  objc_object *v9;

  v5 = a2;
  v6 = a3;
  v7 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = v5;
  v9 = v5;

  v8 = (void *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v6;

}

uint64_t HGInternalCompNode::SetGraphInput(HGInternalCompNode *this, unsigned int a2, HGNode *a3, HGRect a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int *v13;

  v4 = *(uint64_t **)&a4.var2;
  v5 = *(uint64_t **)&a4.var0;
  v8 = *((unsigned int *)this + 118);
  *((_DWORD *)this + 118) = v8 + 1;
  v12 = a2;
  v13 = &v12;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 63, &v12, (uint64_t)&std::piecewise_construct, &v13)+ 8) = v8;
  v12 = v8;
  v13 = &v12;
  v9 = std::__tree<std::__value_type<unsigned int,HGRect>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRect>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRect>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 69, &v12, (uint64_t)&std::piecewise_construct, &v13);
  v9[4] = v5;
  v9[5] = v4;
  v10 = HGNode::SetInput((HGNode *)this, v8, a3);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, v8, 4096);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, v8, 2);
  return v10;
}

void HGInternalCompNode::SetImageInput(uint64_t **this, unsigned int a2, PVImageBuffer *a3)
{
  PVImageBuffer *v5;
  uint64_t **v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int *v9;

  v5 = a3;
  v8 = a2;
  v9 = &v8;
  v6 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(this + 60, &v8, (uint64_t)&std::piecewise_construct, &v9);
  v7 = v6[5];
  v6[5] = (uint64_t *)v5;

}

void sub_1B27459C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2745AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2745C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2745E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B2746034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27460F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1B2746500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B2746884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2746B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{

  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B2746D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1B5E290BC](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E290BC](a1 + 128);
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,HGRect>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRect>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRect>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[7] = **a4;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,__CVBuffer *>,std::__tree_node<std::__value_type<int,__CVBuffer *>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_multi<std::pair<int const,__CVBuffer *> const&>(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B27475D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_multi<std::pair<int const,__CVBuffer *> const&>(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x30uLL);
  v5 = v4;
  v4[2] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void HGInternalCompNode::HGInternalCompNode(HGInternalCompNode *this)
{
  uint64_t v2;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E64D4290;
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  *(_QWORD *)(v2 + 408) = v2 + 416;
  *(_OWORD *)(v2 + 432) = HGRectNull;
  *(_DWORD *)(v2 + 472) = 0;
  *(_QWORD *)(v2 + 480) = v2 + 488;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 520) = 0;
  *(_QWORD *)(v2 + 504) = v2 + 512;
  *(_QWORD *)(v2 + 512) = 0;
  *(_QWORD *)(v2 + 496) = 0;
  *(_QWORD *)(v2 + 544) = 0;
  *(_QWORD *)(v2 + 536) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 536;
  *(_QWORD *)(v2 + 568) = 0;
  *(_QWORD *)(v2 + 560) = 0;
  *(_QWORD *)(v2 + 552) = v2 + 560;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  HGNode::SetFlags((HGNode *)v2, 0xFFFFFFFFLL, 4096);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 2);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(HGInternalCompNode *, uint64_t, uint64_t))(*(_QWORD *)this + 144))(this, 0xFFFFFFFFLL, 512);
}

void sub_1B27478A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v6, *(_QWORD **)(v1 + 560));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v5, *(_QWORD **)(v1 + 536));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v4, *(_QWORD **)(v1 + 512));
  std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(v3, *(_QWORD **)(v1 + 488));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, *(_QWORD **)(v1 + 416));
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGInternalCompNode::~HGInternalCompNode(id *this)
{
  void *v1;

  HGInternalCompNode::~HGInternalCompNode(this);
  HGObject::operator delete(v1);
}

{
  *this = off_1E64D4290;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 69), this[70]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 66), this[67]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 63), this[64]);
  std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy((uint64_t)(this + 60), this[61]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(this + 51), this[52]);
  HGNode::~HGNode((HGNode *)this);
}

uint64_t HGInternalCompNode::GetDOD(uint64_t a1)
{
  return *(_QWORD *)(a1 + 432);
}

uint64_t HGInternalCompNode::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 560);
  if (v4)
  {
    v5 = a1 + 560;
    do
    {
      v6 = *(_DWORD *)(v4 + 28);
      v7 = v6 >= a3;
      if (v6 >= a3)
        v8 = (uint64_t *)v4;
      else
        v8 = (uint64_t *)(v4 + 8);
      if (v7)
        v5 = v4;
      v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 560 && *(_DWORD *)(v5 + 28) <= a3)
      return *(_QWORD *)(v5 + 32);
  }
  return a4;
}

HGBuffer *HGInternalCompNode::RenderPageMetal(HGInternalCompNode *this, HGPage *a2)
{
  id v4;
  HGInternalCompNode *v5;
  uint64_t v6;
  id v7;
  __CVBuffer *v8;
  PVColorSpace *v9;
  void *v10;
  HGInternalCompNode *v11;
  HGInternalCompNode *v12;
  HGInternalCompNode *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  HGInternalCompNode *v17;
  HGInternalCompNode *v18;
  HGInternalCompNode *v19;
  uint64_t v20;
  _DWORD *v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  void (*v25)(_DWORD *);
  __CVBuffer *v26;
  PVColorSpace *v27;
  void *v28;
  HGInternalCompNode *v29;
  HGInternalCompNode *v30;
  void *v31;
  __int128 *v32;
  void *v33;
  void *v34;
  HGCV *PixelFormatType;
  char *v36;
  int v37;
  HGBitmap *v38;
  HGBuffer *v39;
  HGBuffer *v40;
  void *context;
  HGGPURenderer *v43;
  HGPage *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  int v51;
  HGPage *v52;
  HGBitmap *v53;

  context = (void *)MEMORY[0x1B5E29C50]();
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v52, (HGNode *)this, a2);
  v43 = *(HGGPURenderer **)a2;
  v44 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = (HGInternalCompNode *)*((_QWORD *)this + 60);
  if (v5 != (HGInternalCompNode *)((char *)this + 488))
  {
    do
    {
      v6 = *((unsigned int *)v5 + 8);
      v7 = *((id *)v5 + 5);
      if (objc_msgSend(v7, "cvPixelBuffer"))
      {
        v8 = (__CVBuffer *)objc_msgSend(v7, "cvPixelBuffer");
        objc_msgSend(*((id *)this + 73), "renderingColorSpace");
        v9 = (PVColorSpace *)objc_claimAutoreleasedReturnValue();
        PVAddColorSpaceAttributesToCVPixelBuffer(v8, v9);

      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v6);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKey:", v7, v10);

      v11 = (HGInternalCompNode *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(HGInternalCompNode **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (HGInternalCompNode *)*((_QWORD *)v5 + 2);
          v22 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v22);
      }
      v5 = v12;
    }
    while (v12 != (HGInternalCompNode *)((char *)this + 488));
  }
  v13 = (HGInternalCompNode *)*((_QWORD *)this + 66);
  if (v13 != (HGInternalCompNode *)((char *)this + 536))
  {
    do
    {
      v14 = *((unsigned int *)v13 + 8);
      v51 = *((_DWORD *)v13 + 7);
      v53 = (HGBitmap *)&v51;
      +[PVImageBuffer imageWithCVPixelBuffer:](PVImageBuffer, "imageWithCVPixelBuffer:", std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 51, &v51, (uint64_t)&std::piecewise_construct, (_DWORD **)&v53)[5]);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKey:", v15, v16);

      v17 = (HGInternalCompNode *)*((_QWORD *)v13 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(HGInternalCompNode **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (HGInternalCompNode *)*((_QWORD *)v13 + 2);
          v22 = *(_QWORD *)v18 == (_QWORD)v13;
          v13 = v18;
        }
        while (!v22);
      }
      v13 = v18;
    }
    while (v18 != (HGInternalCompNode *)((char *)this + 536));
  }
  v19 = (HGInternalCompNode *)*((_QWORD *)this + 63);
  if (v19 != (HGInternalCompNode *)((char *)this + 512))
  {
    while (1)
    {
      v20 = *((unsigned int *)v19 + 7);
      v21 = (_DWORD *)*((_QWORD *)v44 + *((unsigned int *)v19 + 8) + 21);
      if (v21)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
      v22 = (v21[3] & 0x30) != 0 && (v21[3] & 1) == 0;
      if (v22)
        break;
      v49 = v21;
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
      +[PVImageBuffer imageWithHGBitmap:](PVImageBuffer, "imageWithHGBitmap:", &v49);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (v49)
        (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 24))(v49);
LABEL_34:
      if (objc_msgSend(v23, "cvPixelBuffer"))
      {
        v26 = (__CVBuffer *)objc_msgSend(v23, "cvPixelBuffer");
        objc_msgSend(*((id *)this + 73), "renderingColorSpace");
        v27 = (PVColorSpace *)objc_claimAutoreleasedReturnValue();
        PVAddColorSpaceAttributesToCVPixelBuffer(v26, v27);

      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v20);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKey:", v23, v28);

      if (v21)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 24))(v21);
      v29 = (HGInternalCompNode *)*((_QWORD *)v19 + 1);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = *(HGInternalCompNode **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (HGInternalCompNode *)*((_QWORD *)v19 + 2);
          v22 = *(_QWORD *)v30 == (_QWORD)v19;
          v19 = v30;
        }
        while (!v22);
      }
      v19 = v30;
      if (v30 == (HGInternalCompNode *)((char *)this + 512))
        goto LABEL_44;
    }
    v24 = (*(uint64_t (**)(HGGPURenderer *, _DWORD *, _QWORD))(*(_QWORD *)v43 + 96))(v43, v21, v21[4]);
    v25 = *(void (**)(_DWORD *))(*(_QWORD *)v21 + 24);
    if (v21 == (_DWORD *)v24)
    {
      v25(v21);
      v50 = v21;
    }
    else
    {
      v25(v21);
      v50 = (_DWORD *)v24;
      if (!v24)
      {
        v21 = 0;
LABEL_32:
        +[PVImageBuffer imageWithHGBitmap:](PVImageBuffer, "imageWithHGBitmap:", &v50);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v50)
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 24))(v50);
        goto LABEL_34;
      }
      v21 = (_DWORD *)v24;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    goto LABEL_32;
  }
LABEL_44:
  v31 = (void *)*((_QWORD *)this + 72);
  v32 = (__int128 *)((char *)this + 448);
  if (*((_QWORD *)this + 74))
  {
    v47 = *v32;
    v48 = *((_QWORD *)this + 58);
    objc_msgSend(v31, "renderWithInputs:time:metadata:", v4, &v47);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v45 = *v32;
    v46 = *((_QWORD *)this + 58);
    objc_msgSend(v31, "renderWithInputs:time:userContext:compositeContext:", v4, &v45, *((_QWORD *)this + 75), *((_QWORD *)this + 73));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v34 = v33;
  if (!v33)
    goto LABEL_55;
  if (!objc_msgSend(v33, "canCreateHGBitmap"))
  {
    if (objc_msgSend(v34, "canCreateCVPixelBuffer"))
    {
      PixelFormatType = (HGCV *)CVPixelBufferGetPixelFormatType((CVPixelBufferRef)objc_msgSend(v34, "cvPixelBuffer"));
      v37 = HGCV::HGFormatForCVPixelFormat(PixelFormatType, 0, v36);
      HGCVBitmap::create((HGCVPixelBuffer *)objc_msgSend(v34, "cvPixelBuffer"), v37, 0, &v53);
      goto LABEL_52;
    }
LABEL_55:
    v40 = 0;
    goto LABEL_58;
  }
  objc_msgSend(v34, "hgBitmap");
LABEL_52:
  v38 = v53;
  v39 = (HGBuffer *)*((_QWORD *)v44 + 1);
  if (v39)
  {
    HGGPURenderer::CopyBitmapIntoBuffer((uint64_t)v43, v39, *((HGRect *)v44 + 1), v53);
    v40 = (HGBuffer *)*((_QWORD *)v44 + 1);
    if (!v38)
      goto LABEL_58;
    goto LABEL_57;
  }
  v40 = (HGBuffer *)HGObject::operator new(0x80uLL);
  HGBuffer::HGBuffer(v40, *((HGRect *)v44 + 1), v38);
  *((_QWORD *)v44 + 1) = v40;
  if (v38)
LABEL_57:
    (*(void (**)(HGBitmap *))(*(_QWORD *)v38 + 24))(v38);
LABEL_58:

  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v52);
  objc_autoreleasePoolPop(context);
  return v40;
}

void sub_1B2747EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  HGObject::operator delete(v23);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);

  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)(v26 - 104));
  _Unwind_Resume(a1);
}

uint64_t HGNode::GetRenderPageStrategy(HGNode *this)
{
  return 0;
}

void std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

float64x2_t PCMatrix44Tmpl<double>::leftScale(float64x2_t *a1, double a2, double a3, double a4)
{
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;
  float64x2_t v7;

  if (a2 != 1.0)
  {
    v4 = vmulq_n_f64(*a1, a2);
    result = vmulq_n_f64(a1[1], a2);
    *a1 = v4;
    a1[1] = result;
  }
  if (a3 != 1.0)
  {
    result = vmulq_n_f64(a1[2], a3);
    v6 = vmulq_n_f64(a1[3], a3);
    a1[2] = result;
    a1[3] = v6;
  }
  result.f64[0] = 1.0;
  if (a4 != 1.0)
  {
    result = vmulq_n_f64(a1[4], a4);
    v7 = vmulq_n_f64(a1[5], a4);
    a1[4] = result;
    a1[5] = v7;
  }
  return result;
}

float64x2_t PCMatrix44Tmpl<double>::leftTranslate(float64x2_t *a1, float64x2_t result, double a3, double a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  if (result.f64[0] != 0.0)
  {
    v4 = vaddq_f64(*a1, vmulq_n_f64(a1[6], result.f64[0]));
    result = vaddq_f64(a1[1], vmulq_n_f64(a1[7], result.f64[0]));
    *a1 = v4;
    a1[1] = result;
  }
  if (a3 != 0.0)
  {
    result = vaddq_f64(a1[2], vmulq_n_f64(a1[6], a3));
    v5 = vaddq_f64(a1[3], vmulq_n_f64(a1[7], a3));
    a1[2] = result;
    a1[3] = v5;
  }
  if (a4 != 0.0)
  {
    result = vaddq_f64(a1[4], vmulq_n_f64(a1[6], a4));
    v6 = vaddq_f64(a1[5], vmulq_n_f64(a1[7], a4));
    a1[4] = result;
    a1[5] = v6;
  }
  return result;
}

void sub_1B2748608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27486B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27487BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B2748868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2748964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2748A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B2748B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B2748C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B2748D6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2748E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27492F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(v6 - 120);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);

  _Unwind_Resume(a1);
}

uint64_t PVInputHGNodeMap<unsigned int>::SetNode(uint64_t **a1, unsigned int a2, uint64_t *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int *v8;

  v7 = a2;
  v8 = &v7;
  v4 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1, &v7, (uint64_t)&std::piecewise_construct, &v8);
  v5 = v4[5];
  result = *a3;
  if (v5 != (uint64_t *)*a3)
  {
    if (v5)
    {
      (*(void (**)(uint64_t *))(*v5 + 24))(v5);
      result = *a3;
    }
    v4[5] = (uint64_t *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t **PVInputHGNodeMap<unsigned int>::SetPixelTransform(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t **result;
  uint64_t **v5;
  uint64_t i;
  uint64_t j;
  unsigned int v8;
  unsigned int *v9;

  v8 = a2;
  v9 = &v8;
  result = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 48), &v8, (uint64_t)&std::piecewise_construct, &v9);
  v5 = result + 5;
  if (result + 5 != a3)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v5[j] = a3[j];
      v5 += 4;
      a3 += 4;
    }
  }
  return result;
}

void PVInputHGNodeMap<unsigned int>::SetTimedMetadata(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int *v8;

  v7 = a2;
  v4 = a3;
  v8 = &v7;
  v5 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)(a1 + 120), &v7, (uint64_t)&std::piecewise_construct, &v8);
  v6 = v5[5];
  v5[5] = v4;

}

void sub_1B27495A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2749E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v51;

  v51 = *(_QWORD *)(v49 - 184);
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
  std::__list_imp<unsigned int>::clear(&a49);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v49 - 136));
  _Unwind_Resume(a1);
}

void sub_1B274A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B274A394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B274A680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B274A93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B274ABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);

  PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap((_QWORD **)(v19 - 232));
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<unsigned int>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 20) = 0x3FF0000000000000;
    *((_QWORD *)v11 + 15) = 0x3FF0000000000000;
    *((_QWORD *)v11 + 10) = 0x3FF0000000000000;
    *((_QWORD *)v11 + 5) = 0x3FF0000000000000;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::list<unsigned int>::__sort<std::__less<void,void>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v5 = *(uint64_t **)a2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 16) < *(_DWORD *)(result + 16))
      {
        v6 = *v5;
        *(_QWORD *)(v6 + 8) = v5[1];
        *(_QWORD *)v5[1] = v6;
        v7 = *(_QWORD *)result;
        *(_QWORD *)(v7 + 8) = v5;
        *v5 = v7;
        *(_QWORD *)result = v5;
        v5[1] = result;
        return (uint64_t)v5;
      }
    }
    else
    {
      v10 = a3 >> 1;
      v11 = (a3 >> 1) + 1;
      v12 = result;
      do
      {
        v12 = *(_QWORD *)(v12 + 8);
        --v11;
      }
      while (v11 > 1);
      v13 = std::list<unsigned int>::__sort<std::__less<void,void>>(result, v12, a3 >> 1, a4);
      result = std::list<unsigned int>::__sort<std::__less<void,void>>(v12, a2, a3 - v10, a4);
      v14 = *(_DWORD *)(v13 + 16);
      if (*(_DWORD *)(result + 16) >= v14)
      {
        v16 = *(uint64_t **)(v13 + 8);
        i = result;
        result = v13;
      }
      else
      {
        for (i = *(_QWORD *)(result + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          if (*(_DWORD *)(i + 16) >= v14)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v17 = *(_QWORD *)i;
        v18 = *(_QWORD *)result;
        *(_QWORD *)(v18 + 8) = *(_QWORD *)(*(_QWORD *)i + 8);
        **(_QWORD **)(v17 + 8) = v18;
        v19 = *(_QWORD *)v13;
        v16 = *(uint64_t **)(v13 + 8);
        *(_QWORD *)(v19 + 8) = result;
        *(_QWORD *)result = v19;
        *(_QWORD *)v13 = v17;
        *(_QWORD *)(v17 + 8) = v13;
      }
      if (v16 != (uint64_t *)i && i != a2)
      {
        v20 = i;
        do
        {
          v21 = *((_DWORD *)v16 + 4);
          if (*(_DWORD *)(i + 16) >= v21)
          {
            v16 = (uint64_t *)v16[1];
          }
          else
          {
            for (j = *(_QWORD *)(i + 8); j != a2; j = *(_QWORD *)(j + 8))
            {
              if (*(_DWORD *)(j + 16) >= v21)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v23 = *(_QWORD *)j;
            v24 = *(_QWORD *)i;
            *(_QWORD *)(v24 + 8) = *(_QWORD *)(*(_QWORD *)j + 8);
            **(_QWORD **)(v23 + 8) = v24;
            if (v20 == i)
              v20 = j;
            v26 = *v16;
            v25 = (uint64_t *)v16[1];
            *(_QWORD *)(v26 + 8) = i;
            *(_QWORD *)i = v26;
            *v16 = v23;
            *(_QWORD *)(v23 + 8) = v16;
            v16 = v25;
            i = j;
          }
        }
        while (v16 != (uint64_t *)v20 && i != a2);
      }
    }
  }
  return result;
}

_QWORD **PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap(_QWORD **a1)
{
  std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy((uint64_t)(a1 + 15), a1[16]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a1 + 12), a1[13]);
  std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy((uint64_t)(a1 + 9), a1[10]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a1 + 6), a1[7]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a1 + 3), a1[4]);
  std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy((uint64_t)a1, a1[1]);
  return a1;
}

void std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGCVBitmap>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGCVBitmap>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

void sub_1B274B6AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B274B76C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B274B810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B274B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B274BC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a7);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (*v7)
    (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 24))(*v7);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B274BD7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B274BDC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B274BF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B274E238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B274E30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B274E3D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B274E448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCameraFrameSet;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void setShapeLayerPathFromPointsWithStyle(void *a1, void *a2, id a3, void *a4, void *a5, double a6, double a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  CGPath *closed_CGPath_with_points;

  v13 = objc_retainAutorelease(a3);
  v14 = a5;
  v15 = a4;
  v16 = a2;
  v17 = a1;
  objc_msgSend(v17, "setFillColor:", objc_msgSend(v13, "CGColor"));
  v18 = objc_retainAutorelease(v15);
  v19 = objc_msgSend(v18, "CGColor");

  objc_msgSend(v17, "setStrokeColor:", v19);
  objc_msgSend(v17, "setLineDashPhase:", a6);
  objc_msgSend(v17, "setLineDashPattern:", v14);

  objc_msgSend(v17, "setLineWidth:", a7);
  closed_CGPath_with_points = pv_create_closed_CGPath_with_points(v16);

  objc_msgSend(v17, "setPath:", closed_CGPath_with_points);
  CGPathRelease(closed_CGPath_with_points);
}

id crosshairPointsWithSizeAndCenterPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  void *v8;
  uint64_t i;
  void *v10;
  double v12[2];
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12[0] = -(a3 * 0.5);
  v12[1] = a4 * 0.5;
  v13 = -(a1 * 0.5);
  v14 = a4 * 0.5;
  v15 = v13;
  v16 = -(a4 * 0.5);
  v17 = v12[0];
  v18 = v16;
  v19 = v12[0];
  v20 = -(a2 * 0.5);
  v21 = a3 * 0.5;
  v22 = v20;
  v23 = a3 * 0.5;
  v24 = v16;
  v25 = a1 * 0.5;
  v26 = v16;
  v27 = a1 * 0.5;
  v28 = a4 * 0.5;
  v29 = a3 * 0.5;
  v30 = a4 * 0.5;
  v31 = a3 * 0.5;
  v32 = a2 * 0.5;
  v33 = v12[0];
  v34 = a2 * 0.5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 12);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 24; i += 2)
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", a5 + v12[i], a6 + v12[i + 1]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObject:", v10);

  }
  return v8;
}

void ensureNSublayers(void *a1, unint64_t a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a1;
  objc_msgSend(v14, "sublayers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count") != a2)
  {
    v4 = objc_msgSend(v3, "count");
    v5 = a2 - v4;
    if (a2 > v4)
    {
      do
      {
        objc_msgSend(MEMORY[0x1E0CD2840], "layer");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "addSublayer:", v6);

        --v5;
      }
      while (v5);
    }
    objc_msgSend(v14, "sublayers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");

    if (v8 > a2)
    {
      objc_msgSend(v14, "sublayers");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)objc_msgSend(v9, "copy");

      v11 = objc_msgSend(v10, "count") - a2;
      if (v11 >= 1)
      {
        v12 = 0;
        do
        {
          objc_msgSend(v10, "objectAtIndexedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "removeFromSuperlayer");

          ++v12;
        }
        while (v11 != v12);
      }
      v3 = v10;
    }
  }

}

uint64_t __makeCircleCrosshairWithSizeAndCenterPoint_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

uint64_t compareTimedObjects(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  CMTime v8;
  CMTime v9;
  CMTime time2;
  CMTime time1;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    objc_msgSend(v3, "time");
    if (v5)
    {
LABEL_3:
      objc_msgSend(v5, "time");
      goto LABEL_6;
    }
  }
  else
  {
    memset(&time1, 0, sizeof(time1));
    if (v4)
      goto LABEL_3;
  }
  memset(&time2, 0, sizeof(time2));
LABEL_6:
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    if (v3)
    {
      objc_msgSend(v3, "time");
      if (v5)
      {
LABEL_9:
        objc_msgSend(v5, "time");
LABEL_13:
        v6 = CMTimeCompare(&v9, &v8) > 0;
        goto LABEL_14;
      }
    }
    else
    {
      memset(&v9, 0, sizeof(v9));
      if (v5)
        goto LABEL_9;
    }
    memset(&v8, 0, sizeof(v8));
    goto LABEL_13;
  }
  v6 = -1;
LABEL_14:

  return v6;
}

void sub_1B2753FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B2754018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2754080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B275417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27541E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27542C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B2754338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27543E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B2754444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27544DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2754578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27546B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27547FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2754AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B2754DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2754FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2755144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2755280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2755484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27555A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27556F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27558F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B27559B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275617C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

id PVInputHGNodeMap<unsigned int>::GetTimedMetadata(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 128);
  v2 = a1 + 128;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
    return *(id *)(v5 + 40);
  else
    return 0;
}

void sub_1B27566AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27567B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2756B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B2756E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1B2756F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2756FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2757140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1B2757224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27572BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

#error "1B2757498: call analysis failed (funcsize=193)"

void sub_1B27575D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B2757760(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B2757860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2757910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2757D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2757E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__53(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B2757F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2758014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27581D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2758324(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B2758548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1B2758618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27586BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2758F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B27590F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1B27591CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27592BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B275964C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27597DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1B27598BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2759950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2759C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2759CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2759E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v19 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1B2759F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275A12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B275A2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B275A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B275A4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B275A734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275A964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275AB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v3;
  result = *(__n128 *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v6;
  return result;
}

void sub_1B275ADF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1B275B110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275B29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  void *v19;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B275B3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B275B4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275B5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B275B6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B275B7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275B824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275B9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__67(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B275BB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__70(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B275BDAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275BE54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275C128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B275C284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275C4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275C778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1B275C87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275C930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275CDF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double PCMatrix44Tmpl<double>::leftMult(uint64_t a1, double *a2)
{
  uint64_t i;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  for (i = 96; i != 128; i += 8)
  {
    v3 = (double *)(a1 + i);
    v4 = *(double *)(a1 + i - 96);
    v5 = *(double *)(a1 + i - 64);
    v6 = *(double *)(a1 + i - 32);
    v7 = *(double *)(a1 + i);
    *(v3 - 12) = v4 * *a2 + v5 * a2[1] + v6 * a2[2] + v7 * a2[3];
    *(v3 - 8) = v4 * a2[4] + v5 * a2[5] + v6 * a2[6] + v7 * a2[7];
    *(v3 - 4) = v4 * a2[8] + v5 * a2[9] + v6 * a2[10] + v7 * a2[11];
    result = v4 * a2[12] + v5 * a2[13] + v6 * a2[14] + v7 * a2[15];
    *v3 = result;
  }
  return result;
}

void sub_1B275CFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B275D098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B275D304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275D65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275D744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275D814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275D9D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275DB3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B275DCDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B275EC7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275ED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_1B275EE54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275EEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275F014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B275F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B275F1F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275F28C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275F34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B275F3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B275F40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275F460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B275F584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1B275F764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B275F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1B275FB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

#error "1B275FCC8: call analysis failed (funcsize=148)"

void sub_1B275FDF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2760060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;

  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__59(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B2760298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27603B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27604D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27607A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2760884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27608F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2760990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2760A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2760B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2760C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2761C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, PCString a12, PCString a13, PCString a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void sub_1B2762204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2762260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27622AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2762360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B276241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1B27624D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B2762E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2762EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B2762FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1B2763068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27630F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2763160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2763274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B2763344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27633F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27636B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27637A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27638E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B2763A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64D3010, MEMORY[0x1E0DE42E0]);
}

void sub_1B2763B20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_1B2763C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B2763D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2763E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B2763ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B2764014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27642FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B27645B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B2764790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B2764850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2764A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B2764B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2764D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B2764E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2764FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B2765188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B2765364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B2765460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2765508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B276559C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2765638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27656EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B276574C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2765798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27657E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2765830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B276587C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2765948(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B2765A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B2765B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2765BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2765CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1B2765DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2765E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2765F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2765FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2766128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2766238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27662A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HGSynchronizer::~HGSynchronizer(HGSynchronizable **this)
{
  if (!*((_BYTE *)this + 8))
    HGSynchronizable::Unlock(*this);
}

{
  if (!*((_BYTE *)this + 8))
    HGSynchronizable::Unlock(*this);
}

void __isRunningInMiro_block_invoke()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (id)objc_claimAutoreleasedReturnValue();

  isRunningInMiro_s = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.mobileslideshow"));
}

double pv_simd_vector_scale(float32x4_t a1, float a2)
{
  float32x4_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  float32x2_t v6;

  v2 = vmulq_f32(a1, a1);
  v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0];
  if (v3 <= -0.00001 || v3 >= 0.00001)
  {
    v4 = v3;
    v5 = vrsqrte_f32((float32x2_t)LODWORD(v3));
    v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)LODWORD(v4), vmul_f32(v5, v5)));
    a1.i64[0] = vmulq_n_f32(a1, a2 * vmul_f32(v6, vrsqrts_f32((float32x2_t)LODWORD(v4), vmul_f32(v6, v6))).f32[0]).u64[0];
  }
  return *(double *)a1.i64;
}

{
  int8x16_t v2;
  double v3;
  float v4;

  v2 = (int8x16_t)vmulq_f32(a1, a1);
  v3 = vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)));
  if (v3 <= -0.0000001 || v3 >= 0.0000001)
  {
    v4 = 1.0 / sqrt(v3) * a2;
    a1.i64[0] = vmulq_n_f32(a1, v4).u64[0];
  }
  return *(double *)a1.i64;
}

float64_t pv_simd_vector_scale@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>, float64x2_t a3@<Q0>)
{
  float64x2_t v3;
  float64x2_t v4;
  double v5;
  float64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = vmulq_f64(v4, v4).f64[0] + vaddvq_f64(vmulq_f64(v3, v3));
  if (v5 <= -0.0000001 || v5 >= 0.0000001)
  {
    a3.f64[0] = 1.0 / sqrt(v5) * a3.f64[0];
    v4 = vmulq_f64(v4, a3);
    v3 = vmulq_n_f64(v3, a3.f64[0]);
  }
  *(_QWORD *)&result = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v3.f64[1] = result;
  *a2 = v3;
  a2[1] = v4;
  return result;
}

float64x2_t *pv_simd_vector_scale@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  float64x2_t v3;
  float64x2_t v4;
  double v5;
  double v6;

  v3 = *result;
  v4 = result[1];
  v5 = vaddvq_f64(vaddq_f64(vmulq_f64(v3, v3), vmulq_f64(v4, v4)));
  if (v5 <= -0.0000001 || v5 >= 0.0000001)
  {
    v6 = 1.0 / sqrt(v5) * a3;
    v4 = vmulq_n_f64(v4, v6);
    v3 = vmulq_n_f64(v3, v6);
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

float32x2_t pv_simd_lerp(float32x2_t a1, float32x2_t a2, float a3)
{
  return vadd_f32(vmul_n_f32(vsub_f32(a2, a1), a3), a1);
}

double pv_simd_lerp(float64x2_t a1, float64x2_t a2, double a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(vmulq_n_f64(vsubq_f64(a2, a1), a3), a1);
  return result;
}

float32x2_t pv_simd_lerp(float32x4_t a1, float32x4_t a2, float a3)
{
  return vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(a2, a1), a3));
}

double pv_simd_lerp@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  float64x2_t v4;

  v4 = vaddq_f64(*a1, vmulq_n_f64(vsubq_f64(*a2, *a1), a4.n128_f64[0]));
  a4.n128_f64[0] = a1[1].f64[0] + (a2[1].f64[0] - a1[1].f64[0]) * a4.n128_f64[0];
  *(float64x2_t *)a3 = v4;
  *(__n128 *)(a3 + 16) = a4;
  return a4.n128_f64[0];
}

double pv_simd_lerp(float32x4_t a1, float32x4_t a2, float a3)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmulq_n_f32(vsubq_f32(a2, a1), a3), a1).u64[0];
  return result;
}

float64x2_t pv_simd_lerp@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t result;

  v4 = a1[1];
  v5 = vmulq_n_f64(vsubq_f64(a2[1], v4), a4);
  result = vaddq_f64(*a1, vmulq_n_f64(vsubq_f64(*a2, *a1), a4));
  *a3 = result;
  a3[1] = vaddq_f64(v4, v5);
  return result;
}

{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t result;

  v4 = a1[3];
  v5 = vaddq_f64(*a1, vmulq_n_f64(vsubq_f64(*a2, *a1), a4));
  v6 = vaddq_f64(a1[1], vmulq_n_f64(vsubq_f64(a2[1], a1[1]), a4));
  v7 = vmulq_n_f64(vsubq_f64(a2[3], v4), a4);
  result = vaddq_f64(a1[2], vmulq_n_f64(vsubq_f64(a2[2], a1[2]), a4));
  a3[2] = result;
  a3[3] = vaddq_f64(v4, v7);
  *a3 = v5;
  a3[1] = v6;
  return result;
}

float32x4_t pv_simd_lerp@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>)
{
  float32x4_t v4;
  float32x4_t result;

  v4 = vaddq_f32(*a1, vmulq_n_f32(vsubq_f32(*a2, *a1), a4));
  result = vaddq_f32(a1[1], vmulq_n_f32(vsubq_f32(a2[1], a1[1]), a4));
  *a3 = v4;
  a3[1] = result;
  return result;
}

{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t result;

  v4 = vaddq_f32(*a1, vmulq_n_f32(vsubq_f32(*a2, *a1), a4));
  v5 = vaddq_f32(a1[1], vmulq_n_f32(vsubq_f32(a2[1], a1[1]), a4));
  v6 = vaddq_f32(a1[2], vmulq_n_f32(vsubq_f32(a2[2], a1[2]), a4));
  result = vaddq_f32(a1[3], vmulq_n_f32(vsubq_f32(a2[3], a1[3]), a4));
  a3[2] = v6;
  a3[3] = result;
  *a3 = v4;
  a3[1] = v5;
  return result;
}

BOOL pv_is_finite(double a1)
{
  unsigned int v1;
  unsigned int v2;
  float v3;
  double v5;

  v1 = 0;
  do
  {
    v2 = v1;
    v5 = a1;
    if (v1 > 1)
      break;
    v3 = fabsf(*(float *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v1++ & 1))));
  }
  while (v3 < INFINITY || v3 > INFINITY);
  return v2 > 1;
}

BOOL pv_is_finite(__n128 a1)
{
  unsigned int v1;
  unsigned int v2;
  double v3;
  __n128 v5;

  v1 = 0;
  do
  {
    v2 = v1;
    v5 = a1;
    if (v1 > 1)
      break;
    v3 = fabs(*(double *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF7 | (8 * (v1++ & 1))));
  }
  while (v3 < INFINITY || v3 > INFINITY);
  return v2 > 1;
}

{
  _BOOL8 result;
  int v2;
  int v3;
  float v4;
  __n128 v5;

  result = 0;
  if (fabsf(a1.n128_f32[0]) != INFINITY)
  {
    v2 = 1;
    do
    {
      v5 = a1;
      v3 = v2 + 1;
      if (v2 == 3)
        break;
      v4 = fabsf(*(float *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2++ & 3))));
    }
    while (v4 < INFINITY || v4 > INFINITY);
    return (v3 - 2) > 1;
  }
  return result;
}

{
  unsigned int v1;
  unsigned int v2;
  float v3;
  __n128 v5;

  v1 = 0;
  do
  {
    v2 = v1;
    v5 = a1;
    if (v1 > 3)
      break;
    v3 = fabsf(*(float *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1++ & 3))));
  }
  while (v3 < INFINITY || v3 > INFINITY);
  return v2 > 3;
}

BOOL pv_is_finite(int8x16_t *a1, double a2, __n128 a3)
{
  _BOOL8 result;
  int8x16_t v5;
  int v6;
  int v7;
  double v8;
  _OWORD v9[2];

  result = 0;
  v5 = *a1;
  if (fabs(*(double *)a1->i64) != INFINITY)
  {
    a3.n128_u64[0] = a1[1].u64[0];
    v6 = 1;
    v5.i64[1] = vextq_s8(v5, v5, 8uLL).u64[0];
    do
    {
      v9[0] = v5;
      v9[1] = a3;
      v7 = v6 + 1;
      if (v6 == 3)
        break;
      v8 = fabs(*((double *)v9 + (v6++ & 3)));
    }
    while (v8 < INFINITY || v8 > INFINITY);
    return (v7 - 2) > 1;
  }
  return result;
}

BOOL pv_is_finite(__int128 *a1)
{
  unsigned int v1;
  __int128 v2;
  __int128 v3;
  unsigned int v4;
  double v5;
  _OWORD v7[2];

  v1 = 0;
  v3 = *a1;
  v2 = a1[1];
  do
  {
    v4 = v1;
    v7[0] = v3;
    v7[1] = v2;
    if (v1 > 3)
      break;
    v5 = fabs(*((double *)v7 + (v1++ & 3)));
  }
  while (v5 < INFINITY || v5 > INFINITY);
  return v4 > 3;
}

{
  unsigned int v1;
  __int128 v2;
  __int128 v3;
  unsigned int v4;
  float v5;
  _OWORD v7[2];

  v1 = 0;
  v3 = *a1;
  v2 = a1[1];
  do
  {
    v4 = v1;
    v7[0] = v3;
    v7[1] = v2;
    if (v1 > 7)
      break;
    v5 = fabsf(*((float *)v7 + (v1++ & 7)));
  }
  while (v5 < INFINITY || v5 > INFINITY);
  return v4 > 7;
}

{
  unsigned int v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unsigned int v6;
  double v7;
  _OWORD v9[4];

  v1 = 0;
  v3 = a1[2];
  v2 = a1[3];
  v5 = *a1;
  v4 = a1[1];
  do
  {
    v6 = v1;
    v9[0] = v5;
    v9[1] = v4;
    v9[2] = v3;
    v9[3] = v2;
    if (v1 > 7)
      break;
    v7 = fabs(*((double *)v9 + (v1++ & 7)));
  }
  while (v7 < INFINITY || v7 > INFINITY);
  return v6 > 7;
}

{
  unsigned int v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unsigned int v6;
  float v7;
  _OWORD v9[4];

  v1 = 0;
  v3 = a1[2];
  v2 = a1[3];
  v5 = *a1;
  v4 = a1[1];
  do
  {
    v6 = v1;
    v9[0] = v5;
    v9[1] = v4;
    v9[2] = v3;
    v9[3] = v2;
    if (v1 > 0xF)
      break;
    v7 = fabsf(*((float *)v9 + (v1++ & 0xF)));
  }
  while (v7 < INFINITY || v7 > INFINITY);
  return v6 > 0xF;
}

{
  __int128 v2;
  _BOOL8 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7[2];
  __int128 v8[2];
  __int128 v9[2];
  __int128 v10[2];

  v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  result = pv_is_finite(v10);
  if (result)
  {
    v4 = a1[3];
    v9[0] = a1[2];
    v9[1] = v4;
    result = pv_is_finite(v9);
    if (result)
    {
      v5 = a1[5];
      v8[0] = a1[4];
      v8[1] = v5;
      result = pv_is_finite(v8);
      if (result)
      {
        v6 = a1[7];
        v7[0] = a1[6];
        v7[1] = v6;
        return pv_is_finite(v7);
      }
    }
  }
  return result;
}

uint64_t pv_simd_line_intersection(float32x2_t *a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float32x2_t v8;
  float v9;
  float v11;

  v5 = vsub_f32(a3, a2);
  v6 = vsub_f32(a5, a4);
  v7 = vmuls_lane_f32(v5.f32[0], v6, 1) - vmuls_lane_f32(v6.f32[0], v5, 1);
  if (v7 > -0.00001 && v7 < 0.00001)
    return 0;
  v8 = vsub_f32(a2, a4);
  v9 = (float)(vmuls_lane_f32(v5.f32[0], v8, 1) - (float)(v5.f32[1] * v8.f32[0])) / v7;
  if (v9 < 0.0 || v9 > 1.0)
    return 0;
  v11 = (float)((float)(v8.f32[1] * v6.f32[0]) - (float)(v8.f32[0] * v6.f32[1])) / v7;
  if (v11 < 0.0 || v11 > 1.0)
    return 0;
  *a1 = vadd_f32(vmul_n_f32(v5, v11), a2);
  return 1;
}

uint64_t pv_simd_line_intersection(float64x2_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  double v9;
  double v11;

  v5 = vsubq_f64(a3, a2);
  v6 = vsubq_f64(a5, a4);
  v7 = vmuld_lane_f64(v5.f64[0], v6, 1) - vmuld_lane_f64(v6.f64[0], v5, 1);
  if (v7 > -0.0000001 && v7 < 0.0000001)
    return 0;
  v8 = vsubq_f64(a2, a4);
  v9 = (vmuld_lane_f64(v5.f64[0], v8, 1) - v5.f64[1] * v8.f64[0]) / v7;
  if (v9 < 0.0 || v9 > 1.0)
    return 0;
  v11 = (v8.f64[1] * v6.f64[0] - v8.f64[0] * v6.f64[1]) / v7;
  if (v11 < 0.0 || v11 > 1.0)
    return 0;
  *a1 = vaddq_f64(vmulq_n_f64(v5, v11), a2);
  return 1;
}

void sub_1B2768798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PVCreateInputGraphForPixelBuffer@<X0>(__CVBuffer *a1@<X0>, HGNode **a2@<X8>)
{
  HGNode *v4;
  signed int PixelFormatType;
  uint64_t result;
  unsigned int v7;
  unsigned int Width;
  unsigned int Height;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  HGBitmap *v14;
  HGBitmapLoader *v15;
  int v16;
  HGBitmap *v17;
  HGBitmapLoader *v18;
  HGBitmapLoader *v19;
  HGBitmapLoader *v20;
  HGTextureWrap *v21;
  HGXForm *v22;
  HGTransform *v23;
  __n128 v24;
  __n128 v25;
  BOOL v27;
  HGXForm *v28;
  HGNode *v29;
  CFTypeRef v30;
  const void *v31;
  int v32;
  int v33;
  float v34;
  HGNode *v35;
  HGBitmapLoader **v36;
  HGBitmap *v37;
  HGBitmapLoader *v38;
  HGBitmapLoader *v39;
  HGNode **v40;
  HGBitmapLoader *v41;
  HGBitmap *v42;
  uint64_t v43;
  HGRect v44;

  v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *a2 = v4;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  result = CVPixelBufferIsPlanar(a1);
  if ((_DWORD)result)
  {
    v7 = PixelFormatType & 0xFFFFFFEF;
    if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066
      || PixelFormatType == 2016686640
      || PixelFormatType == 2019963440
      || v7 == 875704934
      || PixelFormatType == 2019963442
      || PixelFormatType == 2016686642)
    {
      v40 = a2;
      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      *(_QWORD *)&v44.var0 = HGRectMake4i(0, 0, Width, Height);
      *(_QWORD *)&v44.var2 = v10;
      v11 = 1;
      if (PixelFormatType == 2016686640
        || PixelFormatType == 2019963440
        || (PixelFormatType != 2016686642 ? (v12 = PixelFormatType == 2019963442) : (v12 = 1),
            !v12 ? (v11 = 0) : (v11 = 1),
            PixelFormatType == 2019963442 || PixelFormatType == 2016686642))
      {
        v13 = 3;
      }
      else
      {
        v13 = 1;
      }
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v13, 0, &v43);
      v14 = (HGBitmap *)v43;
      v15 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v15, v14);
      if (v11)
        v16 = 11;
      else
        v16 = 10;
      v39 = v15;
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v16, 1uLL, &v42);
      v17 = v42;
      v18 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v18, v17);
      if (v15)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v15 + 16))(v15);
      v19 = (HGBitmapLoader *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v19);
      (*(void (**)(HGBitmapLoader *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v19 + 120))(v19, 0, v15);
      (*(void (**)(HGBitmapLoader *, _QWORD, float, float, float, float))(*(_QWORD *)v19 + 96))(v19, 0, 1.0, 0.0, 0.0, 0.0);
      HGTextureWrap::SetCropRect(v19, &v44);
      *((_BYTE *)v19 + 452) = 1;
      v20 = v15;
      if (v15 != v19)
      {
        if (v15)
          (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v15 + 24))(v15);
        v20 = v19;
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v19 + 16))(v19);
      }
      v41 = v20;
      if (v18)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v18 + 16))(v18);
      v21 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
      HGTextureWrap::HGTextureWrap(v21);
      (*(void (**)(HGTextureWrap *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v21 + 120))(v21, 0, v18);
      (*(void (**)(HGTextureWrap *, _QWORD, float, float, float, float))(*(_QWORD *)v21 + 96))(v21, 0, 1.0, 0.0, 0.0, 0.0);
      v22 = (HGXForm *)v18;
      if (v18 != v21)
      {
        if (v18)
          (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v18 + 24))(v18);
        v22 = (HGXForm *)v21;
        (*(void (**)(HGTextureWrap *))(*(_QWORD *)v21 + 16))(v21);
      }
      v23 = (HGTransform *)HGObject::operator new(0x90uLL);
      HGTransform::HGTransform(v23);
      (*(void (**)(HGTransform *))(*(_QWORD *)v23 + 56))(v23);
      v27 = PixelFormatType == 2016686642 || PixelFormatType == 2019963442 || v7 == 875704934;
      v24.n128_u64[0] = 2.0;
      v25.n128_u64[0] = 1.0;
      if (!v27)
        v25.n128_f64[0] = 2.0;
      (*(void (**)(HGTransform *, __n128, __n128, double))(*(_QWORD *)v23 + 144))(v23, v24, v25, 1.0);
      v28 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v28);
      (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v28 + 576))(v28, v23);
      (*(void (**)(HGXForm *, _QWORD, HGXForm *))(*(_QWORD *)v28 + 120))(v28, 0, v22);
      (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v28 + 592))(v28, 0, 0.0);
      if (v22 != v28)
      {
        if (v22)
          (*(void (**)(HGXForm *))(*(_QWORD *)v22 + 24))(v22);
        v22 = v28;
        (*(void (**)(HGXForm *))(*(_QWORD *)v28 + 16))(v28);
      }
      v29 = (HGNode *)HGObject::operator new(0x1C0uLL);
      HGYUVPlanarToRGBA::HGYUVPlanarToRGBA(v29, 2, 0);
      (*(void (**)(HGNode *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v29 + 120))(v29, 0, v41);
      (*(void (**)(HGNode *, uint64_t, HGXForm *))(*(_QWORD *)v29 + 120))(v29, 1, v22);
      v30 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
      v31 = v30;
      if (v30)
      {
        if (CFEqual(v30, (CFTypeRef)*MEMORY[0x1E0CA8F10]))
        {
          v32 = 0;
        }
        else if (CFEqual(v31, (CFTypeRef)*MEMORY[0x1E0CA8F00]))
        {
          v32 = 2;
        }
        else
        {
          v32 = 1;
        }
        CFRelease(v31);
      }
      else
      {
        v32 = 1;
      }
      v34 = 0.0;
      if (PixelFormatType != 875704422)
      {
        v34 = 1.0;
        if ((PixelFormatType & 0xFFFFFFFD) != 0x78663230)
        {
          if ((PixelFormatType & 0xFFFFFFFD) == 0x78343230)
            v34 = 4.0;
          else
            v34 = 3.0;
        }
      }
      (*(void (**)(HGNode *, _QWORD, float, float, float, float))(*(_QWORD *)v29 + 96))(v29, 0, (float)v32, 0.0, 0.0, 0.0);
      (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)v29 + 96))(v29, 1, v34, 0.0, 0.0, 0.0);
      v35 = *v40;
      if (*v40 != v29)
      {
        if (v35)
          (*(void (**)(HGNode *))(*(_QWORD *)v35 + 24))(v35);
        *v40 = v29;
        (*(void (**)(HGNode *))(*(_QWORD *)v29 + 16))(v29);
      }
      (*(void (**)(HGNode *))(*(_QWORD *)v29 + 24))(v29);
      (*(void (**)(HGXForm *))(*(_QWORD *)v28 + 24))(v28);
      (*(void (**)(HGTransform *))(*(_QWORD *)v23 + 24))(v23);
      (*(void (**)(HGTextureWrap *))(*(_QWORD *)v21 + 24))(v21);
      if (v22)
        (*(void (**)(HGXForm *))(*(_QWORD *)v22 + 24))(v22);
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v19 + 24))(v19);
      if (v41)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v41 + 24))(v41);
      if (v18)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v18 + 24))(v18);
      if (v42)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v42 + 24))(v42);
      if (v39)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v39 + 24))(v39);
      result = v43;
      if (v43)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
    }
    return result;
  }
  if (PixelFormatType <= 1278226535)
  {
    if (PixelFormatType == 1111970369)
    {
      v33 = 23;
    }
    else
    {
      if (PixelFormatType != 1278226488)
        return result;
      v33 = 1;
    }
    goto LABEL_86;
  }
  if (PixelFormatType != 1278226536)
  {
    if (PixelFormatType == 1380411457)
    {
      v33 = 27;
      goto LABEL_86;
    }
    if (PixelFormatType != 1751411059)
      return result;
  }
  v33 = 5;
LABEL_86:
  v36 = (HGBitmapLoader **)a2;
  HGCVBitmap::create((HGCVPixelBuffer *)a1, v33, 0, &v44);
  v37 = *(HGBitmap **)&v44.var0;
  v38 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v38, v37);
  if (v4 == (HGNode *)v38)
  {
    if (v4)
      (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
  }
  else
  {
    if (v4)
      (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
    *v36 = v38;
  }
  result = *(_QWORD *)&v44.var0;
  if (*(_QWORD *)&v44.var0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v44.var0 + 24))(*(_QWORD *)&v44.var0);
  return result;
}

void sub_1B2768FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  _Unwind_Resume(exception_object);
}

BOOL PVIsMultiplaneCoreVideo420Format(int a1)
{
  _BOOL4 v2;

  v2 = a1 == 2016686640 || a1 == 2019963440;
  return (a1 & 0xFFFFFFEF) == 0x34323066 || v2;
}

BOOL PVIsMultiplaneCoreVideo422Format(int a1)
{
  _BOOL4 v2;

  v2 = a1 == 2016686642 || a1 == 2019963442;
  return (a1 & 0xFFFFFFEF) == 0x34323266 || v2;
}

BOOL PVIs10BitMultiplaneCoreVideoX420Format(int a1)
{
  return a1 == 2016686640 || a1 == 2019963440;
}

BOOL PVIs10BitMultiplaneCoreVideoX422Format(int a1)
{
  return a1 == 2016686642 || a1 == 2019963442;
}

void PVCreateInputGraphForPixelBuffer(__CVBuffer *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, HGNode **a5@<X8>)
{
  id v9;
  id v10;
  OSType PixelFormatType;
  HGNode *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  HGNode *v19;
  HGColorConform *v20;
  HGNode *v21;
  id v22;
  HGNode *v23;

  v9 = a2;
  v10 = a3;
  PVCreateInputGraphForPixelBuffer(a1, a5);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (!CVPixelBufferIsPlanar(a1)
    && (PixelFormatType == 1278226488 || PixelFormatType == 1278226536 || PixelFormatType == 1751411059))
  {
    goto LABEL_25;
  }
  v12 = *a5;
  if (*a5)
  {
    (*(void (**)(HGNode *))(*(_QWORD *)v12 + 16))(*a5);
    v13 = v9;
    v14 = v10;
    if (v13)
    {
      v23 = v12;
      (*(void (**)(HGNode *))(*(_QWORD *)v12 + 16))(v12);
LABEL_11:
      v22 = 0;
      ColorConformInput((HGColorClamp **)&v23, v9, v10, a4, &v22, (HGColorConform **)&v21);
      v17 = v22;
      if (v23)
        (*(void (**)(HGNode *))(*(_QWORD *)v23 + 24))(v23);
      if (v17)
      {
        objc_msgSend(v17, "localizedDescription");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        NSLog(CFSTR("%@"), v18);

      }
      v19 = v12;
      goto LABEL_17;
    }
  }
  else
  {
    v15 = v9;
    v16 = v10;
    if (v15)
    {
      v23 = 0;
      goto LABEL_11;
    }
  }
  v19 = 0;
  v21 = v12;
LABEL_17:

  v20 = (HGColorConform *)v21;
  if (v12 == v21)
  {
    if (v12)
      (*(void (**)(HGNode *))(*(_QWORD *)v12 + 24))(v12);
  }
  else
  {
    if (v12)
    {
      (*(void (**)(HGNode *))(*(_QWORD *)v12 + 24))(v12);
      v20 = (HGColorConform *)v21;
    }
    *a5 = (HGNode *)v20;
    v21 = 0;
  }
  if (v19)
    (*(void (**)(HGNode *))(*(_QWORD *)v19 + 24))(v19);
LABEL_25:

}

void sub_1B276950C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (*v12)
    (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);

  _Unwind_Resume(a1);
}

void PVCreateInputGraphForPixelBuffer(__CVBuffer *a1@<X0>, PVInstructionGraphContext **a2@<X2>, HGNode **a3@<X8>)
{
  void *v6;
  int v7;
  id v8;

  +[PVColorSpace pvColorSpaceForCVPixelBuffer:](PVColorSpace, "pvColorSpaceForCVPixelBuffer:", a1);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (!v8)
    NSLog(CFSTR("PVCreateCVPixelBufferFromCGImageRef: Could not derive pixel buffer color space!"));
  PVInstructionGraphContext::WorkingColorSpace(*a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = PVInstructionGraphContext::WorkingColorSpaceConformIntent(*a2);
  PVCreateInputGraphForPixelBuffer(a1, v8, v6, v7, a3);

}

void sub_1B276968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PVCreateOutputBufferForHGCVPixelBuffer(__CVBuffer *a1, HGRenderContext *a2, uint64_t *a3)
{
  CFDataRef v6;
  HGCV *PixelFormatType;
  uint64_t Renderer;
  uint64_t result;
  char *v10;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  UInt8 bytes[8];
  char *v47;
  _QWORD *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)bytes = 0x4240133DA0E92F00;
  v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 8);
  CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CC8], v6, kCVAttachmentMode_ShouldPropagate);
  CFRelease(v6);
  PixelFormatType = (HGCV *)CVPixelBufferGetPixelFormatType(a1);
  Renderer = HGRenderContext::GetRenderer(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Renderer + 304))(Renderer);
  if ((result & 1) != 0)
    return result;
  if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066)
    goto LABEL_3;
  if ((_DWORD)PixelFormatType == 2016686640 || (_DWORD)PixelFormatType == 2019963440)
    goto LABEL_10;
  if ((PixelFormatType & 0xFFFFFFEF) == 0x34323266
    || (_DWORD)PixelFormatType == 2019963442
    || (_DWORD)PixelFormatType == 2016686642)
  {
LABEL_3:
    if ((_DWORD)PixelFormatType != 2019963442 && (_DWORD)PixelFormatType != 2016686642)
    {
      v12 = 10;
      v13 = 1;
LABEL_11:
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v13, 0, &v45);
      HGCVBitmap::create((HGCVPixelBuffer *)a1, v12, 1uLL, &v44);
      v14 = v45;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      v16 = a3 + 2;
      v15 = a3[2];
      v17 = (uint64_t *)a3[1];
      if ((unint64_t)v17 >= v15)
      {
        v19 = ((uint64_t)v17 - *a3) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v20 = v15 - *a3;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        v50 = a3 + 2;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v22);
        else
          v23 = 0;
        v24 = &v23[8 * v19];
        *(_QWORD *)bytes = v23;
        v47 = v24;
        v49 = &v23[8 * v22];
        *(_QWORD *)v24 = v14;
        v48 = v24 + 8;
        std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a3, bytes);
        v18 = (_QWORD *)a3[1];
        std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)bytes);
      }
      else
      {
        *v17 = v14;
        v18 = v17 + 1;
        a3[1] = (uint64_t)v18;
      }
      a3[1] = (uint64_t)v18;
      v25 = v44;
      if (v44)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v18 = (_QWORD *)a3[1];
      }
      if ((unint64_t)v18 >= *v16)
      {
        v27 = ((uint64_t)v18 - *a3) >> 3;
        if ((unint64_t)(v27 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v28 = *v16 - *a3;
        v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        v50 = a3 + 2;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v30);
        else
          v31 = 0;
        v32 = &v31[8 * v27];
        *(_QWORD *)bytes = v31;
        v47 = v32;
        v49 = &v31[8 * v30];
        *(_QWORD *)v32 = v25;
        v48 = v32 + 8;
        std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a3, bytes);
        v26 = (_QWORD *)a3[1];
        std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)bytes);
      }
      else
      {
        *v18 = v25;
        v26 = v18 + 1;
        a3[1] = (uint64_t)v26;
      }
      a3[1] = (uint64_t)v26;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
      result = v45;
      if (v45)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
      return result;
    }
LABEL_10:
    v12 = 11;
    v13 = 3;
    goto LABEL_11;
  }
  v33 = HGCV::HGFormatForCVPixelFormat(PixelFormatType, 0, v10);
  HGCVBitmap::create((HGCVPixelBuffer *)a1, v33, 0, &v45);
  v34 = v45;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
  v35 = a3[2];
  v36 = (uint64_t *)a3[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((uint64_t)v36 - *a3) >> 3;
    if ((unint64_t)(v38 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v39 = v35 - *a3;
    v40 = v39 >> 2;
    if (v39 >> 2 <= (unint64_t)(v38 + 1))
      v40 = v38 + 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    v50 = a3 + 2;
    if (v41)
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v41);
    else
      v42 = 0;
    v43 = &v42[8 * v38];
    *(_QWORD *)bytes = v42;
    v47 = v43;
    v49 = &v42[8 * v41];
    *(_QWORD *)v43 = v34;
    v48 = v43 + 8;
    std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a3, bytes);
    v37 = (_QWORD *)a3[1];
    std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)bytes);
  }
  else
  {
    *v36 = v34;
    v37 = v36 + 1;
    a3[1] = (uint64_t)v37;
  }
  a3[1] = (uint64_t)v37;
  result = v45;
  if (v45)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
  return result;
}

void sub_1B2769ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer((void **)va);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  _Unwind_Resume(a1);
}

id PVPixelBufferCreationOptions(void)
{
  id v0;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v0, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AA70], *MEMORY[0x1E0CA8FF0]);
  return v0;
}

void sub_1B2769C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PVCreateCGImageRefByConvertingCVPixelBuffer(HGCVPixelBuffer **a1)
{
  void *v2;
  void *v3;
  size_t v4;
  uint64_t v5;

  HGCVPixelBuffer::lock(*a1, 1uLL);
  if (PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::onceToken != -1)
    dispatch_once(&PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::onceToken, &__block_literal_global_3);
  objc_msgSend(MEMORY[0x1E0C9DDC8], "imageWithCVPixelBuffer:", *((_QWORD *)*a1 + 3));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::ciContext;
  v4 = HGCVPixelBuffer::w(*a1, 0);
  v5 = objc_msgSend(v3, "createCGImage:fromRect:", v2, 0.0, 0.0, (double)v4, (double)HGCVPixelBuffer::h(*a1, 0));
  HGCVPixelBuffer::unlock(*a1, 1uLL);

  return v5;
}

void sub_1B2769D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___Z43PVCreateCGImageRefByConvertingCVPixelBuffer5HGRefI15HGCVPixelBufferE_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C9DD90];
  v4 = *MEMORY[0x1E0C9DF58];
  v5[0] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "contextWithOptions:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::ciContext;
  PVCreateCGImageRefByConvertingCVPixelBuffer(HGRef<HGCVPixelBuffer>)::ciContext = v2;

}

void sub_1B2769DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGImageRef PVCreateCGImageRefFromCVPixelBuffer(HGCVPixelBuffer **a1, uint64_t a2)
{
  OSType PixelFormatType;
  HGCVPixelBuffer *v6;
  void *v7;
  size_t v8;
  size_t v9;
  CGDataProvider *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  CGImageRef v15;
  HGCVPixelBuffer *v17;
  uint64_t v18;
  HGCVPixelBuffer *v19;
  _BYTE v20[5];

  PixelFormatType = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)*a1 + 3));
  if (PixelFormatType == 1111970369 || PixelFormatType == 1380411457)
  {
    v6 = *a1;
    (*(void (**)(HGCVPixelBuffer *))(*(_QWORD *)v6 + 16))(v6);
    HGCVPixelBuffer::lock(v6, 1uLL);
    v7 = HGCVPixelBuffer::ptr(v6, 0);
    v8 = HGCVPixelBuffer::rowBytes(v6, 0);
    v9 = HGCVPixelBuffer::h(v6, 0);
    v10 = CGDataProviderCreateWithData(v6, v7, v9 * v8, (CGDataProviderReleaseDataCallback)freeAndUnlockUnderlyingHGCVPixelBuffer);
    v11 = HGCVPixelBuffer::w(v6, 0);
    v12 = HGCVPixelBuffer::h(v6, 0);
    v13 = *(int *)(a2 + 4);
    v14 = HGCVPixelBuffer::rowBytes(v6, 0);
    v15 = CGImageCreate(v11, v12, v13, 4 * v13, v14, *(CGColorSpaceRef *)(a2 + 16), *(_DWORD *)(a2 + 8), v10, 0, 1, kCGRenderingIntentDefault);
    CGDataProviderRelease(v10);
    return v15;
  }
  else
  {
    v20[0] = HIBYTE(PixelFormatType);
    v20[1] = BYTE2(PixelFormatType);
    v20[2] = BYTE1(PixelFormatType);
    v20[3] = PixelFormatType;
    v20[4] = 0;
    NSLog(CFSTR("WARNING: Slow Conversion to CGImage for %s CVPixelBuffer format! Use a BGRA format for a fast path. Consider a PVRenderer render pass."), v20);
    v17 = *a1;
    v19 = v17;
    if (v17)
      (*(void (**)(HGCVPixelBuffer *))(*(_QWORD *)v17 + 16))(v17);
    v18 = PVCreateCGImageRefByConvertingCVPixelBuffer(&v19);
    if (v17)
      (*(void (**)(HGCVPixelBuffer *))(*(_QWORD *)v17 + 24))(v17);
    return (CGImageRef)v18;
  }
}

void sub_1B2769FA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t freeAndUnlockUnderlyingHGCVPixelBuffer(HGCVPixelBuffer *a1, const void *a2)
{
  HGCVPixelBuffer::unlock(a1, 1uLL);
  return (*(uint64_t (**)(HGCVPixelBuffer *))(*(_QWORD *)a1 + 24))(a1);
}

void PVCreateCVPixelBufferFromCGImageRef(CGImage *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X2>, HGObject **a4@<X8>)
{
  _anonymous_namespace_ *Width;
  char *Height;
  void *v10;
  size_t v11;
  size_t v12;
  CGContext *v13;
  PVColorSpace *v14;
  CGRect v15;
  CGRect v16;

  Width = (_anonymous_namespace_ *)CGImageGetWidth(a1);
  Height = (char *)CGImageGetHeight(a1);
  HGCVPixelBuffer::create(a3, Width, Height, *(_DWORD *)a2, a4);
  HGCVPixelBuffer::lock((HGCVPixelBuffer *)*a4, 0);
  v10 = HGCVPixelBuffer::ptr((HGCVPixelBuffer *)*a4, 0);
  v11 = *(int *)(a2 + 4);
  v12 = HGCVPixelBuffer::rowBytes((HGCVPixelBuffer *)*a4, 0);
  v13 = CGBitmapContextCreate(v10, (size_t)Width, (size_t)Height, v11, v12, *(CGColorSpaceRef *)(a2 + 16), *(_DWORD *)(a2 + 8));
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = (double)(unint64_t)Width;
  v15.size.height = (double)(unint64_t)Height;
  CGContextClearRect(v13, v15);
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = (double)(unint64_t)Width;
  v16.size.height = (double)(unint64_t)Height;
  CGContextDrawImage(v13, v16, a1);
  CGContextRelease(v13);
  +[PVColorSpace pvColorSpaceFromCGColorSpace:](PVColorSpace, "pvColorSpaceFromCGColorSpace:", *(_QWORD *)(a2 + 16));
  v14 = (PVColorSpace *)objc_claimAutoreleasedReturnValue();
  PVAddColorSpaceAttributesToCVPixelBuffer(*((__CVBuffer **)*a4 + 3), v14);
  HGCVPixelBuffer::unlock((HGCVPixelBuffer *)*a4, 0);

}

void sub_1B276A140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _QWORD *v10;

  if (*v10)
    (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
  _Unwind_Resume(exception_object);
}

HGBitmapUtils *PVCreateCVPixelBufferFromCGImageRefAndGainMap@<X0>(HGBitmapUtils *result@<X0>, HGBitmapUtils *a2@<X1>, uint64_t a3@<X2>, const char **a4@<X3>, HGNode ****a5@<X8>)
{
  CGImage *v9;
  void *v10;
  HGBitmapLoader *v11;
  _anonymous_namespace_ *Width;
  char *Height;
  size_t v14;
  size_t v15;
  _OWORD *v16;
  HGHWBlendFlipped *v17;
  PVColorSpace *v18;
  void *v19;
  HGColorConform *v20;
  uint64_t v21;
  uint64_t v22;
  HGRenderNode *v23;
  HGRenderNode *v24;
  HGRenderJob *v25;
  PVRenderManager *v26;
  uint64_t v27;
  void *v28;
  PVRenderManager *v29;
  HGRenderQueue *v30;
  HGBitmap *v31;
  HGBitmap *v32;
  HGNode **v33;
  HGNode **v34;
  uint64_t v35;
  HGColorConform *v36;
  HGColorConform *v37;
  HGColorConform *v38;
  HGHWBlendFlipped *v39;
  HGBitmapLoader *v40;
  HGBitmapLoader *v41;
  HGNode ***v42;

  if (result && a2)
  {
    v9 = result;
    HGBitmapUtils::createBitmapLoader(result, &v41);
    HGBitmapUtils::createBitmapLoader(a2, &v40);
    +[PVColorSpace pvColorSpaceFromCGColorSpace:](PVColorSpace, "pvColorSpaceFromCGColorSpace:", *(_QWORD *)(a3 + 16));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      +[PVColorSpace sRGBColorSpace](PVColorSpace, "sRGBColorSpace");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v11 = v41;
    v39 = v41;
    if (v41)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v41 + 16))(v41);
    objc_msgSend(v10, "nclcTriplet");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    PVCreateColorConform(objc_msgSend(v28, "hgColorPrimary"), objc_msgSend(v28, "hgTransferFunction"), 0, 3, 8, 0, &v38);
    (*(void (**)(HGColorConform *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v38 + 120))(v38, 0, v11);
    Width = (_anonymous_namespace_ *)CGImageGetWidth(v9);
    Height = (char *)CGImageGetHeight(v9);
    v14 = CGImageGetWidth(a2);
    v15 = CGImageGetHeight(a2);
    v16 = HGObject::operator new(0x1D0uLL);
    v16[27] = 0u;
    v16[28] = 0u;
    v16[25] = 0u;
    v16[26] = 0u;
    v16[23] = 0u;
    v16[24] = 0u;
    v16[21] = 0u;
    v16[22] = 0u;
    v16[19] = 0u;
    v16[20] = 0u;
    v16[17] = 0u;
    v16[18] = 0u;
    v16[15] = 0u;
    v16[16] = 0u;
    v16[13] = 0u;
    v16[14] = 0u;
    v16[11] = 0u;
    v16[12] = 0u;
    v16[9] = 0u;
    v16[10] = 0u;
    v16[7] = 0u;
    v16[8] = 0u;
    v16[5] = 0u;
    v16[6] = 0u;
    v16[3] = 0u;
    v16[4] = 0u;
    v16[1] = 0u;
    v16[2] = 0u;
    *v16 = 0u;
    HGNode::HGNode((HGNode *)v16);
    *(_QWORD *)v16 = off_1E65EC860;
    *((_QWORD *)v16 + 51) = 0;
    *((_DWORD *)v16 + 104) = 1065353216;
    *(_OWORD *)((char *)v16 + 424) = 0u;
    *(_OWORD *)((char *)v16 + 440) = 0u;
    HGNode::SetInput((HGNode *)v16, 0, (HGNode *)v11);
    (*(void (**)(_OWORD *, uint64_t, HGBitmapLoader *))(*(_QWORD *)v16 + 120))(v16, 1, v40);
    (*(void (**)(_OWORD *, _QWORD, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 0, 1.265, 0.0, 0.0, 0.0);
    (*(void (**)(_OWORD *, uint64_t, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 1, (float)(unint64_t)Width, (float)(unint64_t)Height, 0.0, 0.0);
    (*(void (**)(_OWORD *, uint64_t, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 2, (float)v14, (float)v15, 0.0, 0.0);
    PVCreateColorConform(3, 8, 0, 3, 1, 0, &v37);
    (*(void (**)(HGColorConform *, _QWORD, _OWORD *))(*(_QWORD *)v37 + 120))(v37, 0, v16);
    if (v11 != v37)
    {
      if (v11)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v11 + 24))(v11);
      v11 = v37;
      v39 = v37;
      if (v37)
        (*(void (**)(HGColorConform *))(*(_QWORD *)v37 + 16))(v37);
    }
    v17 = (HGHWBlendFlipped *)HGObject::operator new(0x1B0uLL);
    HGHLG::SDRToHLG::SDRToHLG((uint64_t)v17, 2, 1);
    (*(void (**)(HGHWBlendFlipped *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v17 + 120))(v17, 0, v11);
    if (v11 != v17)
    {
      if (v11)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v11 + 24))(v11);
      v39 = v17;
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v17 + 16))(v17);
    }
    +[PVColorSpace rec2100HLGColorSpace](PVColorSpace, "rec2100HLGColorSpace");
    v18 = (PVColorSpace *)objc_claimAutoreleasedReturnValue();
    -[PVColorSpace nclcTriplet](v18, "nclcTriplet");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    PVCreateColorConform(3, 8, 0, objc_msgSend(v19, "hgColorPrimary"), objc_msgSend(v19, "hgTransferFunction"), 0, &v36);
    v20 = v39;
    (*(void (**)(HGColorConform *, _QWORD, HGHWBlendFlipped *))(*(_QWORD *)v36 + 120))(v36, 0, v39);
    if (v20 != v36)
    {
      if (v20)
        (*(void (**)(HGColorConform *))(*(_QWORD *)v20 + 24))(v20);
      v20 = v36;
      v39 = v36;
      if (v36)
        (*(void (**)(HGColorConform *))(*(_QWORD *)v36 + 16))(v36);
    }
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v21 = HGRectMake4i(0, 0, Width, Height);
    PVCreateYUVPlanesWithBackfillBlackBackground(v21, v22, v21, v22, &v39, v19, 2016686640, (uint64_t *)&v33);
    HGCVPixelBuffer::create(a4, Width, Height, 0x78343230u, (HGObject **)&v42);
    HGCVBitmap::create((HGCVPixelBuffer **)&v42, 3, 0, &v32);
    HGCVBitmap::create((HGCVPixelBuffer **)&v42, 11, 1uLL, &v31);
    v23 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
    HGRenderNode::HGRenderNode(v23);
    if (v34 == v33)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    HGRenderNode::SetNode(v23, *v33);
    HGRenderNode::SetBitmap(v23, v32);
    v24 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
    HGRenderNode::HGRenderNode(v24);
    if ((unint64_t)((char *)v34 - (char *)v33) <= 8)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    HGRenderNode::SetNode(v24, v33[1]);
    HGRenderNode::SetBitmap(v24, v31);
    v25 = (HGRenderJob *)HGObject::operator new(0x160uLL);
    HGRenderJob::HGRenderJob(v25);
    HGUserJob::SetPriority((uint64_t)v25, 1);
    HGUserJob::SetState((uint64_t)v25, 2);
    HGRenderJob::SetPriority((uint64_t)v25, 10);
    HGRenderJob::AddRenderNode(v25, v23);
    HGRenderJob::AddRenderNode(v25, v24);
    PVRenderManager::INSTANCE(v26, &v29);
    PVRenderManager::GetRenderQueue(v29, &v30);
    if (v29)
      (*(void (**)(PVRenderManager *))(*(_QWORD *)v29 + 24))(v29);
    if (v30)
    {
      v27 = HGRenderQueue::ExecuteRenderJob(v30, v25);
      if ((_DWORD)v27)
      {
        NSLog(CFSTR("HGRenderQueue error while rendering Meteor+ image: %d "), v27);
        *a5 = 0;
      }
      else
      {
        PVAddColorSpaceAttributesToCVPixelBuffer((__CVBuffer *)v42[3], v18);
        *a5 = v42;
        v42 = 0;
      }
      if (v30)
        (*(void (**)(HGRenderQueue *))(*(_QWORD *)v30 + 24))(v30);
    }
    else
    {
      *a5 = 0;
    }
    if (v25)
      (*(void (**)(HGRenderJob *))(*(_QWORD *)v25 + 24))(v25);
    if (v24)
      (*(void (**)(HGRenderNode *))(*(_QWORD *)v24 + 24))(v24);
    if (v23)
      (*(void (**)(HGRenderNode *))(*(_QWORD *)v23 + 24))(v23);
    if (v31)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v31 + 24))(v31);
    if (v32)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v32 + 24))(v32);
    if (v42)
      ((void (*)(HGNode ***))(*v42)[3])(v42);
    v42 = &v33;
    std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if (v36)
      (*(void (**)(HGColorConform *))(*(_QWORD *)v36 + 24))(v36);

    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v17 + 24))(v17);
    if (v37)
      (*(void (**)(HGColorConform *))(*(_QWORD *)v37 + 24))(v37);
    (*(void (**)(_OWORD *))(*(_QWORD *)v16 + 24))(v16);
    if (v38)
      (*(void (**)(HGColorConform *))(*(_QWORD *)v38 + 24))(v38);

    if (v20)
      (*(void (**)(HGColorConform *))(*(_QWORD *)v20 + 24))(v20);

    if (v40)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v40 + 24))(v40);
    result = v41;
    if (v41)
      return (HGBitmapUtils *)(*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v41 + 24))(v41);
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

void sub_1B276A87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v24;

  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  v24 = *(_QWORD *)(v22 - 96);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  _Unwind_Resume(exception_object);
}

void PVCreateYUVPlanesWithBackfillBlackBackground(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, HGHWBlendFlipped **a5, void *a6, int a7, uint64_t *a8)
{
  id v15;
  HGHWBlendFlipped *v16;
  HGSolidColor *v17;
  uint64_t v18;
  uint64_t v19;
  HGNode *v20;
  HGNode *v21;
  HGNode *v22;
  HGNode *v23;
  HGColorConform *v24;

  v15 = a6;
  if (HGRectContainsRect(a1, a2, a3, a4))
  {
    v16 = *a5;
    if (*a5)
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v16 + 16))(*a5);
  }
  else
  {
    v17 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v17);
    (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 0, 0.0, 0.0, 0.0, 0.0);
    v16 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
    HGHWBlendFlipped::HGHWBlendFlipped(v16);
    (*(void (**)(HGHWBlendFlipped *, _QWORD, HGSolidColor *))(*(_QWORD *)v16 + 120))(v16, 0, v17);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, HGHWBlendFlipped *))(*(_QWORD *)v16 + 120))(v16, 1, *a5);
    (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 0, 41.0, 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 2, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v16 + 24))(v16);
    (*(void (**)(HGSolidColor *))(*(_QWORD *)v17 + 24))(v17);
  }
  PVCreateColorConform(objc_msgSend(v15, "hgColorPrimary"), objc_msgSend(v15, "hgTransferFunction"), 0, objc_msgSend(v15, "hgColorPrimary"), objc_msgSend(v15, "hgTransferFunction"), objc_msgSend(v15, "hgYCbCrMatrix"), &v24);
  (*(void (**)(HGColorConform *, _QWORD, HGHWBlendFlipped *))(*(_QWORD *)v24 + 120))(v24, 0, v16);
  if (a7 > 2016686641)
  {
    switch(a7)
    {
      case 2016686642:
        v18 = 14;
        goto LABEL_15;
      case 2019963440:
        v18 = 13;
        goto LABEL_15;
      case 2019963442:
        v18 = 15;
LABEL_15:
        v19 = 25;
        goto LABEL_19;
    }
LABEL_17:
    v18 = 8;
    goto LABEL_18;
  }
  if (a7 != 875704422)
  {
    if (a7 == 2016686640)
    {
      v18 = 12;
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  v18 = 9;
LABEL_18:
  v19 = 24;
LABEL_19:
  HGColorConform::SetOutputPixelFormat((uint64_t)v24, v19, (char *)v18);
  v20 = (HGNode *)HGObject::operator new(0x1B0uLL);
  HGYUV444ToPlanarLuma::HGYUV444ToPlanarLuma(v20, 2);
  v23 = v20;
  (*(void (**)(HGNode *, _QWORD, HGColorConform *))(*(_QWORD *)v20 + 120))(v20, 0, v24);
  std::vector<HGRef<HGNode>>::push_back[abi:ne180100](a8, (void ***)&v23);
  v21 = (HGNode *)HGObject::operator new(0x1B0uLL);
  HGYUV444ToPlanarChroma::HGYUV444ToPlanarChroma(v21, 1, 0);
  v22 = v21;
  (*(void (**)(HGNode *, _QWORD, HGColorConform *))(*(_QWORD *)v21 + 120))(v21, 0, v24);
  std::vector<HGRef<HGNode>>::push_back[abi:ne180100](a8, (void ***)&v22);
  if (v22)
    (*(void (**)(HGNode *))(*(_QWORD *)v22 + 24))(v22);
  if (v23)
    (*(void (**)(HGNode *))(*(_QWORD *)v23 + 24))(v23);
  if (v24)
    (*(void (**)(HGColorConform *))(*(_QWORD *)v24 + 24))(v24);
  if (v16)
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v16 + 24))(v16);

}

void sub_1B276AF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;
  uint64_t v14;

  HGObject::operator delete(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);

  _Unwind_Resume(a1);
}

void PVCreateCVPixelBufferFromCVPixelBufferWithColorSpaces(__CVBuffer *a1@<X0>, void *a2@<X1>, void *a3@<X2>, const char **a4@<X3>, HGColorConform ***a5@<X8>)
{
  id v9;
  _anonymous_namespace_ *Width;
  char *Height;
  id v12;
  HGNode *v13;

  v12 = a2;
  v9 = a3;
  if (a1)
  {
    Width = (_anonymous_namespace_ *)CVPixelBufferGetWidth(a1);
    Height = (char *)CVPixelBufferGetHeight(a1);
    PVCreateInputGraphForPixelBuffer(a1, &v13);
    PVCreateCVPixelBufferWithColorSpaces((HGHWBlendFlipped **)&v13, Width, Height, v12, v9, a4, a5);
    if (v13)
      (*(void (**)(HGNode *))(*(_QWORD *)v13 + 24))(v13);
  }
  else
  {
    *a5 = 0;
  }

}

void sub_1B276B104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void PVCreateCVPixelBufferWithColorSpaces(HGHWBlendFlipped **a1@<X0>, _anonymous_namespace_ *a2@<X1>, char *a3@<X2>, void *a4@<X3>, void *a5@<X4>, const char **a6@<X5>, HGColorConform ***a7@<X8>)
{
  id v13;
  PVColorSpace *v14;
  HGColorConform *v15;
  id v16;
  _BOOL4 v17;
  OSType v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  int v24;
  HGRenderNode *v25;
  HGRenderNode *v26;
  HGRenderJob *v27;
  PVRenderManager *v28;
  uint64_t v29;
  HGColorConform ***v30;
  id v31;
  PVRenderManager *v32;
  HGRenderQueue *v33;
  HGBitmap *v34;
  HGBitmap *v35;
  HGNode **v36;
  HGColorConform *v37;
  uint64_t v38;
  id v39;
  HGColorClamp *v40;
  HGHWBlendFlipped *v41;
  HGColorConform **v42;

  v13 = a4;
  v14 = a5;
  if (v14)
  {
    v41 = *a1;
    v15 = v41;
    if (v41)
    {
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v41 + 16))(v41);
      v40 = v41;
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v41 + 16))(v41);
    }
    else
    {
      v40 = 0;
    }
    v39 = 0;
    ColorConformInput(&v40, v13, v14, 1, &v39, (HGColorConform **)&v36);
    v16 = v39;
    if (v15 == (HGColorConform *)v36)
    {
      if (v15)
        (*(void (**)(HGColorConform *))(*(_QWORD *)v15 + 24))(v15);
    }
    else
    {
      if (v15)
        (*(void (**)(HGColorConform *))(*(_QWORD *)v15 + 24))(v15);
      v15 = (HGColorConform *)v36;
      v41 = (HGHWBlendFlipped *)v36;
      v36 = 0;
    }
    if (v40)
      (*(void (**)(HGColorClamp *))(*(_QWORD *)v40 + 24))(v40);
    if (v16)
    {
      NSLog(CFSTR("Error in color conforming image source from %@ to %@"), v13, v14);
      *a7 = 0;
    }
    else
    {
      v30 = a7;
      v31 = v13;
      v17 = -[PVColorSpace isHDRSpace](v14, "isHDRSpace");
      if (v17)
        v18 = 2016686640;
      else
        v18 = 875704438;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v19 = HGRectMake4i(0, 0, a2, a3);
      v21 = v20;
      -[PVColorSpace nclcTriplet](v14, "nclcTriplet");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      PVCreateYUVPlanesWithBackfillBlackBackground(v19, v21, v19, v21, &v41, v22, v18, (uint64_t *)&v36);

      HGCVPixelBuffer::create(a6, a2, a3, v18, (HGObject **)&v42);
      if (v17)
        v23 = 3;
      else
        v23 = 1;
      v13 = v31;
      HGCVBitmap::create((HGCVPixelBuffer **)&v42, v23, 0, &v35);
      v16 = 0;
      if (v17)
        v24 = 11;
      else
        v24 = 10;
      HGCVBitmap::create((HGCVPixelBuffer **)&v42, v24, 1uLL, &v34);
      v25 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
      HGRenderNode::HGRenderNode(v25);
      if (v37 == (HGColorConform *)v36)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      HGRenderNode::SetNode(v25, *v36);
      HGRenderNode::SetBitmap(v25, v35);
      v26 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
      HGRenderNode::HGRenderNode(v26);
      if ((unint64_t)(v37 - (HGColorConform *)v36) <= 8)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      HGRenderNode::SetNode(v26, v36[1]);
      HGRenderNode::SetBitmap(v26, v34);
      v27 = (HGRenderJob *)HGObject::operator new(0x160uLL);
      HGRenderJob::HGRenderJob(v27);
      HGUserJob::SetPriority((uint64_t)v27, 1);
      HGUserJob::SetState((uint64_t)v27, 2);
      HGRenderJob::SetPriority((uint64_t)v27, 10);
      HGRenderJob::AddRenderNode(v27, v25);
      HGRenderJob::AddRenderNode(v27, v26);
      PVRenderManager::INSTANCE(v28, &v32);
      PVRenderManager::GetRenderQueue(v32, &v33);
      if (v32)
        (*(void (**)(PVRenderManager *))(*(_QWORD *)v32 + 24))(v32);
      if (v33)
      {
        v29 = HGRenderQueue::ExecuteRenderJob(v33, v27);
        if ((_DWORD)v29)
        {
          NSLog(CFSTR("HGRenderQueue error while rendering CVPixelBuffer with supplied color spaces: %d "), v29);
          *v30 = 0;
        }
        else
        {
          PVAddColorSpaceAttributesToCVPixelBuffer(v42[3], v14);
          *v30 = v42;
          v42 = 0;
        }
        if (v33)
          (*(void (**)(HGRenderQueue *))(*(_QWORD *)v33 + 24))(v33);
      }
      else
      {
        *v30 = 0;
      }
      if (v27)
        (*(void (**)(HGRenderJob *))(*(_QWORD *)v27 + 24))(v27);
      if (v26)
        (*(void (**)(HGRenderNode *))(*(_QWORD *)v26 + 24))(v26);
      if (v25)
        (*(void (**)(HGRenderNode *))(*(_QWORD *)v25 + 24))(v25);
      if (v34)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v34 + 24))(v34);
      if (v35)
        (*(void (**)(HGBitmap *))(*(_QWORD *)v35 + 24))(v35);
      if (v42)
        (*((void (**)(HGColorConform **))*v42 + 3))(v42);
      v42 = (HGColorConform **)&v36;
      std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    }

    if (v15)
      (*(void (**)(HGColorConform *))(*(_QWORD *)v15 + 24))(v15);
  }
  else
  {
    *a7 = 0;
  }

}

void sub_1B276B5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);
  v24 = *(_QWORD *)(v22 - 88);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  *(_QWORD *)(v22 - 88) = &a18;
  std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
  v25 = *(_QWORD *)(v22 - 96);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);

  _Unwind_Resume(a1);
}

void PVCreateCVPixelBufferFromCGImageRefWithColorSpaces(HGBitmapUtils *a1@<X0>, void *a2@<X1>, void *a3@<X2>, const char **a4@<X3>, HGColorConform ***a5@<X8>)
{
  id v9;
  id v10;
  HGBitmapLoader *v11;
  _anonymous_namespace_ *Width;
  char *Height;
  HGHWBlendFlipped *v14;
  HGBitmapLoader *v15;

  v9 = a2;
  v10 = a3;
  if (a1)
  {
    HGBitmapUtils::createBitmapLoader(a1, &v15);
    v11 = v15;
    v14 = v15;
    if (v15)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v15 + 16))(v15);
    Width = (_anonymous_namespace_ *)CGImageGetWidth(a1);
    Height = (char *)CGImageGetHeight(a1);
    PVCreateCVPixelBufferWithColorSpaces(&v14, Width, Height, v9, v10, a4, a5);
    if (v11)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v11 + 24))(v11);
    if (v15)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v15 + 24))(v15);
  }
  else
  {
    *a5 = 0;
  }

}

void sub_1B276B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

uint64_t PVMaximumCVPixelBufferSize(void)
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v1 = &OZWriggleBehavior_Factory::_instanceOnce;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&OZWriggleBehavior_Factory::_instanceOnce;
    if (v3)
    {
      PVMaximumCVPixelBufferSize(void)::maxCVPixelBufferSize = PVMaximumCVPixelBufferSize(void)::$_0::operator()();
      v1 = (_QWORD *)&OZWriggleBehavior_Factory::_instanceOnce;
    }
  }
  return v1[216];
}

uint64_t PVMaximumCVPixelBufferSize(void)::$_0::operator()()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZZ26PVMaximumCVPixelBufferSizevENK3__0clEv_block_invoke;
  block[3] = &unk_1E64D4F48;
  block[4] = &v3;
  if (PVMaximumCVPixelBufferSize(void)::$_0::operator() const(void)::once != -1)
    dispatch_once(&PVMaximumCVPixelBufferSize(void)::$_0::operator() const(void)::once, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

BOOL PVCanCreateCVPixelBuffer(CGSize a1)
{
  double height;
  double width;
  double v3;

  height = a1.height;
  width = a1.width;
  v3 = (double)(unint64_t)PVMaximumCVPixelBufferSize();
  return height <= v3 && width <= v3;
}

void PVAddColorSpaceAttributesToCVPixelBuffer(__CVBuffer *a1, PVColorSpace *a2)
{
  PVColorSpace *v3;
  PVColorSpace *v4;
  void *v5;
  const void *v6;
  const void *v7;
  OSType PixelFormatType;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  const void *v12;
  _QWORD v13[5];
  OSType v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    -[PVColorSpace nclcTriplet](v3, "nclcTriplet");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "colorPrimary"))
    {
      v6 = (const void *)objc_msgSend(v5, "colorPrimary");
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], v6, kCVAttachmentMode_ShouldPropagate);
    }
    if (objc_msgSend(v5, "transferFunction"))
    {
      v7 = (const void *)objc_msgSend(v5, "transferFunction");
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], v7, kCVAttachmentMode_ShouldPropagate);
    }
    if (objc_msgSend(v5, "ycbcrMatrix"))
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      {
        __cxa_atexit((void (*)(void *))std::unique_ptr<PVGCDLock>::~unique_ptr[abi:ne180100], &PVPixelFormatIsYCbCr::s_mapLock, &dword_1B2737000);
      }
      if ((v10 & 1) == 0
      {
        qword_1ED4D9280 = 0;
        qword_1ED4D9278 = 0;
        PVPixelFormatIsYCbCr::s_formatIsYCbCr = (uint64_t)&qword_1ED4D9278;
        __cxa_atexit((void (*)(void *))std::map<unsigned int,BOOL>::~map[abi:ne180100], &PVPixelFormatIsYCbCr::s_formatIsYCbCr, &dword_1B2737000);
      }
      if (PVPixelFormatIsYCbCr::onceToken != -1)
        dispatch_once(&PVPixelFormatIsYCbCr::onceToken, &__block_literal_global_16);
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___ZL20PVPixelFormatIsYCbCrj_block_invoke_2;
      v13[3] = &unk_1E64D4F90;
      v14 = PixelFormatType;
      v13[4] = &v15;
      dispatch_sync(*(dispatch_queue_t *)PVPixelFormatIsYCbCr::s_mapLock, v13);
      v11 = *((unsigned __int8 *)v16 + 24);
      _Block_object_dispose(&v15, 8);
      if (v11)
      {
        v12 = (const void *)objc_msgSend(v5, "ycbcrMatrix");
        CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], v12, kCVAttachmentMode_ShouldPropagate);
      }
    }

  }
}

void sub_1B276BC70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PVCreateHGBitmapWithStorage(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, HGBitmap **a5@<X8>)
{
  char *v9;
  uint64_t v10;
  void *v11;
  HGBitmap *v12;
  PVOwnedBufferStorage *v13;
  PVColorSpace *v14;

  v14 = a4;
  v10 = HGFormatUtils::rowBytesHint(a3, (const char *)(a2 - a1), v9);
  v11 = malloc_type_valloc((((uint64_t)(a2 - (a1 & 0xFFFFFFFF00000000)) >> 32) * v10 + 4095) & 0xFFFFFFFFFFFFF000, 0xD8DD7037uLL);
  v12 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v12, a1, a2, a3, v11, v10);
  *a5 = v12;
  v13 = (PVOwnedBufferStorage *)HGObject::operator new(0x20uLL);
  PVOwnedBufferStorage::PVOwnedBufferStorage(v13, v11, v14);
  HGBitmap::SetStorage(v12, v13);
  (*(void (**)(PVOwnedBufferStorage *))(*(_QWORD *)v13 + 24))(v13);

}

void sub_1B276BD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;

  HGObject::operator delete(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);

  _Unwind_Resume(a1);
}

void PVCreateHGBitmapFromCGImageRefWithStorage(CGImage *a1@<X0>, PVColorSpace *a2@<X1>, HGBitmap **a3@<X8>)
{
  const char *Width;
  unint64_t Height;
  size_t BitsPerPixel;
  size_t BitsPerComponent;
  CGImageAlphaInfo AlphaInfo;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  void *v15;
  CGColorSpace *v16;
  uint32_t v17;
  CGContext *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  HGBitmap *v23;
  PVOwnedBufferStorage *v24;
  PVColorSpace *v25;
  CGRect v26;
  CGRect v27;

  v25 = a2;
  Width = (const char *)CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  BitsPerPixel = CGImageGetBitsPerPixel(a1);
  BitsPerComponent = CGImageGetBitsPerComponent(a1);
  AlphaInfo = CGImageGetAlphaInfo(a1);
  v11 = AlphaInfo == kCGImageAlphaFirst || AlphaInfo == kCGImageAlphaPremultipliedFirst;
  v12 = PGHelium::convertBitsPerChannel((PGHelium *)(BitsPerPixel / BitsPerComponent), BitsPerComponent, v11);
  v14 = HGFormatUtils::rowBytesHint(v12, Width, v13);
  v15 = malloc_type_valloc((Height * v14 + 4095) & 0xFFFFFFFFFFFFF000, 0xD1EEE70EuLL);
  v16 = -[PVColorSpace cgColorSpace](v25, "cgColorSpace");
  v17 = CGImageGetAlphaInfo(a1);
  v18 = CGBitmapContextCreate(v15, (size_t)Width, Height, BitsPerComponent, v14, v16, v17);
  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  v26.size.width = (double)(unint64_t)Width;
  v26.size.height = (double)Height;
  CGContextClearRect(v18, v26);
  v27.origin.x = 0.0;
  v27.origin.y = 0.0;
  v27.size.width = (double)(unint64_t)Width;
  v27.size.height = (double)Height;
  CGContextDrawImage(v18, v27, a1);
  CGContextRelease(v18);
  v20 = HGRectMake4f(v19, 0.0, 0.0, (float)(unint64_t)Width, (float)Height);
  v22 = v21;
  v23 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v23, v20, v22, v12, v15, v14);
  *a3 = v23;
  v24 = (PVOwnedBufferStorage *)HGObject::operator new(0x20uLL);
  PVOwnedBufferStorage::PVOwnedBufferStorage(v24, v15, v25);
  HGBitmap::SetStorage(v23, v24);
  (*(void (**)(PVOwnedBufferStorage *))(*(_QWORD *)v24 + 24))(v24);

}

void sub_1B276BF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;

  HGObject::operator delete(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);

  _Unwind_Resume(a1);
}

void **std::vector<HGRef<HGNode>>::push_back[abi:ne180100](uint64_t *a1, void ***a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void ***v7;
  void **result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void ***v15;
  void **v16;
  void *v17[2];
  void ***v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(void ****)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = (void ***)&v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v18 = v15;
    v19 = &v14[8 * v13];
    v16 = *a2;
    *v15 = *a2;
    if (v16)
    {
      (*((void (**)(void **))*v16 + 2))(v16);
      v15 = v18;
    }
    v18 = v15 + 1;
    std::vector<HGRef<HGNode>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<HGRef<HGNode>>::~__split_buffer(v17);
  }
  else
  {
    result = *a2;
    *v7 = *a2;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B276C118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ26PVMaximumCVPixelBufferSizevENK3__0clEv_block_invoke(HGMetalDeviceInfo *a1)
{
  uint64_t result;

  result = HGMetalDeviceInfo::getMainDevice(a1);
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24) = *(_DWORD *)(result + 48);
  return result;
}

id **std::unique_ptr<PVGCDLock>::~unique_ptr[abi:ne180100](id **a1)
{
  std::unique_ptr<PVGCDLock>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::map<unsigned int,BOOL>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

id **std::unique_ptr<PVGCDLock>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,BOOL>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,BOOL>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void PVOwnedBufferStorage::PVOwnedBufferStorage(PVOwnedBufferStorage *this, void *a2, PVColorSpace *a3)
{
  PVColorSpace *v5;

  v5 = a3;
  HGObject::HGObject(this);
  *(_QWORD *)this = off_1E64D4FC0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = v5;
}

void sub_1B276C4FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PVOwnedBufferStorage::~PVOwnedBufferStorage(PVOwnedBufferStorage *this)
{
  void *v1;

  PVOwnedBufferStorage::~PVOwnedBufferStorage(this);
  HGObject::operator delete(v1);
}

{
  void *v2;

  *(_QWORD *)this = off_1E64D4FC0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
    free(v2);

  HGObject::~HGObject(this);
}

uint64_t std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v10 = v11;
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v7 = *((_QWORD *)&v17 + 1);
      }
      v7 -= 8;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B276C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGBitmap>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGBitmap>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGBitmap>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGBitmap>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a2 + 32); i != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*i)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      i = *(_QWORD **)(a2 + 32);
    }
    ++i;
  }
}

void **std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer(void **a1)
{
  std::__split_buffer<HGRef<HGBitmap>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<HGRef<HGBitmap>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD **)(v2 - 8);
      v2 -= 8;
      result = v5;
      v4[2] = v2;
      if (v5)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        v2 = v4[2];
      }
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HGRef<HGNode>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<HGRef<HGNode>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 8)
  {
    v5 = *(_QWORD **)(i - 8);
    result = v5;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<HGRef<HGNode>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>,std::reverse_iterator<HGRef<HGNode>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v10 = v11;
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v7 = *((_QWORD *)&v17 + 1);
      }
      v7 -= 8;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B276C9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGNode>>,std::reverse_iterator<HGRef<HGNode>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGNode>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGNode>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGNode>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGNode>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGNode>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGNode>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a2 + 32); i != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*i)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      i = *(_QWORD **)(a2 + 32);
    }
    ++i;
  }
}

void **std::__split_buffer<HGRef<HGNode>>::~__split_buffer(void **a1)
{
  std::__split_buffer<HGRef<HGNode>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<HGRef<HGNode>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD **)(v2 - 8);
      v2 -= 8;
      result = v5;
      v4[2] = v2;
      if (v5)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        v2 = v4[2];
      }
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t pv_buffer_size_for_string_representation(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  v5 = a1[3];
  v7[2] = a1[2];
  v7[3] = v5;
  return pv_get_string_representation((uint64_t)v7, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  float64x2_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  char *v19;
  size_t v20;
  int string_representation;
  char *v22;
  size_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  int v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  char *v34;
  size_t v35;
  int v36;
  char *v37;
  size_t v38;
  const char *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  int v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  int v59;
  uint64_t v60;
  int v61;
  char *v62;
  size_t v63;
  int v64;
  char *v65;
  size_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  size_t v72;
  int v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  char *v77;
  size_t v78;
  int v79;
  uint64_t v81;
  int euler_angles;
  unsigned int v83;
  _OWORD v84[2];
  _OWORD v85[2];
  _OWORD v86[2];
  _OWORD v87[2];
  _OWORD v88[2];
  float64x2_t v89[2];
  __int128 v90;
  __int128 v91;

  *(_QWORD *)&v91 = 0;
  v90 = 0uLL;
  v8 = *(float64x2_t *)(a1 + 48);
  v89[0] = *(float64x2_t *)(a1 + 32);
  v89[1] = v8;
  euler_angles = pv_simd_quaternion_get_euler_angles(v89, 4, (uint64_t)&v90);
  if (a2)
    v9 = a3;
  else
    v9 = 0;
  v10 = snprintf(a2, v9, "translation:");
  v11 = 0;
  v12 = v10;
  do
  {
    if (a2)
      v13 = &a2[v12];
    else
      v13 = 0;
    if (a2)
      v14 = a3 - v12;
    else
      v14 = 0;
    v15 = snprintf(v13, v14, "\n    %s: ", pv_get_string_representation[v11]);
    v16 = v12 + v15;
    v17 = v15 + v10;
    v18 = *(_OWORD *)(a1 + 16);
    v88[0] = *(_OWORD *)a1;
    v88[1] = v18;
    if (a2)
      v19 = &a2[v16];
    else
      v19 = 0;
    if (a2)
      v20 = a3 - v16;
    else
      v20 = 0;
    string_representation = pv_get_string_representation(*((double *)v88 + (v11 & 3)), v19, v20, a4);
    v10 = v17 + string_representation;
    v12 = v16 + string_representation;
    ++v11;
  }
  while (v11 != 3);
  if (a2)
    v22 = &a2[v12];
  else
    v22 = 0;
  if (a2)
    v23 = a3 - v12;
  else
    v23 = 0;
  v24 = snprintf(v22, v23, "\nscale:");
  v25 = 0;
  v26 = v24 + v10;
  v27 = v12 + v24;
  do
  {
    if (a2)
      v28 = &a2[v27];
    else
      v28 = 0;
    if (a2)
      v29 = a3 - v27;
    else
      v29 = 0;
    v30 = snprintf(v28, v29, "\n    %s: ", pv_get_string_representation[v25]);
    v31 = v27 + v30;
    v32 = v30 + v26;
    v33 = *(_OWORD *)(a1 + 80);
    v87[0] = *(_OWORD *)(a1 + 64);
    v87[1] = v33;
    if (a2)
      v34 = &a2[v31];
    else
      v34 = 0;
    if (a2)
      v35 = a3 - v31;
    else
      v35 = 0;
    v36 = pv_get_string_representation(*((double *)v87 + (v25 & 3)), v34, v35, a4);
    v26 = v32 + v36;
    v27 = v31 + v36;
    ++v25;
  }
  while (v25 != 3);
  if (a2)
    v37 = &a2[v27];
  else
    v37 = 0;
  if (a2)
    v38 = a3 - v27;
  else
    v38 = 0;
  v39 = "FAILED";
  if (euler_angles)
    v39 = "OK";
  v81 = a1;
  v40 = snprintf(v37, v38, "\nrotation: %s (%s)", "ZXY", v39);
  v41 = 0;
  v42 = v40 + v26;
  v43 = v27 + v40;
  v83 = a4;
  v44 = a4;
  do
  {
    if (a2)
      v45 = &a2[v43];
    else
      v45 = 0;
    if (a2)
      v46 = a3 - v43;
    else
      v46 = 0;
    v47 = snprintf(v45, v46, "\n    %s: ", pv_get_string_representation[v41]);
    v48 = v43 + v47;
    v86[0] = v90;
    v86[1] = v91;
    if (a2)
      v49 = &a2[v48];
    else
      v49 = 0;
    if (a2)
      v50 = a3 - v48;
    else
      v50 = 0;
    v51 = pv_get_string_representation(*((double *)v86 + (v41 & 3)) * 180.0 / 3.14159265, v49, v50, v44);
    v52 = v48 + v51;
    if (a2)
      v53 = &a2[v52];
    else
      v53 = 0;
    if (a2)
      v54 = a3 - v52;
    else
      v54 = 0;
    v55 = snprintf(v53, v54, "° (");
    v56 = v52 + v55;
    v85[0] = v90;
    v85[1] = v91;
    if (a2)
      v57 = &a2[v56];
    else
      v57 = 0;
    if (a2)
      v58 = a3 - v56;
    else
      v58 = 0;
    v59 = pv_get_string_representation(*((double *)v85 + (v41 & 3)), v57, v58, v44);
    v60 = v56 + v59;
    v61 = v47 + v42 + v51 + v55 + v59;
    if (a2)
      v62 = &a2[v60];
    else
      v62 = 0;
    if (a2)
      v63 = a3 - v60;
    else
      v63 = 0;
    v64 = snprintf(v62, v63, ")");
    v42 = v61 + v64;
    v43 = v60 + v64;
    ++v41;
  }
  while (v41 != 3);
  if (a2)
    v65 = &a2[v43];
  else
    v65 = 0;
  if (a2)
    v66 = a3 - v43;
  else
    v66 = 0;
  v67 = snprintf(v65, v66, "\nshear:");
  v68 = 0;
  LODWORD(v69) = v67 + v42;
  v70 = v43 + v67;
  do
  {
    if (a2)
      v71 = &a2[v70];
    else
      v71 = 0;
    if (a2)
      v72 = a3 - v70;
    else
      v72 = 0;
    v73 = snprintf(v71, v72, "\n    %s: ", pv_get_string_representation[v68]);
    v74 = v70 + v73;
    v75 = v73 + v69;
    v76 = *(_OWORD *)(v81 + 112);
    v84[0] = *(_OWORD *)(v81 + 96);
    v84[1] = v76;
    if (a2)
      v77 = &a2[v74];
    else
      v77 = 0;
    if (a2)
      v78 = a3 - v74;
    else
      v78 = 0;
    v79 = pv_get_string_representation(*((double *)v84 + (v68 & 3)), v77, v78, v83);
    v69 = (v75 + v79);
    v70 = v74 + v79;
    ++v68;
  }
  while (v68 != 3);
  return v69;
}

BOOL pv_transform_info_make(simd_float4x4 a1, PVTransformInfo *a2)
{
  _BOOL8 result;
  uint64_t v4;
  float32x2_t v5;
  float64x2_t v6;
  __int128 v7;
  float32x4_t v8;
  int8x16_t v9;
  unsigned __int32 v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  unsigned __int32 v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  double v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  simd_float3x3 v34;
  float64x2_t v35;
  simd_float4 v36;
  simd_float3 v37;
  simd_float3 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float v46;
  float v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v56;
  float32_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float v65;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float v74;
  unsigned int v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  simd_float4 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  simd_float4 v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  simd_float3 v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  simd_float3 v112;
  _OWORD v113[8];
  simd_float4x4 v114;
  simd_float4x4 v115;
  simd_float4x4 v116;
  simd_float4x4 v117;
  simd_float4x4 v118;
  simd_float4x4 v119;
  simd_float4x4 v120;
  simd_float4x4 v121;
  simd_float4x4 v122;

  if (a1.columns[3].f32[3] > -0.00001 && a1.columns[3].f32[3] < 0.00001)
    return 0;
  v4 = MEMORY[0x1E0C83FF0];
  *(double *)v114.columns[0].i64 = pv_simd_normalize(a1);
  v6 = vcvtq_f64_f32(v5);
  *(double *)&v7 = *((float *)&v7 + 2);
  *(float64x2_t *)a2 = v6;
  *((_OWORD *)a2 + 1) = v7;
  v114.columns[0].i32[3] = *(_DWORD *)(v4 + 12);
  v114.columns[1].i32[3] = *(_DWORD *)(v4 + 28);
  v99 = (int32x4_t)v114.columns[1];
  v106 = (int32x4_t)v114.columns[0];
  v114.columns[2].i32[3] = *(_DWORD *)(v4 + 44);
  v114.columns[3] = *(simd_float4 *)(v4 + 48);
  v85 = (__n128)v114.columns[3];
  v92 = (__n128)v114.columns[2];
  *(double *)v8.i64 = pv_simd_matrix_get_row(v114, 0);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)v9.i8 = vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  v10 = vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1)).u32[0];
  *((double *)a2 + 8) = sqrtf(vaddv_f32(*(float32x2_t *)v9.i8));
  *(float32x2_t *)v9.i8 = vrsqrte_f32((float32x2_t)v10);
  *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v10, vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)));
  v82 = vmulq_n_f32(v8, vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v10, vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8))).f32[0]);
  *(double *)v115.columns[0].i64 = pv_simd_matrix_set_row(0, v106, v99, v92, v85, (int32x4_t)v82);
  v100 = (int32x4_t)v115.columns[1];
  v107 = (int32x4_t)v115.columns[0];
  v86 = (__n128)v115.columns[3];
  v93 = (__n128)v115.columns[2];
  *(double *)v11.i64 = pv_simd_matrix_get_row(v115, 1);
  v12 = (int8x16_t)vmulq_f32(v11, v82);
  *(double *)v12.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *((_QWORD *)a2 + 12) = v12.i64[0];
  *(double *)v116.columns[0].i64 = pv_simd_matrix_set_row(1, v107, v100, v93, v86, (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v11.f32), vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v82.f32), *(double *)v12.i64))), vsubq_f64(vcvt_hight_f64_f32(v11), vmulq_n_f64(vcvt_hight_f64_f32(v82), *(double *)v12.i64))));
  v101 = (int32x4_t)v116.columns[1];
  v108 = (int32x4_t)v116.columns[0];
  v87 = (__n128)v116.columns[3];
  v94 = (__n128)v116.columns[2];
  *(double *)v13.i64 = pv_simd_matrix_get_row(v116, 1);
  v14 = (int8x16_t)vmulq_f32(v13, v13);
  *(float32x2_t *)v14.i8 = vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v15 = vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1)).u32[0];
  *((double *)a2 + 9) = sqrtf(vaddv_f32(*(float32x2_t *)v14.i8));
  *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v15);
  *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15, vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
  *(double *)v117.columns[0].i64 = pv_simd_matrix_set_row(1, v108, v101, v94, v87, (int32x4_t)vmulq_n_f32(v13, vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v15, vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).f32[0]));
  v102 = (int32x4_t)v117.columns[1];
  v109 = (int32x4_t)v117.columns[0];
  v88 = (__n128)v117.columns[3];
  v95 = (__n128)v117.columns[2];
  *((double *)a2 + 12) = *((double *)a2 + 12) / *((double *)a2 + 9);
  *(double *)v16.i64 = pv_simd_matrix_get_row(v117, 0);
  v83 = v16;
  v118.columns[1] = (simd_float4)v102;
  v118.columns[0] = (simd_float4)v109;
  v118.columns[3] = (simd_float4)v88;
  v118.columns[2] = (simd_float4)v95;
  *(double *)v17.i64 = pv_simd_matrix_get_row(v118, 2);
  v18 = (int8x16_t)vmulq_f32(v83, v17);
  *(double *)v18.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)));
  *((_QWORD *)a2 + 13) = v18.i64[0];
  *(double *)v119.columns[0].i64 = pv_simd_matrix_set_row(2, v109, v102, v95, v88, (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v17.f32), vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v83.f32), *(double *)v18.i64))), vsubq_f64(vcvt_hight_f64_f32(v17), vmulq_n_f64(vcvt_hight_f64_f32(v83), *(double *)v18.i64))));
  v103 = (int32x4_t)v119.columns[1];
  v110 = (int32x4_t)v119.columns[0];
  v89 = (__n128)v119.columns[3];
  v96 = (__n128)v119.columns[2];
  *(double *)v19.i64 = pv_simd_matrix_get_row(v119, 1);
  v84 = v19;
  v120.columns[1] = (simd_float4)v103;
  v120.columns[0] = (simd_float4)v110;
  v120.columns[3] = (simd_float4)v89;
  v120.columns[2] = (simd_float4)v96;
  *(double *)v20.i64 = pv_simd_matrix_get_row(v120, 2);
  v21 = (int8x16_t)vmulq_f32(v84, v20);
  *(double *)v21.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *((_QWORD *)a2 + 14) = v21.i64[0];
  *(double *)v121.columns[0].i64 = pv_simd_matrix_set_row(2, v110, v103, v96, v89, (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v20.f32), vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v84.f32), *(double *)v21.i64))), vsubq_f64(vcvt_hight_f64_f32(v20), vmulq_n_f64(vcvt_hight_f64_f32(v84), *(double *)v21.i64))));
  v104 = (int32x4_t)v121.columns[1];
  v111 = (int32x4_t)v121.columns[0];
  v90 = (__n128)v121.columns[3];
  v97 = (__n128)v121.columns[2];
  *(double *)v22.i64 = pv_simd_matrix_get_row(v121, 2);
  v23 = (int8x16_t)vmulq_f32(v22, v22);
  *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  v24 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1)).u32[0];
  *((double *)a2 + 10) = sqrtf(vaddv_f32(*(float32x2_t *)v23.i8));
  *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v24);
  *(float32x2_t *)v23.i8 = vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v24, vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)));
  *(double *)v34.columns[0].i64 = pv_simd_matrix_set_row(2, v111, v104, v97, v90, (int32x4_t)vmulq_n_f32(v22, vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v24, vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8))).f32[0]));
  v25 = (float32x4_t)v34.columns[0];
  v34.columns[0].i64[0] = *((_QWORD *)a2 + 10);
  v26 = *((double *)a2 + 13) / *(double *)v34.columns[0].i64;
  *(double *)v34.columns[0].i64 = *((double *)a2 + 14) / *(double *)v34.columns[0].i64;
  *((double *)a2 + 13) = v26;
  *((_QWORD *)a2 + 14) = v34.columns[0].i64[0];
  v27 = (float32x4_t)vextq_s8((int8x16_t)v34.columns[2], (int8x16_t)v34.columns[2], 8uLL);
  v29 = (float32x4_t)vextq_s8(v28, v28, 0xCuLL);
  v30 = (float32x4_t)vextq_s8((int8x16_t)v34.columns[2], (int8x16_t)v34.columns[2], 0xCuLL);
  v31 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
  v32 = (float32x4_t)vextq_s8(v28, v28, 4uLL);
  v33 = (float32x4_t)vextq_s8((int8x16_t)v34.columns[2], (int8x16_t)v34.columns[2], 4uLL);
  v34.columns[0] = (simd_float3)vmulq_f32(v25, vaddq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v34.columns[1], (int8x16_t)v34.columns[1], 0xCuLL), vsubq_f32(vmulq_f32(v33, v31), vmulq_f32(v27, v32))), vaddq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v34.columns[1], (int8x16_t)v34.columns[1], 4uLL), vsubq_f32(vmulq_f32(v27, v29), vmulq_f32(v30, v31))), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v34.columns[1], (int8x16_t)v34.columns[1],
                                                       8uLL),
                                        vsubq_f32(vmulq_f32(v30, v32), vmulq_f32(v33, v29))))));
  v31.i64[0] = vextq_s8((int8x16_t)v34.columns[0], (int8x16_t)v34.columns[0], 8uLL).u64[0];
  v91 = (simd_float4)v28;
  v98 = (simd_float4)v25;
  v105 = v34.columns[1];
  v112 = v34.columns[2];
  if (vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v34.columns[0].f32, *(int32x2_t *)v31.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v34.columns[0].f32, *(int32x2_t *)v31.f32))) < 0.0)
  {
    v35 = vnegq_f64(*((float64x2_t *)a2 + 5));
    *((float64x2_t *)a2 + 4) = vnegq_f64(*((float64x2_t *)a2 + 4));
    *((float64x2_t *)a2 + 5) = v35;
    v34.columns[0] = (simd_float3)v25;
    *(double *)v36.i64 = pv_simd_negate(v34);
    v36.i32[3] = v98.i32[3];
    v37.i32[3] = v105.i32[3];
    v38.i32[3] = v112.i32[3];
    v98 = v36;
    v105 = v37;
    v112 = v38;
  }
  v39 = *((_OWORD *)a2 + 5);
  v113[4] = *((_OWORD *)a2 + 4);
  v113[5] = v39;
  v40 = *((_OWORD *)a2 + 7);
  v113[6] = *((_OWORD *)a2 + 6);
  v113[7] = v40;
  v41 = *((_OWORD *)a2 + 1);
  v113[0] = *(_OWORD *)a2;
  v113[1] = v41;
  v42 = *((_OWORD *)a2 + 3);
  v113[2] = *((_OWORD *)a2 + 2);
  v113[3] = v42;
  result = pv_is_finite((uint64_t)v113);
  if (result)
  {
    v122.columns[0] = v98;
    v122.columns[1] = (simd_float4)v105;
    v122.columns[2] = (simd_float4)v112;
    v122.columns[3] = v91;
    *(double *)v43.i64 = pv_simd_matrix_get_rotation_matrix(v122);
    v46 = *(float *)&v45.i32[2] + (float)(*(float *)v43.i32 + *(float *)&v44.i32[1]);
    if (v46 >= 0.0)
    {
      v56 = sqrtf(v46 + 1.0);
      v57 = v56 + v56;
      v58 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v56 + v56));
      v59 = vmul_f32(v58, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v56 + v56), v58));
      v59.i32[0] = vmul_f32(v59, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v56 + v56), v59)).u32[0];
      v70 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v44, vuzp1q_s32(v44, v45)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v45, vzip2q_s32(v45, v43))), v59.f32[0]);
      v60.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v44.i8).u32[0];
      v60.f32[1] = v57;
      v59.i32[1] = 0.25;
      v73 = vmul_f32(v60, v59);
    }
    else if (*(float *)v43.i32 < *(float *)&v44.i32[1] || *(float *)v43.i32 < *(float *)&v45.i32[2])
    {
      v48 = 1.0 - *(float *)v43.i32;
      if (*(float *)&v44.i32[1] >= *(float *)&v45.i32[2])
      {
        v74 = sqrtf(*(float *)&v44.i32[1] + (float)(v48 - *(float *)&v45.i32[2]));
        *(float *)&v75 = v74 + v74;
        v76 = vrecpe_f32((float32x2_t)v75);
        v77 = vmul_f32(v76, vrecps_f32((float32x2_t)v75, v76));
        v78.i32[0] = vmul_f32(v77, vrecps_f32((float32x2_t)v75, v77)).u32[0];
        v77.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v44.i8).u32[0];
        v77.i32[1] = v75;
        v79 = (float32x2_t)vrev64_s32(*(int32x2_t *)v45.i8);
        v80 = (float32x2_t)vzip2q_s32(v44, v43).u64[0];
        v81.i32[0] = vadd_f32(v79, v80).u32[0];
        v81.i32[1] = vsub_f32(v79, v80).i32[1];
        v73 = vmul_n_f32(v81, v78.f32[0]);
        v78.i32[1] = 0.25;
        v70 = vmul_f32(v77, v78);
      }
      else
      {
        v49 = (float32x2_t)__PAIR64__(v43.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)&v45.i32[2] + (float)(v48 - *(float *)&v44.i32[1]))));
        v50 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v43, v44), *(float32x2_t *)v45.i8);
        v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 0);
        v52 = vsub_f32(*(float32x2_t *)v43.i8, v51);
        v51.i32[0] = 2.0;
        v51.i32[0] = vmul_f32(v49, v51).u32[0];
        v51.i32[1] = v52.i32[1];
        v53 = vrecpe_f32((float32x2_t)v51.u32[0]);
        v54 = vmul_f32(v53, vrecps_f32((float32x2_t)v51.u32[0], v53));
        v52.i32[0] = vmul_f32(v54, vrecps_f32((float32x2_t)v51.u32[0], v54)).u32[0];
        v70 = vmul_n_f32(v50, v52.f32[0]);
        __asm { FMOV            V2.2S, #0.25 }
        _D2.i32[1] = v52.i32[0];
        v73 = vmul_f32(v51, _D2);
      }
    }
    else
    {
      v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 0);
      v62 = vadd_f32(*(float32x2_t *)v43.i8, v61);
      v61.i32[0] = 2.0;
      v61.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v43.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v43.i32+ (float)((float)(1.0 - *(float *)&v44.i32[1]) - *(float *)&v45.i32[2])))), v61).u32[0];
      v61.i32[1] = v62.i32[1];
      v63 = vrecpe_f32((float32x2_t)v61.u32[0]);
      v64 = vmul_f32(v63, vrecps_f32((float32x2_t)v61.u32[0], v63));
      LODWORD(v65) = vmul_f32(v64, vrecps_f32((float32x2_t)v61.u32[0], v64)).u32[0];
      __asm { FMOV            V5.2S, #0.25 }
      _D5.f32[1] = v65;
      v70 = vmul_f32(v61, _D5);
      v71 = (float32x2_t)vzip2q_s32(v43, v44).u64[0];
      v72.i32[0] = vadd_f32(v71, *(float32x2_t *)v45.i8).u32[0];
      v72.i32[1] = vsub_f32(v71, *(float32x2_t *)&v45).i32[1];
      v73 = vmul_n_f32(v72, v65);
    }
    *((float64x2_t *)a2 + 2) = vcvtq_f64_f32(v70);
    *((float64x2_t *)a2 + 3) = vcvtq_f64_f32(v73);
    return 1;
  }
  return result;
}

BOOL pv_is_finite(uint64_t a1)
{
  __n128 v2;
  _BOOL8 result;
  __n128 v4;
  __n128 v5;
  int8x16_t v6[2];
  int8x16_t v7[2];
  __int128 v8[2];
  int8x16_t v9[2];
  simd_quatd v10;

  v2 = *(__n128 *)(a1 + 16);
  v9[0] = *(int8x16_t *)a1;
  v9[1] = (int8x16_t)v2;
  result = pv_is_finite(v9, *(double *)v9[0].i64, v2);
  if (result)
  {
    *(_OWORD *)&v10.vector.f64[2] = *(_OWORD *)(a1 + 48);
    v8[0] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v10.vector.f64 = v8[0];
    v8[1] = *(_OWORD *)&v10.vector.f64[2];
    result = pv_is_finite(v10, v8);
    if (result)
    {
      v4 = *(__n128 *)(a1 + 80);
      v7[0] = *(int8x16_t *)(a1 + 64);
      v7[1] = (int8x16_t)v4;
      result = pv_is_finite(v7, *(double *)v7[0].i64, v4);
      if (result)
      {
        v5 = *(__n128 *)(a1 + 112);
        v6[0] = *(int8x16_t *)(a1 + 96);
        v6[1] = (int8x16_t)v5;
        return pv_is_finite(v6, *(double *)v6[0].i64, v5);
      }
    }
  }
  return result;
}

{
  __n128 v2;
  _BOOL8 result;
  __n128 v4;
  __n128 v5;
  int8x16_t v6[2];
  int8x16_t v7[2];
  int8x16_t v8[2];

  v2 = *(__n128 *)(a1 + 16);
  v8[0] = *(int8x16_t *)a1;
  v8[1] = (int8x16_t)v2;
  result = pv_is_finite(v8, *(double *)v8[0].i64, v2);
  if (result)
  {
    v4 = *(__n128 *)(a1 + 48);
    v7[0] = *(int8x16_t *)(a1 + 32);
    v7[1] = (int8x16_t)v4;
    result = pv_is_finite(v7, *(double *)v7[0].i64, v4);
    if (result)
    {
      v5 = *(__n128 *)(a1 + 80);
      v6[0] = *(int8x16_t *)(a1 + 64);
      v6[1] = (int8x16_t)v5;
      return pv_is_finite(v6, *(double *)v6[0].i64, v5);
    }
  }
  return result;
}

BOOL pv_transform_info_make(uint64_t a1, uint64_t a2)
{
  int8x16_t v3;
  int8x16_t v4;
  double v5;
  _BOOL8 result;
  _QWORD *v7;
  int64x2_t v8;
  int8x16_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  float64x2_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  float64x2_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int8x16_t v71;
  int8x16_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  __int128 v79;
  double v80;
  __int128 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  int8x16_t v93;
  float64x2_t v94;
  float64x2_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  float64x2_t v107;
  float64x2_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float64x2_t v114;
  int8x16_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int8x16_t v127;
  simd_double4x4 v128;
  int8x16_t v129;
  int8x16_t v130;
  float64x2_t v131;
  __int128 v132;
  int8x16_t v133;
  __int128 v134;
  int8x16_t v135;
  __int128 v136;
  int64x2_t v137[2];
  int64x2_t v138[2];
  int64x2_t v139[2];
  float64x2_t v140;
  float64x2_t v141;
  int64x2_t v142[2];
  int64x2_t v143[2];
  float64x2_t v144;
  float64x2_t v145;
  int64x2_t v146[2];
  int64x2_t v147[2];
  int64x2_t v148[2];
  int64x2_t v149[2];
  float64x2_t v150;
  float64x2_t v151;
  int64x2_t v152[2];
  int64x2_t v153[2];
  int64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  int64x2_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  int64x2_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;

  v3 = *(int8x16_t *)(a1 + 96);
  v4 = *(int8x16_t *)(a1 + 112);
  v5 = *(double *)(a1 + 120);
  if (v5 > -0.0000001 && v5 < 0.0000001)
    return 0;
  v7 = (_QWORD *)MEMORY[0x1E0C83FD8];
  *(_OWORD *)v128.columns[1].f64 = *(_OWORD *)(MEMORY[0x1E0C83FD8] + 112);
  *(_OWORD *)&v128.columns[1].f64[2] = *(_OWORD *)(MEMORY[0x1E0C83FD8] + 96);
  v8 = *(int64x2_t *)(a1 + 64);
  v9 = *(int8x16_t *)(a1 + 80);
  v10 = *(float64x2_t *)(a1 + 32);
  v11 = *(float64x2_t *)(a1 + 48);
  v12 = *(float64x2_t *)(a1 + 16);
  v154 = *(int64x2_t *)a1;
  v155 = v12;
  v156 = v10;
  v157 = v11;
  v158 = v8;
  v159 = v9;
  v160 = v3;
  v161 = v4;
  pv_simd_normalize((uint64_t)&v154, (uint64_t)&v162);
  v13.f64[0] = v163.f64[0];
  v15.f64[0] = v165.f64[0];
  v114 = v164;
  v14 = v164;
  v121 = (int64x2_t)v162;
  v17.i64[0] = v167.i64[0];
  *(int64x2_t *)v128.columns[0].f64 = v166;
  v16 = v166;
  v18 = v169;
  v13.f64[1] = (float64_t)v7[3];
  v15.f64[1] = (float64_t)v7[7];
  v100 = v15;
  v107 = v13;
  *(int8x16_t *)a2 = v168;
  *(int8x16_t *)(a2 + 16) = v18;
  v17.i64[1] = v7[11];
  v96 = v17;
  v162 = (float64x2_t)v121;
  v163 = v13;
  v164 = v14;
  v165 = v15;
  v166 = v16;
  v167 = v17;
  v169 = *(int8x16_t *)v128.columns[1].f64;
  v168 = *(int8x16_t *)&v128.columns[1].f64[2];
  pv_simd_matrix_get_row((int64x2_t *)&v162, 0, v153);
  v19 = (float64x2_t)v153[0];
  v20 = (float64x2_t)v153[1];
  v21 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v19, v19), vmulq_f64(v20, v20))));
  *(double *)(a2 + 64) = v21;
  v22 = 1.0 / v21;
  *(float64x2_t *)&v128.columns[0].f64[2] = vmulq_n_f64(v19, v22);
  v155 = v107;
  v154 = v121;
  v157 = v100;
  v156 = v114;
  v159 = v96;
  v158 = *(int64x2_t *)v128.columns[0].f64;
  v161 = *(int8x16_t *)v128.columns[1].f64;
  v160 = *(int8x16_t *)&v128.columns[1].f64[2];
  *(float64x2_t *)&v128.columns[1].f64[2] = vmulq_n_f64(v20, v22);
  v152[0] = *(int64x2_t *)&v128.columns[0].f64[2];
  v152[1] = *(int64x2_t *)&v128.columns[1].f64[2];
  pv_simd_matrix_set_row(&v154, v152, 0, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v162;
  v101 = v165;
  v108 = v163;
  v122 = v166;
  *(float64x2_t *)v128.columns[0].f64 = v164;
  v115 = v168;
  v93 = v169;
  v97 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 1, (int64x2_t *)&v150);
  v23 = v150;
  v24 = v151;
  v25 = vaddq_f64(vmulq_f64(*(float64x2_t *)&v128.columns[0].f64[2], v150), vmulq_f64(*(float64x2_t *)&v128.columns[1].f64[2], v151));
  *(_QWORD *)&v26 = *(_OWORD *)&vaddq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1));
  *(double *)(a2 + 96) = vaddvq_f64(v25);
  v154 = *(int64x2_t *)v128.columns[1].f64;
  v155 = v108;
  v156 = *(float64x2_t *)v128.columns[0].f64;
  v157 = v101;
  v158 = v122;
  v159 = v97;
  v160 = v115;
  v161 = v93;
  v149[0] = (int64x2_t)vsubq_f64(v23, vmulq_n_f64(*(float64x2_t *)&v128.columns[0].f64[2], v26));
  v149[1] = (int64x2_t)vsubq_f64(v24, vmulq_n_f64(*(float64x2_t *)&v128.columns[1].f64[2], v26));
  pv_simd_matrix_set_row(&v154, v149, 1, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  v116 = v165;
  v123 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  v102 = v169;
  v109 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 1, v148);
  v27 = (float64x2_t)v148[0];
  v28 = (float64x2_t)v148[1];
  v29 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v27, v27), vmulq_f64(v28, v28))));
  *(double *)(a2 + 72) = v29;
  v30 = 1.0 / v29;
  v155 = v123;
  v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  v157 = v116;
  v156 = *(float64x2_t *)v128.columns[1].f64;
  v159 = v109;
  v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  v161 = v102;
  v160 = *(int8x16_t *)v128.columns[0].f64;
  v147[0] = (int64x2_t)vmulq_n_f64(v27, v30);
  v147[1] = (int64x2_t)vmulq_n_f64(v28, v30);
  pv_simd_matrix_set_row(&v154, v147, 1, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  v31 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  v117 = v165;
  v124 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  v32 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  v103 = v169;
  v110 = v167;
  *(double *)(a2 + 96) = *(double *)(a2 + 96) / *(double *)(a2 + 72);
  v162 = *(float64x2_t *)&v128.columns[1].f64[2];
  v163 = v124;
  v164 = v31;
  v165 = v117;
  v166 = *(int64x2_t *)&v128.columns[0].f64[2];
  v167 = v110;
  v168 = v32;
  v169 = v103;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 0, v146);
  v94 = (float64x2_t)v146[1];
  v98 = (float64x2_t)v146[0];
  v162 = *(float64x2_t *)&v128.columns[1].f64[2];
  v163 = v124;
  v164 = *(float64x2_t *)v128.columns[1].f64;
  v165 = v117;
  v166 = *(int64x2_t *)&v128.columns[0].f64[2];
  v167 = v110;
  v168 = *(int8x16_t *)v128.columns[0].f64;
  v169 = v103;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 2, (int64x2_t *)&v144);
  v33 = v144;
  v34 = v145;
  v35 = vaddq_f64(vmulq_f64(v98, v144), vmulq_f64(v94, v145));
  *(_QWORD *)&v36 = *(_OWORD *)&vaddq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1));
  *(double *)(a2 + 104) = vaddvq_f64(v35);
  v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  v155 = v124;
  v156 = *(float64x2_t *)v128.columns[1].f64;
  v157 = v117;
  v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  v159 = v110;
  v160 = *(int8x16_t *)v128.columns[0].f64;
  v161 = v103;
  v143[0] = (int64x2_t)vsubq_f64(v33, vmulq_n_f64(v98, v36));
  v143[1] = (int64x2_t)vsubq_f64(v34, vmulq_n_f64(v94, v36));
  pv_simd_matrix_set_row(&v154, v143, 2, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  v118 = v165;
  v125 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  v104 = v169;
  v111 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 1, v142);
  v99 = (float64x2_t)v142[0];
  v95 = (float64x2_t)v142[1];
  v163 = v125;
  v162 = *(float64x2_t *)&v128.columns[1].f64[2];
  v165 = v118;
  v164 = *(float64x2_t *)v128.columns[1].f64;
  v167 = v111;
  v166 = *(int64x2_t *)&v128.columns[0].f64[2];
  v169 = v104;
  v168 = *(int8x16_t *)v128.columns[0].f64;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 2, (int64x2_t *)&v140);
  v37 = v140;
  v38 = v141;
  v39 = vaddq_f64(vmulq_f64(v99, v140), vmulq_f64(v95, v141));
  *(_QWORD *)&v40 = *(_OWORD *)&vaddq_f64(v39, (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1));
  *(double *)(a2 + 112) = vaddvq_f64(v39);
  v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  v155 = v125;
  v156 = *(float64x2_t *)v128.columns[1].f64;
  v157 = v118;
  v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  v159 = v111;
  v160 = *(int8x16_t *)v128.columns[0].f64;
  v161 = v104;
  v139[0] = (int64x2_t)vsubq_f64(v37, vmulq_n_f64(v99, v40));
  v139[1] = (int64x2_t)vsubq_f64(v38, vmulq_n_f64(v95, v40));
  pv_simd_matrix_set_row(&v154, v139, 2, (int64x2_t *)&v162);
  *(float64x2_t *)v128.columns[1].f64 = v164;
  *(float64x2_t *)&v128.columns[1].f64[2] = v162;
  v119 = v165;
  v126 = v163;
  *(int8x16_t *)v128.columns[0].f64 = v168;
  *(int64x2_t *)&v128.columns[0].f64[2] = v166;
  v105 = v169;
  v112 = v167;
  pv_simd_matrix_get_row((int64x2_t *)&v162, 2, v138);
  v41 = (float64x2_t)v138[0];
  v42 = (float64x2_t)v138[1];
  v43 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v41, v41), vmulq_f64(v42, v42))));
  *(double *)(a2 + 80) = v43;
  v44 = 1.0 / v43;
  v155 = v126;
  v154 = *(int64x2_t *)&v128.columns[1].f64[2];
  v157 = v119;
  v156 = *(float64x2_t *)v128.columns[1].f64;
  v159 = v112;
  v158 = *(int64x2_t *)&v128.columns[0].f64[2];
  v161 = v105;
  v160 = *(int8x16_t *)v128.columns[0].f64;
  v137[0] = (int64x2_t)vmulq_n_f64(v41, v44);
  v137[1] = (int64x2_t)vmulq_n_f64(v42, v44);
  pv_simd_matrix_set_row(&v154, v137, 2, (int64x2_t *)&v162);
  v46 = v162;
  v45 = v163;
  v48 = (int8x16_t)v164;
  v47 = (int8x16_t)v165;
  v50 = (int8x16_t)v166;
  v49 = v167;
  v51 = v168;
  v52 = v169;
  v53 = *(double *)(a2 + 80);
  v54 = *(double *)(a2 + 104) / v53;
  v55 = *(double *)(a2 + 112) / v53;
  *(double *)(a2 + 104) = v54;
  *(double *)(a2 + 112) = v55;
  v56 = (float64x2_t)vextq_s8(v52, v51, 8uLL);
  v57 = (float64x2_t)vextq_s8(v51, v52, 8uLL);
  v58 = (float64x2_t)vextq_s8(v49, v50, 8uLL);
  v59 = (float64x2_t)vextq_s8(v50, v49, 8uLL);
  v60 = (float64x2_t)vextq_s8(v48, v47, 8uLL);
  v61 = (float64x2_t)vextq_s8(v47, v48, 8uLL);
  v62 = vmulq_f64(v58, v57);
  v63 = vmulq_f64(v59, v56);
  v64 = vaddq_f64(vmulq_f64(v60, vsubq_f64(vmulq_f64((float64x2_t)v49, v56), vmulq_f64(v58, (float64x2_t)v52))), vmulq_f64((float64x2_t)v47, vsubq_f64(v62, v63)));
  v65 = (int64x2_t)vmulq_f64(v45, vaddq_f64(vmulq_f64(v60, vsubq_f64(vmulq_f64(v58, (float64x2_t)v51), vmulq_f64((float64x2_t)v50, v56))), vaddq_f64(vmulq_f64(v61, vsubq_f64(vmulq_f64((float64x2_t)v50, v57), vmulq_f64(v59, (float64x2_t)v51))), vmulq_f64((float64x2_t)v48, vsubq_f64(v63, v62)))));
  v66 = (int64x2_t)vmulq_f64(v46, vaddq_f64(vmulq_f64(v61, vsubq_f64(vmulq_f64(v59, (float64x2_t)v52), vmulq_f64((float64x2_t)v49, v57))), v64));
  v127 = v52;
  *(int8x16_t *)v128.columns[0].f64 = v51;
  *(int8x16_t *)v128.columns[1].f64 = v47;
  *(float64x2_t *)&v128.columns[1].f64[2] = v45;
  *(int8x16_t *)&v128.columns[0].f64[2] = v49;
  if (vaddvq_f64(vsubq_f64((float64x2_t)vzip1q_s64(v66, v65), (float64x2_t)vzip2q_s64(v66, v65))) >= 0.0)
  {
    v106 = v50;
    v113 = v48;
    v120 = v46;
  }
  else
  {
    v67 = vnegq_f64(*(float64x2_t *)(a2 + 80));
    *(float64x2_t *)(a2 + 64) = vnegq_f64(*(float64x2_t *)(a2 + 64));
    *(float64x2_t *)(a2 + 80) = v67;
    *(float64x2_t *)v128.columns[2].f64 = v46;
    *(float64x2_t *)&v128.columns[2].f64[2] = v45;
    *(int8x16_t *)v128.columns[3].f64 = v48;
    *(int8x16_t *)&v128.columns[3].f64[2] = v47;
    v129 = v50;
    v130 = v49;
    pv_simd_negate((uint64_t)&v128.columns[2], &v131);
    *(_QWORD *)&v68 = v132;
    v113 = v133;
    v120 = v131;
    *(_QWORD *)&v69 = v134;
    *((_QWORD *)&v68 + 1) = *(_QWORD *)&v128.columns[1].f64[3];
    *((_QWORD *)&v69 + 1) = *(_QWORD *)&v128.columns[1].f64[1];
    v106 = v135;
    *(_QWORD *)&v70 = v136;
    *((_QWORD *)&v70 + 1) = *(_QWORD *)&v128.columns[0].f64[3];
    *(_OWORD *)v128.columns[1].f64 = v69;
    *(_OWORD *)&v128.columns[1].f64[2] = v68;
    *(_OWORD *)&v128.columns[0].f64[2] = v70;
  }
  v71 = *(int8x16_t *)(a2 + 80);
  v166 = *(int64x2_t *)(a2 + 64);
  v167 = v71;
  v72 = *(int8x16_t *)(a2 + 112);
  v168 = *(int8x16_t *)(a2 + 96);
  v169 = v72;
  v73 = *(float64x2_t *)(a2 + 16);
  v162 = *(float64x2_t *)a2;
  v163 = v73;
  v74 = *(float64x2_t *)(a2 + 48);
  v164 = *(float64x2_t *)(a2 + 32);
  v165 = v74;
  result = pv_is_finite((uint64_t)&v162);
  if (result)
  {
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v162 = v120;
    v163 = *(float64x2_t *)&v128.columns[1].f64[2];
    v164 = (float64x2_t)v113;
    v165 = *(float64x2_t *)v128.columns[1].f64;
    v166 = (int64x2_t)v106;
    v167 = *(int8x16_t *)&v128.columns[0].f64[2];
    v168 = *(int8x16_t *)v128.columns[0].f64;
    v169 = v127;
    pv_simd_matrix_get_rotation_matrix(&v162, (float64x2_t *)&v154);
    v75 = *(double *)v154.i64 + v156.f64[1] + *(double *)v159.i64;
    if (v75 >= 0.0)
    {
      v83 = sqrt(v75 + 1.0);
      v84 = v83 + v83;
      v85 = 1.0 / (v83 + v83);
      *(double *)&v79 = v85 * vsubq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
      v80 = (*(double *)v158.i64 - v155.f64[0]) * v85;
      *(double *)&v81 = v85 * vsubq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
      v82 = v84 * 0.25;
    }
    else if (*(double *)v154.i64 < v156.f64[1] || *(double *)v154.i64 < *(double *)v159.i64)
    {
      v86 = 1.0 - *(double *)v154.i64;
      if (v156.f64[1] >= *(double *)v159.i64)
      {
        v90 = sqrt(v156.f64[1] + v86 - *(double *)v159.i64);
        v91 = v90 + v90;
        v92 = 1.0 / (v90 + v90);
        *(double *)&v79 = v92 * vaddq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
        v80 = v91 * 0.25;
        *(double *)&v81 = v92 * vaddq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
        v82 = (*(double *)v158.i64 - v155.f64[0]) * v92;
      }
      else
      {
        v87 = sqrt(v86 - v156.f64[1] + *(double *)v159.i64);
        v88 = v87 + v87;
        v89 = 1.0 / (v87 + v87);
        *(double *)&v79 = (v155.f64[0] + *(double *)v158.i64) * v89;
        v80 = v89 * vaddq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
        *(double *)&v81 = v88 * 0.25;
        v82 = v89 * vsubq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
      }
    }
    else
    {
      v76 = sqrt(*(double *)v154.i64 + 1.0 - v156.f64[1] - *(double *)v159.i64);
      v77 = v76 + v76;
      v78 = 1.0 / v77;
      *(double *)&v79 = v77 * 0.25;
      v80 = v78 * vaddq_f64((float64x2_t)vdupq_laneq_s64(v154, 1), v156).f64[0];
      *(double *)&v81 = (v155.f64[0] + *(double *)v158.i64) * v78;
      v82 = v78 * vsubq_f64(v157, (float64x2_t)vdupq_laneq_s64(v158, 1)).f64[0];
    }
    *((double *)&v79 + 1) = v80;
    *((double *)&v81 + 1) = v82;
    *(_OWORD *)(a2 + 32) = v79;
    *(_OWORD *)(a2 + 48) = v81;
    return 1;
  }
  return result;
}

float64_t pv_transform_info_make(uint64_t a1, float64x2_t *a2, float64x2_t a3)
{
  __int128 v9;
  float64x2_t v10;
  float64x2_t v11;
  __int128 v12;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64_t result;
  float64x2_t v21;
  _OWORD v23[8];
  float64x2_t v24[2];
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  _BYTE v28[48];
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  __asm { FMOV            V1.2D, #-0.5 }
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v28[32] = v9;
  v10 = *(float64x2_t *)(a1 + 112);
  v29 = *(float64x2_t *)(a1 + 96);
  v30 = v10;
  v11 = *(float64x2_t *)(a1 + 16);
  v25 = *(float64x2_t *)a1;
  v26 = v11;
  v12 = *(_OWORD *)(a1 + 48);
  v27 = *(float64x2_t *)(a1 + 32);
  *(_OWORD *)v28 = v12;
  v24[0] = vmulq_f64(a3, _Q1);
  v24[1] = 0u;
  pv_simd_matrix_translate((__int128 *)&v25, v24, &v31);
  *(_OWORD *)&v28[32] = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  *(_QWORD *)v28 = 0;
  v25 = 0u;
  v26 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&v28[8] = _Q0;
  *(_OWORD *)&v28[24] = _Q0;
  v23[4] = v35;
  v23[5] = v36;
  v23[6] = v37;
  v23[7] = v38;
  v23[0] = v31;
  v23[1] = v32;
  v23[2] = v33;
  v23[3] = v34;
  pv_transform_info_make((uint64_t)v23, (uint64_t)&v25);
  __asm { FMOV            V0.2D, #0.5 }
  v15 = v26;
  v25 = vaddq_f64(vmulq_f64(a3, _Q0), v25);
  v16 = *(float64x2_t *)&v28[32];
  v17 = v29;
  v18 = *(float64x2_t *)v28;
  a2[4] = *(float64x2_t *)&v28[16];
  a2[5] = v16;
  v19 = v30;
  a2[6] = v17;
  a2[7] = v19;
  result = v27.f64[0];
  v21 = v25;
  a2[2] = v27;
  a2[3] = v18;
  *a2 = v21;
  a2[1] = v15;
  return result;
}

double pv_simd_float4x4_from_pv_transform_info(float64x2_t *a1)
{
  float32x2_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  float32_t v13;
  float v14;
  double v15;
  float32x4_t v16;
  float32_t v17;
  double v18;
  __n128 v19;
  __n128 v20;
  simd_float4x4 v22;

  *(float32x2_t *)v22.columns[1].f32 = vcvt_f32_f64(a1[2]);
  v2 = vcvt_f32_f64(a1[3]);
  v3 = vmul_f32(*(float32x2_t *)v22.columns[1].f32, *(float32x2_t *)v22.columns[1].f32).f32[0];
  v4 = vmuls_lane_f32(v22.columns[1].f32[1], *(float32x2_t *)v22.columns[1].f32, 1);
  v5 = vmul_f32(v2, v2).f32[0];
  v6 = vmuls_lane_f32(v2.f32[1], v2, 1);
  v7 = vmuls_lane_f32(v22.columns[1].f32[0], *(float32x2_t *)v22.columns[1].f32, 1);
  v8 = vmuls_lane_f32(v2.f32[0], v2, 1);
  v9 = vmul_f32(*(float32x2_t *)v22.columns[1].f32, v2);
  v22.columns[0].i32[3] = 0;
  v22.columns[0].f32[0] = v6 + (float)((float)(v3 - v4) - v5);
  v22.columns[2].i32[3] = 0;
  v22.columns[0].f32[1] = (float)(v7 + v8) + (float)(v7 + v8);
  v22.columns[0].f32[2] = (float)(v9.f32[0] - v9.f32[1]) + (float)(v9.f32[0] - v9.f32[1]);
  v10 = vmuls_lane_f32(v2.f32[0], *(float32x2_t *)v22.columns[1].f32, 1);
  v2.f32[0] = vmuls_lane_f32(v22.columns[1].f32[0], v2, 1);
  v22.columns[1].i32[3] = 0;
  v22.columns[1].f32[0] = (float)(v7 - v8) + (float)(v7 - v8);
  v22.columns[1].f32[1] = (float)(v6 + (float)(v4 - v5)) - v3;
  v22.columns[1].f32[2] = (float)(v10 + v2.f32[0]) + (float)(v10 + v2.f32[0]);
  v11 = vaddv_f32(v9);
  v22.columns[2].f32[0] = v11 + v11;
  v22.columns[2].f32[1] = (float)(v10 - v2.f32[0]) + (float)(v10 - v2.f32[0]);
  v22.columns[2].f32[2] = (float)((float)(v5 + v6) - v3) - v4;
  v22.columns[3] = (simd_float4)xmmword_1B304EFF0;
  v12 = a1[4].f64[0];
  v13 = a1[4].f64[1];
  v14 = a1[5].f64[0];
  v15 = pv_simd_matrix_scale(v22, v12, v13, v14);
  v16 = *(float32x4_t *)a1;
  *(float32x2_t *)v16.f32 = vcvt_f32_f64(*a1);
  v17 = a1[1].f64[0];
  v16.f32[2] = v17;
  return pv_simd_matrix_translate(v15, v18, v19, v20, v16);
}

double pv_simd_double4x4_from_pv_transform_info@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24)
{
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float64x2_t v45;
  float64x2_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double result;
  __int128 v51;
  float64x2_t v52[2];
  __int128 vars0;

  v27 = *(float64x2_t *)(a1 + 32);
  v26 = *(float64x2_t *)(a1 + 48);
  v28 = vmuld_n_f64(v27.f64[0], v27.f64[0]);
  v29 = *(double *)(a1 + 40);
  v30 = vmuld_lane_f64(v29, v27, 1);
  v31 = vmuld_n_f64(v26.f64[0], v26.f64[0]);
  v32 = vmuld_lane_f64(*(double *)(a1 + 56), v26, 1);
  *(double *)&v33 = v32 + v28 - v30 - v31;
  v34 = vmuld_lane_f64(v27.f64[0], v27, 1);
  v35 = vmuld_lane_f64(v26.f64[0], v26, 1);
  v36 = vmuld_n_f64(v27.f64[0], v26.f64[0]);
  v37 = vmuld_lane_f64(v29, v26, 1);
  *((double *)&v33 + 1) = v34 + v35 + v34 + v35;
  *(_OWORD *)a2 = v33;
  *(_OWORD *)(a2 + 16) = COERCE_UNSIGNED_INT64(v36 - v37 + v36 - v37);
  *(double *)&v33 = v34 - v35 + v34 - v35;
  v38 = vmuld_lane_f64(v26.f64[0], v27, 1);
  v26.f64[0] = vmuld_lane_f64(v27.f64[0], v26, 1);
  *((double *)&v33 + 1) = v32 + v30 - v31 - v28;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = COERCE_UNSIGNED_INT64(v38 + v26.f64[0] + v38 + v26.f64[0]);
  v27.f64[0] = v36 + v37 + v36 + v37;
  v27.f64[1] = v38 - v26.f64[0] + v38 - v26.f64[0];
  *(float64x2_t *)(a2 + 64) = v27;
  *(_OWORD *)(a2 + 80) = COERCE_UNSIGNED_INT64(v31 + v32 - v28 - v30);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 112) = xmmword_1B304EEE0;
  v39 = *(_OWORD *)(a1 + 64);
  v40 = *(_QWORD *)(a1 + 80);
  v41 = *(_OWORD *)(a2 + 80);
  a21 = *(_OWORD *)(a2 + 64);
  a22 = v41;
  v42 = *(_OWORD *)(a2 + 112);
  a23 = *(_OWORD *)(a2 + 96);
  a24 = v42;
  v43 = *(_OWORD *)(a2 + 16);
  a17 = *(_OWORD *)a2;
  a18 = v43;
  v44 = *(_OWORD *)(a2 + 48);
  a19 = *(_OWORD *)(a2 + 32);
  a20 = v44;
  pv_simd_matrix_scale(&a17, (_OWORD *)a2, v39, *((float64_t *)&v39 + 1), v40);
  v45 = *(float64x2_t *)a1;
  v46 = *(float64x2_t *)(a1 + 16);
  vars0 = *(_OWORD *)a2;
  v52[0] = v45;
  v52[1] = v46;
  pv_simd_matrix_translate(&vars0, v52, &a17);
  v47 = a22;
  *(_OWORD *)(a2 + 64) = a21;
  *(_OWORD *)(a2 + 80) = v47;
  v48 = a24;
  *(_OWORD *)(a2 + 96) = a23;
  *(_OWORD *)(a2 + 112) = v48;
  v49 = a18;
  *(_OWORD *)a2 = a17;
  *(_OWORD *)(a2 + 16) = v49;
  result = *(double *)&a19;
  v51 = a20;
  *(_OWORD *)(a2 + 32) = a19;
  *(_OWORD *)(a2 + 48) = v51;
  return result;
}

BOOL pv_simd_almost_equal_elements(uint64_t a1, uint64_t a2, double a3)
{
  __int128 v6;
  float64x2_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  double v13;
  double i;
  double j;
  double k;
  double m;
  double n;
  double ii;
  __int128 v20;
  __int128 v21;
  int v22;
  int8x16_t v23;
  int8x16_t v24;
  double v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  double v29;
  double v30;
  _BOOL8 result;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  _OWORD v41[2];
  _OWORD v42[2];
  float64x2_t v43[2];
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  *(_QWORD *)&v47 = 0;
  v6 = *(_OWORD *)(a1 + 48);
  v44 = *(float64x2_t *)(a1 + 32);
  v45 = v6;
  v46 = 0u;
  pv_simd_quaternion_get_euler_angles(&v44, 4, (uint64_t)&v46);
  *(_QWORD *)&v45 = 0;
  v7 = *(float64x2_t *)(a2 + 48);
  v43[0] = *(float64x2_t *)(a2 + 32);
  v43[1] = v7;
  v44 = 0u;
  pv_simd_quaternion_get_euler_angles(v43, 4, (uint64_t)&v44);
  v8 = 0;
  v11 = *(int8x16_t *)a1;
  v12 = *(int8x16_t *)a2;
  *(_QWORD *)&v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v10 = *(_QWORD *)(a2 + 16);
  v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
  v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
  while (1)
  {
    v42[0] = v11;
    v42[1] = v9;
    v13 = *((double *)v42 + (v8 & 3));
    v41[0] = v12;
    v41[1] = v10;
    if (vabdd_f64(v13, *((double *)v41 + (v8 & 3))) >= a3)
      break;
    if (++v8 == 3)
    {
      v33 = *(double *)&v47;
      v34 = *(double *)&v45;
      v35 = *((double *)&v46 + 1);
      v36 = v44;
      for (i = fmod(*(double *)&v46 + a3, 6.28318531); i < 0.0; i = i + 6.28318531)
        ;
      for (j = fmod(v36.f64[0] + a3, 6.28318531); j < 0.0; j = j + 6.28318531)
        ;
      if (vabdd_f64(i, j) < a3)
      {
        for (k = fmod(v35 + a3, 6.28318531); k < 0.0; k = k + 6.28318531)
          ;
        for (m = fmod(v36.f64[1] + a3, 6.28318531); m < 0.0; m = m + 6.28318531)
          ;
        if (vabdd_f64(k, m) < a3)
        {
          for (n = fmod(v33 + a3, 6.28318531); n < 0.0; n = n + 6.28318531)
            ;
          for (ii = fmod(v34 + a3, 6.28318531); ii < 0.0; ii = ii + 6.28318531)
            ;
          if (vabdd_f64(n, ii) < a3)
          {
            v22 = 0;
            v23 = *(int8x16_t *)(a1 + 64);
            v24 = *(int8x16_t *)(a2 + 64);
            *(_QWORD *)&v20 = *(_QWORD *)(a1 + 80);
            *(_QWORD *)&v21 = *(_QWORD *)(a2 + 80);
            v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
            v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
            while (1)
            {
              v40[0] = v23;
              v40[1] = v20;
              v25 = *((double *)v40 + (v22 & 3));
              v39[0] = v24;
              v39[1] = v21;
              if (vabdd_f64(v25, *((double *)v39 + (v22 & 3))) >= a3)
                break;
              if (++v22 == 3)
              {
                v26 = 0;
                v27 = *(int8x16_t *)(a1 + 96);
                v28 = *(int8x16_t *)(a2 + 96);
                *(_QWORD *)&v20 = *(_QWORD *)(a1 + 112);
                *(_QWORD *)&v21 = *(_QWORD *)(a2 + 112);
                v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
                v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
                do
                {
                  v38[0] = v27;
                  v38[1] = v20;
                  v29 = *((double *)v38 + (v26 & 3));
                  v37[0] = v28;
                  v37[1] = v21;
                  v30 = vabdd_f64(v29, *((double *)v37 + (v26 & 3)));
                  result = v30 < a3;
                }
                while (v30 < a3 && v26++ != 2);
                return result;
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return 0;
}

double pv_transform_info_lerp@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v7;
  float64x2_t *v10;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  __int128 v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  __n128 v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __n128 v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double result;
  __int128 v37;
  float64x2_t v38[2];
  float64x2_t v39[2];
  _OWORD v40[2];
  float64x2_t v41[2];
  float64x2_t v42[2];
  _OWORD v43[2];
  float64x2_t v44[2];
  float64x2_t v45[2];
  float64x2_t v46[2];
  _OWORD v47[2];
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;

  v7 = a5.n128_u64[0];
  a4[6] = 0u;
  a4[7] = 0u;
  a4[2] = 0u;
  v10 = (float64x2_t *)(a4 + 2);
  __asm { FMOV            V1.2D, #1.0 }
  a4[3] = 0u;
  a4[4] = _Q1;
  a4[5] = 0u;
  *((_QWORD *)a4 + 10) = 0x3FF0000000000000;
  v16 = a1[1];
  v17 = *a2;
  v18 = a2[1];
  v46[0] = *a1;
  a5.n128_u64[1] = *(_QWORD *)&v46[0].f64[1];
  v46[1] = v16;
  v45[0] = v17;
  v45[1] = v18;
  pv_simd_lerp(v46, v45, (uint64_t)v47, a5);
  v19 = v47[1];
  *a4 = v47[0];
  a4[1] = v19;
  if (!a3)
  {
    v20 = a1[2];
    v21 = a1[3];
    v22 = a2[2];
    v23 = a2[3];
    if (vaddvq_f64(vaddq_f64(vmulq_f64(v20, v22), vmulq_f64(v21, v23))) >= 0.0)
      goto LABEL_3;
LABEL_5:
    v50 = vnegq_f64(v22);
    v51 = vnegq_f64(v23);
    v48 = v20;
    v49 = v21;
    v24 = &v48;
    v25 = &v50;
    goto LABEL_6;
  }
  v20 = a1[2];
  v21 = a1[3];
  v22 = a2[2];
  v23 = a2[3];
  if (vaddvq_f64(vaddq_f64(vmulq_f64(v20, v22), vmulq_f64(v21, v23))) >= 0.0)
    goto LABEL_5;
LABEL_3:
  v50 = v20;
  v51 = v21;
  v48 = v22;
  v49 = v23;
  v24 = &v50;
  v25 = &v48;
LABEL_6:
  _simd_slerp_internal(v24, v25, v44, *(double *)&v7);
  v26 = v44[1];
  *v10 = v44[0];
  v10[1] = v26;
  v28 = a1[5];
  v29 = a2[4];
  v30 = a2[5];
  v42[0] = a1[4];
  v27.n128_u64[1] = *(_QWORD *)&v42[0].f64[1];
  v42[1] = v28;
  v41[0] = v29;
  v41[1] = v30;
  v27.n128_u64[0] = v7;
  pv_simd_lerp(v42, v41, (uint64_t)v43, v27);
  v31 = v43[1];
  a4[4] = v43[0];
  a4[5] = v31;
  v33 = a1[7];
  v34 = a2[6];
  v35 = a2[7];
  v39[0] = a1[6];
  v32.n128_u64[1] = *(_QWORD *)&v39[0].f64[1];
  v39[1] = v33;
  v38[0] = v34;
  v38[1] = v35;
  v32.n128_u64[0] = v7;
  pv_simd_lerp(v39, v38, (uint64_t)v40, v32);
  result = *(double *)v40;
  v37 = v40[1];
  a4[6] = v40[0];
  a4[7] = v37;
  return result;
}

void _simd_slerp_internal(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  double v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  long double v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;

  v6 = 1.0;
  v7 = 1.0 - a4;
  v8 = a1[1];
  v9 = a2[1];
  v10 = vsubq_f64(*a1, *a2);
  v11 = vsubq_f64(v8, v9);
  v10.f64[0] = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v10, v10), vmulq_f64(v11, v11))));
  v37 = v9;
  v38 = *a2;
  v33 = v8;
  v35 = *a1;
  v12 = vaddq_f64(*a1, *a2);
  v13 = vaddq_f64(v8, v9);
  v14 = atan2(v10.f64[0], sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v12, v12), vmulq_f64(v13, v13)))));
  v15 = v14 + v14;
  v16 = v14 + v14 == 0.0;
  v17 = 1.0;
  if (!v16)
    v17 = sin(v15) / v15;
  v18 = 1.0 / v17;
  if (v7 * v15 != 0.0)
    v6 = sin(v7 * v15) / (v7 * v15);
  v19 = v7 * (v18 * v6);
  v20 = vmulq_n_f64(v33, v19);
  v21 = vmulq_n_f64(v35, v19);
  v22 = v15 * a4;
  v23 = 1.0;
  if (v22 != 0.0)
  {
    v34 = v21;
    v36 = v20;
    v24 = sin(v22);
    v21 = v34;
    v20 = v36;
    v23 = v24 / v22;
  }
  v25 = v18 * v23 * a4;
  v26 = vmulq_n_f64(v37, v25);
  v27 = vaddq_f64(v21, vmulq_n_f64(v38, v25));
  v28 = vaddq_f64(v20, v26);
  v29 = vaddvq_f64(vaddq_f64(vmulq_f64(v27, v27), vmulq_f64(v28, v28)));
  if (v29 == 0.0)
  {
    v30 = (float64x2_t)xmmword_1B304EEE0;
    v31 = 0uLL;
  }
  else
  {
    v32 = 1.0 / sqrt(v29);
    v30 = vmulq_n_f64(v28, v32);
    v31 = vmulq_n_f64(v27, v32);
  }
  *a3 = v31;
  a3[1] = v30;
}

__n128 pv_simd_double4_from_PCVector4d@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = *a1;
  v3 = a1[1];
  *a2 = *a1;
  a2[1] = v3;
  return result;
}

__n128 pv_PCVector4d_from_simd_double4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void PVImagePropertiesForColorSpace(PVColorSpace *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  PVColorSpace *v6;

  v6 = a1;
  *(_QWORD *)(a3 + 16) = -[PVColorSpace cgColorSpace](v6, "cgColorSpace");
  if ((!-[PVColorSpace isP3d65GammaColorSpace](v6, "isP3d65GammaColorSpace") || (a2 & 1) != 0)
    && -[PVColorSpace isWideGamutSpace](v6, "isWideGamutSpace"))
  {
    *(_QWORD *)a3 = 0x1052476841;
    v5 = 4353;
  }
  else
  {
    *(_QWORD *)a3 = 0x842475241;
    v5 = 8194;
  }
  *(_DWORD *)(a3 + 8) = v5;

}

void sub_1B276E944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ConvertToHDR(HGColorConform **a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  HGColorConform *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HGColorConform *v15;
  void *v16;
  id v17;
  id v18;
  HGColorConform *v19;

  v17 = a2;
  v7 = a3;
  v8 = *a1;
  if (v8)
    (*(void (**)(HGColorConform *))(*(_QWORD *)v8 + 16))(v8);
  if ((objc_msgSend(v17, "isRec709GammaColorSpace", v17) & 1) != 0
    || (objc_msgSend(v18, "isP3d65GammaColorSpace") & 1) != 0)
  {
    v9 = objc_msgSend(v18, "isP3d65GammaColorSpace");
  }
  else
  {
    v10 = objc_msgSend(v18, "isWideGamutSpace");
    if (v10)
      v9 = 2;
    else
      v9 = 0;
    if (v10)
      v11 = 3;
    else
      v11 = 0;
    objc_msgSend(v18, "nclcTriplet");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "hgColorPrimary");
    objc_msgSend(v18, "nclcTriplet");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    PVCreateColorConform(v13, objc_msgSend(v14, "hgTransferFunction"), 0, v11, 1, 0, 0, &v19);

    v15 = v19;
    (*(void (**)(HGColorConform *, _QWORD, HGColorConform *))(*(_QWORD *)v19 + 120))(v19, 0, v8);
    if (v8 != v15)
    {
      if (v8)
        (*(void (**)(HGColorConform *))(*(_QWORD *)v8 + 24))(v8);
      v8 = v15;
      (*(void (**)(HGColorConform *))(*(_QWORD *)v15 + 16))(v15);
    }
    (*(void (**)(HGColorConform *))(*(_QWORD *)v15 + 24))(v15);
  }
  v16 = HGObject::operator new(0x1B0uLL);
  HGHLG::SDRToHLG::SDRToHLG((uint64_t)v16, v9, 1);
  (*(void (**)(void *, _QWORD, HGColorConform *))(*(_QWORD *)v16 + 120))(v16, 0, v8);
  *a4 = v16;
  if (v8)
    (*(void (**)(HGColorConform *))(*(_QWORD *)v8 + 24))(v8);

}

void sub_1B276EB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);

  _Unwind_Resume(a1);
}

void PVCreateColorConform(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, HGColorConform **a7@<X8>)
{
  PVCreateColorConform(a1, a2, a3, a4, a5, a6, 0, a7);
}

void ColorConformInput(HGColorClamp **a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, HGColorConform **a6@<X8>)
{
  PVColorSpace *v11;
  PVColorSpace *v12;
  HGColorClamp *v13;
  int v14;
  int v15;
  HGColorClamp *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HGColorConform *v23;
  HGPQ::OOTF *v24;
  HGHLG::InverseOOTF *v25;
  double v26;
  _BOOL4 v27;
  HGColorConform *v28;
  uint64_t v29;
  _BOOL4 v30;
  void *v31;
  uint64_t v32;
  void *v33;
  HGColorConform *v34;
  HGColorConform *v35;
  HGColorConform *v36;
  HGColorConform *v37;
  HGColorConform *v38;
  HGColorConform *v39;
  HGPQ::OOTF *v40;
  HGHLG::InverseOOTF *v41;
  float v42;
  uint64_t v43;
  _BOOL4 v44;
  unsigned __int8 v45;
  HGColorConform *v46;
  HGColorConform *v47;
  uint64_t v48;
  HGColorConform *v49;
  HGColorConform *v50;
  HGColorConform *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  HGColorConform *v56;
  HGColorConform *v57;
  char v58;
  char v59;
  HGColorClamp *v60;
  HGColorClamp *v61;
  void *v62;
  unint64_t v63;
  HGColorConform *v64;
  HGColorConform *v65;
  HGColorConform *v66;

  v63 = a2;
  v11 = a3;
  if ((objc_msgSend((id)v63, "isEqual:", v11) & 1) == 0 && v63 | (unint64_t)v11 && a4 != 3)
  {
    v12 = (PVColorSpace *)objc_msgSend((id)v63, "copy");
    v13 = *a1;
    *a6 = *a1;
    if (v13)
      (*(void (**)(HGColorClamp *))(*(_QWORD *)v13 + 16))(v13);
    v14 = -[PVColorSpace isExtendedSRGBColorSpace](v12, "isExtendedSRGBColorSpace")
       || -[PVColorSpace isSRGBColorSpace](v12, "isSRGBColorSpace");
    v15 = -[PVColorSpace isExtendedSRGBColorSpace](v11, "isExtendedSRGBColorSpace")
       || -[PVColorSpace isSRGBColorSpace](v11, "isSRGBColorSpace");
    if (objc_msgSend((id)v63, "isExtendedSRGBColorSpace")
      && -[PVColorSpace isSRGBColorSpace](v11, "isSRGBColorSpace")
      || objc_msgSend((id)v63, "isExtendedSRGBColorSpace")
      && -[PVColorSpace isRec709GammaColorSpace](v11, "isRec709GammaColorSpace"))
    {
      if (a4 == 2)
        PVLogError(CFSTR("xrSRGB to sRGB Gamut Mapping not Supported. Clamping"), CFSTR("ProVideo.ColorConform"), a5);
      v16 = (HGColorClamp *)HGObject::operator new(0x1C0uLL);
      HGColorClamp::HGColorClamp(v16);
      (*(void (**)(HGColorClamp *, _QWORD, HGColorClamp *))(*(_QWORD *)v16 + 120))(v16, 0, v13);
      if (v13 != v16)
      {
        if (v13)
          (*(void (**)(HGColorClamp *))(*(_QWORD *)v13 + 24))(v13);
        *a6 = v16;
        (*(void (**)(HGColorClamp *))(*(_QWORD *)v16 + 16))(v16);
      }
      (*(void (**)(HGColorClamp *))(*(_QWORD *)v16 + 24))(v16);
      goto LABEL_33;
    }
    if (v14 && -[PVColorSpace isRec709GammaColorSpace](v11, "isRec709GammaColorSpace")
      || v15 && -[PVColorSpace isRec709GammaColorSpace](v12, "isRec709GammaColorSpace"))
    {
LABEL_33:

      goto LABEL_34;
    }
    -[PVColorSpace nclcTriplet](v11, "nclcTriplet");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v17, "isInvalid") & 1) != 0)
    {

LABEL_31:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Null NCLC Triplets for conversion from (%@) to (%@)"), v12, v11);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      PVLogError(v19, CFSTR("ProVideo.ColorConform"), a5);

LABEL_32:
      goto LABEL_33;
    }
    v18 = objc_msgSend(v62, "isInvalid");

    if ((v18 & 1) != 0)
      goto LABEL_31;
    if (-[PVColorSpace isRec2100PQColorSpace](v12, "isRec2100PQColorSpace")
      || -[PVColorSpace isP3PQGammaColorSpace](v12, "isP3PQGammaColorSpace"))
    {
      -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "hgColorPrimary");
      -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      PVCreateColorConform(v21, objc_msgSend(v22, "hgTransferFunction"), 0, 3, 8, 0, 0, &v66);

      v23 = v66;
      (*(void (**)(HGColorConform *, _QWORD, HGColorClamp *))(*(_QWORD *)v66 + 120))(v66, 0, v13);
      v24 = (HGPQ::OOTF *)HGObject::operator new(0x1B0uLL);
      HGPQ::OOTF::OOTF(v24, 1, 100.0, 100.0);
      (*(void (**)(HGPQ::OOTF *, _QWORD, HGColorConform *))(*(_QWORD *)v24 + 120))(v24, 0, v23);
      v25 = (HGHLG::InverseOOTF *)HGObject::operator new(0x1C0uLL);
      HGHLG::InverseOOTF::InverseOOTF((uint64_t)v25, 1u, 100.0);
      (*(void (**)(HGHLG::InverseOOTF *, _QWORD, HGPQ::OOTF *))(*(_QWORD *)v25 + 120))(v25, 0, v24);
      *(float *)&v26 = HGHLG::InverseOOTF::setPeakDisplayLuminance(v25, 1000.0);
      v27 = -[PVColorSpace isRec2020LinearColorSpace](v11, "isRec2020LinearColorSpace", v26);
      if (v27)
      {
        if (v13 != v25)
        {
          if (v13)
            (*(void (**)(HGColorClamp *))(*(_QWORD *)v13 + 24))(v13);
          *a6 = v25;
          (*(void (**)(HGHLG::InverseOOTF *))(*(_QWORD *)v25 + 16))(v25);
        }
      }
      else
      {
        PVCreateColorConform(3, 8, 0, 3, 18, 0, 0, &v65);
        v28 = v65;
        (*(void (**)(HGColorConform *, _QWORD, HGHLG::InverseOOTF *))(*(_QWORD *)v65 + 120))(v65, 0, v25);
        if (v13 != v28)
        {
          if (v13)
            (*(void (**)(HGColorClamp *))(*(_QWORD *)v13 + 24))(v13);
          *a6 = v28;
          (*(void (**)(HGColorConform *))(*(_QWORD *)v28 + 16))(v28);
        }
        +[PVColorSpace rec2100HLGColorSpace](PVColorSpace, "rec2100HLGColorSpace");
        v29 = objc_claimAutoreleasedReturnValue();

        (*(void (**)(HGColorConform *))(*(_QWORD *)v28 + 24))(v28);
        v12 = (PVColorSpace *)v29;
      }
      (*(void (**)(HGHLG::InverseOOTF *))(*(_QWORD *)v25 + 24))(v25);
      (*(void (**)(HGPQ::OOTF *))(*(_QWORD *)v24 + 24))(v24);
      (*(void (**)(HGColorConform *))(*(_QWORD *)v23 + 24))(v23);
    }
    else
    {
      v27 = 0;
    }
    v30 = -[PVColorSpace isRec2020LinearColorSpace](v12, "isRec2020LinearColorSpace");
    if ((-[PVColorSpace isRec2100HLGColorSpace](v12, "isRec2100HLGColorSpace")
       || -[PVColorSpace isP3HLGGammaColorSpace](v12, "isP3HLGGammaColorSpace"))
      && !-[PVColorSpace isHDRSpace](v11, "isHDRSpace")
      && !-[PVColorSpace isRec2020GammaColorSpace](v11, "isRec2020GammaColorSpace"))
    {
      -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "hgColorPrimary");
      -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      PVCreateColorConform(v32, objc_msgSend(v33, "hgTransferFunction"), 0, 3, 8, 0, 0, &v66);

      v34 = v66;
      v35 = *a6;
      (*(void (**)(HGColorConform *, _QWORD, HGColorConform *))(*(_QWORD *)v66 + 120))(v66, 0, *a6);
      v27 = -[PVColorSpace isRec2020LinearColorSpace](v11, "isRec2020LinearColorSpace");
      if (v35 != v34)
      {
        if (v35)
          (*(void (**)(HGColorConform *))(*(_QWORD *)v35 + 24))(v35);
        *a6 = v34;
        (*(void (**)(HGColorConform *))(*(_QWORD *)v34 + 16))(v34);
      }
      (*(void (**)(HGColorConform *))(*(_QWORD *)v34 + 24))(v34);
    }
    else if (!v30)
    {
      goto LABEL_66;
    }
    if (!-[PVColorSpace isHDRSpace](v11, "isHDRSpace") && !v27)
    {
      v36 = (HGColorConform *)HGObject::operator new(0x1B0uLL);
      HGHLG::HLGToSDR::HLGToSDR((uint64_t)v36, 2);
      v37 = *a6;
      (*(void (**)(HGColorConform *, _QWORD, HGColorConform *))(*(_QWORD *)v36 + 120))(v36, 0, *a6);
      LOBYTE(v27) = -[PVColorSpace isRec709GammaColorSpace](v11, "isRec709GammaColorSpace");
      HGHLG::HLGToSDR::SetOutputIsRec709Gamma((uint64_t)v36, v27);
      if (v37 != v36)
      {
        if (v37)
          (*(void (**)(HGColorConform *))(*(_QWORD *)v37 + 24))(v37);
        *a6 = v36;
        (*(void (**)(HGColorConform *))(*(_QWORD *)v36 + 16))(v36);
      }
      (*(void (**)(HGColorConform *))(*(_QWORD *)v36 + 24))(v36);
    }
LABEL_66:
    if (!v27)
    {
      if (objc_msgSend((id)v63, "isProResLogColorSpace"))
      {
        if (ToSpaceProcessInHDR(v11))
        {
          v38 = (HGColorConform *)HGObject::operator new(0x320uLL);
          HGColorConform::HGColorConform(v38);
          HGColorConform::SetConversion((HGNode *)v38, 0, (char *)0xE, 1, 3);
          v39 = *a6;
          (*(void (**)(HGColorConform *, _QWORD, HGColorConform *))(*(_QWORD *)v38 + 120))(v38, 0, *a6);
          if (v39 != v38)
          {
            if (v39)
              (*(void (**)(HGColorConform *))(*(_QWORD *)v39 + 24))(v39);
            *a6 = v38;
            (*(void (**)(HGColorConform *))(*(_QWORD *)v38 + 16))(v38);
          }
          v40 = (HGPQ::OOTF *)HGObject::operator new(0x1B0uLL);
          HGPQ::OOTF::OOTF(v40, 1, 100.0, 100.0);
          (*(void (**)(HGPQ::OOTF *, _QWORD, HGColorConform *))(*(_QWORD *)v40 + 120))(v40, 0, v38);
          v41 = (HGHLG::InverseOOTF *)HGObject::operator new(0x1C0uLL);
          HGHLG::InverseOOTF::InverseOOTF((uint64_t)v41, 1u, 100.0);
          (*(void (**)(HGHLG::InverseOOTF *, _QWORD, HGPQ::OOTF *))(*(_QWORD *)v41 + 120))(v41, 0, v40);
          v42 = HGHLG::InverseOOTF::setPeakDisplayLuminance(v41, 1000.0);
          if (v38 != v41)
          {
            (*(void (**)(HGColorConform *, float))(*(_QWORD *)v38 + 24))(v38, v42);
            *a6 = v41;
            (*(void (**)(HGHLG::InverseOOTF *))(*(_QWORD *)v41 + 16))(v41);
          }
          +[PVColorSpace rec2020LinearColorSpace](PVColorSpace, "rec2020LinearColorSpace");
          v43 = objc_claimAutoreleasedReturnValue();

          v44 = -[PVColorSpace isRec2020LinearColorSpace](v11, "isRec2020LinearColorSpace");
          (*(void (**)(HGHLG::InverseOOTF *))(*(_QWORD *)v41 + 24))(v41);
          (*(void (**)(HGPQ::OOTF *))(*(_QWORD *)v40 + 24))(v40);
          (*(void (**)(HGColorConform *))(*(_QWORD *)v38 + 24))(v38);
          v12 = (PVColorSpace *)v43;
        }
        else
        {
          if ((v45 & 1) == 0
          {
            ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::$_0::operator()();
            __cxa_atexit((void (*)(void *))std::unique_ptr<HGColorConformLook3DLUT>::~unique_ptr[abi:ne180100], &ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::LUTData, &dword_1B2737000);
          }
          v46 = (HGColorConform *)HGObject::operator new(0x320uLL);
          HGColorConform::HGColorConform(v46);
          HGColorConform::SetLook3DLutConversion((uint64_t)v46, ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::LUTData, 0, 0);
          v47 = *a6;
          (*(void (**)(HGColorConform *, _QWORD, HGColorConform *))(*(_QWORD *)v46 + 120))(v46, 0, *a6);
          if (v47 != v46)
          {
            if (v47)
              (*(void (**)(HGColorConform *))(*(_QWORD *)v47 + 24))(v47);
            *a6 = v46;
            (*(void (**)(HGColorConform *))(*(_QWORD *)v46 + 16))(v46);
          }
          +[PVColorSpace rec709GammaColorSpace](PVColorSpace, "rec709GammaColorSpace");
          v48 = objc_claimAutoreleasedReturnValue();

          (*(void (**)(HGColorConform *))(*(_QWORD *)v46 + 24))(v46);
          v44 = 0;
          v12 = (PVColorSpace *)v48;
        }
      }
      else
      {
        v44 = 0;
      }
      if (NeedsConversionToHDR(v12, v11))
      {
        v49 = *a6;
        v64 = v49;
        if (v49)
          (*(void (**)(HGColorConform *))(*(_QWORD *)v49 + 16))(v49);
        ConvertToHDR(&v64, v12, v11, &v66);
        v50 = *a6;
        v51 = v66;
        if (*a6 == v66)
        {
          if (v50)
            (*(void (**)(HGColorConform *))(*(_QWORD *)v50 + 24))(v50);
        }
        else
        {
          if (v50)
            (*(void (**)(HGColorConform *))(*(_QWORD *)v50 + 24))(v50);
          *a6 = v51;
        }
        if (v64)
          (*(void (**)(HGColorConform *))(*(_QWORD *)v64 + 24))(v64);
        +[PVColorSpace rec2020LinearColorSpace](PVColorSpace, "rec2020LinearColorSpace");
        v52 = objc_claimAutoreleasedReturnValue();

        v12 = (PVColorSpace *)v52;
        if (-[PVColorSpace isRec2020LinearColorSpace](v11, "isRec2020LinearColorSpace") || v44)
          goto LABEL_102;
        goto LABEL_97;
      }
      if (!v44)
      {
LABEL_97:
        -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = objc_msgSend(v53, "hgColorPrimary");
        -[PVColorSpace nclcTriplet](v12, "nclcTriplet");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        PVCreateColorConform(v54, objc_msgSend(v55, "hgTransferFunction"), 0, objc_msgSend(v62, "hgColorPrimary"), objc_msgSend(v62, "hgTransferFunction"), 0, 0, &v66);

        v56 = v66;
        v57 = *a6;
        (*(void (**)(HGColorConform *, _QWORD, HGColorConform *))(*(_QWORD *)v66 + 120))(v66, 0, *a6);
        if (v57 != v56)
        {
          if (v57)
            (*(void (**)(HGColorConform *))(*(_QWORD *)v57 + 24))(v57);
          *a6 = v56;
          (*(void (**)(HGColorConform *))(*(_QWORD *)v56 + 16))(v56);
        }
        (*(void (**)(HGColorConform *))(*(_QWORD *)v56 + 24))(v56);
      }
    }
LABEL_102:
    if (-[PVColorSpace isWideGamutSpace](v12, "isWideGamutSpace"))
    {
      v58 = -[PVColorSpace isWideGamutSpace](v11, "isWideGamutSpace");
      v59 = a4 == 1 ? v58 : 1;
      if ((v59 & 1) == 0)
      {
        v60 = (HGColorClamp *)HGObject::operator new(0x1C0uLL);
        HGColorClamp::HGColorClamp(v60);
        v61 = *a6;
        (*(void (**)(HGColorClamp *, _QWORD, HGColorConform *))(*(_QWORD *)v60 + 120))(v60, 0, *a6);
        if (v61 != v60)
        {
          if (v61)
            (*(void (**)(HGColorClamp *))(*(_QWORD *)v61 + 24))(v61);
          *a6 = v60;
          (*(void (**)(HGColorClamp *))(*(_QWORD *)v60 + 16))(v60);
        }
        (*(void (**)(HGColorClamp *))(*(_QWORD *)v60 + 24))(v60);
      }
    }
    goto LABEL_32;
  }
  *a6 = *a1;
  *a1 = 0;
LABEL_34:

}

{
  id v11;
  HGColorClamp *v12;
  id v13;
  HGColorClamp *v14;

  v13 = a2;
  v11 = a3;
  v12 = *a1;
  v14 = v12;
  if (v12)
    (*(void (**)(HGColorClamp *))(*(_QWORD *)v12 + 16))(v12);
  ColorConformInput(&v14, v13, v11, a4, a5, a6);
  if (v14)
    (*(void (**)(HGColorClamp *))(*(_QWORD *)v14 + 24))(v14);

}

void sub_1B276F6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, id a13, uint64_t a14)
{
  void *v14;
  _QWORD *v15;
  void *v16;

  if (*v15)
    (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15);

  _Unwind_Resume(a1);
}

uint64_t ToSpaceProcessInHDR(PVColorSpace *a1)
{
  PVColorSpace *v1;
  uint64_t v2;

  v1 = a1;
  v2 = -[PVColorSpace isHDRSpace](v1, "isHDRSpace")
    || -[PVColorSpace isRec2020LinearColorSpace](v1, "isRec2020LinearColorSpace");

  return v2;
}

void sub_1B276FA6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::$_0::operator()()
{
  void *v0;
  uint64_t result;

  v0 = HGObject::operator new(0x78uLL);
  result = HGColorConformLook3DLUT::HGColorConformLook3DLUT(v0, 9);
  ColorConformInput(HGRef<HGNode>,PVColorSpace const*,PVColorSpace const*,PVColorSpaceConformIntent,NSError * {__autoreleasing}*)::LUTData = (uint64_t)v0;
  return result;
}

void sub_1B276FAB0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HGColorConformLook3DLUT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t NeedsConversionToHDR(PVColorSpace *a1, PVColorSpace *a2)
{
  PVColorSpace *v3;
  PVColorSpace *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  if (-[PVColorSpace isHDRSpace](v3, "isHDRSpace")
    || -[PVColorSpace isRec2020LinearColorSpace](v3, "isRec2020LinearColorSpace")
    || !ToSpaceProcessInHDR(v4))
  {
    v6 = 0;
  }
  else
  {
    -[PVColorSpace nclcTriplet](v3, "nclcTriplet");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isInvalid") ^ 1;

  }
  return v6;
}

void sub_1B276FB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B276FC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id PVCreateColorInColorSpace(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  CGColorSpace *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  CGColorSpace *v15;
  void *v16;
  float v18;
  uint64_t v19;
  PCColor v20;

  v9 = a1;
  v10 = (CGColorSpace *)objc_msgSend(v9, "cgColorSpace");
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  PCColor::PCColor(&v20, v14, v13, v12, v11, v10);
  v19 = 0;
  v18 = 0.0;
  v15 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  PCColor::getRGB(&v20, (float *)&v19 + 1, &v18, (float *)&v19, v15);
  objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *((float *)&v19 + 1), v18, *(float *)&v19, a5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  PCCFRef<CGColorSpace *>::~PCCFRef(&v20.var1._obj);

  return v16;
}

void sub_1B276FD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PVCreateColorWithInverseToneMap(void *a1)
{
  id v1;
  CGColor *v2;
  CGColorSpace *ColorSpace;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  const CGFloat *Components;
  float v9;
  float v10;
  float v11;
  void *v12;
  float v14[3];
  float v15[3];
  float v16;
  uint64_t v17;
  PCColor v18;

  v1 = objc_retainAutorelease(a1);
  v2 = (CGColor *)objc_msgSend(v1, "CGColor");
  ColorSpace = CGColorGetColorSpace(v2);
  if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB)
  {
    NSLog(CFSTR("Unexpected (non-RGB) color passed to PVCreateColorApplyingInverseToneMap"));
    goto LABEL_6;
  }
  +[PVColorSpace sRGBColorSpace](PVColorSpace, "sRGBColorSpace");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (ColorSpace == (CGColorSpace *)objc_msgSend(v4, "cgColorSpace"))
  {

    goto LABEL_8;
  }
  +[PVColorSpace extendedSRGBColorSpace](PVColorSpace, "extendedSRGBColorSpace");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "cgColorSpace");

  if (ColorSpace == (CGColorSpace *)v6)
  {
LABEL_8:
    Components = CGColorGetComponents(v2);
    v9 = *Components;
    v10 = Components[1];
    v11 = Components[2];
    PCColor::PCColor(&v18, v9, v10, v11, ColorSpace);
    v17 = 0;
    v16 = 0.0;
    +[PVColorSpace rec2020GammaColorSpace](PVColorSpace, "rec2020GammaColorSpace");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    PCColor::getRGB(&v18, (float *)&v17 + 1, (float *)&v17, &v16, (CGColorSpaceRef)objc_msgSend(v12, "cgColorSpace"));
    v15[0] = *((float *)&v17 + 1);
    LODWORD(v15[1]) = v17;
    v15[2] = v16;
    FxApplyBT2446A(v15, v14);
    PVCreateColorInColorSpace(v12, v14[0], v14[1], v14[2], Components[3]);
    v7 = (id)objc_claimAutoreleasedReturnValue();

    PCCFRef<CGColorSpace *>::~PCCFRef(&v18.var1._obj);
    goto LABEL_9;
  }
  NSLog(CFSTR("Unexpected (non-sRGB) color passed to PVCreateColorApplyingInverseToneMap"));
LABEL_6:
  v7 = v1;
LABEL_9:

  return v7;
}

void sub_1B276FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);

  _Unwind_Resume(a1);
}

void PVCreateColorConform(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, HGColorConform **a8@<X8>)
{
  HGColorConform *v16;
  id v17;

  v16 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v16);
  *a8 = v16;
  if ((HGColorConform::SetConversion((uint64_t)v16, a1, a2, a3, a4, a5, a6) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unable to setup color conform:\n <>From (primaries:%d, transfer:%d, matrix:%d)\n <>To   (primaries:%d, transfer:%d, matrix:%d)"), a1, a2, a3, a4, a5, a6);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    PVLogError(v17, CFSTR("ProVideo.ColorConform"), a7);

  }
}

void sub_1B277005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  uint64_t v16;

  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  _Unwind_Resume(a1);
}

CGColorSpace **PCCFRef<CGColorSpace *>::~PCCFRef(CGColorSpace **a1)
{
  CGColorSpace *v2;

  v2 = *a1;
  if (v2)
    PCCFRefTraits<CGColorSpace *>::release(v2);
  return a1;
}

uint64_t PVRenderJob::PVRenderJob(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  const char *v6;
  HGSynchronizable *v7;
  HGSynchronizable *v8;
  HGSynchronizable *v9;
  PVRenderManager *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = a2;
  HGObject::HGObject((HGObject *)a1);
  *(_QWORD *)a1 = off_1E64D5040;
  v4 = v3;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  PVPerfStats::FrameStats::FrameStats(a1 + 136);
  PerfTimer::PerfTimer((PerfTimer *)(a1 + 224));
  PerfTimer::PerfTimer((PerfTimer *)(a1 + 240));
  PerfTimer::PerfTimer((PerfTimer *)(a1 + 256));
  *(_DWORD *)(a1 + 272) = 0;
  objc_msgSend(*(id *)(a1 + 16), "videoCompositingContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (const char *)objc_msgSend(v5, "renderGraphDumpLevel");

  HGLogger::setLevel((HGLogger *)"graph", v6);
  v7 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v7);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v8);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v9);
  *(_QWORD *)(a1 + 120) = v9;
  PVRenderManager::INSTANCE(v10, &v14);
  v11 = *(_QWORD *)(a1 + 96);
  v12 = v14;
  if (v11 == v14)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  }
  else
  {
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v14;
    }
    *(_QWORD *)(a1 + 96) = v12;
  }

  return a1;
}

void sub_1B277026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void **v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (a10)
    (*((void (**)(void **))*a10 + 3))(a10);
  v15 = *(void **)(v10 + 200);
  if (v15)
  {
    *(_QWORD *)(v10 + 208) = v15;
    operator delete(v15);
  }
  v16 = *(_QWORD *)(v10 + 104);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v17 = *(_QWORD *)(v10 + 96);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  a10 = v13;
  std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v13 - 3;
  std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*v12)
    (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);

  HGObject::~HGObject((HGObject *)v10);
  _Unwind_Resume(a1);
}

void PVRenderJob::~PVRenderJob(PVRenderJob *this)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  *(_QWORD *)this = off_1E64D5040;
  v2 = (void **)((char *)this + 72);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  v4 = (_QWORD *)*((_QWORD *)this + 10);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
        v4 = (_QWORD *)*((_QWORD *)this + 10);
      }
      *v3++ = 0;
    }
    while (v3 != v4);
    v3 = *v2;
  }
  std::vector<HGRef<HGBitmap>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)v3);
  v6 = (_QWORD *)*((_QWORD *)this + 6);
  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (v6 != v5)
  {
    do
    {
      if (*v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
        v5 = (_QWORD *)*((_QWORD *)this + 7);
      }
      *v6++ = 0;
    }
    while (v6 != v5);
    v6 = (_QWORD *)*((_QWORD *)this + 6);
  }
  std::vector<HGRef<HGNode>>::__base_destruct_at_end[abi:ne180100]((_QWORD *)this + 6, (uint64_t)v6);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 14);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 15);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 5);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = (void *)*((_QWORD *)this + 25);
  if (v11)
  {
    *((_QWORD *)this + 26) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = *((_QWORD *)this + 12);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v15 = v2;
  std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)((char *)this + 48);
  std::vector<HGRef<HGNode>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v14 = *((_QWORD *)this + 5);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);

  HGObject::~HGObject((HGObject *)this);
}

{
  void *v1;

  PVRenderJob::~PVRenderJob(this);
  HGObject::operator delete(v1);
}

void PVRenderJob::InitFrameStats(PVRenderJob *this, int a2, CMTime *a3, char a4)
{
  CMTime v6;

  v6 = *a3;
  PVPerfStats::FrameStats::Init((PVPerfStats::FrameStats *)((char *)this + 136), 11, a2, &v6);
  *((_BYTE *)this + 192) = a4;
}

uint64_t PVRenderJob::GetFrameStats(PVRenderJob *this)
{
  return (uint64_t)this + 136;
}

id PVRenderJob::GetDelegate(PVRenderJob *this)
{
  return *((id *)this + 2);
}

void PVRenderJob::CancelJob(PVRenderJob *this, int a2)
{
  int v4;
  int v5;
  HGSynchronizable *v6;
  char v7;
  HGSynchronizable *v8;
  char v9;

  v8 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v9 = 0;
  HGSynchronizable::Lock(v8);
  v4 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v8);
  if (v4 != 5)
  {
    v6 = (HGSynchronizable *)*((_QWORD *)this + 14);
    v7 = 0;
    HGSynchronizable::Lock(v6);
    v8 = (HGSynchronizable *)*((_QWORD *)this + 4);
    v9 = 0;
    HGSynchronizable::Lock(v8);
    v5 = *((_DWORD *)this + 6);
    HGSynchronizer::~HGSynchronizer(&v8);
    *((_DWORD *)this + 32) = v5;
    v8 = (HGSynchronizable *)*((_QWORD *)this + 4);
    v9 = 0;
    HGSynchronizable::Lock(v8);
    *((_DWORD *)this + 6) = 5;
    HGSynchronizer::~HGSynchronizer(&v8);
    if (a2)
      objc_msgSend(*((id *)this + 2), "finishCancelledJob");
    if (*((_QWORD *)this + 13))
      PVRenderManager::CancelRenderJob(*((_QWORD *)this + 12), (HGRenderJob **)this + 13);
    HGSynchronizer::~HGSynchronizer(&v6);
  }
}

void sub_1B2770658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t PVRenderJob::State(PVRenderJob *this)
{
  uint64_t v2;
  HGSynchronizable *v4;
  char v5;

  v4 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v5 = 0;
  HGSynchronizable::Lock(v4);
  v2 = *((unsigned int *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v4);
  return v2;
}

void PVRenderJob::GraphBuildingJobNotification(PVRenderJob *this, HGRenderJob *a2)
{
  void *v3;
  uint64_t UserData;
  int State;
  int v6;
  HGSynchronizable *v7;
  char v8;

  v3 = (void *)MEMORY[0x1B5E29C50](this, a2);
  UserData = HGRenderJob::GetUserData((HGRenderJob *)this);
  State = HGRenderJob::GetState((HGRenderJob *)this);
  if (State > 1)
  {
    switch(State)
    {
      case 6:
        HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
        v7 = *(HGSynchronizable **)(UserData + 32);
        v8 = 0;
        HGSynchronizable::Lock(v7);
        v6 = 5;
        goto LABEL_9;
      case 4:
        PerfTimer::End((PerfTimer *)(UserData + 224));
        PVPerfStats::FrameStats::SetValueForIndex(UserData + 136, 0, *(double *)(UserData + 232) - *(double *)(UserData + 224));
        PVRenderJob::SetupRenderer((PVRenderJob *)UserData);
        PVRenderJob::BuildGraph((PVRenderJob *)UserData);
        PVRenderJob::SubmitRenderJob((PVRenderJob *)UserData);
        break;
      case 2:
        PerfTimer::Start((PerfTimer *)(UserData + 224));
        break;
    }
  }
  else if ((State + 1000) < 3)
  {
    HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
    v7 = *(HGSynchronizable **)(UserData + 32);
    v8 = 0;
    HGSynchronizable::Lock(v7);
    v6 = 6;
LABEL_9:
    *(_DWORD *)(UserData + 24) = v6;
    HGSynchronizer::~HGSynchronizer(&v7);
    PVRenderJob::FinishRequest((PVRenderJob *)UserData);
  }
  objc_autoreleasePoolPop(v3);
}

uint64_t PVRenderJob::SetupRenderer(PVRenderJob *this)
{
  HGRenderContext *RenderContext;
  uint64_t Renderer;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  RenderContext = (HGRenderContext *)HGRenderJob::GetRenderContext(*((HGRenderJob **)this + 13));
  Renderer = HGRenderContext::GetRenderer(RenderContext);
  v4 = Renderer;
  if (!Renderer)
  {
    v8 = *((_QWORD *)this + 5);
    v6 = (uint64_t *)((char *)this + 40);
    v5 = v8;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)Renderer + 16))(Renderer);
  v7 = *((_QWORD *)this + 5);
  v6 = (uint64_t *)((char *)this + 40);
  v5 = v7;
  if (v7 == v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v4 = *v6;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  if (v5)
    goto LABEL_6;
LABEL_7:
  *v6 = v4;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_1B277085C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void PVRenderJob::BuildGraph(PVRenderJob *this)
{
  const char *v2;
  const char *v3;
  HGSynchronizable *v4;
  char v5;
  _BYTE v6[16];
  PerfTimer v7;

  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v6, "kPVInstructionGraphToHeliumGraphLogContext", 1, "Build Helium Render Graph from Delegate");
  v7._start = *((double *)this + 4);
  LOBYTE(v7._end) = 0;
  HGSynchronizable::Lock(*(HGSynchronizable **)&v7._start);
  *((_DWORD *)this + 6) = 1;
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)&v7);
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v2) >= 1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(*((id *)this + 2), "packedFamilyCode");
    kdebug_trace();
  }
  PerfTimer::PerfTimer(&v7);
  PerfTimer::Start(&v7);
  PVRenderJob::SetJobsRendererParameters(this, *((HGRenderJob **)this + 13));
  objc_msgSend(*((id *)this + 2), "buildGraph:renderContext:frameStats:", (char *)this + 48, HGRenderJob::GetRenderContext(*((HGRenderJob **)this + 13)), (char *)this + 136);
  PerfTimer::End(&v7);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 2u, v7._end - v7._start);
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v3) >= 1)
    kdebug_trace();
  v4 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v5 = 0;
  HGSynchronizable::Lock(v4);
  if (*((_DWORD *)this + 6) == 1)
    *((_DWORD *)this + 6) = 2;
  HGSynchronizer::~HGSynchronizer(&v4);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v6);
}

void sub_1B2770A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void PVRenderJob::SubmitRenderJob(PVRenderJob *this)
{
  int v2;
  HGRenderJob **v3;
  HGRenderer *Renderer;
  HGRenderJob *v5;
  int v6;
  int v7;
  int v8;
  uint64_t UserTag;
  HGNode **i;
  HGNode *v11;
  HGRenderNode *v12;
  uint64_t v13;
  int v14;
  int v15;
  HGRenderJob *v16;
  HGSynchronizable *v17;
  char v18;
  HGSynchronizable *v19;
  char v20;

  v19 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v20 = 0;
  HGSynchronizable::Lock(v19);
  v2 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v19);
  if (v2 == 5)
  {
    PVRenderJob::FinishRequest(this);
    return;
  }
  v3 = (HGRenderJob **)((char *)this + 104);
  Renderer = (HGRenderer *)HGRenderJob::GetRenderer(*((HGRenderJob **)this + 13));
  v5 = (HGRenderJob *)HGObject::operator new(0x160uLL);
  HGRenderJob::HGRenderJob(v5);
  HGUserJob::SetPriority((uint64_t)v5, 0);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = objc_msgSend(*((id *)this + 2), "jobPriority");
  else
    v6 = 5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = objc_msgSend(*((id *)this + 2), "renderThreadPriority");
  else
    v7 = 3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = objc_msgSend(*((id *)this + 2), "renderContextPriority");
  else
    v8 = 5;
  HGRenderJob::SetPriority((uint64_t)v5, v6);
  HGRenderJob::SetGLContextPriority((uint64_t)v5, v8);
  HGRenderJob::SetRenderer(v5, Renderer);
  HGRenderJob::SetNotifyFunc(v5, (void (*)(HGRenderJob *))PVRenderJob::RenderJobNotification);
  HGRenderJob::SetRenderThreadPriority((uint64_t)v5, v7);
  UserTag = HGRenderJob::GetUserTag(*v3);
  HGRenderJob::SetUserTag(v5, UserTag);
  HGRenderJob::SetUserData(v5, this);
  PVRenderJob::SetJobsRendererParameters(this, v5);
  for (i = (HGNode **)*((_QWORD *)this + 6); i != *((HGNode ***)this + 7); ++i)
  {
    v11 = *i;
    if (*i)
      (*(void (**)(HGNode *))(*(_QWORD *)v11 + 16))(*i);
    v12 = (HGRenderNode *)HGObject::operator new(0xD0uLL);
    HGRenderNode::HGRenderNode(v12);
    HGRenderNode::SetNode(v12, v11);
    HGRenderNode::SetDestination((uint64_t)v12, 0);
    v13 = HGRenderJob::GetUserTag(v5);
    HGRenderNode::SetUserTag((uint64_t)v12, v13);
    HGRenderJob::AddRenderNode(v5, v12);
    if (v12)
      (*(void (**)(HGRenderNode *))(*(_QWORD *)v12 + 24))(v12);
    if (v11)
      (*(void (**)(HGNode *))(*(_QWORD *)v11 + 24))(v11);
  }
  v19 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v20 = 0;
  HGSynchronizable::Lock(v19);
  v14 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v19);
  if (v14 == 5)
  {
    PVRenderJob::FinishRequest(this);
    if (!v5)
      return;
LABEL_32:
    (*(void (**)(HGRenderJob *))(*(_QWORD *)v5 + 24))(v5);
    return;
  }
  v17 = (HGSynchronizable *)*((_QWORD *)this + 14);
  v18 = 0;
  HGSynchronizable::Lock(v17);
  v19 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v20 = 0;
  HGSynchronizable::Lock(v19);
  v15 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v19);
  if (v15 != 5)
  {
    v16 = *v3;
    if (*v3 != v5)
    {
      if (v16)
        (*(void (**)(HGRenderJob *))(*(_QWORD *)v16 + 24))(v16);
      *v3 = v5;
      if (v5)
        (*(void (**)(HGRenderJob *))(*(_QWORD *)v5 + 16))(v5);
    }
    PVRenderManager::EnqueueRenderJob(*((_QWORD *)this + 12), (HGRenderJob **)this + 13);
  }
  HGSynchronizer::~HGSynchronizer(&v17);
  if (v5)
    goto LABEL_32;
}

void sub_1B2770CFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void PVRenderJob::FinishRequest(PVRenderJob *this)
{
  int v2;
  const char *v3;
  const char *v4;
  void *v5;
  HGSynchronizable *v6;
  char v7;
  PVRenderJob *v8;
  PerfTimer v9;
  HGSynchronizable *v10;
  char v11;

  v10 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v11 = 0;
  HGSynchronizable::Lock(v10);
  v2 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v10);
  if (v2 != 7)
  {
    if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v3) >= 1)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(*((id *)this + 2), "packedFamilyCode");
      kdebug_trace();
    }
    PerfTimer::PerfTimer(&v9);
    PerfTimer::Start(&v9);
    if (v2 != 6)
    {
      if (v2 == 5)
      {
        objc_msgSend(*((id *)this + 2), "finishCancelledJob");
      }
      else if (v2 == 4)
      {
        objc_msgSend(*((id *)this + 2), "finishCompletedJob");
      }
      else
      {
        NSLog(CFSTR("*** WARNING: Finishing a request before render completed, canceled, or erred"));
      }
    }
    PerfTimer::End(&v9);
    PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 8u, v9._end - v9._start);
    PVPerfStats::FrameStats::MarkEndTimeForIndex((PVPerfStats::FrameStats *)((char *)this + 136), 9u);
    if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v4) >= 1)
      kdebug_trace();
    (*(void (**)(PVRenderJob *))(*(_QWORD *)this + 16))(this);
    v5 = (void *)*((_QWORD *)this + 2);
    v8 = this;
    (*(void (**)(PVRenderJob *))(*(_QWORD *)this + 16))(this);
    objc_msgSend(v5, "renderJobFinished:", &v8);
    if (v8)
      (*(void (**)(PVRenderJob *))(*(_QWORD *)v8 + 24))(v8);
    v6 = (HGSynchronizable *)*((_QWORD *)this + 15);
    v7 = 0;
    HGSynchronizable::Lock(v6);
    v10 = (HGSynchronizable *)*((_QWORD *)this + 4);
    v11 = 0;
    HGSynchronizable::Lock(v10);
    *((_DWORD *)this + 6) = 7;
    HGSynchronizer::~HGSynchronizer(&v10);
    HGSynchronizable::Notify(v6);
    HGSynchronizer::~HGSynchronizer(&v6);
    (*(void (**)(PVRenderJob *))(*(_QWORD *)this + 24))(this);
  }
}

void sub_1B2770FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void PVRenderJob::RenderJobNotification(PVRenderJob *this, HGRenderJob *a2)
{
  void *v3;
  uint64_t UserData;
  int State;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t Renderer;
  unint64_t Stats;
  uint64_t v12;
  double v13;
  HGSynchronizable *v14;
  char v15;

  v3 = (void *)MEMORY[0x1B5E29C50](this, a2);
  UserData = HGRenderJob::GetUserData((HGRenderJob *)this);
  State = HGRenderJob::GetState((HGRenderJob *)this);
  switch(State)
  {
    case 2:
      PVRenderJob::StartWaitToRenderTimer((PVRenderJob *)UserData, v6);
      goto LABEL_14;
    case 3:
    case 5:
    case 7:
      goto LABEL_14;
    case 4:
      PVRenderJob::StopWaitToRenderTimer((PVRenderJob *)UserData);
      PVRenderJob::SetupBitmapsOnRenderNodes((PVRenderJob *)UserData, v8);
      PVRenderJob::StartRenderTimer((PVRenderJob *)UserData, v9);
      v14 = *(HGSynchronizable **)(UserData + 32);
      v15 = 0;
      HGSynchronizable::Lock(v14);
      *(_DWORD *)(UserData + 24) = 3;
      HGSynchronizer::~HGSynchronizer(&v14);
      goto LABEL_14;
    case 6:
      if (*(_DWORD *)(UserData + 128) == 3)
        PVRenderJob::StopRenderTimer((PVRenderJob *)UserData);
      HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
      v14 = *(HGSynchronizable **)(UserData + 32);
      v15 = 0;
      HGSynchronizable::Lock(v14);
      v7 = 5;
      goto LABEL_11;
    case 8:
      PVRenderJob::StopRenderTimer((PVRenderJob *)UserData);
      v14 = *(HGSynchronizable **)(UserData + 32);
      v15 = 0;
      HGSynchronizable::Lock(v14);
      *(_DWORD *)(UserData + 24) = 4;
      HGSynchronizer::~HGSynchronizer(&v14);
      Renderer = HGRenderJob::GetRenderer((HGRenderJob *)this);
      Stats = HGRenderer::GetStats(Renderer, 11);
      PVPerfStats::FrameStats::SetValueForIndex(UserData + 136, 0xAu, (double)Stats);
      v12 = HGRenderJob::GetRenderer((HGRenderJob *)this);
      v13 = (*(double (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12);
      PVPerfStats::FrameStats::SetValueForIndex(UserData + 136, 6u, v13 / 1000.0);
      goto LABEL_13;
    default:
      if ((State + 1000) >= 3)
        goto LABEL_14;
      if (*(_DWORD *)(UserData + 128) == 3)
        PVRenderJob::StopRenderTimer((PVRenderJob *)UserData);
      HGRenderJob::SetNotifyFunc((HGRenderJob *)this, 0);
      v14 = *(HGSynchronizable **)(UserData + 32);
      v15 = 0;
      HGSynchronizable::Lock(v14);
      v7 = 6;
LABEL_11:
      *(_DWORD *)(UserData + 24) = v7;
      HGSynchronizer::~HGSynchronizer(&v14);
LABEL_13:
      PVRenderJob::FinishRequest((PVRenderJob *)UserData);
LABEL_14:
      objc_autoreleasePoolPop(v3);
      return;
  }
}

void PVRenderJob::StartWaitToRenderTimer(PVRenderJob *this, const char *a2)
{
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", a2) >= 1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(*((id *)this + 2), "packedFamilyCode");
    kdebug_trace();
  }
  PerfTimer::Start((PerfTimer *)this + 15);
}

uint64_t PVRenderJob::StopWaitToRenderTimer(PVRenderJob *this)
{
  const char *v2;
  uint64_t result;

  PerfTimer::End((PerfTimer *)this + 15);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 3u, *((double *)this + 31) - *((double *)this + 30));
  result = HGLogger::getLevel((HGLogger *)"PVSignPost", v2);
  if ((int)result >= 1)
    return kdebug_trace();
  return result;
}

_QWORD *PVRenderJob::SetupBitmapsOnRenderNodes(PVRenderJob *this, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  HGRenderNode *v11;
  HGBitmap *v12;
  PerfTimer v13;

  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", a2) >= 1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(*((id *)this + 2), "packedFamilyCode");
    kdebug_trace();
  }
  PerfTimer::PerfTimer(&v13);
  PerfTimer::Start(&v13);
  v3 = (_QWORD *)((char *)this + 72);
  objc_msgSend(*((id *)this + 2), "setupDestinationBuffers:renderContext:frameStats:", (char *)this + 72, HGRenderJob::GetRenderContext(*((HGRenderJob **)this + 13)), (char *)this + 136);
  PerfTimer::End(&v13);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 4u, v13._end - v13._start);
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", v4) >= 1)
    kdebug_trace();
  result = (_QWORD *)HGRenderJob::GetRenderNodeList(*((HGRenderJob **)this + 13));
  v6 = result[1] - *result;
  if (v6)
  {
    v7 = result;
    v8 = 0;
    v9 = v6 >> 3;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    do
    {
      v11 = *(HGRenderNode **)(*v7 + 8 * v8);
      v12 = *(HGBitmap **)(*v3 + 8 * v8);
      if (v12)
        (*(void (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(*v3 + 8 * v8));
      result = (_QWORD *)HGRenderNode::SetBitmap(v11, v12);
      if (v12)
        result = (_QWORD *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v12 + 24))(v12);
      ++v8;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_1B277142C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void PVRenderJob::StartRenderTimer(PVRenderJob *this, const char *a2)
{
  if ((int)HGLogger::getLevel((HGLogger *)"PVSignPost", a2) >= 1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(*((id *)this + 2), "packedFamilyCode");
    kdebug_trace();
  }
  PerfTimer::Start((PerfTimer *)this + 16);
}

uint64_t PVRenderJob::StopRenderTimer(PVRenderJob *this)
{
  const char *v2;
  uint64_t result;

  PerfTimer::End((PerfTimer *)this + 16);
  PVPerfStats::FrameStats::SetValueForIndex((uint64_t)this + 136, 7u, *((double *)this + 33) - *((double *)this + 32));
  result = HGLogger::getLevel((HGLogger *)"PVSignPost", v2);
  if ((int)result >= 1)
  {
    HGRenderer::GetStats(*((_QWORD *)this + 5), 11);
    return kdebug_trace();
  }
  return result;
}

void PVRenderJob::StartHandlingRequest(PVRenderJob *this)
{
  int v2;
  HGRenderJob *v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  HGRenderJob *v12;
  HGSynchronizable *v13;
  char v14;
  HGSynchronizable *v15;
  char v16;

  v15 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v16 = 0;
  HGSynchronizable::Lock(v15);
  v2 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v15);
  if (v2 == 5)
  {
    PVRenderJob::FinishRequest(this);
    return;
  }
  v3 = (HGRenderJob *)HGObject::operator new(0x160uLL);
  HGRenderJob::HGRenderJob(v3);
  HGUserJob::SetPriority((uint64_t)v3, 7);
  HGRenderJob::SetNotifyFunc(v3, (void (*)(HGRenderJob *))PVRenderJob::GraphBuildingJobNotification);
  objc_msgSend(*((id *)this + 2), "videoCompositingContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "renderDevice");

  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2 * (v5 == 0);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = objc_msgSend(*((id *)this + 2), "jobPriority");
  else
    v7 = 5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = objc_msgSend(*((id *)this + 2), "graphBuildThreadPriority");
  else
    v8 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v9 = objc_msgSend(*((id *)this + 2), "renderContextPriority");
  else
    v9 = 5;
  HGRenderJob::SetPriority((uint64_t)v3, v7);
  HGRenderJob::SetGLContextPriority((uint64_t)v3, v9);
  HGUserJob::SetState((uint64_t)v3, v6);
  HGRenderJob::SetUserData(v3, this);
  HGRenderJob::SetUserTag(v3, objc_msgSend(*((id *)this + 2), "jobTypeTag"));
  HGRenderJob::SetCustomJobThreadPriority((uint64_t)v3, v8);
  HGRenderJob::SetRenderThreadPriority((uint64_t)v3, 0);
  v15 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v16 = 0;
  HGSynchronizable::Lock(v15);
  v10 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v15);
  if (v10 == 5)
  {
    PVRenderJob::FinishRequest(this);
    if (!v3)
      return;
LABEL_26:
    (*(void (**)(HGRenderJob *))(*(_QWORD *)v3 + 24))(v3);
    return;
  }
  v13 = (HGSynchronizable *)*((_QWORD *)this + 14);
  v14 = 0;
  HGSynchronizable::Lock(v13);
  v15 = (HGSynchronizable *)*((_QWORD *)this + 4);
  v16 = 0;
  HGSynchronizable::Lock(v15);
  v11 = *((_DWORD *)this + 6);
  HGSynchronizer::~HGSynchronizer(&v15);
  if (v11 != 5)
  {
    v12 = (HGRenderJob *)*((_QWORD *)this + 13);
    if (v12 != v3)
    {
      if (v12)
        (*(void (**)(HGRenderJob *))(*(_QWORD *)v12 + 24))(v12);
      *((_QWORD *)this + 13) = v3;
      if (v3)
        (*(void (**)(HGRenderJob *))(*(_QWORD *)v3 + 16))(v3);
    }
    PVRenderManager::EnqueueRenderJob(*((_QWORD *)this + 12), (HGRenderJob **)this + 13);
  }
  HGSynchronizer::~HGSynchronizer(&v13);
  if (v3)
    goto LABEL_26;
}

void sub_1B277179C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void PVRenderJob::WaitForFinish(PVRenderJob *this)
{
  PVRenderJob *v1;
  HGSynchronizable *v2;
  char v3;
  HGSynchronizable *v4;
  char v5;

  v1 = this;
  v2 = (HGSynchronizable *)*((_QWORD *)this + 15);
  v3 = 0;
  HGSynchronizable::Lock(v2);
  v4 = (HGSynchronizable *)*((_QWORD *)v1 + 4);
  v5 = 0;
  HGSynchronizable::Lock(v4);
  LODWORD(v1) = *((_DWORD *)v1 + 6);
  HGSynchronizer::~HGSynchronizer(&v4);
  if ((_DWORD)v1 != 7)
    HGSynchronizable::Wait(v2);
  HGSynchronizer::~HGSynchronizer(&v2);
}

void sub_1B277186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void PVRenderJob::SetJobsRendererParameters(PVRenderJob *this, HGRenderJob *a2)
{
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t Renderer;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  id v19;

  objc_msgSend(*((id *)this + 2), "videoCompositingContext");
  v19 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v19, "concatenationFlag");
  v4 = objc_msgSend(v19, "renderGraphDumpLevel");
  v5 = objc_msgSend(v19, "dotGraphLevel");
  v6 = objc_msgSend(v19, "bufferFormat");
  if (v6 == 28)
    v7 = 3;
  else
    v7 = 1;
  if (v6 == 27)
    v8 = 2;
  else
    v8 = v7;
  v9 = objc_msgSend(v19, "shaderFormat") != 27;
  HGRenderJob::SetDumpHeliumGraphLevel(a2, v4);
  HGRenderJob::SetDumpHeliumDotGraphLevel(a2, v5);
  HGRenderJob::SetProcessingBufferPrecision((uint64_t)a2, v8);
  HGRenderJob::SetMetalShaderPrecision((uint64_t)a2, v9);
  HGRenderJob::SetGraphConcatenationFlag(a2, v3);
  Renderer = HGRenderJob::GetRenderer(a2);
  if (Renderer)
  {
    v11 = objc_msgSend(v19, "gpuRenderAPI");
    v12 = objc_msgSend(v19, "numCPUThreads");
    v13 = objc_msgSend(v19, "tileSize");
    v14 = objc_msgSend(v19, "pageSize");
    v15 = objc_msgSend(v19, "traceGLLevel");
    v16 = objc_msgSend(v19, "textureBorder");
    v17 = +[PVEnvironment PV_TEXTURE_BORDER_WIDTH](PVEnvironment, "PV_TEXTURE_BORDER_WIDTH");
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        v11 = 1;
      }
      else
      {
        NSLog(CFSTR("WARNING: Unknown PVGPURenderAPI value set on the compositing context (%d)!"), v11);
        v11 = 0;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 43, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 5, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 2, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 29, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 18, v14);
    if (v16)
      v18 = v17;
    else
      v18 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 21, v18);
  }

}

void sub_1B2771A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HGRef<HGBitmap>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<HGRef<HGBitmap>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 8)
  {
    v5 = *(_QWORD **)(i - 8);
    result = v5;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  v3[1] = a2;
  return result;
}

void sub_1B2771C30(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B2771CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVRenderEffectLoader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B2771F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,HGSynchronizable *a28)
{
  void *v28;
  void *v29;
  void *v30;

  HGSynchronizer::~HGSynchronizer(&a28);
  _Unwind_Resume(a1);
}

void sub_1B27720B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;
  void *v10;

  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::deque<PVLoadedEffectItem>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  id *v3;

  v2 = a1[5] + a1[4] - 1;
  v3 = (id *)(*(_QWORD *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v2);

  --a1[5];
  return std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

void sub_1B2772174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B277236C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::deque<PVLoadedEffectItem>::erase(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id **v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id **v27;
  id *v28;
  unint64_t v29;
  id *v30;
  id *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v37;
  id *v38;
  __n128 v39[2];

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (uint64_t *)(v5 + 8 * (v4 >> 8));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = *v6 + 16 * v4;
  v37 = v6;
  v38 = (id *)v7;
  if (v7 == a3)
    v8 = 0;
  else
    v8 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - (char *)v6) - ((v7 - *v6) >> 4);
  v9 = std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>::operator+[abi:ne180100]((uint64_t)&v37, v8);
  v11 = (unint64_t)v9;
  v12 = v10;
  v13 = a1[2].i64[1];
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    v19 = v10 - *v9;
    v20 = v19 >> 4;
    if (v19 < -15)
    {
      v29 = 254 - v20;
      v22 = &v9[-(v29 >> 8)];
      v23 = *v22 + 16 * ~(_BYTE)v29;
    }
    else
    {
      v21 = v20 + 1;
      v22 = &v9[v21 >> 8];
      v23 = *v22 + 16 * v21;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,0>(v37, (uint64_t)v38, v9, v10, v22, v23, v39);
    v30 = v38;

    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B304F0B0);
    std::deque<PVLoadedEffectItem>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    v14 = v10 - *v9;
    v15 = v14 >> 4;
    if (v14 < -15)
    {
      v24 = 254 - v15;
      v17 = (id **)&v9[-(v24 >> 8)];
      v18 = &(*v17)[2 * ~(_BYTE)v24];
    }
    else
    {
      v16 = v15 + 1;
      v17 = (id **)&v9[v16 >> 8];
      v18 = &(*v17)[2 * v16];
    }
    v25 = a1[2].i64[0] + v13;
    v26 = a1->i64[1];
    v27 = (id **)(v26 + 8 * (v25 >> 8));
    if (a1[1].i64[0] == v26)
      v28 = 0;
    else
      v28 = &(*v27)[2 * v25];
    v39[0].n128_u64[0] = v11;
    v39[0].n128_u64[1] = v12;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>>>(v17, v18, v27, v28, (id **)v39);
    v31 = (id *)v39[0].n128_u64[1];

    --a1[2].i64[1];
    std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  v32 = a1[2].u64[0];
  v33 = a1->i64[1];
  v34 = (_QWORD *)(v33 + 8 * (v32 >> 8));
  if (a1[1].i64[0] == v33)
    v35 = 0;
  else
    v35 = *v34 + 16 * v32;
  v39[0].n128_u64[0] = (unint64_t)v34;
  v39[0].n128_u64[1] = v35;
  return std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>::operator+[abi:ne180100]((uint64_t)v39, v8);
}

_QWORD *std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 4);
    if (v4 < 1)
      result -= (unint64_t)(255 - v4) >> 8;
    else
      result += (unint64_t)v4 >> 8;
  }
  return result;
}

void sub_1B27727F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int64x2_t std::deque<PVLoadedEffectItem>::push_front(uint64_t a1, id *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<PVLoadedEffectItem>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 8));
  v7 = *v6 + 16 * v4;
  if (*(_QWORD *)(a1 + 16) == v5)
    v8 = 0;
  else
    v8 = v7;
  if (v8 == *v6)
    v8 = *(v6 - 1) + 4096;
  *(_QWORD *)(v8 - 16) = *a2;
  *(_QWORD *)(v8 - 8) = a2[1];
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B304F0C0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_1B27729A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void PVLoadedEffectItem::PVLoadedEffectItem(PVLoadedEffectItem *this, PVEffect *a2)
{
  PVEffect *v3;
  void *v4;
  PVEffect *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = 0;
  v4 = (void *)MEMORY[0x1E0C99D68];
  v5 = v3;
  objc_msgSend(v4, "date");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v6;

}

void sub_1B2772A3C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::deque<PVLoadedEffectItem>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {

        v9 = *(void **)v7;
        v7 += 16;

        if (v7 - (_QWORD)*v6 == 4096)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 128;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 256;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<PVLoadedEffectItem>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,0>@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v5 = a4;
  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = a4 - *a3;
    if ((a2 - a1) >> 4 >= v10 >> 4)
      v11 = v10 >> 4;
    else
      v11 = (a2 - a1) >> 4;
    v12 = a2 - 16 * v11;
    result = std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        v15 = *--v6;
        v16 = v15 + 4096;
        v17 = (v12 - a1) >> 4;
        if (v17 >= 256)
          v17 = 256;
        v18 = v12 - 16 * v17;
        result = std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((uint64_t)&v20, v18, v12, v16);
        v12 = v18;
      }
      while (v18 != a1);
    }
    v5 = v14;
    if (*v6 + 4096 == v14)
    {
      v19 = v6[1];
      ++v6;
      v5 = v19;
    }
  }
  *a5 = v9;
  a5[1] = (uint64_t)v6;
  a5[2] = v5;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      v8 = *(void **)(v7 - 16);
      v7 -= 16;
      objc_storeStrong((id *)(a4 - 16), v8);
      objc_storeStrong((id *)(a4 - 8), *(id *)(v7 + 8));
      a4 -= 16;
    }
    while (v7 != a2);
  }
  return a3;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>>>(id **a1, id *a2, id **a3, id *a4, id **a5)
{
  id *v7;
  id *v8;
  id **v10;
  id *i;
  id *v12;
  double result;
  id *v14;
  __int128 v15;

  v7 = *a5;
  v8 = a5[1];
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 512; ; i = v12 + 512)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v8, a2, i, v7, &v14);
      v8 = (id *)*((_QWORD *)&v15 + 1);
      v7 = (id *)v15;
      *a5 = (id *)v15;
      a5[1] = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(v8, a2, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem *,PVLoadedEffectItem&,PVLoadedEffectItem **,long,256l>,0>(id *location@<X4>, id *a2@<X1>, id *a3@<X2>, id *a4@<X3>, id **a5@<X8>)
{
  id *v5;
  id *v6;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id *v12;
  id *v13;
  id *v14;
  id *v15;
  uint64_t v16;
  id *v17;
  char v18;

  v5 = location;
  v6 = a4;
  if (a2 == a3)
  {
    v8 = a2;
  }
  else
  {
    v8 = a3;
    v9 = (_BYTE *)*a4 - (_BYTE *)location + 4096;
    if (((char *)a3 - (char *)a2) >> 4 >= v9 >> 4)
      v10 = v9 >> 4;
    else
      v10 = ((char *)a3 - (char *)a2) >> 4;
    v11 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((int)&v18, a2, &a2[2 * v10], location);
    if (v11 != v8)
    {
      v13 = v11;
      do
      {
        v15 = (id *)v6[1];
        ++v6;
        v14 = v15;
        v16 = ((char *)v8 - (char *)v13) >> 4;
        if (v16 >= 256)
          v16 = 256;
        v13 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>((int)&v18, v13, &v13[2 * v16], v14);
      }
      while (v13 != v8);
    }
    v5 = v12;
    if ((char *)*v6 + 4096 == (char *)v12)
    {
      v17 = (id *)v6[1];
      ++v6;
      v5 = v17;
    }
  }
  *a5 = v8;
  a5[1] = v6;
  a5[2] = v5;
}

id *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PVLoadedEffectItem *,PVLoadedEffectItem *,PVLoadedEffectItem *>(int a1, id *a2, id *a3, id *location)
{
  id *v5;
  id *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    objc_storeStrong(location, *v5);
    objc_storeStrong(location + 1, v5[1]);
    location += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *std::__find_segment_if[abi:ne180100]<std::__deque_iterator<PVLoadedEffectItem,PVLoadedEffectItem*,PVLoadedEffectItem&,PVLoadedEffectItem**,long,256l>,std::__find_segment<PVLoadedEffectItem>,std::__identity>(_QWORD *result, _QWORD *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 2;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (result && (_QWORD *)(*result + 4096) == a2)
      ++result;
  }
  else
  {
    v5 = *result + 4096;
    if ((_QWORD *)v5 == a2)
      goto LABEL_14;
    while (*a2 != *a5)
    {
      a2 += 2;
      if (a2 == (_QWORD *)v5)
        goto LABEL_14;
    }
    if (a2 == (_QWORD *)v5)
    {
LABEL_14:
      v6 = result + 1;
      if (result + 1 == a3)
      {
        v8 = result;
      }
      else
      {
        do
        {
          v7 = 0;
          v8 = v6;
          v9 = *v6;
          do
          {
            if (*(_QWORD *)(v9 + v7) == *a5)
              return v8;
            v7 += 16;
          }
          while (v7 != 4096);
          v6 = v8 + 1;
        }
        while (v8 + 1 != a3);
      }
      if (*a3 == a4)
      {
        return a3;
      }
      else
      {
        v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 2;
          if (v10 == a4)
          {
            v10 = a4;
            break;
          }
        }
        result = a3;
        if (*a3 + 512 == v10)
          return v8 + 2;
      }
    }
  }
  return result;
}

void std::deque<PVLoadedEffectItem>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x100)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 128;
      else
        v40 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 128;
      else
        v35 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B2773468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B2775B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2775BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2775CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2775D74(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B2775E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2775EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2775F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t pv_buffer_size_for_string_representation(PVCGPointQuad *a1, int a2)
{
  CGPoint b;
  CGPoint d;
  PVCGPointQuad v5;

  b = a1->b;
  v5.a = a1->a;
  v5.b = b;
  d = a1->d;
  v5.c = a1->c;
  v5.d = d;
  return pv_get_string_representation(&v5, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(PVCGPointQuad *a1, char *a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  CGPoint d;
  CGPoint c;
  CGPoint b;
  CGPoint a;
  __n128 v13;
  _QWORD v14[2];
  uint64_t (*v15)(uint64_t, unsigned int, double, double);
  void *v16;
  _QWORD *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v22[3] = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v15 = ___Z28pv_get_string_representation13PVCGPointQuadPcmj_block_invoke;
  v16 = &unk_1E64D50A8;
  v19 = a2;
  v20 = a3;
  v17 = v22;
  v18 = &v23;
  v21 = a4;
  b = a1->b;
  a = a1->a;
  d = a1->d;
  c = a1->c;
  v4 = v14;
  v5 = 0;
  v13 = *(__n128 *)MEMORY[0x1E0C9D538];
  do
  {
    v6 = v13;
    switch((int)v5)
    {
      case 0:
        v6 = (__n128)a;
        break;
      case 1:
        v6 = (__n128)b;
        break;
      case 2:
        v6 = (__n128)c;
        break;
      case 3:
        v6 = (__n128)d;
        break;
      default:
        break;
    }
    ((void (*)(_QWORD *, uint64_t, __n128, double))v15)(v4, v5, v6, v6.n128_f64[1]);
    v5 = (v5 + 1);
  }
  while ((_DWORD)v5 != 4);

  v7 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(&v23, 8);
  return v7;
}

void sub_1B2776198(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z28pv_get_string_representation13PVCGPointQuadPcmj_block_invoke(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  int string_representation;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  size_t v25;

  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v8 = (char *)(v6 + v7);
    v9 = *(_QWORD *)(a1 + 56) - v7;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = snprintf(v8, v9, "%s: (", pv_get_string_representation[a2]);
  v11 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v10;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v10;
  v12.n128_f64[0] = a3;
  v12.n128_f64[1] = a4;
  if (v11)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v14 = (char *)(v11 + v13);
    v15 = *(_QWORD *)(a1 + 56) - v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  string_representation = pv_get_string_representation(v14, v15, *(unsigned int *)(a1 + 64), v12);
  v17 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += string_representation;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += string_representation;
  if (v17)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v19 = (char *)(v17 + v18);
    v20 = *(_QWORD *)(a1 + 56) - v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  result = snprintf(v19, v20, ")");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += result;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += (int)result;
  if (a2 <= 2)
  {
    v22 = *(_QWORD *)(a1 + 48);
    if (v22)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v24 = (char *)(v22 + v23);
      v25 = *(_QWORD *)(a1 + 56) - v23;
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    result = snprintf(v24, v25, "\n");
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += result;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += (int)result;
  }
  return result;
}

CGFloat PVCGPointQuad_get_point_at_index(PVCGPointQuad *a1, int a2)
{
  switch(a2)
  {
    case 0:
      return a1->a.x;
    case 1:
      a1 = (PVCGPointQuad *)((char *)a1 + 16);
      break;
    case 2:
      a1 = (PVCGPointQuad *)((char *)a1 + 32);
      break;
    case 3:
      a1 = (PVCGPointQuad *)((char *)a1 + 48);
      break;
    default:
      a1 = (PVCGPointQuad *)MEMORY[0x1E0C9D538];
      break;
  }
  return a1->a.x;
}

CGFloat *PVCGPointQuad_set_point_at_index(CGFloat *result, CGPoint a2, int a3)
{
  switch(a3)
  {
    case 0:
      *result++ = a2.x;
      goto LABEL_6;
    case 1:
      result[2] = a2.x;
      result += 3;
      goto LABEL_6;
    case 2:
      result[4] = a2.x;
      result += 5;
      goto LABEL_6;
    case 3:
      result[6] = a2.x;
      result += 7;
LABEL_6:
      *result = a2.y;
      break;
    default:
      return result;
  }
  return result;
}

BOOL pv_almost_equal(PVCGPointQuad *a1, PVCGPointQuad *a2, double a3)
{
  char v3;
  CGPoint a;
  CGPoint v5;
  char v6;
  char v7;
  double v8;
  char v9;
  CGPoint b;
  CGPoint v11;
  char v12;
  char v13;
  double v14;
  char v15;
  CGPoint c;
  CGPoint v17;
  char v18;
  char v19;
  double v20;
  char v21;
  CGPoint d;
  CGPoint v23;
  double v24;
  double v25;
  _BOOL8 result;
  CGPoint v27;
  CGPoint v28;
  CGPoint v29;
  CGPoint v30;
  CGPoint v31;
  CGPoint v32;
  CGPoint v33;
  CGPoint v34;

  v3 = 0;
  a = a1->a;
  v5 = a2->a;
  v6 = 1;
  while (1)
  {
    v7 = v6;
    v34 = a;
    v8 = *(double *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF7 | (8 * (v3 & 1)));
    v33 = v5;
    if (vabdd_f64(v8, *(double *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF7 | (8 * (v3 & 1)))) >= a3)
      break;
    v6 = 0;
    v3 = 1;
    if ((v7 & 1) == 0)
    {
      v9 = 0;
      b = a1->b;
      v11 = a2->b;
      v12 = 1;
      while (1)
      {
        v13 = v12;
        v32 = b;
        v14 = *(double *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF7 | (8 * (v9 & 1)));
        v31 = v11;
        if (vabdd_f64(v14, *(double *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF7 | (8 * (v9 & 1)))) >= a3)
          break;
        v12 = 0;
        v9 = 1;
        if ((v13 & 1) == 0)
        {
          v15 = 0;
          c = a1->c;
          v17 = a2->c;
          v18 = 1;
          while (1)
          {
            v19 = v18;
            v30 = c;
            v20 = *(double *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)));
            v29 = v17;
            if (vabdd_f64(v20, *(double *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)))) >= a3)
              break;
            v18 = 0;
            v15 = 1;
            if ((v19 & 1) == 0)
            {
              v21 = 0;
              d = a1->d;
              v23 = a2->d;
              do
              {
                v28 = d;
                v24 = *(double *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF7 | (8 * (v21 & 1)));
                v27 = v23;
                v25 = vabdd_f64(v24, *(double *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF7 | (8 * (v21 & 1))));
                result = v25 < a3;
                if ((v21 & 1) != 0)
                  break;
                v21 = 1;
              }
              while (v25 < a3);
              return result;
            }
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return 0;
}

id PVCGPointQuad_to_NSArray(PVCGPointQuad *a1)
{
  uint64_t v1;
  __n128 v2;
  CGPoint d;
  CGPoint c;
  CGPoint b;
  CGPoint a;
  __n128 v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, unsigned int, double, double);
  void *v11;
  _BYTE *v12;
  _BYTE v13[64];
  uint64_t v14;

  v1 = 0;
  v14 = *MEMORY[0x1E0C80C00];
  v9[0] = MEMORY[0x1E0C809B0];
  v10 = ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke;
  v11 = &__block_descriptor_40_e22_v28__0_CGPoint_dd_8I24l;
  v12 = v13;
  v9[1] = 3221225472;
  b = a1->b;
  a = a1->a;
  d = a1->d;
  c = a1->c;
  v8 = *(__n128 *)MEMORY[0x1E0C9D538];
  do
  {
    v2 = v8;
    switch((int)v1)
    {
      case 0:
        v2 = (__n128)a;
        break;
      case 1:
        v2 = (__n128)b;
        break;
      case 2:
        v2 = (__n128)c;
        break;
      case 3:
        v2 = (__n128)d;
        break;
      default:
        break;
    }
    ((void (*)(_QWORD *, uint64_t, __n128, double))v10)(v9, v1, v2, v2.n128_f64[1]);
    v1 = (v1 + 1);
  }
  while ((_DWORD)v1 != 4);
  pv_CGPoint_array_to_NSArray((uint64_t)v13, 4u);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL pv_is_finite(PVCGPointQuad *a1)
{
  return pv_is_finite((__n128)a1->a)
      && pv_is_finite((__n128)a1->b)
      && pv_is_finite((__n128)a1->c)
      && pv_is_finite((__n128)a1->d);
}

void PVCGPointQuad_from_CGRect(CGRect a1@<0:D0, 8:D1, 16:D2, 24:D3>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  CGFloat v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  CGFloat x;
  _QWORD v9[8];

  v2 = 0;
  v9[7] = *MEMORY[0x1E0C80C00];
  v3 = v9;
  x = a1.origin.x;
  v9[0] = *(_QWORD *)&a1.origin.y;
  *(double *)&v9[1] = a1.origin.x + a1.size.width;
  v9[2] = *(_QWORD *)&a1.origin.y;
  v4 = a1.origin.y + a1.size.height;
  *(double *)&v9[3] = a1.origin.x + a1.size.width;
  *(CGFloat *)&v9[4] = v4;
  a2[3] = 0u;
  *a2 = 0u;
  a2[2] = 0u;
  a2[1] = 0u;
  v9[5] = *(_QWORD *)&a1.origin.x;
  *(CGFloat *)&v9[6] = v4;
  do
  {
    v5 = a2;
    v6 = (_QWORD *)a2 + 1;
    switch((int)v2)
    {
      case 0:
        goto LABEL_6;
      case 1:
        v5 = a2 + 1;
        v6 = (_QWORD *)a2 + 3;
        goto LABEL_6;
      case 2:
        v5 = a2 + 2;
        v6 = (_QWORD *)a2 + 5;
        goto LABEL_6;
      case 3:
        v5 = a2 + 3;
        v6 = (_QWORD *)a2 + 7;
LABEL_6:
        v7 = *v3;
        *v5 = *(v3 - 1);
        *v6 = v7;
        break;
      default:
        break;
    }
    ++v2;
    v3 += 2;
  }
  while (v2 != 4);
}

uint64_t pv_is_CGPoint_in_quad(CGPoint a1, PVCGPointQuad *a2)
{
  double y;
  double x;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char v7;
  double *v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  BOOL v13;
  BOOL v14;
  CGPoint d;
  CGPoint c;
  CGPoint b;
  CGPoint a;
  __n128 v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, unsigned int, double, double);
  void *v23;
  _BYTE *v24;
  _BYTE v25[64];
  _OWORD v26[3];
  uint64_t v27;

  y = a1.y;
  x = a1.x;
  v4 = 0;
  v27 = *MEMORY[0x1E0C80C00];
  v21[0] = MEMORY[0x1E0C809B0];
  v22 = ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke;
  v23 = &__block_descriptor_40_e22_v28__0_CGPoint_dd_8I24l;
  v24 = v25;
  v21[1] = 3221225472;
  b = a2->b;
  a = a2->a;
  d = a2->d;
  c = a2->c;
  v20 = *(__n128 *)MEMORY[0x1E0C9D538];
  do
  {
    v5 = v20;
    switch((int)v4)
    {
      case 0:
        v5 = (__n128)a;
        break;
      case 1:
        v5 = (__n128)b;
        break;
      case 2:
        v5 = (__n128)c;
        break;
      case 3:
        v5 = (__n128)d;
        break;
      default:
        break;
    }
    ((void (*)(_QWORD *, uint64_t, __n128, double))v22)(v21, v4, v5, v5.n128_f64[1]);
    v4 = (v4 + 1);
  }
  while ((_DWORD)v4 != 4);
  v6 = 0;
  v7 = 0;
  v8 = (double *)v26;
  LODWORD(v9) = 3;
  do
  {
    v10 = v9;
    v9 = v6;
    v11 = *v8;
    v12 = *(double *)&v26[v10];
    v13 = *v8 <= y && y < v12;
    if (v13 || (y < v11 ? (v14 = v12 > y) : (v14 = 1), !v14))
    {
      if (x < *(v8 - 1) + (y - v11) * (*(double *)&v25[16 * v10] - *(v8 - 1)) / (v12 - v11))
        v7 ^= 1u;
    }
    ++v6;
    v8 += 2;
  }
  while (v9 != 3);
  return v7 & 1;
}

uint64_t pv_bounding_CGRect(PVCGPointQuad *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGPoint d;
  CGPoint c;
  CGPoint b;
  CGPoint a;
  __n128 v15;
  _QWORD v16[2];
  uint64_t (*v17)(uint64_t, unsigned int, double, double);
  void *v18;
  _BYTE *v19;
  _BYTE v20[64];
  uint64_t v21;

  v1 = 0;
  v21 = *MEMORY[0x1E0C80C00];
  v16[0] = MEMORY[0x1E0C809B0];
  v17 = ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke;
  v18 = &__block_descriptor_40_e22_v28__0_CGPoint_dd_8I24l;
  v19 = v20;
  v16[1] = 3221225472;
  b = a1->b;
  a = a1->a;
  d = a1->d;
  c = a1->c;
  v15 = *(__n128 *)MEMORY[0x1E0C9D538];
  do
  {
    v2 = v15;
    switch((int)v1)
    {
      case 0:
        v2 = (__n128)a;
        break;
      case 1:
        v2 = (__n128)b;
        break;
      case 2:
        v2 = (__n128)c;
        break;
      case 3:
        v2 = (__n128)d;
        break;
      default:
        break;
    }
    result = ((uint64_t (*)(_QWORD *, uint64_t, __n128, double))v17)(v16, v1, v2, v2.n128_f64[1]);
    v1 = (v1 + 1);
  }
  while ((_DWORD)v1 != 4);
  v4 = 0;
  v5 = -1.79769313e308;
  v6 = 1.79769313e308;
  v7 = -1.79769313e308;
  v8 = 1.79769313e308;
  do
  {
    v9 = *(double *)&v20[v4];
    v10 = *(double *)&v20[v4 + 8];
    if (v9 < v8)
      v8 = *(double *)&v20[v4];
    if (v9 > v7)
      v7 = *(double *)&v20[v4];
    if (v10 > v5)
      v5 = *(double *)&v20[v4 + 8];
    if (v10 < v6)
      v6 = *(double *)&v20[v4 + 8];
    v4 += 16;
  }
  while (v4 != 64);
  return result;
}

double pv_CGPoint_get_quad_center(PVCGPointQuad *a1)
{
  CGPoint a;
  CGPoint b;
  CGPoint c;
  CGPoint d;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;

  a = a1->a;
  b = a1->b;
  c = a1->c;
  d = a1->d;
  v8 = 0uLL;
  v6 = (float64x2_t)c;
  v7 = (float64x2_t)a;
  if (pv_simd_line_intersection(&v8, (float64x2_t)a, (float64x2_t)c, (float64x2_t)b, (float64x2_t)d))
    return v8.f64[0];
  else
    return pv_simd_lerp(v7, v6, 0.5);
}

void pv_transform_PVCGPointQuad_between_coordinate_systems(__n128 *a1@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  _QWORD v21[2];
  CGAffineTransform *(*v22)(uint64_t, int);
  void *v23;
  uint64_t *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v37 = 0x6010000000;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v21[1] = 3221225472;
  v25 = *a1;
  v9 = *a1;
  v26 = a1[1];
  v18 = a1[1];
  v19 = v9;
  v27 = a1[2];
  v17 = a1[2];
  v28 = a1[3];
  v29 = a5;
  v30 = a6;
  v35 = 0;
  v36 = &v35;
  v38 = &unk_1B3948866;
  v21[0] = MEMORY[0x1E0C809B0];
  v22 = ___Z53pv_transform_PVCGPointQuad_between_coordinate_systems13PVCGPointQuad6CGSize25_PVCoordinateSystemOriginS0_S1__block_invoke;
  v23 = &unk_1E64D50D0;
  v31 = a7;
  v32 = a8;
  v33 = a2;
  v34 = a3;
  v24 = &v35;
  v16 = a1[3];
  v10 = v21;
  v11 = 0;
  v20 = *(__n128 *)MEMORY[0x1E0C9D538];
  do
  {
    v12 = v20;
    switch((int)v11)
    {
      case 0:
        v12 = v19;
        break;
      case 1:
        v12 = v18;
        break;
      case 2:
        v12 = v17;
        break;
      case 3:
        v12 = v16;
        break;
      default:
        break;
    }
    ((void (*)(_QWORD *, uint64_t, __n128, double))v22)(v10, v11, v12, v12.n128_f64[1]);
    v11 = (v11 + 1);
  }
  while ((_DWORD)v11 != 4);

  v13 = v36;
  v14 = *((_OWORD *)v36 + 3);
  *a4 = *((_OWORD *)v36 + 2);
  a4[1] = v14;
  v15 = *((_OWORD *)v13 + 5);
  a4[2] = *((_OWORD *)v13 + 4);
  a4[3] = v15;
  _Block_object_dispose(&v35, 8);
}

void sub_1B2776CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void PVCGPointQuad_scale(PVCGPointQuad *a1@<X0>, CGPoint a2@<0:D0, 8:D1>, _OWORD *a3@<X8>)
{
  CGFloat y;
  CGFloat x;
  CGPoint b;
  CGPoint d;
  CGPoint v9;
  CGPoint v10;
  CGPoint v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  CGPoint v20;
  CGPoint v21;
  CGPoint v22;
  CGPoint v23;
  __n128 v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, int, float64x2_t, float64_t);
  void *v27;
  __int128 v28;
  uint64_t *v29;
  CGFloat v30;
  CGFloat v31;
  PVCGPointQuad v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  CGPoint a;
  CGPoint v38;
  CGPoint c;
  CGPoint v40;

  y = a2.y;
  x = a2.x;
  v35 = 0x6010000000;
  b = a1->b;
  a = a1->a;
  v38 = b;
  d = a1->d;
  v10 = a1->a;
  v9 = a1->b;
  c = a1->c;
  v40 = d;
  v33 = 0;
  v34 = &v33;
  v36 = &unk_1B3948866;
  v32.a = v10;
  v32.b = v9;
  v11 = a1->d;
  v32.c = a1->c;
  v32.d = v11;
  *(double *)&v12 = pv_CGPoint_get_quad_center(&v32);
  *((_QWORD *)&v12 + 1) = v13;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v26 = ___Z19PVCGPointQuad_scale13PVCGPointQuad7CGPoint_block_invoke;
  v27 = &unk_1E64D50F8;
  v28 = v12;
  v30 = x;
  v31 = y;
  v29 = &v33;
  v22 = a1->b;
  v23 = a1->a;
  v20 = a1->d;
  v21 = a1->c;
  v14 = v25;
  v15 = 0;
  v24 = *(__n128 *)MEMORY[0x1E0C9D538];
  do
  {
    v16 = v24;
    switch((int)v15)
    {
      case 0:
        v16 = (__n128)v23;
        break;
      case 1:
        v16 = (__n128)v22;
        break;
      case 2:
        v16 = (__n128)v21;
        break;
      case 3:
        v16 = (__n128)v20;
        break;
      default:
        break;
    }
    v26((uint64_t)v14, v15, (float64x2_t)v16, v16.n128_f64[1]);
    v15 = (v15 + 1);
  }
  while ((_DWORD)v15 != 4);

  v17 = v34;
  v18 = *((_OWORD *)v34 + 3);
  *a3 = *((_OWORD *)v34 + 2);
  a3[1] = v18;
  v19 = *((_OWORD *)v17 + 5);
  a3[2] = *((_OWORD *)v17 + 4);
  a3[3] = v19;
  _Block_object_dispose(&v33, 8);
}

void sub_1B27770D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z19PVCGPointQuad_scale13PVCGPointQuad7CGPoint_block_invoke(uint64_t result, int a2, float64x2_t a3, float64_t a4)
{
  float64x2_t v4;
  _QWORD *v5;
  _QWORD *v6;

  a3.f64[1] = a4;
  v4 = vaddq_f64(*(float64x2_t *)(result + 32), vmulq_f64(vsubq_f64(a3, *(float64x2_t *)(result + 32)), *(float64x2_t *)(result + 56)));
  v5 = *(_QWORD **)(*(_QWORD *)(result + 48) + 8);
  switch(a2)
  {
    case 0:
      v5[4] = *(_QWORD *)&v4.f64[0];
      v6 = v5 + 5;
      goto LABEL_6;
    case 1:
      v5[6] = *(_QWORD *)&v4.f64[0];
      v6 = v5 + 7;
      goto LABEL_6;
    case 2:
      v5[8] = *(_QWORD *)&v4.f64[0];
      v6 = v5 + 9;
      goto LABEL_6;
    case 3:
      v5[10] = *(_QWORD *)&v4.f64[0];
      v6 = v5 + 11;
LABEL_6:
      *v6 = *(_QWORD *)&v4.f64[1];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ___ZL22PVCGPointQuad_to_array13PVCGPointQuadP7CGPoint_block_invoke(uint64_t result, unsigned int a2, double a3, double a4)
{
  double *v4;

  v4 = (double *)(*(_QWORD *)(result + 32) + 16 * a2);
  *v4 = a3;
  v4[1] = a4;
  return result;
}

void sub_1B27771FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2777270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27772E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2777368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27773DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B277748C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B27775E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

void sub_1B27776C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B277777C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x1B5E29170](v4, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B2777810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B277796C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2777B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2777C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2777CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2777D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2777D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2777DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2777E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2777F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);

  _Unwind_Resume(a1);
}

void sub_1B2778044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B27780C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2778190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B2778340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27784E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PVLivePlayerAVAssetSource;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B277865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27787F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2778934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2778B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2778B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2778F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose((const void *)(v43 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1B2779070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27790E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B277916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27791E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27792F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27793E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2779524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void *PVDocumentAccessController::INSTANCE(PVDocumentAccessController *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    PVDocumentAccessController::PVDocumentAccessController((PVDocumentAccessController *)&PVDocumentAccessController::INSTANCE(void)::s_docAccessCtl);
    __cxa_atexit((void (*)(void *))PVDocumentAccessController::~PVDocumentAccessController, &PVDocumentAccessController::INSTANCE(void)::s_docAccessCtl, &dword_1B2737000);
  }
  return &PVDocumentAccessController::INSTANCE(void)::s_docAccessCtl;
}

void sub_1B2779674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PVDocumentAccessController::PVDocumentAccessController(PVDocumentAccessController *this)
{
  HGRenderQueue *v2;
  uint64_t v3;
  HGCPURenderContext *v4;

  *(_QWORD *)this = 0;
  v2 = (HGRenderQueue *)HGObject::operator new(0x2F0uLL);
  HGRenderQueue::HGRenderQueue(v2);
  v3 = *(_QWORD *)this;
  if (*(HGRenderQueue **)this == v2)
  {
    if (v2)
    {
      (*(void (**)(HGRenderQueue *))(*(_QWORD *)v2 + 24))(v2);
      v2 = *(HGRenderQueue **)this;
    }
  }
  else
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *(_QWORD *)this = v2;
  }
  HGRenderQueue::SetRunMode((uint64_t)v2, 0);
  HGRenderQueue::SetSerializeRendersFlag(*(HGRenderQueue **)this, 1);
  HGRenderQueue::SetNumGPUReadbackExecUnitsPerGPURenderer(*(HGRenderQueue **)this, 0);
  HGRenderQueue::SetNumPBOsPerGPUReadbackExecUnit(*(HGRenderQueue **)this, 0);
  HGRenderQueue::SetGPUReadbackQueueThrottleSize(*(HGRenderQueue **)this, 0);
  HGRenderQueue::SetSerializeGPUReadbacksFlag(*(HGRenderQueue **)this, 1);
  HGRenderQueue::SetPreferredResource(*(_QWORD *)this, 0);
  HGRenderQueue::SetDebugQueueVerboseMask(*(HGRenderQueue **)this, 0);
  v4 = (HGCPURenderContext *)HGObject::operator new(0xB0uLL);
  HGCPURenderContext::HGCPURenderContext(v4);
  HGRenderQueue::AddRenderContext(*(HGRenderQueue **)this, v4);
  if (v4)
    (*(void (**)(HGCPURenderContext *))(*(_QWORD *)v4 + 24))(v4);
  HGRenderQueue::Start(*(HGRenderQueue **)this);
}

void sub_1B277979C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

void PVDocumentAccessController::~PVDocumentAccessController(HGRenderQueue **this)
{
  HGRenderQueue::CancelAllRenderJobs(*this, 1);
  HGRenderQueue::Drain(*this);
  HGRenderQueue::Shutdown(*this);
  if (*this)
    (*(void (**)(HGRenderQueue *))(*(_QWORD *)*this + 24))(*this);
}

void DocumentAccessJob::Wait(DocumentAccessJob *this)
{
  HGSynchronizable *v2;
  HGSynchronizable *v3;
  char v4;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 37);
  v3 = v2;
  v4 = 0;
  HGSynchronizable::Lock(v2);
  if (!*((_BYTE *)this + 352))
    HGSynchronizable::Wait(v2);
  HGSynchronizer::~HGSynchronizer(&v3);
}

void sub_1B27798D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t PVDocumentAccessController::InitializeMotion(HGRenderQueue **this)
{
  DocumentAccessJob *v2;

  v2 = (DocumentAccessJob *)HGObject::operator new(0x168uLL);
  DocumentAccessJob::DocumentAccessJob(v2);
  *(_QWORD *)v2 = off_1E64D5210;
  HGObject::Retain((uint64_t)v2);
  HGRenderQueue::EnqueueRenderJob(*this, (HGRenderJob *)v2);
  DocumentAccessJob::Wait(v2);
  (*(void (**)(DocumentAccessJob *))(*(_QWORD *)v2 + 24))(v2);
  return (*(uint64_t (**)(DocumentAccessJob *))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1B2779964(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void PVDocumentAccessController::LoadEffectDocument(HGRenderQueue **this, PVMotionEffect *a2)
{
  LoadEffectJob *v3;
  PVMotionEffect *v4;

  v4 = a2;
  v3 = (LoadEffectJob *)HGObject::operator new(0x168uLL);
  LoadEffectJob::LoadEffectJob(v3, v4);
  if (v3)
    (*(void (**)(LoadEffectJob *))(*(_QWORD *)v3 + 16))(v3);
  HGRenderQueue::EnqueueRenderJob(*this, (HGRenderJob *)v3);
  DocumentAccessJob::Wait(v3);
  if (v3)
  {
    (*(void (**)(LoadEffectJob *))(*(_QWORD *)v3 + 24))(v3);
    (*(void (**)(LoadEffectJob *))(*(_QWORD *)v3 + 24))(v3);
  }

}

void sub_1B2779A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);

  _Unwind_Resume(a1);
}

uint64_t PVDocumentAccessController::ReleaseOZXDocument(HGRenderQueue **this, void *a2)
{
  ReleaseDocumentJob *v4;
  uint64_t result;

  v4 = (ReleaseDocumentJob *)HGObject::operator new(0x168uLL);
  ReleaseDocumentJob::ReleaseDocumentJob(v4, a2);
  result = HGRenderQueue::EnqueueRenderJob(*this, (HGRenderJob *)v4);
  if (v4)
    return (*(uint64_t (**)(ReleaseDocumentJob *))(*(_QWORD *)v4 + 24))(v4);
  return result;
}

void sub_1B2779B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void DocumentAccessJob::DocumentAccessJob(DocumentAccessJob *this)
{
  uint64_t v2;
  HGSynchronizable *v3;

  HGRenderJob::HGRenderJob((HGRenderJob *)this);
  *(_QWORD *)v2 = off_1E64D51D0;
  *(_BYTE *)(v2 + 352) = 0;
  HGUserJob::SetPriority(v2, 7);
  HGRenderJob::SetPriority((uint64_t)this, 5);
  HGRenderJob::SetRenderThreadPriority((uint64_t)this, 0);
  HGUserJob::SetState((uint64_t)this, 0);
  HGRenderJob::SetNotifyFunc((HGRenderJob *)this, PVDocumentAccessControllerNotificationFunc);
  v3 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v3);
  *((_QWORD *)this + 37) = v3;
}

void sub_1B2779BD0(_Unwind_Exception *a1)
{
  HGRenderJob *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x10A1C40BBCAB520);
  HGRenderJob::~HGRenderJob(v1);
  _Unwind_Resume(a1);
}

void PVDocumentAccessControllerNotificationFunc(HGRenderJob *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1B5E29C50]();
  if (HGRenderJob::GetState(a1) == 4)
  {
    (*(void (**)(HGRenderJob *))(*(_QWORD *)a1 + 40))(a1);
    DocumentAccessJob::SignalComplete((DocumentAccessJob *)a1);
  }
  objc_autoreleasePoolPop(v2);
}

void DocumentAccessJob::~DocumentAccessJob(HGRenderJob *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
}

void DocumentAccessJob::SignalComplete(DocumentAccessJob *this)
{
  HGSynchronizable *v2;
  HGSynchronizable *v3;
  char v4;

  v2 = (HGSynchronizable *)*((_QWORD *)this + 37);
  v3 = v2;
  v4 = 0;
  HGSynchronizable::Lock(v2);
  *((_BYTE *)this + 352) = 1;
  HGSynchronizable::Notify(v2);
  HGSynchronizer::~HGSynchronizer(&v3);
}

void sub_1B2779CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t InitializeMotionJob::RunJob(InitializeMotionJob *this)
{
  return +[PVMotionEffect initializeMotionInternal](PVMotionEffect, "initializeMotionInternal");
}

void LoadEffectJob::LoadEffectJob(LoadEffectJob *this, PVMotionEffect *a2)
{
  PVMotionEffect *v3;

  v3 = a2;
  DocumentAccessJob::DocumentAccessJob(this);
  *(_QWORD *)this = off_1E64D5250;
  HGRenderJob::SetUserData((HGRenderJob *)this, v3);

}

void sub_1B2779D68(_Unwind_Exception *a1)
{
  void *v1;
  HGRenderJob *v2;

  DocumentAccessJob::~DocumentAccessJob(v2);

  _Unwind_Resume(a1);
}

void LoadEffectJob::RunJob(HGRenderJob *this)
{
  id v1;

  HGRenderJob::GetUserData(this);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "loadEffectInternal_NoLock");

}

void sub_1B2779DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ReleaseDocumentJob::ReleaseDocumentJob(ReleaseDocumentJob *this, void *a2)
{
  HGRenderJob *v3;

  DocumentAccessJob::DocumentAccessJob(this);
  *(_QWORD *)v3 = off_1E64D5290;
  HGRenderJob::SetUserData(v3, a2);
}

void sub_1B2779E0C(_Unwind_Exception *a1)
{
  HGRenderJob *v1;

  DocumentAccessJob::~DocumentAccessJob(v1);
  _Unwind_Resume(a1);
}

void ReleaseDocumentJob::RunJob(HGRenderJob *this)
{
  _QWORD *UserData;

  UserData = (_QWORD *)HGRenderJob::GetUserData(this);
  OZXFreeDocument(UserData, 1);
}

void InitializeMotionJob::~InitializeMotionJob(HGRenderJob *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
  HGObject::operator delete(v3);
}

void LoadEffectJob::~LoadEffectJob(HGRenderJob *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
  HGObject::operator delete(v3);
}

void ReleaseDocumentJob::~ReleaseDocumentJob(HGRenderJob *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E64D51D0;
  v2 = *((_QWORD *)this + 37);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 37) = 0;
  }
  HGRenderJob::~HGRenderJob(this);
  HGObject::operator delete(v3);
}

void sub_1B277A048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B277A0A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B277A10C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B277A174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCGImageBufferImpl;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B277A4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 24))(a19);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B277A6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B277A8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B277B010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  HGObject::operator delete(v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  HGTransform::~HGTransform((HGTransform *)&a9);
  HGTransform::~HGTransform((HGTransform *)&a27);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  v33 = *(_QWORD *)(v31 - 112);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  v34 = *(_QWORD *)(v31 - 104);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  _Unwind_Resume(a1);
}

void sub_1B277B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B277BD30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 pv_simd_double4x4_from_PCMatrix44d@<Q0>(unint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23[2];
  __n128 v24[2];
  __n128 v25[2];
  __n128 v26[2];
  __n128 v27;
  unint64_t v28;
  unint64_t v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  unint64_t v37;
  unint64_t v38;

  v3 = a1[1];
  v4 = a1[4];
  v5 = a1[5];
  v36.n128_u64[0] = *a1;
  v36.n128_u64[1] = v4;
  v6 = a1[9];
  v7 = a1[12];
  v8 = a1[13];
  v37 = a1[8];
  v38 = v7;
  v33.n128_u64[0] = v3;
  v33.n128_u64[1] = v5;
  v34 = v6;
  v35 = v8;
  v9 = a1[3];
  v10 = a1[6];
  v11 = a1[7];
  v30.n128_u64[0] = a1[2];
  v30.n128_u64[1] = v10;
  v12 = a1[11];
  v13 = a1[14];
  v14 = a1[15];
  v31 = a1[10];
  v32 = v13;
  v27.n128_u64[0] = v9;
  v27.n128_u64[1] = v11;
  v28 = v12;
  v29 = v14;
  pv_simd_double4_from_PCVector4d(&v36, v26);
  v21 = v26[1];
  v22 = v26[0];
  pv_simd_double4_from_PCVector4d(&v33, v25);
  v19 = v25[1];
  v20 = v25[0];
  pv_simd_double4_from_PCVector4d(&v30, v24);
  v17 = v24[1];
  v18 = v24[0];
  pv_simd_double4_from_PCVector4d(&v27, v23);
  result = v23[0];
  v16 = v23[1];
  *a2 = v22;
  a2[1] = v21;
  a2[2] = v20;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  a2[6] = result;
  a2[7] = v16;
  return result;
}

double pv_PCMatrix44d_from_simd_double4x4(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  double result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  _OWORD v24[2];
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[40];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = 0;
  v40 = 0x3FF0000000000000;
  v37 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  *(_QWORD *)v33 = 0x3FF0000000000000;
  memset(&v33[8], 0, 32);
  v35 = 0u;
  v36 = 0u;
  v38 = 0u;
  v39 = 0u;
  do
  {
    v4 = (_OWORD *)(a2 + v3);
    v5 = *(_OWORD *)&v33[v3 + 16];
    *v4 = *(_OWORD *)&v33[v3];
    v4[1] = v5;
    v3 += 32;
  }
  while (v3 != 128);
  v6 = *a1;
  v7 = a1[1];
  v17 = a1[3];
  v18 = a1[2];
  v19 = a1[5];
  v20 = a1[4];
  v21 = a1[7];
  v22 = a1[6];
  memset(v33, 0, 32);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26[0] = v6;
  v26[1] = v7;
  pv_PCVector4d_from_simd_double4((uint64_t)v26, (uint64_t)v33);
  v25[0] = v18;
  v25[1] = v17;
  pv_PCVector4d_from_simd_double4((uint64_t)v25, (uint64_t)&v31);
  v24[0] = v20;
  v24[1] = v19;
  pv_PCVector4d_from_simd_double4((uint64_t)v24, (uint64_t)&v29);
  v23[0] = v22;
  v23[1] = v21;
  pv_PCVector4d_from_simd_double4((uint64_t)v23, (uint64_t)&v27);
  v8 = *(_QWORD *)&v33[8];
  v9 = v31;
  *(_QWORD *)a2 = *(_QWORD *)v33;
  *(_QWORD *)(a2 + 8) = v9;
  v10 = *(_OWORD *)&v33[16];
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)&v9 + 1);
  v11 = v32;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 96) = *((_QWORD *)&v10 + 1);
  *(_QWORD *)(a2 + 104) = *((_QWORD *)&v11 + 1);
  v12 = *((_QWORD *)&v29 + 1);
  v13 = v27;
  *(_QWORD *)(a2 + 16) = v29;
  *(_QWORD *)(a2 + 24) = v13;
  v15 = *((_QWORD *)&v30 + 1);
  result = *(double *)&v30;
  *(_QWORD *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)&v13 + 1);
  v16 = v28;
  *(double *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 88) = v16;
  *(_QWORD *)(a2 + 112) = v15;
  *(_QWORD *)(a2 + 120) = *((_QWORD *)&v16 + 1);
  return result;
}

uint64_t pv_simd_quaternion_get_euler_angles(int a1, uint64_t a2, float32x4_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  simd_float3 v11;
  float v12;
  float v13;
  simd_float3x3 v15;

  v3 = vmulq_f32(a3, a3).f32[0];
  v4 = vmuls_lane_f32(a3.f32[1], *(float32x2_t *)a3.f32, 1);
  v5 = vmuls_lane_f32(a3.f32[2], a3, 2);
  v6 = vmuls_lane_f32(a3.f32[3], a3, 3);
  v7 = vmuls_lane_f32(a3.f32[0], *(float32x2_t *)a3.f32, 1);
  v8 = vmuls_lane_f32(a3.f32[2], a3, 3);
  v9 = vmuls_lane_f32(a3.f32[0], a3, 2);
  v10 = vmuls_lane_f32(a3.f32[1], a3, 3);
  v11.i32[3] = 0;
  v11.f32[0] = v6 + (float)((float)(v3 - v4) - v5);
  v15.columns[2].i32[3] = 0;
  v11.f32[1] = (float)(v7 + v8) + (float)(v7 + v8);
  v11.f32[2] = (float)(v9 - v10) + (float)(v9 - v10);
  v12 = vmuls_lane_f32(a3.f32[1], a3, 2);
  v13 = vmuls_lane_f32(a3.f32[0], a3, 3);
  v15.columns[1].i32[3] = 0;
  v15.columns[1].f32[0] = (float)(v7 - v8) + (float)(v7 - v8);
  v15.columns[1].f32[1] = (float)(v6 + (float)(v4 - v5)) - v3;
  v15.columns[1].f32[2] = (float)(v12 + v13) + (float)(v12 + v13);
  v15.columns[2].f32[0] = (float)(v9 + v10) + (float)(v9 + v10);
  v15.columns[2].f32[1] = (float)(v12 - v13) + (float)(v12 - v13);
  v15.columns[2].f32[2] = (float)((float)(v5 + v6) - v3) - v4;
  v15.columns[0] = v11;
  return pv_simd_matrix_get_euler_angles(a1, a2, v15);
}

uint64_t pv_simd_quaternion_get_euler_angles(float64x2_t *a1, int a2, uint64_t a3)
{
  float64x2_t v3;
  float64x2_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v17[6];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v4 = *a1;
  v3 = a1[1];
  v5 = vmuld_n_f64(v4.f64[0], v4.f64[0]);
  v6 = a1->f64[1];
  v7 = vmuld_lane_f64(v6, *a1, 1);
  v8 = vmuld_n_f64(v3.f64[0], v3.f64[0]);
  v9 = vmuld_lane_f64(a1[1].f64[1], v3, 1);
  v10.f64[0] = v9 + v5 - v7 - v8;
  v11 = vmuld_lane_f64(v4.f64[0], v4, 1);
  v12 = vmuld_lane_f64(v3.f64[0], v3, 1);
  v13 = vmuld_n_f64(a1->f64[0], v3.f64[0]);
  v14 = vmuld_lane_f64(v6, v3, 1);
  v10.f64[1] = v11 + v12 + v11 + v12;
  v17[0] = v10;
  v17[1] = (float64x2_t)COERCE_UNSIGNED_INT64(v13 - v14 + v13 - v14);
  v10.f64[0] = v11 - v12 + v11 - v12;
  v15 = vmuld_lane_f64(v3.f64[0], v4, 1);
  v3.f64[0] = vmuld_lane_f64(v4.f64[0], v3, 1);
  v10.f64[1] = v9 + v7 - v8 - v5;
  v17[2] = v10;
  v17[3] = (float64x2_t)COERCE_UNSIGNED_INT64(v15 + v3.f64[0] + v15 + v3.f64[0]);
  v4.f64[0] = v13 + v14 + v13 + v14;
  v4.f64[1] = v15 - v3.f64[0] + v15 - v3.f64[0];
  v17[4] = v4;
  v17[5] = (float64x2_t)COERCE_UNSIGNED_INT64(v8 + v9 - v5 - v7);
  v18 = 0;
  v19 = 0;
  v20 = xmmword_1B304EEE0;
  return pv_simd_matrix_get_euler_angles(v17, a2, a3);
}

BOOL pv_is_finite(simd_quatd a1, __int128 *a2)
{
  __int128 v2;
  __int128 v4[2];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return pv_is_finite(v4);
}

id NSStringFromPVCGPointQuad(CGPoint *a1, int a2)
{
  CGPoint v4;
  CGPoint v5;
  int v6;
  char *v7;
  CGPoint v8;
  CGPoint v9;
  unsigned int string_representation;
  void *v11;
  PVCGPointQuad v13;

  v4 = a1[1];
  v13.a = *a1;
  v13.b = v4;
  v5 = a1[3];
  v13.c = a1[2];
  v13.d = v5;
  v6 = pv_buffer_size_for_string_representation(&v13, a2);
  v7 = (char *)malloc_type_calloc(v6, 1uLL, 0x100004077774924uLL);
  v8 = a1[1];
  v13.a = *a1;
  v13.b = v8;
  v9 = a1[3];
  v13.c = a1[2];
  v13.d = v9;
  string_representation = pv_get_string_representation(&v13, v7, v6, a2);
  v11 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v6
    || (v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v7, string_representation, 4, 1)) == 0)
  {
    free(v7);
  }
  return v11;
}

double pv_simd_normalize(simd_float3x3 a1)
{
  uint64_t i;
  double result;
  _OWORD v3[3];

  v3[2] = a1.columns[2];
  if (a1.columns[2].f32[2] <= -0.00001 || a1.columns[2].f32[2] >= 0.00001)
  {
    for (i = 0; i != 3; ++i)
      v3[i] = vmulq_n_f32((float32x4_t)v3[i], 1.0 / a1.columns[2].f32[2]);
    return *(double *)v3;
  }
  return result;
}

__n128 pv_simd_normalize@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, float64x2_t a3@<Q0>)
{
  double v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  v3 = *(double *)(a1 + 80);
  if (v3 <= -0.0000001 || v3 >= 0.0000001)
  {
    v4 = 0;
    a3.f64[0] = 1.0 / v3;
    v5.f64[0] = a3.f64[0];
    v5.f64[1] = a3.f64[0];
    do
    {
      v6 = (float64x2_t *)(a1 + v4);
      v7 = vmulq_f64(a3, *(float64x2_t *)(a1 + v4 + 16));
      *v6 = vmulq_f64(v5, *(float64x2_t *)(a1 + v4));
      v6[1] = v7;
      v4 += 32;
    }
    while (v4 != 96);
  }
  v8 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v9;
  result = *(__n128 *)a1;
  v11 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v11;
  return result;
}

double pv_simd_normalize(simd_float4x4 a1)
{
  uint64_t i;
  double result;
  _OWORD v3[4];

  v3[2] = a1.columns[2];
  v3[3] = a1.columns[3];
  if (a1.columns[3].f32[3] <= -0.00001 || a1.columns[3].f32[3] >= 0.00001)
  {
    for (i = 0; i != 3; ++i)
      v3[i] = vmulq_n_f32((float32x4_t)v3[i], 1.0 / a1.columns[3].f32[3]);
    return *(double *)v3;
  }
  return result;
}

__n128 pv_simd_normalize@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  double v4;
  float64x2_t *v5;
  float64x2_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  v2 = *(double *)(a1 + 120);
  if (v2 <= -0.0000001 || v2 >= 0.0000001)
  {
    v3 = 0;
    v4 = 1.0 / v2;
    do
    {
      v5 = (float64x2_t *)(a1 + v3);
      v6 = vmulq_n_f64(*(float64x2_t *)(a1 + v3 + 16), v4);
      *v5 = vmulq_n_f64(*(float64x2_t *)(a1 + v3), v4);
      v5[1] = v6;
      v3 += 32;
    }
    while (v3 != 96);
  }
  v7 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v7;
  v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v8;
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v9;
  result = *(__n128 *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v11;
  return result;
}

double pv_simd_negate(simd_float3x3 a1)
{
  uint64_t v1;
  _OWORD v3[3];

  v1 = 0;
  v3[2] = a1.columns[2];
  do
  {
    v3[v1] = vnegq_f32((float32x4_t)v3[v1]);
    ++v1;
  }
  while (v1 != 3);
  return *(double *)v3;
}

__n128 pv_simd_negate@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t i;
  float64x2_t *v3;
  float64x2_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  for (i = 0; i != 96; i += 32)
  {
    v3 = (float64x2_t *)(a1 + i);
    v4 = vnegq_f64(*(float64x2_t *)(a1 + i + 16));
    *v3 = vnegq_f64(*(float64x2_t *)(a1 + i));
    v3[1] = v4;
  }
  v5 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v8;
  return result;
}

double pv_simd_negate(simd_float4x4 a1)
{
  uint64_t v1;
  _OWORD v3[4];

  v1 = 0;
  v3[2] = a1.columns[2];
  v3[3] = a1.columns[3];
  do
  {
    v3[v1] = vnegq_f32((float32x4_t)v3[v1]);
    ++v1;
  }
  while (v1 != 4);
  return *(double *)v3;
}

__n128 pv_simd_negate@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  float64x2_t *v3;
  float64x2_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  for (i = 0; i != 128; i += 32)
  {
    v3 = (float64x2_t *)(a1 + i);
    v4 = vnegq_f64(*(float64x2_t *)(a1 + i + 16));
    *v3 = vnegq_f64(*(float64x2_t *)(a1 + i));
    v3[1] = v4;
  }
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v6;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
  result = *(__n128 *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v9;
  return result;
}

double pv_simd_matrix_get_rotation_matrix(simd_float3x3 a1)
{
  float32x4_t v1;
  float v2;
  float32x4_t v3;
  float v4;
  float32x4_t v5;
  float v6;

  v1 = vmulq_f32((float32x4_t)a1.columns[0], (float32x4_t)a1.columns[0]);
  v2 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).f32[0]);
  if ((v2 <= -0.00001 || v2 >= 0.00001)
    && ((v3 = vmulq_f32((float32x4_t)a1.columns[1], (float32x4_t)a1.columns[1]),
         v4 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]), v4 <= -0.00001)|| v4 >= 0.00001)&& ((v5 = vmulq_f32((float32x4_t)a1.columns[2], (float32x4_t)a1.columns[2]), v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]), v6 <= -0.00001)|| v6 >= 0.00001))
  {
    a1.columns[0].i64[0] = vmulq_n_f32((float32x4_t)a1.columns[0], 1.0 / v2).u64[0];
  }
  else
  {
    a1.columns[0] = (simd_float3)*MEMORY[0x1E0C83FE8];
  }
  return *(double *)a1.columns[0].i64;
}

float64x2_t pv_simd_matrix_get_rotation_matrix@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t result;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = a1[4];
  v6 = a1[5];
  v8 = vmulq_f64(v2, v2);
  v8.f64[0] = sqrt(v8.f64[0] + vaddvq_f64(vmulq_f64(v3, v3)));
  if ((v8.f64[0] <= -0.0000001 || v8.f64[0] >= 0.0000001)
    && ((v9 = sqrt(vmulq_f64(v4, v4).f64[0] + vaddvq_f64(vmulq_f64(v5, v5))), v9 <= -0.0000001) || v9 >= 0.0000001)
    && ((v10 = sqrt(vmulq_f64(v6, v6).f64[0] + vaddvq_f64(vmulq_f64(v7, v7))), v10 <= -0.0000001) || v10 >= 0.0000001))
  {
    v8.f64[0] = 1.0 / v8.f64[0];
    *(_QWORD *)&v3.f64[1] = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
    v16 = vmulq_n_f64(v3, v8.f64[0]);
    v17 = vmulq_f64(v2, v8);
    v8.f64[0] = 1.0 / v9;
    *(_QWORD *)&v5.f64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    v18 = vmulq_f64(v4, v8);
    *(_QWORD *)&v7.f64[1] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v8.f64[0] = 1.0 / v10;
    *a2 = v16;
    a2[1] = v17;
    a2[2] = vmulq_n_f64(v5, 1.0 / v9);
    a2[3] = v18;
    result = vmulq_f64(v6, v8);
    a2[4] = vmulq_n_f64(v7, 1.0 / v10);
    a2[5] = result;
  }
  else
  {
    v11 = (float64x2_t *)MEMORY[0x1E0C83FD0];
    v12 = *(float64x2_t *)(MEMORY[0x1E0C83FD0] + 48);
    a2[2] = *(float64x2_t *)(MEMORY[0x1E0C83FD0] + 32);
    a2[3] = v12;
    v13 = v11[5];
    a2[4] = v11[4];
    a2[5] = v13;
    result = *v11;
    v15 = v11[1];
    *a2 = *v11;
    a2[1] = v15;
  }
  return result;
}

double pv_simd_matrix_get_rotation_matrix(simd_float4x4 a1)
{
  a1.columns[0].i32[3] = 0;
  a1.columns[1].i32[3] = 0;
  a1.columns[2].i32[3] = 0;
  return pv_simd_matrix_get_rotation_matrix(*(simd_float3x3 *)a1.columns[0].f32);
}

double pv_simd_matrix_get_rotation_matrix@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double result;
  float64x2_t v8[6];

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v8[0] = *a1;
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v6;
  *(_QWORD *)&result = *(_OWORD *)&pv_simd_matrix_get_rotation_matrix(v8, a2);
  return result;
}

double pv_simd_matrix_rotate(simd_float4x4 a1, float32x4_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float32x4_t v11;
  float32_t v12;
  float v13;
  float v14;
  unsigned int v15;
  float32x4_t v16;
  _OWORD v18[4];
  _OWORD v19[4];

  v2 = 0;
  v3 = vmulq_f32(a2, a2).f32[0];
  v4 = vmuls_lane_f32(a2.f32[1], *(float32x2_t *)a2.f32, 1);
  v5 = vmuls_lane_f32(a2.f32[2], a2, 2);
  v6 = vmuls_lane_f32(a2.f32[3], a2, 3);
  v7 = vmuls_lane_f32(a2.f32[0], *(float32x2_t *)a2.f32, 1);
  v8 = vmuls_lane_f32(a2.f32[2], a2, 3);
  v9 = vmuls_lane_f32(a2.f32[0], a2, 2);
  v10 = vmuls_lane_f32(a2.f32[1], a2, 3);
  v11.i32[3] = 0;
  v11.f32[0] = v6 + (float)((float)(v3 - v4) - v5);
  v11.f32[1] = (float)(v7 + v8) + (float)(v7 + v8);
  v12 = (float)(v7 - v8) + (float)(v7 - v8);
  v13 = vmuls_lane_f32(a2.f32[1], a2, 2);
  v14 = vmuls_lane_f32(a2.f32[0], a2, 3);
  a2.i8[12] = 0;
  a2.i8[13] = 0;
  a2.i8[14] = 0;
  a2.i8[15] = 0;
  a2.f32[0] = v12;
  a2.f32[1] = (float)(v6 + (float)(v4 - v5)) - v3;
  *(float *)&v15 = (float)((float)(v5 + v6) - v3) - v4;
  v16.f32[0] = (float)(v9 + v10) + (float)(v9 + v10);
  v16.f32[1] = (float)(v13 - v14) + (float)(v13 - v14);
  v16.i64[1] = v15;
  v18[2] = a1.columns[2];
  v18[3] = a1.columns[3];
  memset(v19, 0, sizeof(v19));
  do
  {
    v11.f32[2] = (float)(v9 - v10) + (float)(v9 - v10);
    a2.f32[2] = (float)(v13 + v14) + (float)(v13 + v14);
    v19[v2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(v18[v2])), a2, *(float32x2_t *)&v18[v2], 1), v16, (float32x4_t)v18[v2], 2), (float32x4_t)xmmword_1B304EFF0, (float32x4_t)v18[v2], 3);
    ++v2;
  }
  while (v2 != 4);
  return *(double *)v19;
}

__int128 *pv_simd_matrix_rotate@<X0>(__int128 *result@<X0>, float64x2_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  float64x2_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  __int128 vars0;

  v3 = 0;
  v4 = *a2;
  v18 = a2[1];
  v5 = vmuld_n_f64(v4.f64[0], v4.f64[0]);
  v14.f64[0] = a2->f64[1];
  v6 = vmuld_lane_f64(v14.f64[0], *a2, 1);
  v7 = vmuld_n_f64(v18.f64[0], v18.f64[0]);
  v8 = vmuld_lane_f64(a2[1].f64[1], v18, 1);
  v13.f64[0] = v8 + v5 - v6 - v7;
  v9 = vmuld_lane_f64(v4.f64[0], v4, 1);
  v10 = vmuld_lane_f64(v18.f64[0], v18, 1);
  v11 = vmuld_n_f64(a2->f64[0], v18.f64[0]);
  v12 = vmuld_lane_f64(v14.f64[0], v18, 1);
  v13.f64[1] = v9 + v10 + v9 + v10;
  v14 = (float64x2_t)*(unint64_t *)&v14.f64[0];
  v17.f64[0] = v9 - v10 + v9 - v10;
  v15 = vmuld_lane_f64(v18.f64[0], *a2, 1);
  v16 = vmuld_lane_f64(a2->f64[0], v18, 1);
  v17.f64[1] = v8 + v6 - v7 - v5;
  v18.f64[1] = 0.0;
  v20.f64[1] = 0.0;
  v20.f64[0] = v7 + v8 - v5 - v6;
  vars0 = *result;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  do
  {
    v22 = *(float64x2_t *)((char *)&vars0 + v3 * 16);
    v21 = *(float64x2_t *)((char *)&vars0 + v3 * 16 + 16);
    v23 = (float64x2_t *)&a3[v3];
    v19.f64[1] = v15 - v16 + v15 - v16;
    v19.f64[0] = v11 + v12 + v11 + v12;
    *v23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, v22.f64[0]), v17, v22, 1), v19, v21.f64[0]), (float64x2_t)0, v21, 1);
    v14.f64[0] = v11 - v12 + v11 - v12;
    v18.f64[0] = v15 + v16 + v15 + v16;
    v23[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v14, v22.f64[0]), v18, v22, 1), v20, v21.f64[0]), (float64x2_t)xmmword_1B304EEE0, v21, 1);
    v3 += 2;
  }
  while (v3 != 8);
  return result;
}

double pv_simd_matrix_rotate(simd_float4 a1, simd_float4 a2, simd_float4 a3, simd_float4 a4, float a5, float32x4_t a6)
{
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  __float2 v9;
  float32x4_t v10;
  float32x4_t v12;
  simd_float4x4 v13;

  v13.columns[2] = a3;
  v13.columns[3] = a4;
  v13.columns[0] = a1;
  v13.columns[1] = a2;
  v6 = (int32x4_t)vmulq_f32(a6, a6);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v12 = vmulq_n_f32(a6, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  v9 = __sincosf_stret(a5 * 0.5);
  v10 = vmulq_n_f32(v12, v9.__sinval);
  v10.i32[3] = LODWORD(v9.__cosval);
  return pv_simd_matrix_rotate(v13, v10);
}

__int128 *pv_simd_matrix_rotate@<X0>(__int128 *a1@<X0>, float64x2_t *a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  __double2 v9;
  float64x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18[2];
  __int128 v19[8];

  v6 = a2[1];
  v7 = vmulq_f64(v6, v6);
  v7.f64[0] = 1.0 / sqrt(v7.f64[0] + vaddvq_f64(vmulq_f64(*a2, *a2)));
  v16 = vmulq_f64(v6, v7);
  v17 = vmulq_n_f64(*a2, v7.f64[0]);
  v9 = __sincos_stret(a4 * 0.5);
  v8.f64[0] = v9.__sinval;
  *(_QWORD *)&v10.f64[0] = *(_OWORD *)&vmulq_f64(v8, v16);
  v10.f64[1] = v9.__cosval;
  v11 = a1[5];
  v19[4] = a1[4];
  v19[5] = v11;
  v12 = a1[7];
  v19[6] = a1[6];
  v19[7] = v12;
  v13 = a1[1];
  v19[0] = *a1;
  v19[1] = v13;
  v14 = a1[3];
  v19[2] = a1[2];
  v19[3] = v14;
  v18[0] = vmulq_n_f64(v17, v9.__sinval);
  v18[1] = v10;
  return pv_simd_matrix_rotate(v19, v18, a3);
}

uint64_t pv_simd_matrix_get_euler_angles(int a1, uint64_t a2, simd_float3x3 a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;

  a3.columns[0].i32[3] = 0;
  a3.columns[1].i32[3] = 0;
  a3.columns[2].i32[3] = 0;
  v5.n128_f64[0] = pv_simd_matrix_get_rotation_matrix(a3);
  pv_simd_matrix_get_euler_angles(a1, a2, v5, v6, v7);
  return 1;
}

uint64_t pv_simd_matrix_get_euler_angles(int a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v30;

  switch(a1)
  {
    case 0:
      v23 = asinf(fminf(fmaxf(a5.n128_f32[0], -1.0), 1.0));
      if (fabsf(a5.n128_f32[0]) < 0.99999)
      {
        v25 = atan2f(-a5.n128_f32[1], a5.n128_f32[2]);
        v6 = -a4.n128_f32[0];
        v7 = a3.n128_f32[0];
        goto LABEL_16;
      }
      v19 = atan2f(a4.n128_f32[2], a4.n128_f32[1]);
      v20 = 0.0;
      v15 = __PAIR64__(LODWORD(v23), LODWORD(v19));
      break;
    case 1:
      v24 = asinf(-fminf(fmaxf(a4.n128_f32[0], -1.0), 1.0));
      if (fabsf(a4.n128_f32[0]) < 0.99999)
      {
        v26 = atan2f(a4.n128_f32[2], a4.n128_f32[1]);
        v9 = a3.n128_f32[0];
        v8 = a5.n128_f32[0];
        goto LABEL_10;
      }
      v15 = COERCE_UNSIGNED_INT(atan2f(-a5.n128_f32[1], a5.n128_f32[2]));
      goto LABEL_22;
    case 2:
      v10 = a5.n128_f32[1];
      v27 = asinf(-fminf(fmaxf(a5.n128_f32[1], -1.0), 1.0));
      if (fabsf(v10) < 0.99999)
      {
        v30 = atan2f(a5.n128_f32[0], a5.n128_f32[2]);
        v11 = a3.n128_f32[1];
        v12 = a4.n128_f32[1];
        goto LABEL_13;
      }
      v21 = atan2f(-a3.n128_f32[2], a3.n128_f32[0]);
      v20 = 0.0;
      v15 = __PAIR64__(LODWORD(v21), LODWORD(v27));
      break;
    case 3:
      v13 = a3.n128_f32[1];
      v24 = asinf(fminf(fmaxf(a3.n128_f32[1], -1.0), 1.0));
      if (fabsf(v13) >= 0.99999)
      {
        v14 = atan2f(a5.n128_f32[0], a5.n128_f32[2]);
        LODWORD(v15) = 0;
      }
      else
      {
        v26 = atan2f(-a5.n128_f32[1], a4.n128_f32[1]);
        v9 = a3.n128_f32[0];
        v8 = -a3.n128_f32[2];
LABEL_10:
        v14 = atan2f(v8, v9);
        *(float *)&v15 = v26;
      }
      *((float *)&v15 + 1) = v14;
LABEL_22:
      v20 = v24;
      break;
    case 4:
      v16 = a4.n128_f32[2];
      v27 = asinf(fminf(fmaxf(a4.n128_f32[2], -1.0), 1.0));
      if (fabsf(v16) >= 0.99999)
      {
        v17 = atan2f(a3.n128_f32[1], a3.n128_f32[0]);
        v15 = LODWORD(v27);
      }
      else
      {
        v30 = atan2f(-a3.n128_f32[2], a5.n128_f32[2]);
        v12 = a4.n128_f32[1];
        v11 = -a4.n128_f32[0];
LABEL_13:
        v17 = atan2f(v11, v12);
        v15 = __PAIR64__(LODWORD(v30), LODWORD(v27));
      }
LABEL_26:
      v20 = v17;
      break;
    case 5:
      v18 = a3.n128_f32[2];
      v23 = asinf(-fminf(fmaxf(a3.n128_f32[2], -1.0), 1.0));
      if (fabsf(v18) >= 0.99999)
      {
        v17 = atan2f(-a4.n128_f32[0], a4.n128_f32[1]);
        LODWORD(v15) = 0;
      }
      else
      {
        v25 = atan2f(a4.n128_f32[2], a5.n128_f32[2]);
        v6 = a3.n128_f32[1];
        v7 = a3.n128_f32[0];
LABEL_16:
        v17 = atan2f(v6, v7);
        *(float *)&v15 = v25;
      }
      *((float *)&v15 + 1) = v23;
      goto LABEL_26;
    default:
      return 1;
  }
  *(float *)(a2 + 8) = v20;
  *(_QWORD *)a2 = v15;
  return 1;
}

uint64_t pv_simd_matrix_get_euler_angles(float64x2_t *a1, int a2, uint64_t a3)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v11[6];
  float64x2_t v12[6];

  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v12[0] = *a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  pv_simd_matrix_get_rotation_matrix(v12, v11);
  pv_simd_matrix_get_euler_angles((uint64_t)v11, a2, a3);
  return 1;
}

uint64_t pv_simd_matrix_get_euler_angles(uint64_t a1, int a2, uint64_t a3)
{
  long double v5;
  uint64_t v6;
  int8x16_t v7;
  __int128 v8;
  long double v9;
  int8x16_t v10;
  double v11;
  long double v12;
  int8x16_t v13;
  __int128 v14;
  long double v15;
  __int128 v16;
  double v17;
  long double v18;
  uint64_t v19;
  long double v20;
  int8x16_t v21;
  long double v22;
  unint64_t v23;
  long double v24;
  __int128 v25;
  long double v26;
  int8x16_t v27;
  double v28;
  uint64_t v29;
  long double v30;
  int8x16_t v31;
  int8x16_t v32;
  long double v33;
  uint64_t v34;
  int8x16_t v35;
  unint64_t v36;
  long double v37;
  int8x16_t v38;
  long double v39;
  double v40;
  long double v41;
  __int128 v42;
  long double v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  long double v52;
  long double v53;
  unint64_t v54;
  double v55;
  unint64_t v56;

  switch(a2)
  {
    case 0:
      v5 = asin(fmin(fmax(*(double *)(a1 + 64), -1.0), 1.0));
      v6 = *(_QWORD *)(a3 + 16);
      v7 = *(int8x16_t *)a3;
      *(long double *)&v7.i64[1] = v5;
      v49 = vextq_s8(v7, v7, 8uLL).u64[0];
      *(long double *)(a3 + 8) = v5;
      v8 = *(_OWORD *)(a1 + 64);
      if (fabs(*(double *)&v8) < 0.9999999)
      {
        v45 = v6;
        v9 = atan2(-*((double *)&v8 + 1), *(long double *)(a1 + 80));
        v10.i64[1] = v49;
        *(long double *)v10.i64 = v9;
        v50 = v10;
        *(_QWORD *)(a3 + 16) = v45;
        *(int8x16_t *)a3 = v10;
        v11 = -*(double *)(a1 + 32);
        goto LABEL_22;
      }
      v39 = atan2(*(long double *)(a1 + 48), *(long double *)(a1 + 40));
      v27.i64[1] = v49;
      *(long double *)v27.i64 = v39;
      goto LABEL_18;
    case 1:
      v12 = asin(-fmin(fmax(*(double *)(a1 + 32), -1.0), 1.0));
      v13 = *(int8x16_t *)a3;
      *(long double *)(a3 + 16) = v12;
      v14 = *(_OWORD *)(a1 + 32);
      if (fabs(*(double *)&v14) < 0.9999999)
      {
        v51 = vextq_s8(v13, v13, 8uLL).u64[0];
        v15 = atan2(*(long double *)(a1 + 48), *((long double *)&v14 + 1));
        *((_QWORD *)&v16 + 1) = v51;
        *(long double *)&v16 = v15;
        v52 = v15;
        *(long double *)(a3 + 16) = v12;
        *(_OWORD *)a3 = v16;
        v17 = *(double *)(a1 + 64);
        goto LABEL_10;
      }
      v27.i64[0] = atan2(-*(double *)(a1 + 72), *(long double *)(a1 + 80));
      v40 = 0.0;
      goto LABEL_27;
    case 2:
      v18 = asin(-fmin(fmax(*(double *)(a1 + 72), -1.0), 1.0));
      v19 = *(_QWORD *)(a3 + 16);
      v53 = v18;
      *(long double *)a3 = v18;
      if (fabs(*(double *)(a1 + 72)) < 0.9999999)
      {
        v46 = v19;
        v20 = atan2(*(long double *)(a1 + 64), *(long double *)(a1 + 80));
        *(long double *)v21.i64 = v53;
        *(long double *)&v21.i64[1] = v20;
        v50 = v21;
        *(_QWORD *)(a3 + 16) = v46;
        *(int8x16_t *)a3 = v21;
        v11 = *(double *)(a1 + 8);
        v22 = *(double *)(a1 + 40);
        goto LABEL_25;
      }
      v41 = atan2(-*(double *)(a1 + 16), *(long double *)a1);
      *(long double *)v27.i64 = v53;
      *(long double *)&v27.i64[1] = v41;
LABEL_18:
      *(_QWORD *)&v40 = vextq_s8(v27, v27, 8uLL).u64[0];
      v12 = 0.0;
      goto LABEL_27;
    case 3:
      v12 = asin(fmin(fmax(*(double *)(a1 + 8), -1.0), 1.0));
      v23 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 8uLL).u64[0];
      *(long double *)(a3 + 16) = v12;
      if (fabs(*(double *)(a1 + 8)) >= 0.9999999)
      {
        *((_QWORD *)&v42 + 1) = v23;
        *(_QWORD *)&v42 = 0;
        *(long double *)(a3 + 16) = v12;
        *(_OWORD *)a3 = v42;
        v40 = atan2(*(long double *)(a1 + 64), *(long double *)(a1 + 80));
        v27.i64[0] = 0;
        goto LABEL_27;
      }
      v54 = v23;
      v24 = atan2(-*(double *)(a1 + 72), *(long double *)(a1 + 40));
      *((_QWORD *)&v25 + 1) = v54;
      *(long double *)&v25 = v24;
      v52 = v24;
      *(long double *)(a3 + 16) = v12;
      *(_OWORD *)a3 = v25;
      v17 = -*(double *)(a1 + 16);
LABEL_10:
      v26 = atan2(v17, *(long double *)a1);
      *(long double *)v27.i64 = v52;
      *(long double *)&v27.i64[1] = v26;
      goto LABEL_26;
    case 4:
      v28 = asin(fmin(fmax(*(double *)(a1 + 48), -1.0), 1.0));
      v29 = *(_QWORD *)(a3 + 16);
      *(double *)a3 = v28;
      if (fabs(*(double *)(a1 + 48)) < 0.9999999)
      {
        v47 = v29;
        v55 = v28;
        v30 = atan2(-*(double *)(a1 + 16), *(long double *)(a1 + 80));
        *(double *)v31.i64 = v55;
        *(long double *)&v31.i64[1] = v30;
        v50 = v31;
        *(_QWORD *)(a3 + 16) = v47;
        v32 = v31;
        goto LABEL_24;
      }
      v50 = (int8x16_t)*(unint64_t *)&v28;
      *(_QWORD *)(a3 + 16) = v29;
      *(_OWORD *)a3 = *(unint64_t *)&v28;
      goto LABEL_21;
    case 5:
      v33 = asin(-fmin(fmax(*(double *)(a1 + 16), -1.0), 1.0));
      v34 = *(_QWORD *)(a3 + 16);
      v35 = *(int8x16_t *)a3;
      *(long double *)&v35.i64[1] = v33;
      v36 = vextq_s8(v35, v35, 8uLL).u64[0];
      *(long double *)(a3 + 8) = v33;
      if (fabs(*(double *)(a1 + 16)) >= 0.9999999)
      {
        v32.i64[1] = v36;
        v32.i64[0] = 0;
        v50 = v32;
        *(_QWORD *)(a3 + 16) = v34;
LABEL_24:
        *(int8x16_t *)a3 = v32;
        v22 = *(double *)(a1 + 40);
        v11 = -*(double *)(a1 + 32);
      }
      else
      {
        v48 = v34;
        v56 = v36;
        v37 = atan2(*(long double *)(a1 + 48), *(long double *)(a1 + 80));
        v38.i64[1] = v56;
        *(long double *)v38.i64 = v37;
        v50 = v38;
        *(_QWORD *)(a3 + 16) = v48;
        *(int8x16_t *)a3 = v38;
LABEL_21:
        v11 = *(double *)(a1 + 8);
LABEL_22:
        v22 = *(double *)a1;
      }
LABEL_25:
      v43 = atan2(v11, v22);
      v27 = v50;
      v12 = v43;
LABEL_26:
      *(_QWORD *)&v40 = vextq_s8(v27, v27, 8uLL).u64[0];
LABEL_27:
      *(long double *)(a3 + 16) = v12;
      *(double *)&v27.i64[1] = v40;
      *(int8x16_t *)a3 = v27;
      return 1;
    default:
      return 1;
  }
}

double pv_simd_matrix_translate(double a1, double a2, __n128 a3, __n128 a4, float32x4_t a5)
{
  uint64_t v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v5 = 0;
  a5.i32[3] = 1.0;
  v7[2] = a3;
  v7[3] = a4;
  memset(v8, 0, sizeof(v8));
  do
  {
    v8[v5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(v7[v5])), (float32x4_t)xmmword_1B304F240, *(float32x2_t *)&v7[v5], 1), (float32x4_t)xmmword_1B304F250, (float32x4_t)v7[v5], 2), a5, (float32x4_t)v7[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  return *(double *)v8;
}

__int128 *pv_simd_matrix_translate@<X0>(__int128 *result@<X0>, float64x2_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t *v8;
  __int128 vars0;

  v3 = 0;
  v4 = *a2;
  v5 = a2[1];
  v5.f64[1] = 1.0;
  vars0 = *result;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  do
  {
    v7 = *(float64x2_t *)((char *)&vars0 + v3 * 16);
    v6 = *(float64x2_t *)((char *)&vars0 + v3 * 16 + 16);
    v8 = (float64x2_t *)&a3[v3];
    *v8 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1B304EED0, v7.f64[0]), (float64x2_t)xmmword_1B304EEE0, v7, 1), (float64x2_t)0, v6.f64[0]), v4, v6, 1);
    v8[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v7.f64[0]), (float64x2_t)0, v7, 1), (float64x2_t)xmmword_1B304EED0, v6.f64[0]), v5, v6, 1);
    v3 += 2;
  }
  while (v3 != 8);
  return result;
}

double pv_simd_matrix_scale(simd_float4x4 a1, float a2, float32_t a3, float a4)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  _OWORD v9[4];
  _OWORD v10[4];

  v4 = 0;
  v5 = (float32x4_t)LODWORD(a2);
  v6.i32[0] = 0;
  v6.i64[1] = 0;
  v6.f32[1] = a3;
  v7.i64[0] = 0;
  v7.i64[1] = LODWORD(a4);
  v9[2] = a1.columns[2];
  v9[3] = a1.columns[3];
  memset(v10, 0, sizeof(v10));
  do
  {
    v10[v4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v9[v4])), v6, *(float32x2_t *)&v9[v4], 1), v7, (float32x4_t)v9[v4], 2), (float32x4_t)xmmword_1B304EFF0, (float32x4_t)v9[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  return *(double *)v10;
}

__int128 *pv_simd_matrix_scale@<X0>(__int128 *result@<X0>, _OWORD *a2@<X8>, unint64_t a3@<D0>, float64_t a4@<D1>, unint64_t a5@<D2>)
{
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  __int128 vars0;

  v5 = 0;
  v6 = (float64x2_t)a3;
  v7.f64[0] = 0.0;
  v7.f64[1] = a4;
  vars0 = *result;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  do
  {
    v9 = *(float64x2_t *)((char *)&vars0 + v5 * 16);
    v8 = *(float64x2_t *)((char *)&vars0 + v5 * 16 + 16);
    v10 = (float64x2_t *)&a2[v5];
    *v10 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v9.f64[0]), v7, v9, 1), (float64x2_t)0, v8.f64[0]), (float64x2_t)0, v8, 1);
    v10[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v9.f64[0]), (float64x2_t)0, v9, 1), (float64x2_t)a5, v8.f64[0]), (float64x2_t)xmmword_1B304EEE0, v8, 1);
    v5 += 2;
  }
  while (v5 != 8);
  return result;
}

double pv_simd_matrix_get_row(simd_float3x3 a1, int a2)
{
  int32x4_t v2;
  double result;

  v2 = (int32x4_t)a1.columns[0];
  if (a2 == 2)
  {
    *(_QWORD *)&result = vzip2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
  }
  else if (a2 == 1)
  {
    *(_QWORD *)&result = vtrn2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
  }
  else
  {
    result = 0.0;
    if (!a2)
      *(_QWORD *)&result = vzip1q_s32(v2, (int32x4_t)a1.columns[1]).u64[0];
  }
  return result;
}

__n128 pv_simd_matrix_get_row@<Q0>(unint64_t *a1@<X0>, int a2@<W1>, __n128 *a3@<X8>, __n128 a4@<Q2>)
{
  __n128 result;
  unint64_t v5;

  if (a2 == 2)
  {
    result.n128_u64[0] = a1[2];
    v5 = a1[6];
    a4.n128_u64[0] = a1[10];
  }
  else if (a2 == 1)
  {
    result.n128_u64[0] = a1[1];
    v5 = a1[5];
    a4.n128_u64[0] = a1[9];
  }
  else if (a2)
  {
    result.n128_u64[0] = 0;
    v5 = 0;
    a4.n128_u64[0] = 0;
  }
  else
  {
    result.n128_u64[0] = *a1;
    v5 = a1[4];
    a4.n128_u64[0] = a1[8];
  }
  result.n128_u64[1] = v5;
  *a3 = result;
  a3[1] = a4;
  return result;
}

double pv_simd_matrix_get_row(simd_float4x4 a1, int a2)
{
  double result;

  switch(a2)
  {
    case 0:
      *(_QWORD *)&result = vzip1q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
      break;
    case 1:
      *(_QWORD *)&result = vtrn2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
      break;
    case 2:
      *(_QWORD *)&result = vzip2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]).u64[0];
      break;
    case 3:
      *(_QWORD *)&result = vuzp2q_s32(vuzp2q_s32((int32x4_t)a1.columns[0], (int32x4_t)a1.columns[1]), (int32x4_t)a1.columns[0]).u64[0];
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

int64x2_t *pv_simd_matrix_get_row@<X0>(int64x2_t *result@<X0>, int a2@<W1>, int64x2_t *a3@<X8>)
{
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  uint64_t *v9;

  switch(a2)
  {
    case 0:
      v3 = *result;
      v4 = result[2];
      v5 = result[4];
      v6 = result[6];
      goto LABEL_6;
    case 1:
      v7 = vzip2q_s64(*result, result[2]);
      v8.i64[0] = vdupq_laneq_s64(result[4], 1).u64[0];
      v9 = &result[6].i64[1];
      goto LABEL_8;
    case 2:
      v3 = result[1];
      v4 = result[3];
      v5 = result[5];
      v6 = result[7];
LABEL_6:
      v7 = vzip1q_s64(v3, v4);
      v8 = vzip1q_s64(v5, v6);
      break;
    case 3:
      v7 = vzip2q_s64(result[1], result[3]);
      v8.i64[0] = vdupq_laneq_s64(result[5], 1).u64[0];
      v9 = &result[7].i64[1];
LABEL_8:
      v8.i64[1] = *v9;
      break;
    default:
      v7 = 0uLL;
      v8 = 0uLL;
      break;
  }
  *a3 = v7;
  a3[1] = v8;
  return result;
}

double pv_simd_matrix_set_row(int a1, int32x4_t a2, int32x4_t a3, double a4, int32x4_t a5)
{
  int32x4_t v5;
  int32x4_t v6;
  double result;

  if (a1)
  {
    v5 = vzip1q_s32(a2, a3);
    v5.i32[2] = LODWORD(a4);
    if (a1 == 1)
    {
      v6 = a5;
    }
    else
    {
      v6 = vtrn2q_s32(a2, a3);
      v6.i32[2] = HIDWORD(a4);
    }
  }
  else
  {
    v6 = vtrn2q_s32(a2, a3);
    v6.i32[2] = HIDWORD(a4);
    v5 = a5;
  }
  *(_QWORD *)&result = vzip1q_s32(v5, v6).u64[0];
  return result;
}

__n128 pv_simd_matrix_set_row@<Q0>(__int128 *a1@<X0>, int8x16_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int8x16_t v4;
  int8x16_t v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  int8x16_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v4 = a2[1];
  if (!a3)
  {
    result.n128_u64[0] = vextq_s8(v5, v5, 8uLL).u64[0];
    v12 = *((_QWORD *)a1 + 1);
    v11 = *((_QWORD *)a1 + 5);
    *(_QWORD *)&v6 = a2->i64[0];
    *(_QWORD *)&v8 = a2[1].i64[0];
    v13 = *((_QWORD *)a1 + 9);
    goto LABEL_7;
  }
  v6 = *a1;
  result = (__n128)a1[2];
  v8 = a1[4];
  if (a3 == 1)
  {
    v9 = a1[1];
    v10 = (int8x16_t)a1[3];
    v11 = vextq_s8(v5, v5, 8uLL).u64[0];
    v12 = a2->i64[0];
    v13 = a2[1].i64[0];
LABEL_8:
    v4 = (int8x16_t)a1[5];
    goto LABEL_9;
  }
  v13 = *((_QWORD *)a1 + 9);
  v11 = *((_QWORD *)a1 + 5);
  v12 = *((_QWORD *)a1 + 1);
  if (a3 != 2)
  {
LABEL_7:
    v9 = a1[1];
    v10 = (int8x16_t)a1[3];
    goto LABEL_8;
  }
  v10 = vextq_s8(v5, v5, 8uLL);
  *(_QWORD *)&v9 = a2->i64[0];
LABEL_9:
  *((_QWORD *)&v6 + 1) = v12;
  result.n128_u64[1] = v11;
  *((_QWORD *)&v8 + 1) = v13;
  *((_QWORD *)&v9 + 1) = v10.i64[0];
  *(_OWORD *)a4 = v6;
  *(_OWORD *)(a4 + 16) = v9;
  *(__n128 *)(a4 + 32) = result;
  *(int8x16_t *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v8;
  *(int8x16_t *)(a4 + 80) = v4;
  return result;
}

double pv_simd_matrix_set_row(int a1, int32x4_t a2, int32x4_t a3, __n128 a4, __n128 a5, int32x4_t a6)
{
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  double result;

  if (!a1)
  {
    v7.i64[0] = vtrn2q_s32(a2, a3).u64[0];
    v7.i64[1] = __PAIR64__(a5.n128_u32[1], a4.n128_u32[1]);
    v6 = a6;
    goto LABEL_5;
  }
  v6.i64[0] = vzip1q_s32(a2, a3).u64[0];
  v6.i64[1] = __PAIR64__(a5.n128_u32[0], a4.n128_u32[0]);
  if (a1 == 1)
  {
    v7 = a6;
LABEL_5:
    v8.i64[0] = vzip2q_s32(a2, a3).u64[0];
    v8.i64[1] = __PAIR64__(a5.n128_u32[2], a4.n128_u32[2]);
    goto LABEL_6;
  }
  v7.i64[0] = vtrn2q_s32(a2, a3).u64[0];
  v7.i64[1] = __PAIR64__(a5.n128_u32[1], a4.n128_u32[1]);
  if (a1 == 2)
  {
    v8 = a6;
  }
  else
  {
    v8.i64[0] = vzip2q_s32(a2, a3).u64[0];
    v8.i64[1] = __PAIR64__(a5.n128_u32[2], a4.n128_u32[2]);
    if (a1 == 3)
      goto LABEL_7;
  }
LABEL_6:
  a6.i64[0] = vuzp2q_s32(vuzp2q_s32(a2, a3), a2).u64[0];
  a6.i32[2] = a4.n128_i32[3];
  a6.i32[3] = a5.n128_i32[3];
LABEL_7:
  *(_QWORD *)&result = vzip1q_s32(vzip1q_s32(v6, v8), vzip1q_s32(v7, a6)).u64[0];
  return result;
}

int64x2_t pv_simd_matrix_set_row@<Q0>(int64x2_t *a1@<X0>, int64x2_t *a2@<X1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t result;

  v5 = *a2;
  v4 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v11 = a1[4];
  v10 = a1[5];
  v12 = a1[7];
  if (!a3)
  {
    v15 = vzip2q_s64(v6, v8);
    v16.i64[0] = vdupq_laneq_s64(v11, 1).u64[0];
    v16.i64[1] = a1[6].i64[1];
    v13 = *a2;
    v14 = a2[1];
    goto LABEL_5;
  }
  v13 = vzip1q_s64(v6, v8);
  v14 = vzip1q_s64(v11, a1[6]);
  if (a3 == 1)
  {
    v15 = *a2;
    v16 = a2[1];
LABEL_5:
    v17 = vzip1q_s64(v7, v9);
    v18 = vzip1q_s64(v10, v12);
    goto LABEL_6;
  }
  v15 = vzip2q_s64(v6, v8);
  v16.i64[0] = vdupq_laneq_s64(v11, 1).u64[0];
  v16.i64[1] = a1[6].i64[1];
  if (a3 == 2)
  {
    v17 = *a2;
    v18 = a2[1];
  }
  else
  {
    v17 = vzip1q_s64(v7, v9);
    v18 = vzip1q_s64(v10, v12);
    if (a3 == 3)
      goto LABEL_7;
  }
LABEL_6:
  v5 = vzip2q_s64(v7, v9);
  v4.i64[0] = vdupq_laneq_s64(v10, 1).u64[0];
  v4.i64[1] = a1[7].i64[1];
LABEL_7:
  v19 = vzip1q_s64(v13, v15);
  v20 = vzip2q_s64(v13, v15);
  *a4 = v19;
  a4[1] = vzip1q_s64(v17, v5);
  v21 = vzip1q_s64(v14, v16);
  result = vzip2q_s64(v14, v16);
  a4[2] = v20;
  a4[3] = vzip2q_s64(v17, v5);
  a4[4] = v21;
  a4[5] = vzip1q_s64(v18, v4);
  a4[6] = result;
  a4[7] = vzip2q_s64(v18, v4);
  return result;
}

void pv_simd_matrix_lerp(simd_float4x4 a1, simd_float4x4 a2, int a3, float a4)
{
  __n128 v5;
  float64x2_t v7[8];
  float64x2_t v8[8];
  float64x2_t v9[8];
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;

  v22 = (float64x2_t)xmmword_1B304F040;
  v23 = (float64x2_t)unk_1B304F050;
  v24 = (float64x2_t)xmmword_1B304F060;
  v25 = (float64x2_t)unk_1B304F070;
  v18 = (float64x2_t)pv_transform_info_identity;
  v19 = *(float64x2_t *)algn_1B304F010;
  v20 = (float64x2_t)xmmword_1B304F020;
  v21 = (float64x2_t)unk_1B304F030;
  pv_transform_info_make(a1, (PVTransformInfo *)&v18);
  v14 = (float64x2_t)xmmword_1B304F040;
  v15 = (float64x2_t)unk_1B304F050;
  v16 = (float64x2_t)xmmword_1B304F060;
  v17 = (float64x2_t)unk_1B304F070;
  v10 = (float64x2_t)pv_transform_info_identity;
  v11 = *(float64x2_t *)algn_1B304F010;
  v12 = (float64x2_t)xmmword_1B304F020;
  v13 = (float64x2_t)unk_1B304F030;
  pv_transform_info_make(a2, (PVTransformInfo *)&v10);
  v5.n128_f64[0] = a4;
  v8[4] = v22;
  v8[5] = v23;
  v8[6] = v24;
  v8[7] = v25;
  v8[0] = v18;
  v8[1] = v19;
  v8[2] = v20;
  v8[3] = v21;
  v7[4] = v14;
  v7[5] = v15;
  v7[6] = v16;
  v7[7] = v17;
  v7[0] = v10;
  v7[1] = v11;
  v7[2] = v12;
  v7[3] = v13;
  pv_transform_info_lerp(v8, v7, a3, v9, v5);
  pv_simd_float4x4_from_pv_transform_info(v9);
}

void pv_simd_matrix_lerp(__int128 *a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[8];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v9 = a1[4];
  v48 = xmmword_1B304F040;
  v49 = xmmword_1B304F050;
  v50 = xmmword_1B304F060;
  v51 = *(_OWORD *)&qword_1B304F070;
  v44 = pv_transform_info_identity;
  v45 = *(_OWORD *)algn_1B304F010;
  v46 = xmmword_1B304F020;
  v47 = *(_OWORD *)&qword_1B304F030;
  v10 = a1[5];
  v40 = v9;
  v41 = v10;
  v11 = a1[7];
  v42 = a1[6];
  v43 = v11;
  v12 = a1[1];
  v36 = *a1;
  v37 = v12;
  v13 = a1[3];
  v38 = a1[2];
  v39 = v13;
  pv_transform_info_make((uint64_t)&v36, (uint64_t)&v44);
  v40 = xmmword_1B304F040;
  v41 = xmmword_1B304F050;
  v42 = xmmword_1B304F060;
  v43 = *(_OWORD *)&qword_1B304F070;
  v36 = pv_transform_info_identity;
  v37 = *(_OWORD *)algn_1B304F010;
  v38 = xmmword_1B304F020;
  v39 = *(_OWORD *)&qword_1B304F030;
  v14 = a2[5];
  v32 = a2[4];
  v33 = v14;
  v15 = a2[7];
  v34 = a2[6];
  v35 = v15;
  v16 = a2[1];
  v28 = *a2;
  v29 = v16;
  v17 = a2[3];
  v30 = a2[2];
  v31 = v17;
  pv_transform_info_make((uint64_t)&v28, (uint64_t)&v36);
  v32 = v48;
  v33 = v49;
  v34 = v50;
  v35 = v51;
  v28 = v44;
  v29 = v45;
  v30 = v46;
  v31 = v47;
  v23 = v40;
  v24 = v41;
  v25 = v42;
  v26 = v43;
  v19 = v36;
  v20 = v37;
  v18.n128_u64[1] = *((_QWORD *)&v38 + 1);
  v21 = v38;
  v22 = v39;
  v18.n128_f64[0] = a5;
  pv_transform_info_lerp((float64x2_t *)&v28, (float64x2_t *)&v19, a3, v27, v18);
  pv_simd_double4x4_from_pv_transform_info((uint64_t)v27, a4, 0, 0, 0, unk_1B304F038, pv_transform_info_identity, *((uint64_t *)&pv_transform_info_identity + 1), 0, 0, 0, 0, 0, unk_1B304F078, 0x3FF0000000000000, 0x3FF0000000000000, xmmword_1B304F050, v19, v20,
    v21,
    v22,
    v23,
    v24,
    v25);
}

double pv_simd_matrix_convert_coordinate_system(int a1, int a2, simd_float4x4 a3, float32x4_t a4, float32x2_t a5)
{
  char v5;
  unsigned int v6;
  float32x4_t v12;
  char i;
  char v14;
  float v15;
  float32x2_t v17;
  unint64_t v18;

  v5 = 0;
  if ((a1 != 1) != (a2 != 1))
    v6 = -1;
  else
    v6 = 0;
  __asm { FMOV            V16.4S, #1.0 }
  v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1B304F260, _Q16);
  for (i = 1; ; i = 0)
  {
    v14 = i;
    v18 = a4.i64[0];
    v15 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
    v17 = a5;
    if (vabds_f32(v15, *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)))) >= 0.0001)
      break;
    v5 = 1;
    if ((v14 & 1) == 0)
      return pv_simd_matrix_scale(a3, v12.f32[0], v12.f32[1], v12.f32[2]);
  }
  *(float32x2_t *)a4.f32 = vdiv_f32(a5, *(float32x2_t *)a4.f32);
  a4.i32[2] = 1.0;
  v12 = vmulq_f32(v12, a4);
  return pv_simd_matrix_scale(a3, v12.f32[0], v12.f32[1], v12.f32[2]);
}

__int128 *pv_simd_matrix_convert_coordinate_system@<X0>(__int128 *result@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q1>, float64x2_t a7, __int128 a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15)
{
  char v15;
  unint64_t v16;
  float64x2_t v22;
  unint64_t v23;
  float64x2_t v24;
  char i;
  char v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t *v36;
  uint64_t v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t vars0;

  v15 = 0;
  if ((a2 != 1) != (a3 != 1))
    v16 = -1;
  else
    v16 = 0;
  __asm { FMOV            V4.2D, #1.0 }
  v22 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_1B304F270, _Q4);
  v23 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v24.f64[0] = 1.0;
  for (i = 1; ; i = 0)
  {
    v26 = i;
    a7 = a5;
    v27 = *(double *)((unint64_t)&a7 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)));
    vars0 = a6;
    if (vabdd_f64(v27, *(double *)((unint64_t)&vars0 & 0xFFFFFFFFFFFFFFF7 | (8 * (v15 & 1)))) >= 0.0001)
      break;
    v15 = 1;
    if ((v26 & 1) == 0)
    {
      v28 = 0;
      v29 = result[5];
      a12 = result[4];
      a13 = v29;
      v30 = result[7];
      a14 = result[6];
      a15 = v30;
      v31 = result[1];
      a8 = *result;
      a9 = v31;
      v32 = result[3];
      a10 = result[2];
      a11 = v32;
      v33.f64[0] = 0.0;
      v22.f64[1] = 0.0;
      v24.f64[1] = 0.0;
      *(_QWORD *)&v33.f64[1] = v23;
      *a4 = 0u;
      a4[1] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      do
      {
        v35 = *(float64x2_t *)((char *)&a8 + v28 * 16);
        v34 = *(float64x2_t *)((char *)&a8 + v28 * 16 + 16);
        v36 = (float64x2_t *)&a4[v28];
        *v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, v35.f64[0]), v33, v35, 1), (float64x2_t)0, v34.f64[0]), (float64x2_t)0, v34, 1);
        v36[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v35.f64[0]), (float64x2_t)0, v35, 1), v24, v34.f64[0]), (float64x2_t)xmmword_1B304EEE0, v34, 1);
        v28 += 2;
      }
      while (v28 != 8);
      return result;
    }
  }
  v37 = 0;
  *(_QWORD *)&v22.f64[1] = v23;
  v38 = vmulq_f64(v22, vdivq_f64(a6, a5));
  v39 = result[5];
  a12 = result[4];
  a13 = v39;
  v40 = result[7];
  a14 = result[6];
  a15 = v40;
  v41 = result[1];
  a8 = *result;
  a9 = v41;
  v42 = result[3];
  a10 = result[2];
  a11 = v42;
  v43.f64[0] = 0.0;
  v43.f64[1] = v38.f64[1];
  v24.f64[1] = 0.0;
  *a4 = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  do
  {
    v45 = *(float64x2_t *)((char *)&a8 + v37 * 16);
    v44 = *(float64x2_t *)((char *)&a8 + v37 * 16 + 16);
    v46 = (float64x2_t *)&a4[v37];
    *v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v38.f64[0], v45.f64[0]), v43, v45, 1), (float64x2_t)0, v44.f64[0]), (float64x2_t)0, v44, 1);
    v46[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v45.f64[0]), (float64x2_t)0, v45, 1), v24, v44.f64[0]), (float64x2_t)xmmword_1B304EEE0, v44, 1);
    v37 += 2;
  }
  while (v37 != 8);
  return result;
}

double pv_simd_matrix_transform_vector(float32x4_t a1, __n128 a2, float32x4_t a3, __n128 a4, float32x4_t a5, float32x4_t a6)
{
  int32x2_t v6;
  double result;

  *(float32x2_t *)a6.f32 = vadd_f32((float32x2_t)a4.n128_u64[0], vadd_f32(vmul_laneq_f32(*(float32x2_t *)a3.f32, a5, 2), vadd_f32(vmul_n_f32(*(float32x2_t *)a1.f32, a5.f32[0]), vmul_lane_f32((float32x2_t)a2.n128_u64[0], *(float32x2_t *)a5.f32, 1))));
  a6.f32[2] = a4.n128_f32[2]
            + (float)(COERCE_FLOAT(vmulq_f32(a3, a5).i32[2])
                    + (float)(vmulq_laneq_f32(a5, a1, 2).f32[0]
                            + vmuls_lane_f32(a2.n128_f32[2], *(float32x2_t *)a5.f32, 1)));
  v6 = (int32x2_t)vmulq_laneq_f32(a5, a1, 3).u64[0];
  *(float *)v6.i32 = a4.n128_f32[3]
                   + (float)(vmuls_lane_f32(a3.f32[3], a5, 2)
                           + (float)(*(float *)v6.i32 + vmuls_lane_f32(a2.n128_f32[3], *(float32x2_t *)a5.f32, 1)));
  *(_QWORD *)&result = vdivq_f32(a6, (float32x4_t)vdupq_lane_s32(v6, 0)).u64[0];
  return result;
}

float64x2_t pv_simd_matrix_transform_vector@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t result;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a1[3];
  v6 = a1[5];
  v7 = vmulq_n_f64(a1[4], v3.f64[0]);
  v8 = vaddq_f64(a1[6], vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, a2->f64[0]), vmulq_laneq_f64(a1[2], *a2, 1)), v7));
  v7.f64[0] = a1[7].f64[0]
            + vmuld_n_f64(a2->f64[0], v4.f64[0])
            + vmuld_lane_f64(v5.f64[0], *a2, 1)
            + vmuld_n_f64(v3.f64[0], v6.f64[0]);
  v3.f64[0] = a1[7].f64[1]
            + vmuld_lane_f64(a2->f64[0], v4, 1)
            + vmuld_lane_f64(a2->f64[1], v5, 1)
            + vmuld_lane_f64(v3.f64[0], v6, 1);
  v9 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v3.f64[0], 0));
  result = vdivq_f64(v7, v3);
  *a3 = v9;
  a3[1] = result;
  return result;
}

{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t result;

  v3 = a2[1];
  v4 = vaddq_f64(vaddq_f64(vmulq_n_f64(a1[1], a2->f64[0]), vmulq_laneq_f64(a1[3], *a2, 1)), vmulq_n_f64(a1[5], v3.f64[0]));
  v5 = vmulq_laneq_f64(a1[7], v3, 1);
  result = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, a2->f64[0]), vmulq_laneq_f64(a1[2], *a2, 1)), vmulq_n_f64(a1[4], v3.f64[0])), vmulq_laneq_f64(a1[6], v3, 1));
  *a3 = result;
  a3[1] = vaddq_f64(v4, v5);
  return result;
}

double pv_simd_matrix_transform_vector(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmulq_laneq_f32(a4, a5, 3), vaddq_f32(vmulq_laneq_f32(a3, a5, 2), vaddq_f32(vmulq_n_f32(a1, a5.f32[0]), vmulq_lane_f32(a2, *(float32x2_t *)a5.f32, 1)))).u64[0];
  return result;
}

BOOL pv_is_finite(simd_float3x3 a1)
{
  __n128 v2;
  __n128 v3;

  v2 = (__n128)a1.columns[2];
  v3 = (__n128)a1.columns[1];
  return pv_is_finite((__n128)a1.columns[0]) && pv_is_finite(v3) && pv_is_finite(v2);
}

BOOL pv_is_finite(simd_float4x4 a1)
{
  __n128 v2;
  __n128 v3;
  __n128 v4;

  v2 = (__n128)a1.columns[3];
  v3 = (__n128)a1.columns[2];
  v4 = (__n128)a1.columns[1];
  return pv_is_finite((__n128)a1.columns[0]) && pv_is_finite(v4) && pv_is_finite(v3) && pv_is_finite(v2);
}

void sub_1B277F02C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B277F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  HGObject::operator delete(v19);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 24))(a19);
  _Unwind_Resume(a1);
}

void sub_1B277F4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B277F72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B277F808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B277F8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PVRendererBase;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B277F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<HGRef<PVRenderJob>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B277FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);

  _Unwind_Resume(a1);
}

void **std::vector<HGRef<PVRenderJob>>::push_back[abi:ne180100](uint64_t *a1, void ***a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void ***v7;
  void **result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void ***v15;
  void **v16;
  void *v17[2];
  void ***v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(void ****)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = (void ***)&v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v18 = v15;
    v19 = &v14[8 * v13];
    v16 = *a2;
    *v15 = *a2;
    if (v16)
    {
      (*((void (**)(void **))*v16 + 2))(v16);
      v15 = v18;
    }
    v18 = v15 + 1;
    std::vector<HGRef<PVRenderJob>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<HGRef<PVRenderJob>>::~__split_buffer(v17);
  }
  else
  {
    result = *a2;
    *v7 = *a2;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B277FC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_1B277FE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B277FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B277FFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2780128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2780190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27801F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27802BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  if (__p)
    operator delete(__p);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v18 - 48));
  _Unwind_Resume(a1);
}

void sub_1B2780398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  if (__p)
    operator delete(__p);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v18 - 48));
  _Unwind_Resume(a1);
}

void sub_1B27804E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PVPerfStats::~PVPerfStats(PVPerfStats *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  v2 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x81C40B8603338);

  v3 = (void *)*((_QWORD *)this + 71);
  if (v3)
  {
    *((_QWORD *)this + 72) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 60);
  if (v4)
  {
    *((_QWORD *)this + 61) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 49);
  if (v5)
  {
    *((_QWORD *)this + 50) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 38);
  if (v6)
  {
    *((_QWORD *)this + 39) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 27);
  if (v7)
  {
    *((_QWORD *)this + 28) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void **)((char *)this + 32);
  std::vector<PVPerfStats::FrameStats>::__destroy_vector::operator()[abi:ne180100](&v9);
}

uint64_t *std::vector<HGRef<PVRenderJob>>::__init_with_size[abi:ne180100]<HGRef<PVRenderJob>*,HGRef<PVRenderJob>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B27806D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<HGRef<PVRenderJob>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*,HGRef<PVRenderJob>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *v4 = *v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v4 = v12;
      }
      ++v6;
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B2780788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,HGRef<PVRenderJob>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      v8 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      v7 = v8;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    }
    while (v6 != a5);
  }
}

void std::vector<HGRef<PVRenderJob>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HGRef<PVRenderJob>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<HGRef<PVRenderJob>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 8)
  {
    v5 = *(_QWORD **)(i - 8);
    result = v5;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<HGRef<PVRenderJob>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>,std::reverse_iterator<HGRef<PVRenderJob>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v10 = v11;
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v7 = *((_QWORD *)&v17 + 1);
      }
      v7 -= 8;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B27809E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<HGRef<PVRenderJob>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVRenderJob>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVRenderJob>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<PVRenderJob>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVRenderJob>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVRenderJob>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a2 + 32); i != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*i)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      i = *(_QWORD **)(a2 + 32);
    }
    ++i;
  }
}

void **std::__split_buffer<HGRef<PVRenderJob>>::~__split_buffer(void **a1)
{
  std::__split_buffer<HGRef<PVRenderJob>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<HGRef<PVRenderJob>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD **)(v2 - 8);
      v2 -= 8;
      result = v5;
      v4[2] = v2;
      if (v5)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        v2 = v4[2];
      }
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,HGRef<PVRenderJob> *,HGRef<PVRenderJob> *,HGRef<PVRenderJob> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *a3;
      v7 = *v4;
      if (*a3 != *v4)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
          v7 = *v4;
        }
        *a3 = v7;
        *v4 = 0;
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1B2780C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2780CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2780D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2780DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2780E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2780ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2780F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B278120C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B27812A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void *pv_CGPoint_array_from_NSArray(void *a1)
{
  id v1;
  void *v2;
  _QWORD v4[5];

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = malloc_type_malloc(16 * objc_msgSend(v1, "count"), 0x1000040451B5BE8uLL);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __pv_CGPoint_array_from_NSArray_block_invoke;
    v4[3] = &__block_descriptor_40_e24_v32__0__NSValue_8Q16_B24l;
    v4[4] = v2;
    objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id pv_CGPoint_array_to_NSArray(uint64_t a1, unsigned int a2)
{
  void *v2;
  double *v5;
  uint64_t v6;
  void *v7;

  v2 = 0;
  if (a1 && a2)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 4);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (double *)(a1 + 8);
    v6 = a2;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", *(v5 - 1), *v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v7);

      v5 += 2;
      --v6;
    }
    while (v6);
  }
  return v2;
}

__n128 pv_CGPoint_polygon_centroid(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float64x2_t v5;
  unint64_t v6;
  float64x2_t v12;
  void *v13;
  __int128 v14;
  double v15;
  float64x2_t v16;
  void *v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  __int128 v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;

  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0uLL;
    v6 = 1;
    __asm { FMOV            V0.2D, #3.0 }
    v23 = _Q0;
    v12 = 0uLL;
    do
    {
      v30 = v12;
      v31 = v5;
      objc_msgSend(v1, "objectAtIndexedSubscript:", v4, *(_OWORD *)&v23);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "CGPointValue");
      v27 = v14;
      v28 = v15;
      *(_QWORD *)&v16.f64[0] = v14;
      v16.f64[1] = v15;
      v29 = v16;

      objc_msgSend(v1, "objectAtIndexedSubscript:", v6);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "CGPointValue");
      v24 = v19;
      v25 = v18;
      v20.f64[0] = v18;
      v20.f64[1] = v19;
      v26 = v20;

      v21.f64[1] = *((float64_t *)&v27 + 1);
      v21.f64[0] = *(double *)&v27 * v24 - v28 * v25;
      v5 = vaddq_f64(v31, vmulq_n_f64(vaddq_f64(v29, v26), v21.f64[0]));
      v12 = vaddq_f64(v30, vmulq_f64(v21, v23));
      ++v4;
      v6 = (v6 + 1) % v3;
    }
    while (v3 != v4);
  }
  else
  {
    v5 = 0uLL;
    v12.f64[0] = 0.0;
  }
  v32 = vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12.f64[0], 0));

  return (__n128)v32;
}

float64x2_t *pv_CGPoint_scale_polygon(float64x2_t *result, unsigned int a2, CGPoint a3, float64x2_t *a4)
{
  uint64_t v4;
  float64x2_t v5;
  unsigned int v6;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  CGFloat y;
  float64x2_t v21;

  if (a2)
  {
    v4 = a2;
    v5 = 0uLL;
    v6 = 1;
    __asm { FMOV            V4.2D, #3.0 }
    v12 = a2;
    v13 = result;
    v14 = 0uLL;
    do
    {
      v15 = *v13++;
      v16 = result[v6];
      v17 = vmulq_f64(v15, (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL));
      v18 = vsubq_f64(v17, (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1));
      v14 = vaddq_f64(v14, vmulq_f64(v18, _Q4));
      v5 = vaddq_f64(v5, vmulq_n_f64(vaddq_f64(v15, v16), v18.f64[0]));
      v6 = (v6 + 1) % a2;
      --v12;
    }
    while (v12);
    *(_QWORD *)&v5.f64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    v19 = vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0));
    y = a3.y;
    do
    {
      v21 = *result++;
      *a4++ = vaddq_f64(v19, vmulq_f64((float64x2_t)a3, vsubq_f64(v21, v19)));
      --v4;
    }
    while (v4);
  }
  return result;
}

id pv_CGPoint_scale_polygon(void *a1, float64_t a2, float64_t a3)
{
  id v3;
  void *v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  void *v11;
  float64_t v12;
  float64x2_t v13;
  void *v14;
  float64_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t v20;
  float64x2_t v22;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = pv_CGPoint_polygon_centroid(v3).n128_u64[0];
  v16 = v6;
  v17 = v5;
  v7 = objc_msgSend(v3, "count");
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    *(_QWORD *)&v10.f64[0] = v17;
    v10.f64[1] = v16;
    v18 = v10;
    v10.f64[0] = a2;
    v10.f64[1] = a3;
    v20 = v10;
    do
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "CGPointValue");
      v13.f64[1] = v12;
      v22 = v13;

      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", vaddq_f64(v18, vmulq_f64(v20, vsubq_f64(v22, v18))));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v14);

      ++v9;
    }
    while (v8 != v9);
  }

  return v4;
}

double pv_bounding_CGRect(void *a1)
{
  id v1;
  double v2;
  _QWORD v4[8];
  _QWORD v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  v8 = 0;
  v9 = (double *)&v8;
  v10 = 0x2020000000;
  v11 = 0x7FEFFFFFFFFFFFFFLL;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0xFFEFFFFFFFFFFFFFLL;
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2020000000;
  v6[3] = 0xFFEFFFFFFFFFFFFFLL;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  v5[3] = 0x7FEFFFFFFFFFFFFFLL;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___Z18pv_bounding_CGRectP7NSArrayIP7NSValueE_block_invoke;
  v4[3] = &unk_1E64D53E8;
  v4[4] = &v8;
  v4[5] = v7;
  v4[6] = v6;
  v4[7] = v5;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);
  v2 = v9[3];
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v8, 8);

  return v2;
}

void sub_1B2781860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z18pv_bounding_CGRectP7NSArrayIP7NSValueE_block_invoke(_QWORD *a1, void *a2)
{
  uint64_t result;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = objc_msgSend(a2, "CGPointValue");
  v6 = *(_QWORD *)(a1[4] + 8);
  if (v4 < *(double *)(v6 + 24))
    *(double *)(v6 + 24) = v4;
  v7 = *(_QWORD *)(a1[5] + 8);
  if (v4 > *(double *)(v7 + 24))
    *(double *)(v7 + 24) = v4;
  v8 = *(_QWORD *)(a1[6] + 8);
  if (v5 > *(double *)(v8 + 24))
    *(double *)(v8 + 24) = v5;
  v9 = *(_QWORD *)(a1[7] + 8);
  if (v5 < *(double *)(v9 + 24))
    *(double *)(v9 + 24) = v5;
  return result;
}

id pv_CGRect_to_NSArray(CGRect a1)
{
  _QWORD v2[9];

  v2[8] = *MEMORY[0x1E0C80C00];
  v2[0] = *(_QWORD *)&a1.origin.x;
  v2[1] = *(_QWORD *)&a1.origin.y;
  *(double *)&v2[2] = a1.origin.x + a1.size.width;
  v2[3] = *(_QWORD *)&a1.origin.y;
  *(double *)&v2[4] = a1.origin.x + a1.size.width;
  *(double *)&v2[5] = a1.origin.y + a1.size.height;
  v2[6] = *(_QWORD *)&a1.origin.x;
  *(double *)&v2[7] = a1.origin.y + a1.size.height;
  pv_CGPoint_array_to_NSArray((uint64_t)v2, 4u);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t pv_is_CGPoint_in_polygon(void *a1, double a2, double a3)
{
  id v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  BOOL v23;

  v5 = a1;
  v6 = objc_msgSend(v5, "count");
  v7 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = v6 - 1;
    do
    {
      v11 = v10;
      v10 = v8;
      objc_msgSend(v5, "objectAtIndexedSubscript:", v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "CGPointValue");
      v14 = v13;
      v16 = v15;

      objc_msgSend(v5, "objectAtIndexedSubscript:", v11);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "CGPointValue");
      v19 = v18;
      v21 = v20;

      v22 = v16 <= a3 && a3 < v21;
      if (v22 || (v21 <= a3 ? (v23 = a3 < v16) : (v23 = 0), v23))
      {
        if (a2 < v14 + (a3 - v16) * (v19 - v14) / (v21 - v16))
          v9 ^= 1u;
      }
      v8 = v10 + 1;
    }
    while (v7 != v10 + 1);
  }
  else
  {
    v9 = 0;
  }

  return v9 & 1;
}

CGPath *pv_create_closed_CGPath_with_points(void *a1)
{
  id v1;
  CGPath *Mutable;
  _QWORD v4[5];

  v1 = a1;
  Mutable = CGPathCreateMutable();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __pv_create_closed_CGPath_with_points_block_invoke;
  v4[3] = &__block_descriptor_40_e24_v32__0__NSValue_8Q16_B24l;
  v4[4] = Mutable;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);

  CGPathCloseSubpath(Mutable);
  return Mutable;
}

CGPathRef pv_create_expanded_closed_CGPath_with_CGPath(const CGPath *a1, CGFloat a2)
{
  return CGPathCreateCopyByStrokingPath(a1, 0, a2, kCGLineCapRound, kCGLineJoinRound, 0.0);
}

void sub_1B27820C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2782238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2782320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t PVThermalMonitorPreviousLevel(int a1)
{
  return *((unsigned int *)PVThermalLevelEntry(a1) + 2);
}

uint64_t **PVThermalLevelEntry(int a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  int v8;
  int *v9;

  v8 = a1;
  if ((v1 & 1) == 0
  {
    qword_1EF074740 = 0;
    qword_1EF074738 = 0;
    PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap = (uint64_t)&qword_1EF074738;
    __cxa_atexit((void (*)(void *))std::map<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>::~map[abi:ne180100], &PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &dword_1B2737000);
  }
  if (PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::onceToken != -1)
    dispatch_once(&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::onceToken, &__block_literal_global_73);
  v2 = qword_1EF074738;
  if (!qword_1EF074738)
    goto LABEL_14;
  v3 = &qword_1EF074738;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < v8;
    if (v4 >= v8)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_1EF074738 || v8 < *((_DWORD *)v3 + 8))
LABEL_14:
    v8 = 99999;
  v9 = &v8;
  return std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 5;
}

uint64_t PVThermalMonitorNextLevel(int a1)
{
  return *((unsigned int *)PVThermalLevelEntry(a1) + 3);
}

uint64_t *PVThermalMonitorLevelName(int a1)
{
  return *PVThermalLevelEntry(a1);
}

void sub_1B2782CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B2782EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B2782FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27830B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27831C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1B2783480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::map<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void ___ZL19PVThermalLevelEntry28PVSPI_OSThermalPressureLevel_block_invoke()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  int *v15;

  v14 = 0;
  v15 = &v14;
  v0 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  v1 = v0[5];
  v0[5] = (uint64_t *)CFSTR("nominal");

  v0[6] = (uint64_t *)0xA00000000;
  v14 = 10;
  v15 = &v14;
  v2 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  v3 = v2[5];
  v2[5] = (uint64_t *)CFSTR("light");

  v2[6] = (uint64_t *)0x1400000000;
  v14 = 20;
  v15 = &v14;
  v4 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  v5 = v4[5];
  v4[5] = (uint64_t *)CFSTR("moderate");

  v4[6] = (uint64_t *)0x1E0000000ALL;
  v14 = 30;
  v15 = &v14;
  v6 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  v7 = v6[5];
  v6[5] = (uint64_t *)CFSTR("heavy");

  v6[6] = (uint64_t *)0x2800000014;
  v14 = 40;
  v15 = &v14;
  v8 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  v9 = v8[5];
  v8[5] = (uint64_t *)CFSTR("trapping");

  v8[6] = (uint64_t *)0x320000001ELL;
  v14 = 50;
  v15 = &v14;
  v10 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &v14, (uint64_t)&std::piecewise_construct, &v15);
  v11 = v10[5];
  v10[5] = (uint64_t *)CFSTR("sleeping");

  v10[6] = (uint64_t *)0x3200000028;
  v15 = &PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::kNotFoundMaxLevel;
  v12 = std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>((uint64_t **)&PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::sThermalLevelEntryMap, &PVThermalLevelEntry(PVSPI_OSThermalPressureLevel)::kNotFoundMaxLevel, (uint64_t)&std::piecewise_construct, &v15);
  v13 = v12[5];
  v12[5] = (uint64_t *)CFSTR("unknown");

  v12[6] = (uint64_t *)0x3200000000;
}

uint64_t **std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVSPI_OSThermalPressureLevel_Entry>>>::__emplace_unique_key_args<PVSPI_OSThermalPressureLevel,std::piecewise_construct_t const&,std::tuple<PVSPI_OSThermalPressureLevel&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1B27838E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2783940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVHGBitmapImageBufferImpl;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B2783AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t freeUnderlyingHGBitmap(void *a1, const void *a2)
{
  return (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t pv_buffer_size_for_string_representation(simd_float3x3 a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(simd_float3x3 a1, char *a2, size_t a3, uint64_t a4)
{
  __n128 v7;
  size_t v8;
  int string_representation;
  int v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  char *v14;
  size_t v15;
  int v16;
  int v17;
  char *v18;
  size_t v19;
  __n128 v20;
  simd_float3x3 v22;

  v22 = a1;
  v7.n128_f64[0] = pv_simd_matrix_get_row(a1, 0);
  if (a2)
    v8 = a3;
  else
    v8 = 0;
  string_representation = pv_get_string_representation(a2, v8, a4, v7);
  v10 = string_representation;
  v11 = 0;
  for (i = 1; i != 3; ++i)
  {
    v13 = v11 + string_representation;
    if (a2)
      v14 = &a2[v13];
    else
      v14 = 0;
    if (a2)
      v15 = a3 - v13;
    else
      v15 = 0;
    v16 = snprintf(v14, v15, ",\n", *(_OWORD *)v22.columns, *(_OWORD *)&v22.columns[1], *(_OWORD *)&v22.columns[2]);
    v11 = v13 + v16;
    v17 = v16 + v10;
    if (a2)
      v18 = &a2[v11];
    else
      v18 = 0;
    if (a2)
      v19 = a3 - v11;
    else
      v19 = 0;
    v20.n128_f64[0] = pv_simd_matrix_get_row(v22, i);
    string_representation = pv_get_string_representation(v18, v19, a4, v20);
    v10 = string_representation + v17;
  }
  return (string_representation + v17);
}

uint64_t pv_buffer_size_for_string_representation(_OWORD *a1, uint64_t a2, double a3, double a4, __n128 a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];

  v5 = a1[3];
  v9[2] = a1[2];
  v9[3] = v5;
  v6 = a1[5];
  v9[4] = a1[4];
  v9[5] = v6;
  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  return pv_get_string_representation(v9, 0, 0, a2, *(double *)v9, *(double *)&v7, a5) + 1;
}

uint64_t pv_get_string_representation(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, __n128 a7)
{
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  size_t v18;
  int string_representation;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  int v24;
  int8x16_t v26[2];
  _OWORD v27[6];
  __n128 v28[2];

  v11 = 0;
  v12 = 0;
  v13 = 0;
  while (1)
  {
    v14 = a1[3];
    v27[2] = a1[2];
    v27[3] = v14;
    v15 = a1[5];
    v27[4] = a1[4];
    v27[5] = v15;
    v16 = a1[1];
    v27[0] = *a1;
    v27[1] = v16;
    pv_simd_matrix_get_row((unint64_t *)v27, v11, v28, a7);
    v17 = a2 ? (char *)(a2 + v13) : 0;
    v18 = a2 ? a3 - v13 : 0;
    v26[0] = (int8x16_t)v28[0];
    v26[1] = (int8x16_t)v28[1];
    string_representation = pv_get_string_representation(v26, v17, v18, a4);
    v20 = (string_representation + v12);
    if (v11 == 2)
      break;
    v21 = v13 + string_representation;
    if (a2)
      v22 = (char *)(a2 + v21);
    else
      v22 = 0;
    if (a2)
      v23 = a3 - v21;
    else
      v23 = 0;
    v24 = snprintf(v22, v23, ",\n");
    v12 = v24 + v20;
    v13 = v21 + v24;
    ++v11;
  }
  return v20;
}

uint64_t pv_buffer_size_for_string_representation(simd_float4x4 a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(simd_float4x4 a1, char *a2, size_t a3, uint64_t a4)
{
  __n128 v7;
  size_t v8;
  int string_representation;
  int v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  char *v14;
  size_t v15;
  int v16;
  int v17;
  char *v18;
  size_t v19;
  __n128 v20;
  simd_float4x4 v22;

  v22 = a1;
  v7.n128_f64[0] = pv_simd_matrix_get_row(a1, 0);
  if (a2)
    v8 = a3;
  else
    v8 = 0;
  string_representation = pv_get_string_representation(a2, v8, a4, v7);
  v10 = string_representation;
  v11 = 0;
  for (i = 1; i != 4; ++i)
  {
    v13 = v11 + string_representation;
    if (a2)
      v14 = &a2[v13];
    else
      v14 = 0;
    if (a2)
      v15 = a3 - v13;
    else
      v15 = 0;
    v16 = snprintf(v14, v15, ",\n", *(_OWORD *)v22.columns, *(_OWORD *)&v22.columns[1], *(_OWORD *)&v22.columns[2], *(_OWORD *)&v22.columns[3]);
    v11 = v13 + v16;
    v17 = v16 + v10;
    if (a2)
      v18 = &a2[v11];
    else
      v18 = 0;
    if (a2)
      v19 = a3 - v11;
    else
      v19 = 0;
    v20.n128_f64[0] = pv_simd_matrix_get_row(v22, i);
    string_representation = pv_get_string_representation(v18, v19, a4, v20);
    v10 = string_representation + v17;
  }
  return (string_representation + v17);
}

uint64_t pv_buffer_size_for_string_representation(int64x2_t *a1, uint64_t a2)
{
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v7[8];

  v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  v5 = a1[3];
  v7[2] = a1[2];
  v7[3] = v5;
  return pv_get_string_representation(v7, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  char *v15;
  size_t v16;
  int string_representation;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  int v22;
  __int128 v24[2];
  int64x2_t v25[8];
  int64x2_t v26[2];

  v8 = 0;
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = a1[5];
    v25[4] = a1[4];
    v25[5] = v11;
    v12 = a1[7];
    v25[6] = a1[6];
    v25[7] = v12;
    v13 = a1[1];
    v25[0] = *a1;
    v25[1] = v13;
    v14 = a1[3];
    v25[2] = a1[2];
    v25[3] = v14;
    pv_simd_matrix_get_row(v25, v8, v26);
    v15 = a2 ? (char *)(a2 + v10) : 0;
    v16 = a2 ? a3 - v10 : 0;
    v24[0] = (__int128)v26[0];
    v24[1] = (__int128)v26[1];
    string_representation = pv_get_string_representation(v24, v15, v16, a4);
    v18 = (string_representation + v9);
    if (v8 == 3)
      break;
    v19 = v10 + string_representation;
    if (a2)
      v20 = (char *)(a2 + v19);
    else
      v20 = 0;
    if (a2)
      v21 = a3 - v19;
    else
      v21 = 0;
    v22 = snprintf(v20, v21, ",\n");
    v9 = v22 + v18;
    v10 = v19 + v22;
    ++v8;
  }
  return v18;
}

void sub_1B2784158(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B278424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVEffectScheduler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B2784520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v11 - 240));
  _Unwind_Resume(a1);
}

void sub_1B2784698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B2784A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

uint64_t LoadableInstruction::LoadInstructionGraphNodes(uint64_t result, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(result + 12))
  {
    *(_BYTE *)(result + 12) = 1;
    v2 = *(void **)(result + 16);
    v3 = *a2;
    v4 = v3;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    objc_msgSend(v2, "loadInstructionGraphNodes:", &v4);
    result = v4;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  return result;
}

void sub_1B2784B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

BOOL LoadableInstruction::ShouldLoadForTime(LoadableInstruction *this, CMTime *a2, CMTime *a3, int a4)
{
  _BOOL8 result;
  char v5;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  int v12;
  _BOOL4 v13;
  double v14;
  CMTime v15;
  CMTimeRange v16;
  CMTime duration;
  CMTime start;
  CMTimeRange v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v29;
  CMTime v30;
  CMTime time;
  CMTimeRange range;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (*((_BYTE *)this + 12))
    return 0;
  v5 = a4;
  v9 = 28;
  if (a4)
    v9 = 76;
  v10 = (__int128 *)((char *)this + v9);
  v11 = v10[1];
  v33 = *v10;
  v34 = v11;
  v35 = v10[2];
  *(_OWORD *)&range.start.value = v33;
  *(_OWORD *)&range.start.epoch = v11;
  *(_OWORD *)&range.duration.timescale = v35;
  time = *a2;
  v12 = CMTimeRangeContainsTime(&range, &time);
  result = v12 != 0;
  if (!v12 && (v5 & 1) == 0)
  {
    if (!*((_BYTE *)this + 24))
    {
      memset(&v30, 0, sizeof(v30));
      v13 = +[PVDeviceCharacteristics isLowMemDevice](PVDeviceCharacteristics, "isLowMemDevice");
      v14 = 0.9;
      if (!v13)
        v14 = 3.0;
      CMTimeMakeWithSeconds(&v30, v14, 30);
      memset(&v29, 0, sizeof(v29));
      lhs = *a2;
      rhs = v30;
      CMTimeAdd(&v29, &lhs, &rhs);
      time1 = v29;
      time2 = *a3;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        memset(&v24, 0, sizeof(v24));
        v23 = v30;
        v21 = *a3;
        v20 = *a2;
        CMTimeSubtract(&v22, &v21, &v20);
        CMTimeSubtract(&v24, &v23, &v22);
        memset(&v19, 0, sizeof(v19));
        CMTimeMakeWithSeconds(&start, -3.0, a2->timescale);
        duration = v24;
        CMTimeRangeMake(&v19, &start, &duration);
        v16 = v19;
        *(_OWORD *)&v15.value = v33;
        v15.epoch = v34;
        return CMTimeRangeContainsTime(&v16, &v15) != 0;
      }
    }
    return 0;
  }
  return result;
}

BOOL LoadableInstruction::ShouldReleaseForTime(LoadableInstruction *this, CMTime *a2, CMTime *a3)
{
  __int128 v6;
  _BOOL4 v8;
  double v9;
  __int128 v10;
  CMTime v11;
  CMTimeRange v12;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v17;
  CMTime v18;
  CMTime time;
  CMTimeRange range;

  if (!*((_BYTE *)this + 12))
    return 0;
  v6 = *(_OWORD *)((char *)this + 140);
  *(_OWORD *)&range.start.value = *(_OWORD *)((char *)this + 124);
  *(_OWORD *)&range.start.epoch = v6;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)((char *)this + 156);
  time = *a2;
  if (CMTimeRangeContainsTime(&range, &time))
    return 0;
  memset(&v18, 0, sizeof(v18));
  v8 = +[PVDeviceCharacteristics isLowMemDevice](PVDeviceCharacteristics, "isLowMemDevice");
  v9 = 0.9;
  if (!v8)
    v9 = 3.0;
  CMTimeMakeWithSeconds(&v18, v9, 30);
  memset(&v17, 0, sizeof(v17));
  lhs = *a2;
  rhs = v18;
  CMTimeAdd(&v17, &lhs, &rhs);
  time1 = v17;
  time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0)
    return 1;
  v10 = *(_OWORD *)((char *)this + 140);
  *(_OWORD *)&v12.start.value = *(_OWORD *)((char *)this + 124);
  *(_OWORD *)&v12.start.epoch = v10;
  *(_OWORD *)&v12.duration.timescale = *(_OWORD *)((char *)this + 156);
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  return CMTimeRangeContainsTime(&v12, &v11) == 0;
}

uint64_t *std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__emplace_unique_key_args<HGRef<LoadableInstruction>,HGRef<LoadableInstruction> const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__find_equal<HGRef<LoadableInstruction>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__construct_node<HGRef<LoadableInstruction> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__find_equal<HGRef<LoadableInstruction>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!LoadableInstruction::operator<(*a3, v4[4]))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!LoadableInstruction::operator<(v7[4], *a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::__construct_node<HGRef<LoadableInstruction> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = *a2;
  v6[4] = *a2;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B27853B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<HGRef<LoadableInstruction>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL LoadableInstruction::operator<(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  CMTime v6;
  CMTime time2;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CMTime time1;

  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    objc_msgSend(v3, "timeRange");
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
  }
  *(_OWORD *)&time1.value = v8;
  time1.epoch = v9;
  v4 = *(void **)(a2 + 16);
  if (v4)
    objc_msgSend(v4, "timeRange");
  else
    memset(&v6, 0, sizeof(v6));
  time2 = v6;
  return CMTimeCompare(&time1, &time2) == -1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<HGRef<LoadableInstruction>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[4];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::destroy(a1, *a2);
    std::__tree<HGRef<LoadableInstruction>,LoadableInstructionCompare,std::allocator<HGRef<LoadableInstruction>>>::destroy(a1, a2[1]);
    v4 = a2[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

void LoadableInstruction::LoadableInstruction(LoadableInstruction *this, PVVideoCompositionInstruction *a2, int a3)
{
  PVVideoCompositionInstruction *v5;
  PVVideoCompositionInstruction *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  __int128 v39;
  _OWORD v40[2];
  CMTime v41;
  CMTime v42;
  CMTime duration;
  CMTime rhs;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CMTime lhs;
  CMTime start;
  CMTimeRange v50;
  CMTime v51;
  CMTime v52;
  CMTime v53;

  v5 = a2;
  HGObject::HGObject(this);
  *(_QWORD *)this = off_1E64D5508;
  *((_BYTE *)this + 12) = 0;
  v6 = v5;
  *((_QWORD *)this + 2) = v6;
  *((_BYTE *)this + 24) = a3;
  if (+[PVDeviceCharacteristics actualMemory](PVDeviceCharacteristics, "actualMemory") > 0x40000000)
  {
    CMTimeMakeWithSeconds(&v50.start, 3.0, 30);
    v53 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 1.0, 30);
    v52 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 3.1, 30);
  }
  else
  {
    CMTimeMakeWithSeconds(&v50.start, 0.9, 30);
    v53 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 0.5, 30);
    v52 = v50.start;
    CMTimeMakeWithSeconds(&v50.start, 1.0, 30);
  }
  v51 = v50.start;
  if (v6)
  {
    -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
  }
  else
  {
    v46 = 0u;
    v47 = 0u;
    v45 = 0u;
  }
  *(_OWORD *)&lhs.value = v45;
  lhs.epoch = v46;
  rhs = v52;
  CMTimeSubtract(&start, &lhs, &rhs);
  if (v6)
  {
    -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    v39 = 0u;
  }
  v41 = *(CMTime *)((char *)v40 + 8);
  v38 = v52;
  CMTimeAdd(&v42, &v41, &v38);
  v37 = v52;
  CMTimeAdd(&duration, &v42, &v37);
  CMTimeRangeMake(&v50, &start, &duration);
  v7 = *(_OWORD *)&v50.start.epoch;
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)&v50.start.value;
  *(_OWORD *)((char *)this + 92) = v7;
  *(_OWORD *)((char *)this + 108) = *(_OWORD *)&v50.duration.timescale;
  if (a3)
  {
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      v46 = 0u;
      v47 = 0u;
      v45 = 0u;
    }
    *(_OWORD *)&v35.value = v45;
    v35.epoch = v46;
    CMTimeMakeWithSeconds(&v34, 0.9, 30);
    CMTimeSubtract(&v36, &v35, &v34);
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      v39 = 0u;
    }
    v32 = *(CMTime *)((char *)v40 + 8);
    CMTimeMakeWithSeconds(&v31, 0.9, 30);
    CMTimeAdd(&v33, &v32, &v31);
    CMTimeRangeMake(&v50, &v36, &v33);
    v9 = *(_OWORD *)&v50.start.epoch;
    *(_OWORD *)((char *)this + 28) = *(_OWORD *)&v50.start.value;
    *(_OWORD *)((char *)this + 44) = v9;
    *(_OWORD *)((char *)this + 60) = *(_OWORD *)&v50.duration.timescale;
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      v46 = 0u;
      v47 = 0u;
      v45 = 0u;
    }
    *(_OWORD *)&v29.value = v45;
    v29.epoch = v46;
    CMTimeMakeWithSeconds(&v28, 1.0, 30);
    CMTimeSubtract(&v30, &v29, &v28);
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      v39 = 0u;
    }
    v26 = *(CMTime *)((char *)v40 + 8);
    CMTimeMakeWithSeconds(&v25, 1.0, 30);
    CMTimeAdd(&v27, &v26, &v25);
    CMTimeRangeMake(&v50, &v30, &v27);
  }
  else
  {
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      v46 = 0u;
      v47 = 0u;
      v45 = 0u;
    }
    *(_OWORD *)&v23.value = v45;
    v23.epoch = v46;
    v22 = v53;
    CMTimeSubtract(&v24, &v23, &v22);
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      v39 = 0u;
    }
    v20 = *(CMTime *)((char *)v40 + 8);
    v19 = v53;
    CMTimeAdd(&v21, &v20, &v19);
    CMTimeRangeMake(&v50, &v24, &v21);
    v8 = *(_OWORD *)&v50.start.epoch;
    *(_OWORD *)((char *)this + 28) = *(_OWORD *)&v50.start.value;
    *(_OWORD *)((char *)this + 44) = v8;
    *(_OWORD *)((char *)this + 60) = *(_OWORD *)&v50.duration.timescale;
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      v46 = 0u;
      v47 = 0u;
      v45 = 0u;
    }
    *(_OWORD *)&v17.value = v45;
    v17.epoch = v46;
    v16 = v51;
    CMTimeSubtract(&v18, &v17, &v16);
    if (v6)
    {
      -[PVVideoCompositionInstruction timeRange](v6, "timeRange");
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      v39 = 0u;
    }
    v13 = *(CMTime *)((char *)v40 + 8);
    v12 = v51;
    CMTimeAdd(&v14, &v13, &v12);
    v11 = v51;
    CMTimeAdd(&v15, &v14, &v11);
    CMTimeRangeMake(&v50, &v18, &v15);
  }
  v10 = *(_OWORD *)&v50.start.epoch;
  *(_OWORD *)((char *)this + 124) = *(_OWORD *)&v50.start.value;
  *(_OWORD *)((char *)this + 140) = v10;
  *(_OWORD *)((char *)this + 156) = *(_OWORD *)&v50.duration.timescale;

}

void sub_1B2785A78(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  HGObject::~HGObject((HGObject *)v1);
  _Unwind_Resume(a1);
}

void LoadableInstruction::~LoadableInstruction(id *this)
{

  HGObject::~HGObject((HGObject *)this);
}

{
  void *v2;

  HGObject::~HGObject((HGObject *)this);
  HGObject::operator delete(v2);
}

void pv_simd_make_quatf_with_eulers(float32x4_t a1)
{
  __sincosf_stret(0.5 * a1.f32[0]);
  __sincosf_stret(vmuls_lane_f32(0.5, *(float32x2_t *)a1.f32, 1));
  __sincosf_stret(vmuls_lane_f32(0.5, a1, 2));
}

void pv_simd_make_quatd_with_eulers(float64x2_t *a1@<X0>, int a2@<W1>, float64x2_t *a3@<X8>)
{
  float64x2_t v6;
  __double2 v7;
  float64x2_t v8;
  __double2 v9;
  __double2 v10;
  double v11;
  int8x16_t v12;
  int8x16_t v13;
  double v14;
  double v15;
  int8x16_t v16;
  double v17;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float64x2_t v28;
  int8x16_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float64x2_t v43;
  int8x16_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;

  v61 = *a1;
  v7 = __sincos_stret(0.5 * a1->f64[0]);
  v6.f64[0] = v7.__sinval;
  v59 = v6;
  v9 = __sincos_stret(vmuld_lane_f64(0.5, v61, 1));
  v8.f64[0] = v9.__sinval;
  v60 = v8;
  v10 = __sincos_stret(a1[1].f64[0] * 0.5);
  *a3 = 0u;
  a3[1] = 0u;
  *(_QWORD *)&v11 = *(_OWORD *)&vmulq_f64(v59, (float64x2_t)0);
  v12 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_1B304EED0, v59.f64[0]);
  *(double *)v13.i64 = v11;
  v13.i64[1] = *(_QWORD *)&v7.__cosval;
  *(_QWORD *)&v14 = vextq_s8(v12, v12, 8uLL).u64[0];
  *(_QWORD *)&v15 = *(_OWORD *)&vmulq_f64(v60, (float64x2_t)0);
  v16 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_1B304EEE0, v60.f64[0]);
  *(_QWORD *)&v17 = vextq_s8(v16, v16, 8uLL).u64[0];
  *(double *)v18.i64 = v15;
  v18.i64[1] = *(_QWORD *)&v9.__cosval;
  v19 = (int8x16_t)vmulq_n_f64((float64x2_t)0, v10.__sinval);
  *(_QWORD *)&v20 = vextq_s8(v19, v19, 8uLL).u64[0];
  switch(a2)
  {
    case 0:
      v21 = (int8x16_t)vnegq_f64((float64x2_t)v19);
      v22 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)vnegq_f64((float64x2_t)v10), 8uLL);
      v23 = vmulq_n_f64((float64x2_t)v10, v17);
      v24 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v21, v17), (float64x2_t)vextq_s8(v19, v21, 8uLL), *(double *)v16.i64);
      v25 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v23, v22, *(double *)v16.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v19, (float64x2_t)v18, 1), (float64x2_t)vextq_s8(v21, v19, 8uLL), v15));
      v26 = (int8x16_t)vaddq_f64(v24, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v10, (float64x2_t)v18, 1), v22, v15));
      goto LABEL_4;
    case 1:
      v27 = (int8x16_t)vnegq_f64((float64x2_t)v16);
      v28 = (float64x2_t)vextq_s8(v18, (int8x16_t)vnegq_f64((float64x2_t)v18), 8uLL);
      v25 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v18, v20), v28, *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v16, (float64x2_t)v10, 1), (float64x2_t)vextq_s8(v27, v16, 8uLL), v10.__sinval));
      v26 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v27, v20), (float64x2_t)vextq_s8(v16, v27, 8uLL), *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v18, (float64x2_t)v10, 1), v28, v10.__sinval));
LABEL_4:
      v29 = (int8x16_t)vnegq_f64((float64x2_t)v25);
      v30 = (float64x2_t)vextq_s8(v26, (int8x16_t)vnegq_f64((float64x2_t)v26), 8uLL);
      v31 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v26, v14), v30, *(double *)v12.i64);
      v32 = vmulq_laneq_f64((float64x2_t)v26, (float64x2_t)v13, 1);
      v33 = vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v25, (float64x2_t)v13, 1), (float64x2_t)vextq_s8(v29, v25, 8uLL), v11);
      v34 = vaddq_f64(vmlaq_n_f64(v32, v30, v11), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v29, v14), (float64x2_t)vextq_s8(v25, v29, 8uLL), *(double *)v12.i64));
      v35 = vaddq_f64(v33, v31);
      goto LABEL_11;
    case 2:
      v36 = (int8x16_t)vnegq_f64((float64x2_t)v19);
      v37 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)vnegq_f64((float64x2_t)v10), 8uLL);
      v38 = vmulq_n_f64((float64x2_t)v10, v14);
      v39 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v36, v14), (float64x2_t)vextq_s8(v19, v36, 8uLL), *(double *)v12.i64);
      v40 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v38, v37, *(double *)v12.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v19, (float64x2_t)v13, 1), (float64x2_t)vextq_s8(v36, v19, 8uLL), v11));
      v41 = (int8x16_t)vaddq_f64(v39, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v10, (float64x2_t)v13, 1), v37, v11));
      goto LABEL_7;
    case 3:
      v42 = (int8x16_t)vnegq_f64((float64x2_t)v12);
      v43 = (float64x2_t)vextq_s8(v13, (int8x16_t)vnegq_f64((float64x2_t)v13), 8uLL);
      v40 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v13, v20), v43, *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v12, (float64x2_t)v10, 1), (float64x2_t)vextq_s8(v42, v12, 8uLL), v10.__sinval));
      v41 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v42, v20), (float64x2_t)vextq_s8(v12, v42, 8uLL), *(double *)v19.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v13, (float64x2_t)v10, 1), v43, v10.__sinval));
LABEL_7:
      v44 = (int8x16_t)vnegq_f64((float64x2_t)v40);
      v45 = (float64x2_t)vextq_s8(v41, (int8x16_t)vnegq_f64((float64x2_t)v41), 8uLL);
      v46 = vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v40, (float64x2_t)v18, 1), (float64x2_t)vextq_s8(v44, v40, 8uLL), v15);
      v34 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v41, (float64x2_t)v18, 1), v45, v15), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v44, v17), (float64x2_t)vextq_s8(v40, v44, 8uLL), *(double *)v16.i64));
      v35 = vaddq_f64(v46, vmlaq_n_f64(vmulq_n_f64((float64x2_t)v41, v17), v45, *(double *)v16.i64));
      goto LABEL_11;
    case 4:
      v47 = (int8x16_t)vnegq_f64((float64x2_t)v16);
      v48 = (float64x2_t)vextq_s8(v18, (int8x16_t)vnegq_f64((float64x2_t)v18), 8uLL);
      v49 = vmulq_n_f64((float64x2_t)v18, v14);
      v50 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v47, v14), (float64x2_t)vextq_s8(v16, v47, 8uLL), *(double *)v12.i64);
      v51 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v49, v48, *(double *)v12.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v16, (float64x2_t)v13, 1), (float64x2_t)vextq_s8(v47, v16, 8uLL), v11));
      v52 = (int8x16_t)vaddq_f64(v50, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v18, (float64x2_t)v13, 1), v48, v11));
      goto LABEL_10;
    case 5:
      v53 = (int8x16_t)vnegq_f64((float64x2_t)v12);
      v54 = (float64x2_t)vextq_s8(v13, (int8x16_t)vnegq_f64((float64x2_t)v13), 8uLL);
      v55 = vmulq_n_f64((float64x2_t)v13, v17);
      v56 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v53, v17), (float64x2_t)vextq_s8(v12, v53, 8uLL), *(double *)v16.i64);
      v51 = (int8x16_t)vaddq_f64(vmlaq_n_f64(v55, v54, *(double *)v16.i64), vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v12, (float64x2_t)v18, 1), (float64x2_t)vextq_s8(v53, v12, 8uLL), v15));
      v52 = (int8x16_t)vaddq_f64(v56, vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v13, (float64x2_t)v18, 1), v54, v15));
LABEL_10:
      v57 = (int8x16_t)vnegq_f64((float64x2_t)v51);
      v58 = (float64x2_t)vextq_s8(v52, (int8x16_t)vnegq_f64((float64x2_t)v52), 8uLL);
      v34 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v52, (float64x2_t)v10, 1), v58, v10.__sinval), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v57, v20), (float64x2_t)vextq_s8(v51, v57, 8uLL), *(double *)v19.i64));
      v35 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v51, (float64x2_t)v10, 1), (float64x2_t)vextq_s8(v57, v51, 8uLL), v10.__sinval), vmlaq_n_f64(vmulq_n_f64((float64x2_t)v52, v20), v58, *(double *)v19.i64));
LABEL_11:
      *a3 = v35;
      a3[1] = v34;
      break;
    default:
      return;
  }
}

void sub_1B27861E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27863AC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  HGObject::operator delete(v1);
  v4 = *(_QWORD *)(v2 - 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(v2 - 72);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  _Unwind_Resume(a1);
}

void sub_1B2786484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27864F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2786564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CachedImageInfo::CachedImageInfo(CachedImageInfo *this)
{
  HGSynchronizable *v2;

  this->cached = 0;
  this->size = (CGSize)*MEMORY[0x1E0C9D820];
  this->imageExists = 0;
  this->_source = 0;
  v2 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v2);
  this->_lock = v2;
}

void sub_1B27865E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10A1C40BBCAB520);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void CachedImageInfo::SetSourceNode(CachedImageInfo *this, PVInstructionGraphImageSourceNode *a2)
{
  PVInstructionGraphImageSourceNode *v3;
  HGSynchronizable *lock;
  char v5;

  v3 = a2;
  lock = this->_lock;
  v5 = 0;
  HGSynchronizable::Lock(lock);
  objc_storeWeak((id *)&this->_source, v3);
  HGSynchronizer::~HGSynchronizer(&lock);

}

void sub_1B2786668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CachedImageInfo::Init(CachedImageInfo *this)
{
  _opaque_pthread_t *v2;
  void *v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  CGSize v9;
  HGSynchronizable *lock;
  char v11;

  lock = this->_lock;
  v11 = 0;
  v2 = HGSynchronizable::Lock(lock);
  if (!this->cached)
  {
    v3 = (void *)MEMORY[0x1B5E29C50](v2);
    v9 = (CGSize)*MEMORY[0x1E0C9D820];
    WeakRetained = objc_loadWeakRetained((id *)&this->_source);
    objc_msgSend(WeakRetained, "imageDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_loadWeakRetained((id *)&this->_source);
    objc_msgSend(v6, "url");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_loadWeakRetained((id *)&this->_source);
    this->imageExists = objc_msgSend(v5, "isImageValid:renderingIntent:size:", v7, objc_msgSend(v8, "renderingIntent"), &v9);

    if (this->imageExists)
      this->size = v9;
    this->cached = 1;
    objc_autoreleasePoolPop(v3);
  }
  HGSynchronizer::~HGSynchronizer(&lock);
}

void sub_1B278677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void CachedImageInfo::Init(CachedImageInfo *this, BOOL a2, CGSize a3)
{
  CGFloat height;
  CGFloat width;
  HGSynchronizable *lock;
  char v8;

  height = a3.height;
  width = a3.width;
  lock = this->_lock;
  v8 = 0;
  HGSynchronizable::Lock(lock);
  if (!this->cached)
  {
    this->imageExists = a2;
    this->size.width = width;
    this->size.height = height;
    this->cached = 1;
  }
  HGSynchronizer::~HGSynchronizer(&lock);
}

void sub_1B2786920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2786AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2786B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PVInputBitmapCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B2786E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2786EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B278701C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B2787160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2787444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B27877F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B2787C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B2787E84(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2787FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2788204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27884E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1B2789B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&STACK[0x448]);
  _Unwind_Resume(a1);
}

void sub_1B278A210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B278A428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B278A51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278A690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<HGRef<HGBitmap>>::__init_with_size[abi:ne180100]<HGRef<HGBitmap>*,HGRef<HGBitmap>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B278A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<HGRef<HGBitmap>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *v4 = *v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v4 = v12;
      }
      ++v6;
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B278A9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,std::reverse_iterator<HGRef<HGBitmap>*>,std::reverse_iterator<HGRef<HGBitmap>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      v8 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      v7 = v8;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    }
    while (v6 != a5);
  }
}

uint64_t *std::vector<HGRef<HGBitmap>>::__assign_with_size[abi:ne180100]<HGRef<HGBitmap>*,HGRef<HGBitmap>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *result;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    std::vector<HGRef<HGBitmap>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<double>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3;
  if (v14 < a4)
  {
    v15 = &a2[v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<HGBitmap> *,HGRef<HGBitmap> *,HGRef<HGBitmap> *>((uint64_t)&v17, a2, v15, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HGRef<HGBitmap>>,HGRef<HGBitmap>*,HGRef<HGBitmap>*,HGRef<HGBitmap>*>(v8, v15, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<HGBitmap> *,HGRef<HGBitmap> *,HGRef<HGBitmap> *>((uint64_t)&v18, a2, a3, v9);
  return std::vector<HGRef<HGBitmap>>::__base_destruct_at_end[abi:ne180100]((_QWORD *)a1, v16);
}

void sub_1B278AB68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B278AB70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<HGRef<HGBitmap>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<HGRef<HGBitmap>>::__base_destruct_at_end[abi:ne180100](a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HGRef<HGBitmap> *,HGRef<HGBitmap> *,HGRef<HGBitmap> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *a4;
      v8 = *v5;
      if (*a4 != *v5)
      {
        if (v7)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v7 + 24))(*a4);
          v8 = *v5;
        }
        *a4 = v8;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      }
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1B278AD08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278ADA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278AED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B278B0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278B19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278B308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1B278B3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1B278CB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  _QWORD *v59;
  void *v60;

  if (STACK[0x520])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x520] + 24))(STACK[0x520]);
  if (STACK[0x5B8])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x5B8] + 24))(STACK[0x5B8]);

  if (*v59)
    (*(void (**)(_QWORD))(*(_QWORD *)*v59 + 24))(*v59);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&STACK[0x7F0]);
  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::GetFrameDataPixelBuffer(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  v7 = *(_QWORD **)(a1 + 80);
  v6 = (_QWORD *)(a1 + 80);
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = v5[4];
    v10 = v9 >= (unint64_t)v13;
    if (v9 >= (unint64_t)v13)
      v11 = v5;
    else
      v11 = v5 + 1;
    if (v10)
      v8 = v5;
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != v6 && v8[4] <= (unint64_t)v13)
  {
    v12 = v8[5];
    *a3 = v12;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  else
  {
LABEL_12:
    HGCVBitmap::create(0, 1, 0, a3);
  }

}

void sub_1B278D058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::GetInputSize(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v12;
  __int128 v17;

  v5 = a2;
  v8 = *(_QWORD **)(a1 + 32);
  v7 = (_QWORD *)(a1 + 32);
  v6 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v7;
  do
  {
    v10 = v6[4];
    _CF = v10 >= (unint64_t)v5;
    if (v10 >= (unint64_t)v5)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (_CF)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != v7 && v9[4] <= (unint64_t)v5)
  {
    v17 = *(_OWORD *)(v9 + 7);
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 5);
    *(_OWORD *)(a3 + 16) = v17;
  }
  else
  {
LABEL_12:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a3 + 16) = _Q0;
  }

}

uint64_t coloredDotHGNode@<X0>(__int128 *a1@<X0>, HGCrop **a2@<X8>, double a3@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  HGSolidColor *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  HGCrop *v15;
  __int128 v17;
  __int128 v18;

  v17 = *a1;
  v18 = a1[1];
  v7 = HGRectMakeWithCGRect(*(CGRect *)&a3);
  v9 = v8;
  v10 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v10);
  v11 = *(double *)&v17;
  v12 = *((double *)&v17 + 1);
  v13 = *(double *)&v18;
  v14 = *((double *)&v18 + 1);
  (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v10 + 96))(v10, 0, v11, v12, v13, v14);
  v15 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v15);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v15 + 96))(v15, 0, (float)(int)v7, (float)SHIDWORD(v7), (float)(int)v9, (float)SHIDWORD(v9));
  (*(void (**)(HGCrop *, _QWORD, HGSolidColor *))(*(_QWORD *)v15 + 120))(v15, 0, v10);
  *a2 = v15;
  return (*(uint64_t (**)(HGSolidColor *))(*(_QWORD *)v10 + 24))(v10);
}

void sub_1B278D1E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B278D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B278D43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B278D548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278D714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B278DA00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B278DDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);

  _Unwind_Resume(a1);
}

void sub_1B278E348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;

  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 24))(a19);

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  v25 = *(_QWORD *)(v23 - 72);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);

  if (*v19)
    (*(void (**)(_QWORD))(*(_QWORD *)*v19 + 24))(*v19);
  _Unwind_Resume(a1);
}

void sub_1B278E69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278E7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B278E8AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

void sub_1B278E9B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B278EB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B278ED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

uint64_t PVNumbersAreEqualAsBooleans(void *a1, void *a2)
{
  id v3;
  int v4;

  v3 = a2;
  LODWORD(a1) = objc_msgSend(a1, "BOOLValue");
  v4 = objc_msgSend(v3, "BOOLValue");

  return a1 ^ v4 ^ 1;
}

BOOL PVNumbersAreEqualAsDoubles(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = a2;
  objc_msgSend(a1, "doubleValue");
  v5 = v4;
  objc_msgSend(v3, "doubleValue");
  v7 = v6;

  return vabdd_f64(v5, v7) < 0.0001;
}

BOOL PVNumbersAreEqualAsIntegers(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2;
  v4 = objc_msgSend(a1, "integerValue");
  v5 = objc_msgSend(v3, "integerValue");

  return v4 == v5;
}

BOOL PVValuesAreEqualAsCGSizes(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2;
  objc_msgSend(a1, "CGSizeValue");
  v5 = v4;
  v7 = v6;
  objc_msgSend(v3, "CGSizeValue");
  v9 = v8;
  v11 = v10;

  return v7 == v11 && v5 == v9;
}

void sub_1B278EF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B278F02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B278F0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B278F188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCVPixelBufferImageBufferImpl;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B278F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);

  _Unwind_Resume(a1);
}

void sub_1B278F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);

  _Unwind_Resume(a1);
}

CGFloat CGAffineTransformFromPVAnimInfo@<D0>(CGFloat *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGFloat result;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;

  v4 = MEMORY[0x1E0C9BAA8];
  v5 = *MEMORY[0x1E0C9BAA8];
  v6 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a2 + 16) = v6;
  v7 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)&v16.a = v5;
  *(_OWORD *)&v16.c = v6;
  *(_OWORD *)&v16.tx = v7;
  CGAffineTransformTranslate((CGAffineTransform *)a2, &v16, a1[3], a1[4]);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v14.a = *(_OWORD *)a2;
  *(_OWORD *)&v14.c = v8;
  *(_OWORD *)&v14.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformScale(&v15, &v14, a1[5], a1[5]);
  v9 = *(_OWORD *)&v15.c;
  *(_OWORD *)a2 = *(_OWORD *)&v15.a;
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v15.tx;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v13.a = *(_OWORD *)a2;
  *(_OWORD *)&v13.c = v10;
  *(_OWORD *)&v13.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformRotate(&v15, &v13, a1[6] * 3.14159265 / 180.0);
  v11 = *(_OWORD *)&v15.c;
  *(_OWORD *)a2 = *(_OWORD *)&v15.a;
  *(_OWORD *)(a2 + 16) = v11;
  result = v15.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v15.tx;
  return result;
}

CGFloat CGAffineTransformFromPointWithPVAnimInfo@<D0>(PVTransformAnimationInfo *a1@<X0>, CGPoint a2@<0:D0, 8:D1>, uint64_t a3@<X8>)
{
  __int128 v3;
  double v4;
  PVTransformAnimationInfo v6;

  v3 = *(_OWORD *)&a1->time.epoch;
  *(_OWORD *)&v6.time.value = *(_OWORD *)&a1->time.value;
  *(_OWORD *)&v6.time.epoch = v3;
  *(_OWORD *)&v6.translation.y = *(_OWORD *)&a1->translation.y;
  v6.rotation = a1->rotation;
  v4 = 1.0;
  *(_QWORD *)&v3 = 1.0;
  return CGAffineTransformFromPointWithPVAnimInfo(&v6, a2, *(CGSize *)((char *)&v3 - 8), a3);
}

CGFloat CGAffineTransformFromPointWithPVAnimInfo@<D0>(PVTransformAnimationInfo *a1@<X0>, CGPoint a2@<0:D0, 8:D1>, CGSize a3@<0:D2, 8:D3>, uint64_t a4@<X8>)
{
  double height;
  double width;
  double y;
  double x;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGFloat result;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v23;

  height = a3.height;
  width = a3.width;
  y = a2.y;
  x = a2.x;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  CGAffineTransformMakeTranslation((CGAffineTransform *)a4, -a2.x, -a2.y);
  v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a4;
  *(_OWORD *)&t1.c = v10;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a4 + 32);
  CGAffineTransformMakeRotation(&t2, a1->rotation * 3.14159265 / 180.0);
  CGAffineTransformConcat(&v23, &t1, &t2);
  v11 = *(_OWORD *)&v23.c;
  *(_OWORD *)a4 = *(_OWORD *)&v23.a;
  *(_OWORD *)(a4 + 16) = v11;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v23.tx;
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a4;
  *(_OWORD *)&v20.c = v12;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a4 + 32);
  CGAffineTransformMakeScale(&v19, a1->scale, a1->scale);
  CGAffineTransformConcat(&v23, &v20, &v19);
  v13 = *(_OWORD *)&v23.c;
  *(_OWORD *)a4 = *(_OWORD *)&v23.a;
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v23.tx;
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v18.a = *(_OWORD *)a4;
  *(_OWORD *)&v18.c = v14;
  *(_OWORD *)&v18.tx = *(_OWORD *)(a4 + 32);
  CGAffineTransformMakeTranslation(&v17, x + width * a1->translation.x, y + height * a1->translation.y);
  CGAffineTransformConcat(&v23, &v18, &v17);
  v15 = *(_OWORD *)&v23.c;
  *(_OWORD *)a4 = *(_OWORD *)&v23.a;
  *(_OWORD *)(a4 + 16) = v15;
  result = v23.tx;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v23.tx;
  return result;
}

double PVTransformAnimationInfoIdentity@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  result = 1.0;
  *(_OWORD *)(a1 + 40) = xmmword_1B304EED0;
  return result;
}

BOOL PVTransformAnimationInfoIsIdentity(double *a1)
{
  _BOOL8 result;
  double v3;
  double v4;
  double v5;

  result = 0;
  v3 = a1[3];
  if (v3 > -0.0000001 && v3 < 0.0000001)
  {
    result = 0;
    v4 = a1[4];
    if (v4 > -0.0000001 && v4 < 0.0000001)
    {
      if (fabs(a1[5] + -1.0) >= 0.0001)
      {
        return 0;
      }
      else
      {
        v5 = a1[6];
        return v5 < 0.0000001 && v5 > -0.0000001;
      }
    }
  }
  return result;
}

void PVTransformAnimationInfoForLiveCapture(uint64_t a1@<X8>, CGFloat a2@<D2>, CGFloat a3@<D3>, CGFloat a4@<D4>, CGFloat a5@<D5>, double a6@<D6>)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double Width;
  double v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v12 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 40) = xmmword_1B304EED0;
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.width = a4;
  v18.size.height = a5;
  v14 = -CGRectGetMinX(v18);
  *(double *)(a1 + 24) = v14;
  v19.origin.x = a2;
  v19.origin.y = a3;
  v19.size.width = a4;
  v19.size.height = a5;
  v15 = -CGRectGetMinY(v19);
  *(double *)(a1 + 32) = v15;
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  Width = CGRectGetWidth(v20);
  if ((int)Width != (int)a6)
  {
    v17 = a6 / Width;
    *(double *)(a1 + 24) = v17 * v14;
    *(double *)(a1 + 32) = v17 * v15;
    *(double *)(a1 + 40) = v17;
  }
}

float64x2_t PVTransformAnimationInfoForPlayback@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, float64_t a8@<D6>, float64_t a9@<D7>)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat MinY;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t result;
  CGFloat MinX;
  float64x2_t v34;
  float64x2_t v36;
  double v37;
  float64_t v38;
  float64_t v39;
  CGAffineTransform v42;
  CGRect v43;
  CGRect v44;

  v14 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E68];
  v15 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 40) = xmmword_1B304EED0;
  if (a2 > a3)
    v16 = a2;
  else
    v16 = a3;
  v39 = v16;
  if (a2 > a3)
    v17 = a9 / a3;
  else
    v17 = a8 / a2;
  v43.origin.x = a4;
  v43.origin.y = a5;
  v43.size.width = a6;
  v43.size.height = a7;
  v37 = a8 / CGRectGetWidth(v43);
  *(double *)(a1 + 40) = v37 / v17;
  CGAffineTransformMakeScale(&v42, v37, v37);
  if (a2 >= a3)
    v18 = a3;
  else
    v18 = a2;
  v38 = v18;
  __asm { FMOV            V1.2D, #0.5 }
  v34 = vmulq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v42.a, a2), vmulq_n_f64(*(float64x2_t *)&v42.c, a3)), _Q1);
  v36 = _Q1;
  v24 = a4;
  _Q1.f64[0] = a5;
  v25 = a6;
  v26 = a7;
  MinX = CGRectGetMinX(*(CGRect *)((char *)&_Q1 - 8));
  v44.origin.x = a4;
  v44.origin.y = a5;
  v44.size.width = a6;
  v44.size.height = a7;
  MinY = CGRectGetMinY(v44);
  v28.f64[0] = MinX;
  v28.f64[1] = MinY;
  v29.f64[0] = v39;
  v29.f64[1] = v38;
  v30.f64[0] = a8;
  v30.f64[1] = a9;
  result = vdivq_f64(vsubq_f64(vsubq_f64(vsubq_f64(v34, vmulq_n_f64(v28, v37)), vmulq_f64(v29, v36)), vmulq_f64(vsubq_f64(v30, v29), v36)), v30);
  *(float64x2_t *)(a1 + 24) = result;
  return result;
}

uint64_t pv_buffer_size_for_string_representation(PVTransformAnimationInfo *a1, int a2)
{
  __int128 v2;
  PVTransformAnimationInfo v4;

  v2 = *(_OWORD *)&a1->time.epoch;
  *(_OWORD *)&v4.time.value = *(_OWORD *)&a1->time.value;
  *(_OWORD *)&v4.time.epoch = v2;
  *(_OWORD *)&v4.translation.y = *(_OWORD *)&a1->translation.y;
  v4.rotation = a1->rotation;
  return pv_get_string_representation(&v4, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(PVTransformAnimationInfo *a1, char *a2, size_t a3, int a4)
{
  void *v8;
  const __CFAllocator *v9;
  __CFString *v10;
  uint64_t v11;
  CMTime time;

  v8 = (void *)MEMORY[0x1B5E29C50]();
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = (CMTime)a1->time;
  v10 = objc_retainAutorelease((id)CMTimeCopyDescription(v9, &time));
  v11 = snprintf(a2, a3, "time: %s\ntranslation:\n    x: %.*f\n    y: %.*f\nscale: %.*f\nrotation: %.*f° (%.*f)", (const char *)-[__CFString UTF8String](v10, "UTF8String"), a4, a1->translation.x, a4, a1->translation.y, a4, a1->scale, a4, a1->rotation, a4, a1->rotation * 3.14159265 / 180.0);

  objc_autoreleasePoolPop(v8);
  return v11;
}

void sub_1B278FCC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NSStringFromPVTransformAnimationInfo(uint64_t a1, int a2)
{
  __int128 v4;
  int string_representation;
  char *v6;
  __int128 v7;
  unsigned int v8;
  void *v9;
  PVTransformAnimationInfo v11;
  PVTransformAnimationInfo v12;

  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v12.time.value = *(_OWORD *)a1;
  *(_OWORD *)&v12.time.epoch = v4;
  *(_OWORD *)&v12.translation.y = *(_OWORD *)(a1 + 32);
  v12.rotation = *(double *)(a1 + 48);
  string_representation = pv_get_string_representation(&v12, 0, 0, a2);
  v6 = (char *)malloc_type_calloc(string_representation + 1, 1uLL, 0x100004077774924uLL);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v11.time.value = *(_OWORD *)a1;
  *(_OWORD *)&v11.time.epoch = v7;
  *(_OWORD *)&v11.translation.y = *(_OWORD *)(a1 + 32);
  v11.rotation = *(double *)(a1 + 48);
  v8 = pv_get_string_representation(&v11, v6, string_representation + 1, a2);
  v9 = 0;
  if ((v8 & 0x80000000) != 0
    || (int)v8 > string_representation
    || (v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v6, v8, 4, 1)) == 0)
  {
    free(v6);
  }
  return v9;
}

void sub_1B27903C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B2790594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B279065C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27906E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2790C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B2790F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B279108C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27911C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B279129C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2791374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2791554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B2791654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2791734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27919EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B2791C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B2791DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B2791E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B279203C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B279218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27921F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2792360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B2792448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B279267C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B279285C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelDouble_FactoryBase;
  OZChannelDouble *v15;
  OZChannelDouble *OZChannelDoubleInfo;
  uint64_t v17;
  uint64_t v18;

  OZChannelDouble_FactoryBase = (OZFactory *)getOZChannelDouble_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelDouble_FactoryBase, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)this = &off_1E6551358;
  *((_QWORD *)this + 2) = &unk_1E65516B8;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v15);
  if (a7)
  {
    v17 = *((_QWORD *)this + 17);
  }
  else
  {
    v17 = OZChannelDouble::_OZChannelDoubleInfo;
    *((_QWORD *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((_QWORD *)this + 16) = v17;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a6)
  {
    v18 = *((_QWORD *)this + 15);
  }
  else
  {
    v18 = OZChannelDouble::_OZChannelDoubleImpl;
    *((_QWORD *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((_QWORD *)this + 14) = v18;
}

void sub_1B2792954(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelDouble::createOZChannelDoubleInfo(OZChannelDouble *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelDouble::createOZChannelDoubleInfo(void)::_OZChannelDoubleInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelDouble::createOZChannelDoubleInfo(void)::_OZChannelDoubleInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelDouble::createOZChannelDoubleInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelDouble::_OZChannelDoubleInfo;
}

uint64_t OZChannelDouble::createOZChannelDoubleImpl(OZChannelDouble *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelDouble::createOZChannelDoubleImpl(void)::_OZChannelDoubleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelDouble::createOZChannelDoubleImpl(void)::_OZChannelDoubleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelDouble::_OZChannelDoubleImpl;
}

void std::__call_once_param<std::tuple<OZChannelDouble::createOZChannelDoubleInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelDoubleInfo *v0;

  if (!OZChannelDouble::_OZChannelDoubleInfo)
  {
    v0 = (OZChannelDoubleInfo *)operator new();
    OZChannelDoubleInfo::OZChannelDoubleInfo(v0);
    OZChannelDouble::_OZChannelDoubleInfo = (uint64_t)v0;
  }
}

void sub_1B2792A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelDoubleInfo::OZChannelDoubleInfo(OZChannelDoubleInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &off_1E64D5670;
  *((_QWORD *)this + 10) = &unk_1E64D5690;
}

void sub_1B2792B04(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void OZChannelDoubleInfo::~OZChannelDoubleInfo(OZChannelDoubleInfo *this)
{
  PCSingleton::~PCSingleton((OZChannelDoubleInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
}

{
  PCSingleton::~PCSingleton((OZChannelDoubleInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelDoubleInfo::~OZChannelDoubleInfo(OZChannelDoubleInfo *this)
{
  OZChannelInfo *v1;

  v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);
}

{
  OZChannelInfo *v1;

  v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelDouble::createOZChannelDoubleImpl(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  OZCurveDouble *v1;

  if (!OZChannelDouble::_OZChannelDoubleImpl)
  {
    v0 = operator new();
    v1 = (OZCurveDouble *)operator new();
    OZCurveDouble::OZCurveDouble(v1, 0.0);
    OZChannelImpl::OZChannelImpl((OZChannelImpl *)v0, (OZCurve *)v1, 0.0, 1, 1);
    PCSingleton::PCSingleton((PCSingleton *)(v0 + 40), 100);
    *(_QWORD *)v0 = &off_1E64D56E8;
    *(_QWORD *)(v0 + 40) = &unk_1E64D5708;
    OZChannelDouble::_OZChannelDoubleImpl = v0;
  }
}

void sub_1B2792C90(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelDoubleImpl::~OZChannelDoubleImpl(OZChannelDoubleImpl *this)
{
  PCSingleton::~PCSingleton((OZChannelDoubleImpl *)((char *)this + 40));
  OZChannelImpl::~OZChannelImpl((OZChannelImpl *)this);
}

{
  PCSingleton::~PCSingleton((OZChannelDoubleImpl *)((char *)this + 40));
  OZChannelImpl::~OZChannelImpl((OZChannelImpl *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelDoubleImpl::~OZChannelDoubleImpl(OZChannelDoubleImpl *this)
{
  OZChannelImpl *v1;

  v1 = (OZChannelImpl *)((char *)this - 40);
  PCSingleton::~PCSingleton(this);
  OZChannelImpl::~OZChannelImpl(v1);
}

{
  OZChannelImpl *v1;

  v1 = (OZChannelImpl *)((char *)this - 40);
  PCSingleton::~PCSingleton(this);
  OZChannelImpl::~OZChannelImpl(v1);
  JUMPOUT(0x1B5E29170);
}

void OZCurveDouble::OZCurveDouble(OZCurveDouble *this, double a2)
{
  OZCurveDoubleSplineState *v3;
  uint64_t Instance;
  uint64_t v5;

  OZCurve::OZCurve((OZCurve *)this, -1.79769313e308, 1.79769313e308, 0.01, a2);
  *(_QWORD *)v3 = &unk_1E64D5760;
  Instance = OZCurveDoubleSplineState::getInstance(v3);
  if (Instance)
    v5 = Instance + 8;
  else
    v5 = 0;
  OZCurve::setSplineState((uint64_t)this, v5);
}

void sub_1B2792E10(_Unwind_Exception *a1)
{
  OZCurve *v1;

  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveDoubleSplineState::getInstance(OZCurveDoubleSplineState *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCurveDoubleSplineState::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCurveDoubleSplineState::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveDoubleSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveDoubleSplineState::_instance;
}

void OZCurveDouble::~OZCurveDouble(OZCurve *this)
{
  OZCurve::~OZCurve(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCSerializer::readSignificantWhiteSpace(PCSerializer *this)
{
  return 0;
}

OZCurve *OZCurveDouble::getCurveWorkingCopy(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 1);
  *(_QWORD *)v2 = &unk_1E64D5760;
  return v2;
}

void sub_1B2792F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

OZCurve *OZCurveDouble::cloneCurve(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 0);
  *(_QWORD *)v2 = &unk_1E64D5760;
  return v2;
}

void sub_1B2792F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t OZCurve::supportsAssignmentOperator(OZCurve *this)
{
  return 1;
}

uint64_t OZCurve::isCurveBoolean(OZCurve *this)
{
  return 0;
}

void std::__call_once_param<std::tuple<OZCurveDoubleSplineState::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  uint64_t v0;

  v0 = operator new();
  OZSplineState::OZSplineState((OZSplineState *)(v0 + 8));
  PCSingleton::PCSingleton((PCSingleton *)v0, 200);
  *(_QWORD *)v0 = &unk_1E64D5C78;
  OZCurveDoubleSplineState::_instance = v0;
}

void sub_1B2793028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C401D9FA3FDLL);
  _Unwind_Resume(a1);
}

void OZCurveDoubleSplineState::~OZCurveDoubleSplineState(OZCurveDoubleSplineState *this)
{
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

void sub_1B2793258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  uint64_t i;

  v12 = v11;

  for (i = 40; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

uint64_t pv_buffer_size_for_string_representation(simd_quatd a1, __int128 *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v5[2];

  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return pv_buffer_size_for_string_representation(v5, a3);
}

uint64_t pv_get_string_representation(simd_quatd a1, char *a2, char *a3, size_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v7[2];

  v5 = *((_OWORD *)a2 + 1);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return pv_get_string_representation(v7, a3, a4, a5);
}

void sub_1B27938E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27939A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2793A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2793ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2794288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  HGObject::operator delete(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  if (*v17)
    (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 24))(*v17);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a17);
  _Unwind_Resume(a1);
}

void sub_1B279459C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27945E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B279474C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2794ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);

  _Unwind_Resume(a1);
}

void sub_1B2794C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2794C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B2794D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::~PVInputHGNodeMap(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27956A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::SetNode(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id *v9;

  v8 = a2;
  v9 = &v8;
  v5 = std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(a1, (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
  v6 = v5[5];
  v7 = *a3;
  if (v6 != *a3)
  {
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      v7 = *a3;
    }
    v5[5] = v7;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }

}

void sub_1B2795A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::SetFrameDataPixelBuffer(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id *v9;

  v8 = a2;
  v9 = &v8;
  v5 = std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 72), (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
  v6 = v5[5];
  v7 = *a3;
  if (v6 != *a3)
  {
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      v7 = *a3;
    }
    v5[5] = v7;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }

}

void sub_1B2795B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

__n128 PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::SetInputSize(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t **v5;
  __int128 v6;
  __n128 result;
  id v8;
  id *v9;

  v8 = a2;
  v9 = &v8;
  v5 = std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
  v6 = *a3;
  *(_OWORD *)(v5 + 7) = a3[1];
  *(_OWORD *)(v5 + 5) = v6;

  return result;
}

void sub_1B2795BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B2796388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 24))(a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);

  v25 = *(_QWORD *)(v23 - 136);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  v26 = *(_QWORD *)(v23 - 128);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  _Unwind_Resume(a1);
}

void sub_1B27966D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27967F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2796870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD **PVInputHGNodeMap<PVInstructionGraphSourceNode * {__strong}>::~PVInputHGNodeMap(_QWORD **a1)
{
  std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy((uint64_t)(a1 + 15), a1[16]);
  std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy((uint64_t)(a1 + 12), a1[13]);
  std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy((uint64_t)(a1 + 9), a1[10]);
  std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy((uint64_t)(a1 + 6), a1[7]);
  std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy((uint64_t)(a1 + 3), a1[4]);
  std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy((uint64_t)a1, a1[1]);
  return a1;
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},AVTimedMetadataGroup * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},int>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},int>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGCVBitmap>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGCVBitmap>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

}

void std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGNode>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGNode>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

}

uint64_t *std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = (uint64_t)**a4;
    v12[5] = 0;
    v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGNode>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = (uint64_t)**a4;
    v12[5] = 0;
    v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PVInstructionGraphSourceNode * {__strong},HGRef<HGCVBitmap>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<PVInstructionGraphSourceNode * const {__strong},HGRef<HGCVBitmap>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::__map_value_compare<PVInstructionGraphSourceNode * {__strong},std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>,std::less<PVInstructionGraphSourceNode * {__strong}>,true>,std::allocator<std::__value_type<PVInstructionGraphSourceNode * {__strong},PCRect<double>>>>::__emplace_unique_key_args<PVInstructionGraphSourceNode * {__strong},std::piecewise_construct_t const&,std::tuple<PVInstructionGraphSourceNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;
  id v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    v12 = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 4) = v12;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1B2796F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B2796FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B27970CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B2797178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PVFrameStatsDescription::GetStringForLabels(_QWORD *a1@<X8>, int a2@<W1>)
{
  char *v2;

  if (a2 == 1)
  {
    PVFrameStatsDescription::GetStringForLabelsJSON(a1);
  }
  else
  {
    if (a2)
      v2 = "";
    else
      v2 = " Num |  FrameTime | Playback | RendPasses | WaitToBuildGraph | SetupInputs | BuildGraph | WaitToRender | Setu"
           "pDest | DeferredBitmaps | ShaderCompile | RenderTime | FinishReq | TotalTime | TimeSinceLastStart | fTimeDiff |";
    std::string::basic_string[abi:ne180100]<0>(a1, v2);
  }
}

void PVFrameStatsDescription::GetStringForLabelsJSON(_QWORD *a1@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("Num"), CFSTR("FrameTime"), CFSTR("Playback"), CFSTR("RendPasses"), CFSTR("WaitToBuildGraph"), CFSTR("SetupInputs"), CFSTR("BuildGraph"), CFSTR("WaitToRender"), CFSTR("SetupDest"), CFSTR("DeferredBitmaps"), CFSTR("ShaderCompile"), CFSTR("RenderTime"), CFSTR("FinishReq"), CFSTR("TotalTime"), CFSTR("TimeSinceLastStart"), CFSTR("fTimeDiff"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 4, &v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v7;
  if (v4)
  {
    v6 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v4, 4));
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v6, "UTF8String"));

  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }

}

void sub_1B279745C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void PVFrameStatsDescription::GetStringForStats(PVPerfStats::FrameStats *a1@<X2>, PVPerfStats::FrameStats *a2@<X3>, PVFrameStatsDescription *a3@<X0>, int a4@<W1>, _QWORD *a5@<X8>)
{
  if (a4 == 2)
  {
    PVFrameStatsDescription::GetStringForStatsPMR(a3, a1, a1);
  }
  else if (a4 == 1)
  {
    PVFrameStatsDescription::GetStringForStatsJSON(a3, a1, a2);
  }
  else if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a5, "");
  }
  else
  {
    PVFrameStatsDescription::GetStringForStatsTEXT(a3, a1, a2);
  }
}

uint64_t PVFrameStatsDescription::GetStringForStatsTEXT(PVFrameStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  CMTime v39;
  CMTime v40;
  CMTime time;
  _QWORD v42[2];
  _QWORD v43[11];
  char v44;
  uint64_t v45;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v42);
  v5 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v5 - 24)) = 4;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v5 - 24)) = 0;
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" | ", 3);
  v7 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v7 - 24)) = 10;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v7 - 24)) = 3;
  time = *(CMTime *)((char *)a2 + 8);
  CMTimeGetSeconds(&time);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" | ", 3);
  v9 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v9 - 24)) = 8;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v9 - 24)) = 0;
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" | ", 3);
  v11 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v11 - 24)) = 10;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v11 - 24)) = 0;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 0xAu);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" | ", 3);
  v13 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v13 - 24)) = 16;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v13 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 0);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" | ", 3);
  v15 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v15 - 24)) = 11;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v15 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 1u);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" | ", 3);
  v17 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v17 - 24)) = 10;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v17 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 2u);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" | ", 3);
  v19 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v19 - 24)) = 12;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v19 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 3u);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" | ", 3);
  v21 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v21 - 24)) = 9;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v21 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 4u);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" | ", 3);
  v23 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v23 - 24)) = 15;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v23 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 5u);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" | ", 3);
  v25 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v25 - 24)) = 13;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v25 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 6u);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" | ", 3);
  v27 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v27 - 24)) = 10;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v27 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 7u);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" | ", 3);
  v29 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v29 - 24)) = 9;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v29 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 8u);
  v30 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" | ", 3);
  v31 = v43[0];
  *(_DWORD *)((char *)&v43[1] + *(_QWORD *)(v43[0] - 24)) = *(_DWORD *)((_BYTE *)&v43[1] + *(_QWORD *)(v43[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v31 - 24)) = 9;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v31 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 9u);
  v32 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" | ", 3);
  if (a3)
  {
    v40 = *(CMTime *)((char *)a2 + 8);
    CMTimeGetSeconds(&v40);
    v39 = *(CMTime *)((char *)a3 + 8);
    CMTimeGetSeconds(&v39);
  }
  v33 = v43[0];
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v43[0] - 24)) = 18;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v33 - 24)) = 3;
  v34 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" | ", 3);
  v35 = v43[0];
  *(_QWORD *)((char *)&v43[3] + *(_QWORD *)(v43[0] - 24)) = 9;
  *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v35 - 24)) = 0;
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" |", 2);
  std::stringbuf::str();
  v42[0] = *MEMORY[0x1E0DE4F50];
  v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v42 + *(_QWORD *)(v42[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v43[0] = v37;
  v43[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v44 < 0)
    operator delete((void *)v43[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E290BC](&v45);
}

void sub_1B2797BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PVFrameStatsDescription::GetStringForStatsJSON(PVFrameStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double Seconds;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  uint64_t v17;
  double ValueForIndex;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  std::string *v24;
  std::string::size_type v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  uint64_t v37;
  double v38;
  std::string *v39;
  std::string::size_type v40;
  _QWORD *v41;
  uint64_t v42;
  double v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  uint64_t v47;
  double v48;
  std::string *v49;
  std::string::size_type v50;
  _QWORD *v51;
  uint64_t v52;
  double v53;
  std::string *v54;
  std::string::size_type v55;
  _QWORD *v56;
  uint64_t v57;
  double v58;
  std::string *v59;
  std::string::size_type v60;
  _QWORD *v61;
  uint64_t v62;
  double v63;
  std::string *v64;
  std::string::size_type v65;
  _QWORD *v66;
  uint64_t v67;
  double v68;
  std::string *v69;
  std::string::size_type v70;
  _QWORD *v71;
  double v72;
  double v73;
  double v74;
  Float64 v75;
  float v76;
  float v77;
  double v78;
  double v79;
  std::string *v80;
  std::string::size_type v81;
  _QWORD *v82;
  std::string *v83;
  std::string::size_type v84;
  uint64_t v85;
  CMTime v87;
  CMTime v88;
  CMTime time;
  std::string __p;
  _QWORD v91[2];
  _QWORD v92[11];
  char v93;
  uint64_t v94;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v91);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"[", 1);
  v5 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v5 - 24)) = 0;
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  v7 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v7 - 24)) = 3;
  time = *(CMTime *)((char *)a2 + 8);
  Seconds = CMTimeGetSeconds(&time);
  formatValue(Seconds, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v12 - 24)) = 0;
  v13 = 0.0;
  if (*((_BYTE *)a2 + 56))
    v13 = 1.0;
  formatValue(v13, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v17 - 24)) = 0;
  ValueForIndex = PVPerfStats::FrameStats::GetValueForIndex(a2, 0xAu);
  formatValue((double)(int)ValueForIndex, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v20 = __p.__r_.__value_.__l.__size_;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v22 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v22 - 24)) = 3;
  v23 = PVPerfStats::FrameStats::GetValueForIndex(a2, 0);
  formatValue(v23 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v24, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v27 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v27 - 24)) = 3;
  v28 = PVPerfStats::FrameStats::GetValueForIndex(a2, 1u);
  formatValue(v28 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v32 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v32 - 24)) = 3;
  v33 = PVPerfStats::FrameStats::GetValueForIndex(a2, 2u);
  formatValue(v33 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &__p;
  else
    v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v35 = __p.__r_.__value_.__l.__size_;
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v34, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v37 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v37 - 24)) = 3;
  v38 = PVPerfStats::FrameStats::GetValueForIndex(a2, 3u);
  formatValue(v38 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &__p;
  else
    v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v40 = __p.__r_.__value_.__l.__size_;
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v39, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v42 - 24)) = 3;
  v43 = PVPerfStats::FrameStats::GetValueForIndex(a2, 4u);
  formatValue(v43 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &__p;
  else
    v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v45 = __p.__r_.__value_.__l.__size_;
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v44, v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v47 - 24)) = 3;
  v48 = PVPerfStats::FrameStats::GetValueForIndex(a2, 5u);
  formatValue(v48 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &__p;
  else
    v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v50 = __p.__r_.__value_.__l.__size_;
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v49, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v52 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v52 - 24)) = 3;
  v53 = PVPerfStats::FrameStats::GetValueForIndex(a2, 6u);
  formatValue(v53 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &__p;
  else
    v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v55 = __p.__r_.__value_.__l.__size_;
  v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v54, v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v57 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v57 - 24)) = 3;
  v58 = PVPerfStats::FrameStats::GetValueForIndex(a2, 7u);
  formatValue(v58 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &__p;
  else
    v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v60 = __p.__r_.__value_.__l.__size_;
  v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v59, v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v62 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v62 - 24)) = 3;
  v63 = PVPerfStats::FrameStats::GetValueForIndex(a2, 8u);
  formatValue(v63 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = &__p;
  else
    v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v65 = __p.__r_.__value_.__l.__size_;
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v64, v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v67 = v92[0];
  *(_DWORD *)((char *)&v92[1] + *(_QWORD *)(v92[0] - 24)) = *(_DWORD *)((_BYTE *)&v92[1] + *(_QWORD *)(v92[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v67 - 24)) = 3;
  v68 = PVPerfStats::FrameStats::GetValueForIndex(a2, 9u);
  formatValue(v68 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = &__p;
  else
    v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v70 = __p.__r_.__value_.__l.__size_;
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v69, v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a3)
      goto LABEL_107;
  }
  else if (a3)
  {
LABEL_107:
    v72 = *((double *)a2 + 4);
    v73 = *((double *)a3 + 4);
    v88 = *(CMTime *)((char *)a2 + 8);
    v74 = CMTimeGetSeconds(&v88);
    v87 = *(CMTime *)((char *)a3 + 8);
    v75 = CMTimeGetSeconds(&v87);
    v76 = (v72 - v73) * 1000.0;
    v77 = v74 - v75;
    v78 = v76;
    v79 = v77;
    goto LABEL_110;
  }
  v78 = 0.0;
  v79 = 0.0;
LABEL_110:
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v92[0] - 24)) = 3;
  formatValue(v78, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &__p;
  else
    v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v81 = __p.__r_.__value_.__l.__size_;
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v80, v81);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)((char *)&v92[2] + *(_QWORD *)(v92[0] - 24)) = 3;
  formatValue(v79, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = &__p;
  else
    v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v84 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v83, v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"]", 1);
  std::stringbuf::str();
  v91[0] = *MEMORY[0x1E0DE4F50];
  v85 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v91 + *(_QWORD *)(v91[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v92[0] = v85;
  v92[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v93 < 0)
    operator delete((void *)v92[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E290BC](&v94);
}

void sub_1B2798588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void PVFrameStatsDescription::GetStringForStatsPMR(PVFrameStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  void *v4;
  void *v5;
  uint64_t i;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t j;
  uint64_t k;
  id v25;
  _QWORD v26[2];
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  _OWORD v30[5];
  const __CFString *v31;
  _OWORD v32[5];
  const __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32[2] = xmmword_1E64D5DA8;
  v32[3] = *(_OWORD *)&off_1E64D5DB8;
  v32[4] = xmmword_1E64D5DC8;
  v33 = CFSTR("Frame Time Delta");
  v32[0] = xmmword_1E64D5D88;
  v32[1] = *(_OWORD *)&off_1E64D5D98;
  v30[2] = xmmword_1E64D5E00;
  v30[3] = *(_OWORD *)&off_1E64D5E10;
  v30[4] = xmmword_1E64D5E20;
  v31 = CFSTR("Difference in elapsed time between current and previous frame");
  v30[0] = xmmword_1E64D5DE0;
  v30[1] = *(_OWORD *)&off_1E64D5DF0;
  v25 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v25, "setDateFormat:", CFSTR("yyyy-MM-dd 'at' HH:mm:ss"));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "stringFromDate:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  for (i = 0; i != 11; ++i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"<Measurement ", 13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"key=\"", 5);
    v8 = (const char *)objc_msgSend(objc_retainAutorelease(*((id *)v32 + i)), "UTF8String");
    v9 = strlen(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"value=\"", 7);
    PVPerfStats::FrameStats::GetValueForIndex(a2, i);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\" ", 2);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"comment=\"", 9);
    v13 = (const char *)objc_msgSend(objc_retainAutorelease(*((id *)v30 + i)), "UTF8String");
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for frame ", 11);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" ", 2);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"timestamp=\"", 11);
    v18 = objc_retainAutorelease(v5);
    v19 = (const char *)objc_msgSend(v18, "UTF8String");
    v20 = strlen(v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"/>\n", 4);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v27[0] = v22;
  v27[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete((void *)v27[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E290BC](&v29);

  for (j = 80; j != -8; j -= 8)
  for (k = 80; k != -8; k -= 8)

}

void sub_1B2798988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t j;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a12);

  for (i = 80; i != -8; i -= 8)
  for (j = 80; j != -8; j -= 8)

  _Unwind_Resume(a1);
}

std::string *formatValue@<X0>(double __val@<D0>, std::string *retstr@<X8>)
{
  return std::to_string(retstr, __val);
}

void PVLivePlayerStatsDescription::GetStringForLabels(_QWORD *a1@<X8>, int a2@<W1>)
{
  char *v2;

  if (a2 == 1)
  {
    PVLivePlayerStatsDescription::GetStringForLabelsJSON(a1);
  }
  else
  {
    if (a2)
      v2 = "";
    else
      v2 = " Num | Get Sources | Build Render Request | Run Render Request | Complete Render Request | Total Time";
    std::string::basic_string[abi:ne180100]<0>(a1, v2);
  }
}

void PVLivePlayerStatsDescription::GetStringForLabelsJSON(_QWORD *a1@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("Num"), CFSTR("Get Sources"), CFSTR("Build Render Request"), CFSTR("Run Render Request"), CFSTR("Complete Render Request"), CFSTR("Total Time"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 4, &v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v7;
  if (v4)
  {
    v6 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v4, 4));
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v6, "UTF8String"));

  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }

}

void sub_1B2798B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void PVLivePlayerStatsDescription::GetStringForStats(PVPerfStats::FrameStats *a1@<X2>, PVLivePlayerStatsDescription *a2@<X0>, int a3@<W1>, _QWORD *a4@<X8>)
{
  if (a3 == 2)
  {
    PVLivePlayerStatsDescription::GetStringForStatsPMR(a2, a1, a1);
  }
  else if (a3 == 1)
  {
    PVLivePlayerStatsDescription::GetStringForStatsJSON(a2, a1, a1);
  }
  else if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
  else
  {
    PVLivePlayerStatsDescription::GetStringForStatsTEXT(a2, a1, a1);
  }
}

uint64_t PVLivePlayerStatsDescription::GetStringForStatsTEXT(PVLivePlayerStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v4 = v18[0];
  *(_QWORD *)((char *)&v18[3] + *(_QWORD *)(v18[0] - 24)) = 4;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v4 - 24)) = 0;
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" | ", 3);
  v6 = v18[0];
  *(_QWORD *)((char *)&v18[3] + *(_QWORD *)(v18[0] - 24)) = 11;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v6 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 0);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" | ", 3);
  v8 = v18[0];
  *(_QWORD *)((char *)&v18[3] + *(_QWORD *)(v18[0] - 24)) = 20;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v8 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 1u);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" | ", 3);
  v10 = v18[0];
  *(_QWORD *)((char *)&v18[3] + *(_QWORD *)(v18[0] - 24)) = 18;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v10 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 2u);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" | ", 3);
  v12 = v18[0];
  *(_QWORD *)((char *)&v18[3] + *(_QWORD *)(v18[0] - 24)) = 23;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v12 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 3u);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" | ", 3);
  v14 = v18[0];
  *(_QWORD *)((char *)&v18[3] + *(_QWORD *)(v18[0] - 24)) = 10;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v14 - 24)) = 3;
  PVPerfStats::FrameStats::GetValueForIndex(a2, 4u);
  std::ostream::operator<<();
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v15;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E290BC](&v20);
}

void sub_1B2798E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PVLivePlayerStatsDescription::GetStringForStatsJSON(PVLivePlayerStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  _QWORD *v4;
  unsigned int i;
  double ValueForIndex;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v9;
  double v10;
  std::string *v11;
  std::string::size_type v12;
  _QWORD *v13;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"[", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  for (i = 0; i != 10; ++i)
  {
    ValueForIndex = PVPerfStats::FrameStats::GetValueForIndex(a2, i);
    formatValue(ValueForIndex * 1000.0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v10 = PVPerfStats::FrameStats::GetValueForIndex(a2, 0xAu);
  formatValue(v10 * 1000.0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &__p;
  else
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v12 = __p.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E290BC](&v20);
}

void sub_1B2799030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void PVLivePlayerStatsDescription::GetStringForStatsPMR(PVLivePlayerStatsDescription *this, const PVPerfStats::FrameStats *a2, const PVPerfStats::FrameStats *a3)
{
  void *v4;
  void *v5;
  uint64_t i;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t j;
  uint64_t k;
  id v25;
  _QWORD v26[2];
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  _OWORD v30[2];
  const __CFString *v31;
  _OWORD v32[2];
  const __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32[0] = xmmword_1E64D5E38;
  v32[1] = *(_OWORD *)&off_1E64D5E48;
  v33 = CFSTR("Total time");
  v30[0] = xmmword_1E64D5E60;
  v30[1] = *(_OWORD *)off_1E64D5E70;
  v31 = CFSTR("Total elapsed time");
  v25 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v25, "setDateFormat:", CFSTR("yyyy-MM-dd 'at' HH:mm:ss"));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "stringFromDate:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  for (i = 0; i != 11; ++i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"<Measurement ", 13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"key=\"", 5);
    v8 = (const char *)objc_msgSend(objc_retainAutorelease(*((id *)v32 + i)), "UTF8String");
    v9 = strlen(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"value=\"", 7);
    PVPerfStats::FrameStats::GetValueForIndex(a2, i);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\" ", 2);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"comment=\"", 9);
    v13 = (const char *)objc_msgSend(objc_retainAutorelease(*((id *)v30 + i)), "UTF8String");
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for frame ", 11);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" ", 2);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"timestamp=\"", 11);
    v18 = objc_retainAutorelease(v5);
    v19 = (const char *)objc_msgSend(v18, "UTF8String");
    v20 = strlen(v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"/>\n", 4);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v27[0] = v22;
  v27[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete((void *)v27[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E290BC](&v29);

  for (j = 32; j != -8; j -= 8)
  for (k = 32; k != -8; k -= 8)

}

void sub_1B27993A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  void *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);

  for (i = 32; i != -8; i -= 8)
  for (j = 32; j != -8; j -= 8)

  _Unwind_Resume(a1);
}

uint64_t PVFrameStatsDescription::NumStats(PVFrameStatsDescription *this)
{
  return 11;
}

uint64_t PVLivePlayerStatsDescription::NumStats(PVLivePlayerStatsDescription *this)
{
  return 5;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1B5E28E40](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1B5E28E4C](v13);
  return a1;
}

void sub_1B2799544(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1B5E28E4C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B2799524);
}

void sub_1B279958C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1B27996C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_1B279985C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B2799C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void PVIGHGNodeCacheKey::PVIGHGNodeCacheKey(PVIGHGNodeCacheKey *this, unint64_t a2, CMTime *a3)
{
  CMTimeEpoch epoch;

  this->var0 = a2;
  epoch = a3->epoch;
  *(_OWORD *)&this->var1.var0 = *(_OWORD *)&a3->value;
  this->var1.var3 = epoch;
  this->var2 = 0;
}

void PVIGHGNodeCacheKey::PVIGHGNodeCacheKey(PVIGHGNodeCacheKey *this, const PVIGHGNodeCacheKey *a2)
{
  __int128 v2;

  this->var0 = a2->var0;
  v2 = *(_OWORD *)&a2->var1.var0;
  this->var1.var3 = a2->var1.var3;
  *(_OWORD *)&this->var1.var0 = v2;
  this->var2 = a2->var2;
}

BOOL PVIGHGNodeCacheKey::operator<(uint64_t a1, uint64_t a2)
{
  CMTime v3;
  CMTime time1;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return *(_QWORD *)a1 < *(_QWORD *)a2;
  time1 = *(CMTime *)(a1 + 8);
  v3 = *(CMTime *)(a2 + 8);
  return CMTimeCompare(&time1, &v3) >> 31;
}

void PVInstructionGraphContext::PVInstructionGraphContext(PVInstructionGraphContext *this, PVVideoCompositingContext *a2)
{
  PVVideoCompositingContext *v3;
  PVVideoCompositingContext *v4;
  _QWORD *v5;

  v3 = a2;
  HGObject::HGObject((HGObject *)this);
  *(_QWORD *)this = off_1E64D5F28;
  v4 = v3;
  *((_QWORD *)this + 2) = v4;
  HGDotGraph::HGDotGraph((HGDotGraph *)((char *)this + 32));
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  *v5 = v5 + 1;
  v5[4] = 0;
  v5[2] = 0;
  v5[3] = v5 + 4;
  v5[7] = 0;
  v5[5] = 0;
  v5[6] = v5 + 7;
  v5[10] = 0;
  v5[8] = 0;
  v5[9] = v5 + 10;
  v5[13] = 0;
  v5[11] = 0;
  v5[12] = v5 + 13;
  v5[17] = 0;
  v5[16] = 0;
  v5[14] = 0;
  v5[15] = v5 + 16;
  *((_QWORD *)this + 3) = v5;

}

void sub_1B2799E98(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  HGDotGraph *v3;

  HGDotGraph::~HGDotGraph(v3);

  HGObject::~HGObject((HGObject *)v1);
  _Unwind_Resume(a1);
}

void PVInstructionGraphContext::~PVInstructionGraphContext(PVInstructionGraphContext *this)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_QWORD *)this = off_1E64D5F28;
  PVInputHGNodeMap<PVIGHGNodeCacheKey>::Clear(*((_QWORD *)this + 3));
  v2 = (_QWORD **)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = PVInputHGNodeMap<PVIGHGNodeCacheKey>::~PVInputHGNodeMap(v2);
    MEMORY[0x1B5E29170](v3, 0x1020C400405154DLL);
  }
  HGDotGraph::end((HGDotGraph *)((char *)this + 32));
  HGDotGraph::~HGDotGraph((HGDotGraph *)((char *)this + 32));

  HGObject::~HGObject((HGObject *)this);
}

void PVInputHGNodeMap<PVIGHGNodeCacheKey>::Clear(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v4 = v3[9];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v3[9] = 0;
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v2;
  v8 = *(_QWORD **)(a1 + 72);
  v9 = (_QWORD *)(a1 + 80);
  if (v8 != (_QWORD *)(a1 + 80))
  {
    do
    {
      v10 = v8[9];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v8[9] = 0;
      v11 = (_QWORD *)v8[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v8[2];
          v7 = *v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v7);
      }
      v8 = v12;
    }
    while (v12 != v9);
  }
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = *(_QWORD **)(a1 + 104);
  v13 = (_QWORD *)(a1 + 104);
  *(v13 - 5) = 0;
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v13;
  *v13 = 0;
  v13[1] = 0;
}

uint64_t PVInstructionGraphContext::WorkingColorSpace(PVInstructionGraphContext *this)
{
  return objc_msgSend(*((id *)this + 2), "workingColorSpace");
}

uint64_t PVInstructionGraphContext::OutputColorSpace(PVInstructionGraphContext *this)
{
  return objc_msgSend(*((id *)this + 2), "outputColorSpace");
}

uint64_t PVInstructionGraphContext::WorkingColorSpaceConformIntent(PVInstructionGraphContext *this)
{
  return objc_msgSend(*((id *)this + 2), "workingColorSpaceConformIntent");
}

uint64_t PVInstructionGraphContext::HGNodeCache(PVInstructionGraphContext *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t PVInstructionGraphContext::DotGraph(PVInstructionGraphContext *this)
{
  return (uint64_t)this + 32;
}

uint64_t PVInstructionGraphContext::AddContextDotNode(id *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  const char *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  const char *v26;
  uint64_t v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  void *__p[2];
  unsigned __int8 v32;
  _QWORD v33[2];
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  v4 = (uint64_t *)(a1 + 4);
  result = HGDotGraph::on((HGDotGraph *)(a1 + 4));
  if ((_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
    (*((void (**)(void **__return_ptr, id *))*a1 + 10))(__p, a1);
    if ((v32 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v32 & 0x80u) == 0)
      v7 = v32;
    else
      v7 = (uint64_t)__p[1];
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
    if ((char)v32 < 0)
      operator delete(__p[0]);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Working CS: ", 12);
    objc_msgSend(a1[2], "workingColorSpace");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "name");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v12 = (const char *)objc_msgSend(v11, "UTF8String");
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);

    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Output  CS: ", 12);
    objc_msgSend(a1[2], "outputColorSpace");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "name");
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v18 = (const char *)objc_msgSend(v17, "UTF8String");
    v19 = strlen(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);

    (*((void (**)(id *))*a1 + 5))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Size: [", 7);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" x ", 3);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Scale: ", 7);
    (*((void (**)(id *))*a1 + 6))(a1);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"HighQuality: ", 13);
    v25 = (*((uint64_t (**)(id *))*a1 + 8))(a1);
    if (v25)
      v26 = "yes\n";
    else
      v26 = "no\n";
    if (v25)
      v27 = 4;
    else
      v27 = 3;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v26, v27);
    if (*(char *)(a2 + 23) < 0)
      a2 = *(_QWORD *)a2;
    v28 = strlen((const char *)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, a2, v28);
    std::stringbuf::str();
    if ((v32 & 0x80u) == 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    HGDotGraph::node(v4, 0, (uint64_t)v29, 1);
    if ((char)v32 < 0)
      operator delete(__p[0]);
    v33[0] = *MEMORY[0x1E0DE4F50];
    v30 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v33 + *(_QWORD *)(v33[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v34[0] = v30;
    v34[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete((void *)v34[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1B5E290BC](&v36);
  }
  return result;
}

void sub_1B279A430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t PVInstructionGraphContext::DotTreeLogLevel(PVInstructionGraphContext *this)
{
  return objc_msgSend(*((id *)this + 2), "instructionGraphDotTreeLevel");
}

void PVInstructionGraphContext::DotGraphFileName(PVInstructionGraphContext *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  std::string *v4;
  std::string v5;

  do
    v3 = __ldaxr(&PVInstructionGraphContext::DotGraphFileName(void)::sAtomicCount);
  while (__stlxr(v3 + 1, &PVInstructionGraphContext::DotGraphFileName(void)::sAtomicCount));
  std::to_string(&v5, v3 % 3);
  v4 = std::string::insert(&v5, 0, "PVInstructionGraph.");
  *a2 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1B279A530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PVInstructionGraphContext::BeginDotGraph(PVInstructionGraphContext *this)
{
  unsigned __int8 v2;
  size_t v3;
  std::string *v4;
  char *v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const char *v12;
  void *__p[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;
  __int128 v17;
  int64_t v18;

  {
    *(_QWORD *)PVInstructionGraphContext::BeginDotGraph(void)::dirStr = 0;
    *(_QWORD *)&PVInstructionGraphContext::BeginDotGraph(void)::dirStr[8] = 0;
    *(_QWORD *)&PVInstructionGraphContext::BeginDotGraph(void)::dirStr[16] = 0;
    __cxa_atexit(MEMORY[0x1E0DE44D0], PVInstructionGraphContext::BeginDotGraph(void)::dirStr, &dword_1B2737000);
  }
  if (PVInstructionGraphContext::BeginDotGraph(void)::onceToken != -1)
    dispatch_once(&PVInstructionGraphContext::BeginDotGraph(void)::onceToken, &__block_literal_global_10);
  PCImage::setIsPremultiplied((uint64_t)this + 32, (int)objc_msgSend(*((id *)this + 2), "instructionGraphDotTreeLevel") > 0);
  if (PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23] >= 0)
    v3 = PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23];
  else
    v3 = *(_QWORD *)&PVInstructionGraphContext::BeginDotGraph(void)::dirStr[8];
  v4 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v3 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v3)
  {
    if (PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23] >= 0)
      v5 = PVInstructionGraphContext::BeginDotGraph(void)::dirStr;
    else
      v5 = *(char **)PVInstructionGraphContext::BeginDotGraph(void)::dirStr;
    memmove(v4, v5, v3);
  }
  *(_WORD *)((char *)&v4->__r_.__value_.__l.__data_ + v3) = 47;
  (*(void (**)(void **__return_ptr, PVInstructionGraphContext *))(*(_QWORD *)this + 88))(__p, this);
  if ((v14 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v7 = v14;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v16, ".dot");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18 = v10->__r_.__value_.__r.__words[2];
  v17 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v18 >= 0)
    v12 = (const char *)&v17;
  else
    v12 = (const char *)v17;
  HGDotGraph::begin((HGDotGraph *)((char *)this + 32), v12);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
}

void sub_1B279A754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(exception_object);
}

double ___ZN25PVInstructionGraphContext13BeginDotGraphEv_block_invoke(PVRenderManager *a1)
{
  double result;
  std::string v2;

  PVRenderManager::DotGraphLoggingDirectory(a1, &v2);
  if (PVInstructionGraphContext::BeginDotGraph(void)::dirStr[23] < 0)
    operator delete(*(void **)PVInstructionGraphContext::BeginDotGraph(void)::dirStr);
  result = *(double *)&v2.__r_.__value_.__l.__data_;
  *(std::string *)PVInstructionGraphContext::BeginDotGraph(void)::dirStr = v2;
  return result;
}

void PVAVFInstructionGraphContext::PVAVFInstructionGraphContext(PVAVFInstructionGraphContext *this, PVVideoCompositingContext *a2, AVVideoCompositionRenderContext *a3, char a4)
{
  AVVideoCompositionRenderContext *v7;
  AVVideoCompositionRenderContext *v8;

  v7 = a3;
  PVInstructionGraphContext::PVInstructionGraphContext((PVInstructionGraphContext *)this, a2);
  *(_QWORD *)this = off_1E64D5FB8;
  v8 = v7;
  *((_QWORD *)this + 15) = v8;
  *((_BYTE *)this + 128) = a4;
  PVInstructionGraphContext::BeginDotGraph((PVInstructionGraphContext *)this);

}

void sub_1B279A870(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  PVInstructionGraphContext::~PVInstructionGraphContext((PVInstructionGraphContext *)v2);
  _Unwind_Resume(a1);
}

uint64_t PVAVFInstructionGraphContext::RenderSize(id *this)
{
  return objc_msgSend(this[15], "size");
}

uint64_t PVAVFInstructionGraphContext::RenderScale(id *this)
{
  return objc_msgSend(this[15], "renderScale");
}

double PVAVFInstructionGraphContext::RenderTransform@<D0>(PVAVFInstructionGraphContext *this@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  double result;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    objc_msgSend(v2, "renderTransform");
  }
  else
  {
    result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t PVAVFInstructionGraphContext::HighQualityRendering(id *this)
{
  if (*((_BYTE *)this + 128))
    return 0;
  else
    return objc_msgSend(this[15], "highQualityRendering");
}

void PVAVFInstructionGraphContext::AnimationFrameDuration(id *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  objc_msgSend(this[15], "videoComposition");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "frameDuration");
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }

}

void sub_1B279A930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *PVAVFInstructionGraphContext::DotGraphLabel@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "AVF Compositor Context");
}

void PVAVFInstructionGraphContext::DotGraphFileName(PVInstructionGraphContext *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  PVInstructionGraphContext::DotGraphFileName(this, &v4);
  v3 = std::string::append(&v4, ".AVFCustomCompositor");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1B279A9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PVRendererInstructionGraphContext::PVRendererInstructionGraphContext(PVRendererInstructionGraphContext *this, PVVideoCompositingContext *a2, CGSize a3, char a4, CMTime *a5)
{
  CGFloat height;
  CGFloat width;
  uint64_t v9;
  __int128 v10;

  height = a3.height;
  width = a3.width;
  PVInstructionGraphContext::PVInstructionGraphContext((PVInstructionGraphContext *)this, a2);
  *(_QWORD *)v9 = off_1E64D6028;
  *(CGFloat *)(v9 + 120) = width;
  *(CGFloat *)(v9 + 128) = height;
  *(_BYTE *)(v9 + 136) = a4;
  v10 = *(_OWORD *)&a5->value;
  *(_QWORD *)(v9 + 156) = a5->epoch;
  *(_OWORD *)(v9 + 140) = v10;
  PVInstructionGraphContext::BeginDotGraph((PVInstructionGraphContext *)v9);
}

void sub_1B279AA40(_Unwind_Exception *a1)
{
  PVInstructionGraphContext *v1;

  PVInstructionGraphContext::~PVInstructionGraphContext(v1);
  _Unwind_Resume(a1);
}

double PVRendererInstructionGraphContext::RenderSize(PVRendererInstructionGraphContext *this)
{
  return *((double *)this + 15);
}

float PVRendererInstructionGraphContext::RenderScale(PVRendererInstructionGraphContext *this)
{
  return 1.0;
}

__n128 PVRendererInstructionGraphContext::RenderTransform@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v2;
  __int128 v3;
  __n128 result;

  v2 = (__n128 *)MEMORY[0x1E0C9BAA8];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 16) = v3;
  result = v2[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t PVRendererInstructionGraphContext::HighQualityRendering(PVRendererInstructionGraphContext *this)
{
  return *((unsigned __int8 *)this + 136);
}

__n128 PVRendererInstructionGraphContext::AnimationFrameDuration@<Q0>(PVRendererInstructionGraphContext *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 140);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)((char *)this + 156);
  return result;
}

_QWORD *PVRendererInstructionGraphContext::DotGraphLabel@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "PVRenderer Context");
}

void PVRendererInstructionGraphContext::DotGraphFileName(PVInstructionGraphContext *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  PVInstructionGraphContext::DotGraphFileName(this, &v4);
  v3 = std::string::append(&v4, ".PVRenderer");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1B279AB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PVAVFInstructionGraphContext::~PVAVFInstructionGraphContext(id *this)
{

  PVInstructionGraphContext::~PVInstructionGraphContext((PVInstructionGraphContext *)this);
}

{
  void *v2;

  PVInstructionGraphContext::~PVInstructionGraphContext((PVInstructionGraphContext *)this);
  HGObject::operator delete(v2);
}

void PVRendererInstructionGraphContext::~PVRendererInstructionGraphContext(PVInstructionGraphContext *this)
{
  void *v1;

  PVInstructionGraphContext::~PVInstructionGraphContext(this);
  HGObject::operator delete(v1);
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGNode>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGCVBitmap>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PVIGHGNodeCacheKey const,HGRef<HGCVBitmap>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

_QWORD **PVInputHGNodeMap<PVIGHGNodeCacheKey>::~PVInputHGNodeMap(_QWORD **a1)
{
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy((uint64_t)(a1 + 15), a1[16]);
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy((uint64_t)(a1 + 12), a1[13]);
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGCVBitmap>>>>::destroy((uint64_t)(a1 + 9), a1[10]);
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy((uint64_t)(a1 + 6), a1[7]);
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,PCRect<double>>>>::destroy((uint64_t)(a1 + 3), a1[4]);
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::destroy((uint64_t)a1, a1[1]);
  return a1;
}

void std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,AVTimedMetadataGroup * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1B279AEAC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_1B279B154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B279B4C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B279B7B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(a1);
}

void sub_1B279BAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B279BAF8()
{
  void *v0;

  JUMPOUT(0x1B279BAF0);
}

void sub_1B279BB04()
{
  void *v0;

  JUMPOUT(0x1B279BAF0);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1B279BDF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B279BF10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B279C13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B279C294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B279C378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B279C478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B279C618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1B279C8C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B279C9C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B279DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1B279EE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B279EF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t PVRenderManager::INSTANCE@<X0>(PVRenderManager *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t result;

  {
    PVRenderManager::INSTANCE(void)::s_rm = 0;
    __cxa_atexit((void (*)(void *))HGRef<PVRenderManager>::~HGRef, &PVRenderManager::INSTANCE(void)::s_rm, &dword_1B2737000);
  }
  if (PVRenderManager::INSTANCE(void)::onceToken != -1)
    dispatch_once(&PVRenderManager::INSTANCE(void)::onceToken, &__block_literal_global_11);
  result = PVRenderManager::INSTANCE(void)::s_rm;
  *a2 = PVRenderManager::INSTANCE(void)::s_rm;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t *HGRef<PVRenderManager>::~HGRef(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

uint64_t ___ZN15PVRenderManager8INSTANCEEv_block_invoke()
{
  PVRenderManager *v0;
  uint64_t result;

  v0 = (PVRenderManager *)HGObject::operator new(0xB0uLL);
  PVRenderManager::PVRenderManager(v0);
  result = PVRenderManager::INSTANCE(void)::s_rm;
  if ((PVRenderManager *)PVRenderManager::INSTANCE(void)::s_rm == v0)
  {
    if (v0)
      return (*(uint64_t (**)(PVRenderManager *))(*(_QWORD *)v0 + 24))(v0);
  }
  else
  {
    if (PVRenderManager::INSTANCE(void)::s_rm)
      result = (*(uint64_t (**)(void))(*(_QWORD *)PVRenderManager::INSTANCE(void)::s_rm + 24))();
    PVRenderManager::INSTANCE(void)::s_rm = (uint64_t)v0;
  }
  return result;
}

void sub_1B279F110(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void PVRenderManager::DotGraphLoggingDirectory(PVRenderManager *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v3;

  if ((v3 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, "/var/tmp");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, &dword_1B2737000);
  }
  if (PVRenderManager::DotGraphLoggingDirectory(void)::onceToken != -1)
    dispatch_once(&PVRenderManager::DotGraphLoggingDirectory(void)::onceToken, &__block_literal_global_2);
  if (byte_1ED4D931F < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, *((std::string::size_type *)&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory;
    a2->__r_.__value_.__r.__words[2] = unk_1ED4D9318;
  }
}

void sub_1B279F228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN15PVRenderManager24DotGraphLoggingDirectoryEv_block_invoke()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndex:", 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "stringByAppendingString:", CFSTR("/"));
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "isWritableFileAtPath:", v4))
  {
    MEMORY[0x1B5E28D80](&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
  }
  else
  {
    NSTemporaryDirectory();
    v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x1B5E28D80](&PVRenderManager::DotGraphLoggingDirectory(void)::s_DotGraphLoggingDirectory, objc_msgSend(v2, "UTF8String"));

  }
}

void sub_1B279F31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void PVRenderManager::PVRenderManager(PVRenderManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  PVPerfStats *CGColorSpace;
  std::string::size_type v6;
  HGSynchronizable *v7;
  void *v8;
  uint64_t v9;
  std::string::size_type v10;
  PVRenderManager *v11;
  HGComputeDeviceManager *v12;
  HGComputeDeviceManager *v13;
  uint64_t *GPUComputeDeviceList;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char v18;
  char v19;
  HGRenderContext *v20;
  uint64_t v21;
  uint64_t inited;
  HGGPURenderer *Renderer;
  uint64_t MetalContext;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  HGRenderQueue *v29;
  HGRenderQueue *v30;
  uint64_t i;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string v38;
  std::string v39;
  HGRenderContext *v40;
  HGRenderContext *v41;
  PCSharedCount v42;
  PCSharedCount v43;
  HGGLContext *v44;
  void **v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::string v52;
  PCSharedCount v53;
  PCSharedCount v54;
  PCSharedCount v55;
  PCSharedCount v56;
  PCSharedCount v57;

  HGObject::HGObject((HGObject *)this);
  *(_QWORD *)v2 = off_1E64D6278;
  v3 = (uint64_t *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v2 + 24;
  *(_QWORD *)(v2 + 40) = 0;
  v4 = (_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 24;
  *(_QWORD *)(v2 + 64) = v2 + 72;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 104) = 850045863;
  *(_DWORD *)(v2 + 172) = 0;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 153) = 0u;
  +[PVEnvironment Initialize](PVEnvironment, "Initialize", v2 + 104, v2 + 64);
  HGGLGetCurrentContext();
  CGColorSpace = (PVPerfStats *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v56);
  if (CGColorSpace)
  {
    v55.var0 = v56.var0;
    HGGLContext::Share((uint64_t *)&v55, (HGObject **)&v52);
    v6 = v52.__r_.__value_.__r.__words[0];
    if (v52.__r_.__value_.__r.__words[0])
      v52.__r_.__value_.__r.__words[0] = 0;
    PCSharedCount::PCSharedCount(&v55);
  }
  else
  {
    v6 = 0;
  }
  atomic_store(1u, HGLogger::_enabled);
  PVPerfStats::BeginLogging(CGColorSpace);
  v7 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v7);
  *((_QWORD *)this + 7) = v7;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 11) = 0;
  v8 = (void *)PGLMasterEAGLContext();
  HGGLContextPtr::HGGLContextPtr((HGGLContextPtr *)&v54, v8);
  v53.var0 = v54.var0;
  HGGLContext::Share((uint64_t *)&v53, (HGObject **)&v52);
  v9 = *((_QWORD *)this + 6);
  v10 = v52.__r_.__value_.__r.__words[0];
  if (v9 == v52.__r_.__value_.__r.__words[0])
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = v52.__r_.__value_.__r.__words[0];
    }
    *((_QWORD *)this + 6) = v10;
    v52.__r_.__value_.__r.__words[0] = 0;
  }
  PCSharedCount::PCSharedCount(&v53);
  PVRenderManager::DotGraphLoggingDirectory(v11, &v52);
  HGComputeDeviceManager::GetCPUComputeDevice(v12, &v50);
  GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(v13);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__init_with_size[abi:ne180100]<std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*>((char *)&v47, (_QWORD *)*GPUComputeDeviceList, (_QWORD *)GPUComputeDeviceList[1], (GPUComputeDeviceList[1] - *GPUComputeDeviceList) >> 4);
  if (v48 == v47)
  {
    v45 = 0;
    v46 = 0;
  }
  else
  {
    v15 = *(std::__shared_weak_count **)(v47 + 8);
    v45 = *(void ***)v47;
    v46 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  HGGLContext::context((uint64_t *)&v43, *((HGGLContext **)this + 6));
  HGGLContext::Create((uint64_t *)&v43, (HGObject **)&v44);
  PCSharedCount::PCSharedCount(&v43);
  v18 = 1;
  do
  {
    v19 = v18;
    if (!v45)
      goto LABEL_44;
    HGGLContext::context((uint64_t *)&v42, v44);
    v20 = (HGRenderContext *)HGObject::operator new(0xC0uLL);
    v57.var0 = v42.var0;
    HGGPURenderContext::HGGPURenderContext(v20, &v45, &v57);
    PCSharedCount::PCSharedCount(&v57);
    PCSharedCount::PCSharedCount(&v42);
    v21 = HGRenderContext::SetWorkMode((uint64_t)v20, 0);
    v41 = v20;
    if (v20)
      v21 = (*(uint64_t (**)(HGRenderContext *))(*(_QWORD *)v20 + 16))(v20);
    inited = PVRenderManager::InitGLPoolingPolicy(v21, (uint64_t *)&v41);
    if (v20)
    {
      (*(void (**)(HGRenderContext *))(*(_QWORD *)v20 + 24))(v20);
      v40 = v20;
      inited = (*(uint64_t (**)(HGRenderContext *))(*(_QWORD *)v20 + 16))(v20);
    }
    else
    {
      v40 = 0;
    }
    PVRenderManager::InitGLPaddingPolicy(inited, (uint64_t *)&v40);
    if (v20)
      (*(void (**)(HGRenderContext *))(*(_QWORD *)v20 + 24))(v20);
    Renderer = (HGGPURenderer *)HGRenderContext::GetRenderer(v20);
    MetalContext = HGGPURenderer::GetMetalContext(Renderer);
    if (MetalContext)
      HGMetalContext::setCommandQueueLimits(MetalContext, +[PVEnvironment PV_METAL_COMMAND_Q_COMMAND_BUFFER_COUNT_MIN](PVEnvironment, "PV_METAL_COMMAND_Q_COMMAND_BUFFER_COUNT_MIN"), +[PVEnvironment PV_METAL_COMMAND_Q_COMMAND_BUFFER_COUNT_MAX](PVEnvironment, "PV_METAL_COMMAND_Q_COMMAND_BUFFER_COUNT_MAX"), +[PVEnvironment PV_METAL_COMMAND_Q_MEM_USAGE](PVEnvironment, "PV_METAL_COMMAND_Q_MEM_USAGE"));
    v25 = HGRenderContext::GetRenderer(v20);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v39, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    else
      v39 = v52;
    HGRenderer::SetDotGraphOutputDir(v25, (const void **)&v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v26 = HGRenderContext::GetRenderer(v20);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v38, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    else
      v38 = v52;
    HGRenderer::SetBufferDumpDir(v26, (const char *)&v38);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v38.__r_.__value_.__l.__data_);
      if (!v20)
        goto LABEL_42;
LABEL_41:
      (*(void (**)(HGRenderContext *))(*(_QWORD *)v20 + 16))(v20);
      goto LABEL_42;
    }
    if (v20)
      goto LABEL_41;
LABEL_42:
    v27 = operator new(0x18uLL);
    v27[1] = v3;
    v27[2] = v20;
    v28 = *v3;
    *v27 = *v3;
    *(_QWORD *)(v28 + 8) = v27;
    *v3 = (uint64_t)v27;
    ++*v4;
    if (v20)
      (*(void (**)(HGRenderContext *))(*(_QWORD *)v20 + 24))(v20);
LABEL_44:
    v18 = 0;
  }
  while ((v19 & 1) != 0);
  PVRenderManager::InitMetalTexturePoolPolicy(this);
  if (+[PVEnvironment PV_HG_POOL_OBSERVER_INTERVAL](PVEnvironment, "PV_HG_POOL_OBSERVER_INTERVAL"))
    HGPool::setObserverThreadWakeInterval(+[PVEnvironment PV_HG_POOL_OBSERVER_INTERVAL](PVEnvironment, "PV_HG_POOL_OBSERVER_INTERVAL"));
  v29 = (HGRenderQueue *)HGObject::operator new(0x2F0uLL);
  HGRenderQueue::HGRenderQueue(v29);
  v30 = (HGRenderQueue *)*((_QWORD *)this + 2);
  if (v30 == v29)
  {
    if (v29)
    {
      (*(void (**)(HGRenderQueue *))(*(_QWORD *)v29 + 24))(v29);
      v29 = (HGRenderQueue *)*((_QWORD *)this + 2);
    }
  }
  else
  {
    if (v30)
      (*(void (**)(HGRenderQueue *))(*(_QWORD *)v30 + 24))(v30);
    *((_QWORD *)this + 2) = v29;
  }
  HGRenderQueue::SetRunMode((uint64_t)v29, 0);
  HGRenderQueue::SetSerializeRendersFlag(*((HGRenderQueue **)this + 2), 1);
  HGRenderQueue::SetNumGPUReadbackExecUnitsPerGPURenderer(*((HGRenderQueue **)this + 2), 0);
  HGRenderQueue::SetNumPBOsPerGPUReadbackExecUnit(*((HGRenderQueue **)this + 2), 0);
  HGRenderQueue::SetGPUReadbackQueueThrottleSize(*((HGRenderQueue **)this + 2), 0);
  HGRenderQueue::SetSerializeGPUReadbacksFlag(*((HGRenderQueue **)this + 2), 1);
  HGRenderQueue::SetRelaxRenderSerializationForPriorityInversionsFlag(*((HGRenderQueue **)this + 2), 0);
  HGRenderQueue::SetPreferredResource(*((_QWORD *)this + 2), 0);
  HGRenderQueue::SetDebugQueueVerboseMask(*((HGRenderQueue **)this + 2), 0);
  for (i = *((_QWORD *)this + 4); (uint64_t *)i != v3; i = *(_QWORD *)(i + 8))
    HGRenderQueue::AddRenderContext(*((HGRenderQueue **)this + 2), *(HGRenderContext **)(i + 16));
  HGRenderQueue::Start(*((HGRenderQueue **)this + 2));
  if (v44)
    (*(void (**)(HGGLContext *))(*(_QWORD *)v44 + 24))(v44);
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v45 = (void **)&v47;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v45);
  v35 = v51;
  if (v51)
  {
    v36 = (unint64_t *)&v51->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  PCSharedCount::PCSharedCount(&v54);
  if (v6)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v6 + 24))(v6);
  PCSharedCount::PCSharedCount(&v56);
}

void sub_1B279F970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,PCSharedCount a26,PCSharedCount a27,uint64_t a28,char *a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  if (a28)
    (*(void (**)(uint64_t))(*(_QWORD *)a28 + 24))(a28);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  a29 = &a31;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (*(char *)(v38 - 129) < 0)
    operator delete(*(void **)(v38 - 152));
  PCSharedCount::PCSharedCount((PCSharedCount *)(v38 - 120));
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  PCSharedCount::PCSharedCount((PCSharedCount *)(v38 - 104));
  std::mutex::~mutex(a9);
  std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(a10, *(_QWORD **)(v35 + 72));
  v40 = *(_QWORD *)(v35 + 48);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
  std::__list_imp<HGRef<HGRenderContext>>::clear(v34);
  v41 = *(_QWORD *)(v35 + 16);
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  HGObject::~HGObject((HGObject *)v35);
  _Unwind_Resume(a1);
}

uint64_t PVRenderManager::InitGLPoolingPolicy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  float v5;
  float v6;
  MultiGPUPoolingPolicy *v7;
  float v8;
  uint64_t v9;
  uint64_t result;
  MultiGPUPoolingPolicy *v11;

  v3 = +[PVDeviceCharacteristics actualMemory](PVDeviceCharacteristics, "actualMemory");
  v4 = +[PVEnvironment PV_TEXTURE_POOL_SIZE_MB](PVEnvironment, "PV_TEXTURE_POOL_SIZE_MB");
  +[PVEnvironment PV_TEXTURE_POOL_FINISH_SIZE_RATIO](PVEnvironment, "PV_TEXTURE_POOL_FINISH_SIZE_RATIO");
  v6 = v5;
  v7 = (MultiGPUPoolingPolicy *)HGObject::operator new(0x30uLL);
  MultiGPUPoolingPolicy::MultiGPUPoolingPolicy(v7);
  v8 = (float)(unint64_t)((uint64_t)v4 << 20) / (float)v3;
  MultiGPUPoolingPolicy::setMaxPoolSizeRatio((uint64_t)v7, v8);
  MultiGPUPoolingPolicy::setMaxQueueSizeRatio((uint64_t)v7, v6 * v8);
  MultiGPUPoolingPolicy::setMaxUnusedSizeRatio((uint64_t)v7, v8);
  MultiGPUPoolingPolicy::setMaxTotalSizeRatio((uint64_t)v7, 1.0);
  v9 = *a2;
  v11 = v7;
  if (v7)
    (*(void (**)(MultiGPUPoolingPolicy *))(*(_QWORD *)v7 + 16))(v7);
  HGGPURenderContext::SetGLTexturePoolingPolicy(v9, (uint64_t *)&v11);
  result = (uint64_t)v11;
  if (v11)
    result = (*(uint64_t (**)(MultiGPUPoolingPolicy *))(*(_QWORD *)v11 + 24))(v11);
  if (v7)
    return (*(uint64_t (**)(MultiGPUPoolingPolicy *))(*(_QWORD *)v7 + 24))(v7);
  return result;
}

void sub_1B279FD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t PVRenderManager::InitGLPaddingPolicy(uint64_t a1, uint64_t *a2)
{
  ClusteredPaddingPolicy *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  ClusteredPaddingPolicy *v9;

  v3 = (ClusteredPaddingPolicy *)HGObject::operator new(0x38uLL);
  ClusteredPaddingPolicy::ClusteredPaddingPolicy(v3);
  v4 = +[PVEnvironment PV_TEXTURE_CLUSTER_PADDING_REMEMBRANCE](PVEnvironment, "PV_TEXTURE_CLUSTER_PADDING_REMEMBRANCE");
  v5 = +[PVEnvironment PV_TEXTURE_CLUSTER_PADDING_CUSHIONING](PVEnvironment, "PV_TEXTURE_CLUSTER_PADDING_CUSHIONING");
  v6 = +[PVEnvironment PV_TEXTURE_CLUSTER_PADDING_CLUMPING](PVEnvironment, "PV_TEXTURE_CLUSTER_PADDING_CLUMPING");
  *((_DWORD *)v3 + 10) = v4;
  *((_DWORD *)v3 + 11) = v5;
  *((_DWORD *)v3 + 12) = v6;
  v7 = *a2;
  v9 = v3;
  (*(void (**)(ClusteredPaddingPolicy *))(*(_QWORD *)v3 + 16))(v3);
  HGGPURenderContext::SetGLTexturePaddingPolicy(v7, (_QWORD **)&v9);
  if (v9)
    (*(void (**)(ClusteredPaddingPolicy *))(*(_QWORD *)v9 + 24))(v9);
  return (*(uint64_t (**)(ClusteredPaddingPolicy *))(*(_QWORD *)v3 + 24))(v3);
}

void sub_1B279FE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void PVRenderManager::InitMetalTexturePoolPolicy(PVRenderManager *this)
{
  HGGPUResources *MainDevice;
  const HGMetalDeviceInfo *v3;
  const HGMetalDeviceInfo *DeviceResources;
  uint64_t *v5;
  __int128 v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  _OWORD v15[9];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice((HGMetalDeviceInfo *)this);
  if (MainDevice)
  {
    DeviceResources = HGGPUResources::getDeviceResources(MainDevice, v3);
    v5 = (uint64_t *)*((_QWORD *)DeviceResources + 5);
    *(_QWORD *)&v6 = -1;
    *((_QWORD *)&v6 + 1) = -1;
    *(_QWORD *)v31 = -1;
    v35 = -1;
    *((_QWORD *)&v33 + 1) = -1;
    v34 = v6;
    v32 = v6;
    v27 = xmmword_1B304F440;
    v28 = v6;
    v29 = xmmword_1B304F450;
    *((_QWORD *)&v30 + 1) = -1;
    *(_QWORD *)&v30 = 314572800;
    *(_OWORD *)&v31[8] = xmmword_1B304F450;
    *(_QWORD *)&v31[24] = 314572800;
    *(_QWORD *)&v33 = 750000000;
    HGGPUResources::setupGroupTotalUsagePolicies((uint64_t)DeviceResources, (uint64_t)&v27);
    +[PVEffectResources utObserver](PVEffectResources, "utObserver");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v23 = v32;
      v24 = v33;
      v25 = v34;
      v26 = v35;
      v19 = v29;
      v20 = v30;
      v21 = *(_OWORD *)v31;
      v22 = *(_OWORD *)&v31[16];
      v17 = v27;
      v18 = v28;
      +[PVEffectResources utObserver](PVEffectResources, "utObserver");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15[6] = v23;
      v15[7] = v24;
      v15[8] = v25;
      v16 = v26;
      v15[2] = v19;
      v15[3] = v20;
      v15[4] = v21;
      v15[5] = v22;
      v15[0] = v17;
      v15[1] = v18;
      objc_msgSend(v8, "setPoolingPolicy:", v15);

    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E64D62C8;
    v14 = v9;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E64D6318;
    v13 = &v9[1].__vftable;
    HGMetalBufferPool::setAllocationPolicy(v5, (uint64_t *)&v13);
    v10 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  PVRenderManager::UpdateMetalTexturePoolingPolicy(this);
}

void sub_1B27A0078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PVRenderManager::~PVRenderManager(PVRenderManager *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E64D6278;
  HGRenderQueue::CancelAllRenderJobs(*((HGRenderQueue **)this + 2), 1);
  HGRenderQueue::Drain(*((HGRenderQueue **)this + 2));
  HGRenderQueue::Shutdown(*((HGRenderQueue **)this + 2));
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  *((_QWORD *)this + 2) = 0;
  for (i = *((_QWORD *)this + 4); (PVRenderManager *)i != (PVRenderManager *)((char *)this + 24); i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *(_QWORD *)(i + 16) = 0;
  }
  v5 = *((_QWORD *)this + 7);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    *((_QWORD *)this + 11) = 0;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  std::__list_imp<HGRef<HGRenderContext>>::clear((uint64_t *)this + 3);
  v8 = *((_QWORD *)this + 2);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  HGObject::~HGObject((HGObject *)this);
}

{
  void *v1;

  PVRenderManager::~PVRenderManager(this);
  HGObject::operator delete(v1);
}

void PVRenderManager::UpdateMetalTexturePoolingPolicy(PVRenderManager *this)
{
  __int128 v2;
  std::mutex *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  HGMetalDeviceInfo *v11;
  HGGPUResources *MainDevice;
  const HGMetalDeviceInfo *v13;
  const HGMetalDeviceInfo *DeviceResources;
  void *v15;
  void *v16;
  _OWORD v17[9];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[40];

  *(_QWORD *)&v36[32] = -1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)v36 = v2;
  *(_OWORD *)&v36[16] = v2;
  v34 = v2;
  v35 = v2;
  v32 = v2;
  v33 = v2;
  v30 = v2;
  v31 = v2;
  v3 = (std::mutex *)((char *)this + 104);
  v29 = v2;
  std::mutex::lock((std::mutex *)((char *)this + 104));
  if (*((_BYTE *)this + 168))
  {
    *(_QWORD *)&v30 = -1;
    *((_QWORD *)&v30 + 1) = -1;
    *((_QWORD *)&v32 + 1) = -1;
    *(_QWORD *)&v33 = -1;
    *(_QWORD *)&v35 = -1;
    *((_QWORD *)&v35 + 1) = -1;
    *(_QWORD *)&v4 = -1;
    *((_QWORD *)&v4 + 1) = -1;
    *(_OWORD *)&v36[8] = v4;
    *(_OWORD *)&v36[24] = v4;
    *(_QWORD *)&v29 = 10;
    v5 = 64;
    v6 = 52428800;
    v7 = xmmword_1B304F460;
    v8 = 209715200;
  }
  else
  {
    if (*((_DWORD *)this + 43) == 1)
    {
      *((_QWORD *)&v30 + 1) = -1;
      *((_QWORD *)&v32 + 1) = -1;
      *(_QWORD *)&v33 = -1;
      *(_QWORD *)&v35 = -1;
      *((_QWORD *)&v35 + 1) = -1;
      *(_QWORD *)&v10 = -1;
      *((_QWORD *)&v10 + 1) = -1;
      *(_OWORD *)&v36[8] = v10;
      *(_OWORD *)&v36[24] = v10;
      v5 = 64;
      v7 = xmmword_1B304F470;
      v8 = 209715200;
      v6 = 209715200;
    }
    else
    {
      *((_QWORD *)&v30 + 1) = -1;
      *((_QWORD *)&v32 + 1) = -1;
      *(_QWORD *)&v33 = -1;
      *(_QWORD *)&v35 = -1;
      *((_QWORD *)&v35 + 1) = -1;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      *(_OWORD *)&v36[8] = v9;
      *(_OWORD *)&v36[24] = v9;
      v5 = 128;
      v7 = xmmword_1B304F450;
      v8 = 314572800;
      v6 = 314572800;
    }
    *(_QWORD *)&v30 = -1;
    *(_QWORD *)&v29 = v5;
  }
  *((_QWORD *)&v29 + 1) = v8;
  v31 = v7;
  *(_QWORD *)&v32 = v6;
  *((_QWORD *)&v33 + 1) = v7;
  *(_QWORD *)&v34 = v5;
  *((_QWORD *)&v34 + 1) = v8;
  *(_QWORD *)v36 = v7;
  std::mutex::unlock(v3);
  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice(v11);
  if (MainDevice)
  {
    DeviceResources = HGGPUResources::getDeviceResources(MainDevice, v13);
    HGGPUResources::setupGroupTotalUsagePolicies((uint64_t)DeviceResources, (uint64_t)&v29);
    +[PVEffectResources utObserver](PVEffectResources, "utObserver");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v25 = v35;
      v26 = *(_OWORD *)v36;
      v27 = *(_OWORD *)&v36[16];
      v28 = *(_QWORD *)&v36[32];
      v21 = v31;
      v22 = v32;
      v23 = v33;
      v24 = v34;
      v19 = v29;
      v20 = v30;
      +[PVEffectResources utObserver](PVEffectResources, "utObserver");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17[6] = v25;
      v17[7] = v26;
      v17[8] = v27;
      v18 = v28;
      v17[2] = v21;
      v17[3] = v22;
      v17[4] = v23;
      v17[5] = v24;
      v17[0] = v19;
      v17[1] = v20;
      objc_msgSend(v16, "setPoolingPolicy:", v17);

    }
  }
}

void sub_1B27A03B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PVRenderManager::EnqueueRenderJob(uint64_t a1, HGRenderJob **a2)
{
  return HGRenderQueue::EnqueueRenderJob(*(HGRenderQueue **)(a1 + 16), *a2);
}

uint64_t PVRenderManager::CancelRenderJob(uint64_t a1, HGRenderJob **a2)
{
  return HGRenderQueue::CancelRenderJob(*(HGRenderQueue **)(a1 + 16), *a2);
}

uint64_t PVRenderManager::CancelAllRenderJobs(PVRenderManager *this, int a2)
{
  return HGRenderQueue::CancelAllRenderJobs(*((HGRenderQueue **)this + 2), a2);
}

void PVRenderManager::Shutdown(PVRenderManager *this)
{
  PVPerfStats *v1;

  HGRenderQueue::Shutdown(*((HGRenderQueue **)this + 2));
  PVPerfStats::EndLogging(v1);
}

HGSynchronizable *PVRenderManager::SetMinRenderPriority(PVRenderManager *this, int a2)
{
  int v2;

  if (a2)
    v2 = 5;
  else
    v2 = 0;
  return HGRenderQueue::SetMinJobExecPriority(*((HGRenderQueue **)this + 2), v2);
}

HGSynchronizable *PVRenderManager::Pause(PVRenderManager *this)
{
  return HGRenderQueue::Pause(*((HGRenderQueue **)this + 2));
}

HGSynchronizable *PVRenderManager::Resume(PVRenderManager *this)
{
  return HGRenderQueue::Restart(*((HGRenderQueue **)this + 2));
}

void PVRenderManager::WaitForCommandBuffersToComplete(PVRenderManager *this)
{
  HGObject *v2;
  char *v3;
  uint64_t i;
  HGGPURenderContext *v5;
  HGGPURenderer *GPURenderer;
  PCSharedCount v7;
  HGObject *v8;
  PCSharedCount v9;

  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v9))
  {
    v7.var0 = v9.var0;
    HGGLContext::Share((uint64_t *)&v7, &v8);
    v2 = v8;
    if (v8)
      v8 = 0;
    PCSharedCount::PCSharedCount(&v7);
  }
  else
  {
    v2 = 0;
  }
  v3 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(HGGPURenderContext **)(i + 16);
    if (v5)
      (*(void (**)(_QWORD))(*(_QWORD *)v5 + 16))(*(_QWORD *)(i + 16));
    if (HGRenderContext::GetType(v5) == 1)
    {
      GPURenderer = (HGGPURenderer *)HGGPURenderContext::GetGPURenderer(v5);
      HGGPURenderer::FinishMetalCommandBuffer(GPURenderer);
    }
    if (v5)
      (*(void (**)(HGGPURenderContext *))(*(_QWORD *)v5 + 24))(v5);
  }
  if (v2)
    (*(void (**)(HGObject *))(*(_QWORD *)v2 + 24))(v2);
  PCSharedCount::PCSharedCount(&v9);
}

void sub_1B27A0510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::PCSharedCount(&a10);
  PCSharedCount::PCSharedCount(&a12);
  _Unwind_Resume(a1);
}

uint64_t PVRenderManager::GetInteractiveMode(PVRenderManager *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  v3 = *((unsigned __int8 *)this + 168);
  std::mutex::unlock(v2);
  return v3;
}

void PVRenderManager::SetInteractiveMode(PVRenderManager *this, int a2)
{
  std::mutex *v4;
  int v5;

  v4 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  v5 = *((unsigned __int8 *)this + 168);
  *((_BYTE *)this + 168) = a2;
  std::mutex::unlock(v4);
  if (v5 != a2)
    PVRenderManager::UpdateMetalTexturePoolingPolicy(this);
}

uint64_t PVRenderManager::GetMemoryEnvironment(PVRenderManager *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  v3 = *((unsigned int *)this + 43);
  std::mutex::unlock(v2);
  return v3;
}

void PVRenderManager::updateMemoryEnvironment(uint64_t a1, int a2)
{
  std::mutex *v4;
  int v5;

  v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 172) = a2;
  std::mutex::unlock(v4);
  if (v5 != a2)
    PVRenderManager::UpdateMetalTexturePoolingPolicy((PVRenderManager *)a1);
}

void PVRenderManager::SetupTextureFactories(PVRenderManager *this, float a2)
{
  int v4;
  uint64_t v5;
  HGRenderContext *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;
  PCSharedCount v14;
  HGSynchronizable *v15;
  char v16;
  PCSharedCount v17;

  v15 = (HGSynchronizable *)*((_QWORD *)this + 7);
  v16 = 0;
  HGSynchronizable::Lock(v15);
  v4 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = v4 + 1;
  if (!v4)
  {
    v5 = *((_QWORD *)this + 4);
    if ((PVRenderManager *)v5 != (PVRenderManager *)((char *)this + 24))
    {
      while (1)
      {
        v6 = *(HGRenderContext **)(v5 + 16);
        if (v6)
          (*(void (**)(_QWORD))(*(_QWORD *)v6 + 16))(*(_QWORD *)(v5 + 16));
        if (HGRenderContext::GetType(v6) != 1)
          goto LABEL_14;
        v14.var0 = (PC_Sp_counted_base *)v6;
        HGGPURenderContext::GetGLContext((HGGLContext **)v6, (HGGLContextPtr *)&v13);
        v7 = HGObject::operator new(0x20uLL);
        v17.var0 = v13.var0;
        HGCVGLTextureFactory::HGCVGLTextureFactory(v7, &v17, a2);
        PCSharedCount::PCSharedCount(&v17);
        v17.var0 = (PC_Sp_counted_base *)&v14;
        v8 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>((uint64_t **)this + 8, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17);
        v9 = (void *)v8[5];
        if (v9 != v7)
          break;
        if (v7)
          goto LABEL_12;
LABEL_13:
        PCSharedCount::PCSharedCount(&v13);
LABEL_14:
        if (v6)
          (*(void (**)(HGRenderContext *))(*(_QWORD *)v6 + 24))(v6);
        v5 = *(_QWORD *)(v5 + 8);
        if ((PVRenderManager *)v5 == (PVRenderManager *)((char *)this + 24))
          goto LABEL_17;
      }
      if (v9)
        (*(void (**)(void *))(*(_QWORD *)v9 + 24))(v9);
      v8[5] = (uint64_t)v7;
      if (!v7)
        goto LABEL_13;
      (*(void (**)(void *))(*(_QWORD *)v7 + 16))(v7);
LABEL_12:
      (*(void (**)(void *))(*(_QWORD *)v7 + 24))(v7);
      goto LABEL_13;
    }
LABEL_17:
    HGGLContext::context((uint64_t *)&v12, *((HGGLContext **)this + 6));
    HGGLContext::Create((uint64_t *)&v12, (HGObject **)&v17);
    PCSharedCount::PCSharedCount(&v12);
    HGGLContext::context((uint64_t *)&v14, (HGGLContext *)v17.var0);
    v10 = HGObject::operator new(0x20uLL);
    v11.var0 = v14.var0;
    HGCVGLTextureFactory::HGCVGLTextureFactory(v10, &v11, 0.1);
    *((_QWORD *)this + 11) = v10;
    PCSharedCount::PCSharedCount(&v11);
    PCSharedCount::PCSharedCount(&v14);
    if (v17.var0)
      (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v17.var0 + 24))(v17.var0);
  }
  HGSynchronizer::~HGSynchronizer(&v15);
}

void sub_1B27A08B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, PCSharedCount a11, PCSharedCount a12, HGSynchronizable *a13, uint64_t a14, uint64_t a15, PCSharedCount a16)
{
  void *v16;

  PCSharedCount::PCSharedCount((PCSharedCount *)&a9);
  HGObject::operator delete(v16);
  PCSharedCount::PCSharedCount(&a12);
  if (a16.var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)a16.var0 + 24))(a16.var0);
  HGSynchronizer::~HGSynchronizer(&a13);
  _Unwind_Resume(a1);
}

void PVRenderManager::TearDownTextureFactories(PVRenderManager *this)
{
  int v2;
  HGSynchronizable *v3;
  char v4;

  v3 = (HGSynchronizable *)*((_QWORD *)this + 7);
  v4 = 0;
  HGSynchronizable::Lock(v3);
  v2 = *((_DWORD *)this + 24) - 1;
  *((_DWORD *)this + 24) = v2;
  if (!v2)
  {
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
    *((_QWORD *)this + 8) = (char *)this + 72;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11));
    *((_QWORD *)this + 11) = 0;
    PVRenderManager::FreeTexturePools(this);
  }
  HGSynchronizer::~HGSynchronizer(&v3);
}

void sub_1B27A0A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void PVRenderManager::FreeTexturePools(PVRenderManager *this)
{
  HGObject *v2;
  char *v3;
  uint64_t i;
  HGRenderContext *v5;
  uint64_t Renderer;
  HGGPURenderer *v7;
  HGTextureManager *v8;
  PCICCTransferFunctionLUT *MetalContext;
  HGGPUResources *LUTEnd;
  const HGMetalDeviceInfo *v11;
  HGGPUResources *DeviceResources;
  PCSharedCount v13;
  HGObject *v14;
  PCSharedCount v15;

  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v15))
  {
    v13.var0 = v15.var0;
    HGGLContext::Share((uint64_t *)&v13, &v14);
    v2 = v14;
    if (v14)
      v14 = 0;
    PCSharedCount::PCSharedCount(&v13);
  }
  else
  {
    v2 = 0;
  }
  v3 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(HGRenderContext **)(i + 16);
    if (v5)
      (*(void (**)(_QWORD))(*(_QWORD *)v5 + 16))(*(_QWORD *)(i + 16));
    if (HGRenderContext::GetType(v5) == 1)
    {
      Renderer = HGRenderContext::GetRenderer(v5);
      v7 = (HGGPURenderer *)Renderer;
      v8 = *(HGTextureManager **)(Renderer + 1472);
      if (v8)
      {
        HGTextureManager::finishDeleteTextureQueue(*(HGTextureManager **)(Renderer + 1472));
        HGTextureManager::emptyTexturePool(v8);
      }
      MetalContext = (PCICCTransferFunctionLUT *)HGGPURenderer::GetMetalContext(v7);
      if (MetalContext)
      {
        LUTEnd = (HGGPUResources *)PCICCTransferFunctionLUT::getLUTEnd(MetalContext);
        DeviceResources = HGGPUResources::getDeviceResources(LUTEnd, v11);
        if (DeviceResources)
          HGGPUResources::flushFreeObjects(DeviceResources);
      }
    }
    if (v5)
      (*(void (**)(HGRenderContext *))(*(_QWORD *)v5 + 24))(v5);
  }
  if (v2)
    (*(void (**)(HGObject *))(*(_QWORD *)v2 + 24))(v2);
  PCSharedCount::PCSharedCount(&v15);
}

void sub_1B27A0B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::PCSharedCount(&a10);
  PCSharedCount::PCSharedCount(&a12);
  _Unwind_Resume(a1);
}

void PVRenderManager::FlushTextureFactories(PVRenderManager *this)
{
  PVRenderManager *v2;
  CVOpenGLESTextureCacheRef *v3;
  PVRenderManager *v4;
  PVRenderManager *v5;
  BOOL v6;
  uint64_t v7;
  HGSynchronizable *v8;
  char v9;

  v8 = (HGSynchronizable *)*((_QWORD *)this + 7);
  v9 = 0;
  HGSynchronizable::Lock(v8);
  v2 = (PVRenderManager *)*((_QWORD *)this + 8);
  if (v2 != (PVRenderManager *)((char *)this + 72))
  {
    do
    {
      v3 = (CVOpenGLESTextureCacheRef *)*((_QWORD *)v2 + 5);
      if (v3)
      {
        (*((void (**)(_QWORD))*v3 + 2))(*((_QWORD *)v2 + 5));
        CVOpenGLESTextureCacheFlush(v3[3], 0);
        (*((void (**)(CVOpenGLESTextureCacheRef *))*v3 + 3))(v3);
      }
      v4 = (PVRenderManager *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(PVRenderManager **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (PVRenderManager *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (PVRenderManager *)((char *)this + 72));
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
    CVOpenGLESTextureCacheFlush(*(CVOpenGLESTextureCacheRef *)(v7 + 24), 0);
  HGSynchronizer::~HGSynchronizer(&v8);
}

void sub_1B27A0CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void PVRenderManager::ForceFlushRendererResources(PVRenderManager *this)
{
  char *v1;
  uint64_t i;
  HGRenderContext *v3;
  OZChannelBase *Renderer;
  const PCString *v5;

  v1 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v1; i = *(_QWORD *)(i + 8))
  {
    v3 = *(HGRenderContext **)(i + 16);
    if (v3)
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*(_QWORD *)(i + 16));
    this = (PVRenderManager *)HGRenderContext::GetType(v3);
    if ((_DWORD)this == 1)
    {
      Renderer = (OZChannelBase *)HGRenderContext::GetRenderer(v3);
      this = (PVRenderManager *)OZChannelBase::setRangeName(Renderer, v5);
    }
    if (v3)
      this = (PVRenderManager *)(*(uint64_t (**)(HGRenderContext *))(*(_QWORD *)v3 + 24))(v3);
  }
  HGGPUResources::forceResetAllCVTextureCaches((HGGPUResources *)this);
}

void sub_1B27A0D68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void PVRenderManager::SetCVTextureCacheMaximumTextureAge(PVRenderManager *this, float a2)
{
  HGGPUResources *MainDevice;
  const HGMetalDeviceInfo *v4;
  std::mutex *DeviceResources;

  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice((HGMetalDeviceInfo *)this);
  if (MainDevice)
  {
    DeviceResources = (std::mutex *)HGGPUResources::getDeviceResources(MainDevice, v4);
    HGGPUResources::setCVTextureCacheMaximumTextureAge((uint64_t)DeviceResources, a2);
    HGGPUResources::forceResetCVTextureCache(DeviceResources);
  }
}

float PVRenderManager::GetCVTextureCacheMaximumTextureAge(PVRenderManager *this)
{
  HGGPUResources *MainDevice;
  const HGMetalDeviceInfo *v2;

  MainDevice = (HGGPUResources *)HGMetalDeviceInfo::getMainDevice((HGMetalDeviceInfo *)this);
  if (MainDevice)
    return *((float *)HGGPUResources::getDeviceResources(MainDevice, v2) + 34);
  else
    return 1.0;
}

uint64_t PVRenderManager::GetRenderQueue@<X0>(PVRenderManager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  *a2 = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t PVRenderManager::GetRootContext@<X0>(PVRenderManager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  *a2 = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void std::__list_imp<HGRef<HGRenderContext>>::clear(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t *)v2[1];
      std::__list_imp<HGRef<HGRenderContext>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<HGRef<HGRenderContext>>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  uint64_t v3;

  v3 = __p[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  operator delete(__p);
}

uint64_t std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

char *std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__init_with_size[abi:ne180100]<std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B27A10A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<PVMtlTexturePoolAllocationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E64D62C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PVMtlTexturePoolAllocationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E64D62C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PVMtlTexturePoolAllocationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PVMtlTexturePoolAllocationPolicy::~PVMtlTexturePoolAllocationPolicy(PVMtlTexturePoolAllocationPolicy *this)
{
  JUMPOUT(0x1B5E29170);
}

__n128 PVMtlTexturePoolAllocationPolicy::pad@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  int64x2_t v4;
  int8x16_t v5;

  v2 = *(_OWORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 16);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5 = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)a1, (uint64x2_t)vdupq_n_s64(0x10uLL)), (int8x16_t)vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)a1, v4), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFC0)), vdupq_n_s64(0x40uLL)), *(int8x16_t *)a1);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v2;
  *(int8x16_t *)a2 = v5;
  return result;
}

uint64_t *std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1B27A1378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A19D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B27A1CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B27A1DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A1E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B27A1F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27A2048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27A20B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A2410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _QWORD *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap((_QWORD **)va);
  if (*v15)
    (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v16 - 96));
  _Unwind_Resume(a1);
}

void sub_1B27A2664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A28F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27A2A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27A3E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27A3F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A3F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A3FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A4070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A40FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A4188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27A41FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

double PVGetMemUsageStats@<D0>(uint64_t a1@<X8>)
{
  host_t v2;
  vm_size_t v3;
  uint64_t v4;
  vm_size_t v5;
  uint64_t v6;
  vm_size_t v7;
  vm_size_t v8;
  vm_size_t v9;
  vm_size_t v10;
  double result;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  __int128 v14;
  integer_t host_info_out[15];
  vm_size_t v16;
  mach_msg_type_number_t host_info_outCnt;

  v2 = MEMORY[0x1B5E29B24]();
  host_info_outCnt = 15;
  v16 = 0;
  host_page_size(v2, &v16);
  if (host_statistics(v2, 2, host_info_out, &host_info_outCnt))
    NSLog(CFSTR("Failed to fetch vm statistics"));
  v3 = v16;
  v4 = host_info_out[0];
  v5 = v16 * host_info_out[1];
  v6 = host_info_out[3];
  v7 = v16 * host_info_out[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = v3 * v6;
  v9 = v3 * v4;
  v10 = v7 + v5 + v8;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v9 + v10;
  task_info_outCnt = 40;
  if (!task_info(*MEMORY[0x1E0C83DA0], 0x12u, &task_info_out, &task_info_outCnt))
  {
    result = *(double *)&v14;
    *(_OWORD *)a1 = v14;
  }
  return result;
}

id PVGetMemUsageString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v1 = a1;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  PVGetMemUsageStats((uint64_t)&v14);
  v2 = &stru_1E65EDDA0;
  if (v1)
    v2 = v1;
  v3 = v2;
  -[__CFString stringByAppendingFormat:](v3, "stringByAppendingFormat:", CFSTR(" Memory Usage:"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("\n\tTask Resident Memory:     %lu"), *((_QWORD *)&v14 + 1) >> 20);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "stringByAppendingFormat:", CFSTR("\n\tTask Virtual Memory:      %lu"), (unint64_t)v14 >> 20);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "stringByAppendingFormat:", CFSTR("\n\tSystem Active Memory:     %lu"), (unint64_t)v15 >> 20);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "stringByAppendingFormat:", CFSTR("\n\tSystem InActive Memory:   %lu"), *((_QWORD *)&v15 + 1) >> 20);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "stringByAppendingFormat:", CFSTR("\n\tSystem Wired Memory:      %lu"), (unint64_t)v16 >> 20);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("\n\tSystem Total Used Memory: %lu"), *((_QWORD *)&v16 + 1) >> 20);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "stringByAppendingFormat:", CFSTR("\n\tSystem Free Memory:       %lu"), (unint64_t)v17 >> 20);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "stringByAppendingFormat:", CFSTR("\n\tSystem Total Memory:      %lu"), *((_QWORD *)&v17 + 1) >> 20);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1B27A4520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A4618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27A4CA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  HGObject::operator delete(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  v6 = *(_QWORD *)(v4 - 96);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(v4 - 88);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  _Unwind_Resume(a1);
}

id NSStringFromSIMDFloat3x3(uint64_t a1, simd_float3x3 a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;

  v3 = pv_buffer_size_for_string_representation(a2, a1);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  string_representation = pv_get_string_representation(a2, v4, v3, a1);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDDouble3x3(__int128 *a1, uint64_t a2, double a3, double a4, __n128 a5)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  unsigned int string_representation;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v7 = a1[3];
  v21 = a1[2];
  v22 = v7;
  v8 = a1[5];
  v23 = a1[4];
  v24 = v8;
  v9 = a1[1];
  v19 = *a1;
  v20 = v9;
  v10 = pv_buffer_size_for_string_representation(&v19, a2, *(double *)&v19, *(double *)&v9, a5);
  v11 = malloc_type_calloc(v10, 1uLL, 0x100004077774924uLL);
  v12 = a1[3];
  v21 = a1[2];
  v22 = v12;
  v13 = a1[5];
  v23 = a1[4];
  v24 = v13;
  v14 = a1[1];
  v19 = *a1;
  v20 = v14;
  string_representation = pv_get_string_representation(&v19, (uint64_t)v11, v10, a2, *(double *)&v19, *(double *)&v14, v15);
  v17 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v10
    || (v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v11, string_representation, 4, 1)) == 0)
  {
    free(v11);
  }
  return v17;
}

id NSStringFromSIMDFloat4x4(uint64_t a1, simd_float4x4 a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;

  v3 = pv_buffer_size_for_string_representation(a2, a1);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  string_representation = pv_get_string_representation(a2, v4, v3, a1);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDDouble4x4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int string_representation;
  void *v15;
  int64x2_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = *(_OWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 64);
  v22 = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v23 = *(_OWORD *)(a1 + 96);
  v24 = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v17 = *(int64x2_t *)a1;
  v18 = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v19 = *(_OWORD *)(a1 + 32);
  v20 = v7;
  v8 = pv_buffer_size_for_string_representation(&v17, a2);
  v9 = malloc_type_calloc(v8, 1uLL, 0x100004077774924uLL);
  v10 = *(_OWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 64);
  v22 = v10;
  v11 = *(_OWORD *)(a1 + 112);
  v23 = *(_OWORD *)(a1 + 96);
  v24 = v11;
  v12 = *(_OWORD *)(a1 + 16);
  v17 = *(int64x2_t *)a1;
  v18 = v12;
  v13 = *(_OWORD *)(a1 + 48);
  v19 = *(_OWORD *)(a1 + 32);
  v20 = v13;
  string_representation = pv_get_string_representation(&v17, (uint64_t)v9, v8, a2);
  v15 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v8
    || (v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v9, string_representation, 4, 1)) == 0)
  {
    free(v9);
  }
  return v15;
}

id NSStringFromSIMDQuatF(unsigned int a1, simd_quatf a2)
{
  int v3;
  char *v4;
  simd_quatf v5;
  unsigned int string_representation;
  void *v7;

  v3 = pv_buffer_size_for_string_representation(a2, a1);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v5 = a2;
  string_representation = pv_get_string_representation(v5, v4, v3, a1);
  v7 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v7;
}

id NSStringFromSIMDQuatD(__int128 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int string_representation;
  void *v7;
  __int128 v9;
  __int128 v10;
  simd_quatd v11;
  simd_quatd v12;

  *(_OWORD *)&v11.vector.f64[2] = a1[1];
  v9 = *a1;
  *(_OWORD *)v11.vector.f64 = v9;
  v10 = *(_OWORD *)&v11.vector.f64[2];
  v4 = pv_buffer_size_for_string_representation(v11, &v9, a2);
  v5 = (char *)malloc_type_calloc(v4, 1uLL, 0x100004077774924uLL);
  *(_OWORD *)&v12.vector.f64[2] = a1[1];
  v9 = *a1;
  *(_OWORD *)v12.vector.f64 = v9;
  v10 = *(_OWORD *)&v12.vector.f64[2];
  string_representation = pv_get_string_representation(v12, (char *)&v9, v5, v4, a2);
  v7 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v4
    || (v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v5, string_representation, 4, 1)) == 0)
  {
    free(v5);
  }
  return v7;
}

id NSStringFromSIMDFloat2(uint64_t a1, __n128 a2)
{
  unint64_t v3;
  int v4;
  char *v5;
  __n128 v6;
  unsigned int string_representation;
  void *v8;

  v3 = a2.n128_u64[0];
  v4 = pv_buffer_size_for_string_representation(a1, a2);
  v5 = (char *)malloc_type_calloc(v4, 1uLL, 0x100004077774924uLL);
  v6.n128_u64[0] = v3;
  string_representation = pv_get_string_representation(v5, v4, a1, v6);
  v8 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v4
    || (v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v5, string_representation, 4, 1)) == 0)
  {
    free(v5);
  }
  return v8;
}

id NSStringFromSIMDFloat3(uint64_t a1, __n128 a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;

  v3 = pv_buffer_size_for_string_representation(a1, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  string_representation = pv_get_string_representation(v4, v3, a1, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDFloat4(uint64_t a1, __n128 a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;

  v3 = pv_buffer_size_for_string_representation(a1, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  string_representation = pv_get_string_representation(v4, v3, a1, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDFloat8(__int128 *a1, uint64_t a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10[2];
  __int128 v11[2];

  v8 = a1[1];
  v11[0] = *a1;
  v9 = v11[0];
  v11[1] = v8;
  v3 = pv_buffer_size_for_string_representation(v11, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v10[0] = v9;
  v10[1] = v8;
  string_representation = pv_get_string_representation(v10, v4, v3, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDFloat16(__int128 *a1, uint64_t a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12[4];
  __int128 v13[2];
  __int128 v14;
  __int128 v15;

  v10 = a1[1];
  v11 = *a1;
  v8 = a1[3];
  v14 = a1[2];
  v9 = v14;
  v15 = v8;
  v13[0] = v11;
  v13[1] = v10;
  v3 = pv_buffer_size_for_string_representation(v13, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v12[2] = v9;
  v12[3] = v8;
  v12[0] = v11;
  v12[1] = v10;
  string_representation = pv_get_string_representation(v12, v4, v3, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDDouble2(uint64_t a1, __n128 a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;

  v3 = pv_buffer_size_for_string_representation(a1, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  string_representation = pv_get_string_representation(v4, v3, a1, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDDouble3(int8x16_t *a1, uint64_t a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10[2];
  int8x16_t v11[2];

  v8 = a1[1];
  v11[0] = *a1;
  v9 = v11[0];
  v11[1] = v8;
  v3 = pv_buffer_size_for_string_representation(v11, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v10[0] = v9;
  v10[1] = v8;
  string_representation = pv_get_string_representation(v10, v4, v3, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDDouble4(__int128 *a1, uint64_t a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10[2];
  __int128 v11[2];

  v8 = a1[1];
  v11[0] = *a1;
  v9 = v11[0];
  v11[1] = v8;
  v3 = pv_buffer_size_for_string_representation(v11, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v10[0] = v9;
  v10[1] = v8;
  string_representation = pv_get_string_representation(v10, v4, v3, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

id NSStringFromSIMDDouble8(__int128 *a1, uint64_t a2)
{
  int v3;
  char *v4;
  unsigned int string_representation;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12[4];
  __int128 v13[2];
  __int128 v14;
  __int128 v15;

  v10 = a1[1];
  v11 = *a1;
  v8 = a1[3];
  v14 = a1[2];
  v9 = v14;
  v15 = v8;
  v13[0] = v11;
  v13[1] = v10;
  v3 = pv_buffer_size_for_string_representation(v13, a2);
  v4 = (char *)malloc_type_calloc(v3, 1uLL, 0x100004077774924uLL);
  v12[2] = v9;
  v12[3] = v8;
  v12[0] = v11;
  v12[1] = v10;
  string_representation = pv_get_string_representation(v12, v4, v3, a2);
  v6 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v3
    || (v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, string_representation, 4, 1)) == 0)
  {
    free(v4);
  }
  return v6;
}

void sub_1B27A5CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  void *v11;
  uint64_t v12;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v12, 0x10E1C409BAC03F7);

  _Unwind_Resume(a1);
}

void sub_1B27A5E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B27A5F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A6038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A60E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A61A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A625C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A631C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A63C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A64A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A6590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A6670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A6780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A6B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__52(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1B27A6D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A6E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__57(uint64_t a1)
{

}

void sub_1B27A6FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A70D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A7230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A7488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A751C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A759C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A76FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A7A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A7CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27A7F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A7F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27A7FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A80E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27A83A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A87D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A8F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A9250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A92F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A937C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A9408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A9494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A96D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B27A97EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27A9950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27A9A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B27A9C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B27A9D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27A9E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AA430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  HFDenseCRFInterface::~HFDenseCRFInterface((HFDenseCRFInterface *)&a23);
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 24))(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 24))(a25);
  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 24))(a26);
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 24))(a27);

  _Unwind_Resume(a1);
}

uint64_t pv_buffer_size_for_string_representation(float a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(float a1, char *a2, size_t a3, uint64_t a4)
{
  float v4;
  const char *v5;

  if (a1 > -0.00001 && a1 < 0.00001 || (v4 = fabsf(a1), v5 = "%.*e", v4 <= 1000000.0) && v4 >= 0.00001)
    v5 = "%.*f";
  return snprintf(a2, a3, v5, a4, a1);
}

uint64_t pv_buffer_size_for_string_representation(double a1, uint64_t a2)
{
  return pv_get_string_representation(a1, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(double a1, char *a2, size_t a3, uint64_t a4)
{
  double v4;
  const char *v5;

  if (a1 > -0.0000001 && a1 < 0.0000001 || (v4 = fabs(a1), v5 = "%.*e", v4 <= 999999.0) && v4 >= 0.00001)
    v5 = "%.*f";
  return snprintf(a2, a3, v5, a4, *(_QWORD *)&a1);
}

uint64_t pv_buffer_size_for_string_representation(uint64_t a1, __n128 a2)
{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

{
  return pv_get_string_representation(0, 0, a1, a2) + 1;
}

uint64_t pv_get_string_representation(char *a1, size_t a2, uint64_t a3, __n128 a4)
{
  size_t v5;
  int string_representation;
  int v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;
  float v21;

  v5 = a2;
  if (!a1)
    a2 = 0;
  string_representation = pv_get_string_representation(a4.n128_f32[0], a1, a2, a3);
  v8 = string_representation;
  v9 = v5 - string_representation;
  v10 = string_representation;
  if (a1)
    v11 = &a1[string_representation];
  else
    v11 = 0;
  if (a1)
    v12 = v9;
  else
    v12 = 0;
  v13 = snprintf(v11, v12, ", ", *(_OWORD *)&a4);
  v14 = v10 + v13;
  v15 = v5 - v14;
  v16 = &a1[v14];
  if (a1)
    v17 = v16;
  else
    v17 = 0;
  if (a1)
    v18 = v15;
  else
    v18 = 0;
  return pv_get_string_representation(v21, v17, v18, a3) + v13 + v8;
}

{
  size_t v5;
  int string_representation;
  int v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;

  v5 = a2;
  if (!a1)
    a2 = 0;
  string_representation = pv_get_string_representation(a4.n128_f64[0], a1, a2, a3);
  v8 = string_representation;
  v9 = v5 - string_representation;
  v10 = string_representation;
  if (a1)
    v11 = &a1[string_representation];
  else
    v11 = 0;
  if (a1)
    v12 = v9;
  else
    v12 = 0;
  v13 = snprintf(v11, v12, ", ", a4.n128_u64[0]);
  v14 = v10 + v13;
  v15 = v5 - v14;
  v16 = &a1[v14];
  if (a1)
    v17 = v16;
  else
    v17 = 0;
  if (a1)
    v18 = v15;
  else
    v18 = 0;
  return pv_get_string_representation(a4.n128_f64[1], v17, v18, a3) + v13 + v8;
}

{
  size_t v5;
  int string_representation;
  uint64_t v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  char *v12;
  size_t v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  __n128 v19;
  __n128 v20;

  v5 = a2;
  if (!a1)
    a2 = 0;
  v19 = a4;
  string_representation = pv_get_string_representation(a4.n128_f32[0], a1, a2, a3);
  LODWORD(v8) = string_representation;
  v9 = 0;
  for (i = 1; i != 3; ++i)
  {
    v11 = v9 + string_representation;
    if (a1)
      v12 = &a1[v11];
    else
      v12 = 0;
    if (a1)
      v13 = v5 - v11;
    else
      v13 = 0;
    v14 = snprintf(v12, v13, ", ", *(_OWORD *)&v19, *(_OWORD *)&v20);
    v9 = v11 + v14;
    v15 = v14 + v8;
    v20 = v19;
    if (a1)
      v16 = &a1[v9];
    else
      v16 = 0;
    if (a1)
      v17 = v5 - v9;
    else
      v17 = 0;
    string_representation = pv_get_string_representation(*(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))), v16, v17, a3);
    v8 = (string_representation + v15);
  }
  return v8;
}

{
  size_t v5;
  int string_representation;
  uint64_t v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  char *v12;
  size_t v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  __n128 v19;
  __n128 v20;

  v5 = a2;
  if (!a1)
    a2 = 0;
  v19 = a4;
  string_representation = pv_get_string_representation(a4.n128_f32[0], a1, a2, a3);
  LODWORD(v8) = string_representation;
  v9 = 0;
  for (i = 1; i != 4; ++i)
  {
    v11 = v9 + string_representation;
    if (a1)
      v12 = &a1[v11];
    else
      v12 = 0;
    if (a1)
      v13 = v5 - v11;
    else
      v13 = 0;
    v14 = snprintf(v12, v13, ", ", *(_OWORD *)&v19, *(_OWORD *)&v20);
    v9 = v11 + v14;
    v15 = v14 + v8;
    v20 = v19;
    if (a1)
      v16 = &a1[v9];
    else
      v16 = 0;
    if (a1)
      v17 = v5 - v9;
    else
      v17 = 0;
    string_representation = pv_get_string_representation(*(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))), v16, v17, a3);
    v8 = (string_representation + v15);
  }
  return v8;
}

uint64_t pv_buffer_size_for_string_representation(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v2;
  int8x16_t v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return pv_get_string_representation(v4, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(int8x16_t *a1, char *a2, size_t a3, uint64_t a4)
{
  int8x16_t v7;
  size_t v8;
  int string_representation;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  int v17;
  int v18;
  char *v19;
  size_t v20;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];

  v7 = *a1;
  v23 = a1[1];
  v24 = a1->i64[0];
  v22 = vextq_s8(v7, v7, 8uLL);
  if (a2)
    v8 = a3;
  else
    v8 = 0;
  string_representation = pv_get_string_representation(*(double *)v7.i64, a2, v8, a4);
  LODWORD(v10) = string_representation;
  v11 = 0;
  v12 = 1;
  *(_QWORD *)&v13 = v24;
  *((_QWORD *)&v13 + 1) = v22.i64[0];
  v25 = v13;
  do
  {
    v14 = v11 + string_representation;
    if (a2)
      v15 = &a2[v14];
    else
      v15 = 0;
    if (a2)
      v16 = a3 - v14;
    else
      v16 = 0;
    v17 = snprintf(v15, v16, ", ", *(_OWORD *)&v22);
    v11 = v14 + v17;
    v18 = v17 + v10;
    v26[0] = v25;
    v26[1] = v23;
    if (a2)
      v19 = &a2[v11];
    else
      v19 = 0;
    if (a2)
      v20 = a3 - v11;
    else
      v20 = 0;
    string_representation = pv_get_string_representation(*((double *)v26 + (v12 & 3)), v19, v20, a4);
    v10 = (string_representation + v18);
    ++v12;
  }
  while (v12 != 3);
  return v10;
}

uint64_t pv_buffer_size_for_string_representation(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return pv_get_string_representation(v4, 0, 0, a2) + 1;
}

{
  __int128 v2;
  __int128 v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return pv_get_string_representation(v4, 0, 0, a2) + 1;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v6[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  v6[0] = v2;
  v6[1] = v3;
  return pv_get_string_representation(v6, 0, 0, a2) + 1;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v6[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  v6[0] = v2;
  v6[1] = v3;
  return pv_get_string_representation(v6, 0, 0, a2) + 1;
}

uint64_t pv_get_string_representation(__int128 *a1, char *a2, size_t a3, uint64_t a4)
{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a2)
    v7 = a3;
  else
    v7 = 0;
  v20 = *a1;
  v21 = a1[1];
  string_representation = pv_get_string_representation(*(double *)a1, a2, v7, a4);
  LODWORD(v9) = string_representation;
  v10 = 0;
  for (i = 1; i != 4; ++i)
  {
    v12 = v10 + string_representation;
    if (a2)
      v13 = &a2[v12];
    else
      v13 = 0;
    if (a2)
      v14 = a3 - v12;
    else
      v14 = 0;
    v15 = snprintf(v13, v14, ", ", v20, v21, v22, v23);
    v10 = v12 + v15;
    v16 = v15 + v9;
    v22 = v20;
    v23 = v21;
    if (a2)
      v17 = &a2[v10];
    else
      v17 = 0;
    if (a2)
      v18 = a3 - v10;
    else
      v18 = 0;
    string_representation = pv_get_string_representation(*((double *)&v22 + (i & 3)), v17, v18, a4);
    v9 = (string_representation + v16);
  }
  return v9;
}

{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a2)
    v7 = a3;
  else
    v7 = 0;
  v20 = *a1;
  v21 = a1[1];
  string_representation = pv_get_string_representation(COERCE_FLOAT(*a1), a2, v7, a4);
  LODWORD(v9) = string_representation;
  v10 = 0;
  for (i = 1; i != 8; ++i)
  {
    v12 = v10 + string_representation;
    if (a2)
      v13 = &a2[v12];
    else
      v13 = 0;
    if (a2)
      v14 = a3 - v12;
    else
      v14 = 0;
    v15 = snprintf(v13, v14, ", ", v20, v21, v22, v23);
    v10 = v12 + v15;
    v16 = v15 + v9;
    v22 = v20;
    v23 = v21;
    if (a2)
      v17 = &a2[v10];
    else
      v17 = 0;
    if (a2)
      v18 = a3 - v10;
    else
      v18 = 0;
    string_representation = pv_get_string_representation(*((float *)&v22 + (i & 7)), v17, v18, a4);
    v9 = (string_representation + v16);
  }
  return v9;
}

{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];

  v22 = a1[2];
  v23 = a1[3];
  if (a2)
    v7 = a3;
  else
    v7 = 0;
  v20 = *a1;
  v21 = a1[1];
  string_representation = pv_get_string_representation(*(double *)a1, a2, v7, a4);
  LODWORD(v9) = string_representation;
  v10 = 0;
  for (i = 1; i != 8; ++i)
  {
    v12 = v10 + string_representation;
    if (a2)
      v13 = &a2[v12];
    else
      v13 = 0;
    if (a2)
      v14 = a3 - v12;
    else
      v14 = 0;
    v15 = snprintf(v13, v14, ", ", v20, v21);
    v10 = v12 + v15;
    v16 = v15 + v9;
    v24[0] = v20;
    v24[1] = v21;
    v24[2] = v22;
    v24[3] = v23;
    if (a2)
      v17 = &a2[v10];
    else
      v17 = 0;
    if (a2)
      v18 = a3 - v10;
    else
      v18 = 0;
    string_representation = pv_get_string_representation(*((double *)v24 + (i & 7)), v17, v18, a4);
    v9 = (string_representation + v16);
  }
  return v9;
}

{
  size_t v7;
  int string_representation;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  size_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];

  v22 = a1[2];
  v23 = a1[3];
  if (a2)
    v7 = a3;
  else
    v7 = 0;
  v20 = *a1;
  v21 = a1[1];
  string_representation = pv_get_string_representation(COERCE_FLOAT(*a1), a2, v7, a4);
  LODWORD(v9) = string_representation;
  v10 = 0;
  for (i = 1; i != 16; ++i)
  {
    v12 = v10 + string_representation;
    if (a2)
      v13 = &a2[v12];
    else
      v13 = 0;
    if (a2)
      v14 = a3 - v12;
    else
      v14 = 0;
    v15 = snprintf(v13, v14, ", ", v20, v21);
    v10 = v12 + v15;
    v16 = v15 + v9;
    v24[0] = v20;
    v24[1] = v21;
    v24[2] = v22;
    v24[3] = v23;
    if (a2)
      v17 = &a2[v10];
    else
      v17 = 0;
    if (a2)
      v18 = a3 - v10;
    else
      v18 = 0;
    string_representation = pv_get_string_representation(*((float *)v24 + (i & 0xF)), v17, v18, a4);
    v9 = (string_representation + v16);
  }
  return v9;
}

void sub_1B27AB188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AB4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);

  _Unwind_Resume(a1);
}

void sub_1B27AB688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVRenderer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27AB810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AB97C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

  _Unwind_Resume(a1);
}

void sub_1B27ABAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27ABD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (*v10)
    (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
  _Unwind_Resume(exception_object);
}

void sub_1B27AC008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27AC1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27AC300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B27AC3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AC5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void **std::vector<HGRef<PVCVPixelBufferPool>>::push_back[abi:ne180100](uint64_t *a1, void ***a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void ***v7;
  void **result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void ***v15;
  void **v16;
  void *v17[2];
  void ***v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(void ****)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = (void ***)&v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v18 = v15;
    v19 = &v14[8 * v13];
    v16 = *a2;
    *v15 = *a2;
    if (v16)
    {
      (*((void (**)(void **))*v16 + 2))(v16);
      v15 = v18;
    }
    v18 = v15 + 1;
    std::vector<HGRef<PVCVPixelBufferPool>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<HGRef<PVCVPixelBufferPool>>::~__split_buffer(v17);
  }
  else
  {
    result = *a2;
    *v7 = *a2;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B27AC760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<HGRef<PVCVPixelBufferPool>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 8)
  {
    v5 = *(_QWORD **)(i - 8);
    result = v5;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  v3[1] = a2;
  return result;
}

void PVCVPixelBufferPool::PVCVPixelBufferPool(PVCVPixelBufferPool *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFDictionary *v14;
  _QWORD v15[4];
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  HGObject::HGObject(this);
  *(_QWORD *)v8 = off_1E64D6488;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v9 = (_QWORD *)MEMORY[0x1E0CA8FF0];
  *(_DWORD *)(v8 + 32) = a4;
  v16[0] = MEMORY[0x1E0C9AA70];
  v10 = *MEMORY[0x1E0CA9040];
  v15[0] = *v9;
  v15[1] = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16[1] = v11;
  v15[2] = *MEMORY[0x1E0CA90E0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v16[2] = v12;
  v15[3] = *MEMORY[0x1E0CA8FD8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16[3] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 4);
  v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  if (CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v14, (CVPixelBufferPoolRef *)this + 5))
  {
    NSLog(CFSTR("Unable to create pool"));
    *((_QWORD *)this + 5) = 0;
  }

}

void sub_1B27ACA60(_Unwind_Exception *a1)
{
  HGObject *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void PVCVPixelBufferPool::~PVCVPixelBufferPool(PVCVPixelBufferPool *this)
{
  void *v1;

  PVCVPixelBufferPool::~PVCVPixelBufferPool(this);
  HGObject::operator delete(v1);
}

{
  __CVPixelBufferPool *v2;

  *(_QWORD *)this = off_1E64D6488;
  v2 = (__CVPixelBufferPool *)*((_QWORD *)this + 5);
  if (v2)
    CVPixelBufferPoolRelease(v2);
  HGObject::~HGObject(this);
}

uint64_t std::vector<HGRef<PVCVPixelBufferPool>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v10 = v11;
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v7 = *((_QWORD *)&v17 + 1);
      }
      v7 -= 8;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B27ACC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<PVCVPixelBufferPool>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<PVCVPixelBufferPool>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a2 + 32); i != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*i)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      i = *(_QWORD **)(a2 + 32);
    }
    ++i;
  }
}

void **std::__split_buffer<HGRef<PVCVPixelBufferPool>>::~__split_buffer(void **a1)
{
  std::__split_buffer<HGRef<PVCVPixelBufferPool>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<HGRef<PVCVPixelBufferPool>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD **)(v2 - 8);
      v2 -= 8;
      result = v5;
      v4[2] = v2;
      if (v5)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        v2 = v4[2];
      }
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<HGRef<PVCVPixelBufferPool>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HGRef<PVCVPixelBufferPool>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1B27ACE70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27ACF28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27ACFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AD03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27AD3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;

  v38 = *(_QWORD *)(v36 - 144);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (*v35)
    (*(void (**)(_QWORD))(*(_QWORD *)*v35 + 24))(*v35);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a35);
  _Unwind_Resume(a1);
}

void sub_1B27AD55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AD5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AD70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27AD8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27AE2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  if (STACK[0x258])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x258] + 24))(STACK[0x258]);

  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)(v17 - 128));
  _Unwind_Resume(a1);
}

void sub_1B27AE844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27AEAD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27AECAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27AED24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVEffect;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27AEE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27AF210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AF294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27AF2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AF358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27AF3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27AF420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AF570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B27AF5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27AF64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AF708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AF77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27AF7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AF84C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27AF8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27AF960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27AFA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1B27AFB6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27AFC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27AFD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27AFF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B27AFFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27B0034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PVLogError(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (a3)
  {
    v8 = *MEMORY[0x1E0CB2D50];
    v9[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v6, -1, v7);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
}

void sub_1B27B021C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27B0460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B27B0BDC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B27B0EEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **std::vector<HGRef<HGBitmap>>::push_back[abi:ne180100](uint64_t *a1, void ***a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void ***v7;
  void **result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void ***v15;
  void **v16;
  void *v17[2];
  void ***v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(void ****)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = (void ***)&v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v18 = v15;
    v19 = &v14[8 * v13];
    v16 = *a2;
    *v15 = *a2;
    if (v16)
    {
      (*((void (**)(void **))*v16 + 2))(v16);
      v15 = v18;
    }
    v18 = v15 + 1;
    std::vector<HGRef<HGBitmap>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<HGRef<HGBitmap>>::~__split_buffer(v17);
  }
  else
  {
    result = *a2;
    *v7 = *a2;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B27B102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_1B27B1170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B1254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B27B17C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  PCString::~PCString(&a11);

  _Unwind_Resume(a1);
}

void sub_1B27B1B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B1CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B1DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B1E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27B1EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27B1F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27B204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B27B2194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B27B22B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B2364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B2480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B27B2584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B2694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B27B2874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B27B298C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B27B2A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B2B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B2C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27B2DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B27B2DFC()
{
  JUMPOUT(0x1B27B2DF0);
}

id CreatePVLPThrottlingControlParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  +[PVLivePlayerThrottlingControlParameters CreateControllerParameters:::](PVLivePlayerThrottlingControlParameters, "CreateControllerParameters:::", a1, a2, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1B27B30AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (v19)
  {

  }
  if (v17)
  {

  }
  if (v14)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1B27B31FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27B32A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B3398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27B3458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27B3574(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x10A1C40BBCAB520);

  _Unwind_Resume(a1);
}

void sub_1B27B36B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);

  _Unwind_Resume(a1);
}

void sub_1B27B3748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27B38BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);
  _Unwind_Resume(a1);
}

void sub_1B27B3950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B3BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<PVSPI_OSThermalPressureLevel,PVLivePlayerThrottlingControlParameters * {__strong}>,std::__map_value_compare<PVSPI_OSThermalPressureLevel,std::__value_type<PVSPI_OSThermalPressureLevel,PVLivePlayerThrottlingControlParameters * {__strong}>,std::less<PVSPI_OSThermalPressureLevel>,true>,std::allocator<std::__value_type<PVSPI_OSThermalPressureLevel,PVLivePlayerThrottlingControlParameters * {__strong}>>>::__erase_unique<PVSPI_OSThermalPressureLevel>(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;
  int v21;
  int *v22;
  BOOL v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,PVSPI_OSThermalPressureLevel *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(v9, a2);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(int *)((char *)v9 + v29 + 4) = v28;
                  if (!v29)
                    break;
                  v28 = *(int *)((char *)v9 + v29 - 4);
                  v29 -= 4;
                  if (v27 >= v28)
                  {
                    v30 = (int *)((char *)v9 + v29 + 4);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 4;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PVSPI_OSThermalPressureLevel *,std::__less<void,void> &>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *,PVSPI_OSThermalPressureLevel *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PVSPI_OSThermalPressureLevel *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

void sub_1B27B4A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B27B4C7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27B4D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B52A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B27B53E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40BBCAB520);
  _Unwind_Resume(a1);
}

void sub_1B27B5648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;

  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)(v9 - 48));
  a9.super_class = (Class)PVVideoCompositing;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27B580C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

  _Unwind_Resume(a1);
}

void sub_1B27B5A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B5BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27B5DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B63B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *(_QWORD *)(v5 - 128);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);

  _Unwind_Resume(a1);
}

void sub_1B27B6520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27B66EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1B5E29E00](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_1B27B6BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  HGSynchronizer::~HGSynchronizer((HGSynchronizable **)va);

  _Unwind_Resume(a1);
}

void sub_1B27B6C84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27B6DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27B6E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27B7118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27B71D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27B73A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void sub_1B27B7560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PVCameraPreviewRequest;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27B7728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

HGRenderNode *PVCameraPreviewRenderNode::PVCameraPreviewRenderNode(HGRenderNode *a1, void *a2)
{
  id v3;

  v3 = a2;
  HGRenderNode::HGRenderNode(a1);
  *(_QWORD *)a1 = off_1E64D6A48;
  *((_QWORD *)a1 + 26) = MEMORY[0x1B5E29E00](v3);

  return a1;
}

void sub_1B27B78C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PVCameraPreviewRenderNode::Notify(PVCameraPreviewRenderNode *this, HGRenderNode *a2)
{
  PVCameraPreviewRenderNode *v2;
  void *v3;
  const void *Renderer;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  PVRenderedTexture *v8;
  PVRenderedTexture *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v2 = this;
  v3 = (void *)MEMORY[0x1B5E29C50](this, a2);
  if (HGRenderNode::GetState(v2) == 9)
  {
    Renderer = (const void *)HGRenderNode::GetRenderer(v2);
    if (Renderer)
    else
      v5 = 0;
    v6 = PVInstructionGraphContext::HGNodeCache((PVInstructionGraphContext *)v2);
    v7 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 104))(v5, v6);
    if (v2)
    v8 = [PVRenderedTexture alloc];
    v12 = v7;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v9 = -[PVRenderedTexture initWithHGGLTexture:](v8, "initWithHGGLTexture:", &v12);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    v10 = MEMORY[0x1B5E29E00](*((_QWORD *)v2 + 26));
    v11 = (void *)v10;
    if (v10)
      (*(void (**)(uint64_t, PVRenderedTexture *))(v10 + 16))(v10, v9);

    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  objc_autoreleasePoolPop(v3);
}

void sub_1B27B7A1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t PVCameraPreviewGraphBuildJob::PVCameraPreviewGraphBuildJob(uint64_t a1, uint64_t *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  HGRenderJob::HGRenderJob((HGRenderJob *)a1);
  *(_QWORD *)a1 = off_1E64D6A98;
  v12 = *a2;
  *(_QWORD *)(a1 + 352) = *a2;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  *(_QWORD *)(a1 + 360) = v9;
  *(_QWORD *)(a1 + 368) = MEMORY[0x1B5E29E00](v11);
  *(_QWORD *)(a1 + 376) = v10;

  return a1;
}

void sub_1B27B7B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  HGRenderJob *v3;
  void *v4;

  HGRenderJob::~HGRenderJob(v3);

  _Unwind_Resume(a1);
}

void PVCameraPreviewGraphBuildJob::~PVCameraPreviewGraphBuildJob(id *this)
{
  id v2;

  *this = off_1E64D6A98;

  v2 = this[44];
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 24))(v2);
  HGRenderJob::~HGRenderJob((HGRenderJob *)this);
}

{
  void *v1;

  PVCameraPreviewGraphBuildJob::~PVCameraPreviewGraphBuildJob(this);
  HGObject::operator delete(v1);
}

void PVCameraPreviewGraphBuildJob::NewRenderNode(PVCameraPreviewGraphBuildJob *this@<X0>, HGRect **a2@<X8>)
{
  void *v3;
  opaqueCMSampleBuffer *v4;
  uint64_t v5;
  __CVBuffer *ImageBuffer;
  unsigned int Width;
  unsigned int Height;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *Renderer;
  void *v13;
  void *v14;
  PVInstructionGraphContext *v15;
  double v16;
  double v17;
  HGNode *v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  HGColorClamp *v29;
  float64x2_t v30;
  HGNode *v31;
  void *v32;
  HGRenderNode *v33;
  HGRect *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id obj;
  int64x2_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  void *v46;
  PVInstructionGraphContext *v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  HGNode *v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  HGNode *v63;
  uint64_t *v64;
  _QWORD v65[3];
  _QWORD v66[3];
  _QWORD v67[3];
  _QWORD v68[3];
  _QWORD v69[3];
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  PVInstructionGraphContext *v75;
  __int128 v76;
  uint64_t v77;
  HGNode *v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[128];
  uint64_t v82;
  HGRect v83;

  v82 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v79 = 0uLL;
  v80 = 0;
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    objc_msgSend(v3, "time");
    v3 = (void *)*((_QWORD *)this + 45);
  }
  objc_msgSend(v3, "effects");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (opaqueCMSampleBuffer *)objc_msgSend(*((id *)this + 45), "sampleBuffer");
  v5 = *((_QWORD *)this + 44);
  if (v5)
    (*(void (**)(_QWORD))(*(_QWORD *)v5 + 16))(*((_QWORD *)this + 44));
  ImageBuffer = CMSampleBufferGetImageBuffer(v4);
  Width = CVPixelBufferGetWidth(ImageBuffer);
  Height = CVPixelBufferGetHeight(ImageBuffer);
  v9 = HGRectMake4i(0, 0, Width, Height);
  v39 = v10;
  v11 = v9;
  Renderer = (const void *)HGRenderJob::GetRenderer((HGRenderJob *)this);
  if (Renderer)
  {
    v14 = v13;
    if (v13)
    {
      (*(void (**)(void *))(*(_QWORD *)v13 + 16))(v13);
      v44 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v14 = 0;
  }
  v44 = 1;
LABEL_10:
  v15 = (PVInstructionGraphContext *)HGObject::operator new(0x88uLL);
  PVInstructionGraphContext::PVInstructionGraphContext(v15, *((PVVideoCompositingContext **)this + 47));
  v16 = (double)(v39 - v11);
  v17 = (double)(HIDWORD(v39) - HIDWORD(v11));
  *(_QWORD *)v15 = off_1E64D6AE8;
  *((double *)v15 + 15) = v16;
  *((double *)v15 + 16) = v17;
  v77 = v80;
  v76 = v79;
  v75 = v15;
  (*(void (**)(PVInstructionGraphContext *))(*(_QWORD *)v15 + 16))(v15);
  v46 = v14;
  PVCreateInputGraphForPixelBuffer(ImageBuffer, &v75, &v78);
  v36 = v11;
  v37 = v5;
  if (v75)
    (*(void (**)(PVInstructionGraphContext *))(*(_QWORD *)v75 + 24))(v75);
  v18 = v78;
  if (v78)
    (*(void (**)(HGNode *))(*(_QWORD *)v78 + 16))(v78);
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  obj = v38;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
  if (v19)
  {
    v43 = *(_QWORD *)v72;
    v20 = v16 * 0.5;
    v21 = v17 * 0.5;
    v42 = vdupq_n_s64(0x8000000000000000);
    do
    {
      v22 = 0;
      v45 = v19;
      do
      {
        if (*(_QWORD *)v72 != v43)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * v22);
        if ((objc_msgSend(v23, "supportsExtendedRangeInputs") & 1) == 0
          && +[PVEnvironment PV_CLAMP_XR_INPUTS_TO_FILTERS](PVEnvironment, "PV_CLAMP_XR_INPUTS_TO_FILTERS"))
        {
          PVInstructionGraphContext::WorkingColorSpace(v15);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          +[PVColorSpace extendedSRGBColorSpace](PVColorSpace, "extendedSRGBColorSpace");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v24, "isEqual:", v25))
          {

          }
          else
          {
            PVInstructionGraphContext::WorkingColorSpace(v15);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            +[PVColorSpace extendedLinearSRGBColorSpace](PVColorSpace, "extendedLinearSRGBColorSpace");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v26, "isEqual:", v27);

            if (!v28)
              goto LABEL_29;
          }
          v29 = (HGColorClamp *)HGObject::operator new(0x1C0uLL);
          HGColorClamp::HGColorClamp(v29);
          (*(void (**)(HGColorClamp *, _QWORD, HGNode *))(*(_QWORD *)v29 + 120))(v29, 0, v18);
          if (v18 != (HGNode *)v29)
          {
            if (v18)
              (*(void (**)(HGNode *))(*(_QWORD *)v18 + 24))(v18);
            v18 = (HGNode *)v29;
            (*(void (**)(HGColorClamp *))(*(_QWORD *)v29 + 16))(v29);
          }
          (*(void (**)(HGColorClamp *))(*(_QWORD *)v29 + 24))(v29);
        }
LABEL_29:
        v65[0] = 0;
        v65[1] = 0;
        v66[0] = 0;
        v66[1] = 0;
        v63 = v18;
        v64 = v65;
        v65[2] = v66;
        v67[0] = 0;
        v67[1] = 0;
        v68[0] = 0;
        v68[1] = 0;
        v66[2] = v67;
        v67[2] = v68;
        v69[0] = 0;
        v69[1] = 0;
        v70[0] = 0;
        v70[1] = 0;
        v68[2] = v69;
        v69[2] = v70;
        if (v18)
          (*(void (**)(HGNode *))(*(_QWORD *)v18 + 16))(v18);
        PVInputHGNodeMap<unsigned int>::SetNode(&v64, 0, (uint64_t *)&v63);
        if (v63)
          (*(void (**)(HGNode *))(*(_QWORD *)v63 + 24))(v63);
        v62 = 0x3FF0000000000000;
        v59 = 0x3FF0000000000000;
        v52 = (float64x2_t)0x3FF0000000000000uLL;
        v53 = 0;
        v54 = 0;
        v57 = 0;
        v58 = 0;
        v60 = 0u;
        v61 = 0u;
        v55 = xmmword_1B304F610;
        *(_QWORD *)&v30.f64[1] = v42.i64[1];
        v56 = v42;
        v30.f64[0] = v20;
        PCMatrix44Tmpl<double>::leftTranslate(&v52, v30, v21, 0.0);
        PVInputHGNodeMap<unsigned int>::SetPixelTransform((uint64_t)&v64, 0, (uint64_t **)&v52);
        v49 = v79;
        v50 = v80;
        v48 = v46;
        if ((v44 & 1) == 0)
          (*(void (**)(void *))(*(_QWORD *)v46 + 16))(v46);
        v47 = v15;
        (*(void (**)(PVInstructionGraphContext *))(*(_QWORD *)v15 + 16))(v15);
        if (v23)
          objc_msgSend(v23, "hgNodeForTime:inputs:renderer:igContext:", &v49, &v64, &v48, &v47);
        else
          v51 = 0;
        if (v47)
          (*(void (**)(PVInstructionGraphContext *))(*(_QWORD *)v47 + 24))(v47);
        if (v48)
          (*(void (**)(void *))(*(_QWORD *)v48 + 24))(v48);
        if (v18 == v51)
        {
          v31 = v18;
          if (v18)
            goto LABEL_50;
        }
        else
        {
          if (!v18)
          {
            v18 = v51;
            if (!v51)
              goto LABEL_51;
LABEL_49:
            (*(void (**)(HGNode *))(*(_QWORD *)v18 + 16))(v18);
            v31 = v51;
            if (!v51)
              goto LABEL_51;
LABEL_50:
            (*(void (**)(HGNode *))(*(_QWORD *)v31 + 24))(v31);
            goto LABEL_51;
          }
          (*(void (**)(HGNode *))(*(_QWORD *)v18 + 24))(v18);
          v18 = v51;
          if (v51)
            goto LABEL_49;
        }
LABEL_51:
        PVInputHGNodeMap<unsigned int>::~PVInputHGNodeMap(&v64);
        ++v22;
      }
      while (v45 != v22);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
    }
    while (v19);
  }

  v32 = (void *)MEMORY[0x1B5E29E00](*((_QWORD *)this + 46));
  v33 = (HGRenderNode *)HGObject::operator new(0xD8uLL);
  PVCameraPreviewRenderNode::PVCameraPreviewRenderNode(v33, v32);
  v34 = *a2;
  if (*a2 == (HGRect *)v33)
  {
    if (v33)
      (*(void (**)(HGRenderNode *))(*(_QWORD *)v33 + 24))(v33);
  }
  else
  {
    if (v34)
      (*(void (**)(HGRect *))(*(_QWORD *)&v34->var0 + 24))(v34);
    *a2 = (HGRect *)v33;
  }

  HGRenderNode::SetNotifyFunc((uint64_t)v33, (void (*)(HGRenderNode *))PVCameraPreviewRenderNode::Notify);
  HGRenderNode::SetUserName(v33, "PVCameraPreview Render Node");
  HGRenderNode::SetNode(v33, v18);
  *(_QWORD *)&v83.var2 = v39;
  v35 = (uint64_t)*a2;
  *(_QWORD *)&v83.var0 = v36;
  HGRenderNode::SetROI(*a2, v83);
  HGRenderNode::SetFullROIFlag(v35, 0);
  HGRenderNode::SetFormat(v35, 24);
  if (v18)
    (*(void (**)(HGNode *))(*(_QWORD *)v18 + 24))(v18);
  if (v78)
    (*(void (**)(HGNode *))(*(_QWORD *)v78 + 24))(v78);
  (*(void (**)(PVInstructionGraphContext *))(*(_QWORD *)v15 + 24))(v15);
  if ((v44 & 1) == 0)
    (*(void (**)(void *))(*(_QWORD *)v46 + 24))(v46);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);

}

void sub_1B27B82BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void PVCameraPreviewGraphBuildJob::Notify(HGRenderJob *this, HGRenderJob *a2)
{
  void *v3;
  int State;
  PVCameraPreviewGraphBuildJob *v5;
  PVCameraPreviewGraphBuildJob *v6;
  HGRenderNode *v7;
  HGRenderJob *v8;
  HGRenderer *Renderer;
  uint64_t v10;
  HGRenderJob *v11;
  HGRect *v12;

  v3 = (void *)MEMORY[0x1B5E29C50](this, a2);
  State = HGRenderJob::GetState(this);
  if (this)
  {
    if (State == 4)
    {
      if (v5)
      {
        v6 = v5;
        PVCameraPreviewGraphBuildJob::NewRenderNode(v5, &v12);
        v7 = (HGRenderNode *)v12;
        if (v12)
        {
          v8 = (HGRenderJob *)HGObject::operator new(0x160uLL);
          HGRenderJob::HGRenderJob(v8);
          v11 = v8;
          HGRenderJob::SetUserName(v8, "PVCameraPreview Render Job");
          HGRenderJob::AddRenderNode(v8, v7);
          Renderer = (HGRenderer *)HGRenderJob::GetRenderer((HGRenderJob *)v6);
          HGRenderJob::SetRenderer(v8, Renderer);
          HGUserJob::SetPriority((uint64_t)v8, 0);
          HGUserJob::SetState((uint64_t)v8, 2);
          HGRenderJob::SetPriority((uint64_t)v8, 10);
          HGRenderJob::SetRenderThreadPriority((uint64_t)v8, 3);
          v10 = *((_QWORD *)v6 + 44);
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
          PVRenderManager::EnqueueRenderJob(v10, &v11);
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
          if (v11)
            (*(void (**)(HGRenderJob *))(*(_QWORD *)v11 + 24))(v11);
          (*(void (**)(HGRenderNode *))(*(_QWORD *)v7 + 24))(v7);
        }
      }
    }
  }
  objc_autoreleasePoolPop(v3);
}

void sub_1B27B86E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

void sub_1B27B8824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);

  _Unwind_Resume(a1);
}

void sub_1B27B88A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PVCameraPreviewRenderer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27B8A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);

  _Unwind_Resume(a1);
}

void PVCameraPreviewRenderNode::~PVCameraPreviewRenderNode(id *this)
{

  HGRenderNode::~HGRenderNode((HGRenderNode *)this);
}

{
  void *v2;

  HGRenderNode::~HGRenderNode((HGRenderNode *)this);
  HGObject::operator delete(v2);
}

void PVPreviewInstructionGraphContext::~PVPreviewInstructionGraphContext(PVInstructionGraphContext *this)
{
  void *v1;

  PVInstructionGraphContext::~PVInstructionGraphContext(this);
  HGObject::operator delete(v1);
}

double PVPreviewInstructionGraphContext::RenderSize(PVPreviewInstructionGraphContext *this)
{
  return *((double *)this + 15);
}

float PVPreviewInstructionGraphContext::RenderScale(PVPreviewInstructionGraphContext *this)
{
  return 1.0;
}

__n128 PVPreviewInstructionGraphContext::RenderTransform@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v2;
  __int128 v3;
  __n128 result;

  v2 = (__n128 *)MEMORY[0x1E0C9BAA8];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 16) = v3;
  result = v2[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t PVPreviewInstructionGraphContext::HighQualityRendering(PVPreviewInstructionGraphContext *this)
{
  return 0;
}

CMTime *PVPreviewInstructionGraphContext::AnimationFrameDuration@<X0>(CMTime *a1@<X8>)
{
  return CMTimeMake(a1, 1, 30);
}

_QWORD *PVPreviewInstructionGraphContext::DotGraphLabel@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Camera Renderer Context");
}

void sub_1B27B8C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B8D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27B9164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B27B9218()
{
  JUMPOUT(0x1B27B9200);
}

void sub_1B27B9220()
{
  JUMPOUT(0x1B27B91FCLL);
}

void sub_1B27BED10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27BF23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27BF598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27BF75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B27BF94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B27BFB60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  _Unwind_Resume(a1);
}

void sub_1B27BFDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t i;

  for (i = 8; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_1B27BFEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27C020C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27C0508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B27C061C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27C06E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B27C0924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1B27C09AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27C0A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27C0BDC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B27C0EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVMotionEffect;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27C0F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27C0FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B27C13B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27C17AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27C1A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27C1B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27C1F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27C1FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27C2080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27C2118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27C21E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1B27C2250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27C43FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,_QWORD *a45,uint64_t a46,uint64_t a47,void *a48)
{
  void *v48;
  void *v49;
  void *v51;

  v51 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v51;
    operator delete(v51);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x330], (_QWORD *)STACK[0x338]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x348], (_QWORD *)STACK[0x350]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x360], (_QWORD *)STACK[0x368]);
  std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy((uint64_t)&STACK[0x378], (_QWORD *)STACK[0x380]);

  if (*a45)
    (*(void (**)(_QWORD))(*(_QWORD *)*a45 + 24))(*a45);
  _Unwind_Resume(a1);
}

__n128 PVInputHGNodeMap<unsigned int>::GetPixelTransform@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a1 + 56);
  v3 = a1 + 56;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v11 = *(_OWORD *)(v6 + 120);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v6 + 104);
    *(_OWORD *)(a3 + 80) = v11;
    v12 = *(_OWORD *)(v6 + 152);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v6 + 136);
    *(_OWORD *)(a3 + 112) = v12;
    v13 = *(_OWORD *)(v6 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(a3 + 16) = v13;
    result = *(__n128 *)(v6 + 72);
    v14 = *(_OWORD *)(v6 + 88);
    *(__n128 *)(a3 + 32) = result;
    *(_OWORD *)(a3 + 48) = v14;
  }
  else
  {
LABEL_12:
    *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a3 = 0x3FF0000000000000;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
  }
  return result;
}

void sub_1B27C4CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B27C4EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27C56D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);

  _Unwind_Resume(a1);
}

void sub_1B27C6114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  HGObject::operator delete(v3);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);

  _Unwind_Resume(a1);
}

void sub_1B27C6334()
{
  JUMPOUT(0x1B27C6320);
}

void sub_1B27C6530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27C67C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  CGColorSpace **v12;

  PCCFRef<CGColorSpace *>::~PCCFRef(v12);

  _Unwind_Resume(a1);
}

void sub_1B27C6C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  void *v38;
  void *v39;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);

  _Unwind_Resume(a1);
}

void sub_1B27C706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B27C71E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  void *v11;

  PCString::~PCString(&a10);

  _Unwind_Resume(a1);
}

void sub_1B27C7450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27C7548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1B27C7758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27C7A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  void *v18;
  void *v19;

  PCString::~PCString(&a18);

  _Unwind_Resume(a1);
}

void sub_1B27C8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B27C8258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27C8730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B27C8894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27C8960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27C8A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B27C8B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27C8C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1450(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B27C8E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B27C9160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27C93B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27C94F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27C95E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B27C98A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27C9A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27C9B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27C9D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27C9E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27C9F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B27CA0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B27CA2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27CA3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  void *v12;
  void *v13;

  PCString::~PCString(&a12);

  _Unwind_Resume(a1);
}

void sub_1B27CA4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27CA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CA750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CA89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B27CA9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1B27CAA74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CAD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CAE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CAFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27CB080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27CB600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49)
{
  void *v49;
  void *v50;
  void *v51;

  OZARFrameInfo::~OZARFrameInfo(&a49);
  _Unwind_Resume(a1);
}

void sub_1B27CB6E8()
{
  JUMPOUT(0x1B27CB6A0);
}

void sub_1B27CB6F4()
{
  JUMPOUT(0x1B27CB6A8);
}

void sub_1B27CB700()
{
  JUMPOUT(0x1B27CB6B0);
}

void sub_1B27CB70C()
{
  JUMPOUT(0x1B27CB6B8);
}

void sub_1B27CB718()
{
  void *v0;

  JUMPOUT(0x1B27CB6C8);
}

void sub_1B27CB738()
{
  JUMPOUT(0x1B27CB6D0);
}

void sub_1B27CB748()
{
  JUMPOUT(0x1B27CB6D4);
}

void sub_1B27CB758()
{
  JUMPOUT(0x1B27CB6DCLL);
}

void OZARFrameInfo::~OZARFrameInfo(id *this)
{

}

void PVMotionDocumentInfo::~PVMotionDocumentInfo(PVMotionDocumentInfo *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((_QWORD *)this + 21), *(_QWORD **)(v2 + 8));
    MEMORY[0x1B5E29170](v2, 0x1020C4062D53EE8);
    *((_QWORD *)this + 21) = 0;
  }
}

CGColorSpace **PCCFRef<CGColorSpace *>::operator=(CGColorSpace **a1, CGColorSpace **a2)
{
  CGColorSpace *v3;
  CGColorSpace *v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      PCCFRefTraits<CGColorSpace *>::release(v3);
      v4 = *a2;
    }
    *a1 = v4;
    if (*a2)
      PCCFRefTraits<CGColorSpace *>::retain(v4);
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[5];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::map<unsigned int,HGRef<HGNode>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned int,HGRef<HGNode>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,HGRef<HGNode>>,std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *> *,long>>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B27CBA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,HGRef<HGNode>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,HGRef<HGNode>>,std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,HGRef<HGNode>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,HGRef<HGNode>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__construct_node<std::pair<unsigned int const,HGRef<HGNode>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__construct_node<std::pair<unsigned int const,HGRef<HGNode>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v6 + 5) = result;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B27CBDD0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,HGRef<HGNode>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned int,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B27CBE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::map<unsigned int,PCRect<double>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<unsigned int,PCRect<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCRect<double>>,std::__tree_node<std::__value_type<unsigned int,PCRect<double>>,void *> *,long>>>((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B27CC12C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<unsigned int,PCRect<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCRect<double>>,std::__tree_node<std::__value_type<unsigned int,PCRect<double>>,void *> *,long>>>(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCRect<double>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCRect<double>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(a1, a2, &v12, &v11, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 8) = *(_QWORD *)(a4 + 32);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::map<unsigned int,PCMatrix44Tmpl<double>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<unsigned int,PCMatrix44Tmpl<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__tree_node<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,void *> *,long>>>((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B27CC290(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<unsigned int,PCMatrix44Tmpl<double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__tree_node<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,void *> *,long>>>(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCMatrix44Tmpl<double>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,PCMatrix44Tmpl<double>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<unsigned int,HGRef<HGNode>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HGRef<HGNode>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HGRef<HGNode>>>>::__find_equal<unsigned int>(a1, a2, &v15, &v14, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0xA8uLL);
    v9 = *(_OWORD *)(a4 + 112);
    v7[8] = *(_OWORD *)(a4 + 96);
    v7[9] = v9;
    *((_QWORD *)v7 + 20) = *(_QWORD *)(a4 + 128);
    v10 = *(_OWORD *)(a4 + 48);
    v7[4] = *(_OWORD *)(a4 + 32);
    v7[5] = v10;
    v11 = *(_OWORD *)(a4 + 80);
    v7[6] = *(_OWORD *)(a4 + 64);
    v7[7] = v11;
    v12 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v12;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v15, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_multi<std::pair<unsigned int const,unsigned int> const&>(v5, (_QWORD *)((char *)a2 + 28));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B27CC524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_multi<std::pair<unsigned int const,unsigned int> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= v5)
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_1B27CCC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CD164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CD85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

PVNCLCTriplet *MakePVNCLCTriplet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return -[PVNCLCTriplet initWithColorPrimaryStr:hgColorPrimary:transferFunctionStr:hgTransformFunction:ycbcrMatrixStr:hgYCbCrMatrix:]([PVNCLCTriplet alloc], "initWithColorPrimaryStr:hgColorPrimary:transferFunctionStr:hgTransformFunction:ycbcrMatrixStr:hgYCbCrMatrix:", a1, a2, a3, a4, a5, a6);
}

void sub_1B27CD9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CDDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CGColorSpaceRef makeColorSpaceFromNCLC(const __CFString *a1, const __CFString *a2, const __CFString *a3)
{
  void *v3;
  CGColorSpaceRef ColorSpaceFromAttachments;
  const __CFDictionary *v6;
  void *values[3];
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  v3 = (void *)*MEMORY[0x1E0CA8E98];
  keys[0] = *(void **)MEMORY[0x1E0CA8D68];
  keys[1] = v3;
  keys[2] = *(void **)MEMORY[0x1E0CA8EE8];
  values[0] = (void *)a1;
  values[1] = (void *)a2;
  values[2] = (void *)a3;
  v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v6);
  PCCFRef<__CFDictionary const*>::~PCCFRef((const void **)&v6);
  return ColorSpaceFromAttachments;
}

void sub_1B27CDEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  PCCFRef<__CFDictionary const*>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B27CDF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CDFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const void **PCCFRef<__CFDictionary const*>::~PCCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1B27CE238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CE2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ApplyTransformToYUVConform(_QWORD *a1, _QWORD *a2, int a3)
{
  HGXForm *v6;
  HGTransform *v7;
  HGXForm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float v14;
  float v15;
  _BYTE v17[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v6);
  (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v6 + 576))(v6, *a2);
  v7 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v7);
  (*(void (**)(HGTransform *))(*(_QWORD *)v7 + 56))(v7);
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a2 + 40))(*a2, v17);
  (*(void (**)(HGTransform *, _BYTE *))(*(_QWORD *)v7 + 64))(v7, v17);
  v8 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v8);
  (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v8 + 576))(v8, v7);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 128))(*a1, 0);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 128))(*a1, 1);
  v11 = v10;
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12;
  if (!v12)
  {
    (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v6 + 120))(v6, 0, v9);
    (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v8 + 120))(v8, 0, v11);
    if (a3)
    {
      +[PVEnvironment PVExportPrefilterValue](PVEnvironment, "PVExportPrefilterValue");
      (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v6 + 592))(v6, 0);
      +[PVEnvironment PVExportPrefilterValue](PVEnvironment, "PVExportPrefilterValue");
      v15 = v14;
    }
    else
    {
      v15 = 0.0;
      (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v6 + 592))(v6, 0, 0.0);
    }
    (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v8 + 592))(v8, 0, v15);
    (*(void (**)(_QWORD, _QWORD, HGXForm *))(*(_QWORD *)*a1 + 120))(*a1, 0, v6);
    (*(void (**)(_QWORD, uint64_t, HGXForm *))(*(_QWORD *)*a1 + 120))(*a1, 1, v8);
  }
  (*(void (**)(HGXForm *))(*(_QWORD *)v8 + 24))(v8);
  (*(void (**)(HGTransform *))(*(_QWORD *)v7 + 24))(v7);
  (*(void (**)(HGXForm *))(*(_QWORD *)v6 + 24))(v6);
  return v13;
}

void sub_1B27CE514(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HGXFormForHGTransform@<X0>(const void **a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, HGXForm **a4@<X8>)
{
  HGXForm *v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  void *v12;
  void (*v13)(void *);
  char v14;
  float v15;
  _BOOL4 v16;
  uint64_t v17;
  void (*v18)(void *);
  uint64_t v19;
  char v20;
  HGXForm *v21;
  HGXForm *v22;
  __n128 v23;
  uint64_t v24;
  const void *v25;

  v8 = (HGXForm *)*a1;
  *a4 = v8;
  if (v8)
    (*(void (**)(HGXForm *))(*(_QWORD *)v8 + 16))(v8);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 224))(*a2);
  if (!(_DWORD)result)
  {
    v10 = (void *)*a1;
    if (!v10)
    {
      v12 = 0;
      goto LABEL_12;
    }
    (*(void (**)(void *))(*(_QWORD *)v10 + 16))(v10);
    {
      v11 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v10 + 128))(v10, 0);
      v12 = (void *)v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      v13 = *(void (**)(void *))(*(_QWORD *)v10 + 24);
      if (v10 == v12)
      {
        v13(v10);
      }
      else
      {
        v13(v10);
        v10 = v12;
        if (!v12)
          goto LABEL_12;
      }
    }
    {
      v17 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v10 + 128))(v10, 0);
      v12 = (void *)v17;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v18 = *(void (**)(void *))(*(_QWORD *)v10 + 24);
      if (v10 == v12)
      {
        v18(v10);
      }
      else
      {
        v18(v10);
        v10 = v12;
        if (!v12)
        {
LABEL_12:
          v14 = 1;
          if (a3)
            goto LABEL_13;
          goto LABEL_24;
        }
      }
    }
    v14 = 0;
    if (a3)
    {
LABEL_13:
      +[PVEnvironment PVExportPrefilterValue](PVEnvironment, "PVExportPrefilterValue");
      v16 = v15 <= 0.0;
      if (!v12)
        goto LABEL_35;
      goto LABEL_25;
    }
LABEL_24:
    v16 = 1;
    if (!v12)
    {
LABEL_35:
      v21 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v21);
      (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v21 + 576))(v21, *a2);
      v22 = *a4;
      (*(void (**)(HGXForm *, _QWORD, HGXForm *))(*(_QWORD *)v21 + 120))(v21, 0, *a4);
      v23.n128_u32[0] = 0;
      if (a3)
        +[PVEnvironment PVExportPrefilterValue](PVEnvironment, "PVExportPrefilterValue", v23.n128_f64[0]);
      (*(void (**)(HGXForm *, _QWORD, __n128))(*(_QWORD *)v21 + 592))(v21, 0, v23);
      if (v22 != v21)
      {
        if (v22)
          (*(void (**)(HGXForm *))(*(_QWORD *)v22 + 24))(v22);
        *a4 = v21;
        (*(void (**)(HGXForm *))(*(_QWORD *)v21 + 16))(v21);
      }
      result = (*(uint64_t (**)(HGXForm *))(*(_QWORD *)v21 + 24))(v21);
LABEL_42:
      if ((v14 & 1) == 0)
        return (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 24))(v10);
      return result;
    }
LABEL_25:
    if (v16)
    {
      v25 = v10;
      if ((v14 & 1) == 0)
        (*(void (**)(void *))(*(_QWORD *)v10 + 16))(v10);
      v19 = *a2;
      v24 = v19;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v20 = ApplyTransformToYUVConform(&v25, &v24, a3);
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      result = (uint64_t)v25;
      if (v25)
        result = (*(uint64_t (**)(const void *))(*(_QWORD *)v25 + 24))(v25);
      if ((v20 & 1) != 0)
        goto LABEL_42;
    }
    goto LABEL_35;
  }
  return result;
}

void sub_1B27CE8DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(a1);
}

uint64_t HGTransformForSIMDFloat4x4@<X0>(simd_float4x4 a1@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, HGTransform **a2@<X8>)
{
  HGTransform *v3;
  simd_float4x4 v5;

  v5 = a1;
  v3 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v3);
  *a2 = v3;
  return (*(uint64_t (**)(HGTransform *, simd_float4x4 *))(*(_QWORD *)v3 + 80))(v3, &v5);
}

void sub_1B27CEA48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HGTransformForSIMDDouble4x4@<X0>(uint64_t a1@<X0>, HGTransform **a2@<X8>)
{
  HGTransform *v4;

  v4 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGTransform *, uint64_t))(*(_QWORD *)v4 + 88))(v4, a1);
}

void sub_1B27CEAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

const void **HGXFormForSIMDFloat4x4@<X0>(const void **result@<X0>, int a2@<W1>, HGXForm **a3@<X8>, simd_float4x4 a4@<0:Q0, 16:Q1, 32:Q2, 48:Q3>)
{
  const void **v4;
  float32x4_t v6;
  const void *v8;
  HGTransform *v9;
  HGTransform *v10;
  const void *v11;
  HGTransform *v12;

  v4 = result;
  v6 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[1], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16))), (int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[0], *MEMORY[0x1E0C83FF0]))), vandq_s8((int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[2], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32))), (int8x16_t)vcgeq_f32(v6, vabdq_f32((float32x4_t)a4.columns[3], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48)))))) & 0x80000000) != 0)
  {
    *a3 = (HGXForm *)*result;
    *result = 0;
  }
  else
  {
    HGTransformForSIMDFloat4x4(a4, &v12);
    v8 = *v4;
    v11 = v8;
    if (v8)
      (*(void (**)(const void *))(*(_QWORD *)v8 + 16))(v8);
    v9 = v12;
    v10 = v12;
    if (v12)
      (*(void (**)(HGTransform *))(*(_QWORD *)v12 + 16))(v12);
    result = (const void **)HGXFormForHGTransform(&v11, &v10, a2, a3);
    if (v9)
      result = (const void **)(*(uint64_t (**)(HGTransform *))(*(_QWORD *)v9 + 24))(v9);
    if (v8)
      result = (const void **)(*(uint64_t (**)(const void *))(*(_QWORD *)v8 + 24))(v8);
    if (v9)
      return (const void **)(*(uint64_t (**)(HGTransform *))(*(_QWORD *)v9 + 24))(v9);
  }
  return result;
}

void sub_1B27CEC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

uint64_t HGXFormForCGAffineTransform@<X0>(HGXForm **a1@<X0>, _OWORD *a2@<X1>, int a3@<W2>, HGXForm **a4@<X8>)
{
  __int128 v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  HGXForm *v12;
  HGTransform *v13;
  HGTransform *v14;
  HGXForm *v15;
  HGTransform *v16;
  CGAffineTransform v17;
  _OWORD v18[8];

  v8 = a2[1];
  *(_OWORD *)&v17.a = *a2;
  *(_OWORD *)&v17.c = v8;
  *(_OWORD *)&v17.tx = a2[2];
  result = CGAffineTransformIsIdentity(&v17);
  if ((_DWORD)result)
  {
    *a4 = *a1;
    *a1 = 0;
  }
  else
  {
    v10 = a2[1];
    v11 = a2[2];
    v18[0] = *a2;
    v18[1] = 0u;
    v18[2] = v10;
    memset(&v18[3], 0, 32);
    v18[5] = xmmword_1B304EED0;
    v18[6] = v11;
    v18[7] = xmmword_1B304EEE0;
    HGTransformForSIMDDouble4x4((uint64_t)v18, &v16);
    v12 = *a1;
    v15 = v12;
    if (v12)
      (*(void (**)(HGXForm *))(*(_QWORD *)v12 + 16))(v12);
    v13 = v16;
    v14 = v16;
    if (v16)
      (*(void (**)(HGTransform *))(*(_QWORD *)v16 + 16))(v16);
    result = HGXFormForHGTransform((const void **)&v15, &v14, a3, a4);
    if (v13)
      result = (*(uint64_t (**)(HGTransform *))(*(_QWORD *)v13 + 24))(v13);
    if (v12)
      result = (*(uint64_t (**)(HGXForm *))(*(_QWORD *)v12 + 24))(v12);
    if (v13)
      return (*(uint64_t (**)(HGTransform *))(*(_QWORD *)v13 + 24))(v13);
  }
  return result;
}

void sub_1B27CEDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

void HGXFormForScaleAroundPoint(_QWORD *a1@<X0>, HGXForm **a2@<X8>, float64x2_t a3@<Q0>, double a4@<D1>, float64x2_t a5@<Q2>)
{
  float64x2_t v8;
  HGXForm *v9;
  _BYTE v12[144];

  HGTransform::HGTransform((HGTransform *)v12);
  HGTransform::LoadIdentity((HGTransform *)v12);
  HGTransform::Translate((HGTransform *)v12, -a3.f64[0], -a3.f64[1], 0.0);
  HGTransform::Scale((HGTransform *)v12, a4, a4, 1.0);
  v8 = vaddq_f64(a3, a5);
  HGTransform::Translate((HGTransform *)v12, v8.f64[0], v8.f64[1], 0.0);
  v9 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v9);
  *a2 = v9;
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v9 + 576))(v9, v12);
  (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v9 + 120))(v9, 0, *a1);
  HGTransform::~HGTransform((HGTransform *)v12);
}

void sub_1B27CEF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  HGObject::operator delete(v13);
  HGTransform::~HGTransform((HGTransform *)&a13);
  _Unwind_Resume(a1);
}

uint64_t HGRectMakeWithCGRect(CGRect a1)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  float MinX;
  float MinY;
  float MaxX;
  float MaxY;
  uint64_t v9;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  MinX = CGRectGetMinX(a1);
  v11.origin.x = x;
  v11.origin.y = y;
  v11.size.width = width;
  v11.size.height = height;
  MinY = CGRectGetMinY(v11);
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  MaxX = CGRectGetMaxX(v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  MaxY = CGRectGetMaxY(v13);
  return HGRectMake4f(v9, MinX, MinY, MaxX, MaxY);
}

void sub_1B27CF05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CF0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CF154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id NSStringFromPVTransformInfo(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int string_representation;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = a1[5];
  v21 = a1[4];
  v22 = v4;
  v5 = a1[7];
  v23 = a1[6];
  v24 = v5;
  v6 = a1[1];
  v17 = *a1;
  v18 = v6;
  v7 = a1[3];
  v19 = a1[2];
  v20 = v7;
  v8 = pv_buffer_size_for_string_representation(&v17, a2);
  v9 = (char *)malloc_type_calloc(v8, 1uLL, 0x100004077774924uLL);
  v10 = a1[5];
  v21 = a1[4];
  v22 = v10;
  v11 = a1[7];
  v23 = a1[6];
  v24 = v11;
  v12 = a1[1];
  v17 = *a1;
  v18 = v12;
  v13 = a1[3];
  v19 = a1[2];
  v20 = v13;
  string_representation = pv_get_string_representation((uint64_t)&v17, v9, v8, a2);
  v15 = 0;
  if ((string_representation & 0x80000000) != 0
    || (int)string_representation >= v8
    || (v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v9, string_representation, 4, 1)) == 0)
  {
    free(v9);
  }
  return v15;
}

void sub_1B27CF3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27CF44C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CF5A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B27CF684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B27CF6EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27CF774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27CF870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27CF9EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27CFCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27CFE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B27CFFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27D0274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B27D0508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{

  _Unwind_Resume(a1);
}

void sub_1B27D05E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27D0700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B27D07BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D0944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  objc_sync_exit(v12);

  _Unwind_Resume(a1);
}

void sub_1B27D0A48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

id std::vector<objc_class * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)std::__split_buffer<objc_class * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_1B27D0CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27D0D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B27D0DDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D0E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D0E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D0F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D0FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D108C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27D12E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27D15B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27D171C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D1784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D18C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D1A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D1E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27D1F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1B27D2000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

char *std::vector<objc_class * {__strong}>::__init_with_size[abi:ne180100]<objc_class * {__strong}*,objc_class * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  char *v6;
  char **v7;
  void *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = v8;
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B27D2174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<objc_class * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<objc_class * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<objc_class * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double pv_simd_matrix_convert_projection(int a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  unint64_t v6;
  unint64_t v7;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (a1 != a2)
  {
    if (a2 == 1)
    {
      v7 = 0;
      v9 = a3;
      v10 = a4;
      v11 = a5;
      v12 = a6;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      do
      {
        *(__int128 *)((char *)&v13 + v7) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(*(_OWORD *)((char *)&v9 + v7))), (float32x4_t)xmmword_1B304F240, (float32x2_t)v9.n128_u64[v7 / 8], 1), (float32x4_t)xmmword_1B304F760, *(float32x4_t *)((char *)&v9 + v7), 2), (float32x4_t)xmmword_1B304F770, *(float32x4_t *)((char *)&v9 + v7), 3);
        v7 += 16;
      }
      while (v7 != 64);
      goto LABEL_9;
    }
    if (!a2)
    {
      v6 = 0;
      v9 = a3;
      v10 = a4;
      v11 = a5;
      v12 = a6;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      do
      {
        *(__int128 *)((char *)&v13 + v6) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B304F230, COERCE_FLOAT(*(_OWORD *)((char *)&v9 + v6))), (float32x4_t)xmmword_1B304F240, (float32x2_t)v9.n128_u64[v6 / 8], 1), (float32x4_t)xmmword_1B304F780, *(float32x4_t *)((char *)&v9 + v6), 2), (float32x4_t)xmmword_1B304F790, *(float32x4_t *)((char *)&v9 + v6), 3);
        v6 += 16;
      }
      while (v6 != 64);
LABEL_9:
      a3.n128_u64[0] = v13;
    }
  }
  return a3.n128_f64[0];
}

_OWORD *pv_simd_matrix_convert_projection@<X0>(_OWORD *result@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  __int128 vars0;

  if (a2 == a3)
  {
    v4 = result[5];
    a4[4] = result[4];
    a4[5] = v4;
    v5 = result[7];
    a4[6] = result[6];
    a4[7] = v5;
    v6 = result[1];
    *a4 = *result;
    a4[1] = v6;
    v7 = result[3];
    a4[2] = result[2];
    a4[3] = v7;
  }
  else if (a3 == 1)
  {
    v12 = 0;
    vars0 = *result;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    do
    {
      v14 = *(float64x2_t *)((char *)&vars0 + v12 * 16);
      v13 = *(float64x2_t *)((char *)&vars0 + v12 * 16 + 16);
      v15 = (float64x2_t *)&a4[v12];
      *v15 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1B304EED0, v14.f64[0]), (float64x2_t)xmmword_1B304EEE0, v14, 1), (float64x2_t)0, v13.f64[0]), (float64x2_t)0, v13, 1);
      v15[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v14.f64[0]), (float64x2_t)0, v14, 1), (float64x2_t)xmmword_1B304F7A0, v13.f64[0]), (float64x2_t)xmmword_1B304F7B0, v13, 1);
      v12 += 2;
    }
    while (v12 != 8);
  }
  else if (!a3)
  {
    v8 = 0;
    vars0 = *result;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    do
    {
      v10 = *(float64x2_t *)((char *)&vars0 + v8 * 16);
      v9 = *(float64x2_t *)((char *)&vars0 + v8 * 16 + 16);
      v11 = (float64x2_t *)&a4[v8];
      *v11 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1B304EED0, v10.f64[0]), (float64x2_t)xmmword_1B304EEE0, v10, 1), (float64x2_t)0, v9.f64[0]), (float64x2_t)0, v9, 1);
      v11[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v10.f64[0]), (float64x2_t)0, v10, 1), (float64x2_t)xmmword_1B304EF60, v9.f64[0]), (float64x2_t)xmmword_1B304F7C0, v9, 1);
      v8 += 2;
    }
    while (v8 != 8);
  }
  return result;
}

__n128 pv_simd_matrix_convert_proj_handedness@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *(_OWORD *)(a1 + 64);
  *(float64x2_t *)(a1 + 80) = vnegq_f64(*(float64x2_t *)(a1 + 80));
  v3 = *(_OWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v2;
  *(_OWORD *)(a2 + 80) = v4;
  return result;
}

float pv_simd_matrix_make_orthographic(int a1, float a2, float a3)
{
  float result;

  result = 0.00001;
  if (a1 == 1)
  {
    result = (float)(1.0 / (float)(a3 - a2)) + (float)(1.0 / (float)(a3 - a2));
    __asm { FMOV            V3.4S, #1.0 }
  }
  else if (!a1)
  {
    result = (float)(1.0 / (float)(a3 - a2)) + (float)(1.0 / (float)(a3 - a2));
    __asm { FMOV            V3.4S, #1.0 }
  }
  return result;
}

uint64_t pv_simd_matrix_make_orthographic@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>, float64_t a5@<D2>, float64_t a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  _BOOL4 v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v18;
  float64_t v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64_t v30;
  double v31;
  double v32;
  unint64_t v33;

  v8 = a8 > -0.0000001;
  if (a8 >= 0.0000001)
    v8 = 0;
  if ((_DWORD)result == 1)
  {
    v25.f64[0] = a4;
    v25.f64[1] = a5;
    v26.f64[0] = a3;
    v26.f64[1] = a6;
    v27 = vsubq_f64(v25, v26);
    v25.f64[0] = a3;
    v26.f64[0] = a4;
    v28 = vaddq_f64(v25, v26);
    __asm { FMOV            V1.2D, #1.0 }
    v29 = vdivq_f64(_Q1, v27);
    v27.f64[0] = v29.f64[0] + v29.f64[0];
    v30 = v29.f64[1] + v29.f64[1];
    v20 = vmulq_f64(v29, vnegq_f64(v28));
    v21 = 0uLL;
    v22 = *(unint64_t *)&v27.f64[0];
    *(_QWORD *)&v23 = 0;
    *((float64_t *)&v23 + 1) = v30;
    if (v8)
    {
      v24 = -0.99999976;
      goto LABEL_9;
    }
    *(double *)&v33 = 1.0 / (a7 - a8);
    _Q1.f64[0] = *(double *)&v33 * a7;
    *(_OWORD *)a2 = v22;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_OWORD *)(a2 + 32) = v23;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 80) = v33;
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v9.f64[0] = a4;
    v9.f64[1] = a5;
    v10.f64[0] = a3;
    v10.f64[1] = a6;
    v11 = vsubq_f64(v9, v10);
    v9.f64[0] = a3;
    v10.f64[0] = a4;
    v12 = vaddq_f64(v9, v10);
    __asm { FMOV            V1.2D, #1.0 }
    v18 = vdivq_f64(_Q1, v11);
    v11.f64[0] = v18.f64[0] + v18.f64[0];
    v19 = v18.f64[1] + v18.f64[1];
    v20 = vmulq_f64(v18, vnegq_f64(v12));
    v21 = 0uLL;
    v22 = *(unint64_t *)&v11.f64[0];
    *(_QWORD *)&v23 = 0;
    *((float64_t *)&v23 + 1) = v19;
    if (v8)
    {
      v24 = -1.99999976;
LABEL_9:
      *(_OWORD *)a2 = v22;
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v23;
      *(_OWORD *)(a2 + 48) = v21;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_OWORD *)(a2 + 80) = xmmword_1B304F7D0;
      *(float64x2_t *)(a2 + 96) = v20;
      *(double *)(a2 + 112) = a7 * v24;
      *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
      return result;
    }
    v31 = a7 + a8;
    v32 = 1.0 / (a7 - a8);
    _Q1.f64[0] = v31 * v32;
    *(_OWORD *)a2 = v22;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_OWORD *)(a2 + 32) = v23;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 80) = COERCE_UNSIGNED_INT64(v32 + v32);
  }
  *(float64x2_t *)(a2 + 96) = v20;
  *(float64x2_t *)(a2 + 112) = _Q1;
  return result;
}

__n128 pv_simd_matrix_make_projection_infinite@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  if (!a2)
  {
    v4 = -1.99999976;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v4 = -0.99999976;
LABEL_5:
    *(_QWORD *)(a1 + 80) = 0xBFEFFFFF7F26A6B3;
    *(double *)(a1 + 112) = v4 * a4;
  }
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v5;
  v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v6;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v7;
  result = *(__n128 *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v9;
  return result;
}

void pv_simd_matrix_make_perspective(unsigned int a1, float a2)
{
  if (a1 <= 1)
    tanf(a2 * 0.5);
}

void pv_simd_matrix_make_perspective(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _BOOL4 v10;
  long double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  long double v16;
  __int128 v17;
  double v18;

  v10 = a6 < 0.0000001 && a6 > -0.0000001;
  if (a1 == 1)
  {
    v16 = 1.0 / tan(a3 * 0.5);
    v12 = 0uLL;
    *((_QWORD *)&v13 + 1) = 0;
    *(double *)&v13 = v16 / a4;
    *(_QWORD *)&v14 = 0;
    *((long double *)&v14 + 1) = v16;
    if (v10)
    {
      v15 = -0.99999976;
      goto LABEL_10;
    }
    *((_QWORD *)&v17 + 1) = 0;
    *(double *)&v17 = a5 * a6 / (a5 - a6);
    v18 = a6 / (a5 - a6);
  }
  else
  {
    if (a1)
      return;
    v11 = 1.0 / tan(a3 * 0.5);
    v12 = 0uLL;
    *((_QWORD *)&v13 + 1) = 0;
    *(double *)&v13 = v11 / a4;
    *(_QWORD *)&v14 = 0;
    *((long double *)&v14 + 1) = v11;
    if (v10)
    {
      v15 = -1.99999976;
LABEL_10:
      *(_OWORD *)a2 = v13;
      *(_OWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 32) = v14;
      *(_OWORD *)(a2 + 48) = v12;
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 80) = xmmword_1B304F7E0;
      *(_OWORD *)(a2 + 96) = v12;
      *(double *)(a2 + 112) = a5 * v15;
      *(_QWORD *)(a2 + 120) = 0;
      return;
    }
    *((_QWORD *)&v17 + 1) = 0;
    *(double *)&v17 = (a6 + a6) * a5 / (a5 - a6);
    v18 = (a5 + a6) / (a5 - a6);
  }
  __asm { FMOV            V4.2D, #-1.0 }
  *(double *)&_Q4 = v18;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 80) = _Q4;
  *(_OWORD *)(a2 + 96) = v12;
  *(_OWORD *)(a2 + 112) = v17;
}

float pv_simd_matrix_make_perspective(int a1, float a2, float a3, double a4, double a5, float a6)
{
  float result;

  result = 0.00001;
  if (a1 == 1)
  {
    result = (float)(a6 + a6) / (float)(a3 - a2);
    __asm { FMOV            V2.4S, #-1.0 }
  }
  else if (!a1)
  {
    result = (float)(a6 + a6) / (float)(a3 - a2);
    __asm { FMOV            V2.4S, #-1.0 }
  }
  return result;
}

uint64_t pv_simd_matrix_make_perspective@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  _BOOL4 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v29;
  double v30;
  double v31;
  double v32;

  v8 = a8 > -0.0000001;
  if (a8 >= 0.0000001)
    v8 = 0;
  if ((_DWORD)result == 1)
  {
    v19 = a3 + a4;
    v20 = a4 - a3;
    *(double *)&v17 = v19 / v20;
    v21 = a5 + a6;
    v22 = a5 - a6;
    v23 = (a7 + a7) / (a5 - a6);
    *((_QWORD *)&v14 + 1) = 0;
    *(double *)&v14 = (a7 + a7) / v20;
    *(_QWORD *)&v15 = 0;
    *((double *)&v15 + 1) = v23;
    v16 = 0uLL;
    *((double *)&v17 + 1) = v21 / v22;
    if (v8)
    {
      v18 = -0.99999976;
      goto LABEL_9;
    }
    __asm { FMOV            V6.2D, #-1.0 }
    v31 = a7 * a8;
    v32 = a7 - a8;
    v29 = v31 / v32;
    v30 = a8 / v32;
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v9 = a3 + a4;
    v10 = a4 - a3;
    *(double *)&v17 = v9 / v10;
    v11 = a5 + a6;
    v12 = a5 - a6;
    v13 = (a7 + a7) / (a5 - a6);
    *((_QWORD *)&v14 + 1) = 0;
    *(double *)&v14 = (a7 + a7) / v10;
    *(_QWORD *)&v15 = 0;
    *((double *)&v15 + 1) = v13;
    v16 = 0uLL;
    *((double *)&v17 + 1) = v11 / v12;
    if (v8)
    {
      v18 = -1.99999976;
LABEL_9:
      *(_OWORD *)a2 = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v15;
      *(_OWORD *)(a2 + 48) = v16;
      *(_OWORD *)(a2 + 64) = v17;
      *(_OWORD *)(a2 + 80) = xmmword_1B304F7E0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(double *)(a2 + 112) = a7 * v18;
      *(_QWORD *)(a2 + 120) = 0;
      return result;
    }
    __asm { FMOV            V6.2D, #-1.0 }
    v29 = (a8 + a8) * a7 / (a7 - a8);
    v30 = (a7 + a8) / (a7 - a8);
  }
  *(double *)&_Q6 = v30;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 80) = _Q6;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 112) = *(unint64_t *)&v29;
  return result;
}

void pv_simd_matrix_make_perspective(int a1, int a2, int a3, int a4, double a5, double a6, float32x2_t a7, float32x2_t a8, double a9)
{
  if (a4 == 1)
  {
    pv_adjust_intrinsics(a1, a2, a3, a5, a6, a7, a8, a9);
    __asm { FMOV            V3.2S, #1.0 }
  }
  else if (!a4)
  {
    pv_adjust_intrinsics(a1, a2, a3, a5, a6, a7, a8, a9);
    __asm { FMOV            V3.2S, #1.0 }
  }
}

float pv_adjust_intrinsics(int a1, int a2, int a3, double a4, double a5, float32x2_t a6, float32x2_t a7, double a8)
{
  float32x2_t v8;
  float32x2_t v9;
  int8x8_t v10;
  int v11;
  double v12;
  double v18;
  int8x8_t v19;

  v8 = vadd_f32(a6, (float32x2_t)0x3F0000003F000000);
  v9 = vsub_f32(a7, v8);
  v10.i32[0] = 0;
  v10.i32[1] = HIDWORD(a5);
  if (a3 == 1)
  {
    switch(a1)
    {
      case 0:
        goto LABEL_30;
      case 1:
        if (a2 == 2)
          goto LABEL_26;
LABEL_10:
        if (a2 == 3)
          goto LABEL_33;
        if (a2 == 4)
          goto LABEL_34;
        goto LABEL_30;
      case 2:
        if (a2 == 1)
          goto LABEL_26;
LABEL_20:
        if (a2 == 3)
          goto LABEL_34;
        if (a2 == 4)
          goto LABEL_33;
        goto LABEL_30;
      case 3:
        if (a2 == 1)
          goto LABEL_34;
        if (a2 == 2)
        {
LABEL_33:
          v19 = vext_s8(v10, (int8x8_t)LODWORD(a4), 4uLL);
          v8 = (float32x2_t)vzip1_s32(vdup_lane_s32((int32x2_t)vsub_f32(a7, v9), 1), (int32x2_t)v8);
          goto LABEL_35;
        }
LABEL_25:
        if (a2 != 4)
          goto LABEL_30;
        goto LABEL_26;
      case 4:
        if (a2 == 1)
          goto LABEL_33;
        if (a2 == 2)
        {
LABEL_34:
          v19 = vext_s8(v10, (int8x8_t)LODWORD(a4), 4uLL);
          v8 = (float32x2_t)vext_s8((int8x8_t)v9, (int8x8_t)v9, 4uLL);
LABEL_35:
          LODWORD(v12) = 0;
          BYTE4(a4) = 0;
          BYTE5(a4) = 0;
          BYTE6(a4) = 0;
          HIBYTE(a4) = 0;
          HIDWORD(v12) = v19.i32[1];
          LODWORD(a4) = v19.i32[0];
          __asm { FMOV            V2.4S, #1.0 }
          v18 = *(double *)&v8;
          a7 = (float32x2_t)vrev64_s32((int32x2_t)a7);
          return pv_adjust_intrinsics_for_viewport(a4, v12, v18, *(double *)&a7, a8, *(double *)&v8, *(double *)&v9);
        }
LABEL_29:
        if (a2 == 3)
          goto LABEL_26;
LABEL_30:
        v8.i32[1] = v9.i32[1];
        v11 = HIDWORD(a5);
        break;
      default:
        goto LABEL_26;
    }
  }
  else
  {
    if (!a3)
    {
      switch(a1)
      {
        case 0:
          goto LABEL_30;
        case 1:
          if (a2 == 2)
            break;
          goto LABEL_20;
        case 2:
          if (a2 != 1)
            goto LABEL_10;
          break;
        case 3:
          if (a2 == 1)
            goto LABEL_33;
          if (a2 == 2)
            goto LABEL_34;
          goto LABEL_25;
        case 4:
          if (a2 == 1)
            goto LABEL_34;
          if (a2 == 2)
            goto LABEL_33;
          goto LABEL_29;
        default:
          break;
      }
    }
LABEL_26:
    v11 = HIDWORD(a5);
    v8.i32[1] = v9.i32[1];
    v8 = vsub_f32(a7, v8);
  }
  LODWORD(v12) = 0;
  BYTE4(a4) = 0;
  BYTE5(a4) = 0;
  BYTE6(a4) = 0;
  HIBYTE(a4) = 0;
  HIDWORD(v12) = v11;
  __asm { FMOV            V2.4S, #1.0 }
  v18 = *(double *)&v8;
  return pv_adjust_intrinsics_for_viewport(a4, v12, v18, *(double *)&a7, a8, *(double *)&v8, *(double *)&v9);
}

double pv_principal_point_from_intrinsics(simd_float3x3 a1)
{
  return *(double *)a1.columns[2].i64;
}

double pv_focal_length_from_intrinsics(simd_float3x3 a1)
{
  a1.columns[0].i32[1] = a1.columns[1].i32[1];
  return *(double *)a1.columns[0].i64;
}

void pv_simd_matrix_make_perspective(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>, int8x16_t a7@<Q0>, float64x2_t a8@<Q1>, double a9@<D2>, double a10@<D3>)
{
  double v13;
  _BOOL4 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float64x2_t v23;
  __int128 v24;
  __int128 v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v31;
  double v33;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float64x2_t v46;
  __int128 v47;

  v13 = a8.f64[1];
  v14 = a10 < 0.0000001 && a10 > -0.0000001;
  if (a5 == 1)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v27 = *(_OWORD *)(a1 + 48);
    v38 = *(_OWORD *)(a1 + 32);
    v39 = v27;
    v28 = *(_OWORD *)(a1 + 80);
    v40 = *(_OWORD *)(a1 + 64);
    v41 = v28;
    v29 = *(_OWORD *)(a1 + 16);
    v36 = *(float64x2_t *)a1;
    v37 = v29;
    pv_adjust_intrinsics(&v36, a2, a3, a4, &v42, a7, a8);
    __asm { FMOV            V1.2D, #1.0 }
    v23 = vsubq_f64(_Q1, vdivq_f64(vaddq_f64(v46, v46), a8));
    *((_QWORD *)&v24 + 1) = 0;
    *(double *)&v24 = (*(double *)&v42 + *(double *)&v42) / a8.f64[0];
    *(_QWORD *)&v25 = 0;
    *((double *)&v25 + 1) = (*((double *)&v44 + 1) + *((double *)&v44 + 1)) / v13;
    if (v14)
    {
      v26 = -0.99999976;
      goto LABEL_10;
    }
    v31 = a9 - a10;
    __asm { FMOV            V5.2D, #-1.0 }
    *(double *)&_Q5 = a10 / (a9 - a10);
    v33 = a9 * a10;
LABEL_13:
    *(float64x2_t *)(a6 + 64) = v23;
    *(_OWORD *)(a6 + 80) = _Q5;
    *(_QWORD *)(a6 + 96) = 0;
    *(_QWORD *)(a6 + 104) = 0;
    *(_OWORD *)(a6 + 112) = COERCE_UNSIGNED_INT64(v33 / v31);
    goto LABEL_14;
  }
  if (a5)
    return;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v15 = *(_OWORD *)(a1 + 48);
  v38 = *(_OWORD *)(a1 + 32);
  v39 = v15;
  v16 = *(_OWORD *)(a1 + 80);
  v40 = *(_OWORD *)(a1 + 64);
  v41 = v16;
  v17 = *(_OWORD *)(a1 + 16);
  v36 = *(float64x2_t *)a1;
  v37 = v17;
  pv_adjust_intrinsics(&v36, a2, a3, a4, &v42, a7, a8);
  __asm { FMOV            V1.2D, #1.0 }
  v23 = vsubq_f64(_Q1, vdivq_f64(vaddq_f64(v46, v46), a8));
  *((_QWORD *)&v24 + 1) = 0;
  *(double *)&v24 = (*(double *)&v42 + *(double *)&v42) / a8.f64[0];
  *(_QWORD *)&v25 = 0;
  *((double *)&v25 + 1) = (*((double *)&v44 + 1) + *((double *)&v44 + 1)) / v13;
  if (!v14)
  {
    v31 = a9 - a10;
    __asm { FMOV            V5.2D, #-1.0 }
    *(double *)&_Q5 = (a9 + a10) / (a9 - a10);
    v33 = (a10 + a10) * a9;
    goto LABEL_13;
  }
  v26 = -1.99999976;
LABEL_10:
  *(float64x2_t *)(a6 + 64) = v23;
  *(_OWORD *)(a6 + 80) = xmmword_1B304F7E0;
  *(_QWORD *)(a6 + 96) = 0;
  *(_QWORD *)(a6 + 104) = 0;
  *(double *)(a6 + 112) = a9 * v26;
  *(_QWORD *)(a6 + 120) = 0;
LABEL_14:
  *(_OWORD *)a6 = v24;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = v25;
  *(_OWORD *)(a6 + 48) = 0u;
}

double pv_adjust_intrinsics@<D0>(float64x2_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>, int8x16_t a6@<Q0>, float64x2_t a7@<Q1>)
{
  float64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float64_t v21;
  double result;
  _OWORD v23[6];

  __asm { FMOV            V3.2D, #0.5 }
  v12 = vaddq_f64(a1[4], _Q3);
  v13 = (int8x16_t)vsubq_f64((float64x2_t)a6, v12);
  v14.i64[0] = 0;
  v14.i64[1] = *(_QWORD *)&a1[2].f64[1];
  v15 = vextq_s8(v14, v14, 8uLL).u64[0];
  if (a4 == 1)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_30;
      case 1:
        if (a3 == 2)
          goto LABEL_26;
LABEL_10:
        if (a3 == 3)
          goto LABEL_32;
        if (a3 == 4)
          goto LABEL_33;
        goto LABEL_30;
      case 2:
        if (a3 == 1)
          goto LABEL_26;
LABEL_20:
        if (a3 == 3)
          goto LABEL_33;
        if (a3 == 4)
          goto LABEL_32;
        goto LABEL_30;
      case 3:
        if (a3 == 1)
          goto LABEL_33;
        if (a3 == 2)
        {
LABEL_32:
          v21 = a1->f64[0];
          v12 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)vsubq_f64((float64x2_t)a6, (float64x2_t)v13), 1), (int64x2_t)v12);
          goto LABEL_34;
        }
LABEL_25:
        if (a3 != 4)
          goto LABEL_30;
        goto LABEL_26;
      case 4:
        if (a3 == 1)
          goto LABEL_32;
        if (a3 == 2)
        {
LABEL_33:
          v21 = a1->f64[0];
          v12 = (float64x2_t)vextq_s8(v13, v13, 8uLL);
LABEL_34:
          v18 = v15;
          v17 = 0uLL;
          *(_QWORD *)&v19 = 0;
          *((float64_t *)&v19 + 1) = v21;
          __asm { FMOV            V3.2D, #1.0 }
          a6 = vextq_s8(a6, a6, 8uLL);
          goto LABEL_35;
        }
LABEL_29:
        if (a3 == 3)
          goto LABEL_26;
LABEL_30:
        *(_QWORD *)&v12.f64[1] = v13.i64[1];
        v16 = v15;
        break;
      default:
        goto LABEL_26;
    }
  }
  else
  {
    if (!a4)
    {
      switch(a2)
      {
        case 0:
          goto LABEL_30;
        case 1:
          if (a3 == 2)
            break;
          goto LABEL_20;
        case 2:
          if (a3 != 1)
            goto LABEL_10;
          break;
        case 3:
          if (a3 == 1)
            goto LABEL_32;
          if (a3 == 2)
            goto LABEL_33;
          goto LABEL_25;
        case 4:
          if (a3 == 1)
            goto LABEL_33;
          if (a3 == 2)
            goto LABEL_32;
          goto LABEL_29;
        default:
          break;
      }
    }
LABEL_26:
    v16 = v15;
    *(_QWORD *)&v12.f64[1] = v13.i64[1];
    v12 = vsubq_f64((float64x2_t)a6, v12);
  }
  v17 = 0uLL;
  v18 = *(unint64_t *)&a1->f64[0];
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = v16;
  __asm { FMOV            V3.2D, #1.0 }
LABEL_35:
  v23[0] = v18;
  v23[1] = v17;
  v23[2] = v19;
  v23[3] = v17;
  v23[4] = v12;
  v23[5] = _Q3;
  *(_QWORD *)&result = pv_adjust_intrinsics_for_viewport((uint64_t)v23, a5, (float64x2_t)a6, a7).n128_u64[0];
  return result;
}

__n128 pv_principal_point_from_intrinsics(__n128 *a1)
{
  return a1[4];
}

__n128 pv_focal_length_from_intrinsics(uint64_t a1)
{
  return *(__n128 *)a1;
}

double pv_near_plane_lrtb(float a1, float a2, float a3)
{
  float v5;
  double v6;

  v5 = tanf(a1 * 0.5);
  *(float *)&v6 = -(float)((float)(v5 * a3) * a2);
  *((float *)&v6 + 1) = (float)(v5 * a3) * a2;
  return v6;
}

double pv_near_plane_lrtb@<D0>(double a1@<D0>, double a2@<D1>, double a3@<D2>, _OWORD *a4@<X8>)
{
  __int128 v6;
  double result;
  __int128 v8;

  *(double *)&v6 = tan(a1 * 0.5) * a3;
  result = -*(double *)&v6;
  *(double *)&v8 = -(*(double *)&v6 * a2);
  *((double *)&v8 + 1) = *(double *)&v6 * a2;
  *((double *)&v6 + 1) = -*(double *)&v6;
  *a4 = v8;
  a4[1] = v6;
  return result;
}

BOOL pv_simd_matrix_project(int a1, int a2, int a3, _OWORD *a4, float32x4_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float32x4_t a17, float32x2_t a18)
{
  uint64_t v18;
  float32x4_t v19;
  float v20;
  int8x16_t v21;
  int8x16_t v27;
  int8x16_t v28;
  __int128 v29;
  int8x16_t v31;
  int8x16_t v32;
  _OWORD v33[4];
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;

  v18 = 0;
  v33[0] = a6;
  v33[1] = a7;
  v33[2] = a8;
  v33[3] = a9;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v34 + v18 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a14, COERCE_FLOAT(v33[v18])), a15, *(float32x2_t *)&v33[v18], 1), a16, (float32x4_t)v33[v18], 2), a17, (float32x4_t)v33[v18], 3);
    ++v18;
  }
  while (v18 != 4);
  v19 = vaddq_f32(v37, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, a5.f32[0]), v35, *(float32x2_t *)a5.f32, 1), v36, a5, 2));
  v20 = v19.f32[3];
  if (v19.f32[3] != 0.0)
  {
    v21 = (int8x16_t)vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3));
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)v27.i8 = vmul_f32(vadd_f32(*(float32x2_t *)v21.i8, _D1), (float32x2_t)0x3F0000003F000000);
    v27.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
    if (a1)
    {
      if (!a2)
        goto LABEL_6;
    }
    else
    {
      v31.i64[0] = v27.i64[0];
      *(float *)&v31.i32[2] = (float)(*(float *)&v21.i32[2] + 1.0) * 0.5;
      v31.i32[3] = v27.i32[3];
      v27 = v31;
      if (!a2)
      {
LABEL_6:
        if (!a3)
        {
LABEL_8:
          *(float32x2_t *)&v29 = vmul_f32(*(float32x2_t *)v27.i8, a18);
          *((_QWORD *)&v29 + 1) = vextq_s8(v27, v27, 8uLL).u64[0];
          *a4 = v29;
          return v20 != 0.0;
        }
LABEL_7:
        v28.i32[0] = v27.i32[0];
        *(float *)&v28.i32[1] = 1.0 - *(float *)&v27.i32[1];
        v28.i64[1] = v27.i64[1];
        v27 = v28;
        goto LABEL_8;
      }
    }
    *(float *)v32.i32 = 1.0 - *(float *)v27.i32;
    v32.i32[1] = v27.i32[1];
    v32.i64[1] = v27.i64[1];
    v27 = v32;
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  return v20 != 0.0;
}

float32x2_t pv_ndc_to_viewport(int a1, int a2, int a3, float32x2_t a4, float32x2_t a5)
{
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v13;

  __asm { FMOV            V2.2S, #1.0 }
  v10 = vmul_f32(vadd_f32(a4, _D2), (float32x2_t)0x3F0000003F000000);
  if (a1)
  {
    if (!a2)
      goto LABEL_3;
LABEL_7:
    v13.f32[0] = 1.0 - v10.f32[0];
    v13.i32[1] = v10.i32[1];
    v10 = v13;
    if (!a3)
      return vmul_f32(v10, a5);
    goto LABEL_4;
  }
  if (a2)
    goto LABEL_7;
LABEL_3:
  if (a3)
  {
LABEL_4:
    v11.i32[0] = v10.i32[0];
    v11.f32[1] = 1.0 - v10.f32[1];
    v10 = v11;
  }
  return vmul_f32(v10, a5);
}

BOOL pv_simd_matrix_project(float64x2_t *a1, __int128 *a2, float64x2_t *a3, int a4, int a5, int a6, float64x2_t *a7, float64x2_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29)
{
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  int32x4_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  float64x2_t v53;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v65;
  float64x2_t vars0;

  v29 = 0;
  v31 = *a1;
  v30 = a1[1];
  v33 = *a3;
  v32 = a3[1];
  v35 = a3[2];
  v34 = a3[3];
  v37 = a3[4];
  v36 = a3[5];
  v39 = a3[6];
  v38 = a3[7];
  v40 = a2[5];
  a26 = a2[4];
  a27 = v40;
  v41 = a2[7];
  a28 = a2[6];
  a29 = v41;
  v42 = a2[1];
  a22 = *a2;
  a23 = v42;
  v43 = a2[3];
  a24 = a2[2];
  a25 = v43;
  v65 = 0u;
  vars0 = 0u;
  do
  {
    v45 = *(float64x2_t *)((char *)&a22 + v29);
    v44 = *(float64x2_t *)((char *)&a22 + v29 + 16);
    v46 = (float64x2_t *)((char *)&v65 + v29);
    *v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v45.f64[0]), v35, v45, 1), v37, v44.f64[0]), v39, v44, 1);
    v46[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v45.f64[0]), v34, v45, 1), v36, v44.f64[0]), v38, v44, 1);
    v29 += 32;
  }
  while (v29 != 128);
  v47 = 0u;
  v48 = vaddq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vars0, v31.f64[0]), (float64x2_t)0, v31, 1), (float64x2_t)0, v30.f64[0]));
  v49 = v48.f64[1];
  if (v48.f64[1] != 0.0)
  {
    v47.i32[0] = 0;
    v50 = vaddq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, v31.f64[0]), (float64x2_t)0, v31, 1), (float64x2_t)0, v30.f64[0]));
    v51 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1);
    v52 = (int8x16_t)vdivq_f64(v48, v51);
    v53 = vdivq_f64(v50, v51);
    __asm { FMOV            V2.2D, #1.0 }
    v59 = vaddq_f64(v53, _Q2);
    __asm { FMOV            V2.2D, #0.5 }
    v61 = vmulq_f64(v59, _Q2);
    LODWORD(_Q2.f64[0]) = a4;
    v48.f64[0] = (*(double *)v52.i64 + 1.0) * 0.5;
    *(_QWORD *)&v48.f64[0] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q2, v47), 0), (int8x16_t)v48, v52).u64[0];
    v62.f64[0] = v48.f64[0];
    *(_QWORD *)&v62.f64[1] = v52.i64[1];
    if (a5)
    {
      v63.f64[0] = 1.0 - v61.f64[0];
      v63.f64[1] = v61.f64[1];
      *(_QWORD *)&v48.f64[1] = v52.i64[1];
      v61 = v63;
      v62 = v48;
    }
    if (a6)
      v61.f64[1] = 1.0 - v61.f64[1];
    *a7 = vmulq_f64(v61, a8);
    a7[1] = v62;
  }
  return v49 != 0.0;
}

float64x2_t pv_ndc_to_viewport@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, float64x2_t *a5@<X8>, float64x2_t a6@<Q0>, int32x4_t a7@<Q2>)
{
  int8x16_t v7;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t result;

  a7.i32[0] = 0;
  v7 = *(int8x16_t *)(a1 + 16);
  __asm { FMOV            V3.2D, #1.0 }
  v13 = vaddq_f64(*(float64x2_t *)a1, _Q3);
  __asm { FMOV            V3.2D, #0.5 }
  v14 = vmulq_f64(v13, _Q3);
  LODWORD(_Q3.f64[0]) = a2;
  v15 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q3, a7), 0);
  _Q3.f64[0] = (*(double *)v7.i64 + 1.0) * 0.5;
  *(_QWORD *)&_Q3.f64[0] = vbslq_s8(v15, (int8x16_t)_Q3, v7).u64[0];
  v17.f64[0] = _Q3.f64[0];
  v17.f64[1] = *(float64_t *)(a1 + 24);
  if (a3)
  {
    v18.f64[0] = 1.0 - v14.f64[0];
    v18.f64[1] = v14.f64[1];
    _Q3.f64[1] = *(float64_t *)(a1 + 24);
    v14 = v18;
    v17 = _Q3;
  }
  if (a4)
    v14.f64[1] = 1.0 - v14.f64[1];
  result = vmulq_f64(v14, a6);
  *a5 = result;
  a5[1] = v17;
  return result;
}

BOOL pv_simd_matrix_unproject(int a1, int a2, int a3, float32x4_t *a4, int8x16_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float32x4_t a17, float32x2_t a18)
{
  int8x16_t v18;
  unint64_t v20;
  int8x16_t v21;
  unsigned int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v36;
  _OWORD v37[4];
  simd_float4x4 v38;
  simd_float4x4 v39;

  *(float32x2_t *)v21.i8 = vdiv_f32(*(float32x2_t *)a5.i8, a18);
  v20 = vextq_s8(a5, a5, 8uLL).u64[0];
  *(float *)v18.i32 = 1.0 - *(float *)v21.i32;
  v18.i32[1] = v21.i32[1];
  v21.i64[1] = v20;
  v18.i32[2] = a5.i32[2];
  if (a2)
    v22 = -1;
  else
    v22 = 0;
  v23 = vbslq_s8((int8x16_t)vdupq_n_s32(v22), v18, v21);
  v24 = v23;
  v24.i32[3] = HIDWORD(v20);
  if (a3)
  {
    v25.i32[0] = v23.i32[0];
    *(float *)&v25.i32[1] = 1.0 - *(float *)&v23.i32[1];
    v25.i64[1] = __PAIR64__(v24.u32[3], v23.u32[2]);
    v24 = v25;
  }
  __asm { FMOV            V6.2S, #-1.0 }
  *(float32x2_t *)v31.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), _D6);
  v31.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
  v32 = v31;
  v32.i32[3] = v24.i32[3];
  if (a1)
  {
    v36 = v32;
  }
  else
  {
    v31.f32[2] = (float)(*(float *)&v24.i32[2] + *(float *)&v24.i32[2]) + -1.0;
    v31.i32[3] = v24.i32[3];
    v36 = v31;
  }
  v33 = 0;
  v37[0] = a6;
  v37[1] = a7;
  v37[2] = a8;
  v37[3] = a9;
  memset(&v38, 0, sizeof(v38));
  do
  {
    v38.columns[v33] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a14, COERCE_FLOAT(v37[v33])), a15, *(float32x2_t *)&v37[v33], 1), a16, (float32x4_t)v37[v33], 2), a17, (float32x4_t)v37[v33], 3);
    ++v33;
  }
  while (v33 != 4);
  v39 = __invert_f4(v38);
  v34 = vaddq_f32((float32x4_t)v39.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v39.columns[0], v36.f32[0]), (float32x4_t)v39.columns[1], *(float32x2_t *)v36.f32, 1), (float32x4_t)v39.columns[2], v36, 2));
  if (v34.f32[3] != 0.0)
    *a4 = vdivq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 3));
  return v34.f32[3] != 0.0;
}

double pv_viewport_to_ndc(int a1, int a2, int a3, int8x16_t a4, float32x2_t a5, double a6, double a7, int8x16_t a8)
{
  int8x16_t v8;
  unsigned int v9;
  unint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  double v18;
  double result;

  *(float32x2_t *)v8.i8 = vdiv_f32(*(float32x2_t *)a4.i8, a5);
  *(float *)a8.i32 = 1.0 - *(float *)v8.i32;
  a8.i32[1] = v8.i32[1];
  v8.i64[1] = vextq_s8(a4, a4, 8uLL).u64[0];
  a8.i32[2] = a4.i32[2];
  if (a2)
    v9 = -1;
  else
    v9 = 0;
  v10 = vbslq_s8((int8x16_t)vdupq_n_s32(v9), a8, v8).u64[0];
  v11 = (float32x2_t)v10;
  if (a3)
  {
    v12.i32[0] = v10;
    v12.f32[1] = 1.0 - *((float *)&v10 + 1);
    v11 = v12;
  }
  __asm { FMOV            V2.2S, #-1.0 }
  v18 = COERCE_DOUBLE(vadd_f32(vadd_f32(v11, v11), _D2));
  result = v18;
  if (!a1)
    return v18;
  return result;
}

BOOL pv_simd_matrix_unproject(uint64_t a1, __int128 *a2, float64x2_t *a3, int a4, int a5, int a6, float64x2_t *a7, float64x2_t a8, uint64_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, float64x2_t a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33)
{
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  float64x2_t v38;
  uint64_t v39;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t *v60;
  int8x16_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v65;
  int8x16_t vars0;

  v34 = (int8x16_t)vdivq_f64(*(float64x2_t *)a1, a8);
  *(double *)v35.i64 = 1.0 - *(double *)v34.i64;
  v35.i64[1] = v34.i64[1];
  v36 = *(int8x16_t *)(a1 + 16);
  if (a5)
    v37 = -1;
  else
    v37 = 0;
  v38 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v37), v35, v34);
  if (a6)
    v38.f64[1] = 1.0 - v38.f64[1];
  v39 = 0;
  __asm { FMOV            V2.2D, #-1.0 }
  v46 = *a3;
  v45 = a3[1];
  v47 = (int8x16_t)vaddq_f64(vaddq_f64(v38, v38), _Q2);
  v49 = a3[2];
  v48 = a3[3];
  v51 = a3[4];
  v50 = a3[5];
  v53 = a3[6];
  v52 = a3[7];
  v54 = a2[5];
  a30 = a2[4];
  a31 = v54;
  v55 = a2[7];
  a32 = a2[6];
  a33 = v55;
  v56 = a2[1];
  a26 = *a2;
  a27 = v56;
  v57 = a2[3];
  a28 = a2[2];
  a29 = v57;
  a24 = 0u;
  a25 = 0u;
  a22 = 0u;
  a23 = 0u;
  a20 = 0u;
  a21 = 0u;
  a18 = 0u;
  a19 = 0u;
  do
  {
    v59 = *(float64x2_t *)((char *)&a26 + v39);
    v58 = *(float64x2_t *)((char *)&a26 + v39 + 16);
    v60 = (float64x2_t *)((char *)&a18 + v39);
    *v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v59.f64[0]), v49, v59, 1), v51, v58.f64[0]), v53, v58, 1);
    v60[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v59.f64[0]), v48, v59, 1), v50, v58.f64[0]), v52, v58, 1);
    v39 += 32;
  }
  while (v39 != 128);
  LODWORD(v45.f64[0]) = 0;
  LODWORD(v46.f64[0]) = a4;
  v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, (int32x4_t)v45), 0);
  _Q2.f64[0] = *(double *)v36.i64 + *(double *)v36.i64 + -1.0;
  vars0 = vbslq_s8(v61, (int8x16_t)_Q2, v36);
  v65 = (float64x2_t)vbslq_s8(v61, v47, v47);
  a30 = a22;
  a31 = a23;
  a32 = a24;
  a33 = a25;
  a26 = a18;
  a27 = a19;
  a28 = a20;
  a29 = a21;
  __invert_d4();
  v62 = vaddq_f64(a17, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a11, v65.f64[0]), a13, v65, 1), a15, *(double *)vars0.i64));
  if (v62.f64[1] != 0.0)
  {
    v63 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v62, 1);
    *a7 = vdivq_f64(vaddq_f64(a16, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a10, v65.f64[0]), a12, v65, 1), a14, *(double *)vars0.i64)), v63);
    a7[1] = vdivq_f64(v62, v63);
  }
  return v62.f64[1] != 0.0;
}

int8x16_t pv_viewport_to_ndc@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, float64x2_t a6@<Q0>, int32x4_t a7@<Q2>)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  float64x2_t v11;
  float64x2_t v17;
  int8x16_t v18;
  int8x16_t result;

  v7 = (int8x16_t)vdivq_f64(*(float64x2_t *)a1, a6);
  a7.i64[0] = 1.0;
  *(double *)v8.i64 = 1.0 - *(double *)v7.i64;
  v8.i64[1] = v7.i64[1];
  v9 = *(int8x16_t *)(a1 + 16);
  if (a3)
    v10 = -1;
  else
    v10 = 0;
  v11 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v10), v8, v7);
  if (a4)
  {
    *(double *)a7.i64 = 1.0 - v11.f64[1];
    v11.f64[1] = 1.0 - v11.f64[1];
  }
  a7.i32[0] = 0;
  __asm { FMOV            V3.2D, #-1.0 }
  v17 = vaddq_f64(vaddq_f64(v11, v11), _Q3);
  LODWORD(_Q3.f64[0]) = a2;
  v18 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q3, a7), 0);
  _Q3.f64[0] = *(double *)v9.i64 + *(double *)v9.i64 + -1.0;
  result = vbslq_s8(v18, (int8x16_t)_Q3, v9);
  *(float64x2_t *)a5 = v17;
  *(int8x16_t *)(a5 + 16) = result;
  return result;
}

BOOL pv_simd_matrix_unproject_to_plane(int a1, int a2, int a3, int a4, float32x4_t *a5, int8x16_t a6, simd_float4 a7, simd_float4 a8, simd_float4 a9, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, simd_float4 a14, simd_float4 a15, simd_float4 a16, simd_float4 a17, float32x4_t a18, float32x2_t a19)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v41;
  float32x4_t v42;
  simd_float3x3 v43;
  simd_float3x3 v44;
  simd_float4x4 v45;
  simd_float4x4 v46;
  simd_float4x4 v47;

  v45.columns[0] = a14;
  v45.columns[1] = a15;
  v45.columns[2] = a16;
  v45.columns[3] = a17;
  v46 = __invert_f4(v45);
  *(uint64_t *)((char *)v42.i64 + 4) = 0;
  v42.i32[0] = 0;
  v28 = pv_simd_matrix_unproject(a2, a3, a4, &v42, a6, (__n128)v46.columns[0], (__n128)v46.columns[1], (__n128)v46.columns[2], (__n128)v46.columns[3], v24, v25, v26, v27, (float32x4_t)v46.columns[1], (float32x4_t)v46.columns[2], (float32x4_t)v46.columns[3], a18, a19);
  if (v28)
  {
    v47.columns[0] = a7;
    v47.columns[1] = a8;
    v47.columns[2] = a9;
    v47.columns[3] = (simd_float4)a10;
    *(double *)v43.columns[0].i64 = pv_simd_matrix_get_rotation_matrix(v47);
    v29 = PVAxesFloat[a1];
    v30 = vmulq_n_f32((float32x4_t)v43.columns[0], v29.f32[0]);
    v43.columns[0].i32[3] = 0;
    v31 = vmlaq_lane_f32(v30, (float32x4_t)v43.columns[1], *(float32x2_t *)v29.f32, 1);
    v43.columns[1].i32[3] = 0;
    v32 = vmlaq_laneq_f32(v31, (float32x4_t)v43.columns[2], v29, 2);
    v43.columns[2].i32[3] = 0;
    v33 = vmulq_f32(a10, v32);
    v34 = vmulq_f32(v42, v32);
    v41 = vsubq_f32(vmulq_n_f32(v42, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)))).f32[0]), a10);
    v44 = __invert_f3(v43);
    *a5 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v44.columns[0], v41.f32[0]), (float32x4_t)v44.columns[1], *(float32x2_t *)v41.f32, 1), (float32x4_t)v44.columns[2], v41, 2);
  }
  return v28;
}

#error "1B27D3F7C: call analysis failed (funcsize=140)"

float32x2_t pv_fov_from_projection(simd_float4x4 a1)
{
  float v1;
  float v3;
  float v4;

  v3 = a1.columns[1].f32[1];
  v4 = atanf(1.0 / a1.columns[0].f32[0]);
  v1 = atanf(1.0 / v3);
  return vadd_f32((float32x2_t)__PAIR64__(LODWORD(v1), LODWORD(v4)), (float32x2_t)__PAIR64__(LODWORD(v1), LODWORD(v4)));
}

long double pv_fov_from_projection(double *a1)
{
  long double v2;
  long double v4;

  v2 = atan(1.0 / *a1);
  v4 = v2 + v2;
  atan(1.0 / a1[5]);
  return v4;
}

float32x2_t pv_fov_from_intrinsics(float a1, double a2, double a3, double a4)
{
  float v4;
  float v6;
  float v7;
  float v8;

  v6 = *((float *)&a4 + 1);
  v7 = *((float *)&a2 + 1);
  v8 = atanf(*(float *)&a4 / (float)(a1 + a1));
  v4 = atanf(v6 / (float)(v7 + v7));
  return vadd_f32((float32x2_t)__PAIR64__(LODWORD(v4), LODWORD(v8)), (float32x2_t)__PAIR64__(LODWORD(v4), LODWORD(v8)));
}

float pv_fov_for_focal_length_and_side(float a1, float a2)
{
  float v2;

  v2 = atanf(a2 / (float)(a1 + a1));
  return v2 + v2;
}

long double pv_fov_from_intrinsics(double *a1, __n128 a2)
{
  long double v3;
  double v5;
  long double v6;

  v5 = a2.n128_f64[1];
  v3 = atan(a2.n128_f64[0] / (*a1 + *a1));
  v6 = v3 + v3;
  atan(v5 / (a1[5] + a1[5]));
  return v6;
}

long double pv_fov_for_focal_length_and_side(double a1, double a2)
{
  long double v2;

  v2 = atan(a2 / (a1 + a1));
  return v2 + v2;
}

__n64 pv_near_far_planes_from_projection(int a1, double a2, double a3, __n128 a4, __n128 a5)
{
  __n64 result;

  if (a1 == 1)
  {
    result.n64_f32[0] = a5.n128_f32[2] / a4.n128_f32[2];
    result.n64_f32[1] = (float)-a5.n128_f32[2] / (float)(-1.0 - a4.n128_f32[2]);
  }
  else
  {
    result.n64_u64[0] = 0;
    if (!a1)
    {
      result.n64_f32[0] = (float)((float)(-1.0 - a4.n128_f32[2])
                                * (float)((float)(a5.n128_f32[2] * -2.0)
                                        / (float)(-2.0 - (float)(a4.n128_f32[2] + a4.n128_f32[2]))))
                        / (float)(1.0 - a4.n128_f32[2]);
      result.n64_f32[1] = (float)(a5.n128_f32[2] * -2.0) / (float)(-2.0 - (float)(a4.n128_f32[2] + a4.n128_f32[2]));
    }
  }
  return result;
}

double pv_near_far_planes_from_projection(uint64_t a1, int a2)
{
  double v2;
  double v3;
  double result;

  v2 = *(double *)(a1 + 80);
  v3 = *(double *)(a1 + 112);
  if (a2 == 1)
    return v3 / v2;
  result = 0.0;
  if (!a2)
    return (-1.0 - v2) * (v3 * -2.0 / (-2.0 - (v2 + v2))) / (1.0 - v2);
  return result;
}

float pv_focal_length_for_fov_and_side(float a1, float a2)
{
  return (float)(a2 * 0.5) / tanf(a1 * 0.5);
}

long double pv_focal_length_for_fov_and_side(double a1, double a2)
{
  return a2 * 0.5 / tan(a1 * 0.5);
}

float pv_side_length_for_fov_and_distance(float a1, float a2)
{
  float v3;
  float v4;

  v3 = tanf(a1 * 0.5);
  v4 = fabsf(a2);
  return (float)(v4 * v3) + (float)(v4 * v3);
}

long double pv_side_length_for_fov_and_distance(double a1, double a2)
{
  long double v3;
  double v4;

  v3 = tan(a1 * 0.5);
  v4 = fabs(a2);
  return v4 * v3 + v4 * v3;
}

float32x2_t pv_principal_point_from_resolution(float32x2_t a1)
{
  return vadd_f32(vmul_f32(a1, (float32x2_t)0x3F0000003F000000), (float32x2_t)0xBF000000BF000000);
}

double pv_principal_point_from_resolution(float64x2_t a1)
{
  float64x2_t v6;
  double result;

  __asm { FMOV            V1.2D, #0.5 }
  v6 = vmulq_f64(a1, _Q1);
  __asm { FMOV            V1.2D, #-0.5 }
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(v6, _Q1);
  return result;
}

float32x2_t pv_resolution_from_principal_point(float32x2_t a1)
{
  float32x2_t v1;

  v1 = vadd_f32(a1, (float32x2_t)0x3F0000003F000000);
  return vadd_f32(v1, v1);
}

double pv_resolution_from_principal_point(float64x2_t a1)
{
  float64x2_t v6;
  double result;

  __asm { FMOV            V1.2D, #0.5 }
  v6 = vaddq_f64(a1, _Q1);
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(v6, v6);
  return result;
}

void pv_intrinsics_from_focal_length_and_principal_point()
{
  __asm { FMOV            V2.4S, #1.0 }
}

__n128 pv_intrinsics_from_focal_length_and_principal_point@<Q0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)&v3 = 0;
  *((_QWORD *)&v3 + 1) = a2.n128_u64[1];
  *(_OWORD *)a1 = a2.n128_u64[0];
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 64) = a3;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void pv_intrinsics_from_focal_length_and_resolution()
{
  __asm { FMOV            V2.4S, #1.0 }
}

float64x2_t pv_intrinsics_from_focal_length_and_resolution@<Q0>(uint64_t a1@<X8>, __n128 a2@<Q0>, float64x2_t a3@<Q1>)
{
  float64x2_t v8;
  unint64_t v10;
  __int128 v11;
  float64x2_t result;

  __asm { FMOV            V2.2D, #0.5 }
  v8 = vmulq_f64(a3, _Q2);
  __asm { FMOV            V2.2D, #-0.5 }
  v10 = a2.n128_u64[0];
  *(_QWORD *)&v11 = 0;
  *((_QWORD *)&v11 + 1) = a2.n128_u64[1];
  result = vaddq_f64(v8, _Q2);
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = _Q1;
  return result;
}

float pv_intrinsics_from_fov_side_and_resolution(float a1, float a2)
{
  float result;

  result = (float)(a2 * 0.5) / tanf(a1 * 0.5);
  __asm { FMOV            V2.4S, #1.0 }
  return result;
}

float64x2_t pv_intrinsics_from_fov_side_and_resolution@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, float64x2_t a4@<Q2>)
{
  double v5;
  long double v6;
  unint64_t v13;
  __int128 v14;
  float64x2_t result;

  v5 = a3 * 0.5;
  v6 = tan(a2 * 0.5);
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V2.2D, #-0.5
  }
  *(double *)&v13 = v5 / v6;
  *(_QWORD *)&v14 = 0;
  *((double *)&v14 + 1) = v5 / v6;
  result = vaddq_f64(vmulq_f64(a4, _Q1), _Q2);
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = _Q1;
  return result;
}

void pv_adjust_intrinsics_origin_to_lower_left()
{
  __asm { FMOV            V2.4S, #1.0 }
}

float pv_adjust_intrinsics_by_cardinal_angle(int a1, int32x2_t a2, double a3)
{
  double v3;
  int32x2_t v4;
  double v10;

  a2.i32[1] = HIDWORD(a3);
  v3 = COERCE_DOUBLE(vrev64_s32(a2));
  if (a1 == 1)
    *(double *)&v4 = v3;
  else
    v4 = a2;
  if (a1 != 2)
    a2 = v4;
  __asm { FMOV            V2.4S, #1.0 }
  if (_ZF)
    v10 = v3;
  else
    v10 = *(double *)&a2;
  return *(float *)&v10;
}

float pv_adjust_intrinsics_for_viewport(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  char v7;
  char i;
  char v9;
  float v10;
  float32x2_t v11;
  double v18;
  double v19;

  v7 = 0;
  for (i = 1; ; i = 0)
  {
    v9 = i;
    v19 = a4;
    v10 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v7 & 1)));
    v18 = a5;
    if (vabds_f32(v10, *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v7 & 1)))) >= 0.0001)
      break;
    v7 = 1;
    if ((v9 & 1) == 0)
      return *(float *)&a1;
  }
  HIDWORD(a1) = HIDWORD(a2);
  if ((float)(*(float *)&a5 / *((float *)&a5 + 1)) >= (float)(*(float *)&a4 / *((float *)&a4 + 1)))
  {
    v11 = (float32x2_t)vdup_lane_s32((int32x2_t)vdiv_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a4), 0);
  }
  else
  {
    *(float *)&a7 = *((float *)&a5 + 1) / *((float *)&a4 + 1);
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  }
  LODWORD(a1) = vmul_f32(*(float32x2_t *)&a1, v11).u32[0];
  __asm { FMOV            V2.4S, #1.0 }
  return *(float *)&a1;
}

__n128 pv_adjust_intrinsics_origin_to_lower_left@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  float64x2_t v8;
  float64x2_t v9;
  __n128 result;

  __asm { FMOV            V2.2D, #0.5 }
  v8 = vaddq_f64(a1[4], _Q2);
  v9 = vsubq_f64(a3, v8);
  v8.f64[1] = v9.f64[1];
  v9.f64[0] = a1->f64[0];
  _Q2.f64[0] = 0.0;
  _Q2.f64[1] = a1[2].f64[1];
  *(float64x2_t *)a2 = v9;
  *(_OWORD *)(a2 + 16) = 0u;
  *(float64x2_t *)(a2 + 32) = _Q2;
  *(_OWORD *)(a2 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a2 + 64) = v8;
  *(__n128 *)(a2 + 80) = result;
  return result;
}

__n128 pv_adjust_intrinsics_by_cardinal_angle@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>)
{
  float64x2_t v4;
  float64x2_t v5;
  int8x16_t v6;
  float64x2_t v7;
  __int128 v8;
  __n128 result;

  v4 = *(float64x2_t *)(a1 + 64);
  *(_QWORD *)&v5.f64[0] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u64[0];
  v6 = *(int8x16_t *)a1;
  v6.i64[1] = *(_QWORD *)(a1 + 40);
  switch(a2)
  {
    case 3:
      v6 = vextq_s8(v6, v6, 8uLL);
      v7.f64[0] = a4.f64[1] - v5.f64[0];
      v7.f64[1] = *(float64_t *)(a1 + 64);
      v4 = v7;
      break;
    case 2:
      v4.f64[1] = v5.f64[0];
      v4 = vsubq_f64(a4, v4);
      break;
    case 1:
      v6 = vextq_s8(v6, v6, 8uLL);
      v5.f64[1] = a4.f64[0] - v4.f64[0];
      v4 = v5;
      break;
  }
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = v6.i64[1];
  *(_OWORD *)a3 = v6.u64[0];
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a3 + 64) = v4;
  *(__n128 *)(a3 + 80) = result;
  return result;
}

__n128 pv_adjust_intrinsics_for_viewport@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q1>)
{
  char v4;
  char i;
  char v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  float64x2_t v22;
  float64x2_t v23;

  v4 = 0;
  for (i = 1; ; i = 0)
  {
    v6 = i;
    v23 = a3;
    v7 = *(double *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
    v22 = a4;
    if (vabdd_f64(v7, *(double *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)))) >= 0.0001)
      break;
    v4 = 1;
    if ((v6 & 1) == 0)
    {
      v8 = *(_OWORD *)(a1 + 48);
      a2[2] = *(_OWORD *)(a1 + 32);
      a2[3] = v8;
      v9 = *(_OWORD *)(a1 + 80);
      a2[4] = *(_OWORD *)(a1 + 64);
      a2[5] = v9;
      result = *(__n128 *)a1;
      v11 = *(_OWORD *)(a1 + 16);
      *a2 = *(_OWORD *)a1;
      a2[1] = v11;
      return result;
    }
  }
  v12 = *(float64x2_t *)a1;
  v13 = *(float64x2_t *)(a1 + 64);
  if (a4.f64[0] / a4.f64[1] >= a3.f64[0] / a3.f64[1])
  {
    a3.f64[0] = vdivq_f64(a4, a3).f64[0];
    v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3.f64[0], 0);
    v15 = vmulq_n_f64(v13, a3.f64[0]);
    v15.f64[1] = v15.f64[1] + (a3.f64[1] * a3.f64[0] - a4.f64[1]) * -0.5;
  }
  else
  {
    v14 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a4.f64[1] / a3.f64[1]), 0);
    v15 = vmulq_n_f64(v13, a4.f64[1] / a3.f64[1]);
    v15.f64[0] = v15.f64[0] + (a3.f64[0] * (a4.f64[1] / a3.f64[1]) - a4.f64[0]) * -0.5;
  }
  v12.f64[1] = *(float64_t *)(a1 + 40);
  v16 = vmulq_f64(v12, v14);
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = *(_QWORD *)&v16.f64[1];
  *a2 = *(unint64_t *)&v16.f64[0];
  a2[1] = 0u;
  a2[2] = v17;
  a2[3] = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  a2[4] = v15;
  a2[5] = result;
  return result;
}

double pv_adjust_transform_orientation(int a1, unsigned int a2, int a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __float2 v11;
  uint64_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float32x4_t v25;
  _OWORD v30[4];
  _OWORD v31[4];

  if (a3 == 1)
  {
    switch(a1)
    {
      case 1:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F9B0;
        break;
      case 2:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F9D8;
        break;
      case 3:
        if (a2 > 4)
          goto LABEL_22;
        v7 = &unk_1B304FA28;
        break;
      case 4:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304FA00;
        break;
      default:
        goto LABEL_22;
    }
  }
  else
  {
    if (a3)
    {
LABEL_22:
      v8 = 0;
      goto LABEL_23;
    }
    switch(a1)
    {
      case 1:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F910;
        break;
      case 2:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F938;
        break;
      case 3:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F988;
        break;
      case 4:
        if (a2 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F960;
        break;
      default:
        goto LABEL_22;
    }
  }
  v8 = v7[a2];
LABEL_23:
  v9 = vrsqrte_f32((float32x2_t)1065353216);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v9, v9)));
  v25 = vmulq_n_f32((float32x4_t)xmmword_1B304F250, vmul_f32(v10, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v10, v10))).f32[0]);
  v11 = __sincosf_stret(PVCardinalAnglesFloat[v8]);
  v12 = 0;
  v13 = v25;
  v14 = vmulq_f32(v13, v13).f32[0];
  v15 = (float)(1.0 - v11.__cosval) * vmuls_lane_f32(v13.f32[0], *(float32x2_t *)v13.f32, 1);
  v16 = vmuls_lane_f32(v11.__sinval, v25, 2);
  v17 = (float)(1.0 - v11.__cosval) * vmuls_lane_f32(v13.f32[0], v13, 2);
  v18 = vmuls_lane_f32(v11.__sinval, *(float32x2_t *)v25.f32, 1);
  v19 = (float)(1.0 - v11.__cosval) * vmuls_lane_f32(v25.f32[1], v25, 2);
  v13.f32[0] = v19 - (float)(v11.__sinval * v25.f32[0]);
  *(float *)&v20 = (float)(v11.__sinval * v25.f32[0]) + v19;
  HIDWORD(v21) = 0;
  *(float *)&v21 = v11.__cosval + (float)((float)(1.0 - v11.__cosval) * v14);
  *((float *)&v21 + 1) = v16 + v15;
  *((float *)&v21 + 2) = v17 - v18;
  *(float *)&v22 = v15 - v16;
  *((float *)&v22 + 1) = v11.__cosval
                       + (float)((float)(1.0 - v11.__cosval) * vmuls_lane_f32(v25.f32[1], *(float32x2_t *)v25.f32, 1));
  *((_QWORD *)&v22 + 1) = v20;
  HIDWORD(v23) = 0;
  *(float *)&v23 = v18 + v17;
  DWORD1(v23) = v13.i32[0];
  *((float *)&v23 + 2) = v11.__cosval + (float)((float)(1.0 - v11.__cosval) * vmuls_lane_f32(v25.f32[2], v25, 2));
  v30[0] = v21;
  v30[1] = v22;
  v30[2] = v23;
  v30[3] = xmmword_1B304EFF0;
  memset(v31, 0, sizeof(v31));
  do
  {
    v31[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, COERCE_FLOAT(v30[v12])), a5, *(float32x2_t *)&v30[v12], 1), a6, (float32x4_t)v30[v12], 2), a7, (float32x4_t)v30[v12], 3);
    ++v12;
  }
  while (v12 != 4);
  return *(double *)v31;
}

void pv_adjust_transform_orientation(float64x2_t *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  __double2 v9;
  uint64_t v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  _OWORD v27[6];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  if (a4 == 1)
  {
    switch(a2)
    {
      case 1:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F9B0;
        break;
      case 2:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F9D8;
        break;
      case 3:
        if (a3 > 4)
          goto LABEL_22;
        v7 = &unk_1B304FA28;
        break;
      case 4:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304FA00;
        break;
      default:
        goto LABEL_22;
    }
  }
  else
  {
    if (a4)
    {
LABEL_22:
      v8 = 0;
      goto LABEL_23;
    }
    switch(a2)
    {
      case 1:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F910;
        break;
      case 2:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F938;
        break;
      case 3:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F988;
        break;
      case 4:
        if (a3 >= 5)
          goto LABEL_22;
        v7 = &unk_1B304F960;
        break;
      default:
        goto LABEL_22;
    }
  }
  v8 = v7[a3];
LABEL_23:
  v9 = __sincos_stret(PVCardinalAnglesDouble[v8]);
  v10 = 0;
  v11 = (1.0 - v9.__cosval) * 0.0;
  v12 = v11 - v9.__sinval * 0.0;
  *(double *)&v13 = v9.__cosval + v11;
  *(double *)&v14 = v11 - v9.__sinval;
  *((double *)&v14 + 1) = v9.__cosval + v11;
  *((double *)&v13 + 1) = v9.__sinval + v11;
  *(double *)&v15 = v9.__sinval * 0.0 + v11;
  *((double *)&v15 + 1) = v12;
  v17 = *a1;
  v16 = a1[1];
  v19 = a1[2];
  v18 = a1[3];
  v21 = a1[4];
  v20 = a1[5];
  v23 = a1[6];
  v22 = a1[7];
  v27[0] = v13;
  v27[1] = *(unint64_t *)&v12;
  v27[2] = v14;
  v27[3] = (unint64_t)v15;
  v27[4] = v15;
  v27[5] = COERCE_UNSIGNED_INT64(v9.__cosval + 1.0 - v9.__cosval);
  v28 = 0;
  v29 = 0;
  v30 = xmmword_1B304EEE0;
  *a5 = 0u;
  a5[1] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[6] = 0u;
  a5[7] = 0u;
  do
  {
    v25 = (float64x2_t)v27[v10];
    v24 = (float64x2_t)v27[v10 + 1];
    v26 = (float64x2_t *)&a5[v10];
    *v26 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, v25.f64[0]), v19, v25, 1), v21, v24.f64[0]), v23, v24, 1);
    v26[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v25.f64[0]), v18, v25, 1), v20, v24.f64[0]), v22, v24, 1);
    v10 += 2;
  }
  while (v10 != 8);
}

float pv_projected_pixels_per_unit(int a1, _DWORD *a2, float32x4_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, simd_float4 a14, simd_float4 a15, float32x4_t a16, float32x2_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  float result;
  __int128 v35;

  _Q1.i64[1] = a24;
  v35 = 0uLL;
  __asm { FMOV            V1.2S, #1.0 }
  if (pv_projected_screen_aligned_bounding_rect_around_point(a1, 0, 0, &v35, a3, _Q1, a4, a5, a6, a7, a10, a11, a12, a13, a14, a15, a14, a15, a16,
         a17))
  {
    result = *((float *)&v35 + 3);
    *a2 = HIDWORD(v35);
  }
  return result;
}

BOOL pv_projected_screen_aligned_bounding_rect_around_point(int a1, int a2, int a3, _OWORD *a4, float32x4_t a5, float32x4_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, simd_float4 a15, simd_float4 a16, simd_float4 a17, simd_float4 a18, float32x4_t a19, float32x2_t a20)
{
  unint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  simd_float3 v28;
  simd_float3 v29;
  simd_float3 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  float32x4_t v44;
  uint64_t v45;
  __int128 v46;
  float32x2_t v47;
  float32x2_t v48;
  _BYTE v50[64];
  simd_float3 v51;
  simd_float3 v52;
  simd_float3 v53;
  __int128 v54;
  float32x4_t v55;
  __int128 v56;
  float32x4_t v57;
  __int128 v58;
  float32x4_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[4];
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  uint64_t v73;
  simd_float3x3 v74;
  simd_float3x3 v75;
  simd_float4x4 v76;
  simd_float4x4 v77;
  simd_float4x4 v78;

  *(__n128 *)&v50[32] = a9;
  *(__n128 *)&v50[48] = a10;
  *(__n128 *)v50 = a7;
  *(__n128 *)&v50[16] = a8;
  v76.columns[2] = a17;
  v76.columns[3] = a18;
  *(float32x2_t *)a6.f32 = vmul_f32(*(float32x2_t *)a6.f32, (float32x2_t)0x3F0000003F000000);
  *(float *)&v24 = -a6.f32[0];
  v25 = (float32x4_t)COERCE_UNSIGNED_INT(-a6.f32[0]);
  HIDWORD(v24) = a6.i32[1];
  a6.i32[2] = 0;
  v73 = *MEMORY[0x1E0C80C00];
  v26 = vaddq_f32(a5, a6);
  a6.f32[1] = -a6.f32[1];
  v25.f32[1] = a6.f32[1];
  v68[0] = vaddq_f32(a5, v25);
  v68[1] = vaddq_f32(a5, a6);
  v68[2] = v26;
  v68[3] = vaddq_f32(a5, (float32x4_t)v24);
  v76.columns[0] = a15;
  v76.columns[1] = a16;
  v77 = __invert_f4(v76);
  v27 = 0;
  v64 = *(_OWORD *)v50;
  v65 = *(_OWORD *)&v50[16];
  v66 = *(_OWORD *)&v50[32];
  v67 = *(_OWORD *)&v50[48];
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v69 + v27) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v77.columns[0], COERCE_FLOAT(*(__int128 *)((char *)&v64 + v27))), (float32x4_t)v77.columns[1], *(float32x2_t *)((char *)&v64 + v27), 1), (float32x4_t)v77.columns[2], *(float32x4_t *)((char *)&v64 + v27), 2), (float32x4_t)v77.columns[3], *(float32x4_t *)((char *)&v64 + v27), 3);
    v27 += 16;
  }
  while (v27 != 64);
  v62 = v70;
  v63 = v69;
  v60 = v72;
  v61 = v71;
  *(double *)v28.i64 = pv_simd_matrix_get_rotation_matrix(*(simd_float4x4 *)v50);
  v28.i32[3] = 0;
  v29.i32[3] = 0;
  v52 = v29;
  v53 = v28;
  v30.i32[3] = 0;
  v51 = v30;
  v78.columns[0] = a15;
  v78.columns[1] = a16;
  v78.columns[2] = a17;
  v78.columns[3] = a18;
  *(double *)&v31 = pv_simd_matrix_get_rotation_matrix(v78);
  HIDWORD(v31) = 0;
  HIDWORD(v32) = 0;
  v56 = v32;
  v58 = v31;
  HIDWORD(v33) = 0;
  v54 = v33;
  v74.columns[1] = v52;
  v74.columns[0] = v53;
  v74.columns[2] = v51;
  v75 = __invert_f3(v74);
  v41 = 0;
  v64 = v58;
  v65 = v56;
  v66 = v54;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v69 + v41) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v75.columns[0], COERCE_FLOAT(*(__int128 *)((char *)&v64 + v41))), (float32x4_t)v75.columns[1], *(float32x2_t *)((char *)&v64 + v41), 1), (float32x4_t)v75.columns[2], *(float32x4_t *)((char *)&v64 + v41), 2);
    v41 += 16;
  }
  while (v41 != 48);
  v42 = 0;
  v43 = 0;
  v57 = (float32x4_t)v70;
  v59 = (float32x4_t)v69;
  v55 = (float32x4_t)v71;
  while (1)
  {
    v44 = (float32x4_t)v68[v42];
    DWORD2(v64) = 0;
    *(_QWORD *)&v64 = 0;
    if (!pv_simd_matrix_project(a1, a2, a3, &v64, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, v44.f32[0]), v57, *(float32x2_t *)v44.f32, 1), v55, v44, 2), v63, v62, v61, v60, v34, v35, v36, v37, v38, v39, v40, a19, a20))break;
    v69.n128_u64[v42] = v64;
    v43 = v42++ > 2;
    if (v42 == 4)
    {
      v45 = 0;
      *(int32x2_t *)&v46 = vdup_n_s32(0x7F7FFFFFu);
      v47 = (float32x2_t)0x80000000800000;
      do
      {
        v48 = (float32x2_t)v69.n128_u64[v45];
        v47 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v48, v47), (int8x8_t)v48, (int8x8_t)v47);
        *(int8x8_t *)&v46 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v46, v48), (int8x8_t)v48, *(int8x8_t *)&v46);
        ++v45;
      }
      while (v45 != 4);
      *((float32x2_t *)&v46 + 1) = vsub_f32(v47, *(float32x2_t *)&v46);
      *a4 = v46;
      return 1;
    }
  }
  return v43;
}

#error "1B27D51B0: call analysis failed (funcsize=50)"

#error "1B27D5570: call analysis failed (funcsize=275)"

BOOL pv_projected_bounding_box_around_point(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, double a15, float32x4_t a16, float32x4_t a17, float32x2_t a18, uint64_t a19, uint64_t a20,int a21,__int32 a22)
{
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  _BOOL8 result;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v51[8];
  _OWORD v52[4];
  uint64_t v53;

  v26 = 0;
  v27.i32[3] = a22;
  *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)0x3F0000003F000000);
  v29.i64[1] = 0;
  v29.f32[0] = -v27.f32[0];
  v28 = (float32x4_t)COERCE_UNSIGNED_INT(-v27.f32[0]);
  v29.i32[1] = v27.i32[1];
  v27.i32[2] = 0;
  v30 = vaddq_f32(a9, v27);
  v27.f32[1] = -v27.f32[1];
  v28.f32[1] = v27.f32[1];
  v53 = *MEMORY[0x1E0C80C00];
  v52[0] = vaddq_f32(a9, v28);
  v52[1] = vaddq_f32(a9, v27);
  v52[2] = v30;
  v52[3] = vaddq_f32(a9, (float32x4_t)v29.u64[0]);
  v31 = vmuls_lane_f32(0.5, a10, 2);
  a9.f32[0] = a9.f32[2] + v31;
  v32 = a9.f32[2] - v31;
  do
  {
    v33 = (float32x4_t)v52[v26];
    v34 = &v51[v26];
    v35 = v33;
    v35.i32[2] = a9.i32[0];
    *v34 = v35;
    v33.f32[2] = v32;
    v34[4] = v33;
    ++v26;
  }
  while (v26 != 4);
  *(_QWORD *)((char *)v52 + 4) = 0;
  LODWORD(v52[0]) = 0;
  v40 = pv_simd_matrix_project(a1, a2, a3, v52, v51[0], a11, a12, a13, a14, a5, a6, a7, a8, v29, v30, a16, a17, a18);
  result = 0;
  if (v40)
  {
    v45 = 0;
    while (1)
    {
      *(_OWORD *)(a4 + 16 * v45) = v52[0];
      if (v45 == 7)
        break;
      v46 = v51[v45 + 1];
      *(_QWORD *)((char *)v52 + 4) = 0;
      LODWORD(v52[0]) = 0;
      ++v45;
      if (!pv_simd_matrix_project(a1, a2, a3, v52, v46, a11, a12, a13, a14, v36, v37, v38, v39, v41, v42, v43, a17, a18))return (unint64_t)(v45 - 1) > 6;
    }
    return 1;
  }
  return result;
}

BOOL pv_projected_bounding_box_around_point(float64x2_t *a1, float64x2_t *a2, __int128 *a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, float64x2_t a9)
{
  uint64_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  __int128 v28;
  __int128 *v29;
  unint64_t v30;
  BOOL v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float64x2_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  float64x2_t v42;
  float64x2_t v43;
  __int128 v44;
  __int128 v45;
  float64x2_t v46;
  __int128 v47;
  __int128 v48[16];
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;

  v42 = a9;
  v15 = 0;
  v57 = *MEMORY[0x1E0C80C00];
  v16 = *a1;
  v27 = a1[1];
  v17 = a2[1].f64[0];
  __asm { FMOV            V4.2D, #0.5 }
  v23 = vmulq_f64(*a2, _Q4);
  _Q4.f64[0] = -v23.f64[0];
  v24.f64[0] = -v23.f64[0];
  v24.f64[1] = -v23.f64[1];
  v49 = vaddq_f64(*a1, v24);
  v50 = vaddq_f64(v27, (float64x2_t)0);
  _Q4.f64[1] = v23.f64[1];
  v25 = vaddq_f64(v16, v23);
  v23.f64[1] = -v23.f64[1];
  v51 = vaddq_f64(v16, v23);
  v52 = v50;
  v53 = v25;
  v54 = v50;
  v26 = vaddq_f64(v16, _Q4);
  v55 = v26;
  v56 = v50;
  v26.f64[0] = v27.f64[0] + v17 * 0.5;
  v27.f64[0] = v27.f64[0] - v17 * 0.5;
  do
  {
    v28 = *(__int128 *)((char *)&v49 + v15 * 16);
    v29 = &v48[v15];
    *v29 = v28;
    v29[1] = (__int128)v26;
    v29[8] = v28;
    v29[9] = (__int128)v27;
    v15 += 2;
  }
  while (v15 != 8);
  v30 = 0;
  v31 = 0;
  while (1)
  {
    v32 = &v48[2 * v30];
    v33 = *v32;
    v34 = v32[1];
    *(_QWORD *)&v47 = 0;
    v46 = 0uLL;
    v44 = v33;
    v45 = v34;
    v35 = a3[5];
    v53 = (float64x2_t)a3[4];
    v54 = (float64x2_t)v35;
    v36 = a3[7];
    v55 = (float64x2_t)a3[6];
    v56 = (float64x2_t)v36;
    v37 = (float64x2_t)a3[1];
    v49 = (float64x2_t)*a3;
    v50 = v37;
    v38 = a3[3];
    v51 = (float64x2_t)a3[2];
    v52 = (float64x2_t)v38;
    if (!pv_simd_matrix_project((float64x2_t *)&v44, (__int128 *)&v49, &v43, a5, a6, a7, &v46, v42, a8, *(uint64_t *)&v42.f64[0], *(uint64_t *)&v42.f64[1], *(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 56),
            *(_QWORD *)(a4 + 64),
            *(_QWORD *)(a4 + 72),
            *(_OWORD *)(a4 + 80),
            *(_OWORD *)(a4 + 96),
            *(_OWORD *)(a4 + 112),
            v33,
            v45,
            0,
            v47,
            v48[0]))
      break;
    v39 = v47;
    v40 = a8 + 32 * v30;
    *(float64x2_t *)v40 = v46;
    *(_OWORD *)(v40 + 16) = v39;
    v31 = v30++ > 6;
    if (v30 == 8)
      return 1;
  }
  return v31;
}

BOOL pv_projected_bounding_rect_around_point(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x2_t a10, float32x4_t a11, __n128 a12, __n128 a13, __n128 a14, float32x4_t a15, float32x2_t a16)
{
  __n128 v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  _BOOL8 result;
  uint64_t v35;
  float32x4_t v36;
  __n128 v37;
  __n128 v39;
  __n128 v40;
  __int128 v41;
  float32x4_t v42;
  _OWORD v43[3];
  uint64_t v44;

  v22 = (__n128)a11;
  *(float32x2_t *)a11.f32 = vmul_f32(a10, (float32x2_t)0x3F0000003F000000);
  *(float *)&v23 = -a11.f32[0];
  v24 = (float32x4_t)COERCE_UNSIGNED_INT(-a11.f32[0]);
  v44 = *MEMORY[0x1E0C80C00];
  HIDWORD(v23) = a11.i32[1];
  a11.i32[2] = 0;
  v25 = vaddq_f32(a9, a11);
  a11.f32[1] = -a11.f32[1];
  v24.f32[1] = a11.f32[1];
  v42 = vaddq_f32(a9, v24);
  v43[0] = vaddq_f32(a9, a11);
  v43[1] = v25;
  v43[2] = vaddq_f32(a9, (float32x4_t)v23);
  *(_QWORD *)((char *)&v41 + 4) = 0;
  LODWORD(v41) = 0;
  v37 = v22;
  v39 = a13;
  v40 = a14;
  v30 = pv_simd_matrix_project(a1, a2, a3, &v41, v42, v22, a12, a13, a14, a5, a6, a7, a8, v25, (float32x4_t)a14, (float32x4_t)a13, a15, a16);
  result = 0;
  if (v30)
  {
    v35 = 0;
    while (1)
    {
      *(_OWORD *)(a4 + 16 * v35) = v41;
      if (v35 == 3)
        break;
      v36 = (float32x4_t)v43[v35];
      *(_QWORD *)((char *)&v41 + 4) = 0;
      LODWORD(v41) = 0;
      ++v35;
      if (!pv_simd_matrix_project(a1, a2, a3, &v41, v36, v37, a12, v39, v40, v26, v27, v28, v29, v31, v32, v33, a15, a16))return (unint64_t)(v35 - 1) > 2;
    }
    return 1;
  }
  return result;
}

BOOL pv_projected_bounding_rect_around_point(float64x2_t *a1, __int128 *a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10)
{
  unint64_t v16;
  BOOL v17;
  float64x2_t v18;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  float64x2_t v36;
  float64x2_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float64x2_t v43[2];
  float64x2_t v44;
  __int128 v45;
  _OWORD v46[8];
  uint64_t v47;

  v36 = a10;
  v16 = 0;
  v17 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v18 = *a1;
  __asm { FMOV            V3.2D, #0.5 }
  v24 = vmulq_f64(a9, _Q3);
  _Q3.f64[0] = -v24.f64[0];
  v25.f64[0] = -v24.f64[0];
  v25.f64[1] = -v24.f64[1];
  v26 = vaddq_f64(a1[1], (float64x2_t)0);
  v46[0] = vaddq_f64(v25, *a1);
  v46[1] = v26;
  v27 = vaddq_f64(v24, v18);
  _Q3.f64[1] = v24.f64[1];
  v24.f64[1] = -v24.f64[1];
  v46[2] = vaddq_f64(v24, v18);
  v46[3] = v26;
  v46[4] = v27;
  v46[5] = v26;
  v46[6] = vaddq_f64(_Q3, v18);
  v46[7] = v26;
  while (1)
  {
    v28 = (float64x2_t *)&v46[2 * v16];
    v29 = *v28;
    v30 = v28[1];
    *(_QWORD *)&v45 = 0;
    v44 = 0uLL;
    v43[0] = v29;
    v43[1] = v30;
    v31 = a2[5];
    v39 = a2[4];
    v40 = v31;
    v32 = a2[7];
    v41 = a2[6];
    v42 = v32;
    if (!pv_simd_matrix_project(v43, &v38, &v37, a4, a5, a6, &v44, v36, a8, *(uint64_t *)&v36.f64[0], *(uint64_t *)&v36.f64[1], *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56),
            *(_QWORD *)(a3 + 64),
            *(_QWORD *)(a3 + 72),
            *(_OWORD *)(a3 + 80),
            *(_OWORD *)(a3 + 96),
            *(_OWORD *)(a3 + 112),
            *a2,
            a2[1],
            a2[2],
            a2[3],
            v39))
      break;
    v33 = v45;
    v34 = a7 + 32 * v16;
    *(float64x2_t *)v34 = v44;
    *(_OWORD *)(v34 + 16) = v33;
    v17 = v16++ > 2;
    if (v16 == 4)
      return 1;
  }
  return v17;
}

void pv_convert_homography_coordinates(simd_float3x3 a1, CGRect a2, CGRect a3)
{
  double height;
  double width;
  double y;
  double x;
  unsigned int v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  simd_float3x3 v24;
  simd_float3x3 v25;
  simd_float3x3 v26;
  simd_float3x3 v27;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (!CGRectEqualToRect(a2, a3))
  {
    *(float *)&v15 = a3.size.width / width;
    v16 = a3.size.height / height;
    v26.columns[2].f32[0] = a3.origin.x - x * *(float *)&v15;
    v26.columns[0] = (simd_float3)v15;
    v17 = a3.origin.y - y * v16;
    v26.columns[1].i32[0] = 0;
    v26.columns[1].i64[1] = 0;
    v26.columns[1].f32[1] = v16;
    v26.columns[2].f32[1] = v17;
    v26.columns[2].i64[1] = COERCE_UNSIGNED_INT(1.0);
    v20 = (float32x4_t)v26.columns[1].u64[0];
    v21 = (float32x4_t)v15;
    v22 = (float32x4_t)v26.columns[2];
    v27 = __invert_f3(v26);
    v18 = 0;
    v24 = v27;
    memset(&v25, 0, sizeof(v25));
    do
    {
      v25.columns[v18] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a1.columns[0], COERCE_FLOAT(*(_OWORD *)&v24.columns[v18])), (float32x4_t)a1.columns[1], *(float32x2_t *)v24.columns[v18].f32, 1), (float32x4_t)a1.columns[2], (float32x4_t)v24.columns[v18], 2);
      ++v18;
    }
    while (v18 != 3);
    v19 = 0;
    v24 = v25;
    memset(&v25, 0, sizeof(v25));
    do
    {
      v25.columns[v19] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)&v24.columns[v19])), v20, *(float32x2_t *)v24.columns[v19].f32, 1), v22, (float32x4_t)v24.columns[v19], 2);
      ++v19;
    }
    while (v19 != 3);
    pv_simd_normalize(v25);
  }
}

void pv_convert_homography_coordinates(_OWORD *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  int8x16_t v48;
  int8x16_t v49;
  __int128 v50;
  __int128 v51;
  int8x16_t v52;
  __int128 v53;
  int8x16_t v54;
  float64x2_t v55;
  __int128 v56;
  __int128 v57;
  int8x16_t v58;
  __int128 v59;
  int8x16_t v60;
  float64x2_t v61;
  _OWORD v62[6];
  __int128 v63;
  __int128 v64;
  int8x16_t v65;
  __int128 v66;
  int8x16_t v67;
  float64x2_t v68;

  if (CGRectEqualToRect(*(CGRect *)&a3, *(CGRect *)&a7))
  {
    v20 = a1[3];
    a2[2] = a1[2];
    a2[3] = v20;
    v21 = a1[5];
    a2[4] = a1[4];
    a2[5] = v21;
    v22 = a1[1];
    *a2 = *a1;
    a2[1] = v22;
  }
  else
  {
    *(double *)v23.i64 = a7 - a3 * (a9 / a5);
    v24.i64[0] = 0;
    *(double *)&v24.i64[1] = a10 / a6;
    *(double *)&v23.i64[1] = a8 - a4 * (a10 / a6);
    v63 = COERCE_UNSIGNED_INT64(a9 / a5);
    v64 = 0u;
    v48 = v24;
    v65 = v24;
    v66 = 0u;
    __asm { FMOV            V0.2D, #1.0; simd_double3x3 }
    v47 = _Q0;
    v67 = v23;
    v68 = _Q0;
    v49 = v23;
    __invert_d3();
    v30 = 0;
    v34 = *(int8x16_t *)a1;
    v31 = *((float64x2_t *)a1 + 1);
    v35 = *((int8x16_t *)a1 + 2);
    v32 = *((float64x2_t *)a1 + 3);
    v36 = *((int8x16_t *)a1 + 4);
    v33 = *((float64x2_t *)a1 + 5);
    v65 = v52;
    v66 = v53;
    v67 = v54;
    v68 = v55;
    v63 = v50;
    v64 = v51;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
    v35.i64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
    v36.i64[1] = vextq_s8(v36, v36, 8uLL).u64[0];
    do
    {
      v38 = *(float64x2_t *)((char *)&v63 + v30);
      v37 = *(float64x2_t *)((char *)&v63 + v30 + 16);
      v39 = (float64x2_t *)((char *)&v56 + v30);
      *v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34, v38.f64[0]), (float64x2_t)v35, v38, 1), (float64x2_t)v36, v37.f64[0]);
      v39[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v31, v38), v32, v38, 1), v37, v33);
      v30 += 32;
    }
    while (v30 != 96);
    v40 = 0;
    v65 = v58;
    v66 = v59;
    v67 = v60;
    v68 = v61;
    v63 = v56;
    v64 = v57;
    memset(v62, 0, sizeof(v62));
    v42 = v48;
    v41 = (int8x16_t)COERCE_UNSIGNED_INT64(a9 / a5);
    v43 = v49;
    v41.i64[1] = vextq_s8(v41, v41, 8uLL).u64[0];
    v42.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
    v43.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
    do
    {
      v45 = *(float64x2_t *)((char *)&v63 + v40 * 16);
      v44 = *(float64x2_t *)((char *)&v63 + v40 * 16 + 16);
      v46 = (float64x2_t *)&v62[v40];
      *v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v41, v45.f64[0]), (float64x2_t)v42, v45, 1), (float64x2_t)v43, v44.f64[0]);
      v46[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64((float64x2_t)0, v45), (float64x2_t)0, v45, 1), v44, v47);
      v40 += 2;
    }
    while (v40 != 6);
    pv_simd_normalize((uint64_t)v62, a2, v44);
  }
}

void sub_1B27D6400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D653C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27D6674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27D67B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27D68EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27D6A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27D6C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B27D7148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  _Unwind_Resume(a1);
}

void sub_1B27D73C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B27D75A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v12;

  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B27D7724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B27D77B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t getDefaultsIntValue(NSDictionary *a1, NSString *a2, uint64_t a3)
{
  void *v4;
  void *v5;

  -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    a3 = objc_msgSend(v4, "intValue");

  return a3;
}

void sub_1B27D79DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t getDefaultsBoolValue(NSDictionary *a1, NSString *a2, uint64_t a3)
{
  void *v4;
  void *v5;

  -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    a3 = objc_msgSend(v4, "BOOLValue");

  return a3;
}

void sub_1B27D7A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

void sub_1B27D7C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D7E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D8030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1B27D8418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27D8954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D8C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27D8C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1B27D8CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1B27D8D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1B27D8E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_1B27D8EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;
  void *v11;

  v11 = v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1B27D946C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27D96A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B27D9814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27D988C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PVCMSampleBuffer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B27D9AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1B27D9BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D9C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27D9DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27D9EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27D9FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27DA068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27DA158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B27DA2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DA348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B27DA448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void sub_1B27DA8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DAB60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MakePVCameraFrameMetadata(AVCaptureDevicePosition a1, CMQuaternion a2, double a3, UIInterfaceOrientation a4, AVCaptureVideoOrientation a5)
{
  return +[PVCameraFrameMetadata frameMetadata:::::](PVCameraFrameMetadata, "frameMetadata:::::", a1, a4, a5, a2.x, a2.y, a2.z, a2.w, a3);
}

PVCameraFrameMetadata *MakePVCameraFrameMetadata(AVCaptureDevicePosition a1, CMQuaternion a2, double a3, UIInterfaceOrientation a4, double a5)
{
  return +[PVCameraFrameMetadata frameMetadataWithAngle:::::](PVCameraFrameMetadata, "frameMetadataWithAngle:::::", a1, a4, a2.x, a2.y, a2.z, a2.w, a3, a5);
}

void sub_1B27DACC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DAD98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DAE04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DAFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MakePVFaceDetectionFull(uint64_t a1, uint64_t a2, double a3, uint64_t a4, double a5, CGRect a6, AVCaptureVideoOrientation a7, CMTime *a8, AVMetadataFaceObject *a9)
{
  CMTime v10;

  v10 = *a8;
  +[PVFaceDetection faceDetection:::::::::](PVFaceDetection, "faceDetection:::::::::", a1, a2, a4, a7, &v10, a9, a3, a5, a6.origin.x, a6.origin.y, a6.size.width, a6.size.height);
  return (id)objc_claimAutoreleasedReturnValue();
}

id MakePVFaceDetectionFull(uint64_t a1, uint64_t a2, double a3, uint64_t a4, double a5, CGRect a6, double a7, CMTime *a8, AVMetadataFaceObject *a9)
{
  CMTime v10;

  v10 = *a8;
  +[PVFaceDetection faceDetectionWithAngle:::::::::](PVFaceDetection, "faceDetectionWithAngle:::::::::", a1, a2, a4, &v10, a9, a3, a5, a6.origin.x, a6.origin.y, a6.size.width, a6.size.height, a7);
  return (id)objc_claimAutoreleasedReturnValue();
}

id MakePVFaceDetection(AVMetadataFaceObject *a1, AVCaptureVideoOrientation a2)
{
  AVMetadataFaceObject *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = a1;
  v4 = -[AVMetadataFaceObject faceID](v3, "faceID");
  v5 = -[AVMetadataFaceObject hasRollAngle](v3, "hasRollAngle");
  -[AVMetadataFaceObject rollAngle](v3, "rollAngle");
  v7 = v6;
  v8 = -[AVMetadataFaceObject hasYawAngle](v3, "hasYawAngle");
  -[AVMetadataFaceObject yawAngle](v3, "yawAngle");
  v10 = v9;
  -[AVMetadataFaceObject bounds](v3, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  if (v3)
  {
    -[AVMetadataFaceObject time](v3, "time");
  }
  else
  {
    v21 = 0uLL;
    v22 = 0;
  }
  v23 = v21;
  v24 = v22;
  +[PVFaceDetection faceDetection:::::::::](PVFaceDetection, "faceDetection:::::::::", v4, v5, v8, a2, &v23, v3, v7, v10, v12, v14, v16, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

void sub_1B27DB2F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id MakePVFaceDetection(AVMetadataFaceObject *a1, double a2)
{
  AVMetadataFaceObject *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = a1;
  v4 = -[AVMetadataFaceObject faceID](v3, "faceID");
  v5 = -[AVMetadataFaceObject hasRollAngle](v3, "hasRollAngle");
  -[AVMetadataFaceObject rollAngle](v3, "rollAngle");
  v7 = v6;
  v8 = -[AVMetadataFaceObject hasYawAngle](v3, "hasYawAngle");
  -[AVMetadataFaceObject yawAngle](v3, "yawAngle");
  v10 = v9;
  -[AVMetadataFaceObject bounds](v3, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  if (v3)
  {
    -[AVMetadataFaceObject time](v3, "time");
  }
  else
  {
    v21 = 0uLL;
    v22 = 0;
  }
  v23 = v21;
  v24 = v22;
  +[PVFaceDetection faceDetectionWithAngle:::::::::](PVFaceDetection, "faceDetectionWithAngle:::::::::", v4, v5, v8, &v23, v3, v7, v10, v12, v14, v16, v18, a2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

void sub_1B27DB420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DB75C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);

  _Unwind_Resume(a1);
}

void sub_1B27DB8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)PVLivePlayer;
  -[_Unwind_Exception dealloc](&a11, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_1B27DBB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DBC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DBDF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1B27DC150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DC294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1B27DC738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27DC960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  HGObject::operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_1B27DCA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27DCBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27DCD24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DCF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27DD274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B27DD484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B27DD6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t __destroy_helper_block_ea8_56c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1B27DD888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t __destroy_helper_block_ea8_48c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t __copy_helper_block_ea8_40c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t __destroy_helper_block_ea8_40c29_ZTS5HGRefI15PVRenderLinkJobE(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

PVPerfStats *std::unique_ptr<PVPerfStats>::reset[abi:ne180100](PVPerfStats **a1, PVPerfStats *a2)
{
  PVPerfStats *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PVPerfStats::~PVPerfStats(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void PVRenderLinkJob::PVRenderLinkJob(PVRenderLinkJob *this, PVLivePlayer *a2, CMTime *a3, double a4, PVTaskToken *a5)
{
  PVLivePlayer *v9;
  PVTaskToken *v10;
  PVLivePlayer *v11;
  CMTimeEpoch epoch;
  PVTaskToken *v13;

  v9 = a2;
  v10 = a5;
  HGUserJob::HGUserJob((HGUserJob *)this);
  *(_QWORD *)this = off_1E64D89D8;
  v11 = v9;
  *((_QWORD *)this + 9) = v11;
  epoch = a3->epoch;
  *((_OWORD *)this + 5) = *(_OWORD *)&a3->value;
  *((_QWORD *)this + 12) = epoch;
  *((double *)this + 13) = a4;
  v13 = v10;
  *((_QWORD *)this + 14) = v13;
  PVPerfStats::FrameStats::FrameStats((uint64_t)this + 120);
  HGUserJob::SetQueueID((uint64_t)this, 0);
  HGUserJob::SetPriority((uint64_t)this, 5);
  HGUserJob::SetNotifyFunc((uint64_t)this, (void (*)(HGUserJob *))PVRenderLinkJob::PVPlayerQueueNotificationFunction);

}

void sub_1B27DE0D4(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  HGUserJob::~HGUserJob((HGUserJob *)v2);
  _Unwind_Resume(a1);
}

void PVRenderLinkJob::PVPlayerQueueNotificationFunction(PVRenderLinkJob *this, HGUserJob *a2)
{
  void *v3;
  HGGLBlendingInfo *v4;
  PVRenderLinkJob *v5;

  v3 = (void *)MEMORY[0x1B5E29C50](this, a2);
  if (this)
  {
    if (v4)
    {
      v5 = (PVRenderLinkJob *)v4;
      if (HGGLBlendingInfo::GetRGBOperation(v4) == 3
        || HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v5) == 4)
      {
        PVRenderLinkJob::HandleJob(v5);
      }
    }
  }
  objc_autoreleasePoolPop(v3);
}

void PVRenderLinkJob::~PVRenderLinkJob(PVRenderLinkJob *this)
{
  void *v2;

  *(_QWORD *)this = off_1E64D89D8;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }

  HGUserJob::~HGUserJob((HGUserJob *)this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E64D89D8;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }

  HGUserJob::~HGUserJob((HGUserJob *)this);
  HGObject::operator delete(v3);
}

uint64_t PVRenderLinkJob::HandleJob(PVRenderLinkJob *this)
{
  void *v2;
  PVRenderLinkJob *v4;

  if (this)
    (*(void (**)(PVRenderLinkJob *))(*(_QWORD *)this + 16))(this);
  v2 = (void *)*((_QWORD *)this + 9);
  v4 = this;
  (*(void (**)(PVRenderLinkJob *))(*(_QWORD *)this + 16))(this);
  objc_msgSend(v2, "handleRenderLinkJob:", &v4);
  if (v4)
    (*(void (**)(PVRenderLinkJob *))(*(_QWORD *)v4 + 24))(v4);
  return (*(uint64_t (**)(PVRenderLinkJob *))(*(_QWORD *)this + 24))(this);
}

void sub_1B27DE2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B27DE3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B27DEA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  HGObject::operator delete(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  HGTransform::~HGTransform((HGTransform *)&a9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v14 = *(_QWORD *)(v12 - 96);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v15 = *(_QWORD *)(v12 - 88);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  _Unwind_Resume(a1);
}

void sub_1B27DED2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B27DED88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DEE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DEFE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B27DF154(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B27DF1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DF298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void sub_1B27DF69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B27DF70C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DFAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B27DFBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27DFD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B27DFE34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B27DFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B27DFFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B27E0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B27E0130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B27E0E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B27E134C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1B27E1694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  HGObject::operator delete(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (*v10)
    (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void HMaskAlpha::HMaskAlpha(HMaskAlpha *this, int a2)
{
  _QWORD *v4;
  _QWORD v5[54];

  v5[53] = *MEMORY[0x1E0C80C00];
  HgcMaskAlpha::HgcMaskAlpha(this);
  *v4 = off_1E64D8C10;
  HgcMaskAlpha::HgcMaskAlpha((HgcMaskAlpha *)v5);
  HgcMaskAlpha::~HgcMaskAlpha((HgcMaskAlpha *)v5);
  *((_DWORD *)this + 104) = a2;
}

void sub_1B27E1824(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcMaskAlpha::~HgcMaskAlpha(v1);
  _Unwind_Resume(a1);
}

uint64_t HMaskAlpha::GetDOD(HMaskAlpha *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v6 = *((_DWORD *)this + 104);
  if (!v6)
    return *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(-v6, -v6, v6, v6);
  return HGRectGrow(v5, v4, v7);
}

char *HMaskAlpha::RenderPageMetal(HGNode *this, HGPage *a2)
{
  const char *v4;
  char *Buffer;
  const void *v6;
  std::string *v7;
  std::string *v8;
  char *v9;
  __n128 v10;
  uint64_t i;
  HGBitmap *v12;
  __n128 v13;
  const HGBlendingInfo *v14;
  __n128 v15;
  __n128 *v16;
  std::string __p;
  _BYTE v19[16];
  HGPage *v20;
  char __str[256];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v20, this, a2);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 144))(*(_QWORD *)a2, 0);
  v4 = (const char *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 48))(this);
  snprintf(__str, 0x100uLL, "%s::RenderPageMetal( [%d %d %d %d])", v4, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 6), *((_DWORD *)a2 + 7));
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v19, "gpu", 1, __str);
  Buffer = HGGPURenderer::CreateBuffer(*(_QWORD *)a2, *((HGRect *)a2 + 1), 7, 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
  v6 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, HGNode *))(**(_QWORD **)a2 + 368))(*(_QWORD *)a2, *((_QWORD *)this + 8), this);
  if (v6
  {
    v8 = v7;
    v9 = (char *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 48))(this);
    std::string::basic_string[abi:ne180100]<0>(&__p, v9);
    HGMetalHandler::SetDebugLabel(v8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    HGMetalHandler::BindBuffer((HGMetalHandler *)v8, (HGBitmap *)Buffer);
    for (i = 0; i != 8; ++i)
    {
      v12 = (HGBitmap *)*((_QWORD *)a2 + i + 21);
      if (v12)
        v10 = HGMetalHandler::BindTexture((HGMetalTexture ***)v8, i, v12);
    }
    (*(void (**)(HGNode *, HGPage *, _QWORD, std::string *, __n128))(*(_QWORD *)this + 488))(this, a2, 0, v8, v10);
    if (HGNode::IsInPlaceHardwareBlendingEnabled(this))
    {
      HGMetalHandler::EnableBlending((uint64_t)v8);
      v14 = (const HGBlendingInfo *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 256))(this);
      v15 = HGMetalHandler::SetBlendingInfo((HGMetalHandler *)v8, v14);
      v16 = (__n128 *)(*(uint64_t (**)(HGNode *, __n128))(*(_QWORD *)this + 272))(this, v15);
      v13 = HGMetalHandler::SetBlendingColor((__n128 *)v8, v16);
    }
    (*(void (**)(std::string *, _QWORD, _QWORD, uint64_t, __n128))(v8->__r_.__value_.__r.__words[0] + 192))(v8, *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), 8, v13);
    (*(void (**)(HGNode *, HGPage *, _QWORD, std::string *))(*(_QWORD *)this + 496))(this, a2, 0, v8);
    HGMetalHandler::BindBuffer((HGMetalHandler *)v8, 0);
  }
  else
  {
    HGGPURenderer::CopyMetal(*(HGGPURenderer **)a2, (HGBitmap *)Buffer, *((HGRect *)a2 + 1), *((HGBitmap **)a2 + 21));
  }
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v19);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v20);
  return Buffer;
}

void sub_1B27E1B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,HGPage *a22)
{
  if (a19 < 0)
    operator delete(__p);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)&a20);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&a22);
  _Unwind_Resume(a1);
}

void HMaskAlpha::~HMaskAlpha(HGNode *this)
{
  void *v1;

  HgcMaskAlpha::~HgcMaskAlpha(this);
  HGObject::operator delete(v1);
}

void HGMPSImageEDT::HGMPSImageEDT(HGMPSImageEDT *this, __int16 a2)
{
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v3 = off_1E64D8E78;
  *(_QWORD *)(v3 + 408) = 0;
  *(_WORD *)(v3 + 416) = a2;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v3 + 16) & 0xFFFFF9FF | 0x400;
}

void HGMPSImageEDT::~HGMPSImageEDT(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64D8E78;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HGMPSImageEDT::~HGMPSImageEDT(this);
  HGObject::operator delete(v1);
}

uint64_t HGMPSImageEDT::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

unint64_t HGMPSImageEDT::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = *(__int16 *)(a1 + 416);
    v4 = a4 - v6;
    v5 = (HIDWORD(a4) - v6);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HGMPSImageEDT::RenderTile(HGNode *this, HGTile *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int32x4_t v15;
  int v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  char *v38;
  uint64_t v41;
  float32x4_t *v42;
  float v43;
  int v44;
  int32x2_t v46;
  int32x4_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;

  v52 = HGNode::RenderTile(this, a2);
  v4 = *((_DWORD *)a2 + 1);
  v5 = *(int *)a2;
  v6 = (*((_DWORD *)a2 + 2) - v5);
  v50 = *((_DWORD *)a2 + 3) - v4;
  v49 = *((int *)a2 + 22);
  v7 = *((int *)a2 + 6);
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 2);
  v11 = *((int *)a2 + 52);
  v10 = *((int *)a2 + 53);
  v13 = *((int *)a2 + 54);
  v12 = *((int *)a2 + 55);
  v51 = v7;
  v14 = (char *)malloc_type_malloc(16 * (v50 + 2 * *((__int16 *)this + 208)) * (int)v7, 0x1000040451B5BE8uLL);
  v16 = *((__int16 *)this + 208);
  v17 = *((_WORD *)this + 208);
  v18 = -(uint64_t)(__int16)v17;
  if (v50 + v16 <= (int)v18)
  {
    v21 = v51;
  }
  else
  {
    v19 = v8 - 16 * *((__int16 *)this + 208) * (uint64_t)(int)v49;
    v20 = v14;
    v21 = v51;
    do
    {
      if (v18 + v4 > v10 && v18 + v4 < v12 && (int)v6 >= 1)
      {
        v24 = 0;
        v25 = v5;
        v26 = v19;
        do
        {
          if (*(float *)(v8 + 16 * (v24 + v18 * v49)) == 1.0)
          {
            *(_OWORD *)&v20[16 * v24] = xmmword_1B304EFF0;
          }
          else
          {
            v27 = *((__int16 *)this + 208);
            if (v27 >= 1)
            {
              v28 = -(uint64_t)*((unsigned __int16 *)this + 208);
              v29 = -*((unsigned __int16 *)this + 208);
              v30 = (int)(float)((v13 - v11) * (v13 - v11) + (v12 - v10) * (v12 - v10));
              do
              {
                if (v25 + v28 > v11 && v25 + v28 < v13)
                {
                  if (*(float *)(v26 + 16 * v28) == 1.0)
                  {
                    v32 = v29 >= 0 ? v29 : -v29;
                    if (v32 < v30)
                      v30 = v32;
                  }
                  *(float *)v15.i32 = (float)v30;
                  v15 = vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
                  v15.i32[3] = 1.0;
                  *(int32x4_t *)&v20[16 * v24] = v15;
                  LOWORD(v27) = *((_WORD *)this + 208);
                }
                ++v28;
                ++v29;
              }
              while (v28 < (__int16)v27);
            }
          }
          ++v24;
          v26 += 16;
          ++v25;
        }
        while (v24 != v6);
        v17 = *((_WORD *)this + 208);
      }
      v20 += 16 * v51;
      ++v18;
      v19 += 16 * v49;
    }
    while (v18 < v50 + (__int16)v17);
    v16 = (__int16)v17;
  }
  if (v50 >= 1)
  {
    v33 = 0;
    v34 = &v14[16 * v16 * (int)v21];
    v35 = 16 * v21;
    v36 = v17;
    do
    {
      if ((int)v6 >= 1)
      {
        v37 = 0;
        v38 = v34;
        do
        {
          if (v37 + v5 > v11 && v37 + v5 < v13 && (__int16)v36 >= 1)
          {
            v41 = -(uint64_t)v36;
            v42 = (float32x4_t *)&v38[-16 * v21 * v36];
            v43 = (float)((v13 - v11) * (v13 - v11) + (v12 - v10) * (v12 - v10));
            v44 = -v36;
            do
            {
              if (v4 + v44 > (int)v10 && v4 + v44 < (int)v12)
              {
                v46 = (int32x2_t)vmulq_f32(*v42, *v42).u64[0];
                *(float *)v46.i32 = *(float *)v46.i32 + (float)(v44 * v44);
                if (*(float *)v46.i32 < v43)
                  v43 = *(float *)v46.i32;
                *(float *)v46.i32 = sqrtf(v43);
                v47 = vdupq_lane_s32(v46, 0);
                v47.i32[3] = 1.0;
                *(int32x4_t *)(v9 + 16 * v37) = v47;
                v17 = *((_WORD *)this + 208);
              }
              ++v41;
              ++v44;
              v42 = (float32x4_t *)((char *)v42 + v35);
              v36 = v17;
            }
            while (v41 < (__int16)v17);
          }
          ++v37;
          v38 += 16;
        }
        while (v37 != v6);
      }
      v9 += 16 * v21;
      ++v33;
      ++v4;
      v34 += v35;
    }
    while (v33 != v50);
  }
  free(v14);
  return v52;
}

char *HGMPSImageEDT::RenderPageMetal(HGNode *this, HGRect *a2)
{
  const char *v4;
  char *Buffer;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  HGGPURenderer *v10;
  HGBitmap *Storage;
  uint64_t MetalContext;
  void *v13;
  HGMetalTexture **v14;
  HGBitmap *v15;
  HGBitmap *v16;
  HGMetalTexture **v17;
  HGBitmap *v18;
  HGBitmap *v19;
  void *v20;
  HGGPURenderer *v21;
  uint64_t v22;
  uint64_t v23;
  HGBitmap *v24;
  _BYTE v26[16];
  HGPage *v27;
  char __str[256];
  uint64_t v29;
  HGRect v30;

  v29 = *MEMORY[0x1E0C80C00];
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v27, this, (HGPage *)a2);
  v4 = (const char *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)this + 48))(this);
  snprintf(__str, 0x100uLL, "%s::RenderPageMetal( [%d %d %d %d])", v4, a2[1].var0, a2[1].var1, a2[1].var2, a2[1].var3);
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v26, "gpu", 1, __str);
  Buffer = HGGPURenderer::CreateBuffer(*(_QWORD *)&a2->var0, a2[1], a2[2].var0, 1, (*((_DWORD *)this + 4) >> 12) & 1, 1);
  if (!*((_QWORD *)this + 51))
  {
    v6 = *(_QWORD *)&a2[10].var2;
    v7 = HGGPURenderer::CreateBuffer(*(_QWORD *)&a2->var0, *(HGRect *)(v6 + 20), 7, 1, (*((_DWORD *)this + 4) >> 12) & 1, 1, 1);
    v8 = (char *)*((_QWORD *)this + 51);
    if (v8 == v7)
    {
      if (v7)
        (*(void (**)(char *))(*(_QWORD *)v7 + 24))(v7);
    }
    else
    {
      if (v8)
        (*(void (**)(char *))(*(_QWORD *)v8 + 24))(v8);
      *((_QWORD *)this + 51) = v7;
    }
    v9 = HGGPURenderer::CreateBuffer(*(_QWORD *)&a2->var0, *(HGRect *)(v6 + 20), 7, 1, (*((_DWORD *)this + 4) >> 12) & 1, 1);
    v10 = *(HGGPURenderer **)&a2->var0;
    Storage = (HGBitmap *)HGBitmap::GetStorage((HGBitmap *)v9);
    HGGPURenderer::CopyMetal(v10, Storage, *(HGRect *)(v6 + 20), (HGBitmap *)v6);
    HGGPURenderer::FlushMetalCommandBuffer(*(HGGPURenderer **)&a2->var0);
    MetalContext = HGGPURenderer::GetMetalContext(*(HGGPURenderer **)&a2->var0);
    v13 = (void *)objc_msgSend(*(id *)(MetalContext + 32), "commandBuffer");
    objc_msgSend(v13, "setLabel:", CFSTR("MPS EuclideanDistanceTransform Buffer"));
    v14 = *(HGMetalTexture ***)&a2->var0;
    v15 = (HGBitmap *)HGBitmap::GetStorage(*((HGBitmap **)this + 51));
    v16 = HGGPURenderer::ConvertToMetalTexture(v14, v15);
    v17 = *(HGMetalTexture ***)&a2->var0;
    v18 = (HGBitmap *)HGBitmap::GetStorage((HGBitmap *)v9);
    v19 = HGGPURenderer::ConvertToMetalTexture(v17, v18);
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC6E40]), "initWithDevice:", *(_QWORD *)(*(_QWORD *)(MetalContext + 16) + 16));
    objc_msgSend(v20, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v13, *((_QWORD *)v19 + 18), *((_QWORD *)v16 + 18));

    objc_msgSend(v13, "commit");
    objc_msgSend(v13, "waitUntilScheduled");
    (*(void (**)(HGBitmap *))(*(_QWORD *)v19 + 24))(v19);
    (*(void (**)(HGBitmap *))(*(_QWORD *)v16 + 24))(v16);
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 24))(v9);
  }
  v21 = *(HGGPURenderer **)&a2->var0;
  v23 = *(_QWORD *)&a2[1].var0;
  v22 = *(_QWORD *)&a2[1].var2;
  v24 = (HGBitmap *)HGBitmap::GetStorage(*((HGBitmap **)this + 51));
  *(_QWORD *)&v30.var0 = v23;
  *(_QWORD *)&v30.var2 = v22;
  HGGPURenderer::BufferCopyMetal(v21, (HGBuffer *)Buffer, v30, v24);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v26);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v27);
  return Buffer;
}

void sub_1B27E2238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B27E2968(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B27E45D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;

  HGObject::operator delete(v40);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  HGTransform::~HGTransform((HGTransform *)&a33);
  if (STACK[0x250])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x250] + 24))(STACK[0x250]);
  if (STACK[0x258])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x258] + 24))(STACK[0x258]);
  _Unwind_Resume(a1);
}

void HColorAndGradientStroke::~HColorAndGradientStroke(HGNode *this)
{
  void *v1;

  HgcColorAndGradientStroke::~HgcColorAndGradientStroke(this);
  HGObject::operator delete(v1);
}

uint64_t HColorAndGradientStroke::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HOutlineGradientStroke::~HOutlineGradientStroke(HGNode *this)
{
  void *v1;

  HgcOutlineGradientStroke::~HgcOutlineGradientStroke(this);
  HGObject::operator delete(v1);
}

void sub_1B27E5504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

uint64_t HConcentricPolygonsGradient::GetROI(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return 0;
  else
    return -1;
}

void HConcentricPolygonsGradient::~HConcentricPolygonsGradient(HGNode *this)
{
  void *v1;

  HgcConcentricPolygonsGradient::~HgcConcentricPolygonsGradient(this);
  HGObject::operator delete(v1);
}

HGNode *HPixellate::GetOutput(HGNode *this, HGRenderer *a2)
{
  _BYTE v5[4];
  float v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HGNode *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 5, v5);
  if (v6 == 1.0)
    return HGRenderer::GetInput(a2, this, 0);
  else
    return (HGNode *)HgcPixellate::GetOutput((HgcPixellate *)this, a2);
}

unint64_t HPixellate::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0x8000000080000000;
  else
    return a4;
}

unint64_t HPixellate::GetROI(HPixellate *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  float var0;
  float var1;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var0 = (float)a4.var0;
    var1 = (float)a4.var1;
    (*(void (**)(HPixellate *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v32);
    v23 = v33;
    v24 = v32;
    v25 = v34;
    v26 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v32);
    v9 = v32;
    v10 = v33;
    v20 = v34;
    v21 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v32);
    v27 = v33;
    v28 = v32;
    v29 = v34;
    v30 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v32);
    v12 = v32;
    v11 = v33;
    v22 = v34;
    v31 = v35;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, &v32);
    v14 = v32;
    v13 = v33;
    (*(void (**)(HPixellate *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 5, &v32);
    v15 = (double)(int)vcvtms_s32_f32((float)((float)(v26+ (float)((float)((float)(v24 * var0) + (float)(v23 * var1)) + (float)(v25 * 0.0)))- v14)* v32)+ 0.5;
    v16 = (double)(int)vcvtms_s32_f32((float)((float)(v21+ (float)((float)((float)(v9 * var0) + (float)(v10 * var1)) + (float)(v20 * 0.0)))- v13)* v32)+ 0.5;
    v17 = v14 + (float)(v33 * v15);
    v18 = v13 + (float)(v33 * v16);
    v4 = (int)(float)(floorf(v30 + (float)((float)(v29 * 0.0) + (float)((float)(v28 * v17) + (float)(v27 * v18)))) + -1.0);
    v5 = (int)(float)(floorf(v31+ (float)((float)(v22 * 0.0) + (float)((float)(v12 * v17) + (float)(v11 * v18))))+ -1.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void HPixellate::~HPixellate(HGNode *this)
{
  void *v1;

  HgcPixellate::~HgcPixellate(this);
  HGObject::operator delete(v1);
}

void sub_1B27E5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v12 = *(_QWORD *)(v10 - 80);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(a1);
}

void sub_1B27E6E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

unint64_t HiOSLightTunnel::GetDOD()
{
  return 0x8000000080000000;
}

uint64_t HiOSLightTunnel::GetROI(HiOSLightTunnel *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  CGFloat v28;
  CGFloat height;
  CGFloat width;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  float v44;
  float v45;
  CGFloat v46;
  float v47;
  float v48;
  CGFloat v49;
  CGFloat r1a;
  CGFloat r1b;
  CGFloat r1;
  CGFloat v53;
  CGFloat y;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat x;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  unint64_t v66;
  float v67;
  float v68;
  unint64_t v69;
  float32x2_t v70;
  unint64_t v71;
  float v72;
  float v73;
  unint64_t v74;
  float32x2_t v75;
  unint64_t v76;
  float v77;
  float v78;
  unint64_t v79;
  float32x2_t v80;
  unint64_t v81;
  float v82;
  float v83;
  unint64_t v84;
  float32x2_t v85;
  unint64_t v86;
  float v87;
  float v88;
  unint64_t v89;
  float32x2_t v90;
  unint64_t v91;
  float v92;
  float v93;
  unint64_t v94;
  float32x2_t v95;
  unint64_t v96;
  float v97;
  float v98;
  unint64_t v99;
  float32x2_t v100;
  unint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  _DWORD v106[4];
  uint64_t v107;
  HGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v107 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HiOSLightTunnel *, _QWORD, _DWORD *))(*(_QWORD *)this + 104))(this, 0, v106);
  v7 = *(float *)v106;
  v6 = *(float *)&v106[1];
  v8 = *(float *)&v106[2];
  v9 = *(float *)&v106[3];
  *(_QWORD *)&v108.var0 = v5;
  *(_QWORD *)&v108.var2 = v4;
  v10 = CGRectFromHGRect(v108);
  v14 = v13;
  v15 = v10;
  v16 = v11;
  v17 = (float)(v16 - v6) * (float)(v16 - v6);
  v18 = v11 + v12;
  v19 = v10 + v13;
  v20 = (float)(v19 - v7) * (float)(v19 - v7);
  v25 = sqrtf(v17 + v20) <= v8;
  *(float *)&v13 = (float)(v15 - v7) * (float)(v15 - v7);
  v21 = (float)(v18 - v6) * (float)(v18 - v6);
  v22 = sqrtf(*(float *)&v13 + v21);
  v23 = sqrtf(*(float *)&v13 + v17);
  v24 = sqrtf(v20 + v21);
  v25 = v25 && v24 <= v8;
  if (!v25 || v22 > v8 || v23 > v8)
  {
    if (fabsf(v9) >= 0.0001)
      return HGRectMake4i(vcvtmd_s64_f64(v7 - v8), vcvtmd_s64_f64(v6 - v8), vcvtpd_s64_f64(v7 + v8), vcvtpd_s64_f64(v6 + v8));
    v53 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v57 = *MEMORY[0x1E0C9D628];
    v28 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    r1a = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v104.f32[0] = v10;
    v104.f32[1] = v11;
    v101 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    v102 = v8;
    v103 = v9;
    v47 = v11 + v12;
    v48 = v19;
    v64 = v11;
    v65 = v10;
    v46 = v14;
    v63 = v12;
    lightTunnel(&v104, (float32x2_t *)&v101, &v105);
    v128.origin.x = v105.f32[0];
    v128.origin.y = v105.f32[1];
    v128.size.width = 0.0;
    v128.size.height = 0.0;
    v109.origin.y = v53;
    v109.origin.x = v57;
    v109.size.width = r1a;
    v109.size.height = v28;
    v110 = CGRectUnion(v109, v128);
    y = v110.origin.y;
    x = v110.origin.x;
    r1b = v110.size.width;
    height = v110.size.height;
    v45 = v15;
    v99 = __PAIR64__(LODWORD(v18), LODWORD(v15));
    v96 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    v97 = v8;
    v98 = v9;
    lightTunnel((float32x2_t *)&v99, (float32x2_t *)&v96, &v100);
    v129.origin.x = v100.f32[0];
    v129.origin.y = v100.f32[1];
    v129.size.width = 0.0;
    v129.size.height = 0.0;
    v111.origin.y = y;
    v111.origin.x = x;
    v111.size.width = r1b;
    v111.size.height = height;
    v112 = CGRectUnion(v111, v129);
    v55 = v112.origin.y;
    v59 = v112.origin.x;
    width = v112.size.width;
    v31 = v112.size.height;
    v94 = __PAIR64__(LODWORD(v16), LODWORD(v48));
    v44 = v16;
    v91 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    v92 = v8;
    v93 = v9;
    lightTunnel((float32x2_t *)&v94, (float32x2_t *)&v91, &v95);
    v130.origin.x = v95.f32[0];
    v130.origin.y = v95.f32[1];
    v130.size.width = 0.0;
    v130.size.height = 0.0;
    v113.origin.y = v55;
    v113.origin.x = v59;
    v113.size.width = width;
    v113.size.height = v31;
    v114 = CGRectUnion(v113, v130);
    v60 = v114.origin.x;
    v32 = v114.origin.y;
    v33 = v114.size.width;
    v34 = v114.size.height;
    v89 = __PAIR64__(LODWORD(v47), LODWORD(v48));
    v86 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    v87 = v8;
    v88 = v9;
    lightTunnel((float32x2_t *)&v89, (float32x2_t *)&v86, &v90);
    v131.origin.x = v90.f32[0];
    v131.origin.y = v90.f32[1];
    v131.size.width = 0.0;
    v131.size.height = 0.0;
    v115.origin.x = v60;
    v115.origin.y = v32;
    v115.size.width = v33;
    v115.size.height = v34;
    v116 = CGRectUnion(v115, v131);
    r1 = v116.origin.y;
    v56 = v116.origin.x;
    v61 = v116.size.width;
    v49 = v116.size.height;
    v116.origin.y = v64;
    v116.origin.x = v65;
    v116.size.width = v46;
    v116.size.height = v63;
    if (CGRectGetMinX(v116) < v7)
    {
      v117.origin.x = v65;
      v117.origin.y = v64;
      v117.size.width = v46;
      v117.size.height = v63;
      if (CGRectGetMaxX(v117) > v7)
      {
        v84 = __PAIR64__(LODWORD(v44), LODWORD(v7));
        v81 = __PAIR64__(LODWORD(v6), LODWORD(v7));
        v82 = v8;
        v83 = v9;
        lightTunnel((float32x2_t *)&v84, (float32x2_t *)&v81, &v85);
        v132.origin.x = v85.f32[0];
        v132.origin.y = v85.f32[1];
        v132.size.width = 0.0;
        v132.size.height = 0.0;
        v118.origin.y = r1;
        v118.origin.x = v56;
        v118.size.width = v61;
        v118.size.height = v49;
        v119 = CGRectUnion(v118, v132);
        v35 = v119.origin.x;
        v36 = v119.origin.y;
        v62 = v119.size.width;
        v37 = v119.size.height;
        v79 = __PAIR64__(LODWORD(v47), LODWORD(v7));
        v76 = __PAIR64__(LODWORD(v6), LODWORD(v7));
        v77 = v8;
        v78 = v9;
        lightTunnel((float32x2_t *)&v79, (float32x2_t *)&v76, &v80);
        v133.origin.x = v80.f32[0];
        v133.origin.y = v80.f32[1];
        v133.size.width = 0.0;
        v133.size.height = 0.0;
        v120.origin.x = v35;
        v120.origin.y = v36;
        v120.size.width = v62;
        v120.size.height = v37;
        v121 = CGRectUnion(v120, v133);
        r1 = v121.origin.y;
        v56 = v121.origin.x;
        v61 = v121.size.width;
        v49 = v121.size.height;
      }
    }
    v122.origin.x = v65;
    v122.origin.y = v64;
    v122.size.width = v46;
    v122.size.height = v63;
    if (CGRectGetMinY(v122) >= v6
      || (v123.origin.x = v65,
          v123.origin.y = v64,
          v123.size.width = v46,
          v123.size.height = v63,
          CGRectGetMaxY(v123) <= v6))
    {
      v127.origin.x = v56;
      v127.size.width = v61;
      v127.size.height = v49;
      v127.origin.y = r1;
    }
    else
    {
      v74 = __PAIR64__(LODWORD(v6), LODWORD(v45));
      v71 = __PAIR64__(LODWORD(v6), LODWORD(v7));
      v72 = v8;
      v73 = v9;
      lightTunnel((float32x2_t *)&v74, (float32x2_t *)&v71, &v75);
      v134.origin.x = v75.f32[0];
      v134.origin.y = v75.f32[1];
      v134.size.width = 0.0;
      v134.size.height = 0.0;
      v124.origin.y = r1;
      v124.origin.x = v56;
      v124.size.width = v61;
      v124.size.height = v49;
      v125 = CGRectUnion(v124, v134);
      v38 = v125.origin.x;
      v39 = v125.origin.y;
      v40 = v125.size.width;
      v41 = v125.size.height;
      v69 = __PAIR64__(LODWORD(v6), LODWORD(v48));
      v66 = __PAIR64__(LODWORD(v6), LODWORD(v7));
      v67 = v8;
      v68 = v9;
      lightTunnel((float32x2_t *)&v69, (float32x2_t *)&v66, &v70);
      v135.origin.x = v70.f32[0];
      v135.origin.y = v70.f32[1];
      v135.size.width = 0.0;
      v135.size.height = 0.0;
      v126.origin.x = v38;
      v126.origin.y = v39;
      v126.size.width = v40;
      v126.size.height = v41;
      v127 = CGRectUnion(v126, v135);
    }
    return HGRectFromCGRect(v127);
  }
  return v5;
}

float32x2_t lightTunnel@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  float v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;
  __float2 v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t result;
  float v16;

  v4 = a2[1].f32[1];
  v5 = *a2;
  v6 = *a1;
  v7 = vsub_f32(*a1, *a2);
  v16 = a2[1].f32[0] * (float)(1.0 / sqrtf(vaddv_f32(vmul_f32(v7, v7))));
  v8 = logf(v16);
  v9 = __sincosf_stret(v4 * v8);
  v10 = vmul_n_f32(v7, v9.__cosval);
  v11 = vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v7), v9.__sinval);
  v12.i32[0] = vadd_f32(v10, v11).u32[0];
  v12.i32[1] = vsub_f32(v10, v11).i32[1];
  v13 = vadd_f32(v5, vmul_n_f32(v12, v16));
  v14 = 0.0;
  if (v16 >= 1.0)
    v14 = 1.0;
  result = vadd_f32(vmul_n_f32(v13, v14), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v6), 1.0 - v14)));
  *a3 = result;
  return result;
}

void HiOSLightTunnel::~HiOSLightTunnel(HGNode *this)
{
  void *v1;

  HgciOSLightTunnel::~HgciOSLightTunnel(this);
  HGObject::operator delete(v1);
}

unint64_t HPoke::GetDOD(HPoke *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17[2];
  double v18;
  double v19;
  double v20[4];
  void (**v21[4])(int8x16_t *__return_ptr, _QWORD, __int128 *);
  __int128 v22;
  __int128 v23;
  float64x2_t v24;
  HGRect v25;
  __int128 v26;
  __int128 v27;
  float32x2_t v28;
  float v29;
  float v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v25 = a4;
  if (a3)
  {
    v4 = &HGRectNull;
    return *(_QWORD *)v4;
  }
  (*(void (**)(HPoke *, _QWORD, float32x2_t *))(*(_QWORD *)this + 104))(this, 0, &v28);
  v24 = vcvtq_f64_f32(v28);
  v7 = (float)(1.0 / v29);
  v8 = v30;
  if (fabs(v30 + -1.0) < 0.0000001 && v7 > -0.0000001 && v7 < 0.0000001)
  {
    v4 = &HGRectInfinite;
    return *(_QWORD *)v4;
  }
  Interval::pixelToFloat(&v25.var0, (double *)&v22);
  *(_QWORD *)&v26 = v22;
  *((_QWORD *)&v26 + 1) = v23;
  *(double *)&v27 = *((double *)&v22 + 1) - *(double *)&v22;
  *((double *)&v27 + 1) = *((double *)&v23 + 1) - *(double *)&v23;
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)this + 68, (double *)&v26, (uint64_t)&v26))
  {
    v9 = *(double *)&v26;
    v10 = *(double *)&v26 + *(double *)&v27;
    if (v9 > v9 + *(double *)&v27)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    v11 = *((_QWORD *)&v26 + 1);
    v12 = *((double *)&v26 + 1) + *((double *)&v27 + 1);
    if (*((double *)&v26 + 1) > *((double *)&v26 + 1) + *((double *)&v27 + 1))
      boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  else
  {
    v10 = INFINITY;
    v9 = -INFINITY;
    v11 = 0xFFF0000000000000;
    v12 = INFINITY;
  }
  *(double *)&v22 = v9;
  *((double *)&v22 + 1) = v10;
  *(_QWORD *)&v23 = v11;
  *((double *)&v23 + 1) = v12;
  operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>((double *)&v22, v24.f64, (double *)&v26);
  v22 = v26;
  v23 = v27;
  v21[0] = (void (**)(int8x16_t *__return_ptr, _QWORD, __int128 *))&unk_1E64D9F70;
  v21[1] = *(void (***)(int8x16_t *__return_ptr, _QWORD, __int128 *))&v7;
  v21[2] = *(void (***)(int8x16_t *__return_ptr, _QWORD, __int128 *))&v8;
  *(double *)&v21[3] = sqrt(v7) * v8;
  v26 = 0uLL;
  Interval::eightPointDOD((uint64_t)&v22, (uint64_t)&v26, v21, (uint64_t)v20);
  operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>(v20, v24.f64, v17);
  *(double *)&v26 = v17[0];
  *((double *)&v26 + 1) = v18;
  *(double *)&v27 = v17[1] - v17[0];
  *((double *)&v27 + 1) = v19 - v18;
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)this + 52, (double *)&v26, (uint64_t)&v26))
  {
    v13 = *(double *)&v26;
    v14 = *(double *)&v26 + *(double *)&v27;
    if (v13 > v13 + *(double *)&v27)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    v15 = *((double *)&v26 + 1);
    v16 = *((double *)&v26 + 1) + *((double *)&v27 + 1);
    if (*((double *)&v26 + 1) > *((double *)&v26 + 1) + *((double *)&v27 + 1))
      boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  else
  {
    v14 = INFINITY;
    v13 = -INFINITY;
    v15 = -INFINITY;
    v16 = INFINITY;
  }
  v20[0] = v13;
  v20[1] = v14;
  v20[2] = v15;
  v20[3] = v16;
  return Interval::floatToPixel(v20);
}

double operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double result;

  v6 = fegetround();
  fesetround(0x400000);
  v7 = *a2 - *a1;
  v8 = a1[1] - *a2;
  fesetround(v6);
  v9 = fegetround();
  fesetround(0x400000);
  v10 = a2[1];
  v11 = v10 - a1[2];
  v12 = a1[3] - v10;
  fesetround(v9);
  result = -v11;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v11;
  a3[3] = v12;
  return result;
}

double operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double result;

  v6 = fegetround();
  fesetround(0x400000);
  v7 = -*a2 - *a1;
  v8 = *a2 + a1[1];
  fesetround(v6);
  v9 = fegetround();
  fesetround(0x400000);
  v10 = a2[1];
  v11 = -v10 - a1[2];
  v12 = v10 + a1[3];
  fesetround(v9);
  result = -v11;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v11;
  a3[3] = v12;
  return result;
}

unint64_t HPoke::GetROI(HPoke *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var1;
  int var3;
  double v11;
  double v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float v62;
  float v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  float v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  float v124[2];
  float v125;
  float v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var1 = a4.var1;
    var3 = a4.var3;
    (*(void (**)(HPoke *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, v124);
    v11 = v124[0];
    v12 = v124[1];
    v13 = (float)var0;
    if ((float)var0 <= (float)var2)
    {
      v18 = *((double *)this + 81);
      v122 = v18 * (double)var1;
      v120 = *((double *)this + 83);
      v19 = *((double *)this + 69);
      v119 = v19 * (double)var1;
      v117 = *((double *)this + 71);
      v20 = *((double *)this + 73);
      v21 = *((double *)this + 75);
      v22 = v125;
      v23 = *((double *)this + 64);
      v24 = *((double *)this + 65);
      v25 = *((double *)this + 67);
      v26 = *((double *)this + 52);
      v27 = *((double *)this + 53);
      v28 = *((double *)this + 55);
      v29 = *((double *)this + 56);
      v30 = *((double *)this + 57);
      v31 = *((double *)this + 59);
      v32 = v126;
      v113 = v18 * (double)var3;
      v115 = v20 * (double)var1;
      v111 = v20 * (double)var3;
      v112 = v19 * (double)var3;
      v16 = -3.40282347e38;
      v17 = 3.40282347e38;
      v14 = 3.40282347e38;
      v15 = -3.40282347e38;
      do
      {
        v33 = *((double *)this + 80) * v13;
        v34 = *((double *)this + 68) * v13;
        v35 = v120 + v33 + v122;
        v36 = *((double *)this + 72) * v13;
        v37 = (v21 + v36 + v115) / v35;
        v38 = (v117 + v34 + v119) / v35 - v11;
        v39 = v37 - v12;
        v40 = sqrt(v38 * v38 + v39 * v39) * v22;
        v41 = sqrt(v40 + 0.00001);
        v42 = v38 / v41 + v11;
        v43 = v39 / v41 + v12;
        v44 = v23 * v42 + v24 * v43;
        v45 = v26 * v42 + v27 * v43;
        v46 = (v31 + v29 * v42 + v30 * v43) / (v25 + v44);
        v47 = ((v28 + v45) / (v25 + v44) - v13) * v32 + v13;
        v48 = (v46 - (double)var1) * v32 + (double)var1;
        v49 = v120 + v33 + v113;
        if (v47 < v14)
          v14 = v47;
        v50 = (v21 + v36 + v111) / v49;
        v51 = (v117 + v34 + v112) / v49 - v11;
        v52 = v50 - v12;
        v53 = sqrt(v51 * v51 + v52 * v52) * v22;
        if (v48 < v17)
          v17 = v48;
        v54 = v53;
        v55 = sqrt(v54 + 0.00001);
        v56 = v51 / v55 + v11;
        v57 = v52 / v55 + v12;
        if (v47 > v15)
          v15 = v47;
        v58 = v23 * v56 + v24 * v57;
        if (v48 > v16)
          v16 = v48;
        v59 = v26 * v56 + v27 * v57;
        v60 = ((v28 + v59) / (v25 + v58) - v13) * v32 + v13;
        v61 = ((v31 + v29 * v56 + v30 * v57) / (v25 + v58) - (double)var3) * v32 + (double)var3;
        if (v60 < v14)
          v14 = ((v28 + v59) / (v25 + v58) - v13) * v32 + v13;
        if (v61 < v17)
          v17 = v61;
        if (v60 > v15)
          v15 = ((v28 + v59) / (v25 + v58) - v13) * v32 + v13;
        if (v61 > v16)
          v16 = v61;
        v13 = v13 + 1.0;
      }
      while (v13 <= (float)var2);
    }
    else
    {
      v14 = 3.40282347e38;
      v15 = -3.40282347e38;
      v16 = -3.40282347e38;
      v17 = 3.40282347e38;
    }
    v62 = (float)var1;
    v63 = (float)var3;
    if ((float)var1 <= (float)var3)
    {
      v64 = *((double *)this + 80);
      v123 = v64 * (double)var0;
      v121 = *((double *)this + 83);
      v65 = *((double *)this + 68);
      v118 = *((double *)this + 71);
      v66 = *((double *)this + 72);
      v67 = *((double *)this + 75);
      v68 = v125;
      v69 = *((double *)this + 64);
      v70 = *((double *)this + 65);
      v71 = *((double *)this + 67);
      v72 = *((double *)this + 52);
      v73 = *((double *)this + 53);
      v74 = *((double *)this + 55);
      v75 = *((double *)this + 56);
      v76 = *((double *)this + 57);
      v77 = *((double *)this + 59);
      v78 = v126;
      v114 = v64 * (double)var2;
      v116 = (double)var2;
      do
      {
        v79 = *((double *)this + 81) * v62;
        v80 = *((double *)this + 69) * v62;
        v81 = v121 + v123 + v79;
        v82 = *((double *)this + 73) * v62;
        v83 = (v118 + v65 * (double)var0 + v80) / v81 - v11;
        v84 = (v67 + v66 * (double)var0 + v82) / v81 - v12;
        v85 = sqrt(v83 * v83 + v84 * v84) * v68;
        v86 = sqrt(v85 + 0.00001);
        v87 = v83 / v86;
        v88 = v84 / v86;
        v89 = v87 + v11;
        v90 = v88 + v12;
        v91 = v69 * (v87 + v11) + v70 * v90;
        v92 = v63;
        v93 = ((v74 + v72 * v89 + v73 * v90) / (v71 + v91) - (double)var0) * v78 + (double)var0;
        v94 = ((v77 + v75 * v89 + v76 * v90) / (v71 + v91) - v62) * v78 + v62;
        v95 = v121 + v114 + v79;
        v96 = (v118 + v65 * (double)var2 + v80) / v95;
        if (v93 < v14)
          v14 = v93;
        v97 = v96 - v11;
        v98 = (v67 + v66 * (double)var2 + v82) / v95 - v12;
        v99 = sqrt(v97 * v97 + v98 * v98) * v68;
        if (v94 < v17)
          v17 = v94;
        v100 = v99;
        v101 = sqrt(v100 + 0.00001);
        v102 = v97 / v101 + v11;
        v103 = v98 / v101 + v12;
        if (v93 > v15)
          v15 = v93;
        v104 = v69 * v102 + v70 * v103;
        if (v94 > v16)
          v16 = v94;
        v105 = v71 + v104;
        v106 = (v74 + v72 * v102 + v73 * v103) / (v71 + v104);
        v107 = ((v77 + v75 * v102 + v76 * v103) / v105 - v62) * v78 + v62;
        v108 = v106 - v116;
        v63 = v92;
        v109 = v108 * v78 + v116;
        if (v109 < v14)
          v14 = v109;
        if (v107 < v17)
          v17 = v107;
        if (v109 > v15)
          v15 = v109;
        if (v107 > v16)
          v16 = v107;
        v62 = v62 + 1.0;
      }
      while (v62 <= v92);
    }
    v4 = (int)(v14 + -2.0);
    v5 = (int)(v17 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HPoke::setPixelTransform(double *a1, double *a2)
{
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t i;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v3[i] = v5[i];
      ++v4;
      v3 += 4;
      v5 += 4;
    }
    while (v4 != 4);
  }
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(a1 + 68), a2, 0.0);
  v7 = a1[68];
  v8 = a1[69];
  v9 = a1[71];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v7, v8, 0.0, v9);
  v10 = a1[72];
  v11 = a1[73];
  v12 = a1[75];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v10, v11, 0.0, v12);
  v13 = a1[80];
  v14 = a1[81];
  v15 = a1[83];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v13, v14, 0.0, v15);
  v16 = a1[52];
  v17 = a1[53];
  v18 = a1[55];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v16, v17, 0.0, v18);
  v19 = a1[56];
  v20 = a1[57];
  v21 = a1[59];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v19, v20, 0.0, v21);
  v22 = a1[64];
  v23 = a1[65];
  v24 = a1[67];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v22, v23, 0.0, v24);
}

void HPoke::~HPoke(HGNode *this)
{
  void *v1;

  HgcPoke::~HgcPoke(this);
  HGObject::operator delete(v1);
}

BOOL PCMatrix44Tmpl<double>::transformRect<double>(double *a1, double *a2, uint64_t a3)
{
  double v4;
  double v5;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  double v10;
  uint64_t v16;
  float64x2_t *v17;
  BOOL v18;
  __int128 v19;
  float64x2_t v22;
  __int128 v23;
  float64x2_t v24;
  __int128 v25;
  double v26[9];

  v26[8] = *(double *)MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (v4 < 0.0 || (v5 = a2[3], v5 < 0.0))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a3 + 16) = _Q0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a2[1];
    v26[0] = *a2;
    v26[1] = v10 + v5;
    v26[2] = v4 + v26[0];
    v26[3] = v10 + v5;
    v26[4] = v4 + v26[0];
    v26[5] = v10;
    v26[6] = v26[0];
    v26[7] = v10;
    v24 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v25 = _Q0;
    v16 = -4;
    v17 = (float64x2_t *)v26;
    do
    {
      v22 = 0u;
      v23 = 0u;
      PCMatrix44Tmpl<double>::transform<double>(a1, v17->f64, v22.f64);
      v18 = *((double *)&v23 + 1) <= 0.0;
      if (*((double *)&v23 + 1) > 0.0)
      {
        if (v8)
          return v7;
      }
      else if (*((double *)&v23 + 1) >= 0.0 || v9)
      {
        return v7;
      }
      v9 = *((double *)&v23 + 1) > 0.0;
      *v17 = vmulq_n_f64(v22, 1.0 / *((double *)&v23 + 1));
      PCRect<double>::operator|=(&v24, v17);
      v7 = (unint64_t)(v16 + 4) > 2;
      ++v17;
      v8 = v18;
    }
    while (!__CFADD__(v16++, 1));
    v19 = v25;
    *(float64x2_t *)a3 = v24;
    *(_OWORD *)(a3 + 16) = v19;
  }
  return 1;
}

double *PCMatrix44Tmpl<double>::transform<double>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;

  v3 = *a2;
  v4 = a2[1];
  *a3 = a1[3] + *a2 * *a1 + v4 * a1[1];
  a3[1] = a1[7] + v3 * a1[4] + v4 * a1[5];
  a3[2] = a1[11] + v3 * a1[8] + v4 * a1[9];
  a3[3] = a1[15] + v3 * a1[12] + v4 * a1[13];
  return a3;
}

{
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a1[15] + *a2 * a1[12] + v4 * a1[13];
  *a3 = (a1[3] + *a2 * *a1 + v4 * a1[1]) / v5;
  a3[1] = (a1[7] + v3 * a1[4] + v4 * a1[5]) / v5;
  return a3;
}

{
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *a3 = a1[3] + *a2 * *a1 + v4 * a1[1] + v5 * a1[2];
  a3[1] = a1[7] + v3 * a1[4] + v4 * a1[5] + v5 * a1[6];
  a3[2] = a1[11] + v3 * a1[8] + v4 * a1[9] + v5 * a1[10];
  a3[3] = a1[15] + v3 * a1[12] + v4 * a1[13] + v5 * a1[14];
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *a3 = *a2 * *a1 + v4 * a1[1] + v5 * a1[2] + v6 * a1[3];
  a3[1] = v3 * a1[4] + v4 * a1[5] + v5 * a1[6] + v6 * a1[7];
  a3[2] = v3 * a1[8] + v4 * a1[9] + v5 * a1[10] + v6 * a1[11];
  a3[3] = v3 * a1[12] + v4 * a1[13] + v5 * a1[14] + v6 * a1[15];
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a1[15] + *a2 * a1[12] + v4 * a1[13] + v5 * a1[14];
  *a3 = (a1[3] + *a2 * *a1 + v4 * a1[1] + v5 * a1[2]) / v6;
  a3[1] = (a1[7] + v3 * a1[4] + v4 * a1[5] + v5 * a1[6]) / v6;
  a3[2] = (a1[11] + v3 * a1[8] + v4 * a1[9] + v5 * a1[10]) / v6;
  return a3;
}

float64x2_t PCRect<double>::operator|=(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t result;
  float64x2_t v4;
  float64x2_t v5;

  v2.f64[0] = a1[1].f64[0];
  if (v2.f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a1, *a2), *(int8x16_t *)a2, *(int8x16_t *)a1);
    v2.f64[1] = a1[1].f64[1];
    v5 = vaddq_f64(*a1, v2);
    result = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a2, v5), *(int8x16_t *)a2, (int8x16_t)v5), v4);
    *a1 = v4;
    a1[1] = result;
  }
  else
  {
    result = *a2;
    *a1 = *a2;
    a1[1].f64[0] = 0.0;
    a1[1].f64[1] = 0.0;
  }
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;

  result.f64[0] = a1[1].f64[0];
  if (result.f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    v4 = a2[1];
    if (v4.f64[0] >= 0.0 && v4.f64[1] >= 0.0)
    {
      v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a1, *a2), *(int8x16_t *)a2, *(int8x16_t *)a1);
      result.f64[1] = a1[1].f64[1];
      v6 = vaddq_f64(*a1, result);
      v7 = vaddq_f64(*a2, v4);
      result = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), (int8x16_t)v7, (int8x16_t)v6), v5);
      *a1 = v5;
      a1[1] = result;
    }
  }
  else
  {
    result = *a2;
    v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
  }
  return result;
}

void boost::numeric::interval_lib::exception_create_empty::operator()()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1B5E28D14](exception, "boost::interval: empty interval created");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1B27E8430(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PokeDistortion::operator()(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  const double *v6;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;

  if (fabs(*(double *)(a1 + 16) + -1.0) >= 0.0000001)
  {
    Interval::normalized(a2->f64, v12.f64);
    v9 = *(double *)(a1 + 24);
    v10 = 1.0 - *(double *)(a1 + 16);
    v11 = sqrt(v9 * v9 + v10 * 4.0 * sqrt(a2->f64[0] * a2->f64[0] + a2->f64[1] * a2->f64[1]));
    v8 = vmulq_n_f64(v12, (v11 - v9) / (v10 + v10) * ((v11 - v9) / (v10 + v10)));
  }
  else
  {
    v6 = (const double *)(a1 + 8);
    v7 = vld1q_dup_f64(v6);
    v8 = vdivq_f64(vmulq_n_f64(*a2, sqrt(vaddvq_f64(vmulq_f64(*a2, *a2)))), v7);
  }
  *a3 = v8;
}

BOOL PCMatrix44Tmpl<double>::planarInverseZ(uint64_t a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL8 v16;

  v4 = a2[4];
  v3 = a2[5];
  v5 = a2[15];
  v6 = a2[7];
  v8 = a2[12];
  v7 = a2[13];
  v9 = v3 * v5 - v7 * v6;
  v10 = a2[3];
  v11 = v6 * v8 - v5 * v4;
  v13 = *a2;
  v12 = a2[1];
  v14 = v7 * v4 - v3 * v8;
  v15 = v10 * v14 + v9 * *a2 + v12 * v11;
  v16 = fabs(v15) >= a3 && v15 != 0.0;
  if (v16)
  {
    *(double *)a1 = v9 * (1.0 / v15);
    *(double *)(a1 + 8) = (v7 * v10 - v5 * v12) * (1.0 / v15);
    *(double *)(a1 + 24) = (v6 * v12 - v3 * v10) * (1.0 / v15);
    *(double *)(a1 + 32) = v11 * (1.0 / v15);
    *(double *)(a1 + 40) = (v5 * v13 - v10 * v8) * (1.0 / v15);
    *(double *)(a1 + 56) = (v10 * v4 - v6 * v13) * (1.0 / v15);
    *(double *)(a1 + 96) = v14 * (1.0 / v15);
    *(double *)(a1 + 104) = (v12 * v8 - v7 * v13) * (1.0 / v15);
    *(double *)(a1 + 120) = (v3 * v13 - v12 * v4) * (1.0 / v15);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
  }
  return v16;
}

unint64_t HHalftone::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0x8000000080000000;
  else
    return a4;
}

uint64_t HHalftone::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HHalftone::~HHalftone(HGNode *this)
{
  void *v1;

  HgcHalftone::~HgcHalftone(this);
  HGObject::operator delete(v1);
}

void sub_1B27E8BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HPoke::HPoke(HPoke *this)
{
  uint64_t v1;

  HgcPoke::HgcPoke(this);
  *(_QWORD *)v1 = &unk_1E64D9D08;
  *(_QWORD *)(v1 + 536) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 416) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_QWORD *)(v1 + 664) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 544) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
}

void sub_1B27E99DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

unint64_t HSlicedTile::GetDOD(HSlicedTile *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    (*(void (**)(HSlicedTile *, uint64_t, float *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 5, &v61, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
    v50 = v62;
    v51 = v61;
    v57 = v64;
    v58 = v63;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 6, &v61);
    v46 = v61;
    v47 = v62;
    v54 = v64;
    v55 = v63;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 7, &v61);
    v48 = v61;
    v53 = v62;
    v56 = v63;
    v60 = v64;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 8, &v61);
    v49 = v61;
    v45 = v62;
    v52 = v63;
    v59 = v64;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 12, &v61);
    v43 = v61;
    v44 = v62;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 10, &v61);
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 9, &v61);
    v7 = v61;
    v8 = v62;
    (*(void (**)(HSlicedTile *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v61);
    v9 = v61;
    v10 = v62;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v61);
    v11 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v61);
    v12 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v61);
    v13 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, &v61);
    v14 = v61;
    (*(void (**)(HSlicedTile *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 13, &v61);
    v15 = 0.5 - v61;
    if (v11 <= (float)(0.5 - v61))
      v16 = v11;
    else
      v16 = 0.5 - v61;
    if (v13 <= v15)
      v15 = v13;
    v17 = v61 + -0.5;
    if (v12 >= (float)(v61 + -0.5))
      v18 = v12;
    else
      v18 = v61 + -0.5;
    if (v14 >= v17)
      v17 = v14;
    v19 = (float)*((int *)this + 104);
    v20 = (float)*((int *)this + 105);
    v21 = (float)(v48
                * (float)((float)(v57 + (float)((float)(v58 * 0.0) + (float)((float)(v51 * v19) + (float)(v50 * v20))))
                        / v7))
        - (float)(v18 - (float)(v9 * v18));
    v22 = (float)(v45
                * (float)((float)(v54 + (float)((float)(v55 * 0.0) + (float)((float)(v46 * v19) + (float)(v47 * v20))))
                        / v8))
        - (float)(v17 - (float)(v10 * v17));
    v23 = v43;
    if (v9 > v61)
      v23 = 1.0;
    v24 = v23 * v21;
    v25 = v44;
    if (v10 > v61)
      v25 = 1.0;
    v26 = v51 * (float)(v7 * v24);
    v27 = v47 * (float)(v8 * (float)(v25 * v22));
    v28 = (float)(v48 * v26) + (float)(v53 * v27);
    v29 = (float)*((int *)this + 106);
    v30 = (float)(v49 * v26) + (float)(v45 * v27);
    v31 = (float)*((int *)this + 107);
    v32 = v51
        * (float)(v7
                * (float)(v23
                        * (float)((float)((float)(v9 * v16) - v16)
                                + (float)(v48
                                        * (float)((float)(v57
                                                        + (float)((float)(v58 * 0.0)
                                                                + (float)((float)(v51 * v29) + (float)(v50 * v31))))
                                                / v7)))));
    v33 = v47
        * (float)(v8
                * (float)(v25
                        * (float)((float)((float)(v10 * v15) - v15)
                                + (float)(v45
                                        * (float)((float)(v54
                                                        + (float)((float)(v55 * 0.0)
                                                                + (float)((float)(v46 * v29) + (float)(v47 * v31))))
                                                / v8)))));
    v4 = HGRectMake4i(vcvtmd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + v28)) + -1.0 + 0.0000001), vcvtmd_s64_f64((float)(v59 + (float)((float)(v52 * 0.0) + v30)) + -1.0 + 0.0000001), vcvtpd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + (float)((float)(v48 * v32) + (float)(v53 * v33)))) + 1.0), vcvtpd_s64_f64((float)(v59 + (float)((float)(v52 * 0.0) + (float)((float)(v49 * v32) + (float)(v45 * v33)))) + 1.0));
    v5 = HIDWORD(v4);
    if ((v4 - 0x7FFFFFFF) < 3
      || v34 == 0x7FFFFFFF
      || v34 < -2147483646
      || (HIDWORD(v4) - 0x7FFFFFFF) < 3
      || v35 == 0x7FFFFFFF
      || v35 < -2147483646)
    {
      LODWORD(v4) = 0;
      LODWORD(v5) = 0;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

HGRect *HSlicedTile::setInputRect(HGRect *this, HGRect a2)
{
  this[26] = a2;
  return this;
}

unint64_t HSlicedTile::GetROI(HSlicedTile *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  int var2;
  int var0;
  int var3;
  int var1;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var3 = a4.var3;
    var1 = a4.var1;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 5, &v52);
    v51 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 6, &v52);
    v50 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 7, &v52);
    v49 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 8, &v52);
    v48 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 12, &v52);
    v47 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 10, &v52);
    v37 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 9, &v52);
    v46 = v52;
    (*(void (**)(HSlicedTile *, _QWORD, __int128 *))(*(_QWORD *)this + 104))(this, 0, &v52);
    v45 = v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 1, &v52);
    v11 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 2, &v52);
    v12 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 3, &v52);
    v13 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 4, &v52);
    v14 = *(float *)&v52;
    (*(void (**)(HSlicedTile *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 13, &v52);
    if (v11 <= (float)(0.5 - *(float *)&v52))
      v15 = v11;
    else
      v15 = 0.5 - *(float *)&v52;
    if (v13 <= (float)(0.5 - *(float *)&v52))
      v16 = v13;
    else
      v16 = 0.5 - *(float *)&v52;
    if (v12 >= (float)(*(float *)&v52 + -0.5))
      v17 = v12;
    else
      v17 = *(float *)&v52 + -0.5;
    v18 = (float)var0;
    v19 = (float)var1;
    if (v14 < (float)(*(float *)&v52 + -0.5))
      v14 = *(float *)&v52 + -0.5;
    v20 = (float)var2;
    v21 = (float)var3;
    v38 = v16;
    v39 = v15;
    v22 = v17;
    if (v18 <= (float)var2)
    {
      v25 = -2147500000.0;
      v26 = 2147500000.0;
      v23 = 2147500000.0;
      v24 = -2147500000.0;
      do
      {
        *(float *)&v52 = v18;
        *((float *)&v52 + 1) = (float)var1;
        *((_QWORD *)&v52 + 1) = 0x3F80000000000000;
        v42 = v18;
        v43 = v21;
        v44 = 0x3F80000000000000;
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v15, v17, v16, v14, &v42);
        if (v40 < v23)
          v23 = v40;
        if (v41 < v26)
          v26 = v41;
        if (v40 > v24)
          v24 = v40;
        if (v41 > v25)
          v25 = v41;
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v39, v22, v38, v14, (float *)&v52);
        v16 = v38;
        v15 = v39;
        if (v40 < v23)
          v23 = v40;
        if (v41 < v26)
          v26 = v41;
        if (v40 > v24)
          v24 = v40;
        v17 = v22;
        if (v41 > v25)
          v25 = v41;
        v21 = (float)var3;
        v20 = (float)var2;
        v18 = v18 + 1.0;
      }
      while (v18 <= (float)var2);
    }
    else
    {
      v23 = 2147500000.0;
      v24 = -2147500000.0;
      v25 = -2147500000.0;
      v26 = 2147500000.0;
    }
    if (v19 <= v21)
    {
      do
      {
        *(float *)&v52 = (float)var0;
        *((float *)&v52 + 1) = v19;
        *((_QWORD *)&v52 + 1) = 0x3F80000000000000;
        v42 = v20;
        v43 = v19;
        v44 = 0x3F80000000000000;
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v15, v17, v16, v14, (float *)&v52);
        if (v40 >= v23)
          v27 = v23;
        else
          v27 = v40;
        if (v41 < v26)
          v26 = v41;
        if (v40 > v24)
          v24 = v40;
        if (v41 > v25)
          v25 = v41;
        calculateROI(v37 != 0.0, (float *)&v45, (float *)&v51, (float *)&v50, (float *)&v49, (float *)&v48, (float *)&v46, (float *)&v47, (uint64_t)&v40, v39, v22, v38, v14, &v42);
        v16 = v38;
        v15 = v39;
        if (v40 >= v27)
          v23 = v27;
        else
          v23 = v40;
        if (v41 < v26)
          v26 = v41;
        if (v40 > v24)
          v24 = v40;
        v17 = v22;
        if (v41 > v25)
          v25 = v41;
        v19 = v19 + 1.0;
        v20 = (float)var2;
      }
      while (v19 <= (float)var3);
    }
    v4 = HGRectMake4i(vcvtms_s32_f32(v23 + 0.00001), vcvtms_s32_f32(v26 + 0.00001), vcvtps_s32_f32(v24), vcvtps_s32_f32(v25));
    v5 = HIDWORD(v4);
    if ((v4 - 0x7FFFFFFF) < 3
      || v28 == 0x7FFFFFFF
      || v28 < -2147483646
      || (HIDWORD(v4) - 0x7FFFFFFF) < 3
      || v29 == 0x7FFFFFFF
      || v29 < -2147483646)
    {
      LODWORD(v4) = 0;
      LODWORD(v5) = 0;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

double calculateROI@<D0>(char a1@<W0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float *a7@<X6>, float *a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>, float *a14)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  double result;

  v14 = a14[1];
  v15 = a14[2];
  v16 = a14[3];
  v17 = (float)((float)((float)(*a14 * *a3) + (float)(v14 * a3[1])) + (float)(v15 * a3[2])) + (float)(v16 * a3[3]);
  v18 = a4[1];
  v19 = (float)((float)((float)(*a14 * *a4) + (float)(v14 * v18)) + (float)(v15 * a4[2])) + (float)(v16 * a4[3]);
  v20 = a7[1];
  v21 = (float)((float)(v17 / *a7) * *a5) / *a8;
  v22 = v19 / v20;
  v23 = a6[1];
  v24 = (float)(v22 * v23) / a8[1];
  v26 = *a2;
  v25 = a2[1];
  v27 = *a2 * a10;
  v28 = v25 * a12;
  if (v21 >= v27)
  {
    v30 = v21 - (float)(v27 - a10);
  }
  else
  {
    v29 = v26 * a11;
    if (v21 <= (float)(v26 * a11))
    {
      v30 = v21 + (float)(a11 - v29);
    }
    else
    {
      v30 = 0.0;
      if (v21 < v27)
      {
        if (v21 >= v29)
          v31 = v21;
        else
          v31 = v26 * a11;
        if (v31 > v27)
          v31 = *a2 * a10;
        v32 = (float)(v26 * (float)((float)(v31 - v29) / (float)(v27 - v29))) + 0.0;
        v33 = v32 - floorf(v32 + 0.00001);
        v34 = v26 * 0.5;
        if ((a1 & 1) != 0 || (float)(v34 - floorf(v34 + 0.00001)) != 0.0)
          v33 = (float)((float)(v33 - v34) + -0.5) - floorf((float)((float)(v33 - v34) + -0.5) + 0.00001);
        if (v33 < 0.0)
          v33 = 0.0;
        if (v33 > 1.0)
          v33 = 1.0;
        v30 = (float)((float)(a10 - a11) * v33) + a11;
      }
    }
  }
  if (v24 >= v28)
  {
    v36 = v24 - (float)(v28 - a12);
  }
  else
  {
    v35 = v25 * a13;
    if (v24 <= (float)(v25 * a13))
    {
      v36 = v24 + (float)(a13 - v35);
    }
    else
    {
      v36 = 0.0;
      if (v24 < v28)
      {
        if (v24 >= v35)
          v37 = v24;
        else
          v37 = v25 * a13;
        if (v37 > v28)
          v37 = v25 * a12;
        v38 = (float)(v25 * (float)((float)(v37 - v35) / (float)(v28 - v35))) + 0.0;
        v39 = v38 - floorf(v38 + 0.00001);
        v40 = v25 * 0.5;
        if ((a1 & 1) != 0 || (float)(v40 - floorf(v40 + 0.00001)) != 0.0)
          v39 = (float)((float)(v39 - v40) + -0.5) - floorf((float)((float)(v39 - v40) + -0.5) + 0.00001);
        if (v39 < 0.0)
          v39 = 0.0;
        if (v39 > 1.0)
          v39 = 1.0;
        v36 = (float)((float)(a12 - a13) * v39) + a13;
      }
    }
  }
  v41 = *a3 * (float)(*a7 * v30);
  v42 = v18 * (float)(v20 * v36);
  v43 = a5[3] + (float)((float)(a5[2] * 0.0) + (float)((float)(*a5 * v41) + (float)(a5[1] * v42)));
  v44 = (float)(v23 * v42) + (float)(v41 * *a6);
  v45 = a6[3];
  v46 = a6[2] * 0.0;
  *(float *)a9 = v43;
  *(float *)(a9 + 4) = v45 + (float)(v44 + v46);
  result = 0.0078125;
  *(_QWORD *)(a9 + 8) = 0x3F80000000000000;
  return result;
}

void HSlicedTile::~HSlicedTile(HGNode *this)
{
  void *v1;

  HgcSlicedTile::~HgcSlicedTile(this);
  HGObject::operator delete(v1);
}

uint64_t HEquirectToSinusoidal::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HEquirectToSinusoidal::GetROI(HEquirectToSinusoidal *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var2;
  int var0;
  int var3;
  int var1;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73[2];
  float v74;
  float v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  float v80[6];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 0;
  var2 = a4.var2;
  var0 = a4.var0;
  var3 = a4.var3;
  var1 = a4.var1;
  (*(void (**)(HEquirectToSinusoidal *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, v80);
  v10 = v80[1];
  v72 = v80[0];
  v79 = *(_QWORD *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, v80);
  v70 = v80[0];
  v78 = *(_QWORD *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, v80);
  v77 = *(_OWORD *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, v80);
  v76 = *(_OWORD *)v80;
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, v80);
  v11 = v80[2];
  v69 = *(_QWORD *)v80;
  v71 = v80[3];
  (*(void (**)(HEquirectToSinusoidal *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 5, v80);
  v12 = v80[1];
  v13 = v80[0];
  v15 = v80[3];
  v14 = v80[2];
  v16 = (float)var1;
  if ((float)var1 <= (float)var3)
  {
    v61 = v80[2];
    v62 = v80[0];
    v63 = v11;
    v65 = v80[1];
    v67 = v80[3];
    v21 = -3.4028e38;
    v22 = 3.4028e38;
    v18 = 3.4028e38;
    v20 = -3.4028e38;
    do
    {
      v74 = (float)var0;
      v75 = v16;
      processPoint(&v74, (float *)&v79, (float *)&v78, (float *)&v77, (float *)&v76, v80);
      v73[0] = (float)var2;
      v73[1] = v16;
      processPoint(v73, (float *)&v79, (float *)&v78, (float *)&v77, (float *)&v76, &v74);
      v24 = v80[1];
      v23 = v80[0];
      if (v18 >= v80[0])
        v25 = v80[0];
      else
        v25 = v18;
      if (v22 >= v80[1])
        v26 = v80[1];
      else
        v26 = v22;
      if (v20 > v80[0])
        v23 = v20;
      if (v21 > v80[1])
        v24 = v21;
      if (v25 >= v74)
        v18 = v74;
      else
        v18 = v25;
      if (v26 >= v75)
        v22 = v75;
      else
        v22 = v26;
      if (v23 <= v74)
        v20 = v74;
      else
        v20 = v23;
      if (v24 <= v75)
        v21 = v75;
      else
        v21 = v24;
      v16 = v16 + 1.0;
    }
    while (v16 <= (float)var3);
    v19 = v21;
    v17 = v22;
    v13 = v62;
    v12 = v65;
    v15 = v67;
    v11 = v63;
    v14 = v61;
  }
  else
  {
    v17 = 3.40282347e38;
    v18 = 3.4028e38;
    v19 = -3.40282347e38;
    v20 = -3.4028e38;
  }
  v27 = floor(v18 / 6.28318531);
  v28 = floor(v20 / 6.28318531);
  v29 = v28 - v27;
  v30 = 6.2832;
  v31 = 0.0;
  if (v29 == 0.0)
  {
    v32 = v18;
    v66 = v12;
    v68 = v15;
    v64 = v11;
    v33 = v13;
    v34 = v17;
    v35 = v19;
    v36 = fmodf(v32, 6.2832);
    v31 = v36 >= 0.0 ? v36 : v36 + 6.2832;
    v30 = fmodf(v20, 6.2832);
    v19 = v35;
    v17 = v34;
    v13 = v33;
    v11 = v64;
    v12 = v66;
    v15 = v68;
    if (v30 < 0.0)
      v30 = v30 + 6.2832;
  }
  v37 = v72 * 0.5;
  v38 = (float)(v31 / v70) - v37;
  v39 = (float)(v30 / v70) - v37;
  v40 = v10 * 0.5;
  v41 = v19 - v40;
  *(float *)&v40 = v17 - v40;
  v42 = *(float *)&v69 * v38;
  v43 = *((float *)&v69 + 1) * *(float *)&v40;
  v44 = v71
      + (float)((float)(v11 * 0.0)
              + (float)((float)(*((float *)&v69 + 1) * *(float *)&v40) + (float)(*(float *)&v69 * v38)));
  v45 = v13 * v38;
  *(float *)&v40 = v12 * *(float *)&v40;
  v46 = v15 + (float)((float)(v14 * 0.0) + (float)(*(float *)&v40 + v45));
  v47 = *(float *)&v69 * v39;
  v48 = v71 + (float)((float)(v11 * 0.0) + (float)(v43 + (float)(*(float *)&v69 * v39)));
  v49 = v13 * v39;
  v50 = v15 + (float)((float)(v14 * 0.0) + (float)(*(float *)&v40 + v49));
  v51 = *((float *)&v69 + 1) * v41;
  v52 = v71 + (float)((float)(v11 * 0.0) + (float)((float)(*((float *)&v69 + 1) * v41) + v42));
  v53 = v12 * v41;
  v54 = v15 + (float)((float)(v14 * 0.0) + (float)(v53 + v45));
  v55 = v71 + (float)((float)(v11 * 0.0) + (float)(v51 + v47));
  v56 = v15 + (float)((float)(v14 * 0.0) + (float)(v53 + v49));
  if (v46 >= v50)
    v57 = v50;
  else
    v57 = v46;
  if (v46 > v50)
    v50 = v46;
  if (v44 >= v48)
    v58 = v48;
  else
    v58 = v44;
  if (v44 > v48)
    v48 = v44;
  if (v58 >= v52)
    v59 = v52;
  else
    v59 = v58;
  if (v57 >= v54)
    v57 = v54;
  if (v59 >= v55)
    v59 = v71 + (float)((float)(v11 * 0.0) + (float)(v51 + v47));
  if (v57 >= v56)
    v57 = v56;
  if (v48 > v52)
    v52 = v48;
  if (v50 > v54)
    v54 = v50;
  if (v52 <= v55)
    v60 = v71 + (float)((float)(v11 * 0.0) + (float)(v51 + v47));
  else
    v60 = v52;
  if (v54 > v56)
    v56 = v54;
  return HGRectMake4i((int)(float)(floorf(v59) + -1.0), (int)(float)(floorf(v57) + -1.0), (int)(float)(ceilf(v60) + 1.0), (int)(float)(ceilf(v56) + 1.0));
}

float processPoint@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X8>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v7 = a1[1];
  v8 = (float)(a4[3] + (float)((float)((float)(*a1 * *a4) + (float)(v7 * a4[1])) + (float)(a4[2] * 0.0)))
     + (float)(*a2 * 0.5);
  v9 = (float)(a5[3] + (float)((float)((float)(*a1 * *a5) + (float)(v7 * a5[1])) + (float)(a5[2] * 0.0)))
     + (float)(a2[1] * 0.5);
  a6[1] = v9;
  v10 = (float)(v9 * a3[1]) + -1.57079633;
  v11 = (float)(v8 * *a3) + -3.14159265;
  v12 = cosf(v10);
  if (v12 == 0.0)
    v12 = 1.0;
  result = (float)(v11 / v12) + 3.14159265;
  *a6 = result;
  return result;
}

void HEquirectToSinusoidal::~HEquirectToSinusoidal(HGNode *this)
{
  void *v1;

  HgcEquirectToSinusoidal::~HgcEquirectToSinusoidal(this);
  HGObject::operator delete(v1);
}

uint64_t HBadTVNoise::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 1)
    return a4;
  else
    return 0;
}

uint64_t HBadTVNoise::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t ROI;
  unint64_t v16;
  uint64_t v17;
  double v19;
  double v20;
  double v21;
  double v22;
  _OWORD v23[8];
  _OWORD v24[8];
  uint64_t v25;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v25 = *MEMORY[0x1E0C80C00];
  if ((a3 - 1) > 1)
  {
    if (a3)
    {
      v14 = 0;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      ROI = HgcBadTVNoise::GetROI(this, a2, 0, a4);
      v12 = ROI;
      v14 = v16;
      v13 = HIDWORD(ROI);
    }
  }
  else
  {
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 10, v24);
    v7 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 8, v24);
    v8 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 13, v24);
    v9 = *(float *)v24;
    (*(void (**)(HGNode *, _QWORD, _OWORD *))(*(_QWORD *)this + 104))(this, 0, v23);
    v24[0] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 1, v23);
    v24[2] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[3] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 2, v23);
    v24[4] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[5] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 3, v23);
    v24[6] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[7] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 4, &v19);
    v23[0] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[1] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 5, &v19);
    v23[2] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[3] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 6, &v19);
    v23[4] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[5] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 7, &v19);
    v23[6] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[7] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    v19 = (double)(int)v5;
    v20 = (double)SHIDWORD(v5);
    v21 = (double)((int)v4 - (int)v5);
    v22 = (double)(HIDWORD(v4) - HIDWORD(v5));
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v23, &v19, (uint64_t)&v19);
    v10 = v19 + v21 + v7 + v9;
    v11 = v20 + v22 + v8 + 1.9;
    v19 = v19 - v7 - v9 + -1.0;
    v20 = v20 + v8 + -1.0;
    v21 = v10 - v19;
    v22 = v11 - v20;
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v24, &v19, (uint64_t)&v19);
    v12 = (int)v19;
    v13 = (int)v20;
    v14 = (int)(v19 + v21) | ((unint64_t)(int)(v20 + v22) << 32);
  }
  v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v12 | (v13 << 32), v14, v17);
}

void HBadTVNoise::~HBadTVNoise(HGNode *this)
{
  void *v1;

  HgcBadTVNoise::~HgcBadTVNoise(this);
  HGObject::operator delete(v1);
}

void sub_1B27EB130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C405284425BLL);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::_Private *`anonymous namespace'::_Private::_Private(_anonymous_namespace_::_Private *this)
{
  return this;
}

void sub_1B27EB18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = &unk_1E64DA980;
  *(_QWORD *)(v10 + 32) = &unk_1E64DA9C0;
  a10 = (void **)(v10 + 56);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B27EB3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C405284425BLL);
  _Unwind_Resume(a1);
}

void sub_1B27EBD98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C405284425BLL);
  _Unwind_Resume(a1);
}

void sub_1B27EC610(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 128));
  *(_QWORD *)(v3 - 128) = v1;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD v21[5];

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v21[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(result, v12);
    v15 = &v13[24 * v9];
    *(_QWORD *)v15 = &unk_1E64DA950;
    *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = &v13[24 * v9];
    }
    else
    {
      v18 = a1[1];
      v19 = &v13[24 * v9];
      do
      {
        *((_QWORD *)v19 - 3) = &unk_1E64DA950;
        v19 -= 24;
        *(_OWORD *)(v19 + 8) = *((_OWORD *)v18 - 1);
        v18 -= 24;
      }
      while (v18 != v17);
    }
    v8 = v15 + 24;
    *a1 = v19;
    a1[1] = v15 + 24;
    v20 = a1[2];
    a1[2] = &v13[24 * v14];
    v21[2] = v16;
    v21[3] = v20;
    v21[0] = v17;
    v21[1] = v17;
    result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    *(_QWORD *)v7 = &unk_1E64DA950;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    v8 = (char *)(v7 + 24);
  }
  a1[1] = v8;
  return result;
}

uint64_t cc::curve::aspline::hue_t<double>::~hue_t(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E64DA980;
  *(_QWORD *)(a1 + 32) = &unk_1E64DA9C0;
  v3 = (void **)(a1 + 56);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_1E64DA980;
  *(_QWORD *)(a1 + 32) = &unk_1E64DA9C0;
  v3 = (void **)(a1 + 56);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](a1, 0x10A1C400ED7C394);
}

uint64_t `anonymous namespace'::NewCurve@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1E64DA980;
  a1[4] = &unk_1E64DA9C0;
  a1[5] = 0;
  a1[7] = 0;
  v3 = a1 + 7;
  a1[8] = 0;
  a1[9] = 0;
  a1[6] = &unk_1E64DAAA8;
  a1[10] = &unk_1E64DAAD0;
  a1[11] = cc::curve::aspline::bezier_t<double,true>::evalPeriodic;
  a1[12] = 0;
  result = std::vector<cc::point_t<double,false,false>>::resize((uint64_t)(a1 + 7), 4uLL);
  v5 = a1[1];
  if (v5 == a1[2])
    v6 = 0;
  else
    v6 = *(_QWORD *)(v5 + 16);
  v7 = (_QWORD *)*v3;
  v7[1] = 0;
  v7[2] = v6;
  v7[4] = 0x3FD5566CF41F212DLL;
  v7[5] = v6;
  v7[7] = 0x3FE554C985F06F6ALL;
  v7[8] = v6;
  v7[10] = 0x3FF0000000000000;
  v7[11] = v6;
  return result;
}

void sub_1B27EC9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v14 = v11;
  *v10 = v12;
  v10[4] = v13;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cc::point_t<double,false,false>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cc::point_t<double,false,false> const*>,std::__wrap_iter<cc::point_t<double,false,false> const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  __int128 v26;
  _OWORD *v27;
  _QWORD v29[5];

  v5 = *a1;
  v6 = (a2 - *a1) / 24;
  v7 = *a1 + 24 * v6;
  if (a5 < 1)
    return v7;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 3)) >= a5)
    {
      v19 = a3 + 24 * a5;
    }
    else
    {
      v19 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
      if (v19 == a4)
      {
        v20 = *(_QWORD *)(v11 - 8);
      }
      else
      {
        v20 = *(_QWORD *)(v11 - 8);
        v21 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
        v22 = v20;
        do
        {
          *(_QWORD *)v22 = &unk_1E64DA950;
          *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
          v21 += 24;
          v20 += 24;
          v22 += 24;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)(v14 - v7) < 1)
        return v7;
    }
    std::vector<cc::point_t<double,false,false>>::__move_range((uint64_t)a1, v7, v14, v7 + 24 * a5);
    if (v19 != a3)
    {
      v27 = (_OWORD *)(v5 + 24 * v6 + 8);
      do
      {
        *v27 = *(_OWORD *)(a3 + 8);
        v27 = (_OWORD *)((char *)v27 + 24);
        a3 += 24;
      }
      while (a3 != v19);
    }
  }
  else
  {
    v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - v5) >> 3);
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v5) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    v29[4] = v11;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v11, v17);
    else
      v18 = 0;
    v23 = &v18[24 * v6];
    v29[0] = v18;
    v29[1] = v23;
    v29[3] = &v18[24 * v17];
    v24 = &v23[24 * a5];
    v25 = (__int128 *)(a3 + 8);
    do
    {
      *(_QWORD *)v23 = &unk_1E64DA950;
      v26 = *v25;
      v25 = (__int128 *)((char *)v25 + 24);
      *(_OWORD *)(v23 + 8) = v26;
      v23 += 24;
    }
    while (v23 != v24);
    v29[2] = v24;
    v7 = std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, v29, v7);
    std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v29);
  }
  return v7;
}

void sub_1B27ECBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::vector<cc::point_t<double,false,false>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 result;
  __n128 *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - a4;
  v6 = a2 + v4 - a4;
  if (v6 >= a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v7 = &unk_1E64DA950;
      result = *(__n128 *)(v6 + 8);
      *(__n128 *)(v7 + 8) = result;
      v6 += 24;
      v7 += 24;
    }
    while (v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v9 = (__n128 *)(v4 - 16);
    v10 = 8 * (v5 >> 3);
    do
    {
      result = *(__n128 *)(a2 - 16 + v10);
      *v9 = result;
      v9 = (__n128 *)((char *)v9 - 24);
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

uint64_t std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      *(_QWORD *)(v6 - 24) = &unk_1E64DA950;
      v6 -= 24;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(v7 - 16);
      v7 -= 24;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v8 = a1[1];
  for (i = a2[2]; a3 != v8; i += 24)
  {
    *(_QWORD *)i = &unk_1E64DA950;
    *(_OWORD *)(i + 8) = *(_OWORD *)(a3 + 8);
    a3 += 24;
  }
  a2[2] = i;
  v10 = *a1;
  *a1 = v6;
  a2[1] = v10;
  v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void cc::point_t<double,false,false>::~point_t()
{
  JUMPOUT(0x1B5E29170);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<cc::point_t<double,false,false>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  uint64_t (***v9)(_QWORD);
  uint64_t (**v10)(_QWORD);
  BOOL v11;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(_QWORD *)result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<cc::point_t<double,false,false>>::__append((char **)result, v6);
  if (!v5)
  {
    v7 = *(_QWORD *)result + 24 * a2;
    if (v3 != v7)
    {
      v8 = (uint64_t (***)(_QWORD))(v3 - 24);
      v9 = (uint64_t (***)(_QWORD))(v3 - 24);
      do
      {
        v10 = *v9;
        v9 -= 3;
        result = (*v10)(v8);
        v11 = v8 == (uint64_t (***)(_QWORD))v7;
        v8 = v9;
      }
      while (!v11);
    }
    *(_QWORD *)(v2 + 8) = v7;
  }
  return result;
}

uint64_t std::vector<cc::point_t<double,false,false>>::__append(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD v21[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      do
      {
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        *(_QWORD *)v7 = &unk_1E64DA950;
        v7 += 24;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v21[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v14[24 * a2];
    v16 = v14;
    do
    {
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = &unk_1E64DA950;
      v16 += 24;
    }
    while (v16 != v15);
    v18 = *a1;
    v17 = a1[1];
    if (v17 != *a1)
    {
      v19 = a1[1];
      do
      {
        *((_QWORD *)v14 - 3) = &unk_1E64DA950;
        v14 -= 24;
        *(_OWORD *)(v14 + 8) = *((_OWORD *)v19 - 1);
        v19 -= 24;
      }
      while (v19 != v18);
    }
    *a1 = v14;
    a1[1] = v15;
    v20 = a1[2];
    a1[2] = &v12[24 * v11];
    v21[2] = v17;
    v21[3] = v20;
    v21[0] = v18;
    v21[1] = v18;
    return std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v21);
  }
  return result;
}

void cc::curve::aspline::hue_t<double>::insertPointIsolation(uint64_t a1, unint64_t *a2, double a3, double a4, double a5)
{
  double v9;
  double v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  double *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v44;
  double v45;
  double v46;
  double v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v68;
  double v69;
  double v70;
  double v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  double *v91;
  double *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double *v98;
  _QWORD *v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  double *v107;
  double *v108;
  double v109;
  double *v110;
  double v111;
  double *v112;
  double *v113;
  __int128 v114;
  double v115;
  double v116;
  double *v117;
  double *v118;
  double v119;
  double v120;
  double v121;
  double v122;
  int v123;
  int v124;
  double v125;
  int v126;
  double v127;
  _BOOL4 v129;
  double *v131;
  double *v132;
  double v133;
  double *v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  double *v141;
  double *v142;
  double *v143;
  double v144;
  double *v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  _QWORD *v157;
  double v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;

  v9 = 1.0;
  if (a3 <= 1.0)
    v9 = a3;
  if (a3 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  v158 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v11 = (char **)(a1 + 8);
  if (v12 == v13)
  {
LABEL_19:
    v21 = (*(double (**)(uint64_t, double *))(*(_QWORD *)a1 + 24))(a1, &v158) - *(double *)(a1 + 40);
    v22 = v158;
    v23 = a2[2];
    v24 = a2[1];
    if (v24 >= v23)
    {
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *a2) >> 3);
      v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_183;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x555555555555555)
        v29 = 0xAAAAAAAAAAAAAAALL;
      else
        v29 = v27;
      v163 = a2 + 2;
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a2 + 2), v29);
      v32 = (double *)&v30[24 * v26];
      *(_QWORD *)v32 = &unk_1E64DA950;
      v32[1] = v22;
      v32[2] = v21;
      v34 = *a2;
      v33 = a2[1];
      if (v33 == *a2)
      {
        v36 = &v30[24 * v26];
      }
      else
      {
        v35 = a2[1];
        v36 = &v30[24 * v26];
        do
        {
          *((_QWORD *)v36 - 3) = &unk_1E64DA950;
          v36 -= 24;
          *(_OWORD *)(v36 + 8) = *(_OWORD *)(v35 - 16);
          v35 -= 24;
        }
        while (v35 != v34);
      }
      v25 = (char *)(v32 + 3);
      *a2 = (unint64_t)v36;
      a2[1] = (unint64_t)(v32 + 3);
      v37 = a2[2];
      a2[2] = (unint64_t)&v30[24 * v31];
      v161 = v33;
      v162 = v37;
      v159 = v34;
      v160 = v34;
      std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v159);
      v22 = v158;
    }
    else
    {
      *(_QWORD *)v24 = &unk_1E64DA950;
      *(double *)(v24 + 8) = v22;
      *(double *)(v24 + 16) = v21;
      v25 = (char *)(v24 + 24);
    }
    a2[1] = (unint64_t)v25;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v14 = v10 - a5;
    v15 = v10 + a5;
    v16 = v10 - v10;
    if (v10 - v10 < 0.0)
      v16 = -(v10 - v10);
    v17 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v18 = *(double *)(v17 + 8);
      if (v18 > v14 && v18 < v15)
        break;
      if (v18 >= 0.0)
      {
        v20 = v18 - v10;
        if (v20 < 0.0)
          v20 = -v20;
        if (v20 <= v16)
          break;
      }
      v17 += 24;
      if (v17 == v13)
        goto LABEL_19;
    }
    v22 = v10;
  }
  v38 = fmod(v22 - a4, 1.0);
  if (v38 < 0.0)
    v38 = v38 + 1.0;
  v158 = v38;
  if (v12 == v13)
  {
LABEL_55:
    v46 = (*(double (**)(uint64_t, double *))(*(_QWORD *)a1 + 24))(a1, &v158) - *(double *)(a1 + 40);
    v47 = v158;
    v48 = a2[2];
    v49 = a2[1];
    if (v49 >= v48)
    {
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *a2) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_183;
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a2) >> 3);
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v52;
      v163 = a2 + 2;
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a2 + 2), v54);
      v57 = &v55[24 * v51];
      *(_QWORD *)v57 = &unk_1E64DA950;
      *((double *)v57 + 1) = v47;
      *((double *)v57 + 2) = v46;
      v59 = *a2;
      v58 = a2[1];
      if (v58 == *a2)
      {
        v61 = &v55[24 * v51];
      }
      else
      {
        v60 = a2[1];
        v61 = &v55[24 * v51];
        do
        {
          *((_QWORD *)v61 - 3) = &unk_1E64DA950;
          v61 -= 24;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)(v60 - 16);
          v60 -= 24;
        }
        while (v60 != v59);
      }
      v50 = v57 + 24;
      *a2 = (unint64_t)v61;
      a2[1] = (unint64_t)(v57 + 24);
      v62 = a2[2];
      a2[2] = (unint64_t)&v55[24 * v56];
      v161 = v58;
      v162 = v62;
      v159 = v59;
      v160 = v59;
      std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v159);
    }
    else
    {
      *(_QWORD *)v49 = &unk_1E64DA950;
      *(double *)(v49 + 8) = v47;
      *(double *)(v49 + 16) = v46;
      v50 = (char *)(v49 + 24);
    }
    a2[1] = (unint64_t)v50;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v39 = v10 + 1.0;
    if (v38 <= v10)
      v39 = v10;
    v40 = v38 - v39;
    if (v38 - v39 < 0.0)
      v40 = -(v38 - v39);
    v41 = v12;
    while (1)
    {
      v42 = *(double *)(v41 + 8);
      if (v42 > v38 - a5 && v42 < v38 + a5)
        break;
      if (v42 >= 0.0)
      {
        v44 = v42 - v39;
        if (v42 - v39 < 0.0)
          v44 = -(v42 - v39);
        if (v44 <= v40)
        {
          v45 = v42 - v38;
          if (v45 < 0.0)
            v45 = -v45;
          if (v45 <= v40)
            break;
        }
      }
      v41 += 24;
      if (v41 == v13)
        goto LABEL_55;
    }
  }
  v63 = fmod(v10 + a4, 1.0);
  if (v63 < 0.0)
    v63 = v63 + 1.0;
  v158 = v63;
  if (v12 == v13)
  {
LABEL_89:
    v70 = (*(double (**)(uint64_t, double *))(*(_QWORD *)a1 + 24))(a1, &v158) - *(double *)(a1 + 40);
    v71 = v158;
    v72 = a2[2];
    v73 = a2[1];
    if (v73 < v72)
    {
      *(_QWORD *)v73 = &unk_1E64DA950;
      *(double *)(v73 + 8) = v71;
      *(double *)(v73 + 16) = v70;
      v74 = (char *)(v73 + 24);
LABEL_104:
      a2[1] = (unint64_t)v74;
      goto LABEL_105;
    }
    v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *a2) >> 3);
    v76 = v75 + 1;
    if (v75 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *a2) >> 3);
      if (2 * v77 > v76)
        v76 = 2 * v77;
      if (v77 >= 0x555555555555555)
        v78 = 0xAAAAAAAAAAAAAAALL;
      else
        v78 = v76;
      v163 = a2 + 2;
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a2 + 2), v78);
      v81 = &v79[24 * v75];
      *(_QWORD *)v81 = &unk_1E64DA950;
      *((double *)v81 + 1) = v71;
      *((double *)v81 + 2) = v70;
      v83 = *a2;
      v82 = a2[1];
      if (v82 == *a2)
      {
        v85 = &v79[24 * v75];
      }
      else
      {
        v84 = a2[1];
        v85 = &v79[24 * v75];
        do
        {
          *((_QWORD *)v85 - 3) = &unk_1E64DA950;
          v85 -= 24;
          *(_OWORD *)(v85 + 8) = *(_OWORD *)(v84 - 16);
          v84 -= 24;
        }
        while (v84 != v83);
      }
      v74 = v81 + 24;
      *a2 = (unint64_t)v85;
      a2[1] = (unint64_t)(v81 + 24);
      v86 = a2[2];
      a2[2] = (unint64_t)&v79[24 * v80];
      v161 = v82;
      v162 = v86;
      v159 = v83;
      v160 = v83;
      std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v159);
      goto LABEL_104;
    }
LABEL_183:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  v64 = v10 + -1.0;
  if (v63 >= v10)
    v64 = v10;
  v65 = v63 - v64;
  if (v63 - v64 < 0.0)
    v65 = -(v63 - v64);
  while (1)
  {
    v66 = *(double *)(v12 + 8);
    if (v66 > v63 - a5 && v66 < v63 + a5)
      break;
    if (v66 >= 0.0)
    {
      v68 = v66 - v64;
      if (v66 - v64 < 0.0)
        v68 = -(v66 - v64);
      if (v68 <= v65)
      {
        v69 = v66 - v63;
        if (v69 < 0.0)
          v69 = -v69;
        if (v69 <= v65)
          break;
      }
    }
    v12 += 24;
    if (v12 == v13)
      goto LABEL_89;
  }
  v74 = (char *)a2[1];
LABEL_105:
  v87 = *a2;
  if ((char *)*a2 != v74)
  {
    do
    {
      v88 = *(_QWORD **)(a1 + 8);
      v89 = *(_QWORD **)(a1 + 16);
      if (v88 == v89)
      {
LABEL_110:
        std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v11, v87);
      }
      else
      {
        v90 = *(_QWORD *)(a1 + 8);
        while (*(double *)(v90 + 8) < *(double *)(v87 + 8))
        {
          v90 += 24;
          v88 += 3;
          if ((_QWORD *)v90 == v89)
            goto LABEL_110;
        }
        std::vector<cc::point_t<double,false,false>>::insert((uint64_t *)v11, v88, v87);
      }
      v87 += 24;
    }
    while (v87 != a2[1]);
  }
  v91 = *(double **)(a1 + 8);
  v92 = *(double **)(a1 + 16);
  v93 = (char *)v92 - (char *)v91;
  v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v91);
  if (v94 <= 1)
  {
    std::vector<cc::point_t<double,false,false>>::resize(a1 + 56, 4uLL);
    v95 = *(_QWORD *)(a1 + 8);
    if (v95 == *(_QWORD *)(a1 + 16))
      v96 = 0;
    else
      v96 = *(_QWORD *)(v95 + 16);
    v157 = *(_QWORD **)(a1 + 56);
    v157[1] = 0;
    v157[2] = v96;
    v157[4] = 0x3FD5566CF41F212DLL;
    v157[5] = v96;
    v157[7] = 0x3FE554C985F06F6ALL;
    v157[8] = v96;
    v157[10] = 0x3FF0000000000000;
    v157[11] = v96;
    return;
  }
  if (v94 > 0x5555555555555554)
    return;
  if (v92 == v91)
    v97 = 0;
  else
    v97 = -1;
  v98 = &v92[3 * v97];
  v99 = (_QWORD *)(a1 + 56);
  std::vector<cc::point_t<double,false,false>>::resize(a1 + 56, v92 - v91 + 1);
  v100 = *(double **)(a1 + 8);
  if (v100 != v92)
  {
    v101 = 0;
    v102 = 0;
    v103 = &v92[3 * v97];
    v104 = v103 + 1;
    v105 = v103 + 2;
    v106 = (double *)(*v99 + 32);
    while (1)
    {
      v107 = &v100[v102];
      if (&v100[v102] == v98)
      {
        v109 = v100[1] + 1.0;
        v110 = v100 + 2;
        v108 = v100;
      }
      else
      {
        v108 = v107 + 3;
        v109 = v107[4];
        v110 = v107 + 5;
      }
      v111 = *v110;
      v112 = &v100[v102];
      v113 = &v100[v102 + 1];
      v114 = *(_OWORD *)v113;
      v115 = v109 - *v113;
      if (v115 < 0.0)
        v115 = -(v109 - *(double *)&v114);
      if (v115 < 0.0)
        v115 = -v115;
      *(_OWORD *)(v106 - 3) = v114;
      if (v102 * 8)
      {
        v116 = *(v112 - 2);
        v117 = v112 - 1;
      }
      else
      {
        v116 = *v104 + -1.0;
        v117 = v105;
      }
      v118 = &v100[v102 + 2];
      v119 = v115 * 0.3334;
      v120 = v109 - v116;
      v121 = v111 - *v117;
      v122 = -v120;
      if (v120 >= 0.0)
        v122 = v120;
      v123 = *v117 - *v118 >= 0.0;
      v124 = v111 - *v118 < 0.0;
      v125 = v121 / v120;
      v126 = v124 ^ v123;
      if (v122 < 0.00000011920929)
        v126 = 1;
      if (v126)
        v125 = 0.0;
      v127 = *v118 + v119 * v125;
      *v106 = v119 + *v113;
      v106[1] = v127;
      v129 = v101-- != 0;
      if (v124 != v123 && v129)
        *(v106 - 5) = v127;
      if (v107 == v98)
        break;
      v131 = &v100[v102 + 2];
      v132 = &v100[v102 + 1];
      if (v93 == 48)
        goto LABEL_151;
      if (v107 == v98 - 3)
        break;
      v133 = v108[4];
      v131 = v108 + 5;
LABEL_152:
      v135 = v133 - *v113;
      v136 = -v135;
      if (v135 >= 0.0)
        v136 = v135;
      v137 = (*v131 - *v118) / v135;
      if (v136 < 0.00000011920929)
        v137 = 0.0;
      v106[3] = v109 - v119;
      v106[4] = v111 - v119 * v137;
      v106 += 9;
      v102 += 3;
      if (&v100[v102] == v92)
        goto LABEL_157;
    }
    v134 = &v100[3 * (v107 == v98)];
    v132 = v134 + 1;
    v131 = v134 + 2;
LABEL_151:
    v133 = *v132 + 1.0;
    goto LABEL_152;
  }
LABEL_157:
  v138 = *(_QWORD *)(a1 + 64);
  v139 = *((_QWORD *)v100 + 2);
  *(double *)(v138 - 16) = v100[1] + 1.0;
  *(_QWORD *)(v138 - 8) = v139;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v100) >> 3) >= 3 && v100 != v92)
  {
    v141 = v100 + 5;
    v142 = (double *)(*v99 + 64);
    do
    {
      v143 = v141 - 5;
      if (v141 - 5 == v98)
      {
        v144 = v100[1] + 1.0;
        v145 = v100 + 2;
      }
      else
      {
        v144 = *(v141 - 1);
        v145 = v141;
      }
      v146 = *v145;
      v147 = *(v141 - 3);
      v148 = v144 - *(v141 - 4);
      v149 = -v148;
      if (v148 >= 0.0)
        v149 = v148;
      v150 = v146 - v147;
      v151 = -(v146 - v147);
      if (v150 >= 0.0)
        v151 = v150;
      v152 = 1.0;
      if (v151 > 0.00000011920929)
      {
        v152 = 0.0;
        if (v149 > 0.00000011920929)
        {
          v153 = v151 / v149 * -3.0 + 1.0;
          if (v153 >= 0.0)
          {
            v152 = 1.0;
            if (v153 <= 1.0)
              v152 = v153;
          }
        }
      }
      v154 = v152 * *(v142 - 6);
      v155 = 1.0 - v152;
      *(v142 - 3) = v154 + (1.0 - v152) * *(v142 - 3);
      v156 = v152 * v142[3];
      *v142 = v156 + v155 * *v142;
      if (v143 != v98)
        v142[6] = v156 + v155 * v142[6];
      if (v143 != v100)
        *(v142 - 9) = v154 + v155 * *(v142 - 9);
      v141 += 3;
      v142 += 9;
    }
    while (v143 + 3 != v92);
  }
}

double cc::curve::aspline::hue_t<double>::evaluate(uint64_t a1)
{
  double (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(double (**)(_QWORD *))(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + (v3 >> 1) + 48);
  if ((v3 & 1) != 0)
    v2 = *(double (**)(_QWORD *))(*v4 + v2);
  return v2(v4) + *(double *)(a1 + 40);
}

BOOL cc::curve::aspline::hue_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v11 = a1 + 80;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t cc::curve::aspline::hue_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)(a1 + 80)
                                                                                             + 24))(a1 + 80, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

void `non-virtual thunk to'cc::curve::aspline::hue_t<double>::~hue_t(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 - 32) = &unk_1E64DA980;
  *(_QWORD *)a1 = &unk_1E64DA9C0;
  v2 = (void **)(a1 + 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::hue_t<double>::~hue_t(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void **v4;

  *(_QWORD *)(a1 - 32) = &unk_1E64DA980;
  v1 = a1 - 32;
  *(_QWORD *)a1 = &unk_1E64DA9C0;
  v2 = (void **)(a1 - 24);
  v4 = (void **)(a1 + 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1B5E29170](v1, 0x10A1C400ED7C394);
}

double `non-virtual thunk to'cc::curve::aspline::hue_t<double>::evaluate(uint64_t a1)
{
  double (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(double (**)(_QWORD *))(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = (_QWORD *)(a1 + (v3 >> 1) + 16);
  if ((v3 & 1) != 0)
    v2 = *(double (**)(_QWORD *))(*v4 + v2);
  return v2(v4) + *(double *)(a1 + 8);
}

BOOL `non-virtual thunk to'cc::curve::aspline::hue_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v11 = a1 + 48;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t `non-virtual thunk to'cc::curve::aspline::hue_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)(a1 + 48)
                                                                                             + 24))(a1 + 48, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

void std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL cc::curve::evaluator_1d_t<double,1024u>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)a1 + 16))(a1, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t cc::curve::evaluator_1d_t<double,1024u>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

double cc::curve::aspline::bezier_t<double,true>::evalPeriodic(uint64_t a1, double *a2)
{
  double *v2;
  double *v3;
  double result;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;

  v2 = *(double **)(a1 + 8);
  v3 = *(double **)(a1 + 16);
  result = 0.0;
  if (0xAAAAAAAAAAAAAAABLL * (v3 - v2) < 4)
    return result;
  v5 = *a2;
  if (v3 == v2)
    v6 = 0;
  else
    v6 = -1;
  v7 = v2[1];
  v8 = v3[3 * v6 + 1];
  v9 = v8 - (v7 - v5);
  if (v7 <= v5)
    v9 = *a2;
  if (v8 >= v5)
    result = v9;
  else
    result = v7 + v5 - v8;
  if (result < v7)
  {
    v10 = v2[2];
    v11 = v2[4] - v7;
    if (v11 != 0.0)
    {
      v12 = v2[5] - v10;
LABEL_17:
      v13 = v12 / v11;
      return v10 + (result - v7) * v13;
    }
    goto LABEL_18;
  }
  v7 = *(v3 - 2);
  if (result > v7)
  {
    v10 = *(v3 - 1);
    v11 = v7 - *(v3 - 5);
    if (v11 != 0.0)
    {
      v12 = v10 - *(v3 - 4);
      goto LABEL_17;
    }
LABEL_18:
    v13 = 0.0;
    return v10 + (result - v7) * v13;
  }
  v14 = v3 - 3;
  while (v2 != v14)
  {
    v15 = v2[1];
    if (result >= v15)
    {
      v16 = v2[10];
      if (result <= v16)
      {
        v17 = v2[4];
        v18 = v2[7] * 3.0;
        v19 = v16 + v17 * 3.0 - v15 - v18;
        v20 = v15 * 3.0 + v17 * -6.0 + v18;
        v21 = v17 * 3.0 - v15 * 3.0;
        v22 = 0.0;
        while (1)
        {
          v23 = v22 * (v22 * v22);
          v24 = v15 + v22 * v21 + v22 * v22 * v20 + v23 * v19;
          if (v24 >= result)
            break;
          v22 = v22 + 0.05;
          if (v22 >= 1.05)
            return result;
        }
        v25 = v22 + -0.05;
        v26 = v25 * (v25 * v25);
        v27 = v15 + (v22 + -0.05) * v21 + v25 * v25 * v20 + v26 * v19;
        v28 = v2[2];
        v29 = v2[5];
        v30 = v2[8] * 3.0;
        v31 = v2[11] + v29 * 3.0 - v28 - v30;
        v32 = v28 * 3.0 + v29 * -6.0 + v30;
        v33 = v29 * 3.0 - v28 * 3.0;
        v34 = v28 + (v22 + -0.05) * v33 + v25 * v25 * v32 + v26 * v31;
        v35 = v28 + v22 * v33 + v22 * v22 * v32 + v23 * v31;
        v36 = v24 - v27;
        if (v24 - v27 >= 0.0)
          v37 = v24 - v27;
        else
          v37 = -(v24 - v27);
        v38 = 0.0;
        if (v37 >= 0.00000011920929)
          v38 = (result - v27) / v36;
        return v35 * v38 + v34 * (1.0 - v38);
      }
    }
    v2 += 9;
  }
  return result;
}

uint64_t cc::curve::aspline::bezier_t<double,true>::~bezier_t(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](a1, 0xA1C40D2948F72);
}

uint64_t cc::curve::aspline::bezier_t<double,true>::evaluate(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = (_QWORD *)(a1 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void `non-virtual thunk to'cc::curve::aspline::bezier_t<double,true>::~bezier_t(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::bezier_t<double,true>::~bezier_t(uint64_t a1)
{
  uint64_t v1;
  void **v3;

  v1 = a1 - 32;
  v3 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](v1, 0xA1C40D2948F72);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::bezier_t<double,true>::evaluate(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)(a1 + (v2 >> 1) - 32);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

unint64_t std::vector<cc::point_t<double,false,false>>::insert(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  _QWORD v35[5];

  v4 = (unint64_t)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v11 = (uint64_t)(a1 + 2);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v34 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = &v15[8 * (v8 >> 3)];
    v30 = v15;
    v31 = v16;
    v32 = (uint64_t)v16;
    v33 = &v15[24 * v14];
    if (v9 == v14)
    {
      if (v8 < 1)
      {
        if (v7 == v4)
          v18 = 1;
        else
          v18 = 0x5555555555555556 * (v8 >> 3);
        v35[4] = v11;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v11, v18);
        v21 = v31;
        v22 = v32;
        v23 = (uint64_t)&v19[24 * (v18 >> 2)];
        if ((char *)v32 != v31)
        {
          v23 = (uint64_t)&v19[24 * (v18 >> 2) + v32 - (_QWORD)v31];
          v24 = (__int128 *)(v31 + 8);
          v25 = &v19[24 * (v18 >> 2)];
          do
          {
            *(_QWORD *)v25 = &unk_1E64DA950;
            v26 = *v24;
            v24 = (__int128 *)((char *)v24 + 24);
            *(_OWORD *)(v25 + 8) = v26;
            v25 += 24;
          }
          while (v25 != (char *)v23);
        }
        v27 = v30;
        v28 = v33;
        v30 = v19;
        v31 = &v19[24 * (v18 >> 2)];
        v35[0] = v27;
        v35[1] = v21;
        v32 = v23;
        v33 = &v19[24 * v20];
        v35[2] = v22;
        v35[3] = v28;
        std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v35);
        v16 = (char *)v32;
      }
      else
      {
        v17 = v9 + 2;
        if (v9 >= -1)
          v17 = v9 + 1;
        v16 -= 24 * (v17 >> 1);
        v31 = v16;
      }
    }
    *(_QWORD *)v16 = &unk_1E64DA950;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)(a3 + 8);
    v32 = (uint64_t)(v16 + 24);
    v4 = std::vector<cc::point_t<double,false,false>>::__swap_out_circular_buffer(a1, &v30, v4);
    std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v30);
  }
  else if (a2 == (_QWORD *)v6)
  {
    *a2 = &unk_1E64DA950;
    *(_OWORD *)(v7 + 8 * (v8 >> 3) + 8) = *(_OWORD *)(a3 + 8);
    a1[1] = (uint64_t)(a2 + 3);
  }
  else
  {
    std::vector<cc::point_t<double,false,false>>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 3));
    if (v4 <= a3)
      a3 += 24 * (a1[1] > a3);
    *(_OWORD *)(v7 + 8 * (v8 >> 3) + 8) = *(_OWORD *)(a3 + 8);
  }
  return v4;
}

void sub_1B27EEA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

HgcConvolvePass8tapPoint *HConvolvePass8TapPoint::GetOutput(HConvolvePass8TapPoint *this, HGRenderer *a2)
{
  (*(void (**)(HConvolvePass8TapPoint *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 32);
  return HgcConvolvePass8tapPoint::GetOutput(this, a2);
}

void HConvolvePass8TapPoint::~HConvolvePass8TapPoint(HGNode *this)
{
  void *v1;

  HgcConvolvePass8tapPoint::~HgcConvolvePass8tapPoint(this);
  HGObject::operator delete(v1);
}

void sub_1B27EEF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B27EF3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void HDirectionalBlur::HDirectionalBlur(HDirectionalBlur *this)
{
  _QWORD *v2;
  HGNode *v3;
  HGNode *v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64DADC8;
  v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  *((_QWORD *)this + 51) = v3;
  v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *((_QWORD *)this + 52) = v4;
}

void sub_1B27EF4D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v3 = v2;
  HGObject::operator delete(v3);
  v5 = *(_QWORD *)(v1 + 408);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HDirectionalBlur::~HDirectionalBlur(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E64DADC8;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HDirectionalBlur::~HDirectionalBlur(this);
  HGObject::operator delete(v1);
}

uint64_t HDirectionalBlur::init(HDirectionalBlur *this, float a2, float a3, float a4, float a5)
{
  __float2 v9;
  double v11[2];

  v9 = __sincosf_stret(a3);
  v11[0] = a2 * (float)(v9.__cosval * a4);
  v11[1] = a2 * (float)(v9.__sinval * a5);
  return HDirectionalBlur::init((uint64_t)this, v11);
}

uint64_t HDirectionalBlur::init(uint64_t a1, double *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  _BOOL4 v12;
  float v13;
  float v14;
  HGXForm *v15;
  float v16;
  double v17;
  double v18;
  double Matrixd;
  double v20;
  HGaussianBlur *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  HGXForm *v27;
  double v28;
  uint64_t result;
  _BYTE v30[144];
  _BYTE v31[144];
  double v32[6];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 408);
  if (v4)
    (*(void (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 408));
  v6 = *a2;
  v5 = a2[1];
  v7 = atan(v5 / *a2);
  v8 = v7 + 6.28318531;
  if (v7 >= 0.0)
    v8 = v7;
  if (v8 >= 3.14159265)
  {
    v9 = v8 + -3.14159265;
    v10 = v9;
  }
  else
  {
    v10 = v8;
  }
  v11 = v10;
  v12 = v10 <= 2.35619449 && v10 >= 0.785398163;
  if (v12)
  {
    v13 = 1.57079633 - v11;
  }
  else if (v11 <= 1.57079633)
  {
    v13 = v10;
  }
  else
  {
    v14 = v11 + -3.14159265;
    v13 = v14;
  }
  v15 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v15);
  (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v15 + 120))(v15, 0, v4);
  HGTransform::HGTransform((HGTransform *)v31);
  v16 = -v13;
  v32[0] = 1.0;
  if (v12)
  {
    v17 = tanf(v16);
    v18 = 0.0;
  }
  else
  {
    v18 = tanf(v16);
    v17 = 0.0;
  }
  v32[1] = v18;
  v32[2] = 0.0;
  v32[3] = 0.0;
  v32[4] = v17;
  v32[5] = 1.0;
  v33 = 0u;
  v34 = 0u;
  v36 = 0u;
  v37 = 0u;
  v35 = 0x3FF0000000000000;
  v38 = 0x3FF0000000000000;
  Matrixd = HGTransform::LoadMatrixd((HGTransform *)v31, v32);
  (*(void (**)(HGXForm *, _BYTE *, double))(*(_QWORD *)v15 + 576))(v15, v31, Matrixd);
  v20 = sin(3.14159265 - (v16 + 1.57079633));
  v21 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
  HGaussianBlur::HGaussianBlur(v21);
  (*(void (**)(HGaussianBlur *, _QWORD, HGXForm *))(*(_QWORD *)v21 + 120))(v21, 0, v15);
  v22 = sqrt(v5 * v5 + v6 * v6);
  v23 = fabs(v20) * v22;
  v24 = 1.0;
  if (v12)
    v25 = 0.0;
  else
    v25 = 1.0;
  if (!v12)
    v24 = 0.0;
  HGaussianBlur::init(v21, v23, v25, v24, 0, 0, 0);
  v26 = 1;
  if (v12)
    v26 = 4;
  v32[v26] = -v32[v26];
  v27 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v27);
  (*(void (**)(HGXForm *, _QWORD, HGaussianBlur *))(*(_QWORD *)v27 + 120))(v27, 0, v21);
  HGTransform::HGTransform((HGTransform *)v30);
  v28 = HGTransform::LoadMatrixd((HGTransform *)v30, v32);
  (*(void (**)(HGXForm *, _BYTE *, double))(*(_QWORD *)v27 + 576))(v27, v30, v28);
  (*(void (**)(_QWORD, _QWORD, HGXForm *))(**(_QWORD **)(a1 + 416) + 120))(*(_QWORD *)(a1 + 416), 0, v27);
  HGTransform::~HGTransform((HGTransform *)v30);
  (*(void (**)(HGXForm *))(*(_QWORD *)v27 + 24))(v27);
  (*(void (**)(HGaussianBlur *))(*(_QWORD *)v21 + 24))(v21);
  HGTransform::~HGTransform((HGTransform *)v31);
  result = (*(uint64_t (**)(HGXForm *))(*(_QWORD *)v15 + 24))(v15);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return result;
}

void sub_1B27EF96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HDirectionalBlur::GetOutput(HDirectionalBlur *this, HGRenderer *a2)
{
  uint64_t v3;
  HGNode *Input;

  v3 = *((_QWORD *)this + 51);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v3 + 120))(v3, 0, Input);
  return *((_QWORD *)this + 52);
}

void sub_1B27EFCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B27F0D9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t HiOSTwirl::GetDOD(HiOSTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  float v17[2];
  float v18;
  uint64_t v19;
  HGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v19 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HiOSTwirl *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, v17);
  v6 = (float)(v17[0] - (float)(1.0 / v18));
  v7 = (float)(v17[1] - (float)(1.0 / v18));
  v8 = (float)(1.0 / v18) + (float)(1.0 / v18);
  *(_QWORD *)&v20.var0 = v5;
  *(_QWORD *)&v20.var2 = v4;
  v9 = CGRectFromHGRect(v20);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v21.origin.x = v6;
  v21.origin.y = v7;
  v21.size.width = v8;
  v21.size.height = v8;
  v24.origin.x = v9;
  v24.origin.y = v11;
  v24.size.width = v13;
  v24.size.height = v15;
  if (CGRectIntersectsRect(v21, v24))
  {
    v22.origin.x = v9;
    v22.origin.y = v11;
    v22.size.width = v13;
    v22.size.height = v15;
    v25.origin.x = v6;
    v25.origin.y = v7;
    v25.size.width = v8;
    v25.size.height = v8;
    v23 = CGRectUnion(v22, v25);
    return HGRectFromCGRect(v23);
  }
  return v5;
}

uint64_t HiOSTwirl::GetROI(HiOSTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  float v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGFloat x;
  CGFloat v19;
  CGFloat height;
  float v21;
  CGFloat v22;
  double MaxX;
  double MinY;
  double MaxY;
  double y;
  float v28;
  float v29;
  CGFloat width;
  CGRect rect1;
  CGSize size;
  uint64_t v33;
  CGPoint v34;
  CGPoint v35;
  CGPoint v36;
  CGPoint v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v4 = *(_QWORD *)&a4.var0;
  v33 = *MEMORY[0x1E0C80C00];
  v6 = CGRectFromHGRect(a4);
  rect1.origin.y = v7;
  v9 = v8;
  v11 = v10;
  (*(void (**)(HiOSTwirl *, _QWORD, CGSize *))(*(_QWORD *)this + 104))(this, 0, &rect1.size);
  v12 = *((float *)&rect1.size.height + 1);
  v13 = 1.0 / *(float *)&rect1.size.height;
  v29 = *(float *)&rect1.size.width;
  v14 = (float)(*(float *)&rect1.size.width - (float)(1.0 / *(float *)&rect1.size.height));
  v28 = *((float *)&rect1.size.width + 1);
  v15 = (float)(*((float *)&rect1.size.width + 1) - (float)(1.0 / *(float *)&rect1.size.height));
  v16 = (float)(1.0 / *(float *)&rect1.size.height) + (float)(1.0 / *(float *)&rect1.size.height);
  v38.origin.x = v6;
  v38.origin.y = rect1.origin.y;
  v38.size.width = v9;
  v38.size.height = v11;
  v48.origin.x = v14;
  v48.origin.y = v15;
  v48.size.width = v16;
  v48.size.height = v16;
  v39 = CGRectIntersection(v38, v48);
  if (!CGRectIsEmpty(v39))
  {
    v40.origin.x = v6;
    v40.origin.y = rect1.origin.y;
    v40.size.width = v9;
    v40.size.height = v11;
    v49.origin.x = v14;
    v49.origin.y = v15;
    v49.size.width = v16;
    v49.size.height = v16;
    if (!CGRectContainsRect(v40, v49))
    {
      if (v13 >= 500.0)
      {
        v17 = v29;
        v43.origin.x = v6;
        v43.origin.y = rect1.origin.y;
        v43.size.width = v9;
        v43.size.height = v11;
        v44 = CGRectIntegral(v43);
        x = v44.origin.x;
        width = v44.size.width;
        rect1.origin.x = v44.origin.y;
        v19 = v44.size.width;
        height = v44.size.height;
        v44.size = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
        rect1.size = (CGSize)*MEMORY[0x1E0C9D628];
        size = v44.size;
        v21 = 1.0 / v13;
        v44.size.width = v19;
        rect1.origin.y = CGRectGetMinX(v44);
        v45.origin.x = x;
        v45.origin.y = rect1.origin.x;
        v45.size.width = v19;
        v45.size.height = height;
        v22 = height;
        MaxX = CGRectGetMaxX(v45);
        v46.origin.x = x;
        v46.origin.y = rect1.origin.x;
        v46.size.width = v19;
        v46.size.height = v22;
        MinY = CGRectGetMinY(v46);
        v47.origin.x = x;
        v47.size.width = width;
        v47.origin.y = rect1.origin.x;
        v47.size.height = v22;
        MaxY = CGRectGetMaxY(v47);
        if (rect1.origin.y <= MaxX)
        {
          y = rect1.origin.y;
          do
          {
            v34.x = v17;
            v34.y = v28;
            twirlTracePoint(y, MinY, v34, v21, v12, (CGRect *)&rect1.size);
            v35.x = v17;
            v35.y = v28;
            twirlTracePoint(y, MaxY, v35, v21, v12, (CGRect *)&rect1.size);
            y = y + 1.0;
          }
          while (y <= MaxX);
        }
        for (; MinY <= MaxY; MinY = MinY + 1.0)
        {
          v36.x = v17;
          v36.y = v28;
          twirlTracePoint(rect1.origin.y, MinY, v36, v21, v12, (CGRect *)&rect1.size);
          v37.x = v17;
          v37.y = v28;
          twirlTracePoint(MaxX, MinY, v37, v21, v12, (CGRect *)&rect1.size);
        }
        v42.origin.x = rect1.size.width;
        v42.origin.y = rect1.size.height;
        v42.size = size;
      }
      else
      {
        v41.origin.x = v6;
        v41.origin.y = rect1.origin.y;
        v41.size.width = v9;
        v41.size.height = v11;
        v50.origin.x = v14;
        v50.origin.y = v15;
        v50.size.width = v16;
        v50.size.height = v16;
        v42 = CGRectUnion(v41, v50);
      }
      return HGRectFromCGRect(v42);
    }
  }
  return v4;
}

void twirlTracePoint(double a1, double a2, CGPoint a3, float a4, float a5, CGRect *a6)
{
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  double y;
  double x;
  float v15;
  __float2 v16;
  float v17;
  float v18;
  CGPoint v19;
  CGRect v20;

  v7 = a2;
  v8 = a1;
  v9 = a1 - a3.x;
  v10 = a2 - a3.y;
  v11 = v9 * v9 + v10 * v10;
  v12 = fminf(sqrtf(v11) * a4, 1.0);
  if (v12 < 1.0)
  {
    y = a3.y;
    x = a3.x;
    v15 = (3.0 - ((float)(1.0 - v12) + (float)(1.0 - v12))) * (float)(1.0 - v12) * (float)(1.0 - v12);
    v16 = __sincosf_stret(v15 * a5);
    v17 = v9 * v16.__cosval + v10 * v16.__sinval;
    v18 = v10 * v16.__cosval - v9 * v16.__sinval;
    v8 = x + v17;
    v7 = y + v18;
  }
  v19.x = v8;
  v19.y = v7;
  if (!CGRectContainsPoint(*a6, v19))
  {
    v20.size.width = 0.0;
    v20.size.height = 0.0;
    v20.origin.x = v8;
    v20.origin.y = v7;
    *a6 = CGRectUnion(*a6, v20);
  }
}

void HiOSTwirl::~HiOSTwirl(HGNode *this)
{
  void *v1;

  HgciOSTwirl::~HgciOSTwirl(this);
  HGObject::operator delete(v1);
}

void HPrism::HPrism(HPrism *this)
{
  _QWORD *v2;
  HGNode *v3;
  HGNode *v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64DB298;
  v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  *((_QWORD *)this + 51) = v3;
  v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *((_QWORD *)this + 52) = v4;
}

void sub_1B27F16BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v3 = v2;
  HGObject::operator delete(v3);
  v5 = *(_QWORD *)(v1 + 408);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HPrism::~HPrism(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E64DB298;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HPrism::~HPrism(this);
  HGObject::operator delete(v1);
}

uint64_t HPrism::init(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  HDirectionalBlur *v6;
  HgcPrism *v7;
  HGXForm *v8;
  HGXForm *v9;
  _BYTE v11[144];
  _BYTE v12[144];

  v4 = *a2;
  v5 = a2[1];
  v6 = (HDirectionalBlur *)HGObject::operator new(0x1B0uLL);
  HDirectionalBlur::HDirectionalBlur(v6);
  HDirectionalBlur::init((uint64_t)v6, a2);
  (*(void (**)(HDirectionalBlur *, _QWORD, _QWORD))(*(_QWORD *)v6 + 120))(v6, 0, *(_QWORD *)(a1 + 408));
  v7 = (HgcPrism *)HGObject::operator new(0x1A0uLL);
  HgcPrism::HgcPrism(v7);
  HGTransform::HGTransform((HGTransform *)v12);
  *(float *)&v4 = v4 + v4;
  *(float *)&v5 = v5 + v5;
  HGTransform::Translate((HGTransform *)v12, *(float *)&v4, *(float *)&v5, 0.0);
  v8 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v8);
  (*(void (**)(HGXForm *, _QWORD, HDirectionalBlur *))(*(_QWORD *)v8 + 120))(v8, 0, v6);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v8 + 576))(v8, v12);
  (*(void (**)(HGXForm *, uint64_t))(*(_QWORD *)v8 + 160))(v8, 1);
  (*(void (**)(HgcPrism *, _QWORD, HGXForm *))(*(_QWORD *)v7 + 120))(v7, 0, v8);
  (*(void (**)(HgcPrism *, uint64_t, HDirectionalBlur *))(*(_QWORD *)v7 + 120))(v7, 1, v6);
  HGTransform::HGTransform((HGTransform *)v11);
  HGTransform::Translate((HGTransform *)v11, (float)-*(float *)&v4, (float)-*(float *)&v5, 0.0);
  v9 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v9);
  (*(void (**)(HGXForm *, _QWORD, HDirectionalBlur *))(*(_QWORD *)v9 + 120))(v9, 0, v6);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v9 + 576))(v9, v11);
  (*(void (**)(HGXForm *, uint64_t))(*(_QWORD *)v9 + 160))(v9, 1);
  (*(void (**)(HgcPrism *, uint64_t, HGXForm *))(*(_QWORD *)v7 + 120))(v7, 2, v9);
  (*(void (**)(_QWORD, _QWORD, HgcPrism *))(**(_QWORD **)(a1 + 416) + 120))(*(_QWORD *)(a1 + 416), 0, v7);
  (*(void (**)(HGXForm *))(*(_QWORD *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)v11);
  (*(void (**)(HGXForm *))(*(_QWORD *)v8 + 24))(v8);
  HGTransform::~HGTransform((HGTransform *)v12);
  (*(void (**)(HgcPrism *))(*(_QWORD *)v7 + 24))(v7);
  return (*(uint64_t (**)(HDirectionalBlur *))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1B27F19C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  HGObject::operator delete(v30);
  HGTransform::~HGTransform((HGTransform *)&a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  HGTransform::~HGTransform((HGTransform *)&a27);
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  _Unwind_Resume(a1);
}

uint64_t HPrism::GetOutput(HPrism *this, HGRenderer *a2)
{
  uint64_t v3;
  HGNode *Input;

  v3 = *((_QWORD *)this + 51);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v3 + 120))(v3, 0, Input);
  return *((_QWORD *)this + 52);
}

void HSoftFocus::HSoftFocus(HSoftFocus *this)
{
  _QWORD *v2;
  HGNode *v3;
  HGNode *v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64DB500;
  v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  *((_QWORD *)this + 51) = v3;
  v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  *((_QWORD *)this + 52) = v4;
}

void sub_1B27F1B60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v3 = v2;
  HGObject::operator delete(v3);
  v5 = *(_QWORD *)(v1 + 408);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HSoftFocus::~HSoftFocus(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E64DB500;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HSoftFocus::~HSoftFocus(this);
  HGObject::operator delete(v1);
}

uint64_t HSoftFocus::init(HSoftFocus *this, float a2, float a3, float a4, float a5, char a6)
{
  HGaussianBlur *v12;
  HGLegacyBlend *v13;

  v12 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
  HGaussianBlur::HGaussianBlur(v12);
  HGaussianBlur::init(v12, a2, a4, a5, a6, 0, 0);
  (*(void (**)(HGaussianBlur *, _QWORD, _QWORD))(*(_QWORD *)v12 + 120))(v12, 0, *((_QWORD *)this + 51));
  v13 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
  HGLegacyBlend::HGLegacyBlend(v13);
  (*(void (**)(HGLegacyBlend *, _QWORD, float, float, float, float))(*(_QWORD *)v13 + 96))(v13, 0, 8.0, 0.0, 0.0, 0.0);
  (*(void (**)(HGLegacyBlend *, uint64_t, float, float, float, float))(*(_QWORD *)v13 + 96))(v13, 1, a3, 0.0, 0.0, 0.0);
  (*(void (**)(HGLegacyBlend *, uint64_t, HGaussianBlur *))(*(_QWORD *)v13 + 120))(v13, 1, v12);
  (*(void (**)(HGLegacyBlend *, _QWORD, _QWORD))(*(_QWORD *)v13 + 120))(v13, 0, *((_QWORD *)this + 51));
  (*(void (**)(_QWORD, _QWORD, HGLegacyBlend *))(**((_QWORD **)this + 52) + 120))(*((_QWORD *)this + 52), 0, v13);
  (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v13 + 24))(v13);
  return (*(uint64_t (**)(HGaussianBlur *))(*(_QWORD *)v12 + 24))(v12);
}

void sub_1B27F1D8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HSoftFocus::GetOutput(HSoftFocus *this, HGRenderer *a2)
{
  uint64_t v3;
  HGNode *Input;

  v3 = *((_QWORD *)this + 51);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v3 + 120))(v3, 0, Input);
  return *((_QWORD *)this + 52);
}

uint64_t *HZoomBlur::makeZoom@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
}

uint64_t *`anonymous namespace'::doMakeZoom@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  uint64_t *v6;
  uint64_t v8;
  float v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  int v18;
  uint64_t v19;
  HgcZoomBlur *v20;
  HgcZoomBlur *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  HgcZoomBlur *v26;
  uint64_t v27;

  v6 = result;
  *a2 = 0;
  if (a3 == 0.0)
  {
    v8 = *result;
    if (*result)
    {
      *a2 = v8;
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
    return result;
  }
  v12 = a3 * a3;
  v13 = 1.0833;
  if (v12 <= 1.0833)
  {
    v15 = 1;
  }
  else
  {
    v14 = 1.0;
    v15 = 1;
    do
    {
      v16 = v13;
      v14 = v14 * 4.0;
      v13 = v13 + v14;
      ++v15;
    }
    while (v12 > v13);
    v12 = v12 - v16;
    v13 = v13 - v16;
  }
  v17 = v12 / v13;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  do
  {
    v22 = (uint64_t)v20;
    if (v18)
    {
      if ((HgcZoomBlur *)v19 != v20)
      {
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        if (v20)
        {
          v19 = (uint64_t)v20;
          (*(void (**)(HgcZoomBlur *))(*(_QWORD *)v20 + 16))(v20);
        }
        else
        {
          v19 = 0;
        }
      }
    }
    else
    {
      if (v19 == *v6)
        goto LABEL_23;
      if (!v19)
      {
        v19 = *v6;
        if (!*v6)
          goto LABEL_23;
LABEL_22:
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        goto LABEL_23;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v19 = *v6;
      if (*v6)
        goto LABEL_22;
    }
LABEL_23:
    if (v21 != v20)
    {
      if (v21)
        (*(void (**)(HgcZoomBlur *))(*(_QWORD *)v21 + 24))(v21);
      if (v20)
        (*(void (**)(HgcZoomBlur *))(*(_QWORD *)v20 + 16))(v20);
    }
    v23 = powf(a6, (float)(1 << v18));
    v20 = (HgcZoomBlur *)HGObject::operator new(0x1B0uLL);
    HgcZoomBlur::HgcZoomBlur(v20);
    (*(void (**)(HgcZoomBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 0, a4, a5, 0.0, 0.0);
    (*(void (**)(HgcZoomBlur *, uint64_t, float, float, float, float))(*(_QWORD *)v20 + 96))(v20, 1, v23, v23 * v23, v23 * (float)(v23 * v23), (float)(v23 * v23) * (float)(v23 * v23));
    (*(void (**)(HgcZoomBlur *, _QWORD, uint64_t))(*(_QWORD *)v20 + 120))(v20, 0, v19);
    if ((HgcZoomBlur *)v22 == v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      v20 = (HgcZoomBlur *)v22;
    }
    else if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    }
    (*(void (**)(HgcZoomBlur *, uint64_t, uint64_t))(*(_QWORD *)v20 + 136))(v20, 0xFFFFFFFFLL, 2);
    ++v18;
    v21 = (HgcZoomBlur *)v22;
  }
  while (v15 != v18);
  v25 = v19;
  v26 = v20;
  v27 = v22;
  if (v22)
  else
  if (v24)
    *a2 = v24;
  if (!v19
    || (result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19), (v20 = v26) != 0))
  {
    result = (uint64_t *)(*(uint64_t (**)(HgcZoomBlur *))(*(_QWORD *)v20 + 24))(v20);
  }
  if (v22)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  return result;
}

void sub_1B27F2190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = v14;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    v16 = a11;
  }
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (*v12)
    (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
  _Unwind_Resume(exception_object);
}

float HZoomBlur::getOutputWidthAndHeight(HZoomBlur *this, unsigned int a2, _QWORD *a3, float a4, float a5, float a6, unint64_t *a7, unint64_t *a8)
{
}

float `anonymous namespace'::computeOutputWidthAndHeight(_anonymous_namespace_ *this, unsigned int a2, _QWORD *a3, float a4, float a5, float a6, unint64_t *a7, unint64_t *a8, float a9)
{
  unsigned int v12;
  float v13;
  float v14;
  float Scale;
  float result;

  v12 = this;
  if (a5 < 0.0)
    a5 = -a5;
  v13 = a5 + (float)(this >> 1);
  if (a6 < 0.0)
    a6 = -a6;
  v14 = a6 + (float)(a2 >> 1);
  *a3 = (unint64_t)(float)((float)((float)((float)(v13 / Scale) - v13) + (float)((float)(v13 / Scale) - v13))
                                + (float)v12);
  result = (float)((float)((float)(v14 / Scale) - v14) + (float)((float)(v14 / Scale) - v14)) + (float)a2;
  *a7 = (unint64_t)result;
  return result;
}

uint64_t `anonymous namespace'::blurLerp@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t result;
  HGLegacyBlend *v9;

  if (fabsf(a4) >= 0.00001)
  {
    if (fabsf(a4 + -1.0) >= 0.00001)
    {
      v9 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
      HGLegacyBlend::HGLegacyBlend(v9);
      (*(void (**)(HGLegacyBlend *, _QWORD, uint64_t))(*(_QWORD *)v9 + 120))(v9, 0, *a2);
      (*(void (**)(HGLegacyBlend *, uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(v9, 1, *a1);
      (*(void (**)(HGLegacyBlend *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, 8.0, 0.0, 0.0, 0.0);
      result = (*(uint64_t (**)(HGLegacyBlend *, uint64_t, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 1, a4, 0.0, 0.0, 0.0);
      *a3 = v9;
      return result;
    }
    result = *a1;
  }
  else
  {
    result = *a2;
  }
  *a3 = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_1B27F2490(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

float `anonymous namespace'::findScale(_anonymous_namespace_ *this, float a2, float a3)
{
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  float v14;

  v4 = a2 * a2;
  v5 = 1.0833;
  if (v4 <= 1.0833)
  {
    v12 = v4 / 1.0833;
    v10 = (float)(a3 * a3) * (float)(a3 * a3);
    v13 = v10;
  }
  else
  {
    v6 = 1.0;
    v7 = -1;
    do
    {
      v8 = v5;
      v6 = v6 * 4.0;
      v5 = v5 + v6;
      ++v7;
    }
    while (v4 > v5);
    v9 = v4 - v8;
    v10 = (float)(a3 * a3) * (float)(a3 * a3);
    v11 = -1;
    v12 = v9 / (float)(v5 - v8);
    do
    {
      v13 = v10;
      v14 = powf(a3, (float)(1 << (v11 + 2)));
      v10 = v13 * (float)((float)(v14 * v14) * (float)(v14 * v14));
      ++v11;
    }
    while (v7 != v11);
  }
  return (float)(v12 * v10) + (float)((float)(1.0 - v12) * v13);
}

void HStyleTransfer_GPUImpl::HStyleTransfer_GPUImpl(HStyleTransfer_GPUImpl *this, EspressoImage2Image *a2)
{
  _QWORD *v4;

  HGNode::HGNode((HGNode *)this);
  *v4 = off_1E64DB768;
  v4[51] = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0xFFFFF9FF | 0x400;
  (*(void (**)(HStyleTransfer_GPUImpl *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  (*(void (**)(HStyleTransfer_GPUImpl *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 0xFFFFFFFFLL, 2);
  *((_QWORD *)this + 51) = a2;
}

void sub_1B27F2648(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HStyleTransfer_GPUImpl::~HStyleTransfer_GPUImpl(id *this)
{
  *this = off_1E64DB768;

  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  HStyleTransfer_GPUImpl::~HStyleTransfer_GPUImpl(this);
  HGObject::operator delete(v1);
}

uint64_t HStyleTransfer_GPUImpl::RenderPageMetal(HStyleTransfer_GPUImpl *this, HGPage *a2)
{
  return HStyleTransfer_GPUImpl::_renderPage((uint64_t)this, (uint64_t)a2, 1);
}

uint64_t HStyleTransfer_GPUImpl::_renderPage(uint64_t a1, uint64_t a2, int a3)
{
  HGRenderer *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *Buffer;
  HGNode *Input;
  HGBitmap *NodeBitmap;
  char *v13;
  void *v14;
  void *v15;
  int32x2_t v16;
  int32x2_t v17;
  _QWORD *v18;
  void **v19;
  int32x2_t v20;
  __int128 v21;
  void *v22;
  id v23;
  unsigned int v24;
  int v25;
  int v26;
  std::unique_lock<std::mutex> __lk;
  _QWORD v29[6];
  _QWORD v30[3];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  HGBitmap *v37;
  HGBitmap *v38;

  v6 = *(HGRenderer **)a2;
  v7 = objc_msgSend(*(id *)(HGGPURenderer::GetMetalContext(*(HGGPURenderer **)a2) + 32), "commandBuffer");
  v8 = *(void **)(a1 + 408);
  if (!v8)
    return HGNode::RenderPage((HGNode *)a1, (HGRect *)a2);
  v9 = (void *)v7;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return HGNode::RenderPage((HGNode *)a1, (HGRect *)a2);
  Buffer = HGGPURenderer::CreateBuffer((uint64_t)v6, *(HGRect *)(a2 + 36), *(unsigned int *)(a2 + 32), a3, 0, 0);
  Input = HGRenderer::GetInput(v6, (HGNode *)a1, 0);
  NodeBitmap = HGGPURenderer::GetNodeBitmap(v6, Input, *(HGRect *)(a2 + 36), (HGBuffer *)Buffer, 1u);
  if (NodeBitmap != (HGBitmap *)Buffer)
    HGGPURenderer::CopyBitmapIntoBuffer((uint64_t)v6, (HGBuffer *)Buffer, *(HGRect *)(a2 + 36), NodeBitmap);
  (*(void (**)(HGBitmap *))(*(_QWORD *)NodeBitmap + 24))(NodeBitmap);
  (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v6 + 144))(v6, 0);
  HGGPURenderer::FlushMetalCommandBuffer(v6);
  v13 = HGGPURenderer::CreateBuffer(*(_QWORD *)a2, *(HGRect *)(a2 + 16), *(unsigned int *)(a2 + 32), a3, (*(_DWORD *)(a1 + 16) >> 12) & 1, 0, 1);
  v38 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v6, (HGBitmap *)v13);
  v14 = (void *)*((_QWORD *)v38 + 18);
  v37 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)v6, (HGBitmap *)Buffer);
  (*(void (**)(char *))(*(_QWORD *)Buffer + 24))(Buffer);
  v15 = (void *)*((_QWORD *)v37 + 18);
  v17 = *(int32x2_t *)(a2 + 16);
  v16 = *(int32x2_t *)(a2 + 24);
  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 0;
  v18 = (_QWORD *)operator new();
  *v18 = 0;
  v18[1] = 0;
  v18[2] = 0;
  v36 = v18;
  std::vector<HGRef<HGMetalTexture>>::push_back[abi:ne180100]((uint64_t *)v34[3], (void ***)&v38);
  v19 = std::vector<HGRef<HGMetalTexture>>::push_back[abi:ne180100]((uint64_t *)v34[3], (void ***)&v37);
  v20 = vsub_s32(v16, v17);
  *(_QWORD *)&v21 = v20.u32[0];
  *((_QWORD *)&v21 + 1) = v20.u32[1];
  v22 = (void *)MEMORY[0x1B5E29C50](v19);
  memset(v30, 0, sizeof(v30));
  v31 = v21;
  v32 = 1;
  objc_msgSend(v8, "encodeToCommandBuffer:sourceTexture:destinationTexture:cropRect:", v9, v15, v14, v30);
  v23 = v8;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN22HStyleTransfer_GPUImpl11_renderPageEP6HGPage14HGGPURenderAPI_block_invoke;
  v29[3] = &unk_1E64DB9B0;
  v29[4] = v8;
  v29[5] = &v33;
  objc_msgSend(v9, "addCompletedHandler:", v29);
  objc_msgSend(v9, "commit");
  do
  HGGPURenderer::SetLastMetalCmdBuffer((uint64_t)v6, v9);
  objc_msgSend(v9, "waitUntilScheduled");
  __lk.__owns_ = 1;
  if (v25 >= 2)
  {
    do
    {
    }
    while (v26 > 1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  objc_autoreleasePoolPop(v22);
  _Block_object_dispose(&v33, 8);
  if (v37)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v37 + 24))(v37);
  if (v38)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v38 + 24))(v38);
  return (uint64_t)v13;
}

void sub_1B27F2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  v19 = *(_QWORD *)(v17 - 112);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  v20 = *(_QWORD *)(v17 - 104);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  _Unwind_Resume(a1);
}

void **std::vector<HGRef<HGMetalTexture>>::push_back[abi:ne180100](uint64_t *a1, void ***a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void ***v7;
  void **result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void ***v15;
  void **v16;
  void *v17[2];
  void ***v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(void ****)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = (void ***)&v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v18 = v15;
    v19 = &v14[8 * v13];
    v16 = *a2;
    *v15 = *a2;
    if (v16)
    {
      (*((void (**)(void **))*v16 + 2))(v16);
      v15 = v18;
    }
    v18 = v15 + 1;
    std::vector<HGRef<HGMetalTexture>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<HGRef<HGMetalTexture>>::~__split_buffer(v17);
  }
  else
  {
    result = *a2;
    *v7 = *a2;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
    v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B27F2B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void ___ZN22HStyleTransfer_GPUImpl11_renderPageEP6HGPage14HGGPURenderAPI_block_invoke(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  do
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
    v5 = *(void ***)(v3 + 24);
    std::vector<HGRef<HGMetalTexture>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1B5E29170](v4, 0x20C40960023A9);
  }

}

void HStyleTransfer_GPU::HStyleTransfer_GPU(HStyleTransfer_GPU *this, EspressoImage2Image *a2)
{
  uint64_t v3;
  HStyleTransfer_GPUImpl **v4;
  HStyleTransfer_GPUImpl *v5;
  HStyleTransfer_GPUImpl *v6;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v3 = off_1E64DB9E0;
  v4 = (HStyleTransfer_GPUImpl **)(v3 + 408);
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 416) = 0;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v3 + 16) & 0xFFFFF9FF | 0x400;
  v5 = (HStyleTransfer_GPUImpl *)HGObject::operator new(0x1A0uLL);
  HStyleTransfer_GPUImpl::HStyleTransfer_GPUImpl(v5, a2);
  v6 = *v4;
  if (*v4 == v5)
  {
    if (v5)
      (*(void (**)(HStyleTransfer_GPUImpl *))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    if (v6)
      (*(void (**)(HStyleTransfer_GPUImpl *))(*(_QWORD *)v6 + 24))(v6);
    *v4 = v5;
  }
}

void sub_1B27F2CD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v4 = v2;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = *(_QWORD *)(v1 + 416);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (*v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

HGXForm *HStyleTransfer_GPU::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t DOD;
  int v6;
  int v7;
  float v8;
  float v9;
  HGXForm *v10;
  HGXForm *v11;
  HGXForm *v12;
  HGXForm *v13;
  _BYTE v15[144];
  _BYTE v16[144];

  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v8 = fminf(1920.0 / (float)(v6 - DOD), 1.0);
  v9 = fminf(1920.0 / (float)(v7 - HIDWORD(DOD)), 1.0);
  HGTransform::HGTransform((HGTransform *)v16);
  HGTransform::Scale((HGTransform *)v16, v8, v9, 1.0);
  HGTransform::HGTransform((HGTransform *)v15);
  HGTransform::Scale((HGTransform *)v15, (float)(1.0 / v8), (float)(1.0 / v9), 1.0);
  v10 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v10);
  (*(void (**)(HGXForm *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, Input);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v10 + 576))(v10, v16);
  (*(void (**)(HGXForm *, uint64_t, float))(*(_QWORD *)v10 + 592))(v10, 6, 1.0);
  (*(void (**)(_QWORD, _QWORD, HGXForm *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, v10);
  v11 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v11);
  (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v11 + 120))(v11, 0, *((_QWORD *)this + 51));
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v11 + 576))(v11, v15);
  v12 = (HGXForm *)*((_QWORD *)this + 52);
  v13 = v11;
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(HGXForm *))(*(_QWORD *)v12 + 24))(v12);
    *((_QWORD *)this + 52) = v11;
    (*(void (**)(HGXForm *))(*(_QWORD *)v11 + 16))(v11);
    v13 = (HGXForm *)*((_QWORD *)this + 52);
  }
  (*(void (**)(HGXForm *))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(HGXForm *))(*(_QWORD *)v10 + 24))(v10);
  HGTransform::~HGTransform((HGTransform *)v15);
  HGTransform::~HGTransform((HGTransform *)v16);
  return v13;
}

void sub_1B27F2F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v28;

  HGObject::operator delete(v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  HGTransform::~HGTransform((HGTransform *)&a9);
  HGTransform::~HGTransform((HGTransform *)&a27);
  _Unwind_Resume(a1);
}

void HStyleTransfer_GPU::~HStyleTransfer_GPU(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E64DB9E0;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E64DB9E0;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
  HGObject::operator delete(v4);
}

double ___ZN12_GLOBAL__N_111InitStaticsEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  v1 = operator new();
  *(_QWORD *)v1 = 1018212795;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t std::vector<HGRef<HGMetalTexture>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>,std::reverse_iterator<HGRef<HGMetalTexture>*>,std::reverse_iterator<HGRef<HGMetalTexture>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>,std::reverse_iterator<HGRef<HGMetalTexture>*>,std::reverse_iterator<HGRef<HGMetalTexture>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v10 = v11;
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v7 = *((_QWORD *)&v17 + 1);
      }
      v7 -= 8;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B27F323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<HGRef<HGMetalTexture>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGMetalTexture>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGMetalTexture>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<HGRef<HGMetalTexture>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGMetalTexture>*>>,std::reverse_iterator<std::reverse_iterator<HGRef<HGMetalTexture>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a2 + 32); i != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*i)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      i = *(_QWORD **)(a2 + 32);
    }
    ++i;
  }
}

void **std::__split_buffer<HGRef<HGMetalTexture>>::~__split_buffer(void **a1)
{
  std::__split_buffer<HGRef<HGMetalTexture>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<HGRef<HGMetalTexture>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD **)(v2 - 8);
      v2 -= 8;
      result = v5;
      v4[2] = v2;
      if (v5)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        v2 = v4[2];
      }
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<HGRef<HGMetalTexture>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HGRef<HGMetalTexture>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<HGRef<HGMetalTexture>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 8)
  {
    v5 = *(_QWORD **)(i - 8);
    result = v5;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  v3[1] = a2;
  return result;
}

void sub_1B27F40C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v38;

  HGObject::operator delete(v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  v38 = *(_QWORD *)(v36 - 168);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  _Unwind_Resume(a1);
}

unint64_t HSharpen::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0x8000000080000000;
  else
    return a4;
}

uint64_t HSharpen::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HSharpen::~HSharpen(HGNode *this)
{
  void *v1;

  HgcSharpen::~HgcSharpen(this);
  HGObject::operator delete(v1);
}

void sub_1B27F4ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

double PCMatrix44Tmpl<double>::rightTranslate(double *a1, double result, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  if (result != 0.0)
  {
    v4 = a1[4];
    a1[3] = a1[3] + *a1 * result;
    v5 = v4 * result;
    v6 = a1[8];
    a1[7] = a1[7] + v5;
    v7 = v6 * result;
    v8 = a1[12];
    a1[11] = a1[11] + v7;
    result = a1[15] + v8 * result;
    a1[15] = result;
  }
  if (a3 != 0.0)
  {
    a1[3] = a1[3] + a1[1] * a3;
    a1[7] = a1[7] + a1[5] * a3;
    a1[11] = a1[11] + a1[9] * a3;
    result = a1[15] + a1[13] * a3;
    a1[15] = result;
  }
  if (a4 != 0.0)
  {
    a1[3] = a1[3] + a1[2] * a4;
    a1[7] = a1[7] + a1[6] * a4;
    a1[11] = a1[11] + a1[10] * a4;
    result = a1[15] + a1[14] * a4;
    a1[15] = result;
  }
  return result;
}

void sub_1B27F5CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  _Unwind_Resume(a1);
}

void HGradientRadial::HGradientRadial(HGradientRadial *this)
{
  HGNode *v1;

  HgcGradientRadial::HgcGradientRadial(this);
  *(_QWORD *)v1 = off_1E64DBF08;
  HGNode::SetFlags(v1, 0, 2);
}

void sub_1B27F5E90(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcGradientRadial::~HgcGradientRadial(v1);
  _Unwind_Resume(a1);
}

void HGradientRadial::~HGradientRadial(HGNode *this)
{
  void *v1;

  HgcGradientRadial::~HgcGradientRadial(this);
  HGObject::operator delete(v1);
}

uint64_t HGradientRadial::GetROI(HGradientRadial *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result;
  _BYTE v6[8];
  float v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HGradientRadial *, uint64_t, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 1, v6, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
  result = HGRectMake4i(0, 0, (int)v7, 1u);
  if (a3)
    return 0;
  return result;
}

uint64_t HSoftGradient::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HSoftGradient::GetROI()
{
  return 0;
}

void HSoftGradient::~HSoftGradient(HGNode *this)
{
  void *v1;

  HgcSoftGradient::~HgcSoftGradient(this);
  HGObject::operator delete(v1);
}

void sub_1B27F6744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

void sub_1B27F736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1B27F80D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B27F8AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1B27F998C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B27FA93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B27FAE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  v11 = *(_QWORD *)(v9 - 24);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  _Unwind_Resume(exception_object);
}

double PCMatrix44Tmpl<double>::setRotationFromQuaternion(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = v2 * v2 + v3 * v3 + v4 * v4 + v5 * v5;
  v7 = 2.0 / v6;
  v8 = v6 <= 0.0;
  v9 = 0.0;
  if (!v8)
    v9 = v7;
  v10 = v3 * v9;
  v11 = v4 * v9;
  v12 = v5 * v9;
  v13 = v2 * v10;
  v14 = v2 * v11;
  v15 = v2 * v12;
  v16 = v3 * v10;
  v17 = v3 * v11;
  v18 = v3 * v12;
  v19 = v4 * v11;
  v20 = v4 * v12;
  v21 = v5 * v12;
  *(double *)a1 = 1.0 - (v19 + v21);
  *(double *)(a1 + 8) = v17 - v15;
  *(double *)(a1 + 16) = v18 + v14;
  *(_QWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = v17 + v15;
  *(double *)(a1 + 40) = 1.0 - (v16 + v21);
  *(double *)(a1 + 48) = v20 - v13;
  *(_QWORD *)(a1 + 56) = 0;
  *(double *)(a1 + 64) = v18 - v14;
  *(double *)(a1 + 72) = v20 + v13;
  *(double *)(a1 + 80) = 1.0 - (v16 + v19);
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

void sub_1B27FC664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a7);
  HGTransform::~HGTransform((HGTransform *)va);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 24))(a7);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  _Unwind_Resume(a1);
}

double PCQuat<double>::transform<double>(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  v2 = a2[1];
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a2[2];
  v8 = v3 * *a2 + v5 * v2 + v6 * v7;
  v9 = v8 + v8;
  v10 = v4 * (v4 + v4) + -1.0;
  v11 = (v4 + v4) * (v5 * v7 - v2 * v6) + v3 * v9 + *a2 * v10;
  v12 = (v4 + v4) * (*a2 * v6 - v3 * v7) + v5 * v9 + v2 * v10;
  v13 = (v3 * v2 - *a2 * v5) * (v4 + v4) + v6 * v9 + v7 * v10;
  v14 = v4 * v4 + v3 * v3 + v5 * v5 + v6 * v6;
  *a2 = v11 / v14;
  a2[1] = v12 / v14;
  result = v13 / v14;
  a2[2] = result;
  return result;
}

void sub_1B27FD048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  v12 = *(_QWORD *)(v10 - 40);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

void HWideScreen::HWideScreen(HWideScreen *this)
{
  _QWORD *v1;

  HgcWideScreen::HgcWideScreen(this);
  *v1 = off_1E64DC488;
}

void HWideScreen::~HWideScreen(HGNode *this)
{
  void *v1;

  HgcWideScreen::~HgcWideScreen(this);
  HGObject::operator delete(v1);
}

uint64_t HWideScreen::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

unint64_t HWideScreen::GetROI(HWideScreen *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v9;
  __int128 v10;
  unsigned __int128 v11;
  unsigned __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  float v26;
  float v27;
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  _QWORD v33[8];
  _QWORD v34[9];
  float v35[4];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = *(_QWORD *)&a4.var2;
    v7 = *(_QWORD *)&a4.var0;
    (*(void (**)(HWideScreen *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, v35);
    v9 = v35[0];
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 4, v34);
    v10 = *(_OWORD *)v34;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 5, v34);
    v11 = *(_OWORD *)v34;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 6, v34);
    v12 = *(_OWORD *)v34;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 7, v34);
    *(_QWORD *)&v13 = *((_QWORD *)&v10 + 1);
    *(_QWORD *)&v14 = v11 >> 64;
    *((_QWORD *)&v13 + 1) = v11;
    *(_QWORD *)&v15 = v12 >> 64;
    *((_QWORD *)&v14 + 1) = v12;
    v16 = v34[1];
    *((_QWORD *)&v15 + 1) = v34[0];
    v34[0] = v10;
    *(_OWORD *)&v34[1] = v13;
    *(_OWORD *)&v34[3] = v14;
    *(_OWORD *)&v34[5] = v15;
    v34[7] = v16;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 8, v33);
    v17 = *(_OWORD *)v33;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 9, v33);
    v18 = *(_OWORD *)v33;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 10, v33);
    v19 = *(_OWORD *)v33;
    (*(void (**)(HWideScreen *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 11, v33);
    *(_QWORD *)&v20 = *((_QWORD *)&v18 + 1);
    *(_QWORD *)&v21 = v19 >> 64;
    *((_QWORD *)&v20 + 1) = v19;
    v22 = v33[1];
    *((_QWORD *)&v21 + 1) = v33[0];
    *(_OWORD *)&v33[1] = *(__int128 *)((char *)&v17 + 8);
    *(_OWORD *)&v33[3] = v20;
    *(_OWORD *)&v33[5] = v21;
    v33[7] = v22;
    v32.f32[0] = (float)(int)v7;
    v32.f32[1] = (float)SHIDWORD(v7);
    v32.i64[1] = 0x3F80000000000000;
    v33[0] = v17;
    v31.f32[0] = (float)(int)v6;
    v31.f32[1] = (float)SHIDWORD(v7);
    v31.i64[1] = 0x3F80000000000000;
    v30.f32[0] = (float)(int)v6;
    v30.f32[1] = (float)SHIDWORD(v6);
    v30.i64[1] = 0x3F80000000000000;
    *(float *)&v29 = (float)(int)v7;
    *((float *)&v29 + 1) = (float)SHIDWORD(v6);
    *((_QWORD *)&v29 + 1) = 0x3F80000000000000;
    v32 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, v32.f32, v32.f32);
    v23.i32[1] = v32.i32[1];
    v23.i32[0] = *(_DWORD *)((unint64_t)&v32 | 0xC);
    v32.f32[0] = v32.f32[0] / *(float *)v23.i32;
    *(float32x2_t *)&v32.i32[1] = vdiv_f32(*(float32x2_t *)&v32.i32[1], (float32x2_t)vdup_lane_s32(v23, 0));
    *(float *)((unint64_t)&v32 | 0xC) = *(float *)v23.i32 / *(float *)v23.i32;
    v31 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, v31.f32, v31.f32);
    v24.i32[1] = v31.i32[1];
    v24.i32[0] = *(_DWORD *)((unint64_t)&v31 | 0xC);
    v31.f32[0] = v31.f32[0] / *(float *)v24.i32;
    *(float32x2_t *)&v31.i32[1] = vdiv_f32(*(float32x2_t *)&v31.i32[1], (float32x2_t)vdup_lane_s32(v24, 0));
    *(float *)((unint64_t)&v31 | 0xC) = *(float *)v24.i32 / *(float *)v24.i32;
    v30 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, v30.f32, v30.f32);
    v25.i32[1] = v30.i32[1];
    v25.i32[0] = *(_DWORD *)((unint64_t)&v30 | 0xC);
    v30.f32[0] = v30.f32[0] / *(float *)v25.i32;
    *(float32x2_t *)&v30.i32[1] = vdiv_f32(*(float32x2_t *)&v30.i32[1], (float32x2_t)vdup_lane_s32(v25, 0));
    *(float *)((unint64_t)&v30 | 0xC) = *(float *)v25.i32 / *(float *)v25.i32;
    v29 = *(_OWORD *)PCMatrix44Tmpl<float>::transform<float>((float *)v34, (float *)&v29, (float *)&v29);
    v32.f32[1] = v32.f32[1] - v9;
    v31.f32[1] = v31.f32[1] - v9;
    v30.f32[1] = v30.f32[1] - v9;
    *(float *)&v29 = *(float *)&v29 / *((float *)&v29 + 3);
    *((float *)&v29 + 1) = (float)(*((float *)&v29 + 1) / *((float *)&v29 + 3)) - v9;
    *((float *)&v29 + 2) = *((float *)&v29 + 2) / *((float *)&v29 + 3);
    *((float *)&v29 + 3) = *((float *)&v29 + 3) / *((float *)&v29 + 3);
    v32 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, v32.f32, v32.f32);
    v32 = vdivq_f32(v32, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3));
    v31 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, v31.f32, v31.f32);
    v31 = vdivq_f32(v31, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3));
    v30 = *(float32x4_t *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, v30.f32, v30.f32);
    v30 = vdivq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3));
    v29 = *(_OWORD *)PCMatrix44Tmpl<float>::transform<float>((float *)v33, (float *)&v29, (float *)&v29);
    if (v32.f32[0] >= v31.f32[0])
      v26 = v31.f32[0];
    else
      v26 = v32.f32[0];
    if (v32.f32[1] >= v31.f32[1])
      v27 = v31.f32[1];
    else
      v27 = v32.f32[1];
    if (v26 >= v30.f32[0])
      v26 = v30.f32[0];
    if (v27 >= v30.f32[1])
      v27 = v30.f32[1];
    if (v26 >= (float)(*(float *)&v29 / *((float *)&v29 + 3)))
      v26 = *(float *)&v29 / *((float *)&v29 + 3);
    if (v27 >= (float)(*((float *)&v29 + 1) / *((float *)&v29 + 3)))
      v27 = *((float *)&v29 + 1) / *((float *)&v29 + 3);
    v4 = (int)(v26 + -1.0);
    v5 = (int)(v27 + -1.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

float *PCMatrix44Tmpl<float>::transform<float>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *a3 = (float)((float)((float)(*a2 * *a1) + (float)(v4 * a1[1])) + (float)(v5 * a1[2])) + (float)(v6 * a1[3]);
  a3[1] = (float)((float)((float)(v3 * a1[4]) + (float)(v4 * a1[5])) + (float)(v5 * a1[6])) + (float)(v6 * a1[7]);
  a3[2] = (float)((float)((float)(v3 * a1[8]) + (float)(v4 * a1[9])) + (float)(v5 * a1[10])) + (float)(v6 * a1[11]);
  a3[3] = (float)((float)((float)(v3 * a1[12]) + (float)(v4 * a1[13])) + (float)(v5 * a1[14])) + (float)(v6 * a1[15]);
  return a3;
}

void sub_1B27FDDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B27FE7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void HGradientColorize::HGradientColorize(HGradientColorize *this)
{
  HGNode *v1;

  HgcGradientColorize::HgcGradientColorize(this);
  *(_QWORD *)v1 = off_1E64DC6F0;
  HGNode::SetFlags(v1, 1, 2);
}

void sub_1B27FE8A8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcGradientColorize::~HgcGradientColorize(v1);
  _Unwind_Resume(a1);
}

void HGradientColorize::~HGradientColorize(HGNode *this)
{
  void *v1;

  HgcGradientColorize::~HgcGradientColorize(this);
  HGObject::operator delete(v1);
}

uint64_t HGradientColorize::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

unint64_t HGradientColorize::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;

  if (a3)
  {
    LODWORD(a4) = 0;
    v4 = 0;
  }
  else
  {
    v4 = a4 & 0xFFFFFFFF00000000;
  }
  return v4 | a4;
}

void sub_1B27FF620(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2800064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 24))(a21);
  _Unwind_Resume(exception_object);
}

void sub_1B280061C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v43;

  HGObject::operator delete(v40);
  HGTransform::~HGTransform((HGTransform *)&a11);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  if (a38)
    (*(void (**)(uint64_t))(*(_QWORD *)a38 + 24))(a38);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  v43 = *(_QWORD *)(v41 - 168);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
  _Unwind_Resume(a1);
}

uint64_t FracturedUtils::getModeNameStrings(FracturedUtils *this)
{
  uint64_t result;

  result = FracturedUtils::getModeNameStrings(void)::s_modeNames;
  if (!FracturedUtils::getModeNameStrings(void)::s_modeNames)
  {
    result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("Shatter"), CFSTR("Blast"), CFSTR("Crumble"), CFSTR("Swipe"), CFSTR("Vortex"), CFSTR("Flip"), CFSTR("Whirl"), CFSTR("Shutters"), CFSTR("Evaporate"), CFSTR("Explode"), CFSTR("Pulverize"), CFSTR("Twirl"), CFSTR("Spread"), CFSTR("Rotate"), CFSTR("Blocks"), CFSTR("Bars"), CFSTR("Cube"),
               0);
    FracturedUtils::getModeNameStrings(void)::s_modeNames = result;
  }
  return result;
}

uint64_t FracturedUtils::getShapeNameStrings(FracturedUtils *this)
{
  uint64_t result;

  result = FracturedUtils::getShapeNameStrings(void)::s_shapeNames;
  if (!FracturedUtils::getShapeNameStrings(void)::s_shapeNames)
  {
    result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("Point"), CFSTR("Triangle"), CFSTR("Quad"), CFSTR("Circle"), CFSTR("Glass"), CFSTR("Brick"), CFSTR("Glass2"), 0);
    FracturedUtils::getShapeNameStrings(void)::s_shapeNames = result;
  }
  return result;
}

uint64_t FracturedUtils::getAnimationTypeStrings(FracturedUtils *this)
{
  uint64_t result;

  result = FracturedUtils::getAnimationTypeStrings(void)::s_animationNames;
  if (!FracturedUtils::getAnimationTypeStrings(void)::s_animationNames)
  {
    result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("Explode"), CFSTR("Reassemble"), CFSTR("Implode"), 0);
    FracturedUtils::getAnimationTypeStrings(void)::s_animationNames = result;
  }
  return result;
}

uint64_t FracturedUtils::properties(FracturedUtils *this)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)MEMORY[0x1E0C99D80];
  v2 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
  v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  return objc_msgSend(v1, "dictionaryWithObjectsAndKeys:", v2, CFSTR("MayRemapTime"), v3, CFSTR("SupportsHeliumRendering"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("PixelTransformSupport"), 0);
}

uint64_t FracturedUtils::addParameters(void *a1, void *a2, int a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  FracturedUtils *v18;
  FracturedUtils *v19;
  int v20;
  FracturedUtils *v21;
  int v22;
  int v23;
  int v24;
  double v25;

  v8 = (void *)objc_msgSend(a2, "apiForProtocol:", &unk_1EF0A41C0);
  v9 = objc_msgSend(a2, "apiForProtocol:", &unk_1EF0A8190);
  v10 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    return 0;
  if (*(_BYTE *)a4)
    return 1;
  v13 = v10;
  v14 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("Fractured::Density"), 0, 0), 1, 0, *(float *)(a4 + 4), 1.0, 100.0, 1.0, 100.0, 1.0);
  v15 = v14 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::DensityScaleStart"), 0, 0), 13, 0, *(float *)(a4 + 32), 0.00999999978, 2.0, 0.00999999978, 2.0, 0.00999999978);
  v16 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::DensityScaleEnd"), 0, 0), 14, 0, *(float *)(a4 + 36), 0.00999999978, 2.0, 0.00999999978, 2.0, 0.00999999978);
  v17 = v15 & v16 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Extrude"), 0, 0), 8, 0, *(float *)(a4 + 20), 0.0, 3.0, 0.0, 3.0, 0.1);
  v18 = (FracturedUtils *)objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Mode"), 0, 0);
  LODWORD(v18) = objc_msgSend(v8, "addPopupMenuWithName:parmId:defaultValue:menuEntries:parmFlags:", v18, 2, *(unsigned int *)(a4 + 12), FracturedUtils::getModeNameStrings(v18), 0);
  v19 = (FracturedUtils *)objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::AnimationType"), 0, 0);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addPopupMenuWithName:parmId:defaultValue:menuEntries:parmFlags:", v19, 22, *(unsigned int *)(a4 + 128), FracturedUtils::getAnimationTypeStrings(v19), 0);
  LODWORD(v19) = v17 & v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Randomize"), 0, 0), 3, *(unsigned __int8 *)(a4 + 8), 0);
  LODWORD(v18) = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::FragmentAspect"), 0, 0), 28, 0, *(float *)(a4 + 148), 0.5, 2.0, 0.5, 2.0, 0.01);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Delay"), 0, 0), 21, 0, *(float *)(a4 + 124), 0.0, 1.0, 0.0, 1.0, 0.01);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Lighting"), 0, 0), 5, *(unsigned __int8 *)(a4 + 17), 0);
  LODWORD(v19) = v19 & v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Fog"), 0, 0), 6, *(unsigned __int8 *)(a4 + 18), 0);
  LODWORD(v18) = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::FogIntensity"), 0, 0), 18, 0, *(float *)(a4 + 112), 0.0, 2.0, 0.0, 2.0, 0.01);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Specular"), 0, 0), 16, *(unsigned __int8 *)(a4 + 72), 0);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::SpecularColor"), 0, 0), 17, 0, *(double *)(a4 + 80), *(double *)(a4 + 88), *(double *)(a4 + 96));
  LODWORD(v18) = v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::Transparency"), 0, 0), 7, *(unsigned __int8 *)(a4 + 19), 0);
  v20 = v19 & v18 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::DoubleSided"), 0, 0), 4, *(unsigned __int8 *)(a4 + 16), 0);
  LODWORD(v18) = objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:defaultAlpha:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::BackfaceColor"), 0, 0), 15, 0, *(double *)(a4 + 40), *(double *)(a4 + 48), *(double *)(a4 + 56), *(double *)(a4 + 64));
  v21 = (FracturedUtils *)objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::FaceShape"), 0, 0);
  LODWORD(v18) = v18 & objc_msgSend(v8, "addPopupMenuWithName:parmId:defaultValue:menuEntries:parmFlags:", v21, 12, *(unsigned int *)(a4 + 28), FracturedUtils::getShapeNameStrings(v21), 0);
  v22 = v20 & v18 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::ReassemblePoint"), 0, 0), 10, 0, *(float *)(a4 + 24), 0.0, 1.0, 0.0, 1.0, 0.01);
  if (a3)
    v23 = objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::ReassembleNegateClipBTime"), 0, 0), 27, *(unsigned __int8 *)(a4 + 144), 0);
  else
    v23 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::OutputExpansion"), 0, 0), 19, 0, *(float *)(a4 + 116), 1.0, 10.0, 1.0, 3.0, 0.1);
  v24 = v23 & objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::DissolveInOut"), 0, 0), 23, *(unsigned __int8 *)(a4 + 132), 0);
  v12 = v22 & v24 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("Fractured::DissolvePoint"), 0, 0), 24, 0, *(float *)(a4 + 136), 0.0, 1.0, 0.0, 1.0, 0.01);
  if (a3)
  {
    LODWORD(v25) = *(_DWORD *)(a4 + 140);
    objc_msgSend(a1, "addEaseParametersWithDefault:andFlags:", 0, v25);
  }
  return v12;
}

HGFractured::Effect **FracturedUtils::_findReadyEffect(uint64_t a1)
{
  HGFractured::Effect ***v1;

  v1 = *(HGFractured::Effect ****)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return 0;
  while (HGFractured::Effect::GetState(**v1))
  {
    if (++v1 == *(HGFractured::Effect ****)(a1 + 8))
      return 0;
  }
  return *v1;
}

uint64_t FracturedUtils::_erasePurgableItemsInPool(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  double v4;
  double v5;
  BOOL v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 8);
  if ((unint64_t)(v1 - *(_QWORD *)result) >= 0x29)
  {
    v2 = (_QWORD *)result;
    do
    {
      v3 = *(_QWORD *)(v1 - 8);
      objc_msgSend(*(id *)(v3 + 8), "timeIntervalSinceNow");
      v5 = v4;
      result = HGFractured::Effect::GetState(*(HGFractured::Effect **)v3);
      if ((_DWORD)result)
        v6 = 0;
      else
        v6 = v5 < -60.0;
      if (!v6)
        break;
      v7 = v2[1];
      result = *(_QWORD *)(v7 - 8);
      if (result)
      {
        FracturedUtils::FracturedFXPoolItem::~FracturedFXPoolItem((id *)result);
        result = MEMORY[0x1B5E29170]();
        v7 = v2[1];
      }
      v1 = v7 - 8;
      v2[1] = v1;
    }
    while ((unint64_t)(v1 - *v2) > 0x28);
  }
  return result;
}

uint64_t FracturedUtils::getReadyEffect(void **a1, void *a2)
{
  FracturedUtils::FracturedFXPoolItem *ReadyEffect;
  HGFractured::Effect *v5;
  unint64_t v6;
  FracturedUtils::FracturedFXPoolItem **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  FracturedUtils::FracturedFXPoolItem **v14;
  char *v15;
  char *v16;
  char *v17;
  FracturedUtils::FracturedFXPoolItem *v18;
  uint64_t v19;

  objc_msgSend(a2, "lock");
  ReadyEffect = (FracturedUtils::FracturedFXPoolItem *)FracturedUtils::_findReadyEffect((uint64_t)a1);
  if (!ReadyEffect)
  {
    ReadyEffect = (FracturedUtils::FracturedFXPoolItem *)operator new();
    v5 = (HGFractured::Effect *)HGObject::operator new(0x100uLL);
    HGFractured::Effect::Effect(v5);
    *(_QWORD *)ReadyEffect = v5;
    *((_QWORD *)ReadyEffect + 1) = 0;
    FracturedUtils::FracturedFXPoolItem::UpdateLastUsedTime(ReadyEffect);
    v6 = (unint64_t)a1[2];
    v7 = (FracturedUtils::FracturedFXPoolItem **)a1[1];
    if ((unint64_t)v7 >= v6)
    {
      v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v10 = v6 - (_QWORD)*a1;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v12);
      else
        v13 = 0;
      v14 = (FracturedUtils::FracturedFXPoolItem **)&v13[8 * v9];
      v15 = &v13[8 * v12];
      *v14 = ReadyEffect;
      v8 = v14 + 1;
      v17 = (char *)*a1;
      v16 = (char *)a1[1];
      if (v16 != *a1)
      {
        do
        {
          v18 = (FracturedUtils::FracturedFXPoolItem *)*((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)*a1;
      }
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v7 = ReadyEffect;
      v8 = v7 + 1;
    }
    a1[1] = v8;
    v19 = (char *)v8 - (_BYTE *)*a1;
    if ((unint64_t)v19 >= 0x79)
      NSLog(CFSTR("PAEFractured: Pool size > (%d). Currently at %lu"), 15, v19 >> 3);
  }
  HGFractured::Effect::SetState(*(_QWORD *)ReadyEffect, 1);
  FracturedUtils::FracturedFXPoolItem::UpdateLastUsedTime(ReadyEffect);
  if ((unint64_t)((_BYTE *)a1[1] - (_BYTE *)*a1) >= 0x49)
    FracturedUtils::_erasePurgableItemsInPool((uint64_t)a1);
  objc_msgSend(a2, "unlock");
  return *(_QWORD *)ReadyEffect;
}

void sub_1B28013DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  HGObject::operator delete(v2);
  MEMORY[0x1B5E29170](v1, 0xA0C40AFF93C70);
  _Unwind_Resume(a1);
}

uint64_t FracturedUtils::renderOutput(void *a1, void *a2, HGFractured::Effect *a3, uint64_t a4, void *a5, void *a6, void *a7, double *a8, float a9, char a10)
{
  double v16;
  void *v17;
  double v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __int128 v46;
  void *v47;
  double v48;
  double v49;
  int v50;
  HGFractured *v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  int v62;
  float v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  HGSolidColor *v72;
  HGCrop *v73;
  float v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  HGSolidColor *v80;
  HGCrop *v81;
  float v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  double v100;
  int v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  double v115;
  double v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  double v122;
  float v123;
  double v124;
  float v125;
  double v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  double v142;
  void *v143;
  float v144;
  float v145;
  float v146;
  double v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  float v151;
  float v152;
  float v153;
  float v154;
  HGHWBlendFlipped *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  HGHWBlendFlipped *v169;
  float v170;
  uint64_t v171;
  double v173;
  double v174;
  double v175;
  _BOOL4 v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v183;
  _BYTE v185[128];
  uint64_t v186[16];
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  double v190;
  __int128 v191;
  uint64_t v192;
  double v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  double v202;
  __int128 v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  double v214;
  __int128 v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  HGCrop *v224;
  __int128 v225[8];
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _OWORD v231[3];
  __int128 v232;
  uint64_t v233;
  double v234;
  __int128 v235;
  uint64_t v236;
  double v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244[8];
  _OWORD v245[8];
  HGCrop *v246;
  _QWORD v247[2];
  __int128 v248;
  __int128 v249[8];
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  double v257[4];
  double v258;
  __int16 v259;
  __int16 v260;
  int v261;
  int v262[2];
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  double v274[3];
  uint64_t v275;
  HGRect v276;
  HGRect v277;

  v275 = *MEMORY[0x1E0C80C00];
  v16 = *a8;
  v17 = (void *)objc_msgSend(a2, "apiForProtocol:", &unk_1EF0A4590);
  v269 = 0.0;
  v270 = 0.0;
  v268 = 0.0;
  v267 = 0.0;
  v266 = 0.0;
  v265 = 0.0;
  v264 = 0.0;
  v263 = 0.0;
  *(_QWORD *)v262 = 0;
  v261 = 0;
  v260 = 0;
  v259 = 0;
  v258 = 0.0;
  if (*(_BYTE *)a4)
  {
    v18 = *(float *)(a4 + 4);
    v19 = *(float *)(a4 + 36);
    v269 = *(float *)(a4 + 32);
    v270 = v18;
    v268 = v19;
    v20 = *(float *)(a4 + 24);
    v21 = *(float *)(a4 + 20);
    v267 = v21;
    v262[1] = *(_DWORD *)(a4 + 12);
    v261 = *(_DWORD *)(a4 + 128);
    v22 = 1.0;
    if (*(_BYTE *)(a4 + 8))
      v23 = 1.0;
    else
      v23 = 0.0;
    v175 = v23;
    v263 = *(float *)(a4 + 148);
    v265 = *(float *)(a4 + 124);
    if (*(_BYTE *)(a4 + 16))
      v24 = 1.0;
    else
      v24 = 0.0;
    if (*(_BYTE *)(a4 + 17))
      v25 = 1.0;
    else
      v25 = 0.0;
    if (!*(_BYTE *)(a4 + 18))
      v22 = 0.0;
    v173 = v22;
    v26 = *(unsigned __int8 *)(a4 + 72);
    LOBYTE(v260) = *(_BYTE *)(a4 + 72);
    v27 = *(_OWORD *)(a4 + 96);
    v271 = *(_OWORD *)(a4 + 80);
    v272 = v27;
    v258 = *(float *)(a4 + 112);
    HIBYTE(v260) = *(_BYTE *)(a4 + 19);
    v262[0] = *(_DWORD *)(a4 + 28);
    v266 = v20;
    LOBYTE(v259) = *(_BYTE *)(a4 + 144);
    v28 = *(_OWORD *)(a4 + 56);
    v273 = *(_OWORD *)(a4 + 40);
    *(_OWORD *)v274 = v28;
    HIBYTE(v259) = *(_BYTE *)(a4 + 132);
    v264 = *(float *)(a4 + 136);
  }
  else
  {
    v29 = v17;
    objc_msgSend(v17, "getFloatValue:fromParm:atFxTime:", &v270, 1, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v269, 13, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v268, 14, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v267, 8, *(_QWORD *)&v16);
    objc_msgSend(v29, "getIntValue:fromParm:atFxTime:", &v262[1], 2, *(_QWORD *)&v16);
    objc_msgSend(v29, "getIntValue:fromParm:atFxTime:", &v261, 22, *(_QWORD *)&v16);
    LOBYTE(v250[0]) = 0;
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", v250, 3, *(_QWORD *)&v16);
    v30 = 1.0;
    if (!LOBYTE(v250[0]))
      v30 = 0.0;
    v175 = v30;
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v263, 28, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v265, 21, *(_QWORD *)&v16);
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", v250, 4, *(_QWORD *)&v16);
    v25 = 1.0;
    if (LOBYTE(v250[0]))
      v24 = 1.0;
    else
      v24 = 0.0;
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", v250, 5, *(_QWORD *)&v16);
    if (!LOBYTE(v250[0]))
      v25 = 0.0;
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", v250, 6, *(_QWORD *)&v16);
    v31 = 1.0;
    if (!LOBYTE(v250[0]))
      v31 = 0.0;
    v173 = v31;
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", &v260, 16, *(_QWORD *)&v16);
    objc_msgSend(v29, "getRedValue:greenValue:blueValue:fromParm:atFxTime:", &v271, (char *)&v271 + 8, &v272, 17, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v258, 18, *(_QWORD *)&v16);
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", (char *)&v260 + 1, 7, *(_QWORD *)&v16);
    objc_msgSend(v29, "getIntValue:fromParm:atFxTime:", v262, 12, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v266, 10, *(_QWORD *)&v16);
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", &v259, 27, *(_QWORD *)&v16);
    objc_msgSend(v29, "getRedValue:greenValue:blueValue:alphaValue:fromParm:atFxTime:", &v273, (char *)&v273 + 8, v274, &v274[1], 15, *(_QWORD *)&v16);
    objc_msgSend(v29, "getBoolValue:fromParm:atFxTime:", (char *)&v259 + 1, 23, *(_QWORD *)&v16);
    objc_msgSend(v29, "getFloatValue:fromParm:atFxTime:", &v264, 24, *(_QWORD *)&v16);
    v21 = v267;
    v26 = v260;
  }
  v267 = v21 / 100.0;
  if (v26)
  {
    v32 = 128.0;
  }
  else
  {
    v271 = 0uLL;
    v32 = 1.0;
    *(_QWORD *)&v272 = 0;
  }
  *((double *)&v272 + 1) = v32;
  if (a10)
    v266 = v266 * 0.5 + 0.5;
  v177 = 0;
  v33 = v261;
  v34 = v261 == 2;
  v181 = 0.0;
  if ((v262[1] - 5) >= 2 && v262[1] != 11)
  {
    v35 = v262[1] == 7 || v261 == 1;
    v177 = v35;
    v181 = v24;
  }
  objc_msgSend(a5, "bounds");
  v183 = v36;
  v38 = v37;
  v257[0] = v39;
  v257[1] = v40;
  v257[2] = v36;
  v257[3] = v37;
  if (a1)
  {
    objc_msgSend(a1, "getPixelTransformForImage:", a5);
    objc_msgSend(a1, "getInversePixelTransformForImage:", a5);
  }
  else
  {
    v256 = 0u;
    v255 = 0u;
    v254 = 0u;
    v253 = 0u;
    v252 = 0u;
    v251 = 0u;
    memset(v250, 0, sizeof(v250));
    memset(v249, 0, sizeof(v249));
  }
  v247[1] = 0;
  v247[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v248 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v250, v257, (uint64_t)v247);
  v46 = v248;
  v179 = *((double *)&v251 + 1);
  if ((a10 & 1) == 0)
  {
    v47 = (void *)objc_msgSend(a2, "apiForProtocol:", &unk_1EF0A7DB0);
    objc_msgSend(v47, "durationFxTimeForEffect:", v245);
    objc_msgSend(v47, "frameDuration:", v244);
    v48 = *a8 - *(float *)&FracturedUtils::_frameTimeOffset;
    if (v48 < 0.0)
      v48 = 0.0;
    v49 = *(double *)v244 * v48 / *(double *)v245;
    if (v49 > 1.0)
      v49 = 1.0;
    a9 = fmax(v49, 0.0);
    *(float *)&v50 = *a8;
    FracturedUtils::_lastFrameTime = v50;
  }
  v51 = (HGFractured *)HGObject::operator new(0x1C0uLL);
  HGFractured::HGFractured(v51);
  if (a10)
  {
    *(_QWORD *)&v245[0] = 0;
    objc_msgSend(a1, "convertTimeFraction:toLocal:andDerivative:atTime:", v245, 0, *(_QWORD *)&v16, a9);
    a9 = *(double *)v245;
  }
  if (a6)
  {
    objc_msgSend(a6, "heliumRef");
    if (a1)
    {
LABEL_48:
      v52 = a6;
      objc_msgSend(a1, "getPixelTransformForImage:", a6);
      objc_msgSend(a1, "getInversePixelTransformForImage:", a6);
      goto LABEL_51;
    }
  }
  else
  {
    v246 = 0;
    if (a1)
      goto LABEL_48;
  }
  memset(v245, 0, sizeof(v245));
  memset(v244, 0, sizeof(v244));
  v52 = a6;
LABEL_51:
  objc_msgSend(v52, "bounds");
  v55 = v54;
  v56 = v53;
  v57 = v54 * 0.5;
  v58 = 1.0;
  v233 = 0;
  if (v179 < 0.0)
    v58 = -1.0;
  v232 = 0x3FF0000000000000uLL;
  v234 = v57;
  v180 = v58;
  v235 = xmmword_1B304EEE0;
  v236 = 0;
  v237 = v58 * (v53 * 0.5);
  v239 = 0;
  v238 = 0;
  v241 = 0u;
  v242 = 0u;
  v240 = 0x3FF0000000000000;
  v243 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)v245, &v232, (uint64_t)v225);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v225, v244, (uint64_t)&v226);
  FxSupport::makeHeliumXForm((double *)&v226, (uint64_t *)&v246, 1, 0, &v212);
  v59 = v212;
  if (v246 == (HGCrop *)v212)
  {
    if (v246)
      (*(void (**)(void))(*(_QWORD *)v246 + 24))();
  }
  else
  {
    if (v246)
    {
      (*(void (**)(void))(*(_QWORD *)v246 + 24))();
      v59 = v212;
    }
    v246 = (HGCrop *)v59;
  }
  v60 = a9;
  v224 = 0;
  v174 = v25;
  if (!a10)
  {
    (*(void (**)(HGFractured *, _QWORD, HGCrop *))(*(_QWORD *)v51 + 120))(v51, 0, v246);
    if (v181 != 0.0)
      (*(void (**)(HGFractured *, uint64_t, HGCrop *, double))(*(_QWORD *)v51 + 120))(v51, 1, v246, v181);
    if (v177)
    {
      v62 = 0;
      v63 = v266 * 0.5;
      v64 = v266 - v266 * v60;
      if (v266 * v60 < v63)
        v64 = v266 * v60;
      v60 = v64 + v64;
    }
    else
    {
      v62 = 0;
      if (v33 == 2)
        v60 = 1.0 - v60;
    }
    goto LABEL_139;
  }
  if (a7)
  {
    objc_msgSend(a7, "heliumRef");
    v61 = v226;
    if (v224 == (HGCrop *)v226)
    {
      if ((_QWORD)v226)
        (*(void (**)(void))(*(_QWORD *)v226 + 24))();
    }
    else
    {
      if (v224)
      {
        (*(void (**)(HGCrop *))(*(_QWORD *)v224 + 24))(v224);
        v61 = v226;
      }
      v224 = (HGCrop *)v61;
    }
  }
  if (a1)
  {
    objc_msgSend(a1, "getPixelTransformForImage:", a7);
    objc_msgSend(a1, "getInversePixelTransformForImage:", a7);
  }
  else
  {
    v230 = 0u;
    memset(v231, 0, sizeof(v231));
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    memset(v225, 0, sizeof(v225));
  }
  objc_msgSend(a7, "bounds");
  v66 = v65;
  v68 = v67;
  v213 = 0;
  v212 = 0x3FF0000000000000uLL;
  v214 = v65 * 0.5;
  v215 = xmmword_1B304EEE0;
  v216 = 0;
  v217 = v180 * (v67 * 0.5);
  v219 = 0;
  v218 = 0;
  v221 = 0u;
  v222 = 0u;
  v220 = 0x3FF0000000000000;
  v223 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v226, &v212, (uint64_t)&v188);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v188, v225, (uint64_t)&v200);
  FxSupport::makeHeliumXForm((double *)&v200, (uint64_t *)&v224, 1, 0, v186);
  v69 = v186[0];
  if (v224 == (HGCrop *)v186[0])
  {
    if (v224)
      (*(void (**)(void))(*(_QWORD *)v224 + 24))();
  }
  else
  {
    if (v224)
    {
      (*(void (**)(void))(*(_QWORD *)v224 + 24))();
      v69 = v186[0];
    }
    v224 = (HGCrop *)v69;
  }
  v201 = 0;
  v200 = 0x3FF0000000000000uLL;
  v202 = (v183 - v55) * 0.5;
  v203 = xmmword_1B304EEE0;
  v204 = 0;
  v205 = v180 * ((v38 - v56) * 0.5);
  v207 = 0;
  v206 = 0;
  v209 = 0u;
  v210 = 0u;
  v208 = 0x3FF0000000000000;
  v211 = 0x3FF0000000000000;
  v189 = 0;
  v188 = 0x3FF0000000000000uLL;
  v190 = (v183 - v66) * 0.5;
  v191 = xmmword_1B304EEE0;
  v192 = 0;
  v193 = v180 * ((v38 - v68) * 0.5);
  v194 = 0;
  v195 = 0;
  v198 = 0u;
  v197 = 0u;
  v196 = 0x3FF0000000000000;
  v199 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)v245, &v200, (uint64_t)v185);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v185, v244, (uint64_t)v186);
  FxSupport::makeHeliumXForm((double *)v186, (uint64_t *)&v246, 1, 0, &v187);
  v70 = v187;
  if (v246 == (HGCrop *)v187)
  {
    if (v246)
      (*(void (**)(void))(*(_QWORD *)v246 + 24))();
  }
  else
  {
    if (v246)
    {
      (*(void (**)(void))(*(_QWORD *)v246 + 24))();
      v70 = v187;
    }
    v246 = (HGCrop *)v70;
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v226, &v188, (uint64_t)v185);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v185, v225, (uint64_t)v186);
  FxSupport::makeHeliumXForm((double *)v186, (uint64_t *)&v224, 1, 0, &v187);
  v71 = v187;
  if (v224 == (HGCrop *)v187)
  {
    if (v224)
      (*(void (**)(void))(*(_QWORD *)v224 + 24))();
  }
  else
  {
    if (v224)
    {
      (*(void (**)(void))(*(_QWORD *)v224 + 24))();
      v71 = v187;
    }
    v224 = (HGCrop *)v71;
  }
  if (objc_msgSend(a1, "isFrontGap"))
  {
    v72 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v72);
    (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v72 + 96))(v72, 0, 0.0, 0.0, 0.0, 1.0);
    v73 = (HGCrop *)HGObject::operator new(0x1A0uLL);
    HGCrop::HGCrop(v73);
    v74 = v183;
    v75 = v38;
    v77 = HGRectMake4f(v76, 0.0, 0.0, v74, v75);
    v79 = v78;
    (*(void (**)(HGCrop *, _QWORD, HGSolidColor *))(*(_QWORD *)v73 + 120))(v73, 0, v72);
    (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v73 + 96))(v73, 0, (float)(int)v77, (float)SHIDWORD(v77), (float)(int)v79, (float)SHIDWORD(v79));
    if (v246 != v73)
    {
      if (v246)
        (*(void (**)(void))(*(_QWORD *)v246 + 24))();
      v246 = v73;
      (*(void (**)(HGCrop *))(*(_QWORD *)v73 + 16))(v73);
    }
    (*(void (**)(HGCrop *))(*(_QWORD *)v73 + 24))(v73);
    v34 = v33 == 2 || v177;
    (*(void (**)(HGSolidColor *))(*(_QWORD *)v72 + 24))(v72);
    v177 = 0;
  }
  if (objc_msgSend(a1, "isEndGap"))
  {
    v80 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v80);
    (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v80 + 96))(v80, 0, 0.0, 0.0, 0.0, 1.0);
    v81 = (HGCrop *)HGObject::operator new(0x1A0uLL);
    HGCrop::HGCrop(v81);
    v82 = v183;
    v83 = v38;
    v85 = HGRectMake4f(v84, 0.0, 0.0, v82, v83);
    v87 = v86;
    (*(void (**)(HGCrop *, _QWORD, HGSolidColor *))(*(_QWORD *)v81 + 120))(v81, 0, v80);
    (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v81 + 96))(v81, 0, (float)(int)v85, (float)SHIDWORD(v85), (float)(int)v87, (float)SHIDWORD(v87));
    if (v224 != v81)
    {
      if (v224)
        (*(void (**)(void))(*(_QWORD *)v224 + 24))();
      v224 = v81;
      (*(void (**)(HGCrop *))(*(_QWORD *)v81 + 16))(v81);
    }
    (*(void (**)(HGCrop *))(*(_QWORD *)v81 + 24))(v81);
    (*(void (**)(HGSolidColor *))(*(_QWORD *)v80 + 24))(v80);
LABEL_126:
    v93 = (uint64_t)v246;
    if (!v34)
      goto LABEL_133;
    v60 = 1.0 - v60;
    v246 = 0;
    if (v224)
    {
      v246 = v224;
      v224 = 0;
      if (!v93)
        goto LABEL_133;
    }
    else if (!v93)
    {
      goto LABEL_133;
    }
    v224 = (HGCrop *)v93;
LABEL_133:
    (*(void (**)(HGFractured *, _QWORD))(*(_QWORD *)v51 + 120))(v51, 0);
    v94.n128_f64[0] = v181;
    if (v181 != 0.0)
      (*(void (**)(HGFractured *, uint64_t, HGCrop *, double))(*(_QWORD *)v51 + 120))(v51, 1, v246, v181);
    if ((v262[1] - 5) > 8)
      v95 = 2;
    else
      v95 = dword_1B30502D0[v262[1] - 5];
    (*(void (**)(HGFractured *, uint64_t, HGCrop *, __n128))(*(_QWORD *)v51 + 120))(v51, v95, v224, v94);
    v62 = 0;
LABEL_139:
    v92 = 0.0;
    goto LABEL_140;
  }
  if (!v177)
    goto LABEL_126;
  v88 = 1.0;
  v89 = 1.0 - v266;
  if (v266 <= v60)
    v90 = 1.0;
  else
    v90 = v60 / v266;
  if (v89 < v60)
    v88 = 1.0 - (v60 - v89) / (1.0 - v89);
  if (v262[1] == 7 || v262[1] == 16 || (_BYTE)v259)
    v88 = -v88;
  (*(void (**)(HGFractured *, _QWORD, HGCrop *))(*(_QWORD *)v51 + 120))(v51, 0, v246);
  v91 = pow(fabs(v88), 1.04999995);
  if (v88 >= 0.0)
    v92 = v91;
  else
    v92 = -v91;
  v60 = pow(v90, 0.949999988);
  v62 = 1;
  (*(void (**)(HGFractured *, uint64_t, HGCrop *))(*(_QWORD *)v51 + 120))(v51, 1, v224);
LABEL_140:
  v96 = *(double *)&v46;
  v178 = v38;
  if (v96 == 0.0 || (v97 = *((double *)&v46 + 1), v97 == 0.0))
  {
    v100 = 0.0;
    v101 = v262[1];
    goto LABEL_157;
  }
  if (v262[0] == 4)
  {
    v98 = 50.0;
    v99 = 100.0;
  }
  else
  {
    if (v262[0] != 6)
    {
      v156 = v270 / 100.0 * 0.6;
      v157 = v55 * (float)((float)(v156 * v156) * 0.5) + 2.0;
      v158 = v263 * (v56 * v157 / v55);
      v103 = 1.0;
      v159 = v56;
      v104 = fminf(fmaxf(v158, 1.0), v159);
      if (v262[1] != 13)
      {
        if (v262[1] == 16 || (v160 = v55, v103 = fminf(fmaxf(v157, 1.0), v160), v262[1] == 15))
          v104 = 1.0;
      }
      goto LABEL_148;
    }
    v98 = 40.0;
    v99 = 50.0;
  }
  v102 = v270 / 100.0;
  v103 = (float)(v99 * v102) + 1.0;
  v104 = v263 * (float)(v98 * v102) + 1.0;
LABEL_148:
  HGFractured::Effect::SetOriginPoint((uint64_t)a3, -*(float *)(a4 + 152), -*(float *)(a4 + 156));
  HGFractured::Effect::SetImpulse((uint64_t)a3, *(float *)(a4 + 160), *(float *)(a4 + 164));
  v105 = *(double *)&v46;
  v106 = *((float *)&v46 + 2);
  if ((a10 & 1) == 0)
  {
    v105 = (float)(unint64_t)objc_msgSend(a6, "width");
    v106 = (float)(unint64_t)objc_msgSend(a6, "height");
  }
  v107 = HGRectMake4i(0, 0, (int)v96, (int)v97);
  v109 = v108;
  *(_QWORD *)&v276.var0 = v107;
  *(_QWORD *)&v276.var2 = v109;
  HGFractured::Effect::SetRect((uint64_t)a3, v276);
  v110 = HGRectMake4i(0, 0, (int)v105, (int)v106);
  v112 = v111;
  *(_QWORD *)&v277.var0 = v110;
  *(_QWORD *)&v277.var2 = v112;
  HGFractured::Effect::SetImageRect((uint64_t)a3, v277);
  HGFractured::Effect::SetSubdivide(a3, v103, v104);
  v101 = v262[1];
  v113 = (v262[1] != 11) & ~vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v262[1]), (int32x4_t)xmmword_1B30502C0)));
  if ((v262[1] & 0xFFFFFFF7) == 4)
    v113 = 0;
  if (v173 == 0.0)
    v113 = 0;
  if ((v113 & 1) != 0 || (v100 = 0.0, v262[1] == 14))
    v100 = v258 * (float)(fmaxf(v103, v104) * 5.0);
LABEL_157:
  v114 = v101 - 5;
  v115 = 0.0;
  if (((0x47u >> v114) & 1) == 0)
    v115 = v175;
  if (v114 >= 7)
    v116 = v175;
  else
    v116 = v115;
  v117 = v265;
  HGFractured::Effect::SetDelay((uint64_t)a3, v117);
  HGFractured::Effect::SetMode((uint64_t)a3, v262[1]);
  v118 = v267;
  HGFractured::Effect::SetExtrude((uint64_t)a3, v118);
  HGFractured::Effect::SetDual((uint64_t)a3, v62, v181 != 0.0);
  HGFractured::Effect::SetLeftHand((uint64_t)a3, v179 < 0.0);
  v119 = v269;
  v120 = v268;
  HGFractured::Effect::SetScale((uint64_t)a3, v119, v120);
  v121 = v116;
  if (v262[0] > 6u)
  {
    HGFractured::Effect::SetShape((uint64_t)a3, 4, v121);
    NSLog(CFSTR("WARNING: Fractured Effect: Bad face shape option selected"));
  }
  else
  {
    HGFractured::Effect::SetShape((uint64_t)a3, dword_1B30502F4[v262[0]], v121);
  }
  v122 = fabs(v60);
  if (v122 == 1.0)
    v123 = 0.0;
  else
    v123 = 1.0;
  v124 = fabs(v92);
  if (v124 == 1.0)
    v125 = 0.0;
  else
    v125 = 1.0;
  if (HIBYTE(v260))
  {
    v126 = v174;
    if (v262[1] <= 0x10u)
    {
      if (((1 << SLOBYTE(v262[1])) & 0x1F71F) != 0)
      {
        v127 = v122;
        v128 = fminf(fmaxf(v127, 0.0), 1.0);
        v123 = 1.0 - (float)((float)(v128 * v128) * (float)(3.0 - (float)(v128 + v128)));
        v129 = v124;
        v130 = fminf(fmaxf(v129, 0.0), 1.0);
        v125 = 1.0 - (float)((float)(v130 * v130) * (float)(3.0 - (float)(v130 + v130)));
      }
      else if (((1 << SLOBYTE(v262[1])) & 0x840) != 0)
      {
        v161 = v122;
        v162 = v161 + -0.5;
        if (v60 >= 0.5)
          v163 = v162 + v162;
        else
          v163 = v162 * -2.0;
        v164 = fminf(fmaxf(v163, 0.0), 1.0);
        v123 = (float)((float)((float)(v164 * v164) * (float)(3.0 - (float)(v164 + v164))) * 0.5) + 0.5;
        v165 = v124;
        v166 = v165 + -0.5;
        if (v92 >= 0.5)
          v167 = v166 + v166;
        else
          v167 = v166 * -2.0;
        v168 = fminf(fmaxf(v167, 0.0), 1.0);
        v125 = (float)((float)((float)(v168 * v168) * (float)(3.0 - (float)(v168 + v168))) * 0.5) + 0.5;
      }
    }
  }
  else
  {
    v126 = v174;
  }
  (*(void (**)(HGFractured *, uint64_t))(*(_QWORD *)v51 + 576))(v51, 8);
  HGFractured::SetEffect((uint64_t)v51, (uint64_t)a3);
  HGFractured::SetLighting((uint64_t)v51, v126 != 0.0);
  v131 = v60;
  v132 = v92;
  (*(void (**)(HGFractured *, _QWORD, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 0, v131, v123, v132, v125);
  v133 = *(double *)&v273;
  v134 = *((double *)&v273 + 1);
  v135 = v274[0];
  v136 = v274[1];
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 1, v133, v134, v135, v136);
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 2, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 4, 0.0, 0.0, 1.0, 1.0);
  v137 = *(double *)&v271;
  v138 = *((double *)&v271 + 1);
  v139 = *(double *)&v272;
  v140 = *((double *)&v272 + 1);
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 5, v137, v138, v139, v140);
  v141 = v100;
  (*(void (**)(HGFractured *, uint64_t, float, float, float, float))(*(_QWORD *)v51 + 96))(v51, 6, -1.0, 1.0, 1.0, v141);
  *(_QWORD *)&v200 = v51;
  (*(void (**)(HGFractured *))(*(_QWORD *)v51 + 16))(v51);
  if (HIBYTE(v259))
  {
    v142 = v264;
    v143 = (void *)objc_msgSend(a2, "apiForProtocol:", &unk_1EF0A3D78);
    if (v143)
    {
      objc_msgSend(v143, "blendingGamma");
      v145 = v144;
    }
    else
    {
      v145 = 1.0;
    }
    v146 = v142;
    v147 = v146;
    if (v60 >= v146)
    {
      if (a10)
      {
        if (v62)
          v149 = v60;
        else
          v149 = v92;
        v150 = (uint64_t)v224;
        if (v224)
          (*(void (**)(HGCrop *))(*(_QWORD *)v224 + 16))(v224);
        v151 = 1.0 - v142;
        v152 = v149;
        if (v152 > v151)
        {
          v153 = (float)(1.0 - v152) / (float)(1.0 - v151);
          if (v62)
            v154 = 1.0 - v153;
          else
            v154 = v153;
          v155 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
          HGHWBlendFlipped::HGHWBlendFlipped(v155);
          (*(void (**)(HGHWBlendFlipped *, _QWORD, uint64_t))(*(_QWORD *)v155 + 120))(v155, 0, v150);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, _QWORD))(*(_QWORD *)v155 + 120))(v155, 1, v200);
          (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v155 + 96))(v155, 0, 8.0, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v155 + 96))(v155, 1, v154, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v155 + 96))(v155, 5, v145, 0.0, 0.0, 0.0);
          if ((HGHWBlendFlipped *)v200 != v155)
          {
            if ((_QWORD)v200)
              (*(void (**)(void))(*(_QWORD *)v200 + 24))();
            *(_QWORD *)&v200 = v155;
            (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v155 + 16))(v155);
          }
          (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v155 + 24))(v155);
        }
        if (v150)
          (*(void (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150);
      }
    }
    else
    {
      v148 = (uint64_t)v246;
      if (v246)
        (*(void (**)(HGCrop *))(*(_QWORD *)v246 + 16))(v246);
      if ((a10 & 1) == 0)
      {
        *(_QWORD *)&v227 = 0;
        v226 = 0x3FF0000000000000uLL;
        *((double *)&v227 + 1) = v183 * 0.5;
        v228 = xmmword_1B304EEE0;
        *(_QWORD *)&v229 = 0;
        *((double *)&v229 + 1) = v178 * 0.5 * v180;
        v230 = 0uLL;
        memset((char *)v231 + 8, 0, 32);
        *(_QWORD *)&v231[0] = 0x3FF0000000000000;
        *((_QWORD *)&v231[2] + 1) = 0x3FF0000000000000;
        PCMatrix44Tmpl<double>::operator*((uint64_t)v250, &v226, (uint64_t)&v212);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v212, v249, (uint64_t)v225);
        if (a6)
          objc_msgSend(a6, "heliumRef");
        else
          v186[0] = 0;
        FxSupport::makeHeliumXForm((double *)v225, v186, 1, 0, &v188);
        if (v148 == (_QWORD)v188)
        {
          if (v148)
            (*(void (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148);
        }
        else
        {
          if (v148)
            (*(void (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148);
          v148 = v188;
          *(_QWORD *)&v188 = 0;
        }
        if (v186[0])
          (*(void (**)(uint64_t))(*(_QWORD *)v186[0] + 24))(v186[0]);
      }
      v169 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
      HGHWBlendFlipped::HGHWBlendFlipped(v169);
      (*(void (**)(HGHWBlendFlipped *, _QWORD, uint64_t))(*(_QWORD *)v169 + 120))(v169, 0, v148);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, _QWORD))(*(_QWORD *)v169 + 120))(v169, 1, v200);
      (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v169 + 96))(v169, 0, 8.0, 0.0, 0.0, 0.0);
      v170 = 1.0 - v60 / v147;
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v169 + 96))(v169, 1, v170, 0.0, 0.0, 0.0);
      (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v169 + 96))(v169, 5, v145, 0.0, 0.0, 0.0);
      if ((HGHWBlendFlipped *)v200 != v169)
      {
        if ((_QWORD)v200)
          (*(void (**)(void))(*(_QWORD *)v200 + 24))();
        *(_QWORD *)&v200 = v169;
        (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v169 + 16))(v169);
      }
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v169 + 24))(v169);
      if (v148)
        (*(void (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148);
    }
  }
  *(_QWORD *)&v227 = 0;
  v226 = 0x3FF0000000000000uLL;
  *((double *)&v227 + 1) = v183 * -0.5;
  v228 = xmmword_1B304EEE0;
  *(_QWORD *)&v229 = 0;
  *((double *)&v229 + 1) = v178 * -0.5 * v180;
  v230 = 0uLL;
  memset((char *)v231 + 8, 0, 32);
  *(_QWORD *)&v231[0] = 0x3FF0000000000000;
  *((_QWORD *)&v231[2] + 1) = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::operator*((uint64_t)v250, &v226, (uint64_t)&v212);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v212, v249, (uint64_t)v225);
  FxSupport::makeHeliumXForm((double *)v225, (uint64_t *)&v200, 1, 0, &v188);
  v171 = v188;
  if ((_QWORD)v200 == (_QWORD)v188)
  {
    if ((_QWORD)v200)
      (*(void (**)(void))(*(_QWORD *)v200 + 24))();
  }
  else
  {
    if ((_QWORD)v200)
    {
      (*(void (**)(void))(*(_QWORD *)v200 + 24))();
      v171 = v188;
    }
    *(_QWORD *)&v200 = v171;
  }
  objc_msgSend(a5, "setHeliumRef:", &v200);
  if ((_QWORD)v200)
    (*(void (**)(_QWORD))(*(_QWORD *)v200 + 24))(v200);
  if (v224)
    (*(void (**)(HGCrop *))(*(_QWORD *)v224 + 24))(v224);
  if (v246)
    (*(void (**)(HGCrop *))(*(_QWORD *)v246 + 24))(v246);
  (*(void (**)(HGFractured *))(*(_QWORD *)v51 + 24))(v51);
  return 1;
}

void sub_1B2802DC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t PCMatrix44Tmpl<double>::operator*@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const double *v20;
  double *v21;
  float64x2x4_t v22;
  float64x2x4_t v23;

  v3 = 0;
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  v4 = *((double *)a2 + 15);
  v5 = *(__int128 *)((char *)a2 + 88);
  v6 = *(__int128 *)((char *)a2 + 56);
  v7 = *(__int128 *)((char *)a2 + 24);
  v9 = a2[6];
  v8 = a2[7];
  v11 = a2[4];
  v10 = a2[5];
  v13 = a2[2];
  v12 = a2[3];
  v15 = *a2;
  v14 = a2[1];
  v16 = *(__int128 *)((char *)a2 + 104);
  v17 = *(__int128 *)((char *)a2 + 72);
  v18 = *(__int128 *)((char *)a2 + 40);
  v19 = *(__int128 *)((char *)a2 + 8);
  do
  {
    v20 = (const double *)(result + v3);
    v22 = vld4q_f64(v20);
    v23.val[0] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v15), vmulq_n_f64(v22.val[1], *(double *)&v13)), vmulq_n_f64(v22.val[2], *(double *)&v11)), vmulq_n_f64(v22.val[3], *(double *)&v9));
    v23.val[1] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v19), vmulq_n_f64(v22.val[1], *(double *)&v18)), vmulq_n_f64(v22.val[2], *(double *)&v17)), vmulq_n_f64(v22.val[3], *(double *)&v16));
    v23.val[2] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v14), vmulq_n_f64(v22.val[1], *(double *)&v12)), vmulq_n_f64(v22.val[2], *(double *)&v10)), vmulq_n_f64(v22.val[3], *(double *)&v8));
    v23.val[3] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v22.val[0], *(double *)&v7), vmulq_n_f64(v22.val[1], *(double *)&v6)), vmulq_n_f64(v22.val[2], *(double *)&v5)), vmulq_n_f64(v22.val[3], v4));
    v21 = (double *)(a3 + v3);
    vst4q_f64(v21, v23);
    v3 += 64;
  }
  while (v3 != 128);
  return result;
}

void sub_1B28036EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void FracturedUtils::FracturedFXPoolItem::~FracturedFXPoolItem(id *this)
{
  id v2;

  v2 = *this;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 24))(v2);

}

id FracturedUtils::FracturedFXPoolItem::UpdateLastUsedTime(FracturedUtils::FracturedFXPoolItem *this)
{
  void *v2;
  id result;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)

  result = (id)objc_msgSend(MEMORY[0x1E0C99D68], "date");
  *((_QWORD *)this + 1) = result;
  return result;
}

__n128 FracturedUtils::FracturedParams::FracturedParams(FracturedUtils::FracturedParams *this)
{
  __n128 result;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = 1114636288;
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)((char *)this + 12) = 0x101010100000001;
  *(_QWORD *)((char *)this + 20) = 0x3F80000000000000;
  *((_DWORD *)this + 7) = 2;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 4) = _D0;
  *((_BYTE *)this + 72) = 1;
  *((_QWORD *)this + 14) = _D0;
  *((_BYTE *)this + 120) = 1;
  *(_QWORD *)((char *)this + 124) = 0x13F800000;
  *((_BYTE *)this + 132) = 0;
  *((_QWORD *)this + 17) = 1036831949;
  *((_BYTE *)this + 144) = 0;
  *((_DWORD *)this + 37) = 1065353216;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)((char *)this + 40) = _Q0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B304F7B0;
  __asm { FMOV            V0.2D, #1.0 }
  *((__n128 *)this + 5) = result;
  *((__n128 *)this + 6) = result;
  return result;
}

void sub_1B2804904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  RandMersenne::~RandMersenne((RandMersenne *)&a9);
  v11 = *(void **)(v9 - 136);
  if (v11)
  {
    *(_QWORD *)(v9 - 128) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void sub_1B28056F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B2805A78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

double PAEKeyerDrawAlpha::renderPieEdgeSegment_GL@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, float *a3@<X3>, const char ***a4@<X4>, double *a5@<X8>)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  double result;

  HGGLNode::hglBegin(*a4, 5);
  if ((int)((a1[1] - *a1) >> 3) < 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (!v11)
      {
        v10.n128_u32[0] = 0;
        HGGLNode::hglColor4f((HGGLNode *)*a4, v10, 0.0, 0.0, 1.0);
        HGGLNode::hglVertex2f((float32x4_t **)*a4, *a3 * 256.0, a3[1] * 256.0);
      }
      v10.n128_u32[0] = 0;
      HGGLNode::hglColor4f((HGGLNode *)*a4, v10, 0.0, 0.0, 1.0);
      HGGLNode::hglVertex2f((float32x4_t **)*a4, *(float *)(*a2 + v11) * 256.0, *(float *)(*a2 + v11 + 4) * 256.0);
      v13.n128_u32[0] = 1.0;
      HGGLNode::hglColor4f((HGGLNode *)*a4, v13, 1.0, 1.0, 1.0);
      HGGLNode::hglVertex2f((float32x4_t **)*a4, *(float *)(*a1 + v11) * 256.0, *(float *)(*a1 + v11 + 4) * 256.0);
      ++v12;
      v11 += 8;
    }
    while (v12 < (int)((a1[1] - *a1) >> 3));
  }
  v10.n128_u32[0] = 0;
  HGGLNode::hglColor4f((HGGLNode *)*a4, v10, 0.0, 0.0, 1.0);
  HGGLNode::hglVertex2f((float32x4_t **)*a4, *(float *)(*a2 + 8 * v12) * 256.0, *(float *)(*a2 + 8 * v12 + 4) * 256.0);
  HGGLNode::hglEnd((HGRasterizer **)*a4);
  result = *(double *)(*a2 + 8 * v12);
  *a5 = result;
  return result;
}

void PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float32x2_t *a7@<X7>, double *a8@<X8>, __n128 a9@<Q0>, float a10@<S1>, float32x2_t *a11, float *a12, OMPie *a13, float32x2_t **a14, int a15, const char ***a16)
{
  float v20;
  float32x2_t *v22;
  float32x2_t v23;
  float32x2_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float32x2_t *v30;
  float32x2_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float32x2_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  __int32 v45;
  __int32 v46;
  void **v47;
  void **v48;
  __int32 v49;
  __int32 v50;
  float32x2_t *v51;
  float32x2_t v52;
  float32x2_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  float32x2_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  __int32 v74;
  __int32 v75;
  float32x2_t *v76;
  float32x2_t *v77;
  __int32 v78;
  __int32 v79;
  const char **v80;
  double v81;
  __n128 v86;
  __n128 v87;
  const char **v88;
  float32x2_t v89;
  void *v90;
  float32x2_t *v91;
  float32x2_t *v92;
  void *__p;
  float32x2_t *v94;
  _QWORD v95[2];

  v20 = a9.n128_f32[0];
  v22 = 0;
  __p = 0;
  v94 = 0;
  a9.n128_u32[0] = 0;
  v95[0] = 0;
  do
  {
    v86 = a9;
    if (a15 == 2)
    {
      v23 = vadd_f32(*a2, vmul_n_f32(vsub_f32(*a4, *a2), a9.n128_f32[0]));
      if ((unint64_t)v22 >= v95[0])
      {
        v24 = (float32x2_t *)__p;
        v38 = ((char *)v22 - (_BYTE *)__p) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v40 = v95[0] - (_QWORD)__p;
        if ((uint64_t)(v95[0] - (_QWORD)__p) >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v39;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v28);
          v24 = (float32x2_t *)__p;
          v22 = v94;
        }
        else
        {
          v29 = 0;
        }
        v44 = &v29[8 * v38];
        *(float32x2_t *)v44 = v23;
        v37 = (float32x2_t *)(v44 + 8);
        while (v22 != v24)
        {
          v45 = v22[-1].i32[0];
          --v22;
          *((_DWORD *)v44 - 2) = v45;
          v44 -= 8;
          *((_DWORD *)v44 + 1) = v22->i32[1];
        }
        goto LABEL_51;
      }
LABEL_24:
      *v22 = v23;
      v37 = v22 + 1;
LABEL_53:
      v94 = v37;
      v22 = v37;
      a9 = v86;
      goto LABEL_65;
    }
    if (a15 != 1)
    {
      if (!a15)
      {
        v23 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a1, *a3), a9.n128_f32[0]));
        if ((unint64_t)v22 >= v95[0])
        {
          v24 = (float32x2_t *)__p;
          v25 = ((char *)v22 - (_BYTE *)__p) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v27 = v95[0] - (_QWORD)__p;
          if ((uint64_t)(v95[0] - (_QWORD)__p) >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v28);
            v24 = (float32x2_t *)__p;
            v22 = v94;
          }
          else
          {
            v29 = 0;
          }
          v44 = &v29[8 * v25];
          *(float32x2_t *)v44 = v23;
          v37 = (float32x2_t *)(v44 + 8);
          while (v22 != v24)
          {
            v46 = v22[-1].i32[0];
            --v22;
            *((_DWORD *)v44 - 2) = v46;
            v44 -= 8;
            *((_DWORD *)v44 + 1) = v22->i32[1];
          }
LABEL_51:
          __p = v44;
          v94 = v37;
          v95[0] = &v29[8 * v28];
          if (v24)
            operator delete(v24);
          goto LABEL_53;
        }
        goto LABEL_24;
      }
      OMPie::getArcIn(a13, 1.0 - a9.n128_f32[0], (float *)&v90);
      v30 = v94;
      if ((unint64_t)v94 < v95[0])
        goto LABEL_26;
      v31 = (float32x2_t *)__p;
      v41 = ((char *)v94 - (_BYTE *)__p) >> 3;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v43 = v95[0] - (_QWORD)__p;
      if ((uint64_t)(v95[0] - (_QWORD)__p) >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v42;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v35);
        v31 = (float32x2_t *)__p;
        v30 = v94;
      }
      else
      {
        v36 = 0;
      }
      v47 = (void **)&v36[8 * v41];
      *v47 = v90;
      v48 = v47;
      while (v30 != v31)
      {
        v50 = v30[-1].i32[0];
        --v30;
        *((_DWORD *)v48-- - 2) = v50;
        *((_DWORD *)v48 + 1) = v30->i32[1];
      }
LABEL_62:
      v22 = (float32x2_t *)(v47 + 1);
      __p = v48;
      v94 = (float32x2_t *)(v47 + 1);
      v95[0] = &v36[8 * v35];
      if (v31)
        operator delete(v31);
      goto LABEL_64;
    }
    OMPie::getArcOut((float32x2_t **)a13, a9.n128_f32[0], (float32x2_t *)&v90);
    v30 = v94;
    if ((unint64_t)v94 >= v95[0])
    {
      v31 = (float32x2_t *)__p;
      v32 = ((char *)v94 - (_BYTE *)__p) >> 3;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v34 = v95[0] - (_QWORD)__p;
      if ((uint64_t)(v95[0] - (_QWORD)__p) >> 2 > v33)
        v33 = v34 >> 2;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v95, v35);
        v31 = (float32x2_t *)__p;
        v30 = v94;
      }
      else
      {
        v36 = 0;
      }
      v47 = (void **)&v36[8 * v32];
      *v47 = v90;
      v48 = v47;
      while (v30 != v31)
      {
        v49 = v30[-1].i32[0];
        --v30;
        *((_DWORD *)v48-- - 2) = v49;
        *((_DWORD *)v48 + 1) = v30->i32[1];
      }
      goto LABEL_62;
    }
LABEL_26:
    *v30 = (float32x2_t)v90;
    v22 = v30 + 1;
LABEL_64:
    a9 = v86;
    v94 = v22;
LABEL_65:
    a9.n128_f32[0] = a9.n128_f32[0] + v20;
  }
  while (a9.n128_f32[0] <= 1.0001);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  if (a10 < 0.9999)
  {
    v51 = 0;
    a9.n128_f32[0] = a10;
    do
    {
      v87 = a9;
      if (a15 == 2)
      {
        v52 = vadd_f32(*a6, vmul_n_f32(vsub_f32(*a11, *a6), a9.n128_f32[0]));
        if (v51 >= v92)
        {
          v53 = (float32x2_t *)v90;
          v67 = ((char *)v51 - (_BYTE *)v90) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v69 = (char *)v92 - (_BYTE *)v90;
          if (((char *)v92 - (_BYTE *)v90) >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v68;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v57);
            v53 = (float32x2_t *)v90;
            v51 = v91;
          }
          else
          {
            v58 = 0;
          }
          v73 = &v58[8 * v67];
          *(float32x2_t *)v73 = v52;
          v66 = (float32x2_t *)(v73 + 8);
          while (v51 != v53)
          {
            v74 = v51[-1].i32[0];
            --v51;
            *((_DWORD *)v73 - 2) = v74;
            v73 -= 8;
            *((_DWORD *)v73 + 1) = v51->i32[1];
          }
          goto LABEL_117;
        }
      }
      else
      {
        if (a15 == 1)
        {
          OMPie::getArcOut(a14, a9.n128_f32[0], &v89);
          v59 = v91;
          if (v91 < v92)
            goto LABEL_92;
          v60 = (float32x2_t *)v90;
          v61 = ((char *)v91 - (_BYTE *)v90) >> 3;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v63 = (char *)v92 - (_BYTE *)v90;
          if (((char *)v92 - (_BYTE *)v90) >> 2 > v62)
            v62 = v63 >> 2;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v64);
            v60 = (float32x2_t *)v90;
            v59 = v91;
          }
          else
          {
            v65 = 0;
          }
          v76 = (float32x2_t *)&v65[8 * v61];
          *v76 = v89;
          v77 = v76;
          while (v59 != v60)
          {
            v78 = v59[-1].i32[0];
            --v59;
            v77[-1].i32[0] = v78;
            --v77;
            v77->i32[1] = v59->i32[1];
          }
          goto LABEL_128;
        }
        if (a15)
        {
          OMPie::getArcIn((OMPie *)a14, 1.0 - a9.n128_f32[0], (float *)&v89);
          v59 = v91;
          if (v91 < v92)
          {
LABEL_92:
            *v59 = v89;
            v51 = v59 + 1;
LABEL_130:
            a9 = v87;
            v91 = v51;
            goto LABEL_131;
          }
          v60 = (float32x2_t *)v90;
          v70 = ((char *)v91 - (_BYTE *)v90) >> 3;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v72 = (char *)v92 - (_BYTE *)v90;
          if (((char *)v92 - (_BYTE *)v90) >> 2 > v71)
            v71 = v72 >> 2;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v71;
          if (v64)
          {
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v64);
            v60 = (float32x2_t *)v90;
            v59 = v91;
          }
          else
          {
            v65 = 0;
          }
          v76 = (float32x2_t *)&v65[8 * v70];
          *v76 = v89;
          v77 = v76;
          while (v59 != v60)
          {
            v79 = v59[-1].i32[0];
            --v59;
            v77[-1].i32[0] = v79;
            --v77;
            v77->i32[1] = v59->i32[1];
          }
LABEL_128:
          v51 = v76 + 1;
          v90 = v77;
          v91 = v76 + 1;
          v92 = (float32x2_t *)&v65[8 * v64];
          if (v60)
            operator delete(v60);
          goto LABEL_130;
        }
        v52 = vadd_f32(*a7, vmul_n_f32(vsub_f32(*a5, *a7), a9.n128_f32[0]));
        if (v51 >= v92)
        {
          v53 = (float32x2_t *)v90;
          v54 = ((char *)v51 - (_BYTE *)v90) >> 3;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v56 = (char *)v92 - (_BYTE *)v90;
          if (((char *)v92 - (_BYTE *)v90) >> 2 > v55)
            v55 = v56 >> 2;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v92, v57);
            v53 = (float32x2_t *)v90;
            v51 = v91;
          }
          else
          {
            v58 = 0;
          }
          v73 = &v58[8 * v54];
          *(float32x2_t *)v73 = v52;
          v66 = (float32x2_t *)(v73 + 8);
          while (v51 != v53)
          {
            v75 = v51[-1].i32[0];
            --v51;
            *((_DWORD *)v73 - 2) = v75;
            v73 -= 8;
            *((_DWORD *)v73 + 1) = v51->i32[1];
          }
LABEL_117:
          v90 = v73;
          v91 = v66;
          v92 = (float32x2_t *)&v58[8 * v57];
          if (v53)
            operator delete(v53);
          goto LABEL_119;
        }
      }
      *v51 = v52;
      v66 = v51 + 1;
LABEL_119:
      v91 = v66;
      v51 = v66;
      a9 = v87;
LABEL_131:
      a9.n128_f32[0] = a9.n128_f32[0] + a10;
    }
    while (a9.n128_f32[0] < 0.9999);
  }
  v80 = *a16;
  v88 = v80;
  if (v80)
    (*((void (**)(const char **))*v80 + 2))(v80);
  v81 = PAEKeyerDrawAlpha::renderPieEdgeSegment_GL(&__p, &v90, a12, &v88, a8);
  if (v80)
    (*((void (**)(const char **, double))*v80 + 3))(v80, v81);
  if (v90)
  {
    v91 = (float32x2_t *)v90;
    operator delete(v90);
  }
  if (__p)
  {
    v94 = (float32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_1B2806414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float32x2_t *a7@<X7>, double *a8@<X8>, __n128 a9@<Q0>, float a10@<S1>, float *a11, OMPie *a12, float32x2_t **a13, int a14, const char ***a15)
{
  float v19;
  float32x2_t *v21;
  float32x2_t v22;
  float32x2_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  float32x2_t *v29;
  float32x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  float32x2_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  __int32 v44;
  __int32 v45;
  void **v46;
  void **v47;
  __int32 v48;
  __int32 v49;
  float32x2_t *v50;
  float32x2_t v51;
  float32x2_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  float32x2_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  float32x2_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float32x2_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  __int32 v73;
  __int32 v74;
  __int32 v75;
  float32x2_t *v76;
  float32x2_t *v77;
  __int32 v78;
  const char **v79;
  double v80;
  __n128 v85;
  __n128 v86;
  const char **v87;
  float32x2_t v88;
  void *v89;
  float32x2_t *v90;
  float32x2_t *v91;
  void *__p;
  float32x2_t *v93;
  _QWORD v94[2];

  v19 = a9.n128_f32[0];
  v21 = 0;
  __p = 0;
  v93 = 0;
  a9.n128_u32[0] = 0;
  v94[0] = 0;
  do
  {
    v85 = a9;
    if (a14 == 2)
    {
      v22 = vadd_f32(*a2, vmul_n_f32(vsub_f32(*a4, *a2), a9.n128_f32[0]));
      if ((unint64_t)v21 >= v94[0])
      {
        v23 = (float32x2_t *)__p;
        v37 = ((char *)v21 - (_BYTE *)__p) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v39 = v94[0] - (_QWORD)__p;
        if ((uint64_t)(v94[0] - (_QWORD)__p) >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v38;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v27);
          v23 = (float32x2_t *)__p;
          v21 = v93;
        }
        else
        {
          v28 = 0;
        }
        v43 = &v28[8 * v37];
        *(float32x2_t *)v43 = v22;
        v36 = (float32x2_t *)(v43 + 8);
        while (v21 != v23)
        {
          v44 = v21[-1].i32[0];
          --v21;
          *((_DWORD *)v43 - 2) = v44;
          v43 -= 8;
          *((_DWORD *)v43 + 1) = v21->i32[1];
        }
        goto LABEL_51;
      }
LABEL_24:
      *v21 = v22;
      v36 = v21 + 1;
LABEL_53:
      v93 = v36;
      v21 = v36;
      a9 = v85;
      goto LABEL_65;
    }
    if (a14 != 1)
    {
      if (!a14)
      {
        v22 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a1, *a3), a9.n128_f32[0]));
        if ((unint64_t)v21 >= v94[0])
        {
          v23 = (float32x2_t *)__p;
          v24 = ((char *)v21 - (_BYTE *)__p) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v26 = v94[0] - (_QWORD)__p;
          if ((uint64_t)(v94[0] - (_QWORD)__p) >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v27);
            v23 = (float32x2_t *)__p;
            v21 = v93;
          }
          else
          {
            v28 = 0;
          }
          v43 = &v28[8 * v24];
          *(float32x2_t *)v43 = v22;
          v36 = (float32x2_t *)(v43 + 8);
          while (v21 != v23)
          {
            v45 = v21[-1].i32[0];
            --v21;
            *((_DWORD *)v43 - 2) = v45;
            v43 -= 8;
            *((_DWORD *)v43 + 1) = v21->i32[1];
          }
LABEL_51:
          __p = v43;
          v93 = v36;
          v94[0] = &v28[8 * v27];
          if (v23)
            operator delete(v23);
          goto LABEL_53;
        }
        goto LABEL_24;
      }
      OMPie::getArcIn(a12, 1.0 - a9.n128_f32[0], (float *)&v89);
      v29 = v93;
      if ((unint64_t)v93 < v94[0])
        goto LABEL_26;
      v30 = (float32x2_t *)__p;
      v40 = ((char *)v93 - (_BYTE *)__p) >> 3;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v42 = v94[0] - (_QWORD)__p;
      if ((uint64_t)(v94[0] - (_QWORD)__p) >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v41;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v34);
        v30 = (float32x2_t *)__p;
        v29 = v93;
      }
      else
      {
        v35 = 0;
      }
      v46 = (void **)&v35[8 * v40];
      *v46 = v89;
      v47 = v46;
      while (v29 != v30)
      {
        v49 = v29[-1].i32[0];
        --v29;
        *((_DWORD *)v47-- - 2) = v49;
        *((_DWORD *)v47 + 1) = v29->i32[1];
      }
LABEL_62:
      v21 = (float32x2_t *)(v46 + 1);
      __p = v47;
      v93 = (float32x2_t *)(v46 + 1);
      v94[0] = &v35[8 * v34];
      if (v30)
        operator delete(v30);
      goto LABEL_64;
    }
    OMPie::getArcOut((float32x2_t **)a12, a9.n128_f32[0], (float32x2_t *)&v89);
    v29 = v93;
    if ((unint64_t)v93 >= v94[0])
    {
      v30 = (float32x2_t *)__p;
      v31 = ((char *)v93 - (_BYTE *)__p) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v33 = v94[0] - (_QWORD)__p;
      if ((uint64_t)(v94[0] - (_QWORD)__p) >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v94, v34);
        v30 = (float32x2_t *)__p;
        v29 = v93;
      }
      else
      {
        v35 = 0;
      }
      v46 = (void **)&v35[8 * v31];
      *v46 = v89;
      v47 = v46;
      while (v29 != v30)
      {
        v48 = v29[-1].i32[0];
        --v29;
        *((_DWORD *)v47-- - 2) = v48;
        *((_DWORD *)v47 + 1) = v29->i32[1];
      }
      goto LABEL_62;
    }
LABEL_26:
    *v29 = (float32x2_t)v89;
    v21 = v29 + 1;
LABEL_64:
    a9 = v85;
    v93 = v21;
LABEL_65:
    a9.n128_f32[0] = a9.n128_f32[0] + v19;
  }
  while (a9.n128_f32[0] <= 1.0001);
  v89 = 0;
  v90 = 0;
  v91 = 0;
  if (a10 < 0.9999)
  {
    v50 = 0;
    a9.n128_f32[0] = a10;
    do
    {
      v86 = a9;
      if (a14 == 2)
      {
        v51 = vadd_f32(*a7, vmul_n_f32(vsub_f32(*a5, *a7), a9.n128_f32[0]));
        if (v50 >= v91)
        {
          v52 = (float32x2_t *)v89;
          v59 = ((char *)v50 - (_BYTE *)v89) >> 3;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v61 = (char *)v91 - (_BYTE *)v89;
          if (((char *)v91 - (_BYTE *)v89) >> 2 > v60)
            v60 = v61 >> 2;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v60;
          if (v56)
          {
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v56);
            v52 = (float32x2_t *)v89;
            v50 = v90;
          }
          else
          {
            v57 = 0;
          }
          v72 = &v57[8 * v59];
          *(float32x2_t *)v72 = v51;
          v62 = (float32x2_t *)(v72 + 8);
          while (v50 != v52)
          {
            v73 = v50[-1].i32[0];
            --v50;
            *((_DWORD *)v72 - 2) = v73;
            v72 -= 8;
            *((_DWORD *)v72 + 1) = v50->i32[1];
          }
          goto LABEL_121;
        }
      }
      else
      {
        if (a14 == 1)
        {
          OMPie::getArcOut(a13, a9.n128_f32[0], &v88);
          v58 = v90;
          if (v90 >= v91)
          {
            v66 = (float32x2_t *)v89;
            v67 = ((char *)v90 - (_BYTE *)v89) >> 3;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v69 = (char *)v91 - (_BYTE *)v89;
            if (((char *)v91 - (_BYTE *)v89) >> 2 > v68)
              v68 = v69 >> 2;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
              v70 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v70 = v68;
            if (v70)
            {
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v70);
              v66 = (float32x2_t *)v89;
              v58 = v90;
            }
            else
            {
              v71 = 0;
            }
            v76 = (float32x2_t *)&v71[8 * v67];
            *v76 = v88;
            v77 = v76;
            while (v58 != v66)
            {
              v78 = v58[-1].i32[0];
              --v58;
              v77[-1].i32[0] = v78;
              --v77;
              v77->i32[1] = v58->i32[1];
            }
            v50 = v76 + 1;
            v89 = v77;
            v90 = v76 + 1;
            v91 = (float32x2_t *)&v71[8 * v70];
            if (v66)
              operator delete(v66);
          }
          else
          {
            v90->i32[0] = v88.i32[0];
            v58->i32[1] = v88.i32[1];
            v50 = v58 + 1;
          }
          a9 = v86;
          v90 = v50;
          goto LABEL_131;
        }
        if (a14)
        {
          v51 = vadd_f32(*a7, vmul_n_f32(vsub_f32(*a5, *a7), 1.0 - a10));
          if (v50 >= v91)
          {
            v52 = (float32x2_t *)v89;
            v63 = ((char *)v50 - (_BYTE *)v89) >> 3;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v65 = (char *)v91 - (_BYTE *)v89;
            if (((char *)v91 - (_BYTE *)v89) >> 2 > v64)
              v64 = v65 >> 2;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v64;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v56);
              v52 = (float32x2_t *)v89;
              v50 = v90;
            }
            else
            {
              v57 = 0;
            }
            v72 = &v57[8 * v63];
            *(float32x2_t *)v72 = v51;
            v62 = (float32x2_t *)(v72 + 8);
            while (v50 != v52)
            {
              v75 = v50[-1].i32[0];
              --v50;
              *((_DWORD *)v72 - 2) = v75;
              v72 -= 8;
              *((_DWORD *)v72 + 1) = v50->i32[1];
            }
            goto LABEL_121;
          }
        }
        else
        {
          v51 = vadd_f32(*a5, vmul_n_f32(vsub_f32(*a6, *a5), a9.n128_f32[0]));
          if (v50 >= v91)
          {
            v52 = (float32x2_t *)v89;
            v53 = ((char *)v50 - (_BYTE *)v89) >> 3;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v55 = (char *)v91 - (_BYTE *)v89;
            if (((char *)v91 - (_BYTE *)v89) >> 2 > v54)
              v54 = v55 >> 2;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v56);
              v52 = (float32x2_t *)v89;
              v50 = v90;
            }
            else
            {
              v57 = 0;
            }
            v72 = &v57[8 * v53];
            *(float32x2_t *)v72 = v51;
            v62 = (float32x2_t *)(v72 + 8);
            while (v50 != v52)
            {
              v74 = v50[-1].i32[0];
              --v50;
              *((_DWORD *)v72 - 2) = v74;
              v72 -= 8;
              *((_DWORD *)v72 + 1) = v50->i32[1];
            }
LABEL_121:
            v89 = v72;
            v90 = v62;
            v91 = (float32x2_t *)&v57[8 * v56];
            if (v52)
              operator delete(v52);
            goto LABEL_123;
          }
        }
      }
      *v50 = v51;
      v62 = v50 + 1;
LABEL_123:
      v90 = v62;
      v50 = v62;
      a9 = v86;
LABEL_131:
      a9.n128_f32[0] = a9.n128_f32[0] + a10;
    }
    while (a9.n128_f32[0] < 0.9999);
  }
  v79 = *a15;
  v87 = v79;
  if (v79)
    (*((void (**)(const char **))*v79 + 2))(v79);
  v80 = PAEKeyerDrawAlpha::renderPieEdgeSegment_GL(&__p, &v89, a11, &v87, a8);
  if (v79)
    (*((void (**)(const char **, double))*v79 + 3))(v79, v80);
  if (v89)
  {
    v90 = (float32x2_t *)v89;
    operator delete(v89);
  }
  if (__p)
  {
    v93 = (float32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_1B2806C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X5>, float32x2_t *a6@<X6>, float *a7@<X7>, double *a8@<X8>, __n128 a9@<Q0>, float a10@<S1>, float32x2_t **a11, float32x2_t **a12, int a13, const char ***a14)
{
  float v17;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  float32x2_t *v27;
  float32x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float32x2_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int32 v39;
  __int32 v40;
  void **v41;
  void **v42;
  __int32 v43;
  float32x2_t *v44;
  float32x2_t v45;
  float32x2_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  float32x2_t *v52;
  float32x2_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  float32x2_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int32 v64;
  __int32 v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 v68;
  const char **v69;
  double v70;
  __n128 v76;
  __n128 v77;
  const char **v78;
  float32x2_t v79;
  void *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  void *__p;
  char *v84;
  _QWORD v85[2];

  v17 = a9.n128_f32[0];
  v19 = 0;
  __p = 0;
  v84 = 0;
  v85[0] = 0;
  a9.n128_u32[0] = 0;
  do
  {
    v76 = a9;
    if (a13 != 1)
    {
      if (a13)
      {
        v20 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a1, *a3), a9.n128_f32[0]));
        if ((unint64_t)v19 >= v85[0])
        {
          v21 = (float32x2_t *)__p;
          v29 = ((char *)v19 - (_BYTE *)__p) >> 3;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v31 = v85[0] - (_QWORD)__p;
          if ((uint64_t)(v85[0] - (_QWORD)__p) >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v30;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v85, v25);
            v21 = (float32x2_t *)__p;
            v19 = (float32x2_t *)v84;
          }
          else
          {
            v26 = 0;
          }
          v38 = &v26[8 * v29];
          *(float32x2_t *)v38 = v20;
          v28 = (float32x2_t *)(v38 + 8);
          while (v19 != v21)
          {
            v40 = v19[-1].i32[0];
            --v19;
            *((_DWORD *)v38 - 2) = v40;
            v38 -= 8;
            *((_DWORD *)v38 + 1) = v19->i32[1];
          }
          goto LABEL_41;
        }
      }
      else
      {
        v20 = vadd_f32(*a1, vmul_n_f32(vsub_f32(*a2, *a1), a9.n128_f32[0]));
        if ((unint64_t)v19 >= v85[0])
        {
          v21 = (float32x2_t *)__p;
          v22 = ((char *)v19 - (_BYTE *)__p) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v24 = v85[0] - (_QWORD)__p;
          if ((uint64_t)(v85[0] - (_QWORD)__p) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v85, v25);
            v21 = (float32x2_t *)__p;
            v19 = (float32x2_t *)v84;
          }
          else
          {
            v26 = 0;
          }
          v38 = &v26[8 * v22];
          *(float32x2_t *)v38 = v20;
          v28 = (float32x2_t *)(v38 + 8);
          while (v19 != v21)
          {
            v39 = v19[-1].i32[0];
            --v19;
            *((_DWORD *)v38 - 2) = v39;
            v38 -= 8;
            *((_DWORD *)v38 + 1) = v19->i32[1];
          }
LABEL_41:
          __p = v38;
          v84 = (char *)v28;
          v85[0] = &v26[8 * v25];
          if (v21)
            operator delete(v21);
          goto LABEL_43;
        }
      }
      *v19 = v20;
      v28 = v19 + 1;
LABEL_43:
      v84 = (char *)v28;
      v19 = v28;
      a9 = v76;
      goto LABEL_51;
    }
    OMPie::getArcOut(a11, a9.n128_f32[0], (float32x2_t *)&v80);
    v27 = (float32x2_t *)v84;
    if ((unint64_t)v84 >= v85[0])
    {
      v32 = (float32x2_t *)__p;
      v33 = (v84 - (_BYTE *)__p) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v35 = v85[0] - (_QWORD)__p;
      if ((uint64_t)(v85[0] - (_QWORD)__p) >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v85, v36);
        v32 = (float32x2_t *)__p;
        v27 = (float32x2_t *)v84;
      }
      else
      {
        v37 = 0;
      }
      v41 = (void **)&v37[8 * v33];
      *v41 = v80;
      v42 = v41;
      while (v27 != v32)
      {
        v43 = v27[-1].i32[0];
        --v27;
        *((_DWORD *)v42-- - 2) = v43;
        *((_DWORD *)v42 + 1) = v27->i32[1];
      }
      v19 = (float32x2_t *)(v41 + 1);
      __p = v42;
      v84 = (char *)(v41 + 1);
      v85[0] = &v37[8 * v36];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_DWORD *)v84 = (_DWORD)v80;
      v27->i32[1] = HIDWORD(v80);
      v19 = v27 + 1;
    }
    a9 = v76;
    v84 = (char *)v19;
LABEL_51:
    a9.n128_f32[0] = a9.n128_f32[0] + v17;
  }
  while (a9.n128_f32[0] <= 1.0001);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  if (a10 < 0.9999)
  {
    v44 = 0;
    a9.n128_f32[0] = a10;
    do
    {
      v77 = a9;
      if (a13 == 1)
      {
        OMPie::getArcOut(a12, a9.n128_f32[0], &v79);
        v52 = v81;
        if (v81 >= v82)
        {
          v57 = (float32x2_t *)v80;
          v58 = ((char *)v81 - (_BYTE *)v80) >> 3;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v60 = (char *)v82 - (_BYTE *)v80;
          if (((char *)v82 - (_BYTE *)v80) >> 2 > v59)
            v59 = v60 >> 2;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v82, v61);
            v57 = (float32x2_t *)v80;
            v52 = v81;
          }
          else
          {
            v62 = 0;
          }
          v66 = (float32x2_t *)&v62[8 * v58];
          *v66 = v79;
          v67 = v66;
          while (v52 != v57)
          {
            v68 = v52[-1].i32[0];
            --v52;
            v67[-1].i32[0] = v68;
            --v67;
            v67->i32[1] = v52->i32[1];
          }
          v44 = v66 + 1;
          v80 = v67;
          v81 = v66 + 1;
          v82 = (float32x2_t *)&v62[8 * v61];
          if (v57)
            operator delete(v57);
        }
        else
        {
          v81->i32[0] = v79.i32[0];
          v52->i32[1] = v79.i32[1];
          v44 = v52 + 1;
        }
        a9 = v77;
        v81 = v44;
        goto LABEL_103;
      }
      if (a13)
      {
        v45 = vadd_f32(*a6, vmul_n_f32(vsub_f32(*a4, *a6), a9.n128_f32[0]));
        if (v44 >= v82)
        {
          v46 = (float32x2_t *)v80;
          v54 = ((char *)v44 - (_BYTE *)v80) >> 3;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v56 = (char *)v82 - (_BYTE *)v80;
          if (((char *)v82 - (_BYTE *)v80) >> 2 > v55)
            v55 = v56 >> 2;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v55;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v82, v50);
            v46 = (float32x2_t *)v80;
            v44 = v81;
          }
          else
          {
            v51 = 0;
          }
          v63 = &v51[8 * v54];
          *(float32x2_t *)v63 = v45;
          v53 = (float32x2_t *)(v63 + 8);
          while (v44 != v46)
          {
            v65 = v44[-1].i32[0];
            --v44;
            *((_DWORD *)v63 - 2) = v65;
            v63 -= 8;
            *((_DWORD *)v63 + 1) = v44->i32[1];
          }
          goto LABEL_93;
        }
      }
      else
      {
        v45 = vadd_f32(*a4, vmul_n_f32(vsub_f32(*a5, *a4), a9.n128_f32[0]));
        if (v44 >= v82)
        {
          v46 = (float32x2_t *)v80;
          v47 = ((char *)v44 - (_BYTE *)v80) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v49 = (char *)v82 - (_BYTE *)v80;
          if (((char *)v82 - (_BYTE *)v80) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v82, v50);
            v46 = (float32x2_t *)v80;
            v44 = v81;
          }
          else
          {
            v51 = 0;
          }
          v63 = &v51[8 * v47];
          *(float32x2_t *)v63 = v45;
          v53 = (float32x2_t *)(v63 + 8);
          while (v44 != v46)
          {
            v64 = v44[-1].i32[0];
            --v44;
            *((_DWORD *)v63 - 2) = v64;
            v63 -= 8;
            *((_DWORD *)v63 + 1) = v44->i32[1];
          }
LABEL_93:
          v80 = v63;
          v81 = v53;
          v82 = (float32x2_t *)&v51[8 * v50];
          if (v46)
            operator delete(v46);
          goto LABEL_95;
        }
      }
      *v44 = v45;
      v53 = v44 + 1;
LABEL_95:
      v81 = v53;
      v44 = v53;
      a9 = v77;
LABEL_103:
      a9.n128_f32[0] = a9.n128_f32[0] + a10;
    }
    while (a9.n128_f32[0] < 0.9999);
  }
  v69 = *a14;
  v78 = v69;
  if (v69)
    (*((void (**)(const char **))*v69 + 2))(v69);
  v70 = PAEKeyerDrawAlpha::renderPieEdgeSegment_GL(&__p, &v80, a7, &v78, a8);
  if (v69)
    (*((void (**)(const char **, double))*v69 + 3))(v69, v70);
  if (v80)
  {
    v81 = (float32x2_t *)v80;
    operator delete(v80);
  }
  if (__p)
  {
    v84 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B2807304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void PAEKeyerDrawAlpha::drawAlpha_in_HGGLNode(uint64_t a1, uint64_t a2, HGGLNode **a3)
{
  OMPie *v5;
  uint64_t v6;
  const Vec2f *v7;
  OMPie *v8;
  uint64_t v9;
  const Vec2f *v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  float32x2_t v19;
  float32x2_t v20;
  OMPie *v21;
  _BOOL4 isQuadActive;
  OMPie *v23;
  _BOOL4 v24;
  __n128 v25;
  int v26;
  float v27;
  OMPie *v28;
  float32x2_t **v29;
  const Vec2f *v30;
  const Vec2f *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  __float2 v39;
  float v40;
  float v41;
  float v42;
  float v43;
  __float2 v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  Vec2f *v51;
  uint64_t v52;
  const Vec2f *v53;
  OMPie *v54;
  float32x2_t **v55;
  __n128 v56;
  HGGLNode *v57;
  float32x2_t **v58;
  __n128 v59;
  HGGLNode *v60;
  float32x2_t **v61;
  __n128 v62;
  HGGLNode *v63;
  float32x2_t **v64;
  __n128 v65;
  HGGLNode *v66;
  BOOL v67;
  float v68;
  float v69;
  float32x2_t **v70;
  float32x2_t **v71;
  float32x2_t **v72;
  float32x2_t v73;
  int32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int32x2_t v78;
  float32x2_t **v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  Vec2f *v89;
  uint64_t v90;
  const Vec2f *v91;
  float32x2_t **v92;
  __n128 v93;
  HGGLNode *v94;
  float32x2_t **v95;
  __n128 v96;
  HGGLNode *v97;
  float32x2_t **v98;
  __n128 v99;
  HGGLNode *v100;
  float v101;
  OMPie *v102;
  float32x2_t **v103;
  const Vec2f *v104;
  const Vec2f *v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  __float2 v112;
  float v113;
  float v114;
  float v115;
  float v116;
  __float2 v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  Vec2f *v124;
  uint64_t v125;
  const Vec2f *v126;
  float32x2_t **v127;
  __n128 v128;
  HGGLNode *v129;
  float32x2_t **v130;
  __n128 v131;
  HGGLNode *v132;
  float32x2_t **v133;
  __n128 v134;
  HGGLNode *v135;
  float32x2_t **v136;
  __n128 v137;
  HGGLNode *v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float32x2_t v145;
  const char **v146;
  const char **v147;
  const char **v148;
  float32x2_t v149;
  const char **v150;
  const char **v151;
  const char **v152;
  const char **v153;
  const char **v154;
  const char **v155;
  const char **v156;
  const char **v157;
  float32x2_t v158;
  __int128 v159;
  __int128 v160;
  int v161;
  void *__p;
  void *v163;
  uint64_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  unint64_t v171;
  unint64_t v172;
  Vec2f v173;
  float32x2_t v174;
  Vec2f v175;

  v5 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  OMPie::computeArc(v5, v6, v7);
  v8 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  OMPie::computeArc(v8, v9, v10);
  v175 = **(Vec2f **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 40);
  v145 = *(float32x2_t *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 40) + 8);
  v174 = v145;
  v173 = *(Vec2f *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 40) + 16);
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 40);
  v13 = *(float *)(v11 + 24);
  v12 = *(float *)(v11 + 28);
  v172 = __PAIR64__(LODWORD(v12), LODWORD(v13));
  v14 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 40);
  v15 = *(float *)(v14 + 32);
  v16 = *(float *)(v14 + 36);
  v171 = __PAIR64__(LODWORD(v16), LODWORD(v15));
  v170 = **(float32x2_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 40);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112);
  v19 = *(float32x2_t *)(*(_QWORD *)(v17 + 40) + 8);
  v169 = v19;
  v20 = *(float32x2_t *)(*(_QWORD *)(v18(a2) + 40) + 16);
  v168 = v20;
  v167 = *(float32x2_t *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 40) + 24);
  v166 = *(float32x2_t *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 40) + 32);
  v21 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  isQuadActive = OMPie::isQuadActive(v21);
  v23 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v24 = OMPie::isQuadActive(v23);
  v26 = !v24;
  if (!isQuadActive || (v26 & 1) != 0)
  {
    if ((isQuadActive | v26) != 1)
      return;
    v67 = !isQuadActive || v24;
    v25.n128_u32[0] = 1.0;
    HGGLNode::hglColor4f(*a3, v25, 1.0, 1.0, 1.0);
    HGGLNode::hglBegin((const char **)*a3, 5);
    if (v67)
    {
      v68 = vmuls_lane_f32(256.0, v145, 1);
      v69 = 0.0;
      do
      {
        v70 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
        OMPie::getArcOut(v70, v69, (float32x2_t *)&v159);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, *(float *)&v159 * 256.0, *((float *)&v159 + 1) * 256.0);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, 256.0 * v145.f32[0], v68);
        v69 = v69 + 0.02;
      }
      while (v69 <= 1.0);
      HGGLNode::hglEnd((HGRasterizer **)*a3);
      v71 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      OMPie::getArcOut(v71, 0.01, (float32x2_t *)&v159);
      v175 = (Vec2f)v159;
      v72 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      OMPie::getArcOut(v72, 0.99, (float32x2_t *)&v159);
      v73 = vsub_f32((float32x2_t)v175, v145);
      v74 = (int32x2_t)vmul_f32(v73, v73);
      *(float *)v74.i32 = sqrtf(vaddv_f32((float32x2_t)v74));
      v75 = vmul_n_f32(vdiv_f32(v73, (float32x2_t)vdup_lane_s32(v74, 0)), *(float *)v74.i32);
      v76 = (float32x2_t)vdup_n_s32(0x3F75C28Fu);
      v175 = (Vec2f)vadd_f32(v145, vmul_f32(v75, v76));
      v77 = vsub_f32(*(float32x2_t *)&v159, v145);
      v78 = (int32x2_t)vmul_f32(v77, v77);
      *(float *)v78.i32 = sqrtf(vaddv_f32((float32x2_t)v78));
      v173 = (Vec2f)vadd_f32(v145, vmul_f32(vmul_n_f32(vdiv_f32(v77, (float32x2_t)vdup_lane_s32(v78, 0)), *(float *)v78.i32), v76));
      v79 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      OMPie::getArcOut(v79, 0.5, &v165);
      v80 = sqrtf((float)((float)(v145.f32[0] - v165.f32[0]) * (float)(v145.f32[0] - v165.f32[0]))+ (float)((float)(v145.f32[1] - v165.f32[1]) * (float)(v145.f32[1] - v165.f32[1])));
      v81 = (float)(v145.f32[0] - v165.f32[0]) / v80;
      v82 = (float)(v145.f32[1] - v165.f32[1]) / v80;
      v83 = sqrtf((float)((float)(v165.f32[0] - v145.f32[0]) * (float)(v165.f32[0] - v145.f32[0]))+ (float)((float)(v165.f32[1] - v145.f32[1]) * (float)(v165.f32[1] - v145.f32[1])));
      v84 = v165.f32[0] + (float)((float)(v83 * v81) * 0.96);
      v85 = v165.f32[1] + (float)((float)(v83 * v82) * 0.96);
      v174.f32[0] = v84;
      v174.f32[1] = v85;
      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      v87 = *(_DWORD *)(v86 + 32);
      v88 = *(_OWORD *)(v86 + 16);
      v159 = *(_OWORD *)v86;
      v160 = v88;
      v161 = v87;
      v163 = 0;
      v164 = 0;
      __p = 0;
      std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *(_DWORD **)(v86 + 40), *(_DWORD **)(v86 + 48), (uint64_t)(*(_QWORD *)(v86 + 48) - *(_QWORD *)(v86 + 40)) >> 3);
      v89 = (Vec2f *)__p;
      *(Vec2f *)__p = v175;
      v89[1].var0[0] = v84;
      v89[1].var0[1] = v85;
      v89[2] = v173;
      OMPie::computeArc((OMPie *)&v159, v90, v91);
      v158 = vadd_f32(v20, vmul_f32(vsub_f32(v19, v20), (float32x2_t)vdup_n_s32(0x3F7B2B79u)));
      v92 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v94 = *a3;
      v148 = (const char **)v94;
      if (v94)
        v93 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v94 + 16))(v94);
      v93.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(&v174, (float32x2_t *)&v175, (float32x2_t *)&v173, &v169, &v170, &v168, (float *)&v158, (double *)&v149, v93, 0.018868, (float32x2_t **)&v159, v92, 0, &v148);
      v158 = v149;
      if (v94)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v94 + 24))(v94);
      v95 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v97 = *a3;
      v147 = (const char **)v97;
      if (v97)
        v96 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v97 + 16))(v97);
      v96.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(&v174, (float32x2_t *)&v175, (float32x2_t *)&v173, &v169, &v170, &v168, (float *)&v158, (double *)&v149, v96, 0.018868, (float32x2_t **)&v159, v95, 1, &v147);
      v158 = v149;
      if (v97)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v97 + 24))(v97);
      v98 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v100 = *a3;
      v146 = (const char **)v100;
      if (v100)
        v99 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v100 + 16))(v100);
      v99.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_noQuad(&v174, (float32x2_t *)&v175, (float32x2_t *)&v173, &v169, &v170, &v168, (float *)&v158, (double *)&v149, v99, 0.018868, (float32x2_t **)&v159, v98, 2, &v146);
      v158 = v149;
      if (v100)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v100 + 24))(v100);
    }
    else
    {
      v144 = v16;
      v139 = v19;
      v101 = 0.0;
      do
      {
        v102 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
        OMPie::getArcIn(v102, v101, (float *)&v159);
        v103 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
        OMPie::getArcOut(v103, v101, &v165);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, v165.f32[0] * 256.0, v165.f32[1] * 256.0);
        HGGLNode::hglVertex2f((float32x4_t **)*a3, *(float *)&v159 * 256.0, *((float *)&v159 + 1) * 256.0);
        v101 = v101 + 0.02;
      }
      while (v101 <= 1.0);
      HGGLNode::hglEnd((HGRasterizer **)*a3);
      *(_QWORD *)&v159 = 1065353216;
      v106 = OMUtil::angle((OMUtil *)&v159, &v175, v104);
      if ((float)((float)(*(float *)&v159 * v175.var0[1]) - (float)(*((float *)&v159 + 1) * v175.var0[0])) >= 0.0)
        v107 = v106;
      else
        v107 = 6.2832 - v106;
      *(_QWORD *)&v159 = 1065353216;
      v108 = OMUtil::angle((OMUtil *)&v159, &v173, v105);
      v109 = v173.var0[0];
      v110 = v173.var0[1];
      if ((float)((float)(*(float *)&v159 * v173.var0[1]) - (float)(*((float *)&v159 + 1) * v173.var0[0])) < 0.0)
        v108 = 6.2832 - v108;
      v141 = v108;
      v111 = sqrtf((float)(v175.var0[0] * v175.var0[0]) + (float)(v175.var0[1] * v175.var0[1])) * 0.99;
      v112 = __sincosf_stret(v107 + 0.01);
      v175.var0[0] = v112.__cosval * v111;
      v175.var0[1] = v112.__sinval * v111;
      v113 = sqrtf((float)(v13 * v13) + (float)(v12 * v12)) * 1.01;
      v114 = v113 * v112.__cosval;
      v115 = v113 * v112.__sinval;
      *(float *)&v172 = v113 * v112.__cosval;
      *((float *)&v172 + 1) = v113 * v112.__sinval;
      v116 = sqrtf((float)(v109 * v109) + (float)(v110 * v110)) * 0.99;
      v117 = __sincosf_stret(v141 + -0.01);
      v173.var0[0] = v116 * v117.__cosval;
      v173.var0[1] = v116 * v117.__sinval;
      v118 = sqrtf((float)(v15 * v15) + (float)(v144 * v144)) * 1.01;
      v119 = v118 * v117.__cosval;
      v120 = v118 * v117.__sinval;
      *(float *)&v171 = v118 * v117.__cosval;
      *((float *)&v171 + 1) = v118 * v117.__sinval;
      v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      v122 = *(_DWORD *)(v121 + 32);
      v123 = *(_OWORD *)(v121 + 16);
      v159 = *(_OWORD *)v121;
      v160 = v123;
      v161 = v122;
      v163 = 0;
      v164 = 0;
      __p = 0;
      std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *(_DWORD **)(v121 + 40), *(_DWORD **)(v121 + 48), (uint64_t)(*(_QWORD *)(v121 + 48) - *(_QWORD *)(v121 + 40)) >> 3);
      v124 = (Vec2f *)__p;
      *(Vec2f *)__p = v175;
      v124[3].var0[0] = v114;
      v124[3].var0[1] = v115;
      v124[2] = v173;
      v124[4].var0[0] = v119;
      v124[4].var0[1] = v120;
      OMPie::computeArc((OMPie *)&v159, v125, v126);
      v165 = vadd_f32(v20, vmul_f32(vsub_f32(v139, v20), (float32x2_t)vdup_n_s32(0x3F7B2B79u)));
      v127 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v129 = *a3;
      v153 = (const char **)v129;
      if (v129)
        v128 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v129 + 16))(v129);
      v128.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v128, 0.018868, (float *)&v165, (OMPie *)&v159, v127, 0, &v153);
      v165 = v158;
      if (v129)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v129 + 24))(v129);
      v130 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v132 = *a3;
      v152 = (const char **)v132;
      if (v132)
        v131 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v132 + 16))(v132);
      v131.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v131, 0.018868, (float *)&v165, (OMPie *)&v159, v130, 1, &v152);
      v165 = v158;
      if (v132)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v132 + 24))(v132);
      v133 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v135 = *a3;
      v151 = (const char **)v135;
      if (v135)
        v134 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v135 + 16))(v135);
      v134.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v134, 0.018868, (float *)&v165, (OMPie *)&v159, v133, 2, &v151);
      v165 = v158;
      if (v135)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v135 + 24))(v135);
      v136 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      v138 = *a3;
      v150 = (const char **)v138;
      if (v138)
        v137 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v138 + 16))(v138);
      v137.n128_u32[0] = 1017370378;
      PAEKeyerDrawAlpha::renderPieEdgeSegment_TolQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v169, &v170, &v168, (double *)&v158, v137, 0.018868, (float *)&v165, (OMPie *)&v159, v136, 3, &v150);
      v165 = v158;
      if (v138)
        (*(void (**)(HGGLNode *))(*(_QWORD *)v138 + 24))(v138);
    }
  }
  else
  {
    v140 = v13;
    v142 = v12;
    v143 = v16;
    v25.n128_u32[0] = 1.0;
    HGGLNode::hglColor4f(*a3, v25, 1.0, 1.0, 1.0);
    HGGLNode::hglBegin((const char **)*a3, 5);
    v27 = 0.0;
    do
    {
      v28 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      OMPie::getArcIn(v28, v27, (float *)&v159);
      v29 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      OMPie::getArcOut(v29, v27, &v165);
      HGGLNode::hglVertex2f((float32x4_t **)*a3, v165.f32[0] * 256.0, v165.f32[1] * 256.0);
      HGGLNode::hglVertex2f((float32x4_t **)*a3, *(float *)&v159 * 256.0, *((float *)&v159 + 1) * 256.0);
      v27 = v27 + 0.02;
    }
    while (v27 <= 1.0);
    HGGLNode::hglEnd((HGRasterizer **)*a3);
    *(_QWORD *)&v159 = 1065353216;
    v32 = OMUtil::angle((OMUtil *)&v159, &v175, v30);
    if ((float)((float)(*(float *)&v159 * v175.var0[1]) - (float)(*((float *)&v159 + 1) * v175.var0[0])) >= 0.0)
      v33 = v32;
    else
      v33 = 6.2832 - v32;
    *(_QWORD *)&v159 = 1065353216;
    v34 = OMUtil::angle((OMUtil *)&v159, &v173, v31);
    v35 = v173.var0[0];
    v36 = v173.var0[1];
    if ((float)((float)(*(float *)&v159 * v173.var0[1]) - (float)(*((float *)&v159 + 1) * v173.var0[0])) >= 0.0)
      v37 = v34;
    else
      v37 = 6.2832 - v34;
    v38 = sqrtf((float)(v175.var0[0] * v175.var0[0]) + (float)(v175.var0[1] * v175.var0[1])) * 0.99;
    v39 = __sincosf_stret(v33 + 0.01);
    v175.var0[0] = v39.__cosval * v38;
    v175.var0[1] = v39.__sinval * v38;
    v40 = sqrtf((float)(v140 * v140) + (float)(v142 * v142)) * 1.01;
    v41 = v40 * v39.__cosval;
    v42 = v40 * v39.__sinval;
    *(float *)&v172 = v40 * v39.__cosval;
    *((float *)&v172 + 1) = v40 * v39.__sinval;
    v43 = sqrtf((float)(v35 * v35) + (float)(v36 * v36)) * 0.99;
    v44 = __sincosf_stret(v37 + -0.01);
    v173.var0[0] = v43 * v44.__cosval;
    v173.var0[1] = v43 * v44.__sinval;
    v45 = sqrtf((float)(v15 * v15) + (float)(v143 * v143)) * 1.01;
    v46 = v45 * v44.__cosval;
    v47 = v45 * v44.__sinval;
    *(float *)&v171 = v45 * v44.__cosval;
    *((float *)&v171 + 1) = v45 * v44.__sinval;
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
    v49 = *(_DWORD *)(v48 + 32);
    v50 = *(_OWORD *)(v48 + 16);
    v159 = *(_OWORD *)v48;
    v160 = v50;
    v161 = v49;
    v163 = 0;
    v164 = 0;
    __p = 0;
    std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>((char *)&__p, *(_DWORD **)(v48 + 40), *(_DWORD **)(v48 + 48), (uint64_t)(*(_QWORD *)(v48 + 48) - *(_QWORD *)(v48 + 40)) >> 3);
    v51 = (Vec2f *)__p;
    *(Vec2f *)__p = v175;
    v51[3].var0[0] = v41;
    v51[3].var0[1] = v42;
    v51[2] = v173;
    v51[4].var0[0] = v46;
    v51[4].var0[1] = v47;
    OMPie::computeArc((OMPie *)&v159, v52, v53);
    v54 = (OMPie *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    OMPie::getArcIn(v54, 0.018868, (float *)&v165);
    v55 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    v57 = *a3;
    v157 = (const char **)v57;
    if (v57)
      v56 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v57 + 16))(v57);
    v56.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v56, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v55, 0, &v157);
    v165 = v158;
    if (v57)
      (*(void (**)(HGGLNode *))(*(_QWORD *)v57 + 24))(v57);
    v58 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    v60 = *a3;
    v156 = (const char **)v60;
    if (v60)
      v59 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v60 + 16))(v60);
    v59.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v59, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v58, 1, &v156);
    v165 = v158;
    if (v60)
      (*(void (**)(HGGLNode *))(*(_QWORD *)v60 + 24))(v60);
    v61 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    v63 = *a3;
    v155 = (const char **)v63;
    if (v63)
      v62 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v63 + 16))(v63);
    v62.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v62, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v61, 2, &v155);
    v165 = v158;
    if (v63)
      (*(void (**)(HGGLNode *))(*(_QWORD *)v63 + 24))(v63);
    v64 = (float32x2_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    v66 = *a3;
    v154 = (const char **)v66;
    if (v66)
      v65 = ((__n128 (*)(HGGLNode *))*(_QWORD *)(*(_QWORD *)v66 + 16))(v66);
    v65.n128_u32[0] = 1017370378;
    PAEKeyerDrawAlpha::renderPieEdgeSegment_TolSoftQuad((float32x2_t *)&v175, (float32x2_t *)&v173, (float32x2_t *)&v172, (float32x2_t *)&v171, &v170, &v168, &v167, (double *)&v158, v65, 0.018868, &v166, (float *)&v165, (OMPie *)&v159, v64, 3, &v154);
    v165 = v158;
    if (v66)
      (*(void (**)(HGGLNode *))(*(_QWORD *)v66 + 24))(v66);
  }
  if (__p)
  {
    v163 = __p;
    operator delete(__p);
  }
}

void sub_1B2808364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v41;

  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float OMUtil::angle(OMUtil *this, const Vec2f *a2, const Vec2f *a3)
{
  float v3;
  float v4;

  v3 = (float)((float)(*(float *)this * a2->var0[0]) + (float)(*((float *)this + 1) * a2->var0[1]))
     / (float)(sqrtf((float)(*(float *)this * *(float *)this) + (float)(*((float *)this + 1) * *((float *)this + 1)))
             * sqrtf((float)(a2->var0[0] * a2->var0[0]) + (float)(a2->var0[1] * a2->var0[1])));
  v4 = 1.0;
  if (v3 <= 1.0)
    v4 = v3;
  if (v3 >= -1.0)
    return acosf(v4);
  else
    return acosf(-1.0);
}

char *std::vector<Vec2f>::__init_with_size[abi:ne180100]<Vec2f*,Vec2f*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B28085E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HBlackHole::setPixelTransform(double *a1, double *a2)
{
  double *v4;
  uint64_t v5;
  double *v6;
  uint64_t i;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v4 = a1 + 52;
  if (a1 + 52 != a2)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v4[i] = v6[i];
      ++v5;
      v4 += 4;
      v6 += 4;
    }
    while (v5 != 4);
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v8, v9, v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  v15 = a2[7];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v12, v13, v14, v15);
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, v16, v17, v18, v19);
}

uint64_t HBlackHole::setInversePixelTransform(double *a1, double *a2)
{
  double *v4;
  uint64_t v5;
  double *v6;
  uint64_t i;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v4 = a1 + 68;
  if (a1 + 68 != a2)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v4[i] = v6[i];
      ++v5;
      v4 += 4;
      v6 += 4;
    }
    while (v5 != 4);
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v8, v9, v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  v15 = a2[7];
  (*(void (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, v12, v13, v14, v15);
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v16, v17, v18, v19);
}

uint64_t HBlackHole::RenderTile(HBlackHole *this, HGTile *a2)
{
  int v3;
  char *v4;
  size_t v5;
  uint64_t v6;

  if (*((_QWORD *)a2 + 10))
    return HgcBlackHole::RenderTile(this, a2);
  v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v3 >= 1)
  {
    v4 = (char *)*((_QWORD *)a2 + 2);
    v5 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    v6 = 16 * *((int *)a2 + 6);
    do
    {
      bzero(v4, v5);
      v4 += v6;
      --v3;
    }
    while (v3);
  }
  return 0;
}

unint64_t HBlackHole::GetDOD(HBlackHole *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  float v9;
  float v10;
  double *v16;
  float v18;
  float v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float v24;
  float v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = *(_QWORD *)&a4.var2;
    v7 = *(_QWORD *)&a4.var0;
    v8 = (double *)this;
    (*(void (**)(HBlackHole *, _QWORD, float64x2_t *))(*(_QWORD *)this + 104))(this, 0, v31);
    v18 = *((float *)v31[0].f64 + 1);
    v19 = *(float *)v31[0].f64;
    (*(void (**)(double *, uint64_t, float64x2_t *))(*(_QWORD *)v8 + 104))(v8, 1, v31);
    v9 = *(float *)v31[0].f64;
    v10 = *(float *)&v31[0].f64[1];
    v31[0] = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v31[1] = _Q0;
    v16 = v8 + 52;
    v8 += 68;
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v29.f64[0] = (double)(int)v7;
    v29.f64[1] = (double)SHIDWORD(v7);
    unionBlackHolePoint(v31, v16, v8, &v30, &v29, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v28.f64[0] = (double)(int)v6;
    v28.f64[1] = (double)SHIDWORD(v7);
    unionBlackHolePoint(v31, v16, v8, &v30, &v28, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v27.f64[0] = (double)(int)v6;
    v27.f64[1] = (double)SHIDWORD(v6);
    unionBlackHolePoint(v31, v16, v8, &v30, &v27, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v26.f64[0] = (double)(int)v7;
    v26.f64[1] = (double)SHIDWORD(v6);
    unionBlackHolePoint(v31, v16, v8, &v30, &v26, v10, v9);
    v24 = v19;
    v25 = v18;
    PCMatrix44Tmpl<double>::transform<float>(v16, &v24, (uint64_t)&v24);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v23.f64[0] = v24;
    v23.f64[1] = (double)SHIDWORD(v6);
    unionBlackHolePoint(v31, v16, v8, &v30, &v23, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v22.f64[0] = v24;
    v22.f64[1] = (double)SHIDWORD(v7);
    unionBlackHolePoint(v31, v16, v8, &v30, &v22, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v21.f64[0] = (double)(int)v7;
    v21.f64[1] = v25;
    unionBlackHolePoint(v31, v16, v8, &v30, &v21, v10, v9);
    v30.f64[0] = v19;
    v30.f64[1] = v18;
    v20.f64[0] = (double)(int)v6;
    v20.f64[1] = v25;
    unionBlackHolePoint(v31, v16, v8, &v30, &v20, v10, v9);
    v4 = vcvtmd_s64_f64(v31[0].f64[0] + 0.5);
    LODWORD(v5) = vcvtmd_s64_f64(v31[0].f64[1] + 0.5);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void unionBlackHolePoint(float64x2_t *a1, double *a2, double *a3, float64x2_t *a4, float64x2_t *a5, float a6, float a7)
{
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;

  *a5 = vdivq_f64(*a5, (float64x2_t)vdupq_lane_s64(COERCE__INT64(a6), 0));
  PCMatrix44Tmpl<double>::transform<double>(a3, a5->f64, a5->f64);
  v12 = vsubq_f64(*a5, *a4);
  v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)));
  if (v13 <= a7)
    v14 = *a4;
  else
    v14 = vsubq_f64(*a5, vdivq_f64(vmulq_n_f64(v12, a7), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0)));
  *a5 = v14;
  v15 = 0uLL;
  PCMatrix44Tmpl<double>::transform<double>(a2, a5->f64, v15.f64);
  PCRect<double>::operator|=(a1, &v15);
}

int8x16_t HBlackHole::TransformPoint@<Q0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X3>, float64x2_t *a5@<X4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>)
{
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  float v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t result;
  __int128 v27;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 544), a2, (double *)a6);
  v17 = vsubq_f64(*(float64x2_t *)a6, *a3);
  v18 = sqrt(vaddvq_f64(vmulq_f64(v17, v17)));
  if (v18 <= -0.000000100000001 || v18 >= 0.000000100000001)
    v17 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
  v19 = v18 / a8;
  v20 = 1.0;
  if (v19 <= 1.0)
    v20 = v18 / a8;
  v21 = v19 < 0.0;
  v22 = 0.0;
  if (!v21)
    v22 = v20;
  v23 = v22 * a7;
  *(float64x2_t *)a6 = vaddq_f64(*a3, vmulq_n_f64(v17, v18 + v23));
  v27 = 0uLL;
  PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 416), (double *)a6, (double *)&v27);
  *(_OWORD *)a6 = v27;
  v24 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)a6, a9);
  v25 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v24, *a4), v24, *(int8x16_t *)a4);
  result = vbslq_s8((int8x16_t)vcgtq_f64(*a5, (float64x2_t)v25), v25, *(int8x16_t *)a5);
  *(int8x16_t *)a6 = result;
  return result;
}

unint64_t HBlackHole::GetROI(HBlackHole *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  int var1;
  int var3;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  double v41;
  float v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v55 = *MEMORY[0x1E0C80C00];
  var1 = a4.var1;
  var3 = a4.var3;
  if (a3)
  {
    if (a3 == 1)
    {
      (*(void (**)(HBlackHole *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 1, &v54);
      LODWORD(v9) = (int)(float)(int)v5 - 1;
      v10 = ((int)(float)var1 - 1);
    }
    else
    {
      LODWORD(v9) = 0;
      v10 = 0;
    }
  }
  else
  {
    (*(void (**)(HBlackHole *, _QWORD, __int128 *))(*(_QWORD *)this + 104))(this, 0, &v54);
    v11 = v54;
    (*(void (**)(HBlackHole *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 1, &v54);
    v12 = v54;
    v13 = *((float *)&v54 + 2);
    (*(void (**)(HBlackHole *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 8, &v54);
    v14 = v54;
    (*(void (**)(HBlackHole *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 9, &v54);
    v15 = *((float *)&v54 + 1);
    v16 = *(float *)&v54;
    v42 = v13;
    if ((int)v5 - 2 <= (int)v4 + 2)
    {
      v18 = var3 + 2;
      v17 = var1 - 2;
      v40 = v54;
      v20 = v5 - 5;
      v19 = -3.40282347e38;
      v43 = 3.40282347e38;
      v45 = 3.40282347e38;
      v48 = -3.40282347e38;
      v21 = *(float *)&v54;
      v22 = *((float *)&v54 + 1);
      do
      {
        *(double *)&v54 = (double)(v20 + 3);
        *((double *)&v54 + 1) = (double)(var3 + 2);
        *(double *)&v53 = *(double *)&v54;
        *((double *)&v53 + 1) = (double)v17;
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        v23 = v43;
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v21;
        v49.f64[1] = v22;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v54, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        v54 = v52;
        if (*(double *)&v52 < v43)
          v23 = *(double *)&v54;
        if (*((double *)&v52 + 1) >= v45)
          v24 = v45;
        else
          v24 = *((double *)&v54 + 1);
        v46 = v24;
        if (*(double *)&v52 <= v19)
          v25 = v19;
        else
          v25 = *(double *)&v52;
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        if (*((double *)&v52 + 1) <= v48)
          v26 = v48;
        else
          v26 = *((double *)&v52 + 1);
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v21;
        v49.f64[1] = v22;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v53, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        v53 = v52;
        if (*(double *)&v52 >= v23)
          v27 = v23;
        else
          v27 = *(double *)&v52;
        v28 = v46;
        if (*((double *)&v52 + 1) < v46)
          v28 = *((double *)&v52 + 1);
        v43 = v27;
        v45 = v28;
        if (*(double *)&v52 <= v25)
          v19 = v25;
        else
          v19 = *(double *)&v52;
        if (*((double *)&v52 + 1) <= v26)
          v29 = v26;
        else
          v29 = *((double *)&v52 + 1);
        v48 = v29;
        ++v20;
      }
      while ((_DWORD)v4 != v20);
      v15 = *((float *)&v40 + 1);
      v16 = *(float *)&v40;
    }
    else
    {
      v17 = var1 - 2;
      v18 = var3 + 2;
      v19 = -3.40282347e38;
      v45 = 3.40282347e38;
      v48 = -3.40282347e38;
      v43 = 3.40282347e38;
    }
    if (v17 <= v18)
    {
      v31 = var3 + 3;
      v41 = v15;
      v30 = v19;
      v32 = v16;
      do
      {
        *(double *)&v54 = (double)((int)v5 - 2);
        *((double *)&v54 + 1) = (double)v17;
        *(double *)&v53 = (double)((int)v4 + 2);
        *((double *)&v53 + 1) = (double)v17;
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v32;
        v49.f64[1] = v41;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v54, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        v54 = v52;
        if (*(double *)&v52 >= v43)
          v33 = v43;
        else
          v33 = *(double *)&v54;
        v34 = v45;
        if (*((double *)&v52 + 1) < v45)
          v34 = *((double *)&v54 + 1);
        v44 = v33;
        v47 = v34;
        if (*(double *)&v52 > v30)
          v30 = *(double *)&v52;
        v51.f64[0] = *(float *)&v11;
        v51.f64[1] = *((float *)&v11 + 1);
        if (*((double *)&v52 + 1) <= v48)
          v35 = v48;
        else
          v35 = *((double *)&v52 + 1);
        v50.f64[0] = *(float *)&v14;
        v50.f64[1] = *((float *)&v14 + 1);
        v49.f64[0] = v32;
        v49.f64[1] = v41;
        HBlackHole::TransformPoint((uint64_t)this, (double *)&v53, &v51, &v50, &v49, (uint64_t)&v52, *(float *)&v12, *((float *)&v12 + 1), v42);
        v53 = v52;
        if (*(double *)&v52 >= v44)
          v36 = v44;
        else
          v36 = *(double *)&v52;
        v37 = v47;
        if (*((double *)&v52 + 1) < v47)
          v37 = *((double *)&v52 + 1);
        v43 = v36;
        v45 = v37;
        if (*(double *)&v52 > v30)
          v30 = *(double *)&v52;
        if (*((double *)&v52 + 1) <= v35)
          v38 = v35;
        else
          v38 = *((double *)&v52 + 1);
        v48 = v38;
        ++v17;
      }
      while (v31 != v17);
    }
    else
    {
      v30 = v19;
    }
    v9 = HGRectUnion((int)(v43 + -2.0) | ((unint64_t)(int)(v45 + -2.0) << 32), (int)(v30 + 2.0) | ((unint64_t)(int)(v48 + 2.0) << 32), v5, v4);
    v10 = HIDWORD(v9);
  }
  return v9 | (v10 << 32);
}

uint64_t HBlackHole::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v6;
  uint64_t v7;

  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v7 = v6;
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 8, (float)(int)DOD, (float)SHIDWORD(DOD), 0.0, 0.0);
  (*(void (**)(HGNode *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 9, (float)(int)v7, (float)SHIDWORD(v7), 0.0, 0.0);
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
    (*(void (**)(HGNode *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  return HgcBlackHole::GetOutput((HgcBlackHole *)this, a2);
}

void HBlackHole::~HBlackHole(HGNode *this)
{
  void *v1;

  HgcBlackHole::~HgcBlackHole(this);
  HGObject::operator delete(v1);
}

uint64_t PCMatrix44Tmpl<double>::transform<float>(double *a1, float *a2, uint64_t a3)
{
  double v3;
  double v4;
  float v5;
  double v6;
  float v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a1[15] + a1[12] * v3 + a1[13] * v4;
  v6 = v5;
  v7 = (a1[3] + *a1 * v3 + a1[1] * v4) / v6;
  *(float *)&v3 = (a1[7] + a1[4] * v3 + a1[5] * v4) / v6;
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 4) = LODWORD(v3);
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = *a1 * v3 + a1[1] * v4 + a1[2] * v5 + a1[3] * v6;
  v8 = a1[4] * v3 + a1[5] * v4 + a1[6] * v5 + a1[7] * v6;
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v8;
  v9 = a1[8] * v3 + a1[9] * v4 + a1[10] * v5 + a1[11] * v6;
  *(float *)&v3 = a1[12] * v3 + a1[13] * v4 + a1[14] * v5 + a1[15] * v6;
  *(float *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = LODWORD(v3);
  return a3;
}

uint64_t HBulge::RenderTile(HBulge *this, float32x4_t **a2)
{
  int v3;
  float32x4_t *v4;
  size_t v5;
  uint64_t v6;

  if (a2[10])
    return HgcBulge::RenderTile(this, a2);
  v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v3 >= 1)
  {
    v4 = a2[2];
    v5 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    v6 = 16 * *((int *)a2 + 6);
    do
    {
      bzero(v4, v5);
      v4 = (float32x4_t *)((char *)v4 + v6);
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t HBulge::GetDOD(HBulge *this, HGRenderer *a2, int a3, HGRect a4)
{
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    (*(void (**)(HBulge *, _QWORD, float *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 0, &v9, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
    v6 = v9;
    v5 = v10;
    (*(void (**)(HBulge *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v9);
    v7 = v9;
    (*(void (**)(HBulge *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v9);
    *(_QWORD *)&a4.var0 = HGRectMake4i(vcvtmd_s64_f64((float)(v6 - (float)(v9 / v7)) + 0.0000001), vcvtmd_s64_f64((float)(v5 - (float)(v10 / v7)) + 0.0000001), vcvtpd_s64_f64((float)(v6 - (float)(v9 / v7)) + (float)((float)(v9 / v7) + (float)(v9 / v7))), vcvtpd_s64_f64((float)(v5 - (float)(v10 / v7)) + (float)((float)(v10 / v7)+ (float)(v10 / v7))));
  }
  return *(_QWORD *)&a4.var0;
}

unint64_t HBulge::GetROI(HBulge *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var1;
  int var3;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  double v17;
  float v18;
  double v19;
  _BOOL4 v20;
  float v21;
  float v22;
  float v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  double v31;
  float v32;
  double v33;
  float v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  double v55;
  double v56;
  double v57;
  BOOL v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float v70;
  double v71;
  float v72;
  double v73;
  float v74;
  double v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  double v85;
  double v86;
  double v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  double v95;
  double v96;
  double v97;
  BOOL v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  double v106;
  double v107;
  double v108;
  double v109;
  float v111;
  float v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var1 = a4.var1;
    var3 = a4.var3;
    (*(void (**)(HBulge *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v111);
    v11 = v111;
    v12 = v112;
    (*(void (**)(HBulge *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v111);
    v13 = v111;
    v14 = v112;
    (*(void (**)(HBulge *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v111);
    v15 = v11;
    v16 = v12;
    v17 = v111;
    v18 = (float)var0;
    v19 = v112;
    v20 = v11 >= (float)var0;
    v21 = (float)var2;
    if (v11 > (float)var2)
      v20 = 0;
    v22 = (float)var1;
    v23 = (float)var3;
    v24 = v12 >= (float)var1;
    if (v12 > (float)var3)
      v24 = 0;
    if (v18 <= v21)
    {
      v29 = ((double)var1 - v16) / v19;
      v30 = v29;
      v31 = ((double)var3 - v16) / v19;
      v32 = v31;
      v33 = (v16 - v16) / v19;
      v34 = v33;
      v27 = -3.40282347e38;
      v28 = 3.40282347e38;
      v25 = 3.40282347e38;
      v26 = -3.40282347e38;
      do
      {
        v35 = (v18 - v15) / v17;
        v36 = v35;
        v37 = v36 * v36;
        v38 = sqrtf((float)(v30 * v30) + (float)(v36 * v36));
        if (v36 == 0.0 && v30 == 0.0)
          v38 = 0.0;
        v39 = 1.0 - (float)(v13 * v38);
        v40 = fmaxf(v39, 0.0);
        if (v39 >= 1.0)
          v41 = 1.0;
        else
          v41 = v40;
        v42 = fmaxf(v41, 0.0);
        if (v41 >= 1.0)
          v43 = 1.0;
        else
          v43 = v42;
        v44 = (3.0 - (v43 + v43)) * (float)(v43 * v43);
        v45 = (float)((float)(v14 * v44) + 1.0);
        v46 = v35 * v45 * v17 + v15;
        v47 = v29 * v45 * v19 + v16;
        if (v46 < v25)
          v25 = v46;
        if (v47 < v28)
          v28 = v47;
        if (v46 > v26)
          v26 = v46;
        if (v47 > v27)
          v27 = v47;
        v48 = sqrtf((float)(v32 * v32) + v37);
        if (v36 == 0.0 && v32 == 0.0)
          v48 = 0.0;
        v49 = 1.0 - (float)(v13 * v48);
        v50 = fmaxf(v49, 0.0);
        if (v49 >= 1.0)
          v51 = 1.0;
        else
          v51 = v50;
        v52 = fmaxf(v51, 0.0);
        if (v51 >= 1.0)
          v53 = 1.0;
        else
          v53 = v52;
        v54 = (3.0 - (v53 + v53)) * (float)(v53 * v53);
        v55 = (float)((float)(v14 * v54) + 1.0);
        v56 = v35 * v55 * v17 + v15;
        v57 = v31 * v55 * v19 + v16;
        if (v56 < v25)
          v25 = v56;
        if (v57 < v28)
          v28 = v57;
        if (v56 > v26)
          v26 = v56;
        if (v57 > v27)
          v27 = v57;
        if (v24)
        {
          v58 = v34 == 0.0 && v36 == 0.0;
          v59 = sqrtf((float)(v34 * v34) + v37);
          if (v58)
            v59 = 0.0;
          v60 = 1.0 - (float)(v13 * v59);
          v61 = fmaxf(v60, 0.0);
          if (v60 >= 1.0)
            v62 = 1.0;
          else
            v62 = v61;
          v63 = fmaxf(v62, 0.0);
          if (v62 >= 1.0)
            v64 = 1.0;
          else
            v64 = v63;
          v65 = (3.0 - (v64 + v64)) * (float)(v64 * v64);
          v66 = (float)((float)(v14 * v65) + 1.0);
          v67 = v35 * v66 * v17 + v15;
          v68 = v33 * v66 * v19 + v16;
          if (v67 < v25)
            v25 = v67;
          if (v68 < v28)
            v28 = v68;
          if (v67 > v26)
            v26 = v67;
          if (v68 > v27)
            v27 = v68;
        }
        v18 = v18 + 1.0;
      }
      while (v18 <= v21);
    }
    else
    {
      v25 = 3.40282347e38;
      v26 = -3.40282347e38;
      v27 = -3.40282347e38;
      v28 = 3.40282347e38;
    }
    if (v22 <= v23)
    {
      v69 = ((double)var0 - v15) / v17;
      v70 = v69;
      v71 = ((double)var2 - v15) / v17;
      v72 = v71;
      v73 = (v15 - v15) / v17;
      v74 = v73;
      do
      {
        v75 = (v22 - v16) / v19;
        v76 = v75;
        v77 = v76 * v76;
        v78 = sqrtf((float)(v70 * v70) + (float)(v76 * v76));
        if (v70 == 0.0 && v76 == 0.0)
          v78 = 0.0;
        v79 = 1.0 - (float)(v13 * v78);
        v80 = fmaxf(v79, 0.0);
        if (v79 >= 1.0)
          v81 = 1.0;
        else
          v81 = v80;
        v82 = fmaxf(v81, 0.0);
        if (v81 >= 1.0)
          v83 = 1.0;
        else
          v83 = v82;
        v84 = (3.0 - (v83 + v83)) * (float)(v83 * v83);
        v85 = (float)((float)(v14 * v84) + 1.0);
        v86 = v69 * v85 * v17 + v15;
        v87 = v75 * v85 * v19 + v16;
        if (v86 < v25)
          v25 = v86;
        if (v87 < v28)
          v28 = v87;
        if (v86 > v26)
          v26 = v86;
        if (v87 > v27)
          v27 = v87;
        v88 = sqrtf((float)(v72 * v72) + v77);
        if (v72 == 0.0 && v76 == 0.0)
          v88 = 0.0;
        v89 = 1.0 - (float)(v13 * v88);
        v90 = fmaxf(v89, 0.0);
        if (v89 >= 1.0)
          v91 = 1.0;
        else
          v91 = v90;
        v92 = fmaxf(v91, 0.0);
        if (v91 >= 1.0)
          v93 = 1.0;
        else
          v93 = v92;
        v94 = (3.0 - (v93 + v93)) * (float)(v93 * v93);
        v95 = (float)((float)(v14 * v94) + 1.0);
        v96 = v71 * v95 * v17 + v15;
        v97 = v75 * v95 * v19 + v16;
        if (v96 < v25)
          v25 = v96;
        if (v97 < v28)
          v28 = v97;
        if (v96 > v26)
          v26 = v96;
        if (v97 > v27)
          v27 = v97;
        if (v20)
        {
          v98 = v76 == 0.0 && v74 == 0.0;
          v99 = sqrtf((float)(v74 * v74) + v77);
          if (v98)
            v99 = 0.0;
          v100 = 1.0 - (float)(v13 * v99);
          v101 = fmaxf(v100, 0.0);
          if (v100 >= 1.0)
            v102 = 1.0;
          else
            v102 = v101;
          v103 = fmaxf(v102, 0.0);
          if (v102 >= 1.0)
            v104 = 1.0;
          else
            v104 = v103;
          v105 = (3.0 - (v104 + v104)) * (float)(v104 * v104);
          v106 = (float)((float)(v14 * v105) + 1.0);
          v107 = v75 * v106;
          v108 = v73 * v106 * v17 + v15;
          v109 = v107 * v19 + v16;
          if (v108 < v25)
            v25 = v108;
          if (v109 < v28)
            v28 = v109;
          if (v108 > v26)
            v26 = v108;
          if (v109 > v27)
            v27 = v109;
        }
        v22 = v22 + 1.0;
      }
      while (v22 <= v23);
    }
    v4 = (int)(v25 + -2.0);
    v5 = (int)(v28 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HBulge::GetOutput(HBulge *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
    (*(void (**)(HBulge *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  return HgcBulge::GetOutput(this, a2);
}

void HBulge::~HBulge(HGNode *this)
{
  void *v1;

  HgcBulge::~HgcBulge(this);
  HGObject::operator delete(v1);
}

uint64_t HBumpMap::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

unint64_t HBumpMap::GetROI(HBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[32];
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  float64x2_t v17;
  int8x16_t v18;
  float32x4_t v19;
  unint64_t v20;
  float v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  float32x2_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  _BYTE v49[24];
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = 0;
  else
    v5 = *(_QWORD *)&a4.var2;
  if (a3)
    v6 = 0;
  else
    v6 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    v7 = *(_QWORD *)&a4.var2;
    v8 = *(_QWORD *)&a4.var0;
    (*(void (**)(HBumpMap *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 5, v49);
    v9 = *(float *)v49;
    (*(void (**)(HBumpMap *, _QWORD, _BYTE *))(*(_QWORD *)this + 104))(this, 0, v49);
    if (v9 <= 1.0)
    {
      v21 = vmuls_lane_f32(255.0, *(float32x2_t *)v49, 1);
      v22 = vcvtms_s32_f32((float)(255.0 * *(float *)v49) + (float)(int)v8);
      v23 = vcvtms_s32_f32(v21 + (float)SHIDWORD(v8));
      if (v22 >= (int)v8)
        LODWORD(v6) = v8;
      else
        LODWORD(v6) = v22;
      if (v23 >= SHIDWORD(v8))
        LODWORD(v20) = HIDWORD(v8);
      else
        LODWORD(v20) = v23;
      v24 = vcvtps_s32_f32((float)(255.0 * *(float *)v49) + (float)(int)v7);
      LODWORD(v10) = vcvtps_s32_f32(v21 + (float)SHIDWORD(v7));
      if (v24 <= (int)v7)
        v24 = v7;
      if ((int)v10 <= SHIDWORD(v7))
        v25 = v7 & 0xFFFFFFFF00000000;
      else
        v25 = v10 << 32;
      v5 = v25 & 0xFFFFFFFF00000000 | v24;
    }
    else
    {
      v36 = *(float32x2_t *)v49;
      (*(void (**)(HBumpMap *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 1, v49);
      v11 = *(_OWORD *)v49;
      (*(void (**)(HBumpMap *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 2, v49);
      v12 = *(_OWORD *)v49;
      (*(void (**)(HBumpMap *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 3, v49);
      *(_OWORD *)v13 = *(_OWORD *)v49;
      (*(void (**)(HBumpMap *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 4, v49);
      *(_OWORD *)&v13[16] = *(_OWORD *)v49;
      v55 = 1065353216;
      v52 = 1065353216;
      v51 = 0;
      v53 = 0;
      v54 = 0;
      *(_QWORD *)v49 = v11;
      *(_OWORD *)&v49[8] = *(__int128 *)((char *)&v11 + 8);
      v50 = *((_QWORD *)&v12 + 1);
      *(float *)v48.i32 = (float)(int)v8;
      *(float *)&v48.i32[1] = (float)SHIDWORD(v8);
      v48.i64[1] = 0x3F80000000000000;
      *(float *)v47.i32 = (float)(int)v7;
      *(float *)&v47.i32[1] = (float)SHIDWORD(v7);
      v47.i64[1] = 0x3F80000000000000;
      PCMatrix44Tmpl<float>::transform<float>((float *)v49, (float *)v48.i32, (float *)v48.i32);
      PCMatrix44Tmpl<float>::transform<float>((float *)v49, (float *)v47.i32, (float *)v47.i32);
      v14 = 0;
      v16 = v47;
      v15 = v48;
      v17 = vcvtq_f64_f32(v36);
      do
      {
        v18 = (int8x16_t)vmulq_n_f64(v17, (float)v14 * 255.0);
        *(float32x2_t *)v19.f32 = vcvt_f32_f64(vaddq_f64((float64x2_t)v18, vcvtq_f64_f32(*(float32x2_t *)v15.i8)));
        *(float32x2_t *)v18.i8 = vcvt_f32_f64(vaddq_f64((float64x2_t)v18, vcvtq_f64_f32(*(float32x2_t *)v16.i8)));
        v19.i64[1] = 0x3F80000000000000;
        v15 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, v19), (int8x16_t)v19, v15);
        v18.i64[1] = 0x3F80000000000000;
        v16 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v18, (float32x4_t)v16), v18, v16);
        ++v14;
      }
      while (v14 != 2);
      v45 = v16;
      v46 = v15;
      v44 = 1065353216;
      v41 = 1065353216;
      v40 = 0;
      v43 = 0;
      v42 = 0;
      v37 = *(_QWORD *)v13;
      v38 = *(_OWORD *)&v13[8];
      v39 = *(_QWORD *)&v13[24];
      PCMatrix44Tmpl<float>::transform<float>((float *)&v37, (float *)v46.i32, (float *)v46.i32);
      PCMatrix44Tmpl<float>::transform<float>((float *)&v37, (float *)v45.i32, (float *)v45.i32);
      v6 = HGRectMake4i(vcvtms_s32_f32(*(float *)v46.i32), vcvtms_s32_f32(*(float *)&v46.i32[1]), vcvtps_s32_f32(*(float *)v45.i32), vcvtps_s32_f32(*(float *)&v45.i32[1]));
      v20 = HIDWORD(v6);
    }
  }
  else
  {
    v20 = HIDWORD(v6);
  }
  v26 = (v20 - 1);
  v27 = v5 + 1;
  v28 = ((v5 & 0xFFFFFFFF00000000) + 0x100000000) >> 32;
  if ((int)v6 < -2147483645
    || v27 == 0x7FFFFFFF
    || v27 < -2147483646
    || (int)v20 < -2147483645
    || (_DWORD)v28 == 0x7FFFFFFF
    || (int)v28 < -2147483646)
  {
    return 0;
  }
  else
  {
    return (v6 - 1) | (unint64_t)(v26 << 32);
  }
}

uint64_t HBumpMap::GetOutput(HBumpMap *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
  {
    (*(void (**)(HBumpMap *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 2);
    (*(void (**)(HBumpMap *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  }
  return HgcBumpMap::GetOutput(this, a2);
}

void HBumpMap::~HBumpMap(HGNode *this)
{
  void *v1;

  HgcBumpMap::~HgcBumpMap(this);
  HGObject::operator delete(v1);
}

uint64_t HDisplace::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

double TransformPoint@<D0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double result;

  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = (float)((float)((float)((float)(*a1 * *a4) + (float)(v7 * a4[1])) + (float)(v8 * a4[2])) + (float)(v9 * a4[3]))
      + (float)(*a6 * 255.0);
  v11 = (float)((float)((float)((float)(*a1 * *a5) + (float)(v7 * a5[1])) + (float)(v8 * a5[2])) + (float)(v9 * a5[3]))
      + (float)(a6[1] * 255.0);
  v12 = (float)(a6[2] * 255.0) + 0.0;
  v13 = (float)(a6[3] * 255.0) + 1.0;
  v14 = (float)((float)((float)(v10 * *a2) + (float)(v11 * a2[1])) + (float)(v12 * a2[2])) + (float)(v13 * a2[3]);
  v15 = (float)(v10 * *a3) + (float)(v11 * a3[1]);
  v16 = v12 * a3[2];
  v17 = v13 * a3[3];
  *(float *)a7 = v14;
  *(float *)(a7 + 4) = (float)(v15 + v16) + v17;
  result = 0.0078125;
  *(_QWORD *)(a7 + 8) = 0x3F80000000000000;
  return result;
}

unint64_t HDisplace::GetROI(HDisplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  int var1;
  int var3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v27 = *MEMORY[0x1E0C80C00];
  var1 = a4.var1;
  if (a3 == 1)
  {
    var3 = a4.var3;
    (*(void (**)(HDisplace *, _QWORD, __int128 *))(*(_QWORD *)this + 104))(this, 0, &v26);
    v25 = v26;
    (*(void (**)(HDisplace *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 1, &v26);
    v24 = v26;
    (*(void (**)(HDisplace *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 2, &v26);
    v23 = v26;
    (*(void (**)(HDisplace *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 3, &v26);
    v22 = v26;
    (*(void (**)(HDisplace *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 4, &v26);
    v21 = v26;
    *(float *)&v20 = (float)(int)v5;
    *((float *)&v20 + 1) = (float)var1;
    *((_QWORD *)&v20 + 1) = 0x3F80000000000000;
    *(float *)&v19 = (float)(int)v4;
    *((float *)&v19 + 1) = (float)var3;
    *((_QWORD *)&v19 + 1) = 0x3F80000000000000;
    TransformPoint((float *)&v20, (float *)&v25, (float *)&v24, (float *)&v23, (float *)&v22, (float *)&v21, (uint64_t)&v18);
    v20 = v18;
    TransformPoint((float *)&v19, (float *)&v25, (float *)&v24, (float *)&v23, (float *)&v22, (float *)&v21, (uint64_t)&v18);
    v19 = v18;
    LODWORD(v9) = vcvtms_s32_f32(*(float *)&v20);
    LODWORD(v10) = vcvtms_s32_f32(*((float *)&v20 + 1));
    LODWORD(v11) = vcvtps_s32_f32(*(float *)&v18);
    LODWORD(v12) = vcvtps_s32_f32(*((float *)&v18 + 1));
    v13 = HGRectUnion(v9 | (v10 << 32), v11 | (v12 << 32), v5, v4);
    v14 = HIDWORD(v13);
    v15 = v13 - 1;
    v16 = v14 - 1;
  }
  else
  {
    if (a3)
      v15 = 0;
    else
      v15 = a4.var0 - 1;
    if (a3)
      v16 = 0;
    else
      v16 = a4.var1 - 1;
  }
  return v15 | ((unint64_t)v16 << 32);
}

void HDisplace::~HDisplace(HGNode *this)
{
  void *v1;

  HgcDisplace::~HgcDisplace(this);
  HGObject::operator delete(v1);
}

unint64_t HFisheye::GetROI(float32x4_t *this, HGRenderer *a2, int a3, HGRect a4, double a5, double a6, __n128 a7)
{
  unint64_t v7;
  uint64_t v8;
  int32x2_t v10;
  float var3;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float v19;
  int32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float v27;
  float v28;
  int32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float v38;
  int32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float v46;
  int32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float var0;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x2_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float v96;
  float var2;
  float32x4_t v98;
  float32x4_t v99;
  __n128 v100;
  __n128 v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;

  if (a3)
  {
    LODWORD(v7) = 0;
    LODWORD(v8) = 0;
  }
  else
  {
    *(float *)v10.i32 = (float)a4.var2;
    a7.n128_f32[0] = (float)a4.var1;
    var3 = (float)a4.var3;
    v96 = (float)a4.var3;
    var2 = (float)a4.var2;
    var0 = (float)a4.var0;
    if ((float)a4.var0 <= (float)a4.var2)
    {
      v92 = this[30];
      v94 = this[29];
      v98 = this[33];
      v90 = this[32];
      v14 = this[31].f32[0];
      v13 = (float32x4_t)xmmword_1B30503A0;
      v12 = (float32x4_t)xmmword_1B3050390;
      v15 = this[27];
      v86 = this[28];
      v88 = v15;
      v15.f32[0] = (float)a4.var0;
      v100 = a7;
      do
      {
        v102 = v12;
        v106 = v13;
        v83 = v15;
        v16.i64[0] = __PAIR64__(a7.n128_u32[0], v15.u32[0]);
        v15.f32[1] = var3;
        v79 = v15.i64[0];
        v16.i64[1] = 0x3F80000000000000;
        v17 = (int8x16_t)vmulq_f32(v16, v94);
        *(float32x2_t *)v17.i8 = vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
        v18 = (int8x16_t)vmulq_f32(v16, v92);
        *(float32x2_t *)v18.i8 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
        *(float32x2_t *)v18.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v18.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v18.i8));
        v75 = vsubq_f32((float32x4_t)v18, v98);
        v76 = (int8x16_t)vmulq_f32(v90, vmulq_f32(v75, v75));
        v19 = sqrtf(vaddv_f32(*(float32x2_t *)v76.i8));
        *(float *)v20.i32 = powf(v19, v14) / v19;
        *(float32x2_t *)v21.f32 = vmul_f32(*(float32x2_t *)v75.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v20, 0));
        v21.i64[1] = 0x3F80000000000000;
        v22 = vaddq_f32(v98, v21);
        v23 = (int8x16_t)vmulq_f32(v88, v22);
        *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        v24 = (int8x16_t)vmulq_f32(v86, v22);
        *(float32x2_t *)v24.i8 = vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        *(float32x2_t *)v24.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8));
        v24.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
        v103 = vminnmq_f32((float32x4_t)v24, v102);
        v107 = vmaxnmq_f32((float32x4_t)v24, v106);
        v23.i64[0] = v79;
        v23.i64[1] = 0x3F80000000000000;
        v25 = (int8x16_t)vmulq_f32((float32x4_t)v23, v94);
        *(float32x2_t *)v25.i8 = vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
        v26 = (int8x16_t)vmulq_f32((float32x4_t)v23, v92);
        *(float32x2_t *)v26.i8 = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
        *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v26.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v26.i8));
        v77 = vsubq_f32((float32x4_t)v25, v98);
        v80 = (int8x16_t)vmulq_f32(v90, vmulq_f32(v77, v77));
        v27 = sqrtf(vaddv_f32(*(float32x2_t *)v80.i8));
        v28 = powf(v27, v14);
        var3 = v96;
        *(float *)v29.i32 = v28 / v27;
        *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v77.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v29, 0));
        v15 = v83;
        v30.i64[1] = 0x3F80000000000000;
        v31 = vaddq_f32(v98, v30);
        v32 = (int8x16_t)vmulq_f32(v88, v31);
        v33 = (int8x16_t)vmulq_f32(v86, v31);
        v10 = (int32x2_t)vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
        *(float32x2_t *)v33.i8 = vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
        *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)vzip1_s32(v10, *(int32x2_t *)v33.i8), (float32x2_t)vzip2_s32(v10, *(int32x2_t *)v33.i8));
        a7 = v100;
        v33.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
        *(float *)v10.i32 = var2;
        v12 = vminnmq_f32((float32x4_t)v33, v103);
        v15.f32[0] = v83.f32[0] + 1.0;
        v13 = vmaxnmq_f32((float32x4_t)v33, v107);
      }
      while ((float)(v83.f32[0] + 1.0) <= var2);
    }
    else
    {
      v12 = (float32x4_t)xmmword_1B3050390;
      v13 = (float32x4_t)xmmword_1B30503A0;
    }
    if (a7.n128_f32[0] <= var3)
    {
      v93 = this[30];
      v95 = this[29];
      v99 = this[33];
      v34 = this[31].f32[0];
      v89 = this[27];
      v91 = this[32];
      v87 = this[28];
      do
      {
        v104 = v12;
        v108 = v13;
        v101 = a7;
        v35.i64[0] = __PAIR64__(a7.n128_u32[0], LODWORD(var0));
        v10.i32[1] = a7.n128_u32[0];
        v84 = v10;
        v35.i64[1] = 0x3F80000000000000;
        v36 = (int8x16_t)vmulq_f32(v35, v95);
        *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
        v37 = (int8x16_t)vmulq_f32(v35, v93);
        *(float32x2_t *)v37.i8 = vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
        *(float32x2_t *)v37.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v37.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v37.i8));
        v78 = vsubq_f32((float32x4_t)v37, v99);
        v81 = (int8x16_t)vmulq_f32(v91, vmulq_f32(v78, v78));
        v38 = sqrtf(vaddv_f32(*(float32x2_t *)v81.i8));
        *(float *)v39.i32 = powf(v38, v34) / v38;
        *(float32x2_t *)v40.f32 = vmul_f32(*(float32x2_t *)v78.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v39, 0));
        v40.i64[1] = 0x3F80000000000000;
        v41 = vaddq_f32(v99, v40);
        v42 = (int8x16_t)vmulq_f32(v89, v41);
        *(float32x2_t *)v42.i8 = vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
        v43 = (int8x16_t)vmulq_f32(v87, v41);
        *(float32x2_t *)v43.i8 = vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
        *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v43.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v43.i8));
        v43.i64[1] = vextq_s8(v81, v81, 8uLL).u64[0];
        v105 = vminnmq_f32((float32x4_t)v43, v104);
        v109 = vmaxnmq_f32((float32x4_t)v43, v108);
        *(int32x2_t *)v42.i8 = v84;
        v42.i64[1] = 0x3F80000000000000;
        v44 = (int8x16_t)vmulq_f32((float32x4_t)v42, v95);
        *(float32x2_t *)v44.i8 = vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
        v45 = (int8x16_t)vmulq_f32((float32x4_t)v42, v93);
        *(float32x2_t *)v45.i8 = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
        *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v44.i8, *(int32x2_t *)v45.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v44.i8, *(int32x2_t *)v45.i8));
        v82 = vsubq_f32((float32x4_t)v44, v99);
        v85 = (int8x16_t)vmulq_f32(v91, vmulq_f32(v82, v82));
        v46 = sqrtf(vaddv_f32(*(float32x2_t *)v85.i8));
        *(float *)v47.i32 = powf(v46, v34) / v46;
        *(float32x2_t *)v48.f32 = vmul_f32(*(float32x2_t *)v82.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v47, 0));
        v48.i64[1] = 0x3F80000000000000;
        v49 = vaddq_f32(v99, v48);
        v50 = (int8x16_t)vmulq_f32(v89, v49);
        v51 = (int8x16_t)vmulq_f32(v87, v49);
        v10 = (int32x2_t)vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
        *(float32x2_t *)v51.i8 = vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
        *(float32x2_t *)v51.i8 = vadd_f32((float32x2_t)vzip1_s32(v10, *(int32x2_t *)v51.i8), (float32x2_t)vzip2_s32(v10, *(int32x2_t *)v51.i8));
        a7 = v101;
        v51.i64[1] = vextq_s8(v85, v85, 8uLL).u64[0];
        v12 = vminnmq_f32((float32x4_t)v51, v105);
        a7.n128_f32[0] = v101.n128_f32[0] + 1.0;
        *(float *)v10.i32 = var2;
        v13 = vmaxnmq_f32((float32x4_t)v51, v109);
      }
      while ((float)(v101.n128_f32[0] + 1.0) <= v96);
    }
    v52 = (int)v12.f32[0];
    v53 = (int)v12.f32[1];
    v54 = (int)v13.f32[0];
    v55 = (int)v13.f32[1];
    if ((v52 - 0x7FFFFFFF) < 3
      || (_DWORD)v54 == 0x7FFFFFFF
      || (int)v54 < -2147483646
      || (_DWORD)v53 == 0x7FFFFFFF
      || (int)v53 < -2147483646
      || (_DWORD)v55 == 0x7FFFFFFF
      || (int)v55 < -2147483646)
    {
      LODWORD(v7) = 0;
      LODWORD(v8) = 0;
    }
    else
    {
      v62 = v54 | (v55 << 32);
      if ((_DWORD)v54 == (_DWORD)v52)
      {
        v63 = v52 | (v53 << 32);
        v64 = HGRectMake4f(v53, 0.0, 0.0, 1.0, 0.0);
        v52 = HGRectGrow(v63, v62, v64);
        v62 = v65;
        v53 = HIDWORD(v52);
      }
      if ((_DWORD)v53 == HIDWORD(v62))
      {
        v66 = v52 | (unint64_t)(v53 << 32);
        v67 = HGRectMake4f(v53, 0.0, 0.0, 0.0, 1.0);
        v52 = HGRectGrow(v66, v62, v67);
        v62 = v68;
        v53 = HIDWORD(v52);
      }
      v7 = HGRectIntersection(v52 | (unint64_t)(v53 << 32), v62, this[26].i64[0], this[26].i64[1]);
      v70 = v69;
      v8 = HIDWORD(v7);
      if ((HIDWORD(v69) - HIDWORD(v7)) * ((_DWORD)v69 - (_DWORD)v7))
      {
        v71 = HGRectMake4f(v8, -2.0, -2.0, 2.0, 2.0);
        v72 = HGRectGrow(v7, v70, v71);
        LODWORD(v7) = v72;
        v8 = HIDWORD(v72);
      }
    }
  }
  return v7 | ((unint64_t)v8 << 32);
}

uint64_t HFisheye::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;

  if (a3)
  {
    v5 = &HGRectNull;
  }
  else
  {
    *(_QWORD *)(a1 + 416) = a4;
    *(_QWORD *)(a1 + 424) = a5;
    v5 = &HGRectInfinite;
  }
  return *(_QWORD *)v5;
}

uint64_t HFisheye::RenderTile(float32x4_t *this, HGTile *a2)
{
  int32x2_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int32 v14;
  int32x2_t v15;
  unsigned __int32 v16;
  int v17;
  float32x4_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  int8x8_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float v29;
  float v30;
  int32x4_t v31;
  int32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  uint64_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  HGRect v59;

  v59 = (HGRect)*((_OWORD *)a2 + 13);
  if (HGRect::IsNull(&v59))
  {
    v5 = *((int *)a2 + 3);
    v6 = *((int *)a2 + 1);
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      v7 = *((int *)a2 + 6);
      v8 = (char *)*((_QWORD *)a2 + 2);
      v9 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      v10 = 16 * v7;
      v11 = v6 - v5;
      do
      {
        bzero(v8, v9);
        v8 += v10;
      }
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    v13 = HGTile::Renderer(a2);
    v14 = (*(uint64_t (**)(float32x4_t *, uint64_t))(this->i64[0] + 312))(this, v13);
    v15 = *(int32x2_t *)a2;
    v51 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
    if (v51 >= 1)
    {
      v16 = v14;
      v17 = 0;
      *(float32x2_t *)v18.f32 = vadd_f32(vcvt_f32_s32(v15), (float32x2_t)0x3F0000003F000000);
      v18.i64[1] = 0x3F80000000000000;
      v19 = *((_DWORD *)a2 + 2) - v15.i32[0];
      v20 = *((_QWORD *)a2 + 2);
      v21 = 16 * *((int *)a2 + 6);
      v22.i64[1] = 0x3F80000000000000;
      v2.i32[0] = v14;
      v22.i64[0] = v14 | 0x3F80000000000000;
      v54 = (int32x4_t)v22;
      v52 = v18;
      v53 = v18;
      do
      {
        if (v19 >= 1)
        {
          v23 = 0;
          v24 = v52;
          do
          {
            v22.i32[0] = 0;
            v25 = (int8x8_t)vdup_lane_s32(vceq_s32(v2, *(int32x2_t *)v22.f32), 0);
            v56 = v24;
            v26.i64[0] = v24.i64[0];
            v26.i64[1] = 0x3F80000000000000;
            v27 = (int8x16_t)vmulq_f32(v26, this[29]);
            *(float32x2_t *)v27.i8 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
            v28 = (int8x16_t)vmulq_f32(v26, this[30]);
            *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
            *(float32x2_t *)v28.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v28.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v28.i8));
            v57 = vsubq_f32((float32x4_t)v28, this[33]);
            v58 = this[33];
            v55 = (int8x16_t)vmulq_f32(this[32], vmulq_f32(v57, v57));
            v29 = sqrtf(vaddv_f32(*(float32x2_t *)v55.i8));
            v30 = powf(v29, this[31].f32[0]);
            v31.i32[0] = 0;
            *(float *)v32.i32 = v30 / v29;
            *(float32x2_t *)v33.f32 = vmul_f32(*(float32x2_t *)v57.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v32, 0));
            v33.i64[1] = 0x3F80000000000000;
            v34 = vaddq_f32(v58, v33);
            v35 = (int8x16_t)vmulq_f32(this[27], v34);
            *(float32x2_t *)v35.i8 = vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
            v36 = (int8x16_t)vmulq_f32(this[28], v34);
            *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
            *(float32x2_t *)v36.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v36.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v36.i8));
            *(float32x2_t *)v35.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)0xBF000000BF000000);
            *(int8x8_t *)v35.i8 = vbsl_s8(v25, (int8x8_t)vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)0x3F0000003F000000), *(int8x8_t *)v35.i8);
            v37 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v54, v31), 0), *((int8x16_t *)a2 + 13), (int8x16_t)vaddq_s32(*((int32x4_t *)a2 + 13), (int32x4_t)xmmword_1B30503B0));
            *(int32x2_t *)v35.i8 = vadd_s32(vcltz_f32(*(float32x2_t *)v35.i8), vcvt_s32_f32(*(float32x2_t *)v35.i8));
            *(int32x2_t *)v38.i8 = vcgt_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v35.i8);
            v38.u64[1] = (unint64_t)vcge_s32(*(int32x2_t *)v35.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
            if ((vmaxvq_u32(v38) & 0x80000000) != 0)
            {
              v22 = 0uLL;
            }
            else
            {
              v36.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
              v39 = *((int *)a2 + 22);
              v40 = vsubq_f32((float32x4_t)v36, v53);
              v41 = *((_QWORD *)a2 + 10);
              if (v16)
              {
                v42 = vaddq_s32(vcvtq_s32_f32(v40), vcltzq_f32(v40));
                v43 = (float32x2_t)vsubq_f32(v40, vcvtq_f32_s32(v42)).u64[0];
                v44 = (float32x4_t *)(v41 + 16 * (v42.i32[0] + v42.i32[1] * (int)v39));
                v45 = vaddq_f32(*v44, vmulq_n_f32(vsubq_f32(v44[1], *v44), v43.f32[0]));
                v22 = vaddq_f32(v45, vmulq_lane_f32(vsubq_f32(vaddq_f32(v44[v39], vmulq_n_f32(vsubq_f32(v44[(int)v39 + 1], v44[v39]), v43.f32[0])), v45), v43, 1));
              }
              else
              {
                v46.i64[0] = 0x3F0000003F000000;
                v46.i64[1] = 0x3F0000003F000000;
                v47 = vaddq_f32(v40, v46);
                v48 = vcvtq_s32_f32(v47);
                v47.i64[0] = vaddq_s32(v48, vcgtq_f32(vcvtq_f32_s32(v48), v47)).u64[0];
                v22 = *(float32x4_t *)(v41 + 16 * (v47.i32[0] + v47.i32[1] * (int)v39));
              }
            }
            v24 = v56;
            *(float32x4_t *)(v20 + v23) = v22;
            v24.f32[0] = v56.f32[0] + 1.0;
            v23 += 16;
          }
          while (16 * v19 != v23);
        }
        v49 = v52;
        v49.f32[1] = v52.f32[1] + 1.0;
        v52 = v49;
        ++v17;
        v20 += v21;
      }
      while (v17 != v51);
    }
  }
  return 0;
}

uint64_t HFisheye::SetParameter(HgcFisheye *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __int128 v7;
  char *v8;

  *(_QWORD *)&v7 = __PAIR64__(LODWORD(a4), a3.n128_u32[0]);
  *((_QWORD *)&v7 + 1) = __PAIR64__(LODWORD(a6), LODWORD(a5));
  switch((int)a2)
  {
    case 0:
      v8 = (char *)this + 432;
      goto LABEL_9;
    case 1:
      v8 = (char *)this + 448;
      goto LABEL_9;
    case 2:
      v8 = (char *)this + 464;
      goto LABEL_9;
    case 3:
      v8 = (char *)this + 480;
      goto LABEL_9;
    case 4:
      v8 = (char *)this + 496;
      goto LABEL_9;
    case 5:
      v8 = (char *)this + 512;
      goto LABEL_9;
    case 6:
      v8 = (char *)this + 528;
LABEL_9:
      *(_OWORD *)v8 = v7;
      break;
    default:
      return HgcFisheye::SetParameter(this, a2, a3, a4, a5, a6, a7);
  }
  return HgcFisheye::SetParameter(this, a2, a3, a4, a5, a6, a7);
}

void HFisheye::~HFisheye(HGNode *this)
{
  void *v1;

  HgcFisheye::~HgcFisheye(this);
  HGObject::operator delete(v1);
}

void sub_1B280B3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  _Unwind_Resume(a1);
}

void HFunHouse::HFunHouse(HFunHouse *this)
{
  _QWORD *v1;

  HgcFunHouse::HgcFunHouse(this);
  *v1 = off_1E64DD570;
}

uint64_t HFunHouse::GetDOD(HFunHouse *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
    return 0;
  v4 = HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
  v8 = v7;
  if ((*(int (**)(HFunHouse *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v9 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v8, v9);
  }
  return v4;
}

unint64_t HFunHouse::GetROI(HFunHouse *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var1;
  int var3;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  double v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0x80000000;
    v5 = 0x80000000;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var1 = a4.var1;
    var3 = a4.var3;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 5, &v94);
    v87 = v94;
    v92 = v95;
    (*(void (**)(HFunHouse *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v94);
    v11 = v94;
    v12 = v95;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v94);
    v13 = v95;
    v89 = v96;
    v90 = v94;
    v91 = v97;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v94);
    v14 = v94;
    v15 = v95;
    v16 = v96;
    v17 = v97;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v94);
    v18 = v94;
    (*(void (**)(HFunHouse *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, &v94);
    v19 = v87 * 0.5;
    v20 = (float)var0;
    v21 = v92 * 0.5;
    v88 = (float)var2;
    v22 = -v19;
    v23 = -(float)(v92 * 0.5);
    v93 = v13;
    if ((float)var0 <= (float)var2)
    {
      v29 = (float)((float)var1 - v12) / v95;
      v30 = v13 * v29;
      v31 = v91 * v29;
      v32 = v18 + -1.0;
      v85 = v18;
      v33 = (float)((float)var3 - v12) / v95;
      v34 = v13 * v33;
      v35 = v91 * v33;
      v27 = -3.4028e38;
      v28 = 3.4028e38;
      v25 = 3.4028e38;
      v26 = -3.4028e38;
      do
      {
        v36 = (float)(v20 - v11) / v94;
        v37 = v90 * v36;
        v38 = v30 + (float)(v90 * v36);
        v39 = 1.0 - fabsf(v38);
        v40 = 0.0;
        v41 = 0.0;
        if (v39 >= 0.0)
        {
          v41 = v39;
          if (v39 > 1.0)
            v41 = 1.0;
        }
        v42 = v89 * v36;
        v43 = (3.0 - (v41 + v41)) * (float)(v41 * v41);
        v44 = v32 * v43 + 1.0;
        v45 = v38 * v44;
        v46 = v11 + (float)(v94 * (float)((float)(v15 * (float)(v31 + v42)) + (float)(v14 * v45)));
        v47 = v12 + (float)(v95 * (float)((float)(v17 * (float)(v31 + v42)) + (float)(v16 * v45)));
        if (v46 <= v22)
          v46 = -v19;
        if (v47 <= v23)
          v47 = v23;
        if (v46 >= v19)
          v46 = v19;
        if (v47 >= v21)
          v47 = v21;
        if (v25 >= v46)
          v25 = v46;
        if (v28 >= v47)
          v28 = v47;
        if (v26 <= v46)
          v26 = v46;
        if (v27 <= v47)
          v27 = v47;
        v48 = fabsf(v34 + v37);
        if ((float)(1.0 - v48) >= 0.0)
        {
          v40 = 1.0 - v48;
          if ((float)(1.0 - v48) > 1.0)
            v40 = 1.0;
        }
        v49 = v35 + v42;
        v50 = (3.0 - (v40 + v40)) * (float)(v40 * v40);
        v51 = v32 * v50 + 1.0;
        v52 = (float)(v34 + v37) * v51;
        v53 = (float)(v15 * v49) + (float)(v14 * v52);
        v54 = (float)(v17 * v49) + (float)(v16 * v52);
        v55 = v11 + (float)(v94 * v53);
        v56 = v12 + (float)(v95 * v54);
        if (v55 <= v22)
          v55 = -v19;
        if (v56 <= v23)
          v56 = v23;
        if (v55 >= v19)
          v55 = v19;
        if (v56 >= v21)
          v56 = v21;
        if (v25 >= v55)
          v25 = v55;
        if (v28 >= v56)
          v28 = v56;
        if (v26 <= v55)
          v26 = v55;
        if (v27 <= v56)
          v27 = v56;
        v20 = v20 + 1.0;
      }
      while (v20 <= v88);
      v18 = v85;
      v24 = (float)var3;
      v20 = (float)var0;
    }
    else
    {
      v24 = (float)var3;
      v25 = 3.4028e38;
      v26 = -3.4028e38;
      v27 = -3.4028e38;
      v28 = 3.4028e38;
    }
    v57 = (float)(var1 + 1);
    v58 = v93;
    if (v24 > v57)
    {
      v59 = (float)(v20 - v11) / v94;
      v86 = v90 * v59;
      v60 = v89 * v59;
      v61 = v18 + -1.0;
      v62 = (float)(v88 - v11) / v94;
      v63 = v90 * v62;
      v64 = v89 * v62;
      do
      {
        v65 = (float)(v57 - v12) / v95;
        v66 = v58 * v65;
        v67 = v86 + (float)(v58 * v65);
        v68 = 1.0 - fabsf(v67);
        v69 = 0.0;
        v70 = 0.0;
        if (v68 >= 0.0)
        {
          v70 = v68;
          if (v68 > 1.0)
            v70 = 1.0;
        }
        v71 = v91 * v65;
        v72 = (3.0 - (v70 + v70)) * (float)(v70 * v70);
        v73 = v61 * v72 + 1.0;
        v74 = v67 * v73;
        v75 = v11 + (float)(v94 * (float)((float)(v15 * (float)(v60 + v71)) + (float)(v14 * v74)));
        v76 = v12 + (float)(v95 * (float)((float)(v17 * (float)(v60 + v71)) + (float)(v16 * v74)));
        if (v75 <= v22)
          v75 = -v19;
        if (v76 <= v23)
          v76 = v23;
        if (v75 >= v19)
          v75 = v19;
        if (v76 >= v21)
          v76 = v21;
        if (v25 >= v75)
          v25 = v75;
        if (v28 >= v76)
          v28 = v76;
        if (v26 <= v75)
          v26 = v75;
        if (v27 <= v76)
          v27 = v76;
        v77 = v63 + v66;
        v78 = 1.0 - fabsf(v63 + v66);
        if (v78 >= 0.0)
        {
          v69 = v78;
          if (v78 > 1.0)
            v69 = 1.0;
        }
        v79 = (3.0 - (v69 + v69)) * (float)(v69 * v69);
        v80 = v61 * v79 + 1.0;
        v81 = v77 * v80;
        v82 = v11 + (float)(v94 * (float)((float)(v15 * (float)(v64 + v71)) + (float)(v14 * v81)));
        v83 = v12 + (float)(v95 * (float)((float)(v17 * (float)(v64 + v71)) + (float)(v16 * v81)));
        if (v82 <= v22)
          v82 = -v19;
        if (v83 <= v23)
          v83 = v23;
        if (v82 >= v19)
          v82 = v19;
        if (v83 >= v21)
          v83 = v21;
        if (v25 >= v82)
          v25 = v82;
        if (v28 >= v83)
          v28 = v83;
        if (v26 <= v82)
          v26 = v82;
        if (v27 <= v83)
          v27 = v83;
        v57 = v57 + 1.0;
        v58 = v93;
      }
      while (v57 < v24);
    }
    v4 = (int)v25 - 3;
    v5 = ((int)v28 - 3);
  }
  return v4 | (unint64_t)(v5 << 32);
}

__n128 HFunHouse::SetRect(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[26] = *a2;
  return result;
}

void HFunHouse::~HFunHouse(HGNode *this)
{
  void *v1;

  HgcFunHouse::~HgcFunHouse(this);
  HGObject::operator delete(v1);
}

void HGradientLinear::HGradientLinear(HGradientLinear *this)
{
  HGNode *v1;

  HgcGradientLinear::HgcGradientLinear(this);
  *(_QWORD *)v1 = off_1E64DD7D8;
  HGNode::SetFlags(v1, 0, 2);
}

void sub_1B280BC34(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcGradientLinear::~HgcGradientLinear(v1);
  _Unwind_Resume(a1);
}

void HGradientLinear::~HGradientLinear(HGNode *this)
{
  void *v1;

  HgcGradientLinear::~HgcGradientLinear(this);
  HGObject::operator delete(v1);
}

uint64_t HGradientLinear::GetROI(HGradientLinear *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result;
  float v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  (*(void (**)(HGradientLinear *, uint64_t, float *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 2, v6, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
  result = HGRectMake4i(0, 0, (int)v6[0], 1u);
  if (a3)
    return 0;
  return result;
}

uint64_t HPageCurlBackground::GetDOD(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  int64x2_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  __int128 v24;
  float64x2_t v25;
  __int128 v26;
  float64x2_t v27;
  __int128 v28;
  float64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  float64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[2];
  HGRect v53;

  v53 = a4;
  if (a3)
    return 0;
  Effect_toPCRecti(&v53, (uint64_t)&v40);
  v6.i64[0] = SLODWORD(v40);
  v6.i64[1] = SHIDWORD(v40);
  v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SLODWORD(v41);
  v6.i64[1] = SHIDWORD(v41);
  v52[0] = v7;
  v52[1] = vcvtq_f64_s64(v6);
  v51 = 0x3FF0000000000000;
  v48 = 0x3FF0000000000000;
  v42 = 0;
  v43 = 0;
  v46 = 0u;
  v47 = 0u;
  v49 = 0u;
  v50 = 0u;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  v7.f64[0] = this[86];
  v32 = this[87];
  v33 = v7.f64[0];
  v40 = v7.f64[0];
  v41 = v32;
  v29.f64[0] = v7.f64[0];
  v29.f64[1] = -v32;
  v44 = -v32;
  v45 = v7.f64[0];
  v7.f64[0] = -this[84];
  v8 = -this[85];
  v30 = 0;
  v31 = 0;
  PCMatrix44Tmpl<double>::rightTranslate(&v40, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v29, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v40, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v29, this + 52);
  v27 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  v28 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>(&v40, (double *)v52, (uint64_t)&v27);
  if (v27.f64[0] >= 0.0)
    return *(_QWORD *)&v53.var0;
  v15 = this[88];
  v16 = -v15;
  if (v27.f64[0] + *(double *)&v28 < -v15)
    return 0;
  v25 = 0uLL;
  v26 = v19;
  v23 = 0uLL;
  v24 = v19;
  if (v27.f64[0] + *(double *)&v28 >= 0.0)
  {
    v25 = v27;
    v26 = v28;
    if (v27.f64[0] < 0.0)
    {
      *(double *)&v26 = *(double *)&v26 - (0.0 - v27.f64[0]);
      v25.f64[0] = 0.0;
    }
  }
  if (v27.f64[0] <= 0.0)
  {
    v23 = v27;
    v24 = v28;
    v17 = v27.f64[0];
    if (v27.f64[0] + *(double *)&v28 <= 0.0)
      v18 = *(double *)&v28;
    else
      v18 = 0.0 - v27.f64[0];
    if (v27.f64[0] >= v16)
      v16 = v15 * sin(v27.f64[0] / v15);
    *(double *)&v24 = v18 - (v16 - v17);
    v23.f64[0] = v16;
  }
  PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v25.f64, (uint64_t)&v25);
  PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v23.f64, (uint64_t)&v23);
  operator|<double>(&v25, &v23, &v20);
  return HGRectMake4i((int)v20.f64[0], (int)v20.f64[1], (int)v21 + (int)v20.f64[0], (int)v22 + (int)v20.f64[1]);
}

float64x2_t *operator|<double>@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;

  v3 = result[1];
  if (v3.f64[0] < 0.0 || v3.f64[1] < 0.0)
  {
    v8 = *a2;
    v9 = a2[1];
  }
  else
  {
    v4 = a2[1];
    if (v4.f64[0] >= 0.0 && v4.f64[1] >= 0.0)
    {
      v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*result, *a2), *(int8x16_t *)a2, *(int8x16_t *)result);
      v6 = vaddq_f64(*result, v3);
      v7 = vaddq_f64(*a2, v4);
      *a3 = v5;
      a3[1] = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), (int8x16_t)v7, (int8x16_t)v6), v5);
      return result;
    }
    v8 = *result;
    v9 = result[1];
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t HPageCurlBackground::GetROI(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  int64x2_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __int128 v42;
  float64x2_t v43;
  double v44;
  double v45;
  float64x2_t v46;
  __int128 v47;
  float64x2_t v48;
  __int128 v49;
  float64x2_t v50;
  __int128 v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  float64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  float64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  HGRect v77;

  v77 = a4;
  if (a3)
    return 0;
  Effect_toPCRecti(&v77, (uint64_t)&v63);
  v6.i64[0] = SLODWORD(v63);
  v6.i64[1] = SHIDWORD(v63);
  v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SLODWORD(v64);
  v6.i64[1] = SHIDWORD(v64);
  v75 = v7;
  v76 = vcvtq_f64_s64(v6);
  v74 = 0x3FF0000000000000;
  v71 = 0x3FF0000000000000;
  v65 = 0;
  v66 = 0;
  v69 = 0u;
  v70 = 0u;
  v72 = 0u;
  v73 = 0u;
  v62 = 0x3FF0000000000000;
  v59 = 0x3FF0000000000000;
  v57 = 0u;
  v58 = 0u;
  v60 = 0u;
  v61 = 0u;
  v7.f64[0] = this[86];
  v55 = this[87];
  v56 = v7.f64[0];
  v63 = v7.f64[0];
  v64 = v55;
  v52.f64[0] = v7.f64[0];
  v52.f64[1] = -v55;
  v67 = -v55;
  v68 = v7.f64[0];
  v7.f64[0] = -this[84];
  v8 = -this[85];
  v53 = 0;
  v54 = 0;
  PCMatrix44Tmpl<double>::rightTranslate(&v63, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v52, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v63, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v52, this + 52);
  v50 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v42 = _Q0;
  v51 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>(&v63, v75.f64, (uint64_t)&v50);
  if (v50.f64[0] < 0.0)
  {
    v48 = 0uLL;
    v49 = v42;
    v46 = 0uLL;
    v47 = v42;
    v15 = v50.f64[0] + *(double *)&v51;
    if (v50.f64[0] + *(double *)&v51 >= 0.0)
    {
      v48 = v50;
      v49 = v51;
      if (v50.f64[0] < 0.0)
      {
        *(double *)&v49 = *(double *)&v49 - (0.0 - v50.f64[0]);
        v48.f64[0] = 0.0;
      }
    }
    if (v50.f64[0] > 0.0)
      goto LABEL_37;
    v46 = v50;
    v47 = v51;
    if (v50.f64[0] > v15)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    if (v50.f64[0] <= 0.0)
      v16 = v50.f64[0];
    else
      v16 = 0.0;
    if (v15 <= 0.0)
      v17 = v50.f64[0] + *(double *)&v51;
    else
      v17 = 0.0;
    if (this[88] == 0.0)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    v23 = fegetround();
    fesetround(0x400000);
    v24 = this[88];
    if (v24 >= 0.0)
    {
      v25 = -v16;
      v26 = v17 / v24;
    }
    else
    {
      v25 = -v17;
      v26 = v16 / v24;
    }
    v27 = -v26;
    v28 = v25 / v24;
    fesetround(v23);
    v29 = fegetround();
    fesetround(0x400000);
    v30 = v28 + -1.0;
    v43.f64[0] = 1.0 - v27;
    v31 = 1.0 - v27;
    fesetround(v29);
    if (v28 + -1.0 <= 0.0)
    {
      v32 = -v30;
    }
    else if (v31 <= 0.0)
    {
      v32 = -v31;
      v31 = v30;
    }
    else
    {
      if (v31 <= v30)
        v31 = v28 + -1.0;
      v32 = 0.0;
    }
    v33 = fegetround();
    fesetround(0x400000);
    v43.f64[0] = 1.0 - v32;
    fesetround(v33);
    v34 = asin(fmax(fmin(-(v31 + -1.0), 0.999), -0.999));
    v35 = asin(fmax(fmin(1.0 - v32, 0.999), -0.999));
    if (v34 > v35)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    v36 = v35;
    v37 = fegetround();
    fesetround(0x400000);
    v38 = this[88];
    if (v38 >= 0.0)
    {
      v41 = 0.0;
      v39 = 0.0;
      if (v38 == 0.0)
      {
LABEL_36:
        fesetround(v37);
        v46.f64[0] = v39;
        *(double *)&v47 = v41 - v39;
LABEL_37:
        PCMatrix44Tmpl<double>::transformRect<double>(v52.f64, v48.f64, (uint64_t)&v48);
        PCMatrix44Tmpl<double>::transformRect<double>(v52.f64, v46.f64, (uint64_t)&v46);
        operator|<double>(&v48, &v46, &v43);
        v18 = v43.f64[0] + -2.0;
        v19 = v43.f64[1] + -2.0;
        v20 = 4.0;
        v21 = v44;
        v22 = v45;
        return HGRectMake4i((int)v18, (int)v19, (int)(v21 + v20) + (int)v18, (int)(v22 + v20) + (int)v19);
      }
      v43.f64[0] = v36 * v38;
      v39 = -(v36 * v38);
      v40 = v38 * -v34;
    }
    else
    {
      v43.f64[0] = v34 * v38;
      v39 = -(v34 * v38);
      v40 = -(v36 * v38);
    }
    v43.f64[0] = v40;
    v41 = v40;
    goto LABEL_36;
  }
  v18 = v75.f64[0] + -1.0;
  v19 = v75.f64[1] + -1.0;
  v20 = 2.0;
  v22 = v76.f64[1];
  v21 = v76.f64[0];
  return HGRectMake4i((int)v18, (int)v19, (int)(v21 + v20) + (int)v18, (int)(v22 + v20) + (int)v19);
}

uint64_t HPageCurlBackground::setPixelTransform(double *a1, double *a2)
{
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t i;
  float v7;
  float v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v3[i] = v5[i];
      ++v4;
      v3 += 4;
      v5 += 4;
    }
    while (v4 != 4);
  }
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(a1 + 68), a2, 0.0);
  v7 = a1[67];
  v8 = a1[83];
  v9 = v7;
  v10 = a1[52] / v7;
  v11 = a1[57] / v9;
  v12 = a1[55] / v9;
  *(float *)&v9 = a1[59] / v9;
  (*(void (**)(double *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v10, v11, v12, *(float *)&v9);
  v13 = a1[68] / v8;
  v14 = a1[73] / v8;
  v15 = a1[71] / v8;
  v16 = a1[75] / v8;
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v13, v14, v15, v16);
}

uint64_t HPageCurlBackground::setAxisPoint(_OWORD *a1, uint64_t a2)
{
  float v2;
  float v3;

  a1[42] = *(_OWORD *)a2;
  v2 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  return (*(uint64_t (**)(_OWORD *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v2, v3, 0.0, 0.0);
}

uint64_t HPageCurlBackground::setAxisDir(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = a2[1];
  v3 = sqrt(*a2 * *a2 + v2 * v2);
  v4 = *a2 / v3;
  v5 = v2 / v3;
  a1[86] = v4;
  a1[87] = v5;
  *(float *)&v4 = v4;
  *(float *)&v5 = v5;
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, *(float *)&v4, *(float *)&v5, 0.0, 0.0);
}

uint64_t HPageCurlBackground::setHighlight(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  float v4;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v2, v3, v4, 0.0);
}

uint64_t HPageCurlBackground::setBackColor(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v2, v3, v4, v5);
}

uint64_t HPageCurlBackground::setRadius(HPageCurlBackground *this, double a2)
{
  float v2;

  *((double *)this + 88) = a2;
  v2 = a2;
  return (*(uint64_t (**)(HPageCurlBackground *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 4, v2, 0.0, 0.0, 0.0);
}

uint64_t HPageCurlForeground::GetDOD(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  int64x2_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24[14];
  float64x2_t v25;
  __int128 v26;
  float64x2_t v27;
  __int128 v28;
  float64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  HGRect v52;

  v52 = a4;
  if (a3)
    return 0;
  Effect_toPCRecti(&v52, (uint64_t)&v40);
  v6.i64[0] = (int)v40;
  v6.i64[1] = SDWORD1(v40);
  v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SDWORD2(v40);
  v6.i64[1] = SHIDWORD(v40);
  v51[0] = v7;
  v51[1] = vcvtq_f64_s64(v6);
  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v41 = 0;
  v42 = 0;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  v7.f64[0] = this[86];
  v32 = this[87];
  v33 = v7.f64[0];
  *(float64_t *)&v40 = v7.f64[0];
  *((double *)&v40 + 1) = v32;
  v29.f64[0] = v7.f64[0];
  v29.f64[1] = -v32;
  v43 = -v32;
  v44 = v7.f64[0];
  v7.f64[0] = -this[84];
  v8 = -this[85];
  v30 = 0;
  v31 = 0;
  PCMatrix44Tmpl<double>::rightTranslate((double *)&v40, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v29, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v40, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v29, this + 52);
  v24[0] = 0.0;
  v23 = (float64x2_t)0x3FF0000000000000uLL;
  v27.f64[0] = this[88] * -3.14159265 * 0.5;
  v27.f64[1] = 0.0;
  *(_QWORD *)&v28 = 0;
  PCMatrix44Tmpl<double>::leftReflect((uint64_t)&v40, v23.f64, v27.f64);
  v27 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  v28 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v40, (double *)v51, (uint64_t)&v27);
  if (v27.f64[0] >= 0.0)
  {
    v25 = 0uLL;
    v26 = v19;
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v29, &v40, (uint64_t)&v23);
    PCMatrix44Tmpl<double>::transformRect<double>(v23.f64, (double *)v51, (uint64_t)&v25);
    return HGRectMake4i((int)v25.f64[0], (int)v25.f64[1], (int)*(double *)&v26 + (int)v25.f64[0], (int)*((double *)&v26 + 1) + (int)v25.f64[1]);
  }
  else
  {
    v15 = this[88];
    if (v27.f64[0] + *(double *)&v28 < v15 * -3.14159265 * 0.5)
      return 0;
    v23 = 0uLL;
    *(_OWORD *)v24 = v19;
    v25 = 0uLL;
    v26 = v19;
    if (v27.f64[0] + *(double *)&v28 >= 0.0)
    {
      v23 = v27;
      *(_OWORD *)v24 = v28;
      if (v27.f64[0] < 0.0)
      {
        v24[0] = v24[0] - (0.0 - v27.f64[0]);
        v23.f64[0] = 0.0;
      }
    }
    if (v27.f64[0] <= 0.0)
    {
      v25 = v27;
      v26 = v28;
      v16 = v27.f64[0];
      if (v27.f64[0] + *(double *)&v28 <= 0.0)
        v17 = *(double *)&v28;
      else
        v17 = 0.0 - v27.f64[0];
      v18 = -v15;
      if (v27.f64[0] >= -v15)
        v18 = v15 * sin(v27.f64[0] / v15);
      *(double *)&v26 = v17 - (v18 - v16);
      v25.f64[0] = v18;
    }
    PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v23.f64, (uint64_t)&v23);
    PCMatrix44Tmpl<double>::transformRect<double>(v29.f64, v25.f64, (uint64_t)&v25);
    operator|<double>(&v23, &v25, &v20);
    return HGRectMake4i((int)(v20.f64[0] + -2.0), (int)(v20.f64[1] + -2.0), (int)(v21 + 4.0) + (int)(v20.f64[0] + -2.0), (int)(v22 + 4.0) + (int)(v20.f64[1] + -2.0));
  }
}

double PCMatrix44Tmpl<double>::leftReflect(uint64_t a1, double *a2, double *a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v5 = 0x3FF0000000000000;
  v6 = 0u;
  v7 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  PCMatrix44Tmpl<double>::setReflect((uint64_t)&v5, a2, a3);
  return PCMatrix44Tmpl<double>::leftMult(a1, (double *)&v5);
}

uint64_t HPageCurlForeground::GetROI(float64_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  int64x2_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  __int128 v38;
  float64x2_t v39;
  double v40;
  double v41;
  float64x2_t v42;
  double v43[14];
  float64x2_t v44;
  __int128 v45;
  float64x2_t v46;
  __int128 v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[2];
  HGRect v71;

  v71 = a4;
  if (a3)
    return 0;
  Effect_toPCRecti(&v71, (uint64_t)&v59);
  v6.i64[0] = (int)v59;
  v6.i64[1] = SDWORD1(v59);
  v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = SDWORD2(v59);
  v6.i64[1] = SHIDWORD(v59);
  v70[0] = v7;
  v70[1] = vcvtq_f64_s64(v6);
  v69 = 0x3FF0000000000000;
  v66 = 0x3FF0000000000000;
  v60 = 0;
  v61 = 0;
  v64 = 0u;
  v65 = 0u;
  v67 = 0u;
  v68 = 0u;
  v58 = 0x3FF0000000000000;
  v55 = 0x3FF0000000000000;
  v53 = 0u;
  v54 = 0u;
  v56 = 0u;
  v57 = 0u;
  v7.f64[0] = this[86];
  v51 = this[87];
  v52 = v7.f64[0];
  *(float64_t *)&v59 = v7.f64[0];
  *((double *)&v59 + 1) = v51;
  v48.f64[0] = v7.f64[0];
  v48.f64[1] = -v51;
  v62 = -v51;
  v63 = v7.f64[0];
  v7.f64[0] = -this[84];
  v8 = -this[85];
  v49 = 0;
  v50 = 0;
  PCMatrix44Tmpl<double>::rightTranslate((double *)&v59, v7.f64[0], v8, 0.0);
  v9.f64[0] = this[84];
  PCMatrix44Tmpl<double>::leftTranslate(&v48, v9, this[85], 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v59, this + 68);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v48, this + 52);
  v43[0] = 0.0;
  v42 = (float64x2_t)0x3FF0000000000000uLL;
  v46.f64[0] = this[88] * -3.14159265 * 0.5;
  v46.f64[1] = 0.0;
  *(_QWORD *)&v47 = 0;
  PCMatrix44Tmpl<double>::rightReflect((uint64_t)&v48, v42.f64, v46.f64);
  v46 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v38 = _Q0;
  v47 = _Q0;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v59, (double *)v70, (uint64_t)&v46);
  if (v46.f64[0] >= 0.0)
  {
    v44 = 0uLL;
    v45 = v38;
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v48, &v59, (uint64_t)&v42);
    PCMatrix44Tmpl<double>::transformRect<double>(v42.f64, (double *)v70, (uint64_t)&v44);
    return HGRectMake4i((int)(v44.f64[0] + -2.0), (int)(v44.f64[1] + -2.0), (int)(*(double *)&v45 + 4.0) + (int)(v44.f64[0] + -2.0), (int)(*((double *)&v45 + 1) + 4.0) + (int)(v44.f64[1] + -2.0));
  }
  v42 = 0uLL;
  *(_OWORD *)v43 = v38;
  v44 = 0uLL;
  v45 = v38;
  v15 = v46.f64[0] + *(double *)&v47;
  if (v46.f64[0] + *(double *)&v47 >= 0.0)
  {
    v42 = v46;
    *(_OWORD *)v43 = v47;
    if (v46.f64[0] < 0.0)
    {
      v43[0] = v43[0] - (0.0 - v46.f64[0]);
      v42.f64[0] = 0.0;
    }
  }
  if (v46.f64[0] <= 0.0)
  {
    v44 = v46;
    v45 = v47;
    if (v46.f64[0] > v15)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    if (v46.f64[0] <= 0.0)
      v16 = v46.f64[0];
    else
      v16 = 0.0;
    if (v15 <= 0.0)
      v17 = v46.f64[0] + *(double *)&v47;
    else
      v17 = 0.0;
    if (this[88] == 0.0)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    v18 = fegetround();
    fesetround(0x400000);
    v19 = this[88];
    if (v19 >= 0.0)
    {
      v20 = -v16;
      v21 = v17 / v19;
    }
    else
    {
      v20 = -v17;
      v21 = v16 / v19;
    }
    v22 = -v21;
    v23 = v20 / v19;
    fesetround(v18);
    v24 = fegetround();
    fesetround(0x400000);
    v25 = v23 + -1.0;
    v39.f64[0] = 1.0 - v22;
    v26 = 1.0 - v22;
    fesetround(v24);
    if (v23 + -1.0 <= 0.0)
    {
      v27 = -v25;
    }
    else if (v26 <= 0.0)
    {
      v27 = -v26;
      v26 = v25;
    }
    else
    {
      if (v26 <= v25)
        v26 = v23 + -1.0;
      v27 = 0.0;
    }
    v28 = fegetround();
    fesetround(0x400000);
    v39.f64[0] = 1.0 - v27;
    fesetround(v28);
    v29 = asin(fmax(fmin(-(v26 + -1.0), 0.999), 0.0));
    v30 = asin(fmax(fmin(1.0 - v27, 0.999), 0.0));
    if (v29 > v30)
      boost::numeric::interval_lib::exception_create_empty::operator()();
    v31 = v30;
    v32 = fegetround();
    fesetround(0x400000);
    v33 = this[88];
    if (v33 >= 0.0)
    {
      v36 = 0.0;
      v37 = 0.0;
      if (v33 == 0.0)
      {
LABEL_36:
        fesetround(v32);
        v44.f64[0] = v37;
        *(double *)&v45 = v36 - v37;
        goto LABEL_37;
      }
      v34 = -v29;
      v35 = v31 * v33;
    }
    else
    {
      v34 = -v31;
      v35 = v29 * v33;
    }
    v37 = -v35;
    v39.f64[0] = v33 * v34;
    v36 = v33 * v34;
    goto LABEL_36;
  }
LABEL_37:
  PCMatrix44Tmpl<double>::transformRect<double>(v48.f64, v42.f64, (uint64_t)&v42);
  PCMatrix44Tmpl<double>::transformRect<double>(v48.f64, v44.f64, (uint64_t)&v44);
  operator|<double>(&v42, &v44, &v39);
  return HGRectMake4i((int)(v39.f64[0] + -2.0), (int)(v39.f64[1] + -2.0), (int)(v40 + 4.0) + (int)(v39.f64[0] + -2.0), (int)(v41 + 4.0) + (int)(v39.f64[1] + -2.0));
}

double PCMatrix44Tmpl<double>::rightReflect(uint64_t a1, double *a2, double *a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v5 = 0x3FF0000000000000;
  v6 = 0u;
  v7 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  PCMatrix44Tmpl<double>::setReflect((uint64_t)&v5, a2, a3);
  return PCMatrix44Tmpl<double>::rightMult(a1, (double *)&v5);
}

uint64_t HPageCurlForeground::setPixelTransform(double *a1, double *a2)
{
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t i;
  float v7;
  float v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = a1 + 52;
  if (a1 + 52 != a2)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v3[i] = v5[i];
      ++v4;
      v3 += 4;
      v5 += 4;
    }
    while (v4 != 4);
  }
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)(a1 + 68), a2, 0.0);
  v7 = a1[67];
  v8 = a1[83];
  v9 = v7;
  v10 = a1[52] / v7;
  v11 = a1[57] / v9;
  v12 = a1[55] / v9;
  *(float *)&v9 = a1[59] / v9;
  (*(void (**)(double *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v10, v11, v12, *(float *)&v9);
  v13 = a1[68] / v8;
  v14 = a1[73] / v8;
  v15 = a1[71] / v8;
  v16 = a1[75] / v8;
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v13, v14, v15, v16);
}

uint64_t HPageCurlForeground::setAxisPoint(_OWORD *a1, uint64_t a2)
{
  float v2;
  float v3;

  a1[42] = *(_OWORD *)a2;
  v2 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  return (*(uint64_t (**)(_OWORD *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v2, v3, 0.0, 0.0);
}

uint64_t HPageCurlForeground::setAxisDir(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = a2[1];
  v3 = sqrt(*a2 * *a2 + v2 * v2);
  v4 = *a2 / v3;
  v5 = v2 / v3;
  a1[86] = v4;
  a1[87] = v5;
  *(float *)&v4 = v4;
  *(float *)&v5 = v5;
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 3, *(float *)&v4, *(float *)&v5, 0.0, 0.0);
}

uint64_t HPageCurlForeground::setHighlight(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  float v4;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v2, v3, v4, 0.0);
}

uint64_t HPageCurlForeground::setBackColor(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  return (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v2, v3, v4, v5);
}

uint64_t HPageCurlForeground::setRadius(HPageCurlForeground *this, double a2)
{
  float v2;

  *((double *)this + 88) = a2;
  v2 = a2;
  return (*(uint64_t (**)(HPageCurlForeground *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 4, v2, 0.0, 0.0, 0.0);
}

void HPageCurlBackground::~HPageCurlBackground(HGNode *this)
{
  void *v1;

  HgcPageCurlBackground::~HgcPageCurlBackground(this);
  HGObject::operator delete(v1);
}

void HPageCurlForeground::~HPageCurlForeground(HGNode *this)
{
  void *v1;

  HgcPageCurlForeground::~HgcPageCurlForeground(this);
  HGObject::operator delete(v1);
}

double PCMatrix44Tmpl<double>::setReflect(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = sqrt(v4 * v4 + v3 * v3 + v5 * v5);
  if (v6 <= -0.000000100000001 || v6 >= 0.000000100000001)
  {
    v4 = v4 / v6;
    v3 = v3 / v6;
    v5 = v5 / v6;
  }
  v7 = v4 * *a3 + v3 * a3[1] + v5 * a3[2];
  *(double *)a1 = v4 * (v4 * -2.0) + 1.0;
  *(double *)(a1 + 8) = v3 * (v4 * -2.0);
  *(double *)(a1 + 32) = v3 * -2.0 * v4;
  *(double *)(a1 + 40) = v3 * (v3 * -2.0) + 1.0;
  *(double *)(a1 + 64) = v5 * -2.0 * v4;
  *(double *)(a1 + 72) = v5 * -2.0 * v3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 16) = v5 * (v4 * -2.0);
  *(double *)(a1 + 24) = -(v7 * (v4 * -2.0));
  *(double *)(a1 + 48) = v5 * (v3 * -2.0);
  *(double *)(a1 + 56) = -(v7 * (v3 * -2.0));
  *(double *)(a1 + 80) = v5 * (v5 * -2.0) + 1.0;
  *(double *)(a1 + 88) = -(v7 * (v5 * -2.0));
  result = 0.0;
  *(_OWORD *)(a1 + 112) = xmmword_1B304EEE0;
  return result;
}

uint64_t HStyleTransfer_ANEImpl::HStyleTransfer_ANEImpl(uint64_t a1, void *a2, uint64_t *a3)
{
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  HGNode::HGNode((HGNode *)a1);
  *v6 = off_1E64DDF70;
  v6[51] = 0;
  v6[52] = 0;
  v7 = a2;

  *(_QWORD *)(a1 + 408) = a2;
  v8 = *(_QWORD *)(a1 + 416);
  v9 = *a3;
  if (v8 != *a3)
  {
    if (v8)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v8 + 24))(*(_QWORD *)(a1 + 416));
      v9 = *a3;
    }
    *(_QWORD *)(a1 + 416) = v9;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFF9FF | 0x400;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 136))(a1, 0, 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, 0xFFFFFFFFLL, 2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 136))(a1, 0, 0x2000);
  return a1;
}

void sub_1B280D318(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 416);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANEImpl::~HStyleTransfer_ANEImpl(id *this)
{
  id v2;

  *this = off_1E64DDF70;

  v2 = this[52];
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode((HGNode *)this);
}

{
  void *v1;

  HStyleTransfer_ANEImpl::~HStyleTransfer_ANEImpl(this);
  HGObject::operator delete(v1);
}

uint64_t HStyleTransfer_ANEImpl::GetDOD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t HStyleTransfer_ANEImpl::GetROI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t HStyleTransfer_ANEImpl::ScaleInputTextureToOutputBuffer(int a1, uint64_t a2, uint64_t a3, HGGPURenderer *this, int a5, void *a6)
{
  uint64_t v10;
  uint64_t MetalContext;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t *FunctionWithSource;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *RenderPipelineState;
  HGBitmap *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  int32x2_t v27;
  int32x2_t v33;
  void *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p[2];
  float32x2_t v41;
  unint64_t v42;
  uint64_t v43;
  int32x2_t v44;
  uint64_t v45;
  int32x2_t v46;
  int v47;
  char v48;
  uint64_t *v49;
  uint64_t *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  std::string v54;
  std::string v55;

  v10 = *(_QWORD *)(a2 + 144);
  MetalContext = HGGPURenderer::GetMetalContext(this);
  v12 = *(_DWORD *)(a3 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(MetalContext + 24) + 168);
  {
    std::string::basic_string[abi:ne180100]<0>(&ShaderString(void)::sShaderString, "          \n    //Metal1.0                                  \n    #include <metal_common>                     \n    #include <metal_graphics>                   \n    #include <metal_matrix>                     \n    #include <metal_geometric>                  \n    #include <metal_math>                       \n    #include <metal_texture>                    \n                                                \n    using namespace metal;                      \n"
      "                                                \n"
      "    struct RasterData                           \n"
      "    {                                           \n"
      "        float4 position  [[ position ]];        \n"
      "        float2 texCoord0 [[ user(texcoord0) ]]; \n"
      "    };                                          \n"
      "                                                \n"
      "    typedef struct                              \n"
      "    {                                           \n"
      "        vector_float2 position;                 \n"
      "        vector_float2 texCoords;                \n"
      "    } HSFANEVertexPos2Tex2;                     \n"
      "                                                \n"
      "    typedef struct                              \n"
      "    {                                           \n"
      "        HSFANEVertexPos2Tex2 vertices[4];       \n"
      "    } HSFANEQuad;                               \n"
      "                                                \n"
      "    vertex RasterData vertexFunc(uint vertexId [[vertex_id]], \n"
      "                                 constant HSFANEQuad &quad [[buffer(0)]], \n"
      "                                 constant float4x4 &mvp [[buffer(1)]]) \n"
      "    {                                           \n"
      "        RasterData out;                         \n"
      "                                                \n"
      "        float2 modelPosition = quad.vertices[vertexId].position; \n"
      "        out.position = mvp * float4(modelPosition, 0, 1);  \n"
      "                                                \n"
      "        out.texCoord0 = quad.vertices[vertexId].texCoords; \n"
      "                                                \n"
      "        return out;                             \n"
      "    }                                           \n"
      "                                                \n"
      "    fragment half4 fragmentFunc(RasterData frag [[ stage_in ]], \n"
      "                                texture2d< half > texture0 [[ texture(0) ]]) \n"
      "    {                                                                       \n"
      "        constexpr sampler textureSampler (mag_filter::linear,               \n"
      "                                          min_filter::linear,               \n"
      "                                          address::mirrored_repeat);        \n"
      "                                                \n"
      "        half4 out;                             \n"
      "        out = texture0.sample(textureSampler, frag.texCoord0.xy);           \n"
      "                                                \n"
      "        // unpremul: This form is used to comply with HGC's DIVA optimization. \n"
      "        const half alphaThreshold = 1e-6;                 \n"
      "        out.rgb = out.rgb / max(out.a, alphaThreshold);   \n"
      "                                                \n"
      "        return out;                             \n"
      "    }                                           \n"
      "    \n");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &ShaderString(void)::sShaderString, &dword_1B2737000);
  }
  if (byte_1EF074A27 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v36, (const std::string::value_type *)ShaderString(void)::sShaderString, *((std::string::size_type *)&ShaderString(void)::sShaderString + 1));
  }
  else
  {
    *(_OWORD *)v36 = ShaderString(void)::sShaderString;
    *(_QWORD *)&v37 = unk_1EF074A20;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HStyleTransfer_ANE");
  v15 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v55, (uint64_t)__p);
  if (v41.i8[7] < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v55, "vertexFunc");
  FunctionWithSource = HGMetalFunctionCache::getFunctionWithSource(v13, &v55, v15, (uint64_t *)v36);
  std::string::basic_string[abi:ne180100]<0>(&v54, "fragmentFunc");
  v17 = HGMetalFunctionCache::getFunctionWithSource(v13, &v54, v15, (uint64_t *)v36);
  v18 = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(MetalContext + 24) + 144);
  do
  {
    v20 = &__p[v18];
    *(_DWORD *)v20 = 0;
    v20[1] = 0;
    v20[2] = (void *)1;
    *((_DWORD *)v20 + 6) = 1;
    *(void **)((char *)v20 + 28) = 0;
    v18 += 6;
    *(void **)((char *)v20 + 33) = 0;
  }
  while (v18 != 48);
  v48 = 0;
  v52 = 0;
  v53 = 0;
  v50 = v17;
  v51 = 0;
  v49 = FunctionWithSource;
  v47 = 1;
  LODWORD(__p[0]) = v12;
  RenderPipelineState = HGMetalRenderPipelineStateCache::getRenderPipelineState(v19, (int *)__p);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  v22 = HGGPURenderer::ConvertToMetalTexture((HGMetalTexture **)this, (HGBitmap *)a3);
  v23 = *((_QWORD *)v22 + 18);
  v24 = objc_alloc_init(MEMORY[0x1E0CC6B48]);
  objc_msgSend(v24, "setTexture:", v23);
  objc_msgSend(v24, "setLoadAction:", 0);
  v25 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  objc_msgSend((id)objc_msgSend(v25, "colorAttachments"), "setObject:atIndexedSubscript:", v24, 0);
  v26 = (void *)objc_msgSend(a6, "renderCommandEncoderWithDescriptor:", v25);
  objc_msgSend(v26, "setLabel:", CFSTR("ScaleInputTextureToOutputBuffer"));
  objc_msgSend(v26, "setRenderPipelineState:", RenderPipelineState);
  v27 = vdup_n_s32(-2 * a5);
  __asm { FMOV            V1.2S, #-1.0 }
  v33 = (int32x2_t)vadd_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)vsub_s32(*(int32x2_t *)(a3 + 28), *(int32x2_t *)(a3 + 20))), vcvt_f32_u32((uint32x2_t)vadd_s32(vsub_s32(v27, *(int32x2_t *)(a3 + 20)), *(int32x2_t *)(a3 + 28)))), _D1);
  if (*(float *)v33.i32 <= *(float *)&v33.i32[1])
    v33.i32[0] = v33.i32[1];
  *(float *)v33.i32 = *(float *)v33.i32 * 0.5;
  *(float *)v27.i32 = *(float *)v33.i32 + 1.0;
  __p[0] = (void *)0xBF8000003F800000;
  __p[1] = (void *)vdup_lane_s32(v27, 0);
  *(float *)v33.i32 = 0.0 - *(float *)v33.i32;
  v41 = _D1;
  v42 = __PAIR64__(v27.u32[0], v33.u32[0]);
  __asm { FMOV            V1.2S, #1.0 }
  v27.i32[1] = v33.i32[0];
  v43 = _D1;
  v44 = v27;
  v45 = 0x3F800000BF800000;
  v46 = vdup_lane_s32(v33, 0);
  objc_msgSend(v26, "setVertexBytes:length:atIndex:", __p, 64, 0, v36[0], v36[1], (_QWORD)v37);
  *(_OWORD *)v36 = xmmword_1B304F230;
  v37 = xmmword_1B304F240;
  v38 = xmmword_1B3050460;
  v39 = xmmword_1B3050470;
  objc_msgSend(v26, "setVertexBytes:length:atIndex:", v36, 64, 1);
  objc_msgSend(v26, "setFragmentTexture:atIndex:", v10, 0);
  objc_msgSend(v26, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
  objc_msgSend(v26, "endEncoding");

  return (*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v22 + 24))(v22);
}

void sub_1B280D790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HStyleTransfer_ANEImpl::RenderPageMetal(HStyleTransfer_ANEImpl *this, HGPage *a2)
{
  return HStyleTransfer_ANEImpl::_renderPage((uint64_t)this, (uint64_t)a2, 1);
}

void *HStyleTransfer_ANEImpl::_renderPage(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  HGRenderer *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HGNode *Input;
  HGNode *v22;
  HGBitmap *NodeMetalTexture;
  HGBitmap *v24;
  char *Buffer;
  char *v26;
  void *v27;
  uint64_t v28;
  HGBitmap *v29;
  int v30;
  HGBitmap *v31;
  _QWORD *CVBitmapStorage;
  HGBitmap *v33;
  __IOSurface *v34;
  __IOSurface *v35;
  int v36;
  int v37;
  float v38;
  float v39;
  HGXForm *v40;
  HGXForm *v41;
  void *v42;
  HStyleTransfer_ANE::RenderContext *v43;
  uint64_t v44;
  uint64_t v45;
  HGGPURenderer *v46;
  void *v47;
  void *v48;
  uint64_t v50;
  uint64_t v51;
  HgcStyleTransferANEPost *v52;
  void *contexta;
  void *context;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  HGBitmap *v58;
  uint64_t v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  _BYTE v64[144];
  _BYTE v65[144];
  _BYTE v66[144];
  HgcStyleTransferANEPost *v67;
  HGRect v68;
  HGRect v69;
  HGRect v70;
  HGRect v71;
  HGRect v72;

  v5 = *(void **)(a1 + 408);
  if (v5)
  {
    v7 = *(HGRenderer **)a2;
    v8 = *(_QWORD *)(a2 + 36);
    v9 = *(_QWORD *)(a2 + 44);
    v55 = *(_QWORD *)(a2 + 60);
    v57 = *(_QWORD *)(a2 + 52);
    v10 = (float)(int)objc_msgSend(v5, "widthBig");
    v11 = objc_msgSend(*(id *)(a1 + 408), "heightBig");
    v13 = HGRectMake4f(v12, 0.0, 0.0, v10, (float)v11);
    v51 = v14;
    contexta = (void *)v13;
    v15 = (float)(int)objc_msgSend(*(id *)(a1 + 408), "widthSmall");
    v16 = objc_msgSend(*(id *)(a1 + 408), "heightSmall");
    v18 = HGRectMake4f(v17, 0.0, 0.0, v15, (float)v16);
    v20 = v19;
    Input = HGRenderer::GetInput(v7, (HGNode *)a1, 0);
    v22 = HGRenderer::GetInput(v7, (HGNode *)a1, 1u);
    v50 = v8;
    *(_QWORD *)&v71.var0 = v8;
    v59 = v9;
    *(_QWORD *)&v71.var2 = v9;
    NodeMetalTexture = HGGPURenderer::GetNodeMetalTexture(v7, Input, v71, 0, 0);
    *(_QWORD *)&v72.var2 = v55;
    *(_QWORD *)&v72.var0 = v57;
    v24 = HGGPURenderer::GetNodeMetalTexture(v7, v22, v72, 0, 0);
    (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v7 + 144))(v7, 0);
    HGGPURenderer::FlushMetalCommandBuffer(v7);
    *(_QWORD *)&v68.var2 = v51;
    *(_QWORD *)&v68.var0 = contexta;
    Buffer = HGGPURenderer::CreateBuffer((uint64_t)v7, v68, 24, a3, 1, 0);
    *(_QWORD *)&v69.var0 = v18;
    *(_QWORD *)&v69.var2 = v20;
    v26 = HGGPURenderer::CreateBuffer((uint64_t)v7, v69, 24, a3, 1, 0);
    v27 = (void *)objc_msgSend(*(id *)(HGGPURenderer::GetMetalContext(v7) + 32), "commandBuffer");
    v58 = NodeMetalTexture;
    v28 = (uint64_t)NodeMetalTexture;
    v29 = v24;
    v30 = HStyleTransfer_ANEImpl::ScaleInputTextureToOutputBuffer((int)v27, v28, (uint64_t)Buffer, v7, 18, v27);
    HStyleTransfer_ANEImpl::ScaleInputTextureToOutputBuffer(v30, (uint64_t)v24, (uint64_t)v26, v7, 0, v27);
    objc_msgSend(v27, "commit");
    context = (void *)MEMORY[0x1B5E29C50](objc_msgSend(v27, "waitUntilCompleted"));
    CVBitmapStorage = HGCVBitmap::getCVBitmapStorage((HGBitmap *)Buffer, v31);
    v34 = (__IOSurface *)objc_msgSend(*(id *)(a1 + 408), "executeSyncWithImage:smallImage:", *(_QWORD *)(CVBitmapStorage[16] + 24), *(_QWORD *)(*((_QWORD *)HGCVBitmap::getCVBitmapStorage((HGBitmap *)v26, v33) + 16) + 24));
    v56 = v26;
    if (v34)
    {
      v35 = v34;
      IOSurfaceLock(v34, 1u, 0);
      v36 = objc_msgSend(*(id *)(a1 + 408), "widthBig");
      v37 = objc_msgSend(*(id *)(a1 + 408), "heightBig");
      HStyleTransfer_ANEImpl::InterleavePlanarSurface((id *)a1, v35, (HGBitmap *)Buffer, &v67);
      HGTransform::HGTransform((HGTransform *)v66);
      HGTransform::HGTransform((HGTransform *)v65);
      HGTransform::Translate((HGTransform *)v65, -18.0, -18.0, 0.0);
      v38 = (float)(unint64_t)v36;
      v39 = (float)(unint64_t)v37;
      HGTransform::Scale((HGTransform *)v65, (float)(v38 / (float)(unint64_t)(v36 - 36)), (float)(v39 / (float)(unint64_t)(v37 - 36)), 1.0);
      v40 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v40);
      (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v40 + 576))(v40, v65);
      v52 = v67;
      (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v40 + 120))(v40, 0);
      HGTransform::HGTransform((HGTransform *)v64);
      HGTransform::Scale((HGTransform *)v64, (float)((float)(v59 - v50) / v38), (float)((float)(HIDWORD(v59) - HIDWORD(v50)) / v39), 1.0);
      HGTransform::Translate((HGTransform *)v64, (double)(int)v50, (double)SHIDWORD(v50), 0.0);
      v41 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v41);
      (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v41 + 576))(v41, v64);
      (*(void (**)(HGXForm *, _QWORD, HGXForm *))(*(_QWORD *)v41 + 120))(v41, 0, v40);
      (*(void (**)(HGXForm *))(*(_QWORD *)v41 + 16))(v41);
      *(_QWORD *)&v70.var0 = v50;
      *(_QWORD *)&v70.var2 = v59;
      v42 = HGGPURenderer::CreateBuffer((uint64_t)v7, v70, 27, 1, (*(_DWORD *)(a1 + 16) >> 12) & 1, 0);
      v43 = *(HStyleTransfer_ANE::RenderContext **)(a1 + 416);
      v44 = *((_QWORD *)v43 + 3);
      if (!v44)
      {
        v44 = objc_msgSend(*(id *)(*(_QWORD *)(HGGPURenderer::GetMetalContext(v7) + 16) + 16), "newEvent");
        *((_QWORD *)v43 + 3) = v44;
        v43 = *(HStyleTransfer_ANE::RenderContext **)(a1 + 416);
      }
      v45 = *((_QWORD *)v43 + 4) + 1;
      *((_QWORD *)v43 + 4) = v45;
      v46 = (HGGPURenderer *)HStyleTransfer_ANE::RenderContext::Renderer(v43, v7);
      (*(void (**)(HGGPURenderer *, void *, HGXForm *))(*(_QWORD *)v46 + 64))(v46, v42, v41);
      if (v44)
      {
        v47 = (void *)objc_msgSend(*(id *)(HGGPURenderer::GetMetalContext(v46) + 32), "commandBuffer");
        objc_msgSend(v47, "encodeSignalEvent:value:", v44, v45);
        objc_msgSend(v47, "commit");
        objc_msgSend(v47, "waitUntilScheduled");
        v48 = (void *)objc_msgSend(*(id *)(HGGPURenderer::GetMetalContext(v7) + 32), "commandBuffer");
        objc_msgSend(v48, "encodeWaitForEvent:value:", v44, v45);
        objc_msgSend(v48, "commit");
      }
      else
      {
        HGGPURenderer::WaitForCommandBuffers(v46);
      }
      IOSurfaceUnlock(v35, 1u, 0);
      (*(void (**)(HGXForm *))(*(_QWORD *)v41 + 24))(v41);
      (*(void (**)(HGXForm *))(*(_QWORD *)v41 + 24))(v41);
      HGTransform::~HGTransform((HGTransform *)v64);
      (*(void (**)(HGXForm *))(*(_QWORD *)v40 + 24))(v40);
      HGTransform::~HGTransform((HGTransform *)v65);
      HGTransform::~HGTransform((HGTransform *)v66);
      if (v52)
        (*(void (**)(HgcStyleTransferANEPost *))(*(_QWORD *)v52 + 24))(v52);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v62, "[HStyleTransfer_ANEImpl::_renderPage] NULL reultSurface from ANE Network");
      v42 = HStyleTransfer_ANEImpl::_renderInputOnError((HGNode *)a1, a2, (char *)v62);
      if (v63 < 0)
        operator delete(v62[0]);
    }
    (*(void (**)(char *))(*(_QWORD *)Buffer + 24))(Buffer);
    (*(void (**)(char *))(*(_QWORD *)v56 + 24))(v56);
    objc_autoreleasePoolPop(context);
    (*(void (**)(HGBitmap *))(*(_QWORD *)v58 + 24))(v58);
    (*(void (**)(HGBitmap *))(*(_QWORD *)v29 + 24))(v29);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "[HStyleTransfer_ANEImpl::_renderPage] NULL ane network.");
    v42 = HStyleTransfer_ANEImpl::_renderInputOnError((HGNode *)a1, a2, (char *)__p);
    if (v61 < 0)
      operator delete(__p[0]);
  }
  return v42;
}

void sub_1B280DDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HStyleTransfer_ANEImpl::InterleavePlanarSurface@<X0>(id *this@<X0>, __IOSurface *a2@<X1>, HGBitmap *a3@<X2>, HgcStyleTransferANEPost **a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  size_t BytesPerRow;
  char *BaseAddress;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  HGBitmap *v16;
  HGBitmap *v17;
  size_t v18;
  HGBitmap *v19;
  HGBitmapLoader *v20;
  HGBitmapLoader *v21;
  HGBitmapLoader *v22;
  HGBitmapLoader *v23;
  HgcStyleTransferANEPost *v24;
  uint64_t result;

  v8 = (int)objc_msgSend(this[51], "widthBig");
  v9 = (int)objc_msgSend(this[51], "heightBig");
  BytesPerRow = IOSurfaceGetBytesPerRow(a2);
  BaseAddress = (char *)IOSurfaceGetBaseAddress(a2);
  v13 = HGRectMake4f(v12, 0.0, 0.0, (float)v8, (float)v9);
  v15 = v14;
  v16 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v16, v13, v15, 5, BaseAddress, BytesPerRow);
  v17 = (HGBitmap *)HGObject::operator new(0x80uLL);
  v18 = BytesPerRow * v9;
  HGBitmap::HGBitmap(v17, v13, v15, 5, &BaseAddress[(BytesPerRow * v9) & 0xFFFFFFFFFFFFFFFELL], BytesPerRow);
  v19 = (HGBitmap *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v19, v13, v15, 5, &BaseAddress[2 * v18], BytesPerRow);
  v20 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v20, v16);
  v21 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v21, v17);
  v22 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v22, v19);
  v23 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v23, a3);
  v24 = (HgcStyleTransferANEPost *)HGObject::operator new(0x1A0uLL);
  *((_OWORD *)v24 + 24) = 0u;
  *((_OWORD *)v24 + 25) = 0u;
  *((_OWORD *)v24 + 22) = 0u;
  *((_OWORD *)v24 + 23) = 0u;
  *((_OWORD *)v24 + 20) = 0u;
  *((_OWORD *)v24 + 21) = 0u;
  *((_OWORD *)v24 + 18) = 0u;
  *((_OWORD *)v24 + 19) = 0u;
  *((_OWORD *)v24 + 16) = 0u;
  *((_OWORD *)v24 + 17) = 0u;
  *((_OWORD *)v24 + 14) = 0u;
  *((_OWORD *)v24 + 15) = 0u;
  *((_OWORD *)v24 + 12) = 0u;
  *((_OWORD *)v24 + 13) = 0u;
  *((_OWORD *)v24 + 10) = 0u;
  *((_OWORD *)v24 + 11) = 0u;
  *((_OWORD *)v24 + 8) = 0u;
  *((_OWORD *)v24 + 9) = 0u;
  *((_OWORD *)v24 + 6) = 0u;
  *((_OWORD *)v24 + 7) = 0u;
  *((_OWORD *)v24 + 4) = 0u;
  *((_OWORD *)v24 + 5) = 0u;
  *((_OWORD *)v24 + 2) = 0u;
  *((_OWORD *)v24 + 3) = 0u;
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  HgcStyleTransferANEPost::HgcStyleTransferANEPost(v24);
  *(_QWORD *)v24 = &unk_1E64DE4B0;
  HGNode::SetInput((HGNode *)v24, 0, (HGNode *)v22);
  (*(void (**)(HgcStyleTransferANEPost *, uint64_t, HGBitmapLoader *))(*(_QWORD *)v24 + 120))(v24, 1, v21);
  (*(void (**)(HgcStyleTransferANEPost *, uint64_t, HGBitmapLoader *))(*(_QWORD *)v24 + 120))(v24, 2, v20);
  result = (*(uint64_t (**)(HgcStyleTransferANEPost *, uint64_t, HGBitmapLoader *))(*(_QWORD *)v24 + 120))(v24, 3, v23);
  *a4 = v24;
  if (v23)
    result = (*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v23 + 24))(v23);
  if (v22)
    result = (*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v22 + 24))(v22);
  if (v21)
    result = (*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v21 + 24))(v21);
  if (v20)
    result = (*(uint64_t (**)(HGBitmapLoader *))(*(_QWORD *)v20 + 24))(v20);
  if (v19)
    result = (*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v19 + 24))(v19);
  if (v17)
    result = (*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v17 + 24))(v17);
  if (v16)
    return (*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v16 + 24))(v16);
  return result;
}

void sub_1B280E1C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  HGObject::operator delete(v7);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HStyleTransfer_ANE::RenderContext::Renderer(HStyleTransfer_ANE::RenderContext *this, HGGPURenderer *a2)
{
  uint64_t result;
  _QWORD *v5;
  PCSharedCount v6;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v5 = HGObject::operator new(0x5C8uLL);
    HGGPURenderer::GetCurrentContext(a2, (uint64_t *)&v6);
    HGGPURenderer::HGGPURenderer(v5, &v6.var0);
    *((_QWORD *)this + 2) = v5;
    PCSharedCount::PCSharedCount(&v6);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), 43, 1);
    return *((_QWORD *)this + 2);
  }
  return result;
}

void sub_1B280E3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  void *v10;

  PCSharedCount::PCSharedCount(&a10);
  HGObject::operator delete(v10);
  _Unwind_Resume(a1);
}

HGBitmap *HStyleTransfer_ANEImpl::_renderInputOnError(HGNode *a1, uint64_t a2, char *a3)
{
  HGGPURenderer *v5;
  HGNode *Input;

  if (a3[23] < 0)
    a3 = *(char **)a3;
  HGLogger::warning((HGLogger *)"%s", (const char *)a2, a3, a3);
  v5 = *(HGGPURenderer **)a2;
  Input = HGRenderer::GetInput(*(HGRenderer **)a2, a1, 0);
  return HGGPURenderer::GetNodeMetalTexture(v5, Input, *(HGRect *)(a2 + 36), 0, 1u);
}

void HStyleTransfer_ANE::RenderContext::GetRetainedRenderContext(HGObject **a1@<X8>)
{
  int v3;
  HGObject *v4;
  BOOL v5;
  void (**v6)(HStyleTransfer_ANE::RenderContext *__hidden);
  HGSynchronizable *v7;
  char v8;

  if (HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken != -1)
    dispatch_once(&HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken, &__block_literal_global_27);
  v7 = (HGSynchronizable *)_sContextLock;
  v8 = 0;
  HGSynchronizable::Lock((HGSynchronizable *)_sContextLock);
  v3 = _sContextRefCount++;
  v4 = (HGObject *)_sContext;
  if (v3)
    v5 = 0;
  else
    v5 = _sContext == 0;
  if (v5)
  {
    v4 = (HGObject *)HGObject::operator new(0x28uLL);
    HGObject::HGObject(v4);
    v6 = off_1E64DE1E0;
    *(_QWORD *)v4 = off_1E64DE1E0;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
    *((_QWORD *)v4 + 2) = 0;
    _sContext = (uint64_t)v4;
    goto LABEL_10;
  }
  if (_sContext)
  {
    v6 = *(void (***)(HStyleTransfer_ANE::RenderContext *__hidden))_sContext;
LABEL_10:
    v6[2](v4);
  }
  *a1 = v4;
  HGSynchronizer::~HGSynchronizer(&v7);
}

void sub_1B280E53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  void *v9;

  HGObject::operator delete(v9);
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANE::RenderContext::ReleaseRenderContext(_QWORD *a1)
{
  const PCString *v2;
  OZChannelBase *v3;
  HGSynchronizable *v4;
  char v5;

  if (HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken != -1)
    dispatch_once(&HStyleTransfer_ANE::RenderContext::ContextLock(void)::onceToken, &__block_literal_global_27);
  v4 = (HGSynchronizable *)_sContextLock;
  v5 = 0;
  HGSynchronizable::Lock((HGSynchronizable *)_sContextLock);
  if (*a1)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    *a1 = 0;
    if (!--_sContextRefCount)
    {
      v3 = *(OZChannelBase **)(_sContext + 16);
      if (v3)
        OZChannelBase::setRangeName(v3, v2);
    }
  }
  HGSynchronizer::~HGSynchronizer(&v4);
}

void sub_1B280E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HGSynchronizable *a9)
{
  HGSynchronizer::~HGSynchronizer(&a9);
  _Unwind_Resume(a1);
}

void ___ZN18HStyleTransfer_ANE13RenderContext11ContextLockEv_block_invoke()
{
  HGSynchronizable *v0;

  v0 = (HGSynchronizable *)operator new();
  HGSynchronizable::HGSynchronizable(v0);
  _sContextLock = (uint64_t)v0;
  _sContextRefCount = 0;
}

void sub_1B280E664(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40BBCAB520);
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANE::RenderContext::~RenderContext(HStyleTransfer_ANE::RenderContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64DE1E0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(this);
}

{
  void *v1;

  HStyleTransfer_ANE::RenderContext::~RenderContext(this);
  HGObject::operator delete(v1);
}

HGNode *HStyleTransfer_ANE::HStyleTransfer_ANE(HGNode *a1, void *a2, uint64_t *a3)
{
  _QWORD *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  HGNode::HGNode(a1);
  *v6 = off_1E64DE218;
  v7 = (void **)(v6 + 51);
  v6[51] = 0;
  v6[52] = 0;
  v8 = HGObject::operator new(0x1B0uLL);
  v9 = *a3;
  v12 = v9;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  HStyleTransfer_ANEImpl::HStyleTransfer_ANEImpl((uint64_t)v8, a2, &v12);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *v7;
  if (*v7 == v8)
  {
    if (v8)
      (*(void (**)(void *))(*(_QWORD *)v8 + 24))(v8);
  }
  else
  {
    if (v10)
      (*(void (**)(void *))(*(_QWORD *)v10 + 24))(v10);
    *v7 = v8;
  }
  return a1;
}

void sub_1B280E7C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v5 = *(_QWORD *)(v1 + 416);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if (*v3)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

HGXForm *HStyleTransfer_ANE::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  float v5;
  uint64_t v6;
  uint64_t DOD;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  HGTransform *v13;
  int v14;
  int v15;
  float v16;
  float v17;
  HGXForm *v18;
  int8x16_t v19;
  int8x16_t v20;
  HGTextureWrap *v21;
  char *v22;
  HGXForm *v23;
  HGXForm *v24;
  HGXForm *v25;
  HGXForm *v26;
  int64x2_t v28;
  _BYTE v29[144];
  _BYTE v30[144];
  _BYTE v31[144];

  Input = HGRenderer::GetInput(a2, this, 0);
  v5 = (double)(int)objc_msgSend(*(id *)(*((_QWORD *)this + 51) + 408), "widthBig") * 2.5;
  DOD = HGRenderer::GetDOD(a2, Input);
  v8 = v6;
  v9 = v6 - DOD;
  v10 = HIDWORD(v6) - HIDWORD(DOD);
  if ((int)v6 - (int)DOD >= (HIDWORD(v6) - HIDWORD(DOD)))
    v11 = HIDWORD(v6) - HIDWORD(DOD);
  else
    v11 = v6 - DOD;
  if ((float)v11 <= v5)
    v12 = 1.0;
  else
    v12 = v5 / (float)v11;
  HGTransform::HGTransform((HGTransform *)v31);
  HGTransform::Scale(v13, v12, v12, 1.0);
  HGTransform::HGTransform((HGTransform *)v30);
  HGTransform::Scale((HGTransform *)v30, (float)(1.0 / v12), (float)(1.0 / v12), 1.0);
  v14 = objc_msgSend(*(id *)(*((_QWORD *)this + 51) + 408), "widthSmall");
  v15 = objc_msgSend(*(id *)(*((_QWORD *)this + 51) + 408), "heightSmall");
  HGTransform::HGTransform((HGTransform *)v29);
  v16 = (float)v14 / (float)v9;
  v17 = (float)v15 / (float)v10;
  HGTransform::Scale((HGTransform *)v29, v16, v17, 1.0);
  HGTransform::Translate((HGTransform *)v29, (float)(v16 * (float)-(int)DOD), (float)(v17 * (float)-HIDWORD(DOD)), 1.0);
  v18 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v18);
  (*(void (**)(HGXForm *, _QWORD, HGNode *))(*(_QWORD *)v18 + 120))(v18, 0, Input);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v18 + 576))(v18, v31);
  (*(void (**)(HGXForm *, uint64_t, float))(*(_QWORD *)v18 + 592))(v18, 6, 1.0);
  v19.i64[0] = DOD;
  v19.i64[1] = v8;
  v20.i64[0] = 0xFFFFFFFF00000000;
  v20.i64[1] = 0xFFFFFFFF00000000;
  v28 = vaddq_s64((int64x2_t)vbslq_s8(v20, v19, (int8x16_t)vaddq_s64((int64x2_t)v19, (int64x2_t)xmmword_1B3050480)), (int64x2_t)xmmword_1B3050490);
  v21 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v21);
  (*(void (**)(HGTextureWrap *, _QWORD, HGXForm *))(*(_QWORD *)v21 + 120))(v21, 0, v18);
  HGTextureWrap::SetCropRect(v21, (const HGRect *)&v28);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v21, (const char *)1, v22);
  v23 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v23);
  (*(void (**)(HGXForm *, _QWORD, HGNode *))(*(_QWORD *)v23 + 120))(v23, 0, Input);
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v23 + 576))(v23, v29);
  (*(void (**)(HGXForm *, uint64_t, float))(*(_QWORD *)v23 + 592))(v23, 6, 1.0);
  (*(void (**)(_QWORD, _QWORD, HGTextureWrap *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, v21);
  (*(void (**)(_QWORD, uint64_t, HGXForm *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 1, v23);
  v24 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v24);
  (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v24 + 120))(v24, 0, *((_QWORD *)this + 51));
  (*(void (**)(HGXForm *, _BYTE *))(*(_QWORD *)v24 + 576))(v24, v30);
  v25 = (HGXForm *)*((_QWORD *)this + 52);
  v26 = v24;
  if (v25 != v24)
  {
    if (v25)
      (*(void (**)(HGXForm *))(*(_QWORD *)v25 + 24))(v25);
    *((_QWORD *)this + 52) = v24;
    (*(void (**)(HGXForm *))(*(_QWORD *)v24 + 16))(v24);
    v26 = (HGXForm *)*((_QWORD *)this + 52);
  }
  (*(void (**)(HGXForm *))(*(_QWORD *)v24 + 24))(v24);
  (*(void (**)(HGXForm *))(*(_QWORD *)v23 + 24))(v23);
  (*(void (**)(HGTextureWrap *))(*(_QWORD *)v21 + 24))(v21);
  (*(void (**)(HGXForm *))(*(_QWORD *)v18 + 24))(v18);
  HGTransform::~HGTransform((HGTransform *)v29);
  HGTransform::~HGTransform((HGTransform *)v30);
  HGTransform::~HGTransform((HGTransform *)v31);
  return v26;
}

void sub_1B280EC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  HGObject::operator delete(v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  HGTransform::~HGTransform((HGTransform *)&a11);
  HGTransform::~HGTransform((HGTransform *)&a29);
  HGTransform::~HGTransform((HGTransform *)(v33 - 240));
  _Unwind_Resume(a1);
}

void HStyleTransfer_ANE::~HStyleTransfer_ANE(HGNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E64DE218;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E64DE218;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 51);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
  HGObject::operator delete(v4);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void HStyleTransferANEPost::~HStyleTransferANEPost(HGNode *this)
{
  void *v1;

  HgcStyleTransferANEPost::~HgcStyleTransferANEPost(this);
  HGObject::operator delete(v1);
}

const char *HStyleTransferANEPost::GetProgram(HStyleTransferANEPost *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) == 396048)
    return "//Metal1.0     \n"
           "//LEN=00000004a3\n"
           "fragment half4 fragmentFunc(VertexInOut frag [[ stage_in ]],\n"
           "    const constant float4* hg_Params [[ buffer(0) ]],\n"
           "    texture2d< half > hg_Texture0 [[ texture(0) ]],\n"
           "    sampler hg_Sampler0 [[ sampler(0) ]],\n"
           "    texture2d< half > hg_Texture1 [[ texture(1) ]],\n"
           "    sampler hg_Sampler1 [[ sampler(1) ]],\n"
           "    texture2d< half > hg_Texture2 [[ texture(2) ]],\n"
           "    sampler hg_Sampler2 [[ sampler(2) ]],\n"
           "    texture2d< half > hg_Texture3 [[ texture(3) ]],\n"
           "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
           "{\n"
           "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    half4 r0, r1, r2;\n"
           "    half4 output;\n"
           "\n"
           "    r0.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
           "    r1.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
           "    r0.w = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy).w;\n"
           "    r2.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
           "    r2.z = r1.x;\n"
           "    r2.y = r0.x;\n"
           "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    output = r0;\n"
           "    return output;\n"
           "}\n"
           "//MD5=f54e0f3a:1c54dc8f:c23c4713:e89311f7\n"
           "//SIG=00000000:00000000:00000000:0000000f:0004:0001:0000:0000:0000:0000:001e:0000:0004:04:0:0:0\n";
  else
    return HgcStyleTransferANEPost::GetProgram(this, a2);
}

uint64_t HGlassBlock::RenderTile(HGlassBlock *this, HGTile *a2)
{
  int v3;
  char *v4;
  size_t v5;
  uint64_t v6;

  if (*((_QWORD *)a2 + 10))
    return HgcGlassBlock::RenderTile(this, a2);
  v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v3 >= 1)
  {
    v4 = (char *)*((_QWORD *)a2 + 2);
    v5 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    v6 = 16 * *((int *)a2 + 6);
    do
    {
      bzero(v4, v5);
      v4 += v6;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t HGlassBlock::GetDOD(HGlassBlock *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
    return 0;
  v4 = HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
  v8 = v7;
  if ((*(int (**)(HGlassBlock *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v9 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v8, v9);
  }
  return v4;
}

unint64_t HGlassBlock::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  int var2;
  int var0;
  int var1;
  int var3;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 IsNull;
  unsigned int v67;
  unsigned int v68;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  _DWORD v78[4];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = 0x80000000;
    v7 = 0x80000000;
    v8 = 0x7FFFFFFF7FFFFFFFLL;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var1 = a4.var1;
    var3 = a4.var3;
    (*(void (**)(HGNode *, _QWORD, _DWORD *))(*(_QWORD *)this + 104))(this, 0, v78);
    v13 = *(float *)v78;
    v14 = *(float *)&v78[1];
    (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v70);
    (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v74);
    v15 = (float)var0;
    v16 = (float)var2;
    if ((float)var0 <= (float)var2)
    {
      v22 = (float)var1 - v14;
      v23 = v73 * floorf(v22 * v71);
      v24 = v22 - v23;
      v25 = v23 * v75;
      v26 = v23 * v77;
      v17 = (float)var3;
      v27 = (float)var3 - v14;
      v28 = v73 * floorf(v27 * v71);
      v29 = v27 - v28;
      v30 = v28 * v75;
      v31 = v28 * v77;
      v20 = -3.4028e38;
      v21 = 3.4028e38;
      v32 = (float)var0;
      v18 = 3.4028e38;
      v19 = -3.4028e38;
      do
      {
        v33 = v72 * floorf((float)(v32 - v13) * v70);
        v34 = (float)(v32 - v13) - v33;
        v35 = v33 * v74;
        v36 = (float)(v33 * v74) + v25;
        v37 = v33 * v76;
        v38 = v13 + (float)(v34 + v36);
        v39 = v14 + (float)(v24 + (float)(v37 + v26));
        if (v38 < v21)
          v21 = v38;
        if (v20 < v38)
          v20 = v38;
        if (v39 < v18)
          v18 = v14 + (float)(v24 + (float)(v37 + v26));
        if (v19 < v39)
          v19 = v14 + (float)(v24 + (float)(v37 + v26));
        v40 = v13 + (float)(v34 + (float)(v35 + v30));
        v41 = v14 + (float)(v29 + (float)(v37 + v31));
        if (v40 < v21)
          v21 = v40;
        if (v20 < v40)
          v20 = v40;
        if (v41 < v18)
          v18 = v41;
        if (v19 < v41)
          v19 = v41;
        v32 = v32 + 1.0;
      }
      while (v32 <= v16);
    }
    else
    {
      v17 = (float)var3;
      v18 = 3.4028e38;
      v19 = -3.4028e38;
      v20 = -3.4028e38;
      v21 = 3.4028e38;
    }
    v42 = (float)(var1 + 1);
    if (v17 > v42)
    {
      v43 = v72 * floorf((float)(v15 - v13) * v70);
      v44 = (float)(v15 - v13) - v43;
      v45 = v43 * v74;
      v46 = v43 * v76;
      v47 = v16 - v13;
      v48 = v72 * floorf(v47 * v70);
      v49 = v47 - v48;
      v50 = v48 * v74;
      v51 = v48 * v76;
      do
      {
        v52 = v73 * floorf((float)(v42 - v14) * v71);
        v53 = (float)(v42 - v14) - v52;
        v54 = v52 * v75;
        v55 = v45 + (float)(v52 * v75);
        v56 = v52 * v77;
        v57 = v13 + (float)(v44 + v55);
        v58 = v14 + (float)(v53 + (float)(v46 + v56));
        if (v57 < v21)
          v21 = v57;
        if (v20 < v57)
          v20 = v57;
        if (v58 < v18)
          v18 = v14 + (float)(v53 + (float)(v46 + v56));
        if (v19 < v58)
          v19 = v14 + (float)(v53 + (float)(v46 + v56));
        v59 = v13 + (float)(v49 + (float)(v50 + v54));
        v60 = v14 + (float)(v53 + (float)(v51 + v56));
        if (v59 < v21)
          v21 = v59;
        if (v20 < v59)
          v20 = v59;
        if (v60 < v18)
          v18 = v60;
        if (v19 < v60)
          v19 = v60;
        v42 = v42 + 1.0;
      }
      while (v42 < v17);
    }
    v6 = (int)v21;
    v7 = (int)v18;
    v8 = (int)v20 | ((unint64_t)(int)v19 << 32);
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v64 = HGRectIntersection(v6 | (unint64_t)(v7 << 32), v8, DOD, v63);
  IsNull = HGRectIsNull(v64, v65);
  v67 = HIDWORD(v64) - 2;
  if (IsNull)
  {
    v67 = HIDWORD(v64);
    v68 = v64;
  }
  else
  {
    v68 = v64 - 2;
  }
  return v68 | ((unint64_t)v67 << 32);
}

uint64_t HGlassBlock::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  float v11;
  float v12;
  float v13;
  _BYTE v15[4];
  float v16;
  float v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v7 = v6;
  HgcGlassBlock::SetParameter((HgcGlassBlock *)this, 3, (float)(int)DOD, (float)SHIDWORD(DOD), 0.0, 0.0, v8);
  HgcGlassBlock::SetParameter((HgcGlassBlock *)this, 4, (float)(int)v7, (float)SHIDWORD(v7), 0.0, 0.0, v9);
  v10 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 1);
  (*(void (**)(HGNode *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 1, v15);
  v11 = v17;
  (*(void (**)(HGNode *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 2, v15);
  v12 = v16;
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
  {
    v13 = -v12;
    if (v12 >= 0.0)
      v13 = v12;
    if (v13 > 0.16 || (float)(v11 / (float)v10) > 2.15)
      (*(void (**)(HGNode *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  }
  return HgcGlassBlock::GetOutput((HgcGlassBlock *)this, a2);
}

void HGlassBlock::~HGlassBlock(HGNode *this)
{
  void *v1;

  HgcGlassBlock::~HgcGlassBlock(this);
  HGObject::operator delete(v1);
}

void sub_1B2810468(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2810C6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B28115F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
  HGTransform::~HGTransform((HGTransform *)&a19);
  if (a38)
    (*(void (**)(uint64_t))(*(_QWORD *)a38 + 24))(a38);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
  if (a40)
    (*(void (**)(uint64_t))(*(_QWORD *)a40 + 24))(a40);
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  HGTransform::~HGTransform((HGTransform *)&a41);
  v46 = *(_QWORD *)(v44 - 160);
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
  _Unwind_Resume(a1);
}

void sub_1B2811BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2811F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HAlphaKeyer::HAlphaKeyer(HAlphaKeyer *this, char a2, int a3)
{
  uint64_t v6;

  HgcAlphaKeyer::HgcAlphaKeyer(this);
  *(_QWORD *)v6 = &unk_1E64DE980;
  *(_BYTE *)(v6 + 416) = a2;
  *(_DWORD *)(v6 + 420) = a3;
  HGNode::SetFlags((HGNode *)v6, 1, 2);
  (*(void (**)(HAlphaKeyer *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 2);
}

void sub_1B281263C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcAlphaKeyer::~HgcAlphaKeyer(v1);
  _Unwind_Resume(a1);
}

void HAlphaKeyer::~HAlphaKeyer(HGNode *this)
{
  void *v1;

  HgcAlphaKeyer::~HgcAlphaKeyer(this);
  HGObject::operator delete(v1);
}

uint64_t HAlphaKeyer::GetROI(HAlphaKeyer *this, HGRenderer *a2, int a3, __int128 a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  HGRect v16;

  if (a3 == 2)
  {
    if (*((_BYTE *)this + 416))
      v4 = 2816;
    else
      v4 = 256;
    *(_QWORD *)&v15 = HGRectMake4i(0, 0, v4, 1u);
    *((_QWORD *)&v15 + 1) = v5;
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v8 = v7;
    *(_QWORD *)&v16.var0 = v6;
    *(_QWORD *)&v16.var2 = v8;
    HGRect::Grow((HGRect *)&v15, v16);
  }
  else if (a3 == 1)
  {
    v9 = HGRectMake4i(-*((_DWORD *)this + 105), -*((_DWORD *)this + 105), *((_DWORD *)this + 105), *((_DWORD *)this + 105));
    v11 = v10;
    v12 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    *(_QWORD *)&v15 = HGRectGrow(v9, v11, v12);
    *((_QWORD *)&v15 + 1) = v13;
  }
  else if (a3)
  {
    return HGRectNull;
  }
  else
  {
    return a4;
  }
  return v15;
}

uint64_t HSinusoidalToEquirect::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HSinusoidalToEquirect::GetROI(HSinusoidalToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var2;
  int var0;
  int var3;
  int var1;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  float v35[6];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 0;
  var2 = a4.var2;
  var0 = a4.var0;
  var3 = a4.var3;
  var1 = a4.var1;
  (*(void (**)(HSinusoidalToEquirect *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, v35);
  v34 = *(_QWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, v35);
  v33 = *(_QWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, v35);
  v32 = *(_OWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, v35);
  v31 = *(_OWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, v35);
  v30 = *(_OWORD *)v35;
  (*(void (**)(HSinusoidalToEquirect *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 5, v35);
  v10 = (float)var0;
  v29 = *(_OWORD *)v35;
  v11 = (float)var1;
  v12 = (float)var3;
  if ((float)var0 <= (float)var2)
  {
    v15 = -3.4028e38;
    v16 = 3.4028e38;
    v13 = 3.4028e38;
    v14 = -3.4028e38;
    do
    {
      v27 = v10;
      v28 = (float)var1;
      processPoint(&v27, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, v35);
      v25 = v10;
      v26 = (float)var3;
      processPoint(&v25, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, &v27);
      v18 = v35[1];
      v17 = v35[0];
      if (v13 >= v35[0])
        v19 = v35[0];
      else
        v19 = v13;
      if (v16 >= v35[1])
        v20 = v35[1];
      else
        v20 = v16;
      if (v14 > v35[0])
        v17 = v14;
      if (v15 > v35[1])
        v18 = v15;
      if (v19 >= v27)
        v13 = v27;
      else
        v13 = v19;
      if (v20 >= v28)
        v16 = v28;
      else
        v16 = v20;
      if (v17 <= v27)
        v14 = v27;
      else
        v14 = v17;
      if (v18 <= v28)
        v15 = v28;
      else
        v15 = v18;
      v10 = v10 + 1.0;
    }
    while (v10 <= (float)var2);
  }
  else
  {
    v13 = 3.4028e38;
    v14 = -3.4028e38;
    v15 = -3.4028e38;
    v16 = 3.4028e38;
  }
  for (; v11 <= v12; v11 = v11 + 1.0)
  {
    v27 = (float)var0;
    v28 = v11;
    processPoint(&v27, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, v35);
    v25 = (float)var2;
    v26 = v11;
    processPoint(&v25, (float *)&v34, (float *)&v33, (float *)&v32, (float *)&v31, (float *)&v30, (float *)&v29, &v27);
    v22 = v35[1];
    v21 = v35[0];
    if (v13 >= v35[0])
      v23 = v35[0];
    else
      v23 = v13;
    if (v16 >= v35[1])
      v24 = v35[1];
    else
      v24 = v16;
    if (v14 > v35[0])
      v21 = v14;
    if (v15 > v35[1])
      v22 = v15;
    if (v23 >= v27)
      v13 = v27;
    else
      v13 = v23;
    if (v24 >= v28)
      v16 = v28;
    else
      v16 = v24;
    if (v21 <= v27)
      v14 = v27;
    else
      v14 = v21;
    if (v22 <= v28)
      v15 = v28;
    else
      v15 = v22;
  }
  return HGRectMake4i((int)(float)(floorf(v13) + -1.0), (int)(float)(floorf(v16) + -1.0), (int)(float)(ceilf(v14) + 1.0), (int)(float)(ceilf(v15) + 1.0));
}

float processPoint@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float *a7@<X6>, float *a8@<X8>)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;

  v11 = a1[1];
  v12 = *a2 * 0.5;
  v13 = a2[1] * 0.5;
  v14 = (float)(a5[3] + (float)((float)((float)(*a1 * *a5) + (float)(v11 * a5[1])) + (float)(a5[2] * 0.0))) + v13;
  v15 = *a3;
  v16 = (float)(a3[1] * v14) + -1.57079633;
  v17 = (float)((float)((float)(a4[3]
                              + (float)((float)((float)(*a1 * *a4) + (float)(v11 * a4[1])) + (float)(a4[2] * 0.0)))
                      + v12)
              * *a3)
      + -3.14159265;
  v18 = (float)(cosf(v16) * v17) + 3.14159265;
  v19 = (float)(v18 / v15) - v12;
  v20 = a6[3] + (float)((float)(a6[2] * 0.0) + (float)((float)((float)(v14 - v13) * a6[1]) + (float)(*a6 * v19)));
  result = a7[3] + (float)((float)(a7[2] * 0.0) + (float)((float)((float)(v14 - v13) * a7[1]) + (float)(*a7 * v19)));
  *a8 = v20;
  a8[1] = result;
  return result;
}

void HSinusoidalToEquirect::~HSinusoidalToEquirect(HGNode *this)
{
  void *v1;

  HgcSinusoidalToEquirect::~HgcSinusoidalToEquirect(this);
  HGObject::operator delete(v1);
}

void sub_1B281465C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  HGObject::operator delete(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)va);
  if (STACK[0x210])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x210] + 24))(STACK[0x210]);
  _Unwind_Resume(a1);
}

void HInsectEye_Base::HInsectEye_Base(HInsectEye_Base *this)
{
  _QWORD *v1;

  HgcInsectEye::HgcInsectEye(this);
  *v1 = off_1E64DEE50;
}

void HInsectEye_Base::~HInsectEye_Base(HGNode *this)
{
  void *v1;

  HgcInsectEye::~HgcInsectEye(this);
  HGObject::operator delete(v1);
}

uint64_t HInsectEye_Base::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

double HInsectEye_Base::GetROI(HInsectEye_Base *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  float v9;
  double result;
  double v11;
  float v12;
  int32x2_t v13;
  int8x16_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (a3 > 0)
    return *(double *)&HGRectNull;
  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  (*(void (**)(HInsectEye_Base *, _QWORD, _QWORD *))(*(_QWORD *)this + 104))(this, 0, v15);
  v8 = v15[0];
  (*(void (**)(HInsectEye_Base *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 2, v15);
  v9 = *(float *)v15;
  (*(void (**)(HInsectEye_Base *, uint64_t, _QWORD *))(*(_QWORD *)this + 104))(this, 6, v15);
  if (a3)
    return *(double *)&HGRectNull;
  v11 = 1.0 - v9;
  if (v9 > 1.0)
    v11 = v9 + -1.0;
  v12 = v11;
  v13 = vcvt_s32_f32(vadd_f32(vmul_n_f32(vcvt_f32_s32((int32x2_t)__PAIR64__((int)(float)(*(float *)&v8 * v12) + (int)v4, (int)v5 - (int)(float)(*(float *)&v8 * v12))), *(float *)v15), (float32x2_t)0x40000000C0000000));
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(_QWORD *)&result = vorrq_s8((int8x16_t)vshll_n_s32(vcvt_s32_f32(vadd_f32(vmul_n_f32(vcvt_f32_s32((int32x2_t)__PAIR64__((int)(float)(*((float *)&v8 + 1) * v12)+ HIDWORD(v4), HIDWORD(v5)- (int)(float)(*((float *)&v8 + 1) * v12))), *((float *)v15 + 1)), (float32x2_t)0x40000000C0000000)), 0x20uLL), v14).u64[0];
  return result;
}

uint64_t HInsectEye_Base::GetOutput(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2))
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 136))(a1, 0, 2);
  return a1;
}

void sub_1B2815004(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2815D1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

float *hsvtorgb(float a1, float a2, float a3, float *result, float *a5, float *a6)
{
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a2 >= 0.00001)
  {
    for (; a1 >= 6.0; a1 = a1 + -6.0)
      ;
    for (; a1 < 0.0; a1 = a1 + 6.0)
      ;
    if (a2 <= 1.0)
      v6 = a2;
    else
      v6 = 1.0;
    v7 = (int)a1;
    v8 = a1 - (float)(int)a1;
    v9 = (float)(1.0 - v6) * a3;
    v10 = (float)(1.0 - (float)(v6 * v8)) * a3;
    v11 = (float)(1.0 - (float)(v6 * (float)(1.0 - v8))) * a3;
    switch(v7)
    {
      case 0:
        *result = a3;
        *a5 = v11;
        goto LABEL_13;
      case 1:
        *result = v10;
        *a5 = a3;
LABEL_13:
        *a6 = v9;
        return result;
      case 2:
        *result = v9;
        *a5 = a3;
        *a6 = v11;
        return result;
      case 3:
        *result = v9;
        *a5 = v10;
        goto LABEL_17;
      case 4:
        *result = v11;
        *a5 = v9;
LABEL_17:
        *a6 = a3;
        break;
      case 5:
        *result = a3;
        *a5 = v9;
        *a6 = v10;
        break;
      default:
        return result;
    }
  }
  else
  {
    *a6 = a3;
    *a5 = a3;
    *result = a3;
  }
  return result;
}

void OMSamples::OMSamples(OMSamples *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &unk_1E64DF0D8;
  *((_WORD *)this + 4) = 0;
  *((_BYTE *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *((_QWORD *)this + 2) = v2;
}

void sub_1B28161A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;

  a10 = (void **)(v10 + 120);
  std::vector<OMEdge>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 96);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *(void **)(v10 + 72);
  if (v14)
  {
    *(_QWORD *)(v10 + 80) = v14;
    operator delete(v14);
  }
  OMSamples::OMSamples(v12, v11, v10);
  _Unwind_Resume(a1);
}

void OMSamples::~OMSamples(OMSamples *this)
{
  OMSamples::~OMSamples(this);
  JUMPOUT(0x1B5E29170);
}

{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &unk_1E64DF0D8;
  v2 = *((_QWORD *)this + 2);
  v3 = *(_QWORD **)(v2 + 8);
  if (v3 != *(_QWORD **)v2)
  {
    v4 = 0;
    v5 = 1;
    v3 = *(_QWORD **)v2;
    do
    {
      v6 = v3[v4];
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v2 = *((_QWORD *)this + 2);
        v3 = *(_QWORD **)v2;
      }
      v4 = v5++;
    }
    while (v4 < (uint64_t)(*(_QWORD *)(v2 + 8) - (_QWORD)v3) >> 3);
  }
  if (v3)
  {
    *(_QWORD *)(v2 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x1B5E29170](v2, 0x80C40D6874129);
  v10 = (void **)((char *)this + 120);
  std::vector<OMEdge>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 96);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

void std::vector<OMEdge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 88;
      v7 = v4 - 88;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<Vec3f>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<Vec3f>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t FxSupport::newHGRefWithInput<HGColorMatrix>@<X0>(uint64_t a1@<X0>, HGColorMatrix **a2@<X8>)
{
  HGColorMatrix *v4;

  v4 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
  HGColorMatrix::HGColorMatrix(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGColorMatrix *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B281638C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Vec3f>::__push_back_slow_path<Vec3f const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  __p = v10;
  v15 = v11;
  v17 = &v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  v16 = v11 + 12;
  std::vector<Vec3f>::__swap_out_circular_buffer(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 12) % 0xCuLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_1B28165F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<Vec3f>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

void OMSamples::OMSamples(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 56) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 32) = v6;
    operator delete(v6);
  }
}

unint64_t HiOSKaleidoscope::GetDOD(HiOSKaleidoscope *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  long double v7;
  double v8;
  float v9;
  double v10;
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v39 = *MEMORY[0x1E0C80C00];
  v7 = *((double *)this + 52);
  v8 = cos(v7);
  v9 = 6.28318531 / (float)*((int *)this + 106);
  v10 = v7 + v9;
  v11 = sin(v10);
  if (!HGRectIsInfinite(v5, v4))
  {
    v12 = v8;
    v33 = v12;
    v13 = v11;
    v31 = v13;
    v14 = cos(v10);
    v15 = sin(v7);
    (*(void (**)(HiOSKaleidoscope *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v37);
    v17 = v37;
    v16 = v38;
    v18 = -v15;
    v19 = -v14;
    v20 = (double)SHIDWORD(v5) + (double)(HIDWORD(v4) - HIDWORD(v5));
    v36 = v20;
    v37 = (float)(int)v5;
    v21 = (double)(int)v5 + (double)((int)v4 - (int)v5);
    v34 = v20;
    v35 = v21;
    v32 = v18;
    v22 = 0.0;
    if (ClipSegmentToHalfplane((float)(int)v5, v20, v21, v20, v17, v38, v18, v33, &v37, &v36, &v35, &v34)
      && ClipSegmentToHalfplane(v37, v36, v35, v34, v17, v16, v31, v19, &v37, &v36, &v35, &v34))
    {
      v22 = fmaxf(sqrtf((float)((float)(v37 - v17) * (float)(v37 - v17)) + (float)((float)(v36 - v16) * (float)(v36 - v16))), 0.0);
      v23 = sqrtf((float)((float)(v35 - v17) * (float)(v35 - v17)) + (float)((float)(v34 - v16) * (float)(v34 - v16)));
      if (v23 > v22)
        v22 = v23;
    }
    v36 = (double)SHIDWORD(v5) + (double)(HIDWORD(v4) - HIDWORD(v5));
    v37 = (double)(int)v5 + (double)((int)v4 - (int)v5);
    v34 = (float)SHIDWORD(v5);
    v35 = v37;
    if (ClipSegmentToHalfplane(v21, v20, v21, (float)SHIDWORD(v5), v17, v16, v32, v33, &v37, &v36, &v35, &v34)
      && ClipSegmentToHalfplane(v37, v36, v35, v34, v17, v16, v31, v19, &v37, &v36, &v35, &v34))
    {
      v24 = sqrtf((float)((float)(v37 - v17) * (float)(v37 - v17)) + (float)((float)(v36 - v16) * (float)(v36 - v16)));
      if (v24 > v22)
        v22 = v24;
      v25 = sqrtf((float)((float)(v35 - v17) * (float)(v35 - v17)) + (float)((float)(v34 - v16) * (float)(v34 - v16)));
      if (v25 > v22)
        v22 = v25;
    }
    v36 = (float)SHIDWORD(v5);
    v37 = (double)(int)v5 + (double)((int)v4 - (int)v5);
    v34 = (float)SHIDWORD(v5);
    v35 = (float)(int)v5;
    if (ClipSegmentToHalfplane(v21, (float)SHIDWORD(v5), (float)(int)v5, (float)SHIDWORD(v5), v17, v16, v32, v33, &v37, &v36, &v35, &v34)&& ClipSegmentToHalfplane(v37, v36, v35, v34, v17, v16, v31, v19, &v37, &v36, &v35, &v34))
    {
      v26 = sqrtf((float)((float)(v37 - v17) * (float)(v37 - v17)) + (float)((float)(v36 - v16) * (float)(v36 - v16)));
      if (v26 > v22)
        v22 = v26;
      v27 = sqrtf((float)((float)(v35 - v17) * (float)(v35 - v17)) + (float)((float)(v34 - v16) * (float)(v34 - v16)));
      if (v27 > v22)
        v22 = v27;
    }
    v36 = (float)SHIDWORD(v5);
    v37 = (float)(int)v5;
    v34 = (double)SHIDWORD(v5) + (double)(HIDWORD(v4) - HIDWORD(v5));
    v35 = (float)(int)v5;
    if (ClipSegmentToHalfplane((float)(int)v5, (float)SHIDWORD(v5), (float)(int)v5, v20, v17, v16, v32, v33, &v37, &v36, &v35, &v34)&& ClipSegmentToHalfplane(v37, v36, v35, v34, v17, v16, v31, v19, &v37, &v36, &v35, &v34))
    {
      v28 = sqrtf((float)((float)(v37 - v17) * (float)(v37 - v17)) + (float)((float)(v36 - v16) * (float)(v36 - v16)));
      if (v28 > v22)
        v22 = v28;
      v29 = sqrtf((float)((float)(v35 - v17) * (float)(v35 - v17)) + (float)((float)(v34 - v16) * (float)(v34 - v16)));
      if (v29 > v22)
        v22 = v29;
    }
    return HGRectMake4i(vcvtms_s32_f32(v17 - v22), vcvtms_s32_f32(v16 - v22), vcvtpd_s64_f64(v22 + v22 + floorf(v17 - v22)), vcvtpd_s64_f64(v22 + v22 + floorf(v16 - v22)));
  }
  return v5;
}

BOOL ClipSegmentToHalfplane(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12;
  float v13;
  _BOOL8 v14;
  float v15;
  float v16;

  v12 = (float)((float)(a1 - a5) * a7) + (float)((float)(a2 - a6) * a8);
  v13 = (float)((float)(a3 - a5) * a7) + (float)((float)(a4 - a6) * a8);
  v14 = v13 > 0.0 || v12 > 0.0;
  if (v14)
  {
    if (v12 <= 0.0 || v13 <= 0.0)
    {
      if (v12 <= 0.0)
      {
        v16 = v13 / (float)(v13 - v12);
        a1 = (float)((float)(a1 - a3) * v16) + a3;
        a2 = (float)((float)(a2 - a4) * v16) + a4;
      }
      else
      {
        v15 = v12 / (float)(v12 - v13);
        a3 = (float)((float)(a3 - a1) * v15) + a1;
        a4 = (float)((float)(a4 - a2) * v15) + a2;
      }
    }
    *a9 = a1;
    *a10 = a2;
    *a11 = a3;
    *a12 = a4;
  }
  return v14;
}

uint64_t HiOSKaleidoscope::GetROI(HiOSKaleidoscope *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var2;
  int var0;
  int var1;
  int var3;
  double v9;
  __double2 v10;
  float cosval;
  float sinval;
  float v13;
  double v14;
  __double2 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  double v39;
  signed int v40;
  float v42;
  float v43;
  uint64_t v44;

  var2 = a4.var2;
  var0 = a4.var0;
  v44 = *MEMORY[0x1E0C80C00];
  var1 = a4.var1;
  var3 = a4.var3;
  v9 = *((double *)this + 52);
  v10 = __sincos_stret(v9);
  cosval = v10.__cosval;
  sinval = v10.__sinval;
  v13 = 6.28318531 / (float)*((int *)this + 106);
  v14 = v13;
  v15 = __sincos_stret(v9 + v13);
  (*(void (**)(HiOSKaleidoscope *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v42);
  v16 = (double)var0 - v42;
  v17 = (double)var1 + (double)(var3 - var1) - v43;
  v18 = v16 * v16;
  v19 = v17 * v17;
  v20 = sqrtf(v18 + v19);
  v21 = (double)var0 + (double)(var2 - var0) - v42;
  v22 = v21 * v21;
  v23 = sqrtf(v22 + v19);
  if (v23 <= v20)
    v23 = v20;
  v24 = (double)var1 - v43;
  v25 = v24 * v24;
  v26 = sqrtf(v18 + v25);
  if (v26 <= v23)
    v26 = v23;
  v27 = sqrtf(v22 + v25);
  if (v27 <= v26)
    v28 = v26;
  else
    v28 = v27;
  v29 = v42 + (float)(v28 * cosval);
  v30 = v43 + (float)(v28 * sinval);
  if (v29 >= v42)
  {
    v31 = v42;
    v32 = v42;
    if (v29 > v42)
    {
      v31 = v42;
      v32 = v42 + (float)(v28 * cosval);
    }
  }
  else
  {
    v31 = v42 + (float)(v28 * cosval);
    v32 = v42;
  }
  if (v30 >= v43)
  {
    v35 = v43;
    v36 = v43;
    if (v30 > v43)
    {
      v35 = v43;
      v36 = v43 + (float)(v28 * sinval);
    }
  }
  else
  {
    v35 = v43 + (float)(v28 * sinval);
    v36 = v43;
  }
  v33 = v15.__cosval;
  v37 = v42 + (float)(v28 * v33);
  v34 = v15.__sinval;
  v38 = v43 + (float)(v28 * v34);
  if (v37 >= v31)
  {
    if (v37 > v32)
      goto LABEL_20;
  }
  else
  {
    v31 = v42 + (float)(v28 * v33);
  }
  v37 = v32;
LABEL_20:
  if (v38 >= v35)
  {
    if (v38 > v36)
      v36 = v38;
  }
  else
  {
    v35 = v38;
  }
  v39 = *((double *)this + 52);
  v40 = vcvtmd_s64_f64(v39 / 1.57079633);
  if (v40 < (int)vcvtmd_s64_f64((v39 + v14) / 1.57079633))
    __asm { BR              X12 }
  return HGRectMake4i(vcvtmd_s64_f64(v31 + -1.0), vcvtmd_s64_f64(v35 + -1.0), vcvtpd_s64_f64(floor(v31 + -1.0) + (float)(v37 - v31) + 2.0), vcvtpd_s64_f64(floor(v35 + -1.0) + (float)(v36 - v35) + 2.0));
}

void HiOSKaleidoscope::~HiOSKaleidoscope(HGNode *this)
{
  void *v1;

  HgciOSKaleidoscope::~HgciOSKaleidoscope(this);
  HGObject::operator delete(v1);
}

void HMirror::HMirror(HMirror *this)
{
  _QWORD *v1;

  HgcMirror::HgcMirror(this);
  *v1 = off_1E64DF370;
}

void HMirror::~HMirror(HGNode *this)
{
  void *v1;

  HgcMirror::~HgcMirror(this);
  HGObject::operator delete(v1);
}

uint64_t HMirror::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

unint64_t HMirror::GetROI(HMirror *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var1;
  int var3;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  _DWORD v61[4];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var1 = a4.var1;
    var3 = a4.var3;
    (*(void (**)(HMirror *, _QWORD, _DWORD *))(*(_QWORD *)this + 104))(this, 0, v61);
    v11 = *(float *)v61;
    v12 = *(float *)&v61[1];
    (*(void (**)(HMirror *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v57);
    (*(void (**)(HMirror *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v53);
    if (var0 <= var2)
    {
      v17 = (float)var1 - v12;
      v18 = v17 * v58;
      v19 = v17 * v60;
      v20 = (float)var3 - v12;
      v21 = v20 * v58;
      v22 = v20 * v60;
      v15 = -3.4028e38;
      v16 = 3.4028e38;
      v23 = var0;
      v13 = 3.4028e38;
      v14 = -3.4028e38;
      do
      {
        v24 = (float)v23 - v11;
        v25 = v24 * v57;
        v26 = (float)(v24 * v57) + v18;
        v27 = v24 * v59;
        v28 = fabsf(v26);
        v29 = v11 + (float)((float)(v28 * v53) + (float)((float)(v27 + v19) * v54));
        v30 = v12 + (float)((float)(v28 * v55) + (float)((float)(v27 + v19) * v56));
        if (v13 >= v29)
          v13 = v29;
        if (v16 >= v30)
          v16 = v30;
        if (v14 <= v29)
          v14 = v29;
        if (v15 <= v30)
          v15 = v30;
        v31 = v27 + v22;
        v32 = fabsf(v25 + v21);
        v33 = (float)(v32 * v53) + (float)(v31 * v54);
        v34 = v12 + (float)((float)(v32 * v55) + (float)(v31 * v56));
        if (v13 >= (float)(v11 + v33))
          v13 = v11 + v33;
        if (v16 >= v34)
          v16 = v34;
        if (v14 <= (float)(v11 + v33))
          v14 = v11 + v33;
        if (v15 <= v34)
          v15 = v34;
        ++v23;
      }
      while (var2 + 1 != v23);
    }
    else
    {
      v13 = 3.4028e38;
      v14 = -3.4028e38;
      v15 = -3.4028e38;
      v16 = 3.4028e38;
    }
    if (var1 <= var3)
    {
      v35 = (float)var0 - v11;
      v36 = v35 * v57;
      v37 = v35 * v59;
      v38 = (float)var2 - v11;
      v39 = v38 * v57;
      v40 = v38 * v59;
      do
      {
        v41 = (float)var1 - v12;
        v42 = v41 * v58;
        v43 = v36 + (float)(v41 * v58);
        v44 = v41 * v60;
        v45 = fabsf(v43);
        v46 = v11 + (float)((float)(v45 * v53) + (float)((float)(v37 + v44) * v54));
        v47 = v12 + (float)((float)(v45 * v55) + (float)((float)(v37 + v44) * v56));
        if (v13 >= v46)
          v13 = v46;
        if (v16 >= v47)
          v16 = v47;
        if (v14 <= v46)
          v14 = v46;
        if (v15 <= v47)
          v15 = v47;
        v48 = v40 + v44;
        v49 = fabsf(v39 + v42);
        v50 = (float)(v49 * v53) + (float)(v48 * v54);
        v51 = v12 + (float)((float)(v49 * v55) + (float)(v48 * v56));
        if (v13 >= (float)(v11 + v50))
          v13 = v11 + v50;
        if (v16 >= v51)
          v16 = v51;
        if (v14 <= (float)(v11 + v50))
          v14 = v11 + v50;
        if (v15 <= v51)
          v15 = v51;
        ++var1;
      }
      while (var3 + 1 != var1);
    }
    v4 = (int)(float)(v13 + -2.0);
    v5 = (int)(float)(v16 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HMirror::SetParameter(HgcMirror *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v7;

  v7 = (float *)((char *)this + 16 * (int)a2);
  v7[104] = a3;
  v7[105] = a4;
  v7[106] = a5;
  v7[107] = a6;
  return HgcMirror::SetParameter(this, a2, a3, a4, a5, a6, a7);
}

uint64_t HBadTV::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 1)
    return a4;
  else
    return 0;
}

uint64_t HBadTV::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t ROI;
  unint64_t v16;
  uint64_t v17;
  double v19;
  double v20;
  double v21;
  double v22;
  _OWORD v23[8];
  _OWORD v24[8];
  uint64_t v25;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  v25 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 10, v24);
    v7 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 8, v24);
    v8 = *(float *)v24;
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 13, v24);
    v9 = *(float *)v24;
    (*(void (**)(HGNode *, _QWORD, _OWORD *))(*(_QWORD *)this + 104))(this, 0, v23);
    v24[0] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[1] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 1, v23);
    v24[2] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[3] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 2, v23);
    v24[4] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[5] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, _OWORD *))(*(_QWORD *)this + 104))(this, 3, v23);
    v24[6] = vcvtq_f64_f32(*(float32x2_t *)&v23[0]);
    v24[7] = vcvtq_f64_f32(*(float32x2_t *)((char *)v23 + 8));
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 4, &v19);
    v23[0] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[1] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 5, &v19);
    v23[2] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[3] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 6, &v19);
    v23[4] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[5] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    (*(void (**)(HGNode *, uint64_t, double *))(*(_QWORD *)this + 104))(this, 7, &v19);
    v23[6] = vcvtq_f64_f32(*(float32x2_t *)&v19);
    v23[7] = vcvtq_f64_f32(*(float32x2_t *)&v20);
    v19 = (double)(int)v5;
    v20 = (double)SHIDWORD(v5);
    v21 = (double)((int)v4 - (int)v5);
    v22 = (double)(HIDWORD(v4) - HIDWORD(v5));
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v23, &v19, (uint64_t)&v19);
    v10 = v19 + v21 + v7 + v9;
    v11 = v20 + v22 + v8 + 1.9;
    v19 = v19 - v7 - v9 + -1.0;
    v20 = v20 + v8 + -1.0;
    v21 = v10 - v19;
    v22 = v11 - v20;
    PCMatrix44Tmpl<double>::transformRect<double>((double *)v24, &v19, (uint64_t)&v19);
    v12 = (int)v19;
    v13 = (int)v20;
    v14 = (int)(v19 + v21) | ((unint64_t)(int)(v20 + v22) << 32);
  }
  else if (a3)
  {
    v14 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    ROI = HgcBadTV::GetROI(this, a2, 0, a4);
    v12 = ROI;
    v14 = v16;
    v13 = HIDWORD(ROI);
  }
  v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v12 | (v13 << 32), v14, v17);
}

void HBadTV::~HBadTV(HGNode *this)
{
  void *v1;

  HgcBadTV::~HgcBadTV(this);
  HGObject::operator delete(v1);
}

void sub_1B2817F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 24))(a19);
  PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::~PCArray((uint64_t)&a36);
  if (a39)
    (*(void (**)(uint64_t))(*(_QWORD *)a39 + 24))(a39);
  _Unwind_Resume(a1);
}

uint64_t PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64DF840;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E64DF840;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<HGRef<HGNode>,PCArray_Traits<HGRef<HGNode>>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  PCException *exception;
  PCString v18;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v18, "PCArray::resize");
    PCException::PCException(exception, &v18);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(_DWORD *)(a1 + 12);
    if (v6 <= a2)
    {
      if (v6 < a2)
        bzero((void *)(*(_QWORD *)(a1 + 16) + 8 * v6), 8 * (~v6 + a2) + 8);
    }
    else
    {
      v7 = a2;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
          v6 = *(_DWORD *)(a1 + 12);
        }
        ++v7;
      }
      while (v7 < v6);
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 8 * v3);
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 12);
    if (a2 >= v10)
      LODWORD(v11) = *(_DWORD *)(a1 + 12);
    else
      LODWORD(v11) = a2;
    if ((int)v11 < 1)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12);
        *(_QWORD *)&v9[v12] = v13;
        if (v13)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        }
        v12 += 8;
      }
      while (8 * v11 != v12);
      v10 = *(_DWORD *)(a1 + 12);
    }
    if ((int)v11 < v10)
    {
      v11 = v11;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11);
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          v10 = *(_DWORD *)(a1 + 12);
        }
        ++v11;
      }
      while (v10 > (int)v11);
    }
    if ((int)v11 < a2)
      bzero(&v9[8 * v11], 8 * (~(_DWORD)v11 + a2) + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16)
      MEMORY[0x1B5E2914C](v16, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2818360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void HBlackHole::HBlackHole(HBlackHole *this)
{
  uint64_t v1;

  HgcBlackHole::HgcBlackHole(this);
  *(_QWORD *)v1 = &unk_1E64DC958;
  *(_QWORD *)(v1 + 536) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 416) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_QWORD *)(v1 + 664) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 544) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
}

void sub_1B2818C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(exception_object);
}

void sub_1B2819680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B281A504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  _Unwind_Resume(a1);
}

void sub_1B281AE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGTransform::~HGTransform((HGTransform *)va);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(a1);
}

void sub_1B281B58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1B281BBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B281C4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _Unwind_Resume(exception_object);
}

void sub_1B281CA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 24))(a25);
  _Unwind_Resume(exception_object);
}

void sub_1B281DC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  _Unwind_Resume(exception_object);
}

void sub_1B281DEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<RGBA8Pixel>::push_back[abi:ne180100](void **a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v8 = v14 + 4;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1B281E708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B281EA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B281EE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1B281F048(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B281F4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B281FD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if (a35)
    (*(void (**)(uint64_t))(*(_QWORD *)a35 + 24))(a35);
  _Unwind_Resume(a1);
}

void sub_1B28209C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 24))(a36);
  _Unwind_Resume(a1);
}

void sub_1B282119C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1B2821B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1B2821BBC()
{
  _QWORD *v0;

  if (*v0)
    (*(void (**)(_QWORD))(*(_QWORD *)*v0 + 24))(*v0);
  JUMPOUT(0x1B2821BB4);
}

void HRingLens::HRingLens(HRingLens *this)
{
  uint64_t v1;

  HgcRingLens::HgcRingLens(this);
  *(_QWORD *)v1 = &unk_1E64DFDF0;
  *(_QWORD *)(v1 + 504) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_QWORD *)(v1 + 672) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 632) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 592) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v1 + 544) = _Q1;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
}

void sub_1B28222EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B2822898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(a1);
}

void HSphere::HSphere(HSphere *this)
{
  uint64_t v1;

  HgcSphere::HgcSphere(this);
  *(_QWORD *)v1 = &unk_1E64E0528;
  *(_QWORD *)(v1 + 504) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_QWORD *)(v1 + 672) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 632) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 592) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v1 + 544) = _Q1;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
}

void sub_1B28231B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1B2823968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B2823B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(a1);
}

void sub_1B28241B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if (a35)
    (*(void (**)(uint64_t))(*(_QWORD *)a35 + 24))(a35);
  _Unwind_Resume(a1);
}

void sub_1B282498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  HGTransform::~HGTransform((HGTransform *)&a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  HGTransform::~HGTransform((HGTransform *)&a28);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  v35 = *(_QWORD *)(v33 - 216);
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  _Unwind_Resume(a1);
}

void sub_1B2824C50(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B282561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::UploadCurveAndSetParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v9;
  float v10;
  float v11;
  float v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;

  v9 = 0.0;
  PAEUpload1DCurve<double,1024u>(a1 + 32, a2, a3, 0, 0, 0.0, 1.0);
  if ((a4 & 0x80000000) == 0)
  {
    v10 = *(double *)(a1 + 40);
    v11 = *(double *)(a1 + 48);
    v12 = *(double *)(a1 + 56);
    (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 96))(a2, a4, v10, v11, v12, 0.0);
  }
  v13 = *(double **)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[4] - v15;
  if (v17 != 0.0)
    v9 = (v13[5] - v16) / v17;
  v18 = v15;
  v19 = v16;
  v20 = 0.0;
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 96))(a2, a5, v18, v19, v9, 0.0);
  v21 = *(double *)(v14 - 16);
  v22 = *(double *)(v14 - 8);
  v23 = v21 - *(double *)(v14 - 40);
  if (v23 != 0.0)
    v20 = (v22 - *(double *)(v14 - 32)) / v23;
  v24 = v21;
  v25 = v22;
  return (*(uint64_t (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a2 + 96))(a2, (a5 + 1), v24, v25, v20, 0.0);
}

void `anonymous namespace'::HgColorCurves::~HgColorCurves(HGNode *this)
{
  void *v1;

  HgcColorCurves::~HgcColorCurves(this);
  HGObject::operator delete(v1);
}

uint64_t `anonymous namespace'::HgColorCurves::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t `anonymous namespace'::HgColorCurves::GetROI(_anonymous_namespace_::HgColorCurves *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (!a3)
    return *(_QWORD *)&a4.var0;
  if (a3 > 4)
    return 0;
  return HGRectMake4i(0, 0, 0x400u, 1u);
}

uint64_t ___ZN12_GLOBAL__N_113PAEUseACEScctEv_block_invoke()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("PAEUseACEScct"));
  return result;
}

uint64_t PAEUpload1DCurve<double,1024u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v14 = HGRectMake4i(0, 0, 0x400u, 1u);
  v16 = v15;
  v17 = HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v17, v14, v16, 3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 24))(a1, v17[10], 1024, a4, a5, a6, a7);
  PAEUploadBitmap((uint64_t)v17, a2, a3);
  return (*(uint64_t (**)(_QWORD *))(*v17 + 24))(v17);
}

void sub_1B2825D50(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B28265F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(a1);
}

void sub_1B28267A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40AABB09D5);
  _Unwind_Resume(a1);
}

void sub_1B28268B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40AABB09D5);
  _Unwind_Resume(a1);
}

uint64_t PAEKeyerOMKeyer2D::PAEKeyerOMKeyer2D(uint64_t a1, int a2)
{
  int v5;

  *(_QWORD *)a1 = off_1E6565458;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 72), 0x100uLL, &v5);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 232) = a2;
  *(_QWORD *)a1 = &unk_1E64DFCD8;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_DWORD *)(a1 + 264) = 0;
  OMUtilErf::setSigma((OMUtilErf **)(a1 + 96), 1.0, 0.0, 256);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)a1 + 152))(a1, 1.0, 0.0);
  return a1;
}

void sub_1B2826A70(_Unwind_Exception *a1)
{
  OMKeyer2D *v1;

  OMKeyer2D::~OMKeyer2D(v1);
  _Unwind_Resume(a1);
}

void PAEKeyerOMKeyer2D::~PAEKeyerOMKeyer2D(id *this)
{
  PAEKeyerOMKeyer2D::~PAEKeyerOMKeyer2D(this);
  JUMPOUT(0x1B5E29170);
}

{
  *this = &unk_1E64DFCD8;

  OMKeyer2D::~OMKeyer2D((OMKeyer2D *)this);
}

uint64_t PAEKeyerOMKeyer2D::getKeyer2DSatSpline(id *this)
{
  return objc_msgSend(this[31], "getKeyer2DSatSpline");
}

uint64_t PAEKeyerOMKeyer2D::lumA(id *this)
{
  return objc_msgSend(this[30], "lumA");
}

uint64_t PAEKeyerOMKeyer2D::lumB(id *this)
{
  return objc_msgSend(this[30], "lumB");
}

uint64_t PAEKeyerOMKeyer2D::lumC(id *this)
{
  return objc_msgSend(this[30], "lumC");
}

uint64_t PAEKeyerOMKeyer2D::lumD(id *this)
{
  return objc_msgSend(this[30], "lumD");
}

uint64_t PAEKeyerOMKeyer2D::setLumA(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumA:");
}

uint64_t PAEKeyerOMKeyer2D::setLumB(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumB:");
}

uint64_t PAEKeyerOMKeyer2D::setLumC(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumC:");
}

uint64_t PAEKeyerOMKeyer2D::setLumD(id *this, float a2)
{
  return objc_msgSend(this[30], "setLumD:");
}

uint64_t `covariant return thunk to'PAEKeyerOMKeyer2D::getKeyer2DTolPie(id *this)
{
  return objc_msgSend(this[31], "getKeyer2DTolPie") + 8;
}

uint64_t PAEKeyerOMKeyer2D::getKeyer2DTolPie(id *this)
{
  return objc_msgSend(this[31], "getKeyer2DTolPie");
}

uint64_t `covariant return thunk to'PAEKeyerOMKeyer2D::getKeyer2DSoftPie(id *this)
{
  return objc_msgSend(this[31], "getKeyer2DSoftPie") + 8;
}

uint64_t PAEKeyerOMKeyer2D::getKeyer2DSoftPie(id *this)
{
  return objc_msgSend(this[31], "getKeyer2DSoftPie");
}

float PAEKeyerOMKeyer2D::getSoftSigmaLuma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 64);
}

void PAEKeyerOMKeyer2D::setSoftSigmaLuma(PAEKeyerOMKeyer2D *this, float a2, float a3)
{
  *((float *)this + 64) = a2;
  *((float *)this + 66) = a3;
  OMUtilErf::setSigma((OMUtilErf **)this + 12, a2, a3, 256);
}

float PAEKeyerOMKeyer2D::getSoftSigmaChroma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 65);
}

void PAEKeyerOMKeyer2D::setSoftSigmaChroma(PAEKeyerOMKeyer2D *this, float a2, float a3)
{
  *((float *)this + 65) = a2;
  *((float *)this + 67) = a3;
  OMUtilErf::setSigma((OMUtilErf **)this + 15, a2, a3, 256);
}

float PAEKeyerOMKeyer2D::getSoftErodeLuma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 66);
}

float PAEKeyerOMKeyer2D::getSoftErodeChroma(PAEKeyerOMKeyer2D *this)
{
  return *((float *)this + 67);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B2826BE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B28273E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1B28274AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  JUMPOUT(0x1B28274A0);
}

void sub_1B2827FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B2828764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1B28291AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  _Unwind_Resume(exception_object);
}

void sub_1B282C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  _Unwind_Resume(a1);
}

void sub_1B282CE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(a1);
}

void sub_1B282DA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 24))(a20);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 24))(a23);
  _Unwind_Resume(exception_object);
}

void sub_1B282DD0C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B282DDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t HRingLens::GetDOD(HRingLens *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  float v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  __int128 v14;
  __int128 v15;
  double v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  double v22;

  if (a3)
    return 0;
  v22 = 1.0;
  v19 = 0x3FF0000000000000;
  v16 = 1.0;
  v13 = 1.0;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v13, (double *)this + 53, 0.0);
  v7 = *((float *)this + 104);
  v8 = (float)-v7;
  v4 = HGRectMake4i(vcvtmd_s64_f64((*(double *)&v15 + v13 * v8 + *(double *)&v14 * v8)/ (v22 + *((double *)&v20 + 1) * v8 + *(double *)&v21 * v8)), vcvtmd_s64_f64((*((double *)&v17 + 1) + *((double *)&v15 + 1) * v8 + v16 * v8)/ (v22 + *((double *)&v20 + 1) * v8 + *(double *)&v21 * v8)), vcvtpd_s64_f64((*(double *)&v15 + v13 * v7 + *(double *)&v14 * v7)/ (v22 + *((double *)&v20 + 1) * v7 + *(double *)&v21 * v7)), vcvtpd_s64_f64((*((double *)&v17 + 1) + *((double *)&v15 + 1) * v7 + v16 * v7)/ (v22 + *((double *)&v20 + 1) * v7 + *(double *)&v21 * v7)));
  v10 = v9;
  if ((*(int (**)(HRingLens *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v11 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v10, v11);
  }
  return v4;
}

unint64_t HRingLens::GetROI(HRingLens *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var2;
  int var0;
  uint64_t var1;
  int var3;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  float v26;
  float v27;
  double v28;
  float v29;
  float v30;
  double v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float32x2_t v35;
  double v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  double v46;
  float v47;
  float v48;
  double v49;
  float v50;
  double v51;
  uint64_t v52;
  float64x2_t v53;
  double v54;
  uint64_t v55;
  float64x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float32x2_t v71;
  float32x2_t v72;
  uint64_t v73;

  var2 = a4.var2;
  var0 = a4.var0;
  v73 = *MEMORY[0x1E0C80C00];
  var1 = a4.var1;
  var3 = a4.var3;
  if (a3 == 1)
  {
    (*(void (**)(HRingLens *, _QWORD, float32x2_t *))(*(_QWORD *)this + 104))(this, 0, &v71);
    v9 = v71;
    v10 = v72;
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 1, &v71);
    v11 = v71;
    v12 = v72.f32[0];
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 3, &v71);
    v13 = v71;
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 4, &v71);
    v66 = v71.f32[1];
    v68 = v72.f32[0];
    v69 = v71.f32[0];
    v70 = v72.f32[1];
    (*(void (**)(HRingLens *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 5, &v71);
    v14 = (float)(int)var1;
    v15 = (float)var0;
    v16 = (float)var2;
    v17 = vneg_f32(v13);
    v67 = (float)var3;
    if ((float)var0 <= (float)var2)
    {
      v20 = v66;
      v22 = v69;
      v23 = (float)(v66 * v14) + v70;
      v24 = v23 * v23;
      v25 = v23;
      v26 = (float)(v66 * (float)var3) + v70;
      v27 = v26 * v26;
      v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v28 = v26;
      v19 = (float32x2_t)0x80000000800000;
      v21 = v68;
      do
      {
        v29 = v68 + (float)(v69 * v15);
        v30 = v29 * v29;
        v31 = (float)(v24 + (float)(v29 * v29));
        *(double *)&v32 = sqrt(v31 + 0.000001);
        v33.f64[0] = v29;
        *(float *)&v31 = v31 / *(double *)&v32;
        *(float *)&v31 = fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v31), 1.0), 0.0);
        v34.f64[0] = v33.f64[0];
        v34.f64[1] = v25;
        v35 = vcvt_f32_f64(vdivq_f64(v34, (float64x2_t)vdupq_lane_s64(v32, 0)));
        v36 = (float)(v27 + v30);
        v34.f64[0] = sqrt(v36 + 0.000001);
        v33.f64[1] = v28;
        *(float *)&v36 = v36 / v34.f64[0];
        *(float *)&v36 = v10.f32[1]
                       + (float)(v10.f32[0] * fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v36), 1.0), 0.0));
        v37 = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(v35, v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v31))* (float)(1.0/ (float)((float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v31))+ 1.0)* (float)(1.0- (float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v31))))))), 1.0), 0.0))));
        v38 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v37, v17), (int8x8_t)v37, (int8x8_t)v17);
        v39 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v38), (int8x8_t)v38, (int8x8_t)v13);
        *(float32x2_t *)&v33.f64[0] = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(vcvt_f32_f64(vdivq_f64(v33, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34.f64[0], 0))), v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)(*(float *)&v36* (float)(1.0/ (float)((float)(*(float *)&v36 + 1.0)* (float)(1.0 - *(float *)&v36))))), 1.0), 0.0))));
        v40 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v39), (int8x8_t)v19, (int8x8_t)v39);
        *(int8x8_t *)&v33.f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v33.f64[0], v17), *(int8x8_t *)&v33.f64[0], (int8x8_t)v17);
        *(int8x8_t *)&v33.f64[0] = vbsl_s8((int8x8_t)vcgt_f32(v13, *(float32x2_t *)&v33.f64[0]), *(int8x8_t *)&v33.f64[0], (int8x8_t)v13);
        v41 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v39, v18), (int8x8_t)v18, (int8x8_t)v39);
        v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v33.f64[0], v41), (int8x8_t)v41, *(int8x8_t *)&v33.f64[0]);
        v15 = v15 + 1.0;
        v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v40, *(float32x2_t *)&v33.f64[0]), (int8x8_t)v40, *(int8x8_t *)&v33.f64[0]);
      }
      while (v15 <= v16);
    }
    else
    {
      v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v19 = (float32x2_t)0x80000000800000;
      v20 = v66;
      v21 = v68;
      v22 = v69;
    }
    if (v14 <= v67)
    {
      v43 = v22;
      v44 = (float)(v22 * (float)var0) + v21;
      v45 = v44 * v44;
      v46 = v44;
      v47 = (float)(v43 * v16) + v21;
      v48 = v47 * v47;
      v49 = v47;
      do
      {
        v50 = v70 + (float)(v20 * v14);
        v51 = (float)(v45 + (float)(v50 * v50));
        *(double *)&v52 = sqrt(v51 + 0.000001);
        v53.f64[0] = v46;
        v53.f64[1] = v50;
        *(float32x2_t *)&v53.f64[0] = vcvt_f32_f64(vdivq_f64(v53, (float64x2_t)vdupq_lane_s64(v52, 0)));
        *(float *)&v51 = v51 / *(double *)&v52;
        *(float *)&v51 = fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v51), 1.0), 0.0);
        v54 = (float)(v48 + (float)(v50 * v50));
        *(double *)&v55 = sqrt(v54 + 0.000001);
        v56.f64[0] = v49;
        v56.f64[1] = v50;
        *(float *)&v54 = v54 / *(double *)&v55;
        *(float *)&v54 = v10.f32[1]
                       + (float)(v10.f32[0] * fmaxf(fminf(v9.f32[1] + (float)(v9.f32[0] * *(float *)&v54), 1.0), 0.0));
        v57 = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(*(float32x2_t *)&v53.f64[0], v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v51))* (float)(1.0/ (float)((float)((float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v51))+ 1.0)* (float)(1.0- (float)(v10.f32[1] + (float)(v10.f32[0] * *(float *)&v51))))))), 1.0), 0.0))));
        v58 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v57, v17), (int8x8_t)v57, (int8x8_t)v17);
        v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v58), (int8x8_t)v58, (int8x8_t)v13);
        v60 = vadd_f32(v72, vmul_f32(v71, vmul_n_f32(vcvt_f32_f64(vdivq_f64(v56, (float64x2_t)vdupq_lane_s64(v55, 0))), v12* fmaxf(fminf(v11.f32[1]+ (float)(v11.f32[0]* (float)(*(float *)&v54* (float)(1.0/ (float)((float)(*(float *)&v54 + 1.0) * (float)(1.0 - *(float *)&v54))))), 1.0), 0.0))));
        v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v59), (int8x8_t)v19, (int8x8_t)v59);
        v62 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v60, v17), (int8x8_t)v60, (int8x8_t)v17);
        v63 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v62), (int8x8_t)v62, (int8x8_t)v13);
        v64 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v59, v18), (int8x8_t)v18, (int8x8_t)v59);
        v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v63, v64), (int8x8_t)v64, (int8x8_t)v63);
        v14 = v14 + 1.0;
        v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v61, v63), (int8x8_t)v61, (int8x8_t)v63);
      }
      while (v14 <= v67);
      v42 = v18.f32[1];
    }
    else
    {
      v42 = v18.f32[1];
    }
    var0 = (int)v18.f32[0] - 2;
    var1 = ((int)v42 - 2);
  }
  return var0 | (unint64_t)(var1 << 32);
}

uint64_t HRingLens::SetRadius(HRingLens *this, float a2, float a3)
{
  *((float *)this + 104) = a2;
  *((float *)this + 105) = a3;
  return (*(uint64_t (**)(HRingLens *, uint64_t))(*(_QWORD *)this + 96))(this, 2);
}

uint64_t HRingLens::SetOutputToImage(double *a1, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1 + 53;
  if (a1 + 53 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  v6 = *a2;
  v7 = a2[5];
  v8 = a2[3];
  v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 4, v6, v7, v8, v9);
}

uint64_t HRingLens::SetImageToInput(double *a1, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1 + 69;
  if (a1 + 69 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  v6 = *a2;
  v7 = a2[5];
  v8 = a2[3];
  v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 5, v6, v7, v8, v9);
}

void HRingLens::~HRingLens(HGNode *this)
{
  void *v1;

  HgcRingLens::~HgcRingLens(this);
  HGObject::operator delete(v1);
}

uint64_t HRectToPolar::GetDOD(HRectToPolar *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
}

unint64_t HRectToPolar::GetROI(HRectToPolar *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var3;
  int var1;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v57;
  float v58;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var3 = a4.var3;
    var1 = a4.var1;
    (*(void (**)(HRectToPolar *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v82);
    v78 = v82;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v82);
    v11 = v82;
    v70 = v83;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v82);
    v12 = v82;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, &v82);
    v13 = v82;
    v68 = v83;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 5, &v82);
    v74 = v83;
    v75 = v82;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 6, &v82);
    v14 = v82;
    v76 = v83;
    (*(void (**)(HRectToPolar *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v82);
    v15 = v82;
    v16 = (float)var1;
    v17 = (float)var3;
    v77 = v12;
    v73 = v82;
    v65 = (float)var3;
    v71 = v11;
    v69 = v13;
    v60 = (float)var1;
    if ((float)var1 <= (float)var3)
    {
      v63 = (float)((float)(v13 * (float)var0) + v14) - v11;
      v66 = (float)var2;
      v61 = (float)((float)(v13 * (float)var2) + v14) - v11;
      v20 = -3.4028e38;
      v21 = 3.4028e38;
      v19 = 3.4028e38;
      v79 = -3.4028e38;
      do
      {
        v22 = v15 != -1.0;
        v23 = (float)(v76 + (float)(v68 * v16)) - v70;
        v24 = atan2f(v63, v23);
        if (v24 < 0.0)
        {
          v25 = v24 + 6.28318531;
          v24 = v25;
        }
        v26 = v78 * v24;
        if (v22 && (float)(v26 - v14) < 0.0)
          v26 = v77;
        v27 = v75 * (float)(v26 - v14);
        v28 = v74 * (float)(sqrtf((float)(v63 * v63) + (float)(v23 * v23)) - v76);
        if (v19 >= v27)
          v19 = v27;
        if (v21 >= v28)
          v21 = v28;
        if (v79 > v27)
          v27 = v79;
        v80 = v27;
        if (v20 <= v28)
          v20 = v28;
        v29 = atan2f(v61, (float)(v76 + (float)(v68 * v16)) - v70);
        v17 = (float)var3;
        v15 = v73;
        if (v29 < 0.0)
        {
          v30 = v29 + 6.28318531;
          v29 = v30;
        }
        v31 = v78 * v29;
        if (v22 && (float)(v31 - v14) < 0.0)
          v31 = v77;
        v32 = v75 * (float)(v31 - v14);
        v33 = v74 * (float)(sqrtf((float)(v61 * v61) + (float)(v23 * v23)) - v76);
        if (v19 >= v32)
          v19 = v32;
        if (v21 >= v33)
          v21 = v33;
        if (v80 > v32)
          v32 = v80;
        v79 = v32;
        if (v20 <= v33)
          v20 = v33;
        v16 = v16 + 1.0;
      }
      while (v16 <= v65);
      v18 = v66;
    }
    else
    {
      v18 = (float)var2;
      v19 = 3.4028e38;
      v20 = -3.4028e38;
      v79 = -3.4028e38;
      v21 = 3.4028e38;
    }
    v34 = (float)(var0 + 1);
    if (v18 > v34)
    {
      v64 = (float)((float)(v68 * v60) + v76) - v70;
      v62 = (float)((float)(v68 * v17) + v76) - v70;
      v67 = v18;
      do
      {
        v35 = v15 != -1.0;
        v36 = (float)(v14 + (float)(v69 * v34)) - v11;
        v37 = atan2f(v36, v64);
        if (v37 < 0.0)
        {
          v38 = v37 + 6.28318531;
          v37 = v38;
        }
        v39 = v78 * v37;
        if (v35 && (float)(v39 - v14) < 0.0)
          v39 = v77;
        v40 = v75 * (float)(v39 - v14);
        v41 = v74 * (float)(sqrtf((float)(v64 * v64) + (float)(v36 * v36)) - v76);
        if (v19 >= v40)
          v19 = v40;
        if (v21 >= v41)
          v21 = v41;
        if (v79 > v40)
          v40 = v79;
        v81 = v40;
        if (v20 <= v41)
          v42 = v41;
        else
          v42 = v20;
        v72 = v42;
        v43 = atan2f((float)(v14 + (float)(v69 * v34)) - v11, v62);
        v18 = v67;
        v15 = v73;
        if (v43 < 0.0)
        {
          v44 = v43 + 6.28318531;
          v43 = v44;
        }
        v45 = v78 * v43;
        if (v35 && (float)(v45 - v14) < 0.0)
          v45 = v77;
        v46 = v75 * (float)(v45 - v14);
        v47 = v74 * (float)(sqrtf((float)(v62 * v62) + (float)(v36 * v36)) - v76);
        if (v19 >= v46)
          v19 = v46;
        if (v21 >= v47)
          v21 = v47;
        if (v81 > v46)
          v46 = v81;
        v79 = v46;
        if (v72 <= v47)
          v20 = v47;
        else
          v20 = v72;
        v34 = v34 + 1.0;
      }
      while (v34 < v67);
    }
    v48 = (float)(v11 - v14) / v69;
    if (v48 >= (float)var0 && v48 <= v18)
    {
      v49 = (float)(v70 - v76) / v68;
      if (v49 >= v60 && v49 <= v65)
      {
        v50 = (float)(v14 + (float)(v69 * v48)) - v11;
        v51 = (float)(v76 + (float)(v68 * v49)) - v70;
        v52 = v15;
        v53 = atan2f((float)(v14 + (float)(v69 * v48)) - v71, v51);
        if (v53 < 0.0)
        {
          v54 = v53 + 6.28318531;
          v53 = v54;
        }
        v55 = v78 * v53;
        if ((float)(v55 - v14) < 0.0 && v52 != -1.0)
          v55 = v77;
        v57 = v75 * (float)(v55 - v14);
        v58 = v74 * (float)(sqrtf((float)(v50 * v50) + (float)(v51 * v51)) - v76);
        if (v19 >= v57)
          v19 = v57;
        if (v21 >= v58)
          v21 = v58;
      }
    }
    v4 = (int)(float)((float)(v19 + -2.0) + -18.0);
    v5 = (int)(float)(v21 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void HRectToPolar::~HRectToPolar(HGNode *this)
{
  void *v1;

  HgcRectToPolar::~HgcRectToPolar(this);
  HGObject::operator delete(v1);
}

uint64_t HScrape::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

float32x2_t HScrape::_TransformPoint@<D0>(float32x2_t *a1@<X1>, float32x2_t *a2@<X2>, float32x2_t *a3@<X3>, float32x2_t *a4@<X4>, float32x2_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float32x2_t result;

  v7 = vdiv_f32(vsub_f32(*a1, *a3), *a2);
  v8 = vaddv_f32(vmul_f32(v7, *a4));
  v9 = 0.0;
  if (v8 >= 0.0)
  {
    v10 = -v8;
    if ((float)(v8 - a6) >= 0.0)
    {
      v9 = a6 * 0.5 + v10;
    }
    else
    {
      v11 = v8 * 0.5 * a7;
      v9 = v10 * v11;
    }
  }
  result = vadd_f32(*a3, vmul_f32(*a2, vadd_f32(v7, vmul_n_f32(*a4, v9))));
  *a5 = result;
  return result;
}

unint64_t HScrape::GetROI(HScrape *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var3;
  int var1;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26[3];

  v26[2] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var3 = a4.var3;
    var1 = a4.var1;
    (*(void (**)(HScrape *, _QWORD, float32x2_t *))(*(_QWORD *)this + 104))(this, 0, v26);
    v25 = v26[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 1, v26);
    v24 = v26[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 2, v26);
    v11 = v26[0].f32[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 3, v26);
    v12 = v26[0].f32[0];
    (*(void (**)(HScrape *, uint64_t, float32x2_t *))(*(_QWORD *)this + 104))(this, 4, v26);
    v23 = v26[0];
    v26[0].f32[0] = (float)var0;
    v26[0].f32[1] = (float)var1;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v22.f32[0] <= 3.4028e38)
      v13 = v22.f32[0];
    else
      v13 = 3.4028e38;
    if (v22.f32[1] <= 3.4028e38)
      v14 = v22.f32[1];
    else
      v14 = 3.4028e38;
    v26[0].f32[0] = (float)var0;
    v26[0].f32[1] = (float)var3;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v13 >= v22.f32[0])
      v15 = v22.f32[0];
    else
      v15 = v13;
    if (v14 >= v22.f32[1])
      v16 = v22.f32[1];
    else
      v16 = v14;
    v26[0].f32[0] = (float)var2;
    v26[0].f32[1] = (float)var3;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v15 >= v22.f32[0])
      v17 = v22.f32[0];
    else
      v17 = v15;
    if (v16 >= v22.f32[1])
      v18 = v22.f32[1];
    else
      v18 = v16;
    v26[0].f32[0] = (float)var2;
    v26[0].f32[1] = (float)var1;
    HScrape::_TransformPoint(v26, &v23, &v25, &v24, &v22, v11, v12);
    if (v17 >= v22.f32[0])
      v19 = v22.f32[0];
    else
      v19 = v17;
    if (v18 >= v22.f32[1])
      v20 = v22.f32[1];
    else
      v20 = v18;
    v4 = (int)(float)(v19 + -2.0);
    v5 = (int)(float)(v20 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void HScrape::~HScrape(HGNode *this)
{
  void *v1;

  HgcScrape::~HgcScrape(this);
  HGObject::operator delete(v1);
}

uint64_t HSphere::GetDOD(HSphere *this, HGRenderer *a2, int a3, HGRect a4)
{
  float v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  double v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double v17;

  if (a3)
    return 0x8000000080000000;
  v17 = 1.0;
  v14 = 0x3FF0000000000000;
  v11 = 1.0;
  v8 = 1.0;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  v15 = 0u;
  v16 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v8, (double *)this + 53, 0.0);
  v6 = *((float *)this + 104);
  v7 = (float)-v6;
  return HGRectMake4i((int)(floor((*(double *)&v10 + v8 * v7 + *(double *)&v9 * v7)/ (v17 + *((double *)&v15 + 1) * v7 + *(double *)&v16 * v7))+ -1.0), (int)(floor((*((double *)&v12 + 1) + *((double *)&v10 + 1) * v7 + v11 * v7)/ (v17 + *((double *)&v15 + 1) * v7 + *(double *)&v16 * v7))+ -1.0), (int)(ceil((*(double *)&v10 + v8 * v6 + *(double *)&v9 * v6)/ (v17 + *((double *)&v15 + 1) * v6 + *(double *)&v16 * v6))+ 1.0), (int)(ceil((*((double *)&v12 + 1) + *((double *)&v10 + 1) * v6 + v11 * v6)/ (v17 + *((double *)&v15 + 1) * v6 + *(double *)&v16 * v6))+ 1.0));
}

unint64_t HSphere::GetROI(HSphere *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var1;
  int var3;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGPoint v25;
  CGPoint v26;
  CGPoint v27;
  CGPoint v28;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var1 = a4.var1;
    var3 = a4.var3;
    if (a4.var2 - a4.var0 < 1)
    {
      v14 = -1.79769313e308;
      v15 = 1.79769313e308;
      v11 = 1.79769313e308;
      v12 = -1.79769313e308;
    }
    else
    {
      v11 = 1.79769313e308;
      v12 = -1.79769313e308;
      v13 = a4.var0;
      v14 = -1.79769313e308;
      v15 = 1.79769313e308;
      do
      {
        v25.x = (double)v13;
        v25.y = (double)var1;
        v16 = HSphere::ConvertPoint(this, v25);
        if (v16 < v15)
          v15 = v16;
        if (v14 < v16)
          v14 = v16;
        if (v17 < v11)
          v11 = v17;
        if (v12 < v17)
          v12 = v17;
        v26.x = (double)v13;
        v26.y = (double)var3;
        v18 = HSphere::ConvertPoint(this, v26);
        if (v18 < v15)
          v15 = v18;
        if (v14 < v18)
          v14 = v18;
        if (v19 < v11)
          v11 = v19;
        if (v12 < v19)
          v12 = v19;
        ++v13;
      }
      while (var2 != v13);
    }
    if (~var1 + var3 > 1)
    {
      do
      {
        ++var1;
        v27.x = (double)var0;
        v27.y = (double)var1;
        v20 = HSphere::ConvertPoint(this, v27);
        if (v20 < v15)
          v15 = v20;
        if (v14 < v20)
          v14 = v20;
        if (v21 < v11)
          v11 = v21;
        if (v12 < v21)
          v12 = v21;
        v28.x = (double)var2;
        v28.y = (double)var1;
        v22 = HSphere::ConvertPoint(this, v28);
        if (v22 < v15)
          v15 = v22;
        if (v14 < v22)
          v14 = v22;
        if (v23 < v11)
          v11 = v23;
        if (v12 < v23)
          v12 = v23;
      }
      while (var3 - 2 != var1);
    }
    v4 = (int)(v15 + -1.0);
    v5 = (int)(v11 + -2.0);
  }
  return v4 | (unint64_t)(v5 << 32);
}

double HSphere::ConvertPoint(HSphere *this, CGPoint a2)
{
  double v2;
  CGFloat v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = a2.x * *((double *)this + 53) + *((double *)this + 56);
  v3 = a2.y * *((double *)this + 58) + *((double *)this + 60);
  v4 = sqrt(v2 * v2 + v3 * v3);
  v5 = *((float *)this + 104);
  v6 = 1.0 - v4 / v5;
  v7 = 1.0 - sqrt(v6);
  if (v6 <= 0.0)
    v8 = 1.0;
  else
    v8 = v7;
  return *((double *)this + 72) + *((double *)this + 69) * (v2 / v4 * (v8 * v5));
}

uint64_t HSphere::SetRadius(HSphere *this, float a2)
{
  *((float *)this + 104) = a2;
  return (*(uint64_t (**)(HSphere *, _QWORD, float, float, float, float))(*(_QWORD *)this + 96))(this, 0, 1.0 / a2, a2, 0.0, 0.0);
}

uint64_t HSphere::SetOutputToImage(double *a1, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1 + 53;
  if (a1 + 53 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  v6 = *a2;
  v7 = a2[5];
  v8 = a2[3];
  v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v6, v7, v8, v9);
}

uint64_t HSphere::SetImageToInput(double *a1, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1 + 69;
  if (a1 + 69 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  v6 = *a2;
  v7 = a2[5];
  v8 = a2[3];
  v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 2, v6, v7, v8, v9);
}

void HSphere::~HSphere(HGNode *this)
{
  void *v1;

  HgcSphere::~HgcSphere(this);
  HGObject::operator delete(v1);
}

uint64_t HStarburst::GetDOD(HStarburst *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 > 1)
    return 0;
  else
    return HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
}

unint64_t HStarburst::GetROI(HStarburst *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float v11;
  float v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a3 > 1)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    (*(void (**)(HStarburst *, _QWORD, float *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 0, &v11, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
    v5 = v11;
    v6 = v12;
    (*(void (**)(HStarburst *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v11);
    v7 = v11;
    (*(void (**)(HStarburst *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v11);
    v8 = vcvtms_s32_f32((float)(v5 - (float)((float)(1.0 / v7) / v11)) + -1.0);
    LODWORD(v9) = vcvtms_s32_f32((float)(v6 - (float)((float)(1.0 / v7) / v12)) + -1.0);
  }
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t HStarburst::GetOutput(HStarburst *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
    (*(void (**)(HStarburst *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  return HgcStarburst::GetOutput(this, a2);
}

void HStarburst::~HStarburst(HGNode *this)
{
  void *v1;

  HgcStarburst::~HgcStarburst(this);
  HGObject::operator delete(v1);
}

void sub_1B2830358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 160);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  v5 = *(_QWORD *)(v2 - 144);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  _Unwind_Resume(a1);
}

uint64_t HTarget::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = (__int128 *)(a1 + 424);
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

unint64_t HTarget::GetROI(HTarget *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var2;
  int var0;
  int var3;
  int var1;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var2 = a4.var2;
    var0 = a4.var0;
    var3 = a4.var3;
    var1 = a4.var1;
    (*(void (**)(HTarget *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v50);
    v12 = v50;
    v11 = v51;
    (*(void (**)(HTarget *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v50);
    v13 = v50;
    v14 = v51;
    (*(void (**)(HTarget *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v50);
    v15 = v50;
    v16 = v51;
    v17 = v52;
    v18 = v53;
    (*(void (**)(HTarget *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v50);
    v19 = (double)var0 + 0.5 - v12;
    v20 = (double)var1 + 0.5 - v11;
    v21 = (double)var2 + -0.5 - v12;
    v22 = (double)var3 + -0.5 - v11;
    v23 = v15 * v19;
    v24 = v15 * v21;
    v25 = v16 * v20;
    v26 = v16 * v22;
    if (v23 <= v24)
      v27 = v23;
    else
      v27 = v24;
    if (v23 <= v24)
      v28 = v24;
    else
      v28 = v23;
    if (v25 <= v26)
      v29 = v25;
    else
      v29 = v26;
    if (v25 <= v26)
      v30 = v26;
    else
      v30 = v25;
    v31 = v27 * v27;
    v32 = v29 * v29;
    v33 = (float)(v27 * v27) + (float)(v29 * v29);
    if (v27 > 0.0 || v28 < 0.0 || v29 > 0.0 || (v34 = 0.0, v30 < 0.0))
    {
      v34 = 3.4028e38;
      if (v33 < 3.4028e38)
        v34 = v33;
    }
    v35 = fmaxf(v33, 0.0);
    v36 = v28 * v28;
    if (v34 > (float)(v36 + v32))
      v34 = v36 + v32;
    if (v35 < (float)(v36 + v32))
      v35 = v36 + v32;
    v37 = v30 * v30;
    if (v34 > (float)(v37 + v31))
      v34 = v37 + v31;
    if (v35 < (float)(v37 + v31))
      v35 = v37 + v31;
    if (v34 > (float)(v36 + v37))
      v34 = v36 + v37;
    if (v35 < (float)(v36 + v37))
      v35 = v36 + v37;
    if (v34 > v32)
      v34 = v32;
    if (v35 >= v32)
      v32 = v35;
    if (v34 <= v37)
      v38 = v34;
    else
      v38 = v37;
    if (v32 < v37)
      v32 = v37;
    if (v38 <= v31)
      v39 = v38;
    else
      v39 = v27 * v27;
    if (v32 >= v31)
      v31 = v32;
    if (v39 <= v36)
      v40 = v39;
    else
      v40 = v36;
    if (v31 < v36)
      v31 = v36;
    v41 = sqrtf(v40);
    v42 = sqrtf(v31);
    v43 = (float)(v13 * v17) * v41;
    v44 = (float)(v14 * v18) * v41;
    v45 = (float)(v13 * v17) * v42;
    v46 = (float)(v14 * v18) * v42;
    if (v43 <= v45)
      v47 = v43;
    else
      v47 = v45;
    if (v44 <= v46)
      v48 = v44;
    else
      v48 = v46;
    v4 = vcvtmd_s64_f64((float)((float)(v12 * v50) + v47) + -0.5);
    LODWORD(v5) = vcvtmd_s64_f64((float)((float)(v11 * v51) + v48) + -0.5);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HTarget::GetOutput(HTarget *this, HGRenderer *a2)
{
  float v4;
  int v5;

  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
  {
    if (!HGRectIsInfinite(*((_QWORD *)this + 53), *((_QWORD *)this + 54)))
    {
      v4 = (float)((*((_DWORD *)this + 109) - *((_DWORD *)this + 107))
                 * (*((_DWORD *)this + 108) - *((_DWORD *)this + 106)));
      v5 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 1);
      if ((float)((float)((float)v5 * 16.0) * (float)v5) <= v4)
        (*(void (**)(HTarget *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
    }
  }
  return HgcTarget::GetOutput(this, a2);
}

uint64_t HTarget::SetFrameSize(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 416) = a2;
  *(_DWORD *)(this + 420) = a3;
  return this;
}

__n128 HTarget::SetCropRect(HTarget *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)this + 424) = *a2;
  return result;
}

void HTarget::~HTarget(HGNode *this)
{
  void *v1;

  HgcTarget::~HgcTarget(this);
  HGObject::operator delete(v1);
}

void HTwirl::HTwirl(HTwirl *this)
{
  _QWORD *v1;

  HgcTwirl::HgcTwirl(this);
  *v1 = off_1E64E0C80;
  v1[52] = 0;
  v1[53] = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v1[54] = _D0;
}

void HTwirl::~HTwirl(HGNode *this)
{
  void *v1;

  HgcTwirl::~HgcTwirl(this);
  HGObject::operator delete(v1);
}

uint64_t HTwirl::init(HTwirl *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  *((float *)this + 104) = a2;
  *((float *)this + 105) = a3;
  *((float *)this + 106) = a4;
  *((float *)this + 107) = a5;
  *((float *)this + 108) = a6;
  *((float *)this + 109) = a7;
  (*(void (**)(HTwirl *, _QWORD))(*(_QWORD *)this + 96))(this, 0);
  (*(void (**)(HTwirl *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 1, a4, a5, 0.0, 0.0);
  return (*(uint64_t (**)(HTwirl *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 2, a6, a7, 1.0 / a6, 1.0 / a7);
}

uint64_t HTwirl::GetDOD(HTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  float v5;

  if (a3)
    return 0;
  v5 = *((float *)this + 106);
  return HGRectMake4i((int)(float)(*((float *)this + 104) - (float)(v5 / *((float *)this + 108))), (int)(float)(*((float *)this + 105) - (float)(v5 / *((float *)this + 109))), (int)(float)(*((float *)this + 104) + (float)(v5 / *((float *)this + 108))), (int)(float)(*((float *)this + 105) + (float)(v5 / *((float *)this + 109))));
}

unint64_t HTwirl::GetROI(HTwirl *this, HGRenderer *a2, int a3, HGRect a4, double a5, int32x2_t a6)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float i;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v59;
  int32x2_t v60;
  float32x2_t v61;
  unint64_t v62;
  HGRect v63;

  if (a3)
    return 0;
  v7 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v8 = *((float *)this + 104);
  v9 = *((float *)this + 105);
  v62 = __PAIR64__(LODWORD(v9), LODWORD(v8));
  a6.i32[0] = *((_DWORD *)this + 106);
  v59 = *((float *)this + 107);
  v60 = a6;
  v10 = *((float *)this + 108);
  v11 = *((float *)this + 109);
  v63 = a4;
  v12 = HGRectMake4i((int)(float)((float)(v8 - *(float *)a6.i32) / v10), (int)(float)((float)(v9 - *(float *)a6.i32) / v11), (int)(float)((float)(v8 + *(float *)a6.i32) / v10), (int)(float)((float)(v9 + *(float *)a6.i32) / v11));
  v14 = HGRectUnion(v12, v13, v6, v7);
  if (!HGRectIsNull(v14, v15))
  {
    v16 = (float)((float)((float)(int)v6 - v8) * v10) * (float)((float)((float)(int)v6 - v8) * v10);
    v17 = (float)((float)((float)SHIDWORD(v6) - v9) * v11) * (float)((float)((float)SHIDWORD(v6) - v9) * v11);
    v18 = v16 + v17;
    v19 = (float)((float)((float)SHIDWORD(v7) - v9) * v11) * (float)((float)((float)SHIDWORD(v7) - v9) * v11);
    v20 = (float)((float)((float)(int)v7 - v8) * v10) * (float)((float)((float)(int)v7 - v8) * v10);
    v21 = v20 + v17;
    v22 = v20 + v19;
    if ((float)(v16 + v17) >= (float)(v16 + v19))
      v23 = v16 + v17;
    else
      v23 = v16 + v19;
    if (v21 >= v22)
      v24 = v20 + v17;
    else
      v24 = v20 + v19;
    if (v23 < v24)
      v23 = v24;
    if (v22 < v21)
      v21 = v20 + v19;
    if ((float)(v16 + v19) < v18)
      v18 = v16 + v19;
    if (v21 < v18)
      v18 = v21;
    if (v8 > (float)(int)v6)
    {
      v25 = (float)((float)(v8 - v8) * v10) * (float)((float)(v8 - v8) * v10);
      v26 = v25 + v17;
      v27 = v25 + v19;
      if (v27 < v26)
        v26 = v27;
      if (v26 >= v18)
        v26 = v18;
      if (v8 < (float)(int)v7)
        v18 = v26;
    }
    if (v9 > (float)SHIDWORD(v6))
    {
      v28 = (float)((float)(v9 - v9) * v11) * (float)((float)(v9 - v9) * v11);
      v29 = v16 + v28;
      v30 = v20 + v28;
      if (v30 < v29)
        v29 = v30;
      if (v29 >= v18)
        v29 = v18;
      if (v9 < (float)SHIDWORD(v7))
        v18 = v29;
    }
    v31 = 0;
    if (*(float *)v60.i32 > 0.0)
    {
      v32 = sqrtf(v23);
      v33.f32[0] = sqrtf(v18);
      v33.f32[1] = v32;
      v34 = vdiv_f32(v33, (float32x2_t)vdup_lane_s32(v60, 0));
      __asm { FMOV            V1.2S, #1.0 }
      v40 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v34, _D1), (int8x8_t)_D1, (int8x8_t)v34);
      v41 = vmul_f32(v40, v40);
      v42 = vmul_f32(v40, v41);
      __asm { FMOV            V3.2S, #-3.0 }
      v31 = vmul_n_f32(vadd_f32(vadd_f32(vmul_f32(v41, _D3), _D1), vadd_f32(v42, v42)), v59);
    }
    v61 = v31;
    v46 = v45;
    v49 = HGRectUnion(v44, v46, v47, v48);
    v51 = v50;
    if (v61.f32[1] >= v61.f32[0])
      v52 = v61.f32[0];
    else
      v52 = v61.f32[1];
    if (v61.f32[0] >= v61.f32[1])
      v53 = v61.f32[0];
    else
      v53 = v61.f32[1];
    for (i = v52 + 0.1; i < v53; i = i + 0.1)
    {
      v49 = HGRectUnion(v49, v51, v55, v56);
      v51 = v57;
    }
    return (v49 & 0xFFFFFFFF00000000 | (v49 - 3)) - 0x300000000;
  }
  return v6;
}

uint64_t `anonymous namespace'::rotateRectROI(int *a1, float *a2, float a3, float a4, float a5)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  v8 = *a2;
  v7 = a2[1];
  v9 = (float)((float)*a1 - *a2) * a4;
  v10 = (float)((float)a1[1] - v7) * a5;
  v11 = (float)((float)a1[3] - v7) * a5;
  v12 = (float)((float)a1[2] - *a2) * a4;
  v13 = __sincosf_stret(a3);
  v14 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v10);
  v15 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v9);
  v16 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v11);
  v17 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v9);
  v18 = (float)(v13.__sinval * v10) + (float)(v13.__cosval * v12);
  v19 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v12);
  v20 = (float)(v13.__sinval * v11) + (float)(v13.__cosval * v12);
  v21 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v12);
  if (v20 >= v18)
    v22 = (float)(v13.__sinval * v10) + (float)(v13.__cosval * v12);
  else
    v22 = (float)(v13.__sinval * v11) + (float)(v13.__cosval * v12);
  if (v16 >= v14)
    v23 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v10);
  else
    v23 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v11);
  if (v22 >= v23)
    v22 = v23;
  if (v14 >= v16)
    v16 = (float)(v13.__cosval * v9) + (float)(v13.__sinval * v10);
  if (v18 >= v20)
    v20 = (float)(v13.__sinval * v10) + (float)(v13.__cosval * v12);
  if (v16 >= v20)
    v20 = v16;
  if (v21 >= v19)
    v24 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v12);
  else
    v24 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v12);
  if (v17 >= v15)
    v25 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v9);
  else
    v25 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v9);
  if (v24 >= v25)
    v24 = v25;
  if (v15 >= v17)
    v26 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v9);
  else
    v26 = (float)(v13.__cosval * v11) - (float)(v13.__sinval * v9);
  if (v19 >= v21)
    v21 = (float)(v13.__cosval * v10) - (float)(v13.__sinval * v12);
  if (v26 >= v21)
    v21 = v26;
  return HGRectMake4i((int)(float)(v8 + (float)(v22 / a4)), (int)(float)(v7 + (float)(v24 / a5)), (int)(float)(v8 + (float)(v20 / a4)), (int)(float)(v7 + (float)(v21 / a5)));
}

void sub_1B2831D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v12;

  HGObject::operator delete(v12);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  _Unwind_Resume(a1);
}

void HUnderwaterRefractV2::HUnderwaterRefractV2(HUnderwaterRefractV2 *this)
{
  _QWORD *v1;

  HgcUnderwaterRefractV2::HgcUnderwaterRefractV2(this);
  *v1 = off_1E64E0EE8;
  v1[52] = 0;
}

void HUnderwaterRefractV2::~HUnderwaterRefractV2(HGNode *this)
{
  void *v1;

  HgcUnderwaterRefractV2::~HgcUnderwaterRefractV2(this);
  HGObject::operator delete(v1);
}

uint64_t HUnderwaterRefractV2::GetOutput(HUnderwaterRefractV2 *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
    (*(void (**)(HUnderwaterRefractV2 *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  return HgcUnderwaterRefractV2::GetOutput(this, a2);
}

uint64_t HUnderwaterRefractV2::SetMaxOffsets(uint64_t this, float a2, float a3)
{
  *(float *)(this + 416) = a2;
  *(float *)(this + 420) = a3;
  return this;
}

uint64_t HUnderwaterRefractV2::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3 >= 2)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

unint64_t HUnderwaterRefractV2::GetROI(float32x2_t *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  int var0;
  int var1;
  unsigned int v7;
  uint64_t v8;
  float32x2_t v10;
  float32x4_t v16;
  __int128 v18;
  float32x4_t v19;
  float32x2_t v20[2];
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  int v25;
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v4 = *(_QWORD *)&a4.var2;
  var0 = a4.var0;
  v33 = *MEMORY[0x1E0C80C00];
  var1 = a4.var1;
  if (a3)
  {
    if (a3 == 1)
      v7 = a4.var0;
    else
      v7 = 0;
    if (a3 == 1)
      v8 = a4.var1;
    else
      v8 = 0;
  }
  else
  {
    (*(void (**)(float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 8, &v32);
    v10 = (float32x2_t)v32;
    v29 = 1065353216;
    v28 = 0;
    v30 = 0;
    v24 = 1065353216;
    v23 = 0;
    v25 = 0;
    (*(void (**)(float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 3, &v32);
    v27[0] = v32;
    (*(void (**)(float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 4, &v32);
    v27[1] = v32;
    (*(void (**)(float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 5, &v32);
    v31 = v32;
    (*(void (**)(float32x2_t *, _QWORD, __int128 *))(*(_QWORD *)this + 104))(this, 0, &v32);
    v22[0] = v32;
    (*(void (**)(float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 1, &v32);
    v22[1] = v32;
    (*(void (**)(float32x2_t *, uint64_t, __int128 *))(*(_QWORD *)this + 104))(this, 2, &v32);
    v26 = v32;
    *(float *)&v32 = (float)var0;
    *((float *)&v32 + 1) = (float)var1;
    *((_QWORD *)&v32 + 1) = 0x3F80000000000000;
    *(float *)&v21 = (float)(int)v4;
    *((float *)&v21 + 1) = (float)SHIDWORD(v4);
    *((_QWORD *)&v21 + 1) = 0x3F80000000000000;
    v20[0] = 0;
    v20[1] = 0;
    PCMatrix44Tmpl<float>::transform<float>((float *)v22, (float *)&v32, (float *)v20);
    v19 = 0uLL;
    PCMatrix44Tmpl<float>::transform<float>((float *)v22, (float *)&v21, v19.f32);
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)v16.f32 = vmul_f32(v10, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, this[52]), (int8x8_t)_D1, (int8x8_t)this[52]));
    v20[0] = vsub_f32(v20[0], *(float32x2_t *)v16.f32);
    v19 = vaddq_f32(v16, v19);
    v18 = 0uLL;
    PCMatrix44Tmpl<float>::transform<float>((float *)v27, (float *)v20, (float *)&v18);
    v32 = v18;
    v18 = 0uLL;
    PCMatrix44Tmpl<float>::transform<float>((float *)v27, v19.f32, (float *)&v18);
    v21 = v18;
    v7 = (int)(floorf(*(float *)&v32) + -1.0);
    v8 = (int)(floorf(*((float *)&v32 + 1)) + -1.0);
  }
  return v7 | (unint64_t)(v8 << 32);
}

void sub_1B2832A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

void HDroplet::HDroplet(HDroplet *this)
{
  uint64_t v1;

  HgcDroplet::HgcDroplet(this);
  *(_QWORD *)v1 = &unk_1E64E3310;
  *(_QWORD *)(v1 + 536) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 416) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_QWORD *)(v1 + 664) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 544) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_QWORD *)(v1 + 688) = 0;
}

void sub_1B2833460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;

  if (a35)
    (*(void (**)(uint64_t))(*(_QWORD *)a35 + 24))(a35);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  v37 = *(_QWORD *)(v35 - 144);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  _Unwind_Resume(exception_object);
}

uint64_t HWave::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

unint64_t HWave::GetROI(HWave *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  uint64_t v5;
  int var0;
  int var1;
  float v9;
  int v10;
  int v11;
  float v13;
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    var0 = a4.var0;
    var1 = a4.var1;
    (*(void (**)(HWave *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v13);
    v9 = v13;
    (*(void (**)(HWave *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v13);
    if (v14 == 0.0)
      v10 = (int)(float)((float)var0 - v9);
    else
      v10 = var0;
    if (v14 == 0.0)
      v11 = var1;
    else
      v11 = (int)(float)((float)var1 - v9);
    v4 = v10 - 1;
    v5 = (v11 - 1);
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t HWave::GetOutput(HWave *this, HGRenderer *a2)
{
  float v4;
  float v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
  {
    (*(void (**)(HWave *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, v6);
    v4 = v6[0];
    if ((float)(v4 / (float)(*(int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 1)) >= 0.5)
      (*(void (**)(HWave *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  }
  return HgcWave::GetOutput(this, a2);
}

void HWave::~HWave(HGNode *this)
{
  void *v1;

  HgcWave::~HgcWave(this);
  HGObject::operator delete(v1);
}

uint64_t HCheckerboard::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HCheckerboard::GetROI()
{
  return 0;
}

void HCheckerboard::~HCheckerboard(HGNode *this)
{
  void *v1;

  HgcCheckerboard::~HgcCheckerboard(this);
  HGObject::operator delete(v1);
}

uint64_t HStripes::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HStripes::GetROI()
{
  return 0;
}

void HStripes::~HStripes(HGNode *this)
{
  void *v1;

  HgcStripes::~HgcStripes(this);
  HGObject::operator delete(v1);
}

uint64_t HiOSStretch::GetDOD(HiOSStretch *this, HGRenderer *a2, int a3, HGRect a4)
{
  CGFloat var0;
  CGFloat var1;
  CGFloat v6;
  CGFloat v7;
  _BYTE v9[4];
  float v10;
  uint64_t v11;
  CGRect v12;
  CGRect v13;

  v11 = *MEMORY[0x1E0C80C00];
  var0 = (double)a4.var0;
  var1 = (double)a4.var1;
  v6 = (double)(a4.var2 - a4.var0);
  v7 = (double)(a4.var3 - a4.var1);
  (*(void (**)(HiOSStretch *, uint64_t, _BYTE *))(*(_QWORD *)this + 104))(this, 1, v9);
  v12.origin.x = var0;
  v12.origin.y = var1;
  v12.size.width = v6;
  v12.size.height = v7;
  v13 = CGRectInset(v12, (float)-v10, (float)-v10);
  return HGRectFromCGRect(v13);
}

uint64_t HiOSStretch::GetROI(HiOSStretch *this, HGRenderer *a2, int a3, HGRect a4)
{
  int var0;
  int var1;
  CGFloat v7;
  double v8;
  CGFloat v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  CGFloat width;
  CGFloat height;
  CGFloat v17;
  CGFloat v18;
  unsigned int v19;
  float v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat r1;
  float v27;
  float v28;
  double v29;
  CGFloat y;
  CGFloat v31;
  CGFloat x;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  float v37;
  float v38;
  float v39[4];
  float v40[2];
  unint64_t v41;
  float32x2_t v42;
  float v43[4];
  float v44[2];
  float32x2_t v45;
  float32x2_t v46;
  float v47[4];
  float v48[2];
  float32x2_t v49;
  float32x2_t v50;
  float v51[4];
  float v52[2];
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  var0 = a4.var0;
  v59 = *MEMORY[0x1E0C80C00];
  var1 = a4.var1;
  v7 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v31 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v34 = *(CGFloat *)MEMORY[0x1E0C9D628];
  v8 = (double)a4.var1;
  v35 = (double)(a4.var2 - a4.var0);
  v36 = (double)a4.var0;
  v9 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v29 = (double)(a4.var3 - a4.var1);
  (*(void (**)(HiOSStretch *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v55);
  v10 = v55;
  v11 = v56;
  v37 = v55;
  (*(void (**)(HiOSStretch *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v55);
  v38 = v56;
  v53.f32[0] = (float)var0;
  v53.f32[1] = (float)var1;
  v52[0] = v10;
  v52[1] = v11;
  v28 = v57;
  v51[0] = v55;
  v51[1] = v56;
  v12 = v55;
  v51[2] = v57;
  v51[3] = v58;
  v13 = v57;
  v14 = v58;
  stretch(&v53, v52, v51, &v54);
  v68.origin.x = v54.f32[0];
  v68.origin.y = v54.f32[1];
  v68.size.width = 0.0;
  v68.size.height = 0.0;
  v60.origin.y = v31;
  v60.origin.x = v34;
  v60.size.width = v7;
  v60.size.height = v9;
  v61 = CGRectUnion(v60, v68);
  x = v61.origin.x;
  r1 = v61.origin.y;
  width = v61.size.width;
  height = v61.size.height;
  *(float *)&v61.origin.x = v8 + v29;
  LODWORD(v34) = LODWORD(v61.origin.x);
  v49.f32[0] = (float)var0;
  v49.i32[1] = LODWORD(v61.origin.x);
  v48[0] = v37;
  v48[1] = v11;
  v47[0] = v12;
  v27 = v12;
  v47[1] = v38;
  v47[2] = v13;
  v47[3] = v14;
  stretch(&v49, v48, v47, &v50);
  v69.origin.x = v50.f32[0];
  v69.origin.y = v50.f32[1];
  v69.size.width = 0.0;
  v69.size.height = 0.0;
  v62.origin.x = x;
  v62.origin.y = r1;
  v62.size.width = width;
  v62.size.height = height;
  v63 = CGRectUnion(v62, v69);
  y = v63.origin.y;
  v33 = v63.origin.x;
  v17 = v63.size.width;
  v18 = v63.size.height;
  *(float *)&v19 = v36 + v35;
  v45.i32[0] = v19;
  v45.f32[1] = (float)var1;
  v44[0] = v37;
  v44[1] = v11;
  v43[0] = v12;
  v43[1] = v38;
  v43[2] = v28;
  v43[3] = v14;
  v20 = v14;
  stretch(&v45, v44, v43, &v46);
  v70.origin.x = v46.f32[0];
  v70.origin.y = v46.f32[1];
  v70.size.width = 0.0;
  v70.size.height = 0.0;
  v64.origin.y = y;
  v64.origin.x = v33;
  v64.size.width = v17;
  v64.size.height = v18;
  v65 = CGRectUnion(v64, v70);
  v21 = v65.origin.x;
  v22 = v65.origin.y;
  v23 = v65.size.width;
  v24 = v65.size.height;
  v41 = __PAIR64__(LODWORD(v34), v19);
  v40[0] = v37;
  v40[1] = v11;
  v39[0] = v27;
  v39[1] = v38;
  v39[2] = v28;
  v39[3] = v20;
  stretch((float32x2_t *)&v41, v40, v39, &v42);
  v71.origin.x = v42.f32[0];
  v71.origin.y = v42.f32[1];
  v71.size.width = 0.0;
  v71.size.height = 0.0;
  v66.origin.x = v21;
  v66.origin.y = v22;
  v66.size.width = v23;
  v66.size.height = v24;
  v67 = CGRectUnion(v66, v71);
  return HGRectFromCGRect(v67);
}

float32x2_t stretch@<D0>(float32x2_t *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float32x2_t *a4@<X8>)
{
  const float *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t result;
  float v20;
  float v21;
  float32x2_t v22;
  float v23;

  v5 = a2 + 1;
  v22 = *a1;
  v23 = a3[1];
  v6 = vld1_dup_f32(v5);
  v7 = vsub_f32(*a1, v6);
  v8 = vmul_n_f32(v7, a3[2]);
  v20 = v8.f32[0];
  v7.f32[0] = COERCE_FLOAT(*a1) - *a2;
  v9 = vmul_n_f32(vabs_f32(v7), *a3);
  __asm { FMOV            V2.2S, #1.0 }
  v15 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_f32(v9), (int8x8_t)_D2, vbic_s8((int8x8_t)vsub_f32(_D2, v9), (int8x8_t)vcgt_f32(v9, _D2)));
  __asm { FMOV            V2.2S, #3.0 }
  v17 = vmul_f32(v15, vmul_f32(v15, vsub_f32(_D2, vadd_f32(v15, v15))));
  v21 = sinf(v8.f32[1]);
  v18.f32[0] = sinf(v20);
  v18.f32[1] = v21;
  result = vsub_f32(v22, vmul_f32(vmul_n_f32(v18, v23), v17));
  *a4 = result;
  return result;
}

void HiOSStretch::~HiOSStretch(HGNode *this)
{
  void *v1;

  HgciOSStretch::~HgciOSStretch(this);
  HGObject::operator delete(v1);
}

void sub_1B28343F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_1B283484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

void sub_1B28350BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  _Unwind_Resume(exception_object);
}

void sub_1B2835750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

void sub_1B2836720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B283714C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HLevels::HLevels(HLevels *this)
{
  HgcLevels *v1;
  char *v2;

  HgcLevels::HgcLevels(this);
  *(_QWORD *)v1 = &unk_1E64E1B30;
  HgcLevels::SetParameter(v1, 10, 1.0, 1.0, 1.0, 1.0, v2);
}

void sub_1B28372B8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcLevels::~HgcLevels(v1);
  _Unwind_Resume(a1);
}

void HLevels::~HLevels(HGNode *this)
{
  void *v1;

  HgcLevels::~HgcLevels(this);
  HGObject::operator delete(v1);
}

void sub_1B28374A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B28376B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HLumaKeyer::HLumaKeyer(HLumaKeyer *this, char a2)
{
  uint64_t v3;

  HgcLumaKeyer::HgcLumaKeyer(this);
  *(_QWORD *)v3 = &unk_1E64E1D98;
  *(_BYTE *)(v3 + 416) = a2;
  HGNode::SetFlags((HGNode *)v3, 1, 2);
}

void sub_1B283799C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcLumaKeyer::~HgcLumaKeyer(v1);
  _Unwind_Resume(a1);
}

void HLumaKeyer::~HLumaKeyer(HGNode *this)
{
  void *v1;

  HgcLumaKeyer::~HgcLumaKeyer(this);
  HGObject::operator delete(v1);
}

uint64_t HLumaKeyer::GetROI(HLumaKeyer *this, HGRenderer *a2, int a3, __int128 a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  HGRect v11;

  if (a3 == 1)
  {
    if (*((_BYTE *)this + 416))
      v4 = 2816;
    else
      v4 = 256;
    *(_QWORD *)&v10 = HGRectMake4i(0, 0, v4, 1u);
    *((_QWORD *)&v10 + 1) = v5;
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v8 = v7;
    *(_QWORD *)&v11.var0 = v6;
    *(_QWORD *)&v11.var2 = v8;
    HGRect::Grow((HGRect *)&v10, v11);
  }
  else if (a3)
  {
    return HGRectNull;
  }
  else
  {
    return a4;
  }
  return v10;
}

FxMatrix44 *PAEInitSampling(_anonymous_namespace_::_Local *a1)
{
  FxMatrix44 *result;
  FxMatrix44 *v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = result;
  v3 = (unint64_t *)&result->_mat[0][2];
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (!v4)
  {

    result = objc_alloc_init(FxMatrix44);
    *(_QWORD *)&v2->_mat[0][1] = result;
  }
  return result;
}

uint64_t `anonymous namespace'::_Local::Get(_anonymous_namespace_::_Local *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
  }
}

void PAEDisposeSampling(_anonymous_namespace_::_Local *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = v1;
  v3 = (unint64_t *)(v1 + 24);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {

    *(_QWORD *)(v2 + 16) = 0;
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<`anonymous namespace'::_Local::Get(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;

  v0 = operator new();
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_QWORD *)(v0 + 144) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_QWORD *)(v0 + 224) = 0;
  PCMutex::PCMutex((PCMutex *)(v0 + 232), 1);
  *(_QWORD *)(v0 + 232) = &unk_1E64E2000;
}

void sub_1B2837BE8(_Unwind_Exception *a1, const PCString *a2)
{
  _QWORD *v2;
  OZChannelBase *v3;
  OZChannelBase *v4;
  OZChannelBase *v5;
  const PCString *v7;
  void *v8;
  void *v9;

  v5 = v4;
  OZChannelBase::setRangeName(v5, a2);
  v8 = (void *)v2[16];
  if (v8)
  {
    v2[17] = v8;
    operator delete(v8);
  }
  OZChannelBase::setRangeName(v3, v7);
  v9 = (void *)v2[4];
  if (v9)
  {
    v2[5] = v9;
    operator delete(v9);
  }
  MEMORY[0x1B5E29170](v2, 0x10A0C40FB59A684);
  _Unwind_Resume(a1);
}

void PCRecursiveMutex::~PCRecursiveMutex(PCRecursiveMutex *this)
{
  PCMutex::~PCMutex((PCMutex *)this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B2837CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_1B28388E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2839450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 24))(a29);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  v33 = *(_QWORD *)(v31 - 248);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  v34 = *(_QWORD *)(v31 - 240);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  v35 = *(_QWORD *)(v31 - 208);
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = *(_QWORD *)(v31 - 200);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  _Unwind_Resume(a1);
}

void sub_1B283A9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(exception_object);
}

void HChannelMixer::HChannelMixer(HChannelMixer *this)
{
  HgcChannelMixer *v1;
  char *v2;

  HgcChannelMixer::HgcChannelMixer(this);
  *(_QWORD *)v1 = &unk_1E64E2058;
  HgcChannelMixer::SetParameter(v1, 4, 1.0, 1.0, 1.0, 1.0, v2);
}

void sub_1B283AB9C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcChannelMixer::~HgcChannelMixer(v1);
  _Unwind_Resume(a1);
}

void HChannelMixer::~HChannelMixer(HGNode *this)
{
  void *v1;

  HgcChannelMixer::~HgcChannelMixer(this);
  HGObject::operator delete(v1);
}

void sub_1B283B884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B283C0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C405997BE26);
  _Unwind_Resume(a1);
}

void sub_1B283C704(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C405997BE26);
  _Unwind_Resume(a1);
}

void OMPie::OMPie(OMPie *this)
{
  void **v2;
  char **v3;
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;

  *((_QWORD *)this + 5) = 0;
  v2 = (void **)((char *)this + 40);
  *((_DWORD *)this + 8) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v3 = (char **)((char *)this + 56);
  v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 56, 1uLL);
  v5 = (_DWORD *)*((_QWORD *)this + 5);
  v6 = (_DWORD *)*((_QWORD *)this + 6);
  v8 = (char *)&v4[v7];
  *v4 = 0;
  v9 = (char *)(v4 + 1);
  v10 = v4;
  while (v6 != v5)
  {
    v11 = *(v6 - 2);
    v6 -= 2;
    *((_DWORD *)v10-- - 2) = v11;
    *((_DWORD *)v10 + 1) = v6[1];
  }
  *((_QWORD *)this + 5) = v10;
  *((_QWORD *)this + 6) = v9;
  *((_QWORD *)this + 7) = v8;
  if (v5)
  {
    operator delete(v5);
    v8 = *v3;
  }
  *((_QWORD *)this + 6) = v9;
  if (v9 >= v8)
  {
    v13 = (char *)*v2;
    v14 = (v9 - (_BYTE *)*v2) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = v8 - v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v17);
      v13 = (char *)*((_QWORD *)this + 5);
      v9 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v14];
    v8 = &v18[8 * v17];
    *(_QWORD *)v19 = 0;
    v12 = v19 + 8;
    while (v9 != v13)
    {
      v20 = *((_DWORD *)v9 - 2);
      v9 -= 8;
      *((_DWORD *)v19 - 2) = v20;
      v19 -= 8;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v9 + 1);
    }
    *((_QWORD *)this + 5) = v19;
    *((_QWORD *)this + 6) = v12;
    *((_QWORD *)this + 7) = v8;
    if (v13)
    {
      operator delete(v13);
      v8 = *v3;
    }
  }
  else
  {
    v4[1] = 0;
    v12 = (char *)(v4 + 2);
  }
  *((_QWORD *)this + 6) = v12;
  if (v12 >= v8)
  {
    v22 = *v2;
    v23 = (v12 - (_BYTE *)*v2) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v25 = v8 - v22;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v26);
      v22 = (_BYTE *)*((_QWORD *)this + 5);
      v12 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[8 * v23];
    v8 = &v27[8 * v26];
    *(_QWORD *)v28 = 0;
    v21 = v28 + 8;
    while (v12 != v22)
    {
      v29 = *((_DWORD *)v12 - 2);
      v12 -= 8;
      *((_DWORD *)v28 - 2) = v29;
      v28 -= 8;
      *((_DWORD *)v28 + 1) = *((_DWORD *)v12 + 1);
    }
    *((_QWORD *)this + 5) = v28;
    *((_QWORD *)this + 6) = v21;
    *((_QWORD *)this + 7) = v8;
    if (v22)
    {
      operator delete(v22);
      v8 = *v3;
    }
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v21 = v12 + 8;
  }
  *((_QWORD *)this + 6) = v21;
  if (v21 >= v8)
  {
    v31 = *v2;
    v32 = (v21 - (_BYTE *)*v2) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v34 = v8 - v31;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v35);
      v31 = (_BYTE *)*((_QWORD *)this + 5);
      v21 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[8 * v32];
    v8 = &v36[8 * v35];
    *(_QWORD *)v37 = 0;
    v30 = v37 + 8;
    while (v21 != v31)
    {
      v38 = *((_DWORD *)v21 - 2);
      v21 -= 8;
      *((_DWORD *)v37 - 2) = v38;
      v37 -= 8;
      *((_DWORD *)v37 + 1) = *((_DWORD *)v21 + 1);
    }
    *((_QWORD *)this + 5) = v37;
    *((_QWORD *)this + 6) = v30;
    *((_QWORD *)this + 7) = v8;
    if (v31)
    {
      operator delete(v31);
      v8 = *v3;
    }
  }
  else
  {
    *(_QWORD *)v21 = 0;
    v30 = v21 + 8;
  }
  *((_QWORD *)this + 6) = v30;
  if (v30 >= v8)
  {
    v40 = (char *)*v2;
    v41 = (v30 - (_BYTE *)*v2) >> 3;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v43 = v8 - v40;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v44);
      v40 = (char *)*((_QWORD *)this + 5);
      v30 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v45 = 0;
    }
    v46 = &v45[8 * v41];
    v47 = &v45[8 * v44];
    *(_QWORD *)v46 = 0;
    v39 = v46 + 8;
    while (v30 != v40)
    {
      v48 = *((_DWORD *)v30 - 2);
      v30 -= 8;
      *((_DWORD *)v46 - 2) = v48;
      v46 -= 8;
      *((_DWORD *)v46 + 1) = *((_DWORD *)v30 + 1);
    }
    *((_QWORD *)this + 5) = v46;
    *((_QWORD *)this + 6) = v39;
    *((_QWORD *)this + 7) = v47;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *(_QWORD *)v30 = 0;
    v39 = v30 + 8;
  }
  *((_QWORD *)this + 6) = v39;
}

void sub_1B283DA74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void PAEKeyerPie::~PAEKeyerPie(PAEKeyerPie *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E29170);
}

void OMPie::OMPie(OMPie *this, int a2)
{
  void **v3;
  char **v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  int v49;

  *((_QWORD *)this + 5) = 0;
  v3 = (void **)((char *)this + 40);
  *((_DWORD *)this + 8) = a2;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v4 = (char **)((char *)this + 56);
  v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 56, 1uLL);
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  v7 = (_DWORD *)*((_QWORD *)this + 6);
  v9 = (char *)&v5[v8];
  *v5 = 0;
  v10 = (char *)(v5 + 1);
  v11 = v5;
  while (v7 != v6)
  {
    v12 = *(v7 - 2);
    v7 -= 2;
    *((_DWORD *)v11-- - 2) = v12;
    *((_DWORD *)v11 + 1) = v7[1];
  }
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = v10;
  *((_QWORD *)this + 7) = v9;
  if (v6)
  {
    operator delete(v6);
    v9 = *v4;
  }
  *((_QWORD *)this + 6) = v10;
  if (v10 >= v9)
  {
    v14 = (char *)*v3;
    v15 = (v10 - (_BYTE *)*v3) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v17 = v9 - v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v18);
      v14 = (char *)*((_QWORD *)this + 5);
      v10 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v9 = &v19[8 * v18];
    *(_QWORD *)v20 = 0;
    v13 = v20 + 8;
    while (v10 != v14)
    {
      v21 = *((_DWORD *)v10 - 2);
      v10 -= 8;
      *((_DWORD *)v20 - 2) = v21;
      v20 -= 8;
      *((_DWORD *)v20 + 1) = *((_DWORD *)v10 + 1);
    }
    *((_QWORD *)this + 5) = v20;
    *((_QWORD *)this + 6) = v13;
    *((_QWORD *)this + 7) = v9;
    if (v14)
    {
      operator delete(v14);
      v9 = *v4;
    }
  }
  else
  {
    v5[1] = 0;
    v13 = (char *)(v5 + 2);
  }
  *((_QWORD *)this + 6) = v13;
  if (v13 >= v9)
  {
    v23 = *v3;
    v24 = (v13 - (_BYTE *)*v3) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v26 = v9 - v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v27);
      v23 = (_BYTE *)*((_QWORD *)this + 5);
      v13 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[8 * v24];
    v9 = &v28[8 * v27];
    *(_QWORD *)v29 = 0;
    v22 = v29 + 8;
    while (v13 != v23)
    {
      v30 = *((_DWORD *)v13 - 2);
      v13 -= 8;
      *((_DWORD *)v29 - 2) = v30;
      v29 -= 8;
      *((_DWORD *)v29 + 1) = *((_DWORD *)v13 + 1);
    }
    *((_QWORD *)this + 5) = v29;
    *((_QWORD *)this + 6) = v22;
    *((_QWORD *)this + 7) = v9;
    if (v23)
    {
      operator delete(v23);
      v9 = *v4;
    }
  }
  else
  {
    *(_QWORD *)v13 = 0;
    v22 = v13 + 8;
  }
  *((_QWORD *)this + 6) = v22;
  if (v22 >= v9)
  {
    v32 = *v3;
    v33 = (v22 - (_BYTE *)*v3) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v35 = v9 - v32;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v36);
      v32 = (_BYTE *)*((_QWORD *)this + 5);
      v22 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[8 * v33];
    v9 = &v37[8 * v36];
    *(_QWORD *)v38 = 0;
    v31 = v38 + 8;
    while (v22 != v32)
    {
      v39 = *((_DWORD *)v22 - 2);
      v22 -= 8;
      *((_DWORD *)v38 - 2) = v39;
      v38 -= 8;
      *((_DWORD *)v38 + 1) = *((_DWORD *)v22 + 1);
    }
    *((_QWORD *)this + 5) = v38;
    *((_QWORD *)this + 6) = v31;
    *((_QWORD *)this + 7) = v9;
    if (v32)
    {
      operator delete(v32);
      v9 = *v4;
    }
  }
  else
  {
    *(_QWORD *)v22 = 0;
    v31 = v22 + 8;
  }
  *((_QWORD *)this + 6) = v31;
  if (v31 >= v9)
  {
    v41 = (char *)*v3;
    v42 = (v31 - (_BYTE *)*v3) >> 3;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v44 = v9 - v41;
    if (v44 >> 2 > v43)
      v43 = v44 >> 2;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v45);
      v41 = (char *)*((_QWORD *)this + 5);
      v31 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v46 = 0;
    }
    v47 = &v46[8 * v42];
    v48 = &v46[8 * v45];
    *(_QWORD *)v47 = 0;
    v40 = v47 + 8;
    while (v31 != v41)
    {
      v49 = *((_DWORD *)v31 - 2);
      v31 -= 8;
      *((_DWORD *)v47 - 2) = v49;
      v47 -= 8;
      *((_DWORD *)v47 + 1) = *((_DWORD *)v31 + 1);
    }
    *((_QWORD *)this + 5) = v47;
    *((_QWORD *)this + 6) = v40;
    *((_QWORD *)this + 7) = v48;
    if (v41)
      operator delete(v41);
  }
  else
  {
    *(_QWORD *)v31 = 0;
    v40 = v31 + 8;
  }
  *((_QWORD *)this + 6) = v40;
}

void sub_1B283DE8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float OMColorUtil::getCbCrFromRGB@<S0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, float *a9@<X8>)
{
  float v11;
  float v12;
  float result;
  float v14[16];

  OMColorUtil::getRGBToYCbCrMatrix(a2, a2, a3, a4, a5, a6, a7, a8, (Mat4f *)v14);
  v11 = a1[1];
  v12 = a1[2];
  result = (float)((float)(*a1 * v14[8]) + (float)(v11 * v14[9])) + (float)(v12 * v14[10]);
  *a9 = (float)((float)(*a1 * v14[4]) + (float)(v11 * v14[5])) + (float)(v12 * v14[6]);
  a9[1] = result;
  return result;
}

void sub_1B283F204(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C401478D197);
  _Unwind_Resume(a1);
}

void sub_1B2841288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  HGObject::operator delete(v52);
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
  v55 = *(_QWORD *)(v53 - 184);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
  v56 = *(_QWORD *)(v53 - 176);
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
  v57 = *(_QWORD *)(v53 - 168);
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
  v58 = *(_QWORD *)(v53 - 160);
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
  v59 = *(_QWORD *)(v53 - 152);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
  _Unwind_Resume(a1);
}

void HCopyAlpha::~HCopyAlpha(HGNode *this)
{
  void *v1;

  HgcCopyAlpha::~HgcCopyAlpha(this);
  HGObject::operator delete(v1);
}

void sub_1B2841F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1010C404946846FLL);
  _Unwind_Resume(a1);
}

void sub_1B2842028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1010C404946846FLL);
  _Unwind_Resume(a1);
}

void sub_1B2842158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1010C404946846FLL);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B284241C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2842D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  _Unwind_Resume(a1);
}

void sub_1B28430CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t `anonymous namespace'::properties(_anonymous_namespace_ *this, objc_object *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)MEMORY[0x1E0C99D80];
  v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
  v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 67584);
  v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 591872);
  return objc_msgSend(v2, "dictionaryWithObjectsAndKeys:", v3, CFSTR("MayRemapTime"), v4, CFSTR("SupportsHeliumRendering"), v5, CFSTR("SDRWorkingSpace"), v6, CFSTR("HDRWorkingSpace"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("PixelTransformSupport"), 0);
}

uint64_t `anonymous namespace'::addParameters(_anonymous_namespace_ *this, objc_object *a2, objc_object *a3, int a4)
{
  int v5;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = (int)a3;
  v7 = -[objc_object apiForProtocol:](a2, "apiForProtocol:", &unk_1EF0A41C0);
  if (!v7)
    return 0;
  v8 = (void *)v7;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v10 = objc_msgSend(v8, "addAngleSliderWithName:parmId:defaultValue:parameterMin:parameterMax:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Angle"), 0, 0), 2, 0, -18.0, -62.8318531, 62.8318531);
  v11 = objc_msgSend(v8, "addAngleSliderWithName:parmId:defaultValue:parameterMin:parameterMax:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Rotation"), 0, 0), 3, 0, -24.0, -12.5663706, 12.5663706);
  v12 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Radius"), 0, 0), 4, 0, 20.0, 1.0, 100.0, 1.0, 100.0, 1.0);
  v13 = objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Fade Out"), 0, 0);
  if (v5)
    v14 = 0;
  else
    v14 = 2;
  v15 = v10 & v11;
  v16 = 0.0;
  if (v5)
    v16 = 20.0;
  v17 = v15 & v12 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", v13, 8, v14, v16, 0.0, 100.0, 0.0, 100.0, 1.0);
  v18 = objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Shadow"), 0, 0), 6, v14, 50.0, 0.0, 100.0, 0.0, 100.0, 1.0);
  v19 = v18 & objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Highlight Color"), 0, 0), 5, v14, 0.23, 0.23, 0.23);
  v20 = v17 & v19 & objc_msgSend(v8, "addColorParameterWithName:parmId:defaultRed:defaultGreen:defaultBlue:defaultAlpha:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Back Color"), 0, 0), 7, 0, 0.8, 0.8, 0.8, 0.05);
  if (v5)
  {
    v21 = objc_msgSend(v8, "addToggleButtonWithName:parmId:defaultValue:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Animate"), 0, 0), 10, 1, 1);
    v20 = v20 & v21 & objc_msgSend(v8, "addFloatSliderWithName:parmId:defaultValue:parameterMin:parameterMax:sliderMin:sliderMax:delta:parmFlags:", objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("PageCurl::Percent"), 0, 0), 11, 4, 50.0, 0.0, 100.0, 0.0, 100.0, 1.0);
  }
  if (a4)
    return v20 & -[_anonymous_namespace_ addHDRWhiteLevelParameter](this, "addHDRWhiteLevelParameter");
  return v20;
}

void sub_1B28439F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 24))(a29);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::renderOutput@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X4>, int a6@<W5>, int a7@<W6>, HGHWMultiBlend **a8@<X8>, float a9@<S0>)
{
  uint64_t result;
  void *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  HPageCurlBackground *v33;
  HPageCurlForeground *v34;
  double v35;
  __double2 v36;
  double v37;
  double v38;
  HGBlur *v39;
  float v40;
  float v41;
  HGColorMatrix *v42;
  HGHWMultiBlend *v43;
  float v44;
  float v45;
  float v46;
  int v48;
  int v49;
  double v52[2];
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64[16];
  uint64_t v65;

  *a8 = 0;
  result = objc_msgSend(a2, "apiForProtocol:", &unk_1EF0A4590);
  if (result)
  {
    v15 = (void *)result;
    if (a4)
      objc_msgSend(a4, "heliumRef");
    else
      v65 = 0;
    FxMatrixToPCMatrix((FxMatrix44 *)objc_msgSend(a3, "pixelTransform"), (uint64_t)v64);
    v62 = 0.0;
    v63 = 0.0;
    v60 = 0.0;
    v61 = 0.0;
    v58 = 0;
    v59 = 0.0;
    v56 = 0;
    v57 = 0;
    v54 = 0u;
    v55 = 0u;
    v49 = objc_msgSend(v15, "getFloatValue:fromParm:atFxTime:", &v63, 4, *a5);
    v48 = objc_msgSend(v15, "getFloatValue:fromParm:atFxTime:", &v62, 8, *a5);
    v16 = objc_msgSend(v15, "getFloatValue:fromParm:atFxTime:", &v61, 2, *a5);
    v17 = objc_msgSend(v15, "getFloatValue:fromParm:atFxTime:", &v60, 3, *a5);
    v18 = objc_msgSend(v15, "getFloatValue:fromParm:atFxTime:", &v59, 6, *a5);
    v19 = objc_msgSend(v15, "getRedValue:greenValue:blueValue:fromParm:atFxTime:", &v56, &v57, &v58, 5, *a5);
    objc_msgSend(a3, "bounds");
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v62 = v62 / 100.0;
    v63 = v24 / 100.0 * v63;
    v28 = v49 & v48 & v16 & v17 & v18 & v19 & objc_msgSend(v15, "getRedValue:greenValue:blueValue:alphaValue:fromParm:atFxTime:", &v54, (char *)&v54 + 8, &v55, (char *)&v55 + 8, 7, *a5);
    if (a7)
      v28 &= objc_msgSend(a1, "applyHDRWhiteLevelForRed:green:blue:inColorSpace:", &v54, (char *)&v54 + 8, &v55, objc_msgSend(a4, "colorSpace"));
    *(double *)&v54 = *((double *)&v55 + 1) * *(double *)&v54;
    *((double *)&v54 + 1) = *((double *)&v55 + 1) * *((double *)&v54 + 1);
    *(double *)&v55 = *((double *)&v55 + 1) * *(double *)&v55;
    if (v28)
    {
      v29 = v60;
      v30 = v61;
      if (a6)
      {
        v30 = v61 + 3.14159265 + v60;
        v29 = -v60;
        v60 = -v60;
      }
      v31 = a9;
      v61 = v30 + v29 * a9;
      v32 = 1.0;
      if (v62 > 0.0 && 1.0 - v62 < v31)
        v32 = (1.0 - v31) / v62;
      v33 = (HPageCurlBackground *)HGObject::operator new(0x2D0uLL);
      HPageCurlBackground::HPageCurlBackground(v33);
      v34 = (HPageCurlForeground *)HGObject::operator new(0x2D0uLL);
      HPageCurlForeground::HPageCurlForeground(v34);
      (*(void (**)(HPageCurlBackground *, _QWORD, uint64_t))(*(_QWORD *)v33 + 120))(v33, 0, v65);
      (*(void (**)(HPageCurlForeground *, _QWORD, uint64_t))(*(_QWORD *)v34 + 120))(v34, 0, v65);
      (*(void (**)(HPageCurlBackground *, double *))(*(_QWORD *)v33 + 576))(v33, v64);
      (*(void (**)(HPageCurlForeground *, double *))(*(_QWORD *)v34 + 576))(v34, v64);
      (*(void (**)(HPageCurlBackground *, double))(*(_QWORD *)v33 + 616))(v33, v63);
      (*(void (**)(HPageCurlForeground *, double))(*(_QWORD *)v34 + 616))(v34, v63);
      (*(void (**)(HPageCurlBackground *, uint64_t *))(*(_QWORD *)v33 + 600))(v33, &v56);
      (*(void (**)(HPageCurlForeground *, uint64_t *))(*(_QWORD *)v34 + 600))(v34, &v56);
      (*(void (**)(HPageCurlBackground *, __int128 *))(*(_QWORD *)v33 + 608))(v33, &v54);
      (*(void (**)(HPageCurlForeground *, __int128 *))(*(_QWORD *)v34 + 608))(v34, &v54);
      v35 = v63;
      v36 = __sincos_stret(v61);
      v37 = v25 * fabs(v36.__cosval) + v27 * fabs(v36.__sinval);
      v53[0] = *(_QWORD *)&v36.__cosval;
      v53[1] = *(_QWORD *)&v36.__sinval;
      v38 = (v35 + v37) * v31 - v37 * 0.5;
      v52[0] = v21 + v25 * 0.5 + v36.__cosval * v38;
      v52[1] = v23 + v27 * 0.5 + v36.__sinval * v38;
      (*(void (**)(HPageCurlBackground *, _QWORD *))(*(_QWORD *)v33 + 592))(v33, v53);
      (*(void (**)(HPageCurlForeground *, _QWORD *))(*(_QWORD *)v34 + 592))(v34, v53);
      (*(void (**)(HPageCurlBackground *, double *))(*(_QWORD *)v33 + 584))(v33, v52);
      (*(void (**)(HPageCurlForeground *, double *))(*(_QWORD *)v34 + 584))(v34, v52);
      v39 = (HGBlur *)HGObject::operator new(0x220uLL);
      HGBlur::HGBlur(v39);
      (*(void (**)(HGBlur *, _QWORD, HPageCurlForeground *))(*(_QWORD *)v39 + 120))(v39, 0, v34);
      v40 = v64[0] * 100.0;
      v41 = v64[5] * 100.0;
      (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v39 + 96))(v39, 0, v40, v41, 0.0, 0.0);
      v42 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
      HGColorMatrix::HGColorMatrix(v42);
      (*(void (**)(HGColorMatrix *, _QWORD, HGBlur *))(*(_QWORD *)v42 + 120))(v42, 0, v39);
      (*(void (**)(HGColorMatrix *, _QWORD, float, float, float, float))(*(_QWORD *)v42 + 96))(v42, 0, 0.0, 0.0, 0.0, 0.0);
      (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v42 + 96))(v42, 1, 0.0, 0.0, 0.0, 0.0);
      (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v42 + 96))(v42, 2, 0.0, 0.0, 0.0, 0.0);
      (*(void (**)(HGColorMatrix *, uint64_t, float, float, float, float))(*(_QWORD *)v42 + 96))(v42, 3, 0.0, 0.0, 0.0, 1.0);
      v43 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
      HGHWMultiBlend::HGHWMultiBlend(v43);
      if (v43)
        *a8 = v43;
      v44 = v32;
      (*(void (**)(HGHWMultiBlend *, uint64_t, HPageCurlBackground *, uint64_t, float))(*(_QWORD *)v43 + 624))(v43, 1, v33, 9, v44);
      v45 = v32 * v59 / 50.0;
      (*(void (**)(HGHWMultiBlend *, uint64_t, HGColorMatrix *, uint64_t, float))(*(_QWORD *)v43 + 624))(v43, 2, v42, 9, v45);
      v46 = v32;
      (*(void (**)(HGHWMultiBlend *, uint64_t, HPageCurlForeground *, uint64_t, float))(*(_QWORD *)v43 + 624))(v43, 3, v34, 9, v46);
      (*(void (**)(HGColorMatrix *))(*(_QWORD *)v42 + 24))(v42);
      (*(void (**)(HGBlur *))(*(_QWORD *)v39 + 24))(v39);
      (*(void (**)(HPageCurlForeground *))(*(_QWORD *)v34 + 24))(v34);
      (*(void (**)(HPageCurlBackground *))(*(_QWORD *)v33 + 24))(v33);
    }
    result = v65;
    if (v65)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
  }
  return result;
}

void sub_1B2844090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  HGObject::operator delete(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  v8 = *(_QWORD *)(v6 - 160);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  _Unwind_Resume(a1);
}

void sub_1B2844AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HPageCurlBackground::HPageCurlBackground(HPageCurlBackground *this)
{
  uint64_t v1;

  HgcPageCurlBackground::HgcPageCurlBackground(this);
  *(_QWORD *)v1 = &unk_1E64DDA40;
  *(_QWORD *)(v1 + 536) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 416) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_QWORD *)(v1 + 664) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 544) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
}

void HPageCurlForeground::HPageCurlForeground(HPageCurlForeground *this)
{
  uint64_t v1;

  HgcPageCurlForeground::HgcPageCurlForeground(this);
  *(_QWORD *)v1 = &unk_1E64DDCD8;
  *(_QWORD *)(v1 + 536) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 416) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_QWORD *)(v1 + 664) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 544) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
}

void sub_1B28457DC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2845C98(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B2846124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2846234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::_Private *`anonymous namespace'::_Private::_Private(_anonymous_namespace_::_Private *this, double a2, double a3, double a4)
{
  _anonymous_namespace_ *v8;

  return this;
}

{
  return this;
}

void sub_1B28462B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = &unk_1E64E25A0;
  *(_QWORD *)(v10 + 32) = &unk_1E64E25E0;
  a10 = (void **)(v10 + 72);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B2846390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

void sub_1B2846568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

void sub_1B28470A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C4009AD4094);
  _Unwind_Resume(a1);
}

void sub_1B2847A7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 128));
  *(_QWORD *)(v3 - 128) = v1;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 128));
  _Unwind_Resume(a1);
}

uint64_t cc::curve::aspline::color_t<double>::~color_t(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E64E25A0;
  *(_QWORD *)(a1 + 32) = &unk_1E64E25E0;
  v3 = (void **)(a1 + 72);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_1E64E25A0;
  *(_QWORD *)(a1 + 32) = &unk_1E64E25E0;
  v3 = (void **)(a1 + 72);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](a1, 0x10A1C40D66B6438);
}

uint64_t `anonymous namespace'::NewCurve@<X0>(_anonymous_namespace_ *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, uint64_t a5@<X8>)
{
  double **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  double *v40;
  unint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  double *i;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  double *v85;
  double *v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  *(_QWORD *)(a5 + 8) = 0;
  v6 = (double **)(a5 + 8);
  *(_QWORD *)(a5 + 24) = 0;
  v7 = a5 + 24;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = &unk_1E64E25A0;
  *(_QWORD *)(a5 + 32) = &unk_1E64E25E0;
  *(double *)(a5 + 40) = a2;
  *(double *)(a5 + 48) = a3;
  *(double *)(a5 + 56) = a4;
  *(_QWORD *)(a5 + 72) = 0;
  v8 = (_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 64) = &unk_1E64E2650;
  *(_QWORD *)(a5 + 96) = &unk_1E64E2678;
  *(_QWORD *)(a5 + 104) = cc::curve::aspline::bezier_t<double,false>::evalNonPeriodic;
  *(_QWORD *)(a5 + 112) = 0;
  v111 = a5 + 24;
  v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(a5 + 24, 1uLL);
  v11 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &unk_1E64DA950;
  v13 = *(_QWORD *)(a5 + 8);
  v12 = *(_QWORD *)(a5 + 16);
  if (v12 == v13)
  {
    v15 = v9;
  }
  else
  {
    v14 = *(_QWORD *)(a5 + 16);
    v15 = v9;
    do
    {
      *(v15 - 3) = &unk_1E64DA950;
      v15 -= 3;
      *(_OWORD *)(v15 + 1) = *(_OWORD *)(v14 - 16);
      v14 -= 24;
    }
    while (v14 != v13);
  }
  v16 = (char *)(v9 + 3);
  *(_QWORD *)(a5 + 8) = v15;
  *(_QWORD *)(a5 + 16) = v9 + 3;
  v17 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 24) = &v9[3 * v10];
  v109 = v12;
  v110 = v17;
  v107 = v13;
  v108 = v13;
  result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v107);
  v19 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 16) = v16;
  if ((unint64_t)v16 >= v19)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (char *)*v6) >> 3);
    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)*v6) >> 3);
    v27 = 2 * v26;
    if (2 * v26 <= v25 + 1)
      v27 = v25 + 1;
    if (v26 >= 0x555555555555555)
      v28 = 0xAAAAAAAAAAAAAAALL;
    else
      v28 = v27;
    v111 = v7;
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v28);
    v31 = &v29[24 * v25];
    *(_QWORD *)v31 = &unk_1E64DA950;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v31 + 8) = _Q0;
    v34 = *(_QWORD *)(a5 + 8);
    v33 = *(_QWORD *)(a5 + 16);
    if (v33 == v34)
    {
      v36 = &v29[24 * v25];
    }
    else
    {
      v35 = *(_QWORD *)(a5 + 16);
      v36 = &v29[24 * v25];
      do
      {
        *((_QWORD *)v36 - 3) = &unk_1E64DA950;
        v36 -= 24;
        *(_OWORD *)(v36 + 8) = *(_OWORD *)(v35 - 16);
        v35 -= 24;
      }
      while (v35 != v34);
    }
    v24 = v31 + 24;
    *(_QWORD *)(a5 + 8) = v36;
    *(_QWORD *)(a5 + 16) = v31 + 24;
    v37 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = &v29[24 * v30];
    v109 = v33;
    v110 = v37;
    v107 = v34;
    v108 = v34;
    result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v107);
  }
  else
  {
    v11[3] = &unk_1E64DA950;
    __asm { FMOV            V0.2D, #1.0 }
    *((_OWORD *)v11 + 2) = _Q0;
    v24 = (char *)(v11 + 6);
  }
  *(_QWORD *)(a5 + 16) = v24;
  v38 = *(char **)(a5 + 8);
  v39 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v38) >> 3);
  if (v39 <= 1)
    return std::vector<cc::point_t<double,false,false>>::resize((uint64_t)v8, 4uLL);
  if (v39 <= 0x5555555555555554)
  {
    v40 = (double *)(v24 - 24);
    if (v24 - 24 == v38)
      v41 = (unint64_t)(v24 - 24);
    else
      v41 = (unint64_t)(v24 - 48);
    result = std::vector<cc::point_t<double,false,false>>::resize((uint64_t)v8, ((v24 - v38) >> 3) - 2);
    v42 = *v6;
    if (*v6 != v40)
    {
      v43 = 0;
      v44 = *v8 + 32;
      for (i = *v6; i != v40; i += 3)
      {
        v46 = i[4];
        v47 = i[5];
        v48 = i[1];
        v49 = i[2];
        v50 = v46 - v48;
        if (v46 - v48 < 0.0)
          v50 = -(v46 - v48);
        if (v50 < 0.0)
          v50 = -v50;
        v51 = v50 * 0.3334;
        v52 = (double *)(v44 + v43);
        *(v52 - 3) = v48;
        *(v52 - 2) = v49;
        if (v43)
        {
          v53 = v46 - *(i - 2);
          v54 = -v53;
          if (v53 >= 0.0)
            v54 = v46 - *(i - 2);
          v55 = (v47 - *(i - 1)) / v53;
          if (v54 < 0.00000011920929)
            v55 = 0.0;
          v56 = v51 * v55;
          v57 = v51 + i[1];
          v58 = i[2] + v56;
          *v52 = v57;
          v52[1] = v58;
          if ((unint64_t)i >= v41)
            goto LABEL_42;
        }
        else if ((unint64_t)i >= v41)
        {
          v57 = i[1];
          v58 = i[2];
LABEL_42:
          v59 = v46 - v57;
          v60 = v47 - v58;
          goto LABEL_43;
        }
        v59 = i[7] - i[1];
        v60 = i[8] - i[2];
LABEL_43:
        v61 = -v59;
        if (v59 >= 0.0)
          v61 = v59;
        v62 = v60 / v59;
        if (v61 < 0.00000011920929)
          v62 = 0.0;
        v63 = v46 - v51;
        v64 = v47 - v51 * v62;
        v65 = (double *)(v44 + v43);
        v65[3] = v63;
        v65[4] = v64;
        if (!v43)
        {
          v66 = v63 - i[1];
          v67 = v64 - i[2];
          v68 = -v66;
          if (v66 >= 0.0)
            v68 = v66;
          v69 = v67 / v66;
          if (v68 < 0.00000011920929)
            v69 = 0.0;
          *v65 = v51 + v48;
          v65[1] = v49 + v51 * v69;
        }
        v43 += 72;
      }
    }
    *(_OWORD *)(*(_QWORD *)(a5 + 80) - 16) = *((_OWORD *)v24 - 1);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 16) - (_QWORD)v42) >> 3) >= 3 && v42 != v40)
    {
      v71 = 0;
      v72 = (double *)(*v8 + 64);
      do
      {
        v73 = v42[v71 + 5];
        v74 = v42[v71 + 2];
        v75 = v42[v71 + 4] - v42[v71 + 1];
        v76 = -v75;
        if (v75 >= 0.0)
          v76 = v42[v71 + 4] - v42[v71 + 1];
        v77 = v73 - v74;
        v78 = -(v73 - v74);
        if (v77 >= 0.0)
          v78 = v77;
        v79 = 1.0;
        if (v78 > 0.00000011920929)
        {
          v79 = 0.0;
          if (v76 > 0.00000011920929)
          {
            v80 = v78 / v76 * -3.0 + 1.0;
            if (v80 >= 0.0)
            {
              v79 = 1.0;
              if (v80 <= 1.0)
                v79 = v80;
            }
          }
        }
        v81 = v79 * *(v72 - 6);
        v82 = 1.0 - v79;
        *(v72 - 3) = v81 + (1.0 - v79) * *(v72 - 3);
        v83 = v79 * v72[3];
        *v72 = v83 + v82 * *v72;
        if (&v42[v71] != (double *)v41)
          v72[6] = v83 + v82 * v72[6];
        if (v71 * 8)
          *(v72 - 9) = v81 + v82 * *(v72 - 9);
        v71 += 3;
        v72 += 9;
      }
      while (&v42[v71] != v40);
      v84 = 0;
      v85 = (double *)(*v8 + 56);
      do
      {
        v86 = &v42[v84];
        v87 = v42[v84 + 5];
        v88 = v42[v84 + 2];
        v89 = v42[v84 + 4] - v42[v84 + 1];
        if (v89 < 0.0)
          v89 = -v89;
        v90 = v87 - v88;
        if (v87 - v88 < 0.0)
          v90 = -(v87 - v88);
        v91 = 1.0;
        if (v89 > 0.00000011920929)
        {
          v91 = 0.0;
          if (v90 > 0.00000011920929)
            v91 = v89 / v90 * -3.0 + 1.0;
        }
        if (v91 * 0.25 <= 1.0)
          v92 = v91 * 0.25;
        else
          v92 = 1.0;
        if (v91 * 0.25 >= 0.0)
          v93 = v92;
        else
          v93 = 0.0;
        v94 = *(v85 - 6) * v93;
        v95 = 1.0 - v93;
        *(v85 - 3) = v94 + *(v85 - 3) * (1.0 - v93);
        v96 = v93 * v85[3];
        *v85 = v96 + (1.0 - v93) * *v85;
        if ((unint64_t)v86 < v41)
          v85[6] = v96 + v95 * v85[6];
        if (v84 * 8)
          *(v85 - 9) = v94 + v95 * *(v85 - 9);
        if (v87 < v88)
        {
          if ((unint64_t)v86 < v41)
          {
            v97 = v85[4];
            v98 = v85[1];
            v99 = v97 - v98;
            if (v97 - v98 < 0.0)
              v99 = -(v97 - v98);
            v85[1] = v95 * v98 + v93 * (v97 + v99);
            v100 = v85[7];
            v101 = v97 - v100;
            if (v97 - v100 > 0.0)
              v101 = -(v97 - v100);
            v85[7] = v95 * v100 + v93 * (v97 + v101);
          }
          if (v84 * 8)
          {
            v102 = *(v85 - 5);
            v103 = *(v85 - 8);
            v104 = v102 - v103;
            if (v102 - v103 < 0.0)
              v104 = -(v102 - v103);
            *(v85 - 8) = v95 * v103 + v93 * (v102 + v104);
            v105 = *(v85 - 2);
            v106 = v102 - v105;
            if (v102 - v105 > 0.0)
              v106 = -(v102 - v105);
            *(v85 - 2) = v95 * v105 + v93 * (v102 + v106);
          }
        }
        v84 += 3;
        v85 += 9;
      }
      while (&v42[v84] != v40);
    }
  }
  return result;
}

void sub_1B28482BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  *v6 = v7 + 16;
  v6[4] = v7 + 80;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *cc::curve::aspline::color_t<double>::insertPointIsolation(_QWORD *result, unint64_t *a2, double a3, double a4, double a5)
{
  _QWORD *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double *v40;
  unint64_t v41;
  _QWORD *v42;
  double *v43;
  uint64_t v44;
  uint64_t v45;
  double *i;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v72;
  double *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double *v86;
  unint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  _QWORD v109[5];

  v6 = result;
  v7 = 1.0;
  if (a3 <= 1.0)
    v7 = a3;
  if (a3 < 0.0)
    v7 = 0.0;
  v108 = v7;
  v8 = result[1];
  v9 = result[2];
  v10 = (char **)(result + 1);
  if (v8 == v9)
  {
LABEL_12:
    v15 = (*(double (**)(_QWORD *, double *))(*result + 24))(result, &v108);
    v16 = v15;
    v17 = v108;
    result = a2 + 2;
    v18 = a2[2];
    v19 = a2[1];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a2) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a2) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v109[4] = a2 + 2;
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)result, v24);
      v27 = &v25[24 * v21];
      *(_QWORD *)v27 = &unk_1E64DA950;
      *((double *)v27 + 1) = v17;
      *((double *)v27 + 2) = v16;
      v29 = *a2;
      v28 = a2[1];
      if (v28 == *a2)
      {
        v31 = &v25[24 * v21];
      }
      else
      {
        v30 = a2[1];
        v31 = &v25[24 * v21];
        do
        {
          *((_QWORD *)v31 - 3) = &unk_1E64DA950;
          v31 -= 24;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)(v30 - 16);
          v30 -= 24;
        }
        while (v30 != v29);
      }
      v20 = v27 + 24;
      *a2 = (unint64_t)v31;
      a2[1] = (unint64_t)(v27 + 24);
      v32 = a2[2];
      a2[2] = (unint64_t)&v25[24 * v26];
      v109[2] = v28;
      v109[3] = v32;
      v109[0] = v29;
      v109[1] = v29;
      result = (_QWORD *)std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)v109);
    }
    else
    {
      *(_QWORD *)v19 = &unk_1E64DA950;
      *(double *)(v19 + 8) = v17;
      *(double *)(v19 + 16) = v15;
      v20 = (_QWORD *)(v19 + 24);
    }
    a2[1] = (unint64_t)v20;
  }
  else
  {
    v11 = v7 - a5;
    v12 = v7 + a5;
    while (1)
    {
      v13 = *(double *)(v8 + 8);
      if (v13 > v11 && v13 < v12)
        break;
      v8 += 24;
      if (v8 == v9)
        goto LABEL_12;
    }
    v20 = (_QWORD *)a2[1];
  }
  v33 = *a2;
  if ((_QWORD *)*a2 != v20)
  {
    do
    {
      v34 = (_QWORD *)v6[1];
      v35 = (_QWORD *)v6[2];
      if (v34 == v35)
      {
LABEL_33:
        result = (_QWORD *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v10, v33);
      }
      else
      {
        v36 = v6[1];
        while (*(double *)(v36 + 8) < *(double *)(v33 + 8))
        {
          v36 += 24;
          v34 += 3;
          if ((_QWORD *)v36 == v35)
            goto LABEL_33;
        }
        result = (_QWORD *)std::vector<cc::point_t<double,false,false>>::insert((uint64_t *)v10, v34, v33);
      }
      v33 += 24;
    }
    while (v33 != a2[1]);
  }
  v37 = v6[1];
  v38 = v6[2];
  v39 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v37) >> 3);
  if (v39 <= 1)
    return (_QWORD *)std::vector<cc::point_t<double,false,false>>::resize((uint64_t)(v6 + 9), 4uLL);
  if (v39 <= 0x5555555555555554)
  {
    v40 = (double *)(v38 - 24);
    if (v38 - 24 == v37)
      v41 = v38 - 24;
    else
      v41 = v38 - 48;
    v42 = v6 + 9;
    result = (_QWORD *)std::vector<cc::point_t<double,false,false>>::resize((uint64_t)(v6 + 9), ((v38 - v37) >> 3) - 2);
    v43 = (double *)v6[1];
    if (v43 != v40)
    {
      v44 = 0;
      v45 = *v42 + 32;
      for (i = (double *)v6[1]; i != v40; i += 3)
      {
        v47 = i[4];
        v48 = i[5];
        v49 = i[1];
        v50 = i[2];
        v51 = v47 - v49;
        if (v47 - v49 < 0.0)
          v51 = -(v47 - v49);
        if (v51 < 0.0)
          v51 = -v51;
        v52 = v51 * 0.3334;
        v53 = (double *)(v45 + v44);
        *(v53 - 3) = v49;
        *(v53 - 2) = v50;
        if (v44)
        {
          v54 = v47 - *(i - 2);
          v55 = -v54;
          if (v54 >= 0.0)
            v55 = v47 - *(i - 2);
          v56 = (v48 - *(i - 1)) / v54;
          if (v55 < 0.00000011920929)
            v56 = 0.0;
          v57 = v52 * v56;
          v58 = v52 + i[1];
          v59 = i[2] + v57;
          *v53 = v58;
          v53[1] = v59;
          if ((unint64_t)i >= v41)
            goto LABEL_58;
        }
        else if ((unint64_t)i >= v41)
        {
          v58 = i[1];
          v59 = i[2];
LABEL_58:
          v60 = v47 - v58;
          v61 = v48 - v59;
          goto LABEL_59;
        }
        v60 = i[7] - i[1];
        v61 = i[8] - i[2];
LABEL_59:
        v62 = -v60;
        if (v60 >= 0.0)
          v62 = v60;
        v63 = v61 / v60;
        if (v62 < 0.00000011920929)
          v63 = 0.0;
        v64 = v47 - v52;
        v65 = v48 - v52 * v63;
        v66 = (double *)(v45 + v44);
        v66[3] = v64;
        v66[4] = v65;
        if (!v44)
        {
          v67 = v64 - i[1];
          v68 = v65 - i[2];
          v69 = -v67;
          if (v67 >= 0.0)
            v69 = v67;
          v70 = v68 / v67;
          if (v69 < 0.00000011920929)
            v70 = 0.0;
          *v66 = v52 + v49;
          v66[1] = v50 + v52 * v70;
        }
        v44 += 72;
      }
    }
    *(_OWORD *)(v6[10] - 16) = *(_OWORD *)(v38 - 16);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[2] - (_QWORD)v43) >> 3) >= 3 && v43 != v40)
    {
      v72 = 0;
      v73 = (double *)(*v42 + 64);
      do
      {
        v74 = v43[v72 + 5];
        v75 = v43[v72 + 2];
        v76 = v43[v72 + 4] - v43[v72 + 1];
        v77 = -v76;
        if (v76 >= 0.0)
          v77 = v43[v72 + 4] - v43[v72 + 1];
        v78 = v74 - v75;
        v79 = -(v74 - v75);
        if (v78 >= 0.0)
          v79 = v78;
        v80 = 1.0;
        if (v79 > 0.00000011920929)
        {
          v80 = 0.0;
          if (v77 > 0.00000011920929)
          {
            v81 = v79 / v77 * -3.0 + 1.0;
            if (v81 >= 0.0)
            {
              v80 = 1.0;
              if (v81 <= 1.0)
                v80 = v81;
            }
          }
        }
        v82 = v80 * *(v73 - 6);
        v83 = 1.0 - v80;
        *(v73 - 3) = v82 + (1.0 - v80) * *(v73 - 3);
        v84 = v80 * v73[3];
        *v73 = v84 + v83 * *v73;
        if (&v43[v72] != (double *)v41)
          v73[6] = v84 + v83 * v73[6];
        if (v72 * 8)
          *(v73 - 9) = v82 + v83 * *(v73 - 9);
        v72 += 3;
        v73 += 9;
      }
      while (&v43[v72] != v40);
      v85 = 0;
      v86 = (double *)(*v42 + 56);
      do
      {
        v87 = (unint64_t)&v43[v85];
        v88 = v43[v85 + 5];
        v89 = v43[v85 + 2];
        v90 = v43[v85 + 4] - v43[v85 + 1];
        if (v90 < 0.0)
          v90 = -v90;
        v91 = v88 - v89;
        if (v88 - v89 < 0.0)
          v91 = -(v88 - v89);
        v92 = 1.0;
        if (v90 > 0.00000011920929)
        {
          v92 = 0.0;
          if (v91 > 0.00000011920929)
            v92 = v90 / v91 * -3.0 + 1.0;
        }
        if (v92 * 0.25 <= 1.0)
          v93 = v92 * 0.25;
        else
          v93 = 1.0;
        if (v92 * 0.25 >= 0.0)
          v94 = v93;
        else
          v94 = 0.0;
        v95 = *(v86 - 6) * v94;
        v96 = 1.0 - v94;
        *(v86 - 3) = v95 + *(v86 - 3) * (1.0 - v94);
        v97 = v94 * v86[3];
        *v86 = v97 + (1.0 - v94) * *v86;
        if (v87 < v41)
          v86[6] = v97 + v96 * v86[6];
        if (v85 * 8)
          *(v86 - 9) = v95 + v96 * *(v86 - 9);
        if (v88 < v89)
        {
          if (v87 < v41)
          {
            v98 = v86[4];
            v99 = v86[1];
            v100 = v98 - v99;
            if (v98 - v99 < 0.0)
              v100 = -(v98 - v99);
            v86[1] = v96 * v99 + v94 * (v98 + v100);
            v101 = v86[7];
            v102 = v98 - v101;
            if (v98 - v101 > 0.0)
              v102 = -(v98 - v101);
            v86[7] = v96 * v101 + v94 * (v98 + v102);
          }
          if (v85 * 8)
          {
            v103 = *(v86 - 5);
            v104 = *(v86 - 8);
            v105 = v103 - v104;
            if (v103 - v104 < 0.0)
              v105 = -(v103 - v104);
            *(v86 - 8) = v96 * v104 + v94 * (v103 + v105);
            v106 = *(v86 - 2);
            v107 = v103 - v106;
            if (v103 - v106 > 0.0)
              v107 = -(v103 - v106);
            *(v86 - 2) = v96 * v106 + v94 * (v103 + v107);
          }
        }
        v85 += 3;
        v86 += 9;
      }
      while (&v43[v85] != v40);
    }
  }
  return result;
}

uint64_t cc::curve::aspline::color_t<double>::evaluate(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  v3 = (_QWORD *)(a1 + (v2 >> 1) + 64);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

BOOL cc::curve::aspline::color_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v11 = a1 + 96;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t cc::curve::aspline::color_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)(a1 + 96)
                                                                                             + 24))(a1 + 96, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

void `non-virtual thunk to'cc::curve::aspline::color_t<double>::~color_t(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 - 32) = &unk_1E64E25A0;
  *(_QWORD *)a1 = &unk_1E64E25E0;
  v2 = (void **)(a1 + 40);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::color_t<double>::~color_t(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void **v4;

  *(_QWORD *)(a1 - 32) = &unk_1E64E25A0;
  v1 = a1 - 32;
  *(_QWORD *)a1 = &unk_1E64E25E0;
  v2 = (void **)(a1 - 24);
  v4 = (void **)(a1 + 40);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1B5E29170](v1, 0x10A1C40D66B6438);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::color_t<double>::evaluate(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))(a1 + 72);
  v2 = *(_QWORD *)(a1 + 80);
  v3 = (_QWORD *)(a1 + (v2 >> 1) + 32);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

BOOL `non-virtual thunk to'cc::curve::aspline::color_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v11 = a1 + 64;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t `non-virtual thunk to'cc::curve::aspline::color_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)(a1 + 64)
                                                                                             + 24))(a1 + 64, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

double cc::curve::aspline::bezier_t<double,false>::evalNonPeriodic(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v2 = *(double **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)v2) >> 3) <= 3)
    return *(double *)a2;
  v5 = v2[1];
  result = *(double *)a2;
  if (*(double *)a2 < v5)
  {
    v6 = v2[2];
    v7 = v2[4] - v5;
    if (v7 != 0.0)
    {
      v8 = v2[5] - v6;
LABEL_9:
      v9 = v8 / v7;
      return v6 + (result - v5) * v9;
    }
    goto LABEL_10;
  }
  v5 = *(double *)(v3 - 16);
  if (result > v5)
  {
    v6 = *(double *)(v3 - 8);
    v7 = v5 - *(double *)(v3 - 40);
    if (v7 != 0.0)
    {
      v8 = v6 - *(double *)(v3 - 32);
      goto LABEL_9;
    }
LABEL_10:
    v9 = 0.0;
    return v6 + (result - v5) * v9;
  }
  v10 = (double *)(v3 - 24);
  while (v2 != v10)
  {
    v11 = v2[1];
    if (result >= v11)
    {
      v12 = v2[10];
      if (result <= v12)
      {
        v13 = v2[4];
        v14 = v2[7] * 3.0;
        v15 = v12 + v13 * 3.0 - v11 - v14;
        v16 = v11 * 3.0 + v13 * -6.0 + v14;
        v17 = v13 * 3.0 - v11 * 3.0;
        v18 = 0.0;
        while (1)
        {
          v19 = v18 * (v18 * v18);
          v20 = v11 + v18 * v17 + v18 * v18 * v16 + v19 * v15;
          if (v20 >= result)
            break;
          v18 = v18 + 0.05;
          if (v18 >= 1.05)
            return result;
        }
        v21 = v18 + -0.05;
        v22 = v21 * (v21 * v21);
        v23 = v11 + (v18 + -0.05) * v17 + v21 * v21 * v16 + v22 * v15;
        v24 = v2[2];
        v25 = v2[5];
        v26 = v2[8] * 3.0;
        v27 = v2[11] + v25 * 3.0 - v24 - v26;
        v28 = v24 * 3.0 + v25 * -6.0 + v26;
        v29 = v25 * 3.0 - v24 * 3.0;
        v30 = v24 + (v18 + -0.05) * v29 + v21 * v21 * v28 + v22 * v27;
        v31 = v24 + v18 * v29 + v18 * v18 * v28 + v19 * v27;
        v32 = v20 - v23;
        if (v20 - v23 >= 0.0)
          v33 = v20 - v23;
        else
          v33 = -(v20 - v23);
        v34 = 0.0;
        if (v33 >= 0.00000011920929)
          v34 = (result - v23) / v32;
        return v31 * v34 + v30 * (1.0 - v34);
      }
    }
    v2 += 9;
  }
  return result;
}

uint64_t cc::curve::aspline::bezier_t<double,false>::~bezier_t(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](a1, 0xA1C40D2948F72);
}

uint64_t cc::curve::aspline::bezier_t<double,false>::evaluate(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = (_QWORD *)(a1 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void `non-virtual thunk to'cc::curve::aspline::bezier_t<double,false>::~bezier_t(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::bezier_t<double,false>::~bezier_t(uint64_t a1)
{
  uint64_t v1;
  void **v3;

  v1 = a1 - 32;
  v3 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](v1, 0xA1C40D2948F72);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::bezier_t<double,false>::evaluate(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)(a1 + (v2 >> 1) - 32);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void HFixDV::HFixDV(HFixDV *this, float a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  HGNode::HGNode((HGNode *)this);
  v6 = 0;
  *(_QWORD *)v5 = off_1E64E26E8;
  *(_QWORD *)(v5 + 408) = 0x4040000040000000;
  *(_WORD *)(v5 + 416) = 257;
  *(_QWORD *)(v5 + 424) = 0;
  *(float *)(v5 + 432) = a2;
  *(float *)(v5 + 436) = a3;
  v7 = v5 + 448;
  do
  {
    v8 = 0;
    v9 = *(_OWORD *)(v7 + 16 * v6);
    v10 = HGColorMatrix::sRGBtoYCbCr[v6];
    do
    {
      v20 = v10;
      v11 = *(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
      v21 = v9;
      *(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) = v11;
      v9 = v21;
      ++v8;
    }
    while (v8 != 4);
    *(_OWORD *)(v7 + 16 * v6++) = v21;
  }
  while (v6 != 4);
  v12 = 0;
  v13 = v5 + 512;
  do
  {
    v14 = 0;
    v15 = *(_OWORD *)(v13 + 16 * v12);
    v16 = HGColorMatrix::YCbCrTosRGB[v12];
    do
    {
      v18 = v16;
      v17 = *(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      v19 = v15;
      *(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) = v17;
      v15 = v19;
      ++v14;
    }
    while (v14 != 4);
    *(_OWORD *)(v13 + 16 * v12++) = v19;
  }
  while (v12 != 4);
}

HgcGamma *HFixDV::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  HGNode *v4;
  HgcGamma **v5;
  HGNode *v6;
  HgcGamma *v7;
  HgcGamma *v8;
  HGColorMatrix *v9;
  HgcGamma *v10;
  float v11;
  float v12;
  float v13;
  HGBlur *v14;
  HgcChannelBlur *v15;
  HgcGamma *v16;
  HGColorMatrix *v17;
  HgcGamma *v18;
  HgcGamma *v19;
  HgcGamma *v20;

  Input = HGRenderer::GetInput(a2, this, 0);
  v4 = Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(_QWORD *)Input + 16))(Input);
    v5 = (HgcGamma **)((char *)this + 424);
    v6 = (HGNode *)*((_QWORD *)this + 53);
    if (v6 == v4)
    {
      (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_8;
    }
  }
  else
  {
    v5 = (HgcGamma **)((char *)this + 424);
    v6 = (HGNode *)*((_QWORD *)this + 53);
    if (!v6)
      goto LABEL_8;
  }
  if (v6)
    (*(void (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
  *v5 = (HgcGamma *)v4;
LABEL_8:
  if (*((float *)this + 102) != 1.0)
  {
    v7 = (HgcGamma *)HGObject::operator new(0x1A0uLL);
    HgcGamma::HgcGamma(v7);
    (*(void (**)(HgcGamma *, _QWORD, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 0, *((float *)this + 102), *((float *)this + 102), *((float *)this + 102), 1.0);
    (*(void (**)(HgcGamma *, _QWORD, HgcGamma *))(*(_QWORD *)v7 + 120))(v7, 0, *v5);
    v8 = *v5;
    if (*v5 != v7)
    {
      if (v8)
        (*(void (**)(HgcGamma *))(*(_QWORD *)v8 + 24))(v8);
      *v5 = v7;
      (*(void (**)(HgcGamma *))(*(_QWORD *)v7 + 16))(v7);
    }
    (*(void (**)(HgcGamma *))(*(_QWORD *)v7 + 24))(v7);
  }
  if (*((_BYTE *)this + 416))
  {
    v9 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
    HGColorMatrix::HGColorMatrix(v9);
    HGColorMatrix::LoadMatrix(v9, (_OWORD *)this + 28, 0);
    (*(void (**)(HGColorMatrix *, _QWORD, HgcGamma *))(*(_QWORD *)v9 + 120))(v9, 0, *v5);
    v10 = *v5;
    if (*v5 != v9)
    {
      if (v10)
        (*(void (**)(HgcGamma *))(*(_QWORD *)v10 + 24))(v10);
      *v5 = v9;
      (*(void (**)(HGColorMatrix *))(*(_QWORD *)v9 + 16))(v9);
    }
    (*(void (**)(HGColorMatrix *))(*(_QWORD *)v9 + 24))(v9);
  }
  v11 = *((float *)this + 103);
  if (v11 != 0.0)
  {
    v12 = *((float *)this + 108);
    v13 = *((float *)this + 109);
    v14 = (HGBlur *)HGObject::operator new(0x220uLL);
    HGBlur::HGBlur(v14);
    (*(void (**)(HGBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v14 + 96))(v14, 0, v11 * v12, v11 * v13, 0.0, 0.0);
    (*(void (**)(HGBlur *, _QWORD, HgcGamma *))(*(_QWORD *)v14 + 120))(v14, 0, *v5);
    v15 = (HgcChannelBlur *)HGObject::operator new(0x1A0uLL);
    HgcChannelBlur::HgcChannelBlur(v15);
    (*(void (**)(HgcChannelBlur *, _QWORD, HgcGamma *))(*(_QWORD *)v15 + 120))(v15, 0, *v5);
    (*(void (**)(HgcChannelBlur *, uint64_t, HGBlur *))(*(_QWORD *)v15 + 120))(v15, 1, v14);
    (*(void (**)(HgcChannelBlur *, _QWORD, float, float, float, float))(*(_QWORD *)v15 + 96))(v15, 0, 0.0, 1.0, 1.0, 0.0);
    v16 = *v5;
    if (*v5 != v15)
    {
      if (v16)
        (*(void (**)(HgcGamma *))(*(_QWORD *)v16 + 24))(v16);
      *v5 = v15;
      (*(void (**)(HgcChannelBlur *))(*(_QWORD *)v15 + 16))(v15);
    }
    (*(void (**)(HgcChannelBlur *))(*(_QWORD *)v15 + 24))(v15);
    (*(void (**)(HGBlur *))(*(_QWORD *)v14 + 24))(v14);
  }
  if (*((_BYTE *)this + 417))
  {
    v17 = (HGColorMatrix *)HGObject::operator new(0x1F0uLL);
    HGColorMatrix::HGColorMatrix(v17);
    HGColorMatrix::LoadMatrix(v17, (_OWORD *)this + 32, 0);
    (*(void (**)(HGColorMatrix *, _QWORD, HgcGamma *))(*(_QWORD *)v17 + 120))(v17, 0, *v5);
    v18 = *v5;
    if (*v5 != v17)
    {
      if (v18)
        (*(void (**)(HgcGamma *))(*(_QWORD *)v18 + 24))(v18);
      *v5 = v17;
      (*(void (**)(HGColorMatrix *))(*(_QWORD *)v17 + 16))(v17);
    }
    (*(void (**)(HGColorMatrix *))(*(_QWORD *)v17 + 24))(v17);
  }
  if (*((float *)this + 102) != 1.0)
  {
    v19 = (HgcGamma *)HGObject::operator new(0x1A0uLL);
    HgcGamma::HgcGamma(v19);
    (*(void (**)(HgcGamma *, _QWORD, float, float, float, float))(*(_QWORD *)v19 + 96))(v19, 0, 1.0 / *((float *)this + 102), 1.0 / *((float *)this + 102), 1.0 / *((float *)this + 102), 1.0);
    (*(void (**)(HgcGamma *, _QWORD, HgcGamma *))(*(_QWORD *)v19 + 120))(v19, 0, *v5);
    v20 = *v5;
    if (*v5 != v19)
    {
      if (v20)
        (*(void (**)(HgcGamma *))(*(_QWORD *)v20 + 24))(v20);
      *v5 = v19;
      (*(void (**)(HgcGamma *))(*(_QWORD *)v19 + 16))(v19);
    }
    (*(void (**)(HgcGamma *))(*(_QWORD *)v19 + 24))(v19);
  }
  return *v5;
}

void sub_1B28498DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HFixDV::setRGBToYCbCrMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  int v6;
  __int128 v7;

  v2 = 0;
  v3 = result + 448;
  do
  {
    v4 = 0;
    v5 = *(_OWORD *)(v3 + 16 * v2);
    do
    {
      v6 = *(_DWORD *)(a2 + 16 * v2 + 4 * (v4 & 3));
      v7 = v5;
      *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3))) = v6;
      v5 = v7;
      *(_OWORD *)(v3 + 16 * v2) = v7;
      ++v4;
    }
    while (v4 != 4);
    ++v2;
  }
  while (v2 != 4);
  return result;
}

uint64_t HFixDV::setYCbCrToRGBMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  int v6;
  __int128 v7;

  v2 = 0;
  v3 = result + 512;
  do
  {
    v4 = 0;
    v5 = *(_OWORD *)(v3 + 16 * v2);
    do
    {
      v6 = *(_DWORD *)(a2 + 16 * v2 + 4 * (v4 & 3));
      v7 = v5;
      *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3))) = v6;
      v5 = v7;
      *(_OWORD *)(v3 + 16 * v2) = v7;
      ++v4;
    }
    while (v4 != 4);
    ++v2;
  }
  while (v2 != 4);
  return result;
}

void HFixDV::~HFixDV(HGNode *this)
{
  void *v1;

  HFixDV::~HFixDV(this);
  HGObject::operator delete(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E26E8;
  v2 = *((_QWORD *)this + 53);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

uint64_t desiredRGBToYCbCrMatrix(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  __int128 v7;
  double *v8;
  double v9;
  float v10;
  __int128 v11;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "apiForProtocol:", &unk_1EF0A2958), "colorMatrixFromDesiredRGBToYCbCrAtTime:", a3), "matrix");
  for (i = 0; i != 4; ++i)
  {
    v6 = 0;
    v7 = *(_OWORD *)(a2 + 16 * i);
    v8 = (double *)result;
    do
    {
      v9 = *v8;
      v8 += 4;
      v10 = v9;
      v11 = v7;
      *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3))) = v10;
      v7 = v11;
      *(_OWORD *)(a2 + 16 * i) = v11;
      ++v6;
    }
    while (v6 != 4);
    result += 8;
  }
  return result;
}

uint64_t desiredYCbCrToRGBMatrix(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  __int128 v7;
  double *v8;
  double v9;
  float v10;
  __int128 v11;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "apiForProtocol:", &unk_1EF0A2958), "colorMatrixFromYCbCrToDesiredRGBAtTime:", a3), "matrix");
  for (i = 0; i != 4; ++i)
  {
    v6 = 0;
    v7 = *(_OWORD *)(a2 + 16 * i);
    v8 = (double *)result;
    do
    {
      v9 = *v8;
      v8 += 4;
      v10 = v9;
      v11 = v7;
      *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3))) = v10;
      v7 = v11;
      *(_OWORD *)(a2 + 16 * i) = v11;
      ++v6;
    }
    while (v6 != 4);
    result += 8;
  }
  return result;
}

uint64_t OMHisto::calculateHistogram(uint64_t a1, int *a2, float *a3, float a4)
{
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  float v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  double v29;
  float32x2_t v30;
  int v31;
  int32x2_t v32;
  int32x2_t v33;
  signed __int32 v34;
  _QWORD *v35;
  float v36;
  float32x2_t v37;
  int32x2_t v38;
  int v39;
  int32x2_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  double v49;
  float32x2_t v50;
  int v51;
  int32x2_t v52;
  int32x2_t v53;
  signed __int32 v54;
  _QWORD *v55;
  float v56;
  float32x2_t v57;
  int32x2_t v58;
  int v59;
  int32x2_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v8 = objc_msgSend(*(id *)(a1 + 120), "pixelFormat");
  v9 = v8 != 0;
  if (v8)
    v10 = 2;
  else
    v10 = 1;
  if (v8)
    v11 = 3;
  else
    v11 = 2;
  if (v8)
    v12 = 0;
  else
    v12 = 3;
  v13 = objc_msgSend(*(id *)(a1 + 120), "dataPtr");
  v14 = objc_msgSend(*(id *)(a1 + 120), "width");
  v15 = objc_msgSend(*(id *)(a1 + 120), "height");
  v16 = (unint64_t)objc_msgSend(*(id *)(a1 + 120), "rowBytes") >> 2;
  v17 = 1.0 / a4;
  result = *(_QWORD *)(a1 + 88);
  if (((*(_QWORD *)(result + 8) - *(_QWORD *)result) & 0x3FFFFFFFCLL) != 0x100000)
  {
    if (v15 < 1)
      goto LABEL_55;
    v41 = 0;
    v42 = 4 * (int)v16;
    v21 = 0.0;
    v22 = 0.0;
    while (v14 < 1)
    {
LABEL_53:
      ++v41;
      v13 += v42;
      if (v41 == v15)
        goto LABEL_56;
    }
    v43 = v14;
    v44 = 4 * v11;
    v45 = 4 * v10;
    v46 = 4 * v9;
    v47 = 4 * v12;
    while (1)
    {
      v48 = *(float *)(v13 + v47);
      v49 = v48;
      if (v48 >= 0.5 || v49 <= 0.1)
      {
        if (v48 <= 0.5 || v49 >= 0.9)
          goto LABEL_52;
        v56 = *(float *)(v13 + v44);
        v57.i32[0] = *(_DWORD *)(v13 + v45);
        v57.i32[1] = *(_DWORD *)(v13 + v46);
        v58 = vcvt_n_s32_f32(vmul_n_f32(v57, v17), 5uLL);
        v59 = vcvts_n_s32_f32(v17 * v56, 5uLL);
        v60 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v58), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v58, (int32x2_t)0x1F0000001FLL), (uint32x2_t)0xA00000005));
        if (v59 >= 31)
          v59 = 31;
        v54 = vadd_s32(v60, vdup_lane_s32(v60, 1)).u32[0] | v59 & ~(v59 >> 31);
        if (v56 > v21)
          v21 = *(float *)(v13 + v44);
        v55 = (_QWORD *)(a1 + 8);
      }
      else
      {
        v50.i32[0] = *(_DWORD *)(v13 + v45);
        v51 = vcvts_n_s32_f32(v17 * *(float *)(v13 + v44), 5uLL);
        if (v51 >= 31)
          v51 = 31;
        if (v50.f32[0] > v22)
          v22 = *(float *)(v13 + v45);
        v50.i32[1] = *(_DWORD *)(v13 + v46);
        v52 = vcvt_n_s32_f32(vmul_n_f32(v50, v17), 5uLL);
        v53 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v52), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v52, (int32x2_t)0x1F0000001FLL), (uint32x2_t)0xA00000005));
        v54 = vadd_s32(v53, vdup_lane_s32(v53, 1)).u32[0] | v51 & ~(v51 >> 31);
        v55 = (_QWORD *)(a1 + 48);
      }
      ++*(_DWORD *)(*v55 + 4 * v54);
LABEL_52:
      v47 += 16;
      v46 += 16;
      v45 += 16;
      v44 += 16;
      if (!--v43)
        goto LABEL_53;
    }
  }
  if (v15 >= 1)
  {
    v19 = 0;
    v20 = 4 * (int)v16;
    v21 = 0.0;
    v22 = 0.0;
    while (v14 < 1)
    {
LABEL_31:
      ++v19;
      v13 += v20;
      if (v19 == v15)
        goto LABEL_56;
    }
    v23 = v14;
    v24 = 4 * v11;
    v25 = 4 * v10;
    v26 = 4 * v9;
    v27 = 4 * v12;
    while (1)
    {
      v28 = *(float *)(v13 + v27);
      v29 = v28;
      if (v28 >= 0.5 || v29 <= 0.1)
      {
        if (v28 <= 0.5 || v29 >= 0.9)
          goto LABEL_30;
        v36 = *(float *)(v13 + v24);
        v37.i32[0] = *(_DWORD *)(v13 + v25);
        v37.i32[1] = *(_DWORD *)(v13 + v26);
        v38 = vcvt_n_s32_f32(vmul_n_f32(v37, v17), 6uLL);
        v39 = vcvts_n_s32_f32(v17 * v36, 6uLL);
        v40 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v38), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v38, (int32x2_t)0x3F0000003FLL), (uint32x2_t)0xC00000006));
        if (v39 >= 63)
          v39 = 63;
        v34 = vadd_s32(v40, vdup_lane_s32(v40, 1)).u32[0] | v39 & ~(v39 >> 31);
        if (v36 > v21)
          v21 = *(float *)(v13 + v24);
        v35 = (_QWORD *)(a1 + 8);
      }
      else
      {
        v30.i32[0] = *(_DWORD *)(v13 + v25);
        v31 = vcvts_n_s32_f32(v17 * *(float *)(v13 + v24), 6uLL);
        if (v31 >= 63)
          v31 = 63;
        if (v30.f32[0] > v22)
          v22 = *(float *)(v13 + v25);
        v30.i32[1] = *(_DWORD *)(v13 + v26);
        v32 = vcvt_n_s32_f32(vmul_n_f32(v30, v17), 6uLL);
        v33 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(v32), (int8x8_t)vshl_u32((uint32x2_t)vmin_s32(v32, (int32x2_t)0x3F0000003FLL), (uint32x2_t)0xC00000006));
        v34 = vadd_s32(v33, vdup_lane_s32(v33, 1)).u32[0] | v31 & ~(v31 >> 31);
        v35 = (_QWORD *)(a1 + 48);
      }
      ++*(_DWORD *)(*v35 + 4 * v34);
LABEL_30:
      v27 += 16;
      v26 += 16;
      v25 += 16;
      v24 += 16;
      if (!--v23)
        goto LABEL_31;
    }
  }
LABEL_55:
  v22 = 0.0;
  v21 = 0.0;
LABEL_56:
  v61 = (_QWORD *)(a1 + 8);
  v62 = *(_DWORD *)(a1 + 36);
  if (v62 == -1)
  {
    v63 = *(unsigned int *)(a1 + 32);
    if ((int)v63 < 1)
    {
      v62 = 0;
      v65 = 0;
    }
    else
    {
      v64 = 0;
      v65 = 0;
      v62 = 0;
      do
      {
        if (*(_DWORD *)(*v61 + 4 * v64) > v62)
        {
          v62 = *(_DWORD *)(*v61 + 4 * v64);
          v65 = v64;
        }
        ++v64;
      }
      while (v63 != v64);
    }
    *(_DWORD *)(a1 + 36) = v62;
    *(_DWORD *)(a1 + 40) = v65;
  }
  v66 = (_QWORD *)(a1 + 48);
  v67 = *(_DWORD *)(a1 + 76);
  if (v67 == -1)
  {
    v68 = *(unsigned int *)(a1 + 72);
    if ((int)v68 < 1)
    {
      v67 = 0;
      v70 = 0;
    }
    else
    {
      v69 = 0;
      v70 = 0;
      v67 = 0;
      do
      {
        if (*(_DWORD *)(*v66 + 4 * v69) > v67)
        {
          v67 = *(_DWORD *)(*v66 + 4 * v69);
          v70 = v69;
        }
        ++v69;
      }
      while (v68 != v69);
    }
    *(_DWORD *)(a1 + 76) = v67;
    *(_DWORD *)(a1 + 80) = v70;
  }
  if (v62 <= v67)
  {
    if ((_QWORD *)result != v66)
    {
      v74 = result;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)result, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
      result = v74;
    }
    v75 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 80);
    *(_QWORD *)(result + 24) = v75;
    v72 = 1;
    v21 = v22;
  }
  else
  {
    if ((_QWORD *)result != v61)
    {
      v71 = result;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)result, *(char **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
      result = v71;
    }
    v72 = 0;
    v73 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(result + 24) = v73;
  }
  *a2 = v72;
  *a3 = v21;
  return result;
}

void ColorHisto::calculateCenterSamples(ColorHisto *a1, uint64_t a2, float a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  char v18;
  int v19;
  char v20;
  float v21;
  float v22;
  float v23;
  double v24;
  uint64_t v25;
  float v26;
  float v27;
  int v28;
  double v29;
  float32x2_t v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  float v42;
  float32x2_t v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float32x2_t v48[2];
  float v49;
  float32x2_t v50;
  float v51[18];

  v6 = ColorHisto::calculateMaxHistogramIdx(a1);
  v14 = *((_DWORD *)a1 + 6);
  if (v14 == 0x40000)
    v15 = 10;
  else
    v15 = 7;
  if (v14 == 0x40000)
    v16 = -4;
  else
    v16 = -8;
  if (v14 == 0x40000)
    v17 = 2;
  else
    v17 = 4;
  if (v14 == 0x40000)
    v18 = 4;
  else
    v18 = 2;
  if (v14 == 0x40000)
    v19 = 252;
  else
    v19 = 248;
  if (v14 == 0x40000)
    v20 = 2;
  else
    v20 = 3;
  v21 = (float)((v6 << v20) & v19 | v17) / 255.0;
  v22 = (float)(int)((v6 >> v18) & v19 | v17) / 255.0;
  v23 = (float)((v6 >> v15) & v16 | v17) / 255.0;
  OMColorUtil::getRGBToYCbCrMatrix(1, v7, v8, v9, v10, v11, v12, v13, (Mat4f *)v51);
  v44 = v23;
  v45 = v22;
  v46 = v21;
  v47 = 1065353216;
  operator*(v51, &v44, (float *)v48);
  proj(v48, (float32x2_t *)&v49, v24);
  if (*((int *)a1 + 6) >= 1)
  {
    v25 = 0;
    v26 = a3 * 0.2;
    v27 = a3 * 0.04;
    if (v14 == 0x40000)
      v28 = 2097148;
    else
      v28 = 16777208;
    do
    {
      v44 = (float)(int)((v25 >> v15) & v28 | v17) / 255.0;
      v45 = (float)(int)((v25 >> v18) & v19 | v17) / 255.0;
      v46 = (float)(((_DWORD)v25 << v20) & v19 | v17) / 255.0;
      v47 = 1065353216;
      operator*(v51, &v44, (float *)v48);
      proj(v48, (float32x2_t *)&v42, v29);
      if (*(int *)(*(_QWORD *)a1 + 4 * v25) >= 11 && vabds_f32(v42, v49) < v26)
      {
        v30 = vsub_f32(v43, v50);
        if (sqrtf(vaddv_f32(vmul_f32(v30, v30))) < v27)
        {
          v32 = *(_DWORD **)(a2 + 8);
          v31 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v32 >= v31)
          {
            v34 = *(_DWORD **)a2;
            v35 = ((uint64_t)v32 - *(_QWORD *)a2) >> 2;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 1 > v36)
              v36 = v37 >> 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
              v38 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2 + 16, v38);
              v34 = *(_DWORD **)a2;
              v32 = *(_DWORD **)(a2 + 8);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[4 * v35];
            *(_DWORD *)v40 = v25;
            v33 = v40 + 4;
            while (v32 != v34)
            {
              v41 = *--v32;
              *((_DWORD *)v40 - 1) = v41;
              v40 -= 4;
            }
            *(_QWORD *)a2 = v40;
            *(_QWORD *)(a2 + 8) = v33;
            *(_QWORD *)(a2 + 16) = &v39[4 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v32 = v25;
            v33 = v32 + 1;
          }
          *(_QWORD *)(a2 + 8) = v33;
        }
      }
      ++v25;
    }
    while (v25 < *((int *)a1 + 6));
  }
}

uint64_t ColorHisto::calculateMaxHistogramIdx(ColorHisto *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (*((_DWORD *)this + 7) != -1)
    return *((unsigned int *)this + 8);
  v2 = *((unsigned int *)this + 6);
  if ((int)v2 < 1)
  {
    v4 = 0;
    v1 = 0;
  }
  else
  {
    v3 = 0;
    LODWORD(v1) = 0;
    v4 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)this + 4 * v3) <= v4)
      {
        v1 = v1;
      }
      else
      {
        v4 = *(_DWORD *)(*(_QWORD *)this + 4 * v3);
        v1 = v3;
      }
      ++v3;
    }
    while (v2 != v3);
  }
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

void ColorHisto::calculateCenterSamplesHDR(ColorHisto *a1, uint64_t a2, float a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  char v18;
  int v19;
  char v20;
  float v21;
  float v22;
  float v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  int v30;
  double v31;
  float v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  float32x2_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float32x2_t v56[2];
  float32x2_t v57;
  float v58;
  float v59[18];

  v6 = ColorHisto::calculateMaxHistogramIdx(a1);
  v14 = *((_DWORD *)a1 + 6);
  if (v14 == 0x40000)
    v15 = 10;
  else
    v15 = 7;
  if (v14 == 0x40000)
    v16 = -4;
  else
    v16 = -8;
  if (v14 == 0x40000)
    v17 = 2;
  else
    v17 = 4;
  if (v14 == 0x40000)
    v18 = 4;
  else
    v18 = 2;
  if (v14 == 0x40000)
    v19 = 252;
  else
    v19 = 248;
  if (v14 == 0x40000)
    v20 = 2;
  else
    v20 = 3;
  v21 = (float)((v6 << v20) & v19 | v17) / 255.0;
  v22 = (float)(int)((v6 >> v18) & v19 | v17) / 255.0;
  v23 = (float)((v6 >> v15) & v16 | v17) / 255.0;
  OMColorUtil::getRGBToYCbCrMatrix(1, v7, v8, v9, v10, v11, v12, v13, (Mat4f *)v59);
  v52 = v23;
  v53 = v22;
  v54 = v21;
  v55 = 1065353216;
  operator*(v59, &v52, (float *)v56);
  proj(v56, &v57, v24);
  v25 = sqrtf((float)(v57.f32[1] * v57.f32[1]) + (float)(v58 * v58));
  if (a3 <= 0.9)
  {
    v27 = 0.08;
    v28 = a3 * 0.08;
  }
  else
  {
    v26 = (float)(a3 + -0.9) * 3.0;
    if (v26 <= 1.0)
      v27 = (float)(v26 * -0.06) + 0.08;
    else
      v27 = 0.02;
    v28 = (float)((float)((float)((float)(v25 - v27) + -0.072) / 0.9) * a3)
        + (float)((float)((float)((float)((float)(v25 - v27) + -0.072) / 0.9) * -0.9) + 0.072);
  }
  if (*((int *)a1 + 6) >= 1)
  {
    v29 = 0;
    v49 = a2 + 16;
    if (v14 == 0x40000)
      v30 = 2097148;
    else
      v30 = 16777208;
    while (1)
    {
      v52 = (float)(int)((v29 >> v15) & v30 | v17) / 255.0;
      v53 = (float)(int)((v29 >> v18) & v19 | v17) / 255.0;
      v54 = (float)(((_DWORD)v29 << v20) & v19 | v17) / 255.0;
      v55 = 1065353216;
      operator*(v59, &v52, (float *)v56);
      proj(v56, &v50, v31);
      if (*(int *)(*(_QWORD *)a1 + 4 * v29) >= 11)
        break;
LABEL_63:
      if (++v29 >= *((int *)a1 + 6))
        return;
    }
    v32 = sqrtf((float)(v50.f32[1] * v50.f32[1]) + (float)(v51 * v51));
    if (v32 >= v25)
    {
      v34 = *(_DWORD **)(a2 + 8);
      v41 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v34 >= v41)
      {
        v35 = *(_DWORD **)a2;
        v43 = ((uint64_t)v34 - *(_QWORD *)a2) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
LABEL_65:
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)v35;
        if (v45 >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v44;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v49, v39);
          v35 = *(_DWORD **)a2;
          v34 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v40 = 0;
        }
        v46 = &v40[4 * v43];
        *(_DWORD *)v46 = v29;
        v42 = v46 + 4;
        while (v34 != v35)
        {
          v47 = *--v34;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        goto LABEL_60;
      }
    }
    else
    {
      if (v32 <= v27
        || sqrtf((float)((float)(v50.f32[1] - v57.f32[1]) * (float)(v50.f32[1] - v57.f32[1]))+ (float)((float)(v51 - v58) * (float)(v51 - v58))) >= v28)
      {
        goto LABEL_63;
      }
      v34 = *(_DWORD **)(a2 + 8);
      v33 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v34 >= v33)
      {
        v35 = *(_DWORD **)a2;
        v36 = ((uint64_t)v34 - *(_QWORD *)a2) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          goto LABEL_65;
        v38 = v33 - (_QWORD)v35;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v49, v39);
          v35 = *(_DWORD **)a2;
          v34 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v40 = 0;
        }
        v46 = &v40[4 * v36];
        *(_DWORD *)v46 = v29;
        v42 = v46 + 4;
        while (v34 != v35)
        {
          v48 = *--v34;
          *((_DWORD *)v46 - 1) = v48;
          v46 -= 4;
        }
LABEL_60:
        *(_QWORD *)a2 = v46;
        *(_QWORD *)(a2 + 8) = v42;
        *(_QWORD *)(a2 + 16) = &v40[4 * v39];
        if (v35)
          operator delete(v35);
        goto LABEL_62;
      }
    }
    *v34 = v29;
    v42 = v34 + 1;
LABEL_62:
    *(_QWORD *)(a2 + 8) = v42;
    goto LABEL_63;
  }
}

void sub_1B284ADFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B284AEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40C80D7783);
  _Unwind_Resume(a1);
}

void sub_1B284B664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  (*(void (**)(void *))(*(_QWORD *)a16 + 24))(a16);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  _Unwind_Resume(a1);
}

void sub_1B284B9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C401478D197);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void OMHisto::OMHisto(OMHisto *this, int a2, FxBitmap *a3)
{
  char *v6;
  std::vector<int>::size_type v7;
  FxBitmap *v8;

  *(_QWORD *)this = &unk_1E64E2998;
  v6 = (char *)this + 8;
  v7 = a2;
  std::vector<int>::vector((std::vector<int> *)((char *)this + 8), a2);
  *((_DWORD *)this + 8) = a2;
  *(_QWORD *)((char *)this + 36) = -1;
  std::vector<int>::vector((std::vector<int> *)this + 2, v7);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 18) = a2;
  *(_QWORD *)((char *)this + 76) = -1;
  *((_QWORD *)this + 11) = v6;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = a3;
  v8 = a3;
}

void sub_1B284BB6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[13] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[7] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void OMHisto_32x32x32::~OMHisto_32x32x32(id *this)
{
  OMHisto::~OMHisto(this);
  JUMPOUT(0x1B5E29170);
}

void OMHisto::~OMHisto(id *this)
{
  id v2;
  id v3;
  id v4;

  *this = &unk_1E64E2998;

  v2 = this[12];
  if (v2)
  {
    this[13] = v2;
    operator delete(v2);
  }
  v3 = this[6];
  if (v3)
  {
    this[7] = v3;
    operator delete(v3);
  }
  v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

uint64_t *HGRef<`anonymous namespace'::_RgbToSatCbCrEvaluator>::~HGRef(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 24))(v2 + 8);
  return a1;
}

void sub_1B284D360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  v4 = *(_QWORD *)(v2 - 168);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::UploadCurveAndSetParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  __n128 v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;

  v7 = 0.0;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v14.n128_u64[0] = *(_QWORD *)(v8 + 32);
  v10 = *(double *)(v8 + 8);
  v11 = *(double *)(v8 + 16);
  v12 = v14.n128_f64[0] - v10;
  v13 = v14.n128_f64[0] - v10 == 0.0;
  v14.n128_u32[0] = 0;
  if (!v13)
  {
    v14.n128_f64[0] = (*(double *)(v8 + 40) - v11) / v12;
    v14.n128_f32[0] = v14.n128_f64[0];
  }
  v15 = v10;
  v16 = v11;
  (*(void (**)(uint64_t, uint64_t, float, float, __n128, float))(*(_QWORD *)a2 + 96))(a2, a4, v15, v16, v14, 0.0);
  v17 = *(double *)(v9 - 16);
  v18 = *(double *)(v9 - 8);
  v19 = v17 - *(double *)(v9 - 40);
  if (v19 != 0.0)
    v7 = (v18 - *(double *)(v9 - 32)) / v19;
  v20 = v17;
  v21 = v18;
  return (*(uint64_t (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a2 + 96))(a2, (a4 + 1), v20, v21, v7, 0.0);
}

uint64_t ___ZN12_GLOBAL__N_113PAEUseACEScctEv_block_invoke_0()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("PAEUseACEScct"));
  return result;
}

void `anonymous namespace'::_Evaluator::~_Evaluator(_anonymous_namespace_::_Evaluator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E64E2A10;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8052888210);
}

{
  JUMPOUT(0x1B5E29170);
}

float `anonymous namespace'::_Evaluator::evaluate(uint64_t a1, float32x4_t *a2, _OWORD *a3)
{
  int v3;
  float32x4_t v4;
  float v5;
  float v6;
  __int128 *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int32x4_t v16;
  float v17;
  double v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  double v26;
  double v27;
  float v28;
  float v29;
  double v30;
  float v31;
  double v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  double v40;
  float v41;
  float v42;
  double v43;
  float32x4_t v44;
  double v45;
  int v46;
  float v47;
  double v48;
  float v49;
  double v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  __int128 *v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  __int128 v63;
  float result;

  v3 = *(_DWORD *)(a1 + 40);
  v4 = *a2;
  if (v3 == 2)
  {
    LODWORD(v5) = HIDWORD(a2->i64[0]);
    v8 = (float)(*(float *)&cc::matrix::rgb_to_YCbCr2020 * v4.f32[0])
       + vmuls_lane_f32(*((float *)&cc::matrix::rgb_to_YCbCr2020 + 1), *(float32x2_t *)v4.f32, 1);
    v9 = *((float *)&cc::matrix::rgb_to_YCbCr2020 + 2);
    LODWORD(v6) = a2->i64[1];
  }
  else
  {
    LODWORD(v5) = HIDWORD(a2->i64[0]);
    LODWORD(v6) = a2->i64[1];
    if (v3)
      v7 = &cc::matrix::rgb_to_YCbCr709;
    else
      v7 = (__int128 *)&cc::matrix::rgb_to_YCbCr601;
    v8 = (float)(*(float *)v7 * v4.f32[0]) + vmuls_lane_f32(*((float *)v7 + 1), *(float32x2_t *)v4.f32, 1);
    v9 = *((float *)v7 + 2);
  }
  v10 = v8 + vmuls_lane_f32(v9, v4, 2);
  if (v5 >= v6)
    v11 = v6;
  else
    v11 = v5;
  if (v5 <= v6)
    v12 = v6;
  else
    v12 = v5;
  if (v4.f32[0] >= v11)
    v13 = v11;
  else
    LODWORD(v13) = *(float32x4_t *)a2->f32;
  if (v4.f32[0] > v12)
    LODWORD(v12) = *(float32x4_t *)a2->f32;
  v14 = v13 + v12;
  v15 = (float)(v13 + v12) * 0.5;
  v16.i64[0] = 0;
  v16.i64[1] = LODWORD(v15);
  v17 = v12 - v13;
  v18 = (float)(v12 - v13);
  if ((float)(v12 - v13) < 0.0)
    v18 = -v18;
  if (v18 >= 0.00000011920929)
  {
    if (v15 > 0.5)
    {
      v19 = 2.0 - v12 - v13;
      v14 = v19;
    }
    v20 = -v14;
    if (v14 >= 0.0)
      v20 = v14;
    if (v20 < 0.00000011921)
      v14 = 0.00000011921;
    v21 = v17 / v14;
    v22 = v4.f32[0] - v12;
    if ((float)(v4.f32[0] - v12) < 0.0)
      v22 = -(float)(v4.f32[0] - v12);
    if (v22 >= 0.00000011921)
    {
      v28 = v5 - v12;
      if ((float)(v5 - v12) < 0.0)
        v28 = -(float)(v5 - v12);
      v29 = v4.f32[0] - v13;
      if ((float)(v4.f32[0] - v13) < 0.0)
        v29 = -(float)(v4.f32[0] - v13);
      v30 = (float)((float)(v12 - v4.f32[0]) / v17);
      v26 = (float)((float)(v12 - v5) / v17) + 3.0;
      if (v29 >= 0.00000011921)
        v26 = 5.0 - v30;
      v31 = v6 - v13;
      if (v31 < 0.0)
        v31 = -v31;
      v27 = 3.0 - (float)((float)(v12 - v6) / v17);
      v32 = v30 + 1.0;
      if (v31 < 0.00000011921)
        v27 = v32;
      v25 = v28 < 0.00000011921;
    }
    else
    {
      v23 = v5 - v13;
      v24 = -(float)(v5 - v13);
      if (v23 < 0.0)
        v23 = v24;
      v25 = v23 < 0.00000011921;
      v26 = 1.0 - (float)((float)(v12 - v5) / v17);
      v27 = (float)((float)(v12 - v6) / v17) + 5.0;
    }
    if (!v25)
      v27 = v26;
    v33 = v27;
    v34 = v33 / 6.0;
    v16.i64[0] = __PAIR64__(LODWORD(v21), LODWORD(v34));
    if (v34 <= 1.0)
    {
      if (v34 >= 0.0)
        goto LABEL_51;
      v35 = (float)(v34 + (float)(int)(float)-v34) + 1.0;
    }
    else
    {
      v35 = v34 - (float)(int)v34;
    }
    *(float *)v16.i32 = v35;
  }
LABEL_51:
  v36 = (float)((float)(*(_DWORD *)(a1 + 72) - 1) * *(float *)v16.i32);
  v37 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * v36);
  *(float *)v16.i32 = v37;
  if (v37 <= 1.0)
  {
    if (v37 >= 0.0)
      goto LABEL_56;
    v38 = (float)(v37 + (float)(int)(float)-v37) + 1.0;
  }
  else
  {
    v38 = v37 - (float)(int)v37;
  }
  *(float *)v16.i32 = v38;
LABEL_56:
  if (*(float *)v16.i32 <= 1.0)
  {
    if (*(float *)v16.i32 >= 0.0)
      v39 = *(float *)v16.i32;
    else
      v39 = (float)(*(float *)v16.i32 + (float)(int)(float)-*(float *)v16.i32) + 1.0;
  }
  else
  {
    v39 = *(float *)v16.i32 - (float)(int)*(float *)v16.i32;
  }
  v40 = *(float *)&v16.i32[2];
  v41 = (float)(*(float *)&v16.i32[2] + *(float *)&v16.i32[1]) - (float)(*(float *)&v16.i32[2] * *(float *)&v16.i32[1]);
  if (*(float *)&v16.i32[2] <= 0.5)
  {
    v42 = (*(float *)&v16.i32[1] + 1.0) * v40;
    v41 = v42;
  }
  if (*(float *)&v16.i32[1] >= 0.0)
    v43 = *(float *)&v16.i32[1];
  else
    v43 = -*(float *)&v16.i32[1];
  if (v43 >= 0.00000011920929)
  {
    v45 = v39 * 6.0;
    v46 = (int)v45;
    v47 = v40 + v40 - v41;
    v48 = (v45 - floor(v45)) * (float)(v41 - v47);
    v49 = v48 + v47;
    v50 = v41 - v48;
    v51 = v50;
    switch(v46)
    {
      case 1:
        v44.i32[3] = 0;
        v44.f32[0] = v50;
        v44.f32[1] = v41;
        goto LABEL_71;
      case 2:
        v44.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v47));
        v44.i64[1] = LODWORD(v49);
        break;
      case 3:
        v44.i32[3] = 0;
        v44.i64[0] = __PAIR64__(LODWORD(v51), LODWORD(v47));
        goto LABEL_75;
      case 4:
        v44.i32[3] = 0;
        v44.i64[0] = __PAIR64__(LODWORD(v47), LODWORD(v49));
LABEL_75:
        v44.f32[2] = v41;
        break;
      case 5:
        v44.i64[0] = __PAIR64__(LODWORD(v47), LODWORD(v41));
        v44.i64[1] = LODWORD(v51);
        break;
      default:
        v44.i32[3] = 0;
        v44.i64[0] = __PAIR64__(LODWORD(v49), LODWORD(v41));
LABEL_71:
        v44.f32[2] = v47;
        break;
    }
  }
  else
  {
    v44 = (float32x4_t)vdupq_laneq_s32(v16, 2);
    v44.i32[3] = 0;
  }
  if (v3 == 2)
  {
    v52 = (float *)&cc::matrix::rgb_to_YCbCr2020;
  }
  else if (v3)
  {
    v52 = (float *)&cc::matrix::rgb_to_YCbCr709;
  }
  else
  {
    v52 = (float *)&cc::matrix::rgb_to_YCbCr601;
  }
  v53 = (float)((float)(*v52 * v44.f32[0]) + vmuls_lane_f32(v52[1], *(float32x2_t *)v44.f32, 1))
      + vmuls_lane_f32(v52[2], v44, 2);
  v54 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * v36);
  v56 = &cc::matrix::YCbCr709_to_rgb;
  if (v3 == 2)
    v56 = &cc::matrix::YCbCr2020_to_rgb;
  if (v3)
    v57 = (float *)v56;
  else
    v57 = (float *)&cc::matrix::YCbCr601_to_rgb;
  if (!*(_BYTE *)(a1 + 44))
    v10 = v53;
  v55 = *(float *)(*(_QWORD *)(a1 + 64) + 4 * v36);
  v58 = (float)(v10 * v55) + (float)((float)(1.0 - v55) * 0.0);
  v59 = (float)(1.0 - v54) * 0.0;
  v60 = (float)((float)((float)((float)(v44.f32[0] * v52[6]) + (float)(v44.f32[1] * v52[7]))
                      + (float)(v44.f32[2] * v52[8]))
              * v54)
      + v59;
  v61 = (float)((float)((float)((float)(v44.f32[0] * v52[3]) + (float)(v44.f32[1] * v52[4]))
                      + (float)(v44.f32[2] * v52[5]))
              * v54)
      + v59;
  v62 = (float)((float)(v58 * v57[3]) + (float)(v61 * v57[4])) + (float)(v60 * v57[5]);
  *(float *)&v63 = (float)((float)(v58 * *v57) + (float)(v61 * v57[1])) + (float)(v60 * v57[2]);
  result = (float)((float)(v58 * v57[6]) + (float)(v61 * v57[7])) + (float)(v60 * v57[8]);
  *((float *)&v63 + 1) = v62;
  *((_QWORD *)&v63 + 1) = LODWORD(result);
  *a3 = v63;
  return result;
}

uint64_t `anonymous namespace'::_Evaluator::componentSize(_anonymous_namespace_::_Evaluator *this)
{
  return 33;
}

float `anonymous namespace'::_Evaluator::componentMin(_anonymous_namespace_::_Evaluator *this)
{
  return *((float *)this + 8);
}

float `anonymous namespace'::_Evaluator::componentMax(_anonymous_namespace_::_Evaluator *this)
{
  return *((float *)this + 9);
}

double `anonymous namespace'::SatBytesEval(_anonymous_namespace_ *this, double *a2)
{
  double result;

  result = *(double *)this + 0.5;
  *(double *)this = result;
  return result;
}

void `anonymous namespace'::_RgbToSatCbCrEvaluator::~_RgbToSatCbCrEvaluator(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  HGObject *v1;
  uint64_t v2;

  *(_QWORD *)this = off_1E64E2AB8;
  *((_QWORD *)this + 1) = &unk_1E64E2AF8;
  v1 = (_anonymous_namespace_::_RgbToSatCbCrEvaluator *)((char *)this + 8);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGObject::~HGObject(v1);
}

{
  void *v1;

  HGObject::operator delete(v1);
}

uint64_t `anonymous namespace'::_RgbToSatCbCrEvaluator::componentSize(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  return 17;
}

float `anonymous namespace'::_RgbToSatCbCrEvaluator::componentMin(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  return *((float *)this + 9);
}

float `anonymous namespace'::_RgbToSatCbCrEvaluator::componentMax(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
  return *((float *)this + 10);
}

void `non-virtual thunk to'`anonymous namespace'::_RgbToSatCbCrEvaluator::~_RgbToSatCbCrEvaluator(_anonymous_namespace_::_RgbToSatCbCrEvaluator *this)
{
}

{
  void *v1;

  HGObject::operator delete(v1);
}

void `anonymous namespace'::_RgbToSatCbCrEvaluator::_BitmapStorageObject::~_BitmapStorageObject(_anonymous_namespace_::_RgbToSatCbCrEvaluator::_BitmapStorageObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E2B68;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8077774924);
  HGObject::~HGObject(this);
}

{
  void *v1;

  HGObject::operator delete(v1);
}

void `anonymous namespace'::HgSatCurves::~HgSatCurves(HGNode *this)
{
  void *v1;

  HgcSatCurves::~HgcSatCurves(this);
  HGObject::operator delete(v1);
}

uint64_t `anonymous namespace'::HgSatCurves::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t `anonymous namespace'::HgSatCurves::GetROI(_anonymous_namespace_::HgSatCurves *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  unsigned int v4;
  unsigned int v5;

  if (!a3)
    return *(_QWORD *)&a4.var0;
  if (a3 <= 3)
  {
    v4 = 1024;
    v5 = 1;
    return HGRectMake4i(0, 0, v4, v5);
  }
  if (a3 == 4)
  {
    v4 = 289;
    v5 = 17;
    return HGRectMake4i(0, 0, v4, v5);
  }
  return 0;
}

void sub_1B284E3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  HGObject::operator delete(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

void HGrowShrinkMatte::HGrowShrinkMatte(HGrowShrinkMatte *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E64E2E20;
  *(_DWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
}

void HGrowShrinkMatte::~HGrowShrinkMatte(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E2E20;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HGrowShrinkMatte::~HGrowShrinkMatte(this);
  HGObject::operator delete(v1);
}

HgcShrinkGrowMatte *HGrowShrinkMatte::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  HgcShrinkGrowMatte *v4;
  char *v5;
  HgcShrinkGrowMatte *v6;
  float v7;
  char v8;
  float v9;
  int v10;
  int v11;
  HGaussianBlur *v12;
  HgcShrinkGrowMatte *v13;
  __n128 v14;
  float v15;
  HGaussianBlur *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  HgcShrinkGrowMatte *v21;
  uint64_t v22;

  Input = HGRenderer::GetInput(a2, this, 0);
  v4 = (HgcShrinkGrowMatte *)Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(_QWORD *)Input + 16))(Input);
    v5 = (char *)this + 416;
    v6 = (HgcShrinkGrowMatte *)*((_QWORD *)this + 52);
    if (v6 == v4)
    {
      (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v4 + 24))(v4);
      v4 = *(HgcShrinkGrowMatte **)v5;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = (char *)this + 416;
    v6 = (HgcShrinkGrowMatte *)*((_QWORD *)this + 52);
    if (!v6)
    {
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (v6)
    (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v6 + 24))(v6);
  *(_QWORD *)v5 = v4;
LABEL_8:
  v7 = *((float *)this + 102);
  if (v7 != 0.0)
  {
    if (v4)
      (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v4 + 16))(v4);
    v8 = (*(uint64_t (**)(HGNode *, _QWORD))(*(_QWORD *)this + 152))(this, 0);
    v9 = fabsf(v7);
    if ((int)v9 >= 1)
    {
      v10 = 0;
      v11 = v8 & 2;
      do
      {
        v12 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
        HGaussianBlur::HGaussianBlur(v12);
        HGaussianBlur::init(v12, 1.283, 1.0, 1.0, 0, 0, 0);
        (*(void (**)(HGaussianBlur *, _QWORD, HgcShrinkGrowMatte *))(*(_QWORD *)v12 + 120))(v12, 0, v4);
        v13 = (HgcShrinkGrowMatte *)HGObject::operator new(0x1A0uLL);
        HgcShrinkGrowMatte::HgcShrinkGrowMatte(v13);
        if (*((float *)this + 102) >= 0.0)
          v14.n128_f32[0] = 0.0;
        else
          v14.n128_f32[0] = -1.0;
        (*(void (**)(HgcShrinkGrowMatte *, _QWORD, float, __n128, float, float))(*(_QWORD *)v13 + 96))(v13, 0, 2.0, v14, 0.0, 0.0);
        (*(void (**)(HgcShrinkGrowMatte *, _QWORD, HGaussianBlur *))(*(_QWORD *)v13 + 120))(v13, 0, v12);
        if (!v10 && v11)
          (*(void (**)(HgcShrinkGrowMatte *, _QWORD, uint64_t))(*(_QWORD *)v13 + 136))(v13, 0, 2);
        if (v4 != v13)
        {
          if (v4)
            (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v4 + 24))(v4);
          v4 = v13;
          (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v13 + 16))(v13);
        }
        (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v13 + 24))(v13);
        (*(void (**)(HGaussianBlur *))(*(_QWORD *)v12 + 24))(v12);
        ++v10;
      }
      while ((int)v9 != v10);
    }
    v15 = v9 - (float)(int)v9;
    if (v15 > 0.0)
    {
      v16 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
      HGaussianBlur::HGaussianBlur(v16);
      HGaussianBlur::init(v16, 1.283, 1.0, 1.0, 0, 0, 0);
      (*(void (**)(HGaussianBlur *, _QWORD, HgcShrinkGrowMatte *))(*(_QWORD *)v16 + 120))(v16, 0, v4);
      v17 = v15 + 1.0;
      v18 = *((float *)this + 102);
      v19 = 1.0 - v17;
      if (v18 >= 0.0)
        v19 = 0.0;
      if (v18 <= 0.0)
        v20 = v19;
      else
        v20 = 0.0;
      v21 = (HgcShrinkGrowMatte *)HGObject::operator new(0x1A0uLL);
      HgcShrinkGrowMatte::HgcShrinkGrowMatte(v21);
      (*(void (**)(HgcShrinkGrowMatte *, _QWORD, float, float, float, float))(*(_QWORD *)v21 + 96))(v21, 0, v17, v20, 0.0, 0.0);
      (*(void (**)(HgcShrinkGrowMatte *, _QWORD, HGaussianBlur *))(*(_QWORD *)v21 + 120))(v21, 0, v16);
      if (v4 != v21)
      {
        if (v4)
          (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v4 + 24))(v4);
        v4 = v21;
        (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v21 + 16))(v21);
      }
      (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v21 + 24))(v21);
      (*(void (**)(HGaussianBlur *))(*(_QWORD *)v16 + 24))(v16);
    }
    v22 = *(_QWORD *)v5;
    if (*(HgcShrinkGrowMatte **)v5 == v4)
    {
      if (v4)
        goto LABEL_41;
    }
    else
    {
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      *(_QWORD *)v5 = v4;
      if (v4)
      {
        (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v4 + 16))(v4);
LABEL_41:
        (*(void (**)(HgcShrinkGrowMatte *))(*(_QWORD *)v4 + 24))(v4);
        return *(HgcShrinkGrowMatte **)v5;
      }
    }
  }
  return v4;
}

void sub_1B284E8DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  HGObject::operator delete(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HErode::HErode(HErode *this)
{
  uint64_t v1;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v1 = off_1E64E3070;
  *(_DWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
}

void HErode::~HErode(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E3070;
  v2 = *((_QWORD *)this + 52);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HErode::~HErode(this);
  HGObject::operator delete(v1);
}

HgcErode *HErode::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;
  HGNode *v4;
  HgcErode **v5;
  HGNode *v6;
  HGaussianBlur *v7;
  HgcErode *v8;
  HgcErode *v9;

  Input = HGRenderer::GetInput(a2, this, 0);
  v4 = Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(_QWORD *)Input + 16))(Input);
    v5 = (HgcErode **)((char *)this + 416);
    v6 = (HGNode *)*((_QWORD *)this + 52);
    if (v6 == v4)
    {
      (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_8;
    }
  }
  else
  {
    v5 = (HgcErode **)((char *)this + 416);
    v6 = (HGNode *)*((_QWORD *)this + 52);
    if (!v6)
      goto LABEL_8;
  }
  if (v6)
    (*(void (**)(HGNode *))(*(_QWORD *)v6 + 24))(v6);
  *v5 = (HgcErode *)v4;
LABEL_8:
  if (*((float *)this + 102) > 0.0)
  {
    v7 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
    HGaussianBlur::HGaussianBlur(v7);
    HGaussianBlur::init(v7, *((float *)this + 102) * 4.0, 1.0, 1.0, 0, 0, 0);
    (*(void (**)(HGaussianBlur *, _QWORD, HgcErode *))(*(_QWORD *)v7 + 120))(v7, 0, *v5);
    v8 = (HgcErode *)HGObject::operator new(0x1A0uLL);
    HgcErode::HgcErode(v8);
    (*(void (**)(HgcErode *, _QWORD, HgcErode *))(*(_QWORD *)v8 + 120))(v8, 0, *v5);
    (*(void (**)(HgcErode *, uint64_t, HGaussianBlur *))(*(_QWORD *)v8 + 120))(v8, 1, v7);
    v9 = *v5;
    if (*v5 != v8)
    {
      if (v9)
        (*(void (**)(HgcErode *))(*(_QWORD *)v9 + 24))(v9);
      *v5 = v8;
      (*(void (**)(HgcErode *))(*(_QWORD *)v8 + 16))(v8);
    }
    (*(void (**)(HgcErode *))(*(_QWORD *)v8 + 24))(v8);
    (*(void (**)(HGaussianBlur *))(*(_QWORD *)v7 + 24))(v7);
  }
  return *v5;
}

void sub_1B284EC08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

double CGRectFromHGRect(HGRect a1)
{
  return (double)a1.var0;
}

uint64_t HGRectFromCGRect(CGRect a1)
{
  return HGRectMake4i((int)a1.origin.x, (int)a1.origin.y, (int)(a1.origin.x + a1.size.width), (int)(a1.origin.y + a1.size.height));
}

void sub_1B284F0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

uint64_t HDroplet::GetDOD(HDroplet *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v9 = *((double *)this + 86);
  v10 = fabsf(v9);
  v11 = HGRectMake4i((int)(float)-v10, (int)(float)-v10, (int)v10, (int)v10);
  v4 = HGRectGrow(v6, v5, v11);
  v13 = v12;
  if ((*(int (**)(HDroplet *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v13, v14);
  }
  return v4;
}

unint64_t HDroplet::GetROI(HDroplet *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t var1;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  float64x2_t v24;
  int8x16_t v25;
  float64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v33[2];
  _OWORD v34[2];
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v37[4];
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46[2];
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  _OWORD v52[2];
  float64x2_t v53;
  float64x2_t v54;
  HGRect v55;
  int8x16_t v56;

  v55 = a4;
  if (a3)
  {
    var1 = a4.var1;
  }
  else
  {
    v6 = *((double *)this + 85);
    v7 = 1.0 / v6;
    v8 = *((double *)this + 86);
    v9 = -*((double *)this + 84) / v6;
    Interval::pixelToFloat(&v55.var0, v53.f64);
    v10 = *((_QWORD *)this + 57);
    v47.i64[0] = *((_QWORD *)this + 52);
    v47.i64[1] = v47.i64[0];
    v48.i64[0] = v10;
    v48.i64[1] = v10;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v53.f64, (double *)v47.i64);
    v11 = *((_QWORD *)this + 59);
    v47.i64[0] = *((_QWORD *)this + 55);
    v47.i64[1] = v47.i64[0];
    v48.i64[0] = v11;
    v48.i64[1] = v11;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v53.f64, (double *)v47.i64);
    v52[0] = v53;
    v52[1] = v54;
    Interval::length<double>(v53.f64, (double *)v51.i64);
    v47 = v51;
    v48 = v51;
    v49 = v51;
    v50 = v51;
    Interval::normalized<double>(v53.f64, v42.f64);
    v53 = v42;
    v54 = v43;
    v46[0] = v7;
    v46[1] = v7;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, v46);
    v42.f64[0] = v9;
    v42.f64[1] = v9;
    v43.f64[0] = v9;
    v43.f64[1] = v9;
    v44.f64[0] = v9;
    v44.f64[1] = v9;
    v45.f64[0] = v9;
    v45.f64[1] = v9;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, v42.f64);
    v12 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 0.0;
    fesetround(v12);
    v13 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 1.0;
    fesetround(v13);
    v14 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 2.0;
    fesetround(v14);
    v15 = fegetround();
    fesetround(0x400000);
    v42.f64[0] = 3.0;
    fesetround(v15);
    *(double *)v38.i64 = -0.0;
    v38.i64[1] = 0;
    *(double *)v39.i64 = --1.0;
    v39.i64[1] = 0x3FF0000000000000;
    *(double *)v40.i64 = --2.0;
    v40.i64[1] = 0x4000000000000000;
    *(double *)v41.i64 = --3.0;
    v41.i64[1] = 0x4008000000000000;
    operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, (double *)v38.i64, v42.f64);
    v47 = (int8x16_t)v42;
    v48 = (int8x16_t)v43;
    v49 = (int8x16_t)v44;
    v50 = (int8x16_t)v45;
    v37[0] = v42;
    v37[1] = v43;
    v37[2] = v44;
    v37[3] = v45;
    Interval::smoothstep(v37, &v38, 0.0, 1.0);
    v47 = v38;
    v48 = v39;
    v49 = v40;
    v50 = v41;
    v16 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0x3FF0000000000000;
    fesetround(v16);
    v17 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0xC000000000000000;
    fesetround(v17);
    v18 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0x3FF0000000000000;
    fesetround(v18);
    v19 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0;
    fesetround(v19);
    *(double *)v38.i64 = --1.0;
    v38.i64[1] = 0x3FF0000000000000;
    *(double *)v39.i64 = -2.0;
    v39.i64[1] = 0xC000000000000000;
    *(double *)v40.i64 = --1.0;
    v40.i64[1] = 0x3FF0000000000000;
    *(double *)v41.i64 = -0.0;
    v41.i64[1] = 0;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, (double *)v38.i64);
    v20 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0;
    fesetround(v20);
    v21 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0x3FF0000000000000;
    fesetround(v21);
    v22 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0xBFF0000000000000;
    fesetround(v22);
    v23 = fegetround();
    fesetround(0x400000);
    v38.i64[0] = 0;
    fesetround(v23);
    *(double *)v38.i64 = -0.0;
    v38.i64[1] = 0;
    *(double *)v39.i64 = --1.0;
    v39.i64[1] = 0x3FF0000000000000;
    *(double *)v40.i64 = -1.0;
    v40.i64[1] = 0xBFF0000000000000;
    *(double *)v41.i64 = -0.0;
    v41.i64[1] = 0;
    PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v47.i64, (double *)v38.i64);
    *(_QWORD *)&v24.f64[1] = v47.i64[1];
    v24.f64[0] = 0.0;
    v25 = vandq_s8(v47, (int8x16_t)vcgtq_f64(v24, (float64x2_t)v47.u64[0]));
    *(_QWORD *)&v26.f64[0] = v48.i64[0];
    *(_QWORD *)&v26.f64[1] = v25.i64[1];
    *(_QWORD *)&v24.f64[0] = v25.i64[0];
    *(_QWORD *)&v24.f64[1] = v48.i64[1];
    v27 = vbslq_s8((int8x16_t)vcgtq_f64(v24, v26), v48, v25);
    *(_QWORD *)&v26.f64[0] = v49.i64[0];
    *(_QWORD *)&v26.f64[1] = v27.i64[1];
    *(_QWORD *)&v24.f64[0] = v27.i64[0];
    *(_QWORD *)&v24.f64[1] = v49.i64[1];
    v28 = vbslq_s8((int8x16_t)vcgtq_f64(v24, v26), v49, v27);
    *(_QWORD *)&v26.f64[1] = v28.i64[1];
    v26.f64[0] = 0.0;
    v35 = vandq_s8(v28, (int8x16_t)vcgtq_f64(v26, (float64x2_t)v28.u64[0]));
    v36 = v35;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v35.i64, v53.f64, (double *)v34);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v36.i64, v54.f64, (double *)v56.i64);
    v38 = (int8x16_t)v34[0];
    v39 = v56;
    v33[0] = v8;
    v33[1] = v8;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v38.i64, v33, (double *)v35.i64);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v39.i64, v33, (double *)v56.i64);
    v34[0] = v35;
    v34[1] = v56;
    operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v34, (double *)v52, (double *)v35.i64);
    v38 = v35;
    v39 = v36;
    v29 = *((_QWORD *)this + 73);
    v35.i64[0] = *((_QWORD *)this + 68);
    v35.i64[1] = v35.i64[0];
    v36.i64[0] = v29;
    v36.i64[1] = v29;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v38.i64, (double *)v35.i64);
    v30 = *((_QWORD *)this + 75);
    v35.i64[0] = *((_QWORD *)this + 71);
    v35.i64[1] = v35.i64[0];
    v36.i64[0] = v30;
    v36.i64[1] = v30;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)v38.i64, (double *)v35.i64);
    v31 = Interval::floatToPixel((double *)v38.i64);
    a4.var0 = (int)(float)((float)(int)v31 + -1.0);
    var1 = (int)(float)((float)SHIDWORD(v31) + -1.0);
  }
  return a4.var0 | (unint64_t)(var1 << 32);
}

double *PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  __int128 v5;

  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1, a2, (double *)&v5);
  *(_OWORD *)a1 = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 2, a2 + 2, (double *)&v5);
  *((_OWORD *)a1 + 1) = v5;
  return a1;
}

double *PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  int v4;
  double v5;
  int v6;
  double v7;

  v4 = fegetround();
  fesetround(0x400000);
  v5 = a1[1] + a2[1];
  *a1 = -(-*a1 - *a2);
  a1[1] = v5;
  fesetround(v4);
  v6 = fegetround();
  fesetround(0x400000);
  v7 = a1[3] + a2[3];
  a1[2] = -(-a1[2] - a2[2]);
  a1[3] = v7;
  fesetround(v6);
  return a1;
}

uint64_t Interval::length<double>@<X0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double v4;
  double v5;
  double v7[2];
  double v8[2];
  double v9[2];
  double v10[2];
  double v11[2];
  double v12[2];
  double v13[2];

  v2 = a1;
  v4 = a1[1];
  v11[0] = *a1;
  v11[1] = v4;
  v10[0] = v11[0];
  v10[1] = v4;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v11, v10, v12);
  v5 = v2[3];
  v8[0] = v2[2];
  v8[1] = v5;
  v7[0] = v8[0];
  v7[1] = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v8, v7, v9);
  LODWORD(v2) = fegetround();
  fesetround(0x400000);
  v13[0] = -v12[0] - v9[0];
  v13[0] = -v13[0];
  v13[1] = v12[1] + v9[1];
  fesetround((int)v2);
  return boost::numeric::sqrt<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v13, a2);
}

double *Interval::normalized<double>@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  int v29;
  double v30;
  int v31;
  int v32;
  int v33;

  v4 = *result;
  v3 = result[1];
  v6 = result[2];
  v5 = result[3];
  if (*result <= 0.0)
  {
    if (v3 < 0.0)
    {
      if (v6 > 0.0)
      {
        v14 = sqrt(v4 * v4 + v6 * v6);
        goto LABEL_10;
      }
      if (v5 < 0.0)
      {
        v7 = v4 * v4;
        goto LABEL_3;
      }
      v14 = sqrt(v3 * v3 + v6 * v6);
      v15 = sqrt(v3 * v3 + v5 * v5);
      v27 = v3 / v14;
      v28 = v3 / v15;
      if (v27 >= v28)
        v11 = v27;
      else
        v11 = v28;
      if (v11 < -1.0)
        boost::numeric::interval_lib::exception_create_empty::operator()();
      v33 = fegetround();
      fesetround(0x400000);
      v30 = 1.0;
      result = (double *)fesetround(v33);
LABEL_44:
      v10 = -v30;
LABEL_45:
      v12 = v6 / v14;
      v13 = v5 / v15;
      goto LABEL_46;
    }
    if (v6 <= 0.0)
    {
      if (v5 >= 0.0)
      {
        v31 = fegetround();
        fesetround(0x400000);
        v11 = 1.0;
        fesetround(v31);
        v32 = fegetround();
        fesetround(0x400000);
        v20 = 1.0;
        v13 = 1.0;
        result = (double *)fesetround(v32);
        v10 = -1.0;
        goto LABEL_42;
      }
      v24 = sqrt(v4 * v4 + v5 * v5);
      v25 = sqrt(v3 * v3 + v5 * v5);
      v10 = v4 / v24;
      v11 = v3 / v25;
      if (v4 / v24 > v3 / v25)
        boost::numeric::interval_lib::exception_create_empty::operator()();
      if (v5 / v24 <= v5 / v25)
        v13 = v5 / v24;
      else
        v13 = v5 / v25;
      if (v13 >= -1.0)
      {
        v26 = fegetround();
        fesetround(0x400000);
        v20 = 1.0;
        result = (double *)fesetround(v26);
        goto LABEL_42;
      }
    }
    else
    {
      v16 = sqrt(v4 * v4 + v6 * v6);
      v17 = sqrt(v3 * v3 + v6 * v6);
      v10 = v4 / v16;
      v11 = v3 / v17;
      if (v4 / v16 > v3 / v17)
        boost::numeric::interval_lib::exception_create_empty::operator()();
      if (v6 / v16 <= v6 / v17)
        v18 = v6 / v16;
      else
        v18 = v6 / v17;
      if (v18 <= 1.0)
      {
        v19 = fegetround();
        fesetround(0x400000);
        v20 = -v18;
        v13 = 1.0;
        result = (double *)fesetround(v19);
LABEL_42:
        v12 = -v20;
        goto LABEL_48;
      }
    }
LABEL_47:
    boost::numeric::interval_lib::exception_create_empty::operator()();
  }
  v7 = v4 * v4;
  if (v6 <= 0.0)
  {
    v14 = sqrt(v7 + v6 * v6);
    if (v5 < 0.0)
    {
LABEL_10:
      v15 = sqrt(v3 * v3 + v5 * v5);
      v10 = v4 / v14;
      v11 = v3 / v15;
      if (v4 / v14 <= v3 / v15)
        goto LABEL_45;
LABEL_26:
      boost::numeric::interval_lib::exception_create_empty::operator()();
    }
    v15 = sqrt(v7 + v5 * v5);
    v21 = v4 / v14;
    v22 = v4 / v15;
    if (v21 <= v22)
      v23 = v21;
    else
      v23 = v22;
    if (v23 > 1.0)
      goto LABEL_26;
    v29 = fegetround();
    fesetround(0x400000);
    v30 = -v23;
    v11 = 1.0;
    result = (double *)fesetround(v29);
    goto LABEL_44;
  }
LABEL_3:
  v8 = sqrt(v7 + v5 * v5);
  v9 = sqrt(v3 * v3 + v6 * v6);
  v10 = v4 / v8;
  v11 = v3 / v9;
  if (v4 / v8 > v3 / v9)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v12 = v6 / v9;
  v13 = v5 / v8;
LABEL_46:
  if (v12 > v13)
    goto LABEL_47;
LABEL_48:
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  return result;
}

double *PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  __int128 v5;

  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1, a2, (double *)&v5);
  *(_OWORD *)a1 = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 2, a2, (double *)&v5);
  *((_OWORD *)a1 + 1) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 4, a2, (double *)&v5);
  *((_OWORD *)a1 + 2) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 6, a2, (double *)&v5);
  *((_OWORD *)a1 + 3) = v5;
  return a1;
}

{
  __int128 v5;

  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1, a2, (double *)&v5);
  *(_OWORD *)a1 = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 2, a2 + 2, (double *)&v5);
  *((_OWORD *)a1 + 1) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 4, a2 + 4, (double *)&v5);
  *((_OWORD *)a1 + 2) = v5;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(a1 + 6, a2 + 6, (double *)&v5);
  *((_OWORD *)a1 + 3) = v5;
  return a1;
}

double *PCVector4<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  int v4;
  double v5;
  int v6;
  double v7;
  int v8;
  double v9;
  int v10;
  double v11;

  v4 = fegetround();
  fesetround(0x400000);
  v5 = a1[1] + a2[1];
  *a1 = -(-*a1 - *a2);
  a1[1] = v5;
  fesetround(v4);
  v6 = fegetround();
  fesetround(0x400000);
  v7 = a1[3] + a2[3];
  a1[2] = -(-a1[2] - a2[2]);
  a1[3] = v7;
  fesetround(v6);
  v8 = fegetround();
  fesetround(0x400000);
  v9 = a1[5] + a2[5];
  a1[4] = -(-a1[4] - a2[4]);
  a1[5] = v9;
  fesetround(v8);
  v10 = fegetround();
  fesetround(0x400000);
  v11 = a1[7] + a2[7];
  a1[6] = -(-a1[6] - a2[6]);
  a1[7] = v11;
  fesetround(v10);
  return a1;
}

double operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double result;

  v6 = fegetround();
  fesetround(0x400000);
  v7 = a2[1] - *a1;
  v8 = a1[1] - *a2;
  fesetround(v6);
  v9 = fegetround();
  fesetround(0x400000);
  v10 = a2[3] - a1[2];
  v11 = a1[3] - a2[2];
  fesetround(v9);
  v12 = fegetround();
  fesetround(0x400000);
  v13 = a2[5] - a1[4];
  v14 = a1[5] - a2[4];
  fesetround(v12);
  v15 = fegetround();
  fesetround(0x400000);
  v16 = a2[7] - a1[6];
  v17 = a1[7] - a2[6];
  fesetround(v15);
  result = -v16;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v10;
  a3[3] = v11;
  a3[4] = -v13;
  a3[5] = v14;
  a3[6] = -v16;
  a3[7] = v17;
  return result;
}

{
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double result;

  v6 = fegetround();
  fesetround(0x400000);
  v7 = a2[1] - *a1;
  v8 = a1[1] - *a2;
  fesetround(v6);
  v9 = fegetround();
  fesetround(0x400000);
  v10 = a2[3] - a1[2];
  v11 = a1[3] - a2[2];
  fesetround(v9);
  result = -v10;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v10;
  a3[3] = v11;
  return result;
}

double Interval::smoothstep@<D0>(float64x2_t *a1@<X0>, _OWORD *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t v5;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int8x16_t v9;
  float64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  __int128 v35;
  double result;
  __int128 v37;
  float64x2_t v38;
  _OWORD v39[4];
  __int128 v40;
  double v41;
  double v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  double v48[2];
  double v49[2];
  double v50[2];
  double v51[2];
  double v52[8];
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60[4];

  *(double *)&v5 = a3;
  *(double *)&v6 = (float)(a4 - a3);
  v7 = (float64x2_t)vdupq_lane_s64(v5, 0);
  v8 = (float64x2_t)vdupq_lane_s64(v6, 0);
  v9 = (int8x16_t)vdivq_f64(vsubq_f64(*a1, v7), v8);
  __asm { FMOV            V7.2D, #1.0 }
  v15 = (float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v9, (float64x2_t)_Q7), _Q7, v9), (int8x16_t)vcltzq_f64((float64x2_t)v9));
  v16 = (int8x16_t)vdivq_f64(vsubq_f64(a1[1], v7), v8);
  v17 = (float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v16, (float64x2_t)_Q7), _Q7, v16), (int8x16_t)vcltzq_f64((float64x2_t)v16));
  v18 = (int8x16_t)vdivq_f64(vsubq_f64(a1[2], v7), v8);
  v19 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v18, (float64x2_t)_Q7), _Q7, v18);
  v20 = (int8x16_t)vcltzq_f64((float64x2_t)v18);
  v21 = (int8x16_t)vdivq_f64(vsubq_f64(a1[3], v7), v8);
  v22 = (int8x16_t)vcgtq_f64((float64x2_t)v21, (float64x2_t)_Q7);
  v38 = v15;
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1), v15))).u8[0] & 1) != 0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v23 = (int8x16_t)vcltzq_f64((float64x2_t)v21);
  v24 = vbslq_s8(v22, _Q7, v21);
  v25 = (float64x2_t)vbicq_s8(v19, v20);
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1), v17))).u8[0] & 1) != 0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v26 = (float64x2_t)vbicq_s8(v24, v23);
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25))).u8[0] & 1) != 0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1), v26))).u8[0] & 1) != 0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v53 = v38;
  v54 = v17;
  v55 = v25;
  v56 = v26;
  v27 = fegetround();
  fesetround(0x400000);
  fesetround(v27);
  v28 = fegetround();
  fesetround(0x400000);
  fesetround(v28);
  v29 = fegetround();
  fesetround(0x400000);
  fesetround(v29);
  v30 = fegetround();
  fesetround(0x400000);
  fesetround(v30);
  v52[0] = --3.0;
  v52[1] = 3.0;
  v52[2] = --3.0;
  v52[3] = 3.0;
  v52[4] = --3.0;
  v52[5] = 3.0;
  v52[6] = --3.0;
  v52[7] = 3.0;
  v31 = fegetround();
  fesetround(0x400000);
  fesetround(v31);
  v32 = fegetround();
  fesetround(0x400000);
  fesetround(v32);
  v33 = fegetround();
  fesetround(0x400000);
  fesetround(v33);
  v34 = fegetround();
  fesetround(0x400000);
  fesetround(v34);
  v48[0] = --2.0;
  v48[1] = 2.0;
  v49[0] = --2.0;
  v49[1] = 2.0;
  v50[0] = --2.0;
  v50[1] = 2.0;
  v51[0] = --2.0;
  v51[1] = 2.0;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v53.f64, v53.f64, (double *)&v40);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v54.f64, v54.f64, (double *)v39);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v55.f64, v55.f64, v60);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v56.f64, v56.f64, (double *)&v59);
  v44 = v40;
  v45 = v39[0];
  v46 = *(_OWORD *)v60;
  v47 = v59;
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v48, v53.f64, (double *)&v40);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v49, v54.f64, v60);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v50, v55.f64, (double *)&v59);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v51, v56.f64, (double *)&v58);
  v39[0] = v40;
  v39[1] = *(_OWORD *)v60;
  v39[2] = v59;
  v39[3] = v58;
  operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v52, (double *)v39, (double *)&v40);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v44, (double *)&v40, v60);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v45, &v41, (double *)&v59);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v46, &v42, (double *)&v58);
  boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v47, &v43, (double *)&v57);
  v35 = v59;
  *a2 = *(_OWORD *)v60;
  a2[1] = v35;
  v37 = v57;
  result = *(double *)&v58;
  a2[2] = v58;
  a2[3] = v37;
  return result;
}

double operator+<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double result;

  v6 = fegetround();
  fesetround(0x400000);
  v7 = -*a1 - *a2;
  v8 = a1[1] + a2[1];
  fesetround(v6);
  v9 = fegetround();
  fesetround(0x400000);
  v10 = -a1[2] - a2[2];
  v11 = a1[3] + a2[3];
  fesetround(v9);
  result = -v10;
  *a3 = -v7;
  a3[1] = v8;
  a3[2] = -v10;
  a3[3] = v11;
  return result;
}

uint64_t HDroplet::GetOutput(HDroplet *this, HGRenderer *a2)
{
  if ((*(unsigned int (**)(HGRenderer *))(*(_QWORD *)a2 + 304))(a2))
    (*(void (**)(HDroplet *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  return HgcDroplet::GetOutput(this, a2);
}

uint64_t HDroplet::SetOutputToImage(double *a1, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1 + 52;
  if (a1 + 52 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  v6 = *a2;
  v7 = a2[5];
  v8 = a2[3];
  v9 = a2[7];
  return (*(uint64_t (**)(double *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v6, v7, v8, v9);
}

uint64_t HDroplet::SetImageToInput(double *a1, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = a1 + 68;
  if (a1 + 68 != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        v2[i] = v4[i];
      ++v3;
      v2 += 4;
      v4 += 4;
    }
    while (v3 != 4);
  }
  v6 = *a2;
  v7 = a2[5];
  v8 = a2[3];
  v9 = a2[7];
  return (*(uint64_t (**)(double *, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 1, v6, v7, v8, v9);
}

uint64_t HDroplet::SetBiasThicknessAndScale(HDroplet *this, double a2, double a3, double a4)
{
  float v4;
  float v5;
  float v6;

  *((double *)this + 84) = a2;
  *((double *)this + 85) = a3;
  *((double *)this + 86) = a4;
  v4 = 1.0 / a3;
  v5 = -a2 / a3;
  v6 = a4;
  return (*(uint64_t (**)(HDroplet *, uint64_t, float, float, float, float))(*(_QWORD *)this + 96))(this, 2, v4, v5, v6, 0.0);
}

void HDroplet::~HDroplet(HGNode *this)
{
  void *v1;

  HgcDroplet::~HgcDroplet(this);
  HGObject::operator delete(v1);
}

uint64_t boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;

  v6 = fegetround();
  fesetround(0x400000);
  v8 = *a1;
  v7 = a1[1];
  if (*a1 >= 0.0)
  {
    if (v7 > 0.0)
    {
      v17 = *a2;
      v9 = a2[1];
      if (*a2 < 0.0)
      {
        v18 = -(v17 * v7);
        if (v9 <= 0.0)
        {
          v25 = -v18;
          v26 = v8 * v9;
          goto LABEL_30;
        }
        v28 = v18;
        goto LABEL_23;
      }
      if (v9 > 0.0)
      {
        v22 = -(v17 * v8);
        goto LABEL_22;
      }
    }
LABEL_27:
    *a3 = 0.0;
    a3[1] = 0.0;
    return fesetround(v6);
  }
  v10 = *a2;
  v9 = a2[1];
  if (v7 <= 0.0)
  {
    if (v10 < 0.0)
    {
      v19 = -v9;
      v20 = v8 * v10;
      if (v9 <= 0.0)
        v21 = v7 * v19;
      else
        v21 = v8 * v19;
      v25 = -v21;
      v29 = v20;
      goto LABEL_33;
    }
    if (v9 > 0.0)
    {
      v23 = --(v9 * v8);
      v24 = v7 * v10;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (v10 >= 0.0)
  {
    if (v9 > 0.0)
    {
      v22 = -(v9 * v8);
LABEL_22:
      v28 = v22;
LABEL_23:
      v23 = -v28;
      v24 = v7 * v9;
LABEL_26:
      *a3 = v23;
      a3[1] = v24;
      return fesetround(v6);
    }
    goto LABEL_27;
  }
  if (v9 <= 0.0)
  {
    v25 = --(v10 * v7);
    v26 = v8 * v10;
LABEL_30:
    v29 = v26;
LABEL_33:
    *a3 = v25;
    a3[1] = v29;
    return fesetround(v6);
  }
  v11 = -(v9 * v8);
  v12 = -(v10 * v7);
  v13 = v8 * v10;
  v14 = v7 * v9;
  if (v12 <= v11)
    v15 = v11;
  else
    v15 = v12;
  v16 = -v15;
  if (v13 >= v14)
    v14 = v13;
  *a3 = v16;
  a3[1] = v14;
  return fesetround(v6);
}

uint64_t boost::numeric::sqrt<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *a1@<X0>, double *a2@<X8>)
{
  int v4;
  double v5;
  double v7;

  if (a1[1] < 0.0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v4 = fegetround();
  fesetround(0x400000);
  v5 = 0.0;
  if (*a1 > 0.0)
  {
    fesetround(0x800000);
    v5 = sqrt(*a1);
    fesetround(0x400000);
  }
  v7 = sqrt(a1[1]);
  *a2 = v5;
  a2[1] = v7;
  return fesetround(v4);
}

void sub_1B2850D68(_Unwind_Exception *a1)
{
  int v1;

  fesetround(v1);
  _Unwind_Resume(a1);
}

uint64_t HConcentricCirclesGradient::GetROI(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return 0;
  else
    return -1;
}

void HConcentricCirclesGradient::~HConcentricCirclesGradient(HGNode *this)
{
  void *v1;

  HgcConcentricCirclesGradient::~HgcConcentricCirclesGradient(this);
  HGObject::operator delete(v1);
}

unint64_t HSlicedScale::GetDOD(HSlicedScale *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    (*(void (**)(HSlicedScale *, uint64_t, float *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 5, &v61, *(_QWORD *)&a4.var0, *(_QWORD *)&a4.var2);
    v50 = v62;
    v51 = v61;
    v57 = v64;
    v58 = v63;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 6, &v61);
    v46 = v61;
    v47 = v62;
    v54 = v64;
    v55 = v63;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 7, &v61);
    v48 = v61;
    v53 = v62;
    v56 = v63;
    v60 = v64;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 8, &v61);
    v49 = v61;
    v45 = v62;
    v52 = v63;
    v59 = v64;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 10, &v61);
    v43 = v61;
    v44 = v62;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 9, &v61);
    v7 = v61;
    v8 = v62;
    (*(void (**)(HSlicedScale *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v61);
    v9 = v61;
    v10 = v62;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v61);
    v11 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v61);
    v12 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v61);
    v13 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, &v61);
    v14 = v61;
    (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 11, &v61);
    v15 = 0.5 - v61;
    if (v11 <= (float)(0.5 - v61))
      v16 = v11;
    else
      v16 = 0.5 - v61;
    if (v13 <= v15)
      v15 = v13;
    v17 = v61 + -0.5;
    if (v12 >= (float)(v61 + -0.5))
      v18 = v12;
    else
      v18 = v61 + -0.5;
    if (v14 >= v17)
      v17 = v14;
    v19 = (float)*((int *)this + 104);
    v20 = (float)*((int *)this + 105);
    v21 = (float)(v48
                * (float)((float)(v57 + (float)((float)(v58 * 0.0) + (float)((float)(v51 * v19) + (float)(v50 * v20))))
                        / v7))
        - (float)(v18 - (float)(v9 * v18));
    v22 = (float)(v45
                * (float)((float)(v54 + (float)((float)(v55 * 0.0) + (float)((float)(v46 * v19) + (float)(v47 * v20))))
                        / v8))
        - (float)(v17 - (float)(v10 * v17));
    v23 = v43;
    if (v9 > v61)
      v23 = 1.0;
    v24 = v23 * v21;
    v25 = v44;
    if (v10 > v61)
      v25 = 1.0;
    v26 = v51 * (float)(v7 * v24);
    v27 = v47 * (float)(v8 * (float)(v25 * v22));
    v28 = (float)(v48 * v26) + (float)(v53 * v27);
    v29 = (float)*((int *)this + 106);
    v30 = (float)(v49 * v26) + (float)(v45 * v27);
    v31 = (float)*((int *)this + 107);
    v32 = v51
        * (float)(v7
                * (float)(v23
                        * (float)((float)((float)(v9 * v16) - v16)
                                + (float)(v48
                                        * (float)((float)(v57
                                                        + (float)((float)(v58 * 0.0)
                                                                + (float)((float)(v51 * v29) + (float)(v50 * v31))))
                                                / v7)))));
    v33 = v47
        * (float)(v8
                * (float)(v25
                        * (float)((float)((float)(v10 * v15) - v15)
                                + (float)(v45
                                        * (float)((float)(v54
                                                        + (float)((float)(v55 * 0.0)
                                                                + (float)((float)(v46 * v29) + (float)(v47 * v31))))
                                                / v8)))));
    v4 = HGRectMake4i(vcvtmd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + v28)) + -1.0 + 0.0000001), vcvtmd_s64_f64((float)(v59 + (float)((float)(v52 * 0.0) + v30)) + -1.0 + 0.0000001), vcvtpd_s64_f64((float)(v60 + (float)((float)(v56 * 0.0) + (float)((float)(v48 * v32) + (float)(v53 * v33)))) + 1.0), vcvtpd_s64_f64((float)(v59 + (float)((float)(v52 * 0.0) + (float)((float)(v49 * v32) + (float)(v45 * v33)))) + 1.0));
    v5 = HIDWORD(v4);
    if ((v4 - 0x7FFFFFFF) < 3
      || v34 == 0x7FFFFFFF
      || v34 < -2147483646
      || (HIDWORD(v4) - 0x7FFFFFFF) < 3
      || v35 == 0x7FFFFFFF
      || v35 < -2147483646)
    {
      LODWORD(v4) = 0;
      LODWORD(v5) = 0;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

unint64_t HSlicedScale::GetROI(HSlicedScale *this, HGRenderer *a2, int a3, HGRect a4)
{
  unint64_t v4;
  unint64_t v5;
  int var2;
  int var0;
  int var3;
  int var1;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  int v47;
  int v48;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
    return v4 | ((unint64_t)v5 << 32);
  }
  var2 = a4.var2;
  var0 = a4.var0;
  var3 = a4.var3;
  var1 = a4.var1;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 5, &v75);
  v64 = v76;
  v65 = v75;
  v67 = v77;
  v62 = v78;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 6, &v75);
  v63 = v75;
  v66 = v77;
  v59 = v78;
  v60 = v76;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 7, &v75);
  v61 = v75;
  v70 = v77;
  v73 = v76;
  v74 = v78;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 8, &v75);
  v58 = v76;
  v69 = v77;
  v71 = v75;
  v72 = v78;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 10, &v75);
  v56 = v76;
  v57 = v75;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 9, &v75);
  v12 = v75;
  v11 = v76;
  (*(void (**)(HSlicedScale *, _QWORD, float *))(*(_QWORD *)this + 104))(this, 0, &v75);
  v14 = v75;
  v13 = v76;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v75);
  v15 = v75;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 2, &v75);
  v16 = v75;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 3, &v75);
  v17 = v75;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 4, &v75);
  v18 = v75;
  (*(void (**)(HSlicedScale *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 11, &v75);
  v19 = 0.5 - v75;
  if (v15 <= (float)(0.5 - v75))
    v20 = v15;
  else
    v20 = 0.5 - v75;
  if (v17 <= v19)
    v19 = v17;
  if (v16 >= (float)(v75 + -0.5))
    v21 = v16;
  else
    v21 = v75 + -0.5;
  if (v18 >= (float)(v75 + -0.5))
    v22 = v18;
  else
    v22 = v75 + -0.5;
  v23 = v67 * 0.0;
  v24 = (float)(v61
              * (float)((float)(v62
                              + (float)((float)((float)(v65 * (float)var0) + (float)(v64 * (float)var1))
                                      + (float)(v67 * 0.0)))
                      / v12))
      / v57;
  v25 = (float)(v58
              * (float)((float)(v59
                              + (float)((float)((float)(v63 * (float)var0) + (float)(v60 * (float)var1))
                                      + (float)(v66 * 0.0)))
                      / v11))
      / v56;
  v26 = v14 * v20;
  v68 = v14;
  v27 = v14 * v21;
  v28 = v13 * v19;
  v29 = v13 * v22;
  v30 = v21 - (float)(v14 * v21);
  if (v24 >= (float)(v14 * v20))
  {
    v31 = v24 - (float)(v26 - v20);
  }
  else
  {
    if (v24 > v27)
    {
      v31 = 0.0;
      v32 = v73;
      v33 = v71;
      if (v24 < v26)
        v31 = v24 / v68;
      goto LABEL_21;
    }
    v31 = v24 + v30;
  }
  v32 = v73;
  v33 = v71;
LABEL_21:
  v34 = (float)var2;
  v35 = (float)var3;
  v36 = v22 - v29;
  if (v25 >= v28)
  {
    v37 = v25 - (float)(v28 - v19);
  }
  else if (v25 <= v29)
  {
    v37 = v25 + v36;
  }
  else
  {
    v37 = 0.0;
    if (v25 < v28)
      v37 = v25 / v13;
  }
  v38 = v65 * (float)(v12 * v31);
  v39 = v60 * (float)(v11 * v37);
  v40 = (float)(v70 * 0.0) + (float)((float)(v61 * v38) + (float)(v32 * v39));
  v41 = (float)(v69 * 0.0) + (float)((float)(v33 * v38) + (float)(v58 * v39));
  v42 = (float)(v61 * (float)((float)(v62 + (float)((float)((float)(v65 * v34) + (float)(v64 * v35)) + v23)) / v12))
      / v57;
  v43 = (float)(v58
              * (float)((float)(v59 + (float)((float)((float)(v63 * v34) + (float)(v60 * v35)) + (float)(v66 * 0.0)))
                      / v11))
      / v56;
  if (v42 >= v26)
  {
    v45 = v42 - (float)(v26 - v20);
    v44 = v72;
  }
  else
  {
    v44 = v72;
    if (v42 <= v27)
    {
      v45 = v42 + v30;
    }
    else
    {
      v45 = 0.0;
      if (v42 < v26)
        v45 = v42 / v68;
    }
  }
  if (v43 >= v28)
  {
    v46 = v43 - (float)(v28 - v19);
  }
  else if (v43 <= v29)
  {
    v46 = v43 + v36;
  }
  else
  {
    v46 = 0.0;
    if (v43 < v28)
      v46 = v43 / v13;
  }
  v4 = HGRectMake4i(vcvtmd_s64_f64((float)(v74 + v40) + -1.0 + 0.0000001), vcvtmd_s64_f64((float)(v44 + v41) + -1.0 + 0.0000001), vcvtpd_s64_f64((float)(v74+ (float)((float)(v70 * 0.0)+ (float)((float)(v61 * (float)(v65 * (float)(v12 * v45)))+ (float)(v32 * (float)(v60 * (float)(v11 * v46))))))+ 1.0), vcvtpd_s64_f64((float)(v44+ (float)((float)(v69 * 0.0)+ (float)((float)(v33 * (float)(v65 * (float)(v12 * v45)))+ (float)(v58 * (float)(v60 * (float)(v11 * v46))))))+ 1.0));
  v5 = HIDWORD(v4);
  if ((v4 - 0x7FFFFFFF) < 3
    || v47 == 0x7FFFFFFF
    || v47 < -2147483646
    || (HIDWORD(v4) - 0x7FFFFFFF) < 3
    || v48 == 0x7FFFFFFF
    || v48 < -2147483646)
  {
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void HSlicedScale::~HSlicedScale(HGNode *this)
{
  void *v1;

  HgcSlicedScale::~HgcSlicedScale(this);
  HGObject::operator delete(v1);
}

void sub_1B2851B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B28522A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);
  _Unwind_Resume(exception_object);
}

void sub_1B2852918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B2852E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  HGObject::operator delete(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

void sub_1B2854004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *v29;

  HGObject::operator delete(v29);
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  _Unwind_Resume(a1);
}

void sub_1B28548A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(a1);
}

CGColorSpace **convertRGBColor(double *a1, double *a2, double *a3)
{
  float v6;
  float v7;
  float v8;
  CGColorSpace *v9;
  CGColorSpace *v10;
  float v12;
  uint64_t v13;
  PCColor v14;

  v6 = *a1;
  v7 = *a2;
  v8 = *a3;
  v9 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020);
  PCColor::PCColor(&v14, v6, v7, v8, v9);
  v13 = 0;
  v12 = 0.0;
  v10 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec709);
  PCColor::getRGB(&v14, (float *)&v13 + 1, (float *)&v13, &v12, v10);
  *a1 = *((float *)&v13 + 1);
  *a2 = *(float *)&v13;
  *a3 = v12;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v14.var1._obj);
}

void sub_1B2854A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1B2855590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v24;

  HGObject::operator delete(v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B2855CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B28568F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);
  _Unwind_Resume(exception_object);
}

void sub_1B2856C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B2856CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = &unk_1E64E3AC8;
  *(_QWORD *)(v10 + 32) = &unk_1E64E3B08;
  a10 = (void **)(v10 + 80);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B2856DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B285703C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B2857E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C40A88C75BALL);
  _Unwind_Resume(a1);
}

void sub_1B28586D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 144));
  *(_QWORD *)(v3 - 144) = v1;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 144));
  _Unwind_Resume(a1);
}

uint64_t cc::curve::aspline::offsetcolor_t<double>::~offsetcolor_t(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E64E3AC8;
  *(_QWORD *)(a1 + 32) = &unk_1E64E3B08;
  v3 = (void **)(a1 + 80);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_1E64E3AC8;
  *(_QWORD *)(a1 + 32) = &unk_1E64E3B08;
  v3 = (void **)(a1 + 80);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 8);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B5E29170](a1, 0x10A1C4008CDC881);
}

uint64_t `anonymous namespace'::NewCurve@<X0>(double a1@<D0>, double a2@<D1>, double a3@<D2>, uint64_t a4@<X8>)
{
  double **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  *(_QWORD *)(a4 + 8) = 0;
  v6 = (double **)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v7 = a4 + 24;
  *(_QWORD *)a4 = &unk_1E64E3AC8;
  *(_QWORD *)(a4 + 32) = &unk_1E64E3B08;
  *(double *)(a4 + 40) = a1;
  *(double *)(a4 + 48) = a2;
  *(double *)(a4 + 56) = a3;
  *(_QWORD *)(a4 + 80) = 0;
  v8 = (_QWORD *)(a4 + 80);
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = &unk_1E64E2650;
  *(_QWORD *)(a4 + 104) = &unk_1E64E2678;
  *(_QWORD *)(a4 + 112) = cc::curve::aspline::bezier_t<double,false>::evalNonPeriodic;
  *(_QWORD *)(a4 + 120) = 0;
  v87 = a4 + 24;
  v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(a4 + 24, 1uLL);
  v11 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &unk_1E64DA950;
  v13 = *(_QWORD *)(a4 + 8);
  v12 = *(_QWORD *)(a4 + 16);
  if (v12 == v13)
  {
    v15 = v9;
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = v9;
    do
    {
      *(v15 - 3) = &unk_1E64DA950;
      v15 -= 3;
      *(_OWORD *)(v15 + 1) = *(_OWORD *)(v14 - 16);
      v14 -= 24;
    }
    while (v14 != v13);
  }
  v16 = (char *)(v9 + 3);
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 16) = v9 + 3;
  v17 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = &v9[3 * v10];
  v85 = v12;
  v86 = v17;
  v83 = v13;
  v84 = v13;
  result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v83);
  v19 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = v16;
  if ((unint64_t)v16 >= v19)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (char *)*v6) >> 3);
    if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)*v6) >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= v21 + 1)
      v23 = v21 + 1;
    if (v22 >= 0x555555555555555)
      v24 = 0xAAAAAAAAAAAAAAALL;
    else
      v24 = v23;
    v87 = v7;
    v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v24);
    v27 = &v25[24 * v21];
    *(_QWORD *)v27 = &unk_1E64DA950;
    *(_OWORD *)(v27 + 8) = xmmword_1B304EED0;
    v29 = *(_QWORD *)(a4 + 8);
    v28 = *(_QWORD *)(a4 + 16);
    if (v28 == v29)
    {
      v31 = &v25[24 * v21];
    }
    else
    {
      v30 = *(_QWORD *)(a4 + 16);
      v31 = &v25[24 * v21];
      do
      {
        *((_QWORD *)v31 - 3) = &unk_1E64DA950;
        v31 -= 24;
        *(_OWORD *)(v31 + 8) = *(_OWORD *)(v30 - 16);
        v30 -= 24;
      }
      while (v30 != v29);
    }
    v20 = v27 + 24;
    *(_QWORD *)(a4 + 8) = v31;
    *(_QWORD *)(a4 + 16) = v27 + 24;
    v32 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = &v25[24 * v26];
    v85 = v28;
    v86 = v32;
    v83 = v29;
    v84 = v29;
    result = std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v83);
  }
  else
  {
    v11[3] = &unk_1E64DA950;
    *((_OWORD *)v11 + 2) = xmmword_1B304EED0;
    v20 = (char *)(v11 + 6);
  }
  *(_QWORD *)(a4 + 16) = v20;
  v33 = *(char **)(a4 + 8);
  v34 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v33) >> 3);
  if (v34 <= 1)
    return std::vector<cc::point_t<double,false,false>>::resize((uint64_t)v8, 4uLL);
  if (v34 <= 0x5555555555555554)
  {
    v35 = (double *)(v20 - 24);
    if (v20 - 24 == v33)
      v36 = (unint64_t)(v20 - 24);
    else
      v36 = (unint64_t)(v20 - 48);
    result = std::vector<cc::point_t<double,false,false>>::resize((uint64_t)v8, ((v20 - v33) >> 3) - 2);
    v37 = *v6;
    if (*v6 != v35)
    {
      v38 = 0;
      v39 = *v8 + 32;
      v40 = *v6;
      while (1)
      {
        v41 = v40[4];
        v42 = v40[5];
        v43 = v40[1];
        v44 = v40[2];
        v45 = v41 - v43;
        if (v41 - v43 < 0.0)
          v45 = -(v41 - v43);
        if (v45 < 0.0)
          v45 = -v45;
        v46 = v45 * 0.3334;
        v47 = v39 + v38;
        *(double *)(v47 - 24) = v43;
        *(double *)(v47 - 16) = v44;
        if (v38)
          break;
        if ((unint64_t)v40 < v36)
          goto LABEL_43;
        v52 = v41 - v40[1];
        v53 = v42 - v40[2];
LABEL_45:
        v60 = -v52;
        if (v52 >= 0.0)
          v60 = v52;
        v61 = v53 / v52;
        if (v60 < 0.00000011920929)
          v61 = 0.0;
        v62 = v41 - v46;
        v63 = v42 - v46 * v61;
        v64 = (double *)(v39 + v38);
        v64[3] = v62;
        v64[4] = v63;
        if (!v38)
        {
          v65 = v62 - v40[1];
          v66 = v63 - v40[2];
          v67 = -v65;
          if (v65 >= 0.0)
            v67 = v65;
          v68 = v66 / v65;
          if (v67 < 0.00000011920929)
            v68 = 0.0;
          *v64 = v46 + v43;
          v64[1] = v44 + v46 * v68;
        }
        v40 += 3;
        v38 += 72;
        if (v40 == v35)
          goto LABEL_56;
      }
      v48 = *(v40 - 1);
      v49 = v40[2];
      if (v42 - v49 < 0.0 != v48 - v49 >= 0.0)
      {
        v50 = v40[1];
        v51 = v46 * 0.0 + v49;
        *(double *)(v39 + v38 - 40) = v51;
      }
      else
      {
        v54 = v41 - *(v40 - 2);
        v55 = -v54;
        if (v54 >= 0.0)
          v55 = v41 - *(v40 - 2);
        v56 = (v42 - v48) / v54;
        if (v55 < 0.00000011920929)
          v56 = 0.0;
        v57 = v46 * v56;
        v50 = v40[1];
        v51 = v49 + v57;
      }
      v58 = v46 + v50;
      v59 = (double *)(v39 + v38);
      *v59 = v58;
      v59[1] = v51;
      if ((unint64_t)v40 >= v36)
      {
        v52 = v41 - v58;
        v53 = v42 - v51;
        goto LABEL_45;
      }
LABEL_43:
      v52 = v40[7] - v40[1];
      v53 = v40[8] - v40[2];
      goto LABEL_45;
    }
LABEL_56:
    *(_OWORD *)(*(_QWORD *)(a4 + 88) - 16) = *((_OWORD *)v20 - 1);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - (_QWORD)v37) >> 3) >= 3 && v37 != v35)
    {
      v70 = 0;
      v71 = (double *)(*v8 + 64);
      do
      {
        v72 = v37[v70 + 5];
        v73 = v37[v70 + 2];
        v74 = v37[v70 + 4] - v37[v70 + 1];
        v75 = -v74;
        if (v74 >= 0.0)
          v75 = v37[v70 + 4] - v37[v70 + 1];
        v76 = v72 - v73;
        v77 = -(v72 - v73);
        if (v76 >= 0.0)
          v77 = v76;
        v78 = 1.0;
        if (v77 > 0.00000011920929)
        {
          v78 = 0.0;
          if (v75 > 0.00000011920929)
          {
            v79 = v77 / v75 * -3.0 + 1.0;
            if (v79 >= 0.0)
            {
              v78 = 1.0;
              if (v79 <= 1.0)
                v78 = v79;
            }
          }
        }
        v80 = v78 * *(v71 - 6);
        v81 = 1.0 - v78;
        *(v71 - 3) = v80 + (1.0 - v78) * *(v71 - 3);
        v82 = v78 * v71[3];
        *v71 = v82 + v81 * *v71;
        if (&v37[v70] != (double *)v36)
          v71[6] = v82 + v81 * v71[6];
        if (v70 * 8)
          *(v71 - 9) = v80 + v81 * *(v71 - 9);
        v70 += 3;
        v71 += 9;
      }
      while (&v37[v70] != v35);
    }
  }
  return result;
}

void sub_1B2858D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  *v6 = v7 + 16;
  v6[4] = v7 + 80;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *cc::curve::aspline::offsetcolor_t<double>::insertPointIsolation(_QWORD *result, unint64_t *a2, __n128 a3, __n128 a4, __n128 a5)
{
  double v5;
  double v6;
  _QWORD *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v40;
  double v41;
  double v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  double *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v64;
  double v65;
  double v66;
  double v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  double *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t i;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double *v90;
  unint64_t v91;
  _QWORD *v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double *v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double *v120;
  double v121;
  double v122;
  double v123;
  double v124;
  uint64_t v126;
  double *v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;

  v5 = a5.n128_f64[0];
  v6 = a4.n128_f64[0];
  v8 = result;
  v9 = 1.0;
  if (a3.n128_f64[0] <= 1.0)
    v9 = a3.n128_f64[0];
  if (a3.n128_f64[0] >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  v139 = v10;
  v11 = result[1];
  v12 = result[2];
  v13 = (char **)(result + 1);
  if (v11 == v12)
  {
LABEL_18:
    a3.n128_f64[0] = (*(double (**)(_QWORD *, double *))(*result + 24))(result, &v139);
    a4.n128_u64[0] = v8[8];
    v18 = a3.n128_f64[0] - a4.n128_f64[0];
    v19 = v139;
    result = a2 + 2;
    v20 = a2[2];
    v21 = a2[1];
    if (v21 >= v20)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a2) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_161;
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a2) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      v144 = a2 + 2;
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)result, v26);
      v29 = (double *)&v27[24 * v23];
      *(_QWORD *)v29 = &unk_1E64DA950;
      v29[1] = v19;
      v29[2] = v18;
      v31 = *a2;
      v30 = a2[1];
      if (v30 == *a2)
      {
        v33 = &v27[24 * v23];
      }
      else
      {
        v32 = a2[1];
        v33 = &v27[24 * v23];
        do
        {
          *((_QWORD *)v33 - 3) = &unk_1E64DA950;
          v33 -= 24;
          *(_OWORD *)(v33 + 8) = *(_OWORD *)(v32 - 16);
          v32 -= 24;
        }
        while (v32 != v31);
      }
      v22 = (char *)(v29 + 3);
      *a2 = (unint64_t)v33;
      a2[1] = (unint64_t)(v29 + 3);
      v34 = a2[2];
      a2[2] = (unint64_t)&v27[24 * v28];
      v142 = v30;
      v143 = v34;
      v140 = v31;
      v141 = v31;
      result = (_QWORD *)std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v140);
      v19 = v139;
    }
    else
    {
      *(_QWORD *)v21 = &unk_1E64DA950;
      *(double *)(v21 + 8) = v19;
      *(double *)(v21 + 16) = v18;
      v22 = (char *)(v21 + 24);
    }
    a2[1] = (unint64_t)v22;
  }
  else
  {
    v14 = v10 - a5.n128_f64[0];
    a4.n128_f64[0] = v10 + a5.n128_f64[0];
    a5.n128_f64[0] = v10 - v10;
    if (v10 - v10 < 0.0)
      a5.n128_f64[0] = -(v10 - v10);
    while (1)
    {
      v15 = *(double *)(v11 + 8);
      if (v15 > v14 && v15 < a4.n128_f64[0])
        break;
      if (v15 >= 0.0)
      {
        v17 = v15 - v10;
        if (v17 < 0.0)
          v17 = -v17;
        if (v17 <= a5.n128_f64[0])
          break;
      }
      v11 += 24;
      if (v11 == v12)
        goto LABEL_18;
    }
    v19 = v10;
  }
  a3.n128_f64[0] = v19 - v6;
  v139 = v19 - v6;
  if (v19 - v6 > 0.0)
  {
    v35 = v8[1];
    v36 = v8[2];
    if (v35 == v36)
    {
LABEL_50:
      v42 = (*(double (**)(_QWORD *, double *, __n128, __n128, __n128))(*v8 + 24))(v8, &v139, a3, a4, a5)
          - *((double *)v8 + 8);
      v43 = v139;
      result = a2 + 2;
      v44 = a2[2];
      v45 = a2[1];
      if (v45 >= v44)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - *a2) >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_161;
        v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *a2) >> 3);
        if (2 * v49 > v48)
          v48 = 2 * v49;
        if (v49 >= 0x555555555555555)
          v50 = 0xAAAAAAAAAAAAAAALL;
        else
          v50 = v48;
        v144 = a2 + 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)result, v50);
        v53 = (double *)&v51[24 * v47];
        *(_QWORD *)v53 = &unk_1E64DA950;
        v53[1] = v43;
        v53[2] = v42;
        v55 = *a2;
        v54 = a2[1];
        if (v54 == *a2)
        {
          v57 = &v51[24 * v47];
        }
        else
        {
          v56 = a2[1];
          v57 = &v51[24 * v47];
          do
          {
            *((_QWORD *)v57 - 3) = &unk_1E64DA950;
            v57 -= 24;
            *(_OWORD *)(v57 + 8) = *(_OWORD *)(v56 - 16);
            v56 -= 24;
          }
          while (v56 != v55);
        }
        v46 = (char *)(v53 + 3);
        *a2 = (unint64_t)v57;
        a2[1] = (unint64_t)(v53 + 3);
        v58 = a2[2];
        a2[2] = (unint64_t)&v51[24 * v52];
        v142 = v54;
        v143 = v58;
        v140 = v55;
        v141 = v55;
        result = (_QWORD *)std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v140);
      }
      else
      {
        *(_QWORD *)v45 = &unk_1E64DA950;
        *(double *)(v45 + 8) = v43;
        *(double *)(v45 + 16) = v42;
        v46 = (char *)(v45 + 24);
      }
      a2[1] = (unint64_t)v46;
    }
    else
    {
      a4.n128_f64[0] = a3.n128_f64[0] - v5;
      a5.n128_f64[0] = a3.n128_f64[0] + v5;
      v37 = a3.n128_f64[0] - v10;
      if (a3.n128_f64[0] - v10 < 0.0)
        v37 = -(a3.n128_f64[0] - v10);
      while (1)
      {
        v38 = *(double *)(v35 + 8);
        if (v38 > a4.n128_f64[0] && v38 < a5.n128_f64[0])
          break;
        if (v38 >= 0.0)
        {
          v40 = v38 - v10;
          if (v38 - v10 < 0.0)
            v40 = -(v38 - v10);
          if (v40 <= v37)
          {
            v41 = v38 - a3.n128_f64[0];
            if (v41 < 0.0)
              v41 = -v41;
            if (v41 <= v37)
              break;
          }
        }
        v35 += 24;
        if (v35 == v36)
          goto LABEL_50;
      }
    }
  }
  a3.n128_f64[0] = v10 + v6;
  v139 = v10 + v6;
  if (v10 + v6 >= 1.0)
    goto LABEL_96;
  v59 = v8[1];
  v60 = v8[2];
  if (v59 == v60)
  {
LABEL_81:
    v66 = (*(double (**)(_QWORD *, double *, __n128))(*v8 + 24))(v8, &v139, a3) - *((double *)v8 + 8);
    v67 = v139;
    result = a2 + 2;
    v68 = a2[2];
    v69 = a2[1];
    if (v69 < v68)
    {
      *(_QWORD *)v69 = &unk_1E64DA950;
      *(double *)(v69 + 8) = v67;
      *(double *)(v69 + 16) = v66;
      v70 = (char *)(v69 + 24);
LABEL_95:
      a2[1] = (unint64_t)v70;
      goto LABEL_96;
    }
    v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *a2) >> 3);
    v72 = v71 + 1;
    if (v71 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *a2) >> 3);
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x555555555555555)
        v74 = 0xAAAAAAAAAAAAAAALL;
      else
        v74 = v72;
      v144 = a2 + 2;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)result, v74);
      v77 = (double *)&v75[24 * v71];
      *(_QWORD *)v77 = &unk_1E64DA950;
      v77[1] = v67;
      v77[2] = v66;
      v79 = *a2;
      v78 = a2[1];
      if (v78 == *a2)
      {
        v81 = &v75[24 * v71];
      }
      else
      {
        v80 = a2[1];
        v81 = &v75[24 * v71];
        do
        {
          *((_QWORD *)v81 - 3) = &unk_1E64DA950;
          v81 -= 24;
          *(_OWORD *)(v81 + 8) = *(_OWORD *)(v80 - 16);
          v80 -= 24;
        }
        while (v80 != v79);
      }
      v70 = (char *)(v77 + 3);
      *a2 = (unint64_t)v81;
      a2[1] = (unint64_t)(v77 + 3);
      v82 = a2[2];
      a2[2] = (unint64_t)&v75[24 * v76];
      v142 = v78;
      v143 = v82;
      v140 = v79;
      v141 = v79;
      result = (_QWORD *)std::__split_buffer<cc::point_t<double,false,false>>::~__split_buffer((uint64_t)&v140);
      goto LABEL_95;
    }
LABEL_161:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  v61 = a3.n128_f64[0] - v10;
  if (a3.n128_f64[0] - v10 < 0.0)
    v61 = -(a3.n128_f64[0] - v10);
  while (1)
  {
    v62 = *(double *)(v59 + 8);
    if (v62 > a3.n128_f64[0] - v5 && v62 < a3.n128_f64[0] + v5)
      break;
    if (v62 >= 0.0)
    {
      v64 = v62 - v10;
      if (v62 - v10 < 0.0)
        v64 = -(v62 - v10);
      if (v64 <= v61)
      {
        v65 = v62 - a3.n128_f64[0];
        if (v65 < 0.0)
          v65 = -v65;
        if (v65 <= v61)
          break;
      }
    }
    v59 += 24;
    if (v59 == v60)
      goto LABEL_81;
  }
LABEL_96:
  for (i = *a2; i != a2[1]; i += 24)
  {
    v84 = (_QWORD *)v8[1];
    v85 = (_QWORD *)v8[2];
    if (v84 == v85)
    {
LABEL_102:
      result = (_QWORD *)std::vector<cc::point_t<double,false,false>>::push_back[abi:ne180100](v13, i);
    }
    else
    {
      v86 = v8[1];
      while (*(double *)(v86 + 8) < *(double *)(i + 8))
      {
        v86 += 24;
        v84 += 3;
        if ((_QWORD *)v86 == v85)
          goto LABEL_102;
      }
      result = (_QWORD *)std::vector<cc::point_t<double,false,false>>::insert((uint64_t *)v13, v84, i);
    }
  }
  v87 = v8[1];
  v88 = v8[2];
  v89 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v87) >> 3);
  if (v89 <= 1)
    return (_QWORD *)std::vector<cc::point_t<double,false,false>>::resize((uint64_t)(v8 + 10), 4uLL);
  if (v89 <= 0x5555555555555554)
  {
    v90 = (double *)(v88 - 24);
    if (v88 - 24 == v87)
      v91 = v88 - 24;
    else
      v91 = v88 - 48;
    v92 = v8 + 10;
    result = (_QWORD *)std::vector<cc::point_t<double,false,false>>::resize((uint64_t)(v8 + 10), ((v88 - v87) >> 3) - 2);
    v93 = (double *)v8[1];
    if (v93 != v90)
    {
      v94 = 0;
      v95 = *v92 + 32;
      v96 = (double *)v8[1];
      while (1)
      {
        v97 = v96[4];
        v98 = v96[5];
        v99 = v96[1];
        v100 = v96[2];
        v101 = v97 - v99;
        if (v97 - v99 < 0.0)
          v101 = -(v97 - v99);
        if (v101 < 0.0)
          v101 = -v101;
        v102 = v101 * 0.3334;
        v103 = v95 + v94;
        *(double *)(v103 - 24) = v99;
        *(double *)(v103 - 16) = v100;
        if (v94)
          break;
        if ((unint64_t)v96 < v91)
          goto LABEL_128;
        v108 = v97 - v96[1];
        v109 = v98 - v96[2];
LABEL_130:
        v116 = -v108;
        if (v108 >= 0.0)
          v116 = v108;
        v117 = v109 / v108;
        if (v116 < 0.00000011920929)
          v117 = 0.0;
        v118 = v97 - v102;
        v119 = v98 - v102 * v117;
        v120 = (double *)(v95 + v94);
        v120[3] = v118;
        v120[4] = v119;
        if (!v94)
        {
          v121 = v118 - v96[1];
          v122 = v119 - v96[2];
          v123 = -v121;
          if (v121 >= 0.0)
            v123 = v121;
          v124 = v122 / v121;
          if (v123 < 0.00000011920929)
            v124 = 0.0;
          *v120 = v102 + v99;
          v120[1] = v100 + v102 * v124;
        }
        v96 += 3;
        v94 += 72;
        if (v96 == v90)
          goto LABEL_141;
      }
      v104 = *(v96 - 1);
      v105 = v96[2];
      if (v98 - v105 < 0.0 != v104 - v105 >= 0.0)
      {
        v106 = v96[1];
        v107 = v102 * 0.0 + v105;
        *(double *)(v95 + v94 - 40) = v107;
      }
      else
      {
        v110 = v97 - *(v96 - 2);
        v111 = -v110;
        if (v110 >= 0.0)
          v111 = v97 - *(v96 - 2);
        v112 = (v98 - v104) / v110;
        if (v111 < 0.00000011920929)
          v112 = 0.0;
        v113 = v102 * v112;
        v106 = v96[1];
        v107 = v105 + v113;
      }
      v114 = v102 + v106;
      v115 = (double *)(v95 + v94);
      *v115 = v114;
      v115[1] = v107;
      if ((unint64_t)v96 >= v91)
      {
        v108 = v97 - v114;
        v109 = v98 - v107;
        goto LABEL_130;
      }
LABEL_128:
      v108 = v96[7] - v96[1];
      v109 = v96[8] - v96[2];
      goto LABEL_130;
    }
LABEL_141:
    *(_OWORD *)(v8[11] - 16) = *(_OWORD *)(v88 - 16);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[2] - (_QWORD)v93) >> 3) >= 3 && v93 != v90)
    {
      v126 = 0;
      v127 = (double *)(*v92 + 64);
      do
      {
        v128 = v93[v126 + 5];
        v129 = v93[v126 + 2];
        v130 = v93[v126 + 4] - v93[v126 + 1];
        v131 = -v130;
        if (v130 >= 0.0)
          v131 = v93[v126 + 4] - v93[v126 + 1];
        v132 = v128 - v129;
        v133 = -(v128 - v129);
        if (v132 >= 0.0)
          v133 = v132;
        v134 = 1.0;
        if (v133 > 0.00000011920929)
        {
          v134 = 0.0;
          if (v131 > 0.00000011920929)
          {
            v135 = v133 / v131 * -3.0 + 1.0;
            if (v135 >= 0.0)
            {
              v134 = 1.0;
              if (v135 <= 1.0)
                v134 = v135;
            }
          }
        }
        v136 = v134 * *(v127 - 6);
        v137 = 1.0 - v134;
        *(v127 - 3) = v136 + (1.0 - v134) * *(v127 - 3);
        v138 = v134 * v127[3];
        *v127 = v138 + v137 * *v127;
        if (&v93[v126] != (double *)v91)
          v127[6] = v138 + v137 * v127[6];
        if (v126 * 8)
          *(v127 - 9) = v136 + v137 * *(v127 - 9);
        v126 += 3;
        v127 += 9;
      }
      while (&v93[v126] != v90);
    }
  }
  return result;
}

double cc::curve::aspline::offsetcolor_t<double>::evaluate(uint64_t a1)
{
  double (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(double (**)(_QWORD *))(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + (v3 >> 1) + 72);
  if ((v3 & 1) != 0)
    v2 = *(double (**)(_QWORD *))(*v4 + v2);
  return v2(v4) + *(double *)(a1 + 64);
}

BOOL cc::curve::aspline::offsetcolor_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v11 = a1 + 104;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t cc::curve::aspline::offsetcolor_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)(a1 + 104)
                                                                                             + 24))(a1 + 104, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

void `non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::~offsetcolor_t(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 - 32) = &unk_1E64E3AC8;
  *(_QWORD *)a1 = &unk_1E64E3B08;
  v2 = (void **)(a1 + 48);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 - 24);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t `non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::~offsetcolor_t(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void **v4;

  *(_QWORD *)(a1 - 32) = &unk_1E64E3AC8;
  v1 = a1 - 32;
  *(_QWORD *)a1 = &unk_1E64E3B08;
  v2 = (void **)(a1 - 24);
  v4 = (void **)(a1 + 48);
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = v2;
  std::vector<cc::point_t<double,false,false>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1B5E29170](v1, 0x10A1C4008CDC881);
}

double `non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::evaluate(uint64_t a1)
{
  double (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(double (**)(_QWORD *))(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = (_QWORD *)(a1 + (v3 >> 1) + 40);
  if ((v3 & 1) != 0)
    v2 = *(double (**)(_QWORD *))(*v4 + v2);
  return v2(v4) + *(double *)(a1 + 32);
}

BOOL `non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::evaluateAsBytes(uint64_t a1, _WORD *a2, int a3, int a4, void (*a5)(double *), float a6, float a7)
{
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v26;
  double v27;

  if (a3)
  {
    v10 = a2;
    v11 = a1 + 72;
    v12 = (unint64_t)&a2[a3];
    v13 = a7 - a6;
    v14 = v13;
    v15 = a6;
    v16 = (float)(1.0 / v13);
    v17 = (float)((float)-a6 / v13);
    v18 = 0.0;
    v19 = 1.0 / (double)(~a4 + a3);
    do
    {
      v27 = 0.0;
      v26 = v18 * v14 + v15;
      v20 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v11 + 16))(v11, &v26);
      v27 = v20;
      if (a5)
      {
        a5(&v27);
        v20 = v27;
      }
      v21 = v20 * v16 + v17;
      v22 = v21 * 65535.0;
      if (v21 > 1.0)
        v22 = 65535.0;
      v23 = v21 < 0.0;
      v24 = 0.0;
      if (!v23)
        v24 = v22;
      *v10++ = (int)v24;
      v18 = v19 + v18;
    }
    while ((unint64_t)v10 < v12);
    if (a4)
      *v10 = *(v10 - 1);
  }
  return a3 != 0;
}

uint64_t `non-virtual thunk to'cc::curve::aspline::offsetcolor_t<double>::evaluateAsLUT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a2 + 24) <= 0x3FFuLL)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = (void *)operator new[]();
      v13 = 2 * *(_QWORD *)(a2 + 16);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      memmove(v12, *(const void **)(a2 + 8), v13);
      *(_QWORD *)(a2 + 24) = 1024;
      MEMORY[0x1B5E2914C](v14, 0x1000C80BDFB0063);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 1024;
    }
    v15 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v15;
    if (v12)
    {
      memcpy(v15, v12, v13);
      MEMORY[0x1B5E2914C](v12, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)(a2 + 16) = 1024;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float, float))(*(_QWORD *)(a1 + 72)
                                                                                             + 24))(a1 + 72, *(_QWORD *)(a2 + 8), 1024, a3, a4, a5, a6);
}

void sub_1B285A5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

double PCMatrix33Tmpl<double>::operator*@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  double result;
  _OWORD v10[4];
  uint64_t v11;

  v4 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v5;
  v11 = *(_QWORD *)(a1 + 64);
  PCMatrix33Tmpl<double>::operator*=((double *)v10, a2);
  v7 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 16) = v7;
  v8 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(a3 + 48) = v8;
  result = *(double *)(v6 + 64);
  *(double *)(a3 + 64) = result;
  return result;
}

double PCMatrix33Tmpl<double>::operator*=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a1 = *a1 * *a2 + v3 * a2[3] + v4 * a2[6];
  a1[1] = v2 * a2[1] + v3 * a2[4] + v4 * a2[7];
  a1[2] = v2 * a2[2] + v3 * a2[5] + v4 * a2[8];
  v6 = a1[4];
  v7 = a1[5];
  a1[3] = v5 * *a2 + v6 * a2[3] + v7 * a2[6];
  a1[4] = v5 * a2[1] + v6 * a2[4] + v7 * a2[7];
  a1[5] = v5 * a2[2] + v6 * a2[5] + v7 * a2[8];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  a1[6] = v8 * *a2 + v9 * a2[3] + v10 * a2[6];
  a1[7] = v8 * a2[1] + v9 * a2[4] + v10 * a2[7];
  result = v8 * a2[2] + v9 * a2[5] + v10 * a2[8];
  a1[8] = result;
  return result;
}

HGNode *HEquirectGaussianBlur::init(uint64_t a1, int a2, int a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float32x2_t *a7, float a8, float a9, float a10)
{
  HGNode *v15;
  HGNode *v16;
  HGaussianBlur *v17;
  HGaussianBlur *v18;
  HgcEquirectToSinusoidal *v19;
  float v20;
  float v21;
  HGTextureWrap *v22;
  char *v23;
  HGaussianBlur *v24;
  HgcSinusoidalToEquirect *v25;
  float v26;
  float v27;
  uint64_t v28;
  int64x2_t v29;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  HGCrop *v41;
  HGCrop *v42;
  HGNode *result;
  HGTextureWrap *v44;
  _OWORD v45[4];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  HGNode *v54;

  *(float *)(a1 + 408) = a8;
  *(float *)(a1 + 412) = a9;
  *(float *)(a1 + 416) = a10;
  *(_DWORD *)(a1 + 420) = a2;
  *(_DWORD *)(a1 + 424) = a3;
  *(float *)v45 = (float)a2;
  *((float *)v45 + 1) = (float)a3;
  NewEquirectWrapNode((float32x2_t *)v45, a4, a5, a6, a7, &v54);
  v15 = *(HGNode **)(a1 + 432);
  v16 = v54;
  if (v15 != v54)
  {
    if (v15)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v15 + 24))(*(_QWORD *)(a1 + 432));
      v16 = v54;
    }
    *(_QWORD *)(a1 + 432) = v16;
    if (v16)
      (*(void (**)(HGNode *))(*(_QWORD *)v16 + 16))(v16);
  }
  v17 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
  HGaussianBlur::HGaussianBlur(v17);
  (*(void (**)(HGaussianBlur *, _QWORD, HGNode *))(*(_QWORD *)v17 + 120))(v17, 0, v54);
  HGaussianBlur::init(v17, *(float *)(a1 + 408), 0.0, *(float *)(a1 + 416), 0, 0, 0);
  (*(void (**)(HGaussianBlur *))(*(_QWORD *)v17 + 16))(v17);
  v18 = v17;
  if (*(float *)(a1 + 412) > 0.0)
  {
    v19 = (HgcEquirectToSinusoidal *)HGObject::operator new(0x1A0uLL);
    HgcEquirectToSinusoidal::HgcEquirectToSinusoidal(v19);
    *(_QWORD *)v19 = &unk_1E64DA480;
    HGNode::SetInput((HGNode *)v19, 0, (HGNode *)v17);
    (*(void (**)(HgcEquirectToSinusoidal *, _QWORD, float, float, float, float))(*(_QWORD *)v19 + 96))(v19, 0, (float)*(int *)(a1 + 420), (float)*(int *)(a1 + 424), 0.0, 0.0);
    v20 = 6.28318531 / (double)*(int *)(a1 + 420);
    v21 = 3.14159265 / (double)*(int *)(a1 + 424);
    (*(void (**)(HgcEquirectToSinusoidal *, uint64_t, float, float, float, float))(*(_QWORD *)v19 + 96))(v19, 1, v20, v21, 0.0, 0.0);
    (*(void (**)(HgcEquirectToSinusoidal *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v19 + 96))(v19, 2, a4->f32[0], a4->f32[1], a4[1].f32[0], a4[1].f32[1]);
    (*(void (**)(HgcEquirectToSinusoidal *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v19 + 96))(v19, 3, a5->f32[0], a5->f32[1], a5[1].f32[0], a5[1].f32[1]);
    (*(void (**)(HgcEquirectToSinusoidal *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v19 + 96))(v19, 4, a6->f32[0], a6->f32[1], a6[1].f32[0], a6[1].f32[1]);
    (*(void (**)(HgcEquirectToSinusoidal *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v19 + 96))(v19, 5, a7->f32[0], a7->f32[1], a7[1].f32[0], a7[1].f32[1]);
    v22 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
    HGTextureWrap::HGTextureWrap(v22);
    v44 = v22;
    HGTextureWrap::SetTextureWrapMode((uint64_t)v22, (const char *)3, v23);
    (*(void (**)(HGTextureWrap *, _QWORD, HgcEquirectToSinusoidal *))(*(_QWORD *)v22 + 120))(v22, 0, v19);
    v24 = (HGaussianBlur *)HGObject::operator new(0x1B0uLL);
    HGaussianBlur::HGaussianBlur(v24);
    (*(void (**)(HGaussianBlur *, _QWORD, HGTextureWrap *))(*(_QWORD *)v24 + 120))(v24, 0, v22);
    HGaussianBlur::init(v24, *(float *)(a1 + 408), *(float *)(a1 + 412), 0.0, 0, 0, 0);
    v25 = (HgcSinusoidalToEquirect *)HGObject::operator new(0x1A0uLL);
    HgcSinusoidalToEquirect::HgcSinusoidalToEquirect(v25);
    *(_QWORD *)v25 = &unk_1E64DEBE8;
    HGNode::SetInput((HGNode *)v25, 0, (HGNode *)v24);
    (*(void (**)(HgcSinusoidalToEquirect *, _QWORD, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 0, (float)*(int *)(a1 + 420), (float)*(int *)(a1 + 424), 0.0, 0.0);
    v26 = 6.28318531 / (double)*(int *)(a1 + 420);
    v27 = 3.14159265 / (double)*(int *)(a1 + 424);
    (*(void (**)(HgcSinusoidalToEquirect *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 1, v26, v27, 0.0, 0.0);
    (*(void (**)(HgcSinusoidalToEquirect *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v25 + 96))(v25, 2, a4->f32[0], a4->f32[1], a4[1].f32[0], a4[1].f32[1]);
    (*(void (**)(HgcSinusoidalToEquirect *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v25 + 96))(v25, 3, a5->f32[0], a5->f32[1], a5[1].f32[0], a5[1].f32[1]);
    (*(void (**)(HgcSinusoidalToEquirect *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v25 + 96))(v25, 4, a6->f32[0], a6->f32[1], a6[1].f32[0], a6[1].f32[1]);
    (*(void (**)(HgcSinusoidalToEquirect *, uint64_t, float32_t, float32_t, float32_t, float32_t))(*(_QWORD *)v25 + 96))(v25, 5, a7->f32[0], a7->f32[1], a7[1].f32[0], a7[1].f32[1]);
    v18 = v17;
    if (v17 != v25)
    {
      (*(void (**)(HGaussianBlur *))(*(_QWORD *)v17 + 24))(v17);
      v18 = v25;
      (*(void (**)(HgcSinusoidalToEquirect *))(*(_QWORD *)v25 + 16))(v25);
    }
    (*(void (**)(HgcSinusoidalToEquirect *))(*(_QWORD *)v25 + 24))(v25);
    (*(void (**)(HGaussianBlur *))(*(_QWORD *)v24 + 24))(v24);
    (*(void (**)(HGTextureWrap *))(*(_QWORD *)v44 + 24))(v44);
    (*(void (**)(HgcEquirectToSinusoidal *))(*(_QWORD *)v19 + 24))(v19);
  }
  v28 = *(_QWORD *)(a1 + 420);
  v29.i64[0] = (int)v28;
  v29.i64[1] = SHIDWORD(v28);
  v30 = vcvtq_f64_s64(v29);
  __asm { FMOV            V1.2D, #-0.5 }
  v52 = vmulq_f64(v30, _Q1);
  v53 = v30;
  v51 = 0x3FF0000000000000;
  v47 = 0;
  v48 = 0x3FF0000000000000;
  v46 = 0;
  v49 = 0u;
  v50 = 0u;
  v36 = vcvtq_f64_f32(a6[1]);
  v45[0] = vcvtq_f64_f32(*a6);
  v45[1] = v36;
  v37 = vcvtq_f64_f32(a7[1]);
  v45[2] = vcvtq_f64_f32(*a7);
  v45[3] = v37;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v45, v52.f64, (uint64_t)&v52);
  v38 = HGRectMake4i(vcvtmd_s64_f64(v52.f64[0]), vcvtmd_s64_f64(v52.f64[1]), vcvtpd_s64_f64(v52.f64[0] + v53.f64[0]), vcvtpd_s64_f64(v52.f64[1] + v53.f64[1]));
  v40 = v39;
  v41 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v41);
  (*(void (**)(HGCrop *, _QWORD, HGaussianBlur *))(*(_QWORD *)v41 + 120))(v41, 0, v18);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v41 + 96))(v41, 0, (float)(int)v38, (float)SHIDWORD(v38), (float)(int)v40, (float)SHIDWORD(v40));
  v42 = *(HGCrop **)(a1 + 440);
  if (v42 != v41)
  {
    if (v42)
      (*(void (**)(HGCrop *))(*(_QWORD *)v42 + 24))(v42);
    *(_QWORD *)(a1 + 440) = v41;
    (*(void (**)(HGCrop *))(*(_QWORD *)v41 + 16))(v41);
  }
  (*(void (**)(HGCrop *))(*(_QWORD *)v41 + 24))(v41);
  (*(void (**)(HGaussianBlur *))(*(_QWORD *)v18 + 24))(v18);
  (*(void (**)(HGaussianBlur *))(*(_QWORD *)v17 + 24))(v17);
  result = v54;
  if (v54)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v54 + 24))(v54);
  return result;
}

void sub_1B285AEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  HGObject::operator delete(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v16 = *(_QWORD *)(v14 - 112);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  _Unwind_Resume(a1);
}

uint64_t HEquirectGaussianBlur::GetOutput(HEquirectGaussianBlur *this, HGRenderer *a2)
{
  uint64_t v3;
  HGNode *Input;

  v3 = *((_QWORD *)this + 54);
  Input = HGRenderer::GetInput(a2, (HGNode *)this, 0);
  (*(void (**)(uint64_t, _QWORD, HGNode *))(*(_QWORD *)v3 + 120))(v3, 0, Input);
  return *((_QWORD *)this + 55);
}

void HEquirectGaussianBlur::~HEquirectGaussianBlur(HGNode *this)
{
  void *v1;

  HEquirectGaussianBlur::~HEquirectGaussianBlur(this);
  HGObject::operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E64E3B98;
  v2 = *((_QWORD *)this + 55);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 54);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGNode::~HGNode(this);
}

void HPolarToRect::InvTransformPoint(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, _QWORD, float *))(*(_QWORD *)a1 + 104))(a1, 0, &v19);
  v18 = v19;
  (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 104))(a1, 1, &v19);
  v6 = v19;
  v7 = v20;
  (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 104))(a1, 2, &v19);
  v8 = v19;
  v9 = v20;
  (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 104))(a1, 3, &v19);
  v10 = v19;
  v11 = v20;
  (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 104))(a1, 4, &v19);
  v13 = v19;
  v12 = v20;
  v14 = (float)(v8 + (float)(v10 * *a2)) - v6;
  v15 = (float)(v9 + (float)(v11 * a2[1])) - v7;
  v16 = atan2f(v14, v15);
  if (v16 < 0.0)
  {
    v17 = v16 + 6.28318531;
    v16 = v17;
  }
  *a3 = v13 * (float)((float)(v18 * v16) - v8);
  a3[1] = v12 * (float)(sqrtf((float)(v14 * v14) + (float)(v15 * v15)) - v9);
}

unint64_t HPolarToRect::GetDOD(HPolarToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  int v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v11;
  float v12[2];
  float v13[2];
  float v14[2];
  float v15[2];

  if (a3)
  {
    v4 = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    v7 = HGRectMake4i(vcvtms_s32_f32(*((float *)this + 104)), vcvtms_s32_f32(*((float *)this + 105)), vcvtps_s32_f32(*((float *)this + 106)), vcvtps_s32_f32(*((float *)this + 107)));
    v4 = v7;
    v9 = v8;
    v5 = HIDWORD(v7);
    if (!HGRectIsInfinite(v7, v8) && *((_BYTE *)this + 432))
    {
      v15[0] = (float)v4;
      v15[1] = (float)(int)v5;
      v14[0] = (float)(int)v9;
      v14[1] = (float)(int)v5;
      v13[0] = (float)(int)v9;
      v13[1] = (float)SHIDWORD(v9);
      v12[0] = (float)v4;
      v12[1] = (float)SHIDWORD(v9);
      HPolarToRect::InvTransformPoint((uint64_t)this, v15, &v11);
      HPolarToRect::InvTransformPoint((uint64_t)this, v14, &v11);
      HPolarToRect::InvTransformPoint((uint64_t)this, v13, &v11);
      HPolarToRect::InvTransformPoint((uint64_t)this, v12, &v11);
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t mix_hull@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;

  v3.f64[0] = *(float64_t *)a2;
  v3.f64[1] = *(float64_t *)(result + 8);
  v4.f64[0] = *(float64_t *)result;
  v4.f64[1] = *(float64_t *)(a2 + 8);
  v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v4, v3), *(int8x16_t *)a2, *(int8x16_t *)result);
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1), v5))).u8[0] & 1) != 0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v6.f64[0] = *(float64_t *)(a2 + 16);
  v6.f64[1] = *(float64_t *)(result + 24);
  v7.f64[0] = *(float64_t *)(result + 16);
  v7.f64[1] = *(float64_t *)(a2 + 24);
  v8 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), *(int8x16_t *)(a2 + 16), *(int8x16_t *)(result + 16));
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1), v8))).u8[0] & 1) != 0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  *a3 = v5;
  a3[1] = v8;
  return result;
}

unint64_t HPolarToRect::GetROI(HPolarToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  unsigned int v4;
  unsigned int v5;
  HPolarToRect *v6;
  float v7;
  int v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  double v19;
  int v20;
  int v21;
  float64_t v22;
  float64_t v23;
  float64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD v29[2];
  _OWORD v30[2];
  float64x2_t v31;
  __int128 v32;
  _BYTE v33[32];
  float64x2_t v34;
  __int128 v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  double v39[2];
  __int128 v40;
  __int128 v41;
  double v42[2];
  HGRect v43;
  __int128 v44;
  float64x2_t v45;
  __int128 v46;
  double v47[4];
  __int128 v48;
  double v49[3];
  double v50[5];

  v50[4] = *(double *)MEMORY[0x1E0C80C00];
  v43 = a4;
  if (a3)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = this;
    (*(void (**)(HPolarToRect *, _QWORD, double *))(*(_QWORD *)this + 104))(this, 0, v50);
    v7 = *(float *)v50;
    v8 = fegetround();
    fesetround(0x400000);
    v50[0] = (float)-v7;
    v9 = -v50[0];
    v50[0] = v7;
    v42[0] = v9;
    v42[1] = v7;
    fesetround(v8);
    (*(void (**)(HPolarToRect *, uint64_t, double *))(*(_QWORD *)v6 + 104))(v6, 1, v50);
    v10 = v50[0];
    v11 = fegetround();
    fesetround(0x400000);
    v50[0] = *(float *)&v10;
    fesetround(v11);
    v12 = fegetround();
    fesetround(0x400000);
    v50[0] = *((float *)&v10 + 1);
    fesetround(v12);
    (*(void (**)(HPolarToRect *, uint64_t, double *))(*(_QWORD *)v6 + 104))(v6, 2, v50);
    v13 = v50[0];
    v14 = fegetround();
    fesetround(0x400000);
    v50[0] = *(float *)&v13;
    fesetround(v14);
    v15 = fegetround();
    fesetround(0x400000);
    v50[0] = *((float *)&v13 + 1);
    fesetround(v15);
    v50[0] = -(float)-*(float *)&v13;
    v50[1] = *(float *)&v13;
    v50[2] = -(float)-*((float *)&v13 + 1);
    v50[3] = *((float *)&v13 + 1);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::PCVector2((uint64_t)&v40);
    operator*<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>(v50, (double *)&v48, 2.0);
    v40 = v48;
    v41 = *(_OWORD *)v49;
    (*(void (**)(HPolarToRect *, uint64_t, __int128 *))(*(_QWORD *)v6 + 104))(v6, 3, &v48);
    v16 = v48;
    v17 = fegetround();
    fesetround(0x400000);
    *(double *)&v48 = *(float *)&v16;
    fesetround(v17);
    v18 = fegetround();
    fesetround(0x400000);
    *(double *)&v48 = *((float *)&v16 + 1);
    fesetround(v18);
    *(double *)&v48 = -(float)-*(float *)&v16;
    *((double *)&v48 + 1) = *(float *)&v16;
    v49[0] = -(float)-*((float *)&v16 + 1);
    v49[1] = *((float *)&v16 + 1);
    (*(void (**)(HPolarToRect *, uint64_t, double *))(*(_QWORD *)v6 + 104))(v6, 4, v47);
    v19 = v47[0];
    v20 = fegetround();
    fesetround(0x400000);
    v47[0] = *(float *)&v19;
    fesetround(v20);
    v21 = fegetround();
    fesetround(0x400000);
    v47[0] = *((float *)&v19 + 1);
    fesetround(v21);
    v47[0] = -(float)-*(float *)&v19;
    v47[1] = *(float *)&v19;
    v47[2] = -(float)-*((float *)&v19 + 1);
    v47[3] = *((float *)&v19 + 1);
    (*(void (**)(HPolarToRect *, uint64_t, float64x2_t *))(*(_QWORD *)v6 + 104))(v6, 5, &v45);
    Interval::pixelToFloat(&v43.var0, v45.f64);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v45.f64, (double *)&v48);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator+=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v45.f64, v50);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v45.f64, v42, v39);
    v38 = v46;
    *(_OWORD *)v33 = xmmword_1B304F7C0;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v38, (double *)v33, v34.f64);
    LODWORD(v6) = fegetround();
    fesetround(0x400000);
    v22 = (float)-*(float *)&v10 - v34.f64[0];
    v36.f64[0] = *(float *)&v10 + v34.f64[1];
    v23 = v36.f64[0];
    fesetround((int)v6);
    v44 = xmmword_1B304F7C0;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v38, (double *)&v44, v31.f64);
    LODWORD(v6) = fegetround();
    fesetround(0x400000);
    v24 = (float)-*((float *)&v10 + 1) - v31.f64[0];
    v36.f64[0] = *((float *)&v10 + 1) + v31.f64[1];
    v25 = v36.f64[0];
    fesetround((int)v6);
    v36.f64[0] = -v22;
    v36.f64[1] = v23;
    *(double *)&v37 = -v24;
    *((double *)&v37 + 1) = v25;
    boost::numeric::operator/<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(v36.f64, (double *)&v40, v34.f64);
    boost::numeric::operator/<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v37, (double *)&v41, (double *)v33);
    *(_QWORD *)v33 = 0;
    *(_OWORD *)&v33[8] = xmmword_1B304EED0;
    *(_QWORD *)&v33[24] = 0x3FF0000000000000;
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)v33, (double *)&v40, v31.f64);
    boost::numeric::operator*<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>((double *)&v33[16], (double *)&v41, (double *)&v44);
    v34 = v31;
    v35 = v44;
    operator-<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>((double *)&v40, v34.f64, (double *)v33);
    v30[0] = v34;
    v30[1] = v35;
    v29[0] = *(_OWORD *)v33;
    v29[1] = *(_OWORD *)&v33[16];
    mix_hull((uint64_t)v30, (uint64_t)v29, &v31);
    *(float64x2_t *)v33 = v31;
    *(_OWORD *)&v33[16] = v32;
    v36 = v31;
    v37 = v32;
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator-=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v36.f64, v50);
    PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator*=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(v36.f64, v47);
    v45 = v36;
    v46 = v37;
    v26 = Interval::floatToPixel(v45.f64);
    v27 = HIDWORD(v26);
    v4 = v26 - 1;
    v5 = v27 - 1;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void sub_1B285BA9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t operator*<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>,double>@<X0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  int v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;

  v6 = fegetround();
  fesetround(0x400000);
  if (a3 >= 0.0)
  {
    v7 = 0.0;
    v9 = 0.0;
    if (a3 == 0.0)
      goto LABEL_6;
    v7 = --(*a1 * a3);
    v8 = a1[1];
  }
  else
  {
    v7 = --(a1[1] * a3);
    v8 = *a1;
  }
  v9 = v8 * a3;
LABEL_6:
  fesetround(v6);
  v10 = fegetround();
  fesetround(0x400000);
  if (a3 < 0.0)
  {
    v11 = --(a1[3] * a3);
    v12 = a1[2];
LABEL_10:
    v13 = v12 * a3;
    goto LABEL_11;
  }
  v11 = 0.0;
  v13 = 0.0;
  if (a3 != 0.0)
  {
    v11 = --(a1[2] * a3);
    v12 = a1[3];
    goto LABEL_10;
  }
LABEL_11:
  result = fesetround(v10);
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v11;
  a2[3] = v13;
  return result;
}

double *PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::operator-=<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>(double *a1, double *a2)
{
  int v4;
  double v5;
  int v6;
  double v7;

  v4 = fegetround();
  fesetround(0x400000);
  v5 = a1[1] - *a2;
  *a1 = -(a2[1] - *a1);
  a1[1] = v5;
  fesetround(v4);
  v6 = fegetround();
  fesetround(0x400000);
  v7 = a1[3] - a2[2];
  a1[2] = -(a2[3] - a1[2]);
  a1[3] = v7;
  fesetround(v6);
  return a1;
}

uint64_t HPolarToRect::GetOutput(HPolarToRect *this, HGRenderer *a2)
{
  (*(void (**)(HPolarToRect *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 2);
  return HgcPolarToRect::GetOutput(this, a2);
}

void HPolarToRect::~HPolarToRect(HGNode *this)
{
  void *v1;

  HgcPolarToRect::~HgcPolarToRect(this);
  HGObject::operator delete(v1);
}

uint64_t PCVector2<boost::numeric::interval<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>>::PCVector2(uint64_t a1)
{
  int v2;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = fegetround();
  fesetround(0x400000);
  *(double *)(a1 + 16) = -0.0;
  *(_QWORD *)(a1 + 24) = 0;
  fesetround(v2);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
  return a1;
}

double *boost::numeric::operator/<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *result@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double *v4;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v4 = result;
  if (*a2 > 0.0)
    return (double *)boost::numeric::interval_lib::detail::div_non_zero<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(result, a2, a3);
  v6 = a2[1];
  if (v6 < 0.0)
    return (double *)boost::numeric::interval_lib::detail::div_non_zero<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>(result, a2, a3);
  if (*a2 != 0.0)
  {
    if (v6 == 0.0)
    {
      v7 = *result;
      if (*result != 0.0 || (v8 = result[1], v8 != 0.0))
      {
        v9 = fegetround();
        fesetround(0x400000);
        v10 = v4[1];
        if (v10 >= 0.0)
        {
          if (*v4 >= 0.0)
            v12 = *v4 / *a2;
          else
            v12 = INFINITY;
          v11 = -INFINITY;
        }
        else
        {
          v11 = -(v10 / -*a2);
          v12 = INFINITY;
        }
        goto LABEL_27;
      }
    }
    else
    {
      v7 = *result;
      v8 = result[1];
      if (*result != 0.0 || v8 != 0.0)
      {
        v7 = -INFINITY;
        v8 = INFINITY;
      }
    }
LABEL_18:
    *a3 = v7;
    a3[1] = v8;
    return result;
  }
  if (v6 == 0.0)
    boost::numeric::interval_lib::exception_create_empty::operator()();
  v7 = *result;
  if (*result == 0.0)
  {
    v8 = result[1];
    if (v8 == 0.0)
      goto LABEL_18;
  }
  v9 = fegetround();
  fesetround(0x400000);
  v13 = v4[1];
  if (v13 >= 0.0)
  {
    if (*v4 >= 0.0)
    {
      v11 = -(*v4 / -a2[1]);
      v12 = INFINITY;
      goto LABEL_27;
    }
    v12 = INFINITY;
  }
  else
  {
    v12 = v13 / a2[1];
  }
  v11 = -INFINITY;
LABEL_27:
  *a3 = v11;
  a3[1] = v12;
  return (double *)fesetround(v9);
}

uint64_t boost::numeric::interval_lib::detail::div_non_zero<double,boost::numeric::interval_lib::policies<boost::numeric::interval_lib::rounded_math<double>,boost::numeric::interval_lib::checking_strict<double>>>@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v6 = fegetround();
  fesetround(0x400000);
  v7 = a1[1];
  if (v7 >= 0.0)
  {
    v11 = *a1;
    v12 = a2[1];
    if (*a1 >= 0.0)
    {
      v15 = -v12;
      if (v12 < 0.0)
      {
        v9 = v7 / v15;
        v12 = *a2;
        goto LABEL_10;
      }
      v17 = v11 / v15;
      v16 = *a2;
    }
    else
    {
      if (v12 < 0.0)
      {
        v9 = v7 / -v12;
LABEL_10:
        v10 = v11 / v12;
        goto LABEL_11;
      }
      v16 = *a2;
      v17 = v11 / -*a2;
    }
    v13 = v7 / v16;
    v14 = -v17;
    goto LABEL_15;
  }
  v8 = a2[1];
  if (v8 >= 0.0)
  {
    v13 = v7 / v8;
    v14 = -(*a1 / -*a2);
LABEL_15:
    *a3 = v14;
    a3[1] = v13;
    return fesetround(v6);
  }
  v9 = v7 / -*a2;
  v10 = *a1 / v8;
LABEL_11:
  *a3 = -v9;
  a3[1] = v10;
  return fesetround(v6);
}

void sub_1B285C6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void sub_1B285CCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  HGObject::operator delete(v11);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

void sub_1B285D610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  HGTransform::~HGTransform((HGTransform *)va);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(a1);
}

void sub_1B285DE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B285E19C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1B285E3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1B285E790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;

  HGObject::operator delete(v17);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  _Unwind_Resume(a1);
}

unint64_t HGlow::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0x8000000080000000;
  else
    return a4;
}

uint64_t HGlow::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HGlow::~HGlow(HGNode *this)
{
  void *v1;

  HgcGlow::~HgcGlow(this);
  HGObject::operator delete(v1);
}

unint64_t HGlowCombine::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0x8000000080000000;
  else
    return a4;
}

uint64_t HGlowCombine::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HGlowCombine::~HGlowCombine(HGNode *this)
{
  void *v1;

  HgcGlowCombineFx::~HgcGlowCombineFx(this);
  HGObject::operator delete(v1);
}

void sub_1B285F118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;

  HGObject::operator delete(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B285F72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 24))(a26);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 24))(a30);
  if (a34)
    (*(void (**)(uint64_t))(*(_QWORD *)a34 + 24))(a34);
  if (a38)
    (*(void (**)(uint64_t))(*(_QWORD *)a38 + 24))(a38);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  v47 = *(_QWORD *)(v45 - 112);
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  _Unwind_Resume(a1);
}

void sub_1B28601C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  void *v65;
  uint64_t v66;

  HGObject::operator delete(v65);
  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  if (a65)
    (*(void (**)(uint64_t))(*(_QWORD *)a65 + 24))(a65);
  _Unwind_Resume(a1);
}

void sub_1B2861090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  RandMersenne::~RandMersenne((RandMersenne *)va);
  _Unwind_Resume(a1);
}

void sub_1B2861288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  RandMersenne::~RandMersenne((RandMersenne *)va);
  _Unwind_Resume(a1);
}

void sub_1B2861CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  RandMersenne::~RandMersenne((RandMersenne *)&a28);
  _Unwind_Resume(a1);
}

void sub_1B28624AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HBadFilm::~HBadFilm(HGNode *this)
{
  void *v1;

  HgcBadFilm::~HgcBadFilm(this);
  HGObject::operator delete(v1);
}

void sub_1B2862A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  v11 = *(_QWORD *)(v9 - 24);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  _Unwind_Resume(exception_object);
}

void sub_1B2863090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

unint64_t HGloom::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0x8000000080000000;
  else
    return a4;
}

uint64_t HGloom::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HGloom::~HGloom(HGNode *this)
{
  void *v1;

  HgcGloom::~HgcGloom(this);
  HGObject::operator delete(v1);
}

void sub_1B28639E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B2864500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  v37 = *(_QWORD *)(v35 - 144);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  _Unwind_Resume(exception_object);
}

const char *HgcFisheye::GetProgram(HgcFisheye *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004ac\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.x = dot(s0.xyw, hg_Params[2].xyz);\n"
             "    s1.y = dot(s0.xyw, hg_Params[3].xyz);\n"
             "    s1.xy = s1.xy - hg_Params[6].xy;\n"
             "    s1.zw = s1.xy*s1.xy;\n"
             "    s1.z = dot(s1.zw, hg_Params[5].xy);\n"
             "    s1.z = rsqrt(s1.z);\n"
             "    r0.w = -half(hg_Params[4].x);\n"
             "    s1.w = pow(s1.z, float(r0.w));\n"
             "    s0.x = s1.z*s1.w;\n"
             "    s1.xy = s1.xy*s0.xx;\n"
             "    s1.zw = float2(c0.xw);\n"
             "    s1 = s1 + hg_Params[6];\n"
             "    s0.x = dot(s1, hg_Params[0]);\n"
             "    s0.y = dot(s1, hg_Params[1]);\n"
             "    s0.xy = s0.xy + hg_Params[7].xy;\n"
             "    s0.xy = s0.xy*hg_Params[7].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b78c9d66:00ca1048:8b1d8cf2:66078d3a\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000047c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy;\n"
             "    r0.w = c0.w;\n"
             "    r1.x = dot(r0.xyw, hg_Params[2].xyz);\n"
             "    r1.y = dot(r0.xyw, hg_Params[3].xyz);\n"
             "    r1.xy = r1.xy - hg_Params[6].xy;\n"
             "    r1.zw = r1.xy*r1.xy;\n"
             "    r1.z = dot(r1.zw, hg_Params[5].xy);\n"
             "    r1.z = rsqrt(r1.z);\n"
             "    r0.w = -hg_Params[4].x;\n"
             "    r1.w = pow(r1.z, r0.w);\n"
             "    r0.x = r1.z*r1.w;\n"
             "    r1.xy = r1.xy*r0.xx;\n"
             "    r1.zw = c0.xw;\n"
             "    r1 = r1 + hg_Params[6];\n"
             "    r0.x = dot(r1, hg_Params[0]);\n"
             "    r0.y = dot(r1, hg_Params[1]);\n"
             "    r0.xy = r0.xy + hg_Params[7].xy;\n"
             "    r0.xy = r0.xy*hg_Params[7].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c5177f84:f976086c:5b695247:46ab06e4\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000573\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy;\n"
           "    r0.w = c0.w;\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal2.xyz);\n"
           "    r1.y = dot(r0.xyw, hg_ProgramLocal3.xyz);\n"
           "    r1.xy = r1.xy - hg_ProgramLocal6.xy;\n"
           "    r1.zw = r1.xy*r1.xy;\n"
           "    r1.z = dot(r1.zw, hg_ProgramLocal5.xy);\n"
           "    r1.z = inversesqrt(r1.z);\n"
           "    r0.w = -hg_ProgramLocal4.x;\n"
           "    r1.w = pow(r1.z, r0.w);\n"
           "    r0.x = r1.z*r1.w;\n"
           "    r1.xy = r1.xy*r0.xx;\n"
           "    r1.zw = c0.xw;\n"
           "    r1 = r1 + hg_ProgramLocal6;\n"
           "    r0.x = dot(r1, hg_ProgramLocal0);\n"
           "    r0.y = dot(r1, hg_ProgramLocal1);\n"
           "    r0.xy = r0.xy + hg_ProgramLocal7.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal7.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=09ee19a3:6f261b88:5f74ed2a:56627056\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcFisheye::InitProgramDescriptor(HgcFisheye *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcFisheye_hgc_visible", "//Metal1.0     \n//LEN=00000003b9\n[[ visible ]] FragmentOut HgcFisheye_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy;\n"
    "    r0.w = c0.w;\n"
    "    r1.x = dot(r0.xyw, hg_Params[2].xyz);\n"
    "    r1.y = dot(r0.xyw, hg_Params[3].xyz);\n"
    "    r1.xy = r1.xy - hg_Params[6].xy;\n"
    "    r1.zw = r1.xy*r1.xy;\n"
    "    r1.z = dot(r1.zw, hg_Params[5].xy);\n"
    "    r1.z = rsqrt(r1.z);\n"
    "    r0.w = -hg_Params[4].x;\n"
    "    r1.w = pow(r1.z, r0.w);\n"
    "    r0.x = r1.z*r1.w;\n"
    "    r1.xy = r1.xy*r0.xx;\n"
    "    r1.zw = c0.xw;\n"
    "    r1 = r1 + hg_Params[6];\n"
    "    r0.x = dot(r1, hg_Params[0]);\n"
    "    r0.y = dot(r1, hg_Params[1]);\n"
    "    r0.xy = r0.xy + hg_Params[7].xy;\n"
    "    r0.xy = r0.xy*hg_Params[7].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2865324()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcFisheye");
}

void sub_1B2865334(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28654B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2865504()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28654FCLL);
}

uint64_t std::vector<HGBinding>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[48 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[48 * v13];
    *(_DWORD *)v15 = *(_DWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_OWORD *)v15 + 2) = *(_OWORD *)(a2 + 32);
    v17[2] = v15 + 48;
    std::vector<HGBinding>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<HGBinding>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_DWORD *)v7 = *(_DWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
    v9 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v9;
  return result;
}

void sub_1B2865660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<HGBinding>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *HgcFisheye::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcFisheye [hgc1]");
}

uint64_t HgcFisheye::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcFisheye::Bind(HgcFisheye *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcFisheye *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcFisheye::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int64x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  int32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    v9 = v5;
    do
    {
      if (v6 >= 1)
      {
        v10 = 0;
        v11 = v9;
        do
        {
          v12 = v11;
          v12.i32[3] = 1.0;
          v13 = *(_QWORD *)(a1 + 408);
          v14.i64[0] = v11.i64[0];
          v14.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
          v15 = *(float32x4_t *)(v13 + 96);
          v16 = *(int8x16_t *)(v13 + 112);
          *(int8x8_t *)v12.f32 = vqtbl1_s8(v14, *(int8x8_t *)v16.i8);
          *(int8x8_t *)&v12.u32[2] = vqtbl1_s8(v14, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
          v17 = vmulq_f32(*(float32x4_t *)(v13 + 32), v12);
          v18 = vmulq_f32(v12, *(float32x4_t *)(v13 + 48));
          v19 = vaddq_f32(v18, (float32x4_t)vrev64q_s32((int32x4_t)v18));
          v20 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL);
          v21 = *(int8x16_t *)(v13 + 128);
          v22 = *(float32x4_t *)(v13 + 144);
          v23.i64[0] = vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), vaddq_f32(v17, (float32x4_t)vrev64q_s32((int32x4_t)v17))), (int8x16_t)vaddq_f32(v20, v19)), v15).u64[0];
          *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8);
          v17.i64[1] = v23.i64[0];
          v24 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v13 + 80), v17);
          v19.i64[0] = v23.i64[0];
          v19.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v24, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v5, v24, 0xCuLL)).i64[1];
          v25 = vminq_f32(vrsqrteq_f32(v19), v22);
          v26 = vminq_f32(vmulq_f32(v25, vrsqrtsq_f32(vmulq_f32(v25, v19), v25)), v22);
          v27 = (int64x2_t)vmulq_f32(v26, vrsqrtsq_f32(vmulq_f32(v26, v19), v26));
          v28 = vnegq_f32((float32x4_t)vextq_s8(*(int8x16_t *)(v13 + 64), *(int8x16_t *)(v13 + 64), 4uLL));
          v26.i64[0] = v23.i64[0];
          v23.i64[1] = vdupq_laneq_s64(v27, 1).u64[0];
          v29 = *(float32x4_t *)(v13 + 160);
          v30 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vceqq_f32(v22, v28)), v22), (int8x16_t)v29, (int8x16_t)vrev64q_s32(v23));
          v31 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v30, v16), (int8x16_t)v29);
          v32 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v31, *(float32x4_t *)(v13 + 224)));
          v33 = vsubq_f32(vsubq_f32(v31, v29), vmulq_f32(vmulq_f32(*(float32x4_t *)(v13 + 240), v32), v31));
          v34 = vmulq_f32(v33, v33);
          v35 = vmaxq_f32(vmulq_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v13 + 192), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v13 + 176), v30))), *(float32x4_t *)(v13 + 208)), v32), vmulq_f32(v33, vaddq_f32(*(float32x4_t *)(v13 + 352), vmulq_f32(v33, vaddq_f32(vaddq_f32(*(float32x4_t *)(v13 + 320), vmulq_f32(*(float32x4_t *)(v13 + 336), v33)),
                              vmulq_f32(v34, vaddq_f32(vaddq_f32(*(float32x4_t *)(v13 + 256), vmulq_f32(*(float32x4_t *)(v13 + 272), v33)), vmulq_f32(v34, vaddq_f32(*(float32x4_t *)(v13 + 288), vmulq_f32(*(float32x4_t *)(v13 + 304), v33)))))))))), v28), *(float32x4_t *)(v13 + 368));
          v36 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
          v37 = vsubq_f32(v36, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v36, v35)));
          v38 = vsubq_f32(v35, v37);
          v26.i64[1] = v27.i64[1];
          v39 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v13 + 480), (int8x16_t)vmulq_f32(vaddq_f32(v29, vmulq_f32(v38, vaddq_f32(*(float32x4_t *)(v13 + 448), vmulq_f32(v38, vaddq_f32(vaddq_f32(*(float32x4_t *)(v13 + 416), vmulq_f32(*(float32x4_t *)(v13 + 432), v38)), vmulq_f32(vmulq_f32(v38, v38), vaddq_f32(*(float32x4_t *)(v13 + 384), vmulq_f32(*(float32x4_t *)(v13 + 400), v38)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v13 + 464), vcvtq_s32_f32(v37)), 0x17uLL)), (int8x16_t)v26);
          v40 = vaddq_f32(v15, (float32x4_t)vbslq_s8(*(int8x16_t *)(v13 + 496), (int8x16_t)vmulq_n_f32(v39, vmulq_laneq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 3), v39, 2).f32[0]), (int8x16_t)v29));
          v41 = vmulq_f32(*(float32x4_t *)v13, v40);
          v42 = vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL));
          v43 = vmulq_f32(*(float32x4_t *)(v13 + 16), v40);
          v44 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v45 = vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), (int8x16_t)vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL))), v5);
          v46 = a2[11].i32[0];
          v47 = vaddq_s32(vcvtq_s32_f32(v45), vcltzq_f32(v45));
          v45.i64[0] = vsubq_f32(v45, vcvtq_f32_s32(v47)).u64[0];
          v48 = (float32x4_t *)(*(_QWORD *)&a2[10] + 16 * (v47.i32[0] + v47.i32[1] * (int)v46));
          v49 = vaddq_f32(*v48, vmulq_n_f32(vsubq_f32(v48[1], *v48), v45.f32[0]));
          *(float32x4_t *)(*(_QWORD *)&v7 + v10) = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32(vaddq_f32(v48[v46], vmulq_n_f32(vsubq_f32(v48[(int)v46 + 1], v48[v46]), v45.f32[0])), v49), *(float32x2_t *)v45.f32, 1));
          v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v10 += 16;
        }
        while (16 * v6 != v10);
      }
      v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcFisheye::GetDOD(HgcFisheye *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    HGRectGrow(v6, v5, v7);
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcFisheye::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(DOD, v9, v10);
}

void HgcFisheye::HgcFisheye(HgcFisheye *this)
{
  _QWORD *v2;
  HgcFisheye::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E4A88;
  v3 = (HgcFisheye::State *)operator new();
  v4 = HgcFisheye::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(HgcFisheye *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2865CCC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcFisheye::~HgcFisheye(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E4A88;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4027AB4E27);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcFisheye::~HgcFisheye(this);
  HGObject::operator delete(v1);
}

uint64_t HgcFisheye::SetParameter(HgcFisheye *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  __n128 *v11;
  float *v12;
  float *v13;
  float *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_38;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_38;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a4
        && v10[2].n128_f32[2] == a6
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = a3.n128_u32[0];
      v10[2].n128_f32[1] = a4;
      v10[2].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[32] = a3;
      goto LABEL_38;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a4
        && v11[3].n128_f32[2] == a6
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = a3.n128_u32[0];
      v11[3].n128_f32[1] = a4;
      v11[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[33] = a3;
      goto LABEL_38;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_38;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_38;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcFisheye::GetParameter(HgcFisheye *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[128];
      a3[1] = v6[129];
      a3[2] = v6[130];
      v4 = v6 + 131;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[132];
      a3[1] = v7[133];
      a3[2] = v7[134];
      v4 = v7 + 135;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcFisheye::State::State(HgcFisheye::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_1B3050E10;
  *((_OWORD *)this + 8) = xmmword_1B3050E20;
  *((_OWORD *)this + 9) = xmmword_1B3050E30;
  *((_OWORD *)this + 10) = xmmword_1B304EFF0;
  *((_OWORD *)this + 11) = xmmword_1B3050E40;
  *((_OWORD *)this + 12) = xmmword_1B3050E50;
  *((_OWORD *)this + 13) = xmmword_1B3050E60;
  *((_OWORD *)this + 14) = xmmword_1B3050E70;
  *((_OWORD *)this + 15) = xmmword_1B3050E80;
  *((_OWORD *)this + 16) = xmmword_1B3050E90;
  *((_OWORD *)this + 17) = xmmword_1B3050EA0;
  *((_OWORD *)this + 18) = xmmword_1B3050EB0;
  *((_OWORD *)this + 19) = xmmword_1B3050EC0;
  *((_OWORD *)this + 20) = xmmword_1B3050ED0;
  *((_OWORD *)this + 21) = xmmword_1B3050EE0;
  *((_OWORD *)this + 22) = xmmword_1B3050EF0;
  *((_OWORD *)this + 23) = xmmword_1B3050F00;
  *((_OWORD *)this + 24) = xmmword_1B3050F10;
  *((_OWORD *)this + 25) = xmmword_1B3050F20;
  *((_OWORD *)this + 26) = xmmword_1B3050F30;
  *((_OWORD *)this + 27) = xmmword_1B3050F40;
  *((_OWORD *)this + 28) = xmmword_1B3050F50;
  *((_OWORD *)this + 29) = xmmword_1B3050F60;
  *((_OWORD *)this + 30) = xmmword_1B3050F70;
  *((_OWORD *)this + 31) = xmmword_1B3050F80;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  return result;
}

void std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HGBinding>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<HGBinding>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

uint64_t std::vector<HGBinding>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>,std::reverse_iterator<HGBinding*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 48);
      a3 -= 48;
      *(_DWORD *)(v7 - 48) = v8;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 40) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 32);
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<HGBinding>,std::reverse_iterator<HGBinding*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 48;
  }
}

uint64_t std::__split_buffer<HGBinding>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<HGBinding>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<HGBinding>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

const char *HgcPageCurlBackground::GetProgram(HgcPageCurlBackground *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000a7f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const half4 c1 = half4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
             "    const half4 c2 = half4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    s0.zw = s0.xy - hg_Params[2].xy;\n"
             "    s1.w = dot(s0.zw, hg_Params[3].xy);\n"
             "    s0.x = -s1.w/hg_Params[4].x;\n"
             "    s1.x = select(float(c0.x), s0.x, s1.w < 0.00000h);\n"
             "    s0.x = float(c0.y) - s1.x;\n"
             "    s0.x = -fabs(s0.x) + float(c0.y);\n"
             "    s0.x = fmin(s0.x, float(c0.z));\n"
             "    s0.x = fmax(s0.x, -float(c0.z));\n"
             "    s0.y = abs(s0.x);\n"
             "    s1.z = s0.y*float(c0.w) + float(c1.z);\n"
             "    s1.y = float(c0.y) - s0.y;\n"
             "    s1.z = s0.y*s1.z + float(c1.x);\n"
             "    s0.y = s0.y*s1.z + float(c1.y);\n"
             "    s1.z = fmax(-s1.x, float(c0.x));\n"
             "    s1.y = sqrt(s1.y);\n"
             "    s0.y = -s1.y*s0.y + float(c1.w);\n"
             "    s0.x = float(s0.x < float(c0.x));\n"
             "    s0.x = s0.x*s0.y;\n"
             "    s1.y = s0.x*float(c2.y) + -s0.y;\n"
             "    s0.y = hg_Params[3].x;\n"
             "    s0.x = -hg_Params[3].y;\n"
             "    s0.w = dot(s0.zw, s0.xy);\n"
             "    s0.z = s1.y*hg_Params[4].x;\n"
             "    s0.z = select(s1.w, s0.z, s1.w < 0.00000h);\n"
             "    s1.y = -s1.x*s1.x + float(c0.y);\n"
             "    s0.y = -hg_Params[3].y;\n"
             "    s0.x = hg_Params[3].x;\n"
             "    s0.xy = s0.zw*s0.xy;\n"
             "    s0.w = dot(s0.zw, hg_Params[3].yx);\n"
             "    s0.z = dot(s0.xy, 1.00000f);\n"
             "    s0.xy = s0.zw + hg_Params[2].xy;\n"
             "    s0.xy = s0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    s0.xy = s0.xy + hg_Params[6].xy;\n"
             "    s0.xy = s0.xy*hg_Params[6].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    s1.z = s1.z*s1.z;\n"
             "    s1.z = float(r0.w)*s1.z;\n"
             "    s0.xyz = s1.zzz*hg_Params[5].xyz;\n"
             "    s1.z = sqrt(fabs(s1.y));\n"
             "    s1.z = select(float(c0.y), s1.z, s1.w < 0.00000h);\n"
             "    s1.y = dot(float2(c2.xz), s1.xz);\n"
             "    s1.z = s1.y + float(c2.z);\n"
             "    s1.x = float(c0.y) - hg_Params[4].x;\n"
             "    s1.y = -s1.x - hg_Params[4].x;\n"
             "    s1.z = fmax(s1.z, float(c0.x));\n"
             "    s1.y = s1.y - float(c0.y);\n"
             "    s1.x = s1.w - s1.x;\n"
             "    s1.x = clamp(s1.x/s1.y, 0.00000f, 1.00000f);\n"
             "    s1.y = -s1.x*float(c2.y) + float(c2.w);\n"
             "    s1.x = s1.x*s1.x;\n"
             "    s2.w = float(r0.w);\n"
             "    s2.xyz = float3(r0.xyz)*s1.zzz + s0.xyz;\n"
             "    s1.x = s1.x*s1.y;\n"
             "    output.color0 = s1.xxxx*-s2 + s2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=62f0f9f1:87a6b438:db8662bf:b2986826\n"
             "//SIG=00400000:00000000:00000000:00000001:0003:0007:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000009a7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const float4 c1 = float4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
             "    const float4 c2 = float4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    r0.zw = r0.xy - hg_Params[2].xy;\n"
             "    r1.w = dot(r0.zw, hg_Params[3].xy);\n"
             "    r0.x = -r1.w/hg_Params[4].x;\n"
             "    r1.x = select(c0.x, r0.x, r1.w < 0.00000f);\n"
             "    r0.x = c0.y - r1.x;\n"
             "    r0.x = -fabs(r0.x) + c0.y;\n"
             "    r0.x = fmin(r0.x, c0.z);\n"
             "    r0.x = fmax(r0.x, -c0.z);\n"
             "    r0.y = abs(r0.x);\n"
             "    r1.z = r0.y*c0.w + c1.z;\n"
             "    r1.y = c0.y - r0.y;\n"
             "    r1.z = r0.y*r1.z + c1.x;\n"
             "    r0.y = r0.y*r1.z + c1.y;\n"
             "    r1.z = fmax(-r1.x, c0.x);\n"
             "    r1.y = sqrt(r1.y);\n"
             "    r0.y = -r1.y*r0.y + c1.w;\n"
             "    r0.x = float(r0.x < c0.x);\n"
             "    r0.x = r0.x*r0.y;\n"
             "    r1.y = r0.x*c2.y + -r0.y;\n"
             "    r0.y = hg_Params[3].x;\n"
             "    r0.x = -hg_Params[3].y;\n"
             "    r0.w = dot(r0.zw, r0.xy);\n"
             "    r0.z = r1.y*hg_Params[4].x;\n"
             "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
             "    r1.y = -r1.x*r1.x + c0.y;\n"
             "    r0.y = -hg_Params[3].y;\n"
             "    r0.x = hg_Params[3].x;\n"
             "    r0.xy = r0.zw*r0.xy;\n"
             "    r0.w = dot(r0.zw, hg_Params[3].yx);\n"
             "    r0.z = dot(r0.xy, 1.00000f);\n"
             "    r0.xy = r0.zw + hg_Params[2].xy;\n"
             "    r0.xy = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    r0.xy = r0.xy + hg_Params[6].xy;\n"
             "    r0.xy = r0.xy*hg_Params[6].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r1.z = r1.z*r1.z;\n"
             "    r1.z = r0.w*r1.z;\n"
             "    r2.xyz = r1.zzz*hg_Params[5].xyz;\n"
             "    r1.z = sqrt(fabs(r1.y));\n"
             "    r1.z = select(c0.y, r1.z, r1.w < 0.00000f);\n"
             "    r1.y = dot(c2.xz, r1.xz);\n"
             "    r1.z = r1.y + c2.z;\n"
             "    r1.x = c0.y - hg_Params[4].x;\n"
             "    r1.y = -r1.x - hg_Params[4].x;\n"
             "    r1.z = fmax(r1.z, c0.x);\n"
             "    r1.y = r1.y - c0.y;\n"
             "    r1.x = r1.w - r1.x;\n"
             "    r1.x = clamp(r1.x/r1.y, 0.00000f, 1.00000f);\n"
             "    r1.y = -r1.x*c2.y + c2.w;\n"
             "    r1.x = r1.x*r1.x;\n"
             "    r0.xyz = r0.xyz*r1.zzz + r2.xyz;\n"
             "    r1.x = r1.x*r1.y;\n"
             "    output.color0 = r1.xxxx*-r0 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b51a5692:9e68dfea:987ceeb9:6c3395b2\n"
             "//SIG=00000000:00000000:00000000:00000000:0003:0007:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a83\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
           "    const highp vec4 c1 = vec4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
           "    const highp vec4 c2 = vec4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
           "    r0.zw = r0.xy - hg_ProgramLocal2.xy;\n"
           "    r1.w = dot(r0.zw, hg_ProgramLocal3.xy);\n"
           "    r0.x = -r1.w/hg_ProgramLocal4.x;\n"
           "    r1.x = r1.w < 0.00000 ? r0.x : c0.x;\n"
           "    r0.x = c0.y - r1.x;\n"
           "    r0.x = -abs(r0.x) + c0.y;\n"
           "    r0.x = min(r0.x, c0.z);\n"
           "    r0.x = max(r0.x, -c0.z);\n"
           "    r0.y = abs(r0.x);\n"
           "    r1.z = r0.y*c0.w + c1.z;\n"
           "    r1.y = c0.y - r0.y;\n"
           "    r1.z = r0.y*r1.z + c1.x;\n"
           "    r0.y = r0.y*r1.z + c1.y;\n"
           "    r1.z = max(-r1.x, c0.x);\n"
           "    r1.y = sqrt(r1.y);\n"
           "    r0.y = -r1.y*r0.y + c1.w;\n"
           "    r0.x = float(r0.x < c0.x);\n"
           "    r0.x = r0.x*r0.y;\n"
           "    r1.y = r0.x*c2.y + -r0.y;\n"
           "    r0.y = hg_ProgramLocal3.x;\n"
           "    r0.x = -hg_ProgramLocal3.y;\n"
           "    r0.w = dot(r0.zw, r0.xy);\n"
           "    r0.z = r1.y*hg_ProgramLocal4.x;\n"
           "    r0.z = r1.w < 0.00000 ? r0.z : r1.w;\n"
           "    r1.y = -r1.x*r1.x + c0.y;\n"
           "    r0.y = -hg_ProgramLocal3.y;\n"
           "    r0.x = hg_ProgramLocal3.x;\n"
           "    r0.xy = r0.zw*r0.xy;\n"
           "    r0.w = dot(r0.zw, hg_ProgramLocal3.yx);\n"
           "    r0.z = dot(r0.xy, vec2(1.00000));\n"
           "    r0.xy = r0.zw + hg_ProgramLocal2.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal6.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal6.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r1.z = r1.z*r1.z;\n"
           "    r1.z = r0.w*r1.z;\n"
           "    r2.xyz = r1.zzz*hg_ProgramLocal5.xyz;\n"
           "    r1.z = sqrt(abs(r1.y));\n"
           "    r1.z = r1.w < 0.00000 ? r1.z : c0.y;\n"
           "    r1.y = dot(c2.xz, r1.xz);\n"
           "    r1.z = r1.y + c2.z;\n"
           "    r1.x = c0.y - hg_ProgramLocal4.x;\n"
           "    r1.y = -r1.x - hg_ProgramLocal4.x;\n"
           "    r1.z = max(r1.z, c0.x);\n"
           "    r1.y = r1.y - c0.y;\n"
           "    r1.x = r1.w - r1.x;\n"
           "    r1.x = clamp(r1.x/r1.y, 0.00000, 1.00000);\n"
           "    r1.y = -r1.x*c2.y + c2.w;\n"
           "    r1.x = r1.x*r1.x;\n"
           "    r0.xyz = r0.xyz*r1.zzz + r2.xyz;\n"
           "    r1.x = r1.x*r1.y;\n"
           "    gl_FragColor = r1.xxxx*-r0 + r0;\n"
           "}\n"
           "//MD5=aa701ea4:29eb492c:c2092974:03ade4f5\n"
           "//SIG=00000000:00000000:00000000:00000000:0003:0007:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPageCurlBackground::InitProgramDescriptor(HgcPageCurlBackground *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPageCurlBackground_hgc_visible", "//Metal1.0     \n//LEN=00000008ef\n[[ visible ]] FragmentOut HgcPageCurlBackground_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
    "    const float4 c1 = float4(-0.2121143937, 1.570728779, 0.07426100224, 1.570796371);\n"
    "    const float4 c2 = float4(-0.5000000000, 2.000000000, 0.5000000000, 3.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
    "    r0.zw = r0.xy - hg_Params[2].xy;\n"
    "    r1.w = dot(r0.zw, hg_Params[3].xy);\n"
    "    r0.x = -r1.w/hg_Params[4].x;\n"
    "    r1.x = select(c0.x, r0.x, r1.w < 0.00000f);\n"
    "    r0.x = c0.y - r1.x;\n"
    "    r0.x = -fabs(r0.x) + c0.y;\n"
    "    r0.x = fmin(r0.x, c0.z);\n"
    "    r0.x = fmax(r0.x, -c0.z);\n"
    "    r0.y = abs(r0.x);\n"
    "    r1.z = r0.y*c0.w + c1.z;\n"
    "    r1.y = c0.y - r0.y;\n"
    "    r1.z = r0.y*r1.z + c1.x;\n"
    "    r0.y = r0.y*r1.z + c1.y;\n"
    "    r1.z = fmax(-r1.x, c0.x);\n"
    "    r1.y = sqrt(r1.y);\n"
    "    r0.y = -r1.y*r0.y + c1.w;\n"
    "    r0.x = float(r0.x < c0.x);\n"
    "    r0.x = r0.x*r0.y;\n"
    "    r1.y = r0.x*c2.y + -r0.y;\n"
    "    r0.y = hg_Params[3].x;\n"
    "    r0.x = -hg_Params[3].y;\n"
    "    r0.w = dot(r0.zw, r0.xy);\n"
    "    r0.z = r1.y*hg_Params[4].x;\n"
    "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
    "    r1.y = -r1.x*r1.x + c0.y;\n"
    "    r0.y = -hg_Params[3].y;\n"
    "    r0.x = hg_Params[3].x;\n"
    "    r0.xy = r0.zw*r0.xy;\n"
    "    r0.w = dot(r0.zw, hg_Params[3].yx);\n"
    "    r0.z = dot(r0.xy, 1.00000f);\n"
    "    r0.xy = r0.zw + hg_Params[2].xy;\n"
    "    r0.xy = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
    "    r0.xy = r0.xy + hg_Params[6].xy;\n"
    "    r0.xy = r0.xy*hg_Params[6].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r1.z = r1.z*r1.z;\n"
    "    r1.z = r0.w*r1.z;\n"
    "    r2.xyz = r1.zzz*hg_Params[5].xyz;\n"
    "    r1.z = sqrt(fabs(r1.y));\n"
    "    r1.z = select(c0.y, r1.z, r1.w < 0.00000f);\n"
    "    r1.y = dot(c2.xz, r1.xz);\n"
    "    r1.z = r1.y + c2.z;\n"
    "    r1.x = c0.y - hg_Params[4].x;\n"
    "    r1.y = -r1.x - hg_Params[4].x;\n"
    "    r1.z = fmax(r1.z, c0.x);\n"
    "    r1.y = r1.y - c0.y;\n"
    "    r1.x = r1.w - r1.x;\n"
    "    r1.x = clamp(r1.x/r1.y, 0.00000f, 1.00000f);\n"
    "    r1.y = -r1.x*c2.y + c2.w;\n"
    "    r1.x = r1.x*r1.x;\n"
    "    r0.xyz = r0.xyz*r1.zzz + r2.xyz;\n"
    "    r1.x = r1.x*r1.y;\n"
    "    output.color0 = r1.xxxx*-r0 + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2866570()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPageCurlBackground");
}

void sub_1B2866580(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2866700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2866750()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2866748);
}

_QWORD *HgcPageCurlBackground::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPageCurlBackground [hgc1]");
}

uint64_t HgcPageCurlBackground::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPageCurlBackground::Bind(HgcPageCurlBackground *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcPageCurlBackground *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPageCurlBackground::RenderTile(HgcPageCurlBackground *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x8_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  uint64_t v111;
  int32x4_t v112;
  float32x2_t v113;
  float32x4_t *v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t v117;
  int32x4_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int8x16_t v145;
  __int128 v146;
  int8x16_t v147;
  int8x16_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t *v178;
  uint64_t v179;
  float32x4_t v180;
  int32x4_t v181;
  float32x4_t v182;
  int8x16_t v183;
  int32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t v196;
  float32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  float32x4_t v204;
  int8x16_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int32x4_t v213;
  float32x4_t v214;
  int32x4_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  uint64_t v227;
  float32x4_t v228;
  uint64_t v229;
  int32x4_t v230;
  float32x2_t v231;
  float32x4_t *v232;
  float32x4_t v233;
  int8x16_t v234;
  float32x4_t v235;
  int32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  int32x4_t v247;
  int8x16_t v248;
  int8x16_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x4_t v253;
  int8x16_t v254;
  int8x16_t v255;
  float32x4_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  int8x16_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x4_t v265;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcPageCurlBackground *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(int8x16_t *)(v19 + 16);
          v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v22 = *(float32x4_t *)(v19 + 32);
          v23 = *(int32x4_t *)(v19 + 48);
          v24 = vsubq_f32(vaddq_f32(vmulq_f32(v17, (float32x4_t)v20), v21), v22);
          v25 = vsubq_f32(vaddq_f32(vmulq_f32(v18, (float32x4_t)v20), v21), v22);
          v26 = (int8x16_t)vmulq_f32((float32x4_t)v23, v24);
          v27 = (int8x16_t)vmulq_f32((float32x4_t)v23, v25);
          v28 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v26, v26, 4uLL), (float32x4_t)vextq_s8(v26, v26, 8uLL));
          v29 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v27, v27, 4uLL), (float32x4_t)vextq_s8(v27, v27, 8uLL));
          v30 = *(int8x16_t *)(v19 + 64);
          v32 = *(float32x4_t *)(v19 + 96);
          v31 = *(float32x4_t *)(v19 + 112);
          v33 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v30), v32), v31);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v33, vrecpsq_f32((float32x4_t)v30, v33)), v32), v31);
          v35 = vmulq_f32(v34, vrecpsq_f32((float32x4_t)v30, v34));
          v36 = (int8x16_t)vmulq_f32(v35, vnegq_f32((float32x4_t)vdupq_laneq_s32(v28, 3)));
          v37 = (int8x16_t)vmulq_f32(v35, vnegq_f32((float32x4_t)vdupq_laneq_s32(v29, 3)));
          v38 = *(int8x16_t *)(v19 + 128);
          v39 = *(int8x16_t *)(v19 + 144);
          v37.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL)), v37, v38).u64[0];
          v40.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL)), v36, v38).u64[0];
          v40.i64[1] = v28.i64[1];
          v37.i64[1] = v29.i64[1];
          v29.i64[0] = *(_QWORD *)(v19 + 160);
          v41 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.i8)));
          *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v37.i8)));
          v42 = *(float32x4_t *)(v19 + 176);
          v43 = *(float32x4_t *)(v19 + 192);
          *(float32x2_t *)v44.i8 = vmax_f32(vmin_f32(v41, *(float32x2_t *)v42.f32), *(float32x2_t *)v43.f32);
          *(float32x2_t *)v28.i8 = vmax_f32(vmin_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v42.f32), *(float32x2_t *)v43.f32);
          v45 = *(int8x16_t *)(v19 + 208);
          v44.i64[1] = v24.i64[0];
          *(int8x8_t *)v24.f32 = vqtbl1_s8(v44, *(int8x8_t *)v45.i8);
          v46 = (int8x8_t)vextq_s8(v45, v45, 8uLL).u64[0];
          v28.i64[1] = v25.i64[0];
          *(int8x8_t *)v25.f32 = vqtbl1_s8((int8x16_t)v28, *(int8x8_t *)v45.i8);
          v45.i64[0] = *(_QWORD *)(v19 + 224);
          *(int8x8_t *)v47.f32 = vand_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v24.f32);
          *(int8x8_t *)&v47.u32[2] = vqtbl1_s8(v44, v46);
          *(int8x8_t *)v45.i8 = vand_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v25.f32);
          v45.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v28, v46);
          *(int8x8_t *)v44.i8 = vext_s8(*(int8x8_t *)&v47.u32[2], *(int8x8_t *)v47.f32, 4uLL);
          v44.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v47.f32, *(int8x8_t *)&v47.u32[2], 4uLL);
          *(int8x8_t *)v28.i8 = vext_s8((int8x8_t)v45.u64[1], *(int8x8_t *)v45.i8, 4uLL);
          v28.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v45.i8, (int8x8_t)v45.u64[1], 4uLL);
          v48 = (int8x16_t)vaddq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)v38, (float32x4_t)v28));
          v50 = *(int8x16_t *)(v19 + 240);
          v49 = *(int8x16_t *)(v19 + 256);
          v51 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, v47), vbslq_s8(v50, (int8x16_t)vaddq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)v38, (float32x4_t)v44)), v40));
          v52 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, (float32x4_t)v45), vbslq_s8(v50, v48, v37));
          v53 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vaddq_f32(v32, vmulq_lane_f32((float32x4_t)v51, *(float32x2_t *)v47.f32, 1)), v51);
          v54 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vaddq_f32(v32, vmulq_lane_f32((float32x4_t)v52, *(float32x2_t *)v45.i8, 1)), v52);
          v55 = (float32x4_t)vbslq_s8(v49, (int8x16_t)vaddq_f32(v42, vmulq_laneq_f32(v47, v53, 2)), (int8x16_t)v47);
          v56 = (float32x4_t)vbslq_s8(v49, (int8x16_t)vaddq_f32(v42, vmulq_laneq_f32((float32x4_t)v45, v54, 2)), v45);
          v57 = (int8x16_t)vnegq_f32(v53);
          v58 = (int8x16_t)vnegq_f32(v54);
          v59 = (float32x4_t)vextq_s8(v58, v58, 8uLL);
          v61 = *(float32x4_t *)(v19 + 272);
          v60 = *(int8x16_t *)(v19 + 288);
          v62 = vbslq_s8(v50, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v57, v57, 8uLL), v61), v51);
          v63 = vbslq_s8(v50, (int8x16_t)vmaxq_f32(v59, v61), v52);
          v64 = vminq_f32(vrsqrteq_f32((float32x4_t)v62), v61);
          v65 = vminq_f32(vrsqrteq_f32((float32x4_t)v63), v61);
          v66 = vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v64, (float32x4_t)v62), v64)), v61);
          v67 = vminq_f32(vmulq_f32(v65, vrsqrtsq_f32(vmulq_f32(v65, (float32x4_t)v63), v65)), v61);
          v68 = vbslq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)vbslq_s8(v49, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v66, vrsqrtsq_f32(vmulq_f32(v66, (float32x4_t)v62), v66)), v61), (float32x4_t)v62), v62), v55)), (int8x16_t)v47);
          v69 = vbslq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v39, vmulq_f32((float32x4_t)vbslq_s8(v49, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v67, vrsqrtsq_f32(vmulq_f32(v67, (float32x4_t)v63), v67)), v61), (float32x4_t)v63), v63), v56)), v45);
          v70 = (float32x4_t)vbslq_s8(v60, vandq_s8(v39, (int8x16_t)vcgtq_f32(v61, (float32x4_t)v68)), v68);
          v71 = (float32x4_t)vbslq_s8(v60, vandq_s8(v39, (int8x16_t)vcgtq_f32(v61, (float32x4_t)v69)), v69);
          v72 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_lane_f32(v70, *(float32x2_t *)v70.f32, 1), v68);
          v73 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vmulq_lane_f32(v71, *(float32x2_t *)v71.f32, 1), v69);
          v74 = (int32x4_t)vbslq_s8(v49, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v38, v72.f32[0]), v72), v62);
          v75 = (float32x4_t)vrev64q_s32(v23);
          v47.i64[0] = v75.i64[0];
          v47.i64[1] = v72.i64[1];
          v76 = (int32x4_t)vbslq_s8(v49, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v38, v73.f32[0]), v73), v63);
          v68.i64[0] = v75.i64[0];
          v68.i64[1] = v73.i64[1];
          v77 = (int32x4_t)vnegq_f32((float32x4_t)v23);
          v78 = (int8x16_t)vrev64q_s32(v77);
          v79 = vbslq_s8(v60, v78, (int8x16_t)v47);
          v80 = vbslq_s8(v60, v78, v68);
          v81 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), (float32x4_t)v79);
          v82 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v80, v80, 8uLL), (float32x4_t)v80);
          v83 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v81, v81, 4uLL), (float32x4_t)vextq_s8(v81, v81, 8uLL));
          v84 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v82, v82, 4uLL), (float32x4_t)vextq_s8(v82, v82, 8uLL));
          v85 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
          v86 = vbslq_s8(v50, (int8x16_t)vmulq_lane_f32(v85, *(float32x2_t *)v74.i8, 1), v83);
          v87 = vbslq_s8(v50, (int8x16_t)vmulq_lane_f32(v85, *(float32x2_t *)v76.i8, 1), v84);
          v88 = (int8x16_t)vrev64q_s32(v74);
          v89 = (int8x16_t)vrev64q_s32(v76);
          v90 = vbslq_s8(v50, vbslq_s8((int8x16_t)vcgtq_f32(v61, (float32x4_t)v88), v86, v88), v83);
          v83.i64[0] = v77.i64[0];
          v83.i64[1] = v90.i64[1];
          v77.i64[1] = vbslq_s8(v50, vbslq_s8((int8x16_t)vcgtq_f32(v61, *(float32x4_t *)&v89), v87, v89), v84).i64[1];
          v91 = vbslq_s8(v60, (int8x16_t)v23, v83);
          v92 = vbslq_s8(v60, (int8x16_t)v23, (int8x16_t)v77);
          v93 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v91, 1), (float32x4_t)v91);
          v94 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v92, 1), (float32x4_t)v92);
          v95 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vextq_s8(v91, v93, 8uLL));
          v96 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vextq_s8(v92, v94, 8uLL));
          v97 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v95, v95, 4uLL), (float32x4_t)vdupq_lane_s64(v95.i64[0], 0));
          v98 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v96, v96, 4uLL), (float32x4_t)vdupq_lane_s64(v96.i64[0], 0));
          v99 = (float32x4_t)vextq_s8(v97, v93, 8uLL);
          v100.i64[0] = vextq_s8(v97, v93, 0xCuLL).u64[0];
          *(int8x8_t *)v75.f32 = vext_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), 4uLL);
          v93.i64[1] = v97.i64[1];
          v101 = (float32x4_t)vextq_s8(v98, v94, 8uLL);
          v102.i64[0] = vextq_s8(v98, v94, 0xCuLL).u64[0];
          v94.i64[1] = v98.i64[1];
          v100.i64[1] = v75.i64[0];
          *(int8x8_t *)&v102.u32[2] = vext_s8(*(int8x8_t *)v94.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL), 4uLL);
          v103 = vbslq_s8(v50, (int8x16_t)vaddq_f32(v99, v100), v93);
          v104 = vbslq_s8(v50, (int8x16_t)vaddq_f32(v101, v102), v94);
          v105 = vaddq_f32(v22, (float32x4_t)vextq_s8(v103, v103, 8uLL));
          v106 = vaddq_f32(v22, (float32x4_t)vextq_s8(v104, v104, 8uLL));
          v107 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          v108 = vaddq_f32(v107, vmulq_f32(*(float32x4_t *)v19, v106));
          v109 = *((int *)a2 + 22);
          v110 = vsubq_f32(vaddq_f32(v107, vmulq_f32(*(float32x4_t *)v19, v105)), v9);
          v111 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v112 = vaddq_s32(vcvtq_s32_f32(v110), vcltzq_f32(v110));
            v113 = (float32x2_t)vsubq_f32(v110, vcvtq_f32_s32(v112)).u64[0];
            v114 = (float32x4_t *)(v111 + 16 * (v112.i32[0] + v112.i32[1] * (int)v109));
            v115 = vaddq_f32(*v114, vmulq_n_f32(vsubq_f32(v114[1], *v114), v113.f32[0]));
            v116 = (int8x16_t)vaddq_f32(v115, vmulq_lane_f32(vsubq_f32(vaddq_f32(v114[v109], vmulq_n_f32(vsubq_f32(v114[(int)v109 + 1], v114[v109]), v113.f32[0])), v115), v113, 1));
            v117 = vsubq_f32(v108, v9);
            v118 = vaddq_s32(vcvtq_s32_f32(v117), vcltzq_f32(v117));
            v117.i64[0] = vsubq_f32(v117, vcvtq_f32_s32(v118)).u64[0];
            v119 = (float32x4_t *)(v111 + 16 * (v118.i32[0] + v118.i32[1] * (int)v109));
            v120 = vaddq_f32(*v119, vmulq_n_f32(vsubq_f32(v119[1], *v119), v117.f32[0]));
            v121 = (int8x16_t)vaddq_f32(v120, vmulq_lane_f32(vsubq_f32(vaddq_f32(v119[v109], vmulq_n_f32(vsubq_f32(v119[(int)v109 + 1], v119[v109]), v117.f32[0])), v120), *(float32x2_t *)v117.f32, 1));
          }
          else
          {
            v122 = vaddq_f32(v110, v13);
            v123 = vcvtq_s32_f32(v122);
            v122.i64[0] = vaddq_s32(v123, vcgtq_f32(vcvtq_f32_s32(v123), v122)).u64[0];
            v116 = *(int8x16_t *)(v111 + 16 * (v122.i32[0] + v122.i32[1] * (int)v109));
            v124 = vaddq_f32(vsubq_f32(v108, v9), v13);
            v125 = vcvtq_s32_f32(v124);
            v124.i64[0] = vaddq_s32(v125, vcgtq_f32(vcvtq_f32_s32(v125), v124)).u64[0];
            v121 = *(int8x16_t *)(v111 + 16 * (v124.i32[0] + v124.i32[1] * (int)v109));
          }
          v126 = vmvnq_s8(v50);
          v127 = vmvnq_s8(v49);
          v128 = vmvnq_s8(v60);
          v129 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, vmulq_n_f32((float32x4_t)v88, *(float *)v74.i32)), v62);
          v130 = vbslq_s8(v49, (int8x16_t)vsubq_f32(v43, vmulq_n_f32((float32x4_t)v89, *(float *)v76.i32)), v63);
          v131 = vandq_s8(v129, v126);
          v132 = vandq_s8(v130, v126);
          v133 = vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v129, (float32x4_t)v129)), v131), (float32x4_t)v116, 3)), v131);
          v134 = vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v130, (float32x4_t)v130)), v132), (float32x4_t)v121, 3)), v132);
          v135 = *(float32x4_t *)(v19 + 80);
          v136 = vmulq_laneq_f32(v135, (float32x4_t)v133, 2);
          v137 = vabsq_f32((float32x4_t)vextq_s8(v133, v133, 0xCuLL));
          v138 = vabsq_f32((float32x4_t)vextq_s8(v134, v134, 0xCuLL));
          v139 = vminq_f32(vrsqrteq_f32(v137), v31);
          v140 = vminq_f32(vrsqrteq_f32(v138), v31);
          v141 = vminq_f32(vmulq_f32(v139, vrsqrtsq_f32(vmulq_f32(v139, v137), v139)), v31);
          v142 = vminq_f32(vmulq_f32(v140, vrsqrtsq_f32(vmulq_f32(v140, v138), v140)), v31);
          v143 = (int32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32(v137, vminq_f32(vmulq_f32(v141, vrsqrtsq_f32(vmulq_f32(v137, v141), v141)), v31))), v131);
          v144 = (int32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32(v138, vminq_f32(vmulq_f32(v142, vrsqrtsq_f32(vmulq_f32(v138, v142), v142)), v31))), v132);
          v145 = *(int8x16_t *)(v19 + 304);
          v146 = *(_OWORD *)(v19 + 320);
          v147 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v61, (float32x4_t)vrev64q_s32(v143)), (int8x16_t)v143, v145), v50), v131);
          v148 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v61, (float32x4_t)vrev64q_s32(v144)), (int8x16_t)v144, v145), v50), v132);
          v144.i64[0] = vextq_s8(v148, v148, 8uLL).u64[0];
          *(float32x2_t *)v143.i8 = vmul_f32(*(float32x2_t *)v145.i8, (float32x2_t)vqtbl1_s8(v147, *(int8x8_t *)&v146));
          *(float32x2_t *)v141.f32 = vmul_f32(*(float32x2_t *)v145.i8, (float32x2_t)vqtbl1_s8(v148, *(int8x8_t *)&v146));
          *(float32x2_t *)v143.i8 = vadd_f32(*(float32x2_t *)v143.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.i8, 0));
          v143.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v143.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), 4uLL);
          v144.u64[1] = (unint64_t)vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v141.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v141.f32, 0)), *(int8x8_t *)v144.i8, 4uLL);
          v150 = *(float32x4_t *)(v19 + 336);
          v149 = *(float32x4_t *)(v19 + 352);
          v151 = vorrq_s8(vandq_s8(v50, (int8x16_t)vaddq_f32(v150, (float32x4_t)v143)), vandq_s8(v147, v126));
          v152 = vorrq_s8(vandq_s8(v50, (int8x16_t)vaddq_f32(v150, (float32x4_t)v144)), vandq_s8(v148, v126));
          v143.i64[0] = vsubq_f32(v150, (float32x4_t)v30).u64[0];
          v144.i64[0] = v143.i64[0];
          v144.i64[1] = v151.i64[1];
          v143.i64[1] = v152.i64[1];
          v153 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v144), (float32x4_t)v30)), v49), vandq_s8((int8x16_t)v144, v127));
          v154 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v143), (float32x4_t)v30)), v49), vandq_s8((int8x16_t)v143, v127));
          v155 = vorrq_s8(vandq_s8(v153, v126), vandq_s8(v50, (int8x16_t)vmaxq_f32((float32x4_t)v153, v149)));
          v156 = vorrq_s8(vandq_s8(v154, v126), vandq_s8(v50, (int8x16_t)vmaxq_f32((float32x4_t)v154, v149)));
          v157 = *(int8x16_t *)(v19 + 368);
          v158 = *(int8x16_t *)(v19 + 384);
          v159 = vorrq_s8(vandq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v155, (float32x4_t)v157)), vandq_s8(v155, v127));
          v160 = vorrq_s8(vandq_s8(v49, (int8x16_t)vsubq_f32((float32x4_t)v156, (float32x4_t)v157)), vandq_s8(v156, v127));
          v161 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v159, v159, 0xCuLL), (float32x4_t)v159)), vandq_s8(v159, v128));
          v162 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v160, v160, 0xCuLL), (float32x4_t)v160)), vandq_s8(v160, v128));
          v163 = (int8x16_t)vrev64q_s32((int32x4_t)v161);
          v164 = (float32x4_t)vrev64q_s32((int32x4_t)v162);
          v165 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v163), v32), v31);
          v166 = vminq_f32(vmaxq_f32(vrecpeq_f32(v164), v32), v31);
          v167 = vminq_f32(vmaxq_f32(vmulq_f32(v165, vrecpsq_f32((float32x4_t)v163, v165)), v32), v31);
          v168 = vminq_f32(vmaxq_f32(vmulq_f32(v166, vrecpsq_f32(v164, v166)), v32), v31);
          v169.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v167, vrecpsq_f32((float32x4_t)v163, v167)), v161), (float32x4_t)v157), v150).u64[0];
          v168.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v168, vrecpsq_f32(v164, v168)), v162), (float32x4_t)v157), v150).u64[0];
          v157.i64[0] = v169.i64[0];
          v157.i64[1] = v161.i64[1];
          v163.i64[0] = v168.i64[0];
          v163.i64[1] = v162.i64[1];
          v169.i64[1] = vdupq_laneq_s64((int64x2_t)v161, 1).u64[0];
          v168.i64[1] = vdupq_laneq_s64((int64x2_t)v162, 1).u64[0];
          v170 = (int8x16_t)vsubq_f32(v150, vmulq_f32((float32x4_t)v38, (float32x4_t)vrev64q_s32(v169)));
          v171 = (int8x16_t)vsubq_f32(v150, vmulq_f32((float32x4_t)v38, (float32x4_t)vrev64q_s32((int32x4_t)v168)));
          v172 = vorrq_s8(vandq_s8(v49, v170), vandq_s8(v157, v127));
          v173 = vorrq_s8(vandq_s8(v49, v171), vandq_s8(v163, v127));
          v174 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vmulq_f32((float32x4_t)v172, (float32x4_t)v172)), vandq_s8(v172, v128));
          v175 = (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vmulq_f32((float32x4_t)v173, (float32x4_t)v173)), vandq_s8(v173, v128));
          v176 = (float32x4_t)vbslq_s8(v158, v116, (int8x16_t)vaddq_f32(v136, vmulq_laneq_f32((float32x4_t)v116, v174, 2)));
          v177 = (float32x4_t)vbslq_s8(v158, v121, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v135, (float32x4_t)v134, 2), vmulq_laneq_f32((float32x4_t)v121, v175, 2)));
          v178 = (float32x4_t *)(v11 + 16 * v15);
          *v178 = vsubq_f32(v176, vmulq_n_f32(v176, vmulq_lane_f32(v174, *(float32x2_t *)v174.f32, 1).f32[0]));
          v178[1] = vsubq_f32(v177, vmulq_n_f32(v177, vmulq_lane_f32(v175, *(float32x2_t *)v175.f32, 1).f32[0]));
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v179 = *((_QWORD *)this + 51);
        v180 = *(float32x4_t *)(v179 + 32);
        v181 = *(int32x4_t *)(v179 + 48);
        v182 = vsubq_f32(vaddq_f32(vmulq_f32(v17, *(float32x4_t *)(v179 + 16)), (float32x4_t)vextq_s8(*(int8x16_t *)(v179 + 16), *(int8x16_t *)(v179 + 16), 8uLL)), v180);
        v183 = (int8x16_t)vmulq_f32((float32x4_t)v181, v182);
        v184 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v183, v183, 4uLL), (float32x4_t)vextq_s8(v183, v183, 8uLL));
        v185 = *(float32x4_t *)(v179 + 64);
        v186 = *(float32x4_t *)(v179 + 96);
        v187 = *(float32x4_t *)(v179 + 112);
        v188 = vminq_f32(vmaxq_f32(vrecpeq_f32(v185), v186), v187);
        v189 = vminq_f32(vmaxq_f32(vmulq_f32(v188, vrecpsq_f32(v185, v188)), v186), v187);
        v190 = (int8x16_t)vmulq_f32(vmulq_f32(v189, vrecpsq_f32(v185, v189)), vnegq_f32((float32x4_t)vdupq_laneq_s32(v184, 3)));
        v191 = *(int8x16_t *)(v179 + 128);
        v192 = *(int8x16_t *)(v179 + 144);
        v193.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v191, (float32x4_t)vextq_s8((int8x16_t)v184, (int8x16_t)v184, 0xCuLL)), v190, v191).u64[0];
        v193.i64[1] = v184.i64[1];
        v195 = *(float32x4_t *)(v179 + 176);
        v194 = *(float32x4_t *)(v179 + 192);
        *(float32x2_t *)v184.i8 = vmax_f32(vmin_f32(vadd_f32(*(float32x2_t *)v192.i8, (float32x2_t)vorr_s8(*(int8x8_t *)(v179 + 160), (int8x8_t)vsub_f32(*(float32x2_t *)v192.i8, *(float32x2_t *)v193.i8))), *(float32x2_t *)v195.f32), *(float32x2_t *)v194.f32);
        v196 = *(int8x16_t *)(v179 + 208);
        v184.i64[1] = v182.i64[0];
        *(int8x8_t *)v197.f32 = vand_s8(vqtbl1_s8((int8x16_t)v184, *(int8x8_t *)v196.i8), *(int8x8_t *)(v179 + 224));
        *(int8x8_t *)&v197.u32[2] = vqtbl1_s8((int8x16_t)v184, (int8x8_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL));
        *(int8x8_t *)v184.i8 = vext_s8(*(int8x8_t *)&v197.u32[2], *(int8x8_t *)v197.f32, 4uLL);
        v184.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v197.f32, *(int8x8_t *)&v197.u32[2], 4uLL);
        v199 = *(int8x16_t *)(v179 + 240);
        v198 = *(int8x16_t *)(v179 + 256);
        v200 = vbslq_s8(v198, (int8x16_t)vsubq_f32(v194, v197), vbslq_s8(v199, (int8x16_t)vaddq_f32((float32x4_t)v192, vmulq_f32((float32x4_t)v191, (float32x4_t)v184)), v193));
        v201 = (float32x4_t)vbslq_s8(v199, (int8x16_t)vaddq_f32(v186, vmulq_lane_f32((float32x4_t)v200, *(float32x2_t *)v197.f32, 1)), v200);
        v202 = (float32x4_t)vbslq_s8(v198, (int8x16_t)vaddq_f32(v195, vmulq_laneq_f32(v197, v201, 2)), (int8x16_t)v197);
        v203 = (int8x16_t)vnegq_f32(v201);
        v204 = (float32x4_t)vextq_s8(v203, v203, 8uLL);
        v206 = *(float32x4_t *)(v179 + 272);
        v205 = *(int8x16_t *)(v179 + 288);
        v207 = vbslq_s8(v199, (int8x16_t)vmaxq_f32(v204, v206), v200);
        v208 = vminq_f32(vrsqrteq_f32((float32x4_t)v207), v206);
        v209 = (int8x16_t)vminq_f32(vmulq_f32(v208, vrsqrtsq_f32(vmulq_f32(v208, (float32x4_t)v207), v208)), v206);
        v210 = vbslq_s8(v198, (int8x16_t)vsubq_f32((float32x4_t)v192, vmulq_f32((float32x4_t)vbslq_s8(v198, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32((float32x4_t)v209, vrsqrtsq_f32(vmulq_f32((float32x4_t)v209, (float32x4_t)v207), (float32x4_t)v209)), v206), (float32x4_t)v207), v207), v202)), (int8x16_t)v197);
        v211 = (float32x4_t)vbslq_s8(v205, vandq_s8(v192, (int8x16_t)vcgtq_f32(v206, (float32x4_t)v210)), v210);
        v212 = (float32x4_t)vbslq_s8(v205, (int8x16_t)vmulq_lane_f32(v211, *(float32x2_t *)v211.f32, 1), v210);
        v213 = (int32x4_t)vbslq_s8(v198, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v191, v212.f32[0]), v212), v207);
        v214 = (float32x4_t)vrev64q_s32(v181);
        v209.i64[0] = v214.i64[0];
        v209.i64[1] = v212.i64[1];
        v215 = (int32x4_t)vnegq_f32((float32x4_t)v181);
        v216 = vbslq_s8(v205, (int8x16_t)vrev64q_s32(v215), v209);
        v217 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v216, v216, 8uLL), (float32x4_t)v216);
        v218 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v217, v217, 4uLL), (float32x4_t)vextq_s8(v217, v217, 8uLL));
        v219 = (int8x16_t)vrev64q_s32(v213);
        v215.i64[1] = vbslq_s8(v199, vbslq_s8((int8x16_t)vcgtq_f32(v206, *(float32x4_t *)&v219), vbslq_s8(v199, (int8x16_t)vmulq_lane_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v185, 0), *(float32x2_t *)&v213, 1), v218), v219), v218).i64[1];
        v220 = vbslq_s8(v205, (int8x16_t)v181, (int8x16_t)v215);
        v221 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v220, 1), (float32x4_t)v220);
        v222 = (int8x16_t)vmulq_f32(v214, (float32x4_t)vextq_s8(v220, v221, 8uLL));
        v223 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v222, v222, 4uLL), (float32x4_t)vdupq_lane_s64(v222.i64[0], 0));
        v224 = (float32x4_t)vextq_s8(v223, v221, 8uLL);
        v225.i64[0] = vextq_s8(v223, v221, 0xCuLL).u64[0];
        v221.i64[1] = v223.i64[1];
        *(int8x8_t *)&v225.u32[2] = vext_s8(*(int8x8_t *)v221.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v223, v223, 8uLL), 4uLL);
        v226 = vbslq_s8(v199, (int8x16_t)vaddq_f32(v224, v225), v221);
        v227 = *((int *)a2 + 22);
        v228 = vsubq_f32(vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v179, *(int8x16_t *)v179, 8uLL), vmulq_f32(*(float32x4_t *)v179, vaddq_f32(v180, (float32x4_t)vextq_s8(v226, v226, 8uLL)))), v9);
        v229 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v230 = vaddq_s32(vcvtq_s32_f32(v228), vcltzq_f32(v228));
          v231 = (float32x2_t)vsubq_f32(v228, vcvtq_f32_s32(v230)).u64[0];
          v232 = (float32x4_t *)(v229 + 16 * (v230.i32[0] + v230.i32[1] * (int)v227));
          v233 = vaddq_f32(*v232, vmulq_n_f32(vsubq_f32(v232[1], *v232), v231.f32[0]));
          v234 = (int8x16_t)vaddq_f32(v233, vmulq_lane_f32(vsubq_f32(vaddq_f32(v232[v227], vmulq_n_f32(vsubq_f32(v232[(int)v227 + 1], v232[v227]), v231.f32[0])), v233), v231, 1));
        }
        else
        {
          v235 = vaddq_f32(v228, v13);
          v236 = vcvtq_s32_f32(v235);
          v235.i64[0] = vaddq_s32(v236, vcgtq_f32(vcvtq_f32_s32(v236), v235)).u64[0];
          v234 = *(int8x16_t *)(v229 + 16 * (v235.i32[0] + v235.i32[1] * (int)v227));
        }
        v237 = vmvnq_s8(v199);
        v238 = vmvnq_s8(v198);
        v239 = vmvnq_s8(v205);
        v240 = vbslq_s8(v198, (int8x16_t)vsubq_f32(v194, vmulq_n_f32((float32x4_t)v219, *(float *)v213.i32)), v207);
        v241 = vandq_s8(v199, (int8x16_t)vmulq_f32((float32x4_t)v240, (float32x4_t)v240));
        v242 = vandq_s8(v240, v237);
        v243 = vorrq_s8(vandq_s8(v199, (int8x16_t)vmulq_laneq_f32((float32x4_t)vorrq_s8(v241, v242), (float32x4_t)v234, 3)), v242);
        v244 = vabsq_f32((float32x4_t)vextq_s8(v243, v243, 0xCuLL));
        v245 = vminq_f32(vrsqrteq_f32(v244), v187);
        v246 = vminq_f32(vmulq_f32(v245, vrsqrtsq_f32(vmulq_f32(v245, v244), v245)), v187);
        v247 = (int32x4_t)vorrq_s8(vandq_s8(v199, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v246, vrsqrtsq_f32(vmulq_f32(v246, v244), v246)), v187), v244)), v242);
        v248 = *(int8x16_t *)(v179 + 304);
        v249 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v206, (float32x4_t)vrev64q_s32(v247)), (int8x16_t)v247, v248), v199), v242);
        *(float32x2_t *)v248.i8 = vmul_f32(*(float32x2_t *)v248.i8, (float32x2_t)vqtbl1_s8(v249, *(int8x8_t *)(v179 + 320)));
        *(int8x8_t *)v250.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v248.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v248.i8, 0)), (int8x8_t)*(_OWORD *)&vextq_s8(v249, v249, 8uLL), 4uLL);
        v250.i64[1] = v250.i64[0];
        v251 = *(float32x4_t *)(v179 + 336);
        v252 = vorrq_s8(vandq_s8(v199, (int8x16_t)vaddq_f32(v251, v250)), vandq_s8(v249, v237));
        v250.i64[0] = vsubq_f32(v251, v185).u64[0];
        v250.i64[1] = v252.i64[1];
        v253 = vmulq_laneq_f32(*(float32x4_t *)(v179 + 80), (float32x4_t)v243, 2);
        v254 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v250), v185)), v198), vandq_s8((int8x16_t)v250, v238));
        v255 = vorrq_s8(vandq_s8(v254, v237), vandq_s8(v199, (int8x16_t)vmaxq_f32((float32x4_t)v254, *(float32x4_t *)(v179 + 352))));
        v256 = *(float32x4_t *)(v179 + 368);
        v257 = vorrq_s8(vandq_s8(v198, (int8x16_t)vsubq_f32((float32x4_t)v255, v256)), vandq_s8(v255, v238));
        v258 = (float32x4_t)vorrq_s8(vandq_s8(v205, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v257, v257, 0xCuLL), (float32x4_t)v257)), vandq_s8(v257, v239));
        v259 = (float32x4_t)vrev64q_s32((int32x4_t)v258);
        v260 = vminq_f32(vmaxq_f32(vrecpeq_f32(v259), v186), v187);
        v261 = vminq_f32(vmaxq_f32(vmulq_f32(v260, vrecpsq_f32(v259, v260)), v186), v187);
        v261.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v261, vrecpsq_f32(v259, v261)), v258), v256), v251).u64[0];
        v262.i64[0] = v261.i64[0];
        v262.i64[1] = v258.i64[1];
        v261.i64[1] = vdupq_laneq_s64((int64x2_t)v258, 1).u64[0];
        v263 = vorrq_s8(vandq_s8(v198, (int8x16_t)vsubq_f32(v251, vmulq_f32((float32x4_t)v191, (float32x4_t)vrev64q_s32((int32x4_t)v261)))), vandq_s8(v262, v238));
        v264 = (float32x4_t)vorrq_s8(vandq_s8(v205, (int8x16_t)vmulq_f32((float32x4_t)v263, (float32x4_t)v263)), vandq_s8(v263, v239));
        v265 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v179 + 384), v234, (int8x16_t)vaddq_f32(v253, vmulq_laneq_f32((float32x4_t)v234, v264, 2)));
        *(float32x4_t *)(v11 + 16 * v15) = vsubq_f32(v265, vmulq_n_f32(v265, vmulq_lane_f32(v264, *(float32x2_t *)v264.f32, 1).f32[0]));
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPageCurlBackground::GetDOD(HgcPageCurlBackground *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcPageCurlBackground *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcPageCurlBackground::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPageCurlBackground::HgcPageCurlBackground(HgcPageCurlBackground *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E4CF0;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051050;
  *(int32x4_t *)(v3 + 112) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 128) = xmmword_1B3051060;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051070;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051080;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051090;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050FB0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050FC0;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050FD0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 272) = xmmword_1B30510A0;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 304) = xmmword_1B30510B0;
  *(_OWORD *)(v3 + 320) = xmmword_1B30510C0;
  *(_OWORD *)(v3 + 336) = xmmword_1B30510D0;
  *(_OWORD *)(v3 + 352) = xmmword_1B30510E0;
  *(_OWORD *)(v3 + 368) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 384) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 400) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPageCurlBackground *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28678E0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPageCurlBackground::~HgcPageCurlBackground(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E4CF0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C407DC911DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPageCurlBackground::~HgcPageCurlBackground(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPageCurlBackground::SetParameter(HgcPageCurlBackground *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_33;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_33;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_33;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_33;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    case 6:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 400) = a3;
      return v8;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcPageCurlBackground::GetParameter(HgcPageCurlBackground *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[100];
      a3[1] = v10[101];
      a3[2] = v10[102];
      v4 = v10 + 103;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcPageCurlForeground::GetProgram(HgcPageCurlForeground *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000b0b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const half4 c1 = half4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
             "    const half4 c2 = half4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
             "    const half4 c3 = half4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    s0.xy = s0.xy - hg_Params[2].xy;\n"
             "    s1.w = dot(s0.xy, hg_Params[3].xy);\n"
             "    s0.z = s1.w/hg_Params[4].x;\n"
             "    s1.x = select(float(c0.x), s0.z, s1.w < 0.00000h);\n"
             "    s0.z = s1.x + float(c0.y);\n"
             "    s0.z = -fabs(s0.z) + float(c0.y);\n"
             "    s0.w = clamp(fmin(s0.z, float(c0.z)), 0.00000f, 1.00000f);\n"
             "    s2.y = s0.w*float(c0.w) + float(c1.y);\n"
             "    s2.x = float(c0.y) - s0.w;\n"
             "    s2.y = s0.w*s2.y + float(c1.x);\n"
             "    s0.w = s0.w*s2.y + float(c1.z);\n"
             "    s2.x = sqrt(s2.x);\n"
             "    s0.z = s2.x*s0.w + float(c1.w);\n"
             "    s0.z = s0.z*hg_Params[4].x;\n"
             "    s0.z = select(s1.w, s0.z, s1.w < 0.00000h);\n"
             "    s2.x = float(c2.x)*hg_Params[4].x + -s0.z;\n"
             "    s0.w = hg_Params[3].x;\n"
             "    s0.z = -hg_Params[3].y;\n"
             "    s2.y = dot(s0.xy, s0.zw);\n"
             "    s0.z = -s1.x*s1.x + float(c0.y);\n"
             "    s0.y = -hg_Params[3].y;\n"
             "    s0.x = hg_Params[3].x;\n"
             "    s0.x = dot(s2.xy, s0.xy);\n"
             "    s0.y = sqrt(fabs(s0.z));\n"
             "    s0.zw = s2.xy*hg_Params[3].yx;\n"
             "    s1.z = select(float(c0.y), s0.y, s1.w < 0.00000h);\n"
             "    s2.x = dot(s1.xz, float2(c2.yz));\n"
             "    s0.y = dot(s0.zw, 1.00000f);\n"
             "    s0.z = s2.x*float(c2.w) + float(c2.w);\n"
             "    s0.xy = s0.xy + hg_Params[2].xy;\n"
             "    s2.x = fmax(s0.z, float(c0.x));\n"
             "    s0.xy = s0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    s0.xy = s0.xy + hg_Params[7].xy;\n"
             "    s0.xy = s0.xy*hg_Params[7].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    s0.w = float(r0.w);\n"
             "    s0.xyz = float3(r0.xyz)*s2.xxx;\n"
             "    r0.xyz = half3(s0.www)*half3(hg_Params[6].xyz);\n"
             "    s1.y = float(c2.z) - hg_Params[6].w;\n"
             "    s0.xyz = s0.xyz*s1.yyy + float3(r0.xyz);\n"
             "    s2.y = fmax(-s1.x, float(c0.x));\n"
             "    s2.z = s2.y*s2.y;\n"
             "    s2.x = float(c2.z) - hg_Params[4].x;\n"
             "    s2.y = -s2.x - hg_Params[4].x;\n"
             "    s2.z = s0.w*s2.z;\n"
             "    s2.y = s2.y - float(c2.z);\n"
             "    s2.x = s1.w - s2.x;\n"
             "    s2.x = clamp(s2.x/s2.y, 0.00000f, 1.00000f);\n"
             "    s2.y = s2.x*float(c3.y) + float(c3.x);\n"
             "    s2.x = s2.x*s2.x;\n"
             "    s0.xyz = s2.zzz*hg_Params[5].xyz + s0.xyz;\n"
             "    s2.x = s2.x*s2.y;\n"
             "    output.color0 = s2.xxxx*-s0 + s0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=26f7cb92:eab89336:68976724:cd5be2d2\n"
             "//SIG=00400000:00000000:00000000:00000001:0004:0008:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000a26\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
             "    const float4 c1 = float4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
             "    const float4 c2 = float4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
             "    const float4 c3 = float4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    r0.xy = r0.xy - hg_Params[2].xy;\n"
             "    r1.w = dot(r0.xy, hg_Params[3].xy);\n"
             "    r0.z = r1.w/hg_Params[4].x;\n"
             "    r1.x = select(c0.x, r0.z, r1.w < 0.00000f);\n"
             "    r0.z = r1.x + c0.y;\n"
             "    r0.z = -fabs(r0.z) + c0.y;\n"
             "    r0.w = clamp(fmin(r0.z, c0.z), 0.00000f, 1.00000f);\n"
             "    r2.y = r0.w*c0.w + c1.y;\n"
             "    r2.x = c0.y - r0.w;\n"
             "    r2.y = r0.w*r2.y + c1.x;\n"
             "    r0.w = r0.w*r2.y + c1.z;\n"
             "    r2.x = sqrt(r2.x);\n"
             "    r0.z = r2.x*r0.w + c1.w;\n"
             "    r0.z = r0.z*hg_Params[4].x;\n"
             "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
             "    r2.x = c2.x*hg_Params[4].x + -r0.z;\n"
             "    r0.w = hg_Params[3].x;\n"
             "    r0.z = -hg_Params[3].y;\n"
             "    r2.y = dot(r0.xy, r0.zw);\n"
             "    r0.z = -r1.x*r1.x + c0.y;\n"
             "    r0.y = -hg_Params[3].y;\n"
             "    r0.x = hg_Params[3].x;\n"
             "    r0.x = dot(r2.xy, r0.xy);\n"
             "    r0.y = sqrt(fabs(r0.z));\n"
             "    r0.zw = r2.xy*hg_Params[3].yx;\n"
             "    r1.z = select(c0.y, r0.y, r1.w < 0.00000f);\n"
             "    r2.x = dot(r1.xz, c2.yz);\n"
             "    r0.y = dot(r0.zw, 1.00000f);\n"
             "    r0.z = r2.x*c2.w + c2.w;\n"
             "    r0.xy = r0.xy + hg_Params[2].xy;\n"
             "    r2.x = fmax(r0.z, c0.x);\n"
             "    r0.xy = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    r0.xy = r0.xy + hg_Params[7].xy;\n"
             "    r0.xy = r0.xy*hg_Params[7].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r0.xyz = r0.xyz*r2.xxx;\n"
             "    r2.xyz = r0.www*hg_Params[6].xyz;\n"
             "    r1.y = c2.z - hg_Params[6].w;\n"
             "    r0.xyz = r0.xyz*r1.yyy + r2.xyz;\n"
             "    r2.y = fmax(-r1.x, c0.x);\n"
             "    r2.z = r2.y*r2.y;\n"
             "    r2.x = c2.z - hg_Params[4].x;\n"
             "    r2.y = -r2.x - hg_Params[4].x;\n"
             "    r2.z = r0.w*r2.z;\n"
             "    r2.y = r2.y - c2.z;\n"
             "    r2.x = r1.w - r2.x;\n"
             "    r2.x = clamp(r2.x/r2.y, 0.00000f, 1.00000f);\n"
             "    r2.y = r2.x*c3.y + c3.x;\n"
             "    r2.x = r2.x*r2.x;\n"
             "    r0.xyz = r2.zzz*hg_Params[5].xyz + r0.xyz;\n"
             "    r2.x = r2.x*r2.y;\n"
             "    output.color0 = r2.xxxx*-r0 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b626b4ab:6754877a:aab8114a:ec365a38\n"
             "//SIG=00000000:00000000:00000000:00000000:0004:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000b34\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
           "    const highp vec4 c1 = vec4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
           "    const highp vec4 c2 = vec4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
           "    const highp vec4 c3 = vec4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
           "    r0.xy = r0.xy - hg_ProgramLocal2.xy;\n"
           "    r1.w = dot(r0.xy, hg_ProgramLocal3.xy);\n"
           "    r0.z = r1.w/hg_ProgramLocal4.x;\n"
           "    r1.x = r1.w < 0.00000 ? r0.z : c0.x;\n"
           "    r0.z = r1.x + c0.y;\n"
           "    r0.z = -abs(r0.z) + c0.y;\n"
           "    r0.w = clamp(min(r0.z, c0.z), 0.00000, 1.00000);\n"
           "    r2.y = r0.w*c0.w + c1.y;\n"
           "    r2.x = c0.y - r0.w;\n"
           "    r2.y = r0.w*r2.y + c1.x;\n"
           "    r0.w = r0.w*r2.y + c1.z;\n"
           "    r2.x = sqrt(r2.x);\n"
           "    r0.z = r2.x*r0.w + c1.w;\n"
           "    r0.z = r0.z*hg_ProgramLocal4.x;\n"
           "    r0.z = r1.w < 0.00000 ? r0.z : r1.w;\n"
           "    r2.x = c2.x*hg_ProgramLocal4.x + -r0.z;\n"
           "    r0.w = hg_ProgramLocal3.x;\n"
           "    r0.z = -hg_ProgramLocal3.y;\n"
           "    r2.y = dot(r0.xy, r0.zw);\n"
           "    r0.z = -r1.x*r1.x + c0.y;\n"
           "    r0.y = -hg_ProgramLocal3.y;\n"
           "    r0.x = hg_ProgramLocal3.x;\n"
           "    r0.x = dot(r2.xy, r0.xy);\n"
           "    r0.y = sqrt(abs(r0.z));\n"
           "    r0.zw = r2.xy*hg_ProgramLocal3.yx;\n"
           "    r1.z = r1.w < 0.00000 ? r0.y : c0.y;\n"
           "    r2.x = dot(r1.xz, c2.yz);\n"
           "    r0.y = dot(r0.zw, vec2(1.00000));\n"
           "    r0.z = r2.x*c2.w + c2.w;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal2.xy;\n"
           "    r2.x = max(r0.z, c0.x);\n"
           "    r0.xy = r0.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal7.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal7.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r0.xyz = r0.xyz*r2.xxx;\n"
           "    r2.xyz = r0.www*hg_ProgramLocal6.xyz;\n"
           "    r1.y = c2.z - hg_ProgramLocal6.w;\n"
           "    r0.xyz = r0.xyz*r1.yyy + r2.xyz;\n"
           "    r2.y = max(-r1.x, c0.x);\n"
           "    r2.z = r2.y*r2.y;\n"
           "    r2.x = c2.z - hg_ProgramLocal4.x;\n"
           "    r2.y = -r2.x - hg_ProgramLocal4.x;\n"
           "    r2.z = r0.w*r2.z;\n"
           "    r2.y = r2.y - c2.z;\n"
           "    r2.x = r1.w - r2.x;\n"
           "    r2.x = clamp(r2.x/r2.y, 0.00000, 1.00000);\n"
           "    r2.y = r2.x*c3.y + c3.x;\n"
           "    r2.x = r2.x*r2.x;\n"
           "    r0.xyz = r2.zzz*hg_ProgramLocal5.xyz + r0.xyz;\n"
           "    r2.x = r2.x*r2.y;\n"
           "    gl_FragColor = r2.xxxx*-r0 + r0;\n"
           "}\n"
           "//MD5=2561706a:1ef3d5e9:193f64ab:daef44e1\n"
           "//SIG=00000000:00000000:00000000:00000000:0004:0008:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPageCurlForeground::InitProgramDescriptor(HgcPageCurlForeground *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPageCurlForeground_hgc_visible", "//Metal1.0     \n//LEN=000000096e\n[[ visible ]] FragmentOut HgcPageCurlForeground_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.9990000129, -0.01872929931);\n"
    "    const float4 c1 = float4(-0.2121143937, 0.07426100224, 1.570728779, -1.570796371);\n"
    "    const float4 c2 = float4(-3.141592741, -1.000000000, 1.000000000, 0.5000000000);\n"
    "    const float4 c3 = float4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
    "    r0.xy = r0.xy - hg_Params[2].xy;\n"
    "    r1.w = dot(r0.xy, hg_Params[3].xy);\n"
    "    r0.z = r1.w/hg_Params[4].x;\n"
    "    r1.x = select(c0.x, r0.z, r1.w < 0.00000f);\n"
    "    r0.z = r1.x + c0.y;\n"
    "    r0.z = -fabs(r0.z) + c0.y;\n"
    "    r0.w = clamp(fmin(r0.z, c0.z), 0.00000f, 1.00000f);\n"
    "    r2.y = r0.w*c0.w + c1.y;\n"
    "    r2.x = c0.y - r0.w;\n"
    "    r2.y = r0.w*r2.y + c1.x;\n"
    "    r0.w = r0.w*r2.y + c1.z;\n"
    "    r2.x = sqrt(r2.x);\n"
    "    r0.z = r2.x*r0.w + c1.w;\n"
    "    r0.z = r0.z*hg_Params[4].x;\n"
    "    r0.z = select(r1.w, r0.z, r1.w < 0.00000f);\n"
    "    r2.x = c2.x*hg_Params[4].x + -r0.z;\n"
    "    r0.w = hg_Params[3].x;\n"
    "    r0.z = -hg_Params[3].y;\n"
    "    r2.y = dot(r0.xy, r0.zw);\n"
    "    r0.z = -r1.x*r1.x + c0.y;\n"
    "    r0.y = -hg_Params[3].y;\n"
    "    r0.x = hg_Params[3].x;\n"
    "    r0.x = dot(r2.xy, r0.xy);\n"
    "    r0.y = sqrt(fabs(r0.z));\n"
    "    r0.zw = r2.xy*hg_Params[3].yx;\n"
    "    r1.z = select(c0.y, r0.y, r1.w < 0.00000f);\n"
    "    r2.x = dot(r1.xz, c2.yz);\n"
    "    r0.y = dot(r0.zw, 1.00000f);\n"
    "    r0.z = r2.x*c2.w + c2.w;\n"
    "    r0.xy = r0.xy + hg_Params[2].xy;\n"
    "    r2.x = fmax(r0.z, c0.x);\n"
    "    r0.xy = r0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
    "    r0.xy = r0.xy + hg_Params[7].xy;\n"
    "    r0.xy = r0.xy*hg_Params[7].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r0.xyz = r0.xyz*r2.xxx;\n"
    "    r2.xyz = r0.www*hg_Params[6].xyz;\n"
    "    r1.y = c2.z - hg_Params[6].w;\n"
    "    r0.xyz = r0.xyz*r1.yyy + r2.xyz;\n"
    "    r2.y = fmax(-r1.x, c0.x);\n"
    "    r2.z = r2.y*r2.y;\n"
    "    r2.x = c2.z - hg_Params[4].x;\n"
    "    r2.y = -r2.x - hg_Params[4].x;\n"
    "    r2.z = r0.w*r2.z;\n"
    "    r2.y = r2.y - c2.z;\n"
    "    r2.x = r1.w - r2.x;\n"
    "    r2.x = clamp(r2.x/r2.y, 0.00000f, 1.00000f);\n"
    "    r2.y = r2.x*c3.y + c3.x;\n"
    "    r2.x = r2.x*r2.x;\n"
    "    r0.xyz = r2.zzz*hg_Params[5].xyz + r0.xyz;\n"
    "    r2.x = r2.x*r2.y;\n"
    "    output.color0 = r2.xxxx*-r0 + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2867D3C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPageCurlForeground");
}

void sub_1B2867D4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2867ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2867F1C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2867F14);
}

_QWORD *HgcPageCurlForeground::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPageCurlForeground [hgc1]");
}

uint64_t HgcPageCurlForeground::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPageCurlForeground::Bind(HgcPageCurlForeground *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcPageCurlForeground *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPageCurlForeground::RenderTile(HgcPageCurlForeground *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t v119;
  float32x4_t v120;
  uint64_t v121;
  int32x4_t v122;
  float32x2_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int32x4_t v128;
  float32x4_t *v129;
  float32x4_t v130;
  int8x16_t v131;
  float32x4_t v132;
  int32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int8x16_t v136;
  float v137;
  float v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  float32x4_t v146;
  int8x16_t v147;
  int32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int32x4_t v169;
  int8x16_t v170;
  float32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t *v178;
  uint64_t v179;
  float32x4_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int8x16_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  float32x4_t v192;
  int32x4_t v193;
  float32x4_t v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x4_t v197;
  int8x16_t v198;
  float32x4_t v199;
  int8x16_t v200;
  float32x4_t v201;
  int8x16_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  float32x4_t v218;
  float32x4_t v219;
  int8x16_t v220;
  float32x4_t v221;
  int8x16_t v222;
  int8x16_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int8x16_t v230;
  float32x4_t v231;
  int8x16_t v232;
  int8x16_t v233;
  uint64_t v234;
  float32x4_t v235;
  uint64_t v236;
  int32x4_t v237;
  float32x2_t v238;
  float32x4_t *v239;
  float32x4_t v240;
  int8x16_t v241;
  float32x4_t v242;
  int32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  float32x4_t v247;
  int8x16_t v248;
  int32x4_t v249;
  float32x4_t v250;
  int8x16_t v251;
  float32x4_t v252;
  int8x16_t v253;
  int8x16_t v254;
  float32x4_t v255;
  int8x16_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  int8x16_t v261;
  int8x16_t v262;
  float32x4_t v263;
  float32x4_t v264;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcPageCurlForeground *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(int8x16_t *)(v19 + 16);
          v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v22 = *(float32x4_t *)(v19 + 32);
          v23 = *(int8x16_t *)(v19 + 48);
          v24 = (int8x16_t)vsubq_f32(vaddq_f32(vmulq_f32(v17, (float32x4_t)v20), v21), v22);
          v25 = (int8x16_t)vsubq_f32(vaddq_f32(vmulq_f32(v18, (float32x4_t)v20), v21), v22);
          v26 = (int8x16_t)vmulq_f32((float32x4_t)v23, (float32x4_t)v24);
          v27 = (int8x16_t)vmulq_f32((float32x4_t)v23, (float32x4_t)v25);
          v28 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v26, v26, 4uLL), (float32x4_t)vextq_s8(v26, v26, 8uLL));
          v29 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v27, v27, 4uLL), (float32x4_t)vextq_s8(v27, v27, 8uLL));
          v30 = *(int8x16_t *)(v19 + 64);
          v31 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
          v33 = *(int8x16_t *)(v19 + 112);
          v32 = *(float32x4_t *)(v19 + 128);
          v34 = vminq_f32(vmaxq_f32(vrecpeq_f32(v31), (float32x4_t)v33), v32);
          v35 = vminq_f32(vmaxq_f32(vmulq_f32(v34, vrecpsq_f32(v31, v34)), (float32x4_t)v33), v32);
          v36 = vmulq_f32(v35, vrecpsq_f32(v31, v35));
          v37 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v33, (float32x4_t)vextq_s8(v28, v28, 0xCuLL)), (int8x16_t)vdupq_laneq_s64((int64x2_t)vmulq_laneq_f32(v36, (float32x4_t)v28, 3), 1), v33);
          v38 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v33, (float32x4_t)vextq_s8(v29, v29, 0xCuLL)), (int8x16_t)vdupq_laneq_s64((int64x2_t)vmulq_laneq_f32(v36, (float32x4_t)v29, 3), 1), v33);
          v39 = (float32x4_t)vextq_s8(v28, v37, 8uLL);
          v40.i64[0] = v37.i64[0];
          v41 = vmulq_n_f32(v39, *(float *)v37.i32);
          v37.i64[1] = v28.i64[1];
          v42 = vextq_s8(v29, v38, 8uLL);
          v43 = *(int8x16_t *)(v19 + 144);
          v44 = *(int8x16_t *)(v19 + 160);
          v45.i64[0] = v24.i64[0];
          v45.i64[1] = vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)v43, (float32x4_t)vorrq_s8(v44, (int8x16_t)vaddq_f32((float32x4_t)v43, v39))), 1).u64[0];
          v46 = (float32x4_t)vrev64q_s32(v45);
          v45.i64[0] = v25.i64[0];
          v45.i64[1] = vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)v43, (float32x4_t)vorrq_s8(v44, (int8x16_t)vaddq_f32((float32x4_t)v43, (float32x4_t)v42))), 1).u64[0];
          v47 = vminq_f32((float32x4_t)vrev64q_s32(v45), (float32x4_t)v43);
          v48 = vmaxq_f32(vminq_f32(v46, (float32x4_t)v43), (float32x4_t)v33);
          v49 = vmaxq_f32(v47, (float32x4_t)v33);
          v51 = *(float32x4_t *)(v19 + 176);
          v50 = *(int8x16_t *)(v19 + 192);
          v52 = (int8x16_t)vminq_f32(v48, v51);
          v53 = (int8x16_t)vminq_f32(v49, v51);
          v54.i64[0] = vextq_s8(v52, v24, 0xCuLL).u64[0];
          *(int8x8_t *)&v54.u32[2] = vext_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
          v48.i64[0] = vextq_s8(v53, v25, 0xCuLL).u64[0];
          *(int8x8_t *)&v48.u32[2] = vext_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), 4uLL);
          v55 = (int8x16_t)vsubq_f32(v51, v54);
          v56 = (int8x16_t)vsubq_f32(v51, v48);
          v57 = (float32x4_t)vbslq_s8(v50, v55, (int8x16_t)vaddq_f32((float32x4_t)v33, vmulq_laneq_f32((float32x4_t)vbslq_s8(v50, v55, (int8x16_t)vaddq_f32(v51, vmulq_f32((float32x4_t)v43, (float32x4_t)vextq_s8(v52, v24, 8uLL)))), (float32x4_t)v52, 3)));
          v58 = vbslq_s8(v50, v56, (int8x16_t)vaddq_f32((float32x4_t)v33, vmulq_laneq_f32((float32x4_t)vbslq_s8(v50, v56, (int8x16_t)vaddq_f32(v51, vmulq_f32((float32x4_t)v43, (float32x4_t)vextq_s8(v53, v25, 8uLL)))), (float32x4_t)v53, 3)));
          v59 = *(float32x4_t *)(v19 + 208);
          v60 = *(float32x4_t *)(v19 + 224);
          v61 = vminq_f32(vrsqrteq_f32(v57), v59);
          v62 = vminq_f32(vrsqrteq_f32((float32x4_t)v58), v59);
          v63 = vminq_f32(vmulq_f32(v61, vrsqrtsq_f32(vmulq_f32(v61, v57), v61)), v59);
          v64 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, (float32x4_t)v58), v62)), v59);
          v65.i64[0] = v38.i64[0];
          v38.i64[1] = v29.i64[1];
          v66 = (int8x16_t)vmulq_n_f32(vaddq_f32(v59, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(v59, vmulq_lane_f32((float32x4_t)v52, *(float32x2_t *)v57.f32, 1))), vmulq_f32(vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v57), v63)), v59), v57).f32[0])), *(float *)v30.i32);
          v67 = (int8x16_t)vmulq_n_f32(vaddq_f32(v59, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(v59, vmulq_lane_f32((float32x4_t)v53, *(float32x2_t *)v58.i8, 1))), vmulq_f32(vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v64, (float32x4_t)v58), v64)), v59), (float32x4_t)v58).f32[0])), *(float *)v30.i32);
          v40.i64[1] = vdupq_laneq_s64((int64x2_t)v28, 1).u64[0];
          v65.i64[1] = vdupq_laneq_s64((int64x2_t)v29, 1).u64[0];
          v68 = (int8x16_t)vrev64q_s32(v40);
          v69 = (int8x16_t)vrev64q_s32(v65);
          v70 = (int8x16_t)vcgtq_f32(v51, (float32x4_t)v68);
          v71 = (int8x16_t)vcgtq_f32(v51, (float32x4_t)v69);
          v72 = vbslq_s8(v70, v66, v68);
          v73 = vextq_s8(v23, v23, 4uLL);
          v58.i64[1] = v73.i64[1];
          v58.i64[0] = v24.i64[0];
          v24.i64[1] = v72.i64[1];
          v73.i64[0] = v25.i64[0];
          v25.i64[1] = vbslq_s8(v71, v67, v69).i64[1];
          v74 = (int8x16_t)vnegq_f32((float32x4_t)v24);
          v75 = (int8x16_t)vnegq_f32((float32x4_t)v25);
          v76 = vmulq_laneq_f32((float32x4_t)v30, v60, 2);
          v77 = (int8x16_t)vaddq_f32(v76, (float32x4_t)vextq_s8(v74, v74, 8uLL));
          v78 = (int8x16_t)vaddq_f32(v76, (float32x4_t)vextq_s8(v75, v75, 8uLL));
          v79 = (int8x16_t)vnegq_f32((float32x4_t)v23);
          v80 = vextq_s8(v79, v79, 0xCuLL);
          v81 = *(int8x16_t *)(v19 + 240);
          v82 = *(int8x16_t *)(v19 + 256);
          v83 = vbslq_s8(v81, v80, v58);
          v84 = vbslq_s8(v81, v80, v73);
          v85 = vmulq_f32((float32x4_t)vextq_s8(v83, v83, 8uLL), (float32x4_t)v83);
          v86 = vmulq_f32((float32x4_t)vextq_s8(v84, v84, 8uLL), (float32x4_t)v84);
          v87 = (float32x4_t)vbslq_s8(v50, v77, (int8x16_t)vaddq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85)));
          v88 = (float32x4_t)vbslq_s8(v50, v78, (int8x16_t)vaddq_f32(v86, (float32x4_t)vrev64q_s32((int32x4_t)v86)));
          v89 = vsubq_f32((float32x4_t)v43, vmulq_n_f32((float32x4_t)v42, *(float *)v38.i32));
          v42.i64[0] = v79.i64[0];
          v42.i64[1] = vsubq_f32(*(float32x4_t *)&v43, v41).i64[1];
          v79.i64[1] = v89.i64[1];
          v90 = vbslq_s8(v50, v23, v42);
          v91 = vbslq_s8(v50, v23, v79);
          v92 = vmulq_f32((float32x4_t)v90, v87);
          v93 = vmulq_f32((float32x4_t)v91, v88);
          v94 = (int8x16_t)vaddq_f32(v92, (float32x4_t)vrev64q_s32((int32x4_t)v92));
          v95 = (int8x16_t)vaddq_f32(v93, (float32x4_t)vrev64q_s32((int32x4_t)v93));
          v90.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
          v91.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
          *(int8x8_t *)v85.f32 = vext_s8(*(int8x8_t *)v90.i8, *(int8x8_t *)v94.i8, 4uLL);
          *(int8x8_t *)v90.i8 = vext_s8(*(int8x8_t *)v94.i8, *(int8x8_t *)v90.i8, 4uLL);
          v90.i64[1] = v85.i64[0];
          *(int8x8_t *)v85.f32 = vext_s8(*(int8x8_t *)v91.i8, *(int8x8_t *)v95.i8, 4uLL);
          *(int8x8_t *)v91.i8 = vext_s8(*(int8x8_t *)v95.i8, *(int8x8_t *)v91.i8, 4uLL);
          v91.i64[1] = v85.i64[0];
          v96 = (int8x16_t)vabsq_f32((float32x4_t)v90);
          v97 = vabsq_f32((float32x4_t)v91);
          v98 = vminq_f32(vrsqrteq_f32((float32x4_t)v96), v60);
          v99 = vminq_f32(vrsqrteq_f32(v97), v60);
          v100 = vminq_f32(vmulq_f32(v98, vrsqrtsq_f32(vmulq_f32(v98, (float32x4_t)v96), v98)), v60);
          v101 = (int8x16_t)vminq_f32(vmulq_f32(v99, vrsqrtsq_f32(vmulq_f32(v99, v97), v99)), v60);
          v96.i64[0] = vbslq_s8(v50, v94, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v100, vrsqrtsq_f32(vmulq_f32(v100, (float32x4_t)v96), v100)), v60), (float32x4_t)v96)).u64[0];
          v102 = vbslq_s8(v50, v95, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32((float32x4_t)v101, vrsqrtsq_f32(vmulq_f32((float32x4_t)v101, v97), (float32x4_t)v101)), v60), v97));
          *(int8x8_t *)v94.i8 = vqtbl1_s8(v23, *(int8x8_t *)v82.i8);
          v95.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
          v94.u64[1] = (unint64_t)vqtbl1_s8(v23, *(int8x8_t *)v95.i8);
          v103 = (int8x16_t)vmulq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s64(v87.i64[0], 0));
          v104 = (int8x16_t)vmulq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s64(v88.i64[0], 0));
          v105 = vextq_s8(v103, v103, 8uLL);
          v96.i64[1] = v103.i64[1];
          v100.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          v101.i64[0] = v102.i64[0];
          v101.i64[1] = v104.i64[1];
          v106 = vbslq_s8(v81, vbslq_s8(v70, vextq_s8(v96, v96, 0xCuLL), v43), v37);
          v107 = vbslq_s8(v81, vbslq_s8(v71, vextq_s8(v101, v101, 0xCuLL), v43), v38);
          *(int8x8_t *)v38.i8 = vqtbl1_s8(v106, *(int8x8_t *)v82.i8);
          v38.u64[1] = (unint64_t)vqtbl1_s8(v106, *(int8x8_t *)v95.i8);
          *(int8x8_t *)v70.i8 = vqtbl1_s8(v107, *(int8x8_t *)v82.i8);
          v70.u64[1] = (unint64_t)vqtbl1_s8(v107, *(int8x8_t *)v95.i8);
          v108 = *(float32x4_t *)(v19 + 272);
          v109 = vmulq_f32((float32x4_t)v38, v108);
          v110 = vmulq_f32(v108, (float32x4_t)v70);
          *(float32x2_t *)v105.i8 = vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vext_s8(*(int8x8_t *)v96.i8, *(int8x8_t *)v105.i8, 4uLL));
          *(float32x2_t *)v102.i8 = vadd_f32(*(float32x2_t *)v100.f32, (float32x2_t)vext_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v100.f32, 4uLL));
          v111 = (float32x4_t)vbslq_s8(v50, v96, v105);
          v112 = (float32x4_t)vbslq_s8(v50, v101, v102);
          v113 = (int8x16_t)vaddq_f32(v108, vmulq_f32(v108, (float32x4_t)vdupq_lane_s64(vaddq_f32(v109, (float32x4_t)vrev64q_s32((int32x4_t)v109)).i64[0], 0)));
          v114 = (int8x16_t)vaddq_f32(v108, vmulq_f32(v108, (float32x4_t)vdupq_lane_s64(vaddq_f32(v110, (float32x4_t)vrev64q_s32((int32x4_t)v110)).i64[0], 0)));
          v115 = (int8x16_t)vaddq_f32(v22, v111);
          v111.i64[0] = v115.i64[0];
          v111.i64[1] = v113.i64[1];
          v116 = (int8x16_t)vaddq_f32(v22, v112);
          v22.i64[0] = v116.i64[0];
          v22.i64[1] = v114.i64[1];
          v117 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          v118 = vaddq_f32(v117, vmulq_f32(*(float32x4_t *)v19, v22));
          v119 = *((int *)a2 + 22);
          v120 = vsubq_f32(vaddq_f32(v117, vmulq_f32(*(float32x4_t *)v19, v111)), (float32x4_t)v9);
          v121 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v122 = vaddq_s32(vcvtq_s32_f32(v120), vcltzq_f32(v120));
            v123 = (float32x2_t)vsubq_f32(v120, vcvtq_f32_s32(v122)).u64[0];
            v124 = (float32x4_t *)(v121 + 16 * (v122.i32[0] + v122.i32[1] * (int)v119));
            v125 = vaddq_f32(*v124, vmulq_n_f32(vsubq_f32(v124[1], *v124), v123.f32[0]));
            v126 = (int8x16_t)vaddq_f32(v125, vmulq_lane_f32(vsubq_f32(vaddq_f32(v124[v119], vmulq_n_f32(vsubq_f32(v124[(int)v119 + 1], v124[v119]), v123.f32[0])), v125), v123, 1));
            v127 = vsubq_f32(v118, (float32x4_t)v9);
            v128 = vaddq_s32(vcvtq_s32_f32(v127), vcltzq_f32(v127));
            v127.i64[0] = vsubq_f32(v127, vcvtq_f32_s32(v128)).u64[0];
            v129 = (float32x4_t *)(v121 + 16 * (v128.i32[0] + v128.i32[1] * (int)v119));
            v130 = vaddq_f32(*v129, vmulq_n_f32(vsubq_f32(v129[1], *v129), v127.f32[0]));
            v131 = (int8x16_t)vaddq_f32(v130, vmulq_lane_f32(vsubq_f32(vaddq_f32(v129[v119], vmulq_n_f32(vsubq_f32(v129[(int)v119 + 1], v129[v119]), v127.f32[0])), v130), *(float32x2_t *)v127.f32, 1));
          }
          else
          {
            v132 = vaddq_f32(v120, v13);
            v133 = vcvtq_s32_f32(v132);
            v132.i64[0] = vaddq_s32(v133, vcgtq_f32(vcvtq_f32_s32(v133), v132)).u64[0];
            v126 = *(int8x16_t *)(v121 + 16 * (v132.i32[0] + v132.i32[1] * (int)v119));
            v134 = vaddq_f32(vsubq_f32(v118, (float32x4_t)v9), v13);
            v135 = vcvtq_s32_f32(v134);
            v134.i64[0] = vaddq_s32(v135, vcgtq_f32(vcvtq_f32_s32(v135), v134)).u64[0];
            v131 = *(int8x16_t *)(v121 + 16 * (v134.i32[0] + v134.i32[1] * (int)v119));
          }
          v136 = vmvnq_s8(v50);
          LODWORD(v137) = vmaxq_f32((float32x4_t)vextq_s8(v113, v115, 8uLL), v60).u32[0];
          LODWORD(v138) = vmaxq_f32((float32x4_t)vextq_s8(v114, v116, 8uLL), v60).u32[0];
          v139 = (int8x16_t)vmulq_n_f32((float32x4_t)v126, v137);
          v140 = (int8x16_t)vmulq_n_f32((float32x4_t)v131, v138);
          v141 = *(int8x16_t *)(v19 + 288);
          v142 = *(int8x16_t *)(v19 + 304);
          v143 = (float32x4_t)vbslq_s8(v141, v126, v139);
          v144 = (float32x4_t)vbslq_s8(v141, v131, v140);
          v146 = *(float32x4_t *)(v19 + 80);
          v145 = *(int8x16_t *)(v19 + 96);
          v147 = (int8x16_t)vsubq_f32(v108, (float32x4_t)vextq_s8(v145, v145, 8uLL));
          v148 = (int32x4_t)vbslq_s8(v142, v147, v106);
          v149 = (int32x4_t)vbslq_s8(v142, v147, v107);
          v150 = (float32x4_t)vbslq_s8(v141, v126, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v145, v143, 3), vmulq_lane_f32(v143, *(float32x2_t *)v148.i8, 1)));
          v151 = (float32x4_t)vbslq_s8(v141, v131, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v145, v144, 3), vmulq_lane_f32(v144, *(float32x2_t *)v149.i8, 1)));
          v152 = (int8x16_t)vmaxq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v148)), v59);
          v153 = (int8x16_t)vmaxq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v149)), v59);
          v145.i64[0] = vsubq_f32(v51, (float32x4_t)v30).u64[0];
          v154.i64[0] = v145.i64[0];
          v154.i64[1] = vmulq_lane_f32((float32x4_t)vextq_s8(v9, v152, 0xCuLL), *(float32x2_t *)&v152, 1).i64[1];
          v145.i64[1] = vmulq_lane_f32((float32x4_t)vextq_s8(v9, v153, 0xCuLL), *(float32x2_t *)&v153, 1).i64[1];
          v155 = vbslq_s8(v142, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v154), (float32x4_t)v30)), (int8x16_t)v154);
          v156 = vbslq_s8(v142, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v145), (float32x4_t)v30)), v145);
          v155.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v155, v150, 3).i64[1];
          v156.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v156, v151, 3).i64[1];
          v157 = *(float32x4_t *)(v19 + 320);
          v158 = *(float32x4_t *)(v19 + 336);
          v159 = vbslq_s8(v142, (int8x16_t)vsubq_f32((float32x4_t)v155, v157), v155);
          v160 = vbslq_s8(v142, (int8x16_t)vsubq_f32((float32x4_t)v156, v157), v156);
          v161 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v148, (int8x16_t)v148, 0xCuLL), (float32x4_t)v159)), vandq_s8(v159, v136));
          v162 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v149, (int8x16_t)v149, 0xCuLL), (float32x4_t)v160)), vandq_s8(v160, v136));
          v163 = (int8x16_t)vrev64q_s32((int32x4_t)v161);
          v164 = (float32x4_t)vrev64q_s32((int32x4_t)v162);
          v165 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v163), (float32x4_t)v43), v32);
          v166 = vminq_f32(vmaxq_f32(vrecpeq_f32(v164), (float32x4_t)v43), v32);
          v167 = vminq_f32(vmaxq_f32(vmulq_f32(v165, vrecpsq_f32((float32x4_t)v163, v165)), (float32x4_t)v43), v32);
          v168 = vminq_f32(vmaxq_f32(vmulq_f32(v166, vrecpsq_f32(v164, v166)), (float32x4_t)v43), v32);
          v169.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v167, vrecpsq_f32((float32x4_t)v163, v167)), v161), v157), v51).u64[0];
          v163.i64[0] = v169.i64[0];
          v163.i64[1] = v161.i64[1];
          v168.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v168, vrecpsq_f32(v164, v168)), v162), v157), v51).u64[0];
          v170.i64[0] = v168.i64[0];
          v170.i64[1] = v162.i64[1];
          v169.i64[1] = vdupq_laneq_s64((int64x2_t)v161, 1).u64[0];
          v168.i64[1] = vdupq_laneq_s64((int64x2_t)v162, 1).u64[0];
          v171 = *(float32x4_t *)(v19 + 352);
          v172 = vbslq_s8(v142, (int8x16_t)vaddq_f32(v158, vmulq_f32(v171, (float32x4_t)vrev64q_s32(v169))), v163);
          v173 = vbslq_s8(v142, (int8x16_t)vaddq_f32(v158, vmulq_f32(v171, (float32x4_t)vrev64q_s32((int32x4_t)v168))), v170);
          v174 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v172, (float32x4_t)v172)), vandq_s8(v172, v136));
          v175 = (float32x4_t)vorrq_s8(vandq_s8(v50, (int8x16_t)vmulq_f32((float32x4_t)v173, (float32x4_t)v173)), vandq_s8(v173, v136));
          v176 = (float32x4_t)vbslq_s8(v141, v126, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v146, v174, 2), v150));
          v177 = (float32x4_t)vbslq_s8(v141, v131, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v146, v175, 2), v151));
          v178 = (float32x4_t *)(v11 + 16 * v15);
          *v178 = vsubq_f32(v176, vmulq_n_f32(v176, vmulq_lane_f32(v174, *(float32x2_t *)v174.f32, 1).f32[0]));
          v178[1] = vsubq_f32(v177, vmulq_n_f32(v177, vmulq_lane_f32(v175, *(float32x2_t *)v175.f32, 1).f32[0]));
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v179 = *((_QWORD *)this + 51);
        v180 = *(float32x4_t *)(v179 + 32);
        v181 = *(int8x16_t *)(v179 + 48);
        v182 = (int8x16_t)vsubq_f32(vaddq_f32(vmulq_f32(v17, *(float32x4_t *)(v179 + 16)), (float32x4_t)vextq_s8(*(int8x16_t *)(v179 + 16), *(int8x16_t *)(v179 + 16), 8uLL)), v180);
        v183 = (int8x16_t)vmulq_f32((float32x4_t)v181, (float32x4_t)v182);
        v184 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v183, v183, 4uLL), (float32x4_t)vextq_s8(v183, v183, 8uLL));
        v185 = *(int8x16_t *)(v179 + 64);
        v186 = (float32x4_t)vextq_s8(v185, v185, 8uLL);
        v188 = *(int8x16_t *)(v179 + 112);
        v187 = *(float32x4_t *)(v179 + 128);
        v189 = vminq_f32(vmaxq_f32(vrecpeq_f32(v186), (float32x4_t)v188), v187);
        v190 = vminq_f32(vmaxq_f32(vmulq_f32(v189, vrecpsq_f32(v186, v189)), (float32x4_t)v188), v187);
        v191 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v188, (float32x4_t)vextq_s8(v184, v184, 0xCuLL)), (int8x16_t)vdupq_laneq_s64((int64x2_t)vmulq_laneq_f32(vmulq_f32(v190, vrecpsq_f32(v186, v190)), (float32x4_t)v184, 3), 1), v188);
        v192 = (float32x4_t)vextq_s8(v184, v191, 8uLL);
        v193.i64[0] = v191.i64[0];
        v194 = vmulq_n_f32(v192, *(float *)v191.i32);
        v195.i64[0] = v191.i64[0];
        v195.i64[1] = v184.i64[1];
        v196 = *(int8x16_t *)(v179 + 144);
        v191.i64[0] = vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)v196, (float32x4_t)vorrq_s8(*(int8x16_t *)(v179 + 160), (int8x16_t)vaddq_f32((float32x4_t)v196, v192))), 1).u64[0];
        v192.i64[0] = v182.i64[0];
        v192.i64[1] = v191.i64[0];
        v197 = vmaxq_f32(vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v192), (float32x4_t)v196), (float32x4_t)v188);
        v199 = *(float32x4_t *)(v179 + 176);
        v198 = *(int8x16_t *)(v179 + 192);
        v200 = (int8x16_t)vminq_f32(v197, v199);
        v201.i64[0] = vextq_s8(v200, v182, 0xCuLL).u64[0];
        *(int8x8_t *)&v201.u32[2] = vext_s8(*(int8x8_t *)v182.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v200, v200, 8uLL), 4uLL);
        v202 = (int8x16_t)vsubq_f32(v199, v201);
        v203 = (float32x4_t)vbslq_s8(v198, v202, (int8x16_t)vaddq_f32((float32x4_t)v188, vmulq_laneq_f32((float32x4_t)vbslq_s8(v198, v202, (int8x16_t)vaddq_f32(v199, vmulq_f32((float32x4_t)v196, (float32x4_t)vextq_s8(v200, v182, 8uLL)))), (float32x4_t)v200, 3)));
        v204 = vmulq_lane_f32((float32x4_t)v200, *(float32x2_t *)v203.f32, 1);
        v205 = *(float32x4_t *)(v179 + 208);
        v206 = *(float32x4_t *)(v179 + 224);
        v207 = vminq_f32(vrsqrteq_f32(v203), v205);
        v208 = vminq_f32(vmulq_f32(v207, vrsqrtsq_f32(vmulq_f32(v207, v203), v207)), v205);
        v193.i64[1] = vdupq_laneq_s64((int64x2_t)v184, 1).u64[0];
        v209 = (int8x16_t)vrev64q_s32(v193);
        v210 = (int8x16_t)vcgtq_f32(v199, (float32x4_t)v209);
        v211 = vbslq_s8(v210, (int8x16_t)vmulq_n_f32(vaddq_f32(v205, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(v205, v204)), vmulq_f32(vminq_f32(vmulq_f32(v208, vrsqrtsq_f32(vmulq_f32(v208, v203), v208)), v205), v203).f32[0])), *(float *)v185.i32), v209);
        v212 = vextq_s8(v181, v181, 4uLL);
        v212.i64[0] = v182.i64[0];
        v182.i64[1] = v211.i64[1];
        v213 = (int8x16_t)vnegq_f32((float32x4_t)v182);
        v214 = (int8x16_t)vnegq_f32((float32x4_t)v181);
        v215 = *(int8x16_t *)(v179 + 240);
        v216 = *(int8x16_t *)(v179 + 256);
        v217 = vbslq_s8(v215, vextq_s8(v214, v214, 0xCuLL), v212);
        v218 = vmulq_f32((float32x4_t)vextq_s8(v217, v217, 8uLL), (float32x4_t)v217);
        v219 = (float32x4_t)vbslq_s8(v198, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v185, v206, 2), (float32x4_t)vextq_s8(v213, v213, 8uLL)), (int8x16_t)vaddq_f32(v218, (float32x4_t)vrev64q_s32((int32x4_t)v218)));
        v214.i64[1] = vsubq_f32(*(float32x4_t *)&v196, v194).i64[1];
        v220 = vbslq_s8(v198, v181, v214);
        v221 = vmulq_f32((float32x4_t)v220, v219);
        v222 = (int8x16_t)vaddq_f32(v221, (float32x4_t)vrev64q_s32((int32x4_t)v221));
        v220.i64[0] = vextq_s8(v220, v220, 8uLL).u64[0];
        *(int8x8_t *)v218.f32 = vext_s8(*(int8x8_t *)v220.i8, *(int8x8_t *)v222.i8, 4uLL);
        *(int8x8_t *)v220.i8 = vext_s8(*(int8x8_t *)v222.i8, *(int8x8_t *)v220.i8, 4uLL);
        v220.i64[1] = v218.i64[0];
        v223 = (int8x16_t)vabsq_f32((float32x4_t)v220);
        v224 = vminq_f32(vrsqrteq_f32((float32x4_t)v223), v206);
        v225 = vminq_f32(vmulq_f32(v224, vrsqrtsq_f32(vmulq_f32(v224, (float32x4_t)v223), v224)), v206);
        v223.i64[0] = vbslq_s8(v198, v222, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v225, vrsqrtsq_f32(vmulq_f32(v225, (float32x4_t)v223), v225)), v206), (float32x4_t)v223)).u64[0];
        v222.i64[0] = vextq_s8(v216, v216, 8uLL).u64[0];
        *(int8x8_t *)v181.i8 = vqtbl1_s8(v181, *(int8x8_t *)v222.i8);
        v181.i64[1] = v181.i64[0];
        v226 = (int8x16_t)vmulq_f32((float32x4_t)v181, (float32x4_t)vdupq_lane_s64(v219.i64[0], 0));
        v225.i64[0] = vextq_s8(v226, v226, 8uLL).u64[0];
        v223.i64[1] = v226.i64[1];
        v227 = vbslq_s8(v215, vbslq_s8(v210, vextq_s8(v223, v223, 0xCuLL), v196), v195);
        *(int8x8_t *)v210.i8 = vqtbl1_s8(v227, *(int8x8_t *)v216.i8);
        v210.u64[1] = (unint64_t)vqtbl1_s8(v227, *(int8x8_t *)v222.i8);
        v228 = *(float32x4_t *)(v179 + 272);
        v229 = vmulq_f32(v228, (float32x4_t)v210);
        v230 = (int8x16_t)vrev64q_s32((int32x4_t)v229);
        v229.i64[0] = vaddq_f32(v229, (float32x4_t)v230).u64[0];
        *(float32x2_t *)v230.i8 = vadd_f32(*(float32x2_t *)v225.f32, (float32x2_t)vext_s8(*(int8x8_t *)v223.i8, *(int8x8_t *)v225.f32, 4uLL));
        v231 = (float32x4_t)vbslq_s8(v198, v223, v230);
        v232 = (int8x16_t)vaddq_f32(v228, vmulq_f32(v228, (float32x4_t)vdupq_lane_s64(v229.i64[0], 0)));
        v233 = (int8x16_t)vaddq_f32(v180, v231);
        v229.i64[0] = v233.i64[0];
        v229.i64[1] = v232.i64[1];
        v234 = *((int *)a2 + 22);
        v235 = vsubq_f32(vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v179, *(int8x16_t *)v179, 8uLL), vmulq_f32(*(float32x4_t *)v179, v229)), (float32x4_t)v9);
        v236 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v237 = vaddq_s32(vcvtq_s32_f32(v235), vcltzq_f32(v235));
          v238 = (float32x2_t)vsubq_f32(v235, vcvtq_f32_s32(v237)).u64[0];
          v239 = (float32x4_t *)(v236 + 16 * (v237.i32[0] + v237.i32[1] * (int)v234));
          v240 = vaddq_f32(*v239, vmulq_n_f32(vsubq_f32(v239[1], *v239), v238.f32[0]));
          v241 = (int8x16_t)vaddq_f32(v240, vmulq_lane_f32(vsubq_f32(vaddq_f32(v239[v234], vmulq_n_f32(vsubq_f32(v239[(int)v234 + 1], v239[v234]), v238.f32[0])), v240), v238, 1));
        }
        else
        {
          v242 = vaddq_f32(v235, v13);
          v243 = vcvtq_s32_f32(v242);
          v242.i64[0] = vaddq_s32(v243, vcgtq_f32(vcvtq_f32_s32(v243), v242)).u64[0];
          v241 = *(int8x16_t *)(v236 + 16 * (v242.i32[0] + v242.i32[1] * (int)v234));
        }
        v244 = (int8x16_t)vmulq_n_f32((float32x4_t)v241, vmaxq_f32((float32x4_t)vextq_s8(v232, v233, 8uLL), v206).f32[0]);
        v245 = *(int8x16_t *)(v179 + 288);
        v246 = *(int8x16_t *)(v179 + 304);
        v247 = (float32x4_t)vbslq_s8(v245, v241, v244);
        v248 = *(int8x16_t *)(v179 + 96);
        v249 = (int32x4_t)vbslq_s8(v246, (int8x16_t)vsubq_f32(v228, (float32x4_t)vextq_s8(v248, v248, 8uLL)), v227);
        v250 = (float32x4_t)vbslq_s8(v245, v241, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)v248, v247, 3), vmulq_lane_f32(v247, *(float32x2_t *)v249.i8, 1)));
        v251 = (int8x16_t)vmaxq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v249)), v205);
        v252.i64[0] = vsubq_f32(v199, (float32x4_t)v185).u64[0];
        v252.i64[1] = vmulq_lane_f32((float32x4_t)vextq_s8(v9, v251, 0xCuLL), *(float32x2_t *)&v251, 1).i64[1];
        v253 = vbslq_s8(v246, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v252), (float32x4_t)v185)), (int8x16_t)v252);
        v253.i64[1] = vmulq_laneq_f32(*(float32x4_t *)&v253, v250, 3).i64[1];
        v254 = vmvnq_s8(v198);
        v255 = *(float32x4_t *)(v179 + 320);
        v256 = vbslq_s8(v246, (int8x16_t)vsubq_f32((float32x4_t)v253, v255), v253);
        v257 = (float32x4_t)vorrq_s8(vandq_s8(v198, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v249, (int8x16_t)v249, 0xCuLL), (float32x4_t)v256)), vandq_s8(v256, v254));
        v258 = (float32x4_t)vrev64q_s32((int32x4_t)v257);
        v259 = vminq_f32(vmaxq_f32(vrecpeq_f32(v258), (float32x4_t)v196), v187);
        v260 = vminq_f32(vmaxq_f32(vmulq_f32(v259, vrecpsq_f32(v258, v259)), (float32x4_t)v196), v187);
        v260.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v260, vrecpsq_f32(v258, v260)), v257), v255), v199).u64[0];
        v261.i64[0] = v260.i64[0];
        v261.i64[1] = v257.i64[1];
        v260.i64[1] = vdupq_laneq_s64((int64x2_t)v257, 1).u64[0];
        v262 = vbslq_s8(v246, (int8x16_t)vaddq_f32(*(float32x4_t *)(v179 + 336), vmulq_f32(*(float32x4_t *)(v179 + 352), (float32x4_t)vrev64q_s32((int32x4_t)v260))), v261);
        v263 = (float32x4_t)vorrq_s8(vandq_s8(v198, (int8x16_t)vmulq_f32((float32x4_t)v262, (float32x4_t)v262)), vandq_s8(v262, v254));
        v264 = (float32x4_t)vbslq_s8(v245, v241, (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v179 + 80), v263, 2), v250));
        *(float32x4_t *)(v11 + 16 * v15) = vsubq_f32(v264, vmulq_n_f32(v264, vmulq_lane_f32(v263, *(float32x2_t *)v263.f32, 1).f32[0]));
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPageCurlForeground::GetDOD(HgcPageCurlForeground *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcPageCurlForeground *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcPageCurlForeground::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPageCurlForeground::HgcPageCurlForeground(HgcPageCurlForeground *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E4F58;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051120;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 144) = xmmword_1B3051130;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051140;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051150;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051160;
  *(_OWORD *)(v3 + 224) = xmmword_1B3051170;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051180;
  *(_OWORD *)(v3 + 272) = xmmword_1B3051190;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 320) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 336) = xmmword_1B30511A0;
  *(_OWORD *)(v3 + 352) = xmmword_1B30511B0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPageCurlForeground *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2868FD0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPageCurlForeground::~HgcPageCurlForeground(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E4F58;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPageCurlForeground::~HgcPageCurlForeground(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPageCurlForeground::SetParameter(HgcPageCurlForeground *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 6)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcPageCurlForeground::GetParameter(HgcPageCurlForeground *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 6)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSlicedScale::GetProgram(HgcSlicedScale *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000c61\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = c0.x + half(hg_Params[11].x);\n"
             "    r1.y = -c0.x - half(hg_Params[11].x);\n"
             "    r0.y = fmax(r0.x, half(hg_Params[2].y));\n"
             "    r0.z = r0.y*half(hg_Params[0].x);\n"
             "    r1.z = fmin(r1.y, half(hg_Params[1].z));\n"
             "    r1.w = r1.z*half(hg_Params[0].x);\n"
             "    r1.x = dot(half4(frag._texCoord0), half4(hg_Params[5]));\n"
             "    r1.x = r1.x/half(hg_Params[9].x);\n"
             "    r1.x = r1.x*half(hg_Params[7].x);\n"
             "    r1.x = r1.x/half(hg_Params[10].x);\n"
             "    r1.z = r1.z*half(hg_Params[0].x) + -r1.z;\n"
             "    r0.y = -r0.y*half(hg_Params[0].x) + r0.y;\n"
             "    s0.x = float(float(r1.x) < float(r1.w));\n"
             "    s1.xyz = float3(r0.xyz);\n"
             "    s1.w = float(float(r0.z) < float(r1.x));\n"
             "    s0.y = s1.w*-s0.x;\n"
             "    s1.w = float(s1.z >= float(r1.x));\n"
             "    s1.z = float(float(r1.x) >= float(r1.w));\n"
             "    r1.zw = r1.xx - r1.zw;\n"
             "    r1.z = select(r1.z, c0.y, r1.w < 0.00000h);\n"
             "    s1.y = float(r1.x) + s1.y;\n"
             "    r1.x = r1.x/half(hg_Params[0].x);\n"
             "    r1.w = fmin(r1.y, half(hg_Params[3].w));\n"
             "    s1.z = float(c0.z) - s1.z;\n"
             "    s0.x = float(-s1.w >= float(c0.y));\n"
             "    s0.x = fmin(s1.z, s0.x);\n"
             "    s1.z = fmin(s1.z, s1.w);\n"
             "    r1.z = select(r1.z, half(s1.y), -half(s1.z) < 0.00000h);\n"
             "    s0.x = fmin(s0.x, s0.y);\n"
             "    r1.x = select(r1.z, r1.x, half(s0.x) < 0.00000h);\n"
             "    r1.z = fmax(half(s1.x), half(hg_Params[4].z));\n"
             "    r0.xy = r1.wz*half2(hg_Params[0].yy);\n"
             "    r1.x = r1.x*half(hg_Params[9].x);\n"
             "    r1.y = dot(half4(frag._texCoord0), half4(hg_Params[6]));\n"
             "    r1.y = r1.y/half(hg_Params[9].y);\n"
             "    r1.y = r1.y*half(hg_Params[8].y);\n"
             "    r1.y = r1.y/half(hg_Params[10].y);\n"
             "    r1.w = r1.w*half(hg_Params[0].y) + -r1.w;\n"
             "    s0.xy = float2(r0.xy);\n"
             "    s0.w = float(float(r1.y) < float(r0.x));\n"
             "    s0.z = float(s0.y < float(r1.y));\n"
             "    s1.x = fmin(s0.z, s0.w);\n"
             "    s0.z = float(s0.y >= float(r1.y));\n"
             "    s0.y = float(float(r1.y) >= s0.x);\n"
             "    s0.w = s0.z;\n"
             "    s0.x = float(r1.y) - s0.x;\n"
             "    r1.w = r1.y - r1.w;\n"
             "    s0.yw = float2(-s0.yw >= float2(c0.yy));\n"
             "    s0.yw = fmin(s0.yy, s0.zw);\n"
             "    s0.w = fmin(s0.w, s1.x);\n"
             "    r1.z = -r1.z*half(hg_Params[0].y) + r1.z;\n"
             "    r1.w = select(r1.w, c0.y, half(s0.x) < 0.00000h);\n"
             "    s0.x = float(r1.y) + float(r1.z);\n"
             "    r1.w = select(r1.w, half(s0.x), -half(s0.y) < 0.00000h);\n"
             "    r1.y = r1.y/half(hg_Params[0].y);\n"
             "    r1.y = select(r1.w, r1.y, -half(s0.w) < 0.00000h);\n"
             "    s1.x = float(r1.x)*hg_Params[5].x;\n"
             "    r1.x = r1.y*half(hg_Params[9].y);\n"
             "    s1.w = float(c0.z);\n"
             "    s1.y = float(r1.x)*hg_Params[6].y;\n"
             "    s0.y = dot(s1.xyw, hg_Params[8].xyw);\n"
             "    s0.x = dot(s1.xyw, hg_Params[7].xyw);\n"
             "    s0.xy = s0.xy + hg_Params[12].xy;\n"
             "    s0.xy = s0.xy*hg_Params[12].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f41186f5:ebdceff1:2e0de634:ce1bca06\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:000d:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000aa3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = c0.x + hg_Params[11].x;\n"
             "    r1.y = -c0.x - hg_Params[11].x;\n"
             "    r0.y = fmax(r0.x, hg_Params[2].y);\n"
             "    r0.z = r0.y*hg_Params[0].x;\n"
             "    r1.z = fmin(r1.y, hg_Params[1].z);\n"
             "    r1.w = r1.z*hg_Params[0].x;\n"
             "    r1.x = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r1.x = r1.x/hg_Params[9].x;\n"
             "    r1.x = r1.x*hg_Params[7].x;\n"
             "    r1.x = r1.x/hg_Params[10].x;\n"
             "    r1.z = r1.z*hg_Params[0].x + -r1.z;\n"
             "    r0.y = -r0.y*hg_Params[0].x + r0.y;\n"
             "    r2.x = float(r1.x < r1.w);\n"
             "    r0.w = float(r0.z < r1.x);\n"
             "    r2.y = r0.w*-r2.x;\n"
             "    r0.w = float(r0.z >= r1.x);\n"
             "    r0.z = float(r1.x >= r1.w);\n"
             "    r1.zw = r1.xx - r1.zw;\n"
             "    r1.z = select(r1.z, c0.y, r1.w < 0.00000f);\n"
             "    r0.y = r1.x + r0.y;\n"
             "    r1.x = r1.x/hg_Params[0].x;\n"
             "    r1.w = fmin(r1.y, hg_Params[3].w);\n"
             "    r0.z = c0.z - r0.z;\n"
             "    r2.x = float(-r0.w >= c0.y);\n"
             "    r2.x = fmin(r0.z, r2.x);\n"
             "    r0.z = fmin(r0.z, r0.w);\n"
             "    r1.z = select(r1.z, r0.y, -r0.z < 0.00000f);\n"
             "    r2.x = fmin(r2.x, r2.y);\n"
             "    r1.x = select(r1.z, r1.x, r2.x < 0.00000f);\n"
             "    r1.z = fmax(r0.x, hg_Params[4].z);\n"
             "    r2.xy = r1.wz*hg_Params[0].yy;\n"
             "    r1.x = r1.x*hg_Params[9].x;\n"
             "    r1.y = dot(frag._texCoord0, hg_Params[6]);\n"
             "    r1.y = r1.y/hg_Params[9].y;\n"
             "    r1.y = r1.y*hg_Params[8].y;\n"
             "    r1.y = r1.y/hg_Params[10].y;\n"
             "    r1.w = r1.w*hg_Params[0].y + -r1.w;\n"
             "    r2.w = float(r1.y < r2.x);\n"
             "    r2.z = float(r2.y < r1.y);\n"
             "    r0.x = fmin(r2.z, r2.w);\n"
             "    r2.z = float(r2.y >= r1.y);\n"
             "    r2.y = float(r1.y >= r2.x);\n"
             "    r2.w = r2.z;\n"
             "    r2.x = r1.y - r2.x;\n"
             "    r1.w = r1.y - r1.w;\n"
             "    r2.yw = float2(-r2.yw >= c0.yy);\n"
             "    r2.yw = fmin(r2.yy, r2.zw);\n"
             "    r2.w = fmin(r2.w, r0.x);\n"
             "    r1.z = -r1.z*hg_Params[0].y + r1.z;\n"
             "    r1.w = select(r1.w, c0.y, r2.x < 0.00000f);\n"
             "    r2.x = r1.y + r1.z;\n"
             "    r1.w = select(r1.w, r2.x, -r2.y < 0.00000f);\n"
             "    r1.y = r1.y/hg_Params[0].y;\n"
             "    r1.y = select(r1.w, r1.y, -r2.w < 0.00000f);\n"
             "    r0.x = r1.x*hg_Params[5].x;\n"
             "    r1.x = r1.y*hg_Params[9].y;\n"
             "    r0.w = c0.z;\n"
             "    r0.y = r1.x*hg_Params[6].y;\n"
             "    r2.y = dot(r0.xyw, hg_Params[8].xyw);\n"
             "    r2.x = dot(r0.xyw, hg_Params[7].xyw);\n"
             "    r2.xy = r2.xy + hg_Params[12].xy;\n"
             "    r2.xy = r2.xy*hg_Params[12].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e0d37d90:fe73f5ca:07fc9ff0:84c27f71\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000d:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000c7b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.x = c0.x + hg_ProgramLocal11.x;\n"
           "    r1.y = -c0.x - hg_ProgramLocal11.x;\n"
           "    r0.y = max(r0.x, hg_ProgramLocal2.y);\n"
           "    r0.z = r0.y*hg_ProgramLocal0.x;\n"
           "    r1.z = min(r1.y, hg_ProgramLocal1.z);\n"
           "    r1.w = r1.z*hg_ProgramLocal0.x;\n"
           "    r1.x = dot(hg_TexCoord0, hg_ProgramLocal5);\n"
           "    r1.x = r1.x/hg_ProgramLocal9.x;\n"
           "    r1.x = r1.x*hg_ProgramLocal7.x;\n"
           "    r1.x = r1.x/hg_ProgramLocal10.x;\n"
           "    r1.z = r1.z*hg_ProgramLocal0.x + -r1.z;\n"
           "    r0.y = -r0.y*hg_ProgramLocal0.x + r0.y;\n"
           "    r2.x = float(r1.x < r1.w);\n"
           "    r0.w = float(r0.z < r1.x);\n"
           "    r2.y = r0.w*-r2.x;\n"
           "    r0.w = float(r0.z >= r1.x);\n"
           "    r0.z = float(r1.x >= r1.w);\n"
           "    r1.zw = r1.xx - r1.zw;\n"
           "    r1.z = r1.w < 0.00000 ? c0.y : r1.z;\n"
           "    r0.y = r1.x + r0.y;\n"
           "    r1.x = r1.x/hg_ProgramLocal0.x;\n"
           "    r1.w = min(r1.y, hg_ProgramLocal3.w);\n"
           "    r0.z = c0.z - r0.z;\n"
           "    r2.x = float(-r0.w >= c0.y);\n"
           "    r2.x = min(r0.z, r2.x);\n"
           "    r0.z = min(r0.z, r0.w);\n"
           "    r1.z = -r0.z < 0.00000 ? r0.y : r1.z;\n"
           "    r2.x = min(r2.x, r2.y);\n"
           "    r1.x = r2.x < 0.00000 ? r1.x : r1.z;\n"
           "    r1.z = max(r0.x, hg_ProgramLocal4.z);\n"
           "    r2.xy = r1.wz*hg_ProgramLocal0.yy;\n"
           "    r1.x = r1.x*hg_ProgramLocal9.x;\n"
           "    r1.y = dot(hg_TexCoord0, hg_ProgramLocal6);\n"
           "    r1.y = r1.y/hg_ProgramLocal9.y;\n"
           "    r1.y = r1.y*hg_ProgramLocal8.y;\n"
           "    r1.y = r1.y/hg_ProgramLocal10.y;\n"
           "    r1.w = r1.w*hg_ProgramLocal0.y + -r1.w;\n"
           "    r2.w = float(r1.y < r2.x);\n"
           "    r2.z = float(r2.y < r1.y);\n"
           "    r0.x = min(r2.z, r2.w);\n"
           "    r2.z = float(r2.y >= r1.y);\n"
           "    r2.y = float(r1.y >= r2.x);\n"
           "    r2.w = r2.z;\n"
           "    r2.x = r1.y - r2.x;\n"
           "    r1.w = r1.y - r1.w;\n"
           "    r2.yw = vec2(greaterThanEqual(-r2.yw, c0.yy));\n"
           "    r2.yw = min(r2.yy, r2.zw);\n"
           "    r2.w = min(r2.w, r0.x);\n"
           "    r1.z = -r1.z*hg_ProgramLocal0.y + r1.z;\n"
           "    r1.w = r2.x < 0.00000 ? c0.y : r1.w;\n"
           "    r2.x = r1.y + r1.z;\n"
           "    r1.w = -r2.y < 0.00000 ? r2.x : r1.w;\n"
           "    r1.y = r1.y/hg_ProgramLocal0.y;\n"
           "    r1.y = -r2.w < 0.00000 ? r1.y : r1.w;\n"
           "    r0.x = r1.x*hg_ProgramLocal5.x;\n"
           "    r1.x = r1.y*hg_ProgramLocal9.y;\n"
           "    r0.w = c0.z;\n"
           "    r0.y = r1.x*hg_ProgramLocal6.y;\n"
           "    r2.y = dot(r0.xyw, hg_ProgramLocal8.xyw);\n"
           "    r2.x = dot(r0.xyw, hg_ProgramLocal7.xyw);\n"
           "    r2.xy = r2.xy + hg_ProgramLocal12.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal12.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r2.xy);\n"
           "}\n"
           "//MD5=a855e8cc:e7e9e0ad:b70918bc:4185df98\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000d:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSlicedScale::InitProgramDescriptor(HgcSlicedScale *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSlicedScale_hgc_visible", "//Metal1.0     \n//LEN=00000009de\n[[ visible ]] FragmentOut HgcSlicedScale_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = c0.x + hg_Params[11].x;\n"
    "    r1.y = -c0.x - hg_Params[11].x;\n"
    "    r0.y = fmax(r0.x, hg_Params[2].y);\n"
    "    r0.z = r0.y*hg_Params[0].x;\n"
    "    r1.z = fmin(r1.y, hg_Params[1].z);\n"
    "    r1.w = r1.z*hg_Params[0].x;\n"
    "    r1.x = dot(texCoord0, hg_Params[5]);\n"
    "    r1.x = r1.x/hg_Params[9].x;\n"
    "    r1.x = r1.x*hg_Params[7].x;\n"
    "    r1.x = r1.x/hg_Params[10].x;\n"
    "    r1.z = r1.z*hg_Params[0].x + -r1.z;\n"
    "    r0.y = -r0.y*hg_Params[0].x + r0.y;\n"
    "    r2.x = float(r1.x < r1.w);\n"
    "    r0.w = float(r0.z < r1.x);\n"
    "    r2.y = r0.w*-r2.x;\n"
    "    r0.w = float(r0.z >= r1.x);\n"
    "    r0.z = float(r1.x >= r1.w);\n"
    "    r1.zw = r1.xx - r1.zw;\n"
    "    r1.z = select(r1.z, c0.y, r1.w < 0.00000f);\n"
    "    r0.y = r1.x + r0.y;\n"
    "    r1.x = r1.x/hg_Params[0].x;\n"
    "    r1.w = fmin(r1.y, hg_Params[3].w);\n"
    "    r0.z = c0.z - r0.z;\n"
    "    r2.x = float(-r0.w >= c0.y);\n"
    "    r2.x = fmin(r0.z, r2.x);\n"
    "    r0.z = fmin(r0.z, r0.w);\n"
    "    r1.z = select(r1.z, r0.y, -r0.z < 0.00000f);\n"
    "    r2.x = fmin(r2.x, r2.y);\n"
    "    r1.x = select(r1.z, r1.x, r2.x < 0.00000f);\n"
    "    r1.z = fmax(r0.x, hg_Params[4].z);\n"
    "    r2.xy = r1.wz*hg_Params[0].yy;\n"
    "    r1.x = r1.x*hg_Params[9].x;\n"
    "    r1.y = dot(texCoord0, hg_Params[6]);\n"
    "    r1.y = r1.y/hg_Params[9].y;\n"
    "    r1.y = r1.y*hg_Params[8].y;\n"
    "    r1.y = r1.y/hg_Params[10].y;\n"
    "    r1.w = r1.w*hg_Params[0].y + -r1.w;\n"
    "    r2.w = float(r1.y < r2.x);\n"
    "    r2.z = float(r2.y < r1.y);\n"
    "    r0.x = fmin(r2.z, r2.w);\n"
    "    r2.z = float(r2.y >= r1.y);\n"
    "    r2.y = float(r1.y >= r2.x);\n"
    "    r2.w = r2.z;\n"
    "    r2.x = r1.y - r2.x;\n"
    "    r1.w = r1.y - r1.w;\n"
    "    r2.yw = float2(-r2.yw >= c0.yy);\n"
    "    r2.yw = fmin(r2.yy, r2.zw);\n"
    "    r2.w = fmin(r2.w, r0.x);\n"
    "    r1.z = -r1.z*hg_Params[0].y + r1.z;\n"
    "    r1.w = select(r1.w, c0.y, r2.x < 0.00000f);\n"
    "    r2.x = r1.y + r1.z;\n"
    "    r1.w = select(r1.w, r2.x, -r2.y < 0.00000f);\n"
    "    r1.y = r1.y/hg_Params[0].y;\n"
    "    r1.y = select(r1.w, r1.y, -r2.w < 0.00000f);\n"
    "    r0.x = r1.x*hg_Params[5].x;\n"
    "    r1.x = r1.y*hg_Params[9].y;\n"
    "    r0.w = c0.z;\n"
    "    r0.y = r1.x*hg_Params[6].y;\n"
    "    r2.y = dot(r0.xyw, hg_Params[8].xyw);\n"
    "    r2.x = dot(r0.xyw, hg_Params[7].xyw);\n"
    "    r2.xy = r2.xy + hg_Params[12].xy;\n"
    "    r2.xy = r2.xy*hg_Params[12].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28691D8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSlicedScale");
}

void sub_1B28691E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30511E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2869368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28693B8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28693B0);
}

_QWORD *HgcSlicedScale::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSlicedScale [hgc1]");
}

uint64_t HgcSlicedScale::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 12, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSlicedScale::Bind(HgcSlicedScale *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HgcSlicedScale *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSlicedScale::RenderTile(HgcSlicedScale *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float32x4_t v16;
  uint64_t v17;
  int v18;
  float32x4_t v19;
  _OWORD *v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int8x16_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float32x4_t v129;
  int8x16_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  int8x16_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t v181;
  uint64_t v182;
  int32x4_t v183;
  float32x2_t v184;
  float32x4_t *v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  int32x4_t v189;
  float32x4_t *v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  int32x4_t v195;
  float32x4_t v196;
  int32x4_t v197;
  float32x4_t *v198;
  float32x4_t v199;
  _OWORD *v200;
  float32x4_t v201;
  int8x16_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  float32x4_t v212;
  int8x16_t v213;
  int8x16_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  int8x16_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  int8x16_t v228;
  float32x4_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int32x4_t v238;
  int64x2_t v239;
  int8x16_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  float32x4_t v246;
  int8x16_t v247;
  int8x16_t v248;
  float32x4_t v249;
  int8x16_t v250;
  float32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x8_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x4_t v265;
  int8x16_t v266;
  float32x4_t v267;
  int8x16_t v268;
  unint64_t v269;
  float32x4_t v270;
  int32x4_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  int8x16_t v279;
  float32x4_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  float32x4_t v284;
  float32x4_t v285;
  int8x16_t v286;
  float32x4_t v287;
  int8x16_t v288;
  float32x4_t v289;
  int8x16_t v290;
  int8x8_t v291;
  int8x16_t v292;
  int8x16_t v293;
  uint64_t v294;
  float32x4_t v295;
  uint64_t v296;
  int32x4_t v297;
  float32x2_t v298;
  float32x4_t *v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  int32x4_t v304;
  float32x4_t v306;
  float32x4_t v307;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcSlicedScale *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = (float32x4_t)xmmword_1B304F230;
    v12 = (int8x16_t)xmmword_1B304F240;
    v13 = *((_QWORD *)a2 + 2);
    v14 = 16 * *((int *)a2 + 6);
    v15 = 1.0;
    v16 = v9;
    v307 = v9;
    do
    {
      if (v10 < 2)
      {
        v17 = 0;
        v19 = v16;
      }
      else
      {
        v17 = 0;
        v18 = v10;
        v306 = v16;
        v19 = v16;
        do
        {
          v20 = (_OWORD *)*((_QWORD *)this + 51);
          v22 = *((float32x4_t *)v20 + 12);
          v21 = *((int8x16_t *)v20 + 13);
          v24 = *((float32x4_t *)v20 + 10);
          v23 = *((float32x4_t *)v20 + 11);
          v25 = (int32x4_t)vaddq_f32(v23, v22);
          v26 = (int8x16_t)vsubq_f32(v22, (float32x4_t)vrev64q_s32((int32x4_t)v23));
          v27 = *((float32x4_t *)v20 + 3);
          v28.i64[0] = vbslq_s8(v21, (int8x16_t)v25, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v25), *((float32x4_t *)v20 + 2))).u64[0];
          v28.i64[1] = vmulq_lane_f32((float32x4_t)vdupq_lane_s64(*(_QWORD *)v20, 0), *(float32x2_t *)&v28, 1).i64[1];
          v29 = vminq_f32((float32x4_t)vextq_s8(v26, v26, 0xCuLL), *((float32x4_t *)v20 + 1));
          v26.i64[1] = v29.i64[1];
          v30 = vaddq_f32(v19, v11);
          v31 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v20, *(int8x16_t *)v20, 4uLL), v29, 2);
          v33 = *((int8x16_t *)v20 + 14);
          v32 = *((int8x16_t *)v20 + 15);
          v34 = vbslq_s8(v33, v31, v26);
          v35 = *((float32x4_t *)v20 + 4);
          v36 = *((float32x4_t *)v20 + 5);
          v37 = (int8x16_t)vmulq_f32(v19, v36);
          v38 = (int8x16_t)vmulq_f32(v30, v36);
          v39 = (int8x16_t)vaddq_f32((float32x4_t)v37, (float32x4_t)vextq_s8(v37, v37, 4uLL));
          v40 = (int8x16_t)vaddq_f32((float32x4_t)v38, (float32x4_t)vextq_s8(v38, v38, 4uLL));
          v41 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v39, (float32x4_t)vextq_s8(v39, v39, 8uLL)), v34);
          v43 = *((float32x4_t *)v20 + 8);
          v42 = *((float32x4_t *)v20 + 9);
          v44 = vrecpeq_f32(v42);
          v45 = *((float32x4_t *)v20 + 16);
          v46 = *((int8x16_t *)v20 + 17);
          v47 = vminq_f32(vmaxq_f32(v44, (float32x4_t)v32), v45);
          v48 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v42, v47)), (float32x4_t)v32), v45);
          v49 = vmulq_f32(v48, vrecpsq_f32(v42, v48));
          v50 = (int8x16_t)vmulq_f32(v49, (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v40, (float32x4_t)vextq_s8(v40, v40, 8uLL)), v34));
          v51 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v49, v41), v34);
          v52 = (float32x4_t)vbslq_s8(v21, v50, v34);
          v54 = *((float32x4_t *)v20 + 6);
          v53 = *((float32x4_t *)v20 + 7);
          v55 = vrecpeq_f32(v24);
          v56 = vminq_f32(vmaxq_f32(v55, (float32x4_t)v32), v45);
          v57 = vminq_f32(vmaxq_f32(vmulq_f32(v56, vrecpsq_f32(v24, v56)), (float32x4_t)v32), v45);
          v58 = vmulq_f32(v57, vrecpsq_f32(v24, v57));
          v59 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v58, (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v53, v51), v34)), v34);
          v60 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v58, (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v53, v52), v34)), v34);
          v61 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v59, COERCE_FLOAT(*v20)), (float32x4_t)v59), v59);
          v62 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v60, COERCE_FLOAT(*v20)), (float32x4_t)v60), v60);
          v64 = *((int8x16_t *)v20 + 18);
          v63 = *((int8x16_t *)v20 + 19);
          v65 = (int32x4_t)vbslq_s8(v64, (int8x16_t)vsubq_f32(v28, vmulq_n_f32(v28, COERCE_FLOAT(*v20))), (int8x16_t)v28);
          v66 = (int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL);
          v67 = (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL);
          v68 = (float32x4_t)vrev64q_s32(v65);
          v69 = (int32x4_t)vbslq_s8(v33, vandq_s8(v63, (int8x16_t)vcgtq_f32((float32x4_t)v66, v68)), (int8x16_t)v65);
          v70 = (int32x4_t)vbslq_s8(v33, vandq_s8(v63, (int8x16_t)vcgtq_f32(v67, v68)), (int8x16_t)v65);
          v71 = (int8x16_t)vmulq_laneq_f32(vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v63, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 0xCuLL), (float32x4_t)v61)))), (float32x4_t)v69, 3);
          v72 = (int8x16_t)vmulq_laneq_f32(vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v63, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 0xCuLL), (float32x4_t)v62)))), (float32x4_t)v70, 3);
          v69.i64[1] = vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(v69), *(float32x4_t *)&v66)).i64[1];
          v73 = vbslq_s8(v46, vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (float32x4_t)vrev64q_s32(v61))), (int8x16_t)v69);
          v70.i64[1] = vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(v70), v67)).i64[1];
          v74 = vbslq_s8(v46, vandq_s8(v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), (float32x4_t)vrev64q_s32(v62))), (int8x16_t)v70);
          v75 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.i8, 0), (float32x4_t)v61);
          v76 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 0), (float32x4_t)v62);
          v65.i64[0] = v61.i64[0];
          v65.i64[1] = vdupq_laneq_s64((int64x2_t)v75, 1).u64[0];
          v66.i64[0] = v62.i64[0];
          v66.i64[1] = vdupq_laneq_s64((int64x2_t)v76, 1).u64[0];
          v77 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)vrev64q_s32(v65)), v32, v75);
          v69.i64[0] = v61.i64[0];
          v69.i64[1] = v77.i64[1];
          v78 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)vrev64q_s32(v66)), v32, v76);
          v66.i64[0] = v62.i64[0];
          v66.i64[1] = v78.i64[1];
          v61.i64[1] = vdupq_laneq_s64(v77, 1).u64[0];
          v62.i64[1] = vdupq_laneq_s64(v78, 1).u64[0];
          v79 = vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v61), (float32x4_t)v73), v73);
          v80 = vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v62), (float32x4_t)v74), v74);
          v81 = vrecpeq_f32(*(float32x4_t *)v20);
          v82 = vminq_f32(vmaxq_f32(v81, (float32x4_t)v32), v45);
          v83 = vminq_f32(vmaxq_f32(vmulq_f32(v82, vrecpsq_f32(*(float32x4_t *)v20, v82)), (float32x4_t)v32), v45);
          v84 = vmulq_f32(v83, vrecpsq_f32(*(float32x4_t *)v20, v83));
          v85 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v84, (float32x4_t)v69), (int8x16_t)v69);
          v86 = vbslq_s8(v21, (int8x16_t)vmulq_f32(v84, (float32x4_t)v66), (int8x16_t)v66);
          v87 = vbslq_s8(v33, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v85, v85, 8uLL), v27), v85);
          v88 = vbslq_s8(v33, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v86, v86, 8uLL), v27), v86);
          v89 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v63, (float32x4_t)v79), v79);
          v90 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v63, (float32x4_t)v80), v80);
          v91 = *((int8x16_t *)v20 + 20);
          v92 = *((int8x16_t *)v20 + 21);
          v93 = (int32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL), (float32x4_t)vbslq_s8(v21, vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL)), (float32x4_t)v91)), v71)), v71);
          v94 = (int32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), (float32x4_t)vbslq_s8(v21, vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL)), (float32x4_t)v91)), v72)), v72);
          v95 = (int8x16_t)vminq_f32((float32x4_t)v89, (float32x4_t)vrev64q_s32(v89));
          v96 = (float32x4_t)vextq_s8(v95, (int8x16_t)v89, 8uLL);
          v89.i64[1] = v95.i64[1];
          v97 = (int8x16_t)vminq_f32((float32x4_t)v90, (float32x4_t)vrev64q_s32(v90));
          v98 = (float32x4_t)vextq_s8(v97, (int8x16_t)v90, 8uLL);
          v90.i64[1] = v97.i64[1];
          v99 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v89, (float32x4_t)v91), vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL), v87), v87);
          v100 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v90, (float32x4_t)v91), vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), v88), v88);
          v88.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, vminq_f32((float32x4_t)v93, (float32x4_t)vrev64q_s32(v93))), v99, (int8x16_t)vdupq_laneq_s64((int64x2_t)v99, 1)).u64[0];
          v87.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, vminq_f32((float32x4_t)v94, (float32x4_t)vrev64q_s32(v94))), v100, (int8x16_t)vdupq_laneq_s64((int64x2_t)v100, 1)).u64[0];
          v88.i64[1] = v99.i64[1];
          v101 = vbslq_s8(v46, (int8x16_t)vmaxq_f32(v96, v35), v88);
          v87.i64[1] = v100.i64[1];
          v102 = vbslq_s8(v46, (int8x16_t)vmaxq_f32(v98, v35), v87);
          *(int8x8_t *)v88.i8 = vqtbl1_s8(v101, *(int8x8_t *)v92.i8);
          v35.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          v88.u64[1] = (unint64_t)vqtbl1_s8(v101, *(int8x8_t *)v35.f32);
          *(int8x8_t *)v87.i8 = vqtbl1_s8(v102, *(int8x8_t *)v92.i8);
          v87.u64[1] = (unint64_t)vqtbl1_s8(v102, *(int8x8_t *)v35.f32);
          v103 = (int8x16_t)vmulq_lane_f32((float32x4_t)v88, *(float32x2_t *)v20, 1);
          v104 = (int8x16_t)vmulq_lane_f32((float32x4_t)v87, *(float32x2_t *)v20, 1);
          v93.i64[0] = vmulq_f32(v42, (float32x4_t)v101).u64[0];
          v94.i64[0] = vmulq_f32(v42, (float32x4_t)v102).u64[0];
          v93.i64[1] = v101.i64[1];
          v94.i64[1] = v102.i64[1];
          v105 = (int8x16_t)vmulq_f32(v19, v54);
          v106 = (int8x16_t)vmulq_f32(v30, v54);
          v107 = (int8x16_t)vaddq_f32((float32x4_t)v105, (float32x4_t)vextq_s8(v105, v105, 4uLL));
          v108 = (int8x16_t)vaddq_f32((float32x4_t)v106, (float32x4_t)vextq_s8(v106, v106, 4uLL));
          v109 = vminq_f32(vmaxq_f32(v44, (float32x4_t)v91), v45);
          v110 = vminq_f32(vmaxq_f32(vmulq_f32(v109, vrecpsq_f32(v42, v109)), (float32x4_t)v91), v45);
          v111 = vmulq_f32(v110, vrecpsq_f32(v42, v110));
          v112 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v43, (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v111, (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)v107, (float32x4_t)vextq_s8(v107, v107, 8uLL)), (int8x16_t)v93)), (int8x16_t)v93)), (int8x16_t)v93);
          v113 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v43, (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v111, (float32x4_t)vbslq_s8(v64, (int8x16_t)vaddq_f32((float32x4_t)v108, (float32x4_t)vextq_s8(v108, v108, 8uLL)), (int8x16_t)v94)), (int8x16_t)v94)), (int8x16_t)v94);
          v114 = vminq_f32(vmaxq_f32(v55, (float32x4_t)v91), v45);
          v115 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpsq_f32(v24, v114)), (float32x4_t)v91), v45);
          v116 = vmulq_f32(v115, vrecpsq_f32(v24, v115));
          v117 = vbslq_s8(v64, (int8x16_t)vmulq_f32(v116, v112), (int8x16_t)v93);
          v118 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v116, v113), (int8x16_t)v94);
          v119 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(vmulq_lane_f32((float32x4_t)v117, *(float32x2_t *)v20, 1), (float32x4_t)v117), v117);
          v120 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(vmulq_lane_f32(v118, *(float32x2_t *)v20, 1), v118), (int8x16_t)v118);
          v121 = (float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL);
          v122 = (float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
          v103.i64[1] = vandq_s8(v91, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v103, v103, 4uLL), v121)).i64[1];
          v104.i64[1] = vandq_s8(v91, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v104, v104, 4uLL), v122)).i64[1];
          v123 = vandq_s8(v63, (int8x16_t)vcgtq_f32(v119, (float32x4_t)v103));
          v124 = vandq_s8(v63, (int8x16_t)vcgtq_f32(v120, (float32x4_t)v104));
          v125 = (float32x4_t)vbslq_s8(v46, vextq_s8(v123, v123, 0xCuLL), v103);
          v126 = (float32x4_t)vbslq_s8(v46, vextq_s8(v124, v124, 0xCuLL), v104);
          v127 = vextq_s8(v12, vandq_s8(v63, (int8x16_t)vcgeq_f32(v125, v119)), 0xCuLL);
          v128 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v127, 1);
          v127.i64[0] = v125.i64[0];
          v129 = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 0xCuLL), v125);
          v125.i64[1] = v128.i64[0];
          v130 = vextq_s8(v128, vandq_s8(v63, (int8x16_t)vcgeq_f32(v126, v120)), 0xCuLL);
          v123.i64[0] = vdupq_laneq_s64((int64x2_t)v130, 1).u64[0];
          v130.i64[0] = v126.i64[0];
          v131 = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 0xCuLL), v126);
          v126.i64[1] = v123.i64[0];
          v132 = (int32x4_t)vbslq_s8(v64, vandq_s8(v63, (int8x16_t)vcgeq_f32(v119, (float32x4_t)vrev64q_s32((int32x4_t)v125))), v127);
          v133 = (int32x4_t)vbslq_s8(v64, vandq_s8(v63, (int8x16_t)vcgeq_f32(v120, (float32x4_t)vrev64q_s32((int32x4_t)v126))), v130);
          v134 = vbslq_s8(v33, (int8x16_t)vrev64q_s32(v132), (int8x16_t)v132);
          v135 = vbslq_s8(v33, (int8x16_t)vrev64q_s32(v133), (int8x16_t)v133);
          v136 = vbslq_s8(v21, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v119), (float32x4_t)v134), v134);
          v137 = vbslq_s8(v21, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v120), (float32x4_t)v135), v135);
          v138 = (int8x16_t)vsubq_f32(v122, v120);
          v139 = vbslq_s8(v33, (int8x16_t)vsubq_f32(v121, v119), v117);
          v140 = vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v136), (float32x4_t)v32));
          v141 = vandq_s8(v63, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v137), (float32x4_t)v32));
          v142 = *((int8x16_t *)v20 + 22);
          v143 = *((int8x16_t *)v20 + 23);
          v144 = vbslq_s8(v142, v136, v140);
          v145 = vbslq_s8(v142, v137, v141);
          *(int8x8_t *)v136.i8 = vqtbl1_s8(v144, *(int8x8_t *)v92.i8);
          v136.u64[1] = (unint64_t)vqtbl1_s8(v144, *(int8x8_t *)v35.f32);
          *(int8x8_t *)v141.i8 = vqtbl1_s8(v145, *(int8x8_t *)v92.i8);
          v141.u64[1] = (unint64_t)vqtbl1_s8(v145, *(int8x8_t *)v35.f32);
          v146 = vbslq_s8(v33, v138, (int8x16_t)v118);
          v147 = vbslq_s8(v21, v144, (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v144.i64[0], 0), (float32x4_t)v136));
          v148 = vbslq_s8(v21, v145, (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v145.i64[0], 0), (float32x4_t)v141));
          v149 = (int8x16_t)vminq_f32((float32x4_t)v147, v129);
          v118.i64[0] = vextq_s8(v149, v147, 0xCuLL).u64[0];
          *(int8x8_t *)v141.i8 = vext_s8(*(int8x8_t *)v147.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL), 4uLL);
          v147.i64[1] = v149.i64[1];
          v150 = vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v139, vmulq_lane_f32((float32x4_t)v139, *(float32x2_t *)v20, 1)), v139);
          v151 = (int8x16_t)vminq_f32((float32x4_t)v148, v131);
          v141.i64[1] = v118.i64[0];
          v152 = vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v146, vmulq_lane_f32((float32x4_t)v146, *(float32x2_t *)v20, 1)), v146);
          v118.i64[0] = vextq_s8(v151, v148, 0xCuLL).u64[0];
          v46.i64[0] = v148.i64[0];
          v46.i64[1] = v151.i64[1];
          *(int8x8_t *)v148.i8 = vext_s8(*(int8x8_t *)v148.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), 4uLL);
          v148.i64[1] = v118.i64[0];
          v153 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)v141), v32, v150), v150);
          v154 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)v148), v32, v152), v152);
          v155 = vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v153), (float32x4_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL)), v147);
          v156 = vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v154), (float32x4_t)vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)), v46);
          v157 = vextq_s8(v155, v155, 4uLL);
          v158 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v155, v155, 8uLL), (float32x4_t)v32);
          v153.i64[1] = vbslq_s8(v158, v157, *(int8x16_t *)&v153).i64[1];
          v159 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v156, v156, 8uLL), (float32x4_t)v32);
          v154.i64[1] = vbslq_s8(v159, vextq_s8(v156, v156, 4uLL), *(int8x16_t *)&v154).i64[1];
          v160 = vminq_f32(vmaxq_f32(v81, (float32x4_t)v91), v45);
          v161 = vminq_f32(vmaxq_f32(vmulq_f32(v160, vrecpsq_f32(*(float32x4_t *)v20, v160)), (float32x4_t)v91), v45);
          v162 = vmulq_f32(v161, vrecpsq_f32(*(float32x4_t *)v20, v161));
          v163 = vbslq_s8(v64, (int8x16_t)vmulq_f32(v162, v153), (int8x16_t)v153);
          v164 = vbslq_s8(v64, (int8x16_t)vmulq_f32(v162, v154), (int8x16_t)v154);
          v165 = (float32x4_t)vbslq_s8(v21, v163, vbslq_s8(v158, v163, vextq_s8(v163, v163, 8uLL)));
          v166 = (float32x4_t)vbslq_s8(v21, v164, vbslq_s8(v159, v164, vextq_s8(v164, v164, 8uLL)));
          v167 = (int8x16_t)vmulq_f32(v36, v165);
          v168 = (int8x16_t)vmulq_f32(v36, v166);
          v169 = (float32x4_t)vrev64q_s32((int32x4_t)v42);
          v167.i32[3] = 1.0;
          v15 = 1.0;
          v168.i32[3] = 1.0;
          v170 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_n_f32(v54, vmulq_lane_f32(v169, *(float32x2_t *)v165.f32, 1).f32[0]), v167);
          v171 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_n_f32(v54, vmulq_lane_f32(v169, *(float32x2_t *)v166.f32, 1).f32[0]), v168);
          v172 = (int32x4_t)vmulq_f32(v43, v170);
          v173 = (int8x16_t)vmulq_f32(v43, v171);
          *(int8x8_t *)v169.f32 = vqtbl1_s8((int8x16_t)v172, *(int8x8_t *)v143.i8);
          v141.i64[0] = vextq_s8(v143, v143, 8uLL).u64[0];
          *(int8x8_t *)v172.i8 = vqtbl1_s8((int8x16_t)v172, *(int8x8_t *)v141.i8);
          v118.i64[0] = v169.i64[0];
          *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v172.i8, *(int8x8_t *)v169.f32, 4uLL);
          *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v169.f32, *(int8x8_t *)v172.i8, 4uLL);
          v169.i64[1] = v172.i64[0];
          *(int8x8_t *)v32.i8 = vqtbl1_s8(v173, *(int8x8_t *)v143.i8);
          *(int8x8_t *)v173.i8 = vqtbl1_s8(v173, *(int8x8_t *)v141.i8);
          v118.i64[1] = v172.i64[0];
          v172.i64[0] = v32.i64[0];
          *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v173.i8, 4uLL);
          v32.i64[1] = v173.i64[0];
          v172.i64[1] = v173.i64[0];
          v36.i64[1] = v22.i64[0];
          *(int8x8_t *)&v42.u32[2] = vext_s8(*(int8x8_t *)v173.i8, *(int8x8_t *)v32.i8, 4uLL);
          v174 = (int8x16_t)vaddq_f32(v36, vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v118), v169));
          v175 = (int8x16_t)vmulq_f32(v53, v170);
          v176 = (int8x16_t)vmulq_f32(v53, v171);
          *(int8x8_t *)v169.f32 = vqtbl1_s8(v175, *(int8x8_t *)v143.i8);
          *(int8x8_t *)v175.i8 = vqtbl1_s8(v175, *(int8x8_t *)v141.i8);
          v118.i64[0] = v169.i64[0];
          v118.i64[1] = v175.i64[0];
          *(int8x8_t *)v22.f32 = vqtbl1_s8(v176, *(int8x8_t *)v143.i8);
          *(int8x8_t *)v176.i8 = vqtbl1_s8(v176, *(int8x8_t *)v141.i8);
          v141.i64[0] = v22.i64[0];
          v141.i64[1] = v176.i64[0];
          v36.i64[0] = v169.i64[0];
          v36.i64[1] = v175.i64[0];
          v177 = vaddq_f32(v118, (float32x4_t)vrev64q_s32((int32x4_t)v36));
          v36.i64[0] = v22.i64[0];
          v36.i64[1] = v176.i64[0];
          v175.i64[1] = v169.i64[0];
          v176.i64[1] = v22.i64[0];
          v178 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v175, v177), v174);
          v179 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)v176, vaddq_f32((float32x4_t)v141, (float32x4_t)vrev64q_s32((int32x4_t)v36))), (int8x16_t)vaddq_f32(v42, vaddq_f32((float32x4_t)vrev64q_s32(v172), (float32x4_t)v32)));
          v180 = *((int *)a2 + 22);
          v181 = vsubq_f32(v178, v307);
          v182 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v183 = vaddq_s32(vcvtq_s32_f32(v181), vcltzq_f32(v181));
            v184 = (float32x2_t)vsubq_f32(v181, vcvtq_f32_s32(v183)).u64[0];
            v185 = (float32x4_t *)(v182 + 16 * (v183.i32[0] + v183.i32[1] * (int)v180));
            v186 = vaddq_f32(*v185, vmulq_n_f32(vsubq_f32(v185[1], *v185), v184.f32[0]));
            v187 = vaddq_f32(v186, vmulq_lane_f32(vsubq_f32(vaddq_f32(v185[v180], vmulq_n_f32(vsubq_f32(v185[(int)v180 + 1], v185[v180]), v184.f32[0])), v186), v184, 1));
            v188 = vsubq_f32(v179, v307);
            v189 = vaddq_s32(vcvtq_s32_f32(v188), vcltzq_f32(v188));
            v188.i64[0] = vsubq_f32(v188, vcvtq_f32_s32(v189)).u64[0];
            v190 = (float32x4_t *)(v182 + 16 * (v189.i32[0] + v189.i32[1] * (int)v180));
            v191 = vaddq_f32(*v190, vmulq_n_f32(vsubq_f32(v190[1], *v190), v188.f32[0]));
            v12 = (int8x16_t)vmulq_lane_f32(vsubq_f32(vaddq_f32(v190[v180], vmulq_n_f32(vsubq_f32(v190[(int)v180 + 1], v190[v180]), v188.f32[0])), v191), *(float32x2_t *)v188.f32, 1);
            v192 = vaddq_f32(v191, (float32x4_t)v12);
          }
          else
          {
            v193.i64[0] = 0x3F0000003F000000;
            v193.i64[1] = 0x3F0000003F000000;
            v194 = vaddq_f32(v181, v193);
            v195 = vcvtq_s32_f32(v194);
            v194.i64[0] = vaddq_s32(v195, vcgtq_f32(vcvtq_f32_s32(v195), v194)).u64[0];
            v187 = *(float32x4_t *)(v182 + 16 * (v194.i32[0] + v194.i32[1] * (int)v180));
            v196 = vaddq_f32(vsubq_f32(v179, v307), v193);
            v197 = vcvtq_s32_f32(v196);
            v12 = (int8x16_t)vaddq_s32(v197, vcgtq_f32(vcvtq_f32_s32(v197), v196));
            v192 = *(float32x4_t *)(v182 + 16 * (v12.i32[0] + v12.i32[1] * (int)v180));
          }
          v11 = (float32x4_t)xmmword_1B304F230;
          v198 = (float32x4_t *)(v13 + 16 * v17);
          *v198 = v187;
          v198[1] = v192;
          v19 = vaddq_f32(v30, (float32x4_t)xmmword_1B304F230);
          v17 += 2;
          v18 -= 2;
        }
        while (v18 > 1);
        v17 = v17;
        v9 = v307;
        v16 = v306;
      }
      if ((int)v17 < v10)
      {
        v199 = v16;
        v200 = (_OWORD *)*((_QWORD *)this + 51);
        v201 = *((float32x4_t *)v200 + 12);
        v202 = *((int8x16_t *)v200 + 13);
        v204 = *((float32x4_t *)v200 + 10);
        v203 = *((float32x4_t *)v200 + 11);
        v205 = vaddq_f32(v203, v201);
        v206 = (int8x16_t)vsubq_f32(v201, (float32x4_t)vrev64q_s32((int32x4_t)v203));
        v207.i64[0] = vbslq_s8(v202, (int8x16_t)v205, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v205), *((float32x4_t *)v200 + 2))).u64[0];
        v207.i64[1] = vmulq_lane_f32((float32x4_t)vdupq_lane_s64(*(_QWORD *)v200, 0), *(float32x2_t *)&v207, 1).i64[1];
        v208 = vminq_f32((float32x4_t)vextq_s8(v206, v206, 0xCuLL), *((float32x4_t *)v200 + 1));
        v206.i64[1] = v208.i64[1];
        v210 = *((int8x16_t *)v200 + 14);
        v209 = *((int8x16_t *)v200 + 15);
        v211 = vbslq_s8(v210, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v200, *(int8x16_t *)v200, 4uLL), v208, 2), v206);
        v212 = *((float32x4_t *)v200 + 5);
        v213 = (int8x16_t)vmulq_f32(v19, v212);
        v214 = (int8x16_t)vaddq_f32((float32x4_t)v213, (float32x4_t)vextq_s8(v213, v213, 4uLL));
        v216 = *((float32x4_t *)v200 + 8);
        v215 = *((float32x4_t *)v200 + 9);
        v217 = vrecpeq_f32(v215);
        v218 = *((float32x4_t *)v200 + 16);
        v219 = *((int8x16_t *)v200 + 17);
        v220 = vminq_f32(vmaxq_f32(v217, (float32x4_t)v209), v218);
        v221 = vminq_f32(vmaxq_f32(vmulq_f32(v220, vrecpsq_f32(v215, v220)), (float32x4_t)v209), v218);
        v223 = *((float32x4_t *)v200 + 6);
        v222 = *((float32x4_t *)v200 + 7);
        v224 = (float32x4_t)vbslq_s8(v202, (int8x16_t)vmulq_f32(v222, (float32x4_t)vbslq_s8(v202, (int8x16_t)vmulq_f32(vmulq_f32(v221, vrecpsq_f32(v215, v221)), (float32x4_t)vbslq_s8(v202, (int8x16_t)vaddq_f32((float32x4_t)v214, (float32x4_t)vextq_s8(v214, v214, 8uLL)), v211)), v211)), v211);
        v225 = vrecpeq_f32(v204);
        v226 = vminq_f32(vmaxq_f32(v225, (float32x4_t)v209), v218);
        v227 = vminq_f32(vmaxq_f32(vmulq_f32(v226, vrecpsq_f32(v204, v226)), (float32x4_t)v209), v218);
        v228 = vbslq_s8(v202, (int8x16_t)vmulq_f32(vmulq_f32(v227, vrecpsq_f32(v204, v227)), v224), v211);
        v229 = (float32x4_t)vbslq_s8(v219, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v228, COERCE_FLOAT(*v200)), (float32x4_t)v228), v228);
        v230 = *((int8x16_t *)v200 + 18);
        v231 = *((int8x16_t *)v200 + 19);
        v232 = (int32x4_t)vbslq_s8(v230, (int8x16_t)vsubq_f32(v207, vmulq_n_f32(v207, COERCE_FLOAT(*v200))), (int8x16_t)v207);
        v233 = (float32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 4uLL);
        v234 = (float32x4_t)vbslq_s8(v210, vandq_s8(v231, (int8x16_t)vcgtq_f32(v233, (float32x4_t)vrev64q_s32(v232))), (int8x16_t)v232);
        v235 = (int8x16_t)vmulq_laneq_f32(vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)vandq_s8(v231, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 0xCuLL), v229)))), v234, 3);
        v234.i64[1] = vandq_s8(v231, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v234), v233)).i64[1];
        v236 = vbslq_s8(v219, vandq_s8(v231, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL), (float32x4_t)vrev64q_s32((int32x4_t)v229))), (int8x16_t)v234);
        v237 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v229.f32, 0), v229);
        v238.i64[0] = v229.i64[0];
        v238.i64[1] = vdupq_laneq_s64((int64x2_t)v237, 1).u64[0];
        v239 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v209, (float32x4_t)vrev64q_s32(v238)), v209, v237);
        v238.i64[0] = v229.i64[0];
        v238.i64[1] = v239.i64[1];
        v229.i64[1] = vdupq_laneq_s64(v239, 1).u64[0];
        v240 = vbslq_s8(v230, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v229), (float32x4_t)v236), v236);
        v241 = vrecpeq_f32(*(float32x4_t *)v200);
        v242 = vminq_f32(vmaxq_f32(v241, (float32x4_t)v209), v218);
        v243 = vminq_f32(vmaxq_f32(vmulq_f32(v242, vrecpsq_f32(*(float32x4_t *)v200, v242)), (float32x4_t)v209), v218);
        v244 = vbslq_s8(v202, (int8x16_t)vmulq_f32(vmulq_f32(v243, vrecpsq_f32(*(float32x4_t *)v200, v243)), (float32x4_t)v238), (int8x16_t)v238);
        v245 = vbslq_s8(v210, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v244, v244, 8uLL), *((float32x4_t *)v200 + 3)), v244);
        v246 = (float32x4_t)vbslq_s8(v219, (int8x16_t)vsubq_f32((float32x4_t)v231, (float32x4_t)v240), v240);
        v248 = *((int8x16_t *)v200 + 20);
        v247 = *((int8x16_t *)v200 + 21);
        v249 = (float32x4_t)vbslq_s8(v202, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL), (float32x4_t)vbslq_s8(v202, vandq_s8(v231, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL)), (float32x4_t)v248)), v235)), v235);
        v250 = (int8x16_t)vminq_f32(v246, (float32x4_t)vrev64q_s32((int32x4_t)v246));
        v251 = (float32x4_t)vextq_s8(v250, (int8x16_t)v246, 8uLL);
        v246.i64[1] = v250.i64[1];
        v252 = vbslq_s8(v219, vbslq_s8((int8x16_t)vcgtq_f32(v246, (float32x4_t)v248), vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL), v245), v245);
        v245.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v248, vminq_f32(v249, (float32x4_t)vrev64q_s32((int32x4_t)v249))), v252, (int8x16_t)vdupq_laneq_s64((int64x2_t)v252, 1)).u64[0];
        v245.i64[1] = v252.i64[1];
        v253 = vbslq_s8(v219, (int8x16_t)vmaxq_f32(v251, *((float32x4_t *)v200 + 4)), v245);
        *(int8x8_t *)v245.i8 = vqtbl1_s8(v253, *(int8x8_t *)v247.i8);
        v254 = (int8x8_t)vextq_s8(v247, v247, 8uLL).u64[0];
        v245.u64[1] = (unint64_t)vqtbl1_s8(v253, v254);
        v255 = (int8x16_t)vmulq_lane_f32((float32x4_t)v245, *(float32x2_t *)v200, 1);
        v249.i64[0] = vmulq_f32(v215, (float32x4_t)v253).u64[0];
        v249.i64[1] = v253.i64[1];
        v256 = (int8x16_t)vmulq_f32(v19, v223);
        v257 = (int8x16_t)vaddq_f32((float32x4_t)v256, (float32x4_t)vextq_s8(v256, v256, 4uLL));
        v258 = vminq_f32(vmaxq_f32(v217, (float32x4_t)v248), v218);
        v259 = vminq_f32(vmaxq_f32(vmulq_f32(v258, vrecpsq_f32(v215, v258)), (float32x4_t)v248), v218);
        v260 = (float32x4_t)vbslq_s8(v230, (int8x16_t)vmulq_f32(v216, (float32x4_t)vbslq_s8(v230, (int8x16_t)vmulq_f32(vmulq_f32(v259, vrecpsq_f32(v215, v259)), (float32x4_t)vbslq_s8(v230, (int8x16_t)vaddq_f32((float32x4_t)v257, (float32x4_t)vextq_s8(v257, v257, 8uLL)), (int8x16_t)v249)), (int8x16_t)v249)), (int8x16_t)v249);
        v261 = vminq_f32(vmaxq_f32(v225, (float32x4_t)v248), v218);
        v262 = vminq_f32(vmaxq_f32(vmulq_f32(v261, vrecpsq_f32(v204, v261)), (float32x4_t)v248), v218);
        v263 = vbslq_s8(v230, (int8x16_t)vmulq_f32(vmulq_f32(v262, vrecpsq_f32(v204, v262)), v260), (int8x16_t)v249);
        v264 = (float32x4_t)vbslq_s8(v210, (int8x16_t)vsubq_f32(vmulq_lane_f32((float32x4_t)v263, *(float32x2_t *)v200, 1), (float32x4_t)v263), v263);
        v265 = (float32x4_t)vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL);
        v255.i64[1] = vandq_s8(v248, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v255, v255, 4uLL), v265)).i64[1];
        v266 = vandq_s8(v231, (int8x16_t)vcgtq_f32(v264, (float32x4_t)v255));
        v267 = (float32x4_t)vbslq_s8(v219, vextq_s8(v266, v266, 0xCuLL), v255);
        v268 = vextq_s8(v263, vandq_s8(v231, (int8x16_t)vcgeq_f32(v267, v264)), 0xCuLL);
        v269 = vdupq_laneq_s64((int64x2_t)v268, 1).u64[0];
        v268.i64[0] = v267.i64[0];
        v270 = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 0xCuLL), v267);
        v267.i64[1] = v269;
        v271 = (int32x4_t)vbslq_s8(v230, vandq_s8(v231, (int8x16_t)vcgeq_f32(v264, (float32x4_t)vrev64q_s32((int32x4_t)v267))), v268);
        v272 = vbslq_s8(v210, (int8x16_t)vrev64q_s32(v271), (int8x16_t)v271);
        v273 = vbslq_s8(v202, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v264), (float32x4_t)v272), v272);
        v274 = vbslq_s8(v210, (int8x16_t)vsubq_f32(v265, v264), v263);
        v275 = *((int8x16_t *)v200 + 23);
        v276 = vbslq_s8(*((int8x16_t *)v200 + 22), v273, vandq_s8(v231, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v273), (float32x4_t)v209)));
        *(int8x8_t *)v265.f32 = vqtbl1_s8(v276, *(int8x8_t *)v247.i8);
        *(int8x8_t *)&v265.u32[2] = vqtbl1_s8(v276, v254);
        v277 = vbslq_s8(v202, v276, (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v276.i64[0], 0), v265));
        v278 = (int8x16_t)vminq_f32((float32x4_t)v277, v270);
        v265.i64[0] = vextq_s8(v278, v277, 0xCuLL).u64[0];
        *(int8x8_t *)v270.f32 = vext_s8(*(int8x8_t *)v277.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v278, v278, 8uLL), 4uLL);
        v277.i64[1] = v278.i64[1];
        v279 = vbslq_s8(v219, (int8x16_t)vsubq_f32((float32x4_t)v274, vmulq_lane_f32((float32x4_t)v274, *(float32x2_t *)v200, 1)), v274);
        v270.i64[1] = v265.i64[0];
        v280 = (float32x4_t)vbslq_s8(v210, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v209, v270), v209, v279), v279);
        v281 = vbslq_s8(v202, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v280), (float32x4_t)vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL)), v277);
        v282 = vextq_s8(v281, v281, 4uLL);
        v283 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v281, v281, 8uLL), (float32x4_t)v209);
        v280.i64[1] = vbslq_s8(v283, v282, *(int8x16_t *)&v280).i64[1];
        v284 = vminq_f32(vmaxq_f32(v241, (float32x4_t)v248), v218);
        v285 = vminq_f32(vmaxq_f32(vmulq_f32(v284, vrecpsq_f32(*(float32x4_t *)v200, v284)), (float32x4_t)v248), v218);
        v286 = vbslq_s8(v230, (int8x16_t)vmulq_f32(vmulq_f32(v285, vrecpsq_f32(*(float32x4_t *)v200, v285)), v280), (int8x16_t)v280);
        v287 = (float32x4_t)vbslq_s8(v202, v286, vbslq_s8(v283, v286, vextq_s8(v286, v286, 8uLL)));
        v288 = (int8x16_t)vmulq_f32(v212, v287);
        *(float *)&v288.i32[3] = v15;
        v289 = (float32x4_t)vbslq_s8(v230, (int8x16_t)vmulq_lane_f32(v223, (float32x2_t)*(_OWORD *)&vmulq_f32(v215, v287), 1), v288);
        v290 = (int8x16_t)vmulq_f32(v216, v289);
        *(int8x8_t *)v285.f32 = vqtbl1_s8(v290, *(int8x8_t *)v275.i8);
        v270.i64[0] = vextq_s8(v275, v275, 8uLL).u64[0];
        *(int8x8_t *)v290.i8 = vqtbl1_s8(v290, *(int8x8_t *)v270.f32);
        v265.i64[0] = v285.i64[0];
        v291 = vext_s8(*(int8x8_t *)v290.i8, *(int8x8_t *)v285.f32, 4uLL);
        v205.i64[0] = v285.i64[0];
        v205.i64[1] = v290.i64[0];
        v265.i64[1] = v290.i64[0];
        *(int8x8_t *)v290.i8 = vext_s8(*(int8x8_t *)v285.f32, *(int8x8_t *)v290.i8, 4uLL);
        v290.u64[1] = (unint64_t)v291;
        v292 = (int8x16_t)vaddq_f32((float32x4_t)v290, vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v265), v205));
        v293 = (int8x16_t)vmulq_f32(v222, v289);
        *(int8x8_t *)v285.f32 = vqtbl1_s8(v293, *(int8x8_t *)v275.i8);
        *(int8x8_t *)v293.i8 = vqtbl1_s8(v293, *(int8x8_t *)v270.f32);
        v270.i64[0] = v285.i64[0];
        v270.i64[1] = v293.i64[0];
        v265.i64[0] = v285.i64[0];
        v265.i64[1] = v293.i64[0];
        v293.i64[1] = v285.i64[0];
        v294 = *((int *)a2 + 22);
        v295 = vsubq_f32((float32x4_t)vbslq_s8(v202, (int8x16_t)vaddq_f32((float32x4_t)v293, vaddq_f32(v270, (float32x4_t)vrev64q_s32((int32x4_t)v265))), v292), v9);
        v296 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v297 = vaddq_s32(vcvtq_s32_f32(v295), vcltzq_f32(v295));
          v298 = (float32x2_t)vsubq_f32(v295, vcvtq_f32_s32(v297)).u64[0];
          v299 = (float32x4_t *)(v296 + 16 * (v297.i32[0] + v297.i32[1] * (int)v294));
          v300 = vaddq_f32(*v299, vmulq_n_f32(vsubq_f32(v299[1], *v299), v298.f32[0]));
          v301 = vaddq_f32(v300, vmulq_lane_f32(vsubq_f32(vaddq_f32(v299[v294], vmulq_n_f32(vsubq_f32(v299[(int)v294 + 1], v299[v294]), v298.f32[0])), v300), v298, 1));
        }
        else
        {
          v302.i64[0] = 0x3F0000003F000000;
          v302.i64[1] = 0x3F0000003F000000;
          v303 = vaddq_f32(v295, v302);
          v304 = vcvtq_s32_f32(v303);
          v303.i64[0] = vaddq_s32(v304, vcgtq_f32(vcvtq_f32_s32(v304), v303)).u64[0];
          v301 = *(float32x4_t *)(v296 + 16 * (v303.i32[0] + v303.i32[1] * (int)v294));
        }
        v16 = v199;
        *(float32x4_t *)(v13 + 16 * v17) = v301;
      }
      v12 = (int8x16_t)xmmword_1B304F240;
      v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F240);
      v13 += v14;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSlicedScale::GetDOD(HgcSlicedScale *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcSlicedScale *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcSlicedScale::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSlicedScale::HgcSlicedScale(HgcSlicedScale *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v9;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E51C0;
  v3 = operator new();
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 192) = xmmword_1B30511F0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 240) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 256) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 272) = xmmword_1B3050FE0;
  __asm { FMOV            V2.4S, #1.0 }
  *(_OWORD *)(v3 + 288) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 304) = _Q2;
  *(_OWORD *)(v3 + 320) = xmmword_1B3051210;
  *(_OWORD *)(v3 + 336) = xmmword_1B3051220;
  *(_QWORD *)&v9 = 0xFFFFFFFFLL;
  *((_QWORD *)&v9 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v3 + 352) = v9;
  *(_OWORD *)(v3 + 368) = xmmword_1B3051230;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSlicedScale *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B286A784(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSlicedScale::~HgcSlicedScale(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E51C0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40502CBA4ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSlicedScale::~HgcSlicedScale(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSlicedScale::SetParameter(HgcSlicedScale *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_63;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == 0.0
        && v9[1].n128_f32[1] == 0.0
        && v9[1].n128_f32[2] == a3.n128_f32[0]
        && v9[1].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v9[1].n128_u64[0] = 0;
      v9[1].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v9[1].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[24] = a3;
      goto LABEL_63;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == 0.0
        && v10[2].n128_f32[1] == a3.n128_f32[0]
        && v10[2].n128_f32[2] == 0.0
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = 0;
      v10[2].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[25] = a3;
      goto LABEL_63;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == 0.0
        && v11[3].n128_f32[2] == 0.0
        && v11[3].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v11[3].n128_u64[0] = 0;
      v11[3].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[26] = a3;
      goto LABEL_63;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == a3.n128_f32[0]
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[27] = a3;
      goto LABEL_63;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_63;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_63;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_63;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_63;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_63;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_63;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
LABEL_63:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t HgcSlicedScale::GetParameter(HgcSlicedScale *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_14;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[96];
      a3[1] = v5[97];
      a3[2] = v5[98];
      v4 = v5 + 99;
      goto LABEL_14;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[100];
      a3[1] = v6[101];
      a3[2] = v6[102];
      v4 = v6 + 103;
      goto LABEL_14;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[104];
      a3[1] = v7[105];
      a3[2] = v7[106];
      v4 = v7 + 107;
      goto LABEL_14;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[108];
      a3[1] = v8[109];
      a3[2] = v8[110];
      v4 = v8 + 111;
      goto LABEL_14;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_14;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_14;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_14;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_14;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_14;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_14;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
LABEL_14:
      result = 0;
      a3[3] = *v4;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

const char *HgcSlicedTile::GetProgram(HgcSlicedTile *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_12;
    else
      return aMetal10Len0000_13;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_3;
  }
}

void HgcSlicedTile::InitProgramDescriptor(HgcSlicedTile *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSlicedTile_hgc_visible", aMetal10Len0000_14);
}

void sub_1B286AE44()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSlicedTile");
}

void sub_1B286AE54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051270;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B286AFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B286B024()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B286B01CLL);
}

_QWORD *HgcSlicedTile::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSlicedTile [hgc1]");
}

uint64_t HgcSlicedTile::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 14, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSlicedTile::Bind(HgcSlicedTile *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HgcSlicedTile *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSlicedTile::RenderTile(HgcSlicedTile *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  _OWORD *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int8x16_t v60;
  int32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int64x2_t v84;
  int8x16_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  int32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x4_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int64x2_t v126;
  int8x16_t v127;
  float32x4_t v128;
  int8x16_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  float32x4_t v147;
  int8x16_t v148;
  int8x16_t v149;
  float32x4_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int8x16_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  uint64_t v166;
  float32x4_t v167;
  uint64_t v168;
  int32x4_t v169;
  float32x2_t v170;
  float32x4_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int32x4_t v176;
  float32x4_t v178;
  float32x4_t v179;
  int8x16_t v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  float32x4_t v184;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcSlicedTile *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v178 = v9;
    v179 = v9;
    do
    {
      if (v10 >= 1)
      {
        v13 = 0;
        v14 = v178;
        do
        {
          v15 = (_OWORD *)*((_QWORD *)this + 51);
          v17 = *((int8x16_t *)v15 + 12);
          v16 = *((int8x16_t *)v15 + 13);
          v19 = *((float32x4_t *)v15 + 14);
          v18 = *((int8x16_t *)v15 + 15);
          v20 = (int8x16_t)vsubq_f32(v19, (float32x4_t)vextq_s8(v16, v16, 8uLL));
          v21 = *(int8x16_t *)v15;
          v184 = *((float32x4_t *)v15 + 1);
          v22 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v20, v20, 4uLL), (float32x4_t)vrev64q_s32((int32x4_t)v184));
          v23 = (int8x16_t)vaddq_f32((float32x4_t)v16, v19);
          v182 = *((int8x16_t *)v15 + 2);
          v180 = *((int8x16_t *)v15 + 3);
          v24 = vbslq_s8(v18, (int8x16_t)vmulq_lane_f32(*(float32x4_t *)v15, *(float32x2_t *)v22.i8, 1), (int8x16_t)vrev64q_s32((int32x4_t)vmaxq_f32((float32x4_t)v23, (float32x4_t)v182)));
          v25 = *((float32x4_t *)v15 + 4);
          v183 = *((float32x4_t *)v15 + 5);
          v26 = (int8x16_t)vmulq_f32(v14, v183);
          v27 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vextq_s8(v26, v26, 4uLL));
          v29 = *((float32x4_t *)v15 + 8);
          v28 = *((int8x16_t *)v15 + 9);
          v31 = *((int8x16_t *)v15 + 16);
          v30 = *((float32x4_t *)v15 + 17);
          v32 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v28), (float32x4_t)v31), v30);
          v33 = vminq_f32(vmaxq_f32(vmulq_f32(v32, vrecpsq_f32((float32x4_t)v28, v32)), (float32x4_t)v31), v30);
          v34 = *((float32x4_t *)v15 + 6);
          v181 = *((float32x4_t *)v15 + 7);
          v35 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vmulq_f32(v181, (float32x4_t)vbslq_s8(v18, (int8x16_t)vmulq_f32(vmulq_f32(v33, vrecpsq_f32((float32x4_t)v28, v33)), (float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)v27, (float32x4_t)vextq_s8(v27, v27, 8uLL)), v22)), v22)), v22);
          v36 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v17), (float32x4_t)v31), v30);
          v37 = vminq_f32(vmaxq_f32(vmulq_f32(v36, vrecpsq_f32((float32x4_t)v17, v36)), (float32x4_t)v31), v30);
          v38 = vbslq_s8(v18, (int8x16_t)vmulq_f32(vmulq_f32(v37, vrecpsq_f32((float32x4_t)v17, v37)), v35), v22);
          v39 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
          v40 = (int8x16_t)vmulq_lane_f32(v39, *(float32x2_t *)v24.i8, 1);
          v41 = (float32x4_t)vextq_s8(v40, v38, 8uLL);
          v38.i64[1] = v40.i64[1];
          v42 = *((int8x16_t *)v15 + 18);
          v43 = *((int8x16_t *)v15 + 19);
          v40.i64[0] = vandq_s8(v42, (int8x16_t)vcgeq_f32(v41, (float32x4_t)v38)).u64[0];
          v40.i64[1] = v20.i64[1];
          v44.i64[0] = v24.i64[0];
          v44.i64[1] = vandq_s8(v42, (int8x16_t)vcgeq_f32((float32x4_t)v38, (float32x4_t)v24)).u64[0];
          v24.i64[1] = vandq_s8(v31, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vrev64q_s32(v44)), *(float32x4_t *)&v42)).i64[1];
          v45 = vandq_s8(v42, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v40), (float32x4_t)v43));
          v47 = *((int8x16_t *)v15 + 20);
          v46 = *((int8x16_t *)v15 + 21);
          v48 = vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)v24, (float32x4_t)vbslq_s8(v47, vextq_s8(v45, v45, 4uLL), v38)), v38);
          v49 = vbslq_s8(v46, (int8x16_t)vsubq_f32(vmulq_n_f32((float32x4_t)v48, COERCE_FLOAT(*v15)), (float32x4_t)v48), v48);
          v50 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
          v52 = *((int8x16_t *)v15 + 22);
          v51 = *((int8x16_t *)v15 + 23);
          v53 = vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32(v50, (float32x4_t)v49)), v24);
          v54 = vbslq_s8(v46, (int8x16_t)vminq_f32(v50, (float32x4_t)vbslq_s8(v46, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v53, v53, 4uLL), (float32x4_t)vbslq_s8(v46, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32((float32x4_t)v53, (float32x4_t)v49))), v40)), v40)), v40);
          v55 = (int32x4_t)vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v49, v50)), v24);
          v56 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v54, v54, 8uLL), (float32x4_t)vrev64q_s32(v55)), v49);
          v57 = (int32x4_t)vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v56, (float32x4_t)v43), (int8x16_t)vrev64q_s32(v56), vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL)), v49);
          v58 = (float32x4_t)vrev64q_s32(v57);
          v59 = (int32x4_t)vbslq_s8(v52, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v54, v54, 0xCuLL), (float32x4_t)vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32(v58, (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL))), v24)), v24);
          v60 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL);
          v61 = (int32x4_t)vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v59), (float32x4_t)v43), v60, (int8x16_t)v57), v49);
          v62 = vbslq_s8(v18, (int8x16_t)v61, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v61), (float32x4_t)v61));
          v63 = (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)v60, v58), v54));
          v64 = vminq_f32(vmaxq_f32(vrecpeq_f32(v63), (float32x4_t)v42), v30);
          v65 = vminq_f32(vmaxq_f32(vmulq_f32(v64, vrecpsq_f32(v63, v64)), (float32x4_t)v42), v30);
          v63.i64[0] = vdupq_laneq_s64((int64x2_t)vmulq_n_f32(vmulq_f32(vmulq_f32(v65, vrecpsq_f32(v63, v65)), (float32x4_t)v62), COERCE_FLOAT(*v15)), 1).u64[0];
          v65.i64[0] = v62.i64[0];
          v65.i64[1] = v63.i64[0];
          v66 = (int8x16_t)vrev64q_s32((int32x4_t)v65);
          v67 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v66));
          v68 = vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)v66, vsubq_f32(v67, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v67, (float32x4_t)v66)))), v54);
          v66.i64[0] = vbslq_s8(v18, v23, (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v68, 1), vmulq_n_f32((float32x4_t)v43, COERCE_FLOAT(*v15)))).u64[0];
          v69 = vmulq_f32(v39, (float32x4_t)v31);
          v60.i64[0] = v66.i64[0];
          v60.i64[1] = v69.i64[1];
          v70 = vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgeq_f32(*((float32x4_t *)v15 + 10), (float32x4_t)v51)), v24);
          v71 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v60));
          v66.i64[1] = vsubq_f32(v69, vsubq_f32(v71, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v71, *(float32x4_t *)&v60), v43, (int8x16_t)0))).i64[1];
          v72 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v66, (float32x4_t)v51), v66);
          v73 = (int32x4_t)vextq_s8(v68, v68, 0xCuLL);
          v71.i64[0] = v62.i64[0];
          v71.i64[1] = vminq_f32(*(float32x4_t *)&v73, *(float32x4_t *)&v70).i64[1];
          v74 = vandq_s8(v31, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v70, v70, 4uLL)), (float32x4_t)v42));
          v72.i64[1] = vandq_s8(v31, (int8x16_t)vcgtq_f32(*(float32x4_t *)&v51, vnegq_f32((float32x4_t)vrev64q_s32(v72)))).i64[1];
          v75 = (int32x4_t)vbslq_s8(v52, (int8x16_t)vminq_f32(v71, (float32x4_t)vextq_s8(v74, v74, 0xCuLL)), (int8x16_t)v72);
          v76 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v75, (float32x4_t)v51), v51, (int8x16_t)vrev64q_s32(v75));
          v75.i64[1] = v76.i64[1];
          v62.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v71, *(float32x4_t *)&v51), v76, v43).i64[1];
          v77 = vbslq_s8(v18, (int8x16_t)vsubq_f32((float32x4_t)v62, (float32x4_t)v70), v70);
          v78 = vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)v62, (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32((float32x4_t)v77, vmulq_n_f32((float32x4_t)v77, COERCE_FLOAT(*v15))), v77))), v62);
          v79 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v75));
          v71.i64[0] = v78.i64[0];
          v71.i64[1] = vdupq_laneq_s64((int64x2_t)vminq_f32((float32x4_t)v73, (float32x4_t)v78), 1).u64[0];
          v73.i64[0] = v78.i64[0];
          v80 = vbslq_s8(v18, (int8x16_t)v75, (int8x16_t)vsubq_f32((float32x4_t)v75, vsubq_f32(v79, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v79, (float32x4_t)v75)))));
          v81 = vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v71), (float32x4_t)v51), vextq_s8(v80, v80, 8uLL), v68), v54);
          v80.i64[0] = vbslq_s8(v18, (int8x16_t)v75, (int8x16_t)vsubq_f32((float32x4_t)v31, (float32x4_t)vextq_s8(v81, v81, 8uLL))).u64[0];
          v82 = (int8x16_t)vnegq_f32(*((float32x4_t *)v15 + 11));
          v83 = (float32x4_t)vextq_s8(v82, v82, 8uLL);
          v73.i64[1] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(v83, *(float32x2_t *)v81.i8, 1), 1).u64[0];
          v84 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v51, (float32x4_t)vrev64q_s32(v73)), (int8x16_t)vdupq_lane_s64(v80.i64[0], 0), v81);
          v85 = vextq_s8(v21, v21, 0xCuLL);
          *(float32x2_t *)v80.i8 = vmax_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v25.f32);
          *(int32x2_t *)v73.i8 = vrev64_s32(*(int32x2_t *)v80.i8);
          v73.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(float *)v80.i32);
          v71.i64[0] = v74.i64[0];
          v71.i64[1] = vdupq_laneq_s64(v84, 1).u64[0];
          v86 = vminq_f32((float32x4_t)v81, (float32x4_t)vextq_s8(v180, v180, 8uLL));
          v81.i64[1] = v86.i64[1];
          v74.i64[1] = v84.i64[1];
          v87 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vmulq_laneq_f32(v39, v86, 2), v81);
          v88 = (int8x16_t)vmulq_f32(v14, v34);
          v89 = vaddq_f32((float32x4_t)v88, (float32x4_t)vextq_s8(v88, v88, 4uLL));
          v90 = (float32x4_t)vextq_s8(v28, v28, 0xCuLL);
          v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v90), (float32x4_t)v42), v30);
          v92 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v90, v91)), (float32x4_t)v42), v30);
          v93 = vmulq_f32(vaddq_f32(v89, (float32x4_t)vdupq_lane_s64(v89.i64[0], 0)), vmulq_f32(v92, vrecpsq_f32(v90, v92)));
          v94 = (float32x4_t)vextq_s8(v17, v17, 0xCuLL);
          v95 = vminq_f32(vmaxq_f32(vrecpeq_f32(v94), (float32x4_t)v42), v30);
          v96 = vminq_f32(vmaxq_f32(vmulq_f32(v95, vrecpsq_f32(v94, v95)), (float32x4_t)v42), v30);
          v97.i64[0] = v78.i64[0];
          v98 = (int8x16_t)vmulq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v29.f32, 1), vmulq_f32(v96, vrecpsq_f32(v94, v96)));
          *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v78.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL), 4uLL);
          v99 = vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v51, (float32x4_t)vrev64q_s32((int32x4_t)v71))), v74);
          v96.i64[0] = vextq_s8(v98, v78, 0xCuLL).u64[0];
          v100 = (float32x4_t)vextq_s8(v98, v78, 8uLL);
          v97.i64[1] = v98.i64[1];
          v101 = vbslq_s8(v47, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v43, (int8x16_t)vcgeq_f32((float32x4_t)v73, v97))), (int8x16_t)v73);
          v94.i64[1] = v96.i64[0];
          v102 = vandq_s8(v43, (int8x16_t)vcgtq_f32(v97, (float32x4_t)v101));
          v103 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL);
          v104 = (float32x4_t)vbslq_s8(v18, vextq_s8(v102, v102, 8uLL), vandq_s8(v31, (int8x16_t)vcgtq_f32(v103, v94)));
          v105 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v104), v104);
          v106 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(v94, v103), v77);
          v107 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL);
          v108 = vbslq_s8(v18, vandq_s8(v42, (int8x16_t)vcgtq_f32(v107, v100)), v101);
          v109 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v42, (float32x4_t)vrev64q_s32(v106)), v42, (int8x16_t)v97), (int8x16_t)v97);
          v110 = vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v101, v97));
          v111 = vextq_s8(v110, v110, 8uLL);
          v112 = vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v108, (float32x4_t)vbslq_s8(v18, vandq_s8(v42, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v108, v108, 0xCuLL)), (float32x4_t)v51)), v99)), v99), (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v18, v111, v105))), v99);
          v113 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v18, v111, (int8x16_t)vminq_f32((float32x4_t)v87, (float32x4_t)vextq_s8(v112, v112, 4uLL))), (float32x4_t)v42), v42, vextq_s8(v112, v112, 8uLL));
          v114 = vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v112, (float32x4_t)vbslq_s8(v18, v111, v113)), v113);
          v115 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v114, v114, 8uLL), (float32x4_t)v51), v108, v109);
          v116 = vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)v106, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL)), (int8x16_t)v106);
          v106.i64[0] = v112.i64[0];
          v106.i64[1] = vdupq_laneq_s64((int64x2_t)v115, 1).u64[0];
          v112.i64[1] = v115.i64[1];
          v117 = vbslq_s8(v47, vandq_s8(v31, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v106), (float32x4_t)v87)), v112);
          v118 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v117, v117, 4uLL), (float32x4_t)v117), v112);
          v119 = (int8x16_t)vrev64q_s32(v87);
          v115.i64[0] = v118.i64[0];
          v115.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v118), *(float32x4_t *)&v51), v119, *(int8x16_t *)&v118).i64[1];
          v120 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vsubq_f32(v107, (float32x4_t)vextq_s8(v108, v108, 8uLL)), v113);
          v121 = (float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
          v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v121), (float32x4_t)v42), v30);
          v123 = vminq_f32(vmaxq_f32(vmulq_f32(v122, vrecpsq_f32(v121, v122)), (float32x4_t)v42), v30);
          v124 = vmulq_lane_f32((float32x4_t)vbslq_s8(v52, (int8x16_t)vmulq_f32(vmulq_f32(v123, vrecpsq_f32(v121, v123)), (float32x4_t)vbslq_s8(v52, (int8x16_t)vsubq_f32(v115, (float32x4_t)v108), v108)), v108), *(float32x2_t *)v15, 1);
          v121.i64[0] = v118.i64[0];
          v121.i64[1] = v124.i64[1];
          v125 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
          v126 = (int64x2_t)vsubq_f32(v121, vsubq_f32(v125, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v125, v121), v43, (int8x16_t)0)));
          v127 = vbslq_s8(v52, (int8x16_t)vmulq_f32((float32x4_t)v85, (float32x4_t)v31), v108);
          v128 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v127));
          v129 = (int8x16_t)vsubq_f32((float32x4_t)v127, vsubq_f32(v128, (float32x4_t)vandq_s8(v43, (int8x16_t)vcgtq_f32(v128, (float32x4_t)v127))));
          v127.i64[0] = v118.i64[0];
          v127.i64[1] = v126.i64[1];
          v128.i64[0] = vdupq_laneq_s64(v126, 1).u64[0];
          v130 = (float32x4_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL);
          v118.i64[1] = v128.i64[0];
          v131 = *((int8x16_t *)v15 + 24);
          v132 = *((int8x16_t *)v15 + 25);
          v133 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v118), vmulq_lane_f32(v19, *(float32x2_t *)v15, 1)), v109), (float32x4_t)v131), v109);
          v134 = vbslq_s8(v52, (int8x16_t)vminq_f32(v130, (float32x4_t)v116), v116);
          v135 = vbslq_s8(v46, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v134, v134, 4uLL), (float32x4_t)v127), v127);
          v136 = vextq_s8((int8x16_t)v120, vandq_s8(v31, (int8x16_t)vcgtq_f32((float32x4_t)v120, (float32x4_t)v31)), 0xCuLL);
          v137 = vbslq_s8(v52, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v134, (float32x4_t)v131), vbslq_s8(v52, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v135, v135, 0xCuLL), (float32x4_t)v131), v131, vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v131, vnegq_f32((float32x4_t)vbslq_s8(v52, v129, v108)))), v108)), v108), v43), v116);
          v134.i64[0] = vdupq_laneq_s64((int64x2_t)v136, 1).u64[0];
          v136.i64[0] = v120.i64[0];
          v120.i64[1] = v134.i64[0];
          v138 = (int32x4_t)vbslq_s8(v47, (int8x16_t)vminq_f32(v103, (float32x4_t)vrev64q_s32(v120)), v135);
          v135.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v137, v137, 8uLL), (float32x4_t)v131), (int8x16_t)vrev64q_s32(v133), (int8x16_t)v133).u64[0];
          v135.i64[1] = v133.i64[1];
          v139 = (float32x4_t)vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL);
          v140 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v135));
          v128.i64[0] = v137.i64[0];
          v128.i64[1] = vdupq_laneq_s64((int64x2_t)vminq_f32(v139, (float32x4_t)v137), 1).u64[0];
          v141 = (int32x4_t)vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v128), (float32x4_t)v51), vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)v135, vsubq_f32(v140, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v140, (float32x4_t)v135)))), v135), (int8x16_t)vrev64q_s32(v138)), v135);
          v142 = (int8x16_t)vrev64q_s32(v141);
          v128.i64[0] = v137.i64[0];
          v128.i64[1] = vmulq_n_f32(v83, *(float *)&v138).i64[1];
          v143 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v131, v128), vbslq_s8(v52, (int8x16_t)vsubq_f32((float32x4_t)v43, (float32x4_t)v142), v108), v142);
          v134.i64[0] = v137.i64[0];
          v134.i64[1] = v143.i64[1];
          v144 = vbslq_s8(v52, (int8x16_t)vminq_f32(v139, (float32x4_t)vbslq_s8(v52, vandq_s8(v43, (int8x16_t)vcgtq_f32((float32x4_t)v131, (float32x4_t)v134)), v108)), v108);
          v137.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v144, *(float32x4_t *)&v131), v131, v143).i64[1];
          v145 = vextq_s8(v137, v137, 8uLL);
          v146 = vbslq_s8(v18, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v138, (float32x4_t)vbslq_s8(v18, vandq_s8(v42, (int8x16_t)vcgtq_f32((float32x4_t)v145, (float32x4_t)v42)), (int8x16_t)v141)), (int8x16_t)v141), (float32x4_t)v131), v42, v145),
                   (int8x16_t)v141);
          v147 = (float32x4_t)vextq_s8(v144, v144, 0xCuLL);
          v148 = vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)v144, v147), v137);
          v149 = (int8x16_t)vsubq_f32(v147, vmulq_lane_f32((float32x4_t)v85, *(float32x2_t *)v144.i8, 1));
          v150 = (float32x4_t)vbslq_s8(v18, (int8x16_t)v138, vbslq_s8((int8x16_t)vcgtq_f32(v139, (float32x4_t)v131), v31, v136));
          v151 = (int32x4_t)vsubq_f32(v184, (float32x4_t)v182);
          v152 = vbslq_s8(v47, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v182, v182, 4uLL), vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 4uLL), *(float32x2_t *)v150.f32, 1)), v146);
          v153 = vbslq_s8(v46, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v87, (float32x4_t)v131), vextq_s8(v152, v152, 8uLL), v152), v152);
          v154 = (float32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32(vmulq_laneq_f32(v39, (float32x4_t)v87, 2), (float32x4_t)v119), v153);
          v155 = vbslq_s8(v47, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v154), v154), v153);
          v154.i64[0] = v148.i64[0];
          v154.i64[1] = v149.i64[1];
          v156 = vbslq_s8(v52, (int8x16_t)vaddq_f32(v154, (float32x4_t)v155), v155);
          v157 = (float32x4_t)vextq_s8(v149, v148, 8uLL);
          v158 = vbslq_s8(v47, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v51, v157), v51, v156), v156);
          v159 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32(v25, vmulq_f32(vsubq_f32((float32x4_t)v180, v25), (float32x4_t)v158)), v158);
          v159.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v157, *(float32x4_t *)&v131), *(int8x16_t *)&v159, (int8x16_t)vrev64q_s32(v159)).i64[1];
          v160 = vbslq_s8(v46, (int8x16_t)vmulq_n_f32((float32x4_t)v159, *(float *)v28.i32), (int8x16_t)v159);
          v150.i64[0] = vbslq_s8(v18, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v18, vbslq_s8((int8x16_t)vcgtq_f32(v150, (float32x4_t)v131), v160, vextq_s8(v160, v160, 8uLL)), v160), *(float32x2_t *)v28.i8, 1), v160).u64[0];
          v161 = (int8x16_t)vmulq_lane_f32(v183, *(float32x2_t *)v150.f32, 1);
          v161.i32[3] = 1.0;
          v162 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vmulq_n_f32(v34, v150.f32[0]), v161);
          v163 = (int8x16_t)vmulq_f32(v29, v162);
          *(int8x8_t *)v157.f32 = vqtbl1_s8(v163, *(int8x8_t *)v132.i8);
          v154.i64[0] = vextq_s8(v132, v132, 8uLL).u64[0];
          *(int8x8_t *)v163.i8 = vqtbl1_s8(v163, *(int8x8_t *)v154.f32);
          v151.i64[0] = v157.i64[0];
          *(int8x8_t *)v149.i8 = vext_s8(*(int8x8_t *)v163.i8, *(int8x8_t *)v157.f32, 4uLL);
          v144.i64[0] = v157.i64[0];
          v144.i64[1] = v163.i64[0];
          v151.i64[1] = v163.i64[0];
          *(int8x8_t *)v163.i8 = vext_s8(*(int8x8_t *)v157.f32, *(int8x8_t *)v163.i8, 4uLL);
          v163.i64[1] = v149.i64[0];
          v164 = (int8x16_t)vaddq_f32((float32x4_t)v163, vaddq_f32((float32x4_t)vrev64q_s32(v151), (float32x4_t)v144));
          v165 = (int8x16_t)vmulq_f32(v181, v162);
          *(int8x8_t *)v157.f32 = vqtbl1_s8(v165, *(int8x8_t *)v132.i8);
          *(int8x8_t *)v165.i8 = vqtbl1_s8(v165, *(int8x8_t *)v154.f32);
          v154.i64[0] = v157.i64[0];
          v154.i64[1] = v165.i64[0];
          v151.i64[0] = v157.i64[0];
          v151.i64[1] = v165.i64[0];
          v165.i64[1] = v157.i64[0];
          v166 = *((int *)a2 + 22);
          v167 = vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)vaddq_f32((float32x4_t)v165, vaddq_f32(v154, (float32x4_t)vrev64q_s32(v151))), v164), v179);
          v168 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v169 = vaddq_s32(vcvtq_s32_f32(v167), vcltzq_f32(v167));
            v170 = (float32x2_t)vsubq_f32(v167, vcvtq_f32_s32(v169)).u64[0];
            v171 = (float32x4_t *)(v168 + 16 * (v169.i32[0] + v169.i32[1] * (int)v166));
            v172 = vaddq_f32(*v171, vmulq_n_f32(vsubq_f32(v171[1], *v171), v170.f32[0]));
            v173 = vaddq_f32(v172, vmulq_lane_f32(vsubq_f32(vaddq_f32(v171[v166], vmulq_n_f32(vsubq_f32(v171[(int)v166 + 1], v171[v166]), v170.f32[0])), v172), v170, 1));
          }
          else
          {
            v174.i64[0] = 0x3F0000003F000000;
            v174.i64[1] = 0x3F0000003F000000;
            v175 = vaddq_f32(v167, v174);
            v176 = vcvtq_s32_f32(v175);
            v175.i64[0] = vaddq_s32(v176, vcgtq_f32(vcvtq_f32_s32(v176), v175)).u64[0];
            v173 = *(float32x4_t *)(v168 + 16 * (v175.i32[0] + v175.i32[1] * (int)v166));
          }
          *(float32x4_t *)(v11 + v13) = v173;
          v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v13 += 16;
        }
        while (16 * v10 != v13);
      }
      v178 = vaddq_f32(v178, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSlicedTile::GetDOD(HgcSlicedTile *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcSlicedTile *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcSlicedTile::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSlicedTile::HgcSlicedTile(HgcSlicedTile *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E5428;
  v3 = operator new();
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *(_OWORD *)(v3 + 160) = v4;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = xmmword_1B3051280;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051290;
  *(int32x4_t *)(v3 + 272) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 288) = xmmword_1B30512A0;
  *(_OWORD *)(v3 + 304) = xmmword_1B30512B0;
  *(_OWORD *)(v3 + 320) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 336) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 352) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 368) = xmmword_1B30512C0;
  *(_OWORD *)(v3 + 384) = xmmword_1B3050E80;
  *(_OWORD *)(v3 + 400) = xmmword_1B3051230;
  *(_QWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 424) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSlicedTile *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B286BFB4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSlicedTile::~HgcSlicedTile(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E5428;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4003455651);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSlicedTile::~HgcSlicedTile(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSlicedTile::SetParameter(HgcSlicedTile *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float v18;
  __n128 *v19;
  float *v20;
  float *v21;
  float *v22;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_73;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_73;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_73;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_73;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_73;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_73;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_73;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_73;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_73;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_73;
    case 10:
      v18 = -fabsf(a3.n128_f32[0]);
      v19 = (__n128 *)*((_QWORD *)this + 51);
      if (v19[10].n128_f32[0] == 0.0
        && v19[10].n128_f32[1] == 0.0
        && v19[10].n128_f32[2] == v18
        && v19[10].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v19[10].n128_u64[0] = 0;
      v19[10].n128_f32[2] = v18;
      a3.n128_f32[1] = a4;
      v19[10].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v19[26] = a3;
      goto LABEL_73;
    case 11:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[44] == a3.n128_f32[0] && v20[45] == a4 && v20[46] == a5 && v20[47] == a6)
        return 0;
      v20[44] = a3.n128_f32[0];
      v20[45] = a4;
      v20[46] = a5;
      v20[47] = a6;
      goto LABEL_73;
    case 12:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[48] == a3.n128_f32[0] && v21[49] == a4 && v21[50] == a5 && v21[51] == a6)
        return 0;
      v21[48] = a3.n128_f32[0];
      v21[49] = a4;
      v21[50] = a5;
      v21[51] = a6;
      goto LABEL_73;
    case 13:
      v22 = (float *)*((_QWORD *)this + 51);
      if (v22[52] == a3.n128_f32[0] && v22[53] == a4 && v22[54] == a5 && v22[55] == a6)
        return 0;
      v22[52] = a3.n128_f32[0];
      v22[53] = a4;
      v22[54] = a5;
      v22[55] = a6;
LABEL_73:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSlicedTile::GetParameter(HgcSlicedTile *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_16;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_16;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_16;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_16;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_16;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_16;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_16;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_16;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_16;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_16;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[104];
      a3[1] = v14[105];
      a3[2] = v14[106];
      v4 = v14 + 107;
      goto LABEL_16;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
      goto LABEL_16;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      v4 = v16 + 51;
      goto LABEL_16;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      v4 = v17 + 55;
LABEL_16:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcColorAndGradientStroke::GetProgram(HgcColorAndGradientStroke *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000007ff\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.y = half(half(hg_Params[0].x) < r0.x);\n"
             "    r0.w = half(half(hg_Params[0].y) >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.z = half(hg_Params[0].y) - half(hg_Params[0].x);\n"
             "    r0.y = r0.z*half(hg_Params[0].w);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000h);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + half(hg_Params[0].y);\n"
             "    r0.w = -r0.z*half(hg_Params[1].x) + r0.w;\n"
             "    r2.x = half(hg_Params[0].x) - r0.y;\n"
             "    r0.z = r0.z*half(hg_Params[1].y) + r2.x;\n"
             "    r2.xy = half2(r0.zx >= r0.xw);\n"
             "    r2.x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.y = 1.00000h / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000h);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.y = r0.z + r0.y;\n"
             "    r3.x = half(r0.x < r1.w);\n"
             "    r0.z = half(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.y = half(r0.y >= r0.x);\n"
             "    r1.w = half(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.x = half(-r2.x >= c0.x);\n"
             "    r0.z = half(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.y = fmin(r0.z, r0.y);\n"
             "    r0.y = select(r2.z, r2.w, -r0.y < 0.00000h);\n"
             "    r0.x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000h);\n"
             "    r1.w = pow(r1.w, half(hg_Params[0].z));\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7ea8a260:fb019ba9:e5fc926e:40b5962c\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000007ba\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.y = float(hg_Params[0].x < r0.x);\n"
             "    r0.w = float(hg_Params[0].y >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
             "    r0.y = r0.z*hg_Params[0].w;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + hg_Params[0].y;\n"
             "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
             "    r2.x = hg_Params[0].x - r0.y;\n"
             "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
             "    r2.xy = float2(r0.zx >= r0.xw);\n"
             "    r2.x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.y = 1.00000f / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.y = r0.z + r0.y;\n"
             "    r3.x = float(r0.x < r1.w);\n"
             "    r0.z = float(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.y = float(r0.y >= r0.x);\n"
             "    r1.w = float(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.x = float(-r2.x >= c0.x);\n"
             "    r0.z = float(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.y = fmin(r0.z, r0.y);\n"
             "    r0.y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
             "    r0.x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
             "    r1.w = pow(r1.w, hg_Params[0].z);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e34a4054:e6495867:d6bd89f9:dc9d02a3\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007fc\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.y = float(hg_ProgramLocal0.x < r0.x);\n"
           "    r0.w = float(hg_ProgramLocal0.y >= r0.x);\n"
           "    r0.w = min(r0.y, r0.w);\n"
           "    r0.z = hg_ProgramLocal0.y - hg_ProgramLocal0.x;\n"
           "    r0.y = r0.z*hg_ProgramLocal0.w;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = vec4(-r0.w < 0.00000 ? r1.x : c0.x, -r0.w < 0.00000 ? r1.y : c0.x, -r0.w < 0.00000 ? r1.z : c0.x, -r"
           "0.w < 0.00000 ? r1.w : c0.x);\n"
           "    r0.z = r0.z + r0.y;\n"
           "    r0.w = r0.y + hg_ProgramLocal0.y;\n"
           "    r0.w = -r0.z*hg_ProgramLocal1.x + r0.w;\n"
           "    r2.x = hg_ProgramLocal0.x - r0.y;\n"
           "    r0.z = r0.z*hg_ProgramLocal1.y + r2.x;\n"
           "    r2.xy = vec2(greaterThanEqual(r0.zx, r0.xw));\n"
           "    r2.x = max(r2.x, r2.y);\n"
           "    r2.z = r0.x - r0.z;\n"
           "    r2.y = 1.00000 / r0.y;\n"
           "    r2.w = r2.z*r2.y;\n"
           "    r2.z = -r2.x < 0.00000 ? c0.x : r1.w;\n"
           "    r1.w = r0.w - r0.y;\n"
           "    r0.y = r0.z + r0.y;\n"
           "    r3.x = float(r0.x < r1.w);\n"
           "    r0.z = float(r0.y < r0.x);\n"
           "    r0.w = r0.w - r0.x;\n"
           "    r0.z = min(r0.z, r3.x);\n"
           "    r0.y = float(r0.y >= r0.x);\n"
           "    r1.w = float(r0.x >= r1.w);\n"
           "    r2.w = r2.z*r2.w;\n"
           "    r2.x = float(-r2.x >= c0.x);\n"
           "    r0.z = float(-r0.z >= c0.x);\n"
           "    r0.zw = r2.xy*r0.zw;\n"
           "    r0.y = min(r0.z, r0.y);\n"
           "    r0.y = -r0.y < 0.00000 ? r2.w : r2.z;\n"
           "    r0.x = r0.y*r0.w;\n"
           "    r1.w = min(r0.z, r1.w);\n"
           "    r1.w = -r1.w < 0.00000 ? r0.x : r0.y;\n"
           "    r1.w = pow(r1.w, hg_ProgramLocal0.z);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=dd2282e2:5a8e8dd1:40c1b0d2:633ea21e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcColorAndGradientStroke::InitProgramDescriptor(HgcColorAndGradientStroke *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorAndGradientStroke_hgc_visible", "//Metal1.0     \n//LEN=0000000622\n[[ visible ]] FragmentOut HgcColorAndGradientStroke_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r0.y = float(hg_Params[0].x < r0.x);\n"
    "    r0.w = float(hg_Params[0].y >= r0.x);\n"
    "    r0.w = fmin(r0.y, r0.w);\n"
    "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
    "    r0.y = r0.z*hg_Params[0].w;\n"
    "    r1 = color1;\n"
    "    r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
    "    r0.z = r0.z + r0.y;\n"
    "    r0.w = r0.y + hg_Params[0].y;\n"
    "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
    "    r2.x = hg_Params[0].x - r0.y;\n"
    "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
    "    r2.xy = float2(r0.zx >= r0.xw);\n"
    "    r2.x = fmax(r2.x, r2.y);\n"
    "    r2.z = r0.x - r0.z;\n"
    "    r2.y = 1.00000f / r0.y;\n"
    "    r2.w = r2.z*r2.y;\n"
    "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
    "    r1.w = r0.w - r0.y;\n"
    "    r0.y = r0.z + r0.y;\n"
    "    r3.x = float(r0.x < r1.w);\n"
    "    r0.z = float(r0.y < r0.x);\n"
    "    r0.w = r0.w - r0.x;\n"
    "    r0.z = fmin(r0.z, r3.x);\n"
    "    r0.y = float(r0.y >= r0.x);\n"
    "    r1.w = float(r0.x >= r1.w);\n"
    "    r2.w = r2.z*r2.w;\n"
    "    r2.x = float(-r2.x >= c0.x);\n"
    "    r0.z = float(-r0.z >= c0.x);\n"
    "    r0.zw = r2.xy*r0.zw;\n"
    "    r0.y = fmin(r0.z, r0.y);\n"
    "    r0.y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
    "    r0.x = r0.y*r0.w;\n"
    "    r1.w = fmin(r0.z, r1.w);\n"
    "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
    "    r1.w = pow(r1.w, hg_Params[0].z);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B286C708()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorAndGradientStroke");
}

void sub_1B286C718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B286C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B286C8A0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B286C898);
}

_QWORD *HgcColorAndGradientStroke::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorAndGradientStroke [hgc1]");
}

uint64_t HgcColorAndGradientStroke::BindTexture(HgcColorAndGradientStroke *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorAndGradientStroke::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcColorAndGradientStroke::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int8x16_t v147;
  int8x16_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t *v151;
  unsigned int v152;
  uint64_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  float32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  int8x16_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int8x16_t v166;
  float32x4_t v167;
  int32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  float32x4_t v173;
  int32x4_t v174;
  int8x16_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int8x16_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  float32x4_t v198;
  float32x4_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x4_t v212;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 24);
    v10 = 16 * *(int *)(a2 + 104);
    do
    {
      if (v4 < 2)
      {
        v152 = 0;
      }
      else
      {
        v11 = 0;
        v12 = 16;
        do
        {
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(int8x16_t *)v13;
          v15 = *(int8x16_t *)(v13 + 16);
          v17 = *(int8x16_t *)(v13 + 32);
          v16 = *(int8x16_t *)(v13 + 48);
          v18 = vbslq_s8(v16, *(int8x16_t *)(v8 + v12 - 16), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13))));
          v19 = vbslq_s8(v16, *(int8x16_t *)(v8 + v12), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13))));
          v20 = (float32x4_t)vextq_s8(v14, v14, 8uLL);
          v21 = vandq_s8(v17, (int8x16_t)vcgeq_f32(v20, (float32x4_t)vextq_s8(v18, v18, 4uLL)));
          v22 = vandq_s8(v17, (int8x16_t)vcgeq_f32(v20, (float32x4_t)vextq_s8(v19, v19, 4uLL)));
          v23.i64[0] = v18.i64[0];
          v23.i64[1] = v21.i64[1];
          v24.i64[0] = v19.i64[0];
          v24.i64[1] = v22.i64[1];
          v18.i64[1] = vminq_f32((float32x4_t)vextq_s8(v21, v18, 8uLL), v23).i64[1];
          v19.i64[1] = vminq_f32((float32x4_t)vextq_s8(v22, v19, 8uLL), v24).i64[1];
          v25 = *(int8x16_t *)(v13 + 64);
          v26 = *(int8x16_t *)(v13 + 80);
          v27 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v14, v14, 0xCuLL), v20);
          v28 = (float32x4_t)vbslq_s8(v25, v27, v18);
          v29 = (float32x4_t)vbslq_s8(v25, v27, v19);
          v30 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_laneq_f32(v20, v28, 2), (int8x16_t)v28);
          v31 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_laneq_f32(v20, v29, 2), (int8x16_t)v29);
          v32 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3);
          v33 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3);
          v30.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v13, *(int8x16_t *)&v30, 0xCuLL), v30).i64[1];
          v31.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v13, *(int8x16_t *)&v31, 0xCuLL), v31).i64[1];
          v34 = (int8x16_t)vaddq_f32(*(float32x4_t *)v13, v30);
          v35 = (int8x16_t)vaddq_f32(*(float32x4_t *)v13, v31);
          v36 = vextq_s8(v34, v34, 8uLL);
          v37 = vextq_s8(v35, v35, 8uLL);
          v39 = *(float32x4_t *)(v13 + 96);
          v38 = *(int8x16_t *)(v13 + 112);
          v40 = (float32x4_t)vbslq_s8(v38, v36, (int8x16_t)v30);
          v41 = (float32x4_t)vbslq_s8(v38, v37, (int8x16_t)v31);
          v42 = (float32x4_t)vextq_s8(v15, v15, 4uLL);
          v43 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v40, vmulq_laneq_f32(v42, v40, 2)), (int8x16_t)v30);
          v44 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v41, vmulq_laneq_f32(v42, v41, 2)), (int8x16_t)v31);
          v45 = (int8x16_t)vsubq_f32(*(float32x4_t *)v13, (float32x4_t)vrev64q_s32((int32x4_t)v43));
          v46 = (int8x16_t)vsubq_f32(*(float32x4_t *)v13, (float32x4_t)vrev64q_s32((int32x4_t)v44));
          v47 = (int8x16_t)vaddq_f32(vmulq_lane_f32(v43, *(float32x2_t *)v15.i8, 1), (float32x4_t)vextq_s8(v45, v45, 8uLL));
          v48 = (int8x16_t)vaddq_f32(vmulq_lane_f32(v44, *(float32x2_t *)v15.i8, 1), (float32x4_t)vextq_s8(v46, v46, 8uLL));
          v49 = (float32x4_t)vbslq_s8(v25, v47, (int8x16_t)v43);
          v50 = (float32x4_t)vbslq_s8(v25, v48, (int8x16_t)v44);
          v51 = *(int32x4_t *)(v13 + 128);
          v52 = *(int8x16_t *)(v13 + 144);
          *(int8x8_t *)v53.f32 = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v51.i8);
          v48.i64[0] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
          *(int8x8_t *)&v53.u32[2] = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v48.i8);
          *(int8x8_t *)v54.f32 = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v51.i8);
          *(int8x8_t *)&v54.u32[2] = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v48.i8);
          v55 = (int8x16_t)vcgtq_f32(v32, v39);
          *(int8x8_t *)v32.f32 = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v52.i8);
          v44.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
          *(int8x8_t *)&v32.u32[2] = vqtbl1_s8((int8x16_t)v49, *(int8x8_t *)v44.f32);
          *(int8x8_t *)v56.f32 = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v52.i8);
          *(int8x8_t *)&v56.u32[2] = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)v44.f32);
          v57 = (int32x4_t)vbslq_s8(v55, *(int8x16_t *)(v6 + v12 - 16), (int8x16_t)v39);
          v58 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v39), *(int8x16_t *)(v6 + v12), (int8x16_t)v39);
          v59 = (float32x4_t)vandq_s8(v17, (int8x16_t)vcgeq_f32(v32, v53));
          v60 = (float32x4_t)vandq_s8(v17, (int8x16_t)vcgeq_f32(v56, v54));
          v61 = (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
          v62 = (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL);
          v53.i64[0] = vmaxq_f32(v59, (float32x4_t)vrev64q_s32((int32x4_t)v59)).u64[0];
          v64 = *(float32x4_t *)(v13 + 160);
          v63 = *(float32x4_t *)(v13 + 176);
          v60.i64[0] = vmaxq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)v60)).u64[0];
          v53.i64[1] = vsubq_f32(v61, v49).i64[1];
          v65 = *(float32x4_t *)(v13 + 192);
          v66 = *(float32x4_t *)(v13 + 208);
          v67 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v49), v64), v63), v65);
          v68 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v50), v64), v63), v65);
          v60.i64[1] = vsubq_f32(v62, v50).i64[1];
          v69 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_f32(v67, vrecpsq_f32(v49, v67)), (int8x16_t)v53);
          v70 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vmulq_f32(v68, vrecpsq_f32(v50, v68)), (int8x16_t)v60);
          v71 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v69.i64[0], 0), v69, 2);
          v72 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v70.i64[0], 0), v70, 2);
          v73 = (float32x4_t)vextq_s8(v71, (int8x16_t)v69, 8uLL);
          v74 = (float32x4_t)vextq_s8(v72, (int8x16_t)v70, 8uLL);
          v75 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v49, v61), (int8x16_t)v57);
          v76 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v50, v62), (int8x16_t)v58);
          v69.i64[1] = v71.i64[1];
          v77 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL), v49), (int8x16_t)v49);
          v78 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL), v50), (int8x16_t)v50);
          v70.i64[1] = v72.i64[1];
          v79 = (float32x4_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 0xCuLL), v77);
          v80 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL))), (int8x16_t)v77);
          v81 = (int8x16_t)vcgtq_f32(v74, v63);
          v82 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 0xCuLL), v78);
          v83 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL))), (int8x16_t)v78);
          v84 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v80, (float32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL)), (int8x16_t)v80);
          v85 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vsubq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL)), (int8x16_t)v83);
          v86 = vandq_s8((int8x16_t)v63, (int8x16_t)v79);
          v87 = vandq_s8((int8x16_t)v63, v82);
          v88 = (float32x4_t)vbslq_s8(v25, vbslq_s8((int8x16_t)vcgtq_f32(v73, v63), (int8x16_t)v63, (int8x16_t)vrev64q_s32(v57)), (int8x16_t)v69);
          v89 = (float32x4_t)vbslq_s8(v25, (int8x16_t)vminq_f32(v84, (float32x4_t)vextq_s8(v86, v86, 8uLL)), (int8x16_t)v84);
          v90 = (float32x4_t)vbslq_s8(v25, (int8x16_t)vminq_f32(v85, (float32x4_t)vextq_s8(v87, v87, 8uLL)), (int8x16_t)v85);
          v91 = (float32x4_t)vbslq_s8(v25, vbslq_s8(v81, (int8x16_t)v63, (int8x16_t)vrev64q_s32(v58)), (int8x16_t)v70);
          v92 = (float32x4_t)vbslq_s8(v26, vandq_s8(v17, (int8x16_t)vcgeq_f32(v89, (float32x4_t)vrev64q_s32((int32x4_t)v89))), (int8x16_t)v89);
          v93 = (float32x4_t)vbslq_s8(v26, vandq_s8(v17, (int8x16_t)vcgeq_f32(v90, (float32x4_t)vrev64q_s32((int32x4_t)v90))), (int8x16_t)v90);
          v94 = vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v75));
          v95 = vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76));
          v96 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vmulq_laneq_f32(v88, v88, 2), (int8x16_t)v88);
          v97 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vmulq_laneq_f32(v91, v91, 2), (int8x16_t)v91);
          v98 = (float32x4_t)vbslq_s8(v16, vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32(vnegq_f32(v96), v64)), (int8x16_t)v96);
          v99 = vbslq_s8(v16, vandq_s8((int8x16_t)v63, (int8x16_t)vcgeq_f32(vnegq_f32(v97), v64)), (int8x16_t)v97);
          v100 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgeq_f32(vnegq_f32(v92), v63)), (int8x16_t)v92);
          v101 = (float32x4_t)vbslq_s8(v25, vandq_s8((int8x16_t)v64, (int8x16_t)vcgeq_f32(vnegq_f32(v93), v63)), (int8x16_t)v93);
          v102 = (float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL);
          v103 = (float32x4_t)vextq_s8(v99, v99, 8uLL);
          v104 = (int8x16_t)vmulq_f32(v102, v100);
          v105 = (int8x16_t)vmulq_f32(v103, v101);
          v86.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          v73.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          *(int8x8_t *)v106.f32 = vext_s8(*(int8x8_t *)v100.f32, *(int8x8_t *)v86.i8, 4uLL);
          v106.i64[1] = vextq_s8(v104, (int8x16_t)v100, 0xCuLL).u64[0];
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v101.f32, *(int8x8_t *)v73.f32, 4uLL);
          v79.i64[1] = vextq_s8(v105, (int8x16_t)v101, 0xCuLL).u64[0];
          v100.i64[1] = v104.i64[1];
          v101.i64[1] = v105.i64[1];
          v100.i64[0] = vminq_f32(v106, v100).u64[0];
          v101.i64[0] = vminq_f32(v79, v101).u64[0];
          v100.i64[1] = v104.i64[1];
          v101.i64[1] = v105.i64[1];
          v107 = (int8x16_t)vcgtq_f32(v101, v39);
          v108 = vbslq_s8((int8x16_t)vcgtq_f32(v100, v39), (int8x16_t)v102, vextq_s8((int8x16_t)v98, *(int8x16_t *)v13, 4uLL));
          v109 = vbslq_s8(v107, (int8x16_t)v103, vextq_s8(v99, *(int8x16_t *)v13, 4uLL));
          v100.i64[0] = vextq_s8(v104, v108, 0xCuLL).u64[0];
          *(int8x8_t *)&v100.u32[2] = vext_s8(*(int8x8_t *)v108.i8, *(int8x8_t *)v86.i8, 4uLL);
          v98.i64[0] = vextq_s8(v105, v109, 0xCuLL).u64[0];
          *(int8x8_t *)&v98.u32[2] = vext_s8(*(int8x8_t *)v109.i8, *(int8x8_t *)v73.f32, 4uLL);
          v108.i64[1] = v104.i64[1];
          v109.i64[1] = v105.i64[1];
          v110 = (int32x4_t)vbslq_s8(v16, (int8x16_t)vmulq_lane_f32(v100, *(float32x2_t *)v108.i8, 1), v108);
          v111 = (int32x4_t)vbslq_s8(v16, (int8x16_t)vmulq_lane_f32(v98, *(float32x2_t *)v109.i8, 1), v109);
          v112 = (float32x4_t)vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v38, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v110), (float32x4_t)vbslq_s8(v38, v94, (int8x16_t)v57)), (int8x16_t)v57), v64), vextq_s8((int8x16_t)v110, (int8x16_t)v110, 4uLL), vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL)), (int8x16_t)v57);
          v113 = (float32x4_t)vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v38, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v111), (float32x4_t)vbslq_s8(v38, v95, (int8x16_t)v58)), (int8x16_t)v58), v64), vextq_s8((int8x16_t)v111, (int8x16_t)v111, 4uLL), vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL)), (int8x16_t)v58);
          v114 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v112, v52), (int8x16_t)v63);
          v115 = *(int8x16_t *)(v13 + 224);
          v116 = *(float32x4_t *)(v13 + 240);
          v117 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v113, v52), (int8x16_t)v63);
          v118 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v112, 0x17uLL)), (float32x4_t)vandq_s8(v115, (int8x16_t)vcgtq_f32(v66, v112))), v116);
          v119 = *(float32x4_t *)(v13 + 256);
          v120 = *(float32x4_t *)(v13 + 272);
          v121 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v113, 0x17uLL)), (float32x4_t)vandq_s8(v115, (int8x16_t)vcgtq_f32(v66, v113))), v116);
          v122 = (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v114, v119));
          v123 = (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v117, v119));
          v124 = vsubq_f32(vsubq_f32(v114, v63), vmulq_f32(vmulq_f32(v120, v122), v114));
          v125 = vsubq_f32(vsubq_f32(v117, v63), vmulq_f32(vmulq_f32(v120, v123), v117));
          v126 = *(float32x4_t *)(v13 + 288);
          v127 = *(float32x4_t *)(v13 + 304);
          v128 = vaddq_f32(v126, vmulq_f32(v127, v124));
          v129 = vaddq_f32(v126, vmulq_f32(v127, v125));
          v131 = *(float32x4_t *)(v13 + 320);
          v130 = *(float32x4_t *)(v13 + 336);
          v132 = vmulq_laneq_f32(vaddq_f32(vaddq_f32(v118, v122), vmulq_f32(v124, vaddq_f32(vaddq_f32(v131, vmulq_f32(v130, v124)), vmulq_f32(vmulq_f32(v124, v124), v128)))), *(float32x4_t *)v13, 2);
          v133 = vmulq_laneq_f32(vaddq_f32(vaddq_f32(v121, v123), vmulq_f32(v125, vaddq_f32(vaddq_f32(v131, vmulq_f32(v130, v125)), vmulq_f32(vmulq_f32(v125, v125), v129)))), *(float32x4_t *)v13, 2);
          v134 = *(float32x4_t *)(v13 + 352);
          v135 = *(float32x4_t *)(v13 + 368);
          v136 = vmaxq_f32(v132, v134);
          v137 = vmaxq_f32(v133, v134);
          v138 = vcvtq_f32_s32(vcvtq_s32_f32(v136));
          v139 = vcvtq_f32_s32(vcvtq_s32_f32(v137));
          v140 = vsubq_f32(v138, (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v138, v136)));
          v141 = vsubq_f32(v139, (float32x4_t)vandq_s8((int8x16_t)v63, (int8x16_t)vcgtq_f32(v139, v137)));
          v142 = vsubq_f32(v136, v140);
          v143 = vsubq_f32(v137, v141);
          v144 = *(float32x4_t *)(v13 + 384);
          v145 = *(float32x4_t *)(v13 + 400);
          v146 = vaddq_f32(v63, vmulq_f32(v143, vaddq_f32(v145, vmulq_f32(v143, vaddq_f32(v135, vmulq_f32(v144, v143))))));
          v147 = (int8x16_t)vmulq_f32(vaddq_f32(v63, vmulq_f32(v142, vaddq_f32(v145, vmulq_f32(v142, vaddq_f32(v135, vmulq_f32(v144, v142)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v140), v51), 0x17uLL));
          v148 = (int8x16_t)vmulq_f32(v146, (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v141), v51), 0x17uLL));
          v149 = (float32x4_t)vbslq_s8(v38, v147, (int8x16_t)v57);
          v150 = (float32x4_t)vbslq_s8(v38, v148, (int8x16_t)v58);
          v151 = (int8x16_t *)(v5 + v12);
          v151[-1] = vbslq_s8(v38, v147, (int8x16_t)vmulq_laneq_f32(v149, v149, 3));
          *v151 = vbslq_s8(v38, v148, (int8x16_t)vmulq_laneq_f32(v150, v150, 3));
          v11 -= 2;
          v12 += 32;
        }
        while (v4 + v11 > 1);
        v152 = -v11;
      }
      if ((int)v152 < v4)
      {
        v153 = *(_QWORD *)(a1 + 408);
        v154 = *(int8x16_t *)v153;
        v155 = *(int8x16_t *)(v153 + 16);
        v157 = *(int8x16_t *)(v153 + 32);
        v156 = *(int8x16_t *)(v153 + 48);
        v158 = vbslq_s8(v156, *(int8x16_t *)(v8 + 16 * v152), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v157, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v8 + 16 * v152), *(float32x4_t *)v153))));
        v159 = (float32x4_t)vextq_s8(v154, v154, 8uLL);
        v160 = vandq_s8(v157, (int8x16_t)vcgeq_f32(v159, (float32x4_t)vextq_s8(v158, v158, 4uLL)));
        v161.i64[0] = v158.i64[0];
        v161.i64[1] = v160.i64[1];
        v158.i64[1] = vminq_f32((float32x4_t)vextq_s8(v160, v158, 8uLL), v161).i64[1];
        v162 = *(int8x16_t *)(v153 + 64);
        v163 = *(int8x16_t *)(v153 + 80);
        v164 = (float32x4_t)vbslq_s8(v162, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v154, v154, 0xCuLL), v159), v158);
        v165 = (float32x4_t)vbslq_s8(v163, (int8x16_t)vmulq_laneq_f32(v159, v164, 2), (int8x16_t)v164);
        v167 = *(float32x4_t *)(v153 + 96);
        v166 = *(int8x16_t *)(v153 + 112);
        v168 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v165, 3), v167), *(int8x16_t *)(v6 + 16 * v152), (int8x16_t)v167);
        v165.i64[1] = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v153, *(int8x16_t *)&v165, 0xCuLL), v165).i64[1];
        v169 = (int8x16_t)vaddq_f32(*(float32x4_t *)v153, v165);
        v170 = (float32x4_t)vbslq_s8(v166, vextq_s8(v169, v169, 8uLL), (int8x16_t)v165);
        v171 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vsubq_f32(v170, vmulq_laneq_f32((float32x4_t)vextq_s8(v155, v155, 4uLL), v170, 2)), (int8x16_t)v165);
        v172 = (int8x16_t)vsubq_f32(*(float32x4_t *)v153, (float32x4_t)vrev64q_s32((int32x4_t)v171));
        v173 = (float32x4_t)vbslq_s8(v162, (int8x16_t)vaddq_f32(vmulq_lane_f32(v171, *(float32x2_t *)v155.i8, 1), (float32x4_t)vextq_s8(v172, v172, 8uLL)), (int8x16_t)v171);
        v174 = *(int32x4_t *)(v153 + 128);
        v175 = *(int8x16_t *)(v153 + 144);
        *(int8x8_t *)v171.f32 = vqtbl1_s8((int8x16_t)v173, *(int8x8_t *)v174.i8);
        *(int8x8_t *)&v171.u32[2] = vqtbl1_s8((int8x16_t)v173, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL));
        *(int8x8_t *)v176.f32 = vqtbl1_s8((int8x16_t)v173, *(int8x8_t *)v175.i8);
        *(int8x8_t *)&v176.u32[2] = vqtbl1_s8((int8x16_t)v173, (int8x8_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL));
        v177 = (float32x4_t)vandq_s8(v157, (int8x16_t)vcgeq_f32(v176, v171));
        v178.i64[0] = vmaxq_f32(v177, (float32x4_t)vrev64q_s32((int32x4_t)v177)).u64[0];
        v179 = (float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL);
        v178.i64[1] = vsubq_f32(v179, v173).i64[1];
        v181 = *(float32x4_t *)(v153 + 160);
        v180 = *(float32x4_t *)(v153 + 176);
        v182 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v173), v181), v180), *(float32x4_t *)(v153 + 192));
        v183 = (float32x4_t)vbslq_s8(v163, (int8x16_t)vmulq_f32(v182, vrecpsq_f32(v173, v182)), v178);
        v184 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v183.i64[0], 0), v183, 2);
        v185 = (float32x4_t)vextq_s8(v184, (int8x16_t)v183, 8uLL);
        v183.i64[1] = v184.i64[1];
        v186 = (float32x4_t)vbslq_s8(v162, vbslq_s8((int8x16_t)vcgtq_f32(v185, v180), (int8x16_t)v180, (int8x16_t)vrev64q_s32(v168)), (int8x16_t)v183);
        v187 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vsubq_f32(v173, v179), (int8x16_t)v168);
        v188 = (float32x4_t)vbslq_s8(v163, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL), v173), (int8x16_t)v173);
        v189 = (float32x4_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 0xCuLL), v188);
        v190 = (float32x4_t)vbslq_s8(v162, vandq_s8((int8x16_t)v181, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 0xCuLL))), (int8x16_t)v188);
        v191 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vsubq_f32(v190, (float32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 4uLL)), (int8x16_t)v190);
        v192 = vandq_s8((int8x16_t)v180, (int8x16_t)v189);
        v193 = (float32x4_t)vbslq_s8(v162, (int8x16_t)vminq_f32(v191, (float32x4_t)vextq_s8(v192, v192, 8uLL)), (int8x16_t)v191);
        v194 = (float32x4_t)vbslq_s8(v163, vandq_s8(v157, (int8x16_t)vcgeq_f32(v193, (float32x4_t)vrev64q_s32((int32x4_t)v193))), (int8x16_t)v193);
        v195 = (float32x4_t)vbslq_s8(v166, vandq_s8((int8x16_t)v180, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v194, (int8x16_t)v194, 4uLL), v187)), (int8x16_t)v168);
        v196 = (float32x4_t)vbslq_s8(v166, (int8x16_t)vmulq_laneq_f32(v186, v186, 2), (int8x16_t)v186);
        v197 = vbslq_s8(v156, vandq_s8((int8x16_t)v180, (int8x16_t)vcgeq_f32(vnegq_f32(v196), v181)), (int8x16_t)v196);
        v198 = (float32x4_t)vbslq_s8(v162, vandq_s8((int8x16_t)v181, (int8x16_t)vcgeq_f32(vnegq_f32(v194), v180)), (int8x16_t)v194);
        v199 = (float32x4_t)vextq_s8(v197, v197, 8uLL);
        v200 = (int8x16_t)vmulq_f32(v199, v198);
        v186.i64[0] = vextq_s8(v200, v200, 8uLL).u64[0];
        v192.i64[0] = vextq_s8(v200, (int8x16_t)v198, 0xCuLL).u64[0];
        *(int8x8_t *)v189.f32 = vext_s8(*(int8x8_t *)v198.f32, *(int8x8_t *)v186.f32, 4uLL);
        v198.i64[1] = v200.i64[1];
        v189.i64[1] = v192.i64[0];
        v198.i64[0] = vminq_f32(v189, v198).u64[0];
        v198.i64[1] = v200.i64[1];
        v201 = vbslq_s8((int8x16_t)vcgtq_f32(v198, v167), (int8x16_t)v199, vextq_s8(v197, *(int8x16_t *)v153, 4uLL));
        v199.i64[0] = vextq_s8(v200, v201, 0xCuLL).u64[0];
        *(int8x8_t *)&v199.u32[2] = vext_s8(*(int8x8_t *)v201.i8, *(int8x8_t *)v186.f32, 4uLL);
        v201.i64[1] = v200.i64[1];
        v202 = (int32x4_t)vbslq_s8(v156, (int8x16_t)vmulq_lane_f32(v199, *(float32x2_t *)v201.i8, 1), v201);
        v203 = (float32x4_t)vbslq_s8(v166, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v166, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v202), v195), (int8x16_t)v168), v181), vextq_s8((int8x16_t)v202, (int8x16_t)v202, 4uLL), vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL)), (int8x16_t)v168);
        v204 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v203, v175), (int8x16_t)v180);
        v205 = (float32x4_t)vandq_s8((int8x16_t)v180, (int8x16_t)vcgtq_f32(v204, *(float32x4_t *)(v153 + 256)));
        v206 = vsubq_f32(vsubq_f32(v204, v180), vmulq_f32(vmulq_f32(*(float32x4_t *)(v153 + 272), v205), v204));
        v207 = vmaxq_f32(vmulq_laneq_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v203, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v153 + 224), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v153 + 208), v203))), *(float32x4_t *)(v153 + 240)), v205), vmulq_f32(v206, vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + 320), vmulq_f32(*(float32x4_t *)(v153 + 336), v206)), vmulq_f32(vmulq_f32(v206, v206), vaddq_f32(*(float32x4_t *)(v153 + 288), vmulq_f32(*(float32x4_t *)(v153 + 304), v206)))))), *(float32x4_t *)v153,
                   2),
                 *(float32x4_t *)(v153 + 352));
        v208 = vcvtq_f32_s32(vcvtq_s32_f32(v207));
        v209 = vsubq_f32(v208, (float32x4_t)vandq_s8((int8x16_t)v180, (int8x16_t)vcgtq_f32(v208, v207)));
        v210 = vsubq_f32(v207, v209);
        v211 = (int8x16_t)vmulq_f32(vaddq_f32(v180, vmulq_f32(v210, vaddq_f32(*(float32x4_t *)(v153 + 400), vmulq_f32(v210, vaddq_f32(*(float32x4_t *)(v153 + 368), vmulq_f32(*(float32x4_t *)(v153 + 384), v210)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v209), v174), 0x17uLL));
        v212 = (float32x4_t)vbslq_s8(v166, v211, (int8x16_t)v168);
        *(int8x16_t *)(v5 + 16 * v152) = vbslq_s8(v166, v211, (int8x16_t)vmulq_laneq_f32(v212, v212, 3));
      }
      v8 += v7;
      v6 += v10;
      v5 += v9;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorAndGradientStroke::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcColorAndGradientStroke::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcColorAndGradientStroke::HgcColorAndGradientStroke(HgcColorAndGradientStroke *this)
{
  _QWORD *v2;
  HgcColorAndGradientStroke::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E5690;
  v3 = (HgcColorAndGradientStroke::State *)operator new();
  HgcColorAndGradientStroke::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B286D440(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorAndGradientStroke::~HgcColorAndGradientStroke(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E5690;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C407DC911DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorAndGradientStroke::~HgcColorAndGradientStroke(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorAndGradientStroke::SetParameter(HgcColorAndGradientStroke *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcColorAndGradientStroke::GetParameter(HgcColorAndGradientStroke *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgcColorAndGradientStroke::State::State(HgcColorAndGradientStroke::State *this)
{
  double result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_1B3051310;
  *((_OWORD *)this + 3) = xmmword_1B3050E20;
  *((_OWORD *)this + 4) = xmmword_1B3050FE0;
  *((_OWORD *)this + 5) = xmmword_1B3050FF0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_1B3050F70;
  *((_OWORD *)this + 8) = xmmword_1B3051320;
  *((_OWORD *)this + 9) = xmmword_1B3051330;
  *((_OWORD *)this + 10) = xmmword_1B3051340;
  *((_OWORD *)this + 11) = xmmword_1B3051350;
  *((int32x4_t *)this + 12) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 13) = xmmword_1B3050E40;
  *((_OWORD *)this + 14) = xmmword_1B3050E50;
  *((_OWORD *)this + 15) = xmmword_1B3050E60;
  *((_OWORD *)this + 16) = xmmword_1B3050E70;
  *((_OWORD *)this + 17) = xmmword_1B3050E80;
  *((_OWORD *)this + 18) = xmmword_1B3051360;
  *((_OWORD *)this + 19) = xmmword_1B3051370;
  *((_OWORD *)this + 20) = xmmword_1B3051380;
  *((_OWORD *)this + 21) = xmmword_1B3051390;
  *((_OWORD *)this + 22) = xmmword_1B3050F00;
  *((_OWORD *)this + 23) = xmmword_1B30513A0;
  *((_OWORD *)this + 24) = xmmword_1B30513B0;
  result = 0.0;
  *((_OWORD *)this + 25) = xmmword_1B30513C0;
  return result;
}

const char *HgcOutlineGradientStroke::GetProgram(HgcOutlineGradientStroke *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000008d1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.z = half(hg_Params[0].y) - half(hg_Params[0].x);\n"
             "    r1.x = r0.x - half(hg_Params[0].x);\n"
             "    r1.x = clamp(r1.x/r0.z, 0.00000h, 1.00000h);\n"
             "    r0.y = half(half(hg_Params[0].x) < r0.x);\n"
             "    r0.w = half(half(hg_Params[0].y) >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.y = r0.z*half(hg_Params[0].w);\n"
             "    r1.x = r0.z*r1.x;\n"
             "    r1.y = c0.y;\n"
             "    r1.xy = r1.xy + half2(hg_Params[2].xy);\n"
             "    r1.xy = r1.xy*half2(hg_Params[2].zw);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, float2(r1.xy));\n"
             "    r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000h);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + half(hg_Params[0].y);\n"
             "    r0.w = -r0.z*half(hg_Params[1].x) + r0.w;\n"
             "    r2.x = half(hg_Params[0].x) - r0.y;\n"
             "    r0.z = r0.z*half(hg_Params[1].y) + r2.x;\n"
             "    r2.xy = half2(r0.zx >= r0.xw);\n"
             "    r2.x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.y = 1.00000h / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000h);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.y = r0.z + r0.y;\n"
             "    r3.x = half(r0.x < r1.w);\n"
             "    r0.z = half(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.y = half(r0.y >= r0.x);\n"
             "    r1.w = half(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.x = half(-r2.x >= c0.x);\n"
             "    r0.z = half(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.y = fmin(r0.z, r0.y);\n"
             "    r0.y = select(r2.z, r2.w, -r0.y < 0.00000h);\n"
             "    r0.x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000h);\n"
             "    r1.w = pow(r1.w, half(hg_Params[0].z));\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=23aec663:a1006d38:1aab4f17:4fa0d840\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0003:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000870\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
             "    r1.x = r0.x - hg_Params[0].x;\n"
             "    r1.x = clamp(r1.x/r0.z, 0.00000f, 1.00000f);\n"
             "    r0.y = float(hg_Params[0].x < r0.x);\n"
             "    r0.w = float(hg_Params[0].y >= r0.x);\n"
             "    r0.w = fmin(r0.y, r0.w);\n"
             "    r0.y = r0.z*hg_Params[0].w;\n"
             "    r1.x = r0.z*r1.x;\n"
             "    r1.y = c0.y;\n"
             "    r1.xy = r1.xy + hg_Params[2].xy;\n"
             "    r1.xy = r1.xy*hg_Params[2].zw;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
             "    r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
             "    r0.z = r0.z + r0.y;\n"
             "    r0.w = r0.y + hg_Params[0].y;\n"
             "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
             "    r2.x = hg_Params[0].x - r0.y;\n"
             "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
             "    r2.xy = float2(r0.zx >= r0.xw);\n"
             "    r2.x = fmax(r2.x, r2.y);\n"
             "    r2.z = r0.x - r0.z;\n"
             "    r2.y = 1.00000f / r0.y;\n"
             "    r2.w = r2.z*r2.y;\n"
             "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
             "    r1.w = r0.w - r0.y;\n"
             "    r0.y = r0.z + r0.y;\n"
             "    r3.x = float(r0.x < r1.w);\n"
             "    r0.z = float(r0.y < r0.x);\n"
             "    r0.w = r0.w - r0.x;\n"
             "    r0.z = fmin(r0.z, r3.x);\n"
             "    r0.y = float(r0.y >= r0.x);\n"
             "    r1.w = float(r0.x >= r1.w);\n"
             "    r2.w = r2.z*r2.w;\n"
             "    r2.x = float(-r2.x >= c0.x);\n"
             "    r0.z = float(-r0.z >= c0.x);\n"
             "    r0.zw = r2.xy*r0.zw;\n"
             "    r0.y = fmin(r0.z, r0.y);\n"
             "    r0.y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
             "    r0.x = r0.y*r0.w;\n"
             "    r1.w = fmin(r0.z, r1.w);\n"
             "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
             "    r1.w = pow(r1.w, hg_Params[0].z);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2d2bf367:a80b0c77:40425e29:ddb955b0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000008c5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.z = hg_ProgramLocal0.y - hg_ProgramLocal0.x;\n"
           "    r1.x = r0.x - hg_ProgramLocal0.x;\n"
           "    r1.x = clamp(r1.x/r0.z, 0.00000, 1.00000);\n"
           "    r0.y = float(hg_ProgramLocal0.x < r0.x);\n"
           "    r0.w = float(hg_ProgramLocal0.y >= r0.x);\n"
           "    r0.w = min(r0.y, r0.w);\n"
           "    r0.y = r0.z*hg_ProgramLocal0.w;\n"
           "    r1.x = r0.z*r1.x;\n"
           "    r1.y = c0.y;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal2.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal2.zw;\n"
           "    r1 = texture2D(hg_Texture1, r1.xy);\n"
           "    r1 = vec4(-r0.w < 0.00000 ? r1.x : c0.x, -r0.w < 0.00000 ? r1.y : c0.x, -r0.w < 0.00000 ? r1.z : c0.x, -r"
           "0.w < 0.00000 ? r1.w : c0.x);\n"
           "    r0.z = r0.z + r0.y;\n"
           "    r0.w = r0.y + hg_ProgramLocal0.y;\n"
           "    r0.w = -r0.z*hg_ProgramLocal1.x + r0.w;\n"
           "    r2.x = hg_ProgramLocal0.x - r0.y;\n"
           "    r0.z = r0.z*hg_ProgramLocal1.y + r2.x;\n"
           "    r2.xy = vec2(greaterThanEqual(r0.zx, r0.xw));\n"
           "    r2.x = max(r2.x, r2.y);\n"
           "    r2.z = r0.x - r0.z;\n"
           "    r2.y = 1.00000 / r0.y;\n"
           "    r2.w = r2.z*r2.y;\n"
           "    r2.z = -r2.x < 0.00000 ? c0.x : r1.w;\n"
           "    r1.w = r0.w - r0.y;\n"
           "    r0.y = r0.z + r0.y;\n"
           "    r3.x = float(r0.x < r1.w);\n"
           "    r0.z = float(r0.y < r0.x);\n"
           "    r0.w = r0.w - r0.x;\n"
           "    r0.z = min(r0.z, r3.x);\n"
           "    r0.y = float(r0.y >= r0.x);\n"
           "    r1.w = float(r0.x >= r1.w);\n"
           "    r2.w = r2.z*r2.w;\n"
           "    r2.x = float(-r2.x >= c0.x);\n"
           "    r0.z = float(-r0.z >= c0.x);\n"
           "    r0.zw = r2.xy*r0.zw;\n"
           "    r0.y = min(r0.z, r0.y);\n"
           "    r0.y = -r0.y < 0.00000 ? r2.w : r2.z;\n"
           "    r0.x = r0.y*r0.w;\n"
           "    r1.w = min(r0.z, r1.w);\n"
           "    r1.w = -r1.w < 0.00000 ? r0.x : r0.y;\n"
           "    r1.w = pow(r1.w, hg_ProgramLocal0.z);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=a3aaa346:e66c7ddd:eac16ee8:b26dc26e\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcOutlineGradientStroke::InitProgramDescriptor(HgcOutlineGradientStroke *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcOutlineGradientStroke_hgc_visible", "//Metal1.0     \n//LEN=0000000730\n[[ visible ]] FragmentOut HgcOutlineGradientStroke_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1)\n{\n    const float4 c0 = float4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r0.z = hg_Params[0].y - hg_Params[0].x;\n"
    "    r1.x = r0.x - hg_Params[0].x;\n"
    "    r1.x = clamp(r1.x/r0.z, 0.00000f, 1.00000f);\n"
    "    r0.y = float(hg_Params[0].x < r0.x);\n"
    "    r0.w = float(hg_Params[0].y >= r0.x);\n"
    "    r0.w = fmin(r0.y, r0.w);\n"
    "    r0.y = r0.z*hg_Params[0].w;\n"
    "    r1.x = r0.z*r1.x;\n"
    "    r1.y = c0.y;\n"
    "    r1.xy = r1.xy + hg_Params[2].xy;\n"
    "    r1.xy = r1.xy*hg_Params[2].zw;\n"
    "    r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
    "    r1 = select(c0.xxxx, r1, -r0.wwww < 0.00000f);\n"
    "    r0.z = r0.z + r0.y;\n"
    "    r0.w = r0.y + hg_Params[0].y;\n"
    "    r0.w = -r0.z*hg_Params[1].x + r0.w;\n"
    "    r2.x = hg_Params[0].x - r0.y;\n"
    "    r0.z = r0.z*hg_Params[1].y + r2.x;\n"
    "    r2.xy = float2(r0.zx >= r0.xw);\n"
    "    r2.x = fmax(r2.x, r2.y);\n"
    "    r2.z = r0.x - r0.z;\n"
    "    r2.y = 1.00000f / r0.y;\n"
    "    r2.w = r2.z*r2.y;\n"
    "    r2.z = select(r1.w, c0.x, -r2.x < 0.00000f);\n"
    "    r1.w = r0.w - r0.y;\n"
    "    r0.y = r0.z + r0.y;\n"
    "    r3.x = float(r0.x < r1.w);\n"
    "    r0.z = float(r0.y < r0.x);\n"
    "    r0.w = r0.w - r0.x;\n"
    "    r0.z = fmin(r0.z, r3.x);\n"
    "    r0.y = float(r0.y >= r0.x);\n"
    "    r1.w = float(r0.x >= r1.w);\n"
    "    r2.w = r2.z*r2.w;\n"
    "    r2.x = float(-r2.x >= c0.x);\n"
    "    r0.z = float(-r0.z >= c0.x);\n"
    "    r0.zw = r2.xy*r0.zw;\n"
    "    r0.y = fmin(r0.z, r0.y);\n"
    "    r0.y = select(r2.z, r2.w, -r0.y < 0.00000f);\n"
    "    r0.x = r0.y*r0.w;\n"
    "    r1.w = fmin(r0.z, r1.w);\n"
    "    r1.w = select(r0.y, r0.x, -r1.w < 0.00000f);\n"
    "    r1.w = pow(r1.w, hg_Params[0].z);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B286D740()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcOutlineGradientStroke");
}

void sub_1B286D750(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B286D8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B286D920()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B286D918);
}

_QWORD *HgcOutlineGradientStroke::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcOutlineGradientStroke [hgc1]");
}

uint64_t HgcOutlineGradientStroke::BindTexture(HgcOutlineGradientStroke *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 2, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcOutlineGradientStroke::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcOutlineGradientStroke::RenderTile(HgcOutlineGradientStroke *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  int v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  uint64_t v53;
  int32x4_t v54;
  float32x2_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x8_t v91;
  float32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  float32x4_t v141;
  int8x8_t v142;
  float32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  float32x4_t v193;
  int8x16_t v194;
  float32x4_t v195;
  int8x16_t *v196;
  unsigned int v197;
  uint64_t v198;
  int8x16_t v199;
  float32x4_t v200;
  int8x16_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  int8x16_t v210;
  int8x16_t v211;
  float32x4_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int32x4_t v217;
  float32x4_t v218;
  uint64_t v219;
  float32x4_t v220;
  uint64_t v221;
  int32x4_t v222;
  float32x2_t v223;
  float32x4_t *v224;
  float32x4_t v225;
  int8x16_t v226;
  float32x4_t v227;
  int32x4_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int32x4_t v231;
  int8x16_t v232;
  int8x16_t v233;
  float32x4_t v234;
  int8x16_t v235;
  int32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int32x4_t v239;
  int8x16_t v240;
  int8x16_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x4_t v245;
  int32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  int8x16_t v249;
  int8x16_t v250;
  float32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int32x4_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int32x4_t v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int8x16_t v280;
  float32x4_t v281;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcOutlineGradientStroke *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * *((int *)a2 + 22);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 < 2)
      {
        v197 = 0;
      }
      else
      {
        v16 = 0;
        v17 = 16;
        do
        {
          v18 = *(int8x16_t *)(v12 + v17 - 16);
          v19 = *((_QWORD *)this + 51);
          v20 = *(int8x16_t *)v19;
          v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v22 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)v19, 0xCuLL), v21);
          v23 = (float32x4_t)vextq_s8(v22, v18, 8uLL);
          v18.i64[1] = v22.i64[1];
          v24 = (float32x4_t)vextq_s8(v22, *(int8x16_t *)(v12 + v17), 8uLL);
          v25.i64[0] = *(_QWORD *)(v12 + v17);
          v25.i64[1] = v22.i64[1];
          v26 = *(int8x16_t *)(v19 + 32);
          v27 = *(int8x16_t *)(v19 + 48);
          v29 = *(float32x4_t *)(v19 + 64);
          v28 = *(int8x16_t *)(v19 + 80);
          v30 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v23), (float32x4_t)v26), (float32x4_t)v27), v29);
          v31 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v24), (float32x4_t)v26), (float32x4_t)v27), v29);
          v32 = vmulq_f32(vsubq_f32(v25, *(float32x4_t *)v19), vmulq_f32(v31, vrecpsq_f32(v24, v31)));
          v33 = vmaxq_f32(vmulq_f32(vsubq_f32((float32x4_t)v18, *(float32x4_t *)v19), vmulq_f32(v30, vrecpsq_f32(v23, v30))), (float32x4_t)v28);
          v34 = *(int8x16_t *)(v19 + 96);
          v35 = *(int8x16_t *)(v19 + 112);
          v36 = vminq_f32(v33, (float32x4_t)v34);
          v37 = vminq_f32(vmaxq_f32(v32, (float32x4_t)v28), (float32x4_t)v34);
          v38 = vmvnq_s8(v35);
          v39 = vbslq_s8(v35, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32((float32x4_t)v18, *(float32x4_t *)v19))), v18);
          v40 = vbslq_s8(v35, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v25, *(float32x4_t *)v19))), (int8x16_t)v25);
          v41 = *(int8x16_t *)(v19 + 128);
          v42 = vmvnq_s8(v41);
          v43 = vbslq_s8(v41, vandq_s8(v34, (int8x16_t)vcgeq_f32(v21, (float32x4_t)vextq_s8(v39, v39, 4uLL))), v39);
          v44 = vbslq_s8(v41, vandq_s8(v34, (int8x16_t)vcgeq_f32(v21, (float32x4_t)vextq_s8(v40, v40, 4uLL))), v40);
          v45 = vbslq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v43, v43, 8uLL), (float32x4_t)v43), v39);
          v46 = vbslq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v44, v44, 8uLL), (float32x4_t)v44), v40);
          v47 = (int32x4_t)vbslq_s8(v35, (int8x16_t)vmulq_laneq_f32(v21, (float32x4_t)v45, 2), v45);
          v48 = (int32x4_t)vbslq_s8(v35, (int8x16_t)vmulq_laneq_f32(v21, (float32x4_t)v46, 2), v46);
          v49 = vmulq_laneq_f32(v36, (float32x4_t)v47, 2);
          v49.i32[1] = 0.5;
          v50 = vmulq_laneq_f32(v37, (float32x4_t)v48, 2);
          v50.i32[1] = 0.5;
          v51 = *((int *)a2 + 26);
          v52 = vsubq_f32(v49, (float32x4_t)v9);
          v53 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v54 = vaddq_s32(vcvtq_s32_f32(v52), vcltzq_f32(v52));
            v55 = (float32x2_t)vsubq_f32(v52, vcvtq_f32_s32(v54)).u64[0];
            v56 = (float32x4_t *)(v53 + 16 * (v54.i32[0] + v54.i32[1] * (int)v51));
            v57 = vaddq_f32(*v56, vmulq_n_f32(vsubq_f32(v56[1], *v56), v55.f32[0]));
            v58 = (int8x16_t)vaddq_f32(v57, vmulq_lane_f32(vsubq_f32(vaddq_f32(v56[v51], vmulq_n_f32(vsubq_f32(v56[(int)v51 + 1], v56[v51]), v55.f32[0])), v57), v55, 1));
            v59 = vsubq_f32(v50, (float32x4_t)v9);
            v60 = vaddq_s32(vcvtq_s32_f32(v59), vcltzq_f32(v59));
            v59.i64[0] = vsubq_f32(v59, vcvtq_f32_s32(v60)).u64[0];
            v61 = (float32x4_t *)(v53 + 16 * (v60.i32[0] + v60.i32[1] * (int)v51));
            v62 = vaddq_f32(*v61, vmulq_n_f32(vsubq_f32(v61[1], *v61), v59.f32[0]));
            v63 = (int8x16_t)vaddq_f32(v62, vmulq_lane_f32(vsubq_f32(vaddq_f32(v61[v51], vmulq_n_f32(vsubq_f32(v61[(int)v51 + 1], v61[v51]), v59.f32[0])), v62), *(float32x2_t *)v59.f32, 1));
          }
          else
          {
            v64 = vaddq_f32(v52, v15);
            v65 = vcvtq_s32_f32(v64);
            v64.i64[0] = vaddq_s32(v65, vcgtq_f32(vcvtq_f32_s32(v65), v64)).u64[0];
            v58 = *(int8x16_t *)(v53 + 16 * (v64.i32[0] + v64.i32[1] * (int)v51));
            v66 = vaddq_f32(vsubq_f32(v50, (float32x4_t)v9), v15);
            v67 = vcvtq_s32_f32(v66);
            v66.i64[0] = vaddq_s32(v67, vcgtq_f32(vcvtq_f32_s32(v67), v66)).u64[0];
            v63 = *(int8x16_t *)(v53 + 16 * (v66.i32[0] + v66.i32[1] * (int)v51));
          }
          v68 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v47, 3), (float32x4_t)v28), v58, v28);
          v69 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v48, 3), (float32x4_t)v28), v63, v28);
          v47.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)&v47, 0xCuLL), *(float32x4_t *)&v47).i64[1];
          v48.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)&v48, 0xCuLL), *(float32x4_t *)&v48).i64[1];
          v70 = (int8x16_t)vaddq_f32((float32x4_t)v20, (float32x4_t)v47);
          v71 = (int8x16_t)vaddq_f32((float32x4_t)v20, (float32x4_t)v48);
          v72 = vandq_s8((int8x16_t)v47, v42);
          v73 = (float32x4_t)vorrq_s8(vandq_s8(v41, vextq_s8(v70, v70, 8uLL)), v72);
          v74 = vandq_s8((int8x16_t)v48, v42);
          v75 = (float32x4_t)vorrq_s8(vandq_s8(v41, vextq_s8(v71, v71, 8uLL)), v74);
          v76 = *(int8x16_t *)(v19 + 16);
          v77 = (float32x4_t)vextq_s8(v76, v76, 4uLL);
          v78 = (int32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32(v73, vmulq_laneq_f32(v77, v73, 2))), v72);
          v79 = (int32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32(v75, vmulq_laneq_f32(v77, v75, 2))), v74);
          v80 = (int8x16_t)vsubq_f32((float32x4_t)v20, (float32x4_t)vrev64q_s32(v78));
          v81 = (int8x16_t)vsubq_f32((float32x4_t)v20, (float32x4_t)vrev64q_s32(v79));
          v82 = (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v78, *(float32x2_t *)v76.i8, 1), (float32x4_t)vextq_s8(v80, v80, 8uLL));
          v83 = (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v79, *(float32x2_t *)v76.i8, 1), (float32x4_t)vextq_s8(v81, v81, 8uLL));
          v85 = *(int8x16_t *)(v19 + 144);
          v84 = *(int32x4_t *)(v19 + 160);
          v86 = vbslq_s8(v85, v82, (int8x16_t)v78);
          *(int8x8_t *)v77.f32 = vqtbl1_s8(v86, *(int8x8_t *)v84.i8);
          v78.i64[0] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
          *(int8x8_t *)&v77.u32[2] = vqtbl1_s8(v86, *(int8x8_t *)v78.i8);
          v87 = vbslq_s8(v85, v83, (int8x16_t)v79);
          *(int8x8_t *)v79.i8 = vqtbl1_s8(v87, *(int8x8_t *)v84.i8);
          v79.u64[1] = (unint64_t)vqtbl1_s8(v87, *(int8x8_t *)v78.i8);
          v88 = *(int8x16_t *)(v19 + 176);
          v89 = *(int8x16_t *)(v19 + 192);
          *(int8x8_t *)v90.f32 = vqtbl1_s8(v86, *(int8x8_t *)v88.i8);
          v91 = (int8x8_t)vextq_s8(v88, v88, 8uLL).u64[0];
          *(int8x8_t *)&v90.u32[2] = vqtbl1_s8(v86, v91);
          *(int8x8_t *)v92.f32 = vqtbl1_s8(v87, *(int8x8_t *)v88.i8);
          *(int8x8_t *)&v92.u32[2] = vqtbl1_s8(v87, v91);
          v93 = (int32x4_t)vandq_s8(v34, (int8x16_t)vcgeq_f32(v90, v77));
          v94 = (int32x4_t)vandq_s8(v34, (int8x16_t)vcgeq_f32(v92, (float32x4_t)v79));
          v93.i64[0] = vmaxq_f32((float32x4_t)v93, (float32x4_t)vrev64q_s32(v93)).u64[0];
          v94.i64[0] = vmaxq_f32((float32x4_t)v94, (float32x4_t)vrev64q_s32(v94)).u64[0];
          v95 = (float32x4_t)vextq_s8(v86, v86, 8uLL);
          v96 = (float32x4_t)vextq_s8(v87, v87, 8uLL);
          v93.i64[1] = vsubq_f32(v95, *(float32x4_t *)&v86).i64[1];
          v94.i64[1] = vsubq_f32(v96, *(float32x4_t *)&v87).i64[1];
          v97 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v27, vrecpeq_f32((float32x4_t)v86)), (float32x4_t)v26), v29);
          v98 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v27, vrecpeq_f32((float32x4_t)v87)), (float32x4_t)v26), v29);
          v99 = vorrq_s8(vandq_s8(v35, (int8x16_t)vmulq_f32(v97, vrecpsq_f32((float32x4_t)v86, v97))), vandq_s8((int8x16_t)v93, v38));
          v100 = vorrq_s8(vandq_s8(v35, (int8x16_t)vmulq_f32(v98, vrecpsq_f32((float32x4_t)v87, v98))), vandq_s8((int8x16_t)v94, v38));
          v101 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v99.i64[0], 0), (float32x4_t)v99, 2);
          v102 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v100.i64[0], 0), (float32x4_t)v100, 2);
          v103 = (float32x4_t)vextq_s8(v101, v99, 8uLL);
          v99.i64[1] = v101.i64[1];
          v104 = (float32x4_t)vextq_s8(v102, v100, 8uLL);
          v100.i64[1] = v102.i64[1];
          v105 = vbslq_s8(v85, vbslq_s8((int8x16_t)vcgtq_f32(v103, (float32x4_t)v34), v34, (int8x16_t)vrev64q_s32(v68)), v99);
          v106 = vbslq_s8(v85, vbslq_s8((int8x16_t)vcgtq_f32(v104, (float32x4_t)v34), v34, (int8x16_t)vrev64q_s32(v69)), v100);
          v107 = (int8x16_t)vsubq_f32((float32x4_t)v86, v95);
          v108 = (int8x16_t)vsubq_f32((float32x4_t)v87, v96);
          v109 = vandq_s8((int8x16_t)v68, v42);
          v110 = vorrq_s8(vandq_s8(v41, v107), v109);
          v111 = vandq_s8((int8x16_t)v69, v42);
          v112 = vorrq_s8(vandq_s8(v41, v108), v111);
          v113 = vorrq_s8(vandq_s8(v35, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v86, v86, 4uLL), (float32x4_t)v86)), vandq_s8(v86, v38));
          v114 = vorrq_s8(vandq_s8(v35, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v87, v87, 4uLL), (float32x4_t)v87)), vandq_s8(v87, v38));
          v115 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v110, v110, 0xCuLL), (float32x4_t)v113);
          v116 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v112, v112, 0xCuLL), (float32x4_t)v114);
          v117 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v113, v113, 8uLL), (float32x4_t)vextq_s8(v113, v113, 0xCuLL))), v113);
          v118 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v114, v114, 8uLL), (float32x4_t)vextq_s8(v114, v114, 0xCuLL))), v114);
          v119 = vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32((float32x4_t)v117, (float32x4_t)vextq_s8(v117, v117, 4uLL))), vandq_s8(v117, v42));
          v120 = vorrq_s8(vandq_s8(v41, (int8x16_t)vsubq_f32((float32x4_t)v118, (float32x4_t)vextq_s8(v118, v118, 4uLL))), vandq_s8(v118, v42));
          v121 = vandq_s8(v34, v115);
          v122 = vandq_s8(v34, v116);
          v123 = (int32x4_t)vbslq_s8(v85, (int8x16_t)vminq_f32((float32x4_t)v119, (float32x4_t)vextq_s8(v121, v121, 8uLL)), v119);
          v124 = (int32x4_t)vbslq_s8(v85, (int8x16_t)vminq_f32((float32x4_t)v120, (float32x4_t)vextq_s8(v122, v122, 8uLL)), v120);
          v125 = vandq_s8(v34, v35);
          v126 = vorrq_s8(vandq_s8(v125, (int8x16_t)vcgeq_f32((float32x4_t)v123, (float32x4_t)vrev64q_s32(v123))), vandq_s8((int8x16_t)v123, v38));
          v127 = vorrq_s8(vandq_s8(v125, (int8x16_t)vcgeq_f32((float32x4_t)v124, (float32x4_t)vrev64q_s32(v124))), vandq_s8((int8x16_t)v124, v38));
          v128 = vandq_s8(v34, v41);
          v129 = (float32x4_t)vorrq_s8(vandq_s8(v128, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v126, v126, 4uLL), (float32x4_t)v110)), v109);
          v130 = (float32x4_t)vorrq_s8(vandq_s8(v128, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v127, v127, 4uLL), (float32x4_t)v112)), v111);
          v131 = vorrq_s8(vandq_s8(v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)v105, (float32x4_t)v105, 2)), vandq_s8(v105, v42));
          v132 = vorrq_s8(vandq_s8(v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)v106, (float32x4_t)v106, 2)), vandq_s8(v106, v42));
          v133 = vbslq_s8(v89, vandq_s8(v34, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v131), (float32x4_t)v28)), v131);
          v134 = vbslq_s8(v89, vandq_s8(v34, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v132), (float32x4_t)v28)), v132);
          v135 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v126), (float32x4_t)v34)), v126);
          v136 = vbslq_s8(v85, vandq_s8(v27, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v127), (float32x4_t)v34)), v127);
          v137 = vextq_s8(v133, v133, 8uLL);
          v138 = vextq_s8(v134, v134, 8uLL);
          v139 = (int8x16_t)vmulq_f32((float32x4_t)v137, (float32x4_t)v135);
          v140 = (int8x16_t)vmulq_f32((float32x4_t)v138, (float32x4_t)v136);
          v122.i64[0] = vextq_s8(v139, v139, 8uLL).u64[0];
          v103.i64[0] = vextq_s8(v139, v135, 0xCuLL).u64[0];
          *(int8x8_t *)v141.f32 = vext_s8(*(int8x8_t *)v135.i8, *(int8x8_t *)v122.i8, 4uLL);
          v135.i64[1] = v139.i64[1];
          v142 = (int8x8_t)vextq_s8(v140, v140, 8uLL).u64[0];
          v141.i64[1] = v103.i64[0];
          v103.i64[0] = vextq_s8(v140, v136, 0xCuLL).u64[0];
          *(int8x8_t *)v143.f32 = vext_s8(*(int8x8_t *)v136.i8, v142, 4uLL);
          v136.i64[1] = v140.i64[1];
          v143.i64[1] = v103.i64[0];
          v135.i64[0] = vminq_f32(v141, (float32x4_t)v135).u64[0];
          v136.i64[0] = vminq_f32(v143, (float32x4_t)v136).u64[0];
          v135.i64[1] = v139.i64[1];
          v136.i64[1] = v140.i64[1];
          v144 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v135, (float32x4_t)v28), v137, vextq_s8(v133, v9, 4uLL));
          v145 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v136, (float32x4_t)v28), v138, vextq_s8(v134, v9, 4uLL));
          v133.i64[0] = vextq_s8(v139, v144, 0xCuLL).u64[0];
          v133.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v144.i8, *(int8x8_t *)v122.i8, 4uLL);
          v144.i64[1] = v139.i64[1];
          v134.i64[0] = vextq_s8(v140, v145, 0xCuLL).u64[0];
          v134.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v145.i8, v142, 4uLL);
          v145.i64[1] = v140.i64[1];
          v146 = (int32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_lane_f32((float32x4_t)v133, *(float32x2_t *)v144.i8, 1), v144);
          v147 = (int32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_lane_f32((float32x4_t)v134, *(float32x2_t *)v145.i8, 1), v145);
          v148 = (int8x16_t)vcgtq_f32((float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v146), v129)), v109), (float32x4_t)v28);
          v149 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v147), v130)), v111), (float32x4_t)v28), vextq_s8((int8x16_t)v147, (int8x16_t)v147, 4uLL), vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL));
          v150 = vorrq_s8(vandq_s8(vbslq_s8(v148, vextq_s8((int8x16_t)v146, (int8x16_t)v146, 4uLL), vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL)), v41), v109);
          v151 = vorrq_s8(vandq_s8(v149, v41), v111);
          v152 = (float32x4_t)vorrq_s8(vandq_s8(v150, v88), v34);
          v153 = (float32x4_t)vorrq_s8(vandq_s8(v151, v88), v34);
          v154 = (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v150));
          v155 = (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v151));
          v156 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v150, 0x17uLL)), v154);
          v157 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v151, 0x17uLL)), v155);
          v158 = *(float32x4_t *)(v19 + 208);
          v159 = *(float32x4_t *)(v19 + 224);
          v160 = vsubq_f32(v156, v158);
          v161 = vsubq_f32(v157, v158);
          v162 = (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v152, v159));
          v163 = (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v153, v159));
          v164 = vaddq_f32(v160, v162);
          v165 = vaddq_f32(v161, v163);
          v166 = *(float32x4_t *)(v19 + 240);
          v167 = *(float32x4_t *)(v19 + 256);
          v168 = vsubq_f32(vsubq_f32(v152, (float32x4_t)v34), vmulq_f32(vmulq_f32(v166, v162), v152));
          v169 = vsubq_f32(vsubq_f32(v153, (float32x4_t)v34), vmulq_f32(vmulq_f32(v166, v163), v153));
          v170 = *(float32x4_t *)(v19 + 272);
          v171 = *(float32x4_t *)(v19 + 288);
          v172 = vaddq_f32(v167, vmulq_f32(v170, v168));
          v173 = vaddq_f32(v167, vmulq_f32(v170, v169));
          v174 = *(float32x4_t *)(v19 + 304);
          v175 = *(float32x4_t *)(v19 + 320);
          v176 = vmulq_laneq_f32(vaddq_f32(v164, vmulq_f32(v168, vaddq_f32(vaddq_f32(v171, vmulq_f32(v174, v168)), vmulq_f32(vmulq_f32(v168, v168), v172)))), (float32x4_t)v20, 2);
          v177 = vmulq_laneq_f32(vaddq_f32(v165, vmulq_f32(v169, vaddq_f32(vaddq_f32(v171, vmulq_f32(v174, v169)), vmulq_f32(vmulq_f32(v169, v169), v173)))), (float32x4_t)v20, 2);
          v178 = vmaxq_f32(v176, v175);
          v179 = vmaxq_f32(v177, v175);
          v180 = vcvtq_f32_s32(vcvtq_s32_f32(v178));
          v181 = vcvtq_f32_s32(vcvtq_s32_f32(v179));
          v182 = vsubq_f32(v180, (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v180, v178)));
          v183 = vsubq_f32(v181, (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v181, v179)));
          v184 = vsubq_f32(v178, v182);
          v185 = vsubq_f32(v179, v183);
          v186 = *(float32x4_t *)(v19 + 336);
          v187 = *(float32x4_t *)(v19 + 352);
          v188 = vaddq_f32(v186, vmulq_f32(v187, v184));
          v189 = vaddq_f32(v186, vmulq_f32(v187, v185));
          v190 = *(float32x4_t *)(v19 + 368);
          v191 = vaddq_f32((float32x4_t)v34, vmulq_f32(v185, vaddq_f32(v190, vmulq_f32(v185, v189))));
          v192 = vandq_s8(v41, (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)v34, vmulq_f32(v184, vaddq_f32(v190, vmulq_f32(v184, v188)))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v182), v84), 0x17uLL)));
          v193 = (float32x4_t)vorrq_s8(v192, v109);
          v194 = vandq_s8(v41, (int8x16_t)vmulq_f32(v191, (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v183), v84), 0x17uLL)));
          v195 = (float32x4_t)vorrq_s8(v194, v111);
          v196 = (int8x16_t *)(v11 + v17);
          v196[-1] = vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32(v193, v193, 3), v42), v192);
          *v196 = vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32(v195, v195, 3), v42), v194);
          v16 -= 2;
          v17 += 32;
        }
        while (v10 + v16 > 1);
        v197 = -v16;
      }
      if ((int)v197 < v10)
      {
        v198 = *((_QWORD *)this + 51);
        v199 = *(int8x16_t *)v198;
        v200 = (float32x4_t)vextq_s8(v199, v199, 8uLL);
        v201 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)v198, 0xCuLL), v200);
        v202 = (float32x4_t)vextq_s8(v201, *(int8x16_t *)(v12 + 16 * v197), 8uLL);
        v203.i64[0] = *(_QWORD *)(v12 + 16 * v197);
        v203.i64[1] = v201.i64[1];
        v204 = *(int8x16_t *)(v198 + 32);
        v205 = *(int8x16_t *)(v198 + 48);
        v207 = *(float32x4_t *)(v198 + 64);
        v206 = *(int8x16_t *)(v198 + 80);
        v208 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v202), (float32x4_t)v204), (float32x4_t)v205), v207);
        v209 = vmaxq_f32(vmulq_f32(vsubq_f32(v203, *(float32x4_t *)v198), vmulq_f32(v208, vrecpsq_f32(v202, v208))), (float32x4_t)v206);
        v210 = *(int8x16_t *)(v198 + 96);
        v211 = *(int8x16_t *)(v198 + 112);
        v212 = vminq_f32(v209, (float32x4_t)v210);
        v213 = vbslq_s8(v211, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v210, (int8x16_t)vcgtq_f32(v203, *(float32x4_t *)v198))), (int8x16_t)v203);
        v214 = *(int8x16_t *)(v198 + 128);
        v215 = vbslq_s8(v214, vandq_s8(v210, (int8x16_t)vcgeq_f32(v200, (float32x4_t)vextq_s8(v213, v213, 4uLL))), v213);
        v216 = vbslq_s8(v214, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v215, v215, 8uLL), (float32x4_t)v215), v213);
        v217 = (int32x4_t)vbslq_s8(v211, (int8x16_t)vmulq_laneq_f32(v200, (float32x4_t)v216, 2), v216);
        v218 = vmulq_laneq_f32(v212, (float32x4_t)v217, 2);
        v218.i32[1] = 0.5;
        v219 = *((int *)a2 + 26);
        v220 = vsubq_f32(v218, (float32x4_t)v9);
        v221 = *((_QWORD *)a2 + 12);
        if (v5)
        {
          v222 = vaddq_s32(vcvtq_s32_f32(v220), vcltzq_f32(v220));
          v223 = (float32x2_t)vsubq_f32(v220, vcvtq_f32_s32(v222)).u64[0];
          v224 = (float32x4_t *)(v221 + 16 * (v222.i32[0] + v222.i32[1] * (int)v219));
          v225 = vaddq_f32(*v224, vmulq_n_f32(vsubq_f32(v224[1], *v224), v223.f32[0]));
          v226 = (int8x16_t)vaddq_f32(v225, vmulq_lane_f32(vsubq_f32(vaddq_f32(v224[v219], vmulq_n_f32(vsubq_f32(v224[(int)v219 + 1], v224[v219]), v223.f32[0])), v225), v223, 1));
        }
        else
        {
          v227 = vaddq_f32(v220, v15);
          v228 = vcvtq_s32_f32(v227);
          v227.i64[0] = vaddq_s32(v228, vcgtq_f32(vcvtq_f32_s32(v228), v227)).u64[0];
          v226 = *(int8x16_t *)(v221 + 16 * (v227.i32[0] + v227.i32[1] * (int)v219));
        }
        v229 = vmvnq_s8(v211);
        v230 = vmvnq_s8(v214);
        v231 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v217, 3), (float32x4_t)v206), v226, v206);
        v217.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)&v217, 0xCuLL), *(float32x4_t *)&v217).i64[1];
        v232 = (int8x16_t)vaddq_f32((float32x4_t)v199, (float32x4_t)v217);
        v233 = vandq_s8((int8x16_t)v217, v230);
        v234 = (float32x4_t)vorrq_s8(vandq_s8(v214, vextq_s8(v232, v232, 8uLL)), v233);
        v235 = *(int8x16_t *)(v198 + 16);
        v236 = (int32x4_t)vorrq_s8(vandq_s8(v214, (int8x16_t)vsubq_f32(v234, vmulq_laneq_f32((float32x4_t)vextq_s8(v235, v235, 4uLL), v234, 2))), v233);
        v237 = (int8x16_t)vsubq_f32((float32x4_t)v199, (float32x4_t)vrev64q_s32(v236));
        v238 = (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v236, *(float32x2_t *)v235.i8, 1), (float32x4_t)vextq_s8(v237, v237, 8uLL));
        v240 = *(int8x16_t *)(v198 + 144);
        v239 = *(int32x4_t *)(v198 + 160);
        v241 = vbslq_s8(v240, v238, (int8x16_t)v236);
        *(int8x8_t *)v242.f32 = vqtbl1_s8(v241, *(int8x8_t *)v239.i8);
        *(int8x8_t *)&v242.u32[2] = vqtbl1_s8(v241, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL));
        v243 = *(int8x16_t *)(v198 + 176);
        v244 = *(int8x16_t *)(v198 + 192);
        *(int8x8_t *)v245.f32 = vqtbl1_s8(v241, *(int8x8_t *)v243.i8);
        *(int8x8_t *)&v245.u32[2] = vqtbl1_s8(v241, (int8x8_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL));
        v246 = (int32x4_t)vandq_s8(v210, (int8x16_t)vcgeq_f32(v245, v242));
        v246.i64[0] = vmaxq_f32((float32x4_t)v246, (float32x4_t)vrev64q_s32(v246)).u64[0];
        v247 = (float32x4_t)vextq_s8(v241, v241, 8uLL);
        v246.i64[1] = vsubq_f32(v247, *(float32x4_t *)&v241).i64[1];
        v248 = vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v205, vrecpeq_f32((float32x4_t)v241)), (float32x4_t)v204), v207);
        v249 = vorrq_s8(vandq_s8((int8x16_t)v246, v229), vandq_s8(v211, (int8x16_t)vmulq_f32(v248, vrecpsq_f32((float32x4_t)v241, v248))));
        v250 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v249.i64[0], 0), (float32x4_t)v249, 2);
        v251 = (float32x4_t)vextq_s8(v250, v249, 8uLL);
        v249.i64[1] = v250.i64[1];
        v252 = vbslq_s8(v240, vbslq_s8((int8x16_t)vcgtq_f32(v251, (float32x4_t)v210), v210, (int8x16_t)vrev64q_s32(v231)), v249);
        v253 = vandq_s8((int8x16_t)v231, v230);
        v254 = vorrq_s8(vandq_s8(v214, (int8x16_t)vsubq_f32((float32x4_t)v241, v247)), v253);
        v255 = vorrq_s8(vandq_s8(v211, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v241, v241, 4uLL), (float32x4_t)v241)), vandq_s8(v241, v229));
        v256 = (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v254, v254, 0xCuLL), (float32x4_t)v255);
        v257 = vbslq_s8(v240, vandq_s8(v205, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v255, v255, 8uLL), (float32x4_t)vextq_s8(v255, v255, 0xCuLL))), v255);
        v258 = vorrq_s8(vandq_s8(v214, (int8x16_t)vsubq_f32((float32x4_t)v257, (float32x4_t)vextq_s8(v257, v257, 4uLL))), vandq_s8(v257, v230));
        v259 = vandq_s8(v210, v256);
        v260 = (int32x4_t)vbslq_s8(v240, (int8x16_t)vminq_f32((float32x4_t)v258, (float32x4_t)vextq_s8(v259, v259, 8uLL)), v258);
        v261 = vorrq_s8(vandq_s8(vandq_s8(v210, v211), (int8x16_t)vcgeq_f32((float32x4_t)v260, (float32x4_t)vrev64q_s32(v260))), vandq_s8((int8x16_t)v260, v229));
        v262 = (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v261, v261, 4uLL), (float32x4_t)v254);
        v263 = vorrq_s8(vandq_s8(v214, (int8x16_t)vmulq_laneq_f32((float32x4_t)v252, (float32x4_t)v252, 2)), vandq_s8(v252, v230));
        v264 = vbslq_s8(v244, vandq_s8(v210, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v263), (float32x4_t)v206)), v263);
        v265 = vbslq_s8(v240, vandq_s8(v205, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v261), (float32x4_t)v210)), v261);
        v266 = vextq_s8(v264, v264, 8uLL);
        v267 = (int8x16_t)vmulq_f32((float32x4_t)v266, (float32x4_t)v265);
        v252.i64[0] = vextq_s8(v267, v267, 8uLL).u64[0];
        *(int8x8_t *)v256.i8 = vext_s8(*(int8x8_t *)v265.i8, *(int8x8_t *)v252.i8, 4uLL);
        v256.i64[1] = vextq_s8(v267, v265, 0xCuLL).u64[0];
        v265.i64[1] = v267.i64[1];
        v265.i64[0] = vminq_f32((float32x4_t)v256, (float32x4_t)v265).u64[0];
        v265.i64[1] = v267.i64[1];
        v268 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v265, (float32x4_t)v206), v266, vextq_s8(v264, v9, 4uLL));
        v266.i64[0] = vextq_s8(v267, v268, 0xCuLL).u64[0];
        v266.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v268.i8, *(int8x8_t *)v252.i8, 4uLL);
        v268.i64[1] = v267.i64[1];
        v269 = (int32x4_t)vbslq_s8(v244, (int8x16_t)vmulq_lane_f32((float32x4_t)v266, *(float32x2_t *)v268.i8, 1), v268);
        v270 = vorrq_s8(vandq_s8(vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vorrq_s8(vandq_s8(v214, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v269), (float32x4_t)vorrq_s8(vandq_s8(vandq_s8(v210, v214), v262), v253))), v253), (float32x4_t)v206), vextq_s8((int8x16_t)v269, (int8x16_t)v269, 4uLL), vextq_s8((int8x16_t)v269, (int8x16_t)v269, 8uLL)), v214), v253);
        v271 = (float32x4_t)vorrq_s8(vandq_s8(v270, v243), v210);
        v272 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v270, 0x17uLL)), (float32x4_t)vandq_s8(v204, (int8x16_t)vcgtq_f32((float32x4_t)v205, (float32x4_t)v270))), *(float32x4_t *)(v198 + 208));
        v273 = (float32x4_t)vandq_s8(v210, (int8x16_t)vcgtq_f32(v271, *(float32x4_t *)(v198 + 224)));
        v274 = vaddq_f32(v272, v273);
        v275 = vsubq_f32(vsubq_f32(v271, (float32x4_t)v210), vmulq_f32(vmulq_f32(*(float32x4_t *)(v198 + 240), v273), v271));
        v276 = vmaxq_f32(vmulq_laneq_f32(vaddq_f32(v274, vmulq_f32(v275, vaddq_f32(vaddq_f32(*(float32x4_t *)(v198 + 288), vmulq_f32(*(float32x4_t *)(v198 + 304), v275)), vmulq_f32(vmulq_f32(v275, v275), vaddq_f32(*(float32x4_t *)(v198 + 256), vmulq_f32(*(float32x4_t *)(v198 + 272), v275)))))), (float32x4_t)v199, 2), *(float32x4_t *)(v198 + 320));
        v277 = vcvtq_f32_s32(vcvtq_s32_f32(v276));
        v278 = vsubq_f32(v277, (float32x4_t)vandq_s8(v210, (int8x16_t)vcgtq_f32(v277, v276)));
        v279 = vsubq_f32(v276, v278);
        v280 = vandq_s8(v214, (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)v210, vmulq_f32(v279, vaddq_f32(*(float32x4_t *)(v198 + 368), vmulq_f32(v279, vaddq_f32(*(float32x4_t *)(v198 + 336), vmulq_f32(*(float32x4_t *)(v198 + 352), v279)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v278), v239), 0x17uLL)));
        v281 = (float32x4_t)vorrq_s8(v280, v253);
        *(int8x16_t *)(v11 + 16 * v197) = vorrq_s8(vandq_s8((int8x16_t)vmulq_laneq_f32(v281, v281, 3), v230), v280);
      }
      v12 += v14;
      v11 += v13;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcOutlineGradientStroke::GetDOD(HgcOutlineGradientStroke *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcOutlineGradientStroke *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcOutlineGradientStroke::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcOutlineGradientStroke::HgcOutlineGradientStroke(HgcOutlineGradientStroke *this)
{
  _QWORD *v2;
  HgcOutlineGradientStroke::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E58F8;
  v3 = (HgcOutlineGradientStroke::State *)operator new();
  v4 = HgcOutlineGradientStroke::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(HgcOutlineGradientStroke *, uint64_t, uint64_t, double))(*(_QWORD *)this + 136))(this, 1, 1, v4);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B286E984(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcOutlineGradientStroke::~HgcOutlineGradientStroke(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E58F8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F47AF14);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcOutlineGradientStroke::~HgcOutlineGradientStroke(this);
  HGObject::operator delete(v1);
}

uint64_t HgcOutlineGradientStroke::SetParameter(HgcOutlineGradientStroke *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcOutlineGradientStroke::GetParameter(HgcOutlineGradientStroke *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgcOutlineGradientStroke::State::State(HgcOutlineGradientStroke::State *this)
{
  double result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_1B3051400;
  *((_OWORD *)this + 3) = xmmword_1B3051410;
  *((int32x4_t *)this + 4) = vdupq_n_s32(0x7F7FFFFFu);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_OWORD *)this + 6) = xmmword_1B3051310;
  *((_OWORD *)this + 7) = xmmword_1B3050FF0;
  *((_OWORD *)this + 8) = xmmword_1B3050F70;
  *((_OWORD *)this + 9) = xmmword_1B3050FE0;
  *((_OWORD *)this + 10) = xmmword_1B3051320;
  *((_OWORD *)this + 11) = xmmword_1B3051330;
  *((_OWORD *)this + 12) = xmmword_1B3050E20;
  *((_OWORD *)this + 13) = xmmword_1B3050E60;
  *((_OWORD *)this + 14) = xmmword_1B3050E70;
  *((_OWORD *)this + 15) = xmmword_1B3050E80;
  *((_OWORD *)this + 16) = xmmword_1B3051360;
  *((_OWORD *)this + 17) = xmmword_1B3051370;
  *((_OWORD *)this + 18) = xmmword_1B3051380;
  *((_OWORD *)this + 19) = xmmword_1B3051390;
  *((_OWORD *)this + 20) = xmmword_1B3050F00;
  *((_OWORD *)this + 21) = xmmword_1B30513A0;
  result = 0.0;
  *((_OWORD *)this + 22) = xmmword_1B30513B0;
  *((_OWORD *)this + 23) = xmmword_1B30513C0;
  return result;
}

const char *HgcReconstructDT::GetProgram(HgcReconstructDT *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002e9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.x = r0.x*half(hg_Params[0].x);\n"
             "    output.color0.xyz = float3(r0.xxx);\n"
             "    output.color0.w = float(-float(fabs(r0.x)) < float(c0.w));\n"
             "    return output;\n"
             "}\n"
             "//MD5=278b20d3:6e9f84aa:893390ef:ca59203b\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002ca\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.x = r0.x*hg_Params[0].x;\n"
             "    output.color0.xyz = r0.xxx;\n"
             "    output.color0.w = float(-fabs(r0.x) < c0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9bf17ba0:58c9dc9b:59940475:6450d3b5\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000029b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x;\n"
           "    gl_FragColor.xyz = r0.xxx;\n"
           "    gl_FragColor.w = float(-abs(r0.x) < c0.w);\n"
           "}\n"
           "//MD5=82f7c31d:b098a326:2e8e493b:e1c33954\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcReconstructDT::InitProgramDescriptor(HgcReconstructDT *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcReconstructDT_hgc_visible", "//Metal1.0     \n//LEN=00000001a4\n[[ visible ]] FragmentOut HgcReconstructDT_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r0.x = r0.x*hg_Params[0].x;\n"
    "    output.color0.xyz = r0.xxx;\n"
    "    output.color0.w = float(-fabs(r0.x) < c0.w);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B286EC70()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcReconstructDT");
}

void sub_1B286EC80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B286ED80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B286EDC0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B286EDB8);
}

_QWORD *HgcReconstructDT::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcReconstructDT [hgc1]");
}

uint64_t HgcReconstructDT::BindTexture(HgcReconstructDT *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcReconstructDT::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcReconstructDT::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v31) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(_QWORD *)(a1 + 408);
          v12 = *(float32x4_t *)(v11 + 16);
          v13 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          v14 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          v16 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          v17 = *(int8x16_t *)(v11 + 32);
          v18 = *(int8x16_t *)(v11 + 48);
          v19 = (float32x4_t)vorrq_s8(v17, v13);
          v20 = (int8x16_t)vcgtq_f32(v12, (float32x4_t)vorrq_s8(v17, v14));
          v21 = (int8x16_t)vcgtq_f32(v12, (float32x4_t)vorrq_s8(v17, v15));
          v22 = (int8x16_t)vcgtq_f32(v12, (float32x4_t)vorrq_s8(v17, v16));
          v23 = vandq_s8(v18, (int8x16_t)vcgtq_f32(v12, v19));
          v24 = vandq_s8(v18, v20);
          v25 = vandq_s8(v18, v21);
          v26 = vandq_s8(v18, v22);
          v27 = vextq_s8(v24, v24, 4uLL);
          v28 = vextq_s8(v25, v25, 4uLL);
          v29 = *(int8x16_t *)(v11 + 64);
          v30 = (int8x16_t *)(v5 + v10);
          v30[-2] = vbslq_s8(v29, vextq_s8(v23, v23, 4uLL), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 0));
          v30[-1] = vbslq_s8(v29, v27, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 0));
          *v30 = vbslq_s8(v29, v28, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 0));
          v30[1] = vbslq_s8(v29, vextq_s8(v26, v26, 4uLL), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 0));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v31) = -v9;
      }
      if ((int)v31 < v4)
      {
        v31 = v31;
        do
        {
          v32 = *(_QWORD *)(a1 + 408);
          v33 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v31), *(float32x4_t *)v32);
          v34 = vandq_s8(*(int8x16_t *)(v32 + 48), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v32 + 16), (float32x4_t)vorrq_s8(*(int8x16_t *)(v32 + 32), v33)));
          *(int8x16_t *)(v5 + 16 * v31++) = vbslq_s8(*(int8x16_t *)(v32 + 64), vextq_s8(v34, v34, 4uLL), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 0));
        }
        while (v31 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcReconstructDT::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcReconstructDT::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcReconstructDT::HgcReconstructDT(HgcReconstructDT *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E5B60;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3051080;
  *(_OWORD *)(v3 + 48) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B286F108(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcReconstructDT::~HgcReconstructDT(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E5B60;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcReconstructDT::~HgcReconstructDT(this);
  HGObject::operator delete(v1);
}

uint64_t HgcReconstructDT::SetParameter(HgcReconstructDT *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (__n128 *)*((_QWORD *)this + 51);
  if (v8->n128_f32[0] == a4 && v8->n128_f32[1] == 0.0 && v8->n128_f32[2] == 0.0 && v8->n128_f32[3] == 0.0)
    return 0;
  v8->n128_f32[0] = a4;
  v8->n128_u64[1] = 0;
  v8->n128_u32[1] = 0;
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v8[5] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcReconstructDT::GetParameter(HgcReconstructDT *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[20];
    a3[1] = v3[21];
    a3[2] = v3[22];
    result = v3[23];
    a3[3] = result;
  }
  return result;
}

const char *HgcMaskAlpha::GetProgram(HgcMaskAlpha *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.y = half(r0.w < half(hg_Params[0].y));\n"
             "    r0.z = r0.y;\n"
             "    r0.w = half(r0.w >= half(hg_Params[0].y));\n"
             "    r1.x = r0.w;\n"
             "    r0.x = half(hg_Params[0].x) - c0.x;\n"
             "    r0.x = abs(r0.x);\n"
             "    r0.xz = half2(-r0.xz >= c0.yy);\n"
             "    r0.xy = fmin(r0.xx, r0.zy);\n"
             "    r0.y = half(-r0.y < c0.y);\n"
             "    r0.z = half(-half(fabs(hg_Params[0].x)) >= c0.y);\n"
             "    r0.w = fmin(r0.z, r0.w);\n"
             "    r0.xy = select(r0.yy, c0.yx, -r0.xx < 0.00000h);\n"
             "    r1.x = half(-r1.x >= c0.y);\n"
             "    r0.xy = select(r0.xy, c0.xx, -r0.ww < 0.00000h);\n"
             "    r0.z = fmin(r0.z, r1.x);\n"
             "    output.color0 = select(float4(r0.xxxy), float4(c0.yyyx), -float4(r0.zzzz) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f7c1f6b7:91423e38:7c42cf0b:124028ba\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004a8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.y = float(r0.w < hg_Params[0].y);\n"
             "    r0.z = r0.y;\n"
             "    r0.w = float(r0.w >= hg_Params[0].y);\n"
             "    r1.x = r0.w;\n"
             "    r0.x = hg_Params[0].x - c0.x;\n"
             "    r0.x = abs(r0.x);\n"
             "    r0.xz = float2(-r0.xz >= c0.yy);\n"
             "    r0.xy = fmin(r0.xx, r0.zy);\n"
             "    r0.y = float(-r0.y < c0.y);\n"
             "    r0.z = float(-fabs(hg_Params[0].x) >= c0.y);\n"
             "    r0.w = fmin(r0.z, r0.w);\n"
             "    r0.xy = select(r0.yy, c0.yx, -r0.xx < 0.00000f);\n"
             "    r1.x = float(-r1.x >= c0.y);\n"
             "    r0.xy = select(r0.xy, c0.xx, -r0.ww < 0.00000f);\n"
             "    r0.z = fmin(r0.z, r1.x);\n"
             "    output.color0 = select(r0.xxxy, c0.yyyx, -r0.zzzz < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e3c547bd:c3842600:67a3067c:f3d81428\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000051a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.y = float(r0.w < hg_ProgramLocal0.y);\n"
           "    r0.z = r0.y;\n"
           "    r0.w = float(r0.w >= hg_ProgramLocal0.y);\n"
           "    r1.x = r0.w;\n"
           "    r0.x = hg_ProgramLocal0.x - c0.x;\n"
           "    r0.x = abs(r0.x);\n"
           "    r0.xz = vec2(greaterThanEqual(-r0.xz, c0.yy));\n"
           "    r0.xy = min(r0.xx, r0.zy);\n"
           "    r0.y = float(-r0.y < c0.y);\n"
           "    r0.z = float(-abs(hg_ProgramLocal0.x) >= c0.y);\n"
           "    r0.w = min(r0.z, r0.w);\n"
           "    r0.xy = vec2(-r0.x < 0.00000 ? c0.y : r0.y, -r0.x < 0.00000 ? c0.x : r0.y);\n"
           "    r1.x = float(-r1.x >= c0.y);\n"
           "    r0.xy = vec2(-r0.w < 0.00000 ? c0.x : r0.x, -r0.w < 0.00000 ? c0.x : r0.y);\n"
           "    r0.z = min(r0.z, r1.x);\n"
           "    gl_FragColor = vec4(-r0.z < 0.00000 ? c0.y : r0.x, -r0.z < 0.00000 ? c0.y : r0.x, -r0.z < 0.00000 ? c0.y "
           ": r0.x, -r0.z < 0.00000 ? c0.x : r0.y);\n"
           "}\n"
           "//MD5=bdb2a379:fd50a540:3ea1bf96:8406a7ed\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMaskAlpha::InitProgramDescriptor(HgcMaskAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskAlpha_hgc_visible", "//Metal1.0     \n//LEN=000000037e\n[[ visible ]] FragmentOut HgcMaskAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.y = float(r0.w < hg_Params[0].y);\n"
    "    r0.z = r0.y;\n"
    "    r0.w = float(r0.w >= hg_Params[0].y);\n"
    "    r1.x = r0.w;\n"
    "    r0.x = hg_Params[0].x - c0.x;\n"
    "    r0.x = abs(r0.x);\n"
    "    r0.xz = float2(-r0.xz >= c0.yy);\n"
    "    r0.xy = fmin(r0.xx, r0.zy);\n"
    "    r0.y = float(-r0.y < c0.y);\n"
    "    r0.z = float(-fabs(hg_Params[0].x) >= c0.y);\n"
    "    r0.w = fmin(r0.z, r0.w);\n"
    "    r0.xy = select(r0.yy, c0.yx, -r0.xx < 0.00000f);\n"
    "    r1.x = float(-r1.x >= c0.y);\n"
    "    r0.xy = select(r0.xy, c0.xx, -r0.ww < 0.00000f);\n"
    "    r0.z = fmin(r0.z, r1.x);\n"
    "    output.color0 = select(r0.xxxy, c0.yyyx, -r0.zzzz < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B286F304()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskAlpha");
}

void sub_1B286F314(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B286F414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B286F454()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B286F44CLL);
}

_QWORD *HgcMaskAlpha::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskAlpha [hgc1]");
}

uint64_t HgcMaskAlpha::BindTexture(HgcMaskAlpha *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskAlpha::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcMaskAlpha::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x8_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  float32x4_t v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int32x4_t v98;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v78) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(_QWORD *)(a1 + 408);
          v12 = *(float32x4_t *)(v11 + 16);
          v13.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10 - 32), *(int8x16_t *)(v6 + v10 - 32), 8uLL))).u64[0];
          v14.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10 - 16), *(int8x16_t *)(v6 + v10 - 16), 8uLL))).u64[0];
          v15.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10), *(int8x16_t *)(v6 + v10), 8uLL))).u64[0];
          v16.i64[0] = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(*(float32x4_t *)v11, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + v10 + 16), *(int8x16_t *)(v6 + v10 + 16), 8uLL))).u64[0];
          v13.i64[1] = *(_QWORD *)(v6 + v10 - 24);
          v14.i64[1] = *(_QWORD *)(v6 + v10 - 8);
          v15.i64[1] = *(_QWORD *)(v6 + v10 + 8);
          v16.i64[1] = *(_QWORD *)(v6 + v10 + 24);
          v17 = *(int8x16_t *)(v11 + 32);
          v18 = *(int8x16_t *)(v11 + 48);
          v19 = (float32x4_t)vbslq_s8(v17, vextq_s8(v13, v13, 0xCuLL), v13);
          v20 = (float32x4_t)vbslq_s8(v17, vextq_s8(v14, v14, 0xCuLL), v14);
          v21 = (float32x4_t)vbslq_s8(v17, vextq_s8(v15, v15, 0xCuLL), v15);
          v22 = (float32x4_t)vbslq_s8(v17, vextq_s8(v16, v16, 0xCuLL), v16);
          v23 = (float32x4_t)vextq_s8(*(int8x16_t *)v11, *(int8x16_t *)v11, 8uLL);
          v24 = vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v19, v23)), (int8x16_t)v19);
          v25 = vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v20, v23)), (int8x16_t)v20);
          v26 = vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v21, v23)), (int8x16_t)v21);
          v27 = (float32x4_t)vbslq_s8(v18, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v22, v23)), (int8x16_t)v22);
          v28 = (float32x4_t)vextq_s8(v24, v24, 0xCuLL);
          v29 = (float32x4_t)vextq_s8(v25, v25, 0xCuLL);
          v30 = (float32x4_t)vextq_s8(v26, v26, 0xCuLL);
          v31 = (int8x16_t)vsubq_f32(*(float32x4_t *)v11, v12);
          v32 = *(int8x16_t *)(v11 + 64);
          v33 = *(float32x4_t *)(v11 + 80);
          v34 = vbslq_s8(v32, v31, v24);
          v35 = (float32x4_t)vbslq_s8(v32, v31, v25);
          v36 = vbslq_s8(v32, v31, v26);
          *(int8x8_t *)v37.f32 = vand_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v33.f32);
          *(int8x8_t *)v38.f32 = vand_s8(*(int8x8_t *)v35.f32, *(int8x8_t *)v33.f32);
          v37.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          v38.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
          *(int8x8_t *)v35.f32 = vand_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v33.f32);
          v35.i64[1] = vextq_s8(v36, v36, 8uLL).u64[0];
          v39 = vbslq_s8(v32, v31, (int8x16_t)v27);
          *(int8x8_t *)v33.f32 = vand_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v33.f32);
          v33.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
          v40 = *(float32x4_t *)(v11 + 96);
          v41 = *(int8x16_t *)(v11 + 112);
          v42 = vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v37), v40)), (int8x16_t)v37);
          v43 = vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v38), v40)), (int8x16_t)v38);
          v44 = vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v35), v40)), (int8x16_t)v35);
          v45 = (float32x4_t)vbslq_s8(v41, vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v33), v40)), (int8x16_t)v33);
          v46 = *(int8x16_t *)(v11 + 128);
          v47 = *(int8x16_t *)(v11 + 144);
          *(int8x8_t *)v48.f32 = vqtbl1_s8(v42, *(int8x8_t *)v46.i8);
          v49 = (int8x8_t)vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)&v48.u32[2] = vqtbl1_s8(v42, v49);
          *(int8x8_t *)v50.f32 = vqtbl1_s8(v43, *(int8x8_t *)v46.i8);
          *(int8x8_t *)v51.f32 = vqtbl1_s8(v44, *(int8x8_t *)v46.i8);
          *(int8x8_t *)&v50.u32[2] = vqtbl1_s8(v43, v49);
          *(int8x8_t *)&v51.u32[2] = vqtbl1_s8(v44, v49);
          *(int8x8_t *)v52.f32 = vqtbl1_s8((int8x16_t)v45, *(int8x8_t *)v46.i8);
          *(int8x8_t *)&v52.u32[2] = vqtbl1_s8((int8x16_t)v45, v49);
          v53 = (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL);
          v37.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 0), v48).u64[0];
          v38.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 0), v50).u64[0];
          v54.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.i8, 0), v51).u64[0];
          v37.i64[1] = v42.i64[1];
          v38.i64[1] = v43.i64[1];
          v54.i64[1] = v44.i64[1];
          v27.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0), v52).u64[0];
          v27.i64[1] = v45.i64[1];
          v55 = vorrq_s8(v46, *(int8x16_t *)v11);
          v56 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v55, v55, 8uLL), v40));
          v57 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v37))), (int8x16_t)v37));
          v58 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v38))), (int8x16_t)v38));
          v59 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v54))), (int8x16_t)v54));
          v60 = (float32x4_t)vbslq_s8(v17, v56, vbslq_s8(v47, vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v40, vnegq_f32(v27))), (int8x16_t)v27));
          v61 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v57), v57), (int8x16_t)v57);
          v62 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v58), v58), (int8x16_t)v58);
          v63 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v59), v59), (int8x16_t)v59);
          v64 = (int32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v60), v60), (int8x16_t)v60);
          v65 = vnegq_f32(v53);
          v66 = *(float32x4_t *)(v11 + 160);
          v67 = *(int8x16_t *)(v11 + 176);
          v57.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).u64[0];
          v58.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).u64[0];
          v59.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v63, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.i8, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v63.i8, 1))).u64[0];
          v60.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v64, 3), v40), (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0), v40), (int8x16_t)v66, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1))).u64[0];
          v45.i64[0] = v57.i64[0];
          v45.i64[1] = v61.i64[1];
          v61.i64[0] = v58.i64[0];
          v38.i64[0] = v59.i64[0];
          v61.i64[1] = v62.i64[1];
          v38.i64[1] = v63.i64[1];
          v62.i64[0] = v60.i64[0];
          v62.i64[1] = v64.i64[1];
          v68 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v28), v66));
          v69 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v29), v66));
          v70 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(vnegq_f32(v30), v66));
          v71 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgeq_f32(v65, v66));
          v72 = (int32x4_t)vminq_f32(v45, (float32x4_t)vextq_s8(v68, v68, 8uLL));
          v73 = (int32x4_t)vminq_f32(v61, (float32x4_t)vextq_s8(v69, v69, 8uLL));
          v74 = (int32x4_t)vminq_f32(v38, (float32x4_t)vextq_s8(v70, v70, 8uLL));
          v75 = (int32x4_t)vminq_f32(v62, (float32x4_t)vextq_s8(v71, v71, 8uLL));
          v57.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
          *(int8x8_t *)v62.f32 = vqtbl1_s8((int8x16_t)v57, *(int8x8_t *)v67.i8);
          v45.i64[0] = vextq_s8(v67, v67, 8uLL).u64[0];
          v58.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
          *(int8x8_t *)v28.f32 = vqtbl1_s8((int8x16_t)v58, *(int8x8_t *)v67.i8);
          v59.i64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
          *(int8x8_t *)v64.i8 = vqtbl1_s8((int8x16_t)v59, *(int8x8_t *)v67.i8);
          *(int8x8_t *)&v62.u32[2] = vqtbl1_s8((int8x16_t)v57, *(int8x8_t *)v45.f32);
          v60.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
          *(int8x8_t *)v61.f32 = vqtbl1_s8((int8x16_t)v60, *(int8x8_t *)v67.i8);
          *(int8x8_t *)&v28.u32[2] = vqtbl1_s8((int8x16_t)v58, *(int8x8_t *)v45.f32);
          v64.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v59, *(int8x8_t *)v45.f32);
          *(int8x8_t *)&v61.u32[2] = vqtbl1_s8((int8x16_t)v60, *(int8x8_t *)v45.f32);
          v76 = *(float32x4_t *)(v11 + 192);
          v77 = (int8x16_t *)(v5 + v10);
          v77[-2] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v72, 2), v76), (int8x16_t)v40, (int8x16_t)v62);
          v77[-1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v73, 2), v76), (int8x16_t)v40, (int8x16_t)v28);
          *v77 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v74, 2), v76), (int8x16_t)v40, (int8x16_t)v64);
          v77[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v75, 2), v76), (int8x16_t)v40, (int8x16_t)v61);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v78) = -v9;
      }
      if ((int)v78 < v4)
      {
        v78 = v78;
        do
        {
          v79 = *(_QWORD *)(a1 + 408);
          v80 = *(float32x4_t *)(v79 + 16);
          v81.i64[0] = vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(*(float32x4_t *)v79, (float32x4_t)vextq_s8(*(int8x16_t *)(v6 + 16 * v78), *(int8x16_t *)(v6 + 16 * v78), 8uLL))).u64[0];
          v81.i64[1] = *(_QWORD *)(v6 + 16 * v78 + 8);
          v82 = *(int8x16_t *)(v79 + 32);
          v83 = *(float32x4_t *)(v79 + 48);
          v84 = (float32x4_t)vbslq_s8(v82, vextq_s8(v81, v81, 0xCuLL), v81);
          v85 = vbslq_s8((int8x16_t)v83, vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32(v84, (float32x4_t)vextq_s8(*(int8x16_t *)v79, *(int8x16_t *)v79, 8uLL))), (int8x16_t)v84);
          v86 = vbslq_s8(*(int8x16_t *)(v79 + 64), (int8x16_t)vsubq_f32(*(float32x4_t *)v79, v80), v85);
          *(int8x8_t *)v87.f32 = vand_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)(v79 + 80));
          v87.i64[1] = vextq_s8(v86, v86, 8uLL).u64[0];
          v88 = *(float32x4_t *)(v79 + 96);
          v89 = vbslq_s8(*(int8x16_t *)(v79 + 112), vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32(vnegq_f32(v87), v88)), (int8x16_t)v87);
          v90 = *(int8x16_t *)(v79 + 128);
          *(int8x8_t *)v91.f32 = vqtbl1_s8(v89, *(int8x8_t *)v90.i8);
          *(int8x8_t *)&v91.u32[2] = vqtbl1_s8(v89, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
          v91.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.i8, 0), v91).u64[0];
          v91.i64[1] = v89.i64[1];
          v92 = vorrq_s8(v90, *(int8x16_t *)v79);
          v93 = (float32x4_t)vbslq_s8(v82, vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8(v92, v92, 8uLL), v88)), vbslq_s8(*(int8x16_t *)(v79 + 144), vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v88, vnegq_f32(v91))), (int8x16_t)v91));
          v94 = (int32x4_t)vbslq_s8((int8x16_t)v83, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v93), v93), (int8x16_t)v93);
          v95 = *(float32x4_t *)(v79 + 160);
          v96 = *(int8x16_t *)(v79 + 176);
          v82.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v94, 3), v88), (int8x16_t)v80, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 0), v88), (int8x16_t)v95, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 1))).u64[0];
          v83.i64[0] = v82.i64[0];
          v83.i64[1] = v94.i64[1];
          v97 = vandq_s8((int8x16_t)v80, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v85, v85, 0xCuLL)), v95));
          v98 = (int32x4_t)vminq_f32(v83, (float32x4_t)vextq_s8(v97, v97, 8uLL));
          v82.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
          *(int8x8_t *)v85.i8 = vqtbl1_s8(v82, *(int8x8_t *)v96.i8);
          v85.u64[1] = (unint64_t)vqtbl1_s8(v82, (int8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL));
          *(int8x16_t *)(v5 + 16 * v78++) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v98, 2), *(float32x4_t *)(v79 + 192)), (int8x16_t)v88, v85);
        }
        while (v78 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskAlpha::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcMaskAlpha::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcMaskAlpha::HgcMaskAlpha(HgcMaskAlpha *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v9;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E5DC8;
  v3 = (_OWORD *)operator new();
  __asm { FMOV            V1.4S, #1.0 }
  *v3 = 0u;
  v3[1] = _Q1;
  v3[2] = xmmword_1B3050FE0;
  v3[3] = xmmword_1B3050F70;
  v3[4] = xmmword_1B3050E20;
  v3[5] = xmmword_1B3051470;
  *(_QWORD *)&v9 = 0xFFFFFFFFLL;
  *((_QWORD *)&v9 + 1) = 0xFFFFFFFFLL;
  v3[6] = xmmword_1B304EFF0;
  v3[7] = v9;
  v3[8] = xmmword_1B3051480;
  v3[9] = xmmword_1B3050FF0;
  v3[10] = xmmword_1B304F240;
  v3[11] = xmmword_1B3051490;
  v3[12] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B286FC1C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskAlpha::~HgcMaskAlpha(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E5DC8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F93440CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskAlpha::~HgcMaskAlpha(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskAlpha::SetParameter(HgcMaskAlpha *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcMaskAlpha::GetParameter(HgcMaskAlpha *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcSimpleAdd::GetProgram(HgcSimpleAdd *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002e0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r1) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b9d0f3ff:6eb0ab3e:bf9eb7ca:83d31c9c\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002c3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=c8c34beb:ec63a391:4a47a9b1:6168da55\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000241\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1 + r0;\n"
           "}\n"
           "//MD5=eda39bd3:057505f8:05bb095c:802de8a1\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcSimpleAdd::InitProgramDescriptor(HgcSimpleAdd *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSimpleAdd_hgc_visible", "//Metal1.0     \n//LEN=000000011e\n[[ visible ]] FragmentOut HgcSimpleAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0 = r1 + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B286FE04()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSimpleAdd");
}

void sub_1B286FE14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B286FF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B286FF9C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B286FF94);
}

_QWORD *HgcSimpleAdd::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSimpleAdd [hgc1]");
}

uint64_t HgcSimpleAdd::BindTexture(HgcSimpleAdd *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSimpleAdd::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcSimpleAdd::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  uint64_t v17;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 104);
    v8 = *(_QWORD *)(a2 + 96);
    v9 = 16 * *(int *)(a2 + 88);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16));
          v14 = vaddq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12));
          v15 = vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16));
          v16 = (float32x4_t *)(v5 + v12);
          v16[-2] = vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)(v6 + v12 - 32));
          v16[-1] = v13;
          *v16 = v14;
          v16[1] = v15;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v17) = -v11;
      }
      if ((int)v17 < v4)
      {
        v17 = v17;
        do
        {
          *(float32x4_t *)(v5 + 16 * v17) = vaddq_f32(*(float32x4_t *)(v8 + 16 * v17), *(float32x4_t *)(v6 + 16 * v17));
          ++v17;
        }
        while (v17 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSimpleAdd::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcSimpleAdd::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcSimpleAdd::HgcSimpleAdd(HgcSimpleAdd *this)
{
  _QWORD *v2;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E6030;
  *((_QWORD *)this + 51) = operator new();
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287024C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSimpleAdd::~HgcSimpleAdd(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E6030;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0xC400A2AC0F1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSimpleAdd::~HgcSimpleAdd(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSimpleAdd::SetParameter(HgcSimpleAdd *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSimpleAdd::GetParameter(HgcSimpleAdd *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcLevels::GetProgram(HgcLevels *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000059a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = half4(hg_Params[0]) - half4(hg_Params[2]);\n"
             "    r1 = r1 + c0.xxxx;\n"
             "    r2 = half4(hg_Params[1]) - half4(hg_Params[3]);\n"
             "    r3 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1 = r2/r1;\n"
             "    r2 = r1*-half4(hg_Params[0]) + half4(hg_Params[1]);\n"
             "    r1 = clamp(r3*r1 + r2, 0.00000h, 1.00000h);\n"
             "    r1 = clamp(r1 + c0.xxxx, 0.00000h, 1.00000h);\n"
             "    r3 = half4(hg_Params[5]) - half4(hg_Params[7]);\n"
             "    r3 = r3 + c0.xxxx;\n"
             "    r2 = half4(hg_Params[6]) - half4(hg_Params[8]);\n"
             "    r1 = pow(r1, half4(hg_Params[4]));\n"
             "    r3 = r2/r3;\n"
             "    r2 = r3*-half4(hg_Params[5]) + half4(hg_Params[6]);\n"
             "    r1 = clamp(r1*r3 + r2, 0.00000h, 1.00000h);\n"
             "    r1 = clamp(r1 + c0.xxxx, 0.00000h, 1.00000h);\n"
             "    r1 = pow(r1, half4(hg_Params[9]));\n"
             "    r1.xyz = r1.www*r1.xyz;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[10]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a7a0e798:4ed60d72:7be40f84:21b0661b\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000b:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000525\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Params[0] - hg_Params[2];\n"
             "    r1 = r1 + c0.xxxx;\n"
             "    r2 = hg_Params[1] - hg_Params[3];\n"
             "    r3 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1 = r2/r1;\n"
             "    r2 = r1*-hg_Params[0] + hg_Params[1];\n"
             "    r1 = clamp(r3*r1 + r2, 0.00000f, 1.00000f);\n"
             "    r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
             "    r3 = hg_Params[5] - hg_Params[7];\n"
             "    r3 = r3 + c0.xxxx;\n"
             "    r2 = hg_Params[6] - hg_Params[8];\n"
             "    r1 = pow(r1, hg_Params[4]);\n"
             "    r3 = r2/r3;\n"
             "    r2 = r3*-hg_Params[5] + hg_Params[6];\n"
             "    r1 = clamp(r1*r3 + r2, 0.00000f, 1.00000f);\n"
             "    r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
             "    r1 = pow(r1, hg_Params[9]);\n"
             "    r1.xyz = r1.www*r1.xyz;\n"
             "    output.color0 = mix(r0, r1, hg_Params[10]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c23151d5:de73ee7f:ff1ea122:1f2df5d9\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000b:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006d8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "uniform mediump vec4 hg_ProgramLocal5;\n"
           "uniform mediump vec4 hg_ProgramLocal6;\n"
           "uniform mediump vec4 hg_ProgramLocal7;\n"
           "uniform mediump vec4 hg_ProgramLocal8;\n"
           "uniform mediump vec4 hg_ProgramLocal9;\n"
           "uniform mediump vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = hg_ProgramLocal0 - hg_ProgramLocal2;\n"
           "    r1 = r1 + c0.xxxx;\n"
           "    r2 = hg_ProgramLocal1 - hg_ProgramLocal3;\n"
           "    r3 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1 = r2/r1;\n"
           "    r2 = r1*-hg_ProgramLocal0 + hg_ProgramLocal1;\n"
           "    r1 = clamp(r3*r1 + r2, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = clamp(r1 + c0.xxxx, vec4(0.00000), vec4(1.00000));\n"
           "    r3 = hg_ProgramLocal5 - hg_ProgramLocal7;\n"
           "    r3 = r3 + c0.xxxx;\n"
           "    r2 = hg_ProgramLocal6 - hg_ProgramLocal8;\n"
           "    r1 = pow(r1, hg_ProgramLocal4);\n"
           "    r3 = r2/r3;\n"
           "    r2 = r3*-hg_ProgramLocal5 + hg_ProgramLocal6;\n"
           "    r1 = clamp(r1*r3 + r2, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = clamp(r1 + c0.xxxx, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = pow(r1, hg_ProgramLocal9);\n"
           "    r1.xyz = r1.www*r1.xyz;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal10);\n"
           "}\n"
           "//MD5=52a0e8cd:61c1d4cc:431cd2e4:db34cb52\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000b:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLevels::InitProgramDescriptor(HgcLevels *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLevels_hgc_visible", "//Metal1.0     \n//LEN=00000003f8\n[[ visible ]] FragmentOut HgcLevels_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = hg_Params[0] - hg_Params[2];\n"
    "    r1 = r1 + c0.xxxx;\n"
    "    r2 = hg_Params[1] - hg_Params[3];\n"
    "    r3 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1 = r2/r1;\n"
    "    r2 = r1*-hg_Params[0] + hg_Params[1];\n"
    "    r1 = clamp(r3*r1 + r2, 0.00000f, 1.00000f);\n"
    "    r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
    "    r3 = hg_Params[5] - hg_Params[7];\n"
    "    r3 = r3 + c0.xxxx;\n"
    "    r2 = hg_Params[6] - hg_Params[8];\n"
    "    r1 = pow(r1, hg_Params[4]);\n"
    "    r3 = r2/r3;\n"
    "    r2 = r3*-hg_Params[5] + hg_Params[6];\n"
    "    r1 = clamp(r1*r3 + r2, 0.00000f, 1.00000f);\n"
    "    r1 = clamp(r1 + c0.xxxx, 0.00000f, 1.00000f);\n"
    "    r1 = pow(r1, hg_Params[9]);\n"
    "    r1.xyz = r1.www*r1.xyz;\n"
    "    output.color0 = mix(r0, r1, hg_Params[10]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287039C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcLevels");
}

void sub_1B28703AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514D0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28704AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28704EC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28704E4);
}

_QWORD *HgcLevels::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLevels [hgc1]");
}

uint64_t HgcLevels::BindTexture(HgcLevels *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLevels::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, a1[51] + 128, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, a1[51] + 144, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, a1[51] + 160, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcLevels::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t *v107;
  unsigned int v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v108 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v16 = *(float32x4_t *)(v13 + 160);
          v15 = *(float32x4_t *)(v13 + 176);
          v17 = vaddq_f32(vsubq_f32(*(float32x4_t *)v13, *(float32x4_t *)(v13 + 32)), v15);
          v19 = *(float32x4_t *)(v13 + 192);
          v18 = *(float32x4_t *)(v13 + 208);
          v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v19);
          v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v19);
          v22 = vmulq_f32(vrecpeq_f32(v20), v18);
          v23 = vmulq_f32(vrecpeq_f32(v21), v18);
          v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v20));
          v25 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v21));
          v26 = *(int8x16_t *)(v13 + 224);
          v27 = *(int8x16_t *)(v13 + 240);
          v28 = (float32x4_t)vorrq_s8(vandq_s8(v26, v24), v27);
          v29 = (float32x4_t)vorrq_s8(vandq_s8(v26, v25), v27);
          v30 = vmulq_f32(v11, v28);
          v32 = *(float32x4_t *)(v13 + 256);
          v31 = *(float32x4_t *)(v13 + 272);
          v33 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v17)), v32), v31);
          v34 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)(v13 + 48)), vmulq_f32(v33, vrecpsq_f32(v17, v33)));
          v35 = vsubq_f32(v14, vmulq_f32(*(float32x4_t *)v13, v34));
          v36 = vaddq_f32(vmulq_f32(v30, v34), v35);
          v37 = vaddq_f32(vmulq_f32(vmulq_f32(v12, v29), v34), v35);
          v39 = *(float32x4_t *)(v13 + 288);
          v38 = *(float32x4_t *)(v13 + 304);
          v40 = vminq_f32(vmaxq_f32(vaddq_f32(v15, vminq_f32(vmaxq_f32(v36, v39), v38)), v39), v38);
          v41 = *(float32x4_t *)(v13 + 96);
          v43 = *(float32x4_t *)(v13 + 64);
          v42 = *(float32x4_t *)(v13 + 80);
          v44 = vminq_f32(vmaxq_f32(vaddq_f32(v15, vminq_f32(vmaxq_f32(v37, v39), v38)), v39), v38);
          v45 = vaddq_f32(v15, vsubq_f32(v42, *(float32x4_t *)(v13 + 112)));
          v47 = *(int8x16_t *)(v13 + 320);
          v46 = *(float32x4_t *)(v13 + 336);
          v48 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v40), (int8x16_t)v38);
          v49 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v44), (int8x16_t)v38);
          v51 = *(int8x16_t *)(v13 + 352);
          v50 = *(float32x4_t *)(v13 + 368);
          v52 = *(float32x4_t *)(v13 + 384);
          v53 = *(float32x4_t *)(v13 + 400);
          v54 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v48, v52));
          v55 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v49, v52));
          v56 = vsubq_f32(vsubq_f32(v48, v38), vmulq_f32(vmulq_f32(v53, v54), v48));
          v57 = vsubq_f32(vsubq_f32(v49, v38), vmulq_f32(vmulq_f32(v53, v55), v49));
          v58 = *(float32x4_t *)(v13 + 416);
          v59 = *(float32x4_t *)(v13 + 432);
          v60 = *(float32x4_t *)(v13 + 448);
          v61 = *(float32x4_t *)(v13 + 464);
          v62 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v44, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v44))), v50), v55), vmulq_f32(v57, vaddq_f32(vaddq_f32(v60, vmulq_f32(v57, v61)), vmulq_f32(vmulq_f32(v57, v57), vaddq_f32(v58, vmulq_f32(v59, v57))))));
          v63 = vmulq_f32(v43, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v40, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v40))), v50), v54), vmulq_f32(v56, vaddq_f32(vaddq_f32(v60, vmulq_f32(v56, v61)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v58, vmulq_f32(v59, v56)))))));
          v64 = vmulq_f32(v43, v62);
          v66 = *(float32x4_t *)(v13 + 480);
          v65 = *(float32x4_t *)(v13 + 496);
          v67 = vmaxq_f32(v63, v66);
          v68 = vmaxq_f32(v64, v66);
          v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
          v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
          v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v69, v67)));
          v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v70, v68)));
          v73 = vsubq_f32(v67, v71);
          v74 = *(float32x4_t *)(v13 + 512);
          v75 = *(float32x4_t *)(v13 + 528);
          v76 = vsubq_f32(v68, v72);
          v77 = *(int32x4_t *)(v13 + 544);
          v78 = *(int8x16_t *)(v13 + 560);
          v79 = vmulq_f32(vaddq_f32(v38, vmulq_f32(v73, vaddq_f32(v75, vmulq_f32(v73, vaddq_f32(v65, vmulq_f32(v74, v73)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v71)), 0x17uLL));
          v80 = *(float32x4_t *)(v13 + 144);
          v81 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v45)), v32), v31);
          v82 = vmulq_f32(vsubq_f32(v41, *(float32x4_t *)(v13 + 128)), vmulq_f32(v81, vrecpsq_f32(v45, v81)));
          v83 = vsubq_f32(v41, vmulq_f32(v42, v82));
          v84 = vaddq_f32(v15, vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v79, v82), v83), v39), v38));
          v85 = vmaxq_f32(vaddq_f32(v15, vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(vmulq_f32(vaddq_f32(v38, vmulq_f32(v76, vaddq_f32(v75, vmulq_f32(v76, vaddq_f32(v65, vmulq_f32(v74, v76)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v72)), 0x17uLL)), v82), v83), v39), v38)), v39);
          v86 = vminq_f32(vmaxq_f32(v84, v39), v38);
          v87 = vminq_f32(v85, v38);
          v88 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v86), (int8x16_t)v38);
          v89 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v87), (int8x16_t)v38);
          v90 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v86))), v50);
          v91 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v87, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v46, v87))), v50);
          v92 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v88, v52));
          v93 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v89, v52));
          v94 = vaddq_f32(v91, v93);
          v95 = vsubq_f32(vsubq_f32(v88, v38), vmulq_f32(vmulq_f32(v53, v92), v88));
          v96 = vsubq_f32(vsubq_f32(v89, v38), vmulq_f32(vmulq_f32(v53, v93), v89));
          v97 = vmaxq_f32(vmulq_f32(v80, vaddq_f32(vaddq_f32(v90, v92), vmulq_f32(v95, vaddq_f32(vaddq_f32(v60, vmulq_f32(v61, v95)), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(v58, vmulq_f32(v59, v95))))))), v66);
          v98 = vmaxq_f32(vmulq_f32(v80, vaddq_f32(v94, vmulq_f32(v96, vaddq_f32(vaddq_f32(v60, vmulq_f32(v61, v96)), vmulq_f32(vmulq_f32(v96, v96), vaddq_f32(v58, vmulq_f32(v59, v96))))))), v66);
          v99 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
          v100 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
          v101 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v99, v97)));
          v102 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v100, v98)));
          v103 = vsubq_f32(v97, v101);
          v104 = vsubq_f32(v98, v102);
          v105 = vmulq_f32(vaddq_f32(v38, vmulq_f32(v103, vaddq_f32(v75, vmulq_f32(v103, vaddq_f32(v65, vmulq_f32(v74, v103)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v101), v77), 0x17uLL));
          v106 = vmulq_f32(vaddq_f32(v38, vmulq_f32(v104, vaddq_f32(v75, vmulq_f32(v104, vaddq_f32(v65, vmulq_f32(v74, v104)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v102), v77), 0x17uLL));
          v107 = (float32x4_t *)(v5 + v10);
          v107[-1] = vaddq_f32(v11, vmulq_f32(v16, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v105, (int8x16_t)vmulq_laneq_f32(v105, v105, 3)), v11)));
          *v107 = vaddq_f32(v12, vmulq_f32(v16, vsubq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)v106, (int8x16_t)vmulq_laneq_f32(v106, v106, 3)), v12)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v108 = -v9;
      }
      if ((int)v108 < v4)
      {
        v109 = *(float32x4_t *)(v6 + 16 * v108);
        v110 = *(_QWORD *)(a1 + 408);
        v111 = *(float32x4_t *)(v110 + 16);
        v112 = *(float32x4_t *)(v110 + 176);
        v113 = vaddq_f32(vsubq_f32(*(float32x4_t *)v110, *(float32x4_t *)(v110 + 32)), v112);
        v114 = *(float32x4_t *)(v110 + 208);
        v115 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 3), *(float32x4_t *)(v110 + 192));
        v116 = vmulq_f32(vrecpeq_f32(v115), v114);
        v117 = vmulq_f32(v109, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v110 + 224), (int8x16_t)vmulq_f32(v116, vrecpsq_f32(v116, v115))), *(int8x16_t *)(v110 + 240)));
        v118 = *(float32x4_t *)(v110 + 256);
        v119 = *(float32x4_t *)(v110 + 272);
        v120 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpeq_f32(v113)), v118), v119);
        v121 = vmulq_f32(vsubq_f32(v111, *(float32x4_t *)(v110 + 48)), vmulq_f32(v120, vrecpsq_f32(v113, v120)));
        v122 = vaddq_f32(vmulq_f32(v117, v121), vsubq_f32(v111, vmulq_f32(*(float32x4_t *)v110, v121)));
        v123 = *(float32x4_t *)(v110 + 288);
        v124 = *(float32x4_t *)(v110 + 304);
        v125 = vminq_f32(vmaxq_f32(vaddq_f32(v112, vminq_f32(vmaxq_f32(v122, v123), v124)), v123), v124);
        v126 = *(float32x4_t *)(v110 + 96);
        v127 = *(float32x4_t *)(v110 + 80);
        v128 = vaddq_f32(v112, vsubq_f32(v127, *(float32x4_t *)(v110 + 112)));
        v129 = *(int8x16_t *)(v110 + 320);
        v130 = *(float32x4_t *)(v110 + 336);
        v131 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v125), (int8x16_t)v124);
        v132 = *(int8x16_t *)(v110 + 352);
        v133 = *(float32x4_t *)(v110 + 368);
        v134 = *(float32x4_t *)(v110 + 384);
        v135 = *(float32x4_t *)(v110 + 400);
        v136 = (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v131, v134));
        v137 = vsubq_f32(vsubq_f32(v131, v124), vmulq_f32(vmulq_f32(v135, v136), v131));
        v138 = *(float32x4_t *)(v110 + 416);
        v139 = *(float32x4_t *)(v110 + 432);
        v140 = *(float32x4_t *)(v110 + 448);
        v141 = *(float32x4_t *)(v110 + 464);
        v142 = vmulq_f32(*(float32x4_t *)(v110 + 64), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v125, 0x17uLL)), (float32x4_t)vandq_s8(v132, (int8x16_t)vcgtq_f32(v130, v125))), v133), v136), vmulq_f32(v137, vaddq_f32(vaddq_f32(v140, vmulq_f32(v137, v141)), vmulq_f32(vmulq_f32(v137, v137), vaddq_f32(v138, vmulq_f32(v139, v137)))))));
        v143 = *(float32x4_t *)(v110 + 480);
        v144 = *(float32x4_t *)(v110 + 496);
        v145 = vmaxq_f32(v142, v143);
        v146 = vcvtq_f32_s32(vcvtq_s32_f32(v145));
        v147 = vsubq_f32(v146, (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v146, v145)));
        v148 = vsubq_f32(v145, v147);
        v150 = *(float32x4_t *)(v110 + 512);
        v149 = *(float32x4_t *)(v110 + 528);
        v151 = *(int32x4_t *)(v110 + 544);
        v152 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpeq_f32(v128)), v118), v119);
        v153 = vmulq_f32(vsubq_f32(v126, *(float32x4_t *)(v110 + 128)), vmulq_f32(v152, vrecpsq_f32(v128, v152)));
        v154 = vminq_f32(vmaxq_f32(vaddq_f32(v112, vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v153, vmulq_f32(vaddq_f32(v124, vmulq_f32(v148, vaddq_f32(v149, vmulq_f32(v148, vaddq_f32(v144, vmulq_f32(v150, v148)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v151, vcvtq_s32_f32(v147)), 0x17uLL))), vsubq_f32(v126, vmulq_f32(v127, v153))), v123), v124)), v123),
                 v124);
        v155 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v154), (int8x16_t)v124);
        v156 = (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v155, v134));
        v157 = vsubq_f32(vsubq_f32(v155, v124), vmulq_f32(vmulq_f32(v135, v156), v155));
        v158 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v110 + 144), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v154, 0x17uLL)), (float32x4_t)vandq_s8(v132, (int8x16_t)vcgtq_f32(v130, v154))), v133), v156), vmulq_f32(v157, vaddq_f32(vaddq_f32(v140, vmulq_f32(v141, v157)), vmulq_f32(vmulq_f32(v157, v157), vaddq_f32(v138, vmulq_f32(v139, v157))))))), v143);
        v159 = vcvtq_f32_s32(vcvtq_s32_f32(v158));
        v160 = vsubq_f32(v159, (float32x4_t)vandq_s8((int8x16_t)v124, (int8x16_t)vcgtq_f32(v159, v158)));
        v161 = vsubq_f32(v158, v160);
        v162 = vmulq_f32(vaddq_f32(v124, vmulq_f32(v161, vaddq_f32(v149, vmulq_f32(v161, vaddq_f32(v144, vmulq_f32(v150, v161)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v160), v151), 0x17uLL));
        *(float32x4_t *)(v5 + 16 * v108) = vaddq_f32(v109, vmulq_f32(*(float32x4_t *)(v110 + 160), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v110 + 560), (int8x16_t)v162, (int8x16_t)vmulq_laneq_f32(v162, v162, 3)), v109)));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLevels::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcLevels::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcLevels::HgcLevels(HgcLevels *this)
{
  _QWORD *v2;
  HgcLevels::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E6298;
  v3 = (HgcLevels::State *)operator new();
  HgcLevels::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2870F3C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLevels::~HgcLevels(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E6298;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4044C9E2E8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcLevels::~HgcLevels(this);
  HGObject::operator delete(v1);
}

uint64_t HgcLevels::SetParameter(HgcLevels *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 0xA)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcLevels::GetParameter(HgcLevels *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0xA)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgcLevels::State::State(HgcLevels::State *this)
{
  __int128 v1;
  __int128 v7;
  double result;

  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((int32x4_t *)this + 11) = vdupq_n_s32(0x3727C5ACu);
  *((int32x4_t *)this + 12) = vdupq_n_s32(0x358637BDu);
  *((int32x4_t *)this + 13) = vdupq_n_s32(0x3F804020u);
  *((_OWORD *)this + 14) = xmmword_1B30514E0;
  *((_OWORD *)this + 15) = xmmword_1B304EFF0;
  *(_QWORD *)&v1 = 0x80000000800000;
  *((_QWORD *)&v1 + 1) = 0x80000000800000;
  *((_OWORD *)this + 16) = v1;
  *((int32x4_t *)this + 17) = vdupq_n_s32(0x7F7FFFFFu);
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 19) = _Q0;
  *((int32x4_t *)this + 20) = vdupq_n_s32(0x807FFFFF);
  *(_QWORD *)&_Q0 = 0x80000000800000;
  *((_QWORD *)&_Q0 + 1) = 0x80000000800000;
  *((_OWORD *)this + 21) = _Q0;
  *((int32x4_t *)this + 22) = vdupq_n_s32(0x7F800000u);
  *((int32x4_t *)this + 23) = vdupq_n_s32(0x42FE0000u);
  *((int32x4_t *)this + 24) = vdupq_n_s32(0x3FB504F3u);
  *(_QWORD *)&_Q0 = 0x3F0000003F000000;
  *((_QWORD *)&_Q0 + 1) = 0x3F0000003F000000;
  *((_OWORD *)this + 25) = _Q0;
  *((int32x4_t *)this + 26) = vdupq_n_s32(0x3F047D53u);
  *((int32x4_t *)this + 27) = vdupq_n_s32(0xBEA9AC62);
  *((int32x4_t *)this + 28) = vdupq_n_s32(0x3FB89666u);
  *((int32x4_t *)this + 29) = vdupq_n_s32(0xBF398D4B);
  *((int32x4_t *)this + 30) = vdupq_n_s32(0xC2FE0000);
  *((int32x4_t *)this + 31) = vdupq_n_s32(0x3E6E687Cu);
  *((int32x4_t *)this + 32) = vdupq_n_s32(0x3D96C2DFu);
  *(_QWORD *)&v7 = 0x7F0000007FLL;
  *((_QWORD *)&v7 + 1) = 0x7F0000007FLL;
  *((int32x4_t *)this + 33) = vdupq_n_s32(0x3F318D85u);
  *((_OWORD *)this + 34) = v7;
  result = 0.0;
  *((_OWORD *)this + 35) = xmmword_1B3050F70;
  return result;
}

const char *HgcSatCurves::GetProgram(HgcSatCurves *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_33;
    else
      return aMetal10Len0000_34;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_10;
  }
}

void HgcSatCurves::InitProgramDescriptor(HgcSatCurves *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSatCurves_hgc_visible", aMetal10Len0000_35);
}

void sub_1B2871270()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSatCurves");
}

void sub_1B2871280(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051500;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2871580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2871600()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28715F8);
}

_QWORD *HgcSatCurves::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSatCurves [hgc1]");
}

uint64_t HgcSatCurves::BindTexture(HgcSatCurves *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  void (*v22)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128);

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 0, 0, 0, 0);
      v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v4)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        goto LABEL_18;
      }
      return result;
    case 1:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v6.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v7.n128_u32[0] = 0;
      v8.n128_u32[0] = 0;
      v9.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 15, v6, v7, v8, v9);
      goto LABEL_18;
    case 2:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v10.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v11.n128_u32[0] = 0;
      v12.n128_u32[0] = 0;
      v13.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 16, v10, v11, v12, v13);
      goto LABEL_18;
    case 3:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v14.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v15.n128_u32[0] = 0;
      v16.n128_u32[0] = 0;
      v17.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 18, v14, v15, v16, v17);
      goto LABEL_18;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
      {
        v22 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v20.n128_u32[0] = 1.0;
        v21.n128_u32[0] = 1.0;
      }
      else
      {
        v20.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
        v22 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
        v21.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
      }
      v18.n128_f32[0] = (float)*((int *)a2 + 60);
      v19.n128_f32[0] = (float)*((int *)a2 + 61);
      v22(a2, 17, v18, v19, v20, v21);
LABEL_18:
      result = 0;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcSatCurves::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, a1[51] + 128, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, a1[51] + 144, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, a1[51] + 160, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, a1[51] + 176, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, a1[51] + 192, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, a1[51] + 208, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, a1[51] + 224, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcSatCurves::RenderTile(HgcSatCurves *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int32x2_t v31;
  float32x4_t *v32;
  __int128 v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  float32x4_t v48;
  int64x2_t v49;
  int8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  int32x2_t v61;
  float32x4_t *v62;
  __int128 v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  int32x2_t v84;
  float32x4_t *v85;
  __int128 v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int v95;
  float32x4_t v96;
  int32x4_t v97;
  uint64_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x4_t v103;
  unint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  __int32 v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  __int32 v124;
  float32x4_t v125;
  float32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  int32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int8x16_t v150;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  float32x2_t v160;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcSatCurves *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    __asm { FMOV            V1.2S, #-1.0 }
    v159 = (float32x2_t)COERCE_UNSIGNED_INT((float)(*((_DWORD *)a2 + 66) - *((_DWORD *)a2 + 64)));
    v160 = (float32x2_t)COERCE_UNSIGNED_INT((float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56)));
    v157 = vadd_f32(v160, _D1);
    v158 = (float32x2_t)COERCE_UNSIGNED_INT((float)(*((_DWORD *)a2 + 62) - *((_DWORD *)a2 + 60)));
    v156 = vadd_f32(v158, _D1);
    v153 = vadd_f32(v156, _D1);
    v154 = vadd_f32(v157, _D1);
    v155 = vadd_f32(v159, _D1);
    v152 = vadd_f32(v155, _D1);
    v18 = 16 * *((int *)a2 + 6);
    v19 = 16 * *((int *)a2 + 22);
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 >= 1)
      {
        v21 = 0;
        do
        {
          v22 = *(int8x16_t *)(v12 + v21);
          v23 = *((_QWORD *)this + 51);
          v24 = *(float32x4_t *)(v23 + 48);
          v25 = (int32x4_t)vmulq_f32((float32x4_t)v22, v24);
          v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v25, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)));
          v27 = *(float32x4_t *)(v23 + 144);
          v28 = *(float32x4_t *)(v23 + 160);
          v29 = vmul_f32(v160, vmin_f32(vmax_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v27.f32), *(float32x2_t *)v28.f32));
          if (v5)
          {
            v30 = vmin_f32(vmax_f32(vadd_f32(v29, (float32x2_t)0xBF000000BF000000), 0), v157);
            v31 = vcvt_s32_f32(vmin_f32(v30, v154));
            v32 = (float32x4_t *)(*((_QWORD *)a2 + 12) + 16 * v31.i32[0]);
            *(_QWORD *)&v33 = vaddq_f32(*v32, vmulq_n_f32(vsubq_f32(v32[1], *v32), vsub_f32(v30, vcvt_f32_s32(v31)).f32[0])).u64[0];
          }
          else
          {
            v33 = *(_OWORD *)(*((_QWORD *)a2 + 12) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v29, 0), v157)).i32[0]);
          }
          v34 = vsubq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0));
          v36 = *(float32x4_t *)(v23 + 240);
          v35 = *(int8x16_t *)(v23 + 256);
          v37 = vsubq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
          v38 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v36, v37), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), vmulq_laneq_f32(vminq_f32(v37, v36), v27, 2))), vbslq_s8((int8x16_t)vcgtq_f32(v36, v34), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v33, 0), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1), vmulq_laneq_f32(vmaxq_f32(v34, v36), v28, 2)))));
          v39 = *(int32x4_t *)(v23 + 16);
          v41 = *(float32x4_t *)(v23 + 272);
          v40 = *(int8x16_t *)(v23 + 288);
          v42 = (int32x4_t)vaddq_f32(v26, vmulq_f32(vsubq_f32((float32x4_t)v22, v26), vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 0), vmulq_f32(v41, v38)), v36)));
          v43 = (float32x4_t)vrev64q_s32(v42);
          v44 = (int8x16_t)vminq_f32(vminq_f32((float32x4_t)v42, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), v43);
          v45 = (int32x4_t)vbslq_s8(v40, v44, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v40, v44, (int8x16_t)vmaxq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL))), (float32x4_t)v42));
          v46.i64[0] = v45.i64[0];
          v46.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v45, 0), (float32x4_t)vextq_s8(v9, *(int8x16_t *)&v45, 0xCuLL)).i64[1];
          v47 = (int32x4_t)vextq_s8(v46, v46, 8uLL);
          v48 = *(float32x4_t *)(v23 + 320);
          v49 = (int64x2_t)vmulq_f32(*(float32x4_t *)(v23 + 304), (float32x4_t)v46);
          v34.i64[0] = v45.i64[0];
          v34.i64[1] = v49.i64[1];
          v45.i64[1] = vdupq_laneq_s64(v49, 1).u64[0];
          v50 = vbslq_s8(v40, (int8x16_t)v47, (int8x16_t)vsubq_f32(v41, (float32x4_t)vrev64q_s32(v47)));
          v51 = vbslq_s8((int8x16_t)vcgtq_f32(v36, vsubq_f32(v34, (float32x4_t)vextq_s8(v35, v35, 8uLL))), vextq_s8(v50, v50, 8uLL), vextq_s8(v50, v50, 0xCuLL));
          v52 = (float32x4_t)vextq_s8(v51, v51, 8uLL);
          v53 = *(float32x4_t *)(v23 + 336);
          v54 = *(float32x4_t *)(v23 + 352);
          v55 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v52), v48), v53), v54);
          v56 = vmulq_f32(vmulq_f32(v55, vrecpsq_f32(v52, v55)), vsubq_f32((float32x4_t)vrev64q_s32(v45), v34));
          v57 = *(float32x4_t *)(v23 + 176);
          v58 = *(float32x4_t *)(v23 + 192);
          v59 = vmul_f32(v158, vmin_f32(vmax_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.f32), *(float32x2_t *)v58.f32));
          if (v5)
          {
            v60 = vmin_f32(vmax_f32(vadd_f32(v59, (float32x2_t)0xBF000000BF000000), 0), v156);
            v61 = vcvt_s32_f32(vmin_f32(v60, v153));
            v62 = (float32x4_t *)(*((_QWORD *)a2 + 14) + 16 * v61.i32[0]);
            *(_QWORD *)&v63 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v62[1], *v62), vsub_f32(v60, vcvt_f32_s32(v61)).f32[0])).u64[0];
          }
          else
          {
            v63 = *(_OWORD *)(*((_QWORD *)a2 + 14) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v59, 0), v156)).i32[0]);
          }
          v64 = vmvnq_s8(v40);
          v65 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v56, v58), 0);
          v66 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v56, v57), 0);
          v67 = vbslq_s8((int8x16_t)vcgtq_f32(v36, v65), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v63, 0), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1), vmulq_laneq_f32(vmaxq_f32(v65, v36), v58, 2))));
          v68 = (int32x4_t)vmulq_f32(v24, (float32x4_t)v42);
          v69 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v36, v66), (int8x16_t)vaddq_f32((float32x4_t)v35, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1), vmulq_laneq_f32(vminq_f32(v66, v36), v57, 2))), v67);
          v70 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v68, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.i8, 1)));
          v71 = *(int8x16_t *)(v23 + 368);
          v72 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v23, 2), vmulq_laneq_f32(vaddq_f32(v70, vmulq_f32(vsubq_f32((float32x4_t)v42, v70), vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 1), vmulq_f32(v41, v69)), v36))), *(float32x4_t *)v23, 3)), v36), (float32x4_t)v71);
          v73 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23, 0), vmulq_lane_f32(v72, *(float32x2_t *)v23, 1));
          v74 = (float32x4_t)vrev64q_s32(v73);
          v75 = vandq_s8(v40, (int8x16_t)vminq_f32(vminq_f32((float32x4_t)v73, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), v74));
          v76 = vorrq_s8(vandq_s8((int8x16_t)vmaxq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL)), v64), v75), (float32x4_t)v73), v64), v75);
          v77 = (float32x4_t)vextq_s8(v76, v76, 8uLL);
          v78 = (float32x4_t)vextq_s8(v76, v76, 0xCuLL);
          v79 = (int32x4_t)vaddq_f32(v78, vmulq_f32(v53, vsubq_f32(v77, v78)));
          v80 = *(float32x4_t *)(v23 + 208);
          v81 = *(float32x4_t *)(v23 + 224);
          v82 = vmul_f32(v159, vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), *(float32x2_t *)v80.f32), *(float32x2_t *)v81.f32));
          if (v5)
          {
            v83 = vmin_f32(vmax_f32(vadd_f32(v82, (float32x2_t)0xBF000000BF000000), 0), v155);
            v84 = vcvt_s32_f32(vmin_f32(v83, v152));
            v85 = (float32x4_t *)(*((_QWORD *)a2 + 16) + 16 * v84.i32[0]);
            *(_QWORD *)&v86 = vaddq_f32(*v85, vmulq_n_f32(vsubq_f32(v85[1], *v85), vsub_f32(v83, vcvt_f32_s32(v84)).f32[0])).u64[0];
          }
          else
          {
            v86 = *(_OWORD *)(*((_QWORD *)a2 + 16) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v82, 0), v155)).i32[0]);
          }
          v87 = *(float32x4_t *)(v23 + 384);
          v88 = *(float32x4_t *)(v23 + 400);
          v89 = vminq_f32(vmaxq_f32(vmulq_f32(v72, v87), v36), v87);
          v90 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
          v91 = (int8x16_t)vsubq_f32(v90, (float32x4_t)vandq_s8(v71, (int8x16_t)vcgtq_f32(v90, v89)));
          v92 = (int32x4_t)vmulq_f32(v88, vsubq_f32(vminq_f32(vaddq_f32((float32x4_t)v71, (float32x4_t)v91), v87), (float32x4_t)v91));
          v93 = vmulq_f32(v88, (float32x4_t)v91);
          v94 = (int8x16_t)vaddq_f32((float32x4_t)v35, (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32(v93, (float32x4_t)vrev64q_s32((int32x4_t)v93))), vandq_s8(vextq_s8(v91, v91, 4uLL), v64)));
          v95 = *((_DWORD *)a2 + 38);
          v96 = vaddq_f32(vsubq_f32((float32x4_t)v94, (float32x4_t)v9), v20);
          v97 = vcvtq_s32_f32(v96);
          v96.i64[0] = vaddq_s32(v97, vcgtq_f32(vcvtq_f32_s32(v97), v96)).u64[0];
          v98 = *((_QWORD *)a2 + 18);
          v99 = *(float32x4_t *)(v98 + 16 * (v96.i32[0] + v96.i32[1] * v95));
          v100 = vandq_s8(v94, v64);
          v101 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)v92, (float32x4_t)v94)), v100);
          v102 = vaddq_f32(vsubq_f32(v101, (float32x4_t)v9), v20);
          v103 = vcvtq_s32_f32(v102);
          v104 = vaddq_s32(v103, vcgtq_f32(vcvtq_f32_s32(v103), v102)).u64[0];
          v105 = *(float32x4_t *)(v98 + 16 * ((int)v104 + HIDWORD(v104) * v95));
          v106 = (float32x4_t)vrev64q_s32(v92);
          v107 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32(v106, v101)), v100);
          v108 = vaddq_f32(vsubq_f32(v107, (float32x4_t)v9), v20);
          v109 = vcvtq_s32_f32(v108);
          v108.i64[0] = vaddq_s32(v109, vcgtq_f32(vcvtq_f32_s32(v109), v108)).u64[0];
          v110 = vandq_s8(v40, (int8x16_t)vsubq_f32(v107, (float32x4_t)v92));
          v111 = (float32x4_t)vorrq_s8(v110, v100);
          v112 = vaddq_f32(vsubq_f32(v111, (float32x4_t)v9), v20);
          v113 = vcvtq_s32_f32(v112);
          v112.i64[0] = vaddq_s32(v113, vcgtq_f32(vcvtq_f32_s32(v113), v112)).u64[0];
          v114 = *(float32x4_t *)(v98 + 16 * (v112.i32[0] + v112.i32[1] * v95));
          v115 = vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v111), v64);
          v116 = (float32x4_t)vorrq_s8(v115, v110);
          v117 = vaddq_f32(vsubq_f32(v116, (float32x4_t)v9), v20);
          v118 = vcvtq_s32_f32(v117);
          v117.i64[0] = vaddq_s32(v118, vcgtq_f32(vcvtq_f32_s32(v118), v117)).u64[0];
          v119 = v117.i32[0] + v117.i32[1] * v95;
          v120 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vsubq_f32(v116, v106)), v115);
          v121 = vaddq_f32(vsubq_f32(v120, (float32x4_t)v9), v20);
          v122 = vcvtq_s32_f32(v121);
          v123 = *(float32x4_t *)(v98 + 16 * v119);
          v121.i64[0] = vaddq_s32(v122, vcgtq_f32(vcvtq_f32_s32(v122), v121)).u64[0];
          v124 = v121.i32[0] + v121.i32[1] * v95;
          v125 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)v92, v120)), v115);
          v126 = vaddq_f32(vsubq_f32(v125, (float32x4_t)v9), v20);
          v127 = vcvtq_s32_f32(v126);
          v126.i64[0] = vaddq_s32(v127, vcgtq_f32(vcvtq_f32_s32(v127), v126)).u64[0];
          v128 = vaddq_f32(vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32(v106, v125)), v115), (float32x4_t)v9), v20);
          v129 = vcvtq_s32_f32(v128);
          v128.i64[0] = vaddq_s32(v129, vcgtq_f32(vcvtq_f32_s32(v129), v128)).u64[0];
          v130 = vsubq_f32(v89, (float32x4_t)v91);
          v131 = vaddq_f32(v99, vmulq_n_f32(vsubq_f32(v105, v99), v130.f32[0]));
          v132 = vaddq_f32(v114, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v98 + 16 * (v108.i32[0] + v108.i32[1] * v95)), v114), v130.f32[0]));
          v133 = vaddq_f32(*(float32x4_t *)(v98 + 16 * v124), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v98 + 16 * (v126.i32[0] + v126.i32[1] * v95)), *(float32x4_t *)(v98 + 16 * v124)), v130.f32[0]));
          v134 = vaddq_f32(v131, vmulq_lane_f32(vsubq_f32(v132, v131), *(float32x2_t *)v130.f32, 1));
          v135 = (int8x16_t)vsubq_f32(vaddq_f32(v134, vmulq_laneq_f32(vsubq_f32(vaddq_f32(v133, vmulq_lane_f32(vsubq_f32(vaddq_f32(v123, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v98 + 16 * (v128.i32[0] + v128.i32[1] * v95)), v123), v130.f32[0])), v133), *(float32x2_t *)v130.f32, 1)), v134),
                                  v130,
                                  2)),
                              v53);
          v136 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8(v135, v135, 4uLL), *(float32x4_t *)(v23 + 32));
          v137 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vmulq_f32((float32x4_t)v136, (float32x4_t)v136)), vandq_s8(v136, v64));
          v138 = vaddq_f32(vmulq_lane_f32((float32x4_t)vrev64q_s32((int32x4_t)v137), *(float32x2_t *)v137.f32, 1), v137);
          v139 = vminq_f32(vmulq_f32(v48, vrsqrteq_f32(v138)), v54);
          v140 = vsubq_f32(v88, vmulq_f32(vminq_f32(vmulq_f32(v139, vrsqrtsq_f32(vmulq_f32(v139, v138), v139)), v54), v138));
          v141 = (int32x4_t)vmulq_f32(v24, (float32x4_t)v73);
          v142 = (int32x4_t)vmulq_f32((float32x4_t)v73, *(float32x4_t *)(v23 + 64));
          v143 = (int8x16_t)vmulq_f32((float32x4_t)v73, *(float32x4_t *)(v23 + 80));
          v141.i64[0] = vorrq_s8(vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v142, v9, 4uLL), vaddq_f32((float32x4_t)v142, (float32x4_t)vrev64q_s32(v142))), v64), vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v141, 1), vaddq_f32((float32x4_t)v141, (float32x4_t)vrev64q_s32(v141))))).u64[0];
          v141.i64[1] = vaddq_f32(*(float32x4_t *)&v143, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v143, 0), (float32x4_t)vextq_s8(v9, v143, 0xCuLL))).i64[1];
          v144 = (float32x4_t)vdupq_laneq_s32(v79, 2);
          v145 = vsubq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0));
          v146 = vsubq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 0));
          v147 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v48, vmulq_f32(vsubq_f32((float32x4_t)v141, v48), vmaxq_f32(vaddq_f32((float32x4_t)v71, vmulq_n_f32(vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v39, 2), vmulq_f32(v41, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v48, v146), (int8x16_t)vaddq_f32(v53, vaddq_f32(
                                                                                           (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1),
                                                                                           vmulq_laneq_f32(vminq_f32(v146, v48), v80, 2))), vbslq_s8((int8x16_t)vcgtq_f32(v48, v145), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v86, 0), (int8x16_t)vaddq_f32(v53, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1), vmulq_laneq_f32(vmaxq_f32(v145, v48), v81, 2))))))), (float32x4_t)v71), vmaxq_f32(v140, v36).f32[0])), v48))),
                                  v64),
                                vandq_s8(v40, (int8x16_t)v141));
          v148 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v23 + 96), v147);
          v149 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v23 + 112), v147);
          v150 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v23 + 128), v147);
          v148.i64[0] = vorrq_s8(vandq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v148, 1), vaddq_f32((float32x4_t)v148, (float32x4_t)vrev64q_s32(v148)))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v149, v9, 4uLL), vaddq_f32((float32x4_t)v149, (float32x4_t)vrev64q_s32(v149))), v64)).u64[0];
          v148.i64[1] = vaddq_f32(*(float32x4_t *)&v150, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v150, 0), (float32x4_t)vextq_s8(v9, v150, 0xCuLL))).i64[1];
          *(int8x16_t *)(v11 + v21) = vbslq_s8(*(int8x16_t *)(v23 + 416), v22, (int8x16_t)v148);
          v21 += 16;
        }
        while (16 * v10 != v21);
      }
      ++v8;
      v11 += v18;
      v12 += v19;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSatCurves::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  HGRenderer *v8;
  HGNode *v9;
  unsigned int v10;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  HGNode *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  HGNode *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  switch(a3)
  {
    case 0:
      return v5;
    case 1:
      v8 = a2;
      v9 = this;
      v10 = 1;
      goto LABEL_5;
    case 2:
      v8 = a2;
      v9 = this;
      v10 = 2;
      goto LABEL_5;
    case 3:
      v8 = a2;
      v9 = this;
      v10 = 3;
LABEL_5:
      Input = HGRenderer::GetInput(v8, v9, v10);
      DOD = HGRenderer::GetDOD(a2, Input);
      v14 = HGRectIntersection(v5, v4, DOD, v13);
      if (HGRectIsNull(v14, v15))
        goto LABEL_6;
      v17 = HGRenderer::GetInput(a2, this, 0);
      v18 = HGRenderer::GetDOD(a2, v17);
      v20 = v19;
      v21 = HGRenderer::GetInput(a2, this, 4u);
      v22 = HGRenderer::GetDOD(a2, v21);
      v24 = HGRectUnion(v22, v23, 0, 0);
      v5 = HGRectUnion(v18, v20, v24, v25);
      break;
    case 4:
      v16 = &HGRectInfinite;
      goto LABEL_8;
    default:
LABEL_6:
      v16 = &HGRectNull;
LABEL_8:
      v5 = *(_QWORD *)v16;
      break;
  }
  return v5;
}

uint64_t HgcSatCurves::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRenderer *v6;
  unsigned int v7;
  HGNode *Input;

  switch(a3)
  {
    case 0:
      return *(_QWORD *)&a4.var0;
    case 1:
      v6 = a2;
      v7 = 1;
      goto LABEL_7;
    case 2:
      v6 = a2;
      v7 = 2;
      goto LABEL_7;
    case 3:
      v6 = a2;
      v7 = 3;
      goto LABEL_7;
    case 4:
      v6 = a2;
      v7 = 4;
LABEL_7:
      Input = HGRenderer::GetInput(v6, this, v7);
      *(_QWORD *)&a4.var0 = HGRenderer::GetDOD(a2, Input);
      break;
    default:
      *(_QWORD *)&a4.var0 = 0;
      break;
  }
  return *(_QWORD *)&a4.var0;
}

void HgcSatCurves::HgcSatCurves(HgcSatCurves *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E6500;
  v3 = operator new();
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051510;
  *(_OWORD *)(v3 + 272) = xmmword_1B3051520;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 304) = xmmword_1B3051530;
  *(_OWORD *)(v3 + 320) = xmmword_1B3051540;
  *(_OWORD *)(v3 + 336) = xmmword_1B3051550;
  *(int32x4_t *)(v3 + 352) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 368) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 384) = xmmword_1B3051570;
  *(_OWORD *)(v3 + 400) = xmmword_1B3051580;
  *(_OWORD *)(v3 + 416) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSatCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 5);
  (*(void (**)(HgcSatCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 5);
  (*(void (**)(HgcSatCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 4, 1);
  (*(void (**)(HgcSatCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 3, 5);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2872734(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSatCurves::~HgcSatCurves(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E6500;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40502CBA4ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSatCurves::~HgcSatCurves(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSatCurves::SetParameter(HgcSatCurves *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_78;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_78;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a4
        && v10[2].n128_f32[1] == a5
        && v10[2].n128_f32[2] == 0.0
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_f32[0] = a4;
      v10[2].n128_f32[1] = a5;
      a3.n128_f32[1] = a4;
      v10[2].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[27] = a3;
      goto LABEL_78;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_78;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_78;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_78;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_78;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_78;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_78;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_78;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_78;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
      goto LABEL_78;
    case 12:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6)
        return 0;
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
      goto LABEL_78;
    case 13:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[52] == a3.n128_f32[0] && v21[53] == a4 && v21[54] == a5 && v21[55] == a6)
        return 0;
      v21[52] = a3.n128_f32[0];
      v21[53] = a4;
      v21[54] = a5;
      v21[55] = a6;
      goto LABEL_78;
    case 14:
      v22 = (float *)*((_QWORD *)this + 51);
      if (v22[56] == a3.n128_f32[0] && v22[57] == a4 && v22[58] == a5 && v22[59] == a6)
        return 0;
      v22[56] = a3.n128_f32[0];
      v22[57] = a4;
      v22[58] = a5;
      v22[59] = a6;
LABEL_78:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSatCurves::GetParameter(HgcSatCurves *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_17;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_17;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[108];
      a3[1] = v6[109];
      a3[2] = v6[110];
      v4 = v6 + 111;
      goto LABEL_17;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_17;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_17;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_17;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_17;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_17;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_17;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_17;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_17;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
      goto LABEL_17;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      v4 = v16 + 51;
      goto LABEL_17;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      v4 = v17 + 55;
      goto LABEL_17;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[56];
      a3[1] = v18[57];
      a3[2] = v18[58];
      v4 = v18 + 59;
LABEL_17:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcStyleTransferANEPost::GetProgram(HgcStyleTransferANEPost *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004e3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r1.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r0.w = (half) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy).w;\n"
             "    r2.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r2.z = r1.x;\n"
             "    r2.y = r0.x;\n"
             "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f52d0ab7:1384f653:b903e6f0:1d860112\n"
             "//SIG=00400000:0000000f:0000000f:0000000f:0001:0000:0003:0000:0000:0000:001e:0000:0004:04:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004c6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r1.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    r0.w = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy).w;\n"
             "    r2.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r2.z = r1.x;\n"
             "    r2.y = r0.x;\n"
             "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=602bc2e9:4d81d660:e5a9a1ef:810a49a3\n"
             "//SIG=00000000:0000000f:0000000f:00000000:0001:0000:0003:0000:0000:0000:001e:0000:0004:04:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000401\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r1.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    r0.w = texture2D(hg_Texture3, hg_TexCoord3.xy).w;\n"
           "    r2.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r2.z = r1.x;\n"
           "    r2.y = r0.x;\n"
           "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=9773afd2:7c1ee8b3:e770e7da:fd748111\n"
           "//SIG=00000000:0000000f:0000000f:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:04:0:1:0\n";
  }
}

void HgcStyleTransferANEPost::InitProgramDescriptor(HgcStyleTransferANEPost *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcStyleTransferANEPost_hgc_visible", "//Metal1.0     \n//LEN=0000000236\n[[ visible ]] FragmentOut HgcStyleTransferANEPost_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color1.x;\n"
    "    r1.x = color2.x;\n"
    "    r0.w = color3.w;\n"
    "    r2.x = color0.x;\n"
    "    r2.z = r1.x;\n"
    "    r2.y = r0.x;\n"
    "    r0.xyz = r2.xyz*c0.xxx + c0.xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2872EE0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcStyleTransferANEPost");
}

void sub_1B2872EF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28730B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2873108()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2873100);
}

_QWORD *HgcStyleTransferANEPost::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcStyleTransferANEPost [hgc1]");
}

uint64_t HgcStyleTransferANEPost::BindTexture(HgcStyleTransferANEPost *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  uint64_t result;
  int v7;

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 0;
      goto LABEL_7;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 1;
      goto LABEL_7;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 2;
      goto LABEL_7;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 3;
LABEL_7:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        result = 0;
      }
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcStyleTransferANEPost::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcStyleTransferANEPost::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t *v38;
  uint64_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  float32x4_t v45;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(int *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 80);
    v8 = *(int *)(a2 + 88);
    v9 = *(_QWORD *)(a2 + 128);
    v10 = *(_QWORD *)(a2 + 112);
    v11 = 16 * *(int *)(a2 + 136);
    v12 = 16 * *(int *)(a2 + 120);
    v13 = 16 * *(int *)(a2 + 104);
    v14 = *(_QWORD *)(a2 + 96);
    v15 = 16 * v8;
    v16 = 16 * v5;
    do
    {
      if (v4 < 4)
      {
        LODWORD(v39) = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int32x4_t *)(v14 + v17);
          v20 = *(int32x4_t *)(v14 + v17 + 16);
          v21 = *(int32x4_t *)(v14 + v17 + 32);
          v22 = *(int32x4_t *)(v14 + v17 + 48);
          v23.i64[0] = *(_QWORD *)(v14 + v17);
          v24.i64[0] = *(_QWORD *)(v14 + v17 + 16);
          v25.i64[0] = *(_QWORD *)(v14 + v17 + 32);
          v26 = *(int8x16_t *)(v7 + v17);
          v27 = *(int8x16_t *)(v7 + v17 + 16);
          v28 = *(int8x16_t *)(v7 + v17 + 32);
          v29 = *(int8x16_t *)(v7 + v17 + 48);
          v26.i64[1] = *(_QWORD *)(v10 + v17);
          v27.i64[1] = *(_QWORD *)(v10 + v17 + 16);
          v28.i64[1] = *(_QWORD *)(v10 + v17 + 32);
          v23.i64[1] = *(_QWORD *)(v9 + v17 + 8);
          v29.i64[1] = *(_QWORD *)(v10 + v17 + 48);
          v24.i64[1] = *(_QWORD *)(v9 + v17 + 24);
          v19.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17), 1).u64[0];
          v20.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17 + 16), 1).u64[0];
          v30.i64[0] = *(_QWORD *)(v14 + v17 + 48);
          v21.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17 + 32), 1).u64[0];
          v22.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + v17 + 48), 1).u64[0];
          v31 = *(_QWORD *)(a1 + 408);
          v32 = *(float32x4_t *)(v31 + 16);
          v25.i64[1] = *(_QWORD *)(v9 + v17 + 40);
          v30.i64[1] = *(_QWORD *)(v9 + v17 + 56);
          v33 = *(int8x16_t *)(v31 + 32);
          v34 = (float32x4_t)vbslq_s8(v33, v23, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v19), v26))));
          v35 = (float32x4_t)vbslq_s8(v33, v24, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v20), v27))));
          v36 = (float32x4_t)vbslq_s8(v33, v25, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v21), v28))));
          v37 = (float32x4_t)vbslq_s8(v33, v30, (int8x16_t)vaddq_f32(v32, vmulq_f32(v32, (float32x4_t)vbslq_s8(*(int8x16_t *)v31, (int8x16_t)vrev64q_s32(v22), v29))));
          v38 = (int8x16_t *)(v6 + v17);
          *v38 = vbslq_s8(v33, v23, (int8x16_t)vmulq_laneq_f32(v34, v34, 3));
          v38[1] = vbslq_s8(v33, v24, (int8x16_t)vmulq_laneq_f32(v35, v35, 3));
          v38[2] = vbslq_s8(v33, v25, (int8x16_t)vmulq_laneq_f32(v36, v36, 3));
          v38[3] = vbslq_s8(v33, v30, (int8x16_t)vmulq_laneq_f32(v37, v37, 3));
          v18 -= 4;
          v17 += 64;
        }
        while (v4 + v18 > 3);
        LODWORD(v39) = -v18;
      }
      if ((int)v39 < v4)
      {
        v39 = v39;
        do
        {
          v40 = *(int32x4_t *)(v14 + 16 * v39);
          v41.i64[0] = *(_QWORD *)(v14 + 16 * v39);
          v41.i64[1] = *(_QWORD *)(v9 + 16 * v39 + 8);
          v42 = *(int8x16_t *)(v7 + 16 * v39);
          v42.i64[1] = *(_QWORD *)(v10 + 16 * v39);
          v40.i64[1] = vdupq_laneq_s64(*(int64x2_t *)(v9 + 16 * v39), 1).u64[0];
          v43 = *(_QWORD *)(a1 + 408);
          v44 = *(int8x16_t *)(v43 + 32);
          v45 = (float32x4_t)vbslq_s8(v44, v41, (int8x16_t)vaddq_f32(*(float32x4_t *)(v43 + 16), vmulq_f32(*(float32x4_t *)(v43 + 16), (float32x4_t)vbslq_s8(*(int8x16_t *)v43, (int8x16_t)vrev64q_s32(v40), v42))));
          *(int8x16_t *)(v6 + 16 * v39++) = vbslq_s8(v44, v41, (int8x16_t)vmulq_laneq_f32(v45, v45, 3));
        }
        while (v39 < v4);
      }
      ++v3;
      v9 += v11;
      v10 += v12;
      v14 += v13;
      v7 += v15;
      v6 += v16;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcStyleTransferANEPost::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 4)
    return 0;
  else
    return a4;
}

uint64_t HgcStyleTransferANEPost::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 4)
    return 0;
  else
    return a4;
}

void HgcStyleTransferANEPost::HgcStyleTransferANEPost(HgcStyleTransferANEPost *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E6768;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B3050FF0;
  v3[1] = xmmword_1B3051510;
  v3[2] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28735A8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcStyleTransferANEPost::~HgcStyleTransferANEPost(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E6768;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40EED21634);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcStyleTransferANEPost::~HgcStyleTransferANEPost(this);
  HGObject::operator delete(v1);
}

uint64_t HgcStyleTransferANEPost::SetParameter(HgcStyleTransferANEPost *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcStyleTransferANEPost::GetParameter(HgcStyleTransferANEPost *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcASC_CDL::GetProgram(HgcASC_CDL *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003aa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r2.xyz = half3(dot(r1.xyz, c0.xyz));\n"
             "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, half3(hg_Params[3].xyz)), 0.00000h, 1.00000h);\n"
             "    r1.w = r0.w;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5ba0f389:acdf4bc8:beb086b0:fb53554a\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000383\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz, 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
             "    r2.xyz = float3(dot(r1.xyz, c0.xyz));\n"
             "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, hg_Params[3].xyz), 0.00000f, 1.00000f);\n"
             "    r1.w = r0.w;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2e44c5e3:f30a6789:564267a0:1f6c5899\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003e6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = clamp(r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.xyz = vec3(dot(r1.xyz, c0.xyz));\n"
           "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, hg_ProgramLocal3.xyz), vec3(0.00000), vec3(1.00000));\n"
           "    r1.w = r0.w;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=f796bbb7:48b83b79:d126ddf0:4c8345b2\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcASC_CDL::InitProgramDescriptor(HgcASC_CDL *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcASC_CDL_hgc_visible", "//Metal1.0     \n//LEN=0000000257\n[[ visible ]] FragmentOut HgcASC_CDL_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.2125999928, 0.7152000070, 0.07220000029, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = clamp(r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz, 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
    "    r2.xyz = float3(dot(r1.xyz, c0.xyz));\n"
    "    r1.xyz = clamp(mix(r2.xyz, r1.xyz, hg_Params[3].xyz), 0.00000f, 1.00000f);\n"
    "    r1.w = r0.w;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28736F8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcASC_CDL");
}

void sub_1B2873708(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2873808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2873848()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2873840);
}

_QWORD *HgcASC_CDL::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcASC_CDL [hgc1]");
}

uint64_t HgcASC_CDL::BindTexture(HgcASC_CDL *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcASC_CDL::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcASC_CDL::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t *v71;
  unsigned int v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v72 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v11 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vaddq_f32(v14, vmulq_f32(v12, *(float32x4_t *)v13));
          v16 = vaddq_f32(v14, vmulq_f32(v11, *(float32x4_t *)v13));
          v17 = *(float32x4_t *)(v13 + 64);
          v18 = *(float32x4_t *)(v13 + 80);
          v19 = vminq_f32(vmaxq_f32(v15, v17), v18);
          v20 = vminq_f32(vmaxq_f32(v16, v17), v18);
          v21 = *(int8x16_t *)(v13 + 96);
          v22 = *(float32x4_t *)(v13 + 112);
          v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v18);
          v24 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v18);
          v25 = *(int8x16_t *)(v13 + 128);
          v26 = *(float32x4_t *)(v13 + 144);
          v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v19)));
          v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v20)));
          v29 = *(float32x4_t *)(v13 + 160);
          v30 = *(float32x4_t *)(v13 + 176);
          v31 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v23, v29));
          v32 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v24, v29));
          v33 = vaddq_f32(vsubq_f32(v27, v26), v31);
          v34 = vsubq_f32(vsubq_f32(v23, v18), vmulq_f32(vmulq_f32(v30, v31), v23));
          v35 = vsubq_f32(vsubq_f32(v24, v18), vmulq_f32(vmulq_f32(v30, v32), v24));
          v36 = *(float32x4_t *)(v13 + 192);
          v37 = *(float32x4_t *)(v13 + 208);
          v38 = *(float32x4_t *)(v13 + 224);
          v39 = *(float32x4_t *)(v13 + 240);
          v40 = vaddq_f32(vaddq_f32(vsubq_f32(v28, v26), v32), vmulq_f32(v35, vaddq_f32(vaddq_f32(v38, vmulq_f32(v35, v39)), vmulq_f32(vmulq_f32(v35, v35), vaddq_f32(v36, vmulq_f32(v37, v35))))));
          v41 = *(float32x4_t *)(v13 + 32);
          v42 = *(float32x4_t *)(v13 + 48);
          v43 = vmulq_f32(v41, vaddq_f32(v33, vmulq_f32(v34, vaddq_f32(vaddq_f32(v38, vmulq_f32(v34, v39)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v36, vmulq_f32(v37, v34)))))));
          v44 = vmulq_f32(v41, v40);
          v45 = *(float32x4_t *)(v13 + 256);
          v46 = *(float32x4_t *)(v13 + 272);
          v47 = vmaxq_f32(v43, v45);
          v48 = vmaxq_f32(v44, v45);
          v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v49, v47)));
          v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v50, v48)));
          v53 = vsubq_f32(v47, v51);
          v54 = vsubq_f32(v48, v52);
          v55 = *(float32x4_t *)(v13 + 288);
          v56 = *(float32x4_t *)(v13 + 304);
          v57 = vmulq_f32(v54, vaddq_f32(v56, vmulq_f32(v54, vaddq_f32(v46, vmulq_f32(v55, v54)))));
          v58 = vaddq_f32(v18, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, vaddq_f32(v46, vmulq_f32(v55, v53))))));
          v59 = vcvtq_s32_f32(v52);
          v60 = *(int32x4_t *)(v13 + 320);
          v61 = *(float32x4_t *)(v13 + 336);
          v62 = vmulq_f32(v58, (float32x4_t)vshlq_n_s32(vaddq_s32(v60, vcvtq_s32_f32(v51)), 0x17uLL));
          v63 = vmulq_f32(vaddq_f32(v18, v57), (float32x4_t)vshlq_n_s32(vaddq_s32(v60, v59), 0x17uLL));
          v64 = (int32x4_t)vmulq_f32(v61, v62);
          v65 = (int32x4_t)vmulq_f32(v61, v63);
          v66 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v64, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)));
          v67 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v65, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 1)));
          v68 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v66, vmulq_f32(v42, vsubq_f32(v62, v66))), v17), v18);
          v69 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v67, vmulq_f32(v42, vsubq_f32(v63, v67))), v17), v18);
          v70 = *(int8x16_t *)(v13 + 352);
          v71 = (int8x16_t *)(v5 + v10);
          v71[-1] = vbslq_s8(v70, (int8x16_t)v12, v68);
          *v71 = vbslq_s8(v70, (int8x16_t)v11, v69);
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v72 = -v9;
      }
      if ((int)v72 < v4)
      {
        v73 = *(float32x4_t *)(v6 + 16 * v72);
        v74 = *(_QWORD *)(a1 + 408);
        v75 = *(float32x4_t *)(v74 + 64);
        v76 = *(float32x4_t *)(v74 + 80);
        v77 = vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v74 + 16), vmulq_f32(v73, *(float32x4_t *)v74)), v75), v76);
        v78 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v74 + 96), (int8x16_t)v77), (int8x16_t)v76);
        v79 = (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v78, *(float32x4_t *)(v74 + 160)));
        v80 = vsubq_f32(vsubq_f32(v78, v76), vmulq_f32(vmulq_f32(*(float32x4_t *)(v74 + 176), v79), v78));
        v81 = vmaxq_f32(vmulq_f32(*(float32x4_t *)(v74 + 32), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v74 + 128), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v74 + 112), v77))), *(float32x4_t *)(v74 + 144)), v79), vmulq_f32(v80, vaddq_f32(vaddq_f32(*(float32x4_t *)(v74 + 224), vmulq_f32(v80, *(float32x4_t *)(v74 + 240))), vmulq_f32(vmulq_f32(v80, v80), vaddq_f32(*(float32x4_t *)(v74 + 192), vmulq_f32(*(float32x4_t *)(v74 + 208), v80))))))),
                *(float32x4_t *)(v74 + 256));
        v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
        v83 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v82, v81)));
        v84 = vsubq_f32(v81, v83);
        v85 = vmulq_f32(vaddq_f32(v76, vmulq_f32(v84, vaddq_f32(*(float32x4_t *)(v74 + 304), vmulq_f32(v84, vaddq_f32(*(float32x4_t *)(v74 + 272), vmulq_f32(*(float32x4_t *)(v74 + 288), v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v74 + 320), vcvtq_s32_f32(v83)), 0x17uLL));
        v86 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v74 + 336), v85);
        v87 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v86, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)));
        *(int8x16_t *)(v5 + 16 * v72) = vbslq_s8(*(int8x16_t *)(v74 + 352), (int8x16_t)v73, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v87, vmulq_f32(*(float32x4_t *)(v74 + 48), vsubq_f32(v85, v87))), v75), v76));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcASC_CDL::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcASC_CDL::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcASC_CDL::HgcASC_CDL(HgcASC_CDL *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E69D0;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051600;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051610;
  *(_OWORD *)(v3 + 128) = xmmword_1B3051620;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051630;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051640;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051510;
  *(_OWORD *)(v3 + 192) = xmmword_1B3051650;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051660;
  *(_OWORD *)(v3 + 224) = xmmword_1B3051670;
  *(_OWORD *)(v3 + 240) = xmmword_1B3051680;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051690;
  *(_OWORD *)(v3 + 272) = xmmword_1B30516A0;
  *(_OWORD *)(v3 + 288) = xmmword_1B30516B0;
  *(_OWORD *)(v3 + 304) = xmmword_1B30516C0;
  *(_OWORD *)(v3 + 320) = xmmword_1B30516D0;
  *(_OWORD *)(v3 + 336) = xmmword_1B30516E0;
  *(_OWORD *)(v3 + 352) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 368) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2873EE4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcASC_CDL::~HgcASC_CDL(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E69D0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F47AF14);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcASC_CDL::~HgcASC_CDL(this);
  HGObject::operator delete(v1);
}

uint64_t HgcASC_CDL::SetParameter(HgcASC_CDL *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  __n128 *v11;
  int32x4_t v12;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_23;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_23;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_23;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a3.n128_f32[0]
        && v11[3].n128_f32[2] == a3.n128_f32[0]
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v12.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3] = (__n128)v12;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[23] = a3;
LABEL_23:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcASC_CDL::GetParameter(HgcASC_CDL *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_6;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_6;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_6;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[92];
      a3[1] = v7[93];
      a3[2] = v7[94];
      v4 = v7 + 95;
LABEL_6:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcColorCurves::GetProgram(HgcColorCurves *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_42;
    else
      return aMetal10Len0000_43;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_13;
  }
}

void HgcColorCurves::InitProgramDescriptor(HgcColorCurves *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorCurves_hgc_visible", aMetal10Len0000_44);
}

void sub_1B2874254()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorCurves");
}

void sub_1B2874264(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051710;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2874564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28745E4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28745DCLL);
}

_QWORD *HgcColorCurves::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorCurves [hgc1]");
}

uint64_t HgcColorCurves::BindTexture(HgcColorCurves *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 0, 0, 0, 0);
      v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v4)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        goto LABEL_17;
      }
      return result;
    case 1:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v6.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v7.n128_u32[0] = 0;
      v8.n128_u32[0] = 0;
      v9.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 18, v6, v7, v8, v9);
      goto LABEL_17;
    case 2:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v10.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v11.n128_u32[0] = 0;
      v12.n128_u32[0] = 0;
      v13.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 19, v10, v11, v12, v13);
      goto LABEL_17;
    case 3:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v14.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v15.n128_u32[0] = 0;
      v16.n128_u32[0] = 0;
      v17.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 20, v14, v15, v16, v17);
      goto LABEL_17;
    case 4:
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 43) == 1)
      {
        (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 4, 0);
        (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
      }
      v18.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
      v19.n128_u32[0] = 0;
      v20.n128_u32[0] = 0;
      v21.n128_u32[0] = 0;
      (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 21, v18, v19, v20, v21);
LABEL_17:
      result = 0;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcColorCurves::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, a1[51] + 128, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, a1[51] + 144, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, a1[51] + 160, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, a1[51] + 176, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, a1[51] + 192, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, a1[51] + 208, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, a1[51] + 224, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, a1[51] + 240, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 16, a1[51] + 256, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 17, a1[51] + 272, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcColorCurves::RenderTile(HgcColorCurves *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x2_t v42;
  uint64_t v43;
  __int128 v44;
  float32x2_t v45;
  int32x2_t v46;
  __int128 v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int32x2_t v71;
  uint64_t v72;
  int8x16_t v73;
  float32x2_t v74;
  int32x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int32x2_t v83;
  int32x4_t v84;
  float32x2_t v85;
  int32x2_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int32x2_t v94;
  __int128 v95;
  float32x2_t v96;
  int32x2_t v97;
  __int128 v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  float32x2_t v116;
  float32x2_t v117;
  int32x2_t v118;
  uint64_t v119;
  int8x16_t v120;
  float32x2_t v121;
  int32x2_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int32x2_t v130;
  int32x4_t v131;
  float32x2_t v132;
  int32x2_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int32x2_t v141;
  __int128 v142;
  float32x2_t v143;
  int32x2_t v144;
  __int128 v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x16_t v162;
  int8x16_t v163;
  float32x2_t v164;
  float32x2_t v165;
  int32x2_t v166;
  uint64_t v167;
  int8x16_t v168;
  float32x2_t v169;
  int32x2_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int32x4_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  int32x2_t v177;
  int32x4_t v178;
  float32x2_t v179;
  int32x2_t v180;
  int32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  int32x2_t v191;
  __int128 v192;
  float32x2_t v193;
  int32x2_t v194;
  __int128 v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int8x16_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t v217;
  float32x4_t v218;
  int32x4_t v219;
  float32x4_t v220;
  int8x16_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t *v230;
  unsigned int v231;
  int8x16_t v232;
  uint64_t v233;
  float32x4_t v234;
  int32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x2_t v239;
  float32x2_t v240;
  int32x2_t v241;
  float32x4_t *v242;
  __int128 v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x2_t v253;
  float32x2_t v254;
  int32x2_t v255;
  uint64_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  float32x2_t v260;
  float32x2_t v261;
  int32x2_t v262;
  int32x4_t v263;
  int8x16_t v264;
  int8x16_t v265;
  float32x2_t v266;
  float32x2_t v267;
  int32x2_t v268;
  __int128 v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  int8x16_t v279;
  float32x2_t v280;
  float32x2_t v281;
  int32x2_t v282;
  uint64_t v283;
  int8x16_t v284;
  float32x2_t v285;
  int32x2_t v286;
  int32x4_t v287;
  int8x16_t v288;
  int8x16_t v289;
  float32x2_t v290;
  float32x2_t v291;
  int32x2_t v292;
  __int128 v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  int8x16_t v302;
  float32x2_t v303;
  float32x2_t v304;
  int32x2_t v305;
  uint64_t v306;
  int8x16_t v307;
  float32x2_t v308;
  int32x2_t v309;
  int32x4_t v310;
  int8x16_t v311;
  float32x2_t v312;
  float32x2_t v313;
  int32x2_t v314;
  __int128 v315;
  float32x4_t v316;
  int8x16_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  int8x16_t v322;
  int32x4_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int8x16_t v328;
  float32x2_t v330;
  float32x2_t v331;
  float32x2_t v332;
  float32x2_t v333;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcColorCurves *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v6 >= 1)
  {
    v7 = 0;
    v8.i32[1] = 0;
    v8.f32[0] = (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    v11.i32[1] = 0;
    v9.i32[1] = 0;
    v9.f32[0] = (float)(*((_DWORD *)a2 + 62) - *((_DWORD *)a2 + 60));
    v10.i32[1] = 0;
    v10.f32[0] = (float)(*((_DWORD *)a2 + 66) - *((_DWORD *)a2 + 64));
    v11.f32[0] = (float)(*((_DWORD *)a2 + 70) - *((_DWORD *)a2 + 68));
    v12 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v13 = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 10);
    __asm { FMOV            V0.2S, #-1.0 }
    v332 = vadd_f32((float32x2_t)v8.u32[0], _D0);
    v330 = vadd_f32(v332, _D0);
    v20 = vadd_f32((float32x2_t)v9.u32[0], _D0);
    v333 = vadd_f32(v20, _D0);
    v21 = vadd_f32((float32x2_t)v10.u32[0], _D0);
    v22 = vadd_f32(v21, _D0);
    v23 = vadd_f32((float32x2_t)v11.u32[0], _D0);
    v24 = vadd_f32(v23, _D0);
    v25 = 16 * *((int *)a2 + 6);
    v26 = 16 * *((int *)a2 + 22);
    v331 = (float32x2_t)v8.u32[0];
    do
    {
      if (v12 < 2)
      {
        v231 = 0;
      }
      else
      {
        v27 = 0;
        v28 = 16;
        do
        {
          v29 = *(int8x16_t *)(v14 + v28 - 16);
          v30 = *(int8x16_t *)(v14 + v28);
          v31 = *((_QWORD *)this + 51);
          v32 = *(float32x4_t *)(v31 + 64);
          v33 = (int32x4_t)vmulq_f32((float32x4_t)v29, v32);
          v34 = (int32x4_t)vmulq_f32((float32x4_t)v30, v32);
          v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v33, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)));
          v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v34, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1)));
          v37 = *(float32x4_t *)(v31 + 160);
          v38 = *(float32x4_t *)(v31 + 176);
          v39 = (float32x2_t)vminq_f32(vmaxq_f32(v36, v37), v38).u64[0];
          v40 = vmul_f32(v8, vmin_f32(vmax_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v37.f32), *(float32x2_t *)v38.f32));
          if (v5)
          {
            v41 = vmin_f32(vmax_f32(vadd_f32(v40, (float32x2_t)0xBF000000BF000000), 0), v332);
            v42 = vcvt_s32_f32(vmin_f32(v41, v330));
            v43 = *((_QWORD *)a2 + 12);
            *(_QWORD *)&v44 = vaddq_f32(*(float32x4_t *)(v43 + 16 * v42.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v43 + 16 * v42.i32[0] + 16), *(float32x4_t *)(v43 + 16 * v42.i32[0])), vsub_f32(v41, vcvt_f32_s32(v42)).f32[0])).u64[0];
            v45 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v8, v39), (float32x2_t)0xBF000000BF000000), 0), v332);
            v46 = vcvt_s32_f32(vmin_f32(v45, v330));
            *(_QWORD *)&v47 = vaddq_f32(*(float32x4_t *)(v43 + 16 * v46.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v43 + 16 * v46.i32[0] + 16), *(float32x4_t *)(v43 + 16 * v46.i32[0])), vsub_f32(v45, vcvt_f32_s32(v46)).f32[0])).u64[0];
          }
          else
          {
            v48 = *((_QWORD *)a2 + 12);
            v44 = *(_OWORD *)(v48 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v40, 0), v332)).i32[0]);
            v47 = *(_OWORD *)(v48 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v8, v39), 0), v332)).i32[0]);
          }
          v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0);
          v50 = vsubq_f32(v35, v49);
          v51 = vsubq_f32(v36, v49);
          v52 = *(float32x4_t *)(v31 + 288);
          v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1);
          v54 = (int8x16_t)vaddq_f32(v53, vmulq_laneq_f32(vmaxq_f32(v50, v52), v38, 2));
          v55 = (int8x16_t)vaddq_f32(v53, vmulq_laneq_f32(vmaxq_f32(v51, v52), v38, 2));
          v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 0);
          v57 = vsubq_f32(v35, v56);
          v58 = vsubq_f32(v36, v56);
          v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1);
          v60 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v58), (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(vminq_f32(v58, v52), v37, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v51), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v47, 0), v55)), v36);
          v61 = vaddq_f32((float32x4_t)v29, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v57), (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(vminq_f32(v57, v52), v37, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v50), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v44, 0), v54)), v35));
          v62 = vaddq_f32((float32x4_t)v30, v60);
          v64 = *(float32x4_t *)(v31 + 192);
          v63 = *(float32x4_t *)(v31 + 208);
          v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 0);
          v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0);
          v67 = (int8x16_t)vminq_f32(vmaxq_f32(v61, v65), v66);
          v68 = (int8x16_t)vminq_f32(vmaxq_f32(v62, v65), v66);
          v69 = vmul_f32(v9, *(float32x2_t *)v67.i8);
          if (v5)
          {
            v70 = vmin_f32(vmax_f32(vadd_f32(v69, (float32x2_t)0xBF000000BF000000), 0), v20);
            v71 = vcvt_s32_f32(vmin_f32(v70, v333));
            v72 = *((_QWORD *)a2 + 14);
            v73 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v71.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v71.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v71.i32[0])), vsub_f32(v70, vcvt_f32_s32(v71)).f32[0]));
            v74 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v9, *(float32x2_t *)v68.i8), (float32x2_t)0xBF000000BF000000), 0), v20);
            v75 = vcvt_s32_f32(vmin_f32(v74, v333));
            v76 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v75.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v75.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v75.i32[0])), vsub_f32(v74, vcvt_f32_s32(v75)).f32[0]));
          }
          else
          {
            v72 = *((_QWORD *)a2 + 14);
            v73 = *(int8x16_t *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v69, 0), v20)).i32[0]);
            v76 = *(int8x16_t *)(v72
                               + 16
                               * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v9, *(float32x2_t *)v68.i8), 0), v20)).i32[0]);
          }
          v77 = *(int8x16_t *)(v31 + 304);
          v78 = vbslq_s8(v77, v73, v67);
          v79 = (int32x4_t)vbslq_s8(v77, v76, v68);
          v80 = (float32x2_t)vrev64q_s32(v79).u64[0];
          v81 = vmul_f32(v9, (float32x2_t)vrev64_s32(*(int32x2_t *)v78.i8));
          if (v5)
          {
            v82 = vmin_f32(vmax_f32(vadd_f32(v81, (float32x2_t)0xBF000000BF000000), 0), v20);
            v83 = vcvt_s32_f32(vmin_f32(v82, v333));
            v84 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v83.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v83.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v83.i32[0])), vsub_f32(v82, vcvt_f32_s32(v83)).f32[0]));
            v85 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v9, v80), (float32x2_t)0xBF000000BF000000), 0), v20);
            v86 = vcvt_s32_f32(vmin_f32(v85, v333));
            v87 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v72 + 16 * v86.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v86.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v86.i32[0])), vsub_f32(v85, vcvt_f32_s32(v86)).f32[0]));
          }
          else
          {
            v84 = *(int32x4_t *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v81, 0), v20)).i32[0]);
            v87 = *(int32x4_t *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v9, v80), 0), v20)).i32[0]);
          }
          v88 = *(int8x16_t *)(v31 + 320);
          v89 = vbslq_s8(v88, (int8x16_t)vrev64q_s32(v84), v78);
          v90 = vbslq_s8(v88, (int8x16_t)vrev64q_s32(v87), (int8x16_t)v79);
          v91 = (float32x2_t)vextq_s8(v90, v90, 8uLL).u64[0];
          v92 = vmul_f32(v9, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
          if (v5)
          {
            v93 = vmin_f32(vmax_f32(vadd_f32(v92, (float32x2_t)0xBF000000BF000000), 0), v20);
            v94 = vcvt_s32_f32(vmin_f32(v93, v333));
            *(_QWORD *)&v95 = vaddq_f32(*(float32x4_t *)(v72 + 16 * v94.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v94.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v94.i32[0])), vsub_f32(v93, vcvt_f32_s32(v94)).f32[0])).u64[0];
            v96 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v9, v91), (float32x2_t)0xBF000000BF000000), 0), v20);
            v97 = vcvt_s32_f32(vmin_f32(v96, v333));
            *(_QWORD *)&v98 = vaddq_f32(*(float32x4_t *)(v72 + 16 * v97.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v72 + 16 * v97.i32[0] + 16), *(float32x4_t *)(v72 + 16 * v97.i32[0])), vsub_f32(v96, vcvt_f32_s32(v97)).f32[0])).u64[0];
          }
          else
          {
            v95 = *(_OWORD *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v92, 0), v20)).i32[0]);
            v98 = *(_OWORD *)(v72 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v9, v91), 0), v20)).i32[0]);
          }
          v89.i64[1] = v95;
          v90.i64[1] = v98;
          v99 = vsubq_f32(v61, v66);
          v100 = vsubq_f32(v62, v66);
          v101 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1);
          v102 = (int8x16_t)vaddq_f32(v101, vmulq_laneq_f32(vmaxq_f32(v99, v52), v63, 2));
          v103 = vbslq_s8((int8x16_t)vcgtq_f32(v52, v100), v90, (int8x16_t)vaddq_f32(v101, vmulq_laneq_f32(vmaxq_f32(v100, v52), v63, 2)));
          v104 = vsubq_f32(v61, v65);
          v105 = vsubq_f32(v62, v65);
          v106 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1);
          v107 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v105), (int8x16_t)vaddq_f32(v106, vmulq_laneq_f32(vminq_f32(v105, v52), v64, 2)), v103), v62);
          v108 = vaddq_f32(v61, vmulq_f32(*(float32x4_t *)v31, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v104), (int8x16_t)vaddq_f32(v106, vmulq_laneq_f32(vminq_f32(v104, v52), v64, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v99), v89, v102)), v61)));
          v109 = vaddq_f32(v62, vmulq_f32(*(float32x4_t *)v31, v107));
          v110 = *(float32x4_t *)(v31 + 224);
          v111 = *(float32x4_t *)(v31 + 240);
          v112 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0);
          v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 0);
          v114 = (int8x16_t)vminq_f32(vmaxq_f32(v108, v112), v113);
          v115 = (int8x16_t)vminq_f32(vmaxq_f32(v109, v112), v113);
          v116 = vmul_f32(v10, *(float32x2_t *)v114.i8);
          if (v5)
          {
            v117 = vmin_f32(vmax_f32(vadd_f32(v116, (float32x2_t)0xBF000000BF000000), 0), v21);
            v118 = vcvt_s32_f32(vmin_f32(v117, v22));
            v119 = *((_QWORD *)a2 + 16);
            v120 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v118.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v118.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v118.i32[0])), vsub_f32(v117, vcvt_f32_s32(v118)).f32[0]));
            v121 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, *(float32x2_t *)v115.i8), (float32x2_t)0xBF000000BF000000), 0), v21);
            v122 = vcvt_s32_f32(vmin_f32(v121, v22));
            v123 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v122.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v122.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v122.i32[0])), vsub_f32(v121, vcvt_f32_s32(v122)).f32[0]));
          }
          else
          {
            v119 = *((_QWORD *)a2 + 16);
            v120 = *(int8x16_t *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v116, 0), v21)).i32[0]);
            v123 = *(int8x16_t *)(v119
                                + 16
                                * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, *(float32x2_t *)v115.i8), 0), v21)).i32[0]);
          }
          v124 = vmvnq_s8(v77);
          v125 = vorrq_s8(vandq_s8(v77, v120), vandq_s8(v114, v124));
          v126 = (int32x4_t)vorrq_s8(vandq_s8(v77, v123), vandq_s8(v115, v124));
          v127 = (float32x2_t)vrev64q_s32(v126).u64[0];
          v128 = vmul_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v125.i8));
          if (v5)
          {
            v129 = vmin_f32(vmax_f32(vadd_f32(v128, (float32x2_t)0xBF000000BF000000), 0), v21);
            v130 = vcvt_s32_f32(vmin_f32(v129, v22));
            v131 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v130.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v130.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v130.i32[0])), vsub_f32(v129, vcvt_f32_s32(v130)).f32[0]));
            v132 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, v127), (float32x2_t)0xBF000000BF000000), 0), v21);
            v133 = vcvt_s32_f32(vmin_f32(v132, v22));
            v134 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v119 + 16 * v133.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v133.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v133.i32[0])), vsub_f32(v132, vcvt_f32_s32(v133)).f32[0]));
          }
          else
          {
            v131 = *(int32x4_t *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v128, 0), v21)).i32[0]);
            v134 = *(int32x4_t *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, v127), 0), v21)).i32[0]);
          }
          v135 = vmvnq_s8(v88);
          v136 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v131), v88), vandq_s8(v125, v135));
          v137 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v134), v88), vandq_s8((int8x16_t)v126, v135));
          v138 = (float32x2_t)vextq_s8(v137, v137, 8uLL).u64[0];
          v139 = vmul_f32(v10, (float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL));
          if (v5)
          {
            v140 = vmin_f32(vmax_f32(vadd_f32(v139, (float32x2_t)0xBF000000BF000000), 0), v21);
            v141 = vcvt_s32_f32(vmin_f32(v140, v22));
            *(_QWORD *)&v142 = vaddq_f32(*(float32x4_t *)(v119 + 16 * v141.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v141.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v141.i32[0])), vsub_f32(v140, vcvt_f32_s32(v141)).f32[0])).u64[0];
            v143 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, v138), (float32x2_t)0xBF000000BF000000), 0), v21);
            v144 = vcvt_s32_f32(vmin_f32(v143, v22));
            *(_QWORD *)&v145 = vaddq_f32(*(float32x4_t *)(v119 + 16 * v144.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v119 + 16 * v144.i32[0] + 16), *(float32x4_t *)(v119 + 16 * v144.i32[0])), vsub_f32(v143, vcvt_f32_s32(v144)).f32[0])).u64[0];
          }
          else
          {
            v142 = *(_OWORD *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v139, 0), v21)).i32[0]);
            v145 = *(_OWORD *)(v119 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, v138), 0), v21)).i32[0]);
          }
          v136.i64[1] = v142;
          v137.i64[1] = v145;
          v146 = vsubq_f32(v108, v113);
          v147 = vsubq_f32(v109, v113);
          v148 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1);
          v149 = vbslq_s8((int8x16_t)vcgtq_f32(v52, v146), v136, (int8x16_t)vaddq_f32(v148, vmulq_laneq_f32(vmaxq_f32(v146, v52), v111, 2)));
          v150 = vbslq_s8((int8x16_t)vcgtq_f32(v52, v147), v137, (int8x16_t)vaddq_f32(v148, vmulq_laneq_f32(vmaxq_f32(v147, v52), v111, 2)));
          v151 = vsubq_f32(v108, v112);
          v152 = vsubq_f32(v109, v112);
          v153 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1);
          v154 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v151), (int8x16_t)vaddq_f32(v153, vmulq_laneq_f32(vminq_f32(v151, v52), v110, 2)), v149), v108);
          v155 = *(float32x4_t *)(v31 + 16);
          v156 = vaddq_f32(v108, vmulq_f32(v155, v154));
          v157 = vaddq_f32(v109, vmulq_f32(v155, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v152), (int8x16_t)vaddq_f32(v153, vmulq_laneq_f32(vminq_f32(v152, v52), v110, 2)), v150), v109)));
          v158 = *(float32x4_t *)(v31 + 256);
          v159 = *(float32x4_t *)(v31 + 272);
          v160 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 0);
          v161 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.f32, 0);
          v162 = (int8x16_t)vminq_f32(vmaxq_f32(v156, v160), v161);
          v163 = (int8x16_t)vminq_f32(vmaxq_f32(v157, v160), v161);
          v164 = vmul_f32(v11, *(float32x2_t *)v162.i8);
          if (v5)
          {
            v165 = vmin_f32(vmax_f32(vadd_f32(v164, (float32x2_t)0xBF000000BF000000), 0), v23);
            v166 = vcvt_s32_f32(vmin_f32(v165, v24));
            v167 = *((_QWORD *)a2 + 18);
            v168 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v166.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v166.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v166.i32[0])), vsub_f32(v165, vcvt_f32_s32(v166)).f32[0]));
            v169 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, *(float32x2_t *)v163.i8), (float32x2_t)0xBF000000BF000000), 0), v23);
            v170 = vcvt_s32_f32(vmin_f32(v169, v24));
            v171 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v170.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v170.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v170.i32[0])), vsub_f32(v169, vcvt_f32_s32(v170)).f32[0]));
          }
          else
          {
            v167 = *((_QWORD *)a2 + 18);
            v168 = *(int8x16_t *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v164, 0), v23)).i32[0]);
            v171 = *(int8x16_t *)(v167
                                + 16
                                * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, *(float32x2_t *)v163.i8), 0), v23)).i32[0]);
          }
          v172 = vorrq_s8(vandq_s8(v77, v168), vandq_s8(v162, v124));
          v173 = (int32x4_t)vorrq_s8(vandq_s8(v77, v171), vandq_s8(v163, v124));
          v174 = (float32x2_t)vrev64q_s32(v173).u64[0];
          v175 = vmul_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v172.i8));
          if (v5)
          {
            v176 = vmin_f32(vmax_f32(vadd_f32(v175, (float32x2_t)0xBF000000BF000000), 0), v23);
            v177 = vcvt_s32_f32(vmin_f32(v176, v24));
            v178 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v177.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v177.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v177.i32[0])), vsub_f32(v176, vcvt_f32_s32(v177)).f32[0]));
            v179 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, v174), (float32x2_t)0xBF000000BF000000), 0), v23);
            v180 = vcvt_s32_f32(vmin_f32(v179, v24));
            v181 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v167 + 16 * v180.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v180.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v180.i32[0])), vsub_f32(v179, vcvt_f32_s32(v180)).f32[0]));
          }
          else
          {
            v178 = *(int32x4_t *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v175, 0), v23)).i32[0]);
            v181 = *(int32x4_t *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, v174), 0), v23)).i32[0]);
          }
          v182 = vmulq_f32(v32, v61);
          v183 = vmulq_f32(v32, v62);
          v184 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v182, 1), vaddq_f32(v182, (float32x4_t)vrev64q_s32((int32x4_t)v182)));
          v185 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v183, 1), vaddq_f32(v183, (float32x4_t)vrev64q_s32((int32x4_t)v183)));
          v186 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v178), v88), vandq_s8(v172, v135));
          v187 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v181), v88), vandq_s8((int8x16_t)v173, v135));
          v188 = (float32x2_t)vextq_s8(v187, v187, 8uLL).u64[0];
          v189 = vmul_f32(v11, (float32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL));
          if (v5)
          {
            v190 = vmin_f32(vmax_f32(vadd_f32(v189, (float32x2_t)0xBF000000BF000000), 0), v23);
            v191 = vcvt_s32_f32(vmin_f32(v190, v24));
            *(_QWORD *)&v192 = vaddq_f32(*(float32x4_t *)(v167 + 16 * v191.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v191.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v191.i32[0])), vsub_f32(v190, vcvt_f32_s32(v191)).f32[0])).u64[0];
            v193 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, v188), (float32x2_t)0xBF000000BF000000), 0), v23);
            v194 = vcvt_s32_f32(vmin_f32(v193, v24));
            *(_QWORD *)&v195 = vaddq_f32(*(float32x4_t *)(v167 + 16 * v194.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 + 16 * v194.i32[0] + 16), *(float32x4_t *)(v167 + 16 * v194.i32[0])), vsub_f32(v193, vcvt_f32_s32(v194)).f32[0])).u64[0];
          }
          else
          {
            v192 = *(_OWORD *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v189, 0), v23)).i32[0]);
            v195 = *(_OWORD *)(v167 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, v188), 0), v23)).i32[0]);
          }
          v8 = v331;
          v186.i64[1] = v192;
          v187.i64[1] = v195;
          v196 = vsubq_f32(v156, v161);
          v197 = vsubq_f32(v157, v161);
          v198 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.f32, 1);
          v199 = vsubq_f32(v156, v160);
          v200 = vsubq_f32(v157, v160);
          v201 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1);
          v202 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v199), (int8x16_t)vaddq_f32(v201, vmulq_laneq_f32(vminq_f32(v199, v52), v158, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v196), v186, (int8x16_t)vaddq_f32(v198, vmulq_laneq_f32(vmaxq_f32(v196, v52), v159, 2)))), v156);
          v203 = *(float32x4_t *)(v31 + 32);
          v204 = (int8x16_t)vaddq_f32(v156, vmulq_f32(v203, v202));
          v205 = vaddq_f32(v157, vmulq_f32(v203, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v200), (int8x16_t)vaddq_f32(v201, vmulq_laneq_f32(vminq_f32(v200, v52), v158, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v52, v197), v187, (int8x16_t)vaddq_f32(v198, vmulq_laneq_f32(vmaxq_f32(v197, v52), v159, 2)))), v157)));
          v206 = vmulq_f32(v32, (float32x4_t)v204);
          v207 = vmulq_f32(v32, v205);
          v208 = (int8x16_t)vcgtq_f32(v52, *(float32x4_t *)(v31 + 48));
          v209 = vbslq_s8(v208, v184, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v206, 1), vaddq_f32(v206, (float32x4_t)vrev64q_s32((int32x4_t)v206))));
          v210 = vbslq_s8(v208, v185, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v207, 1), vaddq_f32(v207, (float32x4_t)vrev64q_s32((int32x4_t)v207))));
          v211 = *(float32x4_t *)(v31 + 80);
          v212 = *(float32x4_t *)(v31 + 96);
          v213 = (int32x4_t)vmulq_f32(v211, (float32x4_t)v204);
          v214 = (int32x4_t)vmulq_f32(v211, v205);
          v209.i64[0] = vorrq_s8(vandq_s8(v209, v77), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v213, v204, 4uLL), vaddq_f32((float32x4_t)v213, (float32x4_t)vrev64q_s32(v213))), v124)).u64[0];
          v210.i64[0] = vorrq_s8(vandq_s8(v210, v77), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v214, v204, 4uLL), vaddq_f32((float32x4_t)v214, (float32x4_t)vrev64q_s32(v214))), v124)).u64[0];
          v215 = (int8x16_t)vmulq_f32(v212, (float32x4_t)v204);
          v216 = (int8x16_t)vmulq_f32(v212, v205);
          v209.i64[1] = vaddq_f32(*(float32x4_t *)&v215, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v215, 0), (float32x4_t)vextq_s8(v215, v215, 0xCuLL))).i64[1];
          v210.i64[1] = vaddq_f32(*(float32x4_t *)&v216, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v216, 0), (float32x4_t)vextq_s8(v215, v216, 0xCuLL))).i64[1];
          v217 = *(float32x4_t *)(v31 + 112);
          v218 = *(float32x4_t *)(v31 + 128);
          v219 = (int32x4_t)vmulq_f32(v217, (float32x4_t)v209);
          v220 = vmulq_f32(v217, (float32x4_t)v210);
          v221 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v220, 1), vaddq_f32(v220, (float32x4_t)vrev64q_s32((int32x4_t)v220)));
          v222 = (int32x4_t)vmulq_f32(v218, (float32x4_t)v209);
          v223 = (int32x4_t)vmulq_f32(v218, (float32x4_t)v210);
          v219.i64[0] = vorrq_s8(vandq_s8(v77, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v219, 1), vaddq_f32((float32x4_t)v219, (float32x4_t)vrev64q_s32(v219)))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v222, v221, 4uLL), vaddq_f32((float32x4_t)v222, (float32x4_t)vrev64q_s32(v222))), v124)).u64[0];
          v224 = vorrq_s8(vandq_s8(v77, v221), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v223, v221, 4uLL), vaddq_f32((float32x4_t)v223, (float32x4_t)vrev64q_s32(v223))), v124));
          v225 = *(float32x4_t *)(v31 + 144);
          v226 = (int8x16_t)vmulq_f32(v225, (float32x4_t)v209);
          v227 = (int8x16_t)vmulq_f32(v225, (float32x4_t)v210);
          v219.i64[1] = vaddq_f32(*(float32x4_t *)&v226, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v226, 0), (float32x4_t)vextq_s8(v224, v226, 0xCuLL))).i64[1];
          v224.i64[1] = vaddq_f32(*(float32x4_t *)&v227, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v227, 0), (float32x4_t)vextq_s8(v224, v227, 0xCuLL))).i64[1];
          v228 = vbslq_s8(*(int8x16_t *)(v31 + 336), v29, (int8x16_t)v219);
          v229 = vbslq_s8(*(int8x16_t *)(v31 + 336), v30, v224);
          v230 = (int8x16_t *)(v13 + v28);
          v230[-1] = v228;
          *v230 = v229;
          v27 -= 2;
          v28 += 32;
        }
        while (v12 + v27 > 1);
        v231 = -v27;
      }
      if ((int)v231 < v12)
      {
        v232 = *(int8x16_t *)(v14 + 16 * v231);
        v233 = *((_QWORD *)this + 51);
        v234 = *(float32x4_t *)(v233 + 64);
        v235 = (int32x4_t)vmulq_f32((float32x4_t)v232, v234);
        v236 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v235, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.i8, 1)));
        v238 = *(float32x4_t *)(v233 + 160);
        v237 = *(float32x4_t *)(v233 + 176);
        v239 = vmul_f32(v8, vmin_f32(vmax_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v238.f32), *(float32x2_t *)v237.f32));
        if (v5)
        {
          v240 = vmin_f32(vmax_f32(vadd_f32(v239, (float32x2_t)0xBF000000BF000000), 0), v332);
          v241 = vcvt_s32_f32(vmin_f32(v240, v330));
          v242 = (float32x4_t *)(*((_QWORD *)a2 + 12) + 16 * v241.i32[0]);
          *(_QWORD *)&v243 = vaddq_f32(*v242, vmulq_n_f32(vsubq_f32(v242[1], *v242), vsub_f32(v240, vcvt_f32_s32(v241)).f32[0])).u64[0];
        }
        else
        {
          v243 = *(_OWORD *)(*((_QWORD *)a2 + 12) + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v239, 0), v332)).i32[0]);
        }
        v244 = vsubq_f32(v236, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 0));
        v245 = *(float32x4_t *)(v233 + 288);
        v246 = vsubq_f32(v236, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.f32, 0));
        v247 = *(float32x4_t *)(v233 + 192);
        v248 = *(float32x4_t *)(v233 + 208);
        v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v247.f32, 0);
        v250 = vaddq_f32((float32x4_t)v232, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v246), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.f32, 1), vmulq_laneq_f32(vminq_f32(v246, v245), v238, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v244), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v243, 0), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 1), vmulq_laneq_f32(vmaxq_f32(v244, v245), v237, 2)))), v236));
        v251 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 0);
        v252 = (int8x16_t)vminq_f32(vmaxq_f32(v250, v249), v251);
        v253 = vmul_f32(v9, *(float32x2_t *)v252.i8);
        if (v5)
        {
          v254 = vmin_f32(vmax_f32(vadd_f32(v253, (float32x2_t)0xBF000000BF000000), 0), v20);
          v255 = vcvt_s32_f32(vmin_f32(v254, v333));
          v256 = *((_QWORD *)a2 + 14);
          v257 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v256 + 16 * v255.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v256 + 16 * v255.i32[0] + 16), *(float32x4_t *)(v256 + 16 * v255.i32[0])), vsub_f32(v254, vcvt_f32_s32(v255)).f32[0]));
        }
        else
        {
          v256 = *((_QWORD *)a2 + 14);
          v257 = *(int8x16_t *)(v256 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v253, 0), v20)).i32[0]);
        }
        v258 = *(int8x16_t *)(v233 + 304);
        v259 = vbslq_s8(v258, v257, v252);
        v260 = vmul_f32(v9, (float32x2_t)vrev64_s32(*(int32x2_t *)v259.i8));
        if (v5)
        {
          v261 = vmin_f32(vmax_f32(vadd_f32(v260, (float32x2_t)0xBF000000BF000000), 0), v20);
          v262 = vcvt_s32_f32(vmin_f32(v261, v333));
          v263 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v256 + 16 * v262.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v256 + 16 * v262.i32[0] + 16), *(float32x4_t *)(v256 + 16 * v262.i32[0])), vsub_f32(v261, vcvt_f32_s32(v262)).f32[0]));
        }
        else
        {
          v263 = *(int32x4_t *)(v256 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v260, 0), v20)).i32[0]);
        }
        v264 = *(int8x16_t *)(v233 + 320);
        v265 = vbslq_s8(v264, (int8x16_t)vrev64q_s32(v263), v259);
        v266 = vmul_f32(v9, (float32x2_t)*(_OWORD *)&vextq_s8(v265, v265, 8uLL));
        if (v5)
        {
          v267 = vmin_f32(vmax_f32(vadd_f32(v266, (float32x2_t)0xBF000000BF000000), 0), v20);
          v268 = vcvt_s32_f32(vmin_f32(v267, v333));
          *(_QWORD *)&v269 = vaddq_f32(*(float32x4_t *)(v256 + 16 * v268.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v256 + 16 * v268.i32[0] + 16), *(float32x4_t *)(v256 + 16 * v268.i32[0])), vsub_f32(v267, vcvt_f32_s32(v268)).f32[0])).u64[0];
        }
        else
        {
          v269 = *(_OWORD *)(v256 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v266, 0), v20)).i32[0]);
        }
        v265.i64[1] = v269;
        v270 = vmvnq_s8(v258);
        v271 = vsubq_f32(v250, v251);
        v272 = vsubq_f32(v250, v249);
        v273 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v272), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v247.f32, 1), vmulq_laneq_f32(vminq_f32(v272, v245), v247, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v271), v265, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 1), vmulq_laneq_f32(vmaxq_f32(v271, v245), v248, 2)))), v250);
        v275 = *(float32x4_t *)(v233 + 224);
        v274 = *(float32x4_t *)(v233 + 240);
        v276 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v275.f32, 0);
        v277 = vaddq_f32(v250, vmulq_f32(*(float32x4_t *)v233, v273));
        v278 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v274.f32, 0);
        v279 = (int8x16_t)vminq_f32(vmaxq_f32(v277, v276), v278);
        v280 = vmul_f32(v10, *(float32x2_t *)v279.i8);
        if (v5)
        {
          v281 = vmin_f32(vmax_f32(vadd_f32(v280, (float32x2_t)0xBF000000BF000000), 0), v21);
          v282 = vcvt_s32_f32(vmin_f32(v281, v22));
          v283 = *((_QWORD *)a2 + 16);
          v284 = vorrq_s8(vandq_s8(v258, (int8x16_t)vaddq_f32(*(float32x4_t *)(v283 + 16 * v282.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v283 + 16 * v282.i32[0] + 16), *(float32x4_t *)(v283 + 16 * v282.i32[0])), vsub_f32(v281, vcvt_f32_s32(v282)).f32[0]))), vandq_s8(v279, v270));
          v285 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v284.i8)), (float32x2_t)0xBF000000BF000000), 0), v21);
          v286 = vcvt_s32_f32(vmin_f32(v285, v22));
          v287 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v283 + 16 * v286.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v283 + 16 * v286.i32[0] + 16), *(float32x4_t *)(v283 + 16 * v286.i32[0])), vsub_f32(v285, vcvt_f32_s32(v286)).f32[0]));
        }
        else
        {
          v283 = *((_QWORD *)a2 + 16);
          v284 = vorrq_s8(vandq_s8(*(int8x16_t *)(v283 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v280, 0), v21)).i32[0]), v258), vandq_s8(v279, v270));
          v287 = *(int32x4_t *)(v283
                              + 16
                              * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v10, (float32x2_t)vrev64_s32(*(int32x2_t *)v284.i8)), 0), v21)).i32[0]);
        }
        v288 = vmvnq_s8(v264);
        v289 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v287), v264), vandq_s8(v284, v288));
        v290 = vmul_f32(v10, (float32x2_t)*(_OWORD *)&vextq_s8(v289, v289, 8uLL));
        if (v5)
        {
          v291 = vmin_f32(vmax_f32(vadd_f32(v290, (float32x2_t)0xBF000000BF000000), 0), v21);
          v292 = vcvt_s32_f32(vmin_f32(v291, v22));
          *(_QWORD *)&v293 = vaddq_f32(*(float32x4_t *)(v283 + 16 * v292.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v283 + 16 * v292.i32[0] + 16), *(float32x4_t *)(v283 + 16 * v292.i32[0])), vsub_f32(v291, vcvt_f32_s32(v292)).f32[0])).u64[0];
        }
        else
        {
          v293 = *(_OWORD *)(v283 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v290, 0), v21)).i32[0]);
        }
        v289.i64[1] = v293;
        v294 = vsubq_f32(v277, v278);
        v295 = vsubq_f32(v277, v276);
        v296 = vmulq_f32(*(float32x4_t *)(v233 + 16), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v295), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v275.f32, 1), vmulq_laneq_f32(vminq_f32(v295, v245), v275, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v294), v289, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v274.f32, 1), vmulq_laneq_f32(vmaxq_f32(v294, v245), v274, 2)))), v277));
        v298 = *(float32x4_t *)(v233 + 256);
        v297 = *(float32x4_t *)(v233 + 272);
        v299 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v298.f32, 0);
        v300 = vaddq_f32(v277, v296);
        v301 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v297.f32, 0);
        v302 = (int8x16_t)vminq_f32(vmaxq_f32(v300, v299), v301);
        v303 = vmul_f32(v11, *(float32x2_t *)v302.i8);
        if (v5)
        {
          v304 = vmin_f32(vmax_f32(vadd_f32(v303, (float32x2_t)0xBF000000BF000000), 0), v23);
          v305 = vcvt_s32_f32(vmin_f32(v304, v24));
          v306 = *((_QWORD *)a2 + 18);
          v307 = vorrq_s8(vandq_s8(v258, (int8x16_t)vaddq_f32(*(float32x4_t *)(v306 + 16 * v305.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v306 + 16 * v305.i32[0] + 16), *(float32x4_t *)(v306 + 16 * v305.i32[0])), vsub_f32(v304, vcvt_f32_s32(v305)).f32[0]))), vandq_s8(v302, v270));
          v308 = vmin_f32(vmax_f32(vadd_f32(vmul_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v307.i8)), (float32x2_t)0xBF000000BF000000), 0), v23);
          v309 = vcvt_s32_f32(vmin_f32(v308, v24));
          v310 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v306 + 16 * v309.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v306 + 16 * v309.i32[0] + 16), *(float32x4_t *)(v306 + 16 * v309.i32[0])), vsub_f32(v308, vcvt_f32_s32(v309)).f32[0]));
        }
        else
        {
          v306 = *((_QWORD *)a2 + 18);
          v307 = vorrq_s8(vandq_s8(*(int8x16_t *)(v306 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v303, 0), v23)).i32[0]), v258), vandq_s8(v302, v270));
          v310 = *(int32x4_t *)(v306
                              + 16
                              * vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v11, (float32x2_t)vrev64_s32(*(int32x2_t *)v307.i8)), 0), v23)).i32[0]);
        }
        v311 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v310), v264), vandq_s8(v307, v288));
        v312 = vmul_f32(v11, (float32x2_t)*(_OWORD *)&vextq_s8(v311, v311, 8uLL));
        if (v5)
        {
          v313 = vmin_f32(vmax_f32(vadd_f32(v312, (float32x2_t)0xBF000000BF000000), 0), v23);
          v314 = vcvt_s32_f32(vmin_f32(v313, v24));
          *(_QWORD *)&v315 = vaddq_f32(*(float32x4_t *)(v306 + 16 * v314.i32[0]), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v306 + 16 * v314.i32[0] + 16), *(float32x4_t *)(v306 + 16 * v314.i32[0])), vsub_f32(v313, vcvt_f32_s32(v314)).f32[0])).u64[0];
        }
        else
        {
          v315 = *(_OWORD *)(v306 + 16 * vcvt_s32_f32(vmin_f32(vmax_f32(v312, 0), v23)).i32[0]);
        }
        v316 = vmulq_f32(v234, v250);
        v311.i64[1] = v315;
        v317 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v316, 1), vaddq_f32(v316, (float32x4_t)vrev64q_s32((int32x4_t)v316)));
        v318 = vsubq_f32(v300, v301);
        v319 = vsubq_f32(v300, v299);
        v320 = vaddq_f32(v300, vmulq_f32(*(float32x4_t *)(v233 + 32), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v245, v319), (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v298.f32, 1), vmulq_laneq_f32(vminq_f32(v319, v245), v298, 2)), vbslq_s8((int8x16_t)vcgtq_f32(v245, v318), v311, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v297.f32, 1), vmulq_laneq_f32(vmaxq_f32(v318, v245), v297, 2)))), v300)));
        v321 = vmulq_f32(v234, v320);
        v322 = vbslq_s8((int8x16_t)vcgtq_f32(v245, *(float32x4_t *)(v233 + 48)), v317, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v321, 1), vaddq_f32(v321, (float32x4_t)vrev64q_s32((int32x4_t)v321))));
        v323 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v233 + 80), v320);
        v324 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v233 + 96), v320);
        v325 = vorrq_s8(vandq_s8(v258, v322), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v323, v322, 4uLL), vaddq_f32((float32x4_t)v323, (float32x4_t)vrev64q_s32(v323))), v270));
        v325.i64[1] = vaddq_f32(*(float32x4_t *)&v324, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v324, 0), (float32x4_t)vextq_s8(v325, v324, 0xCuLL))).i64[1];
        v326 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v233 + 112), (float32x4_t)v325);
        v327 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v233 + 128), (float32x4_t)v325);
        v326.i64[0] = vorrq_s8(vandq_s8(v258, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v326, 1), vaddq_f32((float32x4_t)v326, (float32x4_t)vrev64q_s32(v326)))), vandq_s8((int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v327, v325, 4uLL), vaddq_f32((float32x4_t)v327, (float32x4_t)vrev64q_s32(v327))), v270)).u64[0];
        v328 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v233 + 144), (float32x4_t)v325);
        v326.i64[1] = vaddq_f32(*(float32x4_t *)&v328, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v328, 0), (float32x4_t)vextq_s8(v328, v328, 0xCuLL))).i64[1];
        *(int8x16_t *)(v13 + 16 * v231) = vbslq_s8(*(int8x16_t *)(v233 + 336), v232, (int8x16_t)v326);
      }
      v14 += v26;
      v13 += v25;
      ++v7;
    }
    while (v7 != v6);
  }
  return 0;
}

